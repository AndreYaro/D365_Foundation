<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchBookReportExcel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
/// <summary>
/// The class <c>PurchBookReportExcel_RU</c> used for output of purchase book to excel.
/// </summary>
class PurchBookReportExcel_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    Dialog                  dialog;
    SalesPurchBookRecId_RU  bookRecId;
    QueryRun                queryRun;
    NoYes                   exportToXml;
    NoYes                   groupByFactures;
    NoYes                   groupCorrect;
    FromDate                fromDate;
    ToDate                  toDate;
    ERFormatMappingId       formatMappingId;

    Counter                 lineNo, pageNum, numOfLines;

    PurchBookTrans_RU       purchBookTrans;
    SalesBookTrans_RU       salesBookTrans;

    DialogField             groupByFacturesField;
    DialogField             groupCorrectField;
    DialogField             periodCodeField;
    DialogField             fromDateField;
    DialogField             toDateField;
    DialogField             exportToXmlDlg;

    BookDateNumDelimiter_RU bookDateNumDelimiter;

    TmpLedgerVATDeclaratoinHeader_RU header;
    TmpLedgerVATDeclaratoinLine_RU line;
    PurchBookTransTraceableInfo_RU lineGTDInfo;

    protected const int dialogPeriodCodeFieldNo = 900;
    protected const int currentVersion  = 4;
    protected const str reportHeader    = 'REPORTHEADER';
    protected const str pageHeader      = 'PAGEHEADER';
    protected const str body            = 'BODY';
    protected const str reportFooter    = 'REPORTFOOTER';

    protected const int widthColumns    = 108;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const real minHeight = 21.00;

        int rowCount;
        str factureStr = this.getFactureStr(line);

        rowCount = strLen(strKeep(factureStr, '\n'));

        return max(
            max(
                document.getNamedRangeHeightWrapped('AccountName', line.SellerBuyerName),
                document.getNamedRangeHeightWrapped('VendINNKPP', line.sellerBuyerINNKPPStr()),
                document.getNamedRangeHeightWrapped('ComissionAgentName', line.AgentName),
                document.getNamedRangeHeightWrapped('ComissionAgentINNKPP', line.agentINNKPPStr()),
                document.getNamedRangeHeightWrapped('CurrencyCodeName', line.currencyNameCode()),
                minHeight),
        (rowCount + 1) * 9);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        #VATTransitionPeriod_RU

        curWorksheetNum = 1;
        widthCols = widthColumns;
        document.setWorksheetSpans(widthCols);

        pageHeight = document.getPageHeight(curWorksheetNum);

        this.initSectionMap();

        this.initBookDateNumDelimiter();

        this.prepareDataAndExportToXml();

        numOfLines = this.getNumOfLines();

        this.execute(reportHeader);
        this.execute(pageHeader);

        if (this.mustPrintIncomingTotals())
        {
            this.printIncomingTotals();
        }

        while select line
                order by LineNumber
        {
            lineNo++;

            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);

                pageNum++;
                currentHeight = 0;
                this.execute(pageHeader);
            }

            this.execute(body);
        }

        this.execute(reportFooter);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        if (dialog)
        {
            dialog.addGroup("@SYS28007");
            groupByFacturesField = dialog.addFieldValue(enumStr(NoYes), groupByFactures, "@GLS106865");
            groupCorrectField    = dialog.addFieldValue(enumStr(NoYes), groupCorrect, "@GLS112480", "@GLS112482");

            dialog.addGroup("@SYS23339");
            periodCodeField = new DialogField(dialog, extendedTypeStr(DateCode), dialogPeriodCodeFieldNo);
            dialog.addCtrlDialogField(periodCodeField.name());
            periodCodeField.init(dialog);

            fromDateField = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
            toDateField   = dialog.addFieldValue(extendedTypeStr(ToDate), toDate);
            exportToXmlDlg= dialog.addFieldValue(enumStr(NoYes), exportToXml, "@SYS114646");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used for allowing overriding method on dialog form controls
    /// </summary>
    /// <param name="_dialog">
    /// Dialog for which overriding should be allowed
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'Kniga pokupok';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        PurchBookTable_RU purchBookTable = PurchBookTable_RU::find(bookRecId);

        return '_' + date2str(purchBookTable.getFromDate(), 321, 2, 0, 2, 0, 2, DateFlags::None) +
           '_' + date2str(purchBookTable.getToDate()  , 321, 2, 0, 2, 0, 2, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        this.insertValueToSection('LineNo', line.LineNumber);
        this.insertValueToSection('OperationTypeCode', line.OperationTypeCodes);
        this.insertValueToSection('FactureNumDate', this.getFactureStr(line));
        this.insertValueToSection('RevisionNumDate', this.getFactureStrRevision(line));
        this.insertValueToSection('CorrFactureNumDate', this.getFactureStrCorr(line));
        this.insertValueToSection('CorrFactureRevisionNumDate', this.getFactureStrCorrRevision(line));
        this.insertValueToSection('FacturePaymDate', this.getPaymNumDateDocStr(line));
        this.insertValueToSection('DeliveryDate', line.DeliveryDate);
        this.insertValueToSection('AccountName', line.SellerBuyerName);
        this.insertValueToSection('VendINNKPP', line.sellerBuyerINNKPPStr());
        this.insertValueToSection('ComissionAgentName', line.AgentName);
        this.insertValueToSection('ComissionAgentINNKPP', line.agentINNKPPStr());
        this.insertValueToSection('CurrencyCodeName', line.currencyNameCode());

        if (line.CurrencyCode == CompanyInfoHelper::standardCurrency())
        {
            this.insertValueToSection('AmountInclVAT', line.AmountInclVAT);
        }
        else
        {
            this.insertValueToSection('AmountInclVAT', line.AmountCurInclVAT);
        }

        this.insertValueToSection('VATAmount', line.TaxAmountVAT);

        this.fillGTDLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillGTDLines</Name>
				<Source><![CDATA[
    private void fillGTDLines()
    {
        str strGTDNumber, strInventoryUnit, strUnitQuantity, strPurchaseAmount;

        while select lineGTDInfo
            where lineGTDInfo.PurchBookTable_RU == line.PurchBookTable_RU
                && lineGTDInfo.PurchBookTransLineNum == line.PurchBookLineNum
        {
            strGTDNumber += (strGTDNumber != '') ? '\n' : '';
            strGTDNumber += (lineGTDInfo.GTDTraceabilityNumber != '') ? lineGTDInfo.GTDTraceabilityNumber : '-';

            strInventoryUnit += (strInventoryUnit != '') ? '\n' : '';
            strInventoryUnit += (lineGTDInfo.InventoryUnit != '') ? lineGTDInfo.InventoryUnit : '-';

            strUnitQuantity += (strUnitQuantity != '') ? '\n' : '';
            strUnitQuantity += (real2int(lineGTDInfo.InventoryUnitQty) != 0) ? strFmt('%1', real2int(lineGTDInfo.InventoryUnitQty)) : '-';

            strPurchaseAmount += (strPurchaseAmount != '') ? '\n' : '';
            strPurchaseAmount += (real2int(lineGTDInfo.PurchAmount) != 0) ? strFmt('%1', real2int(lineGTDInfo.PurchAmount)) : '-';
        }

        if (strGTDNumber == '' && line.CountryGTD != '')
        {
            strGTDNumber += line.CountryGTD;
        }

        this.insertValueToSection('CountryGTD', strGTDNumber);
        this.insertValueToSection('InventoryUnit', strInventoryUnit);
        this.insertValueToSection('UnitQuantity', strUnitQuantity);
        this.insertValueToSection('PurchaseAmount', strPurchaseAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case reportHeader:
                this.fillReportHeader();
                break;
            case pageHeader:
                this.fillPageHeader();
                break;
            case body:
                this.fillBody();
                break;
            case reportFooter:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data
    /// </summary>
    protected void fillPageHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// fills report footer section with data
    /// </summary>
    protected void fillReportFooter()
    {
        this.insertValueToSection('TotalVATAmount' , header.VATAmount);
        this.insertValueToSection('DirectorName' , OfficialsTable_RU::nameDirector());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
        CompanyInfo companyInfo = CompanyInfo::findDataArea(curext());

        this.insertValueToSection('CompanyName', companyInfo.Name);
        this.insertValueToSection('INNKPP', companyInfo.partyINNasOfDate_RU(toDate) +
                                       (companyInfo.partyKPPasOfDate_RU(toDate) ? ' / ' + 
                                        companyInfo.partyKPPasOfDate_RU(toDate) : ""));
        this.insertValueToSection('FromDate', fromDate);
        this.insertValueToSection('ToDate'  , toDate);

    }

]]></Source>
			</Method>
			<Method>
				<Name>fld900_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method called when period code field modified and changes valus in from date field and to date field
    /// </summary>
    /// <returns>
    /// True if control value modified successfully; otherwise false
    /// </returns>
    private boolean fld900_1_modified()
    {
        LedgerPeriodCode    ledgerPeriodCode;
        Object              control;
        boolean             ret;
        ;

        control = dialog.formRun().controlCallingMethod();
        ret = control.modified();

        if (ret && periodCodeField.value())
        {
            ledgerPeriodCode = LedgerPeriodCode::find(periodCodeField.value());
            fromDateField.value(ledgerPeriodCode.fromDate());
            toDateField.value(ledgerPeriodCode.toDate());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns description string for facture.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Description string.
    /// </returns>
    protected str getFactureStr(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return strFmt('%1%2%3', _line.FactureNum, bookDateNumDelimiter, _line.FactureDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStrCorr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed to "Corrected facture number and date" field.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Value which should be printed to "Corrected facture number and date" field.
    /// </returns>
    protected str getFactureStrCorr(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.CorrFactureNum ? strfmt('%1%2%3', _line.CorrFactureNum, bookDateNumDelimiter, _line.CorrFactureDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStrCorrRevision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed to "Revision facture number and date" field if there's
    /// a revision of corrected facture.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Value which should be printed to "Revision facture number and date" field.
    /// </returns>
    protected str getFactureStrCorrRevision(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.CorrFactureCorrRevision ? strfmt('%1%2%3', _line.CorrFactureCorrRevision, bookDateNumDelimiter, _line.CorrFactureCorrDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStrRevision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed to "Revision facture number and date" field.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Value which should be printed to "Revision facture number and date" field.
    /// </returns>
    protected str getFactureStrRevision(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.FactureCorrRevision ? strfmt('%1%2%3', _line.FactureCorrRevision, bookDateNumDelimiter, _line.FactureCorrDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets values entered to dialog form
    /// </summary>
    /// <returns>
    /// true if data passed validation; otherwise false
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            groupByFactures = groupByFacturesField.value();
            groupCorrect    = groupCorrectField.value();
            fromDate        = fromDateField.value();
            toDate          = toDateField.value();
            exportToXml     = exportToXmlDlg.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of lines in report
    /// </summary>
    /// <returns>
    /// Number of lines
    /// </returns>
    private Counter getNumOfLines()
    {
        Counter ret;

        select count(RecId) from line;
        ret = int642int(line.RecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymNumDateDocStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns description string for payment document.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Description string.
    /// </returns>
    protected str getPaymNumDateDocStr(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.PaymDocumentNum && _line.PaymentDate ? strFmt("@GLS102243", _line.PaymDocumentNum, _line.PaymentDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report.
    /// </summary>
    /// <returns>
    /// True if initialization succeed, otherwise false.
    /// </returns>
    public boolean init()
    {
        boolean ret;

        this.initBookDateNumDelimiter();

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBookDateNumDelimiter</Name>
				<Source><![CDATA[
    private void initBookDateNumDelimiter()
    {
        const str defaultBookDateNumDelimiter = ';';

        bookDateNumDelimiter = LedgerParameters::find().setBookDateNumDelimiter_RU(false);
        bookDateNumDelimiter = bookDateNumDelimiter ? bookDateNumDelimiter : defaultBookDateNumDelimiter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        PurchBookTable_RU purchBookTable = PurchBookTable_RU::find(bookRecId);

        super();

        fromDate = purchBookTable.getFromDate();
        toDate   = purchBookTable.getToDate();

        queryRun = new QueryRun(PurchBookTable_RU::createDefaultQuery(bookRecId, null, fromDate, toDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(reportHeader);
        this.addSection(pageHeader);
        this.addSection(body, true);
        this.addSection(reportFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a new page should be started before current record output
    /// </summary>
    /// <returns>
    /// True if a new page should be created; Otherwise false
    /// </returns>
    /// <remarks>
    /// When printing last line, report footer should fit on page also
    /// </remarks>
    protected boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(body);

        if (lineNo == numOfLines && lineNo != 1)
        {
            requiredHeight += conPeek(mapSections.lookup(reportFooter), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintIncomingTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether section with incoming totals should be printed
    /// </summary>
    /// <returns>
    /// Always false for book itselt
    /// </returns>
    /// <remarks>
    /// Overridden in additional list printout
    /// </remarks>
    protected boolean mustPrintIncomingTotals()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, 
                bookRecId,
                groupByFactures,
                groupCorrect,
                fromDate,
                toDate, 
                queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookRecId</Name>
				<Source><![CDATA[
    public SalesPurchBookRecId_RU parmBookRecId(SalesPurchBookRecId_RU _bookRecId = bookRecId)
    {
        bookRecId = _bookRecId;
        return bookRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataAndExportToXml</Name>
				<Source><![CDATA[
    protected void prepareDataAndExportToXml()
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();
        contract.parmIsCalledFromXMLExcelReport(true);
        contract.parmFromDate(fromDate);
        contract.parmToDate(toDate);
        contract.parmSalesPurchBookQueryRun(queryRun.pack());
        contract.parmGroupByFactures(groupByFactures);
        contract.parmGroupCorrect(groupCorrect);
        contract.parmBookRecId(bookRecId);

        LedgerVATDeclReportPurchBook_RU journalReport = LedgerVATDeclReportPurchBook_RU::construct();
        journalReport.setContract(contract.pack());
        journalReport.run();

        header = journalReport.getHeader();
        line = journalReport.getLine();

        ERModelDefinitionDatabaseContext dbParameter = new ERModelDefinitionDatabaseContext();
        dbParameter.addTemporaryTable(header);
        dbParameter.addTemporaryTable(line);

        ERmodelDefinitionInputParametersAction inputParameter = new ERmodelDefinitionInputParametersAction();
        inputParameter.addParameter(ERPath::combine("model", "ReportCaller"), classStr(PurchBookReportExcel_RU));
        inputParameter.addParameter(ERPath::combine("model", "005_Period/Period010_DateFrom"), fromDate);
        inputParameter.addParameter(ERPath::combine("model", "005_Period/Period020_DateTo"), toDate);

        if (exportToXml)
        {
            formatMappingId = VendParameters::find().PurchBookFormatMappingID;

            ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId)
                .withParameter(dbParameter)
                .withParameter(inputParameter)
                .withFileDestination(ERObjectsFactory::createFileDestinationBrowser())
                .run();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>printIncomingTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs incoming totals section to excel
    /// </summary>
    /// <remarks>
    /// Empty, as incoming totals sections printed only for additional lists
    /// </remarks>
    protected void printIncomingTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    public boolean runOnServer()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(PurchBook_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        const int cellsBody = 17;
        const int cellsOther = 14;

        select count(RecId) from line;

        return int642int(line.RecId) * cellsBody + cellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer                version = conPeek(_packedClass,1);
        container              packedQuery;
        SalesPurchBookRecId_RU bookRecIdNew;
        PurchBookTable_RU      purchBookTable = PurchBookTable_RU::find(bookRecId);

        switch (version)
        {
            case currentVersion :

                bookRecIdNew = this.parmBookRecId();

                [   version,
                    bookRecId,
                    groupByFactures,
                    groupCorrect,
                    fromDate,
                    toDate, 
                    packedQuery] = _packedClass;
                
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }

                if (bookRecIdNew && bookRecIdNew != bookRecId)
                {
                    purchBookTable = PurchBookTable_RU::find(bookRecIdNew);
                    fromDate = purchBookTable.getFromDate();
                    toDate   = purchBookTable.getToDate();

                    this.parmBookRecId(bookRecIdNew);
                    this.initParmDefault();
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates values entered in dialog
    /// </summary>
    /// <param name="_calledFrom">
    /// Object caller for this method
    /// </param>
    /// <returns>
    /// A boolean value, indicating that values entered are valid
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (! toDate)
        {
            ret = checkFailed("@GLS105013");
        }
        else if (fromDate > toDate)
        {
            ret = checkFailed("@GLS101164");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchBookReportExcel_RU construct()
    {
        return new PurchBookReportExcel_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS111431";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PurchBookReportExcel_RU     purchBookPrint;
        PurchBookTable_RU           purchBookTable;
        PurchBookTrans_RU           purchBookTrans;
        SalesPurchBookRecId_RU      bookRecId;

        if(! _args)
        {
            throw error("@GLS110028");
        }

        switch (_args.dataset())
        {
            case tableNum(PurchBookTable_RU):
                purchBookTable = _args.record();
                bookRecId = purchBookTable.RecId;
                break;

            case tableNum(PurchBookTrans_RU):
                purchBookTrans = _args.record();
                bookRecId = purchBookTrans.PurchBookTable_RU;
                break;

            default :
                throw error("@SYS18626");
        }

        purchBookPrint = PurchBookReportExcel_RU::construct();
        purchBookPrint.parmBookRecId(bookRecId);

        if (purchBookPrint.prompt())
        {
            purchBookPrint.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report name.
    /// </summary>
    /// <returns>The report name.</returns>
    public str getReportName()
    {
        return 'PurchBook';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report output file name.
    /// </summary>
    /// <returns>The report output file name.</returns>
    public Filename getReportFileName()
    {
        return this.fileName() + this.fileNamePostfix();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>