<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostActiveNonFinTransfValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostActiveNonFinTransfValidate</c> class validates the change of physical and
///    financial inventory dimensions.
/// </summary>
class InventCostActiveNonFinTransfValidate
{
    boolean inventModelMustBeClosed;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInventModelMustBeClosed</Name>
				<Source><![CDATA[
    public boolean parmInventModelMustBeClosed(boolean _inventModelMustBeClosed = inventModelMustBeClosed)
    {
        inventModelMustBeClosed = _inventModelMustBeClosed;
        return inventModelMustBeClosed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinancialDimModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the change of financial inventory dimensions is allowed for the product dimension
    ///    group that relates to the item.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID of the related item.
    /// </param>
    /// <returns>
    ///    true if the financial dimension can be added or removed; otherwise, false.
    /// </returns>
    public boolean validateFinancialDimModified(ItemId _itemId)
    {
        InventTrans     inventTrans;

        boolean result = true;

        //if financial dimensions are added or removed, then no transactions are allowed
        select firstonly RecId from inventTrans
            where inventTrans.ItemId == _itemId;

        if (inventTrans.RecId != 0)
        {
            result =  checkFailed("@SCM:FinancialDimModificationInventTransExist");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePhysicalDimModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the change of physical inventory dimensions is allowed for the product dimension
    ///    group that relates to the item.
    /// </summary>
    /// <param name="_inventDimGroupSetupFrom">
    ///    The <c>InventDimGroupSetup</c> record that represents the dimension setup that is used to determine
    ///    the physical dimensions.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <returns>
    ///    true if the physical dimension can be added or removed; otherwise, false.
    /// </returns>
    public boolean validatePhysicalDimModified(
        InventDimGroupSetup         _inventDimGroupSetupFrom,
        ItemId                      _itemId)
    {
        InventTrans             inventTrans;

        boolean result = this.checkPhysicalInventoryZeroOnhand(_inventDimGroupSetupFrom, _itemId);

        if (inventModelMustBeClosed)
        {
            result = result && this.checkNoPhysicalTransAndFinancialTransClosed(_itemId);
        }
        else
        {
            result = result && this.checkAllTransFinancialUpdated(_itemId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostActiveNonFinTransfValidate construct()
    {
        return new InventCostActiveNonFinTransfValidate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithParm</Name>
				<Source><![CDATA[
    public static InventCostActiveNonFinTransfValidate constructWithParm(boolean _mustBeClosed)
    {
        var inventCostActiveNonFinTransfValidate = InventCostActiveNonFinTransfValidate::construct();
        inventCostActiveNonFinTransfValidate.parmInventModelMustBeClosed(_mustBeClosed);

        return inventCostActiveNonFinTransfValidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPhysicalInventoryZeroOnhand</Name>
				<Source><![CDATA[
    private boolean checkPhysicalInventoryZeroOnhand(
        InventDimGroupSetup         _inventDimGroupSetupFrom,
        ItemId                      _itemId)
    {
        InventDimParm           inventDimParmPhysicalFrom;
        InventDim               inventDimCriteria;
        InventDimParm           inventDimParmCriteria;

        boolean result = true;

        // If physical dimensions are added or removed, then physical inventory should have zero on-hand.
        inventDimParmCriteria.ItemIdFlag = NoYes::Yes;
        inventDimParmPhysicalFrom.clear();
        _inventDimGroupSetupFrom.inventDimParmActivePhysicalInventory(inventDimParmPhysicalFrom);
        inventDimParmPhysicalFrom.ItemIdFlag = NoYes::Yes;

        InventDimOnHand inventDimOnHand = InventDimOnHand_Physical::newPhysical(
            _itemId,
            inventDimCriteria,
            inventDimParmCriteria,
            InventDimOnHandLevel::DimParm,
            inventDimParmPhysicalFrom);

        InventDimOnHandIterator inventDimOnHandIterator = inventDimOnHand.onHandIterator();
        while (inventDimOnHandIterator.more())
        {
            InventDimOnHandMember inventDimOnHandMember = inventDimOnHandIterator.value();
            InventQty qty = inventDimOnHandMember.parmInventQty();
            if (qty != 0)
            {
                result = checkFailed("@SCM:PhysicalDimModificationZeroOnHandValidationError");
                break;
            }
            inventDimOnHandIterator.next();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoPhysicalTransAndFinancialTransClosed</Name>
				<Source><![CDATA[
    private boolean checkNoPhysicalTransAndFinancialTransClosed(ItemId _itemId)
    {
        InventTrans             inventTrans;

        boolean result = true;

        // If physical dimensions are added or removed, then no physical transactions are allowed and all financial transactions must be closed.
        select firstonly RecId from inventTrans
            where inventTrans.ItemId        == _itemId
               && inventTrans.ValueOpen     == InventTransOpen::Yes
               && inventTrans.StatusIssue   <= StatusIssue::Deducted
               && inventTrans.StatusReceipt <= StatusReceipt::Received;

        if (inventTrans.RecId != 0)
        {
            result = checkFailed("@SCM:PhysicalDimModificationNoPhysicalTransAndFinancialTransClosed");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllTransFinancialUpdated</Name>
				<Source><![CDATA[
    private boolean checkAllTransFinancialUpdated(ItemId _itemId)
    {
        InventTrans             inventTrans;

        boolean result = true;

        select firstonly RecId from inventTrans
            where inventTrans.ItemId             == _itemId
                && inventTrans.StatusReceipt     == StatusReceipt::None
                && inventTrans.StatusIssue       >= StatusIssue::Deducted;

        if (inventTrans.RecId == 0)
        {
            select firstonly RecId from inventTrans
                where inventTrans.ItemId         == _itemId
                    && inventTrans.StatusIssue   == StatusIssue::None
                    && inventTrans.StatusReceipt >= StatusReceipt::Received;
        }

        if (inventTrans.RecId != 0)
        {
            result = checkFailed("@SCM:PhysicalDimModificationAllTransFinUpdateValidationError");
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>