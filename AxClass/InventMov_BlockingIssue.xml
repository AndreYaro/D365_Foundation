<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_BlockingIssue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMov_BlockingIssue</c> class is a specialized version of the <c>InventMovement</c>
/// class and it is responsible for handling inventory blocking issue transactions.
/// </summary>
[InventMovementFactoryAttribute(tableStr(InventBlocking),InventMovSubType::None)]
public class InventMov_BlockingIssue extends InventMov_Blocking
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && inventBlocking.RecId)
        {
            InventTransOriginBlockingIssue::writeOriginOwnerRelationship(inventBlocking.RecId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the corresponding owner.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (inventBlocking.RecId)
        {
            InventTransOriginBlockingIssue::deleteOwnerRelationship(inventBlocking.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimForIssueTransFromReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventDim</c> that should be set on the blocking issue transaction during a receipt which updates the issue transaction for WHS items.
    /// </summary>
    /// <param name="_inventDimIssue">
    /// The original blocking issue transaction <c>InventDim</c>
    /// </param>
    /// <param name="_inventDimReceipt">
    /// The receipt (e.g., purchase order registration) transaction <c>InventDim</c>
    /// </param>
    /// <returns>
    /// The new blocking issue transaction <c>InventDim</c>
    /// </returns>
    public InventDim getInventDimForIssueTransFromReceipt(InventDim _inventDimIssue, InventDim _inventDimReceipt)
    {
        InventDim retInventDim;

        if (this.inventBlockingTableType().mustClearIssueLocationAndBelow())
        {
            retInventDim = InventDim::find(_inventDimReceipt.InventDimId);
            retInventDim.clearLocationAndBelowDim(this.itemId());
            retInventDim = InventDim::findOrCreate(retInventDim);
        }
        else
        {
            retInventDim = super(_inventDimIssue, _inventDimReceipt);
        }

        return retInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimForReservedTransPhysChange</Name>
				<Source><![CDATA[
    public InventDim getInventDimForReservedTransPhysChange(
        boolean   _isWarehouseWHSEnabled,
        InventDim _issueInventDim,
        InventDim _issueInventDimAboveLocation)
    {
        InventDim localInventDim;

        if (_isWarehouseWHSEnabled && this.inventBlockingTableType().mustClearIssueLocationAndBelow())
        {
            localInventDim.data(_issueInventDimAboveLocation);
        }
        else if (this.inventBlockingTableType().mustClearAllBelowStatus())
        {
            localInventDim.data(_issueInventDimAboveLocation);
            localInventDim.clearBelowStatusDim(this.itemId());
            localInventDim = inventDim::findOrCreate(localInventDim);
        }
        else
        {
            localInventDim = super(_isWarehouseWHSEnabled, _issueInventDim, _issueInventDimAboveLocation);
        }

        return localInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBlockingTableType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets this movement's blocking type.
    /// </summary>
    /// <returns>
    /// Blocking type.
    /// </returns>
    protected InventBlockingTableType inventBlockingTableType()
    {
        return inventBlocking.type();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Takes the corresponding inventory transaction ID of the receipt inventory blocking transaction from
    ///    the <c>InventBlocking</c> table.
    /// </summary>
    /// <returns>
    ///    The corresponding inventory transaction ID.
    /// </returns>
    protected InventTransId inventTransIdTransfer()
    {
        return inventBlocking.InventTransIdReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginBlockingIssue::findInventTransOriginId(inventBlocking.RecId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingInventDimParmFixed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills an <c>InventDimParm</c> buffer with values that specify which dimensions are fixed when
    /// marking is applied.
    /// </summary>
    /// <returns>
    /// An <c>InventDimParm</c> buffer.
    /// </returns>
    /// <remarks>
    /// For inventory blocking issue transactions, it is important to keep all inventory dimensions that
    /// are specified on inventory blocking unchanged during marking.
    /// </remarks>
    public InventDimParm markingInventDimParmFixed()
    {
        if (!markingInventDimParmFixedCached)
        {
            markingInventDimParmFixed.initFromInventDim(this.inventdim());
            markingInventDimParmFixedCached = true;
        }

        return markingInventDimParmFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingPreferPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the physically updated transactions should be preferred over expected when
    /// finding transactions for marking.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean markingPreferPhysical()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the movement must be automatically reserved.
    /// </summary>
    /// <returns>
    ///    true if the movement must be automatically reserved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is often called together with the <c>canBeReserved</c> method, which returns a Boolean
    ///    value from the <c>inventType</c> class hierarchy.
    /// </remarks>
    public boolean  mustBeAutoReserved()
    {
        return this.inventTable().inventItemType().canBeAutoReserved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMovement</c> class based on the original record.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventMovement</c> class based on the original record.
    /// </returns>
    public InventMovement newMovement_Orig()
    {
        InventMovement movement_orig;

        if (inventBlocking.orig().InventTransIdIssue)
        {
            movement_orig = InventMovement::construct(inventBlocking.orig(), this.inventMovSubType());
        }

        return movement_orig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an instance of the <c>InventMovement</c> class.
    /// </summary>
    /// <returns>
    ///    The current instance of the <c>InventMovement</c> class.
    /// </returns>
    public InventMovement  newMovement_TransferIssue()
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventMovement</c> class that corresponds to the related receipt
    ///    inventory blocking transaction.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventMovement</c> class that corresponds to the related receipt inventory
    ///    blocking transaction if it exists; otherwise, null.
    /// </returns>
    public InventMovement  newMovement_TransferReceipt()
    {
        if (inventBlocking.ExpectReceipt)
        {
            return InventMovement::construct(inventBlocking,InventMovSubType::TransferReceipt);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction catch weight quantity.
    /// </summary>
    /// <returns>
    /// The inventory transaction catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReserveQty()
    {
        PdsCWInventQty pdsCWTransQty = this.pdsCWTransQty();

        if (WHSInventBlockingUpdateContext::current()
            && !InventParameters::find().ReserveOnOrdered
            && this.isItemWHSEnabled())
        {
            PdsCWInventQty cwDeltaBlockingQty = WHSInventBlockingUpdateContext::currentCWDeltaBlockingQty();

            if (cwDeltaBlockingQty < 0) //do not rereserve quantity that has just been unblocked
            {
                PdsCWInventQty cwPhysicalAvailQty = WHSInventOnHand::getPhysicalAvailHandlingQty(inventBlocking.ItemId, InventDim::find(inventBlocking.InventDimId), true, false);
                PdsCWInventQty maxCWQtyToReserve = cwPhysicalAvailQty + cwDeltaBlockingQty; 

                return max(pdsCWTransQty, -maxCWQtyToReserve);
            }
        }

        return pdsCWTransQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction catch weight quantity.
    /// </summary>
    /// <returns>
    /// The inventory transaction catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        return -inventBlocking.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction reservation quantity.
    /// </summary>
    /// <returns>
    ///    The inventory transaction reservation quantity.
    /// </returns>
    public InventQty reserveQty()
    {
        InventQty transQty = this.transQty();

        if (WHSInventBlockingUpdateContext::current()
            && !InventParameters::find().ReserveOnOrdered
            && this.isItemWHSEnabled())
        {
            InventQty deltaBlockingQty = WHSInventBlockingUpdateContext::currentDeltaBlockingQty();

            if (deltaBlockingQty < 0) //do not rereserve quantity that has just been unblocked
            {
                InventQty physicalAvailQty = WHSInventOnHand::getPhysicalAvailQty(inventBlocking.ItemId, InventDim::find(inventBlocking.InventDimId));
                InventQty maxQtyToReserve = physicalAvailQty + deltaBlockingQty; 

                return max(transQty, -maxQtyToReserve);
            }
        }

        return transQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transfer direction of the inventory blocking movements.
    /// </summary>
    /// <returns>
    ///    The transfer direction of the inventory blocking movements.
    /// </returns>
    public InventDirection transferDirection()
    {
        return InventDirection::Issue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the issue inventory blocking transaction ID from the <c>InventBlocking</c> table.
    /// </summary>
    /// <returns>
    ///    The issue inventory blocking transaction ID.
    /// </returns>
    public InventTransId transId()
    {
        return inventBlocking.InventTransIdIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction quantity.
    /// </summary>
    /// <returns>
    ///    The inventory transaction quantity.
    /// </returns>
    public InventQty transQty()
    {
        return -inventBlocking.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_BlockingIssue</c> class that is based on the
    ///    specified record.
    /// </summary>
    /// <param name="_inventBlocking">
    ///    The <c>InventBlocking</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_BlockingIssue</c> class.
    /// </returns>
    public static InventMov_BlockingIssue newFromInventBlocking(InventBlocking _inventBlocking)
    {
        return new InventMov_BlockingIssue(_inventBlocking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowMarkingWarningOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines if a warning message is shown if marking cannot be updated according to dimensions.
    /// </summary>
    /// <returns>
    ///   false when marking process suppresses the warning messages for a warehouse enabled catch weight item; otherwise, true
    /// </returns>
    public boolean mustShowMarkingWarningOnUpdate()
    {
        if (this.isItemWHSEnabled() && this.pdsCWItem())
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustReserveBasedOnMarkingOnUpdate</Name>
				<Source><![CDATA[
    public boolean mustReserveBasedOnMarkingOnUpdate()
    {
        return  this.markingRefInventTransOrigin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAdjustReceiptDimOnMarkingReserve</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines if receipt inventory dimensions should be aligned with issue dimensions when updating reservations for marked transactions. 
    /// </summary>
    /// <returns>
    ///   true when receipt inventory dimensions should be adjusted; otherwise, false
    /// </returns>
    [Hookable(false)]
    internal boolean mustAdjustReceiptDimOnMarkingReserve()
    {
        return WhsInventUpdReservationInventDimReceiptAdjustmentFlight::instance().isEnabled() && this.inventBlockingTableType().mustClearIssueLocationAndBelow();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>