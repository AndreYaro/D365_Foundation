<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdRegulation_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// To process operations related to witholding tax regulation.
/// </summary>
public class TaxWithholdRegulation_IN
{
    TaxWithhold_IN                      taxWithhold;
    TmpTaxWithholdWorkTrans_IN          tmpTaxWithholdWorkTrans;
    TmpTaxWithholdRegulationTrans_IN    tmpTaxWithholdRegulationTrans;
    AmountCur                           taxWithholdAdjustedAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSumsFromTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into <c> TmpTaxWithholdRegulationTrans_IN </c> table
    /// </summary>
    private void createSumsFromTmp()
    {
        ttsbegin;
        while select tmpTaxWithholdWorkTrans
            order by RecId asc
        {
            tmpTaxWithholdRegulationTrans.clear();
            tmpTaxWithholdRegulationTrans.CompanyAccount            = tmpTaxWithholdWorkTrans.CompanyAccount;
            tmpTaxWithholdRegulationTrans.AccountNumber             = tmpTaxWithholdWorkTrans.AccountNumber;
            tmpTaxWithholdRegulationTrans.TaxWithholdCode           = tmpTaxWithholdWorkTrans.TaxWithholdCode;
            tmpTaxWithholdRegulationTrans.CurrencyCode              = tmpTaxWithholdWorkTrans.SourceCurrencyCode;
            tmpTaxWithholdRegulationTrans.AmountOrigin              = abs(tmpTaxWithholdWorkTrans.SourceBaseAmountCur);
            tmpTaxWithholdRegulationTrans.AdjustedAmountOrigin      = abs(tmpTaxWithholdWorkTrans.SourceBaseAmountCurRegulated);
            tmpTaxWithholdRegulationTrans.AdjustedTaxWithholdAmount = abs(tmpTaxWithholdWorkTrans.SourceRegulateAmountCur);
            tmpTaxWithholdRegulationTrans.SourceTableId             = tmpTaxWithholdWorkTrans.SourceTableId;
            tmpTaxWithholdRegulationTrans.SourceRecId               = tmpTaxWithholdWorkTrans.SourceRecId;
            tmpTaxWithholdRegulationTrans.CPOrigInvoiceRefRecId     = tmpTaxWithholdWorkTrans.CPOrigInvoiceRefRecId;

            tmpTaxWithholdRegulationTrans.insert();

            taxWithholdAdjustedAmount   += tmpTaxWithholdRegulationTrans.AdjustedTaxWithholdAmount;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTaxWithholdRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets witholding tax regulation.
    /// </summary>
    public void resetTaxWithholdRegulation()
    {
        TaxWithholdWorkRegulation_IN    taxWithholdWorkRegulation;
        TaxWithholdCalculation_IN       taxWithholdCalculation;
        LedgerJournalTaxDocument        ledgerJournalTaxWithholdDocument;
        LedgerJournalTrans              ledgerJournalTrans;
        CustInvoiceLine                 custInvoiceLine;
        CustInvoiceTable                custInvoiceTable;
        CustInvoiceCalcTax_Table        custInvoiceCalcTax;
        VendInvoiceInfoTable            vendInvoiceInfoTable;
        VendInvoiceInfoLine             vendInvoiceInfoLine;
        PurchCalcTax_ParmTransInvoice   purchCalcTax_ParmTransInvoice;
        TmpTaxWithholdWorkTrans_IN      tmpTaxWithholdWorkTransSource;

        ttsbegin;

        select firstonly tmpTaxWithholdWorkTrans;
        if (tmpTaxWithholdWorkTrans)
        {
            tmpTaxWithholdWorkTransSource.data(tmpTaxWithholdWorkTrans);
        }

        while select tmpTaxWithholdRegulationTrans
        {
            while select forupdate tmpTaxWithholdWorkTrans
                where tmpTaxWithholdWorkTrans.TaxWithholdCode      == tmpTaxWithholdRegulationTrans.TaxWithholdCode
                   && tmpTaxWithholdWorkTrans.SourceTableId        == tmpTaxWithholdRegulationTrans.SourceTableId
                   && tmpTaxWithholdWorkTrans.SourceRecId          == tmpTaxWithholdRegulationTrans.SourceRecId
                   && tmpTaxWithholdWorkTrans.CompanyAccount       == tmpTaxWithholdRegulationTrans.CompanyAccount
            {
                tmpTaxWithholdWorkTrans.SourceBaseAmountCurRegulated = 0;
                tmpTaxWithholdWorkTrans.SourceRegulateAmountCur      = tmpTaxWithholdWorkTrans.SourceTaxAmountCur;
                tmpTaxWithholdWorkTrans.TaxAutogenerated             = NoYes::Yes;
                tmpTaxWithholdWorkTrans.update();
                taxWithholdWorkRegulation   = TaxWithholdWorkRegulation_IN::findbyTaxCode(tmpTaxWithholdWorkTrans.SourceRecId,
                                                                                  tmpTaxWithholdRegulationTrans.TaxWithholdCode,
                                                                                  true);
                if (taxWithholdWorkRegulation)
                {
                    taxWithholdWorkRegulation.delete();
                }
            }
        }

        switch (tmpTaxWithholdWorkTransSource.SourceTableId)
        {
            case tableNum(CustInvoiceLine) :
                custInvoiceLine                     = CustInvoiceLine::find(tmpTaxWithholdWorkTransSource.SourceRecId);
                custInvoiceTable                    = custInvoiceTable::findRecId(custInvoiceLine.ParentRecId, true);
                custInvoiceCalcTax                  = new CustInvoiceCalcTax_Table(custInvoiceTable);
                taxWithholdCalculation              = TaxWithholdCalculation_IN::newForSourceTypeWithTaxUncommitted(TaxSourceType::FreeTextInvoice, custInvoiceCalcTax, false, false);
                break;

            case tableNum(VendInvoiceInfoLine) :
                vendInvoiceInfoLine                 = VendInvoiceInfoLine::findRecId(tmpTaxWithholdWorkTransSource.SourceRecId);
                vendInvoiceInfoTable                = VendInvoiceInfoTable::find(vendInvoiceInfoLine.ParmId, vendInvoiceInfoLine.TableRefId);
                purchCalcTax_ParmTransInvoice       = new PurchCalcTax_ParmTransInvoice(vendInvoiceInfoTable, vendInvoiceInfoTable.ParmId, vendInvoiceInfoTable.PurchId, DocumentStatus::Invoice);
                taxWithholdCalculation              = TaxWithholdCalculation_IN::newForSourceTypeWithTaxUncommitted(TaxSourceType::PurchaseOrder, purchCalcTax_ParmTransInvoice, false, false);
                break;

            case tableNum(LedgerJournalTrans) :
                ledgerJournalTrans                  = LedgerJournalTrans::findRecId(tmpTaxWithholdWorkTransSource.SourceRecId, true);
                ledgerJournalTaxWithholdDocument    = LedgerJournalTaxWithholdDocument_IN::construct(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice, null);
                taxWithholdCalculation              = TaxWithholdCalculation_IN::newForSourceTypeWithTaxUncommitted(TaxSourceType::Journals, ledgerJournalTaxWithholdDocument, false, false);
                break;

            case tableNum(ProjAdvancedJournalLine) :
                ProjAdvancedJournalLine projAdvancedJournalLine = ProjAdvancedJournalLine::find(tmpTaxWithholdWorkTransSource.SourceRecId);
                ProjAdvancedJournalLineTaxWithholdDocument_IN projAdvancedJournalLineTaxWithholdDoc = ProjAdvancedJournalLineTaxWithholdDocument_IN::construct(projAdvancedJournalLine);
                taxWithholdCalculation = TaxWithholdCalculation_IN::newForSourceTypeWithTaxUncommitted(TaxSourceType::ProjAdvancedJournal, projAdvancedJournalLineTaxWithholdDoc, false, false);
                break;
        }

        if (taxWithholdCalculation != null && taxWithholdCalculation.useTaxWithHoldUncommitted())
        {
            taxWithholdCalculation.tmpTaxWithholdWorkTrans(tmpTaxWithholdWorkTrans);
            taxWithholdCalculation.updateTaxWithholdUncommitted();
        }

        delete_from tmpTaxWithholdRegulationTrans;
        this.createSumsFromTmp(); // rebuild tmpTaxWithholdRegulationTrans

        taxWithholdAdjustedAmount = 0;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTaxWithholdRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves witholding tax regulation.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// If transaction amount is less than total witholding tax amounts throws error.
    /// </exception>
    public void saveTaxWithholdRegulation()
    {
        AmountCur                       taxWithholdAdjustedAmountTotal;
        TaxWithholdWorkRegulation_IN    taxWithholdWorkRegulation;
        Integer                         counter;
        TaxWithholdCalculation_IN       taxWithholdCalculation;
        LedgerJournalTaxDocument        ledgerJournalTaxWithholdDocument;
        LedgerJournalTrans              ledgerJournalTrans;
        CustInvoiceLine                 custInvoiceLine;
        CustInvoiceTable                custInvoiceTable;
        CustInvoiceCalcTax_Table        custInvoiceCalcTax;
        VendInvoiceInfoTable            vendInvoiceInfoTable;
        VendInvoiceInfoLine             vendInvoiceInfoLine;
        PurchCalcTax_ParmTransInvoice   purchCalcTax_ParmTransInvoice;
        TmpTaxWithholdWorkTrans_IN      tmpTaxWithholdWorkTransSource;

        taxWithholdAdjustedAmount = 0;

        ttsbegin;

        select firstonly tmpTaxWithholdWorkTrans;
        if (tmpTaxWithholdWorkTrans)
        {
            tmpTaxWithholdWorkTransSource.data(tmpTaxWithholdWorkTrans);
        }

        while select CompanyAccount from tmpTaxWithholdRegulationTrans
                group by CompanyAccount
        {
            counter += 1;
        }

        while select tmpTaxWithholdRegulationTrans
        {
            while select forupdate tmpTaxWithholdWorkTrans
                where tmpTaxWithholdWorkTrans.TaxWithholdCode      == tmpTaxWithholdRegulationTrans.TaxWithholdCode
                   && tmpTaxWithholdWorkTrans.SourceTableId        == tmpTaxWithholdRegulationTrans.SourceTableId
                   && tmpTaxWithholdWorkTrans.SourceRecId          == tmpTaxWithholdRegulationTrans.SourceRecId
                   && tmpTaxWithholdWorkTrans.CompanyAccount       == tmpTaxWithholdRegulationTrans.CompanyAccount
            {
                tmpTaxWithholdWorkTrans.SourceBaseAmountCurRegulated = tmpTaxWithholdRegulationTrans.AdjustedAmountOrigin;
                tmpTaxWithholdWorkTrans.SourceRegulateAmountCur      = tmpTaxWithholdRegulationTrans.AdjustedTaxWithholdAmount;
                if (tmpTaxWithholdWorkTrans.SourceTaxAmountCur != tmpTaxWithholdWorkTrans.SourceRegulateAmountCur)
                {
                    tmpTaxWithholdWorkTrans.TaxAutogenerated    = NoYes::No;
                }
                tmpTaxWithholdWorkTrans.update();

                taxWithholdWorkRegulation   = TaxWithholdWorkRegulation_IN::findbyTaxCode(tmpTaxWithholdWorkTrans.SourceRecId,
                                                                                          tmpTaxWithholdRegulationTrans.TaxWithholdCode,
                                                                                          true);

                if (abs(taxWithhold.getTransactionAmount()) < abs(tmpTaxWithholdWorkTrans.SourceBaseAmountCur))
                {
                    taxWithhold.getTransactionAmount(tmpTaxWithholdWorkTrans.SourceBaseAmountCur);
                }

                if (taxWithholdWorkRegulation)
                {
                    taxWithholdWorkRegulation.delete();
                }

                taxWithholdWorkRegulation.CompanyAccount            = tmpTaxWithholdRegulationTrans.CompanyAccount;
                taxWithholdWorkRegulation.AccountNumber             = tmpTaxWithholdRegulationTrans.AccountNumber;
                taxWithholdWorkRegulation.TaxWithholdCode           = tmpTaxWithholdRegulationTrans.TaxWithholdCode;
                taxWithholdWorkRegulation.AdjustedAmountOrigin      = tmpTaxWithholdRegulationTrans.AdjustedAmountOrigin;
                taxWithholdWorkRegulation.AdjustedTaxWithholdAmount = tmpTaxWithholdRegulationTrans.AdjustedTaxWithholdAmount;
                taxWithholdWorkRegulation.SourceTableId             = tmpTaxWithholdWorkTrans.SourceTableId;
                taxWithholdWorkRegulation.SourceRecId               = tmpTaxWithholdWorkTrans.SourceRecId;
                taxWithholdWorkRegulation.doInsert();

                if (tmpTaxWithholdRegulationTrans.AdjustedTaxWithholdAmount)
                {
                    taxWithholdAdjustedAmount       += tmpTaxWithholdRegulationTrans.AdjustedTaxWithholdAmount;
                    taxWithholdAdjustedAmountTotal  += tmpTaxWithholdRegulationTrans.AdjustedTaxWithholdAmount;
                }
                else
                {
                    taxWithholdAdjustedAmountTotal  += tmpTaxWithholdWorkTrans.SourceTaxAmountCur;
                }
            }
        }
        switch (tmpTaxWithholdWorkTransSource.SourceTableId)
        {
            case tableNum(CustInvoiceLine) :
                custInvoiceLine                     = CustInvoiceLine::find(tmpTaxWithholdWorkTransSource.SourceRecId);
                custInvoiceTable                    = custInvoiceTable::findRecId(custInvoiceLine.ParentRecId, true);
                custInvoiceCalcTax                  = new CustInvoiceCalcTax_Table(custInvoiceTable);
                taxWithholdCalculation              = TaxWithholdCalculation_IN::newForSourceTypeWithTaxUncommitted(TaxSourceType::FreeTextInvoice, custInvoiceCalcTax, false, false);
                break;

            case tableNum(VendInvoiceInfoLine) :
                vendInvoiceInfoLine                 = VendInvoiceInfoLine::findRecId(tmpTaxWithholdWorkTransSource.SourceRecId);
                vendInvoiceInfoTable                = VendInvoiceInfoTable::find(vendInvoiceInfoLine.ParmId, vendInvoiceInfoLine.TableRefId);
                purchCalcTax_ParmTransInvoice       = new PurchCalcTax_ParmTransInvoice(vendInvoiceInfoTable, vendInvoiceInfoTable.ParmId, vendInvoiceInfoTable.PurchId, DocumentStatus::Invoice );
                taxWithholdCalculation              = TaxWithholdCalculation_IN::newForSourceTypeWithTaxUncommitted(TaxSourceType::PurchaseOrder, purchCalcTax_ParmTransInvoice, false, false);
                break;

            case tableNum(LedgerJournalTrans) :
                ledgerJournalTrans                  = LedgerJournalTrans::findRecId(tmpTaxWithholdWorkTransSource.SourceRecId, true);
                ledgerJournalTaxWithholdDocument    = LedgerJournalTaxWithholdDocument_IN::construct(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice, null);
                taxWithholdCalculation              = TaxWithholdCalculation_IN::newForSourceTypeWithTaxUncommitted(TaxSourceType::Journals, ledgerJournalTaxWithholdDocument, false, false);
                break;

            case tableNum(ProjAdvancedJournalLine) :
                ProjAdvancedJournalLine projAdvancedJournalLine = ProjAdvancedJournalLine::find(tmpTaxWithholdWorkTransSource.SourceRecId);
                ProjAdvancedJournalLineTaxWithholdDocument_IN projAdvancedJournalLineTaxWithholdDoc = ProjAdvancedJournalLineTaxWithholdDocument_IN::construct(projAdvancedJournalLine);
                taxWithholdCalculation = TaxWithholdCalculation_IN::newForSourceTypeWithTaxUncommitted(TaxSourceType::ProjAdvancedJournal, projAdvancedJournalLineTaxWithholdDoc, false, false);
                break;
        }

        if (taxWithholdCalculation != null && taxWithholdCalculation.useTaxWithHoldUncommitted())
        {
            taxWithholdCalculation.tmpTaxWithholdWorkTrans(tmpTaxWithholdWorkTrans);
            taxWithholdCalculation.updateTaxWithholdUncommitted();
        }

        if (counter == 1)
        {
            if (taxWithhold.getTransactionAmount() <= taxWithholdAdjustedAmountTotal)
            {
                throw error("@GLS5852");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of Source table id and source recid.
    /// </summary>
    /// <param name="_taxWithhold">
    /// Instance of <c> TaxWithhold_IN </c>/.
    /// </param>
    private void setTax(TaxWithhold_IN _taxWithhold)
    {
        taxWithhold = _taxWithhold;
        tmpTaxWithholdWorkTrans.setTmpData(taxWithhold.tmpTaxWithholdWorkTrans());
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdRegulationTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns witholdng tax adjusted amount.
    /// </summary>
    /// <returns>
    ///  Returns witholdng tax adjusted amount.
    /// </returns>
    public AmountCur taxWithholdRegulationTotal()
    {
        return taxWithholdAdjustedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWithhodRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the buffer of <c> TmpTaxWithholdRegulationTrans_IN </c>.
    /// </summary>
    /// <returns>
    /// Returns the buffer of <c> TmpTaxWithholdRegulationTrans_IN </c>.
    /// </returns>
    public TmpTaxWithholdRegulationTrans_IN tmpTaxWithhodRegulation()
    {
        return tmpTaxWithholdRegulationTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaxWithholdRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the buffer of <c> TaxWithholdRegulation_IN </c>.
    /// </summary>
    /// <param name="_taxWithhold">
    /// Instance of <c> TaxWithhold_IN </c>
    /// </param>
    /// <returns>
    /// Returns the buffer of <c> TaxWithholdRegulation_IN </c>.
    /// </returns>
    public static TaxWithholdRegulation_IN newTaxWithholdRegulation(TaxWithhold_IN  _taxWithhold)
    {
        TaxWithholdRegulation_IN   taxWithholdRegulation;

        taxWithholdRegulation = new TaxWithholdRegulation_IN();
        taxWithholdRegulation.setTax(_taxWithhold);
        taxWithholdRegulation.createSumsFromTmp();

        return taxWithholdRegulation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>