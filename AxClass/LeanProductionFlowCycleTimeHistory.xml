<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProductionFlowCycleTimeHistory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanProductionFlowCycleTimeHistory</c> class is used to generate the cycle time history records for a production flow.
/// </summary>
public class LeanProductionFlowCycleTimeHistory implements WorkPeriodTemplateCalculable
{
    #TimeConstants
    RefRecId                                leanProductionFlowReferenceRecId;
    LeanProductionFlowCycleTimeTmpLine      leanProductionFlowCycleTimeTmpLine;
    TransDate                               todayDate;
    WorkPeriodTemplate                      workPeriodTemplate;

    WorkPeriodTemplateCalculate             workPeriodTemplateCalculate;

    LeanProductionFlow                      leanProductionFlow;
    Plan                                    previousPlan;
    Set                                     setEndActivities;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a single temporary <c>LeanProductionFlowCycleTimeTmpLine</c> record which corresponds to a
    ///    one time period or version.
    /// </summary>
    /// <param name="_fromDate">
    ///    A starting date in the company time zone.
    /// </param>
    /// <param name="_toDate">
    ///    An ending date in the company time zone.
    /// </param>
    /// <param name="_periodDescription">
    ///    A string that contains the description of the period.
    /// </param>
    /// <param name="_workDays">
    ///    An integer that contains the number of working days between the starting date and the ending date.
    /// </param>
    /// <remarks>
    ///    This is an interface method for the <c>WorkPeriodTemplateCalculable</c> class interface.
    /// </remarks>
    public void addPeriod(
        TransDate                 _fromDate,              //company TZ
        TransDate                 _toDate,                //company TZ
        PeriodTemplateDescription _periodDescription,
        PeriodTemplateOpenDays    _workDays)
    {
        if (   _fromDate != dateNull()
            && _toDate   != dateNull()
            && _toDate   != dateMax())
        {
            TransDateTime fromDateTime = DateTimeUtil::newDateTime(_fromDate,0,DateTimeUtil::getCompanyTimeZone());
            TransDateTime toDateTime = DateTimeUtil::newDateTime(_toDate,#secondsPerDay-1,DateTimeUtil::getCompanyTimeZone());

            this.addPeriodDateTime(fromDateTime,toDateTime,_periodDescription,_workDays);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPeriodDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a single temporary record of the <c>LeanProductionFlowCycleTimeTmpLine</c> type that
    ///    corresponds to one time period or a version.
    /// </summary>
    /// <param name="_fromDateTime">
    ///    A from date and time.
    /// </param>
    /// <param name="_toDateTime">
    ///    A to date and time.
    /// </param>
    /// <param name="_periodDescription">
    ///    A string that contains the description of the period.
    /// </param>
    /// <param name="_workDays">
    ///    The number of working days inclusively between the from date and the to date.
    /// </param>
    protected void addPeriodDateTime(
        TransDateTime   _fromDateTime,          //UTC
        TransDateTime   _toDateTime,            //UTC
        Description     _periodDescription,
        Days            _workDays)
    {
        Plan            plan;

        if (   _fromDateTime != DateTimeUtil::minValue()
            && _toDateTime   != DateTimeUtil::minValue()
            && _toDateTime   != DateTimeUtil::maxValue())
        {
            previousPlan.data(plan);

            //find best applicable plan
            select firstonly leanProductionFlow
                where leanProductionFlow.ProductionFlowReference == this.parmLeanProductionFlowReferenceRecId()
                join plan
                    order by ValidFrom desc
                    where plan.RecId         == leanProductionFlow.Plan
                       && plan.Status        == PlanStatus::Active
                       && ((plan.ValidFrom   <= _toDateTime
                       &&   (plan.ValidTo    >= _fromDateTime
                       ||    !plan.ValidTo))
                       ||  (plan.ValidTo     >= _fromDateTime
                       &&   !_toDateTime));

            if (plan)
            {
                if (plan.RecId != previousPlan.RecId)
                {
                    // new set of end-activities
                    setEndActivities = Set::create(leanProductionFlow.endLeanProductionFlowActivities(plan.ValidFrom));
                }

                UnitOfMeasure unitOfMeasure = UnitOfMeasure::find(leanProductionFlow.TaktUnitOfMeasure);

                //initialize
                leanProductionFlowCycleTimeTmpLine.clear();
                leanProductionFlowCycleTimeTmpLine.FromDateTime       = max(_fromDateTime,plan.ValidFrom);
                if (plan.ValidTo)
                {
                    leanProductionFlowCycleTimeTmpLine.ToDateTime     = min(_toDateTime,plan.ValidTo);
                }
                else
                {
                    leanProductionFlowCycleTimeTmpLine.ToDateTime     = _toDateTime;
                }
                leanProductionFlowCycleTimeTmpLine.VersionNum         = plan.VersionNum;
                leanProductionFlowCycleTimeTmpLine.CycleTimeUnitId    = unitOfMeasure.Symbol;
                leanProductionFlowCycleTimeTmpLine.AverageCycleTime   = leanProductionFlow.AverageTakt / (leanProductionFlow.QuantityPerCycle ? leanProductionFlow.QuantityPerCycle : 1.0);

                leanProductionFlowCycleTimeTmpLine.TotalQuantity      = leanProductionFlow.qtyProducedInCycleTimePeriod(
                                                                                    leanProductionFlowCycleTimeTmpLine.FromDateTime,
                                                                                    leanProductionFlowCycleTimeTmpLine.ToDateTime,
                                                                                    setEndActivities);

                //seconds
                Seconds totalTimeSeconds = leanProductionFlow.workingTimeInCycleTimePeriod(
                                                       leanProductionFlowCycleTimeTmpLine.FromDateTime,
                                                       leanProductionFlowCycleTimeTmpLine.ToDateTime,
                                                       setEndActivities);

                Seconds averageCycleTimeSeconds = any2int(ProdTimeUnitOfMeasure::convertValueToTimeUnit(
                                                              unitOfMeasure.RecId,
                                                              leanProductionFlowCycleTimeTmpLine.AverageCycleTime,
                                                              ProdTimeUnitType::Seconds));

                Seconds actualCycleTimeSeconds = leanProductionFlow.actualCycleTimeForPeriod(
                                                             leanProductionFlowCycleTimeTmpLine.FromDateTime,
                                                             leanProductionFlowCycleTimeTmpLine.ToDateTime,
                                                             setEndActivities,
                                                             leanProductionFlowCycleTimeTmpLine.TotalQuantity,
                                                             totalTimeSeconds);

                Seconds cycleTimeDeviationSeconds = actualCycleTimeSeconds - averageCycleTimeSeconds;

                //convert seconds to production flow cycle time unit
                leanProductionFlowCycleTimeTmpLine.TotalTime          = ProdTimeUnitOfMeasure::convertValueFromTimeUnit(
                                                                                    ProdTimeUnitType::Seconds,
                                                                                    totalTimeSeconds,
                                                                                    unitOfMeasure.RecId);

                leanProductionFlowCycleTimeTmpLine.ActualCycleTime    = ProdTimeUnitOfMeasure::convertValueFromTimeUnit(
                                                                                    ProdTimeUnitType::Seconds,
                                                                                    actualCycleTimeSeconds,
                                                                                    unitOfMeasure.RecId);

                leanProductionFlowCycleTimeTmpLine.CycleTimeDeviation = ProdTimeUnitOfMeasure::convertValueFromTimeUnit(
                                                                                    ProdTimeUnitType::Seconds,
                                                                                    cycleTimeDeviationSeconds,
                                                                                    unitOfMeasure.RecId);

                // Round the average value after calculation to not show too many decimals
                leanProductionFlowCycleTimeTmpLine.AverageCycleTime = decRound(leanProductionFlowCycleTimeTmpLine.AverageCycleTime, unitOfMeasure.DecimalPrecision);

                //insert into temp. table
                leanProductionFlowCycleTimeTmpLine.insert();

                //call self, if there is a remainder at the end of the period.
                if (leanProductionFlowCycleTimeTmpLine.ToDateTime < _toDateTime)
                {
                    this.addPeriodDateTime(DateTimeUtil::addSeconds(leanProductionFlowCycleTimeTmpLine.ToDateTime,1),
                                           _toDateTime,
                                           _periodDescription,
                                           _workDays);
                }

                //call self, if there is a remainder at the beginning of the period.
                if (leanProductionFlowCycleTimeTmpLine.FromDateTime > _fromDateTime)
                {
                    this.addPeriodDateTime(_fromDateTime,
                                           DateTimeUtil::addSeconds(leanProductionFlowCycleTimeTmpLine.FromDateTime,-1),
                                           _periodDescription,
                                           _workDays);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates all periods by using the period template.
    /// </summary>
    public void createPeriods()
    {
        workPeriodTemplateCalculate = WorkPeriodTemplateCalculate::newStandard(workPeriodTemplate.RecId,todayDate,ForwardBackward::Backward);
        workPeriodTemplateCalculate.calcPeriods(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProductionFlowCycleTimeTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>leanProductionFlowCycleTimeTmpLine</c> variable that contains the created periods.
    /// </summary>
    /// <returns>
    ///    The handle to the table buffer of the <c>LeanProductionFlowCycleTimeTmpLine</c> type that contains
    ///    all the created periods.
    /// </returns>
    public LeanProductionFlowCycleTimeTmpLine leanProductionFlowCycleTimeTmpLine()
    {
        return leanProductionFlowCycleTimeTmpLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanProductionFlowReferenceRecId</Name>
				<Source><![CDATA[
        public RefRecId parmLeanProductionFlowReferenceRecId(RefRecId _leanProductionFlowReferenceRecId = leanProductionFlowReferenceRecId)
    {
        leanProductionFlowReferenceRecId = _leanProductionFlowReferenceRecId;

        return leanProductionFlowReferenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTodayDate</Name>
				<Source><![CDATA[
        public TransDate parmTodayDate(TransDate _todayDate = todayDate)
    {
        todayDate = _todayDate;
        return todayDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkPeriodTemplate</Name>
				<Source><![CDATA[
        public WorkPeriodTemplate parmWorkPeriodTemplate(WorkPeriodTemplate _workPeriodTemplate = workPeriodTemplate)
    {
        workPeriodTemplate = _workPeriodTemplate;
        return workPeriodTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static LeanProductionFlowCycleTimeHistory construct()
    {
        return new LeanProductionFlowCycleTimeHistory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>LeanProductionFlowCycleTimeHistory</c> object.
    /// </summary>
    /// <param name="_workPeriodTemplateRecId">
    ///    The record ID of a <c>WorkPeriodTemplate</c> record.
    /// </param>
    /// <param name="_todayDate">
    ///    A company time zone date that contains the current date.
    /// </param>
    /// <param name="_leanProductionFlowReferenceRecId">
    ///    A record ID of the <c>LenaProductionFlowReference</c> table of the production flow for which to
    ///    show a cycle time history.
    /// </param>
    /// <returns>
    ///    A <c>LeanProductionFlowCycleTimeHistory</c> object.
    /// </returns>
    public static LeanProductionFlowCycleTimeHistory newStandard(
        WorkPeriodTemplateRecId     _workPeriodTemplateRecId,
        TransDate                   _todayDate,                         //company TZ
        RefRecId                    _leanProductionFlowReferenceRecId)
    {
        LeanProductionFlowCycleTimeHistory leanProductionFlowCycleTimeHistory = LeanProductionFlowCycleTimeHistory::construct();
        leanProductionFlowCycleTimeHistory.parmTodayDate(_todayDate);
        leanProductionFlowCycleTimeHistory.parmWorkPeriodTemplate(WorkPeriodTemplate::find(_workPeriodTemplateRecId));
        leanProductionFlowCycleTimeHistory.parmLeanProductionFlowReferenceRecId(_leanProductionFlowReferenceRecId);

        return leanProductionFlowCycleTimeHistory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>