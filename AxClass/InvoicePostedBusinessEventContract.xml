<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InvoicePostedBusinessEventContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
public final class InvoicePostedBusinessEventContract extends BusinessEventsContract
{
    private str countryISOCode;
    private str invoiceEntity;
    private CustInvoiceAccount invoiceAccount;
    private CustInvoiceId invoiceId;
    private TransDate invoiceDate;
    private LegalEntityDataAreaId legalEntity;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromInvoiceJour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InvoicePostedBusinessEventContract newFromInvoiceJour(InvoicePostedBusinessEventEntityType _invoicePostedBusinessEventEntityType, Common _invoiceJour)
    {
        if (!InvoicePostedBusinessEventContract::validate(_invoicePostedBusinessEventEntityType, _invoiceJour))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        var contract = new InvoicePostedBusinessEventContract();
        contract.initialize(_invoicePostedBusinessEventEntityType, _invoiceJour);
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    // Currently only two types of InvoiceJour will need to be handled
    private void initialize(InvoicePostedBusinessEventEntityType _invoicePostedBusinessEventEntityType, Common _invoiceJour)
    {
        countryISOCode = any2Str(SysCountryRegionCode::countryInfo());
        invoiceEntity = enum2Symbol(enumNum(InvoicePostedBusinessEventEntityType), _invoicePostedBusinessEventEntityType);

        if (_invoicePostedBusinessEventEntityType == InvoicePostedBusinessEventEntityType::projectInvoiceEntity)
        {
            ProjInvoiceJour projInvoiceJour = _invoiceJour;
            invoiceId = projInvoiceJour.ProjInvoiceId;
            invoiceAccount = projInvoiceJour.InvoiceAccount;
            invoiceDate = projInvoiceJour.InvoiceDate;
            legalEntity = projInvoiceJour.DataAreaId;
        }
        else
        {
            CustInvoiceJour custInvoiceJour = _invoiceJour;
            invoiceId = custInvoiceJour.InvoiceId;
            invoiceAccount = custInvoiceJour.InvoiceAccount;
            invoiceDate = custInvoiceJour.InvoiceDate;
            legalEntity = custInvoiceJour.DataAreaId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private static boolean validate(InvoicePostedBusinessEventEntityType _invoicePostedBusinessEventEntityType, Common _invoiceJour)
    {
        boolean isValid;
        TableId invoiceJourTableId = _invoiceJour.tableId;

        switch (invoiceJourTableId)
        {
            case tableNum(ProjInvoiceJour):
                if (_invoicePostedBusinessEventEntityType == InvoicePostedBusinessEventEntityType::projectInvoiceEntity)
                {
                    isValid = true;
                }
                break;
            case tableNum(CustInvoiceJour):
                if (_invoicePostedBusinessEventEntityType == InvoicePostedBusinessEventEntityType::custFreeTextInvoiceEntity || _invoicePostedBusinessEventEntityType == InvoicePostedBusinessEventEntityType::salesInvoiceEntity)
                {
                    isValid = true;
                }
                break;
            default:
                isValid = false;
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
    [DataMember('InvoiceAccount'), BusinessEventsDataMember("@AccountsReceivable:InvoiceAccount"), Hookable(false)]
    public CustInvoiceAccount parmInvoiceAccount(CustInvoiceAccount _invoiceAccount = invoiceAccount)
    {
        invoiceAccount = _invoiceAccount;

        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEntityType</Name>
				<Source><![CDATA[
    [DataMember('InvoiceEntity'), BusinessEventsDataMember("@AccountsReceivable:EntityType"), Hookable(false)]
    public str parmEntityType(str _invoiceEntity = invoiceEntity)
    {
        invoiceEntity = _invoiceEntity;

        return invoiceEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    [DataMember('InvoiceId'), BusinessEventsDataMember("@AccountsReceivable:BusinessEventInvoiceId"), Hookable(false)]
    public CustInvoiceId parmInvoiceId(CustInvoiceId _invoiceId = invoiceId)
    {
        invoiceId = _invoiceId;

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
    [DataMember('InvoiceDate'), BusinessEventsDataMember("@AccountsReceivable:BusinessEventInvoiceDate"), Hookable(false)]
    public TransDate parmInvoiceDate(TransDate _invoiceDate = invoiceDate)
    {
        invoiceDate = _invoiceDate;

        return invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    [DataMember('LegalEntity'), BusinessEventsDataMember("@AccountsReceivable:LegalEntity"), Hookable(false)]
    public LegalEntityDataAreaId parmLegalEntity(LegalEntityDataAreaId _legalEntity = legalEntity)
    {
        legalEntity = _legalEntity;

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalCountryISOCode</Name>
				<Source><![CDATA[
    [DataMember('CountryISOCode'), BusinessEventsDataMember("@AccountsReceivable:CountryISOCode"), Hookable(false)]
    public str parmLegalCountryISOCode(str _countryISOCode = countryISOCode)
    {
        countryISOCode = _countryISOCode;

        return countryISOCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>