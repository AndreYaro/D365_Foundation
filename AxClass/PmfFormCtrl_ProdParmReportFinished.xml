<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdParmReportFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>ProdParmReportFinished</c> form
/// </summary>
class PmfFormCtrl_ProdParmReportFinished extends PmfFormCtrl
{
    boolean         isFormula;
    InventDim       inventDim;
    FormDataSource  inventDim_ds;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if it should be allowed to edit the RAF line
    /// </summary>
    /// <returns>
    /// true, if the edit should be allowed
    /// </returns>
    /// <remarks>
    /// The edit of the line can only be allowed, if the RAF is for a production
    /// batch order and the batch order allows for Co/By variations.
    /// </remarks>
    public NoYes allowEdit()
    {
        ProdParmReportFinished prodParmReportFinished = buffer;

        return prodParmReportFinished.ProdId
            && prodParmReportFinished.prodTable().ProdType == ProdType::Process
            && prodParmReportFinished.prodTable().PmfCoByVarAllow == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the itemid should be editable
    /// </summary>
    /// <returns>
    /// true, if the user should be able to modify or select the itemid
    /// </returns>
    public NoYes allowEditItemId()
    {
        ProdParmReportFinished prodParmReportFinished = buffer;

        return prodParmReportFinished.prodTable().PmfCoByVarAllow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitValuePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called before the <c>initValue</c> event of the datasource
    /// </summary>
    /// <param name="_buffer">
    /// The buffer associated with the datasource
    /// </param>
    public void dataSourceInitValuePre(Common _buffer)
    {
        ProdParmReportFinished  prodParmReportFinished = _buffer;
        Object                  form = formRun;
        ProdMultiReportFinished prodMultiReportFinished = form.runBase();

        super(prodParmReportFinished);

        if (this.isPmfEnabled())
        {
            prodParmReportFinished.pmfInitCoByFromProdTable(
                prodMultiReportFinished.pmfProdTable());
            inventDim.data(InventDim::find(prodParmReportFinished.InventDimId));
            form.updateDesign(InventDimFormDesignUpdate::FieldChange);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trigger the refresh of the displayed form data
    /// </summary>
    public void doRefresh()
    {
        ProdParmReportFinished           pmfProdParmReportFinished;

        pmfProdParmReportFinished = buffer.data();
        formDS.research();
        formDS.findRecord(pmfProdParmReportFinished);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the lookup for the fields on the <c>ProdParmReportFinished</c> record
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field to handle the lookup for
    /// </param>
    /// <param name="_formControl">
    /// The formcontrol initiating the lookup
    /// </param>
    /// <param name="_filterStr">
    /// Additional filter for the lookup
    /// </param>
    public void fieldLookup(fieldId _fieldId, FormControl _formControl, str _filterStr)
    {
        ProdParmReportFinished prodParmReportFinished = buffer;

        switch (_fieldId)
        {
            case fieldnum(ProdParmReportFinished, ItemId) :
                InventTable::pmflookupItemIdCoBy(_formControl);
                break;
            case fieldnum(ProdParmReportFinished, InventTransId) :
                if (prodParmReportFinished.ProdId)
                {
                    PmfProdCoBy::lookupInventTransId(
                        _formControl, prodParmReportFinished.ProdId);
                }
                break;
            case fieldnum(ProdParmReportFinished, ProdId) :
                if (isFormula)
                {
                    ProdParmReportFinished::prodLookUp(_formControl,ProdType::Process);
                }
                else
                {
                    ProdParmReportFinished::prodLookUp(_formControl);
                }
                break;
            default :
                super(_fieldId, _formControl, _filterStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the modification of fields for the <c>ProdParmReportFinished</c> datasource
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field that has changed
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        ProdParmReportFinished  prodParmReportFinished = buffer;
        Object                  formObject = formRun;
        ProdTable               prodTable;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(ProdParmReportFinished, ItemId) :
                inventDim.data(InventDim::find(prodParmReportFinished.InventDimId));
                formObject.updateDesign(InventDimFormDesignUpdate::FieldChange);
                break;

            case fieldnum(ProdParmReportFinished, InventTransId) :
                if (! prodParmReportFinished.prodTable().mandatoryRegister())
                {
                    inventDim.data(InventDim::find(prodParmReportFinished.InventDimId));
                }

                formObject.updateDesign(InventDimFormDesignUpdate::FieldChange);
                break;

            case fieldnum(ProdParmReportFinished, ProdId) :
                prodTable = prodParmReportFinished.prodTable();
                prodParmReportFinished.AcceptError =
                    prodParmReportFinished.AcceptError || prodTable.PmfCoByVarAllow;
                this.updateDesign();
                this.refreshManager();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the form element has been initialized
    /// </summary>
    /// <remarks>
    /// Initializes the form button manager and adjusts various
    /// properties for the usage of the form with production batch orders
    /// </remarks>
    public void initPost()
    {
        super();

        this.updateLabels();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdParmReportFinished,ProdParmReportFinished_ItemId)),
                methodstr(PmfFormCtrl_ProdParmReportFinished,allowEditItemId),
                ButtonRuleEffectType::Enabled);

            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdParmReportFinished,Identification_ItemId)),
                methodstr(PmfFormCtrl_ProdParmReportFinished,allowEditItemId),
                ButtonRuleEffectType::Enabled);

            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdParmReportFinished,ProdParmReportFinished_PmfProductType)),
                methodstr(PmfFormCtrl_ProdParmReportFinished,isFormulaEnabled),
                ButtonRuleEffectType::Visible);
        }
        else
        {
            this.enableFormControl(formControlStr(ProdParmReportFinished,ProdParmReportFinished_ItemId), false);
            this.enableFormControl(formControlStr(ProdParmReportFinished,Identification_ItemId), false);
            this.parmFormRun().design().controlName(formControlStr(ProdParmReportFinished,ProdParmReportFinished_PmfProductType)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called before the form element will be initialized
    /// </summary>
    /// <remarks>
    /// Initializes the internal member variables to distinguish production orders
    /// from production batch orders
    /// </remarks>
    public void initPre()
    {
        ProdMultiReportFinished prodMultiReportFinished;
        ProdParmReportFinished  prodParmReportFinished;
        ProdTable               prodTable;

        isFormula               = false;
        prodMultiReportFinished = this.args().caller().runBase();

        select firstOnly RecId from prodTable
            exists join prodParmReportFinished
            where prodParmReportFinished.ParmId  == prodMultiReportFinished.parmId()
                && prodParmReportFinished.ProdId == prodTable.ProdId
                && prodTable.ProdType            == ProdType::Process;

        if (prodTable.RecId)
        {
            isFormula = true;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the underlying order is a production batch order
    /// </summary>
    /// <returns>
    /// true, if the order is a production batch order
    /// </returns>
    /// <remarks>
    /// This method is mostly used for the button manager to determine the states of various controls
    /// </remarks>
    public NoYes isFormulaEnabled()
    {
        return #PmfEnabled && isFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common _datasources1 = buffer,
        Common _datasources2 = inventDim,
        Common _datasources3 = null,
        Common _datasources4 = null,
        Common _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdParmReportFinished))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId == tablenum(InventDim))
        {
            inventDim = _datasources2;
            inventDim_ds = FormDataUtil::getFormDataSource(inventDim);
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    /// <remarks>
    /// Updates the states and visibility of form controls based on the type of
    /// order and type of item on the line
    /// </remarks>
    public void updateDesign()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.enableDSField(
                fieldnum(ProdParmReportFinished, InventTransId),
                this.allowEdit());

            this.enableDSField(
                fieldnum(ProdParmReportFinished, ItemId),
                this.allowEditItemId());
        }
        if (this.isCatchWeightEnabled())
        {
            this.visibleDSField(
                fieldnum(ProdParmReportFinished,PdsCWBatchGood),
                true);

            this.visibleDSField(
                fieldnum(ProdParmReportFinished,PdsCWBatchErr),
                true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called during initialization to set the labels of the form
    /// </summary>
    /// <remarks>
    /// Initializes the labels on the form, if the form is used with a
    /// production batch order
    /// </remarks>
    public void updateLabels()
    {
        #define.Grid('Grid')
        #define.InventoryDimensions('InventoryDimensions')
        #define.Identification('Identification')
        #define.ProdParmReportFinished_ProdId('ProdParmReportFinished_ProdId')
        #define.inventoryDimensions_configId('inventoryDimensions_configId')
        #define.Identification_ProdId('Identification_ProdId')

        this.registerCtrlRule(
            formRun.design().controlName(#Grid),
            formRun.design().controlName(#ProdParmReportFinished_ProdId),
            methodstr(PmfFormCtrl_ProdParmReportFinished, isFormulaEnabled),
            ButtonRuleEffectType::Label,
            enum2str(PmfOrderType::ProcessBatch));

        this.registerCtrlRule(
            formRun.design().controlName(#Identification),
            formRun.design().controlName(#Identification_ProdId),
            methodstr(PmfFormCtrl_ProdParmReportFinished, isFormulaEnabled),
            ButtonRuleEffectType::Label,
            enum2str(PmfOrderType::ProcessBatch));

        this.registerCtrlRule(
            formRun.design().controlName(#Grid),
            formRun.design().controlName(#ProdParmReportFinished_ProdId),
            methodstr(PmfFormCtrl_ProdParmReportFinished, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PDS1471");

        this.registerCtrlRule(
            formRun.design().controlName(#Identification),
            formRun.design().controlName(#Identification_ProdId),
            methodstr(PmfFormCtrl_ProdParmReportFinished, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PDS1471");
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_ProdParmReportFinished construct()
    {
        return new PmfFormCtrl_ProdParmReportFinished();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_formRun">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_ProdParmReportFinished newFromForm(FormRun _formRun)
    {
        PdsCWFormCtrl                       cwFormCtrl;
        PmfFormCtrl_ProdParmReportFinished  frmCtrl;

        frmCtrl = PmfFormCtrl_ProdParmReportFinished::construct();
        frmCtrl.parmFormRun(_formRun);

        if (#PdsCatchWeightEnabled)
        {
            cwFormCtrl = PdsCWFormCtrl::constructFromForm(_formRun);

            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                    [[fieldnum(ProdParmReportFinished,QtyError),
                        fieldnum(ProdParmReportFinished,PdsCWBatchErr)],
                     [fieldnum(ProdParmReportFinished,QtyGood),
                        fieldnum(ProdParmReportFinished,PdsCWBatchGood)]]));
            cwFormCtrl.parmItemFieldId(fieldnum(ProdParmReportFinished,ItemId));

            frmCtrl.addSubFormCtrl(cwFormCtrl);
        }

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>