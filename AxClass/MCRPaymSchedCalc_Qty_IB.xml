<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPaymSchedCalc_Qty_IB</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRPaymSchedCalc_Qty_IB</c> is a child of the <c>PaymSchedCalc</c> class
/// and handles the calculations for quantity in installment billing for payment schedule calculation.
/// </summary>
class MCRPaymSchedCalc_Qty_IB extends PaymSchedCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the schedule lines for an installment plan.
    /// </summary>
    /// <param name="_custVendPaymSchedLine">
    ///     The <c>CustVendPaymentSchedLine</c> table buffer to create the lines from.
    /// </param>
    void createTransaction(CustVendPaymentSchedLine _custVendPaymSchedLine)
    {
        CustVendPaymentSchedLine    newCustVendPaymSchedLine = _custVendPaymSchedLine.data();
        Counter                     counter;
        AmountCur                   remainAmountCur = invoiceAmount;
        AmountCur                   totalAmountCur;
        CashDiscAmount              appliedCashDiscAmount;
        CustPaymSchedLine           custPaymSchedLine_MaxLineNum;

        this.setDueDate();

        if (!futures || futures.current() != dueDate)
            futures = Futures::construct(dueDate, custVendPaymSched.QtyUnit, custVendPaymSched.PeriodUnit);

        CustVendPaymSched::deletePaymSchedLines(custVendPaymSched, custVendPaymSchedLine);
        this.setAmount();
        for (counter = 1;  counter <= custVendPaymSched.NumOfPayment;  counter++)
        {
            switch (counter)
            {
                // calculate for first line - First line will be different if allocating
                // tax/misc. charges to the first installment
                case 1:
                    if (custVendPaymSched.TaxDistribution == PaymSchedTaxDistribution::FirstRate)
                    {
                        paymentAmountCur = paymentAmountCur + invoiceTaxAmount;
                    }

                    if (custVendPaymSched.MCRMiscChargeDist == MCRPaymSchedMiscChargeDist::FirstRate)
                    {
                        paymentAmountCur = paymentAmountCur + invoiceMarkUpAmount;
                    }
                    if (custVendPaymSched.LowestAmount > abs(paymentAmountCur))
                    {
                        paymentAmountCur = custVendPaymSched.LowestAmount * sign(paymentAmountCur);
                    }
                    break;
                // resets the paymentAmountCur parameter used to set the installments due amount
                case 2:
                    this.setAmount();
                    break;
                // calculate for last installment - last line will be different if allocating
                // tax/misc. charges to the last installment
                case custVendPaymSched.NumOfPayment:
                    if (custVendPaymSched.TaxDistribution == PaymSchedTaxDistribution::LastRate)
                    {
                        paymentAmountCur = paymentAmountCur + invoiceTaxAmount;
                    }

                    if (custVendPaymSched.MCRMiscChargeDist == MCRPaymSchedMiscChargeDist::LastRate)
                    {
                        paymentAmountCur = paymentAmountCur + invoiceMarkUpAmount;
                    }
                    if (custVendPaymSched.LowestAmount > abs(paymentAmountCur))
                    {
                        paymentAmountCur = custVendPaymSched.LowestAmount * sign(paymentAmountCur);
                    }
                    break;
            }

            // If amount left to allocate is less then the payment amount calculated for each
            // installment, then set it to the remaining.
            if (abs(remainAmountCur) < abs(paymentAmountCur))
            {
                paymentAmountCur = remainAmountCur;
            }

            newCustVendPaymSchedLine.DueDate = dueDate;

            cashDiscDate = this.nextDiscDate(dueDate);

            newCustVendPaymSchedLine.DiscDate   = cashDiscDate;
            newCustVendPaymSchedLine.DueAmount  = paymentAmountCur;

            // back out the installment amount that will be written from
            // the remaining amount that needs to be allocated to the
            // schedule.
            remainAmountCur -= paymentAmountCur;

            if (abs(remainAmountCur) < custVendPaymSched.LowestAmount)
            {
                newCustVendPaymSchedLine.DueAmount += remainAmountCur;
                paymentAmountCur                   += remainAmountCur;
                remainAmountCur                     = 0;
            }

            if (invoiceAmount)
            {
                newCustVendPaymSchedLine.DiscAmount = CurrencyExchangeHelper::amount(cashDiscAmount * newCustVendPaymSchedLine.DueAmount / invoiceAmount, currencyCode);
                appliedCashDiscAmount += newCustVendPaymSchedLine.DiscAmount;
            }

            // insert
            if (newCustVendPaymSchedLine.DueAmount != 0)
            {
                 select maxof(linenum) from custPaymSchedLine_MaxLineNum
                    where custPaymSchedLine_MaxLineNum.ParentRecID == custVendPaymSched.RecId;

                newCustVendPaymSchedLine.LineNum = custPaymSchedLine_MaxLineNum.LineNum + 1;
                newCustVendPaymSchedLine.insert();
            }

            // quit loop if all money has been allocated to the schedule
            totalAmountCur  += paymentAmountCur;
            if (abs(totalAmountCur) >= abs(invoiceAmount))
            {
                break;
            }

            dueDate = this.nextDueDate();
            cashDiscDate = this.nextDiscDate(dueDate);
        }

        if (appliedCashDiscAmount != cashDiscAmount)
        {
            newCustVendPaymSchedLine.DiscAmount += (cashDiscAmount - appliedCashDiscAmount);
            newCustVendPaymSchedLine.update();
        }

        if (invoiceAmount != totalAmountCur)
        {
            this.remainAmountCur(newCustVendPaymSchedLine, (invoiceAmount - totalAmountCur));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the payment amount for the line.
    /// </summary>
    /// <remarks>
    ///     Used to back out the tax, and/or misc charges if
    ///     the associated pmt schedule has not been set up to allocate
    ///     these amounts as proportional when the system is caclulating
    ///     the individual installment amounts.
    /// </remarks>
    void setAmount()
    {
        AmountCur invoiceAmountLoc = invoiceAmount;
        if (custVendPaymSched.TaxDistribution != PaymSchedTaxDistribution::Proportional)
        {
            invoiceAmountLoc = invoiceAmountLoc - invoiceTaxAmount;
        }

        if (custVendPaymSched.MCRMiscChargeDist != MCRPaymSchedMiscChargeDist::Proportional)
        {
            invoiceAmountLoc = invoiceAmountLoc - invoiceMarkUpAmount;
        }

        paymentAmountCur = CurrencyExchangeHelper::amount(invoiceAmountLoc / custVendPaymSched.NumOfPayment, currencyCode);

        if (custVendPaymSched.LowestAmount > abs(paymentAmountCur))
        {
            paymentAmountCur = custVendPaymSched.LowestAmount * sign(invoiceAmount);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
