<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchImportDeclarationTotals_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class PurchImportDeclarationTotals_BR
{
    TmpImportDeclarationTotals_BR   importDeclarationTotals;

    TaxAmount                       importTax;
    TaxAmount                       ipiTax;
    TaxAmount                       cofinsTax;
    TaxAmount                       pisTax;
    TaxAmount                       icmsTax;

    MarkupAmount                    markupFreight;
    MarkupAmount                    markupInsurance;
    MarkupAmount                    markupSiscomex;
    MarkupAmount                    markupOthers;

    Map                             markupAmountMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount of the invoice lines, their misc. charges and taxes grouped by the addition number.
    /// </summary>
    public void calc()
    {
        TaxFiscalClassificationId_BR    lastaddition;
        int                             numOfLines = 0;

        this.initLinesQuery();

        do
        {
            numOfLines++;

            if (this.lineAddition() != lastAddition
                && numOfLines !=1)
            {
                importDeclarationTotals.insert();
                importDeclarationTotals.clear();
            }

            lastAddition = this.lineAddition();

            this.setMarkups();
            this.setTaxes();
            this.setLineAmounts();
        }
        while (this.nextLine());

        if (!importDeclarationTotals)
        {
            importDeclarationTotals.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    protected abstract ExchRate exchRate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesQuery</Name>
				<Source><![CDATA[
    abstract public void initLinesQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAddition</Name>
				<Source><![CDATA[
    protected abstract str lineAddition()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountFOB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates line amount based on FOB presentation
    /// </summary>
    /// <returns>
    /// Line amount value
    /// </returns>
    protected abstract lineAmount lineAmountFOB()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineRecId</Name>
				<Source><![CDATA[
    protected abstract RecId lineRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00019, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    abstract public boolean nextLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupAmountMap</Name>
				<Source><![CDATA[
    public Map parmMarkupAmountMap(Map _markupAmountMap)
    {
        markupAmountMap = _markupAmountMap;

        return markupAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the invoice line amounts.
    /// </summary>
    protected void setLineAmounts()
    {
        importDeclarationTotals.Addition        = this.lineAddition();
        importDeclarationTotals.LineAmountFOB   += this.lineAmountFOB();
        importDeclarationTotals.LineAmountCIF   += this.lineAmountFOB() + markupFreight + markupInsurance + importTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the invoice line miscellaneous charges amounts.
    /// </summary>
    protected abstract void setMarkups()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the invoice line taxes amounts.
    /// </summary>
    protected void setTaxes()
    {
        importTax       = this.taxAmount(TaxType_BR::ImportTax);
        ipiTax          = this.taxAmount(TaxType_BR::IPI);
        cofinsTax       = this.taxAmount(TaxType_BR::COFINS);
        pisTax          = this.taxAmount(TaxType_BR::PIS);
        icmsTax         = this.taxAmount(TaxType_BR::ICMS);

        importDeclarationTotals.ImportTaxAmount     += importTax;
        importDeclarationTotals.IPIAmount           += ipiTax;
        importDeclarationTotals.COFINSAmount        += cofinsTax;
        importDeclarationTotals.PISAmount           += pisTax;
        importDeclarationTotals.ICMSAmount          += icmsTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    abstract public TaxAmount taxAmount(TaxType_BR _taxType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpImportDeclarationTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a temporary table with the calculated values.
    /// </summary>
    /// <returns>
    /// A <c>TmpImportDeclarationTotals_BR</c> table buffer.
    /// </returns>
    public TmpImportDeclarationTotals_BR tmpImportDeclarationTotals()
    {
        return importDeclarationTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    protected abstract TableId transTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>PurchImportDeclarationTotals_BR</c> class from a fiscal document.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// The fiscal document containing the import declaration data.
    /// </param>
    /// <returns>
    /// A <c>PurchImportDeclarationTotals_FDocLine_BR</c> class instance.
    /// </returns>
    public static PurchImportDeclarationTotals_BR newFromFiscalDocument(FiscalDocument_BR _fiscalDocument)
    {
        PurchImportDeclarationTotals_BR importDeclarationTotals;

        importDeclarationTotals = new PurchImportDeclarationTotals_FDocLine_BR(_fiscalDocument);

        return importDeclarationTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>PurchImportDeclarationTotals_BR</c> class from a vendor invoice.
    /// </summary>
    /// <param name="_purchParmTable">
    /// The vendor invoice containing the import declaration data.
    /// </param>
    /// <param name="_tmpTaxWorkTrans">
    /// The temporary taxes table.
    /// </param>
    /// <returns>
    /// A <c>PurchImportDeclarationTotals_Parm_BR</c> class instance.
    /// </returns>
    public static PurchImportDeclarationTotals_BR newFromParmTable(VendInvoiceInfoTable _purchParmTable, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        PurchImportDeclarationTotals_BR importDeclarationTotals;

        importDeclarationTotals = new PurchImportDeclarationTotals_Parm_BR(_purchParmTable, _tmpTaxWorkTrans);

        return importDeclarationTotals;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>