<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardPaymentCardTokenize</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CreditCardPaymentCardTokenize</c> class handles creating a credit card token.
/// </summary>
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Retail=Microsoft.Dynamics.Retail;
using RetailConst=Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants;

public class CreditCardPaymentCardTokenize
{
    #CreditCard
    CreditCardProcessorsName activeProcessorName;
    CreditCardProcessorsName currentProcessorName;

    Retail.PaymentSDK.Portable.IPaymentProcessor processor;
    Retail.PaymentSDK.Portable.PaymentProperty[] processorProperties;
    Retail.PaymentSDK.Portable.PaymentProperty[] paymentCardProperties;

    CustAccount custAccount;
    boolean promptForTokenScope = false;
    RetailTokenScope tokenScope;
    str accessCode;
    boolean isSupportSalesOrderScope = false;
    private int argTableId;
    private RefRecId argRecId;

    internal static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    const boolean Decrypt = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getClrExceptionMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exception message of the last exception thrown.
    /// </summary>
    /// <returns>
    /// The text of the last thrown exception.
    /// </returns>
    public str getClrExceptionMessage()
    {
        str exceptionMessage;
        var perm = new InteropPermission(InteropKind::ClrInterop);

        perm.assert();

        System.Exception exception = CLRInterop::getLastException();
        if (exception)
        {
            exceptionMessage = exception.get_Message();

            System.Exception innerException = exception.get_InnerException();
            if (innerException)
            {
                exceptionMessage = innerException.get_Message();
            }
        }

        CodeAccessPermission::revertAssert();

        return exceptionMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a dialog to the user until all values are correct or the user cancel the operation.
    /// </summary>
    /// <returns>
    /// true if all values are correct and false for user cancellation or system failure.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean success;
        str errors, currency;

        // Find customer information for later use
        LogisticsPostalAddress logisticsPostalAddress;
        Name personName;
        
        if (custAccount)
        {
            CustTable custTable = custTable::find(custAccount);

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                if (custTable.partyType() == DirPartyType::Person)
                {
                    personName = custTable.name();
                }
                logisticsPostalAddress = custTable.postalAddress();
            }

            currency = custTable.Currency;
        }

        // Be sure that if no address is selected that blank
        //  values are passed to the addProp method
        if (!logisticsPostalAddress)
        {
            logisticsPostalAddress.clear();
        }

        // Find supported card types
        var property = CreditCardConnectorSetup::findPropertyByName(processorProperties, RetailConst.GenericNamespace::get_MerchantAccount(), RetailConst.MerchantAccountProperties::get_SupportedTenderTypes());
        str cardTypes = property.get_StringValue();

        // Find the origin of the current URL (including protocol and domain)
        str origin = new System.Uri(URLUtility::getUrl()).GetLeftPart(System.UriPartial::Authority);
        str adaptorPath = origin + "/Connectors/";

        // Prepare request for GetPaymentAcceptPoint()
        var getTokenizationAcceptPointRequestProperties = CreditCardPaymentProperties::fromProperties(processorProperties);
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::IndustryType, System.Convert::ToString(Retail.PaymentSDK.Portable.IndustryType::DirectMarketing)));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_TransactionType(), System.Convert::ToString(Retail.PaymentSDK.Portable.TransactionType::None)));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_SupportCardTokenization(), 'true'));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_HostPageOrigin(), origin));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_PaymentAcceptAdaptorPath(), adaptorPath));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_ShowSameAsShippingAddress(), 'false'));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_CardType(), cardTypes));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_Name(), personName));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_StreetAddress(), logisticsPostalAddress.Street));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_StreetAddress2(), ''));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_City(), logisticsPostalAddress.City));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_State(), logisticsPostalAddress.State));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_PostalCode(), logisticsPostalAddress.ZipCode));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_Country(), LogisticsAddressCountryRegion::find(logisticsPostalAddress.CountryRegionId).ISOcode));

        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::TransactionData, RetailConst.TransactionDataProperties::CurrencyCode, currency));
        getTokenizationAcceptPointRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::TransactionData, RetailConst.TransactionDataProperties::Amount, 0.0));


        var getTokenizationAcceptPointRequest = new Retail.PaymentSDK.Portable.Request();
        getTokenizationAcceptPointRequest.set_Locale(currentUserLanguage());
        getTokenizationAcceptPointRequest.set_Properties(getTokenizationAcceptPointRequestProperties.toArray());

        // Call payment processor to retrieve the URL of the card tokenization page.
        // This page will contain all the necessary card fields for tokenization.
        var getTokenizationAcceptPointResponse = processor.GetPaymentAcceptPoint(getTokenizationAcceptPointRequest);

        // Handle response
        var getTokenizationAcceptPointResponseErrors = CreditCardPaymentErrors::fromPaymentErrors(getTokenizationAcceptPointResponse.get_Errors());
        if (getTokenizationAcceptPointResponseErrors.count() == 0)
        {
            CreditCardTokenizationArgs tokenizationArgs = this.createCreditCardTokenizationArgs(getTokenizationAcceptPointResponse);

            Args args = new Args();
            args.name(formStr(CreditCardTokenization));
            args.parmObject(tokenizationArgs);

            // Open tokenization form
            FormRun formRun = ClassFactory::formRunClassOnClient(args);
            formRun.init();
            formRun.run();
            formRun.wait();

            // Check if the tokenization is completed.
            if (formRun.closedOk())
            {
                // Prepare request for RetrievePaymentAcceptResult()
                var retrieveTokenRequestProperties = CreditCardPaymentProperties::fromProperties(processorProperties);
                retrieveTokenRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_PaymentAcceptResultAccessCode(), tokenizationArgs.parmTokenAccessCode()));
                retrieveTokenRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_CurrencyCode(), currency));
                retrieveTokenRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_IndustryType(), System.Convert::ToString(Retail.PaymentSDK.Portable.IndustryType::DirectMarketing)));
                
                boolean isNonRecurringFeatureEnabled = RetailNonRecurringTokenFeatureExposure::isEnabled();
                boolean isNonRecurring = isNonRecurringFeatureEnabled && tokenizationArgs.parmTokenScope() == RetailTokenScope::NonRecurring;
                
                eventSource.EventWriteRetailNonRecurringTokinizing(isNonRecurringFeatureEnabled, isNonRecurring);

                if (isNonRecurring)
                {
                    CreditCardPaymentProperties cardProperties = CreditCardPaymentProperties::construct();
                    cardProperties.add(retrieveTokenRequestProperties.find(RetailConst.GenericNamespace::get_MerchantAccount(), RetailConst.MerchantAccountProperties::get_ServiceAccountId()));
                    cardProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_CurrencyCode(), currency));
                    cardProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_IsNonRecurring(), System.Convert::ToString(isNonRecurring)));
                    cardProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_IndustryType(), System.Convert::ToString(Retail.PaymentSDK.Portable.IndustryType::DirectMarketing)));
                    cardProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_CardToken(), "NonRecurring"));
                
                    cardProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_SupportCardTokenization(), System.Convert::ToString(isNonRecurring)));
                    cardProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_AllowPartialAuthorization(), System.Convert::ToString(false)));
                    cardProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_TokenizedAuthorization(), System.Convert::ToString(true)));

                    accessCode = tokenizationArgs.parmTokenAccessCode();
                    tokenScope = tokenizationArgs.parmTokenScope();
                    paymentCardProperties = cardProperties.toArray();
                    success = true;
                }
                else
                {
                    if (isNonRecurringFeatureEnabled)
                    {
                        retrieveTokenRequestProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_IsNonRecurring(), System.Convert::ToString(false)));
                    }

                    var retrieveTokenRequest = new Retail.PaymentSDK.Portable.Request();
                    retrieveTokenRequest.set_Locale(currentUserLanguage());
                    retrieveTokenRequest.set_Properties(retrieveTokenRequestProperties.toArray());

                    // Call payment processor to retrieve token by access code
                    var retrieveTokenResponse = processor.RetrievePaymentAcceptResult(retrieveTokenRequest);

                    // Handle response
                    var retrieveTokenResponseErrors = CreditCardPaymentErrors::fromPaymentErrors(retrieveTokenResponse.get_Errors());
                    if (retrieveTokenResponseErrors.count() == 0)
                    {
                        // Tokenization is successful
                        // Add note values to response properties.
                        var retrieveTokenResponseProperties = CreditCardPaymentProperties::fromProperties(retrieveTokenResponse.get_Properties());
                        retrieveTokenResponseProperties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), #CreditCardPaymentCardPropertyName_Note, tokenizationArgs.parmNote()));

                        // Save payment card properties
                        paymentCardProperties = retrieveTokenResponseProperties.toArray();

                        //Write an instrumentation to track the addition of the credit card.
                        eventSource.EventWritePaymentsNewCreditCardAdded(this.getPropertyValue('CardType'));
                        tokenScope = tokenizationArgs.parmTokenScope();

                        success = true;
                    }
                    else
                    {
                        // System internal error, e.g. payment service is down.
                        success = false;
                        errors = retrieveTokenResponseErrors.toString();
                    }
                }
            }
            else
            {
                // Tokenization is cancelled
                success = false;
            }
        }
        else
        {
            // System internal error, e.g. payment service is down.
            success = false;
            errors = getTokenizationAcceptPointResponseErrors.toString();
        }

        // Show error
        if (!success && errors)
        {
            Global::error(errors);
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCreditCardTokenizationArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a <c>CreditCardTokenizationArgs</c> class object.
    /// </summary>
    /// <param name = "_getTokenizationAcceptPointResponse">
    ///     An instance of <c>Microsoft.Dynamics.Retail.PaymentSDK.Portable.Response</c>.
    /// </param>
    /// <returns>
    ///     An instance of <c>CreditCardTokenizationArgs</c> class.
    /// </returns>
    [Wrappable(true)]
    protected final CreditCardTokenizationArgs createCreditCardTokenizationArgs(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Response _getTokenizationAcceptPointResponse)
    {
        // Read PaymentAcceptUrl property from response
        str tokenizationContent = this.propertyValue(_getTokenizationAcceptPointResponse.get_Properties(), RetailConst.GenericNamespace::get_TransactionData(), 'PaymentAcceptContent');
        str tokenizationPageUrl = this.propertyValue(_getTokenizationAcceptPointResponse.get_Properties(), RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_PaymentAcceptUrl());
        str tokenizationPageSubmitUrl = this.propertyValue(_getTokenizationAcceptPointResponse.get_Properties(), RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_PaymentAcceptSubmitUrl());
        str tokenizationMessageOrigin = this.propertyValue(_getTokenizationAcceptPointResponse.get_Properties(), RetailConst.GenericNamespace::get_TransactionData(), RetailConst.TransactionDataProperties::get_PaymentAcceptMessageOrigin());
        
        if (tokenizationMessageOrigin == '')
        {
            if (tokenizationPageUrl != '')
            {
                tokenizationMessageOrigin = new System.Uri(tokenizationPageUrl).GetLeftPart(System.UriPartial::Authority);
            }
            else
            {
                var generator = new Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper.UrlGenerator();
                var currentHost = new System.Uri(UrlUtility::getUrl());
                tokenizationMessageOrigin = currentHost.GetLeftPart(System.UriPartial::Authority);
            }
        }

        RetailTokenScope tokenScopeOverride = this.invokeCardCaptureExtension();

        // Prepare args for card tokenization
        CreditCardTokenizationArgs tokenizationArgs = new CreditCardTokenizationArgs();
        tokenizationArgs.parmTokenizationPageUrl(tokenizationPageUrl);
        tokenizationArgs.parmTokenizationContent(tokenizationContent);
        tokenizationArgs.parmTokenizationPageSubmitUrl(tokenizationPageSubmitUrl);
        tokenizationArgs.parmTokenizationMessageOrigin(tokenizationMessageOrigin);
        tokenizationArgs.parmPromptForTokenScope(promptForTokenScope);
        tokenizationArgs.parmIsSupportSalesOrderScope(isSupportSalesOrderScope);
        tokenizationArgs.parmTokenScopeOverride(tokenScopeOverride);

        tokenizationArgs.parmNote('');

        return tokenizationArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessorPropertyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the value of the named processor property.
    /// </summary>
    /// <param name="_namespace">
    /// A namespace.
    /// </param>
    /// <param name="_name">
    /// A name.
    /// </param>
    /// <returns>
    /// The value of the property.
    /// </returns>
    public anytype getProcessorPropertyValue(str _namespace, str _name)
    {
        return this.propertyValue(processorProperties, _namespace, _name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the value of the named credit card property.
    /// </summary>
    /// <param name="_name">
    /// A name.
    /// </param>
    /// <returns>
    /// The value of the property.
    /// </returns>
    public anytype getPropertyValue(str _name)
    {
        return this.propertyValue(paymentCardProperties, RetailConst.GenericNamespace::get_PaymentCard(), _name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the properties of a credit card as XML.
    /// </summary>
    /// <returns>
    /// An array of properties represented in XML.
    /// </returns>
    public str getXmlString()
    {
        return paymentCardProperties ?
                CreditCardPaymentProperty::clrString2Str(CreditCardPaymentProperties::convertPropertyArrayToXML(paymentCardProperties)) :
                '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTokenScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the token scope for the credit card token.
    /// </summary>
    /// <returns>The token scope.</returns>
    internal RetailTokenScope getTokenScope()
    {
        return tokenScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare for tokenizing the properties for a credit card for a specific processor.
    /// </summary>
    /// <param name="_processorName">
    /// The name of a processor.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The processors name was not found.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// A CLR error occurred while trying to obtain the processor's information.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// An error occurred while trying to obtain the processor's information.
    /// </exception>
    public void init(CreditCardProcessorsName _processorName = currentProcessorName)
    {
        if (_processorName != currentProcessorName) // Only switch if needed
        {
            CreditCardAccountSetup creditCardAccountSetup;
            CreditCardProcessors creditCardProcessors;

            select firstonly creditCardAccountSetup
                exists join creditCardProcessors
                    where
                        creditCardProcessors.Name == _processorName &&
                        creditCardProcessors.RecId == creditCardAccountSetup.CreditCardProcessors;

            if (!creditCardAccountSetup)
            {
                throw error(strFmt("@SYS4040016", _processorName));
            }

            currentProcessorName = _processorName;

            var merchant = creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(Decrypt, '');
            processorProperties = Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(merchant);

            try
            {
                processor = new CreditCardPaymentProcessorFactory().getProcessor(creditCardAccountSetup.ConnectorName);
            }
            catch(Exception::CLRError)
            {
                info(this.getClrExceptionMessage());
                throw error("@SYS4040006");
            }
            catch
            {
                throw error("@SYS4040006");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        Retail.SDKManager.Portable.PaymentProcessorManager::LoadAllAssemblies(CreditCardConnectorSetup::getConnectorsDirectories());
        activeProcessorName = CreditCardProcessors::findActiveProcessor().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the customer account
    /// </summary>
    /// <param name="_custAccount">
    /// Customer account to be used
    /// </param>
    public void parmCustAccount(CustAccount _custAccount = custAccount)
    {
        custAccount = _custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPromptForTokenScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the prompt for token scope.
    /// </summary>
    /// <param name="_promptForTokenScope">
    /// True if you want to prompt for the token scope, otherwise false.
    /// </param>
    /// <returns>
    /// True if prompt for token scope, otherwise hide prompt.
    /// </returns>
    internal boolean parmPromptForTokenScope(boolean _promptForTokenScope = promptForTokenScope)
    {
        if (!prmisdefault(_promptForTokenScope))
        {
            promptForTokenScope = _promptForTokenScope;
        }

        return promptForTokenScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSupportSalesOrderScope</Name>
				<Source><![CDATA[
    internal boolean parmIsSupportSalesOrderScope(boolean _isSupportSalesOrderScope = isSupportSalesOrderScope)
    {
        if (!prmisdefault(_isSupportSalesOrderScope))
        {
            isSupportSalesOrderScope = _isSupportSalesOrderScope;
        }

        return isSupportSalesOrderScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccessCode</Name>
				<Source><![CDATA[
    internal str parmAccessCode(str _accessCode = accessCode)
    {
        accessCode = _accessCode;
        return accessCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgTableId</Name>
				<Source><![CDATA[
    internal int parmArgTableId(int _argTableId = argTableId)
    {
        if (!prmisdefault(_argTableId))
        {
            argTableId = _argTableId;
        }

        return argTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgRecId</Name>
				<Source><![CDATA[
    internal RefRecId parmArgRecId(RefRecId _argRecId = argRecId)
    {
        if (!prmisdefault(_argRecId))
        {
            argRecId = _argRecId;
        }

        return argRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the value of the named property.
    /// </summary>
    /// <param name="_properties">
    /// An array of properties to search for the named property.
    /// </param>
    /// <param name="_namespace">
    /// A namespace.
    /// </param>
    /// <param name="_name">
    /// A name.
    /// </param>
    /// <returns>
    /// The value of the property if found; otherwise, an empty string.
    /// </returns>
    protected anytype propertyValue(Retail.PaymentSDK.Portable.PaymentProperty[] _properties, str _namespace, str _name)
    {
        var property = CreditCardConnectorSetup::findPropertyByName(_properties, _namespace, _name);

        if (property)
        {
            switch (property.get_ValueType())
            {
            case Retail.PaymentSDK.Portable.DataType::DateTime:
                return property.get_DateValue();
            case Retail.PaymentSDK.Portable.DataType::Decimal:
                return property.get_DecimalValue();
            case Retail.PaymentSDK.Portable.DataType::String:
                return property.get_StringValue();
            default:
                return '';
            }
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePaymentCardProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the credit card properties in an internal array.
    /// </summary>
    /// <param name="_properties">
    /// An array of properties.
    /// </param>
    /// <remarks>
    /// Only properties with a PaymetCard namespace are saved.
    /// </remarks>
    protected void savePaymentCardProperties(Retail.PaymentSDK.Portable.PaymentProperty[] _properties)
    {
        var n = _properties.get_Count();
        var nPaymentCardProperties = 0;

        // filter and save only the PaymentCard namespace properties
        for (var i = 0; i < n; i++)
        {
            Retail.PaymentSDK.Portable.PaymentProperty property = _properties.get_Item(i);
            var compare = System.String::CompareOrdinal(property.get_Namespace(), RetailConst.GenericNamespace::get_PaymentCard());
            if (compare == 0)
            {
                nPaymentCardProperties++;
            }
        }
        paymentCardProperties = new Retail.PaymentSDK.Portable.PaymentProperty[nPaymentCardProperties]();
        nPaymentCardProperties = 0;

        for (var i = 0; i < n; i++)
        {
            Retail.PaymentSDK.Portable.PaymentProperty property = _properties.get_Item(i);
            var compare = System.String::CompareOrdinal(property.get_Namespace(), RetailConst.GenericNamespace::get_PaymentCard());
            if (compare == 0)
            {
                paymentCardProperties.set_Item(nPaymentCardProperties, _properties.get_Item(i));
                nPaymentCardProperties++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPropertyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the named credit card property.
    /// </summary>
    /// <param name="_propertyName">
    /// A name.
    /// </param>
    /// <param name="_PropertyValue">
    /// The property's new value.
    /// </param>
    public void setPropertyValue(str _propertyName, anytype _PropertyValue)
    {
        var property = CreditCardConnectorSetup::findPropertyByName(paymentCardProperties, RetailConst.GenericNamespace::get_PaymentCard(), _propertyName);

        if (property)
        {
            switch (property.get_ValueType())
            {
            case Retail.PaymentSDK.Portable.DataType::DateTime:
                property.set_DateValue(_PropertyValue);
                break;
            case Retail.PaymentSDK.Portable.DataType::Decimal:
                property.set_DecimalValue(_PropertyValue);
                break;
            case Retail.PaymentSDK.Portable.DataType::String:
                property.set_StringValue(_PropertyValue);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setXmlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the internal value of properties for a payment card from XML.
    /// </summary>
    /// <param name="_xmlString">
    /// An XML string.
    /// </param>
    /// <param name="_creditCardProcessorsName">
    /// A processor's name.
    /// </param>
    public void setXmlString(str _xmlString, CreditCardProcessorsName _creditCardProcessorsName)
    {
        if (_xmlString)
        {
            paymentCardProperties = Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(_xmlString);
        }
        else
        {
            paymentCardProperties = new Retail.PaymentSDK.Portable.PaymentProperty[0]();
        }

        this.init(_creditCardProcessorsName ? _creditCardProcessorsName : activeProcessorName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>CreditCardPaymentCardTokenize</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>CreditCardPaymentCardTokenize</c> class.
    /// </returns>
    public static CreditCardPaymentCardTokenize construct()
    {
        var cardTokenize = new CreditCardPaymentCardTokenize();

        cardTokenize.init();

        return cardTokenize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeCardCaptureExtension</Name>
				<Source><![CDATA[
    private RetailTokenScope invokeCardCaptureExtension()
    {
        // We don't invoke extension unless the non-recurring token feature is turned on (for backward compatibility)
        if (!RetailNonRecurringTokenFeatureExposure::isEnabled())
        {
            return RetailTokenScope::Unknown;
        }

        boolean isDefaultRetailCustomer = CustTable::isCustomerDefaultForRetail(custAccount);

        CreditCardExtensionParameters extensionParams = CreditCardExtensionParameters::constructCreditCardCaptureParameters(
            custAccount,
            argTableId,
            argRecId);

        CreditCardExtensions::onCapturingCreditCardDetails(extensionParams);
        RetailTokenScope tokenScopeOverride = extensionParams.getTokenScope();

        //We only allow overriding the scope to Customer or SaleOrder value
        if (tokenScopeOverride != RetailTokenScope::Customer && tokenScopeOverride != RetailTokenScope::SalesOrder)
        {
            tokenScopeOverride = RetailTokenScope::Unknown;
        }

        // we don't allow overriding token scope for default retail customer
        if (isDefaultRetailCustomer)
        {
            tokenScopeOverride = RetailTokenScope::Unknown;
        }

        return tokenScopeOverride;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>