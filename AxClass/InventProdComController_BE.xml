<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventProdComController_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The Controller class for <c>InventProdCom_BE</c> report.
/// </summary>
/// <remarks>
///    Execution Procedure:
///    <list type="number">
///       <item>
///          <description>
///             Create a new instance of the <c>InventProdCom_BE</c> object.
///          </description>
///       </item>
///       <item>
///          <description>Initialize the Helper class object.</description>
///       </item>
///       <item>
///          <description>
///             Show the Report dialog and opens the <c>InventProdCom_BE</c> report.
///          </description>
///       </item>
///    </list>
/// </remarks>
class InventProdComController_BE extends SrsReportRunController implements BatchRetryable
{
    private const str FeatureReference = 'BE-00020';

    private const str ssrsReportName = ssrsReportStr('InventProdCom_BE', 'Report');

    TaxBranchNumber                     branchNumber;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    public void runReport()
    {
        TaxBranchNumber             prevBranchNumber;

        InventProdComContract_BE contract = this.parmReportContract().parmRdpContract();
        branchNumber = contract.parmBranchNumber();

        InventProdComTable inventProdComTable = this.parmArgs().record();

        if (branchNumber || InventProdComParameters::find().BranchType == InventProdComBranchType::Company)
        {
            branchNumber = branchNumber? branchNumber : CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::BranchId, inventProdcomTable.PeriodEnd);
        }

        if (branchNumber)
        {
            super();
        }
        else
        {
            QueryRun queryRun = new queryRun(queryStr(InventProdCom_BE));
            while (queryRun.next())
            {
                InventProdComLineWithCode inventProdComLineWithCode = queryRun.get(tableNum(InventProdComLineWithCode)) as InventProdComLineWithCode;
                branchNumber = inventProdComLineWithCode.BranchNumber;
                if (branchNumber != prevBranchNumber)
                {
                    super();
                    prevBranchNumber = branchNumber;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the user interface parameters for  report.
    /// </summary>
    /// <param name="_contract">
    ///    A contract class <c>InventProdComContract_BE</c> object.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setRanges(inventProdComContract_BE _contract)
    {
        Query                       query = this.getFirstQuery();
        const str languageNL        = 'NL';
        const str languageFR        = 'FR';

        InventProdComTable inventProdComTable = this.parmArgs().record();
        RecId inventProdComTableRecid = inventProdComTable.RecId;

        _contract.parmBranchNumber(branchNumber);
        _contract.parmInventProdComPeriodRecID(inventProdComTableRecid);

        query.dataSourceTable(tablenum(InventProdComTable)).range(1).value(queryValue(inventProdComTableRecid));

        switch (strupr(substr(infolog.language(), 1, 2)))
        {
            case languageFR   :
                _contract.parmLanguage(languageFR);
                break;
            default     :
                _contract.parmLanguage(languageNL);
                break;
        }

        if (branchNumber)
        {
            query.dataSourceTable(tablenum(InventProdComLineWithCode)).range(1).value(queryValue(branchNumber));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.record().TableId == tableNum(InventProdComTable))
        {
            InventProdComController_BE  controller  = new InventProdComController_BE();
            controller.parmReportName(ssrsReportName);
            controller.parmArgs(_args);
            controller.parmDialogCaption("@SYS321898");
            controller.startOperation();
        }
        else
        {
            checkFailed("@SYS22539");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this method to change report contract before you run report.
    /// </summary>
    protected void preRunModifyContract()
    {
        InventProdComContract_BE contract = this.parmReportContract().parmRdpContract();
        this.setRanges(contract);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>