<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransOnAccInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransOnAccInvoice extends ProjTransOnAcc
{
    ProjInvoiceOnAcc    projInvoiceOnAcc;

    boolean             calcTransTurnover;
    AmountCur           transTurnover;
    boolean             calcTransTurnoverMST;
    AmountMST           transTurnoverMST;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projInvoiceOnAcc.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for sales amounts that are reported by the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projInvoiceOnAcc.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return projInvoiceOnAcc.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the exchange rate to use for the sales amounts that are reported by this transaction
    /// based on the transaction date.
    /// </summary>
    /// <param name="_transDate">
    /// The date to use to find the exchange rate. Defaults to the transaction date; optional.
    /// </param>
    /// <returns>
    /// The exchange rate to use for the sales amounts that are reported by this transaction.
    /// </returns>
    public ExchRate exchRateSales(TransDate _transDate = dateNull())
    {
        return ProjInvoiceJour::find(projInvoiceOnAcc.ProjInvoiceId,projInvoiceOnAcc.InvoiceDate).ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondarySales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the secondary exchange rate to use for the sales amounts reported by this transaction
    /// based on the transaction date.
    /// </summary>
    /// <param name="_transDate">
    /// The date to use to find the exchange rate; optional.
    /// </param>
    /// <returns>
    /// The secondary exchange rate to use for the sales amounts that are reported by this transaction.
    /// </returns>
    /// <remarks>
    /// The <paramref name="_transDate" /> parameter will use the transaction date if no value is specified.
    /// </remarks>
    public ExchRate exchRateSecondarySales(TransDate _transDate = dateNull())
    {
        return ProjInvoiceJour::find(projInvoiceOnAcc.ProjInvoiceId,projInvoiceOnAcc.InvoiceDate).ExchrateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return ProjProposalJour::find(projInvoiceOnAcc.projInvoiceJour().ProposalId).FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjInvoiceOnAcc _projInvoiceOnAcc)
    {
        projInvoiceOnAcc    = _projInvoiceOnAcc;

        super(_projInvoiceOnAcc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    ProjId projId()
    {
        return projInvoiceOnAcc.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return ProjInvoiceOnAcc.PSAContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public Qty qty()
    {
        return  ProjOnAccTrans::find(this.transId()).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public recId recId()
    {
        return projInvoiceOnAcc.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    SalesPrice salesPrice()
    {
        SalesPrice  ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccInvoice)))
        {
            ret = this.qty() ? CurrencyExchangeHelper::price(this.transTurnover() / this.qty(), this.currencyIdSales()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public tableId tableId()
    {
        return tableName2id(tableStr(ProjInvoiceOnAcc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projInvoiceOnAcc.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The item tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projInvoiceOnAcc.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return projInvoiceOnAcc.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return projInvoiceOnAcc.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur               ret;
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetail;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccInvoice)))
        {
            if (!calcTransTurnover)
            {
                calcTransTurnover = true;
                while select crosscompany projInvoiceOnAccDetail
                    where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId
                {
                    projTransSale = ProjTrans::newProjInvoiceOnAccSale(projInvoiceOnAcc, projInvoiceOnAccDetail);
                    transTurnover += projTransSale.transTurnover();
                }
            }

            ret = transTurnover;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnoverMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total sales amount for this transaction in company currency.
    /// </summary>
    /// <returns>
    /// The total sales amount for this transaction.
    /// </returns>
    public AmountMST transTurnoverMST()
    {
        AmountMST               ret;
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetail;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccInvoice)))
        {
            if (!calcTransTurnoverMST)
            {
                calcTransTurnoverMST = true;
                while select projInvoiceOnAccDetail
                    where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId
                {
                    projTransSale = ProjTrans::newProjInvoiceOnAccSale(projInvoiceOnAcc, projInvoiceOnAccDetail);
                    transTurnoverMST += projTransSale.transTurnoverMST();
                }
            }

            ret = transTurnoverMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulationSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether sales amounts on this transaction are subject to Euro triangulation when
    /// calculating currency exchanges.
    /// </summary>
    /// <returns>
    /// A <c>NoYes::Yes</c> enumeration value if sales amounts on this transaction are subject to Euro
    /// triangulation.
    /// </returns>
    public NoYes triangulationSales()
    {
        return ProjInvoiceJour::find(projInvoiceOnAcc.ProjInvoiceId,projInvoiceOnAcc.InvoiceDate).Triangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    public TransTxt txt()
    {
        return projInvoiceOnAcc.Txt;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>