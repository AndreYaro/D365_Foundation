<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationDataRetrievalAddressCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationDataRetrievalAddressCache</c> is a helper class for table <c>TaxIntegrationDataRetrievalAddressCacheTable</c>.
/// </summary>
internal class TaxIntegrationDataRetrievalAddressCache
{
    private const str LoggerNameDataRetrievalAddressCache = 'Tax Integration - Calculation Service - Data Retrieval Address Cache';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records for table <c>TaxIntegrationDataRetrievalAddressCacheTable</c>.
    /// </summary>
    /// <param name = "_cacheKey">Cache key.</param>
    /// <param name = "_logisticsPostalAddressRecId">RecId for <c>LogisticsPostalAddress</c>.</param>
    /// <param name = "_fromDateTime">The from date time.</param>
    /// <param name = "_toDateTime">The to date time.</param>
    internal static void insertCache(
        container _cacheKey,
        RecId _logisticsPostalAddressRecId,
        utcdatetime _fromDateTime,
        utcdatetime _toDateTime)
    {
        TaxIntegrationDataRetrievalLogisticsEntityType entityType;
        LogisticsLocationRoleType roleType;
        TaxIntegrationDataRetrievalEntityId entityId;

        [entityType, entityId, roleType] = _cacheKey;
        if (_logisticsPostalAddressRecId == 0)
        {
            _fromDateTime = DateTimeUtil::newDateTime(dateNull(), 0);
            _toDateTime = DateTimeUtil::newDateTime(dateMax(), 0);
        }

        // Check if the address date is effective. If yes, they can be inserted or updated to <c>TaxIntegrationDataRetrievalAddressCacheTable</c>.
        utcdatetime currentTime = DateTimeUtil::utcNow();
        if (TaxIntegrationDataRetrievalAddressCacheFlight::instance().isEnabled()
            && _fromDateTime <= currentTime
            && _toDateTime >= currentTime)
        {
            const str CallStack = 'Call stack';
            Microsoft.Dynamics.Ax.Xpp.DuplicateKeyException dupKeyEx;
            try
            {
                TaxIntegrationDataRetrievalAddressCache::writeCacheTable(entityType, roleType, entityId, _logisticsPostalAddressRecId, _fromDateTime, _toDateTime);
            }
            catch (dupKeyEx)
            {
                try
                {
                    // When mulitple thread insert cache in the same time, it is likely to have duplicate key error. Try again to skip this error.
                    TaxIntegrationDataRetrievalAddressCache::writeCacheTable(entityType, roleType, entityId, _logisticsPostalAddressRecId, _fromDateTime, _toDateTime);
                }
                catch (dupKeyEx)
                {
                    // Only record telemetry as we don't want to handle more excptions.
                        const str Exception = 'Exception';

                    using (var context = TaxIntegrationAbstractActivity::getActivityContextStatic(LoggerNameDataRetrievalAddressCache))
                    {
                        context.addCustomProperty(Exception, dupKeyEx.Message);
                        context.addCustomProperty(CallStack, dupKeyEx.StackTrace);
                    }
                }
                catch
                {
                    // Add one more catch to avoid any exception other than duplicate key exception
                    using (var context = TaxIntegrationAbstractActivity::getActivityContextStatic(LoggerNameDataRetrievalAddressCache))
                    {
                        System.String exceptionCallStack = new System.Diagnostics.StackTrace(true).ToString();
                        context.addCustomProperty(CallStack, exceptionCallStack);
                    }
                }
            }
            catch
            {
                // Add one more catch to avoid any exception other than duplicate key exception
                using (var context = TaxIntegrationAbstractActivity::getActivityContextStatic(LoggerNameDataRetrievalAddressCache))
                {
                    System.String exceptionCallStack = new System.Diagnostics.StackTrace(true).ToString();
                    context.addCustomProperty(CallStack, exceptionCallStack);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCacheTable</Name>
				<Source><![CDATA[
    private static void writeCacheTable(
        TaxIntegrationDataRetrievalLogisticsEntityType _entityType,
        LogisticsLocationRoleType _roleType,
        TaxIntegrationDataRetrievalEntityId _entityId,
        RecId _logisticsPostalAddressRecId,
        utcdatetime _fromDateTime,
        utcdatetime _toDateTime)
    {
        ttsbegin;
        TaxIntegrationDataRetrievalAddressCacheTable taxIntegrationDataRetrievalAddressCacheTable = TaxIntegrationDataRetrievalAddressCacheTable::findByCacheKey(_entityType, _entityId, _roleType, true);

        taxIntegrationDataRetrievalAddressCacheTable.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        taxIntegrationDataRetrievalAddressCacheTable.EntityType = _entityType;
        taxIntegrationDataRetrievalAddressCacheTable.RoleType = _roleType;
        taxIntegrationDataRetrievalAddressCacheTable.EntityId = _entityId;
        taxIntegrationDataRetrievalAddressCacheTable.LogisticsPostalAddress = _logisticsPostalAddressRecId;
        taxIntegrationDataRetrievalAddressCacheTable.ValidFrom = _fromDateTime;
        taxIntegrationDataRetrievalAddressCacheTable.ValidTo = _toDateTime;
        taxIntegrationDataRetrievalAddressCacheTable.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records for table <c>TaxIntegrationDataRetrievalAddressCacheTable</c>.
    /// </summary>
    /// <param name = "_logisticsPostalAddressRecId">RecId for <c>LogisticsPostalAddress</c>.</param>
    internal static void deleteCache(RecId _logisticsPostalAddressRecId)
    {
        if (_logisticsPostalAddressRecId)
        {
            TaxIntegrationDataRetrievalAddressCacheTable taxIntegrationDataRetrievalAddressCacheTable;
            delete_from taxIntegrationDataRetrievalAddressCacheTable
                where taxIntegrationDataRetrievalAddressCacheTable.LogisticsPostalAddress == _logisticsPostalAddressRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds logistics postal address for table <c>TaxIntegrationDataRetrievalAddressCacheTable</c>.
    /// </summary>
    /// <param name = "_cacheKey">Cache key</param>
    /// <returns>The logistics postal address.</returns>
    internal static TaxIntegrationDataRetrievalAddressCacheTable findCache(container _cacheKey)
    {
        TaxIntegrationDataRetrievalLogisticsEntityType logisticsEntityType;
        TaxIntegrationDataRetrievalEntityId entityId;
        LogisticsLocationRoleType roleType;
        [logisticsEntityType, entityId, roleType] = _cacheKey;

        TaxIntegrationDataRetrievalAddressCacheTable logisticsPostalAddress = TaxIntegrationDataRetrievalAddressCacheTable::findByCacheKey(
            logisticsEntityType,
            entityId,
            roleType);

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>