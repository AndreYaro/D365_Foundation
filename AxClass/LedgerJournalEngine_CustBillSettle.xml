<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_CustBillSettle</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalEngine_CustBillSettle</c> class supports journals for settling bills of
///    exchange.
/// </summary>
/// <remarks>
///    This class extends <see cref="T:LedgerJournalEngine" />.
/// </remarks>
public class LedgerJournalEngine_CustBillSettle extends LedgerJournalEngine_CustBillOfExchange
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankAccountIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the offset account type and number according to the selected bank account.
    /// </summary>
    /// <param name="ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record buffer that is being modified.
    /// </param>
    public void bankAccountIdModified(LedgerJournalTrans ledgerJournalTrans)
    {
        if ((ledgerJournalTrans.BankRemittanceType == BankRemittanceType::None
                || ledgerJournalTrans.BankRemittanceType == BankRemittanceType::Collection)
            && ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId, LedgerJournalACType::Bank);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankRemittanceTypeModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the offset account type and number according to the selected bank remittance type.
    /// </summary>
    /// <param name="ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record buffer to modify.
    /// </param>
    void bankRemittanceTypeModified(LedgerJournalTrans ledgerJournalTrans)
    {
        if (ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            switch (ledgerJournalTrans.BankRemittanceType)
            {
                case BankRemittanceType::Collection:
                    ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId, LedgerJournalACType::Bank);
                    break;

                case BankRemittanceType::Discount:
                    ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                    ledgerJournalTrans.parmOffsetLedgerDimension(0);
                    break;

                default:
                    break;
            }
        }

        this.initCustPostingProfile(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the customer offset account.
    /// </summary>
    /// <param name = "ledgerJournalTrans">
    ///     A <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    protected void initCustOffsetAccount(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        if (ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            if (ledgerJournalTrans.BankRemittanceType == BankRemittanceType::Discount)
            {
                ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                LedgerDimensionDefaultAccount defaultAccount = this.getLiabilitiesLedgerDimensionForDiscount(ledgerJournalTrans);
                ledgerJournalTrans.parmOffsetLedgerDimension(
                    ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(defaultAccount, ledgerJournalTrans.getOffsetCompany()));
            }
            else if ((ledgerJournalTrans.BankRemittanceType == BankRemittanceType::Collection || ledgerJournalTrans.BankRemittanceType == BankRemittanceType::None)
                && ledgerJournalTrans.BankAccountId)
            {
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId, LedgerJournalACType::Bank);
            }
            else if ((ledgerJournalTrans.BankRemittanceType == BankRemittanceType::Collection || ledgerJournalTrans.BankRemittanceType == BankRemittanceType::None)
                && ledgerJournalTrans.ledgerJournalTable().BankAccountId)
            {
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.ledgerJournalTable().BankAccountId, LedgerJournalACType::Bank);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLiabilitiesLedgerDimensionForDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the default ledger dimension for remittance type discount.
    /// </summary>
    /// <param name = "_ledgerJournalTrans"> 
    ///     Current <c>LegderJournalTrans</c> table buffer.
    /// </param>
    /// <returns>
    ///     Default ledger dimension for remittance type discount.
    /// </returns>
    protected LedgerDimensionDefaultAccount getLiabilitiesLedgerDimensionForDiscount(LedgerJournalTrans _ledgerJournalTrans)
    {
        return CustLedgerAccounts::liabilitiesLedgerDimension(_ledgerJournalTrans.parmAccount(), CustParameters::find().PostingProfileBillsRemitDiscount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustPostingProfile</Name>
				<Source><![CDATA[
    public void initCustPostingProfile(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        switch (ledgerJournalTrans.BankRemittanceType)
        {
            case BankRemittanceType::Collection:
                ledgerJournalTrans.PostingProfile = CustParameters::find().PostingProfileBillsRemitCollection;
                break;

            case BankRemittanceType::Discount:
                ledgerJournalTrans.PostingProfile = CustParameters::find().PostingProfileBillsRemitDiscount;
                break;

            case BankRemittanceType::None:
                ledgerJournalTrans.PostingProfile = CustParameters::find().PostingProfileBills;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedForSettlementWarning</Name>
				<Source><![CDATA[
    boolean markedForSettlementWarning(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;

        if (TaxParameters::find().ConditionalTax)
        {
            if (_ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact
                && _ledgerJournalTrans.amount() != _ledgerJournalTrans.orig().amount())
            {
                ret = checkFailed("@SYS85796");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdate</Name>
				<Source><![CDATA[
    public void settleTransUpdate(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        SpecTrans specTrans;
        CustTransOpen custTransOpen;

        if (TaxParameters::find().ConditionalTax)
        {
            select firstonly crossCompany specTrans
                where specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
                    && specTrans.SpecRecId == ledgerJournalTrans.RecId
                    && specTrans.SpecTableId == ledgerJournalTrans.TableId
            join custTransOpen
                where custTransOpen.DataAreaId == specTrans.RefCompany
                    && custTransOpen.TableId == specTrans.RefTableId
                    && custTransOpen.RecId == specTrans.RefRecId
                    && custTransOpen.AmountCur != specTrans.Balance01;

            if (specTrans)
            {
                ledgerJournalTrans.amountCur2DebCred(0);
                ledgerJournalTrans.write();
                if (ledgerJournalTrans_ds)
                {
                    ledgerJournalTrans_ds.refresh();
                }

                SpecTransManager::constructServer(ledgerJournalTrans, false).deleteAll();

                throw error("@SYS85796");
            }
        }

        CustTrans custTrans;

        CustBillOfExchangeID custBillOfExchangeID;
        CustVendNegInstSeqNum custVendNegInstSeqNum;
        while select crossCompany RecId
        from specTrans
            where specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
                && specTrans.SpecRecId == ledgerJournalTrans.RecId
                && specTrans.SpecTableId == ledgerJournalTrans.TableId
        join RecId from custTransOpen
            where custTransOpen.DataAreaId == specTrans.RefCompany
                && custTransOpen.TableId == specTrans.RefTableId
                && custTransOpen.RecId == specTrans.RefRecId
        join BillOfExchangeID, BillOfExchangeSeqNum from custTrans
            where custTrans.RecId == custTransOpen.RefRecId
                && custTrans.AccountNum == custTransOpen.AccountNum
        {
            if (custBillOfExchangeID
                && (custBillOfExchangeID != custTrans.BillOfExchangeID
                    || custVendNegInstSeqNum != custTrans.BillOfExchangeSeqNum))
            {
                ledgerJournalTrans.amountCur2DebCred(0);

                SpecTransManager::constructServer(ledgerJournalTrans, false).deleteAll();

                throw error("@SYS74107");
            }
            custBillOfExchangeID = custTrans.BillOfExchangeID;
            custVendNegInstSeqNum = custTrans.BillOfExchangeSeqNum;
        }


        this.initCustOffsetAccount(ledgerJournalTrans);

        if (CustBillOfExchangeFinTagFlight::instance().isEnabled() && ledgerJournalTrans.OffsetLedgerDimension)
        {
            this.performFinTagDefaulting(ledgerJournalTrans, AccountOffsetaccount::OffsetAccount);
        }

        ledgerJournalTrans.update();
        ledgerJournalTrans_ds.reread();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>