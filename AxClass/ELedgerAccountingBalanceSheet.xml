<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ELedgerAccountingBalanceSheet</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ELedgerAccountingBalanceSheet</c> class handles the creation of the 'Balanza' XML using GER.
/// </summary>
public class ELedgerAccountingBalanceSheet extends ELedgerAccountingLedgerBalance
{
    #ELedgerAccStatement_MX

    ELedgerAccountingBalanceSheetTmp        balanceSheetTmp;
    private boolean isClosingPeriod;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    private Query getQuery()
    {
        QueryBuildDataSource qbdsMA;
        Query query = new Query();
        
        qbdsMA = query.addDataSource(tableNum(MainAccount));
        qbdsMA.addSelectionField(fieldNum(MainAccount, MainAccountId));
        qbdsMA.addSelectionField(fieldNum(MainAccount, Type));
        qbdsMA.addSelectionField(fieldNum(mainAccount, LedgerChartOfAccounts));
        qbdsMA.addOrderByField(fieldNum(MainAccount, MainAccountId));
        
        qbdsMA.addRange(fieldNum(MainAccount, LedgerChartOfAccounts)).value(SysQuery::value(LedgerChartOfAccounts::current()));
        qbdsMA.addRange(fieldNum(MainAccount, Type)).value(SysQuery::valueNot(DimensionLedgerAccountType::Reporting));
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new xml formatter class
    /// </summary>
    /// <param name="_contract">
    /// The contract instance with necessary parameters
    /// </param>
    protected void new(ELedgerAccountingContract _contract)
    {
        super(_contract);

        formatMapping = LedgerParameters::find().ELedgerAccountingBalanceSheetFormatMapping;

        isClosingPeriod = mthOfYr(toDate) == 12 && dayOfMth(toDate) == 31 && _contract.parmIncludeClosingPeriods();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getELedgerAccountingBalanceSheetTmp</Name>
				<Source><![CDATA[
    private ELedgerAccountingBalanceSheetTmp getELedgerAccountingBalanceSheetTmp(MainAccount _mainAccount)
    {
        AmountMST amountDebit;
        AmountMST amountCredit;

        this.updateLedgerBalancesForAccount(_mainAccount);

        [amountDebit, amountCredit] = this.getLedgerDebitCredit();

        AmountMST openingBalanceAmount;
        if (MexicanAuxiliaryLedgerXMLReportFlight::instance().isEnabled())
        {
            openingBalanceAmount = ledgerBalanceOpened.getAccountingCurrencyBalance();
        }
        else
        {
            openingBalanceAmount = ledgerBalanceOpened.getAccountingCurrencyBalance() + ledgerBalanceOpening.getAccountingCurrencyBalance();
        }
        AmountMST endingBalance = openingBalanceAmount + ledgerBalanceDebitCredit.getAccountingCurrencyDebitBalance() - ledgerBalanceDebitCredit.getAccountingCurrencyCreditBalance();

        if (isClosingPeriod)
        {
            [amountDebit, amountCredit] = this.getClosingAmount(_mainAccount);

            openingBalanceAmount = endingBalance;
            endingBalance = openingBalanceAmount + amountDebit - amountCredit;
        }

        balanceSheetTmp.MainAccountId = _mainAccount.MainAccountId;
        balanceSheetTmp.OpeningBalance = openingBalanceAmount;
        balanceSheetTmp.EndingBalance = endingBalance;
        balanceSheetTmp.Debit = amountDebit;
        balanceSheetTmp.Credit = amountCredit;

        return balanceSheetTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClosingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculated closing amount for the accounting balance sheet.
    /// </summary>
    /// <param name = "_mainAccount">
    /// The <c>MainAccount</c> record.
    /// </param>
    /// <returns>
    /// Sum of closing amounts.
    /// </returns>
    [Wrappable(true)]
    protected final container getClosingAmount(MainAccount _mainAccount)
    {
        AmountMST amountDebit, amountCredit;

        if (_mainAccount.Type == DimensionLedgerAccountType::Total)
        {
            [amountDebit, amountCredit] = this.calculateClosingAmountsSum(_mainAccount, fromDate, toDate);
        }
        else
        {
            [amountDebit, amountCredit] = this.calculateClosingAmounts(_mainAccount, fromDate, toDate);
        }

        return [amountDebit, amountCredit];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDebitCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the values for debit and credit of ledger balance columns
    /// </summary>
    /// <returns>
    /// A container with debit and credit amounts.
    /// </returns>
    private container getLedgerDebitCredit()
    {
        AmountMST      ledgerBalanceAmountDebit;
        AmountMST      ledgerBalanceAmountCredit;
        
        AmountMST      amountDebit;
        AmountMST      amountCredit;
        
        container   containerDebitCredit;
        
        ledgerBalanceAmountDebit  = ledgerBalanceDebitCredit.getAccountingCurrencyDebitBalance();
        ledgerBalanceAmountCredit = ledgerBalanceDebitCredit.getAccountingCurrencyCreditBalance();
        
        if (ledgerBalanceAmountDebit < 0 || ledgerBalanceAmountCredit < 0)
        {
            amountDebit  = abs(ledgerBalanceAmountCredit);
            amountCredit = abs(ledgerBalanceAmountDebit);
        }
        else
        {
            amountDebit  = ledgerBalanceAmountDebit;
            amountCredit = ledgerBalanceAmountCredit;
        }
        
        containerDebitCredit = [amountDebit, amountCredit];
        
        return containerDebitCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerBalancesForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ledger balance variables for the provided account
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account to be used
    /// </param>
    private void updateLedgerBalancesForAccount(MainAccount _mainAccount)
    {
            
        FiscalCalendarYear year = FiscalCalendarYear::findYearByCalendarDate(Ledger::find(Ledger::current()).FiscalCalendar, fromDate);

        FiscalCalendarPeriod period;

        select firstonly period
            order by period.StartDate asc
            where period.FiscalCalendarYear == year.RecId;

        if (period.StartDate == fromDate)
        {
            ledgerBalanceOpened.parmAccountingDateRange(fromDate, fromDate);
            ledgerBalanceOpened.parmIncludeRegularPeriod(false);
            ledgerBalanceOpened.parmSeparateDebitsAndCredits(false);
        }

        else
        {
            ledgerBalanceOpened.parmAccountingDateRange(period.StartDate, fromDate - 1);
            ledgerBalanceOpened.parmIncludeRegularPeriod(true);
            ledgerBalanceOpened.parmSeparateDebitsAndCredits(true);
        }

        ledgerBalanceOpened.calculateBalance(_mainAccount);
        ledgerBalanceOpening.calculateBalance(_mainAccount);
        ledgerBalanceDebitCredit.calculateBalance(_mainAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the balance sheet query.
    /// </summary>
    protected void processQuery()
    {
        MainAccount         mainAccount;
        QueryRun            queryRun;
        RecordInsertList    trialBalanceToBeInserted;

        // RecordInsertList is used due to performance, in order to use it with a temp table,
        // the temp common must be passed as a parameter, and since the buffer is not the first
        // or second constructor parameter, some booleans must be passed before.
        trialBalanceToBeInserted = new RecordInsertList(tableNum(ELedgerAccountingBalanceSheetTmp),
                                                        false, // skip insert
                                                        false, // skip database log
                                                        false, // skip events
                                                        false, // skip aos validation
                                                        false, // skip RLS validation
                                                        balanceSheetTmp);

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            GeneralLedgerBalanceProvider::getBalanceStatus(Ledger::current());
        }
        else
        {
            DimensionFocusUpdateBalance::updateBalance(
                DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, DimensionHierarchy::getMainAccountFocus().Name), true);
        }

        
        queryRun = new QueryRun(this.getQuery());
        
        this.initializeLedgerBalances();
        
        ttsbegin;

        while (queryRun.next())
        {
            mainAccount  = queryRun.get(tableNum(MainAccount));
            ELedgerAccountingBalanceSheetTmp curBalanceSheetTmp = this.getELedgerAccountingBalanceSheetTmp(mainAccount);
            if (curBalanceSheetTmp.OpeningBalance
                || curBalanceSheetTmp.EndingBalance
                || curBalanceSheetTmp.Debit
                || curBalanceSheetTmp.Credit)
            {
                trialBalanceToBeInserted.add(curBalanceSheetTmp);
            }
        }

        trialBalanceToBeInserted.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthToBePrinted</Name>
				<Source><![CDATA[
    private str getMonthToBePrinted()
    {
        const str closingPeriodName = '13';

        return isClosingPeriod ? closingPeriodName : strRFix(int2str(mthOfYr(toDate)), 2, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupFormatMappingRunParameters</Name>
				<Source><![CDATA[
    protected void setupFormatMappingRunParameters()
    {
        formatMappingRun.withParameter(new ERModelDefinitionDatabaseContext()
                .addTemporaryTable(balanceSheetTmp)
            .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ELedgerAccountingBalanceSheet construct(ELedgerAccountingContract _contract)
    {
        return new ELedgerAccountingBalanceSheet(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the file name
    /// </summary>
    /// <returns>
    /// The string that represents file name
    /// </returns>
    public FileName fileName()
    {
        return  reportHeader.getRFC() +
                int2Str(year(toDate)) +
                this.getMonthToBePrinted() +
                'B' +
                reportHeader.getDeliveryType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerBalanceDebitCredit</Name>
				<Source><![CDATA[
    protected void initLedgerBalanceDebitCredit()
    {
        ledgerBalanceDebitCredit = LedgerBalanceMainAccountAmounts::construct();
        
        ledgerBalanceDebitCredit.parmAccountingDateRange(FromDate, toDate);
        ledgerBalanceDebitCredit.parmIncludeRegularPeriod(true);
        ledgerBalanceDebitCredit.parmIncludeClosingPeriod(false);
        ledgerBalanceDebitCredit.parmSeparateDebitsAndCredits(true);
        ledgerBalanceDebitCredit.parmPostingLayerList(con2List([CurrentOperationsTax::Current]));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateClosingAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of closing amounts for a non total account.
    /// </summary>
    /// <param name="_mainAccount">
    /// Main account.
    /// </param>
    /// <param name="_beginPeriod">
    /// From date of balance sheet period.
    /// </param>
    /// <param name="_endPeriod">
    /// To date of balance sheet period.
    /// </param>
    /// <returns>
    /// Sum of closing amounts for a non total account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calculateClosingAmounts(MainAccount _mainAccount, date _beginPeriod, date _endPeriod)
    {
        AmountMST                       debitAmount, creditAmount;
        GeneralJournalEntry             generalJournalEntry;
        GeneralJournalAccountEntry      generalJournalAccountEntry;
        generalJournalAccountEntry_W    generalJournalAccountEntryW;
        FiscalCalendarPeriod            fiscalCalendarPeriod;
        
        while select RecId from generalJournalEntry
            where   generalJournalEntry.Ledger          == Ledger::current()
                &&  generalJournalEntry.PostingLayer    == CurrentOperationsTax::Current
                &&  generalJournalEntry.AccountingDate  >= _beginPeriod
                &&  generalJournalEntry.AccountingDate  <= _endPeriod
        join AccountingCurrencyAmount from generalJournalAccountEntry
            where   generalJournalAccountEntry.GeneralJournalEntry  == generalJournalEntry.RecId
                &&  generalJournalAccountEntry.MainAccount == _mainAccount.RecId
        exists join generalJournalAccountEntryW
            where   generalJournalAccountEntryW.GeneralJournalAccountEntry  == generalJournalAccountEntry.RecId
        exists join fiscalCalendarPeriod
            where   fiscalCalendarPeriod.RecId  == generalJournalEntry.FiscalCalendarPeriod
                &&  fiscalCalendarPeriod.Type   == FiscalPeriodType::Closing
        {
            if (generalJournalAccountEntry.AccountingCurrencyAmount > 0)
            {
                debitAmount += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
            }
            else
            {
                creditAmount += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
            }
        }
        
        return [debitAmount, creditAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateClosingAmountsSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of closing amounts for a total account.
    /// </summary>
    /// <param name="_mainAccount">
    /// Main account.
    /// </param>
    /// <param name="_beginPeriod">
    /// From date of balance sheet period.
    /// </param>
    /// <param name="_endPeriod">
    /// To date of balance sheet period.
    /// </param>
    /// <returns>
    /// Sum of closing amounts for a total account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calculateClosingAmountsSum(MainAccount _mainAccount, date _beginPeriod, date _endPeriod)
    {
        DimensionAttributeValueTotallingCriteria    totallingCriteria;
        MainAccount                                 intervalMainAccount;
        DimensionAttributeValue                     dimAttrValue;

        AmountMST               debitAmount, creditAmount;
        AmountMST               totalDebitAmount, totalCreditAmount;
        int                     sign;

        dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(
            DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount),
            _mainAccount.RecId,
            false,
            false);

        totalDebitAmount = 0;
        totalCreditAmount = 0;

        while select totallingCriteria
            where totallingCriteria.DimensionAttributeValue == dimAttrValue.RecId
        {
            sign = totallingCriteria.InvertTotalSign ? -1 : 1;

            SysDaSearchObject searchObject = ELedgerAccountingBalanceSheetClosingAmountSumQuery::createSearchObject(totallingCriteria, intervalMainAccount);

            SysDaSearchStatement searchStatement = new SysDaSearchStatement();

            while (searchStatement.next(searchObject))
            {
                [debitAmount, creditAmount] = this.calculateClosingAmounts(intervalMainAccount, _beginPeriod, _endPeriod);
                totalDebitAmount += debitAmount * sign;
                totalCreditAmount += creditAmount * sign;
            }
        }

        return [totalDebitAmount, totalCreditAmount];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>