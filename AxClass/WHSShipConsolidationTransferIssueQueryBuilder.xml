<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationTransferIssueQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConsolidationSalesQueryBuilder</c> creates shipment consolidation source line queries.
/// </summary>
internal class WHSShipConsolidationTransferIssueQueryBuilder extends WHSShipConsolidationQueryBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDateRange</Name>
				<Source><![CDATA[
    private void addDateRange(
        QueryBuildDataSource    _salesLineDS,
        Date                    _dateFrom,
        Date                    _dateTo,
        boolean                 _useShippingDates)
    {
        str             queryRangeValue, queryRangeExpression;
        QueryBuildRange qbr;
        FieldName       fieldName;
        FieldId         fieldId;

        //no range filtering
        if (_dateFrom == dateNull() && _dateTo == dateNull())
        {
            return;
        }

        //we have the to as open
        if (_dateTo == dateNull())
        {
            queryRangeExpression =  '(%2 >= %3)';
        }
        else if (_dateFrom == dateNull())//we exclude the ones where confirmed is datenull
        {
            queryRangeExpression = '((%2 > %5) && (%2 <= %4))';
        }
        else
        {
            queryRangeExpression = '((%2 >= %3) && (%2 <= %4))';
        }

        if (_useShippingDates)
        {
            fieldName = fieldStr(InventTransferLine, ShipDate);
            fieldId   = fieldNum(InventTransferLine, ShipDate);
        }
        else
        {
            fieldName = fieldStr(InventTransferLine, ReceiveDate);
            fieldId   = fieldNum(InventTransferLine, ReceiveDate);
        }

        //we need to use findOrCreate in the below code since we follow a pattern where we don't override values that the user have specified on the query
        qbr = SysQuery::findOrCreateRange(_salesLineDS, fieldId);

        if (!qbr.value())
        {
            //we select based on confirmed and if confirmed is not filled we add criteria on requested.
            queryRangeValue = strFmt(
                queryRangeExpression,
                tableStr(SalesLine),
                fieldName,
                date2StrXpp(_dateFrom),
                date2StrXpp(_dateTo),
                date2StrXpp(dateNull()));

            qbr.value(queryRangeValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    internal Query buildQuery(WHSShipConsolidationQueryCriteria _queryData)
    {
        Query                queryBaseQueryCopy = super(_queryData);
        QueryBuildDataSource transferLineDS = queryBaseQueryCopy.dataSourceTable(tableNum(InventTransferLine));

        this.addDateRange(transferLineDS, _queryData.parmShippingDateFrom(), _queryData.parmShippingDateTo(), true);
        this.addDateRange(transferLineDS, _queryData.parmDeliveryDateFrom(), _queryData.parmDeliveryDateTo(), false);

        return queryBaseQueryCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSShipConsolidationTransferIssueQueryBuilder construct()
    {
        return new WHSShipConsolidationTransferIssueQueryBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>