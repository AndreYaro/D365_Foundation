<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Vendor invoice validator.
/// </summary>
internal class VendInvoiceValidator implements VendInvoiceIValidator
{
    protected VendInvoiceIValidationStepGatherer validationStepGatherer;
    protected VendInvoiceIValidationErrorHandler validationErrorHandler;

    protected boolean shouldFailFast;
    private VendInvoiceValidatorInstrumentationActivities instrumentationActivities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void new()
    {
        instrumentationActivities = VendInvoiceValidatorInstrumentationActivities::createFromLoggerName(classStr(VendInvoiceValidator));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForValidationScenario</Name>
				<Source><![CDATA[
    internal static VendInvoiceValidator newForValidationScenario(
        VendInvoiceIValidationStepGatherer _validationStepGatherer,
        VendInvoiceIValidationErrorHandler _validationErrorHandler)
    {
        VendInvoiceValidator invoiceValidator = new VendInvoiceValidator();
        invoiceValidator.validationStepGatherer = _validationStepGatherer;
        invoiceValidator.validationErrorHandler = _validationErrorHandler;
        invoiceValidator.shouldFailFast = false;

        return invoiceValidator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validate()
    {
        List invoiceValidationSteps = this.getValidationSteps();
        return this.performValidationSteps(invoiceValidationSteps);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationSteps</Name>
				<Source><![CDATA[
    private List getValidationSteps()
    {
        return validationStepGatherer.getInvoiceValidationSteps();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performValidationSteps</Name>
				<Source><![CDATA[
    private boolean performValidationSteps(List _validationSteps)
    {
        ListEnumerator invoiceValidationStepEnumerator = _validationSteps.getEnumerator();

        boolean isValidationSuccessful = true;

        using (var activityContext = instrumentationActivities.performValidationStepsContext(_validationSteps.elements(), shouldFailFast))
        {
            // Iterate over gathered validation steps and perform validation
            while (invoiceValidationStepEnumerator.moveNext())
            {
                VendInvoiceIValidationStep validationStep =
                invoiceValidationStepEnumerator.current() as VendInvoiceIValidationStep;

                if (validationStep)
                {
                    System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
                    stopWatch.Start();

                    isValidationSuccessful = this.performValidationStep(validationStep) && isValidationSuccessful;

                    stopWatch.Stop();

                    instrumentationActivities.properties().validationStepDurationProperty(activityContext, validationStep.GetType().Name, stopWatch.get_ElapsedMilliseconds());

                    if (!isValidationSuccessful && shouldFailFast)
                    {
                        break;
                    }
                }
            } 
        }

        return isValidationSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performValidationStep</Name>
				<Source><![CDATA[
    private boolean performValidationStep(VendInvoiceIValidationStep _validationStep)
    {
        boolean isValidationStepSuccessful = true;

        try
        {
            isValidationStepSuccessful = _validationStep.performValidationStep();

            if (!isValidationStepSuccessful)
            {
                VendInvoiceValidationError validationError = _validationStep.getValidationError();
                
                using (var activityContext = instrumentationActivities.validationStepErrorContext(_validationStep.GetType().Name, validationError.getMessage()))
                {
                    this.handleValidationError(validationError);
                }
            }
        }
        catch
        {
            isValidationStepSuccessful = false;
            this.handleValidationException(_validationStep);
        }

        return isValidationStepSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleValidationError</Name>
				<Source><![CDATA[
    private void handleValidationError(VendInvoiceValidationError _validationError)
    {
        validationErrorHandler.handleValidationError(_validationError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleValidationException</Name>
				<Source><![CDATA[
    private void handleValidationException(VendInvoiceIValidationStep _validationStep)
    {
        validationErrorHandler.handleExceptionDuringValidation(_validationStep);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShouldFailFast</Name>
				<Source><![CDATA[
    internal boolean parmShouldFailFast(boolean _shouldFailFast = shouldFailFast)
    {
        shouldFailFast = _shouldFailFast;
        return shouldFailFast;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>