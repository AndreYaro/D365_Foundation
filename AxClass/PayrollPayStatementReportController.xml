<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PayrollPayStatementReportController</c> class is the controller class for the <c>PayrollPayStatementReport</c> report.
/// </summary>

public class PayrollPayStatementReportController extends SrsReportRunController implements BatchRetryable
{
    SRSPrintDestinationSettings printDestinationSetting;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPayrollPaymentMethodType</Name>
				<Source><![CDATA[
    private PayrollPaymentMethodType getPayrollPaymentMethodType(PayrollReportPaymentMethodType _payrollReportPaymentMethodType)
    {
        PayrollPaymentMethodType    payrollPaymentMethodType;

        if (_payrollReportPaymentMethodType == PayrollReportPaymentMethodType::Check)
        {
            payrollPaymentMethodType = PayrollPaymentMethodType::Check;
        }
        else if (_payrollReportPaymentMethodType == PayrollReportPaymentMethodType::ElectronicPayment)
        {
            payrollPaymentMethodType = PayrollPaymentMethodType::ElectronicPayment;
        }

        return payrollPaymentMethodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
protected void preRunModifyContract()
    {
        QueryBuildDataSource                qbdsPayStatement;
        QueryBuildDataSource                qbdsPayPeriod;
        QueryBuildRange                     qbrPayStatement;
        QueryBuildRange                     qbrPayPeriod;
        PayrollPayStatement                 payrollPayStatement;
        PayrollPayCycleRecId                payrollPayCycleRecId;
        PayrollPayPeriodRecId               payrollPayPeriodRecId;
        PayrollReportPaymentMethodType      payrollReportPaymentMethodType;
        PayrollPayStatementReportContract   contract = this.parmReportContract().parmRdpContract() as PayrollPayStatementReportContract;
        VendOutPaymNACHAPayroll             vendOutPaymNACHAPayroll;
        container                           printerSetting;

        contract.parmPrintContributions(PayrollParameters::find().PaySlipContributions);
        qbdsPayStatement = this.getFirstQuery().dataSourceTable(tableNum(PayrollPayStatement));

        if (this.parmArgs().menuItemName() == menuitemOutputStr(PayrollPayStatementReport))
        {
            payrollPayCycleRecId            = contract.parmPayCycle();
            payrollPayPeriodRecId           = contract.parmPayPeriod();
            payrollReportPaymentMethodType  = contract.parmDisbursement();

            if (payrollPayPeriodRecId)
            {
                qbrPayStatement = qbdsPayStatement.addRange(fieldNum(PayrollPayStatement, PayPeriod));
                qbrPayStatement.value(SysQuery::value(payrollPayPeriodRecId));
                qbrPayStatement.status(RangeStatus::Hidden);
            }

            qbdsPayPeriod = this.getFirstQuery().dataSourceTable(tableNum(PayrollPayPeriod));
            if (qbdsPayPeriod)
            {
                qbdsPayPeriod.clearRanges();
            }
            if (payrollPayCycleRecId)
            {
                if (!qbdsPayPeriod)
                {
                    qbdsPayPeriod = qbdsPayStatement.addDataSource(tableNum(PayrollPayPeriod));
                    qbdsPayPeriod.addLink(fieldNum(PayrollPayPeriod, RecId), fieldNum(PayrollPayStatement, PayPeriod));
                    qbdsPayPeriod.joinMode(JoinMode::InnerJoin);
                    qbdsPayPeriod.fetchMode(QueryFetchMode::One2One);
                }
                qbrPayPeriod = qbdsPayPeriod.addRange(fieldNum(PayrollPayPeriod, PayCycle));
                qbrPayPeriod.value(SysQuery::value(payrollPayCycleRecId));
                qbrPayPeriod.status(RangeStatus::Hidden);
            }

            if (payrollReportPaymentMethodType != PayrollReportPaymentMethodType::All)
            {
                qbrPayStatement = qbdsPayStatement.addRange(fieldNum(PayrollPayStatement, PaymentMethodType));
                qbrPayStatement.value(SysQuery::value(this.getPayrollPaymentMethodType(payrollReportPaymentMethodType)));
            }
        }
        else if (this.parmArgs().menuItemName() == menuitemOutputStr(PayrollSinglePayStatementReport))
        {
            payrollPayStatement = this.parmArgs().record() as PayrollPayStatement;
            qbrPayStatement = qbdsPayStatement.addRange(fieldNum(PayrollPayStatement, DocumentNumber));
            qbrPayStatement.value(SysQuery::value(payrollPayStatement.DocumentNumber));
            qbrPayStatement.status(RangeStatus::Hidden);
        }
        else if (this.parmArgs().menuItemName() == menuitemOutputStr(PayrollPayStatementReportPaymJur))
        {
            qbrPayStatement = qbdsPayStatement.addRange(fieldNum(PayrollPayStatement, DocumentNumber));
            qbrPayStatement.value(this.parmArgs().parm());
            qbrPayStatement.status(RangeStatus::Hidden);

            vendOutPaymNACHAPayroll = this.parmArgs().caller();
            printerSetting = vendOutPaymNACHAPayroll.getPrinterSettings(PaymDocumentType::PayrollDisbursement);
            if (conLen(printerSetting) > 0)
            {
                printDestinationSetting = new SRSPrintDestinationSettings();
                printDestinationSetting.unpack(printerSetting);
                this.parmReportContract().parmPrintSettings(printDestinationSetting);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogVisibility</Name>
				<Source><![CDATA[
    private void setDialogVisibility()
    {
        if (this.parmArgs().menuItemName() == menuitemOutputStr(PayrollPayStatementReportPaymJur))
        {
            this.parmShowDialog(false);
        }
        else
        {
            this.parmShowDialog(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    public boolean showQuerySelectButton(str parameterName)
    {
        return (this.parmArgs().menuItemName() == menuitemOutputStr(PayrollPayStatementReport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues(str parameterName)
    {
        return (this.parmArgs().menuItemName() == menuitemOutputStr(PayrollPayStatementReport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PayrollPayStatementReportController controller = new PayrollPayStatementReportController();
        controller.parmReportName(ssrsReportStr(PayrollPayStatementReport, Report));
        controller.parmArgs(_args);
        controller.parmDialogCaption("@Payroll:PayrollPayStatementsReport");
        controller.showBatchTab((controller.parmArgs().menuItemName() == menuitemOutputStr(PayrollPayStatementReport)));
        controller.parmLoadFromSysLastValue(false);
        controller.setDialogVisibility();
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>