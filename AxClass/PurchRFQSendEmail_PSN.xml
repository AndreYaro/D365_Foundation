<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSendEmail_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQSendEmail_PSN</c> class is the vendor email solution class for the request for quotations.
/// </summary>
public class PurchRFQSendEmail_PSN
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sendEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the email to each vendor for the RFQ case if the requirements are met.
    /// </summary>
    /// <param name = "_parmId">
    /// The parameter ID in the <c>PurchRFQParmTable</c> table.
	/// </param>
    public void sendEmail(ParmId _parmId)
    {
        if (_parmId && this.validateEmailTemplate(_parmId))
        {
            PurchRFQParmTable parmTable;
            PurchRFQTable rfqTable;

            while select rfqTable
                exists join VendAccount, rfqCaseId from parmTable
                    where rfqTable.VendAccount == parmTable.VendAccount
                   		&& rfqTable.rfqCaseId == parmTable.rfqCaseId
                        && parmTable.ParmId == _parmId
            {
                if (this.hasContactPerson(rfqTable.ContactPerson, rfqTable.VendAccount)
					&& this.hasEmailAddress(rfqTable.Email, rfqTable.VendAccount))
                {
                    this.sendEmailToVendorForRFQCase(rfqTable);
                }           
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasContactPerson</Name>
				<Source><![CDATA[
    private boolean hasContactPerson(ContactPersonId _contactPersonId, VendAccount _vendorId)
    {
        return (_contactPersonId == '') ? checkFailed(strFmt("@PublicSector:VendorEmailNoContactMessage", _vendorId)) : true;
	}

]]></Source>
			</Method>
			<Method>
				<Name>hasEmailAddress</Name>
				<Source><![CDATA[
    private boolean hasEmailAddress(EmailBase _email,  VendAccount _vendorId)
    {
        return (_email == '') ? checkFailed(strFmt("@PublicSector:VendorEmailNoContactMessage", _vendorId)) : true;
	}

]]></Source>
			</Method>
			<Method>
				<Name>validateEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the email template is valid.
    /// </summary>
    /// <param name = "_parmId">
    /// The parameter ID in the <c>PurchRFQParmTable</c> table.
	/// </param>
    /// <returns>
    /// true if the email tempate is valid; otherwise, false.
	/// </returns>
    protected boolean validateEmailTemplate(ParmId _parmId)
    {
        boolean isValid;

		if (_parmId)
        {
            PurchRFQParmTable parmTable;
            PurchRFQTable rfqTable;
            PurchRFQCaseTable purchRFQCaseTable;

			select firstonly  LanguageId, VendAccount, rfqCaseId from rfqTable
				join ParmId from parmTable
					where rfqTable.VendAccount == parmTable.VendAccount
                        && rfqTable.rfqCaseId == parmTable.rfqCaseId
                        && parmTable.ParmId == _parmId
                join SitesEmailId from purchRFQCaseTable
                    where purchRFQCaseTable.RFQCaseId == rfqTable.RFQCaseId;

            if (rfqTable)
            {
                if (purchRFQCaseTable.SitesEmailId == '')
                {
                    // No message was sent. There is no email template specified on the RFQ case.
                    isValid = checkFailed("@PublicSector:VendorEmailNoEmailTemplateMessage");
                }
                else
                {
                    isValid = this.validateMessageForLanguage(purchRFQCaseTable.SitesEmailId, rfqTable.LanguageId);
                }
            }
        }

        return isValid;
	}

]]></Source>
			</Method>
			<Method>
				<Name>validateMessageForLanguage</Name>
				<Source><![CDATA[
    protected boolean validateMessageForLanguage(SysEmailId _emailId, LanguageId _languageId)
    {
        SysEmailTable emailTable = SysEmailTable::find(_emailId);

        if (!emailTable)
        {
            // No message was sent. There is no email template specified on the RFQ case.
            throw error('@PublicSector:VendorEmailNoEmailTemplateMessage');
        }
 
        SysEmailMessageTable messageTable;

        if (_languageId)
        { 
            messageTable = SysEmailMessageTable::find(emailTable.EmailId, _languageId);
        }

        if (!messageTable && _languageId != emailTable.DefaultLanguage)
        {
			// look for the email message for email template default language as needed.
            messageTable = SysEmailMessageTable::find(emailTable.EmailId, emailTable.DefaultLanguage);
        }
                
        return (messageTable) ? true : checkFailed(strFmt("@SYS74260", emailTable.DefaultLanguage));
	}

]]></Source>
			</Method>
			<Method>
				<Name>sendEmailToVendorForRFQCase</Name>
				<Source><![CDATA[
    protected void sendEmailToVendorForRFQCase(PurchRFQTable _purchRFQTable)
	{ 
        if (!_purchRFQTable)
        {
            // No RFQ case is selected
            throw error('@PublicSector:VendorEmailNoRFQCaseMessage');
		}

        PurchRFQCaseTable purchRFQCaseTable = PurchRFQCaseTable::find(_purchRFQTable.RFQCaseId);

        Map mergeValues = this.getMergeValues(_purchRFQTable);

        str mergeValuesXml = SysEmailTable::createEmailParameterXml(mergeValues);
        
        // Send email based on email template and merge values
        SysEmailTable::sendMail(purchRFQCaseTable.SitesEmailId,
								_purchRFQTable.LanguageId,
								_purchRFQTable.Email,
								mergeValues,
								'',
								mergeValuesXml,
								true,
								curUserId(),
								true);
	}

]]></Source>
			</Method>
			<Method>
				<Name>getMergeValues</Name>
				<Source><![CDATA[
    protected Map getMergeValues(PurchRFQTable _purchRFQTable)
    {      
        PurchRFQPublishTable_PSN rfqPublishTable;
        PurchRFQCaseTable rfqCaseTable;   

        select firstonly rfqPublishTable
            join RFQCaseId, Name, AllowBidByInvitationOnly from rfqCaseTable
				where rfqPublishTable.PurchRFQCaseTable == rfqCaseTable.RecId
					&& rfqCaseTable.RFQCaseId == _purchRFQTable.RFQCaseId;

        if (!rfqPublishTable)
        {
            // No RFQ case is selected
            throw error('@PublicSector:VendorEmailNoRFQCaseMessage');
        }

        // Create the key-value pairs for merge values of the email.
        Map mergeValues = new Map(Types::String, Types::String);

        mergeValues.insert('todaysdate', date2StrUsr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll));
        mergeValues.insert('createddate', this.formatDateTime(rfqPublishTable.CreatedDateTime));
        mergeValues.insert('requester', HcmWorker::find(rfqPublishTable.Requester).name());
        mergeValues.insert('requestingDepartment', rfqPublishTable.RequestingDepartment);

        mergeValues.insert('expiryDateTime', this.formatDateTime(_purchRFQTable.ExpiryDateTime));
        mergeValues.insert('bidType', enum2str(_purchRFQTable.BidType));
        mergeValues.insert('accountnum', _purchRFQTable.VendAccount);
        mergeValues.insert('RFQCase', _purchRFQTable.RFQCaseId);

        mergeValues.insert('RFQCaseName', rfqCaseTable.Name);
        mergeValues.insert('inviteOnly', enum2str(rfqCaseTable.AllowBidByInvitationOnly));
 
        return mergeValues;
	}

]]></Source>
			</Method>
			<Method>
				<Name>formatDateTime</Name>
				<Source><![CDATA[
    private str formatDateTime(utcdatetime _dateTime)
    {
        return strFmt("@PublicSector:VendorEmailUTCTime", datetime2str(_dateTime, DateFlags::FormatAll));
	}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>