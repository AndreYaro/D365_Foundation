<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostPriceCompareDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostPriceCompareDataProvider</c> class provides a temporary buffer for comparison of two prices.
/// </summary>
public class CostPriceCompareDataProvider
{
    PriceCalcId             plannedCostRollupId;
    ItemId                  itemId;
    InventDimId             inventDimId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostPriceCompareDataProvider construct()
    {
        return new CostPriceCompareDataProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>CostPriceCompareDataProvider</c> class from the an instance of the <c>CostPriceCompareArgs</c> class.
    /// </summary>
    /// <param name = "_costPriceCompareArgs">A <c>CostRollupCompareArgs</c> class instance.</param>
    public void init(CostRollupCompareArgs _costPriceCompareArgs)
    {
        this.setItemId(_costPriceCompareArgs.parmItemId());
        this.setInventDimId(_costPriceCompareArgs.parmInventDimId());
        this.setPlannedCostRollupId(_costPriceCompareArgs.parmCostRollupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlannedCostRollupId</Name>
				<Source><![CDATA[
    public void setPlannedCostRollupId(PriceCalcId _plannedCostRollupId)
    {
        plannedCostRollupId = _plannedCostRollupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemId</Name>
				<Source><![CDATA[
    public void setItemId(ItemId _itemId)
    {
        itemId = _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _inventDimId)
    {
        inventDimId = _inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a set comparison of two sets of records from the <c>CostPriceCompareView</c> view for a given pending price and active price.
    /// </summary>
    /// <remarks>
    /// For planned cost the method loads data based on the provided <c>PriceCalcId</c>.
    /// For active cost it looks up the <c>PriceCalcId</c> based on the passed values of <c>ItemId</c> and <c>InventDimId</c>.
    /// If current active cost is not a calculated cost the method will inject/join a single record at level 0.
    ///
    /// The data is loaded in the Multilevel format - meaning that level 0 plus all records
    /// from subsequent levels that are not partial sums are loaded.
    /// </remarks>
    /// <returns><c>CostPriceCompareTmp</c> cursor.</returns>
    public CostPriceCompareTmp loadData()
    {
        CostPriceCompareTmp     priceCompareData;

        InventItemPrice activePrice = InventItemPrice::findCurrent(itemId, CostingVersionPriceType::Cost, inventDimId);

        ttsbegin;
        this.insertDataFromLeftOuterJoin(priceCompareData, activePrice);
        if (activePrice)
        {
            if (activePrice.PriceCalcId)
            {
                this.insertDataFromRightOuterJoin(priceCompareData, activePrice);
            }
            else
            {
                this.insertManuallyCreatedPrice(0, priceCompareData, activePrice);
                this.insertManuallyCreatedPrice(1, priceCompareData, activePrice);
            }
        }
        this.updateUnitCost(priceCompareData);
        this.updateDifferenceFields(priceCompareData);
        ttscommit;

        return priceCompareData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataFromLeftOuterJoin</Name>
				<Source><![CDATA[
    private void insertDataFromLeftOuterJoin(
        CostPriceCompareTmp _priceCompareData,
        InventItemPrice     _price)
    {
        CostPriceCompareView    plannedCost;
        CostPriceCompareView    plannedCost2;

        insert_recordset _priceCompareData (Level, CostGroupType, CostGroupId, Resource, UnitId, Type, CostCompareValue1, QuantityCompareValue1, LotSize1, CostCompareValue2, QuantityCompareValue2, LotSize2)
        select Level, CostGroupType, CostGroupId, Resource, UnitId, Type, Cost, Quantity, LotSize from plannedCost
            where plannedCost.CostRollupId == plannedCostRollupId
            && (plannedCost.IsSplit == false || plannedCost.Level == 0)
            outer join Cost, Quantity, LotSize from plannedCost2
                where plannedCost2.CostRollupId == _price.PriceCalcId
                && (plannedCost.IsSplit == false || plannedCost.Level == 0)
                    && plannedCost.Level == plannedCost2.Level
                    && plannedCost.CostGroupId == plannedCost2.CostGroupId
                    && plannedCost.Resource == plannedCost2.Resource
                    && plannedCost.Type == plannedCost2.Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataFromRightOuterJoin</Name>
				<Source><![CDATA[
    private void insertDataFromRightOuterJoin(
        CostPriceCompareTmp _priceCompareData,
        InventItemPrice     _price)
    {
        CostPriceCompareView    plannedCost;
        CostPriceCompareView    plannedCost2;

        insert_recordset _priceCompareData (Level, CostGroupType, CostGroupId, Resource, UnitId, Type, CostCompareValue2, QuantityCompareValue2, LotSize2)
            select Level, CostGroupType, CostGroupId, Resource, UnitId, Type, Cost, Quantity, LotSize from plannedCost
                where plannedCost.CostRollupId == _price.PriceCalcId
                      && (plannedCost.IsSplit == false || plannedCost.Level == 0)
                notexists join plannedCost2
                    where plannedCost2.CostRollupId == plannedCostRollupId
                        && (plannedCost.IsSplit == false || plannedCost.Level == 0)
                        && plannedCost.Level == plannedCost2.Level
                        && plannedCost.CostGroupId == plannedCost2.CostGroupId
                        && plannedCost.Resource == plannedCost2.Resource
                        && plannedCost.Type == plannedCost2.Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertManuallyCreatedPrice</Name>
				<Source><![CDATA[
    private void insertManuallyCreatedPrice(
        Level               _level,
        CostPriceCompareTmp _priceCompareData,
        InventItemPrice     _price)
    {
        select firstonly forupdate _priceCompareData
                where _priceCompareData.Level == _level
                    && _priceCompareData.CostGroupId == _price.costGroupId()
                    && _priceCompareData.Resource == _price.ItemId;

        // Always include markup in the unit cost to match the way BomCalcTrans calculates unit cost
        _price.PriceAllocateMarkup = true;

        if (_priceCompareData)
        {
            _priceCompareData.QuantityCompareValue2 = _price.PriceUnit;
            _priceCompareData.LotSize2 = _price.priceUnit();
            _priceCompareData.CostCompareValue2 = _price.price();
            _priceCompareData.update();
        }
        else
        {
            _priceCompareData.Level = _level;
            _priceCompareData.Resource = _price.ItemId;
            _priceCompareData.CostGroupType = CostGroupType::DirectMaterials;
            _priceCompareData.CostGroupId = _price.costGroupId();
            _priceCompareData.UnitId = _price.UnitID;
            _priceCompareData.Type = ItemCalcType::Item;
            _priceCompareData.QuantityCompareValue1 = 0;
            _priceCompareData.QuantityCompareValue2 = _price.PriceUnit;
            _priceCompareData.CostCompareValue1 = 0;
            _priceCompareData.LotSize2 = _price.priceUnit();
            _priceCompareData.CostCompareValue2 = _price.price();
            _priceCompareData.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnitCost</Name>
				<Source><![CDATA[
    private void updateUnitCost(CostPriceCompareTmp _priceCompareData)
    {
        update_recordset _priceCompareData
        setting CostCompareValue1 = _priceCompareData.CostCompareValue1 / _priceCompareData.LotSize1
            where _priceCompareData.LotSize1 != 0;

        update_recordset _priceCompareData
        setting CostCompareValue2 = _priceCompareData.CostCompareValue2 / _priceCompareData.LotSize2
            where _priceCompareData.LotSize2 != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDifferenceFields</Name>
				<Source><![CDATA[
    private void updateDifferenceFields(CostPriceCompareTmp _priceCompareData)
    {
        update_recordset _priceCompareData
        setting QuantityDifference = (_priceCompareData.QuantityCompareValue1 - _priceCompareData.QuantityCompareValue2),
                CostDifference = _priceCompareData.CostCompareValue1 - _priceCompareData.CostCompareValue2;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>