<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentAccountingRptDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetImpairmentTransReportDP_JP</c> class is the data provider for the <c>AssetImpairmentTransReport_JP</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetImpairmentAccountingRptContract_JP))
]
class AssetImpairmentAccountingRptDP_JP extends SrsReportDataProviderPreProcessTempDB
{
    AssetImpairmentAccountingRptTmp_JP           assetImpairmentAccountingRptTmp;
    AssetImpairmentAccountingRptHeaderTmp_JP     assetImpairmentAccountingRptHeaderTmp;
    AssetImpairmentAccountingRptContract_JP      contract;

    #define.DefaultFactor(1)
    #define.InThousandsFactor(0.001)
    #define.InMillionsFactor(0.000001)
    #define.InBillionsFactor(0.000000001)
    #define.HundredPercent(0.01)
    #define.Comma(', ')
    #define.NoRemarks('')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00019] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query on different situations.
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    /// <returns>
    /// Returns the built query.
    /// </returns>
    protected Query buildQuery(Query _query)
    {
        QueryBuildDataSource    qbdsTestResult;
        QueryBuildDataSource    qbdsAssetDocumentEntry;

        _query          = new Query(queryStr(AssetImpairmentAccountingRptQuery_JP));
        qbdsTestResult  = _query.dataSourceTable(tableNum(AssetImpairmentTestResult_JP));
        contract        = this.parmDataContract();
        SysQuery::findOrCreateRange(qbdsTestResult, fieldNum(AssetImpairmentTestResult_JP, TestNum)).value(queryValue(contract.parmTestResultNumber()));

        qbdsAssetDocumentEntry  = _query.dataSourceTable(tableNum(AssetDocumentEntry_JP));
        qbdsAssetDocumentEntry.addOrderByField(fieldNum(AssetDocumentEntry_JP, AssetId));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetImpairmentAccountingRptHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>AssetImpairmentTransReportHeaderTmp_JP</c> table.
    /// </summary>
    /// <returns>
    /// The <c>AssetImpairmentTransReportHeaderTmp_JP</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetImpairmentAccountingRptHeaderTmp_JP))
    ]
    public AssetImpairmentAccountingRptHeaderTmp_JP getAssetImpairmentAccountingRptHeaderTmp()
    {
        select assetImpairmentAccountingRptHeaderTmp;
        return assetImpairmentAccountingRptHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetImpairmentAccountingRptTmp_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>AssetImpairmentTransReportTmp_JP</c> table.
    /// </summary>
    /// <returns>
    /// The <c>AssetImpairmentTransReportTmp_JP</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetImpairmentAccountingRptTmp_JP))
    ]
    public AssetImpairmentAccountingRptTmp_JP getAssetImpairmentAccountingRptTmp_JP()
    {
        select assetImpairmentAccountingRptTmp;
        return assetImpairmentAccountingRptTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeaderTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data for report header.
    /// </summary>
    protected void insertHeaderTempTable()
    {
        AssetImpairmentTestResult_JP            testResultTable;

        select firstonly testResultTable
            where testResultTable.TestNum == contract.parmTestResultNumber();

        assetImpairmentAccountingRptHeaderTmp.clear();
        assetImpairmentAccountingRptHeaderTmp.TestResultNum              = testResultTable.TestNum;
        assetImpairmentAccountingRptHeaderTmp.TestDate                   = testResultTable.TestDate;
        assetImpairmentAccountingRptHeaderTmp.TestResultDescription      = testResultTable.Description;
        assetImpairmentAccountingRptHeaderTmp.TestResultStatus           = testResultTable.Status;
        assetImpairmentAccountingRptHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>assetImpairmentAccountingRptTmp_JP</c> table
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    /// <param name="_currencyUnitFactor">
    /// The factor of the currency unit.
    /// </param>
    protected void insertTempTable(Query _query, real _currencyUnitFactor = #DefaultFactor)
    {
        QueryRun                                queryRun = new QueryRun(_query);
        AssetDocumentTrans_JP                   assetDocumentTrans;
        AssetDocumentEntry_JP                   assetDocumentEntry;
        AssetImpairmentTestResultDocument_JP    testResultDocument;
        AssetImpairmentTestResultDocEntry_JP    testResultDocumentEntry;
        AssetImpairmentTestResult_JP            testResultTable;
        AssetImpairmentCGU_JP                   assetImpairmentCGU;
        AssetImpairmentCGURecognitionTotal_JP   cguRecognitionTotal;
        AssetAmount                             postedImpairmentAmount;
        AssetImpairmentAccountingRptTmp_JP      assetImpairmentAccountingRptTmpLocal;
        str                                     systemRemarks;

        while (queryRun.next())
        {
            assetDocumentEntry      = queryRun.get(tableNum(AssetDocumentEntry_JP)) as AssetDocumentEntry_JP;
            testResultDocument      = queryRun.get(tableNum(AssetImpairmentTestResultDocument_JP)) as AssetImpairmentTestResultDocument_JP;
            testResultTable         = queryRun.get(tableNum(AssetImpairmentTestResult_JP)) as AssetImpairmentTestResult_JP;
            testResultDocumentEntry = queryRun.get(tableNum(AssetImpairmentTestResultDocEntry_JP)) as AssetImpairmentTestResultDocEntry_JP;
            assetImpairmentCGU      = AssetImpairmentCGU_JP::find(testResultDocument.CGU);
            cguRecognitionTotal     = AssetImpairmentCGURecognitionTotal_JP::findFromTestResult(testResultTable);

            assetImpairmentAccountingRptTmp.clear();
            assetImpairmentAccountingRptTmp.AssetId                                 = assetDocumentEntry.AssetId;
            assetImpairmentAccountingRptTmp.BookId                                  = assetDocumentEntry.BookId;
            assetImpairmentAccountingRptTmp.AssetName                               = AssetTable::find(assetDocumentEntry.AssetId).Name;
            assetImpairmentAccountingRptTmp.AllocationPriority                      = testResultDocumentEntry.AllocationPriority;
            assetImpairmentAccountingRptTmp.IsSharedAsset                           = testResultDocumentEntry.IsSharedAsset;
            assetImpairmentAccountingRptTmp.ImpairmentAmount                        = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocumentEntry.ImpairmentAdjustment);

            select firstOnly assetDocumentTrans where assetDocumentTrans.AssetDocumentEntry_JP == assetDocumentEntry.RecId;

            if (assetDocumentTrans)
            {
                assetImpairmentAccountingRptTmp.ImpairmentAmountPosted              = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * AssetImpairmentAccountingHelper_JP::calcPostedImpairmentAmtPerEntry(assetDocumentEntry));
            }

            if (testResultDocumentEntry.IsSharedAsset)
            {
                // For goodwill and shared assets
                assetImpairmentAccountingRptTmp.CarryingAmount                      = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocumentEntry.NetBookValue);
                assetImpairmentAccountingRptTmp.SharedAssetType                     = testResultDocumentEntry.SharedAssetType;
                if (testResultTable.NetSellingPriceAsRecovable)
                {
                    assetImpairmentAccountingRptTmp.RecoverableAmount               = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocumentEntry.NetSellingPrice);
                }
                assetImpairmentAccountingRptTmp.BaseAmount                          = AssetDepCalculationHelper_JP::roundOffDepreciation(-1 * _currencyUnitFactor * cguRecognitionTotal.SharedAssetsSubtotalImpairmentAdj);
                assetImpairmentAccountingRptTmp.TaxEffect                           = AssetDepCalculationHelper_JP::roundOffDepreciation(-1 * _currencyUnitFactor * cguRecognitionTotal.SharedAssetsSubtotalImpairmentAdj * contract.parmTaxRate() * #HundredPercent);
                assetImpairmentAccountingRptTmp.SharedAssetTypeID                   = enum2int(testResultDocumentEntry.SharedAssetType);
            }
            else
            {
                // For single fixed asset
                assetImpairmentAccountingRptTmp.CarryingAmount                      = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocumentEntry.NetBookValue);
                assetImpairmentAccountingRptTmp.CarryingAmountAfterImpairment       = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocumentEntry.NetBookValue + _currencyUnitFactor * assetImpairmentAccountingRptTmp.ImpairmentAmountPosted);
                assetImpairmentAccountingRptTmp.BaseAmount                          = AssetDepCalculationHelper_JP::roundOffDepreciation(-1 * _currencyUnitFactor * testResultDocumentEntry.ImpairmentAdjustment);
                assetImpairmentAccountingRptTmp.TaxEffect                           = AssetDepCalculationHelper_JP::roundOffDepreciation(-1 * _currencyUnitFactor * testResultDocumentEntry.ImpairmentAdjustment * contract.parmTaxRate() * #HundredPercent);
                assetImpairmentAccountingRptTmp.SharedAssetTypeID                   = AssetImpairmentSharedAssetTypeID_JP::OrdinaryFixedAsset;
            }

            if (assetImpairmentCGU.Number)
            {
                // For CGU
                assetImpairmentAccountingRptTmp.CGUNumber                           = assetImpairmentCGU.Number;
                assetImpairmentAccountingRptTmp.CGUName                             = assetImpairmentCGU.Name;
                assetImpairmentAccountingRptTmp.CGURecognizeImpairment              = testResultDocument.DocTestResult;
                assetImpairmentAccountingRptTmp.CGUCarryingAmount                   = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocument.NetBookValue);
                assetImpairmentAccountingRptTmp.CGUUndiscountedCashFlow             = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocument.UndiscountedCashFlow);
                assetImpairmentAccountingRptTmp.CGURecoverableAmount                = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocument.RecoverableAmount);
                assetImpairmentAccountingRptTmp.CGUImpairmentAmount                 = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocument.ImpairmentAdjustment);
                assetImpairmentAccountingRptTmp.CGUBaseAmount                       = AssetDepCalculationHelper_JP::roundOffDepreciation(-1 * _currencyUnitFactor * testResultDocument.ImpairmentAdjustment);
                assetImpairmentAccountingRptTmp.CGUTaxEffect                        = AssetDepCalculationHelper_JP::roundOffDepreciation(-1 * _currencyUnitFactor * testResultDocument.ImpairmentAdjustment * contract.parmTaxRate() * #HundredPercent);
                assetImpairmentAccountingRptTmp.CGUCarryingAmountAfterImpairment    = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocument.NetBookValue + _currencyUnitFactor * testResultDocument.ImpairmentAdjustment);
            }

            // For sum-up cells
            assetImpairmentAccountingRptTmp.CGUSubtotalNbv                          = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.CGUSubtotalNbv);
            assetImpairmentAccountingRptTmp.CGUSubtotalImpairmentAdj                = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.CGUSubtotalImpairmentAdj);
            assetImpairmentAccountingRptTmp.CGUSubtotalRecov                        = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.CGUSubtotalRecov);
            assetImpairmentAccountingRptTmp.CGUSubtotalUndisc                       = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.CGUSubtotalUndisc);
            assetImpairmentAccountingRptTmp.CGUSubtotalCrryAmtAftImpmt              = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.CGUSubtotalNbv + _currencyUnitFactor * cguRecognitionTotal.CGUSubtotalImpairmentAdj);
            assetImpairmentAccountingRptTmp.SharedAssetsSubtotalNbv                 = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.SharedAssetsSubtotalNbv);
            assetImpairmentAccountingRptTmp.SharedAssetsSubtotalImpairmentAdj       = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.SharedAssetsSubtotalImpairmentAdj);
            assetImpairmentAccountingRptTmp.SharedAssetsSubtotalRecov               = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.SharedAssetsSubtotalRecov);
            assetImpairmentAccountingRptTmp.SharedAssetsSubtotalCrryAmtAftImpmt     = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.SharedAssetsSubtotalNbv + _currencyUnitFactor * cguRecognitionTotal.SharedAssetsSubtotalImpairmentAdj);
            assetImpairmentAccountingRptTmp.GrandTotalImpairmentAdj                 = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.GrandTotalImpairmentAdj);
            assetImpairmentAccountingRptTmp.GrandTotalNbv                           = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.GrandTotalNbv);
            assetImpairmentAccountingRptTmp.GrandTotalRecov                         = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.GrandTotalRecov);
            assetImpairmentAccountingRptTmp.GrandTotalUndisc                        = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.GrandTotalUndisc);
            assetImpairmentAccountingRptTmp.GrandTotalCrryAmtAftImpmt               = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * cguRecognitionTotal.GrandTotalNbv + _currencyUnitFactor * cguRecognitionTotal.GrandTotalImpairmentAdj);
            assetImpairmentAccountingRptTmp.GrandTotalTestResult                    = cguRecognitionTotal.GrandTotalTestResult;

            if (testResultDocument.DocTestResult == NoYesUnchanged::No)
            {
                if (assetImpairmentAccountingRptTmp.CGURecoverableAmount == 0)
                {
                    // @SYP4880571: *1
                    // @SYP4880591: Substitute carrying amount to recoverable value, because cash generating unit does not need to be impaired.
                    // CGUs with [Test result] is [No], and [Recoverable amount] is 0
                    systemRemarks   = "@SYP4880571";
                }
                else if (assetImpairmentAccountingRptTmp.CGURecoverableAmount < assetImpairmentAccountingRptTmp.CGUCarryingAmount)
                {
                    // @SYP4880572: *2
                    // @SYP4880592: User manually inputted Recoverable value, even though the CGU does not need to be impaired.
                    // CGUs with [Test result] is [No], and [Recoverable amount] is NOT 0, and [Recoverable value] is SMALLER than NBV
                    systemRemarks   = "@SYP4880572";
                }
                else if (assetImpairmentAccountingRptTmp.CGURecoverableAmount > assetImpairmentAccountingRptTmp.CGUCarryingAmount)
                {
                    // @SYP4880573: *3
                    // @SYP4880593: Although user manually inputted Recoverable value. The net book value is still used when allocating impairment from goodwill and shared asset, because the recoverable value inputted was greater than net book value.
                    // CGUs with [Test result] is [No], and [Recoverable amount] is NOT 0, and [Recoverable value] is BIGGER than NBV
                    systemRemarks   = "@SYP4880573";
                }
                else
                {
                    // CGUs with [Test result] is [No], and [Recoverable amount] is NOT 0, and [Recoverable value] is EQUAL as NBV
                    systemRemarks   = #NoRemarks;
                }
            }
            else
            {
                systemRemarks   = #NoRemarks;
            }

            if (testResultDocumentEntry.NetSellingPrice)
            {
                if (systemRemarks != #NoRemarks)
                {
                    systemRemarks   += #Comma;
                }

                if (testResultTable.NetSellingPriceAsRecovable)
                {
                    // @SYP4880574: *4
                    // @SYP4880594: There are shared assets with a net selling price that considered recoverable.
                    // [Net selling price of shared asset are recoverable] is checked
                    systemRemarks   += "@SYP4880574";
                }
                else
                {
                    // @SYP4880575: *5
                    // @SYP4880595: Although, there are shared assets with a net selling price, but the selling prices are not considered recoverable.
                    // [Net selling price of shared asset are recoverable] is NOT checked
                    systemRemarks   += "@SYP4880575";
                }
            }

            if (testResultDocumentEntry.Status == AssetImpairmentTestResultEntryStatus_JP::Posted)
            {
                postedImpairmentAmount  = AssetImpairmentAccountingHelper_JP::calcPostedImpairmentAmtPerEntry(assetDocumentEntry);

                if (postedImpairmentAmount != testResultDocumentEntry.ImpairmentAdjustment)
                {
                    if (systemRemarks != #NoRemarks)
                    {
                        systemRemarks   += #Comma;
                    }

                    // @SYP4880576: *6
                    // @SYP4880596: The posted impairment amount is different from calculated.
                    systemRemarks   += "@SYP4880576";
                }
            }

            if (assetImpairmentAccountingRptTmp.SharedAssetTypeID == AssetImpairmentSharedAssetTypeID_JP::OrdinaryFixedAsset
                && assetImpairmentAccountingRptTmp.ImpairmentAmount
                && testResultDocument.DocTestResult == NoYesUnchanged::No)
            {
                if (systemRemarks != #NoRemarks)
                {
                    systemRemarks   += #Comma;
                }

                // @SYP4880577: *7
                // @SYP4880597: The impairment amount caused by combining goodwill and shared assets, exceeds the amount that can be allocated on goodwill and shared assets; the excess is allocated among cash generating units.
                systemRemarks   += "@SYP4880577";
            }

            assetImpairmentAccountingRptTmp.SystemRemarks   = systemRemarks;

            // For Method II
            if (contract.parmImpairmentMethod() == AssetImpairmentSharedAssetsMethod_JP::Method2)
            {
                if (testResultDocument.DocTestResult == NoYesUnchanged::No)
                {
                    if (assetImpairmentAccountingRptTmp.CGURecoverableAmount == 0)
                    {
                        // @SYP4880571: *1
                        // @SYP4880591: Substitute carrying amount to recoverable value, because cash generating unit does not need to be impaired.
                        // CGUs with [Test result] is [No], and [Recoverable amount] is 0
                        systemRemarks   = "@SYP4880571";
                    }
                    else
                    {
                        // @SYP4880572: *2
                        // @SYP4880592: User manually inputted Recoverable value, even though the CGU does not need to be impaired.
                        // CGUs with [Test result] is [No], and [Recoverable amount] is NOT 0
                        systemRemarks   = "@SYP4880572";
                    }
                }
                else
                {
                    systemRemarks   = #NoRemarks;
                }

                if (testResultDocumentEntry.NetSellingPrice)
                {
                    if (systemRemarks != #NoRemarks)
                    {
                        systemRemarks   += #Comma;
                    }

                    if (testResultTable.NetSellingPriceAsRecovable)
                    {
                        // @SYP4880574: *4
                        // @SYP4880594: There are shared assets with a net selling price that considered recoverable.
                        // [Net selling price of shared asset are recoverable] is checked
                        systemRemarks   += "@SYP4880574";
                    }
                    else
                    {
                        // @SYP4880575: *5
                        // @SYP4880595: Although, there are shared assets with a net selling price, but the selling prices are not considered recoverable.
                        // [Net selling price of shared asset are recoverable] is NOT checked
                        systemRemarks   += "@SYP4880575";
                    }
                }

                if (testResultDocumentEntry.Status == AssetImpairmentTestResultEntryStatus_JP::Posted)
                {
                    postedImpairmentAmount  = AssetImpairmentAccountingHelper_JP::calcPostedImpairmentAmtPerEntry(assetDocumentEntry);

                    if (postedImpairmentAmount != testResultDocumentEntry.ImpairmentAdjustment)
                    {
                        if (systemRemarks != #NoRemarks)
                        {
                            systemRemarks   += #Comma;
                        }

                        // @SYP4880576: *6
                        // @SYP4880596: The posted impairment amount is different from calculated.
                        systemRemarks   += "@SYP4880576";
                    }
                }

                assetImpairmentAccountingRptTmp.SystemRemarks   = systemRemarks;

                if (testResultDocumentEntry.IsSharedAsset)
                {
                    // For goodwill and shared assets
                    assetImpairmentAccountingRptTmp.AllocationOfCarryingAmount      = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocumentEntry.NetBookValue);
                    assetImpairmentAccountingRptTmp.CarryingAmtAfterAllocation      = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocumentEntry.NetBookValue);
                }
                else
                {
                    // For single fixed asset
                    assetImpairmentAccountingRptTmp.CarryingAmtAfterAllocation      = AssetDepCalculationHelper_JP::roundOffDepreciation(_currencyUnitFactor * testResultDocumentEntry.NetBookValue);
                }
            }

            assetImpairmentAccountingRptTmp.insert();
        }

        this.takeOwnershipOfTempTable(assetImpairmentAccountingRptTmpLocal);
        assetImpairmentAccountingRptTmpLocal.linkPhysicalTableInstance(assetImpairmentAccountingRptTmp);

        while select sum(AllocationOfCarryingAmount), sum(ImpairmentAmount) from assetImpairmentAccountingRptTmpLocal
            group by assetImpairmentAccountingRptTmpLocal.AssetId, assetImpairmentAccountingRptTmpLocal.BookId
            where assetImpairmentAccountingRptTmpLocal.SharedAssetTypeID != AssetImpairmentSharedAssetTypeID_JP::OrdinaryFixedAsset
        {
            update_recordSet assetImpairmentAccountingRptTmp
                setting CarryingAmtBeforeAllocation     = assetImpairmentAccountingRptTmpLocal.AllocationOfCarryingAmount,
                        ImpairmentAmtBeforeAllocation   = assetImpairmentAccountingRptTmpLocal.ImpairmentAmount
                where assetImpairmentAccountingRptTmp.SharedAssetTypeID != AssetImpairmentSharedAssetTypeID_JP::OrdinaryFixedAsset
                    && assetImpairmentAccountingRptTmpLocal.AssetId == assetImpairmentAccountingRptTmp.AssetId
                    && assetImpairmentAccountingRptTmpLocal.BookId  == assetImpairmentAccountingRptTmp.BookId;
        }

        while select maxOf(CarryingAmtBeforeAllocation) from assetImpairmentAccountingRptTmpLocal
            group by assetImpairmentAccountingRptTmpLocal.AssetId, assetImpairmentAccountingRptTmpLocal.BookId, assetImpairmentAccountingRptTmpLocal.SharedAssetTypeID
            where assetImpairmentAccountingRptTmpLocal.SharedAssetTypeID != AssetImpairmentSharedAssetTypeID_JP::OrdinaryFixedAsset
        {
            update_recordSet assetImpairmentAccountingRptTmp
                setting SumCarryingAmtBeforeAllocation  = assetImpairmentAccountingRptTmp.SumCarryingAmtBeforeAllocation + assetImpairmentAccountingRptTmpLocal.CarryingAmtBeforeAllocation
            where assetImpairmentAccountingRptTmp.SharedAssetTypeID != AssetImpairmentSharedAssetTypeID_JP::OrdinaryFixedAsset
                && assetImpairmentAccountingRptTmp.SharedAssetTypeID == assetImpairmentAccountingRptTmpLocal.SharedAssetTypeID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    public void cleanUp()
    {
        super();

        this.releaseOwnershipOfTempTable(assetImpairmentAccountingRptTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the <c>AssetImpairmentTransReportTmp_JP</c>report.
    /// </summary>
    public void processReport()
    {
        Query   query   = new Query();

        contract    = this.parmDataContract();
        query       = this.buildQuery(query);

        this.insertHeaderTempTable();

        switch (contract.parmCurrencyUnit())
        {
            case AssetImpairmentCurrencyUnit_JP::FunctionalCurrency:
                this.insertTempTable(query);
                break;

            case AssetImpairmentCurrencyUnit_JP::InThousands:
                this.insertTempTable(query, #InThousandsFactor);
                break;

            case AssetImpairmentCurrencyUnit_JP::InMillions:
                this.insertTempTable(query, #InMillionsFactor);
                break;

            case AssetImpairmentCurrencyUnit_JP::InBillions:
                this.insertTempTable(query, #InBillionsFactor);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>