<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBilling_Installment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRBilling_Installment</c> creates bills
/// and generates credit card charges for installment billing.
/// </summary>
public class MCRBilling_Installment extends MCRBilling
{
    // Dialog variables.
    TransDate       processDate;
    PaymSchedId     paymSchedId;
    SalesID         salesID;

    // Dialog fields
    DialogField     dlgPaymSchedId;
    DialogField     dlgProcessDate;
    DialogField     dlgSalesID;

    TransDate       useDate;

    // Macro for the pack / unpack
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        processDate,
        paymSchedId,
        salesID
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>chargePayments</Name>
				<Source><![CDATA[
    private boolean chargePayments(MCRCustpaymTable _mcrCustpaymTable,
                        CustPaymSchedLine _custPaymSchedLine,
                        MCRInstallmentPlanSalesTable _installmentPlanSalesTable,
                        Date todaysDate)
    {
        MCRCustPaymTable        mcrCustPaymTable_curr;
        Common                  resultRecord;
        MCRInstallmentPayment   mcrInstallmentPayment;
        MCRInstallmentPayment   mcrInstallmentPayment_upd;
        boolean                 paymentPostStatus;
        AmountCur               chargeAmt;

        // Check to see if it already exists
        mcrCustPaymTable_curr =  MCRCustPaymTable::findByRefRecIDRefTableID( _custPaymSchedLine.RecId,
                                                                        _custPaymSchedLine.TableId,
                                                                        true);
        if (!mcrCustPaymTable_curr)
        {
            //Create the payment record
            mcrCustPaymTable_curr = MCRCustPaymTable::copyCustPayment(_mcrCustpaymTable.RefTableId,
                                        _mcrCustpaymTable.RefRecId,
                                        _custPaymSchedLine.TableId,
                                        _custPaymSchedLine.RecId,
                                        _installmentPlanSalesTable.SalesID,
                                        _custPaymSchedLine.DueAmount);

            // Calculate the open transaction amount
            // Also updates the link records to be sure it's not double charged
            chargeAmt = this.processLinkRecords(_custPaymSchedLine.RecId,
                                                todaysDate,
                                                mcrCustPaymTable_curr.RecId);
            // If the dueAmount on the sched line is not the correct amount to charge
            //  update with the open amount.
            if (chargeAmt != mcrCustPaymTable_curr.Amount)
            {
                ttsBegin;
                mcrCustPaymTable_curr.selectForUpdate(true);
                mcrCustPaymTable_curr.Amount = chargeAmt;
                mcrCustPaymTable_curr.update();
                ttsCommit;
            }
        }
        else
        {
            // Calculate the open transaction amount
            // Also updates the link records to be sure it's not double charged
            mcrCustPaymTable_curr.Amount = this.processLinkRecords(_custPaymSchedLine.RecId,
                                                                   todaysDate,
                                                                   mcrCustPaymTable_curr.RecId);
        }

        if (mcrCustPaymTable_curr.IsPrepay != NoYes::Yes)
        {
            ttsBegin;
            mcrCustPaymTable_curr.IsPrepay = NoYes::Yes;
            mcrCustPaymTable_curr.Status = MCRCustPaymStatus::NotSubmitted;
            if (mcrCustPaymTable_curr.validateWrite())
            {
                mcrCustPaymTable_curr.update();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttsCommit;
        }
        //Update the related payment record after finding the correct installment payment record

        resultRecord = this.processPayments(_installmentPlanSalesTable,
                                            mcrCustPaymTable_curr.RecId,
                                            _custPaymSchedLine.RecId);

        mcrInstallmentPayment = resultRecord.data();

        //post the payments if credit card, auth and charge
        paymentPostStatus = this.postPayment(mcrInstallmentPayment);

        //Update the Installment payment record to charged
        mcrInstallmentPayment_upd = MCRInstallmentPayment::findRecId(mcrInstallmentPayment.RecId, true);
        ttsBegin;
        if (paymentPostStatus == true)
        {
            if (mcrInstallmentPayment_upd)
            {
                mcrInstallmentPayment_upd.ChargedDate = todaysDate;
                mcrInstallmentPayment_upd.PaymentStatus = MCRSchedulePaymStatus::Charged;
                if (mcrInstallmentPayment_upd.validateWrite())
                {
                    mcrInstallmentPayment_upd.update();
                }
                else
                {
                    throw error("@SYS104318");
                }
            }
        }
        else
        {
            // Delete the installment payment record
            if (mcrInstallmentPayment_upd.validateDelete())
            {
                mcrInstallmentPayment_upd.delete();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        ttsCommit;
        return paymentPostStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gathers input parameters for running the installment payment process.
    /// </summary>
    /// <returns>
    ///     A dialog for processing installment payments.
    /// </returns>
    public Object dialog()
    {
        DialogGroup                 dialogGrp;
        DialogGroup                 dialogGrpCriteria;
        DialogRunbase               dialog;

        //Setup the dialog
        dialog = new dialogrunbase("@MCR31276", this);
        dialogGrp = dialog.addGroup('');
        dialogGrp.frameType(FormFrameType::None);
        dialogGrp.columns(1);
        //Add the group for the Criteria
        dialogGrpCriteria = dialog.addGroup("@SYS13128", dialogGrp);
        dialogGrpCriteria.frameType(FormFrameType::Auto);
        //Prompt for "Process date"
        dlgProcessDate = dialog.addField(extendedtypestr(TransDate), "@SYS22917");
        dlgProcessDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        //Prompt for "PlanID"
        dlgPaymSchedId = dialog.addField(extendedtypestr(PaymSchedId));
        dlgPaymSchedId.value('');
        //Prompt for "SalesID"
        dlgSalesID = dialog.addField(extendedtypestr(SalesIDBase), "@MCR12613");
        dlgSalesID.value('');

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateConfirmation</Name>
				<Source><![CDATA[
    protected boolean generateConfirmation(Common _inputBuffer,
                                MCRCustPaymType _mcrCustPaymType,
                                RetailEventNotificationType _retailEventNotificationType,
                                Date _processDate = DateNull())
    {
        boolean ret;
        MCRInstallmentPayment MCRInstallmentPayment = _inputBuffer;
        //Send the event type based on the payment method, only onaccount and credit card are installment eligable
        if (_mcrCustPaymType == MCRCustPaymType::OnAccount)
        {
            _retailEventNotificationType = RetailEventNotificationType::MCRInstallmentBill;
        }
        else if (_mcrCustPaymType == MCRCustPaymType::CreditCard)
        {
            _retailEventNotificationType = RetailEventNotificationType::MCRInstallmentCharge;
        }
        else
        {
            return false;
        }

        ret = super(MCRInstallmentPayment, _mcrCustPaymType, _retailEventNotificationType, _processDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the continuity item and the process date from the dialog.
    /// </summary>
    /// <returns>
    ///     The <c>RunBaseBatch</c> super.
    /// </returns>
    public boolean getFromDialog()
    {
        processDate         =   dlgProcessDate.value();
        paymSchedId         =   dlgPaymSchedId.value();
        salesID             =   dlgSalesID.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPayment</Name>
				<Source><![CDATA[
    protected boolean postPayment(Common _inputPaymentBuffer)
    {
        boolean ret;
        MCRInstallmentPayment installmentPayment = _inputPaymentBuffer;
        ret = super(installmentPayment);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInstallmentPaymentSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Process the Installment plan header payments.
    /// </summary>
    public void processInstallmentPaymentSchedule()
    {
        MCRInstallmentPlanSalesTable    mcrInstallmentPlanSalesTable;
        MCRCustPaymTable                mcrCustPaymTable;
        CustPaymSched                   custPaymSched;
        CustPaymSchedLine               custPaymSchedLine;
        MCRInstallmentPayment           mcrInstallmentPayment;
        Date                            todaysDate;
        int                             paymentsBilled;
        int                             paymentsCharged;
        AmountCur                       unPostedAmount;
        boolean                         chargedStatus;
        MCRCustPaymTable                mcrCustPaymTable_Sched;
        MCRPaymSchedLink                mcrPaymSchedLink;

        todaysDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        //Process installment headers with payment schedules.  It will select the
        // payment schedules that are in our date range.
        while select forupdate custPaymSchedLine
            order by DueDate asc
            where custPaymSchedLine.DueDate <= useDate
               && custPaymSchedLine.MCRInstallmentPaymRecID == 0
               && custPaymSchedLine.DueAmount > 0
        join custPaymSched
            where custPaymSched.ExtTableId == tableNum(SalesTable)
               && custPaymSched.RecId == custPaymSchedLine.ParentRecID
        join mcrInstallmentPlanSalesTable
            where mcrInstallmentPlanSalesTable.RecId == custPaymSched.MCRRefRecID
            && ((mcrInstallmentPlanSalesTable.PaymSchedId == paymSchedId) || !paymSchedId)
            && ((mcrInstallmentPlanSalesTable.SalesId == salesID) || !salesID)
        join mcrPaymSchedLink
            where mcrPaymSchedLink.CustPaymSchedLineRefRecId == custPaymSchedLine.RecId
        //Read in the payment information from the cust paym table that matches the record in
        // the installment plan sales table
        outer join mcrCustPaymTable
            where mcrCustPaymTable.RefRecId == mcrInstallmentPlanSalesTable.RecId
               && mcrCustPaymTable.RefTableId == mcrInstallmentPlanSalesTable.TableID
        outer join mcrInstallmentPayment
            where mcrInstallmentPayment.SalesID == mcrInstallmentPlanSalesTable.SalesId
               && mcrInstallmentPayment.PaymSched == mcrInstallmentPlanSalesTable.PaymSchedId
               && mcrInstallmentPayment.CustPaymSchedLineRecID == custPaymSchedLine.RecId
        {
            try
            {
                // The first pass would be to generate letters for all methods of payment
                // On account, credit cards and Echecks - now if the use date is
                // the due date then in case of credit cards and echecks additional work is done
                // to charge the credit card or the echeck.
                if (custPaymSchedLine.DueDate <= useDate)
                {
                    // If this custpaymschedline has never been billed before then
                    // bill it.
                    if (!mcrInstallmentPayment)
                    {
                        //check if a letter has been sent.
                        mcrInstallmentPayment = MCRInstallmentPayment::insertInstallmentPayment(mcrInstallmentPlanSalesTable.SalesId,
                                                                                            mcrInstallmentPlanSalesTable.PaymSchedId,
                                                                                            custPaymSchedLine.RecId);

                        if (mcrCustpaymTable)
                        {
                            this.generateConfirmation(mcrInstallmentPayment,
                                                    mcrCustPaymTable.CustPaymType,
                                                    RetailEventNotificationType::MCRInstallmentCharge,
                                                    processDate);
                        }
                        else
                        {
                            this.generateConfirmation(mcrInstallmentPayment,
                                                    MCRCustPaymType::OnAccount,
                                                    RetailEventNotificationType::MCRInstallmentBill,
                                                    processDate);
                        }

                        paymentsBilled++;
                    }
                }
                // Nothing to charge when installment plan is being paid on account.
                if (mcrCustpaymTable
                    && mcrCustpaymTable.CustPaymType == MCRCustPaymType::CreditCard
                    && custPaymSchedLine.DueDate <= todaysDate)
                {
                    // If there exists an installment payment and
                    // if the date is less than todays date and it has not been charged
                    // charge it.
                    mcrCustPaymTable_Sched = MCRCustPaymTable::findByRefRecIDRefTableID(custPaymSchedLine.RecId, custPaymSchedLine.TableId);
                    if (mcrCustpaymTable_Sched != NULL)
                    {
                        unpostedAmount = mcrCustpaymTable_Sched.getUnpostedAmount();
                    }

                    if (!mcrInstallmentPayment.CustPaymTableRecID
                        || unpostedAmount > 0)
                    {
                        chargedStatus = this.chargePayments(mcrCustPaymTable,
                                                            custPaymSchedLine,
                                                            mcrInstallmentPlanSalesTable,
                                                            todaysDate);
                        if (chargedStatus)
                        {
                            paymentsCharged++;
                        }
                        else
                        {
                            //need to clear the MCRInstallmentPaymentRecID from the custpaymschedline
                            ttsBegin;
                            custPaymSchedLine.reread();
                            custPaymSchedLine.MCRInstallmentPaymRecID = 0;
                            if (custPaymSchedLine.validateWrite())
                            {
                                custPaymSchedLine.update();
                            }
                            else
                            {
                                throw error("@SYS104318");
                            }
                            ttsCommit;
                        }
                    }
                }
            }
            catch
            {
                //continue to next order to process.
                continue;
            }
        }
        //send information message to the log that payments were processed or billed
        info(strfmt("@MCR30780", paymentsBilled, useDate));
        info(strfmt("@MCR30781", paymentsCharged, todaysDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinkRecords</Name>
				<Source><![CDATA[
    private AmountCur processLinkRecords(MCRCustPaymSchedLineRefRecId _custPaymSchedLineRecId,
                                        Date _chargeDate,
                                        MCRCustPaymTableRecID _custPaymTableRecId)
    {
        MCRPaymSchedLink    mcrPaymSchedLink;
        CustTransOpen       custTransOpen;
        AmountCur           chargeAmt;

        ttsBegin;
        while select forUpdate mcrPaymSchedLink
            where mcrPaymSchedLink.CustPaymSchedLineRefRecId == _custPaymSchedLineRecId
               && mcrPaymSchedLink.CustPaymRefRecId == 0
            join AmountCur from custTransOpen
            where custTransOpen.RecId == MCRPaymSchedLink.CustTransOpenRefRecId
        {
            chargeAmt += custTransOpen.AmountCur;
            mcrPaymSchedLink.CustPaymRefRecId = _custPaymTableRecId;

            if (mcrPaymSchedLink.validateWrite())
            {
                mcrPaymSchedLink.update();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        ttsCommit;

        return chargeAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the installment billing job.
    /// </summary>
    public void run()
    {
        super();

        // Flag can be set to get detailed messages in the InfoLog.
        //  - setting to false for shipping.
        detailInfolog = true;

        //A billing lead days is used to generate on-account or credit card billing
        // notifications in advance of their due date.
        if (!processDate)
        {
            processDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        useDate = processDate + MCROrderParameters::find().InstallmentBillLeadTime;

        this.processInstallmentPaymentSchedule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = runbase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDueDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the customer payment due date.
    /// </summary>
    /// <param name="_custPaymSchedLine">
    ///     The customer payment record to be updated.
    /// </param>
    /// <param name="_salesId">
    ///     The salesId relating to the specific due date being updated on the customer payment record.
    /// </param>
    /// <param name="_dueDate">
    ///     The new due date for the customer payment record.
    /// </param>
    private void updateDueDates(CustPaymSchedLine _custPaymSchedLine, SalesId _salesId, TransDate _dueDate)
    {
        CustPaymSched       custPaymSched;
        CustPaymSchedLine   custPaymSchedLine;
        PaymSched           paymSched;
        PaymSchedLine       paymSchedLine;
        SalesTable          salesTable;
        boolean             first = true;
        Futures             futures;
        TransDate           dueDate;

        custPaymSched = CustPaymSched::MCRFindRecID(_custPaymSchedLine.ParentRecID);
        paymSched     = PaymSched::find(custPaymSched.Name);
        salesTable    = SalesTable::find(_salesId);

        ttsBegin;

        if (custPaymSched.PaymSchedBy == PaymSchedBy::Specified)
        {
            while select Qty from paymSchedLine order by qty
                where paymSchedLine.Name == paymSched.Name
            {
                select forupdate custPaymSchedLine order by recid
                    where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                        && custPaymSchedLine.DueDate >= _dueDate;

                if (custPaymSchedLine)
                {
                    if (first)
                    {
                        dueDate = PaymTerm::advanceDate(salesTable.Payment, _dueDate);
                        futures = Futures::construct(dueDate,
                                              paymSchedLine.qty,
                                              custPaymSched.periodUnit);

                        custPaymSchedLine.DueDate = futures.next();
                        custPaymSchedLine.update();
                        first = false;
                    }
                    else
                    {
                        futures = Futures::construct(dueDate,
                                              paymSchedLine.qty,
                                              custPaymSched.periodUnit);

                        custPaymSchedLine.DueDate = futures.next();
                        custPaymSchedLine.update();
                    }
                }
                else
                {
                    break;
                }
            }
        }
        else
        {
            while select forupdate custPaymSchedLine
                order by dueDate
                where custPaymSchedLine.ParentRecID == custPaymSched.RecId && custPaymSchedLine.DueDate >= _dueDate

            {
                if (first)
                {
                    dueDate = PaymTerm::advanceDate(salesTable.Payment, _dueDate);
                    futures = Futures::construct(dueDate, custPaymSched.QtyUnit, custPaymSched.PeriodUnit);
                    first = false;
                }
                else
                {
                    dueDate = PaymDay::roundOffDate(futures.next(), salesTable.paymDayId());
                }

                custPaymSchedLine.DueDate = dueDate;
                custPaymSchedLine.update();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRBilling_Installment construct()
    {
        return new MCRBilling_Installment();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>