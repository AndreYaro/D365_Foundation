<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxExcisePLARegisterHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the excise PLA register handler class.
/// </summary>
public class TaxExcisePLARegisterHandler_IN extends TaxExciseAmountRegisterHandler_IN
{
    ExcisePLARegister_IN  excisePLARegister;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRegisterBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the register buffer
    /// </summary>
    /// <returns>
    /// The register buffer
    /// </returns>
    protected TaxExciseRegister_IN createRegisterBuffer()
    {
        ExcisePLARegister_IN  excisePLARegisterLocal;
        TaxExciseRegister_IN ret;

        ret = excisePLARegisterLocal;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExiseRegisterNumberSequenceReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the excise registration number sequence reference type.
    /// </summary>
    /// <returns>
    /// The excise registration number sequence reference type.
    /// </returns>
    protected ExciseReference_IN getExiseRegisterNumberSequenceReference()
    {
        return ExciseReference_IN::PLA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the register
    /// </summary>
    public void init()
    {
        super();
        excisePLARegister = amountRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefermentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the deferment amount.
    /// </summary>
    /// <returns>
    /// Returns deferredAmount based on the ClaimPercentage defined for respective components.
    /// </returns>
    /// <remarks>
    /// Sets the deferment amount.
    /// </remarks>

    protected TaxAmount setDefermentAmount()
    {
        ExciseRG23ARegister_IN      RG23A;
        ExciseRG23cRegister_IN      RG23C;
        Amount                      deferAmount;
        TaxModelTaxTransaction_IN   taxTransaction;
        TaxExciseAmountRegister_IN  taxExciseAmountRegister;

        taxTransaction = taxTransactionImpl.getTaxTransactionTable();

        if (taxModelExciseTaxable.getExciseDirectSettlement() == DirectSettlement_IN::PLA
            && taxModelExciseTaxable.isExciseCENVATCreditAvailed())
        {
            if (taxModelExciseTaxable.getExciseRecordType() == ExciseRecordType_IN::RG23A)
            {
                deferAmount = taxTransactionImpl.getDefermentAmount();
            }
            else if (taxModelExciseTaxable.getExciseRecordType() == ExciseRecordType_IN::RG23C)
            {
                deferAmount = 0;
            }
        }
        else
        {
            deferAmount = taxTransactionImpl.getDefermentAmount();
        }

        if (taxTransactionImpl.parmClaimPercentage())
        {
            if (taxModelExciseTaxable.getExciseRecordType() == ExciseRecordType_IN::RG23A)
            {
                taxExciseAmountRegister = RG23A;
                taxExciseAmountRegister.data(amountRegister);
                taxExciseAmountRegister.RecoverableAmount = 0;
                RG23A.RG23ADeferredBal =  deferAmount;
                taxExciseAmountRegister.insert();
            }
            else if (taxModelExciseTaxable.getExciseRecordType() == ExciseRecordType_IN::RG23C)
            {
                taxExciseAmountRegister = RG23C;
                taxExciseAmountRegister.data(amountRegister);
                taxExciseAmountRegister.RecoverableAmount = 0;
                RG23C.RG23CDeferredBal =  deferAmount;
                taxExciseAmountRegister.insert();
            }
        }

        return deferAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the quantity.
    /// </summary>
    protected void setTaxAmount()
    {
        if (taxTransactionImpl.parmClaimPercentage())
        {
            amountRegister.PayableAmount = taxTransactionImpl.getPostedTaxAmount() - this.setDefermentAmount();
        }
        else
        {
            amountRegister.PayableAmount = taxTransactionImpl.getPostedTaxAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the data before doing the register.
    /// </summary>
    /// <returns>
    /// True, the validation result is ok to posting register;Otherwise, false.
    /// </returns>
    public boolean validate()
    {
        ExcisePLARegister_IN  excisePLARegisterLocal;
        boolean ret = true;

        ret = super();

        if (ret)
        {
            select sum(DebitBalance), sum(CreditBalance) from excisePLARegisterLocal
                where excisePLARegisterLocal.TaxRegistrationNumberTable == amountRegister.TaxRegistrationNumberTable
                    && excisePLARegisterLocal.TaxComponentTable == amountRegister.TaxComponentTable;
            if (abs(excisePLARegisterLocal.DebitBalance) - abs(excisePLARegisterLocal.CreditBalance) < abs(amountRegister.PayableAmount))
            {
                ret = false;
                throw error(strFmt("@GLS5631", DirectSettlement_IN::PLA));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>