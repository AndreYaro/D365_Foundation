<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSPurchFormLetterHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>PDSPurchFormLetterHandler</c> provides pre-/post- event handlers for Purchase Form Letter classes.
/// </summary>
class PDSPurchFormLetterHandler
{
    PurchFormLetter         formLetter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPotency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if all the potency items are ready for processing.
    /// </summary>
    /// <returns>
    /// true if the potency items that are scheduled for processing are ready; otherwise, false.
    /// </returns>
    protected boolean checkPotency()
    {
        PurchParmLine           purchParmLine;
        PurchLine               purchLine;
        PurchParmTable          purchParmTable;
        PurchParmUpdate         purchParmUpdate = formLetter.purchParmUpdate();
        boolean                 ok = true;

        if (PurchMultithreadedPurchConfirmationFlight::instance().isEnabled())
        {
            while select ReceiveNow
            from purchParmLine
                where purchParmLine.ParmId == purchParmUpdate.ParmId
            join purchLine
                where purchParmLine.InventTransId == purchLine.InventTransId
                    && purchLine.PDSCalculationId != ""
            exists join purchParmTable
                where purchParmTable.ParmId == purchParmLine.ParmId
                    && purchParmTable.TableRefId == purchParmLine.TableRefId
                    && purchParmTable.Ordering == DocumentStatus::PackingSlip
            {
                if (InventTable::find(purchLine.ItemId).PDSPotencyAttribRecording == PDSPotencyAttribRecordingEnum::PurchProdReceipt
                    && !this.checkRegisteredPotencyActuals(purchLine, purchParmLine.ReceiveNow + purchLine.receivedInTotal()))
                {
                    ok = false;
                }
            }
        }
        else
        {
            while select ReceiveNow
            from purchParmLine
                where purchParmLine.ParmId == purchParmUpdate.ParmId
            join purchLine
                where purchParmLine.InventTransId == purchLine.InventTransId
                    && purchLine.PDSCalculationId != ""
            {
                if (InventTable::find(purchLine.ItemId).PDSPotencyAttribRecording == PDSPotencyAttribRecordingEnum::PurchProdReceipt
                    && !this.checkRegisteredPotencyActuals(purchLine, purchParmLine.ReceiveNow + purchLine.receivedInTotal()))
                {
                    ok = false;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegisteredPotencyActuals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that all receipts for the potency item have actual potency value assigned and that there
    /// are sufficient receipts.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> to check.
    /// </param>
    /// <param name="_expectedQty">
    /// The expected registered quantity.
    /// </param>
    /// <returns>
    /// true if there are sufficient registrations and all actual potency values are assigned; otherwise, false.
    /// </returns>
    protected boolean checkRegisteredPotencyActuals(PurchLine _purchLine, InventQty _expectedQty)
    {
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        InventDim           inventDim;
        InventQty           expected = _expectedQty;
        Set                 attributeIds;
        SetEnumerator       attribEnum;
        boolean             ok = true;

        if (_purchLine.PDSCalculationId)
        {
            attributeIds = PDSCalculationTable::find(_purchLine.PDSCalculationId).actualAttributes();

            if (attributeIds.elements())
            {
                select firstOnly RecId
                    from inventTransOrigin
                    where inventTransOrigin.InventTransId == _purchLine.InventTransId;

                while select sum(Qty) from inventTrans
                    where inventTrans.InventTransOrigin  == inventTransOrigin.RecId
                        && inventTrans.StatusReceipt      > StatusReceipt::Purchased
                        && inventTrans.StatusReceipt     <= StatusReceipt::Registered
                        && inventTrans.StatusIssue       == StatusIssue::None
                    join InventBatchId from inventDim
                        group by InventBatchId
                        where inventDim.InventDimId      == inventTrans.InventDimId
                {
                    attribEnum = attributeIds.getEnumerator();
                    while (attribEnum.moveNext())
                    {
                        if (!PdsBatchAttributes::find(_purchLine.ItemId, inventDim.InventBatchId, attribEnum.current()).PdsBatchAttribValue)
                        {
                            ok = checkFailed(strFmt("@PSC748", _purchLine.ItemId, _purchLine.LineNumber, inventDim.inventBatchId, attribEnum.current()));
                        }
                    }

                    expected -= inventTrans.Qty;
                }

                select sum(Qty) from inventTrans
                    where inventTrans.InventTransOrigin  == inventTransOrigin.RecId
                        && inventTrans.StatusReceipt     == StatusReceipt::Purchased
                        && inventTrans.StatusIssue       == StatusIssue::None;

                if (expected > inventTrans.Qty)
                {
                    ok = checkFailed(strFmt("@PSC670", _purchLine.ItemId, _purchLine.LineNumber));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormLetter</Name>
				<Source><![CDATA[
        public PurchFormLetter parmFormLetter(PurchFormLetter _formLetter = formLetter)
    {
        formLetter = _formLetter;

        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PDSPurchFormLetterHandler construct()
    {
        return new PDSPurchFormLetterHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>PDSPurchFormLetterHandler</c> for a given purchase form letter.
    /// </summary>
    /// <param name="_formLetter">
    /// The <c>PurchFormLetter</c> that this will be operating against.
    /// </param>
    /// <returns>
    /// A new <c>PDSPurchFormLetterHandler</c> for form letter <paramref name="_formLetter"/>.
    /// </returns>
    public static PDSPurchFormLetterHandler newFormLetter(PurchFormLetter _formLetter)
    {
        PDSPurchFormLetterHandler       handler;

        if (_formLetter is PurchFormLetter_Invoice)
        {
            handler = PDSPurchFormLetterHandler_Invoice::construct();
        }
        else
        {
            handler = PDSPurchFormLetterHandler::construct();
        }

        handler.parmFormLetter(_formLetter);
        return handler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostHandler</Name>
				<Source><![CDATA[
        [PostHandlerFor(classStr(PurchFormLetter), methodStr(PurchFormLetter, validate))]
    /// <summary>
    /// Validates additional PDS requirements for purchase form letter operation.
    /// </summary>
    /// <param name="_args">
    /// The event subscription arguments.
    /// </param>
    /// <remarks>
    /// This is intended to be a post method event handler for <see cref="PurchFormLetter.validate method"/>.
    /// </remarks>
    public static void validatePostHandler(XppPrePostArgs _args)
    {
        PurchFormLetter             purchFormLetter;
        boolean                     ok;

        ok = _args.getReturnValue();
        if (#PDSPotencyEnabled && ok)
        {
            purchFormLetter = _args.getThis();
            ok = PDSPurchFormLetterHandler::validatePostHandlerOnServer(purchFormLetter.pack(), purchFormLetter.documentStatus());
        }
        _args.setReturnValue(ok);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostHandlerOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates additional PDS requirements for purchase form letter operation.
    /// </summary>
    /// <param name="_purchFormLetterPacked">
    /// The packed instance of <c>PurchFormLetter</c> class.
    /// </param>
    /// <param name="_documentStatus">
    /// The document status related to the current form letter.
    /// </param>
    /// <returns>
    /// true if the potency validation is not applicable or it approves the order; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method runs only on server.
    /// </remarks>
    protected static boolean validatePostHandlerOnServer(container _purchFormLetterPacked, DocumentStatus _documentStatus)
    {
        PDSPurchFormLetterHandler   handler;
        PurchFormLetter             purchFormLetterOnServer = PurchFormLetter::construct(_documentStatus);

        purchFormLetterOnServer.unpack(_purchFormLetterPacked);
        handler = PDSPurchFormLetterHandler::newFormLetter(purchFormLetterOnServer);
        return handler.checkPotency();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>