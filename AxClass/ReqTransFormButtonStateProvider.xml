<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransFormButtonStateProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqTransFormButtonStateProvider
{
    ReqTrans    reqTrans;
    ReqPO       reqPO;
    int         countPmfPlannable;
    int         countChange2Batch;
    int         countBulkPack;
    int         countUnFirmable;
    int         totalCount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRuleButtonPmfPlanOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Can the records be planned with a planning item?
    /// </summary>
    /// <returns>
    /// true if all marked records can be planned; otherwise, false.
    /// </returns>
    public boolean checkRuleButtonPmfPlanOrder()
    {
        if (!totalCount)
        {
            this.updatePmfCounters(reqTrans);
        }

        return countPmfPlannable == totalCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleButtonReqTransPoMarkFirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Can the planned order be firmed?
    /// </summary>
    /// <returns>
    /// true if the order can be firmed; otherwise, false.
    /// </returns>
    public boolean checkRuleButtonReqTransPoMarkFirm()
    {
        if (!totalCount)
        {
            this.updatePmfCounters(reqTrans);
        }

        return countUnFirmable == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleCalcScheduleExpPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the planned order can be further exploded.
    /// </summary>
    /// <returns>
    ///    true if the selected planned order can be further exploded; otherwise, false.
    /// </returns>
    public boolean checkRuleCalcScheduleExpPO()
    {
        return ReqTrans::derivedRefType(reqPO.RefType) != ReqRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleCanHaveKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the planned order can have kanban rules assigned to it.
    /// </summary>
    /// <returns>
    ///    true if the current planned order can have kanban rules assigned; otherwise, false.
    /// </returns>
    public boolean checkRuleCanHaveKanbanRule()
    {
        return reqTrans.RecId
            && ReqTrans::refTypeCanHaveKanbanRule(reqTrans.RefType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChange2Batch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the marked planned orders can be changed to a batch order type.
    /// </summary>
    /// <returns>
    /// true if the order type can be changed; otherwise, false.
    /// </returns>
    public boolean checkRuleChange2Batch()
    {
        if (!totalCount)
        {
            this.updatePmfCounters(reqTrans);
        }

        return countChange2Batch == totalCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChange2Kanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the selected planned order can be changed to a planned kanban.
    /// </summary>
    /// <returns>
    ///    true if the selected planned orders can be changed to planned kanbans; otherwise, false.
    /// </returns>
    public boolean checkRuleChange2Kanban()
    {
        return (reqTrans.RefType != ReqRefType::PlannedKanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChange2Production</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected planned order can be changed to a planned production order.
    /// </summary>
    /// <returns>
    ///    true if the selected planned orders can be changed to planned production orders; otherwise, false.
    /// </returns>
    public boolean checkRuleChange2Production()
    {
        return (reqTrans.RefType != ReqRefType::BOMPlannedOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChange2Purch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected planned order can be changed to a planned purchase order.
    /// </summary>
    /// <returns>
    ///    true if the selected planned orders can be changed to planned purchase orders; otherwise, false.
    /// </returns>
    public boolean checkRuleChange2Purch()
    {
        return (reqTrans.RefType != ReqRefType::ItemPlannedOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChange2RFQ</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected planned orders can be changed to requests for quotes.
    /// </summary>
    /// <returns>
    ///    true if the selected planned orders can be changed to requests for quotes; otherwise, false.
    /// </returns>
    public boolean checkRuleChange2RFQ()
    {
        return (reqTrans.RefType != ReqRefType::RequisitionLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChange2Transfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected records can be changed to planned transfer orders.
    /// </summary>
    /// <returns>
    ///    true if the selected planned orders can be changed to planned transfer orders; otherwise, false.
    /// </returns>
    public boolean checkRuleChange2Transfer()
    {
        return (reqTrans.RefType != ReqRefType::TransferPlannedOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleDerivedRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the <c>ReqTrans</c> record contains derived requirement transactions.
    /// </summary>
    /// <returns>
    ///    true if the current planned order has derived requirement transactions; otherwise, false.
    /// </returns>
    public  boolean checkRuleDerivedRequirements()
    {
        return reqTrans.RecId && reqTrans.isReceipt() && ReqTrans::derivedRefType(reqTrans.RefType) != ReqRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleGantt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the scheduling of a planned order can be shown in a Gantt view.
    /// </summary>
    /// <returns>
    ///    true if the selected planned order can be shown in a Gantt view; otherwise, false.
    /// </returns>
    public boolean checkRuleGantt()
    {
        return this.checkRuleUsingWorkCenterReservation() && reqPO.RouteJobsUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether more than one record has been selected and whether all the selected records have
    ///    the same <c>ReqRefType</c> enumeration value.
    /// </summary>
    /// <returns>
    ///    true if more than one record is selected and all the selected records have the same
    ///    <c>ReqRefType</c> enumeration value; otherwise, false.
    /// </returns>
    public boolean checkRuleGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleIsBOMEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is item bom enabled? (production)
    /// </summary>
    /// <returns>
    /// true, if production/bom enabled; otherwise false
    /// </returns>
    public boolean checkRuleIsBOMEnabled()
    {
        return this.checkRuleUsingBOM() && !this.checkRuleIsFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleIsBulkPackEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the Bulk/Pack feature enabled?
    /// </summary>
    /// <returns>
    /// true if the Bulk/Pack feature is enabled; otherwise, false.
    /// </returns>
    public boolean checkRuleIsBulkPackEnabled()
    {
        if (!totalCount)
        {
            this.updatePmfCounters(reqTrans);
        }

        return countBulkPack == totalCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleIsFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is item formula enabled?
    /// </summary>
    /// <returns>
    /// true, if formula enabled; otherwise false
    /// </returns>
    public boolean checkRuleIsFormulaEnabled()
    {
        return (        reqPO.RefType       == ReqRefType::PmfPlannedProdBatch
                    ||  reqTrans.RefType    == ReqRefType::Production)
                &&  (reqTrans.ItemBomId != '')
                && InventTable::find(reqTrans.ItemId).isFormulaAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleIsPlanItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is item planning?
    /// </summary>
    /// <returns>
    /// true, if item is a planning item; otherwise false
    /// </returns>
    public boolean checkRuleIsPlanItem()
    {
        return reqPO.PmfPlanningItemId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleIsProdPlanItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is item planned order?
    /// </summary>
    /// <returns>
    /// true, if item is a planned order; otherwise false
    /// </returns>
    public boolean checkRuleIsProdPlanItem()
    {
        boolean     ret = false;

        if (this.checkRuleIsPlanItem())
        {
            if (reqPO.RefType != ReqRefType::ItemPlannedOrder
                && reqPO.RefType != ReqRefType::TransferPlannedOrder)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleIsPurchTransPlanItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is item planned order or transfer order?
    /// </summary>
    /// <returns>
    /// true, if planned order or transfer order; otherwise false
    /// </returns>
    public boolean checkRuleIsPurchTransPlanItem()
    {
        boolean     ret = true;

        if (this.checkRuleIsPlanItem())
        {
            if (reqPO.RefType != ReqRefType::ItemPlannedOrder
                && reqPO.RefType != ReqRefType::TransferPlannedOrder)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleNotDerivedDirectly</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the selected planned order is derived directly.
    /// </summary>
    /// <returns>
    ///     true if selected planned order is derived directly; otherwise, false.
    /// </returns>
    public boolean checkRuleNotDerivedDirectly()
    {
        return    !reqTrans.IsDerivedDirectly
               && !reqPO.IsDerivedDirectly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleRecordExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the requirement transaction data source is empty.
    /// </summary>
    /// <returns>
    ///    true if the data source is empty; otherwise, false.
    /// </returns>
    public boolean checkRuleRecordExists()
    {
        return reqTrans ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleReqTransDerived</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the selected planned order has derived requirement transactions.
    /// </summary>
    /// <returns>
    ///    true if the current planned order has derived requirement transactions; otherwise, false.
    /// </returns>
    public boolean checkRuleReqTransDerived()
    {
        return reqTrans.RecId
            && ReqTrans::derivedRefType(reqTrans.RefType) != ReqRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleTransPoMarkSched</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the selected records are planned production orders.
    /// </summary>
    /// <returns>
    ///    true if all the selected records are planned production orders; otherwise, false.
    /// </returns>
    public boolean checkRuleTransPoMarkSched()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleUsingBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the selected planned order has a bill of materials attached to it.
    /// </summary>
    /// <returns>
    ///    true if the selected planned order has a bill of materials; otherwise, false.
    /// </returns>
    public boolean checkRuleUsingBOM()
    {
        return reqTrans.RecId  && ReqTrans::refTypeCanHaveBOM(reqTrans.RefType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleIsProduction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the selected record is production order.
    /// </summary>
    /// <returns>
    ///    true if the selected record is production order; otherwise, false.
    /// </returns>
    public boolean checkRuleIsProduction()
    {
        return reqTrans.RecId && reqTrans.RefType == ReqRefType::Production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleUsingRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the selected planned order has a route attached to it.
    /// </summary>
    /// <returns>
    ///    true if the selected planned order has a route attached to it; otherwise, false.
    /// </returns>
    public boolean checkRuleUsingRoute()
    {
        return reqTrans.RecId  && ReqTrans::refTypeCanHaveRoute(reqTrans.RefType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleUsingWorkCenterReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether to enable functionality that is related to the scheduling of workcenters.
    /// </summary>
    /// <returns>
    ///    true if the functionality should be enabled; otherwise, false.
    /// </returns>
    public boolean checkRuleUsingWorkCenterReservation()
    {
        return reqTrans.RecId && ReqTrans::refTypeCanReserveWorkCenter(reqTrans.RefType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMultiSelectionContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the multi-selection context required to check some PI features.
    /// </summary>
    /// <param name="_formRun">
    /// The list page or formrun to get the selection context.
    /// </param>
    public void initMultiSelectionContext(Object _formRun)
    {
        Args                            args = new Args(_formRun);
        ReqTrans                        lclReqTrans;
        ReqTransPOMultiSelectionContext multiSelContext;

        this.resetOrderTypeCounters();
        args.record(reqPO);
        multiSelContext = ReqTransPOMultiSelectionContext::construct(args);

        lclReqTrans = multiSelContext.getFirst();
        while (lclReqTrans)
        {
            this.updatePmfCounters(lclReqTrans);
            lclReqTrans = multiSelContext.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPO</Name>
				<Source><![CDATA[
    public ReqPO parmReqPO(ReqPO _reqPO)
    {
        reqPO = _reqPO;
        return reqPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqTrans</Name>
				<Source><![CDATA[
    public ReqTrans parmReqTrans(ReqTrans _reqTrans)
    {
        reqTrans = _reqTrans;
        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOrderTypeCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes all internal counters.
    /// </summary>
    protected void resetOrderTypeCounters()
    {
        countPmfPlannable   = 0;
        countUnFirmable     = 0;
        countChange2Batch   = 0;
        countBulkPack       = 0;
        totalCount          = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePmfCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates internal counters for PI functionality.
    /// </summary>
    /// <param name="_reqTrans">
    /// <c>ReqTrans</c> record.
    /// </param>
    protected void updatePmfCounters(ReqTrans _reqTrans)
    {
        InventTable inventTable         = _reqTrans.inventTable();
        boolean     isPlannedBatchOrder = (_reqTrans.RefType == ReqRefType::PmfPlannedProdBatch);
        ItemId      planningItemId;

        totalCount++;

        if (isPlannedBatchOrder)
        {
            planningItemId = _reqTrans.reqPo().PmfPlanningItemId;
        }

        if ((isPlannedBatchOrder || _reqTrans.RefType == ReqRefType::BOMPlannedOrder) && planningItemId)
        {
            countPmfPlannable++;
            countUnFirmable++;
        }

        switch (inventTable.PmfProductType)
        {
            case PmfProductType::Co_Product:
                if (isPlannedBatchOrder && !planningItemId)
                {
                    countUnFirmable++;
                }
                else
                {
                    countChange2Batch++;
                }
                break;
            case PmfProductType::Formula:
                if (!isPlannedBatchOrder)
                {
                    countChange2Batch++;
                }
                break;
        }

        if (isPlannedBatchOrder && PmfBulkItemConv::isBulkorPack(_reqTrans.ItemId))
        {
            countBulkPack++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqTransFormButtonStateProvider construct()
    {
        return new ReqTransFormButtonStateProvider();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>