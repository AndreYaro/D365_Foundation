<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserSessionForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkUserSessionForm</c> class contains the business logic of the <c>WHSWorkUserSession</c> form.
/// </summary>
class WHSWorkUserSessionForm
{
    WHSRFErrorCtrl errorCtrl;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(WHSWorkUserErrorLog _workUserErrorLog, FormTreeControl _tree)
    {
        errorCtrl = new WHSRFErrorCtrl();
        errorCtrl.parmErrorLog(_workUserErrorLog.RFErrorLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTrees</Name>
				<Source><![CDATA[
	/// <summary>
	/// Builds error trees.
	/// </summary>
	/// <param name="_tree">
	/// Form tree control.
	/// </param>
	/// <param name="_workUserErrorLog">
	/// The work user error log.
	/// </param>
    void buildTrees(FormTreeControl _tree, WHSWorkUserErrorLog _workUserErrorLog)
    {
        errorCtrl.parmTree(_tree);
        errorCtrl.parmErrorLog(_workUserErrorLog.RFErrorLog);
        errorCtrl.buildTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllFromTree</Name>
				<Source><![CDATA[
	/// <summary>
	/// Deletes all nodes from tree.
	/// </summary>
	/// <param name="_tree">
	/// Form tree control.
	/// </param>
    void deleteAllFromTree(FormTreeControl _tree)
    {
        _tree.deleteAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>killSession_clicked</Name>
				<Source><![CDATA[
	/// <summary>
	/// Deletes work user session when Kill Session button is clicked and confirmed.
	/// </summary>
	/// <param name="_whsWorkUserSession">
	/// Work user session to be deleted.
	/// </param>
	/// <param name="_whsWorkUserSessionDS">
	/// Work user session data source.
	/// </param>
    void killSession_clicked(WHSWorkUserSession _whsWorkUserSession, FormDataSource _whsWorkUserSessionDS)
    {
        DialogButton dialogBut = Box::yesNo("@WAX3614", DialogButton::No);

        if (dialogBut == DialogButton::Yes)
        {
            ttsBegin;
            
            this.unlockWorkForUserInWarehouse(_whsWorkUserSession.UserId, _whsWorkUserSession.InventLocationId);
            _whsWorkUserSession.delete();

            ttsCommit;

            _whsWorkUserSessionDS.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlockWorkForUserInWarehouse</Name>
				<Source><![CDATA[
    private void unlockWorkForUserInWarehouse(WHSUserId _userId, InventLocationId _warehouse)
    {
        const container workStatuses = [WHSWorkStatus::Open, WHSWorkStatus::InProcess];
        WHSWorkTable workTable;

        while select WorkId from workTable
            where workTable.InventLocationId == _warehouse &&
                    workTable.workStatus in workStatuses &&
                    workTable.Frozen == NoYes::No &&
                    workTable.LockedUser == _userId &&
                    workTable.UserManuallyAssigned == NoYes::No
        {
            WHSWorkTable::unlockWorkOnCancelOrLogOut(workTable.WorkId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewXMLFromLog</Name>
				<Source><![CDATA[
	/// <summary>
	/// Shows XML of the work user session log.
	/// </summary>
	/// <param name="_workUserSessionLog">
	/// The work user session log.
	/// </param>
    void viewXMLFromLog(WHSWorkUserSessionLog _workUserSessionLog)
    {
        info(_workUserSessionLog.XML);	
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewXMLFromXML</Name>
				<Source><![CDATA[
	/// <summary>
	/// Shows XML from work user session.
	/// </summary>
	/// <param name="_workUserSession">
	/// The work user session.
	/// </param>
    void viewXMLFromXML(WHSWorkUserSession _workUserSession)
    {
        info(_workUserSession.sessionState().parmXml());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>