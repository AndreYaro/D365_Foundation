<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormletterParmDataInvoiceProject</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::ProjectInvoice)]
class SalesFormletterParmDataInvoiceProject
extends SalesFormletterParmDataInvoice
{
    ProjProposalJour    projProposalJour;
    ProjProposalItem    projProposalItem;
    ProjInvoiceItem     projInvoiceItem;
    LineNum             parmLineNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    protected void  chooseLines()
    {
        progressTotal = 0;

        this.initRecordLists();
        while (chooseLines.next())
        {
            progressTotal++;
            this.createParmLineProjProposalItem(chooseLines.get(tableNum(ProjProposalItem)));
        }
        this.insertRecordLists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineProjProposalItem</Name>
				<Source><![CDATA[
    protected boolean createParmLineProjProposalItem(ProjProposalItem    _projProposalItem)
    {
        SalesParmTable      salesParmTable;
        SalesParmLine       salesParmLine;

        boolean             lineCreated    = false;

        projProposalItem    = _projProposalItem;

        if (_projProposalItem.RecId)
        {
            salesParmLine.clear();

            SalesLine localSalesLine = _projProposalItem.salesLine();
            salesParmLine.initFromSalesLine(localSalesLine);

            salesParmLine.initFromProjProposalItem(_projProposalItem);
            salesParmLine.ParmId = salesParmUpdate.ParmId;

            [salesParmLine.DeliverNow, salesParmLine.RemainBefore      , salesParmLine.RemainAfter      ]   = this.qtySales  (_projProposalItem, naReal());
            [salesParmLine.InventNow , salesParmLine.RemainBeforeInvent, salesParmLine.RemainAfterInvent]   = this.qtyInvent (_projProposalItem, naReal());

            if (salesParmLine.DeliverNow)
            {
                TradeLineRefId tableRefId = this.getTableRefId(localSalesLine);

                if (!parmTableMap.exists(this.parmTableMapKey(localSalesLine)))
                {
                    salesParmTable.clear();
                    salesParmTable.TableRefId          = tableRefId;

                    salesParmTable.initFromProjProposalItem(_projProposalItem);

                    salesParmTable.ParmId              = salesParmUpdate.ParmId;
                    salesParmTable.BankLCExportLine    = BankLCExport::findBySalesTable(salesParmTable.SalesId).RecId;
                    salesParmTable.Ordering            = this.parmDocumentStatus();
                    salesParmTable.BatchAdministration = multiForm;
                    salesParmTable.ParmJobStatus       = ParmJobStatus::Waiting;
                    salesParmTable.Transdate           = this.parmTransDate();

                    //<GEEU>
                    salesParmTable.VatDueDate_W = this.parmProjInvoiceParmTable().VatDueDate_W;
                    salesParmTable.SalesDate_W = this.parmProjInvoiceParmTable().SalesDate_CZ;
                    //<GEECZ>
                    salesParmTable.PostponeVAT = this.parmProjInvoiceParmTable().PostponeVAT;
                    //</GEECZ>

                    //<GEEPL>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                    {
                        salesParmTable.DocumentDate = this.parmProjInvoiceParmTable().DocumentDate_W;
                        salesParmTable.DeliveryPostalAddress = projProposalJour.DeliveryPostalAddress;
                    }
                    //</GEEPL>
                    //</GEEU>

                    this.insertParmTable(salesParmTable);
                    this.createParmSubTable(salesParmTable);
                    this.tableRefIdUsed(true);
                }

                salesParmLine.TableRefId = tableRefId;
                salesParmLine.LineAmount = _projProposalItem.lineAmt();
                salesParmLine.LineNum    = parmLineNum;
                parmLineNum++;
                // <GTE>
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    SalesParmLine_IN salesParmLineIN = salesParmLine.salesParmLine_IN();
                    salesParmLineIN.AssessableValueTransactionCurrency = salesParmLine.getMiscChargesAmount_IN(localSalesLine.TableId, localSalesLine.RecId, this.parmDocumentStatus());
                    salesParmLine.packSalesParmLine_IN(salesParmLineIN);
                }
                // </GTE> 

                this.insertParmLine(salesParmLine);

                lineCreated = true;
            }
        }

        return lineCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = null)
    {
        if (_sourceTable.TableId == tableNum(ProjProposalJour))
        {
            projProposalJour = _sourceTable;
        }
        return super(_sourceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectChooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>ChooseLines</c> method to execute.
    /// </summary>
    /// <param name="_append">
    /// A Boolean value that indicates whether to append the existing data first.
    /// </param>
    protected void selectChooseLines(boolean _append = false)
    {
        this.chooseLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query that is used during data creation.
    /// </summary>
    public void updateQueryBuild()
    {
        chooseLines = new SysQueryRun(queryStr(ProjProposalItemUpdate));

        if (ProjParameters::find().ApproveActive)
        {
            chooseLines.query().dataSourceTable(tableNum(ProjProposalJour)).addRange(fieldNum(ProjProposalJour, LineProperty)).value(queryValue(ProjLinePropertyCode::Approved));
        }

        chooseLines.query().dataSourceTable(tableNum(ProjProposalJour)).addRange(fieldNum(ProjProposalJour, ProposalId)).value(queryValue(projProposalJour.ProposalId));
        chooseLines.query().dataSourceTable(tableNum(ProjProposalItem)).addRange(fieldNum(ProjProposalItem, ProposalId)).value(queryValue(projProposalJour.ProposalId));
        chooseLines.query().dataSourceTable(tableNum(ProjProposalItem)).addRange(fieldNum(ProjProposalItem, ItemType)).value(queryValue(ProjItemType::SalesOrder));

        chooseLines.query().interactive(showQueryForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCheckCreditMax</Name>
				<Source><![CDATA[
    protected TypeOfCreditmaxCheck defaultCheckCreditMax()
    {
        return this.parmCheckCreditMax();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>