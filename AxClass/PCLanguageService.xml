<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCLanguageService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using PC = Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.LanguageService;

/// <summary>
/// This class encapsulates the .Net language service for OML expressions.
/// </summary>
public class PCLanguageService
{
    PC.LanguageService languageService;

    // Results from the language service are cached if the expression text has not changed.
    str                             lastParsedExpression;
    boolean                         lastIsConstraint;

    PCExpressionEditorSymbolTmp     symbols;
    PCLanguageServiceError          languageServiceError;
    PCLanguageServiceErrorHandler   languageServiceErrorHandler;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertSymbolType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a .Net symbol type to an x++ enum.
    /// </summary>
    /// <param name="_symbolType">
    /// The .Net symbol type to convert.
    /// </param>
    /// <returns>
    /// A .Net symbol type as an x++ enum.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown for unknown symbol type.
    /// </exception>
    private PCExpressionEditorSymbolType convertSymbolType(PC.SymbolType _symbolType)
    {
        switch (_symbolType)
        {
            case PC.SymbolType::DomainValue:
                return PCExpressionEditorSymbolType::DomainValue;
            case PC.SymbolType::Attribute:
                return PCExpressionEditorSymbolType::Attribute;
            case PC.SymbolType::Operator:
                return PCExpressionEditorSymbolType::Operator;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllSymbols</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves all symbols applicable in the model from the language service.
    /// </summary>
    /// <returns>
    /// All symbols applicable in the model from the language service.
    /// </returns>
    public PCExpressionEditorSymbolTmp getAllSymbols()
    {
        PCExpressionEditorSymbolTmp  allSymbols;

        try
        {
            this.marshalSymbols(languageService.GetAllSymbols(), allSymbols);
        }
        catch (Exception::CLRError)
        {
            PCLanguageService::handleException();
        }

        return allSymbols;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpressionCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the key to use in the cache for the expression.
    /// </summary>
    /// <param name="_parsedExpression">
    /// The expression.
    /// </param>
    /// <returns>
    /// A cache key.
    /// </returns>
    private str getExpressionCacheKey(str _parsedExpression)
    {
        return strRem(_parsedExpression,'\n\r\t ');
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSymbolsFor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the language service has a symbol for the parsed expression.
    /// </summary>
    /// <param name="_parsedExpression">
    /// Expression to parse.
    /// </param>
    /// <param name="_isConstraint">
    /// A boolean value indicating if it is a constraint or a calculation.
    /// </param>
    /// <returns>
    /// True if the language service has a symbol for the parsed expression; false, otherwise.
    /// </returns>
    private boolean hasSymbolsFor(str _parsedExpression, boolean _isConstraint)
    {
        return this.getExpressionCacheKey(_parsedExpression) == lastParsedExpression && _isConstraint == lastIsConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a symbol into the temporary symbols table.
    /// </summary>
    /// <param name="_editorSymbols">
    /// The temporary table to insert symbol into.
    /// </param>
    /// <param name="symbol">
    /// The .Net symbol to insert.
    /// </param>
    /// <param name="uiOrder">
    /// The order for the symbols used for sorting in the UI.
    /// </param>
    private void insertSymbol(PCExpressionEditorSymbolTmp _editorSymbols, PC.SymbolElement symbol, int uiOrder)
    {
        str validSymbol       = symbol.get_Value();

        _editorSymbols.Symbol        = validSymbol;
        _editorSymbols.SymbolType    = this.convertSymbolType(symbol.get_Type());
        _editorSymbols.Order         = uiOrder;

        _editorSymbols.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExpressionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the expression or the context has changed.
    /// </summary>
    /// <param name="_parsedExpression">
    /// The expression to check for changes
    /// </param>
    /// <param name="_isConstraint">
    /// The context in which to understand the expression
    /// </param>
    /// <returns>
    /// true if the expression or the context has changed; otherwise, false.
    /// </returns>
    private boolean isExpressionChanged(str _parsedExpression, boolean _isConstraint)
    {
        if (!this.hasSymbolsFor(_parsedExpression, _isConstraint))
        {
            lastParsedExpression = this.getExpressionCacheKey(_parsedExpression);
            lastIsConstraint = _isConstraint;
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>marshalSymbols</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marshals a collection of symbols from managed code into a temporary table.
    /// </summary>
    /// <param name="_languageServiceSymbols">
    /// The collection of symbols.
    /// </param>
    /// <param name="_editorSymbols">
    /// The temporary table.
    /// </param>
    private void marshalSymbols(CLRObject _languageServiceSymbols, PCExpressionEditorSymbolTmp _editorSymbols)
    {
        int       uiOrder;

        try
        {
            // Call the language service to get the valid symbols and place them in the symbols table.
            CLRObject enumerator = _languageServiceSymbols.GetEnumerator();

            delete_from _editorSymbols;

            while (enumerator.MoveNext())
            {
                this.insertSymbol(_editorSymbols, enumerator.get_Current(), uiOrder);
                uiOrder++;
            }
        }
        catch (Exception::CLRError)
        {
            PCLanguageService::handleException();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // Initialize last parsed text to something that cannot be valid in an expression to kick-start caching.
        lastParsedExpression = "#";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageService</Name>
				<Source><![CDATA[
    public CLRObject parmLanguageService(CLRObject _languageService = languageService)
    {
        languageService = _languageService;

        return languageService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageServiceError</Name>
				<Source><![CDATA[
    public PCLanguageServiceError parmLanguageServiceError(PCLanguageServiceError _languageServiceError = languageServiceError)
    {
        languageServiceError = _languageServiceError;

        return languageServiceError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageServiceErrorHandler</Name>
				<Source><![CDATA[
    public PCLanguageServiceErrorHandler parmLanguageServiceErrorHandler(PCLanguageServiceErrorHandler _languageServiceErrorHandler = languageServiceErrorHandler)
    {
        languageServiceErrorHandler = _languageServiceErrorHandler;

        return languageServiceErrorHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSymbols</Name>
				<Source><![CDATA[
    public PCExpressionEditorSymbolTmp parmSymbols(PCExpressionEditorSymbolTmp _symbols = symbols)
    {
        symbols = _symbols;

        return symbols;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSymbols</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method populates the symbols table with the symbols that are valid in an expression.
    /// </summary>
    /// <param name="_expressionParseText">
    /// The expression text to be parsed
    /// </param>
    /// <param name="_isConstraint">
    /// A Boolean value determining whether the language service is for a constraint.
    /// </param>
    public void populateSymbols(str _expressionParseText, boolean _isConstraint)
    {
        if (this.isExpressionChanged(_expressionParseText, _isConstraint))
        {
            try
            {
                this.marshalSymbols(languageService.GetValidSymbols(_expressionParseText, _isConstraint), symbols);
                this.parmLanguageServiceError(null);
            }
            catch (Exception::CLRError)
            {
                languageServiceErrorHandler.parmExpressionParseText(_expressionParseText);
                var exception = CLRInterop::getLastException();
                ApplicationUnhandledExceptionLogger::logCLRException(exception);
                this.parmLanguageServiceError(languageServiceErrorHandler.processException(exception));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCLanguageService construct()
    {
        return new PCLanguageService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the last thrown CLR exception to an infolog error.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Always throws an x++ exception for the CLR exception.
    /// </exception>
    protected static void handleException()
    {
        System.Exception    exception           = CLRInterop::getLastException();
        System.Exception    innerException;
        str                 exceptionMessage;

        innerException  = exception.get_InnerException();
        exceptionMessage = innerException.get_Message();

        ApplicationUnhandledExceptionLogger::logCLRException(exception);
        throw error(exceptionMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLanguageService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the language service.
    /// </summary>
    /// <param name="_symbols">
    /// The temporary table which will list the valid symbols in a given context.
    /// </param>
    /// <param name="_modelXml">
    /// The model as xml.
    /// </param>
    /// <param name="_componentContextXPath">
    /// The component context as an XPath.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PCLanguageService</c> class.
    /// </returns>
    public static PCLanguageService newLanguageService(PCExpressionEditorSymbolTmp _symbols, str _modelXml, str _componentContextXPath)
    {
        PCLanguageService               languageService     = PCLanguageService::construct();
        PCLanguageServiceErrorHandler   languageServiceErrorHandler = PCLanguageServiceErrorHandler::construct();

        languageService.parmSymbols(_symbols);

		try
        {
            PC.LanguageService languageServiceInternal = PC.LanguageService::Create(_modelXml, _componentContextXPath);

            languageService.parmLanguageService(languageServiceInternal);
            languageService.parmLanguageServiceErrorHandler(languageServiceErrorHandler);
        }
        catch (Exception::CLRError)
        {
            PCLanguageService::handleException();
        }

        return languageService;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>