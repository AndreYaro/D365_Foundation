<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationWizardTableCtrl_Aisle</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WmsLocationWizardTableCtrl_Aisle extends WMSLocationWizardTableCtrl
{
    WMSAisle                    buffer;
    WMSAisleId                  aisleIdSpecial;
    Integer                     maxAisleCharsNormalName;

    WMSAisle                    aisleSpecialDB;
    WMSAisle                    aisleNormalDB;

    #localmacro.currentList
        aisleIdSpecial
    #endmacro

    #WMSLocationDefaultData
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table buffer that is declared in the <c>classDeclaration</c> method.
    /// </summary>
    /// <returns>
    /// The table buffer that is used for the default data.
    /// </returns>
    public Common buffer()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotExistTmp</Name>
				<Source><![CDATA[
    protected boolean checkNotExistTmp(Common _bufferToCheck = this.buffer())
    {
        WMSAisle bufferToCheck = _bufferToCheck as WMSAisle;

        if (!super(bufferToCheck))
        {
            return false;
        }

        if (bufferToCheck.AisleNo != #SPECIAL_AISLENO)
        {
            if (strLen(bufferToCheck.AisleId) > maxAisleCharsNormalName)
            {
                return checkFailed("@SYS60873");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdNumDB</Name>
				<Source><![CDATA[
    public int64 createdNumDB(InventLocationId _inventLocationId = this.inventLocationId())
    {
        int64       recCount;

        if (existingRecordCountMap.exists(_inventLocationId))
        {
            return existingRecordCountMap.lookup(_inventLocationId);
        }

        recCount = WMSLocationWizardTableCtrl_Aisle::existingNumDB(_inventLocationId);

        existingRecordCountMap.insert(_inventLocationId, recCount);
        return recCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTablePrim</Name>
				<Source><![CDATA[
    protected void deleteTablePrim(Common _buffer = this.buffer(), boolean useCurBuffer = false)
    {
        WMSAisle  tmpBuffer = _buffer as WMSAisle;
        WMSAisle  bufferDelete = tmpBuffer.data();
        WMSLocationWizard localLocationWizard = this.defaultDataParent() as WMSLocationWizard;

        if (! this.buffer().isTmp())
        {
            return;
        }

        if (this.isModified())
        {
            localLocationWizard.aisleSettingsModified();
        }

        bufferDelete.setTmp();
        bufferDelete.setTmpData(tmpBuffer);

        bufferDelete.ttsbegin();

        delete_from bufferDelete;

        bufferDelete.ttscommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTable</Name>
				<Source><![CDATA[
    public void doTable(boolean useCurBuffer = false)
    {
        WMSLocationWizard localLocationWizard = this.defaultDataParent() as WMSLocationWizard;

        if (useCurBuffer)
        {
            return;
        }

        this.testCreateSpecialAisle();

        super(useCurBuffer);

        localLocationWizard.aisleSettingsModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableGridTab</Name>
				<Source><![CDATA[
    public boolean enableGridTab()
    {
        if (!super() && aisleIdSpecial)
        {
            if (WMSAisle::find(aisleIdSpecial, this.inventLocationId()))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTmp</Name>
				<Source><![CDATA[
    protected boolean existTmp(Common _cursor = null)
    {
        WMSAisle  cursor = _cursor as WMSAisle;
        WMSAisle  bufferExist;

        bufferExist = this.makeTmp();

        select firstonly RecId from bufferExist
            where bufferExist.AisleId == cursor.AisleId;

        return bufferExist.RecId
            ? (bufferExist.RecId == cursor.RecId ? false : true)
            : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpTxt</Name>
				<Source><![CDATA[
    public HelpTxt helpTxt()
    {
        return "@SYS57509";
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(boolean _reinit = false)
    {
        super();
        this.updateMaxAisleCharsNormalName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormat</Name>
				<Source><![CDATA[
    /*
    Initialize the format.
    */
    void initFormat()
    {
        if (maxAisleCharsNormalName <= 1)
        {
            format = '#';
        }

        format = '##';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    public void initRecord()
    {
        buffer.InventLocationId = this.inventLocationId();
        buffer.AisleId          = this.getKey();
        buffer.AisleNo          = nextKeyCount;
        if (nextKeyCount mod 2 == 0)
        {
            buffer.SortDescending = NoYes::Yes;
        }
        buffer.Name             = strFmt("@SYS57593", this.inventLocationId(), buffer.AisleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUpdate</Name>
				<Source><![CDATA[
    /*
    This method initiated the update variable.
    */
    void initUpdate()
    {
        super();
        createNum  = this.suggestNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWarehouseInformation</Name>
				<Source><![CDATA[
    public void initWarehouseInformation(InventLocationId _inventLocationId, container _values)
    {
        InventLocation  inventLocation;
        int64           existingRecCount;
        container       packedInventLocation;

        [packedInventLocation, aisleIdSpecial, existingRecCount] = _values;
        [inventLocation] = packedInventLocation;

        existingRecordCountMap.insert(_inventLocationId, existingRecCount);
        this.updateMaxAisleCharsNormalName(inventLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyFieldId</Name>
				<Source><![CDATA[
    protected FieldId keyFieldId()
    {
        return fieldNum(WMSAisle,AisleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxAisleCharsNormalName</Name>
				<Source><![CDATA[
    public Integer maxAisleCharsNormalName()
    {
        return maxAisleCharsNormalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalAisleExists</Name>
				<Source><![CDATA[
    NoYes normalAisleExists(InventLocationId _inventLocationId = this.inventLocationId())
    {
        WMSAisle    tmpAisle = this.makeTmp();

        if (aisleNormalDB.InventLocationId != _inventLocationId)
        {
            aisleNormalDB = WMSLocationWizardTableCtrl_Aisle::anyAisleNormalDB(_inventLocationId);
            if (!aisleNormalDB.RecId)
            {
                aisleNormalDB.InventLocationId = _inventLocationId; // set key field so we have hit on next try
            }
        }
        if (aisleNormalDB.RecId)
        {
            return NoYes::Yes;
        }

        select firstonly RecId from tmpAisle
            where tmpAisle.AisleNo  != #SPECIAL_AISLENO;

        return (tmpAisle.RecId) ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [this.inventLocationId(), #currentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAisleIdSpecial</Name>
				<Source><![CDATA[
    WMSAisleId parmAisleIdSpecial(WMSAisleId _aisleIdSpecial = aisleIdSpecial)
    {
        aisleIdSpecial = _aisleIdSpecial;

        return aisleIdSpecial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    protected void setBuffer()
    {
        if (form_DS)
        {
            buffer = form_DS.cursor();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFirstKeyCount</Name>
				<Source><![CDATA[
    protected void setFirstKeyCount()
    {
        WMSAisle            wmsAisleDB;
        int                 tmpCount;

        nextKeyCount = 0;

        while select wmsAisleDB
            where wmsAisleDB.InventLocationId   == this.inventLocationId()
        {
            tmpCount        = this.key2Count(wmsAisleDB.(this.keyFieldId()));
            nextKeyCount    = tmpCount > nextKeyCount ? tmpCount : nextKeyCount;
        }

        if (this.isTmp())
        {
            nextKeyCount = this.getFirstKeyCountTmp(nextKeyCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sorting</Name>
				<Source><![CDATA[
    public Sorting sorting()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specialAisleExists</Name>
				<Source><![CDATA[
    NoYes specialAisleExists()
    {
        WMSAisle            tmpAisle;
        InventLocationId    inventLocationId = this.inventLocationId();

        if (aisleSpecialDB.InventLocationId != inventLocationId
         || aisleSpecialDB.AisleId          != aisleIdSpecial)
        {
            aisleSpecialDB = WMSAisle::find(aisleIdSpecial, inventLocationId);
            if (!aisleSpecialDB.RecId) // doesn't exist in DB, but set key values to hit cached value next time
            {
                aisleSpecialDB.InventLocationId = inventLocationId;
                aisleSpecialDB.AisleId          = aisleIdSpecial;
            }
        }
        if (aisleSpecialDB.RecId)
        {
            return NoYes::Yes;
        }

        tmpAisle = this.makeTmp();
        select firstonly RecId from tmpAisle
            where tmpAisle.AisleId  == aisleIdSpecial;

        return (tmpAisle.RecId) ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestFormat</Name>
				<Source><![CDATA[
    public NumberSequenceFormat suggestFormat()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestNum</Name>
				<Source><![CDATA[
    public Integer suggestNum(InventLocationId _inventLocationId = this.inventLocationId())
    {
        if (this.createdNumDB(_inventLocationId) > 0)
        {
            return 1;
        }

        if (maxAisleCharsNormalName <= 1)
        {
            return 9;
        }

        return 10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestUpdate</Name>
				<Source><![CDATA[
    public NoYes suggestUpdate()
    {
        if (! super())
        {
            return NoYes::No;
        }

        if (! this.inventLocationId())
        {
            return NoYes::No;
        }

        if (this.createdNumDB() > 0)
        {
            return NoYes::No;
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testCreateSpecialAisle</Name>
				<Source><![CDATA[
    private void testCreateSpecialAisle()
    {
        WMSAisle    wmsAisleFile;

        if (!aisleIdSpecial)
        {
            return;
        }

        if (WMSAisle::exist(aisleIdSpecial, this.inventLocationId()))
        {
            return;
        }

        wmsAisleFile = this.makeTmp(this.buffer());

        select wmsAisleFile
            where wmsAisleFile.InventLocationId == this.inventLocationId() &&
                  wmsAisleFile.AisleId          == aisleIdSpecial;
        if (!wmsAisleFile)
        {
            wmsAisleFile.InventLocationId   = this.inventLocationId();
            wmsAisleFile.AisleId            = aisleIdSpecial;
            wmsAisleFile.AisleNo            = #SPECIAL_AISLENO;
            wmsAisleFile.Name               = strFmt('%1, %2', this.inventLocationId(), aisleIdSpecial);
            wmsAisleFile.SortCode           = 99999;
            wmsAisleFile.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container values)
    {
        InventLocationId    inventLocationId;
        container base;

        [inventLocationId, #currentList,base] = values;

        return super(base);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChildsUpdate</Name>
				<Source><![CDATA[
    protected void updateChildsUpdate()
    {
        WMSLocationWizard localLocationWizard = this.defaultDataParent() as WMSLocationWizard;

        if (!update)
        {
            if (!this.specialAisleExists())
            {
                localLocationWizard.wmsLocationWizardTableCtrl_InboundDock().parmUpdate(false);
                localLocationWizard.wmsLocationWizardTableCtrl_OutboundDock().parmUpdate(false);
            }
            if (!this.normalAisleExists())
            {
                localLocationWizard.wmsLocationWizardTableCtrl_Pick().parmUpdate(false);
                localLocationWizard.wmsLocationWizardTableCtrl_Buffer().parmUpdate(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMaxAisleCharsNormalName</Name>
				<Source><![CDATA[
    void updateMaxAisleCharsNormalName(InventLocation  _inventLocation = InventLocation::find(this.inventLocationId()))
    {
        DictField       dictField       = new DictField(tableNum(WMSLocation), fieldNum(WMSLocation, wmsLocationId));

        maxAisleCharsNormalName = dictField.stringLen();
        maxAisleCharsNormalName -= _inventLocation.wmsRackNameActive ? strLen(_inventLocation.wmsRackFormat) : 0;
        maxAisleCharsNormalName -= _inventLocation.wmsLevelNameActive ? strLen(_inventLocation.wmsLevelFormat) : 0;
        maxAisleCharsNormalName -= _inventLocation.wmsPositionNameActive ? strLen(_inventLocation.wmsPositionFormat) : 0;
        if (maxAisleCharsNormalName <= 0)
        {
            throw(error("@SYS60872"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFormat</Name>
				<Source><![CDATA[
    public boolean validateFormat(NumberSequenceFormat testFormat)
    {
        boolean ret;

        if (createNum)
        {
            if (strLen(testFormat) > this.maxAisleCharsNormalName())
            {
                return checkFailed("@SYS60873");
            }
        }

        ret = super(testFormat);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyAisleNormalDB</Name>
				<Source><![CDATA[
    static WMSAisle anyAisleNormalDB(InventLocationId _inventLocationId)
    {
        WMSAisle    aisleNormalDB;

        select firstonly aisleNormalDB
            where aisleNormalDB.InventLocationId    == _inventLocationId   &&
                  aisleNormalDB.AisleNo             != #SPECIAL_AISLENO;

        return aisleNormalDB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static WMSLocationWizardTableCtrl_Aisle construct()
    {
        WMSLocationWizardTableCtrl_Aisle wmsLocationWizardTableCtrl_Aisle = new WMSLocationWizardTableCtrl_Aisle();

        return wmsLocationWizardTableCtrl_Aisle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existingNumDB</Name>
				<Source><![CDATA[
    static protected int64 existingNumDB(InventLocationId _inventLocationId)
    {
        WMSAisle    wmsAisle;

        select count(RecId) from wmsAisle
            where wmsAisle.InventLocationId  == _inventLocationId;
        return wmsAisle.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehouseInformation</Name>
				<Source><![CDATA[
    static container getWarehouseInformation(InventLocationId _inventLocationId)
    {
        container   res;
        InventLocation  inventLocation      = InventLocation::find(_inventLocationId);
        WMSAisleId      aisleIdSpecial      = WMSLocationWizardTableCtrl_Aisle::suggestSpecialAisle(_inventLocationId);
        int64           existingRecCount    = WMSLocationWizardTableCtrl_Aisle::existingNumDB(_inventLocationId);

        res = [[inventLocation], aisleIdSpecial, existingRecCount];
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWizard</Name>
				<Source><![CDATA[
    static WMSLocationWizardTableCtrl_Aisle newFromWizard(WMSLocationWizard wmsLocationWizard)
    {
        WMSLocationWizardTableCtrl_Aisle wmsLocationWizardTableCtrl_Aisle = WMSLocationWizardTableCtrl_Aisle::construct();

        wmsLocationWizardTableCtrl_Aisle.parmDefaultDataParent(wmsLocationWizard);
        return wmsLocationWizardTableCtrl_Aisle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestSpecialAisle</Name>
				<Source><![CDATA[
    // <remarks>
    // Add a post-method handler for returning the right value when extending the <c>WMSLocationType</c> enumeration.
    // </remarks>
    public static WMSAisleId suggestSpecialAisle(InventLocationId _inventLocationId)
    {
        WMSAisle    wmsAisle;
        WMSAisleId  wmsAisleId = "@SYS57495";
        WMSLocation wmsLocation;

        WMSAisleId  findSpecialAisle()
        {
            WMSAisle    wmsAisle2;

            select firstonly wmsAisle2                              // test if other aisle with special locations exist
                where wmsAisle2.InventLocationId        == _inventLocationId
                exists join wmsLocation
                    where wmsLocation.InventLocationId  == wmsAisle2.InventLocationId
                          && wmsLocation.AisleId           == wmsAisle2.AisleId
                          && (wmsLocation.LocationType     == WMSLocationType::InputPort
                          || wmsLocation.LocationType     == WMSLocationType::OutputPort
                          || wmsLocation.LocationType     == WMSLocationType::ProductionInput
                          || wmsLocation.LocationType     == WMSLocationType::InspectionLocation
                          || wmsLocation.LocationType     == WMSLocationType::KanbanSupermarket);
            if (wmsAisle2)
            {
                return wmsAisle2.AisleId;
            }
            return '';
        }

        wmsAisle = WMSAisle::find(wmsAisleId, _inventLocationId);    // test default special aisle
        if (wmsAisle)
        {
            return wmsAisleId;
        }

        select firstonly wmsAisle                                   // test SPECIAL_AISLENo
            where wmsAisle.InventLocationId == _inventLocationId &&
                  wmsAisle.AisleNo          == #SPECIAL_AISLENO;
        if (wmsAisle)
        {
            select firstonly wmsLocation                            // test if special locations exist in SPECIAL_AISLENo
                where wmsLocation.InventLocationId  == _inventLocationId &&
                      wmsLocation.AisleId           == wmsAisle.AisleId &&
                      (wmsLocation.LocationType     == WMSLocationType::InputPort           ||
                       wmsLocation.LocationType     == WMSLocationType::OutputPort          ||
                       wmsLocation.LocationType     == WMSLocationType::ProductionInput     ||
                       wmsLocation.LocationType     == WMSLocationType::InspectionLocation  ||
                       wmsLocation.LocationType     == WMSLocationType::KanbanSupermarket);
            if (wmsLocation)
            {
                return wmsAisle.AisleId;
            }
            wmsAisleId = findSpecialAisle();                        // test if other aisle with special locations exist
            if (wmsAisleId != '')
            {
                return wmsAisleId;
            }

            select firstonly wmsLocation                            // test if no locations exist in SPECIAL_AISLENo
                where wmsLocation.InventLocationId  == _inventLocationId &&
                      wmsLocation.AisleId           == wmsAisle.AisleId;
            if (!wmsLocation)
            {
                return wmsAisle.AisleId;
            }
        }
        else
        {
            wmsAisleId = findSpecialAisle();                        // test if other aisle with special locations exist
            if (wmsAisleId != '')
            {
                return wmsAisleId;
            }
        }

        return "@SYS57495";
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDBKey</Name>
				<Source><![CDATA[
    protected boolean existDBKey(Num key)
    {
        return WMSAisle::exist(key, this.inventLocationId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDB</Name>
				<Source><![CDATA[
    protected boolean existDB()
    {
        return WMSAisle::exist(buffer.aisleId, this.inventLocationId());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>