<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRCustTableForm</c> class is used to put <c>CustTable</c> and
/// <c>CustTableListPage</c> common methods in one place.
/// </summary>
class MCRCustTableForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fraudClear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the fraud hold on the customer.
    /// </summary>
    /// <param name="_custTable">
    /// The customer record in which to clear the fraud hold.
    /// </param>
    /// <param name="_fraudClearButton">
    /// The form control of the clear fraud button.
    /// </param>
    /// <param name="_fraudHoldButton">
    /// The form control of the fraud hold button.
    /// </param>
    public static void fraudClear(CustTable   _custTable,
                                FormControl _fraudClearButton,
                                FormControl _fraudHoldButton)
    {
        MCRFraudHold mcrFraudHold;

        if (_custTable.mcrCustTable().CustStatus == MCRCustStatus::Fraudulent)
        {
            mcrFraudHold = MCRFraudHold::newCustTable(_custTable);

            // clear the customer from fraud.
            if (mcrFraudHold.mcrCustManualFraudClear())
            {
                // If the passed record is a data source go ahead
                //              and refresh buttons and record
                if (FormDataUtil::isFormDataSource(_custTable))
                {
                    // Enable and disable appropriate buttons after fraud
                    // hold is cleared
                    _fraudClearButton.enabled(false);
                    _fraudHoldButton.enabled(true);
                    FormDataUtil::getFormDataSource(_custTable).reread();
                    FormDataUtil::getFormDataSource(_custTable).refresh();
                }
            }
        }
        else
        {
            error("@MCR39861");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fraudHold</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Puts the specified customer on hold for possible fraud.
    /// </summary>
    /// <param name="_custTable">
    /// The customer record to put on hold.
    /// </param>
    /// <param name="_fraudClearButton">
    /// The form control of the clear fraud button.
    /// </param>
    /// <param name="_fraudHoldButton">
    /// The form control of the fraud hold button.
    /// </param>
    public static void fraudHold(CustTable   _custTable,
                                        FormControl _fraudClearButton,
                                        FormControl _fraudHoldButton)
    {
        MCRFraudHold mcrFraudHold;

        if (_custTable.mcrCustTable().CustStatus != MCRCustStatus::Fraudulent)
        {
            mcrFraudHold = mcrFraudHold::newCustTable(_custTable);

            // put the customer on hold for possible fraud.
            if (mcrFraudHold.mcrCustManualFraudHold())
            {
                // If the passed record is a data source go ahead
                //              and refresh buttons and record
                if (FormDataUtil::isFormDataSource(_custTable))
                {
                    // After putting the customer on fraud hold
                    // enable and disable appropriate buttons
                    _fraudClearButton.enabled(true);
                    _fraudHoldButton.enabled(false);
                    FormDataUtil::getFormDataSource(_custTable).reread();
                    FormDataUtil::getFormDataSource(_custTable).refresh();
                }
            }
        }
        else
        {
            error("@MCR39862");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fraudNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the <c>MCROrderNotes</c> form and passes
    /// it a value that loads it in customer fraud mode.
    /// </summary>
    /// <param name="_custForm">
    /// The calling form.
    /// </param>
    /// <param name="_custTable">
    /// The <c>CustTable</c> record that the form will be loaded using.
    /// </param>
    public static void fraudNotes(FormRun   _custForm,
                                CustTable   _custTable)
    {
        #define.mcrCustFraud('MCRCustFraud');

        Args args = new Args();
        args.record(_custTable);
        args.caller(_custForm);
        args.parm(#MCRCustFraud);
        
        FormRun formRun = new MenuFunction(menuitemDisplayStr(MCROrderNotes), MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>