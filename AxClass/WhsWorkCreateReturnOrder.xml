<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkCreateReturnOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkCreateReturnOrder</c> class creates warehouse work for return order.
/// </summary>
class WhsWorkCreateReturnOrder extends WHSWorkCreate
{
    ReturnItemNum           returnItemNum;
    SalesLine               salesLine;
    InventQty               inventQty;
    Map                     dimQtyToSalesLine;
    WHSWorkCreateId         workCreateId;
    private WHSTransWeight  weight;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateWorkForDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true / false based on disposition action that will determine if work can be created
    /// </summary>
    /// <param name = "_dispositionCode">The given disposition code</param>
    /// <returns>True or false based on disposition action</returns>
    internal static boolean canCreateWorkForDispositionCode(WHSDispositionCode _dispositionCode)
    {
        if (WHSReturnReceivingSkipPrintForScrapFlight::instance().isEnabled())
        {
            return WHSDispositionTable::isReturnDispositionCodeSupportingLicensePlateLabelCreation(_dispositionCode);
        }

        boolean             ret;
        DispositionAction   dispositionAction;

        dispositionAction = ReturnDispositionCode::find(WHSDispositionTable::find(_dispositionCode).ReturnDispositionCodeId).DispositionAction;

        switch (dispositionAction)
        {
            case DispositionAction::ReplaceScrap:
            case DispositionAction::Scrap:
            case DispositionAction::ReturnToCust:
                ret = false;
                break;
            default:
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateWork</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true / false based on disposition action that will determine if work can be created
    /// </summary>
    /// <returns>
    ///    True or false based on disposition action
    /// </returns>
    public boolean canCreateWork()
    {
        return WhsWorkCreateReturnOrder::canCreateWorkForDispositionCode(dispositionCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndPostArrivalJournal</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates and posts arrival journal of the return order.
	/// </summary>
	/// <returns>
	/// Journal id.
	/// </returns>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when return order line is not found.
	/// </exception>
WMSJournalId createAndPostArrivalJournal()
    {
        WMSJournalId        journalId;
        SalesLine           tmpReturnLine;
        InventDim           inventDim;
        InventDim           receiptInventDim;
        Qty                 convertedQty;
        WHSReceiptDetails   receiptDetails;
        WHSInventStatusId   dispositionStatus = WHSDispositionTable::find(dispositionCode).InventStatusId;
        boolean             receiptDetailsUsed = false;

        ttsbegin;
  
        InventHandlingUnitId handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(salesLine.ItemId);

        // Loop through receipt details records if they exist
        while select InventDimId, InventQty, CapturedWeight from receiptDetails
            where receiptDetails.ReceiptId == receiptId
            join receiptInventDim
                where receiptInventDim.InventDimId      == receiptDetails.InventDimId
                &&    receiptInventDim.LicensePlateId   == targetLicensePlateId
        {
            receiptDetailsUsed = true;

            convertedQty = this.getReceiptQuantityInSalesUnit(salesLine, receiptDetails.InventDimId, receiptDetails.InventQty, handlingUnitId);

            tmpReturnLine = this.getReturnOrderLine(receiptInventDim, convertedQty, salesLine.inventDim().InventStatusId);

            if (tmpReturnLine.RecId == 0)
            {
                throw error("@WAX3284");
            }

            // Build the correct InventDim
            inventDim = InventDim::find(receiptDetails.InventDimId);
            inventDim.wmsLocationId     = startLocationId;
            inventDim.LicensePlateId    = targetLicensePlateId;
            if (dispositionStatus)
            {
                inventDim.InventStatusId = dispositionStatus;
            }
            if (inventLocationId)
            {
                inventDim.InventLocationId = inventLocationId;
            }
            inventDim = InventDim::findOrCreate(inventDim);

            this.createSerial(inventDim.InventSerialId, salesLine.ItemId);

            PdsInventQty        cwQtyArrivalLine;
            InventQty           inventQtyArrivalLine;
            if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
            {
                inventQtyArrivalLine = receiptDetails.CapturedWeight;
                cwQtyArrivalLine = receiptDetails.InventQty;
            }
            else
            {
                inventQtyArrivalLine = receiptDetails.InventQty;
                cwQtyArrivalLine = 0;
            }

            journalId = this.processArrivalJournal(tmpReturnLine, inventQtyArrivalLine, cwQtyArrivalLine, inventDim.InventDimId);

            dimQtyToSalesLine.insert(receiptInventDim.InventDimId, tmpReturnLine.RecId);

            workInventDim = inventDim;

            if (receiptInventDim.InventBatchId && !inventBatchId)
            {
                inventBatchId = receiptInventDim.InventBatchId;
            }
        }

        if (!receiptDetailsUsed)
        {
            convertedQty = this.getReceiptQuantityInSalesUnit(salesLine, salesLine.InventDimId, inventQty, handlingUnitId);

            receiptInventDim.clear();
            if (inventLocationId)
            {
                receiptInventDim.initFromInventDim(salesLine.inventDim());
                receiptInventDim.InventLocationId = inventLocationId;
            }
            tmpReturnLine = this.getReturnOrderLine(receiptInventDim, convertedQty, receiptInventDim.InventStatusId);

            if (tmpReturnLine.RecId == 0)
            {
                throw error("@WAX3284");
            }

            inventDim = salesLine.inventDim();
            inventDim.wmsLocationId     = startLocationId;
            inventDim.LicensePlateId    = targetLicensePlateId;
            if (dispositionStatus)
            {
                inventDim.InventStatusId = dispositionStatus;
            }
            if (inventLocationId)
            {
                inventDim.InventLocationId = inventLocationId;
            }
            inventDim = InventDim::findOrCreate(inventDim);


            PdsInventQty        cwQtyArrivalLine;
            InventQty           inventQtyArrivalLine;    
            if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
            {
                inventQtyArrivalLine = weight;
                cwQtyArrivalLine = inventQty;   
            }
            else
            {
                inventQtyArrivalLine = inventQty;
                cwQtyArrivalLine = 0;
            }

            journalId = this.processArrivalJournal(tmpReturnLine, inventQtyArrivalLine, cwQtyArrivalLine, inventDim.InventDimId);
        }

        ttscommit;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSerial</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates serial record with serial id for an item if it doesn't exists in database.
	/// </summary>
	/// <param name="_serialId">
	/// Serial id of the record.
	/// </param>
	/// <param name="_itemId">
	/// Item id of the record.
	/// </param>
    protected void createSerial(InventSerialId _serialId, ItemId _itemId)
    {
        if (_serialId && InventTable::find(_itemId).isItemSerialNumberControlled())
        {
            InventSerial::findOrCreate(_serialId, _itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Establishes temporary work lines to be used in work creation based on disposition action
    /// </summary>
    public void createTempTable()
    {
        MapEnumerator       dimQtyEnumerator;
        SalesLine           tmpReturnLine;
        Map                 inventDims;
        MapEnumerator       inventDimEnumerator;

        ttsbegin;

        // We must have an AX Disposition Code in order to create the Arrival Journal
        if (!dispositionCode)
        {
            throw error("@WAX3277");
        }

        // Create the License Plate if we have one
        if (targetLicensePlateId)
        {
            if (containerTypeCode)
            {
                WHSLicensePlate::createLicensePlate(targetLicensePlateId, true, containerTypeCode);
            }
            else
            {
                WHSLicensePlate::createLicensePlate(targetLicensePlateId);
            }
        }

        startLocationId = this.defaultReceiptLocationId(salesLine.InventDimId);

        // Create and Post the Arrival Journal
        this.createAndPostArrivalJournal();

        if (this.canCreateWork())
        {
            // Create map to track above location dimensions and qty, based off registered inventory
            this.createReceiptDimQtyMap(salesLine.ItemId);

            // Create the Temp Work Line record(s).
            if (!dimQty.empty())
            {
                dimQtyEnumerator = dimQty.getEnumerator();

                while (dimQtyEnumerator.moveNext())
                {
                    workInventDim = InventDim::find(dimQtyEnumerator.currentKey());

                    inventDims = dimQty2receiptDetails.lookup(workInventDim.InventDimId);
                    inventDimEnumerator = inventDims.getEnumerator();

                    // For batch and serial below process work for each of the related return order line related to the receipt details
                    while (inventDimEnumerator.moveNext())
                    {
                        tmpReturnLine = SalesLine::findRecId(dimQtyToSalesLine.lookup(inventDimEnumerator.currentKey()));

                        if (tmpReturnLine.RecId == 0)
                    {
                            throw error("@WAX3284");
                    }

                        this.initTmpWorkline(tmpReturnLine, workInventDim.InventBatchId);
                        this.createTempLine(tmpWorkLine, inventDimEnumerator.currentValue());
                    }
                }
            }
            else
            {
                this.initTmpWorkline(salesLine);
                this.createTempLine(tmpWorkLine, inventQty);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        salesLine = _common;

        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();

        dimQtyToSalesLine = new Map(Types::String, Types::Int64);

        super(salesLine, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    public InventQty parmInventQty(InventQty _inventQty = inventQty)
    {
        inventQty = _inventQty;

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnItemNum</Name>
				<Source><![CDATA[
    public ReturnItemNum parmReturnItemNum(ReturnItemNum _returnItemNum = returnItemNum)
    {
        returnItemNum = _returnItemNum;

        return returnItemNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    public SalesLine parmSalesLine(SalesLine _salesLine = salesLine)
    {
        salesLine = _salesLine;

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;

        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processArrivalJournal</Name>
				<Source><![CDATA[
    private WMSJournalId processArrivalJournal(
        SalesLine           _salesLine,
        InventHandlingQty	_qty,
        PdsCWInventQty		_cwQty,
        InventDimId         _inventDimId)
    {
        WMSJournalCheckPostReception    journalCheckPost;
        WMSJournalTable                 journalTable;
        WMSJournalTrans                 journalTrans;

        ttsbegin;

        // Create the journal header
        journalTable.initFromWMSJournalName(WMSJournalName::find(WHSParameters::find().DefaultReturnJournal));
        journalTable.InventTransType        = InventTransType::Sales;
        journalTable.VendAccount            = salesLine.CustAccount;
        journalTable.InventTransRefId       = salesLine.SalesId;
        journalTable.ReturnItemNum          = SalesTable::find(salesLine.SalesId).ReturnItemNum;
        journalTable.CheckPickingLocation   = NoYes::Yes;
        journalTable.PalletTransports       = NoYes::Yes;
        journalTable.CheckBufferLocation    = NoYes::Yes;
        journalTable.InventDimId            = InventDim::inventDimIdBlank();
        journalTable.NumOfLines             = 1;
        journalTable.insert();

        // Create the journal line
        ++journalTrans.LineNum;
        journalTrans.initFromWMSJournalTable(journalTable);
        journalTrans.initValue();
        journalTrans.IsReturnOrder              = 1;
        journalTrans.ReturnDispositionCodeId    = WHSDispositionTable::find(dispositionCode).ReturnDispositionCodeId;
        journalTrans.ItemId                     = _salesLine.ItemId;
        journalTrans.Qty                        = _qty;
        journalTrans.PdsCWQty                   = _cwQty;
        journalTrans.InventTransId              = _salesLine.InventTransId;
        journalTrans.PalletTransports           = NoYes::No;
        journalTrans.CheckPickingLocation       = NoYes::No;
        journalTrans.CheckBufferLocation        = NoYes::No;
        journalTrans.InventDimId                = _inventDimId;
        journalTrans.insert();

        // Post the Arrival Journal
        journalCheckPost = WMSJournalCheckPostReception::construct();
        journalCheckPost.parmAutoBlock(true);
        journalCheckPost.parmShowInfoResult(true);
        journalCheckPost.parmThrowCheckFailed(true);
        journalCheckPost.parmJournalCheckPostType(JournalCheckPostType::Post);
        journalCheckPost.parmJournalTableId(journalTable.TableId);
        journalCheckPost.parmJournalId(journalTable.JournalId);
        journalCheckPost.runOperation();

        ttscommit;

        return journalTable.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
	/// Constructor method for the class instances.
	/// </summary>
	/// <param name="_common">
	/// Common record to be used to construct instance.
	/// </param>
	/// <param name="_workCreateId">
	/// Work creation id to be used to construct instance.
	/// </param>
	/// <returns>
	/// The <c>WHSWorkCreateReturnOrder</c> instance.
	/// </returns>
        static WHSWorkCreateReturnOrder construct(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        WHSWorkCreateReturnOrder    workCreateReturnOrder;

        workCreateReturnOrder = new WHSWorkCreateReturnOrder(_common, _workCreateId);

        return workCreateReturnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptQuantityInSalesUnit</Name>
				<Source><![CDATA[
    private Qty getReceiptQuantityInSalesUnit(
        SalesLine           _salesLine,
        InventDimId         _receiptInventDimId,
        InventQty           _receiptQuantity,
        UnitOfMeasureSymbol _inventUnitId)
    {
        EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        return releasedProductUnitConverter.convert(_receiptQuantity,
                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(_inventUnitId),
                                                    PdsGlobal::pdsIsCWItem(_salesLine.ItemId) ? UnitOfMeasure::unitOfMeasureIdBySymbol(_salesLine.pdsCWUnitId()) : UnitOfMeasure::unitOfMeasureIdBySymbol(_salesLine.SalesUnit),
                                                    NoYes::No,
                                                    _salesLine.ItemId,
                                                    _receiptInventDimId,
                                                    NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnOrderLine</Name>
				<Source><![CDATA[
    private SalesLine getReturnOrderLine(
        InventDim           _receiptInventDim,
        Qty                 _convertedQty,
        WHSInventStatusId   _inventStatusId)
    {
        InventDim           inventDim;
        InventDim           inventDimCriteria;
        InventDimParm       inventDimParm;
        InventDimParm       inventDimParmAllowBlank;
        SalesLine           tmpReturnLine;

        _receiptInventDim.InventStatusId = _inventStatusId;

        if (InventDimGroupSetup::newItemIdProductDimensionsOnly(salesLine.ItemId).activeFields().elements())
        {
            inventDimParm.setAllProductDimensions();
        }

        inventDimParm.InventLocationIdFlag = NoYes::Yes;

        if (_receiptInventDim.inventSerialId)
        {
            inventDimParm.InventSerialIdFlag = NoYes::Yes;

            if (!WhsWorkCreateReturnOrder::returnLineHasOptionalSerialId(salesLine.SalesId, salesLine.ItemId))
            {
                inventDimParmAllowBlank.InventSerialIdFlag = NoYes::Yes;
            }
        }

        if (_receiptInventDim.InventBatchId)
        {
            inventDimParm.InventBatchIdFlag = NoYes::Yes;
            inventDimParmAllowBlank.InventBatchIdFlag = NoYes::Yes;
        }
        
        inventDimCriteria.initFromInventDim(_receiptInventDim, inventDimParm.selectedDimFields());
        InventSite::setReceivingWarehouseCriteria(inventDimCriteria, inventDimParm);

        if (_receiptInventDim.inventSerialId || _receiptInventDim.InventBatchId)
        {
            tmpReturnLine = this.getReturnOrderLineBasedOnMatchingDimensions(_convertedQty, inventDimCriteria, inventDimParm, inventDimParmAllowBlank);
        }

        if (!tmpReturnLine)
        {
            boolean isCWItem = PdsGlobal::pdsIsCWItem(salesLine.ItemId);

            // Get the return line with the lowest quantity - ExpectedRetQty is always a negative value
            select firstonly tmpReturnLine
                order by tmpReturnLine.PdsCWExpectedRetQty desc, tmpReturnLine.ExpectedRetQty desc
                where tmpReturnLine.SalesId         == salesLine.SalesId
                    && tmpReturnLine.ItemId         == salesLine.ItemId
                    && tmpReturnLine.ReturnStatus   == ReturnStatusLine::Awaiting
                    &&   ((!isCWItem
                    &&    tmpReturnLine.ExpectedRetQty             <= -_convertedQty)
                    ||   (isCWItem
                    &&    tmpReturnLine.PdsCWExpectedRetQty        <= -_convertedQty))
                    #InventDimExistsJoinAllowBlank(tmpReturnLine.InventDimId, inventDim, inventDimCriteria, inventDimParm, inventDimParmAllowBlank);
        }

        return tmpReturnLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWeight</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSTransWeight parmWeight(InventQty _weight = weight)
    {
        weight = _weight;

        return weight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnOrderLineBasedOnMatchingDimensions</Name>
				<Source><![CDATA[
    private SalesLine getReturnOrderLineBasedOnMatchingDimensions(
        Qty                 _convertedQty,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm,
        InventDimParm       _inventDimParmAllowBlank)
    {
        SalesLine           tmpReturnLine;
        InventDim           inventDim;
        InventTransOrigin   inventTransOriginReturn;
        InventTrans         inventTransReturn;
        InventDim           inventDimReturn;
        boolean				isCWItem = PdsGlobal::pdsIsCWItem(salesLine.ItemId);

        select firstonly tmpReturnLine
                order by tmpReturnLine.PdsCWExpectedRetQty desc, tmpReturnLine.ExpectedRetQty desc
                where tmpReturnLine.SalesId                    == salesLine.SalesId
                &&    tmpReturnLine.ItemId                     == salesLine.ItemId
                &&    tmpReturnLine.ReturnStatus               == ReturnStatusLine::Awaiting
                &&    tmpReturnLine.InventTransIdReturn        != ''
                &&   ((!isCWItem
                &&    tmpReturnLine.ExpectedRetQty             <= -_convertedQty)
                ||   (isCWItem
                &&    tmpReturnLine.PdsCWExpectedRetQty        <= -_convertedQty))
                #InventDimExistsJoinAllowBlank(tmpReturnLine.InventDimId, inventDim, _inventDimCriteria, _inventDimParm, _inventDimParmAllowBlank)
        exists join inventTransOriginReturn
            where inventTransOriginReturn.InventTransId == tmpReturnLine.InventTransIdReturn
        exists join inventTransReturn
            where inventTransReturn.InventTransOrigin   == inventTransOriginReturn.RecId
        #InventDimExistsJoinAllowBlank(inventTransReturn.InventDimId, inventDimReturn, _inventDimCriteria, _inventDimParm, _inventDimParmAllowBlank);

        return tmpReturnLine;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnOrderLineByLotIdAndBatch</Name>
				<Source><![CDATA[
    private SalesLine getReturnOrderLineByLotIdAndBatch(
        Qty                 _convertedQty,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm,
        InventDimParm       _inventDimParmAllowBlank)
    {
        SalesLine           tmpReturnLine;
        InventDim           inventDim;
        InventTransOrigin   inventTransOriginReturn;
        InventTrans         inventTransReturn;
        InventDim           inventDimReturn;
        boolean				isCWItem = PdsGlobal::pdsIsCWItem(salesLine.ItemId);

        select firstonly tmpReturnLine
                order by tmpReturnLine.PdsCWExpectedRetQty desc, tmpReturnLine.ExpectedRetQty desc
                where tmpReturnLine.SalesId                    == salesLine.SalesId
                &&    tmpReturnLine.ItemId                     == salesLine.ItemId
                &&    tmpReturnLine.ReturnStatus               == ReturnStatusLine::Awaiting
                &&    tmpReturnLine.InventTransIdReturn        != ''
                &&   ((!isCWItem
                &&    tmpReturnLine.ExpectedRetQty             <= -_convertedQty)
                ||   (isCWItem
                &&    tmpReturnLine.PdsCWExpectedRetQty        <= -_convertedQty))
                #InventDimExistsJoinAllowBlank(tmpReturnLine.InventDimId, inventDim, _inventDimCriteria, _inventDimParm, _inventDimParmAllowBlank)
        join RecId from inventTransOriginReturn
            where inventTransOriginReturn.InventTransId == tmpReturnLine.InventTransIdReturn
        join RecId from inventTransReturn
            where inventTransReturn.InventTransOrigin   == inventTransOriginReturn.RecId
        join RecId from inventDimReturn
            where inventDimReturn.InventDimId           == inventTransReturn.InventDimId
            &&    inventDimReturn.InventBatchId         == _inventDimCriteria.InventBatchId;

        return tmpReturnLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkline</Name>
				<Source><![CDATA[
    private void initTmpWorkline(
        SalesLine       _salesLine,
        InventBatchId   _inventBatchId = '')
    {
        // Fill the Return Order specific fields on the Temp Work Line
        tmpWorkLine.WorkType        = WHSWorkType::Put;
        tmpWorkLine.OriginType      = WHSOriginType::ReturnOrder;
        tmpWorkLine.OriginRefId     = _salesLine.SalesId;
        tmpWorkLine.OrderNum        = _salesLine.SalesId;
        tmpWorkLine.WorkCreateId    = workCreateId;
        tmpWorkLine.WorkTransType   = WHSWorkTransType::ReturnOrder;
        tmpWorkLine.InventTransId   = _salesLine.InventTransId;
        tmpWorkLine.ItemId          = _salesLine.ItemId;
        tmpWorkLine.RefTableId      = tableNum(SalesLine);
        tmpWorkLine.RefRecId        = _salesLine.RecId;
        tmpWorkLine.OrderNum        = _salesLine.SalesId;
        tmpWorkLine.StartLocationId = startLocationId;
        tmpWorkLine.TransTxt        = returnItemNum;
        tmpWorkLine.CustVendAC      = _salesLine.CustAccount;
        tmpWorkLine.InventBatchId   = _inventBatchId;

        this.setGlobals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnLineHasOptionalSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks that return order line for specific item allows blank serial id but it is specified.
    /// </summary>
    /// <param name = "_salesId">Sales ID of the retur order.</param>
    /// <param name = "_itemId">Item ID to check.</param>
    /// <returns>
    ///     true if return order line allows blank serial id but it is specified; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean returnLineHasOptionalSerialId(SalesId _salesId, ItemId _itemId)
    {
        SalesLine   returnLine;

        if (WhsInvent::isSerialNumberOptional(_itemId))
        {
            InventDim   inventDim;

            select firstonly RecId from returnLine
                where  returnLine.SalesId        == _salesId
                    && returnLine.ItemId         == _itemId
                    && returnLine.ReturnStatus   == ReturnStatusLine::Awaiting
                    && returnLine.ExpectedRetQty <  0
                exists join inventDim
                    where inventDim.InventDimId == returnLine.InventDimId
                       && inventDim.inventSerialId != '';
        }

        return returnLine.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>