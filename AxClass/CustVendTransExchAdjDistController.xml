<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransExchAdjDistController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendTransExchAdjDistController</c> class provides support for generating distributions
/// for currency revaluation processing.
/// </summary>
/// <remarks>
/// This class extends the <c>CustVendTransDistributionController</c> class to provide additional
/// functionality that is specific to currency revaluation processing.
/// </remarks>
public class CustVendTransExchAdjDistController extends CustVendTransDistributionController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDistributionFactorsForPostingTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populate the posted distributions collection with the associated source document data.
    /// </summary>
    /// <param name="_custVendTrans">
    ///     The customer or vendor transaction that is used to find the distribution factors.
    /// </param>
    /// <param name="_ledgerPostingTypes">
    ///     A <c>List</c> that contains the collection of <c>LedgerPostingType</c> enumerations that
    ///  that are used to find the distribution factors.
    /// </param>
    /// <param name="_defaultLedgerDimension">
    ///     The default ledger dimension.
    /// </param>
    /// <param name = "_forceSingleDistribution">
    ///     True when creates a single entry using the default ledger dimension provided.
    /// </param>
    /// <param name="_mergeDefaultWithOriginalDimension">
    ///     True when the default ledger dimension should be merged with the ledger dimensions of the original document; optional.
    /// </param>
    /// <returns>
    ///     A list that contains the collection of <c>CustVendTransDistribution</c> instances that were created.
    /// </returns>
    public List getDistributionFactorsForPostingTypes(
        CustVendTrans _custVendTrans,
        List _ledgerPostingTypes,
        LedgerDimensionAccount _defaultLedgerDimension,
        boolean _forceSingleDistribution,
        boolean _mergeDefaultWithOriginalDimension = false)
    {
        List postedDistributionData;
        Money postedDistributionsTotal;

        if (this.needToAcquireFactorsForPostingTypes(_custVendTrans, _ledgerPostingTypes, _defaultLedgerDimension, _forceSingleDistribution))
        {
            // reset the class state to be associated with the transaction/etc. of the current request
            currentTransaction = _custVendTrans;
            currentLedgerPostingTypes = _ledgerPostingTypes;
            currentDefaultLedgerDimension = _defaultLedgerDimension;
            currentForceSingleDistribution = _forceSingleDistribution;
            currentLedger = Ledger::findByLegalEntity(CompanyInfo::current(_custVendTrans.company()));

            // populate the posted distributions collection with the associated source document data, if it is needed and if it exists
            if (_forceSingleDistribution)
            {
                // create a single entry using the default ledger dimension provided and a factor of 100%
                postedDistributionData = new List(Types::Class);
                postedDistributionData.addEnd(new CustVendTransDistribution(_defaultLedgerDimension, 0, 1.0));
            }
            else
            {
                postedDistributionData = this.buildPostedDistributionData(
                    _custVendTrans,
                    _ledgerPostingTypes,
                    _defaultLedgerDimension,
                    _mergeDefaultWithOriginalDimension);
               
                // we could not find the original distributions
                //Create a single entry using the default ledger dimension provided and a factor of 100%
                if (postedDistributionData.elements() == 0)
                {
                    postedDistributionData = new List(Types::Class);

                    LedgerDimensionAccount ledgerDimension;
                    if (_mergeDefaultWithOriginalDimension)
                    {
                        ledgerDimension = this.applyDefaultDimensionForInterunit(_defaultLedgerDimension);
                    }
                    else
                    {
                        ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultLedgerDimension);
                    }
                    postedDistributionData.addEnd(new CustVendTransDistribution(ledgerDimension, 0, 1.0));
                }
            }

            postedDistributionsTotal = this.getPostedDistributionTransactionTotal(postedDistributionData);
            this.generateDistributionFactors(postedDistributionData, postedDistributionsTotal);
        }

        Debug::assert(this.parmCurrentDistributionFactors() != null);
        Debug::assert(this.needToAcquireFactorsForPostingTypes(_custVendTrans, _ledgerPostingTypes, _defaultLedgerDimension, _forceSingleDistribution) == false);

        return this.parmCurrentDistributionFactors();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPostedDistributionData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populate the posted distributions list with the associated <C>CustVendTrans</C> data.
    /// </summary>
    /// <param name="_custVendTrans">
    ///     The customer or vendor transaction that is used to find the distribution factors.
    /// </param>
    /// <param name="_ledgerPostingTypes">
    ///     A <c>List</c> that contains the collection of <c>LedgerPostingType</c> enumerations that
    ///  that are used to find the distribution factors.
    /// </param>
    /// <param name="_defaultLedgerDimension">
    ///     The default ledger dimension.
    /// </param>
    /// <param name="_mergeDefaultWithOriginalDimension">
    ///     True when the default ledger dimension should be merged with the ledger dimensions of the original document; optional.
    /// </param>
    /// <returns>
    ///     A list that contains the collection of <c>CustVendTransDistribution</c> instances that were created.
    /// </returns>
    protected List buildPostedDistributionData(
        CustVendTrans _custVendTrans,
        List _ledgerPostingTypes,
        LedgerDimensionAccount _defaultLedgerDimension,
        boolean _mergeDefaultWithOriginalDimension = false)
    {
        
        if (CustVendTransDistributionController::custVendTransHasSourceDocumentData(_custVendTrans))
        {
            return this.getSourceDocumentDistributionFactors(
                            _custVendTrans,
                            _ledgerPostingTypes,
                            _defaultLedgerDimension,
                            _mergeDefaultWithOriginalDimension);
        }
        else
        {
            return this.getGeneralJournalDistributionFactors(_custVendTrans,
                            _ledgerPostingTypes,
                            _defaultLedgerDimension,
                            _mergeDefaultWithOriginalDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalDistributionFactors</Name>
				<Source><![CDATA[
    private List getGeneralJournalDistributionFactors(
        CustVendTrans _custVendTrans,
        List _ledgerPostingTypes,
        LedgerDimensionAccount _defaultLedgerDimension,
        boolean _mergeDefaultWithOriginalDimension)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        List postedDistributionData;
        CustVendTransDistribution postedDistribution;
        LedgerDimensionAccount ledgerDimensionAccount;
        Query q = new Query(queryStr(CustVendExchGeneralJournalAccountSource));
        QueryRun qr;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        Voucher voucher;
        TransDate transDate;

        postedDistributionData = new List(Types::Class);

        voucher = _custVendTrans.Voucher;
        transDate = _custVendTrans.TransDate;

        if (!this.skipUseLedgerVoucherChanged)
        {
            ledgerJournalVoucherChanged = this.findLedgerJournalVoucherChanged(_custVendTrans);
            if (ledgerJournalVoucherChanged)
            {
                if (ledgerJournalVoucherChanged.ToVoucher && ledgerJournalVoucherChanged.ToDate)
                {
                    voucher = ledgerJournalVoucherChanged.ToVoucher;
                    transDate = ledgerJournalVoucherChanged.ToDate;
                }
                else
                {
                    ledgerJournalVoucherChanged.clear();
                }
            }
        }

        q.dataSourceTable(tableNum(SubledgerVoucherGeneralJournalEntry)).findRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher)).value(queryValue(voucher));
        q.dataSourceTable(tableNum(SubledgerVoucherGeneralJournalEntry)).findRange(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate)).value(queryValue(transDate));
        q.dataSourceTable(tableNum(SubledgerVoucherGeneralJournalEntry)).findRange(fieldNum(SubledgerVoucherGeneralJournalEntry, VoucherDataAreaId)).value(queryValue(_custVendTrans.dataAreaId));
        this.addLedgerPostingTypeRange(q.dataSourceTable(tableNum(GeneralJournalAccountEntry)), fieldNum(GeneralJournalAccountEntry, PostingType), _ledgerPostingTypes);
        q.dataSourceTable(tableNum(GeneralJournalEntry)).findRange(fieldNum(GeneralJournalEntry, PostingLayer)).value(queryValue(CurrentOperationsTax::Current));
        q = this.appendSuspenseAccountRestriction(_custVendTrans, ledgerJournalVoucherChanged, q);

        qr = new QueryRun(q);
        while (qr.next())
        {
            generalJournalAccountEntry = qr.get(tableNum(GeneralJournalAccountEntry));

            if (generalJournalAccountEntry.AccountingCurrencyAmount != 0)
            {
                ledgerDimensionAccount = generalJournalAccountEntry.LedgerDimension;
                if (_mergeDefaultWithOriginalDimension)
                {
                    DimensionDefault dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimensionAccount);
                    ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultLedgerDimension, dimensionDefault);
                }

                postedDistribution = new CustVendTransDistribution(ledgerDimensionAccount,
                    0,
                    generalJournalAccountEntry.AccountingCurrencyAmount);

                postedDistributionData.addEnd(postedDistribution);
            }
        }

        return postedDistributionData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentDistributionFactors</Name>
				<Source><![CDATA[
    private List getSourceDocumentDistributionFactors(
        CustVendTrans _custVendTrans,
        List _ledgerPostingTypes,
        LedgerDimensionAccount _defaultLedgerDimension,
        boolean _mergeDefaultWithOriginalDimension)
    {
        List postedDistributionData = new List(Types::Class);

        AccountingEvent accountingEvent = AccountingEvent::find(_custVendTrans.AccountingEvent);

        if (SourceDocumentDetermineDistributionFactorsForSettlementFlight::instance().isEnabled() &&
            accountingEvent.Type == AccountingEventType::PendingJournalized)
        {
            postedDistributionData = SourceDocumentDistributionFactorsForSettlement::getSourceDocumentDistributionFactors
            (
                _defaultLedgerDimension,
                _mergeDefaultWithOriginalDimension,
                accountingEvent,
                currentLedger,
                _ledgerPostingTypes
            );
        }
        else
        {
            SubledgerJournalAccountEntry sjae;

            Query query = this.getQueryForSourceDocument(_custVendTrans, sjae);

            query.dataSourceTable(tableNum(SubledgerJournalEntry)).findRange(fieldNum(SubledgerJournalEntry, AccountingEvent)).value(queryValue(_custVendTrans.AccountingEvent));
            query.dataSourceTable(tableNum(SubledgerJournalEntry)).findRange(fieldNum(SubledgerJournalEntry, Ledger)).value(queryValue(currentLedger.RecId));
            this.addLedgerPostingTypeRange(query.dataSourceTable(tableNum(SubledgerJournalAccountEntry)), fieldNum(SubledgerJournalAccountEntry, PostingType), _ledgerPostingTypes, true);

            QueryRun queryRun = new QueryRun(query);
            if (this.groupSourceDocumentDistributionEnabled(_custVendTrans) && sjae.RecId > 0)
            {
                while (queryRun.next())
                {
                    SubledgerJournalAccountEntry subledgerJournalAccountEntry = queryRun.get(tableNum(SubledgerJournalAccountEntry));
                    SubledgerJournalAccountEntryDistribution subledgerJournalAccountEntryDistribution = queryRun.get(tableNum(SubledgerJournalAccountEntryDistribution));

                    if (subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount != 0)
                    {
                        LedgerDimensionAccount ledgerDimensionAccount = subledgerJournalAccountEntry.LedgerDimension;
                        if (_mergeDefaultWithOriginalDimension)
                        {
                            DimensionDefault dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimensionAccount);
                            ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultLedgerDimension, dimensionDefault);
                        }

                        CustVendTransDistribution postedDistribution = new CustVendTransDistribution(
                            ledgerDimensionAccount,
                            0,
                            subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount);

                        if (subledgerJournalAccountEntryDistribution.AccountingDistribution != 0)
                        {
                            postedDistribution.setAccountingDistributions(int642Str(subledgerJournalAccountEntryDistribution.AccountingDistribution));
                        }

                        postedDistributionData.addEnd(postedDistribution);
                    }
                }
            }
            else
            {
                while (queryRun.next())
                {
                    SubledgerJournalAccountEntry subledgerJournalAccountEntry = queryRun.get(tableNum(SubledgerJournalAccountEntry));

                    if (subledgerJournalAccountEntry.AccountingCurrencyAmount != 0)
                    {
                        subledgerJournalAccountEntry = queryRun.get(tableNum(SubledgerJournalAccountEntry));

                        LedgerDimensionAccount ledgerDimensionAccount = subledgerJournalAccountEntry.LedgerDimension;
                        if (_mergeDefaultWithOriginalDimension)
                        {
                            DimensionDefault dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimensionAccount);
                            ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultLedgerDimension, dimensionDefault);
                        }

                        CustVendTransDistribution postedDistribution = new CustVendTransDistribution(
                            ledgerDimensionAccount,
                            0,
                            subledgerJournalAccountEntry.AccountingCurrencyAmount);

                        postedDistributionData.addEnd(postedDistribution);
                    }
                }
            }
        }

        return this.groupDistributions(postedDistributionData, _custVendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendTransExchAdjDistController construct()
    {
        return new CustVendTransExchAdjDistController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendSuspenseAccountRestriction</Name>
				<Source><![CDATA[
    private Query appendSuspenseAccountRestriction(CustVendTrans _custVendTrans, LedgerJournalVoucherChanged _ledgerJournalVoucherChanged, Query _q)
    {
        LedgerDimensionDefaultAccount suspenseDefaultAccount;
        LedgerDimensionDefaultAccount offsetSuspenseDefaultAccount;
        LedgerDimensionAccount suspenseAccount;
        LedgerDimensionAccount offsetSuspenseAccount;
        RecId suspenseMainAccountRecId;
        RecId offsetSuspenseMainAccountRecId;
        str entityInstanceCriteria;

        if (_custVendTrans.TableId == tableNum(VendTrans))
        {
            if (_ledgerJournalVoucherChanged)
            {
                suspenseDefaultAccount = VendLedgerAccounts::findPurchasingLedgerDimension(_custVendTrans.AccountNum, _custVendTrans.PostingProfile);

                if (suspenseDefaultAccount
                    && (!VendExchAdjCheckPostingProfileFlight::instance().isEnabled()
                        || suspenseDefaultAccount != VendLedgerAccounts::summaryLedgerDimension(_custVendTrans.AccountNum, _custVendTrans.PostingProfile, false)))
                {
                    suspenseAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(suspenseDefaultAccount);
                    suspenseMainAccountRecId = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(suspenseAccount);
                }

                offsetSuspenseDefaultAccount = VendLedgerAccounts::findPurchasingOffsetLedgerDimension(_custVendTrans.AccountNum, _custVendTrans.PostingProfile);
                if (offsetSuspenseDefaultAccount)
                {
                    offsetSuspenseAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(offsetSuspenseDefaultAccount);
                    offsetSuspenseMainAccountRecId = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(offsetSuspenseAccount);
                }
            }
        }

        if (suspenseMainAccountRecId || offsetSuspenseMainAccountRecId)
        {
            _q.dataSourceTable(tableNum(DimensionAttributeLevelValueView)).findRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute)).value(queryValue(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)));
            entityInstanceCriteria = strFmt('((DimensionAttributeLevelValueView.EntityInstance != %1) && (DimensionAttributeLevelValueView.EntityInstance != %2))',
                    int642str(suspenseMainAccountRecId),
                    int642str(offsetSuspenseMainAccountRecId));
            _q.dataSourceTable(tableNum(DimensionAttributeLevelValueView)).addRange(fieldNum(DimensionAttributeLevelValueView, EntityInstance)).value(entityInstanceCriteria);
        }

        return _q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerJournalVoucherChanged</Name>
				<Source><![CDATA[
    private LedgerJournalVoucherChanged findLedgerJournalVoucherChanged(CustVendTrans _custVendTrans)
    {
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        LedgerJournalTransAccrualTrans ledgerjournalTransAccrualTrans;

        select firstOnly ledgerJournalVoucherChanged
        where ledgerJournalVoucherChanged.FromVoucher == _custVendTrans.Voucher
            && ledgerJournalVoucherChanged.FromDate == _custVendTrans.TransDate
			&& ledgerJournalVoucherChanged.ToVoucher != ''
				notexists join ledgerjournalTransAccrualTrans
					where ledgerjournalTransAccrualTrans.Voucher == _custVendTrans.Voucher &&
						ledgerjournalTransAccrualTrans.Voucher == ledgerJournalVoucherChanged.ToVoucher &&
						ledgerjournalTransAccrualTrans.TransDate == ledgerJournalVoucherChanged.ToDate;

        return ledgerJournalVoucherChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDefaultDimensionForInterunit</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount applyDefaultDimensionForInterunit(LedgerDimensionAccount _defaultLedgerDimension)
    {
        LedgerDimensionAccount defaultedLedgerDimension = _defaultLedgerDimension;

        if (LedgerInterunitDimensionAttribute::findByLedger(Ledger::current()).DimensionAttribute)
        {
            defaultedLedgerDimension = this.applyMainAccountDefaultDimension(defaultedLedgerDimension);
        }

        return defaultedLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyMainAccountDefaultDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount applyMainAccountDefaultDimension(LedgerDimensionAccount _defaultLedgerDimension)
    {
        LedgerDimensionAccount defaultedLedgerDimension = _defaultLedgerDimension;

        MainAccount mainAccount = MainAccount::findByLedgerDimension(defaultedLedgerDimension);
        MainAccountLegalEntity mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccount.Recid, CompanyInfo::current());

        if (mainAccountLegalEntity && mainAccountLegalEntity.DefaultDimension)
        {
            defaultedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _defaultLedgerDimension,
                mainAccountLegalEntity.DefaultDimension);

            currentDefaultLedgerDimension = defaultedLedgerDimension;
        }

        return defaultedLedgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>