<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMerchandisingCopilotConfigurationRisksDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The util class that provides data for merchandising copilot configuration risks summaries.
/// </summary>
internal final class RetailMerchandisingCopilotConfigurationRisksDataProvider
{
    private const int MaxRisksSentToCapi = 3;

    private OMInternalOrganization omInternalOrganization;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static RetailMerchandisingCopilotConfigurationRisksDataProvider construct(OMInternalOrganization _omInternalOrganization)
    {
        return new RetailMerchandisingCopilotConfigurationRisksDataProvider(_omInternalOrganization);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(OMInternalOrganization _omInternalOrganization)
    {
        this.omInternalOrganization = _omInternalOrganization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigurationRisks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the configuration risks for the given entity type.
    /// </summary>
    /// <param name = "_entityType">The entity type.</param>
    /// <returns>The configuration risks in plain text.</returns>
    /// <remarks>
    /// Each risk for the given entity type is represented by one line in the result.
    /// The format of each line is: [EntityType][Severity]Risks_Description: Number_Of_Affected_Entities, for example:
    /// [Product][Error]Invent base price is missing: 5
    /// </remarks>
    internal container getConfigurationRisks(RetailCommerceValidatorTestStage _entityType)
    {
        str entityTypeId = this.getEntityTypeId(_entityType);
        RefRecId lastCompletedBatchJobId = RetailCommerceValidator::findLastCompletedBatchJobId(this.omInternalOrganization.RecId);

        RetailCommerceValidatorRules validatorRules;
        RetailCommerceValidatorLog validatorLog;

        List riskLists = new List(Types::Class);
        int riskCount = 0;

        while select count(RecId), Description
            from validatorLog
            group by Description
            where validatorLog.BatchJobId == lastCompletedBatchJobId
        join ResultStatusType, RuleId from validatorRules
            group by ResultStatusType
            order by ResultStatusType desc
            where validatorRules.RuleId == validatorLog.RuleId && validatorRules.EntityTypeId == entityTypeId
        {
            RetailMerchandisingConfigurationRiskContract riskContract = new RetailMerchandisingConfigurationRiskContract();
            riskContract.parmRiskDescription(validatorLog.Description);
            riskContract.parmNumAffectedEntities(validatorLog.RecId);
            riskContract.parmRiskSeverity(enum2Str(validatorRules.ResultStatusType));

            riskCount += 1;

            if (riskCount <= MaxRisksSentToCapi)
            {
                riskLists.addEnd(riskContract);
            }
        }

        return [riskCount, FormJsonSerializer::serializeClass(riskLists)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityTypeId</Name>
				<Source><![CDATA[
    private str getEntityTypeId(RetailCommerceValidatorTestStage _entityType)
    {
        switch (_entityType)
        {
            case RetailCommerceValidatorTestStage::Products:
                return "@Retail:RetailCommerceValidatorProductEntityId";
            case RetailCommerceValidatorTestStage::CommerceCategories:
                return "@Retail:RetailCommerceValidatorCategoryEntityTypeId";
            case RetailCommerceValidatorTestStage::CommerceCatalogs:
                return "@Retail:RetailCommerceValidatorCatalogValidationEntityTypeIdLabel";
            default:
                return '';
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>