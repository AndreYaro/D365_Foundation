<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjProposalTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PSAProjProposalTotals extends ProjProposalTotals
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        SalesCalcTax                salesCalcTax;

        ProjProposalItem            projProposalItem_SalesOrder;
        ProjProposalItem            projProposalItem_Item;
        ProjProposalEmpl            projProposalEmpl;
        ProjProposalCost            projProposalCost;
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalOnAcc           projProposalOnAcc;
        inventTable                 inventTable;

        CustTable                   custTable;
        ProjTrans                   projTrans;
        projGroup                   projGroup;
        SalesLine                   salesLine;

        ProjItemTrans               projItemTrans;
        ProjEmplTrans               projEmplTrans;
        ProjCostTrans               projCostTrans;
        ProjRevenueTrans            projRevenueTrans;
        ProjOnAccTrans              projOnAccTrans;

        select firstonly projProposalItem_SalesOrder
            join RecId from salesLine
            where salesLine.ProjTransId == projProposalItem_SalesOrder.ProjTransId
                && ProjProposalItem_SalesOrder.ProposalId == projProposalJour.ProposalId
                && projProposalItem_SalesOrder.ItemType   == ProjItemType::SalesOrder
                && projProposalItem_SalesOrder.PSAContractLineNum == this.parmContractLineNum()
                && salesLine.ProjId == this.parmProjId();

        salesTotals = new SalesTotals_Proj(projProposalJour);

        if (projProposalItem_SalesOrder)
        {
            salesTotals.calc();
            recordListProjProposalItem_SalesLine  = salesTotals.recordSortedListLine();

            balance     += salesTotals.totalBalance();
            costValue   += salesTotals.totalCostValue();
        }

        while select projProposalCost
            join RecId from projCostTrans
            where projCostTrans.TransId == projProposalCost.TransId
               && projProposalCost.ProposalId == projProposalJour.ProposalId
               && projProposalCost.PSAContractLineNum == this.parmContractLineNum()
               && projCostTrans.ProjId == this.parmProjId()
        {
            recordListProjProposalCost.ins(projProposalCost);

            projTrans    = ProjTrans::newProjProposalCost(projProposalCost);
            balance      += projTrans.transTurnover();
            costValue    += projTrans.transCostMST();
        }

        while select projProposalRevenue
            join RecId from projRevenueTrans
            where projRevenueTrans.TransId == projProposalRevenue.TransId
               && projProposalRevenue.ProposalId == projProposalJour.ProposalId
               && projProposalRevenue.PSAContractLineNum == this.parmContractLineNum()
               && projRevenueTrans.ProjId == this.parmProjId()
               && projRevenueTrans.IsRetained == NoYes::No
        {
            recordListProjProposalRevenue.ins(projProposalRevenue);
            projTrans   = ProjTrans::newProjProposalRevenue(projProposalRevenue);

            balance     += projTrans.transTurnover();
            costValue   += projTrans.transCostMST();
        }

        while select projProposalEmpl
            join RecId from projEmplTrans
            where projEmplTrans.TransId == projProposalEmpl.TransId
               && projProposalEmpl.ProposalId == projProposalJour.ProposalId
               && projProposalEmpl.PSAContractLineNum == this.parmContractLineNum()
               && projEmplTrans.ProjId == this.parmProjId()
        {
            recordListProjProposalEmpl.ins(projProposalEmpl);

            projTrans   = ProjTrans::newProjProposalEmpl(projProposalEmpl);
            balance     += projTrans.transTurnover();
            costValue   += projTrans.transCostMST();

            projQtyEmpl += projTrans.qty();
        }

        while select projProposalItem_Item
            join RecId from projItemTrans
            where projItemTrans.ProjTransId == projProposalItem_Item.ProjTransId
               && projProposalItem_Item.ProposalId == projProposalJour.ProposalId
               && (projProposalItem_Item.ItemType   == ProjItemType::Project
               || projProposalItem_Item.ItemType   == ProjItemType::PurchOrder
               || projProposalItem_Item.ItemType   == ProjItemType::InventJournal
               || projProposalItem_Item.ItemType   == ProjItemType::Production
               || projProposalItem_Item.ItemType   == ProjItemType::ProdLine)
               && projProposalItem_Item.PSAContractLineNum == this.parmContractLineNum()
               && projItemTrans.ProjId == this.parmProjId()
        {
            recordListProjProposalItem_Item.ins(projProposalItem_Item);

            projTrans           = ProjTrans::newProjProposalItem(projProposalItem_Item);
            inventTable         = inventTable::find(projTrans.itemId());
            balance             += projTrans.transTurnover();
            costValue           += projTrans.transCostMST();
            weightNotSalesOrder += projTrans.qty() * inventTable.NetWeight;
            volumeNotSalesOrder += projTrans.qty() * inventTable.UnitVolume;

            projProposalItemQty += projProposalItem_Item.qty();
        }

        ProjTable projTableLocal = ProjTable::find(this.parmProjId());
        boolean enableMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        while select projProposalOnAcc
            join projOnAccTrans
            where projOnAccTrans.TransId == projProposalOnAcc.TransId
               && projProposalOnAcc.ProposalId == projProposalJour.ProposalId
               && projProposalOnAcc.PSAContractLineNum == this.parmContractLineNum()
               && projOnAccTrans.ProjID == this.parmProjId()
        {
            recordListProjProposalOnAcc.ins(projProposalOnAcc);

            projTrans           = ProjTrans::newProjProposalOnAcc(projProposalOnAcc);
            balance             += projTrans.transTurnover();
            onAccountAmount     += projTrans.transTurnover();
            onAccountAmountMST  += projTrans.transTurnoverMST();

            ProjLedgerStatusOnAcc onAccLedgerStatus;

            if (enableMultipleContractLinesForProjectFeature)
            {
                ProjContractBillingMethod billingMethod = projProposalOnAcc.PSAContractLineNum ?
                    ProjMultipleContractLinesForProjectFeatureHelper::getBillingMethodForProjContractLine(projProposalOnAcc.PSAContractLineNum) :
                    (projOnAccTrans.TransactionOrigin == ProjOrigin::Milestone ? ProjContractBillingMethod::FixedPrice : ProjContractBillingMethod::TimeMaterial);

                onAccLedgerStatus = ProjRevRecHelper::getRevProfile(projTableLocal, billingMethod).OnAccLedgerStatus;
            }
            else
            {
                projGroup = projTableLocal.projGroup();
                onAccLedgerStatus = projGroup.InvoicePosting;
            }
            
            if (onAccLedgerStatus == ProjLedgerStatusOnAcc::BalanceSheet)
            {
                WIPInvoicedOnAccMST += projTrans.transTurnoverMST();
            }
        }

        // Calculate the balance in company currency for use in the margin and ratio calculations
        balanceMST  = CurrencyExchangeHelper::mstAmount(balance, this.projInvoiceCurrency(), this.projInvoiceDate(), Currency::noYes2UnknownNoYes(salesTotals.triangulation()), this.projInvoiceExchangeRate(), salesTotals.exchRateSecondary());

        endDisc    = salesTotals.totalEndDisc();

        // Calculate the total discount in company currency for use in the margin and ratio calculations
        endDiscMST = CurrencyExchangeHelper::mstAmount(endDisc, this.projInvoiceCurrency(), this.projInvoiceDate(), Currency::noYes2UnknownNoYes(salesTotals.triangulation()), this.projInvoiceExchangeRate(), salesTotals.exchRateSecondary());

        salesCalcTax  = SalesCalcTax::construct(projProposalJour);
        taxTotal = salesCalcTax.calcTax(this);
        this.tax(salesCalcTax.tax());

        totalAmount = balance + taxTotal - endDisc + salesTotals.totalMarkup();

        totalAmountCashDiscOnInvoice = totalAmount;

        /* Round Off */
        if (totalAmount != 0)
        {
            roundOff        = this.roundOffTotalAmount() - totalAmount;
            totalAmount     = this.roundOffTotalAmount();
        }

        invoiceAccount  = projProposalJour.InvoiceAccount;

        custTable       = CustTable::find(invoiceAccount);

        if (custTable.CreditMax)
        {
            freeValue   = custTable.CreditMax-
                          custTable.balanceMST() -
                          CurrencyExchangeHelper::mstAmount(totalAmount, projProposalJour.CurrencyId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        cashDisc        = this.projcashDiscAmount();

        totalAmountCashDiscOnInvoice = totalAmountCashDiscOnInvoice - cashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContractLineNum</Name>
				<Source><![CDATA[
    public PSAContractLineNum parmContractLineNum(PSAContractLineNum _contractLineNum = contractLineNum)
    {
        contractLineNum = _contractLineNum;

        return contractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceExchangeRate</Name>
				<Source><![CDATA[
    public ExchRate projInvoiceExchangeRate()
    {
        if (ProjInvoiceCurrency::exist(projProposalJour.ProjInvoiceProjId, projProposalJour.CurrencyId))
        {
            return ProjInvoiceCurrency::find(projProposalJour.ProjInvoiceProjId, projProposalJour.CurrencyId).ExchRate;
        }

        return ExchangeRateHelper::exchRate(projProposalJour.CurrencyId, projProposalJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffTotalAmount</Name>
				<Source><![CDATA[
    private AmountMST roundOffTotalAmount()
    {
        return CurrencyExchange::roundWithRuleType(
            this.projInvoiceTotalAmount(),
            projProposalJour.CurrencyId,
            CurrencyRoundingRuleType::SalesOrder);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>