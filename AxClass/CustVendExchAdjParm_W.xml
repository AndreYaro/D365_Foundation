<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExchAdjParm_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendExchAdjParm_W
{
    LedgerDimensionDefaultAccount realizedProfitLedgerDimension,      realizedLossledgerDimension,
                                  unrealizedProfitledgerDimension,    unrealizedLossLedgerDimension;

    LedgerDimensionDefaultAccount realizedProfitTaxledgerDimension,   realizedLossTaxLedgerDimension,
                                  unrealizedProfitTaxLedgerDimension, unrealizedLossTaxLedgerDimension;

    LedgerDimensionDefaultAccount profitVATAdjLedgerDimension,        lossVATAdjLedgerDimension;

    LedgerDimensionDefaultAccount profitAmountDiffLedgerDimension,    lossAmountDiffLedgerDimension,
                                  offsetAmountDiffLedgerDimension;

    Sign                    sign;

    ExchAdjTaxableType_W    taxableProfit, taxableLoss, taxableNonrealProfit, taxableNonrealLoss;

    NoYes                   vatAdjustment;

    RTax25ExchAdjDimension  exchAdjDimension;

    boolean                 inheritInvoicePosting, inheritInvoicePostingTax;

    boolean                 unrealized;
    boolean                 isAmountDiff;

    CustVendTrans           custVendTrans;
    EmplTrans_RU            emplTrans;

    LedgerTransType         ledgerTransType;

    boolean                 prepayment;
    boolean                 advHolder;
    boolean                 isCurrencyDeal;
    CurrencyCode            currencyCode;
    CustVendExchAdjParm_W   reportingCurrencyParm;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountDiffLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>LedgerDimensionDefaultAccount</c> for posting amount difference
    /// </summary>
    /// <param name="_offsetAccount">
    /// If true, <c>LedgerDimensionDefaultAccount</c> for offset account must be returned
    /// </param>
    /// <param name="_exchRateDiff">
    /// Amount of exchage rate difference
    /// </param>
    /// <returns>
    /// <c>LedgerDimensionDefaultAccount</c> for posting amount difference
    /// </returns>
    public LedgerDimensionDefaultAccount amountDiffLedgerDimension(boolean _offsetAccount, AmountMST  _exchRateDiff = 0)
    {
        if (_offsetAccount)
        {
            return offsetAmountDiffLedgerDimension;
        }
        else
        {
            return (_exchRateDiff * sign > 0 ? profitAmountDiffLedgerDimension : lossAmountDiffLedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inheritInvoicePosting</Name>
				<Source><![CDATA[
    public boolean inheritInvoicePosting()
    {
        return inheritInvoicePosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inheritInvoicePostingTax</Name>
				<Source><![CDATA[
    public boolean inheritInvoicePostingTax()
    {
        return inheritInvoicePostingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGain</Name>
				<Source><![CDATA[
    private boolean isGain(LedgerPostingType _ledgerPostingType)
    {
        return _ledgerPostingType == LedgerPostingType::ExchRateGain ||
               _ledgerPostingType == LedgerPostingType::AdvanceAdjustmentGain_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns ledger dimension for posting
    /// </summary>
    /// <param name="_ledgerPostingType">
    /// Type of posting
    /// </param>
    /// <returns>
    /// Ledger dimension for posting
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If ledger dimension not specified for unrealized exch rate difference
    /// </exception>
    /// <exception cref="Exception::Error">
    /// if ledger dimension not specified and its not inherited from invoice posting for realized exch rate difference
    /// </exception>
    public LedgerDimensionDefaultAccount ledgerDimension(LedgerPostingType _ledgerPostingType)
    {
        LedgerDimensionDefaultAccount ledgerDimension;
        CustVendTransData             custVendTransData;
        NonRealRevenue_RU             nonRealRevenue;

        if (! advHolder)
        {
            custVendTransData = CustVendTransData::construct(custVendTrans);
            nonRealRevenue    = custVendTransData.custVendInvoiceJour_RU().CustVendInvoiceJour::getNonRealRevenue_RU();
        }

        if (unrealized || (isAmountDiff && nonRealRevenue))
        {
            ledgerDimension = this.isGain(_ledgerPostingType) ? unrealizedProfitledgerDimension : unrealizedLossLedgerDimension;
            if (! ledgerDimension)
            {
                throw error(strFmt("@SYS24816", _ledgerPostingType));
            }
        }
        else
        {
            ledgerDimension = this.isGain(_ledgerPostingType) ? realizedProfitLedgerDimension : realizedLossledgerDimension;
            if (! ledgerDimension && ! this.inheritInvoicePosting())
            {
                throw error(strFmt("@SYS24816", _ledgerPostingType));
            }
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAmountDiff</Name>
				<Source><![CDATA[
    private void loadAmountDiff()
    {
        LedgerCurrencyParameters_RU ledgerCurrencyParameters = LedgerCurrencyParameters_RU::findLedger(Ledger::current());

        profitAmountDiffLedgerDimension = ledgerCurrencyParameters.TaxAmountDiffProfitLedgerDimension;
        lossAmountDiffLedgerDimension   = ledgerCurrencyParameters.TaxAmountDiffLossLedgerDimension;
        offsetAmountDiffLedgerDimension = ledgerCurrencyParameters.TaxAmountDiffLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCust</Name>
				<Source><![CDATA[
    private void loadCust()
    {
        LedgerCurrencyParameters_RU     ledgerCurrencyParameters;
        AdvanceAdjustmentParameters_W   advanceParameters;

        ledgerCurrencyParameters = LedgerCurrencyParameters_RU::findParameters(Ledger::current(), currencyCode);

        if (ledgerTransType == LedgerTransType::AdvanceAdjustment_RU)
        {
            advanceParameters             = AdvanceAdjustmentParameters_W::find();
            realizedProfitLedgerDimension = advanceParameters.ProfitCustLedgerDimension;
            realizedLossledgerDimension   = advanceParameters.LossCustLedgerDimension;

            if (LedgerParameters::find().ExchRateDiffCalcType_W != ExchRateDiffCalcType_W::Standard)
            {
                unrealizedProfitledgerDimension = ledgerCurrencyParameters.UnrealizedProfitCustLedgerDimension;
                unrealizedLossLedgerDimension   = ledgerCurrencyParameters.UnrealizedLossCustLedgerDimension;
            }
            else
            {
                unrealizedProfitledgerDimension = CurrencyLedgerGainLossAccount::ledgerDimension(
                    Ledger::current(), ledgerCurrencyParameters.CurrencyCode, CurrencyGainLossAccountType::UnrealizedGain);
                unrealizedLossLedgerDimension   = CurrencyLedgerGainLossAccount::ledgerDimension(
                    Ledger::current(), ledgerCurrencyParameters.CurrencyCode, CurrencyGainLossAccountType::UnrealizedLoss);
            }

            taxableProfit                 = ExchAdjTaxableType_W::Tax;
            taxableLoss                   = ExchAdjTaxableType_W::Tax;

            inheritInvoicePosting         = advanceParameters.CustPostingMode == CustVendAmountDiffPostingMode_RU::InvoicePosting;
            inheritInvoicePostingTax      = true;

            exchAdjDimension              = new RTax25ExchAdjDimension();
            exchAdjDimension.setProfitIds(advanceParameters.rTax25ProfitTableProfitCust, advanceParameters.rTax25ProfitTableLossCust);

            vatAdjustment                 = advanceParameters.vatAdjustmentCust;

            profitVATAdjLedgerDimension   = advanceParameters.vatAdjustmentProfitCustLedgerDimension;
            lossVATAdjLedgerDimension     = advanceParameters.vatAdjustmentLossCustLedgerDimension;
        }
        else
        {
            realizedProfitLedgerDimension      = ledgerCurrencyParameters.RealizedProfitCustLedgerDimension;
            realizedLossledgerDimension        = ledgerCurrencyParameters.RealizedLossCustLedgerDimension;

            unrealizedProfitledgerDimension    = ledgerCurrencyParameters.UnrealizedProfitCustLedgerDimension;
            unrealizedLossLedgerDimension      = ledgerCurrencyParameters.UnrealizedLossCustLedgerDimension;

            taxableProfit                      = ledgerCurrencyParameters.ExchRatePos;
            taxableLoss                        = ledgerCurrencyParameters.ExchRateNeg;

            taxableNonrealProfit               = ledgerCurrencyParameters.ExchRateNonrealProfitTaxCust;
            taxableNonrealLoss                 = ledgerCurrencyParameters.ExchRateNonrealLossTaxCust;

            realizedProfitTaxledgerDimension   = ledgerCurrencyParameters.RealizedProfitTaxCustLedgerDimension;
            realizedLossTaxLedgerDimension     = ledgerCurrencyParameters.RealizedLossTaxCustLedgerDimension;

            unrealizedProfitTaxLedgerDimension = ledgerCurrencyParameters.UnrealizedProfitTaxCustLedgerDimension;
            unrealizedLossTaxLedgerDimension   = ledgerCurrencyParameters.UnrealizedLossTaxCustLedgerDimension;

            inheritInvoicePosting              = ledgerCurrencyParameters.CustPostingMode    == CustVendAmountDiffPostingMode_RU::InvoicePosting && ! unrealized;
            inheritInvoicePostingTax           = ledgerCurrencyParameters.CustPostingModeTax == CustVendAmountDiffPostingMode_RU::InvoicePosting && ! unrealized;

            exchAdjDimension                   = new RTax25ExchAdjDimension();
            exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableProfitCust,  ledgerCurrencyParameters.rTax25ProfitTableLossCust);

            if (! prepayment)
            {
                exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableProfitCust, ledgerCurrencyParameters.rTax25ProfitTableLossCust);
            }
            else
            {
                exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableProfitCustPrepayment, ledgerCurrencyParameters.rTax25ProfitTableLossCustPrepayment);
            }
        }

        sign = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadEmpl</Name>
				<Source><![CDATA[
    private void loadEmpl()
    {
        LedgerCurrencyParameters_RU     ledgerCurrencyParameters;
        AdvanceAdjustmentParameters_W   advanceParameters = AdvanceAdjustmentParameters_W::find();

        taxableProfit = ExchAdjTaxableType_W::Tax;
        taxableLoss   = ExchAdjTaxableType_W::Tax;

        inheritInvoicePosting       = advanceParameters.EmplPostingMode == CustVendAmountDiffPostingMode_RU::InvoicePosting;
        inheritInvoicePostingTax    = true;
        exchAdjDimension            = new RTax25ExchAdjDimension();

        if (ledgerTransType == LedgerTransType::AdvanceAdjustment_RU)
        {
            realizedProfitLedgerDimension      = advanceParameters.ProfitEmplLedgerDimension;
            realizedLossledgerDimension        = advanceParameters.LossEmplLedgerDimension;

            exchAdjDimension.setProfitIds(advanceParameters.rTax25ProfitTableProfitEmpl, advanceParameters.rTax25ProfitTableLossEmpl);
        }
        else
        {
            ledgerCurrencyParameters = LedgerCurrencyParameters_RU::findParameters(Ledger::current(), currencyCode);

            realizedProfitLedgerDimension      = ledgerCurrencyParameters.RealizedProfitEmplLedgerDimension;
            realizedLossledgerDimension        = ledgerCurrencyParameters.RealizedLossEmplLedgerDimension;

            unrealizedProfitledgerDimension    = ledgerCurrencyParameters.UnrealizedProfitEmplLedgerDimension;
            unrealizedLossLedgerDimension      = ledgerCurrencyParameters.UnrealizedLossEmplLedgerDimension;

            exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableProfitEmpl,  ledgerCurrencyParameters.rTax25ProfitTableLossEmpl);
        }

        sign = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadOther</Name>
				<Source><![CDATA[
    private void loadOther()
    {
        LedgerCurrencyParameters_RU     ledgerCurrencyParameters;
        CurrencyCode                    gainLossCurrencyCode;
        #ISOCountryRegionCodes;

        ledgerCurrencyParameters = LedgerCurrencyParameters_RU::findParameters(Ledger::current(), currencyCode);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            // if in RU context, use RU specific currency code from RU currency parameters
            gainLossCurrencyCode = ledgerCurrencyParameters.CurrencyCode;
        }
        else
        {
            gainLossCurrencyCode = currencyCode;
        }

        exchAdjDimension = new RTax25ExchAdjDimension();

        if (isCurrencyDeal)
        {
            exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableConvertProfit, ledgerCurrencyParameters.rTax25ProfitTableConvertLoss);

            realizedProfitLedgerDimension = ledgerCurrencyParameters.CurConvertProfitLedgerDimension;
            realizedLossledgerDimension   = ledgerCurrencyParameters.CurConvertLossLedgerDimension;
        }
        else
        {
            exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableProfit, ledgerCurrencyParameters.rTax25ProfitTableLoss);

            realizedProfitLedgerDimension = CurrencyLedgerGainLossAccount::ledgerDimension(
                Ledger::current(), gainLossCurrencyCode, CurrencyGainLossAccountType::RealizedGain);
            realizedLossledgerDimension   = CurrencyLedgerGainLossAccount::ledgerDimension(
                Ledger::current(), gainLossCurrencyCode, CurrencyGainLossAccountType::RealizedLoss);
        }

        unrealizedProfitledgerDimension = CurrencyLedgerGainLossAccount::ledgerDimension(
            Ledger::current(), gainLossCurrencyCode, CurrencyGainLossAccountType::UnrealizedGain);
        unrealizedLossLedgerDimension   = CurrencyLedgerGainLossAccount::ledgerDimension(
            Ledger::current(), gainLossCurrencyCode, CurrencyGainLossAccountType::UnrealizedLoss);

        if (CurrencyLedgerGainLossFromNetValueFeature_PL::isEnabled())
        {
            taxableProfit = CurrencyLedgerGainLossAccount::findByCurrencyLedgerAccountType(
                Ledger::current(), gainLossCurrencyCode, CurrencyGainLossAccountType::RealizedGain).currencyLedgerGainLossAccount_PL().ExchAdjTaxableType;
            taxableLoss   = CurrencyLedgerGainLossAccount::findByCurrencyLedgerAccountType(
                Ledger::current(), gainLossCurrencyCode, CurrencyGainLossAccountType::RealizedLoss).currencyLedgerGainLossAccount_PL().ExchAdjTaxableType;
            realizedProfitTaxledgerDimension = CurrencyLedgerGainLossAccount::findByCurrencyLedgerAccountType(
                Ledger::current(), gainLossCurrencyCode, CurrencyGainLossAccountType::RealizedGain).currencyLedgerGainLossAccount_PL().RealizedTaxLedgerDimension;
            realizedLossTaxLedgerDimension   = CurrencyLedgerGainLossAccount::findByCurrencyLedgerAccountType(
                Ledger::current(), gainLossCurrencyCode, CurrencyGainLossAccountType::RealizedLoss).currencyLedgerGainLossAccount_PL().RealizedTaxLedgerDimension;
        }
        else
        {
            taxableProfit                   = ledgerCurrencyParameters.ExchRatePos;
            taxableLoss                     = ledgerCurrencyParameters.ExchRateNeg;
        }

        inheritInvoicePosting           = false;
        inheritInvoicePostingTax        = true;

        sign                            = custVendTrans.TableId == tableNum(CustTrans) ? 1 : -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadReportingCurrency</Name>
				<Source><![CDATA[
    private void loadReportingCurrency(CustVendExchAdjParm_W _parm)
    {
        LedgerParameters ledgerParameters = LedgerParameters::find();

        if (!_parm)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.parmUnrealized(_parm.parmUnrealized());
        this.parmIsAmountDiff(_parm.parmIsAmountDiff());
        this.parmCustVendTrans(_parm.parmCustVendTrans());
        this.parmLedgerTransType(_parm.parmLedgerTransType());
        this.parmPrepayment(_parm.parmPrepayment());
        this.parmIsCurrencyDeal(_parm.parmIsCurrencyDeal());
        this.parmEmplTrans(_parm.parmEmplTrans());
        this.parmAdvHolder(_parm.parmAdvHolder());
        this.parmCurrencyCode(Ledger::reportingCurrency());

        if (ledgerParameters.ExchRateDiffCalcType_W != ExchRateDiffCalcType_W::Standard ||
            ledgerTransType                         == LedgerTransType::AdvanceAdjustment_RU)
        {
            switch (true)
            {
                case advHolder:
                    this.loadEmpl();
                    break;

                case custVendTrans.TableId == tableNum(CustTrans):
                    this.loadCust();
                    break;

                case custVendTrans.TableId == tableNum(VendTrans):
                    this.loadVend();
                    break;

                default :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            this.loadOther();
        }

        this.loadAmountDiff();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadVend</Name>
				<Source><![CDATA[
    private void loadVend()
    {
        LedgerCurrencyParameters_RU     ledgerCurrencyParameters;
        AdvanceAdjustmentParameters_W   advanceParameters;

        ledgerCurrencyParameters = LedgerCurrencyParameters_RU::findParameters(Ledger::current(), currencyCode);

        exchAdjDimension = new RTax25ExchAdjDimension();

        if (ledgerTransType == LedgerTransType::AdvanceAdjustment_RU)
        {
            advanceParameters = AdvanceAdjustmentParameters_W::find();
            if (isCurrencyDeal)
            {
                exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableConvertProfit, ledgerCurrencyParameters.rTax25ProfitTableConvertLoss);
                realizedProfitLedgerDimension = ledgerCurrencyParameters.CurConvertProfitLedgerDimension;
                realizedLossledgerDimension   = ledgerCurrencyParameters.CurConvertLossLedgerDimension;
            }
            else
            {
                exchAdjDimension.setProfitIds(advanceParameters.rTax25ProfitTableProfitVend, advanceParameters.rTax25ProfitTableLossVend);
                realizedProfitLedgerDimension   = advanceParameters.ProfitVendLedgerDimension;
                realizedLossledgerDimension     = advanceParameters.LossVendLedgerDimension;
            }

            if (LedgerParameters::find().ExchRateDiffCalcType_W != ExchRateDiffCalcType_W::Standard)
            {
                unrealizedProfitledgerDimension = ledgerCurrencyParameters.UnrealizedProfitVendLedgerDimension;
                unrealizedLossLedgerDimension   = ledgerCurrencyParameters.UnrealizedLossVendLedgerDimension;
            }
            else
            {
                unrealizedProfitledgerDimension = CurrencyLedgerGainLossAccount::ledgerDimension(
                    Ledger::current(), ledgerCurrencyParameters.CurrencyCode, CurrencyGainLossAccountType::UnrealizedGain);
                unrealizedLossLedgerDimension   = CurrencyLedgerGainLossAccount::ledgerDimension(
                    Ledger::current(), ledgerCurrencyParameters.CurrencyCode, CurrencyGainLossAccountType::UnrealizedLoss);
            }

            taxableProfit                   = ExchAdjTaxableType_W::Tax;
            taxableLoss                     = ExchAdjTaxableType_W::Tax;

            inheritInvoicePosting           = advanceParameters.VendPostingMode == CustVendAmountDiffPostingMode_RU::InvoicePosting;
            inheritInvoicePostingTax        = true;
        }
        else
        {
            if (isCurrencyDeal)
            {
                exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableConvertProfit, ledgerCurrencyParameters.rTax25ProfitTableConvertLoss);
                realizedProfitLedgerDimension = ledgerCurrencyParameters.CurConvertProfitLedgerDimension;
                realizedLossledgerDimension   = ledgerCurrencyParameters.CurConvertLossLedgerDimension;
            }
            else
            {
                if (prepayment)
                {
                    exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableProfitVendPrepayment, ledgerCurrencyParameters.rTax25ProfitTableLossVendPrepayment);
                }
                else
                {
                    exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableProfitVend, ledgerCurrencyParameters.rTax25ProfitTableLossVend);
                }

                realizedProfitLedgerDimension    = ledgerCurrencyParameters.RealizedProfitVendLedgerDimension;
                realizedLossledgerDimension      = ledgerCurrencyParameters.RealizedLossVendLedgerDimension;
            }

            unrealizedProfitledgerDimension  = ledgerCurrencyParameters.UnrealizedProfitVendLedgerDimension;
            unrealizedLossLedgerDimension    = ledgerCurrencyParameters.UnrealizedLossVendLedgerDimension;

            taxableProfit                    = ledgerCurrencyParameters.ExchRateProfitTaxVend;
            taxableLoss                      = ledgerCurrencyParameters.ExchRateLossTaxVend;

            realizedProfitTaxledgerDimension = ledgerCurrencyParameters.RealizedProfitTaxVendLedgerDimension;
            realizedLossTaxLedgerDimension   = ledgerCurrencyParameters.RealizedLossTaxVendLedgerDimension;

            inheritInvoicePosting            = ledgerCurrencyParameters.VendPostingMode == CustVendAmountDiffPostingMode_RU::InvoicePosting && ! unrealized;
            inheritInvoicePostingTax         = ledgerCurrencyParameters.VendPostingModeTax == CustVendAmountDiffPostingMode_RU::InvoicePosting && ! unrealized;
        }

        sign = -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvHolder</Name>
				<Source><![CDATA[
    private boolean parmAdvHolder(boolean _advHolder = advHolder)
    {
        advHolder = _advHolder;

        return advHolder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    private CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTrans</Name>
				<Source><![CDATA[
    private CustVendTrans parmCustVendTrans(CustVendTrans _custVendTrans = custVendTrans)
    {
        if (!prmisDefault(_custVendTrans))
        {
            custVendTrans   = _custVendTrans;
            currencyCode    = custVendTrans.CurrencyCode;
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplTrans</Name>
				<Source><![CDATA[
    private EmplTrans_RU parmEmplTrans(EmplTrans_RU _emplTrans = emplTrans)
    {
        if (!prmisDefault(_emplTrans))
        {
            emplTrans       = _emplTrans;
            currencyCode    = _emplTrans.CurrencyCode;
        }

        return emplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAmountDiff</Name>
				<Source><![CDATA[
    private boolean parmIsAmountDiff(boolean _isAmountDiff = isAmountDiff)
    {
        isAmountDiff = _isAmountDiff;
        return isAmountDiff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCurrencyDeal</Name>
				<Source><![CDATA[
    private boolean parmIsCurrencyDeal(boolean _isCurrencyDeal = isCurrencyDeal)
    {
        isCurrencyDeal = _isCurrencyDeal;
        return isCurrencyDeal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerTransType</Name>
				<Source><![CDATA[
    public LedgerTransType parmLedgerTransType(LedgerTransType _ledgerTransType = ledgerTransType)
    {
        ledgerTransType = _ledgerTransType;
        return ledgerTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrepayment</Name>
				<Source><![CDATA[
    private boolean parmPrepayment(boolean _prepayment = prepayment)
    {
        ;
        prepayment = _prepayment;

        return prepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnrealized</Name>
				<Source><![CDATA[
    private boolean parmUnrealized(boolean _unrealized = unrealized)
    {
        unrealized = _unrealized;
        return unrealized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingType</Name>
				<Source><![CDATA[
    public LedgerPostingType postingType(Amount _exchRateDiff)
    {
        return _exchRateDiff * sign > 0 ? LedgerPostingType::ExchRateGain : LedgerPostingType::ExchRateLoss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets or gets reporting currency.
    /// </summary>
    /// <returns>
    ///     Current reporting currency.
    /// </returns>
    public CustVendExchAdjParm_W reportingCurrencyParm()
    {
        if (!reportingCurrencyParm)
        {
            reportingCurrencyParm = CustVendExchAdjParm_W::construct();
            reportingCurrencyParm.loadReportingCurrency(this);
        }

        return reportingCurrencyParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rTax25ExchAdjDimension</Name>
				<Source><![CDATA[
    public RTax25ExchAdjDimension rTax25ExchAdjDimension()
    {
        return exchAdjDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxable</Name>
				<Source><![CDATA[
    public ExchAdjTaxableType_W taxable(LedgerPostingType _ledgerPostingType)
    {
        ExchAdjTaxableType_W taxable;
        CustVendTransData    custVendTransData;
        NonRealRevenue_RU    nonRealRevenue;
        ;

        if (! advHolder)
        {
            custVendTransData = CustVendTransData::construct(custVendTrans);
            nonRealRevenue    = custVendTransData.custVendInvoiceJour_RU().CustVendInvoiceJour::getNonRealRevenue_RU();
        }

        if (unrealized)
        {
            taxable = ExchAdjTaxableType_W::No;
        }
        else if (isAmountDiff && nonRealRevenue)
        {
            taxable = this.isGain(_ledgerPostingType) ? taxableNonrealProfit : taxableNonrealLoss;
        }
        else
        {
            taxable = this.isGain(_ledgerPostingType) ? taxableProfit : taxableLoss;
        }

        return taxable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns ledger dimension for tax posting
    /// </summary>
    /// <param name="_ledgerPostingType">
    /// Type of posting
    /// </param>
    /// <param name="_ledgerDimension">
    /// Ledger dimension for posting of invoices or advance holder
    /// </param>
    /// <returns>
    /// Ledger dimension for tax posting
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If ledger dimension not found
    /// </exception>
    public LedgerDimensionDefaultAccount taxLedgerDimension(LedgerPostingType _ledgerPostingType, LedgerDimensionDefaultAccount _ledgerDimension)
    {
        LedgerDimensionDefaultAccount ledgerDimension;
        CustVendTransData             custVendTransData;
        NonRealRevenue_RU             nonRealRevenue;

        if (! advHolder)
        {
            custVendTransData   = CustVendTransData::construct(custVendTrans);
            nonRealRevenue      = custVendTransData.custVendInvoiceJour_RU().CustVendInvoiceJour::getNonRealRevenue_RU();
        }

        if (isAmountDiff && nonRealRevenue)
        {
            ledgerDimension = this.isGain(_ledgerPostingType) ? unrealizedProfitTaxLedgerDimension : unrealizedLossTaxLedgerDimension;
        }
        else
        {
            if ((advHolder || custVendTrans.Invoice) &&
                this.inheritInvoicePostingTax()      &&
                this.taxable(_ledgerPostingType) == ExchAdjTaxableType_W::Tax)
            {
                ledgerDimension = _ledgerDimension;
            }
            else
            {
                ledgerDimension = this.isGain(_ledgerPostingType) ? realizedProfitTaxledgerDimension : realizedLossTaxLedgerDimension;
            }
        }

        if (! ledgerDimension)
        {
            throw error(strFmt("@SYS24816", _ledgerPostingType));
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatAdjLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns ledger dimension for posting VAT Adjustment
    /// </summary>
    /// <param name="_ledgerPostingType">
    /// Type of posting
    /// </param>
    /// <returns>
    /// Ledger dimension for posting VAT Adjustment
    /// </returns>
    public LedgerDimensionDefaultAccount vatAdjLedgerDimension(LedgerPostingType _ledgerPostingType)
    {
        return this.isGain(_ledgerPostingType) ? profitVATAdjLedgerDimension : lossVATAdjLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatAdjustment</Name>
				<Source><![CDATA[
    public NoYes vatAdjustment()
    {
        return vatAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendExchAdjParm_W construct()
    {
        return new CustVendExchAdjParm_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParm</Name>
				<Source><![CDATA[
    public static CustVendExchAdjParm_W newFromParm(CustVendTrans   _custVendTrans,
                                                    boolean         _isAmountDiff,
                                                    boolean         _unrealized,
                                                    LedgerTransType _ledgerTransType = LedgerTransType::ExchAdjustment,
                                                    boolean         _prepayment      = false,
                                                    boolean         _isCurrencyDeal  = false)
    {
        CustVendExchAdjParm_W   custVendExchAdjParm;
        LedgerParameters        ledgerParameters = LedgerParameters::find();
        #ISOCountryRegionCodes

        custVendExchAdjParm = CustVendExchAdjParm_W::construct();
        custVendExchAdjParm.parmUnrealized(_unrealized);
        custVendExchAdjParm.parmIsAmountDiff(_isAmountDiff && ! _unrealized);
        custVendExchAdjParm.parmCustVendTrans(_custVendTrans);
        custVendExchAdjParm.parmLedgerTransType(_ledgerTransType);
        custVendExchAdjParm.parmPrepayment(_prepayment);
        custVendExchAdjParm.parmIsCurrencyDeal(_isCurrencyDeal);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            custVendExchAdjParm.loadOther();
        }
        else if (ledgerParameters.ExchRateDiffCalcType_W != ExchRateDiffCalcType_W::Standard ||
            _ledgerTransType                        == LedgerTransType::AdvanceAdjustment_RU)
        {
            switch (_custVendTrans.TableId)
            {
                case tableNum(CustTrans) :
                    custVendExchAdjParm.loadCust();
                    break;

                case tableNum(VendTrans) :
                    custVendExchAdjParm.loadVend();
                    break;

                default :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            custVendExchAdjParm.loadOther();
        }

        custVendExchAdjParm.loadAmountDiff();

        return custVendExchAdjParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParmEmpl</Name>
				<Source><![CDATA[
    public static CustVendExchAdjParm_W newFromParmEmpl(EmplTrans_RU     _emplTrans,
                                                        boolean          _isAmountDiff    = false,
                                                        boolean          _unrealized      = false,
                                                        LedgerTransType  _ledgerTransType = LedgerTransType::AdvanceAdjustment_RU)
    {
        CustVendExchAdjParm_W   custVendExchAdjParm;
        LedgerParameters        ledgerParameters = LedgerParameters::find();

        custVendExchAdjParm = CustVendExchAdjParm_W::construct();

        custVendExchAdjParm.parmUnrealized(_unrealized);
        custVendExchAdjParm.parmIsAmountDiff(_isAmountDiff && ! _unrealized);
        custVendExchAdjParm.parmEmplTrans(_emplTrans);
        custVendExchAdjParm.parmLedgerTransType(_ledgerTransType);
        custVendExchAdjParm.parmAdvHolder(true);

        if (ledgerParameters.ExchRateDiffCalcType_W != ExchRateDiffCalcType_W::Standard ||
           _ledgerTransType                         == LedgerTransType::AdvanceAdjustment_RU)
        {
            custVendExchAdjParm.loadEmpl();
        }
        else
        {
            custVendExchAdjParm.loadOther();
        }

        custVendExchAdjParm.loadAmountDiff();

        return custVendExchAdjParm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>