<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Updates time sheet
/// </summary>
class RPayTblUpdater
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocPeriodsComparer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets time comparer by documents.
    /// </summary>
    /// <returns>
    /// <c>RPayTblTimeComparer</c> instance.
    /// </returns>
    protected RPayTblTimeComparer getDocPeriodsComparer()
    {
        return new RPayTblTimeComparerDocPeriods();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocTimeCodeComparer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets time comparer for time codes
    /// </summary>
    /// <returns>
    /// <c>RPayTblTimeComparer</c> instance
    /// </returns>
    protected RPayTblTimeComparer getDocTimeCodeComparer()
    {
        return new RPayTblTimeComparerDocTimeCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstNotIncludedDocument</Name>
				<Source><![CDATA[
        private TransDate getFirstNotIncludedDocument(TransDate _maxDate, RHRMEmplId _emplId)
    {
        RPayAverageEarnEmplPeriodTable  avgEarnTable;
        RPayTblTransDocRelation         transDocRelation;
        RPayTblTrans                    tblTrans;

        select minof(StartDate) from avgEarnTable
            where avgEarnTable.StartDate < _maxDate
               && avgEarnTable.EmplId == _emplId
               &&  (avgEarnTable.averageEarnCodeType == RPayAverageEarnCodeType::SickList
                 || avgEarnTable.averageEarnCodeType == RPayAverageEarnCodeType::BusinessTrip
                 || avgEarnTable.averageEarnCodeType == RPayAverageEarnCodeType::Vacation)
        notExists join transDocRelation
            where transDocRelation.RefTableId == avgEarnTable.tableId
               && transDocRelation.RecId == avgEarnTable.RecId
            exists join tblTrans
                where transDocRelation.TblTransRecId == tblTrans.RecId
                  && tblTrans.SourceDate < _maxDate
                  && tblTrans.SourceDate < avgEarnTable.EndDate;

        return avgEarnTable.StartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReducedList</Name>
				<Source><![CDATA[
        private RPayTblTimeList getReducedList(RPayTblContext _context)
    {
        RPayTblTimeList timeList;

        timeList = RPayTimeListSourceByDocument::getDocumentsTimeList(_context);
        timeList = timeList.sortWith(this.getDocTimeCodeComparer());
        timeList = this.getTimeListReducer().reduce(timeList, _context);

        return timeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTblContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct <c>RPayTblContext</c>
    /// </summary>
    /// <param name="_startDate">
    /// Start date for updated period.
    /// </param>
    /// <param name="_endDate">
    /// End date for updated period.
    /// </param>
    /// <param name="_tblDimension">
    /// Default <c>RPayTblDimension</c> instance.
    /// </param>
    /// <param name="_emplId">
    /// Employee number
    /// </param>
    /// <returns>
    /// <c>RPayTblContext</c> instance
    /// </returns>
    protected RPayTblContext getTblContext(StartDate _startDate, EndDate _endDate, RPayTblDimension _tblDimension, RHRMEmplId _emplId)
    {
        RPayTblContext tblContext = new RPayTblContext(_emplId, _startDate, _endDate);

        if (_tblDimension)
        {
            _tblDimension.clone(tblContext.initialDimension());
        }

        return tblContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTblDimensionFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets filter for excluded some time transactions.
    /// </summary>
    /// <returns>
    /// class, implements <c>RPayTblIFilter</c>
    /// </returns>
    protected RPayTblIFilter getTblDimensionFilter()
    {
        return new RPayTblExistingsJournalFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTblEmplQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct Query for <c>RHRMEmplTable</c> which employees should be updated.
    /// </summary>
    /// <param name="_tblContext">
    /// <c>RPayTblContext</c> context
    /// </param>
    /// <returns>
    /// <c>RPayTblEmplQuery</c> instance
    /// </returns>
    protected RPayTblEmplQuery getTblEmplQuery(RPayTblContext _tblContext)
    {
        return RPayTblEmplQuery::construct(_tblContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTblStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns class for DB operations.
    /// </summary>
    /// <returns>
    /// <c>RPayTblStream</c> instance
    /// </returns>
    protected RPayTblStream getTblStream()
    {
        return new RPayTblStream();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimeListReducer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets class with remove duplicates and overlaping times.
    /// </summary>
    /// <returns>
    /// <c>RPayTblReducer</c> instance.
    /// </returns>
    protected RPayTblReducer getTimeListReducer()
    {
        return new RPayTblReducer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateListFormDocument</Name>
				<Source><![CDATA[
        private void updateListFormDocument(RPayTblTimeList _list, container _refDoc)
    {
        #define.TableIdPos(1)
        #define.RecIdPos(2)
        ListEnumerator          le;

        if ( _refDoc == conNull())
        {
            return;
        }

        le = _list.periods().getEnumerator();
        while (le.moveNext())
        {
            le.current().parmSrcDocumentAttr(conPeek(_refDoc, #TableIdPos), conPeek(_refDoc, #RecIdPos));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetDocsPreviousPeriods</Name>
				<Source><![CDATA[
        private void updateTimesheetDocsPreviousPeriods(RPayTblContext _tblContext)
    {
        RPayTblContext      tblContextPeriods;
        RPayTblTimeList     tblTimeListPeriods;
        RPayTblTime         tblTime;
        ListEnumerator      le;

        tblTimeListPeriods  = RPayTimeListSourceByDocumentAE::getUnIncludedPeriods(_tblContext.parmStartDate() - 1, _tblContext.parmEmpId());
        le = tblTimeListPeriods.periods().getEnumerator();
        while (le.moveNext())
        {
            tblTime = le.current();
            tblContextPeriods = this.getTblContext(tblTime.parmStartDate(), tblTime.parmEndDate(), _tblContext.initialDimension(), _tblContext.parmEmpId());
            this.updateTimesheetEmplPeriod(tblContextPeriods);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetEmplPeriod</Name>
				<Source><![CDATA[
private void updateTimesheetEmplPeriod(RPayTblContext _tblContext, container _refDoc = conNull())
    {
        RPayTblTimeList         timeList, timeListStored, timeListDelta;
        ListEnumerator          dimListEnumerator;
        RPayTblIDimensionFiller tblDimension;
        RPayTblStream           tblStream;
        RPayTblContext          context = _tblContext;
        RHRMEmplTable           emplTable;

        if ( !RPayController::canModuleChanged(false, context.parmEmpId()))
        {
            return;
        }

        emplTable = RHRMEmplTable::find(context.parmEmpId());
        if (emplTable.PayBlocked)
        {
            if (context.parmStartDate() >= emplTable.PayBlockedFrom)
            {
                return;
            }
            context.parmEndDate(min(context.parmEndDate(), emplTable.PayBlockedFrom - 1));
        }

        ttsBegin;

        timeList = this.getReducedList(context);

        //apply sequently dimension to each element in the list
        dimListEnumerator = RPayTblDimension::getDimensions().getEnumerator();
        while (dimListEnumerator.moveNext())
        {
            tblDimension = dimListEnumerator.current();
            timeList = timeList.fillDimension(tblDimension, context);
        }

        tblStream       = this.getTblStream();
        timeListStored  = tblStream.readTimeList(timeList, context);                        //get persisted Timesheet as time list
        timeListDelta   = timeList.substract(timeListStored);                               //get dT = Tnew-Tstored
        timeListDelta   = timeListDelta.filter(this.getTblDimensionFilter(), context);
        timeListDelta   = this.moveSourceAttrFromList(timeList, timeListDelta);
        this.updateListFormDocument(timeListDelta, _refDoc);

        tblStream.writeTimeList(timeListDelta, context);
        ttsCommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetFromDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates timesheets from period.
    /// </summary>
    /// <param name="_startDate">
    /// Start date.
    /// </param>
    /// <param name="_endDate">
    /// End Date.
    /// </param>
    /// <param name="_tblDimension">
    /// Default time dimensions.
    /// </param>
    /// <param name="_emplId">
    /// Employee Id, optional.
    /// </param>
    public static void updateTimesheetFromDimension(StartDate _startDate, EndDate _endDate, RPayTblDimension _tblDimension, RHRMEmplId _emplId = '')
    {
        RPayTblUpdater      updater;
        RPayTblContext      tblContext;
        QueryRun            qr;
        RHRMEmplTable       emplTable;

        updater  = new RPayTblUpdater();

        tblContext = updater.getTblContext(_startDate, _endDate, _tblDimension, _emplId);
        qr = new QueryRun(updater.getTblEmplQuery(tblContext).query());

        ttsBegin;
        while (qr.next())
        {
            emplTable = qr.get(tableNum(RHRMEmplTable));
            tblContext.parmEmpId(emplTable.EmployeeId);
            updater.updateTimesheetDocsPreviousPeriods(tblContext);
            updater.updateTimesheetEmplPeriod(tblContext);
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetFromDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates time sheet from ducument perspective. invoke this method after update time-related documents.
    /// </summary>
    /// <param name="_startDate">
    /// Start Date
    /// </param>
    /// <param name="_endDate">
    /// End Date
    /// </param>
    /// <param name="_emplId">
    /// EmployeeId
    /// </param>
    /// <param name="_refDoc">
    /// Reference to document. Container [tableId, RecId]
    /// </param>
    public static void updateTimesheetFromDocument(StartDate _startDate, EndDate _endDate, RHRMEmplId _emplId, container _refDoc = conNull())
    {
        RPayTblUpdater   updater;
        RPayTblContext  tblContext;

        updater   = new RPayTblUpdater();

        tblContext = updater.getTblContext(_startDate, _endDate, null, _emplId);

        updater.updateTimesheetEmplPeriod(tblContext, _refDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveSourceAttrFromList</Name>
				<Source><![CDATA[
    private RPayTblTimeList moveSourceAttrFromList(RPayTblTimeList _sourceTimeList, RPayTblTimeList _targetTimeList)
    {
        #define.TableIdPos(1)
        #define.RecIdPos(2)

        ListEnumerator leSource, leTarget;
        RPayTblTime sourceTime, targetTime;

        leSource = _sourceTimeList.periods().getEnumerator();
        while (leSource.moveNext())
        {
            sourceTime = leSource.current();

            leTarget = _targetTimeList.periods().getEnumerator();
            while (leTarget.moveNext())
            {
                targetTime = leTarget.current();
                if (conPeek(targetTime.parmSrcDocumentAttr(), #TableIdPos) == 0 &&
                    conPeek(targetTime.parmSrcDocumentAttr(), #RecIdPos) == 0 &&
                    conPeek(sourceTime.parmSrcDocumentAttr(), #TableIdPos) != 0 &&
                    conPeek(sourceTime.parmSrcDocumentAttr(), #RecIdPos) != 0 &&
                    sourceTime.parmStartDate() == targetTime.parmStartDate() &&
                    sourceTime.parmEndDate() == targetTime.parmEndDate())
                {
                    targetTime.parmSrcDocumentAttr(conPeek(sourceTime.parmSrcDocumentAttr(), #TableIdPos), conPeek(sourceTime.parmSrcDocumentAttr(), #RecIdPos));
                }
            }
        }

        return _targetTimeList;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>