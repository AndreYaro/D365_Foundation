<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpTransSplitHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for executing for split line scenarios.
/// </summary>
public class TrvExpTransSplitHelper
{
    private const Percent ZeroPercent = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdateSplitLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates expense split lines.
    /// </summary>
    /// <param name = "_splitHeaderRecId">
	/// Split header expense record id.
	/// </param>
    public static void createOrUpdateSplitLines(RefRecId _splitHeaderRecId)
    {
        TrvExpTransSplit        splitDetails;
        TrvExpTrans             splitLine;
        TrvExpTrans             splitHeader;
        
        ttsbegin;
        splitHeader = TrvExpTrans::find(_splitHeaderRecId);

        while select forupdate splitDetails
            where splitDetails.SplitHeaderRecId == _splitHeaderRecId
        {
            splitLine.clear();
            if (splitDetails.SplitLineRecId == 0)
            {
                splitLine.CostType = splitDetails.CostType;
                splitLine.InterCompanyLE = splitDetails.InterCompanyLE;
                splitLine.ProjId = splitDetails.ProjId;
                splitLine.ProjActivityNumber = splitDetails.ProjActivityNumber;
                splitLine.ProjStatusId = splitDetails.ProjStatusId;
                splitLine.CreditCardTransactionCurrencyAmount = splitDetails.SplitAmount;
                splitLine.AmountCurr = (splitDetails.SplitAllocationFactor * splitHeader.AmountCurr) / 100;

                splitLine.initFromSplitHeader(splitHeader);
                splitLine.initValue();
            
                if (splitLine.TaxGroup == '' || splitLine.TaxItemGroup == '')
                {
                    TrvExpTrans existingSplitLine = TrvExpTransSplitHelper::findExistingSplitLine(splitHeader);

                    //Defaulting from existing split line which would have inherited these fields from split line header.
                    if (existingSplitLine)
                    {
                        splitLine.TaxGroup = existingSplitLine.TaxGroup;
                        splitLine.TaxItemGroup = existingSplitLine.TaxItemGroup;
                    }
                }

                splitLine.insert();

                splitDetails.selectForUpdate(true);
                splitDetails.SplitLineRecId = splitLine.RecId;
                splitDetails.update();

                splitHeader = TrvExpTrans::find(_splitHeaderRecId, true);
                splitHeader.SplitLineType = TrvExpSplitLineType::SplitHeader;
                splitHeader.update();

                TrvReceiptsHelper::duplicateReceipts(splitLine, splitHeader);
            }
            else
            {
                splitLine = TrvExpTrans::find(splitDetails.SplitLineRecId, true);

                splitLine.CostType = splitDetails.CostType;
                splitLine.InterCompanyLE = splitDetails.InterCompanyLE;
                splitLine.ProjId = splitDetails.ProjId;
                splitLine.ProjActivityNumber = splitDetails.ProjActivityNumber;
                splitLine.ProjStatusId = splitDetails.ProjStatusId;
                splitLine.CreditCardTransactionCurrencyAmount = splitDetails.SplitAmount;
                splitLine.AmountCurr = (splitDetails.SplitAllocationFactor * splitHeader.AmountCurr) / 100;
                if (splitLine.ProjId == '')
                {
                    splitLine.ProjTransId = '';
                }
                else if (splitLine.ProjTransId == '')
                {
                    splitLine.ProjTransId = ProjParameters::newTransId();
                }
                splitLine.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExistingSplitLine</Name>
				<Source><![CDATA[
    private static TrvExpTrans findExistingSplitLine(TrvExpTrans _splitHeader)
    {
        TrvExpTrans existingSplitLine;

        select firstonly existingSplitLine
            where existingSplitLine.ParentRecId == _splitHeader.RecId;

        return existingSplitLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allSplitLineAllocated</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates if all the split lines have non-zero allocation factor.
    /// </summary>
    /// <param name = "_splitHeaderRefRecId">Identifier for the split header record.</param>
    /// <returns>true, if all split lines have a valid allocation factor; otherwise, false.</returns>
    public static boolean allSplitLineAllocated(RefRecId _splitHeaderRefRecId)
    {
        if (!_splitHeaderRefRecId)
        {
            return false;
        }

        TrvExpTransSplit splitDetails;

        select firstonly RecId from splitDetails
            where splitDetails.SplitHeaderRecId == _splitHeaderRefRecId
            && splitDetails.SplitAllocationFactor == ZeroPercent;
        
        return splitDetails.RecId? false : true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>