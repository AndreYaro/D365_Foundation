<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Forecast2Ledger</Name>
	<SourceCode>
		<Declaration><![CDATA[
class Forecast2Ledger extends RunBaseBatch implements BatchRetryable
{
    // Packed
    BudgetModelId       toModel;
    NoYes               deleteOld;
    QueryRun            qr;

    // Dialogfields
    DialogField         dialogModel;
    DialogField         dialogDeleteOld;

    // Budget transaction
    BudgetTransactionType   budgetTransactionType;
    BudgetTransactionCode   budgetTransactionCode;
    BudgetTransactionHeader budgetTransactionHeader;
    BudgetTransactionManager budgetTransactionManager;
    Query                   transactionReverseQuery;
    QueryBuildRange         transReverseTransactionStatusRange;
    int                     numOfBudgetTransactionLines;
    NoYes                   isBudgetTransStatusCompleted;
    boolean                 doConfirmDraftBudgetTransNoReverse;
    BudgetTransactionPost   budgetTransactionPost;

    #define.CurrentVersion(1)
    #localmacro.Currentlist
        ToModel,
        DeleteOld
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>confirmDraftBudgetTransNoReverse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Confirms that the previously transferred draft budget transactions will not be reversed.
    /// </summary>
    /// <returns>
    ///    true if the confirmation is made; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The prompt for confirmation is only made when the option to delete the previously transferred
    ///    budget has been selected.
    /// </remarks>
    protected boolean confirmDraftBudgetTransNoReverse()
    {
        boolean ok = true;
        QueryRun transactionReverseQueryRun;

        if (deleteOld == NoYes::Yes)
        {
            if (transactionReverseQuery == null)
            {
                // Initialize the budget transaction reverse query.
                this.initBudgetTransactionLinesToReverseQuery();
            }

            // Set the BudgetTransactionStatus restriction for the query to draft.
            transReverseTransactionStatusRange.value(int2str(enum2int(BudgetTransactionStatus::Draft)));

            transactionReverseQueryRun = new QueryRun(transactionReverseQuery);

            if (transactionReverseQueryRun.next())
            {
                // Previously transferred draft budget transactions exist.
                // Confirm that the draft budget transactions will not be reversed.
                if (Box::yesNo(strfmt("@SYS132977", budgetTransactionType), DialogButton::Yes) == DialogButton::No)
                {
                    ok = false;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>BudgetTransactionHeader</c> record.
    /// </summary>
    protected void createBudgetTransactionHeader()
    {
        NumberSeq numberSeq;

        ttsbegin;

        budgetTransactionHeader.clear();
        budgetTransactionHeader.initValue();

        if (BudgetTransactionManager::checkBudgetTransactionNumberSequence() == true)
        {
            // The number sequence for budget transactions is valid.
            // Get the next number in the sequence for the transfer.
            numberSeq = NumberSeq::newGetNum(BudgetParameters::numRefBudgetTransactionId());

            budgetTransactionHeader.TransactionNumber = numberSeq.num();

            budgetTransactionHeader.setBudgetTransactionCode(budgetTransactionCode.RecId);

            budgetTransactionHeader.editBudgetModel(true, toModel);

            if (budgetTransactionHeader.validateWrite() == true)
            {
                budgetTransactionHeader.write();
            }
            else
            {
                // The budget transaction header must be created to complete the transfer.
                throw error("@SYS131643");
            }
        }
        else
        {
            // The number sequence check failed.
            throw error("@SYS131643");
        }

        if (isBudgetTransStatusCompleted == NoYes::Yes)
        {
            budgetTransactionPost = BudgetTransactionPost::construct(budgetTransactionHeader.TransactionNumber);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        toModel     = dialogModel.value();
        deleteOld   = dialogDeleteOld.value();

        doConfirmDraftBudgetTransNoReverse = true;

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBudgetTransactionLinesToReverseQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the query that is used to retrieve the <c>BudgetTransactionLine</c> records that were
    ///    previously transferred.
    /// </summary>
    /// <remarks>
    ///    The range value for the <c>BudgetTransactionStatus</c> value of the budget transactions is not set
    ///    and should be set by the caller after the query is initialized.
    /// </remarks>
    protected void initBudgetTransactionLinesToReverseQuery()
    {
        QueryBuildDataSource transLineDS;
        QueryBuildDataSource transLineReversedDS;
        QueryBuildDataSource transLineReversingDS;
        QueryBuildDataSource transHeaderDS;

        QueryBuildRange transHeaderRange;

        DictRelation transLineReversedRelation;
        DictRelation transLineReversingRelation;

        transactionReverseQuery = new Query();

        // Add the BudgetTransactionLine table as a data source to get the transaction line details.
        transLineDS = transactionReverseQuery.addDataSource(tablenum(BudgetTransactionLine));
        transLineDS.relations(true);

        // Add the BudgetTransactionLineReverse table as a data source to exclude reversed transaction lines
        // by doing a NoExists join with the BudgetTransactionLine data source.
        transLineReversedDS = transLineDS.addDataSource(tablenum(BudgetTransactionLineReverse));
        transLineReversedRelation = new DictRelation(tablenum(BudgetTransactionLineReverse), UtilElementType::Table, 1);
        transLineReversedRelation.loadFieldRelation(fieldnum(BudgetTransactionLineReverse, ReversedBudgetTransactionLine));
        transLineReversedDS.addRelation(transLineReversedRelation);
        transLineReversedDS.joinMode(JoinMode::NoExistsJoin);

        // Add the BudgetTransactionLineReverse table as a data source to exclude reversing transaction lines
        // by doing a NoExists join with the BudgetTransactionLine data source.
        transLineReversingDS = transLineDS.addDataSource(tablenum(BudgetTransactionLineReverse));
        transLineReversingRelation = new DictRelation(tablenum(BudgetTransactionLineReverse), UtilElementType::Table, 2);
        transLineReversingRelation.loadFieldRelation(fieldnum(BudgetTransactionLineReverse, ReversingBudgetTransactionLine));
        transLineReversingDS.addRelation(transLineReversingRelation);
        transLineReversingDS.joinMode(JoinMode::NoExistsJoin);

        // Add the BudgetTransactionHeader table as a data source to get the transaction header details.
        transHeaderDS = transLineDS.addDataSource(tablenum(BudgetTransactionHeader));
        transHeaderDS.relations(true);
        transHeaderDS.joinMode(JoinMode::ExistsJoin);

        // Restrict the BudgetTransactionHeader data source to only return records with
        // the correct budget model.
        transHeaderRange = transHeaderDS.addRange(fieldnum(BudgetTransactionHeader, BudgetModelId));
        transHeaderRange.value(SysQuery::value(toModel));

        // Restrict the BudgetTransactionHeader data source to only return records with
        // the correct budget transaction type.
        transHeaderRange = transHeaderDS.addRange(fieldnum(BudgetTransactionHeader, BudgetTransactionType));
        transHeaderRange.value(int2str(enum2int(budgetTransactionType)));

        // Add the range for the BudgetTransactionStatus.
        // The range value will need to be set before the caller runs the query.
        transReverseTransactionStatusRange = transHeaderDS.addRange(fieldnum(BudgetTransactionHeader, TransactionStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        container pack()
    {
        return [#CurrentVersion,#CurrentList,qr.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseExistingCompletedBudgetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the existing completed budget transactions.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The reversal process could not be completed.
    /// </exception>
    protected void reverseExistingCompletedBudgetTrans()
    {
        BudgetTransactionReverseManager transactionReverseManager;
        QueryRun transactionReverseQueryRun;
        BudgetTransactionLine reverseTransLine;

        if (deleteOld == NoYes::Yes)
        {
            progress.setText("@SYS27602");

            // Reverse the budget transaction lines that were prviously transferred.
            transactionReverseManager = BudgetTransactionReverseManager::construct(budgetTransactionCode.Name, toModel);

            if (transactionReverseQuery == null)
            {
                // Initialize the budget transaction reverse query.
                this.initBudgetTransactionLinesToReverseQuery();
            }

            // Set the BudgetTransactionStatus restriction for the query to completed.
            transReverseTransactionStatusRange.value(int2str(enum2int(BudgetTransactionStatus::Completed)));

            transactionReverseQueryRun = new QueryRun(transactionReverseQuery);

            while (transactionReverseQueryRun.next())
            {
                reverseTransLine = transactionReverseQueryRun.get(tablenum(BudgetTransactionLine)) as BudgetTransactionLine;

                transactionReverseManager.addTransactionLineToReverse(reverseTransLine.RecId);
            }

            transactionReverseManager.reverseTransactionLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend the <c>RunBaseBatch</c> class must override the <c>runsImpersonated</c>
    ///    method and return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a Select button is to be added to the dialog. If you change the return value to
    ///    true, the button will be added.
    /// </summary>
    /// <returns>
    ///    false by default.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> object.
    /// </remarks>
    boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        boolean unpack(container packedClass)
    {
        Integer     version     = RunBase::getVersion(packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,packedQuery] = packedClass;
                if (packedQuery)
                    qr = new QueryRun(packedQuery);
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the settings.
    /// </summary>
    /// <param name="calledFrom">
    ///    The calling object; optional.
    /// </param>
    /// <returns>
    ///    true if the settings are correct; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;
        BudgetModel budgetModel;

        ret = super();

        budgetModel = BudgetModel::find(HeadingSub::Heading, toModel, toModel);

        if (budgetModel.RecId == 0)
        {
            ret = checkFailed("@SYS82706");
        }

        if (budgetModel.Blocked == NoYes::Yes)
        {
            ret = checkFailed(strfmt("@SYS4829", toModel));
        }

        if (BudgetTransactionCode::existDefaultByTransactionType(budgetTransactionType) == false)
        {
            ret = checkFailed(strfmt("@SYS132978", budgetTransactionType));
        }

        if (ret == true && doConfirmDraftBudgetTransNoReverse == true)
        {
            ret = this.confirmDraftBudgetTransNoReverse();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the default account.
    /// </summary>
    /// <param name="_defaultAccount">
    ///    The account to validate.
    /// </param>
    /// <param name="_postingType">
    ///    The posting type.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The account number does not exist for the posting type.
    /// </exception>
    protected void validateDefaultAccount(LedgerDimensionDefaultAccount _defaultAccount, LedgerPostingType _postingType)
    {
        if (DimensionAttributeValueCombination::exist(_defaultAccount) == false)
        {
            throw error(strfmt("@SYS24816", _postingType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>