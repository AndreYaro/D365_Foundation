<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayEventsExport_Std</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgPayEventsExport_Std</c> class is used to export pay events to a text file.
/// </summary>
[JmgPayEventsExportTypeFactoryAttribute(JmgPayEventsExportType::Standard)]
class JmgPayEventsExport_Std extends JmgPayEventsExport
{
    static private readonly Decimals hoursDecimals = new DictType(extendedTypeNum(Hours)).effectivePrecision();

    JmgTmpPayExport     jmgTmpPayExport;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.caption(JmgPayEventsExport_Std::description());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doInsertTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record in the <c>JmgTmpPayExport</c> temporary buffer.
    /// </summary>
    /// <param name="_emplExportId">
    ///    The ID of the worker to use when exporting.
    /// </param>
    /// <param name="_profileDate">
    ///    The date to assign to the pay event export.
    /// </param>
    /// <param name="_payCostType">
    ///    The pay cost type to assign to the pay event export.
    /// </param>
    /// <param name="_hours">
    ///    The number of hours to assign to the pay event export.
    /// </param>
    /// <param name="_price">
    ///    The cost to assign to the pay event export.
    /// </param>
    void doInsertTmp(JmgEmplExportId _emplExportId, StartDate _profileDate, JmgPayCostType _payCostType, Hours _hours, Price _price)
    {
        jmgTmpPayExport.Hours        = _hours;
        jmgTmpPayExport.EmplExportId = _emplExportId;
        jmgTmpPayExport.ProfileDate  = _profileDate;
        jmgTmpPayExport.PayCostType  = _payCostType;
        jmgTmpPayExport.Price        = _price;
        jmgTmpPayExport.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        Counter                 cnt;
        JmgEmployee             jmgEmployee;
        JmgPayEvents            jmgPayEvents;
        JmgPayTable             jmgPayTable;

        using(var activityContext = JmgInstrumentationLogger::createLogger(classStr(JmgPayEventsExport_Std)).maintainPayroll().tranferToPay())
        {
            this.setDateToAndDateFrom();

            CommaTextStreamIo io = this.constructCommaTextStreamIo();

            this.addPayrollPeriodRange();

            this.checkForJournalLines(queryRun);

            this.progressInit(JmgPayEventsExport_Std::description(), SysQuery::countLoops(queryRun), #AviUpdate);

            boolean optimizeTransferToPayExportFlightEnabled = JmgOptimizeTransferToPayExportJobFlight::instance().isEnabled();
            ttsbegin;

            while (queryRun.next())
            {
                jmgEmployee = queryRun.get(tableNum(JmgEmployee));
                setPrefix(#PreFixField(jmgEmployee, Worker));
                progress.setText(HcmWorker::worker2Name(jmgEmployee.Worker));

                if (!optimizeTransferToPayExportFlightEnabled || jmgEmployee.FlexProfile == NoYes::Yes)
                {
                    JmgFlex::createAutomaticFlexCorrections(jmgEmployee, dateFrom, dateTo);
                }

                if (!datePay)
                {
                    while select Worker, ProfileDate, PayCostType, Price, PayTransferred, sum(PaySeconds) from jmgPayEvents
                    group by Worker, ProfileDate, PayCostType, Price, PayTransferred
                    where jmgPayEvents.Worker      == jmgEmployee.Worker &&
                          jmgPayEvents.ProfileDate >= dateFrom           &&
                          jmgPayEvents.ProfileDate <= dateTo             &&
                          (reTransmit || jmgPayEvents.PayTransferred == false)
                    exists join  jmgPayTable
                    where jmgPayTable.PayCostType   == jmgPayEvents.PayCostType &&
                          jmgPayTable.IncludeInExport == NoYes::Yes
                    {
                        this.doInsertTmp(
                        jmgEmployee.EmplExportId ? jmgEmployee.EmplExportId : HcmWorker::find(jmgEmployee.Worker).PersonnelNumber,
                        jmgPayEvents.ProfileDate,
                        jmgPayEvents.PayCostType,
                        decRound((jmgPayEvents.PaySeconds/3600), JmgPayEventsExport_Std::hoursDecimals),
                        jmgPayEvents.Price);
                    }
                }
                else
                {
                    while select Worker, PayCostType, Price, PayTransferred, sum(PaySeconds) from jmgPayEvents
                    group by Worker, PayCostType, Price, PayTransferred
                    where jmgPayEvents.Worker      == jmgEmployee.Worker &&
                          jmgPayEvents.ProfileDate >= dateFrom           &&
                          jmgPayEvents.ProfileDate <= dateTo             &&
                          (reTransmit || jmgPayEvents.PayTransferred == false)
                    exists join  jmgPayTable
                    where jmgPayTable.PayCostType   == jmgPayEvents.PayCostType &&
                          jmgPayTable.IncludeInExport == NoYes::Yes
                    {
                        this.doInsertTmp(
                        jmgEmployee.EmplExportId ? jmgEmployee.EmplExportId : HcmWorker::find(jmgEmployee.Worker).PersonnelNumber,
                        datePay,
                        jmgPayEvents.PayCostType,
                        decRound((jmgPayEvents.PaySeconds/3600), JmgPayEventsExport_Std::hoursDecimals),
                        jmgPayEvents.Price);
                    }
                }

                while select forupdate jmgPayEvents
                where jmgPayEvents.Worker      == jmgEmployee.Worker &&
                      jmgPayEvents.ProfileDate >= dateFrom           &&
                      jmgPayEvents.ProfileDate <= dateTo
                join  jmgPayTable
                where jmgPayTable.PayCostType   == jmgPayEvents.PayCostType &&
                      jmgPayTable.IncludeInExport == NoYes::Yes
                {
                    this.updateJgmPayEvents(jmgPayEvents);
                }

                cnt++;
                progress.setCount(cnt);
            }

            boolean anythingExported = false;

            while select jmgTmpPayExport
            order by EmplExportId, ProfileDate
            where jmgTmpPayExport.PayCostType
            {
                anythingExported = true;
                io.writeExp([
                jmgTmpPayExport.EmplExportId,
                jmgTmpPayExport.ProfileDate,
                JmgPayTable::payCostTypeExport(jmgTmpPayExport.PayCostType),
                jmgTmpPayExport.Hours,
                jmgTmpPayExport.Price]);
            }

            ttscommit;

            if (anythingExported)
            {
                System.DateTime exportTime = System.DateTime::UtcNow;
                if (optimizeTransferToPayExportFlightEnabled)
                {
                    FileUploadTemporaryStorageResult result = File::SendFileToTempStore_GetResult(io.getStream(), 
                                                                                                  strfmt("TransferToPay_%1.csv", exportTime.get_Ticks()), 
                                                                                                  classstr(FileUploadTemporaryStorageStrategy));

                    if (result && result.getFileId())
                    {
                        // Set up the notification
                        const RuleId excelStaticExportRuleId = "ExcelStaticExport";

                        SystemNotificationDataContract notification = new SystemNotificationDataContract();
                        notification.Users().value(1, curUserId());
                        notification.Title("@ApplicationPlatform:ExportToExcel_ActionCenterCompletedTitle");
                        notification.RuleId(excelStaticExportRuleId);
                        notification.Message(strFmt("@ApplicationPlatform:ExportToExcel_ActionCenterCompletedMessage", "@SYS38536"));
                        notification.ExpirationDateTime(DateTimeUtil::addMinutes(DateTimeUtil::utcNow(), FileUploadTemporaryStorageStrategy::FileTimeOutInMinutes));
                    
                        // Set up the action associated with the notification
                        SystemNotificationActionDataContract action = new SystemNotificationActionDataContract();
                        action.Message("@ApplicationPlatform:ExportToExcel_ActionCenterDownloadLinkMessage");
                        action.Type(SystemNotificationActionType::AxActionMenuFunction);
                        SystemNotificationMenuFunctionDataContract actionData = new SystemNotificationMenuFunctionDataContract();
                        actionData.MenuItemName(menuItemActionStr(ExportToExcelStaticOpenFileAction_AppSuite));
                        actionData.Data(result.getFileId());
                        action.Data(FormJsonSerializer::serializeClass(actionData));
                        notification.Actions().value(1, action);

                        SystemNotificationsManager::AddSystemNotification(notification);
                    }
                }
                else
                {
                    File::SendFileToUser(io.getStream(), strfmt("TransferToPay_%1.csv", exportTime.get_Ticks()));
                }
            }
            else
            {
                info("@GLS952");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJgmPayEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the pay event.
    /// </summary>
    /// <param name="_jmgPayEvents">
    ///    A <c>JmgPayEvents</c> table buffer.
    /// </param>
    protected void updateJgmPayEvents(JmgPayEvents _jmgPayEvents)
    {
        _jmgPayEvents.PayTransferred = true;
        _jmgPayEvents.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCommaTextStreamIo</Name>
				<Source><![CDATA[
    protected CommaTextStreamIo constructCommaTextStreamIo()
    {
        return CommaTextStreamIo::constructForWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFrom</Name>
				<Source><![CDATA[
    protected JmgDate parmDateFrom(JmgDate _dateFrom = dateFrom)
    {
        dateFrom = _dateFrom;

        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo</Name>
				<Source><![CDATA[
    protected JmgDate parmDateTo(JmgDate _dateTo = dateTo)
    {
        dateTo = _dateTo;

        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS38536";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>