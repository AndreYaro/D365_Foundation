<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAvailableBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetAvailableBalance</c> class provides common logic to get the budget funds that are
///    available based on the specified <c>BudgetModel</c> record, a starting interval date, and an ending
///    interval date.
/// </summary>
public class BudgetAvailableBalance
{
    // These datasource names are abbreviated for best practice due to number of datasources on the queries
    #DEFINE.budgetSourceTracking_Relieved('TrackingRelieved')
    #DEFINE.budgetSourceTracking_Relieving('TrackingRelieving')
    #DEFINE.dimensionAttributeValueComb_ControlLedgerDim('DimensionAttributeValueComb_Control')
    #DEFINE.dimensionAttributeValueComb_SourceLedgerDim('DimensionAttributeValueComb_Source')

    // These datasource names should not be abbreviated as they are aligned with inquiry forms
    #DEFINE.budgetSourceTrackingDetail_Relieved('BudgetSourceTrackingDetail_Relieved')
    #DEFINE.budgetSourceTrackingDetail('BudgetSourceTrackingDetail')

    recId primaryLedgerId;

    // Additional class properties
    TransDate fromIntervalDate;
    TransDate toIntervalDate;
    Query dynamicQuery;
    Query budgetControlCategorySumAll_q;
    QueryRun budgetControlCategorySumAll_qr;
    QueryBuildDataSource budgetSourceTrackingDetail_qbds;
    QueryBuildDataSource budgetSourceTracking_qbds;
    QueryBuildDataSource dimensionAttributeValueCombSourceLedger_qbds;
    QueryBuildDataSource relievedDimensionAttributeValueCombSourceLedger_qbds;

    QueryBuildRange primaryLedger_qbr;
    QueryBuildRange budgetModel_qbr;
    QueryBuildRange trackingDateValueStr_qbr;
    QueryBuildRange status_qbr;
    QueryBuildRange mainAccount_qbr;
    QueryBuildRange relievedMainAccount_qbr;
    QueryBuildRange isSimulation_qbr;

    str queryRangeValueStr;

    // Query build ranges for relieving category sum query
    QueryRun budgetControlRelievingCategorySumAll_qr;
    Query budgetControlRelievingCategorySumAll_q;
    QueryBuildDataSource budgetSourceTrackingDetail_Relieved_qbds;
    QueryBuildDataSource budgetSourceTracking_Relieved_qbds;
    QueryBuildDataSource budgetSourceTracking_Relieving_qbds;

    QueryBuildRange budgetModel_Relieved_qbr;
    QueryBuildRange status_Relieved_qbr;
    QueryBuildRange primaryLedger_Relieved_qbr;
    QueryBuildRange isSimulation_Relieved_qbr;
    QueryBuildRange isCarryforward_Relieved_qbr;

    QueryBuildRange trackingDate_Relieving_qbr;
    QueryBuildRange isSimulation_Relieving_qbr;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeBudgetControlCategorySumAllQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the <c>BudgetControlCategorySumAll</c> and <c>BudgetControlRelievingCategorySumAll</c> queries.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>BudgetPeriodBalance</c> class that has the aggregated
    ///    <c>AccountingCurrencyAmount</c> values that were obtained from the queries.
    /// </returns>
    protected BudgetPeriodBalance executeBudgetControlCategorySumAllQuery()
    {
        BudgetPeriodBalance budgetPeriodBalance;

        budgetPeriodBalance = new BudgetPeriodBalance();

        if (!budgetControlCategorySumAll_qr)
        {
            // Create the QueryRun instance.
            budgetControlCategorySumAll_qr = new QueryRun(budgetControlCategorySumAll_q);
        }
        else
        {
            // Reuse existing instance.
            budgetControlCategorySumAll_qr.query(budgetControlCategorySumAll_q);
            budgetControlCategorySumAll_qr.reset();
        }

        if (!budgetControlRelievingCategorySumAll_qr)
        {
            // Create the QueryRun instance.
            budgetControlRelievingCategorySumAll_qr = new QueryRun(budgetControlRelievingCategorySumAll_q);
        }
        else
        {
            // Reuse existing instance.
            budgetControlRelievingCategorySumAll_qr.query(budgetControlRelievingCategorySumAll_q);
            budgetControlRelievingCategorySumAll_qr.reset();
        }

        budgetPeriodBalance = this.setBudgetPeriodBalanceAmount(budgetPeriodBalance);

        return budgetPeriodBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlCategorySumAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a <c>BudgetPeriodBalance</c> instance containing the aggregated amounts for all budget
    ///    control categories with both draft and confirmed status for the specified <c>BudgetModel</c> record.
    /// </summary>
    /// <param name="_budgetModel">
    ///    A <c>BudgetModel</c> record that is used to prepare the queries.
    /// </param>
    /// <param name="_includeDefaultBudgetModelTransactions">
    ///    A Boolean value that specifies whether the budget control tracking data for the default
    ///    <c>BudgetModel</c> are included; optional.
    /// </param>
    /// <param name="_mainAccountRecId">
    ///    A record ID of a main account that is used as an additional filter on a ledger dimension value when
    ///    calculating amounts; optional.
    /// </param>
    /// <param name="_includeAllAccounts">
    ///    A Boolean value that specifies whether to include all of the main accounts for the passed in ledger
    ///    dimension; optional.
    /// </param>
    /// <param name="_dynamicQuery">
    ///    A <c>Query</c> object that provides dynamic ranges that are set using the advanced filter; optional.
    /// </param>
    /// <returns>
    ///    A <c>BudgetPeriodBalance</c> object that represents the aggregated amounts in all budget control
    ///    categories with both draft and confirmed statuses.
    /// </returns>
    /// <remarks>
    ///    This method evaluates the supplied parameters and determines the accounting currency amount
    ///    for each budget control category and creates a <c>BudgetPeriodBalance</c> instance.
    /// </remarks>
    public BudgetPeriodBalance getBudgetControlCategorySumAll(BudgetModel _budgetModel,
                                                              boolean _includeDefaultBudgetModelTransactions = true,
                                                              recId _mainAccountRecId = 0,
                                                              boolean _includeAllAccounts = true,
                                                              Query _dynamicQuery = null)
    {
        BudgetPeriodBalance budgetPeriodBalance;

        dynamicQuery = _dynamicQuery;

        // Initialize the reusable queries and query ranges.
        this.prepareBudgetControlCategorySumAllQuery();
        this.prepareRelievingCategorySumAllQuery();

        this.prepareQueryRangeValues(_budgetModel,
                                     true,  //  'true' is to Include confirmed details
                                     true,  //  'true' is to Include draft details
                                     _includeDefaultBudgetModelTransactions,
                                     true,  //  'true' is to Include simulation details
                                     _mainAccountRecId,
                                     _includeAllAccounts);

        // Include draft, confirmed, simulation and carryforward details.
        this.prepareRelievingQueryRangeValues(true, true, true, true);
        this.prepareRelievingQueryMainAccountRangeValues(_mainAccountRecId, _includeAllAccounts);

        if (_dynamicQuery != null)
        {
            this.prepareDynamicQuery();
        }

        budgetPeriodBalance = this.executeBudgetControlCategorySumAllQuery();
        budgetPeriodBalance.parmStartDate(fromIntervalDate);
        budgetPeriodBalance.parmEndDate(toIntervalDate);

        return budgetPeriodBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BudgetAvailableBalance</c> class.
    /// </summary>
    /// <remarks>
    ///    This method is overridden to prevent a caller from constructing a class instance by using the
    ///    <c>new</c> method.
    /// </remarks>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareBudgetControlCategorySumAllQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the <c>BudgetaryControlCategorySumAll</c> query.
    /// </summary>
    /// <remarks>
    ///    This method creates a new instance of the <c>BudgetaryControlCategorySumAll</c> query and
    ///    initializes the required query build data sources and query build ranges. It also prepares the
    ///    <c>trackingDateValueStr_qbr</c> query range values because they do not change for the lifetime of the
    ///    class instance.
    /// </remarks>
    protected void prepareBudgetControlCategorySumAllQuery()
    {
        if (!budgetControlCategorySumAll_q)
        {
            // Create the required Query and QueryBuildDataSources, and QueryBuildRanges.
            budgetControlCategorySumAll_q = new Query(querystr(BudgetControlCategorySumAll));

            budgetSourceTracking_qbds = budgetControlCategorySumAll_q.dataSourceTable(tablenum(BudgetSourceTracking));
            budgetSourceTrackingDetail_qbds = budgetControlCategorySumAll_q.dataSourceTable(tablenum(BudgetSourceTrackingDetail));

            primaryLedger_qbr = budgetSourceTrackingDetail_qbds.findRange(fieldnum(BudgetSourceTrackingDetail, PrimaryLedger));
            budgetModel_qbr = budgetSourceTracking_qbds.findRange(fieldnum(BudgetSourceTracking, BudgetModelId));
            trackingDateValueStr_qbr = budgetSourceTracking_qbds.findRange(fieldnum(BudgetSourceTracking, TrackingDate));
            status_qbr = budgetSourceTracking_qbds.findRange(fieldnum(BudgetSourceTracking, Status));
            isSimulation_qbr = budgetSourceTracking_qbds.findRange(fieldnum(BudgetSourceTracking, IsSimulation));

            // The from, to dates, and ledger will never change for the instance of the class.
            trackingDateValueStr_qbr.value(SysQuery::range(fromIntervalDate, toIntervalDate));
            primaryLedger_qbr.value(SysQuery::value(primaryLedgerId));

            // Get dimension attribute value combination datasource from the tracking detail table to calculate
            // funds available only for the specific source ledger dimensions which has the given main account.
            dimensionAttributeValueCombSourceLedger_qbds = budgetControlCategorySumAll_q.dataSourceName(#dimensionAttributeValueComb_SourceLedgerDim);
            mainAccount_qbr = dimensionAttributeValueCombSourceLedger_qbds.findRange(fieldnum(DimensionAttributeValueCombination, MainAccount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDynamicQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the query ranges from the dynamic query to the <c>BudgetControlCategorySumAll</c> query.
    /// </summary>
    protected void prepareDynamicQuery()
    {
        QueryBuildDataSource budgetSourceTrackingDynamicQuery_qbds;
        QueryBuildDataSource budgetSourceTrackingDetailDynamicQuery_qbds;
        QueryBuildDataSource queryFilterDataSource;
        QueryBuildRange      queryBuildRange;
        QueryFilter          dynamicQueryFilter;
        QueryFilter          queryFilter;

        int budgetSourceTrackingRangeCount = 0;
        int budgetSourceTrackingDetailRangeCount = 0;
        int i = 1;
        int queryFilterCount = 0;

        str     linkedLedgerDimensionFieldName;
        fieldId ledgerDimensionFieldId;

        container         con;
        ListEnumerator    listEnumerator;
        DimensionProvider dimensionProvider = new DimensionProvider();

        #define.BudgetSourceTrackingDetailDataSourceName('BudgetSourceTrackingDetail')
        #define.LinkedLedgerDimensionFieldNamePosition(2)

        if (budgetControlCategorySumAll_q != null)
        {
            // Create the required Query and QueryBuildDataSources, and QueryBuildRanges.
            budgetSourceTracking_qbds = budgetControlCategorySumAll_q.dataSourceTable(tablenum(BudgetSourceTracking));
            budgetSourceTrackingDetail_qbds = budgetControlCategorySumAll_q.dataSourceTable(tablenum(BudgetSourceTrackingDetail));

            budgetSourceTrackingDynamicQuery_qbds = dynamicQuery.dataSourceTable(tablenum(BudgetSourceTracking));
            budgetSourceTrackingDetailDynamicQuery_qbds = dynamicQuery.dataSourceTable(tablenum(BudgetSourceTrackingDetail));

            budgetSourceTrackingRangeCount = budgetSourceTrackingDynamicQuery_qbds.rangeCount();

            // Copy the ranges on budget source tracking table from the dynamic query to the budget control category sum all query.
            while (i <= budgetSourceTrackingRangeCount)
            {
                queryBuildRange = budgetSourceTrackingDynamicQuery_qbds.range(i);

                if (queryBuildRange != null && queryBuildRange.value() != ''
                && (fieldname2id(tablenum(BudgetSourceTracking), queryBuildRange.fieldName()) != fieldnum(BudgetSourceTracking, BudgetModelId)))
                {
                    budgetSourceTracking_qbds.clearRange(queryBuildRange.field());
                    budgetSourceTracking_qbds.addRange(queryBuildRange.field()).value(queryBuildRange.value());
                }

                i++;
            }

            // Copy the ranges on budget source tracking detail table from the dynamic query to the budget control category sum all query.
            i = 1;
            budgetSourceTrackingDetailRangeCount = budgetSourceTrackingDetailDynamicQuery_qbds.rangeCount();

            while (i <= budgetSourceTrackingDetailRangeCount)
            {
                queryBuildRange = budgetSourceTrackingDetailDynamicQuery_qbds.range(i);

                if (queryBuildRange != null && queryBuildRange.value() != '')
                {
                    budgetSourceTrackingDetail_qbds.clearRange(queryBuildRange.field());
                    budgetSourceTrackingDetail_qbds.addRange(queryBuildRange.field()).value(queryBuildRange.value());
                }

                i++;
            }

            // Get the source ledger dimension details if the user has specified filters in the sysquery form.
            List dimensionFilters = dimensionProvider.getDimensionFiltersFromQuery(dynamicQuery);

            if (!dimensionFilters.empty())
            {
                // There are dimension filters in the original query. Copy these dimension filters to the budget control category sum all query.
                listEnumerator = dimensionFilters.getEnumerator();

                while (listEnumerator.moveNext())
                {
                    con = listEnumerator.current();

                    // We just need the dimension criteria details for budget source ledger dimension only
                    // so filter them after we get the entire list.
                    linkedLedgerDimensionFieldName = conPeek(con, #LinkedLedgerDimensionFieldNamePosition);
                    ledgerDimensionFieldId = fieldName2id(tableNum(budgetSourceTrackingDetail), linkedLedgerDimensionFieldName);

                    if (ledgerDimensionFieldId == fieldNum(BudgetSourceTrackingDetail, BudgetSourceLedgerDimension))
                    {
                        dimensionProvider.addAttributeFilterToQueryFromFilterCon(
                            budgetControlCategorySumAll_q,
                            #BudgetSourceTrackingDetailDataSourceName,
                            fieldStr(BudgetSourceTrackingDetail, BudgetSourceLedgerDimension),
                            con);
                    }
                }
            }

            // Copy the filters on budget source tracking & tracking detail table from the dynamic query to the budget control category sum all query.
            i = 1;
            queryFilterCount = dynamicQuery.queryFilterCount();

            while (i <= queryFilterCount)
            {
                dynamicQueryFilter = dynamicQuery.queryFilter(i);
                queryFilterDataSource =   dynamicQueryFilter.datasource();

                if (dynamicQueryFilter != null && dynamicQueryFilter.value() != '')
                {
                    if (queryFilterDataSource.table() == tablenum(BudgetSourceTracking))
                    {
                        // Since the budget model range/filter value is already added to the funds available query by calling the
                        // getBudgetControlCategorySumAll method, do not add them again.
                        if (fieldname2id(tablenum(BudgetSourceTracking), dynamicQueryFilter.field()) != fieldnum(BudgetSourceTracking, BudgetModelId))
                        {
                            queryFilter = budgetControlCategorySumAll_q.addQueryFilter(budgetSourceTracking_qbds, dynamicQueryFilter.field());
                            queryFilter.value(dynamicQueryFilter.value());
                        }
                    }
                    else
                    {
                        queryFilter = budgetControlCategorySumAll_q.addQueryFilter(budgetSourceTrackingDetail_qbds, dynamicQueryFilter.field());
                        queryFilter.value(dynamicQueryFilter.value());
                    }
                }

                i++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQueryRangeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prepares the query range values based on the specified parameters.
    /// </summary>
    /// <param name="_budgetModel">
    ///     A <c>BudgetModel</c> record.
    /// </param>
    /// <param name="_includeConfirmed">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data in a confirmed status.
    /// </param>
    /// <param name="_includeDraft">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data in a draft status.
    /// </param>
    /// <param name="_includeDefaultBudgetModelTransactions">
    ///     A Boolean value that directs the calculation to include default
    ///     budget model budget control tracking data.
    /// </param>
    /// <param name="_includeIsSimulation">
    ///     A Boolean value that directs the calculation to include simulation
    ///     budget control tracking data.
    /// </param>
    /// <param name="_mainAccountRecId">
    ///     A record ID of main account which is used in calculating the <c>BudgetSourceLedgerDimension</c> record ID.
    /// </param>
    /// <param name="_includeAllAccounts">
    ///     A Boolean value that directs to include all main accounts for the specified ledger dimension.
    /// </param>
    protected void prepareQueryRangeValues(
        BudgetModel _budgetModel,
        boolean     _includeConfirmed,
        boolean     _includeDraft,
        boolean     _includeDefaultBudgetModelTransactions,
        boolean     _includeIsSimulation,
        recId       _mainAccountRecId,
        boolean     _includeAllAccounts)
    {
        queryRangeValueStr = BudgetAvailableBalance::getBudgetModelQueryRangeValue(_budgetModel, _includeDefaultBudgetModelTransactions);

        budgetModel_qbr.value(queryRangeValueStr);

        queryRangeValueStr = BudgetAvailableBalance::getStatusQueryRangeValueStr(_includeConfirmed, _includeDraft);
        status_qbr.value(queryRangeValueStr);

        queryRangeValueStr = BudgetAvailableBalance::getIsSimulationQueryRangeValueStr(_includeIsSimulation);
        isSimulation_qbr.value(queryRangeValueStr);

        if (dynamicQuery == null)
        {
            this.prepareQueryMainAccountRangeValues(mainAccount_qbr, _mainAccountRecId, _includeAllAccounts);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRelievingCategorySumAllQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the <c>BudgetControlRelievingCategorySumAll</c> query.
    /// </summary>
    /// <remarks>
    ///    This method creates a new instance of the <c>BudgetControlRelievingCategorySumAll</c> query and
    ///    initializes the required query build data sources and query build ranges. It also prepares the
    ///    <c>trackingDate_Relieving_qbr</c> query range values because they do not change for the lifetime of
    ///    the class instance.
    /// </remarks>
    protected void prepareRelievingCategorySumAllQuery()
    {
        if (!budgetControlRelievingCategorySumAll_q)
        {
            // Create the required Query and QueryBuildDataSources, and QueryBuildRanges.
            budgetControlRelievingCategorySumAll_q = new Query(querystr(BudgetControlRelievingCategorySumAll));
            budgetSourceTracking_Relieved_qbds = budgetControlRelievingCategorySumAll_q.dataSourceName(#budgetSourceTracking_Relieved);
            budgetSourceTrackingDetail_Relieved_qbds = budgetControlRelievingCategorySumAll_q.dataSourceName(#budgetSourceTrackingDetail_Relieved);
            budgetSourceTracking_Relieving_qbds = budgetControlRelievingCategorySumAll_q.dataSourceName(#budgetSourceTracking_Relieving);
            relievedDimensionAttributeValueCombSourceLedger_qbds = budgetControlRelievingCategorySumAll_q.dataSourceName(#dimensionAttributeValueComb_SourceLedgerDim);

            // Find QueryBuildRanges on relieved BudgetSourceTracking QueryBuildDataSource
            budgetModel_Relieved_qbr = budgetSourceTracking_Relieved_qbds.findRange(fieldnum(BudgetSourceTracking, BudgetModelId));
            status_Relieved_qbr = budgetSourceTracking_Relieved_qbds.findRange(fieldnum(BudgetSourceTracking, Status));
            isSimulation_Relieved_qbr = budgetSourceTracking_Relieved_qbds.findRange(fieldnum(BudgetSourceTracking, IsSimulation));

            // Find QueryBuildRanges on relieving BudgetSourceTracking QueryBuildDataSource
            trackingDate_Relieving_qbr = budgetSourceTracking_Relieving_qbds.findRange(fieldnum(BudgetSourceTracking, TrackingDate));
            isSimulation_Relieving_qbr = budgetSourceTracking_Relieving_qbds.findRange(fieldnum(BudgetSourceTracking, IsSimulation));

            // Find QueryBuildRanges on relieved BudgetSourceTrackingDetail QueryBuildDataSource
            primaryLedger_Relieved_qbr = budgetSourceTrackingDetail_Relieved_qbds.findRange(fieldnum(BudgetSourceTrackingDetail, PrimaryLedger));
            isCarryforward_Relieved_qbr = budgetSourceTrackingDetail_Relieved_qbds.findRange(fieldnum(BudgetSourceTrackingDetail, IsCarryForward));

            // The from, to dates, and ledger will never change for the instance of the class.
            trackingDate_Relieving_qbr.value(SysQuery::range(fromIntervalDate, toIntervalDate));
            primaryLedger_Relieved_qbr.value(SysQuery::value(primaryLedgerId));

            // Get dimension attribute value combination datasource from the tracking detail table to calculate
            // funds available only for the specific source ledger dimensions which has the given main account.
            relievedMainAccount_qbr = relievedDimensionAttributeValueCombSourceLedger_qbds.findRange(fieldnum(DimensionAttributeValueCombination, MainAccount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRelievingQueryRangeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prepares the query range values based on the specified parameters.
    /// </summary>
    /// <param name="_includeConfirmed">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking relieving data in a confirmed status.
    /// </param>
    /// <param name="_includeDraft">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking relieving data in a draft status.
    /// </param>
    /// <param name="_includeIsSimulation">
    ///     A Boolean value that directs the calculation to include simulation
    ///     budget control tracking relieving data.
    /// </param>
    /// <param name="_includeCarryforwardAmounts">
    ///     A Boolean value that directs the calculation to include carryforward
    ///     budget control tracking relieving data.
    /// </param>
    protected void prepareRelievingQueryRangeValues(
        boolean _includeConfirmed,
        boolean _includeDraft,
        boolean _includeIsSimulation,
        boolean _includeCarryforwardAmounts)
    {
        budgetModel_Relieved_qbr.value(budgetModel_qbr.value());
        queryRangeValueStr = BudgetAvailableBalance::getStatusQueryRangeValueStr(_includeConfirmed, _includeDraft);
        status_Relieved_qbr.value(queryRangeValueStr);
        queryRangeValueStr = BudgetAvailableBalance::getIsSimulationQueryRangeValueStr(_includeIsSimulation);
        isSimulation_Relieved_qbr.value(queryRangeValueStr);
        isSimulation_Relieving_qbr.value(queryRangeValueStr);

        queryRangeValueStr = BudgetAvailableBalance::getIncludeCarryforwardQueryValueStr(_includeCarryforwardAmounts);
        isCarryforward_Relieved_qbr.value(queryRangeValueStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRelievingQueryMainAccountRangeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prepares the query range value for main account
    /// </summary>
    /// <param name="_mainAccountRecId">
    ///     A record ID of main account which is used in calculating the <c>BudgetSourceLedgerDimension</c> record ID.
    /// </param>
    /// <param name="_includeAllAccounts">
    ///     A Boolean value that directs to include all main accounts for the specified ledger dimension.
    /// </param>
    private void prepareRelievingQueryMainAccountRangeValues(recId _mainAccountRecId, boolean _includeAllAccounts)
    {
        this.prepareQueryMainAccountRangeValues(relievedMainAccount_qbr, _mainAccountRecId, _includeAllAccounts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQueryMainAccountRangeValues</Name>
				<Source><![CDATA[
    private void prepareQueryMainAccountRangeValues(QueryBuildRange _mainAccount_qbr, recId _mainAccountRecId, boolean _includeAllAccounts)
    {
        if (_mainAccount_qbr != null)
        {
            // When called only from the statistics form.
            // Either the given main account must be valid or all accounts should be included but not both.
            Debug::assert(!(_mainAccountRecId != 0 && _includeAllAccounts == true));

            if (_mainAccountRecId != 0 )
            {
                // When the speficied main account is valid.
                _mainAccount_qbr.value(SysQuery::value(_mainAccountRecId));
            }
            else if (!_includeAllAccounts)
            {
                // When the specified main account is not valid and includeAllAccounts flag is set to false,
                // then add a not-empty string as the range value.
                _mainAccount_qbr.value(SysQuery::valueNotEmptyString());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPeriodBalanceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the aggregated accounting currency amounts for the specified <c>BudgetPeriodBalance</c> instance.
    /// </summary>
    /// <param name="_budgetPeriodBalance">
    ///    An instance of the <c>BudgetPeriodBalance</c> class in which to set the amounts.
    /// </param>
    /// <returns>
    ///    The specified <c>BudgetPeriodBalance</c> instance with all of the amounts set.
    /// </returns>
    protected BudgetPeriodBalance setBudgetPeriodBalanceAmount(BudgetPeriodBalance _budgetPeriodBalance)
    {
        BudgetPeriodBalance budgetPeriodBalance = _budgetPeriodBalance;
        BudgetSourceTracking budgetSourceTracking;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;

        AmountMST   sumTransferInAmount = 0;
        AmountMST   sumTransferOutAmount = 0;
        AmountMST   subtractEncumbranceAmount = 0;
        AmountMST   subtractEncumbranceReductionAmount = 0;

        AmountMST   subtractCarryForwardEncumbranceAmount = 0;
        AmountMST   subtractCarryForwardEncumbranceReductionAmount = 0;
        AmountMST   sumPreEncumbranceConfirmedAmount = 0;
        AmountMST   sumPreEncumbranceDraftAmount = 0;

        // Capture the amounts by category
        while (budgetControlCategorySumAll_qr.next())
        {
            budgetSourceTrackingDetail = budgetControlCategorySumAll_qr.get(tablenum(BudgetSourceTrackingDetail)) as BudgetSourceTrackingDetail;
            budgetSourceTracking = budgetControlCategorySumAll_qr.get(tablenum(BudgetSourceTracking)) as BudgetSourceTracking;

            switch (budgetSourceTracking.Category)
            {
                case BudgetControlCategory::Original:
                    if (budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
                    {
                        budgetPeriodBalance.parmOriginalBudgetMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                    }
                    break;

                case BudgetControlCategory::ActualExpenditure:
                    if (budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
                    {
                        if (budgetSourceTrackingDetail.IsCarryForward)
                        {
                            budgetPeriodBalance.parmCarryForwardActualAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                        }
                        else
                        {
                            budgetPeriodBalance.parmActualAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                        }
                    }
                    else
                    {
                        if (budgetSourceTrackingDetail.IsCarryForward)
                        {
                            budgetPeriodBalance.parmUnpostedCarryForwardActualAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                        }
                        else
                        {
                            budgetPeriodBalance.parmUnpostedActualAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                        }
                    }
                    break;

                case BudgetControlCategory::Amendment :
                    if (budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
                    {
                        budgetPeriodBalance.parmAmendmentAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                    }
                    else
                    {
                        budgetPeriodBalance.parmDraftAmendmentAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                    }
                    break;

                case BudgetControlCategory::CarryForwardBudget :
                    if (budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
                    {
                        budgetPeriodBalance.parmCarryForwardBudgetAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                    }
                    break;

                case BudgetControlCategory::Encumbrance :
                    if (budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
                    {
                        if (budgetSourceTrackingDetail.IsCarryForward)
                        {
                            subtractCarryForwardEncumbranceAmount = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }
                        else
                        {
                            // Capture the non-draft encumbrance increase amount to add to reduction amount for overall non-draft encumbrances
                            subtractEncumbranceAmount = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }
                    }
                    else
                    {
                        if (budgetSourceTrackingDetail.IsCarryForward)
                        {
                            budgetPeriodBalance.parmDraftCarryForwardEncumbranceAmtMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                        }
                        else
                        {
                            budgetPeriodBalance.parmDraftEncumbranceAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                        }
                    }
                    break;

                case BudgetControlCategory::EncumbranceReduction :
                    if (budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
                    {
                        if (budgetSourceTrackingDetail.IsCarryForward)
                        {
                            subtractCarryForwardEncumbranceReductionAmount = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }
                        else
                        {
                            // Capture the non-draft encumbrance reduction amount to add to increase amount for overall non-draft encumbrances
                            subtractEncumbranceReductionAmount = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }
                    }
                    else
                    {
                        if (budgetSourceTrackingDetail.IsCarryForward)
                        {
                            budgetPeriodBalance.parmDraftCFEncumbranceReductionAmtMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                        }
                        else
                        {
                            budgetPeriodBalance.parmDraftEncumbranceReductionAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                        }
                    }
                    break;

                case BudgetControlCategory::PreEncumbrance :
                    if (budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
                    {                        
                        sumPreEncumbranceConfirmedAmount += budgetSourceTrackingDetail.AccountingCurrencyAmount;
                    }
                    else
                    {
                        sumPreEncumbranceDraftAmount += budgetSourceTrackingDetail.AccountingCurrencyAmount;
                    }
                    break;

                case BudgetControlCategory::TransferIn :
                    if (budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
                    {
                        sumTransferInAmount = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                    }
                    else
                    {
                        budgetPeriodBalance.parmDraftTransferInAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                    }
                    break;

                case BudgetControlCategory::TransferOut :
                    if (budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
                    {
                        sumTransferOutAmount = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                    }
                    else
                    {
                        budgetPeriodBalance.parmDraftTransferOutAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                    }
                    break;

                case BudgetControlCategory::PreliminaryBudget:
                    if (budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
                    {
                        budgetPeriodBalance.parmPreliminaryAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                    }
                    break;

                case BudgetControlCategory::Apportionment:
                    if (budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
                    {
                        budgetPeriodBalance.parmApportionmentAmountMST(budgetSourceTrackingDetail.AccountingCurrencyAmount);
                    }
                    break;

                default:
                    break;
            }
        }

        // Set parms for Encumbrance including increase & reduction & Transfer including in and out amounts
        budgetPeriodBalance.parmEncumbranceAmountMST(subtractEncumbranceAmount + subtractEncumbranceReductionAmount);
        budgetPeriodBalance.parmCarryForwardEncumbranceAmountMST(subtractCarryForwardEncumbranceAmount + subtractCarryForwardEncumbranceReductionAmount);
        budgetPeriodBalance.parmTransferAmountMST(sumTransferInAmount + sumTransferOutAmount);
        budgetPeriodBalance.parmPreEncumbranceAmountMST(sumPreEncumbranceConfirmedAmount);
        budgetPeriodBalance.parmDraftPreEncumbranceAmountMST(sumPreEncumbranceDraftAmount);

        budgetPeriodBalance = this.setBudgetPeriodBalanceReliefAmount(budgetPeriodBalance);

        return budgetPeriodBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPeriodBalanceReliefAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the aggregated accounting currency relief amounts for the specified <c>BudgetPeriodBalance</c> instance.
    /// </summary>
    /// <param name="_budgetPeriodBalance">
    ///    An instance of the <c>BudgetPeriodBalance</c> class in which to set the relief amounts.
    /// </param>
    /// <returns>
    ///    The specified <c>BudgetPeriodBalance</c> instance with all of the relief amounts set.
    /// </returns>
    protected BudgetPeriodBalance setBudgetPeriodBalanceReliefAmount(BudgetPeriodBalance _budgetPeriodBalance)
    {
        BudgetPeriodBalance budgetPeriodBalance = _budgetPeriodBalance;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
        BudgetSourceTracking relievingBudgetSourceTracking;
        BudgetSourceTracking relievedBudgetSourceTracking;
        BudgetSourceTrackingDetail relievedBudgetSourceTrackingDetail;

        AmountMST   reliefAmount;
        BudgetSourceTrackingStatus relievedStatus;

        AmountMST   encumbranceReliefAmount = 0;
        AmountMST   preEncumbranceReliefAmount = 0;
        AmountMST   carryForwardEncumbranceReliefAmount = 0;
        AmountMST   encumbranceReductionReliefAmount = 0;

        // Capture the relief amounts by category
        while (budgetControlRelievingCategorySumAll_qr.next())
        {
            budgetSourceTrackingRelievingDetail = budgetControlRelievingCategorySumAll_qr.get(tableNum(BudgetSourceTrackingRelievingDetail)) as BudgetSourceTrackingRelievingDetail;
            relievingBudgetSourceTracking = budgetControlRelievingCategorySumAll_qr.get(tableNum(BudgetSourceTracking), 1) as BudgetSourceTracking;
            relievedBudgetSourceTracking = budgetControlRelievingCategorySumAll_qr.get(tableNum(BudgetSourceTracking), 2) as BudgetSourceTracking;
            relievedBudgetSourceTrackingDetail = budgetControlRelievingCategorySumAll_qr.get(tableNum(BudgetSourceTrackingDetail)) as BudgetSourceTrackingDetail;

            reliefAmount = budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount;
            relievedStatus = relievedBudgetSourceTracking.Status;

            switch (relievedBudgetSourceTracking.Category)
            {
                case BudgetControlCategory::ActualExpenditure:
                    if (relievedStatus == BudgetSourceTrackingStatus::Confirmed)
                    {
                        if (relievedBudgetSourceTrackingDetail.IsCarryForward)
                        {
                            budgetPeriodBalance.parmCarryForwardActualAmountMST(reliefAmount + budgetPeriodBalance.parmCarryForwardActualAmountMST());
                        }
                        else
                        {
                            budgetPeriodBalance.parmActualAmountMST(reliefAmount + budgetPeriodBalance.parmActualAmountMST());
                        }
                    }
                    else
                    {
                        if (relievedBudgetSourceTrackingDetail.IsCarryForward)
                        {
                            budgetPeriodBalance.parmUnpostedCarryForwardActualAmountMST(reliefAmount + budgetPeriodBalance.parmUnpostedCarryForwardActualAmountMST());
                        }
                        else
                        {
                            budgetPeriodBalance.parmUnpostedActualAmountMST(reliefAmount + budgetPeriodBalance.parmUnpostedActualAmountMST());
                        }
                    }
                    break;

                case BudgetControlCategory::Encumbrance:
                    if (relievedStatus == BudgetSourceTrackingStatus::Confirmed)
                    {
                        if (relievedBudgetSourceTrackingDetail.IsCarryForward)
                        {
                            budgetPeriodBalance.parmCarryForwardEncumbranceAmountMST(reliefAmount + budgetPeriodBalance.parmCarryForwardEncumbranceAmountMST());
                            carryForwardEncumbranceReliefAmount += reliefAmount;
                        }
                        else
                        {
                            budgetPeriodBalance.parmEncumbranceAmountMST(reliefAmount + budgetPeriodBalance.parmEncumbranceAmountMST());
                            encumbranceReliefAmount += reliefAmount;
                        }
                    }
                    else
                    {
                        if (relievedBudgetSourceTrackingDetail.IsCarryForward)
                        {
                            budgetPeriodBalance.parmDraftCarryForwardEncumbranceAmtMST(reliefAmount + budgetPeriodBalance.parmDraftCarryForwardEncumbranceAmtMST());
                            carryForwardEncumbranceReliefAmount += reliefAmount;
                        }
                        else
                        {
                            budgetPeriodBalance.parmDraftEncumbranceAmountMST(reliefAmount + budgetPeriodBalance.parmDraftEncumbranceAmountMST());
                            encumbranceReliefAmount += reliefAmount;
                        }
                    }
                    break;

                case BudgetControlCategory::EncumbranceReduction:

                    if (relievedStatus == BudgetSourceTrackingStatus::Confirmed)
                    {
                        if (relievedBudgetSourceTrackingDetail.IsCarryForward)
                        {
                            budgetPeriodBalance.parmCarryForwardEncumbranceAmountMST(reliefAmount + budgetPeriodBalance.parmCarryForwardEncumbranceAmountMST());
                            carryForwardEncumbranceReliefAmount += reliefAmount;
                        }
                        else
                        {
                            budgetPeriodBalance.parmEncumbranceAmountMST(reliefAmount + budgetPeriodBalance.parmEncumbranceAmountMST());
                            encumbranceReductionReliefAmount += reliefAmount;
                        }
                    }
                    else
                    {
                        if (relievedBudgetSourceTrackingDetail.IsCarryForward)
                        {
                            budgetPeriodBalance.parmDraftCFEncumbranceReductionAmtMST(reliefAmount + budgetPeriodBalance.parmDraftCFEncumbranceReductionAmtMST());
                            carryForwardEncumbranceReliefAmount += reliefAmount;
                        }
                        else
                        {
                            budgetPeriodBalance.parmDraftEncumbranceReductionAmountMST(reliefAmount + budgetPeriodBalance.parmDraftEncumbranceReductionAmountMST());
                            encumbranceReductionReliefAmount += reliefAmount;
                        }
                    }

                    break;

                case BudgetControlCategory::PreEncumbrance:
                    if (relievedStatus == BudgetSourceTrackingStatus::Confirmed)
                    {
                        budgetPeriodBalance.parmPreEncumbranceAmountMST(reliefAmount + budgetPeriodBalance.parmPreEncumbranceAmountMST());
                    }
                    else
                    {
                        budgetPeriodBalance.parmDraftPreEncumbranceAmountMST(reliefAmount + budgetPeriodBalance.parmDraftPreEncumbranceAmountMST());
                    }

                    preEncumbranceReliefAmount += reliefAmount;
                    break;

                default:
                    // No other categories support relief amounts.
                    break;
            }
        }

        budgetPeriodBalance.parmEncumbranceReliefAmountMST(encumbranceReliefAmount);
        budgetPeriodBalance.parmPreEncumbranceReliefAmountMST(preEncumbranceReliefAmount);
        budgetPeriodBalance.parmEncumbranceReductionReliefAmountMST(encumbranceReductionReliefAmount);
        budgetPeriodBalance.parmCarryForwardEncumbReliefAmountMST(carryForwardEncumbranceReliefAmount);

        return budgetPeriodBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetModelQueryRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prepares the query range value for <c>BudgetModel</c>.
    /// </summary>
    /// <param name="_budgetModel">
    ///     A <c>BudgetModel</c> record.
    /// </param>
    /// <param name="_includeDefaultBudgetModelTransactions">
    ///     A Boolean value that directs the calculation to include default
    ///     budget model budget control tracking data; optional.
    /// </param>
    /// <returns>
    ///     The query range compatible string value for the <c>BudgetModel</c> field in budget control tracking.
    /// </returns>
    public static str getBudgetModelQueryRangeValue(BudgetModel _budgetModel, boolean _includeDefaultBudgetModelTransactions = true)
    {
        str queryRangeValueStr;

        if (strltrim(strrtrim(_budgetModel.ModelId)) == '' &&
            strltrim(strrtrim(_budgetModel.SubModelId)) == '')
        {
            // Budget model and sub model are blank; only query for the default budget model.
            queryRangeValueStr = strfmt('((%1 == %5) && (%2 == %5) && (%3 == %6) && (%4 == %5))',
            fieldstr(BudgetSourceTracking, BudgetModelId),
            fieldstr(BudgetSourceTracking, BudgetModelSubModelId),
            fieldstr(BudgetSourceTracking, BudgetModelType),
            fieldstr(BudgetSourceTracking, BudgetModelDataAreaId),
            SysQuery::valueEmptyString(),
            int2str(enum2int(_budgetModel.Type)));
        }
        else
        {
            if (_includeDefaultBudgetModelTransactions)
            {
                // Include the default budget model in the query results.
                queryRangeValueStr = strfmt('(((%1 == \"%5\") && (%2 == \"%6\") && (%3 == %7) && (%4 == \"%8\")) || ((%1 == %9) && (%2 == %9) && (%3 == %7) && (%4 == %9)))',
                fieldstr(BudgetSourceTracking, BudgetModelId),
                fieldstr(BudgetSourceTracking, BudgetModelSubModelId),
                fieldstr(BudgetSourceTracking, BudgetModelType),
                fieldstr(BudgetSourceTracking, BudgetModelDataAreaId),
                SysQuery::value(_budgetModel.ModelId),
                SysQuery::value(_budgetModel.SubModelId),
                int2str(enum2int(_budgetModel.Type)),
                SysQuery::value(_budgetModel.DataAreaId),
                SysQuery::valueEmptyString());
            }
            else
            {
                // Only query for the specified budget model.
                queryRangeValueStr = strfmt('((%1 == \"%5\") && (%2 == \"%6\") && (%3 == %7) && (%4 == \"%8\"))',
                fieldstr(BudgetSourceTracking, BudgetModelId),
                fieldstr(BudgetSourceTracking, BudgetModelSubModelId),
                fieldstr(BudgetSourceTracking, BudgetModelType),
                fieldstr(BudgetSourceTracking, BudgetModelDataAreaId),
                SysQuery::value(_budgetModel.ModelId),
                SysQuery::value(_budgetModel.SubModelId),
                int2str(enum2int(_budgetModel.Type)),
                SysQuery::value(_budgetModel.DataAreaId));
            }
        }

        return queryRangeValueStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryIncludeCarryforwardQueryValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a query range value string to include carryforward amounts for calculating available budget funds
    ///     for the specified budget control category.
    /// </summary>
    /// <param name="_budgetSourceTrackingDetailDataSourceName">
    ///     A String value for the budget source tracking detail data source where the carryforward amount details
    ///     are stored.
    /// </param>
    /// <param name="_category">
    ///     The budget control category to include carryforward amounts in the calculation.
    /// </param>
    /// <param name="_includeDraft">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking relieving data in a draft status; optional.
    /// </param>
    /// <returns>
    ///     A query range value string to include carryforward amounts in the calculation.
    /// </returns>
    public static str getCategoryIncludeCarryforwardQueryValue(
        str _budgetSourceTrackingDetailDataSourceName,
        BudgetControlCategory _category,
        boolean _includeDraft = false)
    {
        str queryValue;

        if (_includeDraft)
        {
            queryValue = strfmt(
                '(((%1 == %2) || (%1 == %3)) && (%4 == %5) && (%6.%7 == %8))',
                fieldstr(BudgetSourceTracking, Status),
                int2Str(enum2int(BudgetSourceTrackingStatus::Draft)),
                int2str(enum2int(BudgetSourceTrackingStatus::Confirmed)),
                fieldstr(BudgetSourceTracking, Category),
                int2str(enum2int(_category)),
                _budgetSourceTrackingDetailDataSourceName,
                fieldstr(BudgetSourceTrackingDetail, IsCarryForward),
                int2str(enum2int(NoYes::Yes)));
        }
        else
        {
            queryValue = strfmt(
                '((%1 == %2) && (%3 == %4) && (%5.%6 == %7))',
                fieldstr(BudgetSourceTracking, Status),
                int2str(enum2int(BudgetSourceTrackingStatus::Confirmed)),
                fieldstr(BudgetSourceTracking, Category),
                int2str(enum2int(_category)),
                _budgetSourceTrackingDetailDataSourceName,
                fieldstr(BudgetSourceTrackingDetail, IsCarryForward),
                int2str(enum2int(NoYes::Yes)));
        }

        return queryValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryStatusQueryRangeStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the query range value string for the status and category.
    /// </summary>
    /// <param name="_budgetControlCategory">
    ///     A <c>BudgetControlCategory</c> value for the query range value string.
    /// </param>
    /// <param name="_includeConfirmed">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data in a confirmed status; optional.
    /// </param>
    /// <param name="_includeDraft">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data in a draft status; optional.
    /// </param>
    /// <returns>
    ///     A query range value string for the status and category.
    /// </returns>
    public static str getCategoryStatusQueryRangeStr(
        BudgetControlCategory _budgetControlCategory,
        boolean _includeConfirmed = true,
        boolean _includeDraft = true)
    {
        str statusCategoryQueryRangeValueStr;

        if (_includeConfirmed && _includeDraft)
        {
            // Include both draft and confirmed budget source tracking records and the specified category in the query results.
            statusCategoryQueryRangeValueStr = strfmt('(((%1 == %2) || (%1 == %3)) && (%4 == %5) && (%6.%7 == %8))',
                                                        fieldstr(BudgetSourceTracking, Status),
                                                        int2str(enum2int(BudgetSourceTrackingStatus::Draft)),
                                                        int2str(enum2int(BudgetSourceTrackingStatus::Confirmed)),
                                                        fieldstr(BudgetSourceTracking, Category),
                                                        int2str(enum2int(_budgetControlCategory)),
                                                        #budgetSourceTrackingDetail,
                                                        fieldstr(BudgetSourceTrackingDetail, IsCarryForward),
                                                        int2str(enum2int(NoYes::No)));
        }
        else if (_includeConfirmed)
        {
            // Include confirmed budget source tracking records and the specified category in the query results.
            statusCategoryQueryRangeValueStr = strfmt('((%1 == %2) && (%3 == %4) && (%5.%6 == %7))',
                                                        fieldstr(BudgetSourceTracking, Status),
                                                        int2str(enum2int(BudgetSourceTrackingStatus::Confirmed)),
                                                        fieldstr(BudgetSourceTracking, Category),
                                                        int2str(enum2int(_budgetControlCategory)),
                                                        #budgetSourceTrackingDetail,
                                                        fieldstr(BudgetSourceTrackingDetail, IsCarryForward),
                                                        int2str(enum2int(NoYes::No)));
        }
        else
        {
            // Include draft budget source tracking records and the specified category in the query results.
            statusCategoryQueryRangeValueStr = strfmt('((%1 == %2) && (%3 == %4) && (%5.%6 == %7))',
                                                        fieldstr(BudgetSourceTracking, Status),
                                                        int2str(enum2int(BudgetSourceTrackingStatus::Draft)),
                                                        fieldstr(BudgetSourceTracking, Category),
                                                        int2str(enum2int(_budgetControlCategory)),
                                                        #budgetSourceTrackingDetail,
                                                        fieldstr(BudgetSourceTrackingDetail, IsCarryForward),
                                                        int2str(enum2int(NoYes::No)));
        }

        return statusCategoryQueryRangeValueStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncludeCarryforwardQueryValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a query range value string to include carryforward amounts for calculating available budget funds.
    /// </summary>
    /// <param name="_includeCarryforwardAmounts">
    ///     A Boolean value that indicates whether to include carryforward
    ///     budget control tracking data; optional.
    /// </param>
    /// <returns>
    ///     A query range value string for carryforward amounts.
    /// </returns>
    public static str getIncludeCarryforwardQueryValueStr(boolean _includeCarryforwardAmounts)
    {
        str includeCarryforwardAmountsQueryRange;

        if (_includeCarryforwardAmounts)
        {
            includeCarryforwardAmountsQueryRange = strfmt(
                '((%1 == %2) || (%1 == %3))',
                fieldstr(BudgetSourceTrackingDetail, IsCarryForward),
                int2str(enum2int(NoYes::Yes)),
                int2str(enum2int(NoYes::No)));
        }
        else
        {
            includeCarryforwardAmountsQueryRange = int2str(enum2int(NoYes::No));
        }

        return includeCarryforwardAmountsQueryRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsSimulationQueryRangeValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the query range value string for the simulation status.
    /// </summary>
    /// <param name="_includeIsSimulation">
    ///    A Boolean value that specifies whether to include simulation budget control tracking data in the
    ///    calculation.
    /// </param>
    /// <returns>
    ///    A query range value string for the simulation status.
    /// </returns>
    protected static str getIsSimulationQueryRangeValueStr(boolean _includeIsSimulation)
    {
        str isSimulationQueryRangeValueStr;

        if (_includeIsSimulation)
        {
            // Include both simulation and non-simulation budget source tracking records in the query results.
            isSimulationQueryRangeValueStr = strfmt(
                '((%1 == %2) || (%1 == %3))',
                fieldstr(BudgetSourceTracking, IsSimulation),
                int2str(enum2int(NoYes::No)),
                int2str(enum2int(NoYes::Yes)));
        }
        else
        {
            // Only query for not simulation budget source tracking records.
            isSimulationQueryRangeValueStr = int2str(enum2int(NoYes::No));
        }

        return isSimulationQueryRangeValueStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelievedCategoryStatusQueryRangeStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the query range value string for the status and category for the relieved budget funds calculation.
    /// </summary>
    /// <param name="_budgetControlCategory">
    ///     A <c>BudgetControlCategory</c> value for the query range value string.
    /// </param>
    /// <param name="_includeIsDraftNo">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data not in a draft status; optional.
    /// </param>
    /// <param name="_includeIsDraftYes">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data in a draft status; optional.
    /// </param>
    /// <returns>
    ///     A query range value string for the status and category.
    /// </returns>
    public static str getRelievedCategoryStatusQueryRangeStr(
        BudgetControlCategory _budgetControlCategory,
        boolean _includeIsDraftNo = true,
        boolean _includeIsDraftYes = true)
    {
        str isDraftCategoryQueryRangeValueStr;

        if (_includeIsDraftNo && _includeIsDraftYes)
        {
            // Include both draft and not draft budget source tracking records and the specified category in the query results.
            isDraftCategoryQueryRangeValueStr = strfmt('(((%1 == %2) || (%1 == %3)) && (%4 == %5) && (%6.%7 == %8))',
                                                        fieldstr(BudgetSourceTracking, Status),
                                                        int2str(enum2int(BudgetSourceTrackingStatus::Confirmed)),
                                                        int2str(enum2int(BudgetSourceTrackingStatus::Draft)),
                                                        fieldstr(BudgetSourceTracking, Category),
                                                        int2str(enum2int(_budgetControlCategory)),
                                                        #budgetSourceTrackingDetail_Relieved,
                                                        fieldstr(BudgetSourceTrackingDetail, IsCarryForward),
                                                        int2str(enum2int(NoYes::No)));
        }
        else if (_includeIsDraftNo && !_includeIsDraftYes)
        {
            // Include not draft budget source tracking records and the specified category in the query results.
            isDraftCategoryQueryRangeValueStr = strfmt('((%1 == %2) && (%3 == %4) && (%5.%6 == %7))',
                                                        fieldstr(BudgetSourceTracking, Status),
                                                        int2str(enum2int(BudgetSourceTrackingStatus::Confirmed)),
                                                        fieldstr(BudgetSourceTracking, Category),
                                                        int2str(enum2int(_budgetControlCategory)),
                                                        #budgetSourceTrackingDetail_Relieved,
                                                        fieldstr(BudgetSourceTrackingDetail, IsCarryForward),
                                                        int2str(enum2int(NoYes::No)));
        }
        else if (!_includeIsDraftNo && _includeIsDraftYes)
        {
            // Include both draft budget source tracking records and the specified category in the query results.
            isDraftCategoryQueryRangeValueStr = strfmt('((%1 == %2) && (%3 == %4) && (%5.%6 == %7))',
                                                        fieldstr(BudgetSourceTracking, Status),
                                                        int2str(enum2int(BudgetSourceTrackingStatus::Draft)),
                                                        fieldstr(BudgetSourceTracking, Category),
                                                        int2str(enum2int(_budgetControlCategory)),
                                                        #budgetSourceTrackingDetail_Relieved,
            fieldstr(BudgetSourceTrackingDetail, IsCarryForward),
                                                        int2str(enum2int(NoYes::No)));
        }

        return isDraftCategoryQueryRangeValueStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusQueryRangeValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the query range value string for the status.
    /// </summary>
    /// <param name="_includeConfirmed">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data in a confirmed status; optional.
    /// </param>
    /// <param name="_includeDraft">
    ///     A Boolean value that directs the calculation to include budget control
    ///     tracking data in a draft status; optional.
    /// </param>
    /// <returns>
    ///     A query range value string for the status.
    /// </returns>
    protected static str getStatusQueryRangeValueStr(
        boolean _includeConfirmed = true,
        boolean _includeDraft = true)
    {
        str statusQueryRangeValueStr;

        if (_includeConfirmed && _includeDraft)
        {
            // Include both draft and confirmed budget source tracking records in the query results.
            statusQueryRangeValueStr = strfmt('((%1 == %2) || (%1 == %3))',
                fieldstr(BudgetSourceTracking, Status),
                int2str(enum2int(BudgetSourceTrackingStatus::Draft)),
                int2str(enum2int(BudgetSourceTrackingStatus::Confirmed)));
        }
        else if (_includeConfirmed)
        {
            // Only query for confirmed budget source tracking records.
            statusQueryRangeValueStr = int2str(enum2int(BudgetSourceTrackingStatus::Confirmed));
        }
        else
        {
            // Only query for draft budget source tracking records.
            statusQueryRangeValueStr = int2str(enum2int(BudgetSourceTrackingStatus::Draft));
        }

        return statusQueryRangeValueStr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>