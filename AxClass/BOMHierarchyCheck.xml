<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMHierarchyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomHierarchyCheck extends BOMHierarchy
{
    container       checkStructure;
    Level           maxCheckedLevel;

    boolean         checkValidate;  // Should validateWrite() be called

    BOMDependencyManager    bomDependencyManager;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBOMConsistOf</Name>
				<Source><![CDATA[
    public boolean checkBOMConsistOf(
        BOMId           _bomId,
        Level           _maxLevels  = 0,
        StartDate       _fromDate   = dateNull(),
        EndDate         _toDate     = dateMax()
        )
    {
        this.reset();

        checkValidate = true;

        return this.bomConsistOf(_bomId,_maxLevels,_fromDate,_toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCircularity</Name>
				<Source><![CDATA[
    public boolean checkCircularity(
        BOMId                       _bomId           = '',
        ItemId                      _childItem       = '',
        EcoResItemConfigurationName _childConfig     = '',
        StartDate                   _fromDate        = dateNull(),
        EndDate                     _toDate          = dateMax(),
        BOMId                       _childBomId      = '',
        BomCircularityCheckStrategy _bomCircularityCheckStrategy = BOMParameters::find().bomCircularityCheckStrategy)
    {
        BomInstrumentationLogger logger = BomInstrumentationLogger::createLogger(classStr(BomHierarchyCheck));
        boolean                  hasCircularDependency;

        using(var activityContext = logger.bom().circularityCheck())
        {
            logger.logInformation(strFmt("BOMId %1 %2 circularity check", _bomId, _bomCircularityCheckStrategy));

            switch (_bomCircularityCheckStrategy)
            {
                case BOMCircularityCheckStrategy::OptimizeForLowComplexity:
                    checkValidate = false;
                    hasCircularDependency = !this.checkPartOf(_bomId, _childItem, _childConfig, 0, _fromDate, _toDate);
                    if (!hasCircularDependency)
                    {
                        this.reset();
                        hasCircularDependency = !this.bomConsistOf(_bomId, 0, _fromDate, _toDate);
                    }
                    break;

                case BOMCircularityCheckStrategy::OptimizeForHighComplexity:
                    str itemToCheck;
                    str bomToCheck;

                    if (_childItem == '' && _childBomId == '')
                    {
                        bomToCheck = _bomId;
                    }
                    else
                    {
                        bomToCheck = _childBomId;
                        itemToCheck = _childItem;
                    }
                    hasCircularDependency = this.parmBOMDependencyManager().bomHasCircularDependency(bomToCheck, itemToCheck, _childConfig, _fromDate, _toDate);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            if (hasCircularDependency)
            {
                error("@SYS105115");
            }
            this.addCircularityCheckActivityContext(activityContext, hasCircularDependency);
        }

        return !hasCircularDependency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPartOf</Name>
				<Source><![CDATA[
    public boolean checkPartOf(
        BOMId                       _bomId           = '',
        ItemId                      _childItem       = '',
        EcoResItemConfigurationName _childConfig     = '',
        Level                       _maxLevels       = 0,
        StartDate                   _fromDate        = dateNull(),
        EndDate                     _toDate          = dateMax()
        )
    {
        this.reset();

        if (_childItem)
        {
            if (! this.insert(_childItem,_childConfig))
            {
                return false;
            }
        }

        return this.bomPartOf(_bomId,_maxLevels,_fromDate,_toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(
        ItemId                      itemId,
        EcoResItemConfigurationName configId
             )
    {
        Integer num        = confind(checkStructure,[itemId,configId]);

        checkStructure    = condel(checkStructure,num,1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    protected boolean insert(ItemId                         itemId,
                             EcoResItemConfigurationName    configId
                            )
    {
        if (confind(checkStructure,[itemId,configId]))
        {
            if (InventTable::find(itemId).isFormulaAllowed())
            {
                return checkFailed(strfmt("@PRO980",itemId));
            }
            else
            {
                return checkFailed(strfmt("@SYS18964",itemId));
            }
        }

        checkStructure= conins(checkStructure,maxint(),[itemId,configId]);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        BOMRouteVersionSelectAll    _versionSelect      = BOMRouteVersionSelectAll::Active,
        boolean                     _searchInterval     = true,
        boolean                     _warningIfMaxLevel  = false,
        boolean                     _onlyApproved       = false
        )
    {
        super(_versionSelect,_searchInterval,_warningIfMaxLevel,true,_onlyApproved);

        checkValidate = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        checkStructure = connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownVersion</Name>
				<Source><![CDATA[
    public boolean scanDownVersion(
        BOM                         _bom,
        ItemId                      _fatherItemId,
        EcoResItemConfigurationName _fatherConfigId,
        TransDate                   _fromDate,
        TransDate                   _toDate,
        InventSiteId                _siteId = '',
        guid                        _bomIdentifier = newGuid()
        )
    {
        boolean ret = true;

        if (! this.insert(_bom.ItemId,''))
        {
            return false;
        }

        if (! super(_bom, _fatherItemId, _fatherConfigId, _fromDate, _toDate, _siteId, _bomIdentifier))
        {
            return false;
        }

        this.delete(_bom.ItemId,'');

        if (checkValidate)
        {
            ret = _bom.validateWrite(false) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanUpBOM</Name>
				<Source><![CDATA[
    public boolean scanUpBOM(
        BOMVersion                  _version,
        EcoResItemConfigurationName _config,
        TransDate                   _fromDate,
        TransDate                   _toDate,
        PmfFormulaCoBy              _coBy = null
        )
    {
        List                            releasedConfigurations;
        ListEnumerator                  configurationsEnumerator;
        EcoResProductVariantDimValue    ecoResProductVariantDimValue;
        boolean                         ret = true;
        ItemId                          checkItemId;

        if (_coBy.ItemId)
        {
            checkItemId = _coBy.ItemId;
        }
        else
        {
            checkItemId = _version.ItemId;
        }
        if (!this.insert(checkItemId,_config))
        {
            return false;
        }

        if (!super(_version, _config, _fromDate, _toDate, _coBy))
        {
            return false;
        }

        this.delete(checkItemId, _config);

        ecoResProductVariantDimValue    =   EcoResProductVariantDimValue::newProductVariantDim_ConfigId();
        releasedConfigurations          =   ecoResProductVariantDimValue.getDimValues(InventTable::itemProduct(checkItemId));
        configurationsEnumerator        =   releasedConfigurations.getEnumerator();

        while (configurationsEnumerator.moveNext())
        {
            if (!(confind(checkStructure,[checkItemId,configurationsEnumerator.current()])))
            {
                if (!this.insert(checkItemId, configurationsEnumerator.current()))
                {
                    return false;
                }

                if (!super(_version, configurationsEnumerator.current(), _fromDate, _toDate, _coBy))
                {
                    return false;
                }

                this.delete(checkItemId, configurationsEnumerator.current());
            }
        }

        if (checkValidate)
        {
            if (_coBy.ItemId)
            {
                ret = _coBy.validateWrite() && ret;
            }
            else
            {
                ret = _version.validateWrite() && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanUpVersion</Name>
				<Source><![CDATA[
    protected boolean scanUpVersion(
        BOM             bom,
        TransDate       fromDate,
        TransDate       toDate
        )
    {
        boolean ret = true;

        if (presLevel > maxCheckedLevel)
        {
            maxCheckedLevel = presLevel;
        }

        ret = super(bom,fromDate,toDate) && ret;
        if (checkValidate)
        {
            ret = bom.validateWrite(false)   && ret;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the BOM is valid.
    /// </summary>
    /// <param name="_bomId">
    ///    The ID of the BOM structure to check.
    /// </param>
    /// <param name="_checkCircularity">
    ///    A Boolean value that indicates whether the BOM should be checked for circularity; optional.
    /// </param>
    /// <param name="_checkInterval">
    ///    A Boolean value that indicates a date interval should be used when checking the BOM; optional.
    /// </param>
    /// <param name="_checkDate">
    ///    true if when checking in a specific date interval the date should also be given; otherwise, false;
    ///    optional.
    /// </param>
    /// <param name="_checkOnlyApproved">
    ///    true if a BOMs has been approved; otherwise, false; optional.
    /// </param>
    /// <param name="_bomDependencyManager">
    ///    A <c>BOMDependencyManager</c> instance to use for circularity check; optional.
    /// </param>
    /// <returns>
    ///    true if the BOM is valid; otherwise, false.
    /// </returns>
    public static boolean checkBOM(
        BOMId       _bomId,
        boolean     _checkCircularity    = false,
        boolean     _checkInterval       = false,
        date        _checkDate           = dateNull(),
        boolean                 _checkOnlyApproved      = false,
        BOMDependencyManager    _bomDependencyManager   = null
        )
    {
        BOMHierarchyCheck   check;
        boolean             ok = true;

        setprefix("@SYS11781");
        setprefix(fieldLabelValue(tablenum(BOMTable), fieldnum(BOMTable,bomId), _bomId));

        check = new BOMHierarchyCheck(BOMRouteVersionSelectAll::Active, _checkInterval, true,_checkOnlyApproved);
        check.parmBOMDependencyManager(_bomDependencyManager);

        if (_checkCircularity)
        {
            ok = check.checkCircularity(_bomId, '', '', _checkDate, _checkDate);
        }

        ok = check.checkBOMConsistOf(_bomId, 1, _checkDate, _checkDate) && ok;

        if (_checkCircularity && !_checkInterval)
        {
            BOMTable::setCheckBOM(_bomId, ok);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMCircularity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the BOM for circularity.
    /// </summary>
    /// <param name="_bomId">
    ///    The ID of the BOM structure to check.
    /// </param>
    /// <returns>
    ///    true if the BOM is valid; otherwise, false.
    /// </returns>
    public static boolean checkBOMCircularity(BOMId _bomId)
    {
        return BOMHierarchyCheck::newBOMcheckNotCircularity().checkCircularity(_bomId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMcheckNotCircularity</Name>
				<Source><![CDATA[
    public static BOMHierarchyCheck newBOMcheckNotCircularity()
    {
        return new BOMHierarchyCheck(BOMRouteVersionSelectAll::All,true,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMDependencyManager</Name>
				<Source><![CDATA[
    public BOMDependencyManager parmBOMDependencyManager(BOMDependencyManager _bomDependencyManager = bomDependencyManager)
    {
        bomDependencyManager = _bomDependencyManager;

        if (bomDependencyManager == null)
        {
            bomDependencyManager = BOMDependencyManager::construct();
        }

        bomDependencyManager.initFromBomHierarchyCheck(this);

        return bomDependencyManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCircularityCheckActivityContext</Name>
				<Source><![CDATA[
    private void addCircularityCheckActivityContext(SysInstrumentationActivityContext _activityContext, boolean _hasCircularDependency)
    {
        BOMParameters bomParameters = BOMParameters::find();

        _activityContext.addCustomProperty('HasCircularDependency', any2Str(_hasCircularDependency))
                        .addCustomProperty('BOMMaxLevel', int2Str(bomParameters.BOMMaxLevel))
                        .addCustomProperty('CheckBOMWhen', enum2Symbol(enumNum(BOMCheckLevel), enum2int(bomParameters.CheckBOMWhen)))
                        .addCustomProperty('BOMRouteVersionSelectAll', enum2Symbol(enumNum(BOMRouteVersionSelectAll), this.parmVersionSelect()))
                        .addCustomProperty('OnlyApproved', any2Str(this.parmOnlyApproved()));

        if (bomDependencyManager)
        {
            _activityContext.addCustomProperty('IsHighComplexityGraphRebuildSucceeded', any2Str(bomDependencyManager.isRebuildSucceeded()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWaitDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Shows a wait dialog.
    /// </summary>
    /// <param name="_text">
    ///     The text to display on the wait dialog.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>SysOperationProgress</c> class.
    /// </returns>
    public static SysOperationProgress showWaitDialog(str _text = "@SYS27677")
    {
        #AviFiles
        SysOperationProgress waitDialog;

        waitDialog = new SysOperationProgress(1, true, strLen(_text));

        waitDialog.setCaption("@SYS27679");
        waitDialog.setTotal(100);
        waitDialog.setCount(1);
        waitDialog.setText(_text);

        return waitDialog;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>