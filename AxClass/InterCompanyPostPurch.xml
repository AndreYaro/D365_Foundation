<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyPostPurch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InterCompanyPostPurch extends InterCompanyPost
{
    SalesFormLetter salesFormLetter;
    PurchFormLetter purchFormLetter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formLetterUpdate</Name>
				<Source><![CDATA[
    void formLetterUpdate()
    {
        PurchTable      localPurchTable;
        MapEnumerator   mapPurchTableEnumerator = interCompanyMapRecord.map().getEnumerator();
        List            confirmedPurchTableList = new List(Types::Record);

        // PO markup allocation and confirmation if needed.
        while (mapPurchTableEnumerator.moveNext())
        {
            localPurchTable = mapPurchTableEnumerator.currentValue();

            if (localPurchTable.isInterCompanyOrder() && localPurchTable.InterCompanyDirectDelivery && !this.fromFormLetter().proforma())
            {
                this.interCompanyMarkupAllocationForPO(localPurchTable, interCompanyJour.DocumentNum, this.toFormLetter().transDate());
                localPurchTable.reread();
            }

            if (localPurchTable.DocumentState != VersioningDocumentState::Confirmed)
            {
                var purchFormLetterConfirm = PurchFormLetter::construct(DocumentStatus::PurchaseOrder);
                purchFormLetterConfirm.interCompanyPosted(NoYes::Yes);
                purchFormLetterConfirm.update(localPurchTable, interCompanyJour.DocumentNum);

                localPurchTable.reread();
                confirmedPurchTableList.addEnd(localPurchTable);
            }
        }

        // Refresh interCompanyMapRecord to contain the confirmed PurchTable records.
        ListEnumerator confirmedPurchTableListEnumerator = confirmedPurchTableList.getEnumerator();
        while (confirmedPurchTableListEnumerator.moveNext())
        {
            localPurchTable = confirmedPurchTableListEnumerator.current();
            interCompanyMapRecord.insert(localPurchTable);
            toFormLetter.interCompanyMap(interCompanyMapRecord.map());
        }

        super();

        if (this.fromFormLetter().proforma())
        {
            formletterPrintout = fromFormLetter.printFormLetter();
            usePrintManagement = false;
        }

        SalesFormLetter localSalesFormLetter = this.fromFormLetter() as SalesFormLetter;
        PurchFormLetter localPurchFormLetter = this.initializePurchFormLetterForUpdate(localSalesFormLetter);
        
        localPurchFormLetter.update(null,
                                   interCompanyJour.DocumentNum,
                                   interCompanyJour.DocumentDate,
                                   this.purchUpdate(),
                                   PurchParameters::find().SummaryUpdateBy,
                                   this.fromFormLetter().proforma(),
                                   formletterPrintout,
                                   usePrintManagement,
                                   localSalesFormLetter.salesParmUpdate().CreditRemaining,
                                   this.conTmpFrmVirtual());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchFormLetterForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchFormLetter</c> object.
    /// </summary>
    /// <param name = "_localSalesFormLetter">A <c>SalesFormLetter</c>.</param>
    /// <returns>An instance of <c>PurchFormLetter</c> object.</returns>
    protected PurchFormLetter initializePurchFormLetterForUpdate(SalesFormLetter _localSalesFormLetter)
    {
        PurchFormLetter localPurchFormLetter = this.toFormLetter() as PurchFormLetter;
        localPurchFormLetter.interCompanyNoSalesFormletterUpdate(true);
        // set reArrangeNow value from fromFormletter
        localPurchFormLetter.reArrangeNow(_localSalesFormLetter.sumBy() != AccountOrder::None);

        return localPurchFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromFormLetter</Name>
				<Source><![CDATA[
    FormLetterServiceController fromFormLetter()
    {
        salesFormLetter = fromFormLetter;
        return salesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkupAllocationForPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates various charges on an intercompany purchase order.
    /// </summary>
    /// <param name="_purchTable">
    ///    The purchase order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the document that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the document that triggers the allocation.
    /// </param>
    protected void interCompanyMarkupAllocationForPO(PurchTable _purchTable, Num _docNum, TransDate _transDate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchUpdate</Name>
				<Source><![CDATA[
    protected PurchUpdate purchUpdate()
    {
        PurchUpdate     purchUpdate = PurchUpdate::All;
        if (transferFromJournal)
        {
            purchUpdate = PurchUpdate::PackingSlip;
        }
        return purchUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toFormLetter</Name>
				<Source><![CDATA[
    FormLetterServiceController toFormLetter()
    {
        purchFormLetter = toFormLetter;
        return purchFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toFormLetterNew</Name>
				<Source><![CDATA[
    FormLetterServiceController toFormLetterNew()
    {
        toFormLetter = PurchFormLetter::construct(this.documentStatus());
        return toFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toTable</Name>
				<Source><![CDATA[
    Common toTable(Common _common = purchTable)
    {
        purchTable = _common;
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InterCompanyPostPurch construct(FormLetterContract _formLetter     = null,
                                           Common             _record         = null,
                                           RecordSortedList   _journalList    = null,
                                           boolean            _intercompany   = false)
    {
        DocumentStatus documentStatus = _formLetter.getDocumentStatus();

        if (InterCompanyPostPurch::isInterCompanyPostingNotSupported(DocumentStatus))
        {
            return null;
        }

        DocumentStatusFactoryAttribute attr = new DocumentStatusFactoryAttribute(documentStatus);
        SysExtensionGenericInstantiation instantiation = new SysExtensionGenericInstantiation(_formLetter, _record, _journalList, _intercompany);
        InterCompanyPostPurch handler = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(InterCompanyPostPurch), attr, instantiation) as InterCompanyPostPurch;

        if (classIdGet(handler) == classNum(InterCompanyPostPurch))
        {
            throw error(strfmt("@SYS19306",funcname()));
        }

        return handler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyPostingNotSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the intercompany posting is supported or not.
    /// </summary>
    /// <param name = "_documentStatus">
    /// The <c>DocumentStatus</c> value.
    /// </param>
    /// <returns>
    /// true, if the intercompany posting is supported; otherwise, false.
    /// </returns>
    protected static boolean isInterCompanyPostingNotSupported(DocumentStatus _documentStatus)
    {
        return _documentStatus == DocumentStatus::ProjectPackingSlip || _documentStatus == DocumentStatus::ProjectInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    static void post(FormLetterContract  _formLetter     = null,
                     Common              _record         = null,
                     RecordSortedList    _journalList    = null,
                     boolean             _intercompany   = false)
    {
        InterCompanyPostPurch interCompanyPostPurch;
        interCompanyPostPurch = InterCompanyPostPurch::construct(_formLetter,_record,_journalList,_intercompany);
        if (interCompanyPostPurch)
        {
            interCompanyPostPurch.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>