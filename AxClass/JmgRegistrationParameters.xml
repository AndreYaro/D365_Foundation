<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgRegistrationParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Helper class used when making registration in Shop Floor Control. It holds a number of optional
///    parameters to a registration.
/// </summary>
/// <remarks>
///       The optional parameters include the following:
///    <list type="table">
///       <listHeader>
///          <description>Type</description><description>Description</description>
///       </listHeader>
///       <item>
///          <description><paramref name="costCategory" /></description><description>The cost category reported
///          on project job registrations. The default value is the empty string.</description>
///       </item>
///       <item>
///          <description><paramref name="errorSpecification" /></description><description>The error quantities
///          reported on production jobs. The default value is the empty string.</description>
///       </item>
///       <item>
///          <description><paramref name="goodQuantity" /></description><description>The good quantities
///          reported on production jobs. The default value is 0.0.</description>
///       </item>
///       <item>
///          <description><paramref name="jobIdAbsence" /></description><description>The absence ID reported on
///          clock-in and clock-out registrations. The default value is the empty string.</description>
///       </item>
///       <item>
///          <description><paramref name="jobPilot" /></description><description>The pilot Worker ID reported
///          on start-assistance registrations. The default value is 0.</description>
///       </item>
///       <item>
///          <description>
///             <paramref name="reportAsFinished" />
///          </description>
///          <description>
///             Indicates whether a production job should be reported as finished. The default value is
///             <c>JmgNoneNoYesEnum::None</c>.
///          </description>
///       </item>
///       <item>
///          <description><paramref name="startQuantity" /></description><description>The start quantities
///          reported on production jobs. The default value is 0.0.</description>
///       </item>
///       <item>
///          <description><paramref name="wHSLicensePlateId" /></description>
///          <description>The license plate for where the produced item will be placed. The default is blank.</description>
///       </item>
///       <item>
///          <description><paramref name="wrkCtrId" /></description><description>The work center ID reported on
///          production and project jobs. The default value is the empty string.</description>
///       </item>
///       <item>
///          <description><paramref name="wrkCtrIdPilot" /></description><description>The work center ID which is used as pilot.
///          The default value is the empty string.</description>
///       </item>
///    </list>
///       A new instance of
///    <c>
///       JmgRegistrationParameters
///    </c>
///       , which is instantiated by using the JmgRegistrationParameters.new method, have all parameters set to their default value. If the optional registration parameters should be derived from an existing registration (that is, from a record in t
///    <c>
///       JmgRegistrationParameters
///    </c>
///       class should be instantiated by using the JmgRegistrationParameters::newFromJmgTermReg method.
/// </remarks>
[DataContract]
class JmgRegistrationParameters
{
    // Production related parameters
    Qty                                     startQuantity;
    Qty                                     goodQuantity;
    JmgErrorSpecification                   errorSpecification;
    ProdJournalIdBOM                        prodJournalIdBOM;

    PdsCWInventQty                          pdsCWStartQuantity;
    PdsCWInventQty                          pdsCWGoodQuantity;

    WHSLicensePlateId                       wHSLicensePlateId;
    private InventBatchId                   inventBatchId;
    private InventSerialId                  inventSerialId;
    private boolean                         serialNumberRequired;
    private JmgTmpSerialNumberSpecification serialNumberSpecification;
    private JmgTmpJobBundleProdFeedback     coByProductFeedback;

    // Project related parameters
    ProjCategoryId                          costCategory;

    // SFC related parameters
    JmgJobId                                jobIdAbsence;
    JmgWorkerRecId                          jobPilot;

    // Common parameters
    JmgFeedbackStatus                       reportAsFinished;
    WrkCtrId                                wrkCtrId;
    JmgWrkCtrIdPilot                        wrkCtrIdPilot;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the project cost category parameter.
    /// </summary>
    /// <param name="_costCategory">
    ///    The project cost category parameter to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the cost category parameter.
    /// </returns>
    [DataMember('CostCategory')]
    public ProjCategoryId costCategory(ProjCategoryId _costCategory = costCategory)
    {
        costCategory = _costCategory;
        return costCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the error specification parameter.
    /// </summary>
    /// <param name="_errorSpecification">
    ///    An encoded value of error quantities and error causes; optional. For more information, see <see
    ///    cref="T:JmgErrorSpecificationForm" /> class.
    /// </param>
    /// <returns>
    ///    The value of the error specification parameter.
    /// </returns>
    [DataMember('ErrorSpecification')]
    public JmgErrorSpecification errorSpecification(JmgErrorSpecification _errorSpecification = errorSpecification)
    {
        errorSpecification = _errorSpecification;
        return errorSpecification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>goodQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the <paramref name="_goodQuantity" /> parameter.
    /// </summary>
    /// <param name="_goodQuantity">
    ///    The good quantity value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="_goodQuantity" /> parameter.
    /// </returns>
    [DataMember('GoodQuantity')]
    public Qty goodQuantity(Qty _goodQuantity = goodQuantity)
    {
        goodQuantity = _goodQuantity;
        return goodQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobIdAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the <paramref name="_jobIdAbsence" /> parameter.
    /// </summary>
    /// <param name="_jobIdAbsence">
    ///    The absence job ID value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="_jobIdAbsence" /> parameter.
    /// </returns>
    [DataMember('JobIdAbsence')]
    public JmgJobId jobIdAbsence(JmgJobId _jobIdAbsence = jobIdAbsence)
    {
        jobIdAbsence = _jobIdAbsence;
        return jobIdAbsence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobPilot</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the <paramref name="_jobPilot" /> parameter.
    /// </summary>
    /// <param name="_jobPilot">
    ///    The employee ID value to set as the job pilot; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="_jobPilot" /> parameter.
    /// </returns>
    [DataMember('JobPilot')]
    public JmgWorkerRecId jobPilot(JmgWorkerRecId _jobPilot = jobPilot)
    {
        jobPilot = _jobPilot;
        return jobPilot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
void new()
    {
        startQuantity       = 0;
        goodQuantity        = 0;
        errorSpecification  = '';
        prodJournalIdBOM    = '';
        wHSlicensePlateId   = '';
        inventBatchId       = '';
        costCategory        = '';
        jobIdAbsence        = '';
        jobPilot            = 0;
        reportAsFinished    = JmgFeedbackStatus::InProgress;
        wrkCtrId            = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWrkCtrIdPilot</Name>
				<Source><![CDATA[
    public JmgWrkCtrIdPilot parmWrkCtrIdPilot(WrkCtrId _value = wrkCtrIdPilot)
    {
        wrkCtrIdPilot = _value;
        return wrkCtrIdPilot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWGoodQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or retrieves the <paramref name="_pdsCWGoodQuantity" /> parameter.
    /// </summary>
    /// <param name="_pdsCWGoodQuantity">
    ///    The catch weight good quantity value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="_pdsCWGoodQuantity" /> parameter.
    /// </returns>
    [DataMember('PdsCWGoodQuantity')]
    public PdsCWInventQty pdsCWGoodQuantity(PdsCWInventQty _pdsCWGoodQuantity = pdsCWGoodQuantity)
    {
        pdsCWGoodQuantity = _pdsCWGoodQuantity;
        return pdsCWGoodQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWStartQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the <paramref name="_pdsCWStartQuantity" /> parameter.
    /// </summary>
    /// <param name="_pdsCWStartQuantity">
    ///    The catch weight start quantity to be set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="_startQuantity" /> parameter.
    /// </returns>
    [DataMember('PdsCWStartQuantity')]
    public PdsCWInventQty pdsCWStartQuantity(PdsCWInventQty _pdsCWStartQuantity = pdsCWStartQuantity)
    {
        pdsCWStartQuantity = _pdsCWStartQuantity;
        return pdsCWStartQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalIdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the value of the <c>ProdJournalIdBOM</c> parameter.
    /// </summary>
    /// <param name="_prodJournalIdBOM">
    /// The <c>ProdJournalIDBom</c> ID to set; optional.
    /// </param>
    /// <returns>
    /// The current value of the <c>ProdJournalIDBOM</c> parameter.
    /// </returns>
    [DataMember('ProdJournalIdBOM')]
    public ProdJournalIdBOM prodJournalIdBOM(ProdJournalIdBOM _prodJournalIdBOM = prodJournalIdBOM)
    {
        prodJournalIdBOM = _prodJournalIdBOM;
        return prodJournalIdBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the <paramref name="_reportAsFinished" /> parameter.
    /// </summary>
    /// <param name="_reportAsFinished">
    ///    The report as finished value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="_reportAsFinished" /> parameter.
    /// </returns>
    [DataMember('ReportAsFinished')]
    public JmgFeedbackStatus reportAsFinished(JmgFeedbackStatus _reportAsFinished = reportAsFinished)
    {
        reportAsFinished = _reportAsFinished;
        return reportAsFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the <paramref name="_startQuantity" /> parameter.
    /// </summary>
    /// <param name="_startQuantity">
    ///    The start quantity to be set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="_startQuantity" /> parameter.
    /// </returns>
    [DataMember('StartQuantity')]
    public Qty startQuantity(Qty _startQuantity = startQuantity)
    {
        startQuantity = _startQuantity;
        return startQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the <paramref name="_wrkCtrId" /> parameter.
    /// </summary>
    /// <param name="_wrkCtrId">
    ///    The work center ID to be set.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="_wrkCtrId" /> parameter.
    /// </returns>
    [DataMember('WrkCtrId')]
    public WrkCtrId wrkCtrId(WrkCtrId _wrkCtrId = wrkCtrId)
    {
        wrkCtrId = _wrkCtrId;
        return wrkCtrId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructJmgStampTransMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>JmgRegistrationParameters</c> class, which is initialized
    /// with values from the specified <c>JmgStampTransMap</c> record.
    /// </summary>
    /// <param name="_jmgStampTransMap">
    /// The <c>JmgStampTransMap</c> record, which is used during initialization.
    /// </param>
    /// <returns>
    /// A new instance of the <c>JmgRegistrationParameters</c> class, which is initialized
    /// with values from the specified <c>JmgStampTransMap</c> record.
    /// </returns>
    public static JmgRegistrationParameters constructJmgStampTransMap(JmgStampTransMap _jmgStampTransMap)
    {
        JmgRegistrationParameters ret;
        ret = new JmgRegistrationParameters();
        ret.startQuantity(_jmgStampTransMap.QtyStartup);
        ret.goodQuantity(_jmgStampTransMap.QtyGood);
        ret.errorSpecification(_jmgStampTransMap.ErrorSpecification);
        ret.costCategory(_jmgStampTransMap.ProjCategory);
        ret.jobIdAbsence(_jmgStampTransMap.JobIDAbs);
        ret.jobPilot(_jmgStampTransMap.WorkerPilot);
        ret.reportAsFinished((_jmgStampTransMap.JobFinished == NoYes::Yes ? JmgFeedbackStatus::Completed : JmgFeedbackStatus::Stopped));
        ret.wrkCtrId(_jmgStampTransMap.WrkCtrId);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromJmgTermReg</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>JmgRegistrationParameters</c> object based on a <see
    ///    cref="T:JmgTermReg" /> record.
    /// </summary>
    /// <param name="_jmgTermReg">
    ///    The <c>JmgTermReg</c> record that the instance of the <c>JmgRegistrationParameters</c> class is
    ///    initialized from.
    /// </param>
    /// <returns>
    ///    An instance of the <c>JmgRegistrationParameters</c> class that is initialized from the specified
    ///    <paramref name="_jmgTermReg" /> record.
    /// </returns>
    /// <remarks>
    ///    The following table describes the parameter settings.
    ///    <list type="table">
    ///       <listHeader>
    ///          <description>Type</description><description>Description</description>
    ///       </listHeader>
    ///       <item>
    ///          <description>
    ///             <paramref name="costCategory" />
    ///          </description>
    ///          <description>
    ///             Set to the value of <c>JmgTermReg.costCateory</c>.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <paramref name="errorSpecification" />
    ///          </description>
    ///          <description>
    ///             Set to the value of the <c>JmgTermReg.errorSpecification</c> field.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <paramref name="goodQuantity" />
    ///          </description>
    ///          <description>
    ///             Set to the value of the <c>JmgTermReg.goodItems</c> field.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <paramref name="jobIdAbsence" />
    ///          </description>
    ///          <description>
    ///             Set to the value of the <c>JmgTermReg.jobIdAbs</c> field.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <paramref name="jobPilot" />
    ///          </description>
    ///          <description>
    ///             Set to the value of the <c>JmgTermReg.jobPilot</c> field.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <paramref name="reportAsFinished" />
    ///          </description>
    ///          <description>
    ///             Set according to the value of the <c>JmgTermReg.finishedCode</c> field.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <paramref name="startQuantity" />
    ///          </description>
    ///          <description>
    ///             Set to the value of the <c>JmgTermReg.startItems</c> field.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <paramref name="wrkCtrId" />
    ///          </description>
    ///          <description>
    ///             Set to the value of the <c>JmgTermReg.resNo</c> field.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static JmgRegistrationParameters newFromJmgTermReg(JmgTermReg _jmgTermReg)
    {
        JmgRegistrationParameters ret;
        ret = new JmgRegistrationParameters();
        ret.startQuantity(_jmgTermReg.StartItems);
        ret.goodQuantity(_jmgTermReg.GoodItems);

        ret.pdsCWStartQuantity(_jmgTermReg.PdsCWStartItems);
        ret.pdsCWGoodQuantity(_jmgTermReg.PdsCWGoodItems);

        ret.errorSpecification(_jmgTermReg.ErrorSpecification);
        ret.costCategory(_jmgTermReg.CostCategory);
        ret.jobIdAbsence(_jmgTermReg.JobIdAbs);
        ret.jobPilot(_jmgTermReg.WorkerPilot);
        ret.reportAsFinished((_jmgTermReg.FinishedCode == 2 ? JmgFeedbackStatus::Completed : JmgFeedbackStatus::Stopped));
        ret.wrkCtrId(_jmgTermReg.ResNo);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSLicensePlateId</Name>
				<Source><![CDATA[
    [DataMember('WHSLicensePlateId')]
    public WHSLicensePlateId parmWHSLicensePlateId(WHSLicensePlateId _wHSlicensePlateId = wHSLicensePlateId)
    {
        wHSLicensePlateId = _wHSlicensePlateId;
        return wHSLicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBatchId</Name>
				<Source><![CDATA[
    [Hookable(false), DataMember('InventBatchId')]
    internal InventBatchId parmInventBatchId(InventBatchId _inventBatchId = inventBatchId)
    {
        inventBatchId = _inventBatchId;
        return inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSerialNumberRequired</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmSerialNumberRequired(boolean _serialNumberRequired = serialNumberRequired)
    {
        serialNumberRequired = _serialNumberRequired;
        return serialNumberRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSerialNumberSpecification</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal JmgTmpSerialNumberSpecification parmSerialNumberSpecification(JmgTmpSerialNumberSpecification _serialNumberSpecification = serialNumberSpecification)
    {
        serialNumberSpecification = _serialNumberSpecification;
        return serialNumberSpecification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCoByProductFeedback</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isCoByProductFeedback(JmgJobId _jobId)
    {
        JmgTmpJobBundleProdFeedback coByProductFeedbackLocal;
        coByProductFeedbackLocal.setTmpData(coByProductFeedback);

        select firstonly RecId
            from  coByProductFeedbackLocal
            where coByProductFeedbackLocal.JobId == _jobId;

        return coByProductFeedbackLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCoByProductFeedback</Name>
				<Source><![CDATA[
    public JmgTmpJobBundleProdFeedback parmCoByProductFeedback(JmgTmpJobBundleProdFeedback _coByProductFeedback = coByProductFeedback)
    {
        coByProductFeedback = _coByProductFeedback;
        return coByProductFeedback;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>