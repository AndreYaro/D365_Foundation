<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestNoteFormLetterController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustInterestNoteFormLetterController</c> class is the controller class for the
///    <c>CustInterestNote</c> SSRS report.
/// </summary>
class CustInterestNoteFormLetterController extends GiroPrintMgmtFormLetterController implements BatchRetryable, ERIDestinationAwareController
{
    PaymentStub giroType;
    FormLetterReportContract formLetterReportContract;
    CustInterestNoteContract contract;
    private CBDDestinationsController cbdDestinationsController = CBDDestinationsController::tryCreateInstance();
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataContractInfoObjectsInternal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>FormLetterReportContract</c> contract information.
    /// </summary>
    /// <returns>
    ///    A map of the <c>FormLetterReportContract</c> contract information.
    /// </returns>
    protected Map getDataContractInfoObjectsInternal()
    {
        if (!dataContractInfoObjects)
        {
            super();

            formLetterReportContract = new FormLetterReportContract();
            this.addSysOperationDataContractInfo(formLetterReportContract, dataContractInfoObjects);

            if (cbdDestinationsController)
            {
                if (!formLetterReport)
                {
                    this.initFormLetterReport();
                }

                cbdDestinationsController.setHierarchyType(formLetterReport.parmReportRun().parmHierarchyType());
                cbdDestinationsController.setNodeType(formLetterReport.parmReportRun().parmNodeType());
                cbdDestinationsController.setDocumentType(formLetterReport.parmReportRun().parmDocType());
                cbdDestinationsController.setUseAllAvailablePrintSettingDetails(
                    !this.parmArgs()
                    || !this.parmArgs().record()
                    || this.parmArgs().record().TableId != tableNum(CustInterestJour));

                cbdDestinationsController.initERFormatDestinations(this.applyQueryRange(new Query(this.getFirstQuery().pack())), dataContractInfoObjects);
            }
        }
        return dataContractInfoObjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiroType</Name>
				<Source><![CDATA[
    public PaymentStub getGiroType()
    {
        return giroType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance of the form letter object.
    /// </summary>
    /// <remarks>
    ///    This method is called by framework from the <c>startOperation</c> method. It provides the necessary
    ///    construction of the form letter class.The implementation class will override this method to create
    ///    the correct instance and call the <c>super</c> method to start the base class implementation.This
    ///    is a framework class. Customizing this class may cause problems with future upgrades to the
    ///    software.
    /// </remarks>
    public void initFormLetterReport()
    {
        //create an instance of the <c>SalesFormLetterReport_InterestNote</c> class .
        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::CustInterestNote);
        formLetterReport.parmPrintType(PrintCopyOriginal::OriginalPrint);
        formLetterReport.parmReportRun().parmCheckScreenOutput(true);

        if (!contract)
        {
            contract = this.parmReportContract().parmRdpContract() as CustInterestNoteContract;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report for the print management setting that is currently loaded.
    /// </summary>
    /// <remarks>
    ///    The <c>outReports</c> method loops over print management settings and calls this method for each
    ///    print management setting that is loaded.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The print management object has not been initialized.
    /// </exception>
    public void outputReport()
    {
        boolean isCopy;

        isCopy = formLetterReport.getCurrentPrintSetting().parmType() == PrintMgmtDocInstanceType::Copy;

        if (isCopy)
        {
            contract.parmPrintType(SysLabel::labelId2String(literalStr("@SYS108914"), this.parmReportContract().parmRdlContract().parmLanguageId()));
        }
        else
        {
            contract.parmPrintType(SysLabel::labelId2String(literalStr("@SYS108913"), this.parmReportContract().parmRdlContract().parmLanguageId()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormLetterReportContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>CustInterestNote</c> SSRS report data contract instance.
    /// </summary>
    /// <param name="_formLetterReportContract">
    ///    The instance of the <c>FormLetterReportContract</c> contract class; optional.
    /// </param>
    /// <returns>
    ///    The current instance of the <c>FormLetterReportContract</c> contract class.
    /// </returns>
    public FormLetterReportContract parmFormLetterReportContract(FormLetterReportContract _formLetterReportContract = formLetterReportContract)
    {
        formLetterReportContract = _formLetterReportContract;

        return formLetterReportContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the contract before the prompt is called.
    /// </summary>
    public void prePromptModifyContract()
    {
        CustInterestJour selectedRec = this.parmArgs() ? this.parmArgs().record() : null;
        QueryBuildDataSource ds;

        CustBillingClassification custBillingClassification;
        List billingClassificationList;

        if (!contract)
        {
            contract = this.parmReportContract().parmRdpContract() as CustInterestNoteContract;
        }

        if (query)
        {
            ds = query.dataSourceTable(tableNum(CustInterestJour));

            if (selectedRec)
            {
                SysQuery::findOrCreateRange(ds, fieldNum(CustInterestJour, InterestNote)).value(selectedRec.InterestNote);
                SysQuery::findOrCreateRange(ds, fieldNum(CustInterestJour, AccountNum)).value(selectedRec.AccountNum);
                SysQuery::findOrCreateRange(ds, fieldNum(CustInterestJour, Printed)).value(enum2str(selectedRec.Printed));
                SysQuery::findOrCreateRange(ds, fieldNum(CustInterestJour, Status)).value(enum2str(selectedRec.Status));

                if (selectedRec.CustBillingClassification
                    && CustBillingClassificationReportManager::isPublicSectorScenario(contract.parmBillingClassification()))
                {
                    custBillingClassification = CustBillingClassification::find(selectedRec.CustBillingClassification);

                    if (custBillingClassification)
                    {
                        billingClassificationList = new List(Types::String);
                        billingClassificationList.addEnd(custBillingClassification.BillingClassification);
                        contract.parmBillingClassification(billingClassificationList);
                    }
                }

                if (cbdDestinationsController)
                {
                    contract.parmHideSSRSDestination(cbdDestinationsController.getHideSSRSDestinationTab());
                }
            }
            else
            {
                SysQuery::findOrCreateRange(ds, fieldNum(CustInterestJour, InterestNote)).value("");
                SysQuery::findOrCreateRange(ds, fieldNum(CustInterestJour, AccountNum)).value("");
                SysQuery::findOrCreateRange(ds, fieldNum(CustInterestJour, Printed)).value("");
                SysQuery::findOrCreateRange(ds, fieldNum(CustInterestJour, Status)).value("");
            }
        }

        // <GEEPL>
        contract.parmCountryContext(SysCountryRegionCode::countryInfo());
        // </GEEPL>

        this.parmDialogCaption("@SYS8298");
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report by using print management functionality.
    /// </summary>
    public void runPrintMgmt()
    {
        CustTable custTable;
        QueryRun queryRun = new QueryRun(this.getFirstQuery());
        CustInterestJour custInterestJour;

        List bilingClasssificationLocal;
        NoYes inclTransWitNoBillingClass;

        bilingClasssificationLocal = contract.parmBillingClassification();
        inclTransWitNoBillingClass = contract.parmInclTransWithNoBillingClass();

        if (CustBillingClassificationReportManager::isPublicSectorScenario(bilingClasssificationLocal))
        {
            CustBillingClassificationReportManager::setBillingClassificationRanges(queryRun.query().dataSourceTable(tableNum(CustInterestJour)),
                                                                                bilingClasssificationLocal,
                                                                                inclTransWitNoBillingClass,
                                                                                fieldNum(CustInterestJour, CustBillingClassification));
        }

        formLetterReport.parmDefaultCopyPrintJobSettings(this.getReportContract().parmPrintSettings());
        formLetterReport.parmDefaultOriginalPrintJobSettings(this.getReportContract().parmPrintSettings());

        formLetterReport.parmUsePrintMgmtDestinations(formLetterReportContract.parmUsePrintMgmt());

        while (queryRun.next() && !this.parmCancelRun())
        {
            if (queryRun.changed(tableNum(CustInterestJour)))
            {
                custInterestJour = queryRun.get(tableNum(CustInterestJour));

                if (custInterestJour.isAtLeastOneInterestTransactionIncluded())
                {
                    if (!custInterestJour.Updated)
                    {
                        CustInterestNoteFormLetterController::calcTax(custInterestJour.InterestNote, true);
                    }
                    contract.parmRecordId(custInterestJour.RecId);

                    giroType = custInterestJour.GiroType;

                    custTable = CustTable::find(custInterestJour.AccountNum);

                    this.parmReportContract().parmRdlContract().parmLanguageId(custInterestJour.LanguageId);
                    this.parmReportContract().parmRdlContract().parmLabelLanguageId(custInterestJour.LanguageId);

                    formLetterReport.loadPrintSettings(custInterestJour, custTable, custInterestJour.LanguageId, custInterestJour.InterestNote);

                    if (cbdDestinationsController && !formLetterReportContract.parmUsePrintMgmt())
                    {
                        cbdDestinationsController.setERDestinationsInPrintSettings(formLetterReport.parmReportRun());
                    }

                    if (custInterestJour.Printed)
                    {
                        info(strFmt("@SYS66051", custInterestJour.InterestNote));
                    }

                    this.outputReports();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showIndexFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Hides the fields that are included in the first enable index of a table on the query data source of
    ///    the report.
    /// </summary>
    /// <param name="id">
    ///    The ID of the table for which the index field is to be hidden on the <c>CustInterestNote</c> report
    ///    dialog.
    /// </param>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean showIndexFields(TableId id)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculates taxes for the interest note and updates the <c>CustInterestJour</c> record if it was not already posted.
    /// </summary>
    /// <param name="_interestNote">
    /// Interest note value for which the tax needs to be calculated.
    /// </param>
    /// <param name="_update">
    /// Boolean parameter indicating if the <c>CustInterestJour</c> record needs to be updated or not.
    /// </param>
    /// <returns>
    /// An object of type <c>TaxCustInterestNote</c>.
    /// </returns>
    public static TaxCustInterestNote calcTax(InterestNote _interestNote, boolean _update)
    {
        CustInterestJour custInterestJour;
        CustInterestNote custInterestNote;
        TaxCustInterestNote taxCustInterestNote;
        LedgerPostingController ledgerPostingController;
        LedgerVoucher ledgerVoucher;

        if (_update)
        {
            ttsbegin;
        }

        custInterestJour = CustInterestJour::find(_interestNote, _update);

        custInterestNote = new CustInterestNote(custInterestJour);
        taxCustInterestNote = new TaxCustInterestNote(false, custInterestNote, custInterestJour.ToDate);

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                                SysModule::Cust,
                                                                ' ');
        ledgerVoucher.parmCheckBlockedDimensions(false);

        // Tax is calculated using 'End Date' when printing an interest note.
        ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(' ',
                                                      custInterestJour.ToDate,
                                                      SysModule::Cust,
                                                      LedgerTransType::Interest));

        // Dummy controller for LedgerPostingController - since we aren't posting it does nothing
        ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher);

        custInterestJour.TaxAmount = -taxCustInterestNote.calcAndPost(ledgerPostingController);

        if (_update)
        {
            custInterestJour.update();
            ttscommit;
        }

        return taxCustInterestNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustInterestNoteFormLetterController construct()
    {
        return new CustInterestNoteFormLetterController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController reportRunController = new CustInterestNoteFormLetterController();

        reportRunController.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::CustInterestNote).getDefaultReportFormat());
        reportRunController.parmArgs(_args);
        reportRunController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribing to the <c>renderingComplete</c> event.
    /// </summary>
    protected void preRunModifyContract()
    {
        super();
        this.renderingCompleted += eventhandler(CustInterestNoteFormLetterController::renderingComplete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingComplete</Name>
				<Source><![CDATA[
    public static void renderingComplete(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        CustInterestJour custInterestJour;
        InterestNote interestNote;
        Query query;
        QueryRun queryRun;
        FormRun formRun;
        SRSReportExecutionInfo executionInfo = _eventArgs.parmReportExecutionInfo();

        if (executionInfo && executionInfo.parmIsSuccessful())
        {
            // Get the report's query
            query = _sender.parmReportContract().parmQueryContracts().lookup(_sender.getFirstQueryContractKey());

            // Mark all interest notes "Printed"
            queryRun = new QueryRun(query);
            ttsbegin;
            while (queryRun.next())
            {
                interestNote = queryRun.get(tableNum(CustInterestJour)).(fieldNum(CustInterestJour, InterestNote));
                update_recordset custInterestJour
                    setting Printed = NoYes::Yes
                    where custInterestJour.InterestNote == interestNote && !custInterestJour.Printed;
            }
            ttscommit;

            // Refresh the grid
            formRun = _sender.parmArgs().caller()
                // <GEEPL>
                as FormRun
                // </GEEPL>
                ;

            if (FormRun)
            {
                formRun.dataSource(1).research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyQueryRange</Name>
				<Source><![CDATA[
    private Query applyQueryRange(Query _query)
    {
        CustInterestJour selectedRec = this.parmArgs() ? this.parmArgs().record() : null;

        Range interestNoteRange;
        Range accountNumRange;
        Range printedRange;
        Range statusRange;

        if (selectedRec)
        {
            interestNoteRange = selectedRec.InterestNote;
            accountNumRange = selectedRec.AccountNum;
            printedRange = enum2str(selectedRec.Printed);
            statusRange = enum2str(selectedRec.Status);
        }

        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(CustInterestJour));

        SysQuery::findOrCreateRange(qbds, fieldNum(CustInterestJour, InterestNote)).value(interestNoteRange);
        SysQuery::findOrCreateRange(qbds, fieldNum(CustInterestJour, AccountNum)).value(accountNumRange);
        SysQuery::findOrCreateRange(qbds, fieldNum(CustInterestJour, Printed)).value(printedRange);
        SysQuery::findOrCreateRange(qbds, fieldNum(CustInterestJour, Status)).value(statusRange);

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDestinationTab</Name>
				<Source><![CDATA[
    public boolean showDestinationTab(boolean _showDestinationTab = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDisplayFormatNameOnDestinationTab</Name>
				<Source><![CDATA[
    public boolean shouldDisplayFormatNameOnDestinationTab()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>