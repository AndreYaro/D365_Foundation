<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentJournalCreateService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service class for payment journal creation
/// </summary>
public class CfmPaymentJournalCreateService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountType2EntityTable</Name>
				<Source><![CDATA[
    private TableId accountType2EntityTable(CFMAccountType _accountType)
    {
        TableId ret;

        switch (_accountType)
        {
            case CFMAccountType::Cust:
                ret = tableNum(CustTable);
                break;

            case CFMAccountType::Vend:
                ret = tableNum(VendTable);
                break;

            case CFMAccountType::Worker:
                ret = tableNum(HcmWorker);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCrossCompanyFilter</Name>
				<Source><![CDATA[
    private container addCrossCompanyFilter(Query _query, container _dataAreaIds)
    {
        container dataAreas = this.dataAreasIntersection(_dataAreaIds, CFMPRQuerySourceCompanyFilter::allowedSourceCompaniesToSelect());

        CFMPRQuerySourceCompanyFilter::construct(_query, dataAreas).filter();

        return dataAreas;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPaymentRequestJournalFilter</Name>
				<Source><![CDATA[
    private void addPaymentRequestJournalFilter(Query _query, RefRecId _jorunalRecId)
    {
        QueryBuildDataSource qbdsPRJournalTranLog, qbdsPaymentRequestTable;

        qbdsPaymentRequestTable = _query.dataSourceTable(tableNum(CFMPaymentRequestTable));

        SysQuery::findOrCreateRange(qbdsPaymentRequestTable, fieldNum(CFMPaymentRequestTable, Status)).value(queryValue(CFMPaymentRequestStatus::Accepted));
        SysQuery::findOrCreateRange(qbdsPaymentRequestTable, fieldNum(CFMPaymentRequestTable, OnHold)).value(queryValue(NoYes::No));

        qbdsPRJournalTranLog = qbdsPaymentRequestTable.addDataSource(tableNum(CFMJournalTransLog));
        qbdsPRJournalTranLog.relations(true);
        qbdsPRJournalTranLog.joinMode(JoinMode::ExistsJoin);
        qbdsPRJournalTranLog.addRange(fieldNum(CFMJournalTransLog, Outdated)).value(queryValue(NoYes::No));

        SysQuery::findOrCreateRange(qbdsPRJournalTranLog, fieldNum(CFMJournalTransLog, JournalTable)).value(queryValue(_jorunalRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs create procedure for all selected sources and data areas.
    /// </summary>
    /// <param name="_dataContract">
    /// Data contract
    /// </param>
    public void create(CFMPaymentJournalCreateContract _dataContract)
    {
        Query paymentRequestQuery = _dataContract.getQuery();

        container conDataAreas = _dataContract.parmDataAreas();

        if (conDataAreas == conNull() || con2StrUnlimited(conDataAreas) == '')
        {
            conDataAreas = CFMParameters::getCentralizedPaymentCompanies(curext());
        }

        conDataAreas = this.addCrossCompanyFilter(paymentRequestQuery, conDataAreas);
        this.addPaymentRequestJournalFilter(paymentRequestQuery, _dataContract.parmJournalTable().RecId);

        SysDictEnum accountTypeEnum = new SysDictEnum(enumNum(CFMAccountType));
        CFMAccountType accountType = accountTypeEnum.firstValue();

        changecompany(CFMParameters::getCentralizedPaymentCompanyInfo(curext()).DataArea)
        {
            ttsbegin;
            for (int i = 1; i <= accountTypeEnum.values(); i++)
            {
                CFMPaymentRequestCreatePaymJournal paymJournalCreate = CFMPaymentRequestCreatePaymJournal::construct(accountType,
                    _dataContract.parmJournalTable().RecId,
                    this.joinQueryEntity(paymentRequestQuery,
                        this.accountType2EntityTable(accountType),
                        accountType,
                        _dataContract).pack(),
                    conDataAreas);

                paymJournalCreate.parmSeparatePaymentCompanyCust(_dataContract.parmProposeSeparatePaymentPerCompanyCust());
                paymJournalCreate.parmSeparatePaymentCompanyVend(_dataContract.parmProposeSeparatePaymentPerCompanyVend());

                paymJournalCreate.create();

                accountType = accountTypeEnum.nextValue(accountType);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataAreasIntersection</Name>
				<Source><![CDATA[
    private container dataAreasIntersection(container _source, container _allowed)
    {
        container ret;
        SelectableDataArea dataAreaId;

        int lenSource = conLen(_source);
        int lenAllowed = conLen(_allowed);
        int i;

        if (lenSource > lenAllowed)
        {
            for (i = 1; i <= lenAllowed; i++)
            {
                dataAreaId = conPeek(_allowed, i);

                if (conFind(_source, dataAreaId))
                {
                    ret += dataAreaId;
                }
            }
        }
        else
        {
            for (i = 1; i <= lenSource; i++)
            {
                dataAreaId = conPeek(_source, i);

                if (conFind(_allowed, dataAreaId))
                {
                    ret += dataAreaId;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinQueryEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add DirPartyTable data source
    /// </summary>
    /// <param name="_query">
    /// Query
    /// </param>
    /// <param name="_tableIdRelation">
    /// Table Id of joining data source
    /// </param>
    /// <param name ="_accountType">
    /// Define the type of account to add rabge to payment requests
    /// </param>
    /// <param name ="_dataContract">
    /// Service data contract
    /// </param>
    /// <returns>
    /// Query with additional data sources
    /// </returns>
    protected Query joinQueryEntity(Query _query, TableId _tableIdRelation, CFMAccountType _accountType, CFMPaymentJournalCreateContract _dataContract)
    {
        #define.EntityDSName('CFMEntityDSFilter')

        Query query = new Query(_query);

        QueryBuildDataSource dsPaymentRequest = query.dataSourceTable(tableNum(CFMPaymentRequestTable));
        SysQuery::findOrCreateRange(dsPaymentRequest, fieldNum(CFMPaymentRequestTable, AccountType)).value(queryValue(_accountType));

        QueryBuildDataSource dsEntity = dsPaymentRequest.addDataSource(_tableIdRelation, #EntityDSName);
        dsEntity.joinMode(JoinMode::ExistsJoin);
        dsEntity.relations(true);

        QueryBuildDataSource dsDirParty = dsEntity.addDataSource(tableNum(DirPartyTable));
        dsDirParty.joinMode(JoinMode::ExistsJoin);
        dsDirParty.relations(true);

        if (_dataContract.parmPartyNumber())
        {
            SysQuery::findOrCreateRange(dsDirParty, fieldNum(DirPartyTable, PartyNumber)).value(queryValue(_dataContract.parmPartyNumber()));
        }

        switch (_accountType)
        {
            case CFMAccountType::Cust:

                if (_dataContract.parmPaymModeCust())
                {
                    SysQuery::findOrCreateRange(dsPaymentRequest, fieldNum(CFMPaymentRequestTable, PaymMode)).value(_dataContract.parmPaymModeCust());
                }
                break;

            case CFMAccountType::Vend:

                if (_dataContract.parmPaymModeVend())
                {
                    SysQuery::findOrCreateRange(dsPaymentRequest, fieldNum(CFMPaymentRequestTable, PaymMode)).value(_dataContract.parmPaymModeVend());
                }
                break;
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>