<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepCalculation_ODB_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to do depreciation calculation for a specified Japan depreciation method: Old Declining Balance.
/// </summary>
public class AssetDepCalculation_ODB_JP extends AssetDepCalculation_JP
{
    boolean isInEquallyDividedMode;

    #AssetDepCalculation_JP

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AssetAmount calc()
    {
        AssetAmount ret;

        ret = super();

        if (calcArgs.parmIsDepreciationDone()
            && calcArgs.parmNumOfYearsEquallyDivided() > 0
            && !isInEquallyDividedMode
            && !calcArgs.parmIsNBVReachedZero())
        {
            calcArgs.parmIsDepreciationDone(false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllowableLimitForAccumulatedDep</Name>
				<Source><![CDATA[
    protected AssetAmount calcAllowableLimitForAccumulatedDep()
    {
        AssetAmount ret;

        if (isInEquallyDividedMode)
        {
            ret = calcArgs.parmAmountToDepreciate() + this.getReductionEntryAdjustment(calcArgs.parmPeriodEnd()) - this.getExtraDepreciationAmount();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBaseAmountToDepreciate</Name>
				<Source><![CDATA[
    protected AssetAmount calcBaseAmountToDepreciate()
    {
        AssetAmount ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurYearDepRateAsFraction</Name>
				<Source><![CDATA[
    protected container calcCurYearDepRateAsFraction()
    {
        container           ret;
        real                depRateNominator;
        real                depRateDenominator = 1;
        int                 numOfMonthHaveBeenDividedInPreYears;
        int                 numOfMonthWillBeDividedInYears;
        AssetTableInterval  depInterval;
        AssetTransDate      equallyDividedModeStartDate;
        AssetTransDate      depStartDateInCurYear;
        AssetTransDate      endDateInCurYear;

        AssetServiceLife    serviceLife;
        container           con;
        AssetDepRate_JP     assetDepRate;
        int                 depreciablePeriods;
        int                 totalPeriods;

        #TimeConstants

        if (isInEquallyDividedMode && calcArgs.parmNumOfYearsEquallyDivided() > 0)
        {
            depInterval                 = calcArgs.parmAssetTableInterval();
            equallyDividedModeStartDate = calcArgs.parmEquallyDividedStartDate();
            depStartDateInCurYear       = this.calcDepStartDateInCurYear();
            endDateInCurYear            = depInterval.findLastDayOfYear(depStartDateInCurYear);

            numOfMonthHaveBeenDividedInPreYears = (year(depStartDateInCurYear) * #monthsPerYear + mthOfYr(depStartDateInCurYear)) - (year(equallyDividedModeStartDate) * #monthsPerYear + mthOfYr(equallyDividedModeStartDate));

            numOfMonthWillBeDividedInYears      = (year(endDateInCurYear+1) * #monthsPerYear + mthOfYr(endDateInCurYear+1)) - (year(depStartDateInCurYear) * #monthsPerYear + mthOfYr(depStartDateInCurYear));
            if (numOfMonthWillBeDividedInYears + numOfMonthHaveBeenDividedInPreYears >= calcArgs.parmNumOfYearsEquallyDivided() * #monthsPerYear)
            {
                depRateNominator = 1;
            }
            else
            {
                depRateNominator = numOfMonthWillBeDividedInYears;
                depRateDenominator = calcArgs.parmNumOfYearsEquallyDivided() * #monthsPerYear - numOfMonthHaveBeenDividedInPreYears;
            }
        }
        else
        {
            serviceLife     = calcArgs.parmAssetServiceLife();
            con             = this.calcDepAndTotalNumOfPeriodsForCurYear();

            [depreciablePeriods, totalPeriods] = con;

            serviceLife  = serviceLife * totalPeriods / depreciablePeriods;
            serviceLife  = AssetdepCalculationHelper_JP::roundOffServiceLife(serviceLife);
            assetDepRate = AssetDepRate_JP::find(calcArgs.parmAssetDepRateSet(),
                                        this.getAssetDepreciationMethod(),
                                        serviceLife);
            if (assetDepRate.RecId == 0)
            {
                // The depreciation rate is not available in the depreciation rate schedule. Please add the depreciation rate to the depreciation rate schedule or select another schedule.
                throw error("@SYS4002748");
            }

            depRateNominator = assetDepRate.DepreciationRate;
        }

        ret = [depRateNominator, depRateDenominator];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFinalAmountToDepreciate</Name>
				<Source><![CDATA[
    protected AssetAmount calcFinalAmountToDepreciate()
    {
        AssetAmount ret;

        if (this.isPutInUseYear())
        {
            ret = calcArgs.parmAmountToDepreciate()
                + this.getReductionEntryAdjustment(calcArgs.parmPeriodEnd());
        }
        else if (isInEquallyDividedMode)
        {
            ret = this.calcAllowableLimitForAccumulatedDep()
                 - this.getBeginningBalanceOfAccumulatedDep(this.calcDepStartDateInCurYearBeyondChange())
                 - calcArgs.parmUnpostedAccumulatedExtraDepAmount();
        }
        else
        {
            ret = calcArgs.parmAmountToDepreciate()
                - this.getBeginningBalanceOfAccumulatedDep(this.calcDepStartDateInCurYearBeyondChange())
                + this.getReductionEntryAdjustment(calcArgs.parmPeriodEnd())
                - this.getBeginningBalanceOfAccumulatedExtDep(calcArgs.parmAssetTableInterval().findFirstDayOfYear(calcArgs.parmPeriodStart()))
                - calcArgs.parmUnpostedAccumulatedExtraDepAmount();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumOfDepreciablePeriodInCurYear</Name>
				<Source><![CDATA[
    protected int calcNumOfDepreciablePeriodInCurYear()
    {
        int ret;
        AssetTransDate depEndDateInCurYear;
        AssetTransDate firstDateInCurYear;
        AssetTransDate lastDateInCurYear;
        AssetTransDate equallyDividedStartDate;
        AssetTransDate equallyDividedEndDate;
        AssetTableInterval  depInterval;

        if (isInEquallyDividedMode)
        {
            depInterval = calcArgs.parmAssetTableInterval();
            equallyDividedStartDate = calcArgs.parmEquallyDividedStartDate();
            equallyDividedEndDate  = mkDate(dayOfMth(equallyDividedStartDate), mthOfYr(equallyDividedStartDate), year(equallyDividedStartDate) + calcArgs.parmNumOfYearsEquallyDivided()) - 1;
            firstDateInCurYear = depInterval.findFirstDayOfYear(calcArgs.parmPeriodstart());
            lastDateInCurYear = depInterval.findLastDayOfYear(calcArgs.parmPeriodstart());
            depEndDateInCurYear = (equallyDividedEndDate > lastDateInCurYear) ? lastDateInCurYear : depInterval.endPeriod(equallyDividedEndDate);
            // Adjust the depEndDateInCurYear to make sure it is in the same year of current period strat date.
            if (depEndDateInCurYear < firstDateInCurYear)
            {
                depEndDateInCurYear = firstDateInCurYear;
            }

            ret = max(depInterval.indexofPeriod(depEndDateInCurYear) - depInterval.indexofPeriod(this.calcDepStartDateInCurYear()) + 1, 0);
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciationMethod</Name>
				<Source><![CDATA[
    public AssetDepreciationMethod getAssetDepreciationMethod()
    {
        return AssetDepreciationMethod::OldDecliningBalance_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunCalc</Name>
				<Source><![CDATA[
    public void preRunCalc()
    {
        super();

        isInEquallyDividedMode = false;

        if (calcArgs.parmEquallyDividedStartDate() != dateNull())
        {
            if (calcArgs.parmEquallyDividedStartDate() <= calcArgs.parmPeriodstart())
            {
                isInEquallyDividedMode = true;
            }
        }
        else if (this.isEquallyDividedEnabled())
        {
            if (this.isTheFirstPeriodInCurYear())
            {
                Sign acquisitionSign = Sign(calcArgs.parmAssetAcquisitionValue());

                if (this.getBeginningBalanceOfAccumulatedDep(calcArgs.parmPeriodstart()) * acquisitionSign >= this.calcAllowableLimitForAccumulatedDep() * acquisitionSign)
                {
                    isInEquallyDividedMode = true;
                    calcArgs.parmEquallyDividedStartDate(calcArgs.parmAssetTableInterval().startOfPeriod(calcArgs.parmPeriodstart()));

                    // Save the date to global cache for initlizating the AssetEquallyDividedDepProfileTmp_JP later.
                    AssetEquallyDividedDepProfileTmp_JP::saveEquallyDividedStartDateForProfile(
                        calcArgs.parmAssetId(),
                        calcArgs.parmAssetBookId(),
                        calcArgs.parmPeriodStart());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smoothDepreciationForYear</Name>
				<Source><![CDATA[
    protected boolean smoothDepreciationForYear()
    {
        boolean ret;

        ret = super();

        ret = ret && !isInEquallyDividedMode;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>