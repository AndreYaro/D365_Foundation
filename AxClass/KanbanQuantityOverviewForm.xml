<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanQuantityOverviewForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanQuantityOverviewForm</c> class provides the business logic required for the <c>KanbanQuantityOverview</c> form.
/// </summary>
public class KanbanQuantityOverviewForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedKanbanOverviewTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a set of <c>KanbanOverviewType</c> values which are supported by KanbanQuantityOverview form.
    /// </summary>
    /// <returns>Set of supported <c>KanbanOverviewType</c> values.</returns>
    public static Set allowedKanbanOverviewTypes()
    {
        Set allowedKanbanOverviewTypes = new Set(Types::Enum);

        allowedKanbanOverviewTypes.add(KanbanOverviewType::Finished);
        allowedKanbanOverviewTypes.add(KanbanOverviewType::Material);
        allowedKanbanOverviewTypes.add(KanbanOverviewType::Transfer);

        return allowedKanbanOverviewTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPlanMinimum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if can plan kanban jobs to minimum alert level.
    /// </summary>
    /// <param name = "_kanbanQuantityOverviewTmp">Current KanbanQuantityOverviewTmp record.</param>
    /// <param name = "_kanbanRule">Current KanbanRule record for which to perform a check.</param>
    /// <returns>true if can plan to minimum level; otherwise, false.</returns>
    public boolean canPlanMinimum(KanbanQuantityOverviewTmp _kanbanQuantityOverviewTmp, KanbanRule _kanbanRule)
    {
        return _kanbanQuantityOverviewTmp.kanbansNeededToPlanMinimum(_kanbanRule) > 0 && _kanbanQuantityOverviewTmp.KanbansNotPlanned > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPlanMaximum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if can plan kanban jobs to maximum alert level.
    /// </summary>
    /// <param name = "_kanbanQuantityOverviewTmp">Current KanbanQuantityOverviewTmp record.</param>
    /// <param name = "_kanbanRule">Current KanbanRule record for which to perform a check.</param>
    /// <returns>true if can plan to maximum level; otherwise, false.</returns>
    public boolean canPlanMaximum(KanbanQuantityOverviewTmp _kanbanQuantityOverviewTmp, KanbanRule _kanbanRule)
    {
        return _kanbanQuantityOverviewTmp.kanbansNeededToPlanMaximum(_kanbanRule) > 0 && _kanbanQuantityOverviewTmp.KanbansNotPlanned > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planKanbanJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform automatic planning of specified number of kanban jobs.
    /// </summary>
    /// <param name = "_queryRun">QueryRun object which returns KanbanJob records to plan.</param>
    /// <param name = "_kanbanJobsToPlan">Number of kanban jobs to plan</param>
    public void planKanbanJobs(QueryRun _queryRun, int _kanbanJobsToPlan)
    {
        if (_kanbanJobsToPlan > 0)
        {
            while (_queryRun.next())
            {
                if (_kanbanJobsToPlan <= 0)
                {
                    break;
                }

                KanbanJob kanbanJob = _queryRun.get(tablenum(KanbanJob));

                if (kanbanJob.Status == LeanKanbanJobStatus::NotPlanned)
                {
                    KanbanJobAutoPlan kanbanJobAutoPlan = KanbanJobAutoPlan::newKanbanJob(kanbanJob);
                    kanbanJobAutoPlan.run();

                    _kanbanJobsToPlan--;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkCellFilterValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the work cell filter of the form is valid.
    /// </summary>
    /// <param name="_workCellFilter">The current work cell filter.</param>
    /// <returns>true if the filter is valid; otherwise, false.</returns>
    public boolean isWorkCellFilterValid(WrkCtrId _workCellFilter)
    {
        boolean isWorkCellFilterValid = true;

        if (_workCellFilter)
        {
            isWorkCellFilterValid = WrkCtrResourceGroup::isWorkCellValid(_workCellFilter);
        }

        return isWorkCellFilterValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static KanbanQuantityOverviewForm construct()
    {
        return new KanbanQuantityOverviewForm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>