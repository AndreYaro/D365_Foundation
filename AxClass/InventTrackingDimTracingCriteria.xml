<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingDimTracingCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Class for specifying search criteria for tracking dimension tracing.
/// </summary>
class InventTrackingDimTracingCriteria implements SysSaveable
{
    #define.PartSeparator(', ')
    #define.TraceSeparator(' - ')

    ForwardBackward                 traceDirection;
    ItemId                          itemIdCriteria;
    InventDim                       inventDimCriteria;
    InventDim                       inventDimCriteriaTmp;
    PdsVendBatchId                  pdsVendBatchIdCriteria;
    FromDate                        fromDateCriteria;
    ToDate                          toDateCriteria;

    FormStringControl               vendorBatchIdCtrl;

    // Cached data
    Set                             activeDimensionsCached;
    ItemId                          activeDimensionsCachedItemId;

    str                             callerBufferCaption;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        traceDirection,
        itemIdCriteria,
        fromDateCriteria,
        toDateCriteria,
        pdsVendBatchIdCriteria,
        inventDimCriteriaTmp
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activeDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the set of active or sales process active dimensions. This is to determine what dimensions are
    ///    active and inactive for clearing values for inactive dimensions.
    ///    If there are no dimensions, in this case we should return the empty set
    ///    as this will enable the identification of all existing dimensions as being inactive.
    /// </summary>
    /// <returns>
    ///    A set of dimensions which are active. If there are no dimensions, the empty set is returned.
    /// </returns>
    private Set activeDimensions()
    {
        if (activeDimensionsCachedItemId != itemIdCriteria || !activeDimensionsCached)
        {
            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(itemIdCriteria);
            activeDimensionsCached = InventDim::dimFieldList2Set(inventDimGroupSetup.activeOrSalesProcessActiveFields());
            activeDimensionsCachedItemId = itemIdCriteria;
        }

        return activeDimensionsCached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>captionSuffix</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a string representing this criteria to use a suffix to a form caption.
    /// </summary>
    /// <returns>
    ///    A string representing this criteria to append to a form caption.
    /// </returns>
    public str captionSuffix()
    {
        str suffix = itemIdCriteria + #PartSeparator + enum2str(traceDirection) + #PartSeparator + inventDimCriteria.preFix();

        if (pdsVendBatchIdCriteria)
        {
            suffix += #PartSeparator + pdsVendBatchIdCriteria;
        }

        if (fromDateCriteria)
        {
            suffix += #PartSeparator + date2StrUsr(fromDateCriteria, DateFlags::FormatAll) + '-';
        }

        if (toDateCriteria)
        {
            suffix += (fromDateCriteria ? '' : #PartSeparator + '-') + date2StrUsr(toDateCriteria, DateFlags::FormatAll);
        }

        return suffix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTrackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the tracking dimensions for the tracking criteria.
    /// </summary>
    private void clearTrackingDimensions()
    {
        inventDimCriteria.clearTrackingDimensions();
        this.onInventBatchIdModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the current on hand for the current criteria.
    /// </summary>
    /// <returns>
    ///    A container with current on hand in inventory unit and catch weight unit.
    /// </returns>
    public container currentOnHand()
    {
        InventDim       inventDimCriteriaLocal;
        InventQty       currentOnHand = 0;
        PdsCWInventQty  currentOnHandCW = 0;
        InventOnHandQty inventOnHandQty;
        InventBatch     inventBatch;

        if (itemIdCriteria)
        {
            inventDimCriteriaLocal.data(inventDimCriteria.data());  // Make a local copy as we might modify some of the data

            if (pdsVendBatchIdCriteria && !inventDimCriteriaLocal.InventBatchId)
            { // Specified vendor batch number, but not batch number
                InventDimParm inventDimParmCriteria = this.inventDimParmTraceable();
                inventDimParmCriteria.InventBatchIdFlag = NoYes::Yes;

                while select InventBatchId from inventBatch
                    where inventBatch.ItemId            == itemIdCriteria
                       && inventBatch.PdsVendBatchId    == pdsVendBatchIdCriteria
                {
                    inventDimCriteriaLocal.InventBatchId = inventBatch.InventBatchId;
                    inventOnHandQty = InventOnHandQty::newItemDim(itemIdCriteria, inventDimCriteriaLocal, inventDimParmCriteria);
                    
                    //since we are looking for physical invent only we do not need to go to the WHSInventReserve tables so for performance reasons we set the delay flag
                    inventOnHandQty.parmDelayAvailabilityCalculation(true);
                    
                    currentOnHand += inventOnHandQty.physicalInvent();
                    currentOnHandCW += inventOnHandQty.pdsCWPhysicalInvent();
                }
            }
            else
            if (pdsVendBatchIdCriteria && inventDimCriteriaLocal.InventBatchId)
            { // Specified both batch number and vendor batch number
                inventBatch = InventBatch::find(inventDimCriteriaLocal.InventBatchId, itemIdCriteria);
                if (inventBatch.PdsVendBatchId == pdsVendBatchIdCriteria)
                { // vendor batch and batch number match, so use on hand from batch - otherwise leave at 0
                    inventOnHandQty = InventOnHandQty::newItemDim(itemIdCriteria, inventDimCriteriaLocal, this.inventDimParmTraceable());

                    //since we are looking for physical invent only we do not need to go to the WHSInventReserve tables so for performance reasons we set the delay flag
                    inventOnHandQty.parmDelayAvailabilityCalculation(true);
                    
                    currentOnHand = inventOnHandQty.physicalInvent();
                    currentOnHandCW = inventOnHandQty.pdsCWPhysicalInvent();
                }
            }
            else
            { // Vendor batch number not specified
                inventOnHandQty = InventOnHandQty::newItemDim(itemIdCriteria, inventDimCriteriaLocal, this.inventDimParmTraceable());

                //since we are looking for physical invent only we do not need to go to the WHSInventReserve tables so for performance reasons we set the delay flag
                inventOnHandQty.parmDelayAvailabilityCalculation(true);

                currentOnHand = inventOnHandQty.physicalInvent();
                currentOnHandCW = inventOnHandQty.pdsCWPhysicalInvent();
            }
        }
        return [currentOnHand, currentOnHandCW];
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionsToKeepOnItemIdChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of <c>InventDimParm</c> where active flags correspond
    /// to inventory dimension fields that do not need to be cleared after item id has been changed.
    /// </summary>
    /// <returns>
    /// An instance of <c>InventDimParm</c> where active flags correspond
    /// to inventory dimension fields that should be kept after item id has been changed.
    /// </returns>
    /// <remarks>
    /// Only Site and Warehouse should remain after selected item id was changed.
    /// </remarks>
    private InventDimParm dimensionsToKeepOnItemIdChange()
    {
        InventDimParm inventDimParm;

        inventDimParm.InventSiteIdFlag = true;
        inventDimParm.InventLocationIdFlag = true;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Export the tracing criteria in XML format.
    /// </summary>
    /// <param name="_xmlWriter">
    ///    The <c>XmlWriter</c> used for writing the XML file.
    /// </param>
    public void exportAsXML(XmlWriter _xmlWriter)
    {
        _xmlWriter.writeStartElement('TraceCriteria');
        _xmlWriter.writeAttributeString('Direction', strFmt('%1', traceDirection));
        _xmlWriter.writeAttributeString('ItemId', strFmt('%1', itemIdCriteria));
        InventTrackingDimExport::exportInventDimAsXML(_xmlWriter, inventDimCriteria);

        if (pdsVendBatchIdCriteria)
        {
            _xmlWriter.writeAttributeString('VendorBatch', strFmt('%1', pdsVendBatchIdCriteria));
        }
        if (fromDateCriteria)
        {
            _xmlWriter.writeAttributeString('FromDate', InventTrackingDimExport::date2String(fromDateCriteria));
        }
        if (toDateCriteria)
        {
            _xmlWriter.writeAttributeString('ToDate', InventTrackingDimExport::date2String(toDateCriteria));
        }
        _xmlWriter.writeEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTrackingDimensionFields</Name>
				<Source><![CDATA[
    private void fillTrackingDimensionFields(ItemId _itemId, InventTransId _inventTransId, InventDim _inventDim)
    {
        InventDimParm   inventDimParm = InventDimParm::activeDimFlag(InventDimGroupSetup::newItemId(_itemId));

        inventDimParm.clearProductDimensions();
        inventDimParm.clearStorageDimensions();

        ListEnumerator dimEnumerator = inventDimParm.selectedDimFields().getEnumerator();
        while (dimEnumerator.moveNext())
        {
            FieldId inventDimField = dimEnumerator.current();
            _inventDim.(inventDimField) = this.getUniqueInventDimFieldValue(_inventTransId, inventDimField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallerBufferCaption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a caption representing the buffer received from a caller that could be used in conjunction with the form caption.
    /// </summary>
    /// <returns>
    ///    The caption representing the buffer received from a caller.
    /// </returns>
    public str getCallerBufferCaption()
    {
        return callerBufferCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    public void getLast()
    {
        xSysLastValue::getLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniqueInventDimFieldValue</Name>
				<Source><![CDATA[
    private str getUniqueInventDimFieldValue(InventTransId _inventTransId, FieldId _inventDimFieldId)
    {
        Query                   query = new Query();
        str                     uniqueInventDimValue;

        QueryBuildDataSource dsInventTransOrigin = query.addDataSource(tableNum(InventTransOrigin));
        dsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, TableId));
        dsInventTransOrigin.addRange(fieldNum(InventTransOrigin, InventTransId)).value(queryValue(_inventTransId));

        QueryBuildDataSource dsInventTrans = dsInventTransOrigin.addDataSource(tableNum(InventTrans));
        dsInventTrans.addSelectionField(fieldNum(InventTrans, TableId));
        dsInventTrans.relations(true);

        QueryBuildDataSource dsInventDim = dsInventTrans.addDataSource(tableNum(InventDim));
        dsInventDim.relations(true);
        dsInventDim.addGroupByField(_inventDimFieldId);
        dsInventDim.addRange(_inventDimFieldId).value(SysQuery::valueNotEmptyString());

        QueryRun queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            InventDim inventDim = queryRun.get(tableNum(InventDim));
            uniqueInventDimValue = inventDim.(_inventDimFieldId);
        }

        if (queryRun.next())
        { // Transactions with different values of the dimension field exist so the trace criteria on the dimension field should be empty
            uniqueInventDimValue = "";
        }

        return uniqueInventDimValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the search criteria based on the caller record.
    /// </summary>
    /// <param name="_common">
    ///    The passed record from the caller.
    /// </param>
    /// <returns>true if initialization from the record was possible; otherwise, false.</returns>
    protected boolean initFromRecord(Common _common)
    {
        switch (_common.TableId)
        {
            case tableNum(InventSum):
                InventSum inventSum = _common as InventSum;
                itemIdCriteria = inventSum.ItemId;
                inventDimCriteria.initFromInventDim(inventSum.inventDim(), InventDim::dimTrackingDimFieldList());
                return true;

            case tableNum(InventBatch):
                InventBatch inventBatch = _common as InventBatch;
                itemIdCriteria = inventBatch.ItemId;
                inventDimCriteria.InventBatchId = inventBatch.InventBatchId;
                return true;

            case tableNum(InventSerial):
                InventSerial inventSerial = _common as InventSerial;
                itemIdCriteria = inventSerial.ItemId;
                inventDimCriteria.InventSerialId = inventSerial.InventSerialId;
                return true;

            case tableNum(InventTrans):
                InventTrans inventTrans = _common as InventTrans;
                itemIdCriteria = inventTrans.ItemId;
                inventDimCriteria.initFromInventDim(inventTrans.inventDim(), InventDim::dimTrackingDimFieldList());
                return true;

            case tableNum(ProdRouteTrans):
                ProdRouteTrans prodRouteTrans = _common as ProdRouteTrans;
                if (prodRouteTrans.TransRefType == ProdTransRefType::Production)
                {
                    ProdTable prodTable = ProdTable::find(prodRouteTrans.TransRefId);
                    itemIdCriteria = prodTable.ItemId;
                    toDateCriteria = prodRouteTrans.DateWIP;
                    inventDimCriteria = prodTable.inventDim();
                    inventDimCriteria.clearTrackingDimensions();
                    this.fillTrackingDimensionFields(prodTable.ItemId, prodTable.InventTransId, inventDimCriteria);

                    callerBufferCaption = strFmt(#TraceSeparator + "@SYS21327" + #PartSeparator + "@SYS10657" + ': %1', prodTable.ProdId);
                }
                return true;

            case tableNum(ProdTable):
                ProdTable productionLot = _common as ProdTable;
                itemIdCriteria = productionLot.ItemId;
                inventDimCriteria = productionLot.inventDim();
                inventDimCriteria.clearTrackingDimensions();
                this.fillTrackingDimensionFields(productionLot.ItemId, productionLot.InventTransId, inventDimCriteria);
                return true;

            case tableNum(PmfProdCoBy):
                PmfProdCoBy coByProductLot = _common as PmfProdCoBy;
                itemIdCriteria = coByProductLot.ItemId;
                inventDimCriteria = coByProductLot.inventDim();
                inventDimCriteria.clearTrackingDimensions();
                this.fillTrackingDimensionFields(coByProductLot.ItemId, coByProductLot.InventTransId, inventDimCriteria);
                return true;

            case tableNum(ProdBOM):
                ProdBOM componentLot = _common as ProdBOM;
                itemIdCriteria = componentLot.ItemId;
                inventDimCriteria = componentLot.inventDim();
                inventDimCriteria.clearTrackingDimensions();
                this.fillTrackingDimensionFields(componentLot.ItemId, componentLot.InventTransId, inventDimCriteria);
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize search criteria based on the caller.
    /// </summary>
    /// <param name="_args">
    ///    The <c>Args</c> passed with caller information.
    /// </param>
    protected void initFromArgs(Args _args)
    {
        if (_args && _args.parmObject() is InventTrackingDimTracingCriteria)
        { 
            // Start new trace from tracing form
            InventTrackingDimTracingCriteria inventTrackingDimTracingCriteriaCaller = _args.parmObject();
            this.unpack(inventTrackingDimTracingCriteriaCaller.pack());
            return;
        }

        if (!_args || !_args.dataset())
        {
            return;
        }

        itemIdCriteria = '';
        inventDimCriteria.clear();

        if (!this.initFromRecord(_args.record()))
        {
            InventMovement inventMovement = InventMovement::constructFromArgs(_args);
            if (inventMovement)
            {
                itemIdCriteria = inventMovement.itemId();
                inventDimCriteria.initFromInventDim(inventMovement.inventdim(), InventDim::dimTrackingDimFieldList());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method.
    /// </remarks>
    public void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimGroupSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes dimension group information for the current item.
    /// </summary>
    /// <returns>
    ///    If the itemIdCriteria is set, a new item Id is returned, otherwise null is returned.
    /// </returns>
    protected InventDimGroupSetup inventDimGroupSetup()
    {
        return itemIdCriteria ? InventDimGroupSetup::newItemId(itemIdCriteria) : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmTraceable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an <c>InventDimParm</c> buffer based on the supported search criteria dimensions.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimParm</c> buffer.
    /// </returns>
    public InventDimParm inventDimParmTraceable()
    {
        InventDimParm   inventDimParm;

        inventDimParm.initFromInventDim(inventDimCriteria);

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>InventTable</c> buffer related to the specified item search criteria.
    /// </summary>
    /// <returns>
    ///    An <c>InventTable</c> buffer.
    /// </returns>
    public InventTable inventTable()
    {
        return InventTable::find(itemIdCriteria);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Value used when saving form settings for the next time the user opens the tracing form.
    /// </summary>
    /// <returns>
    ///    A string.
    /// </returns>
    public DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Value used when saving form settings for the next time the user opens the tracing form.
    /// </summary>
    /// <returns>
    ///    A string.
    /// </returns>
    public IdentifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Value used when saving form settings for the next time the user opens the tracing form.
    /// </summary>
    /// <returns>
    ///    A string.
    /// </returns>
    public IdentifierName lastValueElementName()
    {
        return classId2Name(classIdGet(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Value used when saving form settings for the next time the user opens the tracing form.
    /// </summary>
    /// <returns>
    ///    A string.
    /// </returns>
    public UtilElementType lastValueType()
    {
        return UtilElementType::Class;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Value used when saving form settings for the next time the user opens the tracing form.
    /// </summary>
    /// <returns>
    ///    A string.
    /// </returns>
    public UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFormOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize control states when opening the form
    /// </summary>
    public void onFormOpen()
    {
        this.setEnabledStateForDimensionControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInventBatchIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Event handler for change of Batch Id. If the inventory batch Id has been changed,
    ///    the vendor batch id will be updated accordingly. If the vendor batch Id is not enabled, the value will be cleared.
    /// </summary>
    public void onInventBatchIdModified()
    {
        if (this.activeDimensions().in(fieldNum(InventDim, InventBatchId)))
        {
            InventBatch inventBatchCriteria = InventBatch::find(inventDimCriteria.InventBatchId, this.parmItemIdCriteria());
            this.parmPdsVendBatchIdCriteria(inventBatchCriteria.PdsVendBatchId, true);
        }
        else
        {
            this.parmPdsVendBatchIdCriteria('', true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onItemIdCriteriaChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize control states when specifying an item ID.
    /// </summary>
    protected void onItemIdCriteriaChange()
    {
        this.setEnabledStateForDimensionControls();
        inventDimCriteria.clearNotSelectedDim(this.dimensionsToKeepOnItemIdChange());
        this.onInventBatchIdModified();
        this.redrawForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        inventDimCriteriaTmp.data(inventDimCriteria.data());
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDateCriteria</Name>
				<Source><![CDATA[
    public TransDate parmFromDateCriteria(TransDate _fromDateCriteria = fromDateCriteria)
    {
        fromDateCriteria = _fromDateCriteria;

        return fromDateCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;
        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemIdCriteria</Name>
				<Source><![CDATA[
    public ItemId parmItemIdCriteria(ItemId _itemIdCriteria = itemIdCriteria)
    {
        boolean set = false;

        if (itemIdCriteria != _itemIdCriteria)
        {
            set = true;
        }

        itemIdCriteria = _itemIdCriteria;

        if (set)
        {
            this.onItemIdCriteriaChange();
        }

        return itemIdCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsVendBatchIdCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the vendor batch number criteria.
    /// </summary>
    /// <param name="_pdsVendBatchIdCriteria">
    /// Vendor batch number.
    /// </param>
    /// <param name="_refreshFormControl">
    /// A boolean value indicating whether the form control for vendor batch number
    /// needs to be refreshed to show the specified batch number.
    /// </param>
    /// <returns>
    /// Selected vendor batch number.
    /// </returns>
    public PdsVendBatchId parmPdsVendBatchIdCriteria(
        PdsVendBatchId  _pdsVendBatchIdCriteria = pdsVendBatchIdCriteria,
        boolean         _refreshFormControl = false)
    {
        pdsVendBatchIdCriteria = _pdsVendBatchIdCriteria;

        if (_refreshFormControl && vendorBatchIdCtrl)
        {
            vendorBatchIdCtrl.update();
        }

        return pdsVendBatchIdCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDateCriteria</Name>
				<Source><![CDATA[
    public TransDate parmToDateCriteria(TransDate _toDateCriteria = toDateCriteria)
    {
        toDateCriteria = _toDateCriteria;

        return toDateCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTraceDirection</Name>
				<Source><![CDATA[
    public ForwardBackward parmTraceDirection(ForwardBackward _traceDirection = traceDirection)
    {
        traceDirection = _traceDirection;

        return traceDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorBatchIdCtrl</Name>
				<Source><![CDATA[
    public FormStringControl parmVendorBatchIdCtrl(FormStringControl _vendorBatchIdCtrl = vendorBatchIdCtrl)
    {
        vendorBatchIdCtrl = _vendorBatchIdCtrl;

        return vendorBatchIdCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNameCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the product name associated with the currently selected item.
    /// </summary>
    /// <returns>
    ///    An <c>EcoResProductName</c>.
    /// </returns>
    public EcoResProductName productNameCriteria()
    {
        InventDim   inventDimCriteriaLocal = InventDim::findOrCreate(inventDimCriteria);

        return this.inventTable().productName(CompanyInfo::languageId(), inventDimCriteriaLocal.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNumberCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the product number associated with the currently selected item.
    /// </summary>
    /// <returns>
    ///    An <c>EcoResProductDisplayProductNumber</c>.
    /// </returns>
    public EcoResProductDisplayProductNumber productNumberCriteria()
    {
        return EcoResProduct::find(this.inventTable().Product).DisplayProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productTypeCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the product type associated with the currently selected item.
    /// </summary>
    /// <returns>
    ///    A <c>PmfProductType</c> value.
    /// </returns>
    public PmfProductType productTypeCriteria()
    {
        return this.inventTable().PmfProductType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>redrawForm</Name>
				<Source><![CDATA[
    private void redrawForm()
    {
        if (FormDataUtil::getFormDataSource(inventDimCriteria))
        {
            FormDataUtil::getFormDataSource(inventDimCriteria).refreshEx();
            FormDataUtil::getFormDataSource(inventDimCriteria).formRun().redraw();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice.
    /// </summary>
    public void saveLast()
    {
        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledStateForDimensionControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the enabled property of inventory dimension controls as contained in the parameter _activeDimensions.
    ///    Dimensions contained in this set are active and thus enabled, as opposed to inactive dimensions
    ///    which are disabled.
    /// </summary>
    private void setEnabledStateForDimensionControls()
    {
        if (FormDataUtil::isFormDataSource(inventDimCriteria))
        {
            ListEnumerator dimFieldListEnumerator = InventDim::dimFieldListEnumerator();
            Set activeDimensions = this.activeDimensions();

            while (dimFieldListEnumerator.moveNext())
            {
                FieldId dimFieldId = dimFieldListEnumerator.current();
                this.setInventDimControlEnabled(dimFieldId, activeDimensions.in(dimFieldId));
            }

            this.setFormStringControlEnabled(vendorBatchIdCtrl, activeDimensions.in(fieldNum(InventDim, InventBatchId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormStringControlEnabled</Name>
				<Source><![CDATA[
    private void setFormStringControlEnabled(FormStringControl _formStringControl, boolean _enabled)
    {
        if (_formStringControl)
        {
            _formStringControl.enabled(_enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables controls on the form for dimension handling.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The ID of a dimension field.
    /// </param>
    /// <param name="_enabled">
    ///    The boolean value to apply to the enabled property for the field on the form for dimension handling.
    /// </param>
    private void setInventDimControlEnabled(FieldId _dimFieldId, boolean _enabled)
    {
        if (FormDataUtil::isFormDataSource(inventDimCriteria))
        {
            FormDataObject dimensionFieldControl = FormDataUtil::getFormDataSource(inventDimCriteria).object(_dimFieldId);

            if (dimensionFieldControl)
            {
                dimensionFieldControl.enabled(_enabled);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                inventDimCriteria.data(inventDimCriteriaTmp.data());
                this.inventDimGroupSetup();
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackingDimensionFieldsToValidate</Name>
				<Source><![CDATA[
    private List trackingDimensionFieldsToValidate()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return EcoResTrackingDimensionGroup::dimEnabledFieldList();
        }

        List            list = new List(Types::Integer);
        ListEnumerator  enumerator = EcoResTrackingDimensionGroup::dimEnabledFieldList().getEnumerator();

        while (enumerator.moveNext())
        {
            FieldId dimensionField = enumerator.current();

            if (dimensionField != fieldNum(InventDim, InventOwnerId_RU))
            {
                list.addEnd(dimensionField);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validate if the input criteria specified is sufficient to start a search.
    /// </summary>
    /// <returns>
    ///    true if criteria is sufficient; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean     res = true;
        InventDim   inventDimEmpty;

        if (fromDateCriteria && toDateCriteria && toDateCriteria < fromDateCriteria)
        {
            res = checkFailed("@SYS120590");
        }

        if (!itemIdCriteria)
        {
            return checkFailed(strFmt("@SYS50104", fieldId2pname(tableNum(InventTable), fieldNum(InventTable, ItemId)))); // No need to check dimensions if item is blank
        }

        // Test if enough dimensions have been specified
        if (pdsVendBatchIdCriteria == ''
            && InventDim::isInventDimEqual(inventDimCriteria, inventDimEmpty, this.trackingDimensionFieldsToValidate()))
        { // No tracking dimensions specified
            res = checkFailed("@SYS4004860");
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of this class.
    /// </summary>
    /// <returns>
    ///    A new instance of this class.
    /// </returns>
    public static InventTrackingDimTracingCriteria construct()
    {
        InventTrackingDimTracingCriteria    inventTrackingDimTracingCriteria = new InventTrackingDimTracingCriteria();
        return inventTrackingDimTracingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTrackingDimTracingCriteria</c> class
    ///    and initialize it based on the caller.
    /// </summary>
    /// <param name="_args">
    ///    The information passed by the caller.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTrackingDimTracingCriteria</c> class.
    /// </returns>
    public static InventTrackingDimTracingCriteria newFromArgs(Args _args)
    {
        InventTrackingDimTracingCriteria    inventTrackingDimTracingCriteria =  InventTrackingDimTracingCriteria::construct();

        inventTrackingDimTracingCriteria.getLast();
        inventTrackingDimTracingCriteria.initFromArgs(_args);
        return inventTrackingDimTracingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPacked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTrackingDimTracingCriteria</c> class
    ///    and initialize it based on a packed version of the class data.
    /// </summary>
    /// <param name="_packedCriteria">
    ///    The packed version of the class data.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTrackingDimTracingCriteria</c> class.
    /// </returns>
    public static InventTrackingDimTracingCriteria newFromPacked(container _packedCriteria)
    {
        InventTrackingDimTracingCriteria    inventTrackingDimTracingCriteria =  InventTrackingDimTracingCriteria::construct();

        inventTrackingDimTracingCriteria.unpack(_packedCriteria);
        return inventTrackingDimTracingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemIdCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if an itemId is valid to start a trace, if it is not empty, it exists and has active tracking dimensions.
    /// </summary>
    /// <param name="_itemId">
    ///    The item id to validate.
    /// </param>
    /// <returns>
    ///    True if the specified itemId is valid to start a trace.
    /// </returns>
    public static boolean validateItemIdCriteria(ItemId _itemId)
    {
        if (!_itemId)
        {
            //assume there is a previous validation for the field not being empty which adds an explicit error message
            //so we're not adding any message or return checkFailed here
            return false;
        }

        if (!InventTable::exist(_itemId))
        {
            return checkFailed(strFmt(InventTable::txtNotExist(), _itemId));
        }

        //the item id exists, but we're not sure whether it's trackable
        InventTable inventTableLocal = InventTable::find(_itemId);
        if (!inventTableLocal.canPerformItemTracing())
        {
            return checkFailed(strFmt("@SYS4004862", _itemId));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>