<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_ShortDescription</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetReport_ShortDescription
{
    RecordSortedList    rslstData;

    List                lstColumnForField;

    TransDate           transDate;
    RAssetId            assetId;

    XMLExcelDocument_RU     excel;
    int                     workSheetNum;

    #define.colName("ColName")
    #define.fieldIdName("FieldIdName")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEmptyRowsIntoTemplate</Name>
				<Source><![CDATA[
    protected void addEmptyRowsIntoTemplate(int _firstRowNum, int _rowIntoTemplate)
    {
        int  curentRow, cx;

        ;

        if (rslstData.len() > _rowIntoTemplate)
        {
            curentRow = _firstRowNum + 1;

            for (cx = _rowIntoTemplate; cx < rslstData.len(); cx++)
                excel.insertRow(curentRow, workSheetNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrintedField</Name>
				<Source><![CDATA[
    public void addPrintedField(fieldId _field, str _colName)
    {
        Struct  struct;

        ;

        struct = new Struct(Types::Integer, #fieldIdName, Types::String, #colName);

        struct.value(#fieldIdName, _field);
        struct.value(#colName, _colName);


        lstColumnForField.addEnd(struct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun createQueryRun()
    {
        Query       q;

        QueryBuildDataSource    ds;
        QueryBuildRange         range;

        ;

        q = new Query();

        ds = q.addDataSource(tablenum(RAssetScrap));

        range = ds.addRange(fieldnum(RAssetScrap, AssetId));
        range.value(assetId);


        range = ds.addRange(fieldnum(RAssetScrap, Assembling));
        range.value(queryValue(NoYes::Yes));


        if (transDate != dateNull())
        {
            range = ds.addRange(fieldnum(RAssetScrap, TransDate));
            range.value(queryRange(dateNull() + 1, transDate));
        }

        range = ds.addRange(fieldnum(RAssetScrap, StornoRecId));
        range.value(queryValue(0));

        return  new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRslstData</Name>
				<Source><![CDATA[
    protected RecordSortedList initRslstData()
    {
        RAssetScrap         rAssetScrap;

        RecordSortedList    rsl;

        QueryRun            qr;

        ;

        rsl = new RecordSortedList(tablenum(RAssetScrap));
        rsl.sortOrder(fieldnum(RAssetScrap, ItemId), fieldnum(RAssetScrap, RecId));

        qr = this.createQueryRun();

        while (qr.next())
        {
            rAssetScrap = qr.getNo(1);

            rsl.ins(rAssetScrap);
        }

        return rsl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValueIntoDoc</Name>
				<Source><![CDATA[
    protected void insertValueIntoDoc(Bookmark _bookmark, anytype _anyVal)
    {
        excel.insertValue(_bookmark, _anyVal, workSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RAssetId _assetId, TransDate _transDate = dateNull())
    {

        ;

        if(! _assetId)
            throw error(Error::wrongUseOfFunction(funcname()));


        assetId     = _assetId;
        transDate   = _transDate;

        lstColumnForField = new List(Types::Class);

        rslstData = this.initRslstData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputIntoExcel</Name>
				<Source><![CDATA[
    public int outputIntoExcel(XMLExcelDocument_RU _excel,
                                int _workSheetNum,
                                int _firstRowNum,
                                int _rowIntoTemplate)
    {
        RAssetScrap     rAssetScrap;
        int             cx;
        boolean         loop;

        ;

        if((! _excel) || (_workSheetNum < 1))
            throw error(Error::wrongUseOfFunction(funcname()));


        excel = _excel;
        workSheetNum = _workSheetNum;


        this.addEmptyRowsIntoTemplate(_firstRowNum, _rowIntoTemplate);


        cx   = 0;
        loop = rslstData.first(rAssetScrap);

        while(loop)
        {
            this.outputRow(rAssetScrap, _firstRowNum + cx);

            cx++;

            loop = rslstData.next(rAssetScrap);
        }

        return cx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputRow</Name>
				<Source><![CDATA[
    protected void outputRow(RAssetScrap _rAssetScrap, int _row)
    {
        ListEnumerator      enumerator;
        Struct              struct;

        fieldId             field;
        str                 sz, szCellName;

        ItemId              itemId;
        InventTable         inventTable;
        InventDim           inventDim;

        ;

        enumerator = lstColumnForField.getEnumerator();


        while(enumerator.moveNext())
        {

            struct = enumerator.current();

            field = struct.value(#fieldIdName);

            sz          = struct.value(#colName);
            szCellName  = strfmt("@GLS116884", sz, _row);

            if(field == fieldnum(RAssetScrap, ItemId))
            {
                itemId   = _rAssetScrap.(field);

                inventTable = _rAssetScrap.inventTable();
                inventDim   = _rAssetScrap.inventDim();

                this.insertValueIntoDoc(szCellName, inventTable.itemName(inventDim));
            }
            else
                this.insertValueIntoDoc(szCellName, _rAssetScrap.(field));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>