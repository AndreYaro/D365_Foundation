<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EventNotification_Vend</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Delivers alert notifications to the vendor contacts in the vendor self-service portal.
/// </summary>
/// <remarks>
///    The <c>EventNotification_Vend</c> is called from the vendor notifications form to create the
///    <c>EventInbox</c> records that will appear as notifications to the vendor self-service portal users.
/// </remarks>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class EventNotification_Vend extends EventNotification
{
    EventDueDateTime    dueDateTime;
    RecId               templateRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Delivers a notification by inserting a record into the <c>EventInbox</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>inboxId</c> value of the record inserted into the <c>EventInbox</c> table.
    /// </returns>
    public EventInboxId create()
    {
        UnitofWork                  uow = new UnitofWork();
        VendNotification            vendNotification;
        VendNotificationTemplate    vendNotificationTemplate;
        super();

        vendNotificationTemplate = VendNotificationTemplate::find(templateRecId, true);
        inbox.AlertCreatedDateTime = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getUserPreferredTimeZone());

        if (dueDateTime != dateNull())
        {
            inbox.DueDateTime = dueDateTime;
        }

        if (inbox.GlobalRule == NoYes::No)
            inbox.CompanyId = vendNotificationTemplate.company();
        vendNotification.parentEventInbox(inbox);
        uow.updateonSaveChanges(inbox);

        vendNotificationTemplate.Status = VendNotificationStatus::Sent;
        vendNotification.parentVendNotificationTemplate(vendNotificationTemplate);
        uow.updateonSaveChanges(vendNotificationTemplate);

        uow.insertonSaveChanges(vendNotification);
        uow.saveChanges();

        return inbox.InboxId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        inbox.NotificationSource = EventNotificationSource::Alerts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EventDueDateTime parmDueDateTime(EventDueDateTime _dueDateTime = dueDateTime)
    {
        dueDateTime = _dueDateTime;
        return dueDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecId parmTemplateRecId(RecId _templateRecId = templateRecId)
    {
        templateRecId = _templateRecId;
        return templateRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EventNotification_Vend construct()
    {
        return new EventNotification_Vend();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a notification record with an initial set of parameters.
    /// </summary>
    /// <param name="_userId">
    ///    The user who will receive the alert notification.
    /// </param>
    /// <param name="_subject">
    ///    The subject of the notification.
    /// </param>
    /// <param name="_message">
    ///    The message of the notification.
    /// </param>
    /// <param name="_dueDateTime">
    ///    The expiration date of the alert.
    /// </param>
    /// <param name="_templateRecId">
    ///    The record ID of the notification template.
    /// </param>
    /// <returns>
    ///    An instance of the <c>EventNotification_Vend</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EventNotification_Vend newInfo(userId _userId,
                                                 EventSubject _subject,
                                                 EventMessage _message,
                                                 utcdatetime _dueDateTime,
                                                 RecId  _templateRecId
                                                )

    {
        EventNotification_Vend notification = EventNotification_Vend::construct();
        notification.parmNotificationType(EventNotificationType::Information);

        notification.parmUserId(_userId);
        notification.parmSubject(_subject);
        notification.parmDueDateTime(DateTimeUtil::date(_dueDateTime));
        notification.parmTemplateRecId(_templateRecId);
        notification.parmMessage(_message);

        return notification;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>