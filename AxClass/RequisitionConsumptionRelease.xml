<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RequisitionConsumptionRelease</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements the specific for releasing of consumption requisition lines logic.
/// </summary>
class RequisitionConsumptionRelease extends RequisitionReleaseStrategy implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRequisitionLineToReleaseContainer</Name>
				<Source><![CDATA[
        public void addRequisitionLineToReleaseContainer(PurchReqLine _purchReqLine)
    {
        switch (requisitionReleaseType)
        {
            case RequisitionReleaseType::PurchaseOrder:
                if (_purchReqLine.PurchReqConsolidationStatus == PurchReqConsolidationStatus::Pending)
                {
                    checkFailed(strFmt("@SYS340000", PurchReqTable::find(_purchReqLine.PurchReqTable).PurchReqId, _purchReqLine.SequenceNumber));
                    return;
                }
                break;
            default :
                break;
        }

        super(_purchReqLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRequisitionDocumentGenerationObject</Name>
				<Source><![CDATA[
        protected RequisitionDocumentGeneration initRequisitionDocumentGenerationObject()
    {
        if (!requisitionDocumentGeneration)
        {
            switch (requisitionReleaseType)
            {
                case RequisitionReleaseType::PurchaseOrder:
                    requisitionDocumentGeneration = RequisitionPurchaseOrderGeneration::construct();
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        return requisitionDocumentGeneration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RequisitionConsumptionRelease construct()
    {
        return new RequisitionConsumptionRelease();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequisitionReleaseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the release document type for the specified requisition line.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The requisition line to check.
    /// </param>
    /// <returns>
    /// <c>RequisitionReleaseType</c> for the specified requisition line.
    /// </returns>
    public static RequisitionReleaseType getRequisitionReleaseType(PurchReqLine _purchReqLine)
    {
        return RequisitionReleaseType::PurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validate all lines in a single purchReqTable table record
    /// </summary>
    /// <param name="_purchReqTable">
    ///    The PurchReqTable table object from the <c>PurchReqTable</c> table to retrieve.
    /// </param>
    /// <returns>
    ///    true if passes all validation; Otherwise, false.
    /// </returns>
    public static boolean validateAllLines(PurchReqTable _purchReqTable)
    {
        RequisitionPurchaseOrderGeneration requisitionPurchaseOrderGeneration = RequisitionPurchaseOrderGeneration::construct();
        //If there are more release types that can be mixed within one requisition than validateAllLines() should be called for all of them.
        return requisitionPurchaseOrderGeneration.validateAllLines(_purchReqTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>