<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteWorkByLicensePlateSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSWorkExecuteWorkByLicensePlateSearch
{
    private InventLocationId warehouseId;
    private WHSLicensePlateId seekLicensePlate;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findBasedOnWorkTrans</Name>
				<Source><![CDATA[
    internal WHSWorkId findBasedOnWorkTrans()
    {
        WHSWorkTable workTableFormWorkTransTargetLPSearch;
        WHSWorkLine workLine;
        WHSWorkTrans workTrans;

        select firstonly workId from workTrans
            where workTrans.TargetLicensePlateId == this.seekLicensePlate
        exists join workTableFormWorkTransTargetLPSearch
            where workTableFormWorkTransTargetLPSearch.WorkStatus < WHSWorkStatus::Closed
                && workTableFormWorkTransTargetLPSearch.WorkId == workTrans.WorkId
        exists join workLine
            where workLine.WorkId == workTrans.WorkId
                && workLine.LineNum == workTrans.LineNum
                && workLine.WorkStatus != WHSWorkStatus::Skipped;
                       
        return workTrans.WorkId;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBasedOnInventDim</Name>
				<Source><![CDATA[
    internal WHSWorkId findBasedOnInventDim()
    {
        WHSWorkTable workTableForInventDimSearch;
        WHSWorkLine workLine;
        WHSWorkTrans workTrans;
        InventDim  inventDim;

        select firstonly workId from workTableForInventDimSearch
            where workTableForInventDimSearch.WorkStatus < WHSWorkStatus::Closed
        exists join workLine
            where workLine.WorkId == workTableForInventDimSearch.WorkId
                && workLine.WorkStatus != WHSWorkStatus::Skipped
        exists join workTrans
            where workTrans.WorkId == workLine.WorkId
                && workTrans.LineNum == workLine.LineNum
        exists join inventDim
            where inventDim.InventDimId == workTrans.InventDimId
                && inventDim.LicensePlateId == this.seekLicensePlate;

        return workTableForInventDimSearch.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBasedOnWork</Name>
				<Source><![CDATA[
    internal WHSWorkId findBasedOnWork()
    {
        WHSWorkTable workTableForWorkLineSearch;
        WHSWorkLine workLine;
        select firstonly workId from workTableForWorkLineSearch
            where workTableForWorkLineSearch.TargetLicensePlateId    == this.seekLicensePlate
                && workTableForWorkLineSearch.WorkStatus             <= WHSWorkStatus::InProcess
                && workTableForWorkLineSearch.InventLocationId       == this.warehouseId
        exists join workLine
            where workLine.WorkId       == workTableForWorkLineSearch.WorkId
                && workLine.WorkStatus  <= WHSWorkStatus::InProcess;
                
        return workTableForWorkLineSearch.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLicensePlateWarehouse</Name>
				<Source><![CDATA[
    internal static WHSWorkExecuteWorkByLicensePlateSearch newFromLicensePlateWarehouse(WHSLicensePlateId _seekLicensePlate, InventLocationId _warehouseId)
    {
        var search = new WHSWorkExecuteWorkByLicensePlateSearch();
        search.seekLicensePlate = _seekLicensePlate;
        search.warehouseId = _warehouseId;

        return search;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>