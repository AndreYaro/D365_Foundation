<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSAutoCreateTransferOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class WHSAutoCreateTransferOrder
{
    private WHSTransferOrderCreationCollection transferOrderCreationCollection;
    private Map onhandOnItems;
    private boolean useDimensionFieldsOnInventSum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates transfer order header and lines.
    /// </summary>
    public void create()
    {
        if (transferOrderCreationCollection)
        {
            transferOrderCreationCollection.initializeEnumerator();

            while (transferOrderCreationCollection.moveNext())
            {
                WHSTransferOrderCreationElement transferOrder = transferOrderCreationCollection.currentTransferOrder();

                this.createTransferOrder(transferOrder);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrder</Name>
				<Source><![CDATA[
    private void createTransferOrder(WHSTransferOrderCreationElement transferOrder)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            var transferOrderHeader = this.createTransferOrderHeader(transferOrder);

            this.createTransferOrderLines(transferOrderHeader, transferOrder.getTransferOrderLines());

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTransferOrder</Name>
				<Source><![CDATA[
    protected InventTransferTable initializeTransferOrder(WHSTransferOrderCreationElement _transferOrderCreationElement)
    {
        InventTransferTable transferOrder;

        transferOrder.initValue();
        transferOrder.TransferId = _transferOrderCreationElement.parmTransferOrderId();
        transferOrder.InventLocationIdFrom = _transferOrderCreationElement.parmFromWarehouseId();
        transferOrder.InventLocationIdTo = _transferOrderCreationElement.parmToWarehouseId();
        transferOrder.DeliveryDateControlType = SalesDeliveryDateControlType::None;
        transferOrder.defaultRow();

        return transferOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrderHeader</Name>
				<Source><![CDATA[
    private InventTransferTable createTransferOrderHeader(WHSTransferOrderCreationElement _transferOrderCreationElement)
    {
        InventTransferTable transferOrder;

        if (_transferOrderCreationElement.parmTransferOrderId())
        {
            transferOrder = InventTransferTable::find(_transferOrderCreationElement.parmTransferOrderId());
        }

        if (!transferOrder)
        {
            transferOrder = this.initializeTransferOrder(_transferOrderCreationElement);
            
            if (!transferOrder.validateWrite() ||
                !transferOrder.validateField(fieldNum(InventTransferTable, InventLocationIdFrom)) ||
                !transferOrder.validateField(fieldNum(InventTransferTable, InventLocationIdTo)))
            {
                throw error(strFmt("@WAX:Error_WHSTransferOrderProcessingCannotCreateHeader", _transferOrderCreationElement.parmTransferOrderId()));
            }

            transferOrder.insert();
        }
        else
        {
            if (transferOrder.InventLocationIdFrom != _transferOrderCreationElement.parmFromWarehouseId() ||
                transferOrder.InventLocationIdTo != _transferOrderCreationElement.parmToWarehouseId())
            {
                throw error(strFmt("@WAX:Error_WHSTransferOrderProcessingCannotUseHeader", _transferOrderCreationElement.parmTransferOrderId()));
            }
        }

        return transferOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOnhand</Name>
				<Source><![CDATA[
    private void buildOnhand(InventTransferTable _transferOrder, WHSTransferOrderCreationLineCollection _lineCollection)
    {
        _lineCollection.initializeEnumerator();
        
        while (_lineCollection.moveNext())
        {
            WHSTransferOrderCreationLineElement currentLine = _lineCollection.currentTransferOrderCreationLineElement();

            this.buildOnhandForItemByLicensePlate(_transferOrder, currentLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrderLines</Name>
				<Source><![CDATA[
    private void createTransferOrderLines(InventTransferTable _transferOrder, WHSTransferOrderCreationLineCollection _lineCollection)
    {
        onhandOnItems = new Map(Types::String, Types::Class);

        this.buildOnhand(_transferOrder, _lineCollection);

        var onhandOnItemEnumerator = onhandOnItems.getEnumerator();
        while (onhandOnItemEnumerator.moveNext())
        {
            WHSTransferOrderCreationLineOnhandCollection onhand = onhandOnItemEnumerator.currentValue();
            ItemId itemId = onhandOnItemEnumerator.currentKey();
            boolean isCatchWeightItem = PdsGlobal::pdsIsCWItem(itemId);

            var licensePlateEnumerator = onhand.getLicensePlates().getEnumerator();

            if (onhand.usePhysicalOnhandByLicensePlate())
            {
                while (licensePlateEnumerator.moveNext())
                {
                    WHSLicensePlateId licensePlateId = licensePlateEnumerator.current();

                    Set licensePlates = new Set(Types::String);
                    
                    licensePlates.add(licensePlateId);

                    WHSTransferOrderCreationLineOnhandDimensionCollection onhandDimension = onhand.getPhysicalOnhandByLicensePlate(licensePlateId);

                    onhandDimension.initializeEnumerator();
        
                    while (onhandDimension.moveNext())
                    {
                        WHSTransferOrderCreationLineOnhandElement currentOnhand = onhandDimension.currentTransferOrderCreationLineOnhandElement();

                        this.createTransferOrderLine(_transferOrder, itemId, isCatchWeightItem, currentOnhand, licensePlates, onhand.getLineCreationPolicy(licensePlateId));
                    }
                }
            }
            else
            {
                licensePlateEnumerator.moveNext();

                var lineCreationPolicy = onhand.getLineCreationPolicy(licensePlateEnumerator.current());

                WHSTransferOrderCreationLineOnhandDimensionCollection onhandDimension = onhand.getPhysicalOnhand();

                onhandDimension.initializeEnumerator();
        
                while (onhandDimension.moveNext())
                {
                    WHSTransferOrderCreationLineOnhandElement currentOnhand = onhandDimension.currentTransferOrderCreationLineOnhandElement();

                    this.createTransferOrderLine(_transferOrder, itemId, isCatchWeightItem, currentOnhand, onhandDimension.currentTransferOrderCreationLineOnhandLicensePlates(), lineCreationPolicy);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOnhandForItemByLicensePlate</Name>
				<Source><![CDATA[
    private void buildOnhandForItemByLicensePlate(InventTransferTable _transferOrder, WHSTransferOrderCreationLineElement _transferOrderCreationLine)
    {
        if (WHSLicensePlate::exist(_transferOrderCreationLine.parmLicensePlateId()))
        {
            Query query = this.buildTotalQtyOnLicensePlateQuery(_transferOrderCreationLine.parmLicensePlateId());

            this.addOnhandFilters(query, _transferOrder);

            QueryRun queryRun = new QueryRun(query);

            boolean onhandFound = false;

            while (queryRun.next())
            {
                InventSum inventSum = queryRun.get(tableNum(InventSum));

                onhandFound = true;

                WHSTransferOrderCreationLineOnhandCollection onhand = this.getOnhandForItem(inventSum.ItemId);

                WHSTransferOrderCreationLineOnhandElement onhandElement = WHSTransferOrderCreationLineOnhandElement::construct();

                this.validateNegativeOnHandForItem(inventSum, _transferOrderCreationLine);

                onhandElement.PhysicalOnhand = inventSum.AvailPhysical;
                onhandElement.CatchWeightPhysicalOnhand = inventSum.PdsCWAvailPhysical;

                if (useDimensionFieldsOnInventSum)
                {
                    onhandElement.initDimensionsFromInventSum(inventSum);
                }
                else
                {
                    var inventDim = queryRun.get(tableNum(InventDim));
                    onhandElement.initDimensionsFromInventDim(inventDim);
                }

                onhandElement.clearBelowLocationDimensions(InventSum.ItemId);
                onhand.addOnhand(onhandElement, _transferOrderCreationLine.parmLicensePlateId(), _transferOrderCreationLine.parmLineCreationPolicy());
            }

            if (!onhandFound)
            {
                throw error(strFmt("@WAX:Error_MobileDeviceQueueMessageNoOnhandOnLicensePlate", _transferOrderCreationLine.parmLicensePlateId()));
            }
        }
        else
        {
            throw error(strFmt("@WAX363", _transferOrderCreationLine.parmLicensePlateId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNegativeOnHandForItem</Name>
				<Source><![CDATA[
    private void validateNegativeOnHandForItem(InventSum _inventSum, WHSTransferOrderCreationLineElement _transferOrderCreationLine)
    {
        if (_inventSum.AvailPhysical < 0)
        {
            throw error(strFmt("@WAX:Error_MobileDeviceQueueMessageNegativeOnhandOnLicensePlate", _inventSum.ItemId, _inventSum.AvailPhysical, _transferOrderCreationLine.parmLicensePlateId()));
        }
        else if (_inventSum.PdsCWAvailPhysical < 0)
        {
            throw error(strFmt("@WAX:Error_MobileDeviceQueueMessageNegativeOnhandOnLicensePlate", _inventSum.ItemId, _inventSum.PdsCWAvailPhysical, _transferOrderCreationLine.parmLicensePlateId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTotalQtyOnLicensePlateQuery</Name>
				<Source><![CDATA[
    private Query buildTotalQtyOnLicensePlateQuery(WHSLicensePlateId _licensePlateId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventSum = query.addDataSource(tableNum(InventSum));
        qbdsInventSum.addSelectionField(fieldNum(InventSum, AvailPhysical), SelectionField::Sum);
        qbdsInventSum.addSelectionField(fieldNum(InventSum, PdsCWAvailPhysical), SelectionField::Sum);
        qbdsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
        qbdsInventSum.addRange(fieldNum(InventSum, AvailPhysical)).value('>0');

        if (useDimensionFieldsOnInventSum)
        {
            qbdsInventSum.addRange(fieldNum(InventSum, LicensePlateId)).value(queryValue(_licensePlateId));
        }
        else
        {
            QueryBuildDataSource qbdsInventDim = qbdsInventSum.addDataSource(tableNum(InventDim));
            qbdsInventDim.joinMode(JoinMode::InnerJoin);
            qbdsInventDim.relations(true);
            qbdsInventDim.addRange(fieldNum(InventDim, LicensePlateId)).value(queryValue(_licensePlateId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOnhandFilters</Name>
				<Source><![CDATA[
    private void addOnhandFilters(Query _query, InventTransferTable _transferOrder)
    {
        QueryBuildDataSource qbdsInventSum = _query.dataSourceTable(tableNum(InventSum));

        qbdsInventSum.addGroupByAndSelectionField(fieldNum(InventSum, ItemId));

        if (useDimensionFieldsOnInventSum)
        {
            this.addOnhandDimensionFilters(qbdsInventSum, _transferOrder, fieldNum(InventSum, InventStatusId), fieldNum(InventSum, InventLocationId));
        }
        else
        {
            var inventDimDataSource = _query.dataSourceTable(tableNum(InventDim));

            this.addOnhandDimensionFilters(inventDimDataSource, _transferOrder, fieldNum(InventDim, InventStatusId), fieldNum(InventDim, InventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOnhandDimensionFilters</Name>
				<Source><![CDATA[
    private void addOnhandDimensionFilters(QueryBuildDataSource _queryBuildDataSource, InventTransferTable _transferOrder, FieldId _inventStatusId, FieldId _InventLocationId)
    {
        _queryBuildDataSource.addGroupByAndSelectionField(_inventStatusId);
        _queryBuildDataSource.addRange(_InventLocationId).value(queryValue(_transferOrder.InventLocationIdFrom));

        InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();

        this.addInventDimensionFiltersFromEnumerator(_queryBuildDataSource, enum);

        enum = InventTrackingDimension::getEnumeratorForEnabledDimensions();

        this.addInventDimensionFiltersFromEnumerator(_queryBuildDataSource, enum);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnhandForItem</Name>
				<Source><![CDATA[
    private WHSTransferOrderCreationLineOnhandCollection getOnhandForItem(ItemId _itemId)
    {
        if (!onhandOnItems.exists(_itemId))
        {
            onhandOnItems.insert(_itemId, WHSTransferOrderCreationLineOnhandCollection::newFromItem(_itemId));
        }

        return onhandOnItems.lookup(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrderLine</Name>
				<Source><![CDATA[
    private void createTransferOrderLine(
        InventTransferTable _transferOrder,
        ItemId _itemId,
        boolean _isCatchWeightItem,
        WHSTransferOrderCreationLineOnhandElement _physicalOnhand,
        Set _licensePlates,
        WHSTransferOrderLineCreationPolicy _lineCreationPolicy)
    {
        setPrefix(strFmt('%1 %2', fieldPName(InventTransferLine, ItemId), _itemId));

        InventTransferLine transferOrderLine;

        transferOrderLine.initValue();
        transferOrderLine.initFromInventTransferTable(_transferOrder, true);
        transferOrderLine.ItemId = _itemId;
        transferOrderLine.initFromInventTable(InventTable::find(_itemId), transferOrderLine.InventDimId);
        transferOrderLine.setDeliveryDateControlType(transferOrderLine.InventDimId);
        if (_isCatchWeightItem)
        {
            transferOrderLine.PdsCWQtyTransfer = _physicalOnhand.CatchWeightPhysicalOnhand;
        }
        else
        {
            transferOrderLine.QtyTransfer = _physicalOnhand.PhysicalOnhand;
        }
        transferOrderLine.LineNum = InventTransferLine::lastLineNum(_transferOrder.TransferId) + 1.0;
        transferOrderLine.DeliveryDateControlType = SalesDeliveryDateControlType::None;

        if (_physicalOnhand.useDimensions())
        {
            var inventDim = transferOrderLine.InventDim();

            _physicalOnhand.initInventDim(inventDim);

            transferOrderLine.InventDimId = InventDim::findOrCreate(inventDim).inventDimId;
        }

        if (_isCatchWeightItem)
        {
            transferOrderLine.modifiedField(fieldNum(InventTransferLine, PdsCWQtyTransfer));
        }
        else
        {
            using (var ignoreDefaultOrderSettings = WHSAutoCreateTransferOrderIgnoreDefaultOrderSettingsContext::newFromParameter(true))
            {
                transferOrderLine.modifiedField(fieldNum(InventTransferLine, QtyTransfer));
            }    
        }

        if (_lineCreationPolicy == WHSTransferOrderLineCreationPolicy::LicensePlateGuidedWithLineReservation)
        {
            transferOrderLine.AutoReservation = NoYes::Yes;
        }

        transferOrderLine.CombinedTransferOrderLineDelivery = this.createCombinedLineDelivery(_transferOrder, _licensePlates);
                
        if (InventMovement::setAutoReserving(transferOrderLine, false) 
            || InventTable::find(transferOrderLine.ItemId).inventModelGroupItem().modelGroup().NegativePhysical 
            || transferOrderLine.inventDim().inventLocation().RetailInventNegPhysical)
        {
            InventMovement::bufferSetRemainQty(transferOrderLine,InventMovSubType::None);
            InventMovement::bufferSetRemainQty(transferOrderLine,InventMovSubType::TransferOrderTransitFrom);
            
            transferOrderLine.defaultRow();

            this.validateTransferOrderLine(transferOrderLine, _isCatchWeightItem);

            transferOrderLine.insert();

            this.recalculateStockTransferValue_IN(transferOrderLine);
        }
        else
        {
            if (_physicalOnhand.useDimensions())
            {
                throw error(strFmt("@WAX:Error_WHSTransferOrderProcessingCannotCreateLineForDimensions", transferOrderLine.ItemId, InventDim::find(transferOrderLine.InventDimId).preFix()));
            }

            throw error(strFmt("@WAX:Error_WHSTransferOrderProcessingCannotCreateLine", transferOrderLine.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateStockTransferValue_IN</Name>
				<Source><![CDATA[
    private void recalculateStockTransferValue_IN(InventTransferLine _transferOderLine)
    {
        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && _transferOderLine.inventTransferTable().StockTransferCostPriceHandlingImprovement_IN)
        {
            InventTransferLine_IN inventTransferLineIN = _transferOderLine.inventTransferLine_IN();
            inventTransferLineIN.recalculateStockTransferValue(_transferOderLine, _transferOderLine.inventDim());
            inventTransferLineIN.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransferOrderLine</Name>
				<Source><![CDATA[
    private void validateTransferOrderLine(InventTransferLine _transferOrderLine, boolean _isCatchWeightItem)
    {
        boolean isValid = true;

        if (_isCatchWeightItem)
        {
            isValid = _transferOrderLine.validateField(fieldNum(InventTransferLine, PdsCWQtyTransfer));
        }
        else
        {
            isValid = _transferOrderLine.validateField(fieldNum(InventTransferLine, QtyTransfer));
        }

        isValid = isValid 
            && _transferOrderLine.validateField(fieldNum(InventTransferLine, ItemId))
            && _transferOrderLine.validateWrite();

        if (!isValid)
        {
            throw error(strFmt("@WAX:Error_WHSTransferOrderProcessingCannotCreateLine", _transferOrderLine.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCombinedLineDelivery</Name>
				<Source><![CDATA[
    private InventTransferCombinedLineDeliveryRecID createCombinedLineDelivery(
        InventTransferTable _transferOrder,
        Set                 _licensePlates)
    {
        InventTransferCombinedLineDelivery inventTransferCombinedLineDelivery;

        inventTransferCombinedLineDelivery.initFromInventTransferTable(_transferOrder);
        inventTransferCombinedLineDelivery.insert();

        this.createRequestedLicensePlates(inventTransferCombinedLineDelivery, _licensePlates);

        return inventTransferCombinedLineDelivery.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequestedLicensePlates</Name>
				<Source><![CDATA[
    private void createRequestedLicensePlates(
        InventTransferCombinedLineDelivery  _inventTransferCombinedLineDelivery,
        Set                                 _licensePlates)
    {
        var licensePlateEnumerator = _licensePlates.getEnumerator();
        while (licensePlateEnumerator.moveNext())
        {
            InventTransferRequestedLicensePlate inventTransferRequestedLicensePlate;

            inventTransferRequestedLicensePlate.CombinedTransferOrderLineDelivery = _inventTransferCombinedLineDelivery.RecId;
            inventTransferRequestedLicensePlate.RequestedLicensePlateID = licensePlateEnumerator.current();
            inventTransferRequestedLicensePlate.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        useDimensionFieldsOnInventSum = InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSAutoCreateTransferOrder construct()
    {
        return new WHSAutoCreateTransferOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSAutoCreateTransferOrder</c> class.
    /// </summary>
    /// <param name = "_transferOrderCreationCollection">An instance of the <c>WHSTransferOrderCreationCollection</c> class.</param>
    /// <returns>An instance of the <c>WHSAutoCreateTransferOrder</c> class.</returns>
    internal static WHSAutoCreateTransferOrder newFromCollection(WHSTransferOrderCreationCollection _transferOrderCreationCollection)
    {
        WHSAutoCreateTransferOrder createTransferOrder = WHSAutoCreateTransferOrder::construct();

        createTransferOrder.transferOrderCreationCollection = _transferOrderCreationCollection;

        return createTransferOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventDimensionFiltersFromEnumerator</Name>
				<Source><![CDATA[
    private void addInventDimensionFiltersFromEnumerator(QueryBuildDataSource _queryBuildDataSource, InventDimensionEnumerator enum)
    {
        while (enum.moveNext())
        {
            FieldId dimensionFieldId;

            if (useDimensionFieldsOnInventSum)
            {
                dimensionFieldId = InventDim::getInventSumFieldIdFromInventDimFieldId(enum.currentInventDimFieldId());
            }
            else
            {
                dimensionFieldId = enum.currentInventDimFieldId();
            }

            _queryBuildDataSource.addGroupByAndSelectionField(dimensionFieldId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>