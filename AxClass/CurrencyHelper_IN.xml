<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CurrencyHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Indian customized currency helper class, includes common methods which are relevant to currency.
/// </summary>
public class CurrencyHelper_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sourceTable2CustomsDirection_New_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Customs directions based on the tableId and RecId of the sourceTable.
    /// </summary>
    /// <param name="_sourceTableId">
    /// A _sourceTableId tableId of the SourceTable.
    /// </param>
    /// <param name="_sourceRecId">
    /// A _sourceRecId RecId of the SourceTable.
    /// </param>
    /// <returns>
    /// Customs direction for the source Table.
    /// </returns>
    public static Direction_IN sourceTable2CustomsDirection_New_IN(
        RefTableId _sourceTableId,
        RefRecId   _sourceRecId)
    {
        EximExportImport_IN     ret;
        LedgerJournalTrans      ledgerJournalTrans;
        InventQualityOrderTable inventQualityOrderTable;
        TransTaxInformation     transTaxInformation;

        switch (_sourceTableId)
        {
            case tablenum(LedgerJournalTrans):
                ledgerJournalTrans  = LedgerJournalTrans::findRecId(_sourceRecId, false);
                transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalTrans);
                ret                 = transTaxInformation.CustomsTariffDirection;
                break;
            case tableNum(InventQualityOrderTable):
                select firstOnly RecId, InventTransId, ReferenceType from inventQualityOrderTable
                where inventQualityOrderTable.RecId == _sourceRecId;
                if (inventQualityOrderTable.InventTransId)
                {
                    ret = (inventQualityOrderTable.ReferenceType == InventTestReferenceType::Sales) ? Direction_IN::Export : Direction_IN::Import;
                }
                break;
            case tablenum(SalesTable):
            case tablenum(SalesLine):
            case tablenum(SalesParmLine):
            case tablenum(CustInvoiceLine):
            case tablenum(SalesQuotationLine):
            case tablenum(CustInvoiceTrans) :
            case tablenum(CustInterestTrans) :
            case tablenum(CustCollectionLetterTrans) :
            case tablenum(CustomsShippingBillTrans_IN):
            case tablenum(CustInvoiceJour):
            // <GIN>
            case tableNum(ProjProposalItem):
            case tableNum(ProjInvoiceItem):
            case tableNum(ProjProposalOnAcc):
            case tableNum(ProjInvoiceOnAcc):
            case tableNum(ProjProposalCost):
            case tableNum(ProjInvoiceCost):
                // </GIN>
                ret = Direction_IN::Export;
                break;

            case tablenum(PurchTable):
            case tablenum(PurchLine):
            case tablenum(PurchParmLine):
            case tablenum(VendInvoiceInfoLine):
            case tablenum(VendInvoiceTrans):
            case tablenum(VendInvoiceJour):
            case tablenum(PurchReqTable):
            case tablenum(PurchReqLine):
                ret = Direction_IN::Import;
                break;

            default:
                throw error(strfmt("@GLS62270", tableid2pname(_sourceTableId)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDirection2CustomsDirection_New_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Customs directions for the tax direction.
    /// </summary>
    /// <param name="_taxDirection">
    /// A _taxDirection tax direction parameter.
    /// </param>
    /// <returns>
    /// Customs direction for the source Table.
    /// </returns>
    public static Direction_IN taxDirection2CustomsDirection_New_IN(TaxDirection _taxDirection)
    {
        Direction_IN direction;

        switch (_taxDirection)
        {
            case TaxDirection::IncomingTax:
                direction = Direction_IN::Import;
                break;

            case TaxDirection::OutgoingTax:
                direction = Direction_IN::Export;
                break;
        }

        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>boolean2CustomsDirection_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Customs directions for the boolean.
    /// </summary>
    /// <param name="_isExport">
    /// A boolean parameter.
    /// </param>
    /// <returns>
    /// Customs direction for the boolean.
    /// </returns>
    public static Direction_IN boolean2CustomsDirection_IN(boolean _isExport)
    {
        Direction_IN direction;

        if(_isExport)
            direction = Direction_IN::Export;
        else
            direction = Direction_IN::Import;

        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsCurAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount in transaction currency by considering the customs exchange rate.
    /// </summary>
    /// <returns>
    /// The amount in transaction currency.
    /// </returns>
    public static AmountCur customsCurAmount_IN(
        AmountMST           _amountMST,
        CurrencyCode        _currencyCode,
        boolean             _isExport,
        TransDate           _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean             _rounding     = true)
    {
        EximExportImport_IN     direction = CurrencyHelper_IN::boolean2CustomsDirection_IN(_isExport);
        AmountCur               amountCur;
        CustomsExchangeRate_IN  exchRate;
        CurrencyExchangeHelper  currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                        _exchRateDate);

        if (_amountMST == 0)
        {
            return 0;
        }

        if (_currencyCode)
        {
            exchRate = TaxExchangeRateHelper::getCustomsExchangeRate_IN(_currencyCode,
                                                                     direction,
                                                                     _exchRateDate);
            if (!exchRate)
            {
                throw error(strFmt("@GLS62271", direction, _currencyCode, _exchRateDate));
            }

            currencyExchangeHelper.parmExchangeRate1(exchRate);
            amountCur = currencyExchangeHelper.calculateAccountingToTransaction(_currencyCode, _amountMST, _rounding);
        }
        else
        {
            throw error("@SYS23229");
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsMSTAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount in base currency by considering the customs exchange rate.
    /// </summary>
    /// <param name = "_amountCur">The amount in transaction currency</param>
    /// <param name = "_currencyCode">The currency code</param>
    /// <param name = "_isExport">Whether to export</param>
    /// <param name = "_exchRateDate">The exchange rate date</param>
    /// <param name = "_rounding">Whether to do rounding</param>
    /// <returns>
    /// The amount in base currency.
    /// </returns>
    public static AmountMST customsMSTAmount_IN(
        AmountCur           _amountCur,
        CurrencyCode        _currencyCode,
        boolean             _isExport,
        TransDate           _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean             _rounding     = true)
    {
        EximExportImport_IN    direction = _isExport;
        AmountMST               amountMST;
        CustomsExchangeRate_IN  exchRate;
        CurrencyExchangeHelper  currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                        _exchRateDate);

        if (_amountCur == 0)
        {
            return 0;
        }

        if (_currencyCode)
        {
            exchRate = TaxExchangeRateHelper::getCustomsExchangeRate_IN(_currencyCode,
                                                                     direction,
                                                                     _exchRateDate);
            if (! exchRate)
            {
                throw error(strFmt("@GLS62271", direction, _currencyCode, _exchRateDate));
            }
            currencyExchangeHelper.parmExchangeRate1(exchRate);
            amountMST = currencyExchangeHelper.calculateTransactionToAccounting(_currencyCode, _amountCur, _rounding);
        }
        else
        {
            throw error("@SYS23229");
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsReportingMSTAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount in reporting currency by considering the customs exchange rate.
    /// </summary>
    /// <param name="_amountCur">
    /// The amount in reporting currency.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code.
    /// </param>
    /// <param name="_isExport">
    /// True if exporting.
    /// </param>
    /// <param name="_exchRateDate">
    /// The date time of the exchange rate.
    /// </param>
    /// <param name="_rounding">
    /// True if the amount is rounding.
    /// </param>
    /// <param name="_exchRate">
    /// The customs exchange rate.
    /// </param>
    /// <returns>
    /// This method returns the amount in Reporting currency by considering the customs exchange rate.
    /// </returns>
    public static AmountMST customsReportingMSTAmount_IN(
        AmountCur              _amountCur,
        CurrencyCode           _currencyCode,
        boolean                _isExport,
        TransDate              _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean                _rounding     = true,
        CustomsExchangeRate_IN _exchRate = 0)// Optional if passed from BOE, dont take from setup.
    {
        EximExportImport_IN     direction = CurrencyHelper_IN::boolean2CustomsDirection_IN(_isExport);
        AmountMST               amountMST;
        CustomsExchangeRate_IN  exchRate;
        CurrencyExchangeHelper  currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                        _exchRateDate);

        if (_amountCur == 0)
        {
            return 0;
        }

        if (_currencyCode)
        {
            if (_exchRate)
            {
                exchRate = _exchRate;
            }
            else
            {
                exchRate = TaxExchangeRateHelper::getCustomsExchangeRate_IN(_currencyCode,
                                                                         direction,
                                                                         _exchRateDate);
            }
            if (!exchRate)
            {
                throw error(strFmt("@GLS62271", direction, _currencyCode, _exchRateDate));
            }
            currencyExchangeHelper.parmExchangeRate1(exchRate);
            amountMST = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(_currencyCode, _amountCur);
        }
        else
        {
            throw error("@SYS23229");
        }

        return amountMST;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>