<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CLMIntegrationConnectionInitiationContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CLMIntegrationConnectionInitiationContract</c> class defines data contract for the connection initiation service operation.
/// </summary>
[DataContract]
internal class CLMIntegrationConnectionInitiationContract extends CLMIntegrationContract
{
    private TenantID tenantId;
    private CLMIntegrationServiceInstanceBaseURL baseUrl;
    private CLMIntegrationAuthenticationType authenticationType;
    private Object authenticationDetails;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTenantId</Name>
				<Source><![CDATA[
    [DataMember('TenantId')]
    internal TenantID parmTenantId(TenantID _tenantId = tenantId)
    {
        tenantId = _tenantId;

        return tenantId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBaseUrl</Name>
				<Source><![CDATA[
    [DataMember('BaseUrl')]
    internal CLMIntegrationServiceInstanceBaseURL parmBaseUrl(CLMIntegrationServiceInstanceBaseURL _baseUrl = baseUrl)
    {
        baseUrl = _baseUrl;

        return baseUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAuthenticationType</Name>
				<Source><![CDATA[
    [DataMember('AuthorizationType')]
    internal CLMIntegrationAuthenticationType parmAuthenticationType(CLMIntegrationAuthenticationType _authenticationType = authenticationType)
    {
        authenticationType = _authenticationType;

        return authenticationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAuthenticationDetails</Name>
				<Source><![CDATA[
    [DataMember('AuthorizationDetails')]
    internal Object parmAuthenticationDetails(Object _authenticationDetails = authenticationDetails)
    {
        authenticationDetails = _authenticationDetails;

        return authenticationDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWizard</Name>
				<Source><![CDATA[
    internal void initFromWizard(CLMIntegrationEstablishConnectionWizard _wizard)
    {
        this.parmTenantId(_wizard.parmTenantID());
        this.parmBaseUrl(_wizard.parmBaseURL());
        this.parmAuthenticationType(_wizard.parmAuthenticationType());

        switch (this.parmAuthenticationType())
        {
            case CLMIntegrationAuthenticationType::OAuth2:
                CLMIntegrationOAuth2Contract authenticationContract = CLMIntegrationOAuth2Contract::construct();
                authenticationContract.initFromWizard(_wizard);
                this.parmAuthenticationDetails(authenticationContract);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CLMIntegrationConnectionInitiationContract construct()
    {
        return new CLMIntegrationConnectionInitiationContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>