<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_Contabil_v800_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FBSpedFileCreator_Contabil_v800_BR extends FBSpedFileCreator_Contabil_v700_BR
{
    protected int recordJ150Counter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRecord0000</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block 0000 and its child blocks.
    /// </summary>
    protected void createRecord0000()
    {
        LogisticsPostalAddress  fiscalEstablishmentAddress = fiscalEstablishment.postalAddress();

        FBSpedRecord_BR spedRecord = FBSpedRecord_BR::constructEmpty('0000');

        spedRecord.addFieldString                   ('LECD');                                                   // LECD
        spedRecord.addFieldDate                     (fromDate);                                                 // DT_INI
        spedRecord.addFieldDate                     (toDate);                                                   // DT_FIN
        spedRecord.addFieldString                   (fiscalEstablishment.Name);                                 // NOME
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(fiscalEstablishment.CNPJCPFNum_BR), 14);  // CNPJ
        spedRecord.addFieldString                   (fiscalEstablishmentAddress.State);                         // UF
        spedRecord.addFieldString                   (this.keepAlphaAndNumbers(fiscalEstablishment.IENum_BR));   // IE
        spedRecord.addFieldNumericFilledWithZeros   (this.getCityCode(fiscalEstablishmentAddress), 7);          // COD_MUN
        spedRecord.addFieldString                   (this.keepAlphaAndNumbers(fiscalEstablishment.CCMNum_BR));  // IM

        if (situationType)
        {
            spedRecord.addFieldNumeric              (situationType);                                            // IND_SIT_ESP
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // IND_SIT_ESP
        }

        spedRecord.addFieldNumeric                  (openingPeriodSituation);                                   // IND_SIT_INI_PER
        spedRecord.addFieldNumeric                  (fiscalEstablishment.NIRE ? 1 : 0);                         // IND_NIRE
        spedRecord.addFieldNumeric                  (fileType);                                                 // IND_FIN_ESC

        if (fileType == FBSPEDFileType_BR::Substitute)
        {
            spedRecord.addFieldString               (fileHash);                                                 // COD_HASH_SUB
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // COD_HASH_SUB
        }

        spedRecord.addFieldNumeric                  (fiscalOrganization.IsLargeCompany ? 1 : 0);                // IND_GRANDE_PORTE
        spedRecord.addFieldNumeric                  (fiscalOrganization.SCPType);                               // TIP_ECD

        if (fiscalOrganization.SCPType == FBSCPType_BR::SCP)
        {
            spedRecord.addFieldNumeric              (this.keepNumbers(fiscalOrganization.SCPCode));             // COD_SCP
        }
        else
        {
            spedRecord.addFieldEmpty();                                                                         // COD_SCP
        }

        spedRecord.addFieldString                   ('N', 1);                                                   // IDENT_MF
        spedRecord.addFieldString                   ('N', 1);                                                   // IND_ESC_CONS
        spedRecord.addFieldNumeric                  (0, 0, 1);                                                  //IND_CENTRALIZADA
        spedRecord.addFieldNumeric                  (0, 0, 1);                                                  //IND_MUDANC_PC

        if (contract.parmInstitutionType())
        {
            spedRecord.addFieldNumeric              (contract.parmInstitutionType(), 0, 1);                     //COD_PLAN_REF
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         //COD_PLAN_REF
        }

        this.addRecord(spedRecord);

        this.createBlock0(spedRecord);
        this.createBlockI(spedRecord);
        this.createBlockJ(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI050</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block I050 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block I050 belongs to.
    /// </param>
    protected void createRecordI050(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;
        MainAccount mainAccount;
        DimensionAttributeValue dimensionAttributeValue;
        str accountAnalyticalSynthetic;

        while select mainAccount
            order by mainAccount.MainAccountId
            where mainAccount.LedgerChartOfAccounts == Ledger::chartOfAccounts(CompanyInfo::current())
                && mainAccount.Type != DimensionLedgerAccountType::Reporting
                && mainAccount.Type != DimensionLedgerAccountType::Common_CN
        {
            select firstonly dimensionAttributeValue
                where dimensionAttributeValue.EntityInstance == mainAccount.RecId
                    && dimensionAttributeValue.DimensionAttribute == mainAccountDimAttrRecId;

            accountAnalyticalSynthetic = mainAccount.hasChildAccount() ? 'S': 'A';

            spedRecord = FBSpedRecord_BR::constructEmpty('I050');

            spedRecord.addFieldDate     (dimensionAttributeValue.ActiveFrom ? dimensionAttributeValue.ActiveFrom : fromDate);   // DT_ALT
            if (useNatureCode)
            {
                spedRecord.addFieldString   (mainAccount.NatureCode_BR);                                                        // COD_NAT
            }
            else
            {
                spedRecord.addFieldString   (this.getAccountNatureCode(mainAccount.Type));                                      // COD_NAT
            }
            spedRecord.addFieldString   (accountAnalyticalSynthetic);                                                           // IND_CTA
            spedRecord.addFieldNumeric  (mainAccount.getAccountLevel());                                                        // NIVEL
            spedRecord.addFieldString   (mainAccount.MainAccountId);                                                            // COD_CTA

            if (mainAccount.ParentMainAccount)
            {
                spedRecord.addFieldString   (MainAccount::find(mainAccount.ParentMainAccount).MainAccountId);                // COD_CTA_SUP
            }
            else
            {
                spedRecord.addFieldEmpty    ();                                                                                 // COD_CTA_SUP
            }

            spedRecord.addFieldString       (mainAccount.Name);                                                                 // CTA

            this.addChildRecord(_parentRecord, spedRecord);

            if (accountAnalyticalSynthetic == 'A')
            {
                if (contract.parmInstitutionType())
                {
                    this.createRecordI051RelatedToLedgerChartOfAccounts(spedRecord, mainAccount);
                }

                this.createRecordI052(spedRecord, mainAccount.MainAccountId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI051RelatedToLedgerChartOfAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the I051 blocks for the specified SPED record and main account.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record of the created I051 blocks.
    /// </param>
    /// <param name="_mainAccount">
    /// The main account.
    /// </param>
    protected void createRecordI051RelatedToLedgerChartOfAccounts(FBSpedRecord_BR _parentRecord, MainAccount _mainAccount)
    {
        MainAccountConsolidateAccount_BR mainAccountConsolidateAccount_BR;
        FBSpedRecord_BR spedRecord;

        while select mainAccountConsolidateAccount_BR
            where mainAccountConsolidateAccount_BR.MainAccount == _mainAccount.RecId
        {
            spedRecord  = FBSpedRecord_BR::constructEmpty('I051');
  
            spedRecord.addFieldString    (mainAccountConsolidateAccount_BR.dimensionAttributeValueValue());
            spedRecord.addFieldString    (mainAccountConsolidateAccount_BR.ConsolidationMainAccount);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordJ150</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record J150.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the record J150 belongs to.
    /// </param>
    /// <param name="_level">
    /// The FBSpedContabilAccountTree_BR level.
    /// </param>
    /// <param name="_left">
    /// The left branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    /// <param name="_right">
    /// The right branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    protected void writeRecordJ150(FBSpedRecord_BR _parentRecord, int _level, int _left, int _right)
    {
        FBSpedContabilAccountTree_BR spedContabilAccountTree, spedContabilAccountTreeAux;
        MainAccount mainAccount, parentMainAccount;
        FBSpedRecord_BR spedRecord;

        while select spedContabilAccountTree
            where spedContabilAccountTree.LeftValue > _left
                && spedContabilAccountTree.RightValue < _right
                && spedContabilAccountTree.AccountLevel == _level
        join Type, ParentMainAccount from mainAccount
            where mainAccount.MainAccountId == spedContabilAccountTree.AccountCode
                && mainAccount.LedgerChartOfAccounts == Ledger::chartOfAccounts()
        outer join MainAccountId from parentMainAccount
            where parentMainAccount.RecId == mainAccount.ParentMainAccount
        {
            if (this.getAccountNatureCode(spedContabilAccountTree.AccountType) == TotalAccounts)
            {
                spedContabilAccountTreeAux = this.getMainAccountOpeningClosingBalance(mainAccount, spedContabilAccountTree);

                spedRecord = FBSpedRecord_BR::constructEmpty('J150');

                spedRecord.addFieldNumeric  (recordJ150Counter, 0);                                                                         // NU_ORDEM
                spedRecord.addFieldString   (spedContabilAccountTree.AccountCode);                                                          // COD_AGL
                spedRecord.addFieldString   (this.getAccountNatureCode(mainAccount.Type) == '05' ? 'T' : 'D');
                spedRecord.addFieldNumeric  (spedContabilAccountTree.AccountLevel);                                                         // NIVEL_AGL
                spedRecord.addFieldString   (parentMainAccount.MainAccountId);
                spedRecord.addFieldString   (spedContabilAccountTree.AccountDescription);                                                   // DESCR_COD_AGL
                
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.OpeningBalance), 2);            // VL_CTA_INI_
                spedRecord.addFieldString   (spedContabilAccountTreeAux.OpeningBalance > 0 ? 'D' : 'C');    // IND_DC_CTA_INT
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.EndingBalance), 2);             // VL_CTA_FIN
                spedRecord.addFieldString   (spedContabilAccountTreeAux.EndingBalance > 0 ? 'D' : 'C');     // IND_DC_CTA_FIN
                spedRecord.addFieldString   (spedContabilAccountTreeAux.EndingBalance > 0 ? 'D' : 'R');     // IND_GRP_DRE
                spedRecord.addFieldEmpty    ();

                this.addChildRecord(_parentRecord, spedRecord);

                recordJ150Counter++;
            }

            this.writeRecordJ150(_parentRecord, _level + 1, spedContabilAccountTree.LeftValue, spedContabilAccountTree.RightValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of contract class
    /// </summary>
    /// <param name = "_contract">FBSPEDContabilProcessorContract_BR instance</param>
    /// <param name = "_fbFile">FBFile_BR instance</param>
    public void new(FBSPEDContabilProcessorContract_BR _contract, FBFile_BR _fbFile)
    {
        contract = _contract;
        uniqueVoucherMap = new Map(Types::String, Types::Integer);
        recordJ150Counter = 1;

        super(_contract, _fbFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI052</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the I052 blocks for the specified SPED record and main account.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record of the created I052 blocks.
    /// </param>
    /// <param name="_mainAccountNum">
    /// The main account.
    /// </param>
    protected void createRecordI052(FBSpedRecord_BR _parentRecord, MainAccountNum _mainAccountNum)
    {
        FBSpedRecord_BR spedRecord  = FBSpedRecord_BR::constructEmpty('I052');

        spedRecord.addFieldEmpty    ();                             // COD_CCUS
        spedRecord.addFieldString   (_mainAccountNum);              // COD_AGL

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordJ100</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record J100.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the record J100 belongs to.
    /// </param>
    /// <param name="_level">
    /// The <c>FBSpedContabilAccountTree_BR</c> level.
    /// </param>
    /// <param name="_left">
    /// The left branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    /// <param name="_right">
    /// The right branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    protected void writeRecordJ100(FBSpedRecord_BR _parentRecord, int _level, int _left, int _right)
    {
        const str Asset ='A';
        const str LiabilityEquity = 'P';

        FBSpedContabilAccountTree_BR spedContabilAccountTree;
        MainAccount mainAccount, parentMainAccount;

        while select spedContabilAccountTree
            where spedContabilAccountTree.LeftValue > _left
                && spedContabilAccountTree.RightValue < _right
                && spedContabilAccountTree.AccountLevel == _level
            join Type, ParentMainAccount from mainAccount
                where mainAccount.MainAccountId == spedContabilAccountTree.AccountCode
                    && mainAccount.LedgerChartOfAccounts == Ledger::chartOfAccounts()
            outer join MainAccountId from parentMainAccount
                where parentMainAccount.RecId == mainAccount.ParentMainAccount
        {
            if (this.getAccountNatureCode(spedContabilAccountTree.AccountType) != TotalAccounts)
            {
                FBSpedContabilAccountTree_BR spedContabilAccountTreeAux = this.getMainAccountOpeningClosingBalance(mainAccount, spedContabilAccountTree);

                str indGrpBal;
                switch (spedContabilAccountTree.AccountType)
                {
                    case DimensionLedgerAccountType::Asset:
                        indGrpBal = Asset;
                        break;

                    case DimensionLedgerAccountType::BalanceSheet:
                        indGrpBal = (spedContabilAccountTreeAux.EndingBalance > 0) ? LiabilityEquity : Asset;
                        break;

                    default:
                        indGrpBal = LiabilityEquity;
                        break;
                }

                FBSpedRecord_BR spedRecord  = FBSpedRecord_BR::constructEmpty('J100');

                spedRecord.addFieldString   (spedContabilAccountTree.AccountCode);                          // COD_AGL
                if (useNatureCode)
                {
                    spedRecord.addFieldString    (mainAccount.NatureCode_BR == Totals ? 'T' : 'D');
                }
                else
                {
                    spedRecord.addFieldString    (this.getAccountNatureCode(mainAccount.Type) == '05' ? 'T' : 'D');
                }
                spedRecord.addFieldNumeric  (spedContabilAccountTree.AccountLevel);                         // NIVEL_AGL
                spedRecord.addFieldString    (parentMainAccount.MainAccountId);
                spedRecord.addFieldString   (indGrpBal);                                                    // IND_GRP_BAL
                spedRecord.addFieldString   (spedContabilAccountTree.AccountDescription);                   // DESCR_COD_AGL
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.OpeningBalance), 2);            // VL_CTA_INI
                spedRecord.addFieldString   (spedContabilAccountTreeAux.OpeningBalance > 0 ? 'D' : 'C');    // IND_DC_BAL_INI
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.EndingBalance), 2);             // VL_CTA
                spedRecord.addFieldString   (spedContabilAccountTreeAux.EndingBalance > 0 ? 'D' : 'C');     // IND_DC_BAL
                this.addExplNote(spedRecord);

                this.addChildRecord(_parentRecord, spedRecord);
            }

            this.writeRecordJ100(_parentRecord, _level + 1, spedContabilAccountTree.LeftValue, spedContabilAccountTree.RightValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountOpeningClosingBalance</Name>
				<Source><![CDATA[
    private FBSpedContabilAccountTree_BR getMainAccountOpeningClosingBalance(MainAccount _mainAccount, FBSpedContabilAccountTree_BR _spedContabilAccountTree)
    {
        FBSpedContabilAccountTree_BR spedContabilAccountTreeAux;

        if (this.checkNatureCodeCodition(_mainAccount, Totals))
        {
            select sum(OpeningBalance), sum(EndingBalance) from spedContabilAccountTreeAux
                where spedContabilAccountTreeAux.LeftValue > _spedContabilAccountTree.LeftValue
                    && spedContabilAccountTreeAux.RightValue < _spedContabilAccountTree.RightValue;
        }
        else
        {
            select sum(OpeningBalance), sum(EndingBalance) from spedContabilAccountTreeAux
                where spedContabilAccountTreeAux.LeftValue == _spedContabilAccountTree.LeftValue
                    && spedContabilAccountTreeAux.RightValue == _spedContabilAccountTree.RightValue;
        }

        return spedContabilAccountTreeAux;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNatureCodeCodition</Name>
				<Source><![CDATA[
    internal boolean checkNatureCodeCodition(MainAccount _mainAccount, str _natureCodeType)
    {
        return (useNatureCode && _mainAccount.NatureCode_BR == _natureCodeType) ||
            (!useNatureCode && this.getAccountNatureCode(_mainAccount.Type) == _natureCodeType);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>