<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetPlanAllocateRequest</c> class is the base class used to
///    capture the information that is required to allocate budget plans.
/// </summary>
public abstract class BudgetPlanAllocateRequest
{
    LegalEntityRecId        legalEntityRecId;
    Set                     budgetPlanLineRecIds;
    container               packedBudgetPlanLineRecIds;
    BudgetPlanScenarioRecId targetBudgetPlanScenarioRecId;
    Factor                  factor;
    boolean                 isCalledFromForm;
    BudgetPlanLayoutRecId   currentLayoutRecId;
    boolean                 appendLines;

}
]]></Declaration>
		<Methods>
			<Method>
                        <Name>parmAppendLines</Name>
				<Source><![CDATA[
    public boolean parmAppendLines(boolean _appendLines = appendLines)
    {
        appendLines = _appendLines;
        return appendLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanAllocateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the budget plan allocation type.
    /// </summary>
    /// <returns>
    ///    The budget plan allocation type.
    /// </returns>
    public abstract BudgetPlanAllocateType getBudgetPlanAllocateType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        budgetPlanLineRecIds = new Set(typeName2Type(extendedTypeStr(BudgetPlanLineRecId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanLineRecIds</Name>
				<Source><![CDATA[
    public Set parmBudgetPlanLineRecIds(Set _budgetPlanLineRecIds = budgetPlanLineRecIds)
    {
        budgetPlanLineRecIds = _budgetPlanLineRecIds;

        return budgetPlanLineRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactor</Name>
				<Source><![CDATA[
    public Factor parmFactor(Factor _factor = factor)
    {
        factor = _factor;

        return factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntityRecId</Name>
				<Source><![CDATA[
    public LegalEntityRecId parmLegalEntityRecId(LegalEntityRecId _legalEntityRecId = legalEntityRecId)
    {
        legalEntityRecId = _legalEntityRecId;

        return legalEntityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetBudgetPlanScenarioRecId</Name>
				<Source><![CDATA[
    public BudgetPlanScenarioRecId parmTargetBudgetPlanScenarioRecId(
        BudgetPlanScenarioRecId _targetBudgetPlanScenarioRecId = targetBudgetPlanScenarioRecId)
    {
        targetBudgetPlanScenarioRecId = _targetBudgetPlanScenarioRecId;

        return targetBudgetPlanScenarioRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCalledFromForm</Name>
				<Source><![CDATA[
    public boolean parmIsCalledFromForm(boolean _isCalledFromForm = isCalledFromForm)
    {
        isCalledFromForm = _isCalledFromForm;

        return isCalledFromForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentLayoutRecId</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutRecId parmCurrentLayoutRecId(BudgetPlanLayoutRecId _currentLayoutRecId = currentLayoutRecId)
    {
        currentLayoutRecId = _currentLayoutRecId;

        return currentLayoutRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the budget plan allocation request is valid.
    /// </summary>
    /// <returns>
    ///    true if the budget plan allocation request is valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        if (!legalEntityRecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        else if (!targetBudgetPlanScenarioRecId)
        {
            throw error("@GLS150224");
        }
        else if ((this.getBudgetPlanAllocateType() != BudgetPlanAllocateType::AllocateByLedgerRule) &&
                    (!budgetPlanLineRecIds || budgetPlanLineRecIds.empty()))
        {
            //
            // Return false when set budgetPlanLineRecIds is found empty.
            // In the case of Ledger allocation rule, we are not using set budgetPlanLineRecIds
            // to iterate through source lines, instead we create budpget plan lines bases on ledger dimension on
            // ledger destination rule. Therefore, we don't require this validation for ledger allocation rule.
            //
            error("@Budget:NoSourceLinesForAllocation");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetPlanAllocateRequest</c> class from a packed copy.
    /// </summary>
    /// <param name="_packedBudgetPlanAllocateRequest">
    ///    A container that contains the an instance of the <c>BudgetPlanAllocateRequest</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetPlanAllocateRequest</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The budget plan allocation type is not supported.
    /// </exception>
    public static BudgetPlanAllocateRequest create(BudgetPlanAllocateRequest _BudgetPlanAllocateRequest)
    {
        BudgetPlanAllocateType      allocateType;
        BudgetPlanAllocateRequest   allocateRequest;

        allocateType = _BudgetPlanAllocateRequest.getBudgetPlanAllocateType();

        switch (allocateType)
        {
            case BudgetPlanAllocateType::AllocateByChildren:
                allocateRequest = BudgetPlanAllocateRequestByChildren::construct();
                break;

            case BudgetPlanAllocateType::AllocateByDimension:
                allocateRequest = BudgetPlanAllocateRequestByDimension::construct();
                break;

            case BudgetPlanAllocateType::AllocateByParent:
                allocateRequest = BudgetPlanAllocateRequestByParent::construct();
                break;

            case BudgetPlanAllocateType::AllocateByPeriod:
                allocateRequest = BudgetPlanAllocateRequestByPeriod::construct();
                break;

            case BudgetPlanAllocateType::AllocateByLedgerRule:
                 allocateRequest = BudgetPlanAllocateReqByLedgerAllocRule::construct();
                break;

            case BudgetPlanAllocateType::AllocateByAncestor:
                allocateRequest = BudgetPlanAllocateRequestByAncestor::construct();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return allocateRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocateTypeFromPackedClass</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the budget plan allocation type from the packed instance of the <c>BudgetPlanAllocateRequest</c> class.
    /// </summary>
    /// <param name="_packedBudgetPlanAllocateRequest">
    ///    A container that contains instance of the <c>BudgetPlanAllocateRequest</c> class.
    /// </param>
    /// <returns>
    ///    The budget plan allocation type.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The container is null or incorrectly structured.
    /// </exception>
    private static BudgetPlanAllocateType getAllocateTypeFromPackedClass(container _packedBudgetPlanAllocateRequest)
    {
        BudgetPlanAllocateType allocateType;

        if (_packedBudgetPlanAllocateRequest != conNull()
            && typeOf(conPeek(_packedBudgetPlanAllocateRequest, 1)) == Types::Enum)
        {
            allocateType = conPeek(_packedBudgetPlanAllocateRequest, 1);
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return allocateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAllocateByChildren</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetPlanAllocateRequestByChildren</c> class.
    /// </summary>
    /// <param name="_legalEntityRecId">
    ///    The legal entity record ID to process the records under.
    /// </param>
    /// <param name="_parentBudgetPlanHeaderRecId">
    ///    The parent <c>BudgetPlanHeader</c> record ID.
    /// </param>
    /// <param name="_sourceBudgetPlanScenarioRecId">
    ///    The source <c>BudgetPlanScenario</c> record ID to allocate the budget plan lines from.
    /// </param>
    /// <param name="_targetBudgetPlanScenarioRecId">
    ///    The target <c>BudgetPlanScenario</c> record ID to allocate the budget plan lines to.
    /// </param>
    /// <param name="_factor">
    ///    The value to multiple by the source budget plan line's quantity and amount fields.
    /// </param>
    /// <param name="_appendLines">
    ///    A boolean value determining whether line data should be appended; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetPlanAllocateRequestByChildren</c> class.
    /// </returns>
    public static BudgetPlanAllocateRequestByChildren newForAllocateByChildren(
        LegalEntityRecId        _legalEntityRecId,
        BudgetPlanHeaderRecId   _parentBudgetPlanHeaderRecId,
        BudgetPlanScenarioRecId _sourceBudgetPlanScenarioRecId,
        BudgetPlanScenarioRecId _targetBudgetPlanScenarioRecId,
        Factor                  _factor,
        boolean                 _appendLines = false)
    {
        BudgetPlanAllocateRequestByChildren allocateRequest;

        allocateRequest = BudgetPlanAllocateRequestByChildren::construct();

        // Set the shared parameters.
        allocateRequest.parmLegalEntityRecId(_legalEntityRecId);
        allocateRequest.parmBudgetPlanLineRecIds(
            BudgetPlanAllocateRequestByChildren::getBudgetPlanLineRecIds(_parentBudgetPlanHeaderRecId, _sourceBudgetPlanScenarioRecId));
        allocateRequest.parmTargetBudgetPlanScenarioRecId(_targetBudgetPlanScenarioRecId);
        allocateRequest.parmFactor(_factor);
        allocateRequest.parmAppendLines(_appendLines);

        // Set the type parameters.
        allocateRequest.parmParentBudgetPlanHeaderRecId(_parentBudgetPlanHeaderRecId);
        allocateRequest.parmSourceBudgetPlanScenarioRecId(_sourceBudgetPlanScenarioRecId);

        return allocateRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAllocateFromBudgetPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetPlanAllocateRequestByAncestor</c> class.
    /// </summary>
    /// <param name="_legalEntityRecId">
    ///    The legal entity record ID to process the records under.
    /// </param>
    /// <param name="_targetBudgetPlanHeaderRecId">
    ///    The target <c>BudgetPlanHeader</c> record ID.
    /// </param>
    /// <param name="_ancestorLevel">
    ///    The value of the ancestor level field.
    /// </param>
    /// <param name="_sourceBudgetPlanScenarioRecId">
    ///    The source <c>BudgetPlanScenario</c> record ID to allocate the budget plan lines from.
    /// </param>
    /// <param name="_targetBudgetPlanScenarioRecId">
    ///    The target <c>BudgetPlanScenario</c> record ID to allocate the budget plan lines to.
    /// </param>
    /// <param name="_factor">
    ///    The value to multiple by the source budget plan line's quantity and amount fields.
    /// </param>
    /// <param name="_isCalledFromForm">
    ///    Is the allocation request come for the form.
    /// </param>
    /// <param name="_sourceBudgetPlanHeaderRecId">
    ///    The Rec ID of the source <c>BudgetPlanHeader</c> buffer.
    /// </param>
    /// <param name="_appendLines">
    ///    A boolean value determining whether line data should be appended; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetPlanAllocateRequestByAncestor</c> class.
    /// </returns>
    public static BudgetPlanAllocateRequestByAncestor newForAllocateFromBudgetPlan(
        LegalEntityRecId        _legalEntityRecId,
        BudgetPlanHeaderRecId   _targetBudgetPlanHeaderRecId,
        BudgetPlanAncestorLevel _ancestorLevel,
        BudgetPlanScenarioRecId _sourceBudgetPlanScenarioRecId,
        BudgetPlanScenarioRecId _targetBudgetPlanScenarioRecId,
        Factor                  _factor,
        boolean                 _isCalledFromForm = false,
        BudgetPlanHeaderRecId   _sourceBudgetPlanHeaderRecId = 0,
        boolean                 _appendLines = false)
    {
        BudgetPlanAllocateRequestByAncestor allocateRequest;
        BudgetPlanHeaderRecId              sourceBudgetPlanHeaderRecId;

        allocateRequest = BudgetPlanAllocateRequestByAncestor::construct();

        // Set the parameters.

        if (_isCalledFromForm)
        {
            sourceBudgetPlanHeaderRecId = _sourceBudgetPlanHeaderRecId;
        }
        else
        {
            sourceBudgetPlanHeaderRecId = BudgetPlanAllocateRequestByAncestor::getSourceBudgetPlanHeaderRecId(
                                            _ancestorLevel,
                                            _targetBudgetPlanHeaderRecId);
        }

        allocateRequest.parmBudgetPlanLineRecIds(
            BudgetPlanAllocateRequestByAncestor::getBudgetPlanLineRecIds(
                sourceBudgetPlanHeaderRecId,
                _sourceBudgetPlanScenarioRecId));

        allocateRequest.parmLegalEntityRecId(_legalEntityRecId);
        allocateRequest.parmTargetBudgetPlanScenarioRecId(_targetBudgetPlanScenarioRecId);
        allocateRequest.parmFactor(_factor);
        allocateRequest.parmParentBudgetPlanHeaderRecId(sourceBudgetPlanHeaderRecId);
        allocateRequest.parmSourceBudgetPlanScenarioRecId(_sourceBudgetPlanScenarioRecId);
        allocateRequest.parmTargetBudgetPlanHeaderRecId(_targetBudgetPlanHeaderRecId);
        allocateRequest.parmIsCalledFromForm(_isCalledFromForm);
        allocateRequest.parmAppendLines(_appendLines);

        return allocateRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAllocateByDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetPlanAllocateRequestByDimension</c> class.
    /// </summary>
    /// <param name="_legalEntityRecId">
    ///    The legal entity record ID to process the records under.
    /// </param>
    /// <param name="_budgetPlanLineRecIds">
    ///    The set of source <c>BudgetPlanLine</c> record IDs to allocate.
    /// </param>
    /// <param name="_targetBudgetPlanScenarioRecId">
    ///    The target <c>BudgetPlanScenario</c> record ID to allocate the budget plan lines to.
    /// </param>
    /// <param name="_factor">
    ///    The value to multiple by the source budget plan line's quantity and amount fields.
    /// </param>
    /// <param name="_budgetAllocationTermRecId">
    ///    The <c>BudgetAllocationTerm</c> record ID to allocate the budget plan lines from.
    /// </param>
    /// <param name="_appendLines">
    ///    A boolean value determining whether line data should be appended; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetPlanAllocateRequestByDimension</c> class.
    /// </returns>
    public static BudgetPlanAllocateRequestByDimension newForAllocateByDimension(
        LegalEntityRecId            _legalEntityRecId,
        Set                         _budgetPlanLineRecIds,
        BudgetPlanScenarioRecId     _targetBudgetPlanScenarioRecId,
        Factor                      _factor,
        BudgetAllocationTermRecId   _budgetAllocationTermRecId,
        boolean                     _appendLines = false)
    {
        BudgetPlanAllocateRequestByDimension allocateRequest;

        allocateRequest = BudgetPlanAllocateRequestByDimension::construct();

        // Set the shared parameters.
        allocateRequest.parmLegalEntityRecId(_legalEntityRecId);
        allocateRequest.parmBudgetPlanLineRecIds(_budgetPlanLineRecIds);
        allocateRequest.parmTargetBudgetPlanScenarioRecId(_targetBudgetPlanScenarioRecId);
        allocateRequest.parmFactor(_factor);
        allocateRequest.parmAppendLines(_appendLines);

        // Set the type parameters.
        allocateRequest.parmBudgetAllocationTermRecId(_budgetAllocationTermRecId);

        return allocateRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAllocateByLedgerAllocationRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetPlanAllocateReqByLedgerAllocRule</c> class.
    /// </summary>
    /// <param name="_legalEntityRecId">
    ///    The record ID of the <c>LegalEntity</c> table to process the records under.
    /// </param>
    /// <param name="_parentBudgetPlanHeaderRecId">
    ///    The parent <c>BudgetPlanHeader</c> table record ID.
    /// </param>
    /// <param name="_sourceBudgetPlanScenarioRecId">
    ///    The source <c>BudgetPlanScenario</c> table record ID to allocate the budget plan lines from.
    /// </param>
    /// <param name="_basisBudgetPlanScenarioRecId">
    ///    The basis <c>BudgetPlanScenario</c> table record ID to get percentage of allocation.
    /// </param>
    /// <param name="_targetBudgetPlanScenarioRecId">
    ///    The target <c>BudgetPlanScenario</c> table record ID to allocate the budget plan lines to.
    /// </param>
    /// <param name="_factor">
    ///    The value to multiple by the target budget plan line's quantity and amount fields.
    /// </param>
    /// <param name="_ledgerAllocationRuleID">
    ///    The <c>LedgerAllocationRule</c> table ID to allocate the budget plan lines from.
    /// </param>
    /// <param name="_useSourceEffectiveDateForAllocation">
    ///    A boolean value that indicates if source effective date is to be used; optional.
    /// </param>
    /// <param name="_appendLines">
    ///    A boolean value determining whether line data should be appended; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetPlanAllocateReqByLedgerAllocRule</c> class.
    /// </returns>
    public static BudgetPlanAllocateReqByLedgerAllocRule newForAllocateByLedgerAllocationRule(
        LegalEntityRecId        _legalEntityRecId,
        BudgetPlanHeaderRecId   _parentBudgetPlanHeaderRecId,
        BudgetPlanScenarioRecId _sourceBudgetPlanScenarioRecId,
        BudgetPlanScenarioRecId _basisBudgetPlanScenarioRecId,
        BudgetPlanScenarioRecId _targetBudgetPlanScenarioRecId,
        Factor                  _factor,
        LedgerAllocationRuleID  _ledgerAllocationRuleID,
        boolean                 _useSourceEffectiveDateForAllocation = false,
        boolean                 _appendLines = false)
    {
        BudgetPlanAllocateReqByLedgerAllocRule allocateRequest;

        allocateRequest = BudgetPlanAllocateReqByLedgerAllocRule::construct();

        // Set the shared parameters.
        allocateRequest.parmLegalEntityRecId(_legalEntityRecId);
        allocateRequest.parmTargetBudgetPlanScenarioRecId(_targetBudgetPlanScenarioRecId);
        allocateRequest.parmFactor(_factor);
        allocateRequest.parmAppendLines(_appendLines);

        // Set the type parameters.
        allocateRequest.parmParentBudgetPlanHeaderRecId(_parentBudgetPlanHeaderRecId);
        allocateRequest.parmSourceBudgetPlanScenarioRecId(_sourceBudgetPlanScenarioRecId);
        allocateRequest.parmBasisBudgetPlanScenarioRecId(_basisBudgetPlanScenarioRecId);
        allocateRequest.parmLedgerAllocationRuleID(_ledgerAllocationRuleID);
        allocateRequest.parmUseSourceEffectiveDateForAllocation(_useSourceEffectiveDateForAllocation);

        return allocateRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAllocateByParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetPlanAllocateRequestByParent</c> class.
    /// </summary>
    /// <param name="_legalEntityRecId">
    ///    The legal entity record ID to process the records under.
    /// </param>
    /// <param name="_parentBudgetPlanHeaderRecId">
    ///    The parent <c>BudgetPlanHeader</c> record ID.
    /// </param>
    /// <param name="_sourceBudgetPlanScenarioRecId">
    ///    The source <c>BudgetPlanScenario</c> record ID to allocate the budget plan lines from.
    /// </param>
    /// <param name="_targetBudgetPlanScenarioRecId">
    ///    The target <c>BudgetPlanScenario</c> record ID to allocate the budget plan lines to.
    /// </param>
    /// <param name="_factor">
    ///    The value to multiple by the source budget plan line's quantity and amount fields.
    /// </param>
    /// <param name="_appendLines">
    ///    A boolean value determining whether line data should be appended; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetPlanAllocateRequestByParent</c> class.
    /// </returns>
    public static BudgetPlanAllocateRequestByParent newForAllocateByParent(
        LegalEntityRecId        _legalEntityRecId,
        BudgetPlanHeaderRecId   _parentBudgetPlanHeaderRecId,
        BudgetPlanScenarioRecId _sourceBudgetPlanScenarioRecId,
        BudgetPlanScenarioRecId _targetBudgetPlanScenarioRecId,
        Factor                  _factor,
        boolean                 _appendLines = false)
    {
        BudgetPlanAllocateRequestByParent allocateRequest;

        allocateRequest = BudgetPlanAllocateRequestByParent::construct();

        // Set the shared parameters.
        allocateRequest.parmLegalEntityRecId(_legalEntityRecId);
        allocateRequest.parmBudgetPlanLineRecIds(
            BudgetPlanAllocateRequestByParent::getBudgetPlanLineRecIds(_parentBudgetPlanHeaderRecId, _sourceBudgetPlanScenarioRecId));
        allocateRequest.parmTargetBudgetPlanScenarioRecId(_targetBudgetPlanScenarioRecId);
        allocateRequest.parmFactor(_factor);
        allocateRequest.parmAppendLines(_appendLines);

        // Set the type parameters.
        allocateRequest.parmParentBudgetPlanHeaderRecId(_parentBudgetPlanHeaderRecId);
        allocateRequest.parmSourceBudgetPlanScenarioRecId(_sourceBudgetPlanScenarioRecId);

        return allocateRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAllocateByPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetPlanAllocateRequestByPeriod</c> class.
    /// </summary>
    /// <param name="_legalEntityRecId">
    ///    The legal entity record ID to process the records under.
    /// </param>
    /// <param name="_budgetPlanLineRecIds">
    ///    The set of source <c>BudgetPlanLine</c> record IDs to allocate.
    /// </param>
    /// <param name="_targetBudgetPlanScenarioRecId">
    ///    The target <c>BudgetPlanScenario</c> record ID to allocate the budget plan lines to.
    /// </param>
    /// <param name="_factor">
    ///    The value to multiple by the source budget plan line's quantity and amount fields.
    /// </param>
    /// <param name="_ledgerAllocateKeyId">
    ///    The <c>LedgerAllocateKey</c> ID to allocate the budget plan lines from.
    /// </param>
    /// <param name="_appendLines">
    ///    A boolean value determining whether line data should be appended; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetPlanAllocateRequestByPeriod</c> class.
    /// </returns>
    public static BudgetPlanAllocateRequestByPeriod newForAllocateByPeriod(
        LegalEntityRecId        _legalEntityRecId,
        Set                     _budgetPlanLineRecIds,
        BudgetPlanScenarioRecId _targetBudgetPlanScenarioRecId,
        Factor                  _factor,
        LedgerAllocateKeyId     _ledgerAllocateKeyId,
        boolean                 _appendLines = false)
    {
        BudgetPlanAllocateRequestByPeriod allocateRequest;

        allocateRequest = BudgetPlanAllocateRequestByPeriod::construct();

        // Set the shared parameters.
        allocateRequest.parmLegalEntityRecId(_legalEntityRecId);
        allocateRequest.parmBudgetPlanLineRecIds(_budgetPlanLineRecIds);
        allocateRequest.parmTargetBudgetPlanScenarioRecId(_targetBudgetPlanScenarioRecId);
        allocateRequest.parmFactor(_factor);
        allocateRequest.parmAppendLines(_appendLines);

        // Set the type parameters.
        allocateRequest.parmLedgerAllocateKeyId(_ledgerAllocateKeyId);

        return allocateRequest;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>