<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowForecastTimeSeriesResultBalanceInsertTmpResults</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CashFlowForecastTimeSeriesResultBalanceInsertTmpResults extends SysQueryInsertRecordSet
{
    private const TableId ResultViewTableId = tableNum(CashFlowTimeSeriesResultView);

    private const FieldId ResutViewCompanyField = fieldNum(CashFlowTimeSeriesResultView, Company);
    private const FieldId ResutViewAccountingDateField = fieldNum(CashFlowTimeSeriesResultView, AccountingDate);
    private const FieldId ResutViewMainAccountField = fieldNum(CashFlowTimeSeriesResultView, MainAccount);
    private const FieldId ResutViewDefaultDimensionField = fieldNum(CashFlowTimeSeriesResultView, DefaultDimension);

    private int cashFlowTimeSeriesResultViewDataSourceId;

    private TimeSeriesId timeSeriesIdToInclude;

    private FieldId accountingCurrencyFieldToInsert;
    private FieldId enterpriseCurrencyFieldToInsert;

    private CashFlowForecastTimeSeriesResultBalanceTmp unCollapsedResults;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertMapping</Name>
				<Source><![CDATA[
    private void insertMapping(FieldId _resultViewField, FieldId _tmpResultField)
    {
        this.insertFieldMap(cashFlowTimeSeriesResultViewDataSourceId, ResultViewTableId, _resultViewField, tableNum(CashFlowForecastTimeSeriesResultBalanceTmp), _tmpResultField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldMapping</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initFieldMapping()
    {
        this.insertMapping(ResutViewCompanyField, fieldNum(CashFlowForecastTimeSeriesResultBalanceTmp, Company));
        this.insertMapping(ResutViewAccountingDateField, fieldNum(CashFlowForecastTimeSeriesResultBalanceTmp, AccountingDate));
        this.insertMapping(ResutViewMainAccountField, fieldNum(CashFlowForecastTimeSeriesResultBalanceTmp, MainAccount));
        this.insertMapping(ResutViewDefaultDimensionField, fieldNum(CashFlowForecastTimeSeriesResultBalanceTmp, DefaultDimension));
        this.insertMapping(fieldNum(CashFlowTimeSeriesResultView, AccountingCurrencyAmount), accountingCurrencyFieldToInsert);
        this.insertMapping(fieldNum(CashFlowTimeSeriesResultView, EnterpriseCurrencyAmount), enterpriseCurrencyFieldToInsert);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Query initQuery()
    {
        Query resultsViewQuery = new Query();
        QueryBuildDataSource qbdsResultsView = resultsViewQuery.addDataSource(ResultViewTableId);
        qbdsResultsView.addRange(fieldNum(CashFlowTimeSeriesResultView, TimeSeriesId)).value(queryValue(timeSeriesIdToInclude));

        QueryBuildDataSource qbdsJoinBalance = qbdsResultsView.addDataSource(tableNum(CashFlowForecastTimeSeriesResultBalance));
        qbdsJoinBalance.addLink(ResutViewCompanyField, fieldNum(CashFlowForecastTimeSeriesResultBalance, Company));
        qbdsJoinBalance.addLink(ResutViewAccountingDateField, fieldNum(CashFlowForecastTimeSeriesResultBalance, AccountingDate));
        qbdsJoinBalance.addLink(ResutViewMainAccountField, fieldNum(CashFlowForecastTimeSeriesResultBalance, MainAccount));
        qbdsJoinBalance.addLink(ResutViewDefaultDimensionField, fieldNum(CashFlowForecastTimeSeriesResultBalance, DefaultDimension));
        qbdsJoinBalance.joinMode(JoinMode::NoExistsJoin);

        resultsViewQuery.clearAllFields();

        cashFlowTimeSeriesResultViewDataSourceId = qbdsResultsView.uniqueId();

        return resultsViewQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetCursor</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Common initTargetCursor()
    {
        unCollapsedResults.skipAosValidation(true);
        unCollapsedResults.skipDataMethods(true);
        unCollapsedResults.skipDatabaseLog(true);
        unCollapsedResults.skipEvents(true);
        unCollapsedResults.skipNumberSequenceCheck(true);
        unCollapsedResults.skipPostLoad(true);
        unCollapsedResults.skipTTSCheck(true);

        return unCollapsedResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForInFlow</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static CashFlowForecastTimeSeriesResultBalanceInsertTmpResults newForInFlow(CashFlowForecastTimeSeriesResultBalanceTmp _unCollapsedResults)
    {
        CashFlowForecastTimeSeriesResultBalanceInsertTmpResults populator = new CashFlowForecastTimeSeriesResultBalanceInsertTmpResults();
        populator.timeSeriesIdToInclude = CashflowInsightsParameterConstants::InflowTimeSeriesId;
        populator.accountingCurrencyFieldToInsert = fieldNum(CashFlowForecastTimeSeriesResultBalanceTmp, AccountingCurrencyAmountIn);
        populator.enterpriseCurrencyFieldToInsert = fieldNum(CashFlowForecastTimeSeriesResultBalanceTmp, EnterpriseCurrencyAmountIn);
        populator.unCollapsedResults = _unCollapsedResults;

        return populator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForOutFlow</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static CashFlowForecastTimeSeriesResultBalanceInsertTmpResults newForOutFlow(CashFlowForecastTimeSeriesResultBalanceTmp _unCollapsedResults)
    {
        CashFlowForecastTimeSeriesResultBalanceInsertTmpResults populator = new CashFlowForecastTimeSeriesResultBalanceInsertTmpResults();
        populator.timeSeriesIdToInclude = CashflowInsightsParameterConstants::OutflowTimeSeriesId;
        populator.accountingCurrencyFieldToInsert = fieldNum(CashFlowForecastTimeSeriesResultBalanceTmp, AccountingCurrencyAmountOut);
        populator.enterpriseCurrencyFieldToInsert = fieldNum(CashFlowForecastTimeSeriesResultBalanceTmp, EnterpriseCurrencyAmountOut);
        populator.unCollapsedResults = _unCollapsedResults;

        return populator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>