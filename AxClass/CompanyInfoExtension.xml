<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CompanyInfoExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// CompanyInfo extension class.
/// </summary>
class CompanyInfoExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CompanyInfo_ModifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// CompanyInfo modified field event handler.
    /// </summary>
    /// <param name = "c">
    /// The modified CompanyInfo record.
    /// </param>
    /// <param name = "e">
    /// Event args.
    /// </param>
    [DataEventHandler(tablestr(CompanyInfo), DataEventType::ModifiedFieldValue)]
    public static void CompanyInfo_ModifiedField(Common c, DataEventArgs e)
    {
        CompanyInfo companyInfo = c as CompanyInfo;
        ModifyFieldValueEventArgs args = e as ModifyFieldValueEventArgs;

        str fieldName = args.parmFieldName();

        switch (fieldName)
        {
            case fieldStr(CompanyInfo, PrintCorrInvoiceLabel_DE):
                if (companyInfo.PrintCorrInvoiceLabel_DE == NoYes::No)
                {
                    companyInfo.PrintCorrInvoiceLabelEffDate_DE = dateNull();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CompanyInfo_ValidateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// CompanyInfo validateDelete event handler.
    /// </summary>
    /// <param name = "c">
    /// The CompanyInfo record to be deleted.
    /// </param>
    /// <param name = "e">
    /// Event args.
    /// </param>
    [DataEventHandler(tablestr(CompanyInfo), DataEventType::ValidatedDelete)]
    public static void CompanyInfo_ValidateDelete(Common c, DataEventArgs e)
    {
        CompanyInfo companyInfo = c as CompanyInfo;
        ValidateEventArgs args = e as ValidateEventArgs;

        boolean ret = args.parmValidateResult();

        if (ret)
        {
            SysDataSharingOrganizationEnabled dataSharingOrganizationEnabled;
            SysDataSharingPolicy dataSharingPolicy;

            select firstonly dataSharingOrganizationEnabled
                join dataSharingPolicy
                where dataSharingOrganizationEnabled.DataSharingCompany == companyInfo.DataArea
                && dataSharingPolicy.IsEnabled == NoYes::Yes;

            if (dataSharingOrganizationEnabled)
            {
                Message::Add(MessageSeverity::Error, strFmt("@GlobalAddressBook:OMLegalEntityDataSharingErrorMessage", companyInfo.DataArea));
                ret = false;
            }

            args.parmValidateResult(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the dataAreaId exists.
    /// </summary>
    /// <param name = "_dataareaId">Legal entity</param>
    /// <returns>True, if the dataareaId exists; otherwise false.</returns>
    public static boolean existsDataArea(SelectableDataArea _dataareaId = curExt())
    {
        CompanyInfo companyInfo;

        return (select RecId from companyInfo where companyInfo.DataArea == _dataareaId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds main account default dimension
    /// </summary>
    /// <param name = "_ledgerDimensionBase">Main account ledgerDimension.</param>
    /// <returns> main account default dimension.</returns>
    public static DimensionDefault getMainAccountDefaultDimension(LedgerDimensionBase _ledgerDimensionBase)
    {
       return (MainAccountLegalEntity::findByMainAccountLegalEntity(
                                        LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_ledgerDimensionBase),
                                        CompanyInfo::current()).DefaultDimension);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>