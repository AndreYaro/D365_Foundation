<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOperationProcessorCreateCustomerOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.DataModel;
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

internal class RetailOperationProcessorCreateCustomerOrder extends RetailDocumentOperationProcessorBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailOperationProcessorCreateCustomerOrder construct(RetailDocumentOperationProcessorParameters _parameters)
    {
        return new RetailOperationProcessorCreateCustomerOrder(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the request document and save result, should be implement in subclasses.
    /// </summary>
    /// <returns>A container object to indicate result documents.</returns>
    /// <exception cref="Exception::Error">The input document is invalid or failed to be processed.</exception>
    protected container processInternal()
    {
        str custOrderInfoXml = conPeek(this.requestContainer, 1);

        container result = this.callCreateCustomerOrderRTSMethod(custOrderInfoXml);

        boolean isSuccess = conPeek(result, RetailDocumentOperationProcessorBase::IsSuccessIndex);

        if (!isSuccess)
        {
            this.throwsException(false, conPeek(result, RetailDocumentOperationProcessorBase::ErrorMessageIndex), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
        }

        return [conPeek(result, RetailDocumentOperationProcessorBase::ResponseDocumentIndex)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>callCreateCustomerOrderRTSMethod</Name>
				<Source><![CDATA[
    private container callCreateCustomerOrderRTSMethod(str custOrderInfoXML)
    {
        using (RetailCustomerOrderCreationContext context = RetailCustomerOrderCreationContext::construct())
        {
            context.parmShouldUpdateSynchronizationStatus(true); // set the flag to create synchronization status
            return RetailTransactionService::createCustomerOrder(custOrderInfoXml);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>