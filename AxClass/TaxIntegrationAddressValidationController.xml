<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAddressValidationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a class that controls the behavior of tax integration address validation.
/// </summary>
internal class TaxIntegrationAddressValidationController
{
    private static TaxIntegrationAddressValidationController singleton = new TaxIntegrationAddressValidationController();
    private TaxIntegrationTaxServiceParameters taxIntegrationTaxServiceParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static TaxIntegrationAddressValidationController instance()
    {
        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        this.taxIntegrationTaxServiceParameters = TaxIntegrationTaxServiceParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAddressValidationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the tax integration address validation is enabled
    /// </summary>
    /// <returns>true if enabled; otherwise, false.</returns>
    public boolean isAddressValidationEnabled()
    {
        return taxIntegrationTaxServiceParameters.IsISVTaxSolutionProviderEnabled
            && TaxIntegrationUtils::isISVApiActivated(TaxServiceISVApiTypes::AddressValidation)
            && taxIntegrationTaxServiceParameters.isAddressValidationEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryRegionSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the provided country region is supported from tax integration parameter
    /// </summary>
    /// <param name = "_countryRegionId">LogisticsAddressCountryRegionId</param>
    /// <returns>true if country region is supported; otherwise, false.</returns>
    public boolean isCountryRegionSupported(LogisticsAddressCountryRegionId _countryRegionId)
    {
        return TaxIntegrationAddressValidationSupportedCountry::findByCountryRegionId(_countryRegionId) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the automatic validation is enabled
    /// </summary>
    /// <returns>true if automatic validation is enabled; otherwise, false.</returns>
    public boolean isAutoValidation()
    {
        return taxIntegrationTaxServiceParameters.AutomaticValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldOverwrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should overwrite the address entry when validated address information returned.
    /// </summary>
    /// <returns>true if need overwriting; otherwise, false.</returns>
    public boolean shouldOverwrite()
    {
        return taxIntegrationTaxServiceParameters.OverwriteAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIntegrationFeatureSetupId</Name>
				<Source><![CDATA[
    public TaxIntegrationFeatureSetupId getTaxIntegrationFeatureSetupId()
    {
        return taxIntegrationTaxServiceParameters.ISVFeatureSetupId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>