<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRDefaultDimensions_SalesQuotationTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRDefaultDimensions_SalesQuotationTable</c> class finds and sets default dimensions for a <c>SalesQuotationTable</c>.
/// </summary>
class MCRDefaultDimensions_SalesQuotationTable extends MCRDefaultDimensions
{
    SalesQuotationTable     salesQuotationTable;
    MCRSalesQuotationTable  mcrSalesQuotationTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the default dimensions based on which part of the hierarchy is being evaluated.
    /// </summary>
    /// <param name="_mcrItemOrCustOrCatalog">
    /// Specifies whether finding dimensions for item, customer, or catalog.
    /// </param>
    protected void determineDimensions(MCRItemOrCustOrCatalog _mcrItemOrCustOrCatalog)
    {
        switch (_mcrItemOrCustOrCatalog)
        {
            case MCRItemOrCustOrCatalog::Customer      :
                this.setCustomerDefaults();
                break;

            case MCRItemOrCustOrCatalog::Item          :
                break;

            case MCRItemOrCustOrCatalog::Catalog         :
                if (mcrSalesQuotationTable.SourceId)
                {
                    this.setCatalogDefaults();
                }
                break;

            default:
                throw error (strfmt("@MCR10766", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatalogDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the catalog dimensions off of the <c>Catalog</c> table.
    /// </summary>
    /// <returns>
    /// The catalog default dimensions.
    /// </returns>
    protected DimensionDefault getCatalogDimensions()
    {
        return Catalog::find(MCRSourceCodeSetup::find(mcrSalesQuotationTable.SourceId).Catalog).DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the customer dimensions off of the <c>CustTable</c> table
    /// or the <c>smmBusRelTable</c> table.
    /// </summary>
    /// <returns>
    /// The default customer dimensions.
    /// </returns>
    protected DimensionDefault getCustDimensions()
    {
        if (salesQuotationTable.CustAccount)
        {
            return CustTable::find(salesQuotationTable.CustAccount).DefaultDimension;
        }
        else
        {
            return smmBusRelTable::find(salesQuotationTable.BusRelAccount).DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an empty dimension, since <c>SalesTable</c> will never evaluate
    /// item dimensions.
    /// </summary>
    /// <returns>
    /// An empty dimension buffer.
    /// </returns>
    protected DimensionDefault getItemDimensions()
    {
        DimensionDefault dim;

        return dim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the table buffer passed in to the global variable <c>salesQuotationTable</c>
    /// upon creating an instance of this class.
    /// </summary>
    /// <param name="_salesQuotationTable">
    /// The <c>SalesQuotationTable</c> table buffer passed in for default dimension processing.
    /// </param>
    public void new(SalesQuotationTable _salesQuotationTable)
    {
        super();
        salesQuotationTable = _salesQuotationTable;
        mcrSalesQuotationTable = _salesQuotationTable.mcrSalesQuotationTable();
        this.setMCRSourceCode(mcrSalesQuotationTable.SourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the global variable to the table buffer.
    /// </summary>
    protected void setDimensions()
    {
        salesQuotationTable.DefaultDimension = salesQuotationTable.copyDimension(dimensions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSiteDimension</Name>
				<Source><![CDATA[
        protected void setSiteDimension()
    {
        salesQuotationTable.modifiedInventSiteFromParent();
        this.setDefaults(salesQuotationTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the hierarchy of how to assign dimensions and then set the dimensions.
    /// </summary>
    public void setDefaultDimensions()
    {
        if (!this.shouldCleanCurrentDimensions())
        {
            // Blank out the dimension on source code modified, this way
            // the defaulting will come from the hierarchy set up on the AR parameters
            // field AccountRevenue.
            salesQuotationTable.DefaultDimension = 0;
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>