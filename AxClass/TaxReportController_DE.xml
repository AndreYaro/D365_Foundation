<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportController_DE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportController_DE</c> class is the controller class for the <c>TaxReport_DE</c> report.
/// </summary>
[SysObsolete('This class is no longer used.', true, 01\12\2022)]
public class TaxReportController_DE extends SrsReportRunController implements BatchRetryable
{
    TaxReportLayout        taxReportLayout;

    TaxPeriod           taxPeriod;
    TransDate           fromDate;
    TransDate           toDate;
    TaxRepVersion       taxRepVersion;
    TransDate           transDate;
    Voucher             voucher;
    TaxPeriodHead       taxPeriodHead;
    TaxReportCollection taxReportCollection;
    TaxReportTmp_DE     taxReportTmp_DE;

    NoYes               electronicDeclaration;
    NoYes               submitDocSeparately;

    TaxReport           taxReport;
    TaxReportPeriod     taxReportPeriod;
    TaxReportVoucher    taxReportVoucher;
    TmpTaxReportById    tmpTaxReportById;
    boolean             updated;

    AmountMST           salesTaxCodeTotalAmount;
    TaxCode             taxCode;
    AmountMST           amountTaxCode;
    TaxDirection        taxDirection;

    boolean             isRunReport;
    RecId               reportParamRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceDE00003, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    void calc()
    {
        if (isRunningOnBatch() && !taxReportVoucher && !taxReport)
        {
            TaxReportContract_DE contract = this.parmReportContract().parmRdpContract() as TaxReportContract_DE;
            if (contract)
            {
                if (contract.parmTaxReportVoucherRecId())
                {
                    select firstonly taxReportVoucher
                        where taxReportVoucher.RecId == contract.parmTaxReportVoucherRecId();
                }
                else
                {
                    container taxReportPacked = contract.getTaxReportPacked();
                    if (taxReportPacked != conNull())
                    {
                        taxReport = new TaxReport();
                        taxReport.unpack(taxReportPacked);
                    }
                }
            }
        }

        if (taxReportVoucher)
        {
            tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(taxReportVoucher.FromDate,taxReportVoucher.ToDate,taxReportVoucher.TaxPeriod,taxReportVoucher.TaxRepVersion,taxReportVoucher.TaxRepCounter);
            this.parmTaxPeriod(taxReportVoucher.TaxPeriod);
            this.parmFromDate(taxReportVoucher.FromDate);
            this.parmToDate(taxReportVoucher.ToDate);
            this.parmTaxRepVersion(taxReportVoucher.TaxRepVersion);
            this.parmTransDate(taxReportVoucher.TransDate);
            this.parmVoucher(taxReportVoucher.Voucher);
        }
        else if (taxReport)
        {
            tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(taxReport.fromDate(),taxReport.toDate(),taxReport.taxPeriod(),taxReport.taxRepVersion(),0,taxReport.update());
            this.parmTaxPeriod(taxReport.taxPeriod());
            this.parmFromDate(taxReport.fromDate());
            this.parmToDate(taxReport.toDate());
            this.parmTaxRepVersion(taxReport.taxRepVersion());
            this.parmTransDate(taxReport.transDate());
            this.parmVoucher(taxReport.voucher());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustments</Name>
				<Source><![CDATA[
    public void calcAdjustments()
    {
        TmpTaxReportById            adjustments;
        TaxReportAdjustmentTrans    taxReportAdjustmentTrans;
        TaxReportPeriod             taxReportPeriodPrevious;

        if (voucher)
        {
            while select FromDate, ToDate, TaxVersion from taxReportAdjustmentTrans
            where taxReportAdjustmentTrans.Voucher   == voucher &&
                  taxReportAdjustmentTrans.TransDate == transDate &&
                  taxReportAdjustmentTrans.TaxPeriod == taxPeriod
            {
                adjustments = null;
                adjustments = TaxTrans::taxAmountByReportId_Table(taxReportAdjustmentTrans.FromDate,
                                                                  taxReportAdjustmentTrans.ToDate,
                                                                  taxReportAdjustmentTrans.TaxPeriod,
                                                                  TaxRepVersion::Original,
                                                                  taxReportAdjustmentTrans.TaxVersion);
                TaxTrans::insertAdjustmentInTmpTaxReportById(tmpTaxReportById, adjustments);
            }
        }
        else
        {
            while select FromDate, ToDate, TaxPeriod, VersionNum from taxReportPeriodPrevious
            where taxReportPeriodPrevious.TaxPeriod == taxPeriod &&
                  taxReportPeriodPrevious.FromDate  < fromDate   &&
                  taxReportPeriodPrevious.VersionNum > 0
            {
                adjustments = null;
                adjustments = TaxTrans::taxAmountByReportId_Table(taxReportPeriodPrevious.FromDate,
                                                                  taxReportPeriodPrevious.ToDate,
                                                                  taxReportPeriodPrevious.TaxPeriod,
                                                                  TaxRepVersion::Original,
                                                                  taxReportPeriodPrevious.VersionNum);
                TaxTrans::insertAdjustmentInTmpTaxReportById(tmpTaxReportById, adjustments);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    public boolean fetch()
    {
        TaxTable            taxTable;
        TaxTrans            taxTransOutGoing;
        TaxTrans            taxTransInComing;
        TaxTrans            taxTransUseTax;
        Query               query;
        QueryRun            queryRun;
        boolean             inserted;
        Counter             versionMax;
        Counter             versionMin;

        query = new Query(querystr(TaxReport_DE));
        query = this.initQuery(query);

        if (this.parmTmpTaxReportById())
        {
            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                taxReportCollection = queryRun.get(tablenum(TaxReportCollection));
                if (taxReportCollection.TaxReportLayout == this.taxReportLayout())
                {
                    inserted = false;

                    taxReportTmp_DE.clear();
                    taxReportTmp_DE.TaxPeriod = this.taxPeriod();
                    taxReportTmp_DE.FromDate = this.fromDate();
                    taxReportTmp_DE.ToDate = this.toDate();
                    taxReportTmp_DE.TaxRepVersion = this.taxRepVersion();
                    taxReportTmp_DE.TaxReportLayout = this.taxReportLayout();
                    taxReportTmp_DE.TaxReportField = taxReportCollection.TaxReportField;
                    taxReportTmp_DE.Name = taxReportCollection.Name;
                    taxReportTmp_DE.TaxAmount = this.taxAmount();
                    
                    salesTaxCodeTotalAmount += taxReportTmp_DE.TaxAmount;
                    
                    if (salesTaxCodeTotalAmount)
                    {
                        versionMax  = TaxReport::counterMax(taxRepVersion, taxPeriod, fromDate);
                        versionMin  = TaxReport::counterMin(taxRepVersion, taxPeriod, fromDate);

                        if (taxRepVersion == TaxRepVersion::Latest)
                        {
                            versionMax--;
                            versionMin--;
                        }

                        while select
                                    TaxCode
                                    , RepFieldTaxFreeSales
                                    , RepFieldTaxFreeBuy
                                    , RepFieldTaxOutgoing
                                    , RepFieldTaxIncoming
                                    , RepFieldBaseOutgoing
                                    , RepFieldBaseIncoming
                                    , RepFieldUseTax
                                    , RepFieldUseTaxOffset
                                    , RepFieldBaseUseTax
                                    , RepFieldBaseUseTaxOffset
                            from taxTable
                            where taxTable.RepFieldTaxFreeSales     == taxreportCollection.TaxReportField ||
                                    taxTable.RepFieldTaxFreeBuy       == taxreportCollection.TaxReportField ||
                                    taxTable.RepFieldTaxOutgoing      == taxreportCollection.TaxReportField ||
                                    taxTable.RepFieldTaxIncoming      == taxreportCollection.TaxReportField ||
                                    taxTable.RepFieldBaseOutgoing     == taxreportCollection.TaxReportField ||
                                    taxTable.RepFieldBaseIncoming     == taxreportCollection.TaxReportField ||
                                    taxTable.RepFieldUseTax           == taxreportCollection.TaxReportField ||
                                    taxtable.RepFieldUseTaxOffset     == taxreportCollection.TaxReportField ||
                                    taxTable.RepFieldBaseUseTax       == taxreportCollection.TaxReportField ||
                                    taxtable.RepFieldBaseUseTaxOffset == taxreportCollection.TaxReportField &&
                                    taxTable.TaxPeriod                == this.taxPeriod()
                        {
                            // If the taxCode is found, mark the record as inserted.
                            inserted = true;

                            taxCode = taxTable.TaxCode;

                            // For OutGoing Tax (Sales Tax payable)
                            if (taxTable.RepFieldTaxOutgoing || taxTable.RepFieldBaseOutgoing)
                            {
                                taxDirection = TaxDirection::OutgoingTax;

                                select sum(TaxAmount), sum(TaxBaseAmount) from taxTransOutGoing
                                    where taxTransOutGoing.TaxCode      == taxTable.TaxCode     &&
                                            taxTransOutGoing.TransDate    >= this.parmFromDate()  &&
                                            taxTransOutGoing.TransDate    <= this.parmToDate()    &&
                                            taxTransOutGoing.TaxDirection == taxDirection         &&
                                            taxTransOutGoing.TaxOrigin    != TaxOrigin::TaxReporting &&
                                            taxTransOutGoing.TaxRepCounter >= versionMin          &&
                                            taxTransOutGoing.TaxRepCounter <= versionMax;

                                if (taxTransOutGoing.TaxAmount &&
                                    taxTable.RepFieldTaxOutgoing == taxreportCollection.TaxReportField)
                                {
                                    amountTaxCode = taxTransOutGoing.TaxAmount;
                                }
                                else
                                {
                                    if (taxTransOutGoing.TaxBaseAmount && taxTable.RepFieldBaseOutgoing == taxreportCollection.TaxReportField)
                                    {
                                        amountTaxCode = taxTransOutGoing.TaxBaseAmount;
                                    }
                                }
                                taxReportTmp_DE.TaxCode = this.taxCode();
                                taxReportTmp_DE.TaxCodeName = this.taxCodeName();
                                taxReportTmp_DE.TaxDirection = this.taxDirection();
                                taxReportTmp_DE.TaxAmountTaxCode = this.taxAmountTaxCode();
                                taxReportTmp_DE.TaxCodeTotalsSection = NoYes::Yes;
                                taxReportTmp_DE.insert();
                                amountTaxCode = 0;
                            }

                            // For InComing Tax (Sales Tax recievable)
                            if (taxTable.RepFieldTaxIncoming || taxTable.RepFieldBaseIncoming)
                            {
                                taxDirection = TaxDirection::IncomingTax;
                                select sum(TaxAmount), sum(TaxBaseAmount) from taxTransInComing
                                    where taxTransInComing.TaxCode      == taxTable.TaxCode     &&
                                            taxTransInComing.TransDate    >= this.parmFromDate()  &&
                                            taxTransInComing.TransDate    <= this.parmToDate()    &&
                                            taxTransInComing.TaxDirection == taxDirection         &&
                                            taxTransInComing.TaxOrigin    != TaxOrigin::TaxReporting &&
                                            taxTransInComing.TaxRepCounter >= versionMin          &&
                                            taxTransInComing.TaxRepCounter <= versionMax;

                                if (taxTransInComing.TaxAmount   &&
                                    taxTable.RepFieldTaxIncoming == taxreportCollection.TaxReportField)
                                {
                                    amountTaxCode = taxTransInComing.TaxAmount;
                                }
                                else
                                {
                                    if (taxTransInComing.TaxBaseAmount && taxTable.RepFieldBaseIncoming == taxreportCollection.TaxReportField)
                                    {
                                        amountTaxCode = taxTransInComing.TaxBaseAmount;
                                    }
                                }
                                taxReportTmp_DE.TaxCode = this.taxCode();
                                taxReportTmp_DE.TaxCodeName = this.taxCodeName();
                                taxReportTmp_DE.TaxDirection = this.taxDirection();
                                taxReportTmp_DE.TaxAmountTaxCode = this.taxAmountTaxCode();
                                taxReportTmp_DE.TaxCodeTotalsSection = NoYes::Yes;
                                taxReportTmp_DE.insert();
                                amountTaxCode = 0;
                            }

                            //For TaxFreeSales and TaxFreeBuy(TaxExemptSales and TaxExemptPurchase)
                            if (taxTable.RepFieldTaxFreeSales || taxTable.RepFieldTaxFreeBuy)
                            {
                                if(taxTable.RepFieldTaxFreeSales)
                                {
                                    taxDirection = TaxDirection::TaxExemptSales;
                                }
                                else
                                {
                                    taxDirection = TaxDirection::TaxExemptPurchase;
                                }

                                TaxTrans taxTransFree;
                                select sum(TaxAmount), sum(TaxBaseAmount) from taxTransFree
                                where taxTransFree.TaxCode      == taxTable.TaxCode     &&
                                       taxTransFree.TransDate    >= this.parmFromDate()  &&
                                       taxTransFree.TransDate    <= this.parmToDate()    &&
                                       taxTransFree.TaxDirection == taxDirection         &&
                                       taxTransFree.TaxOrigin    != TaxOrigin::TaxReporting &&
                                       taxTransFree.TaxRepCounter >= versionMin          &&
                                       taxTransFree.TaxRepCounter <= versionMax;

                                if(taxTransFree.TaxBaseAmount && (taxTable.RepFieldTaxFreeSales == taxreportCollection.TaxReportField || taxTable.RepFieldTaxFreeBuy == taxreportCollection.TaxReportField))
                                {
                                    amountTaxCode = taxTransFree.TaxBaseAmount;
                                }
                                taxReportTmp_DE.TaxCode = this.taxCode();
                                taxReportTmp_DE.TaxCodeName = this.taxCodeName();
                                taxReportTmp_DE.TaxDirection = this.taxDirection();
                                taxReportTmp_DE.TaxAmountTaxCode = this.taxAmountTaxCode();
                                taxReportTmp_DE.TaxCodeTotalsSection = NoYes::Yes;
                                taxReportTmp_DE.insert();
                                amountTaxCode = 0;
                            }

                            // For Use Offset Tax (Use Tax)
                            if (taxTable.RepFieldBaseUseTax || taxTable.RepfieldBaseUseTaxOffset || taxTable.RepFieldUseTax || taxTable.RepFieldUseTaxOffset)
                            {
                                taxDirection = TaxDirection::UseTax;
                                select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST) from taxTransUseTax
                                    where taxTransUseTax.TaxCode      == taxTable.TaxCode     &&
                                            taxTransUseTax.TransDate    >= this.parmFromDate()  &&
                                            taxTransUseTax.TransDate    <= this.parmToDate()    &&
                                            taxTransUseTax.TaxDirection == taxDirection         &&
                                            taxTransUseTax.TaxOrigin    != TaxOrigin::TaxReporting &&
                                            taxTransUseTax.TaxRepCounter >= versionMin          &&
                                            taxTransUseTax.TaxRepCounter <= versionMax;

                                if (taxTransUseTax.TaxAmount &&
                                    (taxTable.RepFieldUseTax == taxreportCollection.TaxReportField ||
                                    taxTable.RepFieldUseTaxOffset == taxreportCollection.TaxReportField))
                                {
                                    if (taxTable.RepFieldUseTax == taxreportCollection.TaxReportField)
                                    {
                                        amountTaxCode = taxTransUseTax.TaxAmount;
                                    }
                                    else
                                    {
                                        amountTaxCode = taxTransUseTax.taxAmount - taxTransUseTax.TaxInCostPriceMST;
                                    }
                                }
                                else
                                {
                                    if (taxTransUseTax.TaxBaseAmount &&
                                        (taxTable.RepFieldBaseUseTax == taxreportCollection.TaxReportField ||
                                        taxTable.RepFieldBaseUseTaxOffset == taxreportCollection.TaxReportField))
                                    {
                                        amountTaxCode = taxTransUseTax.TaxBaseAmount;
                                    }
                                }
                                taxReportTmp_DE.TaxCode = this.taxCode();
                                taxReportTmp_DE.TaxCodeName = this.taxCodeName();
                                taxReportTmp_DE.TaxDirection = this.taxDirection();
                                taxReportTmp_DE.TaxAmountTaxCode = this.taxAmountTaxCode();
                                taxReportTmp_DE.TaxCodeTotalsSection = NoYes::Yes;
                                taxReportTmp_DE.insert();
                                amountTaxCode = 0;
                            }
                        }
                        salesTaxCodeTotalAmount = 0;
                    }

                    if (!inserted)
                    {
                        taxReportTmp_DE.insert();
                    }
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    public FromDate fromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args)
    {
        if (classidget(_args.parmObject()) == classnum(TaxReport))
        {
            taxReport = _args.parmObject();
        }

        if (_args && _args.dataset() == tablenum(TaxReportPeriod))
        {
            taxReportPeriod = _args.record();
        }

        if (_args && _args.dataset() == tablenum(TaxReportVoucher))
        {
            this.parmTaxReportVoucher(_args.record());
            this.parmUpdated(NoYes::Yes);
        }

        if (_args &&
            (classidget(_args.caller()) == classnum(TaxReport) ||
             classidget(_args.caller()) == classnum(TaxReportAdjustTrans)))
        {
            this.parmTaxReport(_args.caller());
            this.parmUpdated(taxReport.taxReported());
        }

        tmpTaxReportById.setTmpData(this.parmTmpTaxReportById());

        taxReportLayout = TaxAuthorityAddress::find(TaxPeriodHead::find(this.parmTaxPeriod()).TaxAuthority).TaxReportLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public Query initQuery(Query _query)
    {
        QueryBuildRange     range;

        range = _query.dataSourceTable(tablenum(TaxReportCollection)).findRange(fieldnum(TaxReportCollection, TaxReportLayout));
        range.value(enum2str(TaxReportLayout::Germany));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReport</Name>
				<Source><![CDATA[
    TaxReport parmTaxReport(TaxReport _taxReport = taxReport)
    {
        taxReport = _taxReport;
        return taxReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReportVoucher</Name>
				<Source><![CDATA[
    TaxReportVoucher parmTaxReportVoucher(TaxReportVoucher  _taxReportVoucher = taxReportVoucher)
    {
        taxReportVoucher = _taxReportVoucher;
        return taxReportVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRepVersion</Name>
				<Source><![CDATA[
    TaxRepVersion parmTaxRepVersion(TaxRepVersion _taxRepVersion = taxRepVersion)
    {
        taxRepVersion = _taxRepVersion;
        return taxRepVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpTaxReportById</Name>
				<Source><![CDATA[
    TmpTaxReportById parmTmpTaxReportById(TmpTaxReportById _tmpTaxReportById = tmpTaxReportById)
    {
        tmpTaxReportById = _tmpTaxReportById;
        return tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdated</Name>
				<Source><![CDATA[
    NoYes parmUpdated(NoYes _updated = updated)
    {
        updated = _updated;
        return updated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        this.initFromArgs(this.parmArgs());

        TaxReportContract_DE contract = this.parmReportContract().parmRdpContract() as TaxReportContract_DE;
        contract.parmTaxReportVoucherRecId(taxReportVoucher ? taxReportVoucher.RecId : 0);
        contract.setTaxReportPacked(taxReport ? taxReport.pack() : conNull());

        if (this.taxRepVersion() == TaxRepVersion::Original ||
            this.taxRepVersion() == TaxRepVersion::Total)
        {
            this.parmShowDialog(true);
        }
        else
        {
            this.parmShowDialog(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        TaxReportContract_DE            contract;

        contract = this.parmReportContract().parmRdpContract() as TaxReportContract_DE;

        electronicDeclaration = contract.parmElectronicDeclaration();
        submitDocSeparately   = contract.parmSubmitDocSeperate();

        this.runLogic();

        if (reportParamRecId)
        {
            contract.parmSrsTmpTblMarshallerContract().parmTmpTableDataRecId(reportParamRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runLogic</Name>
				<Source><![CDATA[
    public void runLogic()
    {
        TaxReportInitializeDE taxReportInitializeDE;
        this.calc();

        if (TaxParameters::find().ReportAdjustment)
        {
            this.calcAdjustments();
        }

        taxReportInitializeDE = TaxReportInitialize::construct(TaxReportLayout::Germany);
        taxReportInitializeDE.init(this.parmTmpTaxReportById(), this.parmTaxPeriod());
        taxReportInitializeDE.parmFromDate(this.parmFromDate());
        taxReportInitializeDE.parmTaxRepVersion(this.taxRepVersion());
        taxReportInitializeDE.parmDocSubSep(submitDocSeparately);

        if (electronicDeclaration && taxReport)
        {
            TaxElectronicDeclarationXML taxElectronicDeclarationXML = TaxElectronicDeclarationXML::construct(TaxReportLayout::Germany);
            taxElectronicDeclarationXML.createXML(taxPeriod, fromDate, submitDocSeparately, taxReportInitializeDE);
        }
        else
        {
            taxReportInitializeDE.invertSigns();
            if (this.fetch())
            {
                this.sendTaxReportTmp_DE();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runToScreen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the report to the screen.
    /// </summary>
    protected void runToScreen()
    {
        if (!electronicDeclaration)
        {
            super();
        }
        Else
        {
            this.parmShowDialog(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTaxReportTmp_DE</Name>
				<Source><![CDATA[
    public RecId sendTaxReportTmp_DE()
    {
        SRSReportRunPermission      srsPermission;

        srsPermission = new SRSReportRunPermission();
        srsPermission.assert();
        reportParamRecId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(taxReportTmp_DE);
        CodeAccessPermission::revertAssert();

        delete_from taxReportTmp_DE;

        return reportParamRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    private TaxAmount taxAmount()
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == taxReportCollection.TaxReportField;

        return tmpTaxReportById.Amount - tmpTaxReportById.TaxInCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountTaxCode</Name>
				<Source><![CDATA[
    private TaxAmount taxAmountTaxCode()
    {
        return amountTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCode</Name>
				<Source><![CDATA[
    private TaxCode taxCode()
    {
        return taxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodeName</Name>
				<Source><![CDATA[
    private TaxName taxCodeName()
    {
        return TaxTable::find(taxCode).TaxName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDirection</Name>
				<Source><![CDATA[
    private TaxDirection taxDirection()
    {
        return taxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriod</Name>
				<Source><![CDATA[
    private TaxPeriod taxPeriod()
    {
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxReportLayout</Name>
				<Source><![CDATA[
    private TaxReportLayout taxReportLayout()
    {
        return TaxReportLayout::Germany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRepVersion</Name>
				<Source><![CDATA[
    private TaxRepVersion taxRepVersion()
    {
        return taxRepVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    public ToDate toDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController  controller = new TaxReportController_DE();
        controller.parmReportName(ssrsReportStr(TaxReport_DE, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>