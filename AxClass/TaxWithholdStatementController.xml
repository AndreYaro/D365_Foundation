<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdStatementController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdStatementController</c> class is the controller class for the
/// tax withholding statement report.
/// </summary>
class TaxWithholdStatementController extends SrsReportRunController implements BatchRetryable
{
    TaxWithholdEFilling_IN taxWithholdEFilling_IN;

    #define.AdditionalOneYear(1)
    #define.AdditionalTwoYear(2)

    #define.ConNumber1(1)
    #define.ConNumber2(2)
    #define.ConNumber3(3)
    #define.ConNumber4(4)
    #define.ConNumber5(5)
    #define.ConNumber6(6)
    #define.ConNumber7(7)
    #define.ConNumber8(8)
    #define.ConNumber9(9)
    #define.ConNumber10(10)
    #define.ConNumber11(11)
    #define.ConNumber12(12)
    #define.ConNumber13(13)
    #define.ConNumber14(15)
    #define.ConNumber15(15)
    #define.ConNumber16(16)
    #define.ConNumber17(17)
    #define.ConNumber18(18)
    #define.ConNumber19(19)
    #define.ConNumber20(20)
    #define.ConNumber21(21)
    #define.ConNumber22(22)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFeatureActivation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used for checking whether the TCS and TDS are activated.
    /// </summary>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void checkFeatureActivation(taxWithholdType_IN _taxType)
    {
        TaxWithholdParameters_IN       taxWithholdParameters;

        //Check TDS and TCS feature whether activated
        taxWithholdParameters = TaxWithholdParameters_IN::find();
        if (_taxType == TaxWithholdType_IN::TCS && taxWithholdParameters.TCSActivate == NoYes::No)
        {
            //'TCS' parameter must be selected in the general ledger parameters to activate the 'TCS' feature.
            throw error(strfmt("@GLS5081", "@GLS5471", "@GLS5471"));
        }
        else if (_taxType == TaxWithholdType_IN::TDS && taxWithholdParameters.TDSActivate == NoYes::No)
        {
            //'TDS' parameter must be selected in the general ledger parameters to activate the 'TDS' feature.
            throw error(strfmt("@GLS5081", "@GLS5470", "@GLS5470"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateEFilingAnd27A</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value and calls the <c>efiling</c> method to generate the <c>efiling</c> and report 27A.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void generateEFilingAnd27A()
    {
        container dateFromContractCon;
        dateFromContractCon = this.setValues();

        if (dateFromContractCon != conNull())
        {
            if (null == taxWithholdEFilling_IN)
            {
                taxWithholdEFilling_IN = new taxWithholdEFilling_IN();
            }
            taxWithholdEFilling_IN.init(dateFromContractCon);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        TaxWithholdStatementContract statementContract;
        CompanyInfo                  companyInfo = CompanyInfo::find();
        super();

        if (this.parmArgs().parmEnum() == TaxWithholdType_IN::TCS)
        {
            //TCS statement
            this.parmDialogCaption("@GLS6382");
        }
        else
        {
            //TDS statement
            this.parmDialogCaption("@GLS6384");
        }
        statementContract = this.getReportContract().parmRdpContract() as TaxWithholdStatementContract;
        statementContract.parmTaxType(this.parmArgs().parmEnum());

        statementContract.parmStatementFiledEarlier(NoYes::No);
        statementContract.parmProvisionalReceiptNumber('');
        statementContract.parmCorrectedEfiling(NoYes::No);
        statementContract.parmFileName('');
        statementContract.parmEfiling(NoYes::No);
        statementContract.parmEfilingFiled(NoYes::No);
        statementContract.parmConsolidatedFileName('');
        statementContract.parmTANName(companyInfo.Name);
        statementContract.parmBranchDivision(companyInfo.BranchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        this.generateEFilingAnd27A();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets values to container, prepares data to generate efiling and report 27A.
    /// </summary>
    /// <returns>
    /// A container that contains all data that is used in generating efiling and report 27A.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container setValues()
    {
        container               dataFromContractCon;
        str                     financialYear;
        str                     assessYear;
        int                     month;
        TransDate               fromDate;
        TransDate               toDate;
        TaxWithholdPeriod_IN    periodEnd;
        TaxWithholdCodeType_IN  taxCodeType;
        Amount                  totalDepositAmount;
        int                     serialNumber;

        TaxWithholdStatementContract statementContract;

        statementContract = this.getReportContract().parmRdpContract() as TaxWithholdStatementContract;
        if (statementContract.parmEfiling() || statementContract.parmCorrectedEfiling())
        {
            fromDate = statementContract.parmFromDate();
            if (!fromDate && statementContract.parmTaxWithholdDate() )
            {
                [periodEnd, fromdate, todate] = TaxWithholdStatementReportHelper::getFromToDateAndPeriodEnd(statementContract.parmTaxWithholdDate());
            }
            else
            {
                toDate = statementContract.parmToDate();
                periodEnd = statementContract.parmPeriodEnd();
            }

            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber1, fromDate);
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber2, toDate);
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber3, statementContract.parmFileName());
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber4, statementContract.parmResponsiblePerson());
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber5, statementContract.parmDesignation());

            month               = mthofyr(fromDate);
            if (month == 1)
            {
                financialYear   = int2str(year(fromDate - #AdditionalOneYear)) + int2str(year(fromDate));
                assessYear      = int2str(year(fromDate)) + int2str(year(fromDate) + #AdditionalOneYear);
            }
            else
            {
                financialYear   = int2str(year(fromDate)) + int2str(year(fromDate) + #AdditionalOneYear);
                assessYear      = int2str(year(fromDate) + #AdditionalOneYear) + int2str(year(fromDate) + #AdditionalTwoYear);
            }
            [totalDepositAmount, serialNumber]  = TaxWithholdStatementReportHelper::getSerialNumberAndTotalTaxAmount(
                statementContract.parmStatement(),
                fromDate,
                toDate,
                statementContract.parmTaxAccountNumber());

            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber6, financialYear);
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber7, assessYear);
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber8, totalDepositAmount);
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber9, serialNumber);
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber10, TaxWithholdRegNumbers_IN::findByTaxRegistrationNumber(statementContract.parmTaxAccountNumber(), TaxRegistrationType_IN::Company).RecId);
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber11, statementContract.parmEfilingFiled());
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber12, statementContract.parmPrintDate());
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber13, statementContract.parmCorrectedEfiling());
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber14, statementContract.parmFileName());
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber15, statementContract.parmProvisionalReceiptNumber());
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber16, periodEnd);

            taxCodeType = statementContract.parmTaxType() == TaxWithholdType_IN::TCS ? TaxWithholdCodeType_IN::TCS : TaxWithholdCodeType_IN::TDS;
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber17, taxCodeType);

            if (statementContract.parmTaxType() == TaxWithholdType_IN::TCS)
            {
                dataFromContractCon = conpoke(dataFromContractCon, #ConNumber18, TaxWithholdStatement_IN::Form27EQ);
                dataFromContractCon = conpoke(dataFromContractCon, #ConNumber19, TaxWithholdComponentStatus_IN::Resident);
            }
            else if (statementContract.parmTaxType() == TaxWithholdType_IN::TDS
                    && statementContract.parmStatement() == TaxWithholdStatement_IN::Form26Q)
            {
                dataFromContractCon = conpoke(dataFromContractCon, #ConNumber18, TaxWithholdStatement_IN::Form26Q);
                dataFromContractCon = conpoke(dataFromContractCon, #ConNumber19, TaxWithholdComponentStatus_IN::Resident);
            }
            else if (statementContract.parmTaxType() == TaxWithholdType_IN::TDS
                    && statementContract.parmStatement() == TaxWithholdStatement_IN::Form27Q)
            {
                dataFromContractCon = conpoke(dataFromContractCon, #ConNumber18, TaxWithholdStatement_IN::Form27Q);
                dataFromContractCon = conpoke(dataFromContractCon, #ConNumber19, TaxWithholdComponentStatus_IN::NonResident);
            }

            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber20, statementContract.parmUtilityName());
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber21, statementContract.parmTANName());
            dataFromContractCon = conpoke(dataFromContractCon, #ConNumber22, statementContract.parmBranchDivision());
            return dataFromContractCon;
        }
        else
        {
            return conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean                      ret;
        TaxWithholdStatementContract statementContract;
        NoYesId                      statementFiledearlier;
        NoYesId                      correctedEFiling;
        Filename                     consolidatedFileName;

        ret = super();

        statementContract = this.getReportContract().parmRdpContract() as TaxWithholdStatementContract;

        statementFiledearlier = statementContract.parmStatementFiledEarlier();
        correctedEFiling      = statementContract.parmCorrectedEfiling();
        consolidatedFileName  = statementContract.parmConsolidatedFileName();

        if (ret && statementFiledearlier && correctedEFiling)
        {
            if (!statementContract.isValidConsolidatedFile(consolidatedFileName))
            {
                ret = ret && checkFailed(strfmt("@SYS4002105"));
            }
            else
            {
                taxWithholdEFilling_IN = TaxWithholdEFilling_IN::construtEFillingByConsolidatedFile(consolidatedFileName);
                if (null == taxWithholdEFilling_IN)
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxWithholdStatementController controller = new TaxWithholdStatementController();

        controller.checkFeatureActivation(_args.parmEnum());
        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(TaxWithholdStatement, Design));

        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>