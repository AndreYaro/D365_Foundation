<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCROverrideLogin</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCROverrideLogin</c> class is used to prompt the user for additional
///     login for overrides.
/// </summary>
class MCROverrideLogin
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isUserLogInValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a <c>boolean</c> value indicating if the user specified has entered
    ///     a valid userId/password combination.
    /// </summary>
    /// <param name="_networkAlias">
    ///     The network alias to use for the override login.
    /// </param>
    /// <param name="_password">
    ///     The network password to use for the override login.
    /// </param>
    /// <returns>
    ///     true if the user login was successful; otherwise, false.
    /// </returns>
    public boolean isUserLogInValid(NetworkAlias _networkAlias,
                                        MCRPassword _password )
    {
        UserInfo        userInfo;

        str domain = 'LDAP://';
        System.DirectoryServices.DirectoryEntry dirEntry;

        select NetworkDomain from   userInfo
            where       userInfo.NetworkAlias == _networkAlias;

        if (!userInfo)
        {
          throw error ("@MCR20761");
        }
        domain          += userInfo.NetworkDomain;
        // Validate overriden user password
        // Microsoft Dynamics AX 4.0 Logon is moved to an Active Directory Ã¢â‚¬â€œ based solution.
        dirEntry = new System.DirectoryServices.DirectoryEntry(domain,
                                                                _networkAlias,
                                                                _password);
        try
        {
            // The following line IS necessary as it coerces the exception on failure.
            dirEntry.get_Name();
        }
        catch (Exception::CLRError)
        {
            throw error ("@MCR10291");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a <c>boolean</c> value indicating if a user is valid for a price override.
    /// </summary>
    /// <param name="_userId">
    ///     The network alias to use for the override login.
    /// </param>
    /// <param name="_newPrice">
    ///     The price the user changed the field to.
    /// </param>
    /// <param name="_fieldId">
    ///     The ID of the field that was changed.
    /// </param>
    /// <param name="_marginPrice">
    ///     The margin price of the changed price.
    /// </param>
    /// <returns>
    ///     true if the user is authorized to change the price; otherwise false.
    /// </returns>
    /// <remarks>
    ///     After we find the authorization groups that the user belongs to,
    ///     see if the corresponding authorization groups have a cost markup
    ///     overridden price on the order.
    /// </remarks>
    public boolean isUserValid(UserId _userId,
                        SalesPrice _newPrice,
                        FieldId _fieldId,
                        SalesPrice _marginPrice = 0)
    {
        container   roles;
        int         idx;
        boolean     roleValid;

        roles = MCRAssistantUserRole::getRolesForUser(_userId, curext());

        if (conPeek(roles, 1))
        {
            for (idx = 1; idx <= conLen(roles); idx++)
            {
                // If we are checking the user to make an override, we need to make
                // sure that they are in a group and that group has the permission
                // to give that cost + markup discount.
                roleValid = MCRPriceOverrideMarkUpGroup::isRoleValidForOverride(conPeek(roles, idx),
                                                                                       _newPrice,
                                                                                       _fieldId,
                                                                                       _marginPrice);

                if (roleValid)
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchPriceOverrideLogin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the login override form to allow for price or miscellaneous charge override.
    /// </summary>
    /// <param name="_table">
    /// A <c>Common</c> buffer pertaining to the override attempt.
    /// </param>
    /// <param name="_override">
    /// A <c>NoYes</c> enumeration that determines whether the user is attempting to override.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID that the user is attempting to override; optional.
    /// </param>
    /// <param name="_origTradeValue">
    /// The original value of the field that the user is attempting to override; optional.
    /// </param>
    /// <returns>
    /// The arguments required to launch the login override form.
    /// </returns>
    [SysObsolete('AD login deprecated in D365.', false, 08\02\2021)]
    public Args launchPriceOverrideLogin(
        Common  _table,
        NoYes   _override,
        FieldId _fieldId = 0,
        real    _origTradeValue = 0)
    {
        MCRLaunchPriceOverrideForms  launchPriceOverrideForms;
        launchPriceOverrideForms = new MCRLaunchPriceOverrideForms();
        return launchPriceOverrideForms.launchPriceOverrideLogin(_table, _override, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchPriceOverrideReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the reason code form.
    /// </summary>
    /// <param name="_table">
    ///     The caller table.
    /// </param>
    /// <param name="_override">
    ///     Determines if this is an override.
    /// </param>
    /// <returns>
    ///     The <c>MCRPriceOverrideReasonCode</c> the user selected on the reason code form.
    /// </returns>
    public RetailInformationSubcodeId launchPriceOverrideReasonCode(Common _table, NoYes _override)
    {
        MCRLaunchPriceOverrideForms  launchPriceOverrideForms;

        launchPriceOverrideForms = new MCRLaunchPriceOverrideForms();
        return launchPriceOverrideForms.LaunchPriceOverrideReasonCode(_override);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>