<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTermJob_IPC</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Instances of this class represent IPC jobs. These jobs originate from the <c>JmgIpcActivity</c>
/// table.
/// </summary>
/// <remarks>
/// The <c>JmgIpcActivity</c> table both defines IPC jobs that registrations can be made on and those
/// that are used to perform special tasks. They include the clock-in and clock-out jobs, the start
/// assistance and stop assistance jobs, and the stop break jobs. Registering on system jobs and on
/// ordinary jobs is performed the same way, by using the <see cref="M:JmgTermJob.makeRegistration" />
/// method.
/// </remarks>
class JmgTermJob_IPC extends JmgTermJob
{
    JmgIpcCategory  jmgIpcCategory;
    JmgIpcActivity  jmgIpcActivity;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actOprId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the activity ID of the IPC job.
    /// </summary>
    /// <returns>
    ///    The value of the activity field of the <c>JmgIpcActivity</c> record from which the job originated.
    /// </returns>
    public JmgActOprID actOprId()
    {
        JmgActOprID ret;

        ret = super();

        if (jmgIpcActivity)
        {
            ret = jmgIpcActivity.Activity;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether employees can create registrations on the job.
    /// </summary>
    /// <returns>
    ///    The value of the <c>SignIn</c> field of the <c>JmgIpcActivity</c> record from where the IPC job
    ///    originated.
    /// </returns>
    boolean allow()
    {
        if (jmgIpcActivity)
            return jmgIpcActivity.SignIn;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAttendanceRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an attendance registration on the job.
    /// </summary>
    /// <param name="_registrationParameters">
    ///    The registration parameters, which contains the optional parameters to use when creating the
    ///    attendance registration.
    /// </param>
    /// <param name="_worker">
    ///    The ID of the worker for which to create the attendance registration.
    /// </param>
    /// <param name="_regDate">
    ///    The registration date of the attendance registration.
    /// </param>
    /// <param name="_regTime">
    ///    The registration time of the attendance registration.
    /// </param>
    /// <param name="_start">
    ///    A Boolean value that specifies whether to create a start registration.
    /// </param>
    protected void createAttendanceRegistration(JmgRegistrationParameters _registrationParameters, JmgWorkerRecId _worker, JmgDate _regDate, JmgTime _regTime, boolean _start)
    {
        JmgAttendanceRegistration       jmgAttendanceRegistration;
        JmgAttendanceRegistrationType   type;
        JmgTermJob                      absenceJob;

        if (jmgIpcActivity  &&
            (jmgIpcActivity.Type        == JmgStampTypeEnum::Break      ||
             jmgIpcActivity.Type        == JmgStampTypeEnum::EventCode  ||
             jmgIpcActivity.Type        == JmgStampTypeEnum::OnCall     ||
             (jmgIpcActivity.Type       == JmgStampTypeEnum::Work       &&
              (jmgIpcActivity.SignInOut == JmgSignInOut::SignIn         ||
               jmgIpcActivity.SignInOut == JmgSignInOut::SignOut        ||
               jmgIpcActivity.SignInOut == JmgSignInOut::StartTeam      ||
               jmgIpcActivity.SignInOut == JmgSignInOut::StopTeam       ||
               jmgIpcActivity.SignInOut == JmgSignInOut::StopBreak))))
        {
            switch (jmgIpcActivity.Type)
            {
                case JmgStampTypeEnum::Break:
                    if (_start)
                    {
                        type = JmgAttendanceRegistrationType::StartBreak;
                    }
                    else
                    {
                        type = JmgAttendanceRegistrationType::StopBreak;
                    }
                    jmgAttendanceRegistration.BreakId   = jmgIpcActivity.Activity;
                    break;
                case JmgStampTypeEnum::EventCode:
                    type = JmgAttendanceRegistrationType::SwitchCode;
                    jmgAttendanceRegistration.SwitchCode    = jmgIpcActivity.Activity;
                    break;
                case JmgStampTypeEnum::OnCall:
                    type = JmgAttendanceRegistrationType::SwitchCode;
                    break;
                case JmgStampTypeEnum::Work:
                    switch (jmgIpcActivity.SignInOut)
                    {
                        case JmgSignInOut::SignIn:
                            type = JmgAttendanceRegistrationType::ClockIn;
                            break;
                        case JmgSignInOut::SignOut:
                            type = JmgAttendanceRegistrationType::ClockOut;
                            break;
                        case JmgSignInOut::StopBreak:
                            type = JmgAttendanceRegistrationType::StopBreak;
                            break;
                        case JmgSignInOut::StartTeam:
                            if (_start)
                            {
                                type = JmgAttendanceRegistrationType::StartTeam;
                            }
                            else
                            {
                                type = JmgAttendanceRegistrationType::StopTeam;
                            }
                            break;
                        case JmgSignInOut::StopTeam:
                            type = JmgAttendanceRegistrationType::StopTeam;
                            break;
                    }
                    break;
            }

            jmgAttendanceRegistration.Worker        = _worker;
            jmgAttendanceRegistration.RegDateTime   = DateTimeUtil::newDateTime(_regDate, _regTime, DateTimeUtil::getUserPreferredTimeZone());
            jmgAttendanceRegistration.Type          = type;
            jmgAttendanceRegistration.JobPilot      = _registrationParameters.jobPilot();
            jmgAttendanceRegistration.WrkCtrIdPilot = _registrationParameters.parmWrkCtrIdPilot();
            if (_registrationParameters.jobIdAbsence())
            {
                absenceJob  = JmgTermJob::construct(_registrationParameters.jobIdAbsence());
                jmgAttendanceRegistration.hrmAbsenceCodeGroupId = absenceJob.jobRef();
                jmgAttendanceRegistration.hrmAbsenceCodeId      = absenceJob.actOprId();
            }
            jmgAttendanceRegistration.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>function</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the function that is associated with the job.
    /// </summary>
    /// <param name="_worker">
    ///    The worker ID for which to return the function.
    /// </param>
    /// <returns>
    ///    The button function that is associated with this job.
    /// </returns>
    /// <remarks>
    ///    For all jobs, except IPC jobs, the return value is a <c>JmgSingInButtonFunction::Blank</c>
    ///    enumeration value. However, you can assign button functions to IPC activities, which allows certain
    ///    button functions to be bar-code enabled. That is, when a certain job ID is entered the system will
    ///    perform a certain function.
    /// </remarks>
    JmgSignInButtonFunction function(JmgWorkerRecId _worker)
    {
        if ((jmgIpcActivity) && (jmgIpcActivity.Type == JmgStampTypeEnum::Work))
        {
            switch (jmgIpcActivity.SignInOut)
            {
                case JmgSignInOut::Job              :
                case JmgSignInOut::SysIndirect      :
                                                        break;

                case JmgSignInOut::SignIn           :
                    if (JmgTermReg::getCurSignInTime(_worker))
                        return JmgSignInButtonFunction::Cancel;
                    else
                        return JmgSignInButtonFunction::SignInOut;
                case JmgSignInOut::SignOut          :
                    if (JmgTermReg::getCurSignInTime(_worker))
                        return JmgSignInButtonFunction::SignInOut;
                    else
                        return JmgSignInButtonFunction::Cancel;
                case JmgSignInOut::Submit           :   return JmgSignInButtonFunction::Approve;
                case JmgSignInOut::Clear            :   return JmgSignInButtonFunction::Cancel;
                case JmgSignInOut::Info             :   return JmgSignInButtonFunction::Info;
                case JmgSignInOut::SwitchBundleMode :   return JmgSignInButtonFunction::Bundle;

                case JmgSignInOut::StopBreak        :   return JmgSignInButtonFunction::Jobs;

                case JmgSignInOut::StartTeam        :
                case JmgSignInOut::StopTeam         :
                                                        return JmgSignInButtonFunction::Assistance;
            }
        }

        return super(_worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads into memory the <c>JmgIpcActivity</c> record that the job is based on.
    /// </summary>
    /// <param name="_jmgJobTable">
    /// The <c>JmgJobTable</c> record with the corresponding job ID.
    /// </param>
    /// <param name="_sourceData">
    /// The source data if the source data has already been fetched from the database; optional.
    /// </param>
    /// <remarks>
    /// This method is a part of the initialization procedure of an instance.The <c>initSourceData</c>
    /// method is invoked from the <see cref="M:JmgTermJob.init" /> method.
    /// </remarks>
    protected void initSourceData(JmgJobTable _jmgJobTable, Common _sourceData = null)
    {
        if (_sourceData)
        {
            jmgIpcActivity = _sourceData;
            jmgIpcCategory = JmgIpcCategory::find(jmgIpcActivity.Category, selectSourceDataForUpdate);
        }
        else
        {
            if (_jmgJobTable.Type == JmgJobTableType::SFCActivity   ||
                _jmgJobTable.Type == JmgJobTableType::SFCBreak      ||
                _jmgJobTable.Type == JmgJobTableType::SFCClockIn    ||
                _jmgJobTable.Type == JmgJobTableType::SFCClockOut   ||
                _jmgJobTable.Type == JmgJobTableType::SFCEventCode  ||
                _jmgJobTable.Type == JmgJobTableType::SFCOnCall     ||
                _jmgJobTable.Type == JmgJobTableType::SFCStartTeam  ||
                _jmgJobTable.Type == JmgJobTableType::SFCStopTeam)
            {
                jmgIpcActivity = JmgIpcActivity::findJobId(jobid, selectSourceDataForUpdate);
                jmgIpcCategory = JmgIpcCategory::find(jmgIpcActivity.Category, selectSourceDataForUpdate);
            }
            else
            {
                throw error(strfmt("@SYS22828", funcname()));
            }
        }

        // Absence are no longer valid jobs.
        if (jmgIpcCategory.Type == JmgStampTypeEnum::Absence)
        {
            throw error(strfmt("@SYS39815", this.jobId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTermRegBreak</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>JmgTermReg</c> record when a break registration is made.
    /// </summary>
    /// <param name="_jmgTermReg">
    ///    The <c>JmgTermReg</c> record to initialize.
    /// </param>
    /// <param name="_start">
    ///    A Boolean that indicates whether the <c>jmgTermReg</c> record is initialized as a start break
    ///    registration (true) or a stop break registration (false).
    /// </param>
    /// <remarks>
    ///    When making a registration on an IPC job of type <c>JmgStampTypeEnum::Break</c>, the
    ///    <c>initTermRegBreak</c> method is invoked to initialize the <c>JmgTermReg</c> record that the
    ///    registration is saved in. The <c>RegType</c> field on the <c>jmgTermReg</c> record is initialized.
    /// </remarks>
    private void initTermRegBreak(JmgTermReg _jmgTermReg, boolean _start)
    {
        if (jmgIpcActivity.BreakDrop == JmgBreakDropEnum::All)
        {
            _jmgTermReg.RegType = JmgTermRegType::BrkCancelAll;
        }
        else if (jmgIpcActivity.BreakDrop == JmgBreakDropEnum::One)
        {
            _jmgTermReg.RegType = JmgTermRegType::BrkCancelOne;
        }
        else
        {
            if (_start)
            {
                _jmgTermReg.RegType = JmgTermRegType::BrkFlowStart;
            }
            else
            {
                _jmgTermReg.JobId = JmgIpcActivity::findSignTypeJobId(JmgSignInOut::StopBreak);
                _jmgTermReg.RegType = JmgTermRegType::BrkFlowStop;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTermRegEventCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>JmgTermReg</c> record when a switch code registration is made.
    /// </summary>
    /// <param name="_jmgTermReg">
    ///    The <c>JmgTermReg</c> record that should be initialized.
    /// </param>
    /// <remarks>
    ///    When making a registration on an IPC job of type <c>JmgStampTypeEnum::EventCode</c>, the
    ///    <c>initTermRegEventCode</c> method is invoked to initialize the <c>JmgTermReg</c> record that the
    ///    registration is saved in. The <c>RegType</c> field on the <c>jmgTermReg</c> record is initialized.
    /// </remarks>
    private void initTermRegEventCode(JmgTermReg _jmgTermReg)
    {
        _jmgTermReg.RegType = JmgTermRegType::EventCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTermRegOnCall</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>JmgTermReg</c> record when an on-call registration is made.
    /// </summary>
    /// <param name="_jmgTermReg">
    ///    The <c>JmgTermReg</c> record that is initialized.
    /// </param>
    /// <returns>
    ///    true if the <c>JmgTermReg</c> record was initialized successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When making a registration on an IPC job of type <c>JmgStampTypeEnum::OnCall</c>, the
    ///    <c>initTermRegEventCode</c> method is invoked to initialize the <c>JmgTermReg</c> record in which
    ///    the registration is saved. The <c>RegType</c> field on the <c>jmgTermReg</c> record is initialized.
    /// </remarks>
    private boolean initTermRegOnCall(JmgTermReg _jmgTermReg)
    {
        JmgTermReg  clockInOut;
        if (!jmgIpcActivity)
        {
            this.registrationError("@SYS39900");
        }

        select firstonly forupdate clockInOut
            order by RegDateTime desc
            where clockInOut.Worker     == _jmgTermReg.Worker                                                               &&
                  clockInOut.RegDateTime   <= _jmgTermReg.RegDateTime &&
                  (clockInOut.RegType   == JmgTermRegType::ClockIn                                                          ||
                   clockInOut.RegType   == JmgTermRegType::ClockOut);

        if (clockInOut && clockInOut.RegType  == JmgTermRegType::ClockIn)
        {
            clockInOut.OnCallActivity   = jmgIpcActivity.Activity;
            clockInOut.update();
            return true;
        }
        _jmgTermReg.JobId       = JmgIpcActivity::findSignInJobId();
        _jmgTermReg.RegType     = JmgTermRegType::ClockIn;
        _jmgTermReg.OnCallActivity  = jmgIpcActivity.Activity;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTermRegWork</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>JmgTermReg</c> record when an IPC job registration is made.
    /// </summary>
    /// <param name="_jmgTermReg">
    ///    The <c>JmgTermReg</c> record to initialize.
    /// </param>
    /// <param name="_start">
    ///    A Boolean that indicates whether the <c>jmgTermReg</c> record should be initialized as a start job
    ///    registration (true) or a stop job registration (false).
    /// </param>
    /// <param name="_registrationParameters">
    ///    The additional registration parameters supplied to the <see
    ///    cref="M:JmgTermJob_IPC.makeRegistration" />. The parameters that are used are the <paramref
    ///    name="JmgRegistrationParameters.jobIdAbsence" /> and <paramref
    ///    name="JmgRegistrationParameters.jobPilot" /> parameters.
    /// </param>
    /// <remarks>
    ///    When making a registration on an IPC job of type <c>JmgStampTypeEnum::Work</c>, the
    ///    <c>initTermRegWork</c> method is invoked to initialize the <c>JmgTermReg</c> record that the
    ///    registration is saved in. The <c>RegType</c>, <c>JobIdAbs</c>, and <c>JobPilot</c> fields on the
    ///    <c>jmgTermReg</c> record are initialized.
    /// </remarks>
    private void initTermRegWork(JmgTermReg _jmgTermReg, boolean _start, JmgRegistrationParameters _registrationParameters)
    {
        switch (jmgIpcActivity.SignInOut)
        {
            case JmgSignInOut::SignIn:
                _jmgTermReg.RegType = JmgTermRegType::ClockIn;
                _jmgTermReg.JobIdAbs = _registrationParameters.jobIdAbsence();
                break;
            case JmgSignInOut::SignOut:
                _jmgTermReg.RegType = JmgTermRegType::ClockOut;
                _jmgTermReg.JobIdAbs = _registrationParameters.jobIdAbsence();
                break;
            case JmgSignInOut::StartTeam:
                if (_start)
                {
                    _jmgTermReg.RegType = JmgTermRegType::TeamStart;
                    _jmgTermReg.WorkerPilot = _registrationParameters.jobPilot();
                    _jmgTermReg.WrkCtrIdPilot = _registrationParameters.parmWrkCtrIdPilot();
                    if (!_jmgTermReg.WorkerPilot && !_jmgTermReg.WrkCtrIdPilot)
                    {
                        this.registrationError("@SYS39898");
                    }
                }
                else
                {
                    _jmgTermReg.JobId   = JmgIpcActivity::findSignTypeJobId(JmgSignInOut::StopTeam);
                    _jmgTermReg.RegType = JmgTermRegType::TeamStop;
                }
                break;
            case JmgSignInOut::StopTeam:
                _jmgTermReg.RegType = JmgTermRegType::TeamStop;
                break;
            case JmgSignInOut::Job:
                if (_start)
                {
                    _jmgTermReg.RegType = JmgTermRegType::JobStart;
                }
                else
                {
                    _jmgTermReg.RegType = JmgTermRegType::JobStop;
                }
                break;
            case JmgSignInOut::StopBreak:
                _jmgTermReg.RegType = JmgTermRegType::BrkFlowStop;
                break;

            default:
                this.registrationError(strfmt("@SYS39899", _jmgTermReg.JobId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a description of the job, which is the Description field of the <c>JmgIpcActivity</c>
    ///    record. The job originated from this record.
    /// </summary>
    /// <returns>
    ///    The description associated with the job.
    /// </returns>
    public JmgDescription jobDescription()
    {
        if (jmgIpcActivity)
            return jmgIpcActivity.Description;

        return jmgIpcCategory.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the job reference of this job, which is the Category field of the <c>JmgIpcActivity</c>
    ///    record. The job originates from this record.
    /// </summary>
    /// <returns>
    ///    The job reference of this job.
    /// </returns>
    JmgJobRef jobRef()
    {
        return jmgIpcCategory.Category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourRegType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the journal registration type that this kind of job corresponds to.
    /// </summary>
    /// <returns>
    ///    The type of journal line to create when registering on this kind of job.
    /// </returns>
    /// <remarks>
    ///    When making a registration on a job, a journal line is created in the <c>JmgStampJournalTrans</c>
    ///    table. The type of journal line created is determined by the <c>jourRegType</c> method. For IPC
    ///    jobs, the journal registration type is derived from the <c>Type</c> and <c>SignInOut</c> fields of
    ///    the <c>JmgIpcActivity</c> record. It is where the job originated.For a code example that uses the
    ///    <c>jourRegType</c> method, see <see cref="M:JmgTermJob.jourRegType" />.
    /// </remarks>
    public JmgJourRegType jourRegType()
    {
        JmgJourRegType ret;

        if (jmgIpcActivity)
        {
            switch (jmgIpcActivity.Type)
            {
                case JmgStampTypeEnum::Absence:
                    ret = JmgJourRegTypeEnum::Absence;
                    break;
                case JmgStampTypeEnum::Break:
                    ret = JmgJourRegTypeEnum::BreakReg;
                    break;
                case JmgStampTypeEnum::OnCall:
                    ret = JmgJourRegTypeEnum::SignIn;
                    break;
                case JmgStampTypeEnum::Work:
                    switch (jmgIpcActivity.SignInOut)
                    {
                        case JmgSignInOut::Job:
                        case JmgSignInOut::SysIndirect:
                            ret = JmgJourRegTypeEnum::IndActivity;
                            break;
                        case JmgSignInOut::SignIn:
                            ret = JmgJourRegTypeEnum::SignIn;
                            break;
                        case JmgSignInOut::SignOut:
                            ret = JmgJourRegTypeEnum::SignOut;
                            break;
                        case JmgSignInOut::StartTeam:
                            ret = JmgJourRegTypeEnum::StartTeam;
                            break;
                        case JmgSignInOut::StopTeam:
                            ret = JmgJourRegTypeEnum::StopTeam;
                            break;
                        default:
                            ret = JmgJourRegTypeEnum::Empty;
                            break;
                    }
                    break;
                case JmgStampTypeEnum::EventCode:
                    ret = JmgJourRegTypeEnum::SwitchCode;
                    break;
                default:
                    ret = JmgJourRegTypeEnum::Empty;
                    break;
            }
        }
        else
        {
            ret = JmgJourRegTypeEnum::Absence;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeFeedback</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method is used to provide feedback on a started job.
    /// </summary>
    /// <param name="_worker">
    ///    The ID of the worker making the feedback.
    /// </param>
    /// <param name="_regParameters">
    ///    An instance of the <c>JmgRegistrationParameters</c> class, which encapsulates the parameters to the
    ///    registration.
    /// </param>
    /// <param name="_regDate">
    ///    The date in which the feedback is made.
    /// </param>
    /// <param name="_regTime">
    ///    The time in which the feedback is made.
    /// </param>
    /// <remarks>
    ///    Use this method to enter feedback regarding the number of good items that are produced, the number
    ///    of scrap items, and whether the job is finished. If the user has indicated that she is no longer
    ///    working on the job, a stop job registration will be inserted as well.This method is only used with
    ///    production jobs, as these are the only type of jobs on which feedback can be made.
    /// </remarks>
    public void makeFeedback(JmgWorkerRecId _worker, JmgRegistrationParameters _regParameters, JmgDate _regDate, JmgTime _regTime)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method creates a start or a stop job registration on this job.
    /// </summary>
    /// <param name="_worker">
    ///    The worker that is making the registration.
    /// </param>
    /// <param name="_date">
    ///    The date of the registration.
    /// </param>
    /// <param name="_time">
    ///    The time of the registration.
    /// </param>
    /// <param name="_start">
    ///    <paramref name="false" /> if it is a stop registration; otherwise, the default value is true, which
    ///    indicates a start registration.
    /// </param>
    /// <param name="_registrationParameters">
    ///    Additional registration parameters, to use to make the registration; optional.
    /// </param>
    /// <param name="_autoStamp">
    ///    A <c>NoYes::No</c> enumeration value if this registration is made by some function that is started
    ///    by a supervisor; otherwise the default value is a <c>NoYes::Yes</c> enumeration value that
    ///    indicates that this registration is made by an employee.
    /// </param>
    /// <remarks>
    ///    If an error is detected when the registration is made, an error is thrown.
    /// </remarks>
    public void makeRegistration(
        JmgWorkerRecId              _worker,
        JmgDate                     _date,
        JmgTime                     _time,
        boolean                     _start = true,
        JmgRegistrationParameters   _registrationParameters = new JmgRegistrationParameters(),
        NoYes                       _autoStamp = NoYes::No)
    {
        JmgTermReg jmgTermReg;

        ttsbegin;
        this.initCommon(jmgTermReg, _worker, _date, _time, _autoStamp, _registrationParameters);

        switch (jmgIpcCategory.Type)
        {
            case JmgStampTypeEnum::Break:
                this.initTermRegBreak(jmgTermReg, _start);
                break;
            case JmgStampTypeEnum::EventCode:
                this.initTermRegEventCode(jmgTermReg);
                break;
            case JmgStampTypeEnum::Work:
                this.initTermRegWork(jmgTermReg, _start, _registrationParameters);
                break;
            case JmgStampTypeEnum::OnCall:
                if (this.initTermRegOnCall(jmgTermReg))
                {
                    ttscommit;
                    return;
                }
                break;
            case JmgStampTypeEnum::Error:
                this.registrationError("@SYS39896");
                break;
            case JmgStampTypeEnum::Absence:
                this.registrationError("@SYS39897");
                break;
            default:
                this.registrationError("@SYS39311");
        }
        jmgTermReg.insert();

        this.createAttendanceRegistration(_registrationParameters, _worker, _date, _time, _start);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the module that the job originated from. For IPC jobs, this is <c>JmgModuleEnum::IPC</c>.
    /// </summary>
    /// <returns>
    ///    The module that the job originated from, which is <c>JmgModuleEnum::IPC</c>.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>module</c> method, see the <see cref="M:JmgTermJob.module" />.
    /// </remarks>
    JmgModuleEnum module()
    {
        return JmgModuleEnum::IPC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <see cref="T:JmgTermJob_IPC" />.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Denotes whether the JmgIpcActivity record should be selected for an update.
    /// </param>
    /// <remarks>
    ///    Don't create an instance of the <c>JmgTermJob_IPC</c> class by directly invoking the <c>new</c>
    ///    method. Instead, use the <see cref="M:JmgTermJob::construct" /> or <see
    ///    cref="M:JmgTermJob::constructJobTable" /> method to create instances of the <c>JmgTermJob_IPC</c>
    ///    class.
    /// </remarks>
    void new(boolean _forUpdate = false)
    {
        super();
        selectSourceDataForUpdate = _forUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinish</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether the job has been reported as finished. IPC jobs cannot be reported as finished.
    /// </summary>
    /// <returns>
    ///    false.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>reportedFinish</c> method, see <see
    ///    cref="M:JmgTermJob.reportedFinish" />.
    /// </remarks>
    boolean reportedFinish()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedStarted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether an IPC job is reported as started. An IPC job is always considered as started.
    /// </summary>
    /// <returns>
    ///    true.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>reportedStarted</c> method, see <see
    ///    cref="M:JmgTermJob.reportedStarted" />.
    /// </remarks>
    public boolean reportedStarted()
    {
        boolean ret;

        ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireFeedbackInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether more feedback information is needed when a stop registration is made. It is
    ///    impossible to give feedback on an IPC job.
    /// </summary>
    /// <param name="_regParameters">
    ///    The registration parameters already given; optional.
    /// </param>
    /// <returns>
    ///    false.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>requireFeedbackInfo</c> method, see <see
    ///    cref="M:JmgTermJob.requireFeedbackInfo" />.
    /// </remarks>
    public boolean requireFeedbackInfo(JmgRegistrationParameters _regParameters = new JmgRegistrationParameters())
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireStartupInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether additional startup information is needed. No additional registration parameters
    ///    are needed for IPC jobs.
    /// </summary>
    /// <param name="_regParameters">
    ///    The registration parameters already given; optional.
    /// </param>
    /// <returns>
    ///    false.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>requireStartupInfo</c> method, see the <see
    ///    cref="M:JmgTermJob.requireStartupInfo" />.
    /// </remarks>
    public boolean requireStartupInfo(JmgRegistrationParameters _regParameters = new JmgRegistrationParameters())
    {
        return this.jourRegType() == JmgJourRegTypeEnum::SignIn || this.jourRegType() == JmgJourRegTypeEnum::SignOut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the type of registration that is associated with this job.
    /// </summary>
    /// <returns>
    ///    The registration type associated with this job.
    /// </returns>
    /// <remarks>
    ///    For IPC jobs, the <c>SignInOut</c> field of the <c>JmgIpcActivity</c> record is returned. The
    ///    <c>JmgIpcActivity</c> record is where the job originated.For a code example that uses the
    ///    <c>signType</c> method, see the <see cref="M:JmgTermJob.signType" />.
    /// </remarks>
    JmgSignInOut signType()
    {
        JmgSignInOut ret    = JmgSignInOut::Job;

        if ((jmgIpcActivity) && (jmgIpcActivity.Type == JmgStampTypeEnum::Work))
        {
            ret = jmgIpcActivity.SignInOut;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the source data record that the job originated from. For IPC jobs, this is a
    ///    <c>JmgIpcActivity</c> record.
    /// </summary>
    /// <returns>
    ///    The source record that the job originated from.
    /// </returns>
    /// <remarks>
    ///    If the returned record will be updated, the <see cref="M:JmgTermJob::construct" /> or <see
    ///    cref="M:JmgTermJob::constructJobTable" /> methods should be invoked with the <paramref
    ///    name="_forUpdate" /> parameter set to true.
    /// </remarks>
    public Common sourceData()
    {
        Common ret;

        if (jmgIpcActivity)
        {
            ret = jmgIpcActivity;
        }
        else
        {
            ret = jmgIpcCategory;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stampType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the stamp type associated with this job. For IPC jobs, this is the value of the Type
    ///    field on the <c>JmgIpcActivity</c> record, which is where the job originated.
    /// </summary>
    /// <returns>
    ///    The stamp type associated with this job.
    /// </returns>
    JmgStampTypeEnum stampType()
    {
        return jmgIpcCategory.Type;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>