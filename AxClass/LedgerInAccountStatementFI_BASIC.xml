<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerInAccountStatementFI_BASIC</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerInAccountStatementFI_BASIC  extends LedgerInAccountStatement
{
    /*  FINNISH BASIC IMPORT FORMAT

    Name                Offset      Length      Positions       Comments
    ------------------- ----------- ----------- ---------       --------------------------------------------------
    AccountType         001         001         001 - 001       Use 0 (Zero) if blank
    AccountNum          002         010         002 - 011
    TransactionText     012         030         012 - 041
    DebitAmount         042         020         042 - 061
    CurrencyCode        062         003         062 - 064       If Blank, use "EUR"
    ExchangeRate        065         010         065 - 074
    TaxGroup            075         010         075 - 084       VAT Group / Sales Tax Group
    Dimension1          085         010         085 - 094       Department
    Dimension2          095         010         095 = 104       Cost Center
    Dimension3          105         010         105 - 114       Purpose
    Voucher             115         010         115 - 124
    CreditAmount        125         020         125 - 144       AmountCurCredit
    TaxCode             145         010         145 - 154       VAT Code / Sales Tax Code
    OffsetAccount       155         010         155 - 164
    OffsetAccountType   165         001         165 - 165
    TransDate           166         008         166 - 173       Preferred Format: YYMMDD   (Positions 168 - 173)
                                                                Alternate Format: YYYYMMDD (Positions 166 - 173)
    TaxItemGroup        174         010         174 - 183       VAT Group / Item Sales Tax Group
*/

    // Field Offsets (Positions):
    #define.AccountTypeOffset(1)
    #define.AccountNumOffset(2)
    #define.TransTextOffset(12)
    #define.DebitAmountOffset(42)
    #define.CurrencyCodeOffset(62)
    #define.ExchangeRateOffset(65)
    #define.TaxGroupOffset(75)
    #define.Dimension1Offset(85)
    #define.Dimension2Offset(95)
    #define.Dimension3Offset(105)
    #define.VoucherOffset(115)
    #define.CreditAmountOffset(125)
    #define.TaxCodeOffset(145)
    #define.OffsetAccountOffset(155)
    #define.OffsetAccountTypeOffset(165)
    #define.TransDateOffset(166)
    #define.TaxItemGroupOffset(174)

    //Field Lengths:
    #define.AccountTypeLen(1)
    #define.AccountNumLen(10)
    #define.TransTextLen(30)
    #define.DebitAmountLen(020)
    #define.CurrencyCodeLen(3)
    #define.ExchangeRateLen(10)
    #define.TaxGroupLen(10)
    #define.Dimension1Len(10)
    #define.Dimension2Len(10)
    #define.Dimension3Len(10)
    #define.VoucherLen(10)
    #define.CreditAmountLen(20)
    #define.TaxCodeLen(10)
    #define.OffsetAccountLen(10)
    #define.OffsetAccountTypeLen(1)
    #define.TransDateLen(8)
    #define.TaxItemGroupLen(10)

    #define.isoEUR("EUR")
    #define.Zero("0")

    Counter                 numOfRecord;
    CurrencyCode            currencyCode;
    AmountCurDebit          totalAmountDebit;
    AmountCurCredit         totalAmountCredit;
    TransDate               transDateClosing;
    AccountNum              accountNum;
    AccountNum              offsetAccountNum;
    str 20                  toSite;
    LedgerJournalACType     accountType;
    LedgerJournalACType     offsetAccountType;
    ExchRate                exchRate;
    TaxGroupJournal         taxGroup;
    str 10                  dimension1;
    str 10                  dimension2;
    str 10                  dimension3;
    TaxCode                 taxCode;
    TaxGroupJournal         taxItemGroup;
    LedgerJournalTransTxt   transactionText;
    str                     inputText;
    int                     recordCounter;
    boolean                 restartCounter;
    #define.CurrentVersion(2)
    #localmacro.CurrentList
        inputText,
        recordCounter,
        restartCounter
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be built either by using the <c>Dialog</c> class or by using a class that is
    /// created in the AOT.
    /// </remarks>
    public Object dialog()
    {
        if (totalTrans == TotalTrans::Total)
        {
            // Import account statement totals is not available for Finland.
            throw error("@SYS99907");
        }
        else
        {
            baseDialog = new DialogRunbase("@SYS68265", this);
        }

        this.addFileUploadControlToDialog(baseDialog);

        return baseDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2JournalTotal</Name>
				<Source><![CDATA[
    public void fromDisk2JournalTotal()
    {
        // This feature not required or supported for FINNISH BASIC import format
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2JournalTrans</Name>
				<Source><![CDATA[
    public void fromDisk2JournalTrans(boolean _printReport = true)
    {
        str 390                         line;
        TransDate                       transDate;
        AmountCurDebit                  amountCurDebit;
        AmountCurCredit                 amountCurCredit;
        AmountCurDebit                  amountCurDebitReport;
        LedgerJournalTransImport        ledgerJournalTransImport;
        str 8                           transDateStr;
        int                             lineCount=0;

        // Import of a basic transaction file
        ttsbegin;

        ledgerJournalTransImport = new LedgerJournalTransImport();

        line=this.readData(textFile,lineCount);
        while (line!='')
        {
            if (restartCounter)
                lineCount=0;

            if (line != '0' && strLen(line) > 4)
            {
                numOfRecord ++;
                // Using basic predefined file description
                accountType     = str2int(subStr(line,      #AccountTypeOffset,         #AccountTypeLen));
                if (!this.isValidAccountType(accountType))
                {
                    // "Line #%1 of the import file contains an invalid account type."
                    checkFailed(strFmt("@SYS100108", numOfRecord));

                    // If invalid, default to Ledger (0)
                    accountType = LedgerJournalACType::Ledger;
                }

                accountNum      = strLTrim(strRTrim(subStr(line,    #AccountNumOffset,          #AccountNumLen)));
                transactionText = strRTrim(subStr(line,             #TransTextOffset,           #TransTextLen));
                amountCurDebit  = str2num(subStr(line,              #DebitAmountOffset,         #DebitAmountLen));
                currencyCode    = strRTrim(subStr(line,             #CurrencyCodeOffset,        #CurrencyCodeLen));
                exchRate        = str2num(subStr(line,              #ExchangeRateOffset,        #ExchangeRateLen));
                taxGroup        = strRTrim(subStr(line,             #TaxGroupOffset,            #TaxGroupLen));
                dimension1      = strLTrim(strRTrim(subStr(line,    #Dimension1Offset,          #Dimension1Len)));
                dimension2      = strLTrim(strRTrim(subStr(line,    #Dimension2Offset,          #Dimension2Len)));
                dimension3      = strLTrim(strRTrim(subStr(line,    #Dimension3Offset,          #Dimension3Len)));
                    tosite      = strRTrim(subStr(line,             #VoucherOffset,             #VoucherLen));
                amountCurCredit = str2num(subStr(line,              #CreditAmountOffset,        #CreditAmountLen));
                taxCode         = strRTrim(subStr(line,             #TaxCodeOffset,             #TaxCodeLen));

                offsetAccountType = str2int(subStr(line, #OffsetAccountTypeOffset, #OffsetAccountTypeLen));
                offsetAccountNum  = strLTrim(strRTrim(subStr(line, #OffsetAccountOffset, #OffsetAccountLen)));

                transDateStr    = strRTrim(subStr(line,             #TransDateOffset,           #TransDateLen));
                switch  (strLen(transDateStr))
                {
                    case 6:
                        transDate = mkDate(str2int(subStr(transDateStr, 5, 2)),
                                            str2int(subStr(transDateStr, 3, 2)),
                                            str2int(subStr(transDateStr, 1, 2)));
                        break;

                    case 8:
                        transDate = mkDate(str2int(subStr(transDateStr, 7, 2)),
                                            str2int(subStr(transDateStr, 5, 2)),
                                            str2int(subStr(transDateStr, 1, 4)));
                        break;
                }

                if (!transDate)
                {
                    if (transDateStr)
                    {
                        // "Line #%1 of the import file contains an invalid date.  The System date will be used."
                        checkFailed(strFmt("@SYS100107", numOfRecord));
                    }
                    transDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                }

                taxItemGroup    = strRTrim(subStr(line,     #TaxItemGroupOffset,        #TaxItemGroupLen));

                if (strLRTrim(currencyCode) == "")
                {
                    currencyCode = #isoEUR;
                }

                if (!transDate)
                {
                    transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                }

                amountCurDebitReport = amountCurDebit;
                ledgerJournalTransImport.accountNum(accountNum);
                ledgerJournalTransImport.transDate(transDate);
                ledgerJournalTransImport.currencyCode(currencyCode);
                ledgerJournalTransImport.amountCurDebit(amountCurDebit);
                ledgerJournalTransImport.amountCurCredit(amountCurCredit);

                // transaction is imported
                this.createLedgerJournalTrans(ledgerJournalTransImport);
            }
            lineCount++;
            line=this.readData(textFile,lineCount);
        }

        if (numOfRecord > 0)
        {
            ttscommit;
        }

        else
        {
            // Error in file loaded
            throw error("@SYS13619");
        }
        inputText='';
        this.saveLast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        inputText = '';
        ret = this.openFile();
        recordCounter = 0;
        restartCounter = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected void initLedgerJournalTrans(LedgerJournalTransImport _ledgerJournalTransImport)
    {
        container conDimAttrValues;

        super(_ledgerJournalTransImport);

        conDimAttrValues = conIns(conDimAttrValues, 1, dimension1);
        conDimAttrValues = conIns(conDimAttrValues, 2, dimension2);
        conDimAttrValues = conIns(conDimAttrValues, 3, dimension3);

        if (accountType == LedgerJournalACType::Ledger)
        {
            ledgerJournalTrans.LedgerDimension = LedgerInAccountStatementFI_BASIC::getLedgerDimension(_ledgerJournalTransImport.accountNum(), conDimAttrValues);
        }
        else
        {
            // Otherwise, if the accountType is not Ledger, assign the DimensionAttributeValues as part of the DimensionAttributeValueSet
            ledgerJournalTrans.parmAccount(_ledgerJournalTransImport.accountNum(), accountType);
            ledgerJournalTrans.DefaultDimension = LedgerInAccountStatementFI_BASIC::createDefaultDimension(conDimAttrValues);
        }

        ledgerJournalTrans.TaxGroup             = taxGroup;
        ledgerJournalTrans.TaxCode              = taxCode;
        ledgerJournalTrans.OffsetAccountType    = offsetAccountType;
        ledgerJournalTrans.Txt                  = transactionText;

        if (offsetAccountType == LedgerJournalACType::Ledger)
        {
            ledgerJournalTrans.OffsetLedgerDimension = LedgerInAccountStatementFI_BASIC::getLedgerDimension(offsetAccountNum, conDimAttrValues);
        }
        else
        {
            ledgerJournalTrans.parmOffsetAccount(offsetAccountNum, offsetAccountType);
            // As the Non-Ledger DefaultDimensions will be the same, use the ledgerJournalTrans.DefaultDimension value if it has already been created.
            if (ledgerJournalTrans.DefaultDimension)
            {
                ledgerJournalTrans.OffsetDefaultDimension = ledgerJournalTrans.DefaultDimension;
            }
            else
            {
                ledgerJournalTrans.OffsetDefaultDimension = LedgerInAccountStatementFI_BASIC::createDefaultDimension(conDimAttrValues);
            }
        }

        if (exchRate)
        {
            ledgerJournalTrans.ExchRate         = exchRate != 0 ? 100 / exchRate : 0;
        }

        if (taxItemGroup)
        {
            ledgerJournalTrans.TaxItemGroup     = taxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public className interfaceName()
    {
        #define.FinnishBasic('FINNISH BASIC')
        ;

        return #FinnishBasic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAccountType</Name>
				<Source><![CDATA[
    private boolean isValidAccountType(LedgerJournalACType _accountType)
    {
        boolean     isValid;
        ;

        switch (_accountType)
        {
            case LedgerJournalACType::Ledger:
            case LedgerJournalACType::Cust:
            case LedgerJournalACType::Vend:
            case LedgerJournalACType::Project:
            case LedgerJournalACType::FixedAssets:
            case LedgerJournalACType::Bank:
                isValid =  true;
                break;

            default :
                isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadVoucherNum</Name>
				<Source><![CDATA[
    public void loadVoucherNum()
    // Take voucher from the series defined for the current journal.
    // Same voucher for entire import
    // If we import the same as next voucher, next will be incremented.
    {
        #define.SharpSign('#')
        LedgerJournalTable  ledgerJournalTable;
        NumberSequenceTable numberSequenceTable;
        Integer             i, a, fak=0;
        str                 vou, leiaut, refbase='';
        ;

        if (numOfRecord == 1 || tosite != voucher)
        {
            select * from ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalId;

            if (tosite)
            {
                select * from numberSequenceTable
                         where numberSequenceTable.RecId == ledgerJournalTable.NumberSequenceTable;

                vou = int2str(numberSequenceTable.NextRec);
                if (numberSequenceTable.Format)
                {
                    leiaut = numberSequenceTable.Format;
                    for (i = strLen(leiaut); i >= 1; i -= 1)
                    {
                        if (subStr(leiaut, i, 1) == #SharpSign)
                        {
                            a = strLen(vou) - fak;
                            if (a <= 0)
                            {
                                refBase = #Zero + refBase;
                            }

                            else
                            {
                                refBase = subStr(vou, a, 1) + refBase;
                            }

                            fak += 1;
                        }

                        else
                        {
                            refBase = subStr(leiaut, i, 1) + refBase;
                        }
                    }
                    vou = refBase;
                }

                if (strLFix(vou, 10) == strLFix(tosite, 10))
                {
                    numberSequenceTable.NextRec += 1;
                    numberSequenceTable.update();
                }
                voucher = tosite;
            }

            else
            {
                ttsbegin;

                numberSeq      = NumberSeq::newGetNumFromId(ledgerJournalTable.NumberSequenceTable, true);
                voucher        = numberSeq.num();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    public boolean openFile()
    {
        boolean ret = false;
        int numOflastCharacter = 255;

        textFile = LedgerInAccountStatement::newFile(stream);

        if (textFile)
        {
            if (textFile.status())
            {
                throw error("@SYS52680");
            }

            textFile.inFieldDelimiter(num2char(numOflastCharacter));
            ret = true;
        }
        else
        {
            throw error(strFmt("@SYS73665", filename));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>readData</Name>
				<Source><![CDATA[
    str readData(TextStreamIo txtFile,int lineCount)
    {
        str ret;
        str 390 line;
        #DEFINE.Maxlenth(524288)
        ;
        if (recordCounter==0)
        {
            restartCounter=true;
            inputText='';
            while ((txtFile.status()==IO_Status::Ok) && (strLen(inputText)<=#Maxlenth))
            {
                [line]=textFile.read();
                inputText+=line;
                inputText+='\r\n';
                recordCounter++;
            }
            ret=strLine(inputText,0);
            ret=strDel(ret,strLen(ret),1);
            recordCounter--;
            return ret;
        }
        else
        {
            restartCounter=false;
            ret=strLine(inputText,lineCount);
            ret=strDel(ret,strLen(ret),1);
            recordCounter--;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base] = packedClass;
                super(base);
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;
        ;

        if (!filename)
        {
            // File name is not specified.
            ok = checkFailed("@SYS18624");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerInAccountStatementFI_BASIC construct()
    {
        ;

        return new LedgerInAccountStatementFI_BASIC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>DimensionAttributeValueSet</c> table for a non-ledger account.
    /// </summary>
    /// <param name="_conDimAttrValues">
    /// A container that holds string values that represents the <c>DimensionAttributeValues</c> values to
    /// add to the instance of the <c>DimensionAttributeValueSetStorage</c> class.
    /// </param>
    /// <returns>
    /// The ID of the associated <c>DimensionAttributeValueSet</c> record, if created; otherwise 0.
    /// </returns>
    /// <remarks>
    /// The file structure currently just allows 3 <c>DimensionAttributeValues</c> with a string length of
    /// 10 to be entered so typically the value of the <paramref name="_conDimAttrValues" /> parameter will
    /// only contain 3 Strings.
    /// </remarks>
    public static recId createDefaultDimension(container _conDimAttrValues)
    {
        DimensionFinancialTag               dimFinancialTag;
        FinancialTagCategory                tagCategory;
        DimensionAttributeDirCategory       dimAttrDirCategory;
        DimensionAttribute                  dimAttr;
        DimensionAttributeValue             dimAttrValue;
        DimensionAttributeValueSetStorage   dimAttrValueSetStorage;
        int                                 i;
        str 10                              strDimAttrValue;

        // Create storage
        dimAttrValueSetStorage = new DimensionAttributeValueSetStorage();

        for (i = 1; i<=conLen(_conDimAttrValues); i++)
        {
            strDimAttrValue = conPeek(_conDimAttrValues,i);

            if (strDimAttrValue)
            {
                // Find FinancialTag
                select firstonly RecId
                    from dimFinancialTag
                    where dimFinancialTag.Value == strDimAttrValue
                    join RecId from tagCategory
                        where tagCategory.RecId == dimFinancialTag.FinancialTagCategory
                    join RecId from dimAttrDirCategory
                        where dimAttrDirCategory.DirCategory == tagCategory.RecId
                    join dimAttr
                        where dimAttr.RecId == dimAttrDirCategory.DimensionAttribute;

                // Add to storage
                if (dimFinancialTag.RecId)
                {
                    dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimAttr, strDimAttrValue);

                    if (dimAttrValue.RecId)
                    {
                        dimAttrValueSetStorage.addItem(dimAttrValue);
                    }
                }
            }
        }

        // Return ID
        if (dimAttrValueSetStorage.elements())
        {
            return dimAttrValueSetStorage.save();
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record ID for the dimension hierarchy for the <c>MainAccount</c> record.
    /// </summary>
    /// <param name="_mainAccountId">
    ///    The ID of the <c>MainAccount</c> record on which to base the <c>DimensionHierarchy</c> search.
    /// </param>
    /// <param name="_defaultDimension">
    ///    The <c>DimensionAttributeValueSet</c> record that is based on the <c>DimensionAttributeValues</c>
    ///    value that is passed in from the file.
    /// </param>
    /// <returns>
    ///    A <c>DimensionHierarchy</c> record ID.
    /// </returns>
    private static recId getDimensionHierarchyId(MainAccountNum _mainAccountId, DimensionDefault _defaultDimension)
    {
        DimensionHierarchy dimHierarchy;
        DimensionHierarchyLevel mainAccountHierarchyLevel;
        DimensionHierarchyLevel davHierarchyLevel;
        DimensionConstraintTree mainAccountConstraintTree;
        DimensionConstraintTree davConstraintTree;
        DimensionConstraintNode mainAccountConstraintNode;
        DimensionConstraintNode davConstraintNode;
        DimensionConstraintNodeCriteria mainAccountConstraintNodeCriteria;
        DimensionConstraintNodeCriteria davConstraintNodeCriteria;
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        DimensionValue dimensionValue;
        recId dimAttrRecId;
        recId mainAccountDimAttributeId;
        recId dimHierarchyRecId;
        int numDimensionMatching;
        int currentNumDimensionsMatching;
        int i;

        dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(_defaultDimension);
        mainAccountDimAttributeId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        // Go through the DimensionHierarchies that are possible for this MainAccount and
        //  get the most suitable DimensionHierarchy based on the DimensionAttributeValues
        //  passed in with the file
        while select RecId from dimHierarchy order by Name where
            dimHierarchy.StructureType == DimensionHierarchyType::AccountStructure &&
            dimHierarchy.IsDraft == false &&
            dimHierarchy.DeletedVersion == 0 &&
            dimHierarchy.IsSystemGenerated == false
            exists join RecId from mainAccountHierarchyLevel where
                mainAccountHierarchyLevel.DimensionHierarchy == dimHierarchy.RecId &&
                mainAccountHierarchyLevel.DimensionAttribute == mainAccountDimAttributeId
            exists join RecId from mainAccountConstraintTree where
                mainAccountConstraintTree.DimensionHierarchy == dimHierarchy.RecId
            exists join RecId from mainAccountConstraintNode where
                mainAccountConstraintNode.DimensionConstraintTree == mainAccountConstraintTree.RecId &&
                mainAccountConstraintNode.DimensionHierarchyLevel == mainAccountHierarchyLevel.RecId
            exists join RecId from mainAccountConstraintNodeCriteria where
                mainAccountConstraintNodeCriteria.DimensionConstraintNode == mainAccountConstraintNode.RecId &&
                ((_mainAccountId like mainAccountConstraintNodeCriteria.WildCardString) ||
                ((_mainAccountId <= mainAccountConstraintNodeCriteria.RangeTo) &&
                 (_mainAccountId >= mainAccountConstraintNodeCriteria.RangeFrom)))
        {
            currentNumDimensionsMatching = 0;

            // Go through the DimensionAttributeValues from the file and see how many match this DimensionHierarchy
            for (i=1; i<=dimAttrValueSetStorage.elements(); i++)
            {
                dimAttrRecId = dimAttrValueSetStorage.getAttributeByIndex(i);
                dimensionValue = dimAttrValueSetStorage.getDisplayValueByIndex(i);

                if (dimAttrRecId)
                {
                    // See if the DimensionAttributeValue is ok based on the constraints for this DimensinoHierarchy
                    select firstonly RecId from davHierarchyLevel where
                        davHierarchyLevel.DimensionHierarchy == dimHierarchy.RecId &&
                        davHierarchyLevel.DimensionAttribute == dimAttrRecId
                        exists join RecId from davConstraintTree where
                            davConstraintTree.DimensionHierarchy == dimHierarchy.RecId
                        exists join RecId from davConstraintNode where
                            davConstraintNode.DimensionConstraintTree == davConstraintTree.RecId &&
                            davConstraintNode.DimensionHierarchyLevel == davHierarchyLevel.RecId
                        exists join RecId from davConstraintNodeCriteria where
                            davConstraintNodeCriteria.DimensionConstraintNode == davConstraintNode.RecId &&
                            ((dimensionValue like davConstraintNodeCriteria.WildCardString) ||
                            ((dimensionValue <= davConstraintNodeCriteria.RangeTo) &&
                             (dimensionValue >= davConstraintNodeCriteria.RangeFrom)));

                    if (davHierarchyLevel.RecId != 0)
                    {
                        currentNumDimensionsMatching++;
                    }
                }
            }

            // If this DimensionHierarchy has the most matching DimensionAttributes, save this DimensionHierachy RecId
            if (currentNumDimensionsMatching >= numDimensionMatching)
            {
                dimHierarchyRecId = dimHierarchy.RecId;
                numDimensionMatching = currentNumDimensionsMatching;
            }
        }

        return dimHierarchyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs storage for a <c>LedgerDimensionAccount</c> table by using a ledger account and a
    ///    container that contains <c>DimensionAttributeValue</c> strings, and then returns the reference to
    ///    it.
    /// </summary>
    /// <param name="_ledgerAccount">
    ///    The ledger account number corresponds to a <c>MainAccountId</c> value.
    /// </param>
    /// <param name="_dims">
    ///    A container of <c>DimensionAttributeValue</c> strings.
    /// </param>
    /// <returns>
    ///    The <c>RecId</c> value of the <c>DimensionAttributeValueCombination</c> storage created.
    /// </returns>
    private static LedgerDimensionAccount getLedgerDimension(LedgerJournalAC _ledgerAccount, container _dims)
    {
        DimensionDefault defaultDimension;
        recId mainAccountRecId;
        recId dimHierarchyId;
        LedgerDimensionAccount ledgerDimensionAccount;

        mainAccountRecId = MainAccount::findByMainAccountId(_ledgerAccount).RecId;
        defaultDimension = LedgerInAccountStatementFI_BASIC::createDefaultDimension(_dims);
        dimHierarchyId = LedgerInAccountStatementFI_BASIC::getDimensionHierarchyId(_ledgerAccount, defaultDimension);

        if (mainAccountRecId && dimHierarchyId)
        {
            ledgerDimensionAccount = LedgerDimensionDefaultingEngine::getLedgerDimensionFromAccountAndDim(mainAccountRecId, dimHierarchyId, defaultDimension);
        }

        return ledgerDimensionAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>