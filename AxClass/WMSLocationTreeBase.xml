<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationTreeBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class WmsLocationTreeBase extends RunBase
{
    WMSLocationFormCaller   wmsLocationFormCaller;

    container               callerId;
    WMSParameters           wmsParameters;

    WMSShowInventLocationId showInventLocationId;
    WMSShowLocationId       showLocationId;
    WMSShowLocationType     showLocationType;
    WMSShowMaxLoad          showMaxLoad;
    WMSShowCurrentLoad      showCurrentLoad;
    WMSShowFreeLoad         showFreeLoad;
    WMSShowHeight           showHeight;
    WMSShowInputBlocking    showInputBlocking;
    WMSShowOutputBlocking   showOutputBlocking;
    WMSShowLocationCount    showLocationCount;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        showInventLocationId,
        showLocationId,
        showLocationType,
        showMaxLoad,
        showCurrentLoad,
        showFreeLoad,
        showHeight,
        showInputBlocking,
        showOutputBlocking,
        showLocationCount
    #endmacro

    InventLocationId        ilId;
    str                     ilText;
    #LOCALMACRO.ILInfo
        ILId,
        ILText
    #ENDMACRO

    WMSAisleId              aisleWMSAisleId;
    str                     aisleText;
    NoYes                   aisleSortDescending;
    #LOCALMACRO.AisleInfo
        aisleWMSAisleId,
        aisleText,
        aisleSortDescending
    #ENDMACRO

    WMSRackId               rackWMSRackId;
    str                     rackText;
    #LOCALMACRO.RackInfo
        rackWMSRackId,
        rackText
    #ENDMACRO

    WMSLevelId              levelWMSLevelId;
    str                     levelText;
    #LOCALMACRO.LevelInfo
        levelWMSLevelId,
        levelText
    #ENDMACRO

    WMSLocationId           binLocationId;
    str                     binLocationText;
    #LOCALMACRO.LocationInfo
        binLocationId,
        binLocationText
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aisles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the aisles for the specified warehouse.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the aisles are retrieved.
    /// </param>
    /// <returns>
    /// A container that contains the requested information.
    /// </returns>
    protected abstract container aisles(InventLocationId _inventLocationId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAisleId</Name>
				<Source><![CDATA[
    protected str formatAisleId(
        WMSAisleId      _wmsAisleId,
        Counter         _locationCount)
    {
        str                 lineTxt         = strFmt("@SYS50813", _wmsAisleId);

        if (!showLocationCount)
        {
            return lineTxt;
        }

        lineTxt += ' (' + int2str(_locationCount) + ' ';
        lineTxt += (_locationCount == 1) ? "@SYS3794" : "@SYS20394";
        lineTxt += ')';
        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatInventLocationId</Name>
				<Source><![CDATA[
    protected str formatInventLocationId(
        InventLocationId    _inventLocationId,
        Counter             _locationCount)
    {
        str                 lineTxt = _inventLocationId;

        if (!showLocationCount)
        {
            return lineTxt;
        }

        lineTxt += ' (' + int2str(_locationCount) + ' ';
        lineTxt += (_locationCount == 1) ? "@SYS3794" : "@SYS20394";
        lineTxt += ')';
        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatLevelId</Name>
				<Source><![CDATA[
    protected str formatLevelId(WMSLocation _wmsLocation)
    {
        str                 lineTxt;
        Integer             lineNo;
        InventLocation      inventLocation  = InventLocation::find(_wmsLocation.InventLocationId);
        boolean             levelNameActive = (inventLocation) ? inventLocation.wmsLevelNameActive : true;
        WMSLevelFormat      levelFormat     = (inventLocation) ? inventLocation.wmsLevelFormat : '';

        if (levelNameActive)
        {
            lineNo = infologLine();
            try
            {
                lineTxt = strFmt("@SYS55857", NumberSeq::numInsertFormat(_wmsLocation.Level, levelFormat));
            }
            catch(Exception::Error)
            {
                infolog.clear(lineNo);
                lineTxt = strFmt("@SYS55857", _wmsLocation.Level);
            }
        }

        else
        {
            lineTxt = strFmt("@SYS55857", _wmsLocation.Level);
        }

        if (!showLocationCount)
        {
            return lineTxt;
        }

        lineTxt += ' (' + strFmt('%1', _wmsLocation.RecId);
        lineTxt += (_wmsLocation.RecId) ? "@SYS3794" : "@SYS20394";
        lineTxt += ')';
        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatLocationId</Name>
				<Source><![CDATA[
    protected str formatLocationId(WMSLocation _wmsLocation)
    {
        str                     lineTxt = this.formatTxtTemplate();
        WMSLocationLoadSumCache wmsLocationLoadSumCache;

        if (showCurrentLoad || showFreeLoad)
        {
            wmsLocationLoadSumCache = WMSLocationLoadSumCache::construct();
        }

        return strFmt(lineTxt, (_wmsLocation.InventLocationId)  ? _wmsLocation.InventLocationId  : '--',
                               (_wmsLocation.wmsLocationId)     ? _wmsLocation.wmsLocationId     : '--',
                               enum2Value(_wmsLocation.LocationType),
                               strFmt('%1', _wmsLocation.Height));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatRackId</Name>
				<Source><![CDATA[
    protected str formatRackId(WMSLocation _wmsLocation)
    {
        str                 lineTxt;
        Integer             lineNo;
        InventLocation      inventLocation  = InventLocation::find(_wmsLocation.InventLocationId);
        boolean             rackNameActive  = (inventLocation) ? inventLocation.wmsRackNameActive : true;
        WMSRackFormat       rackFormat      = (inventLocation) ? inventLocation.wmsRackFormat : '';

        if (rackNameActive)
        {
            lineNo = infologLine();
            try
            {
                lineTxt = strFmt("@SYS50814",NumberSeq::numInsertFormat(_wmsLocation.Rack, rackFormat));
            }
            catch(Exception::Error)
            {
                infolog.clear(lineNo);
                lineTxt = strFmt("@SYS50814", _wmsLocation.Rack);
            }
        }
        else
        {
            lineTxt = strFmt("@SYS50814", _wmsLocation.Rack);
        }

        if (!showLocationCount)
        {
            return lineTxt;
        }

        lineTxt += ' (' + strFmt('%1', _wmsLocation.RecId) + ' ';
        lineTxt += (_wmsLocation.RecId == 1) ? "@SYS3794" : "@SYS20394";
        lineTxt += ')';

        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatTxtTemplate</Name>
				<Source><![CDATA[
    protected str formatTxtTemplate()
    {
        str lineTxt;

        lineTxt += (showInventLocationId    ? ((lineTxt ? ' / ' : '') + '%1') : '');
        lineTxt += (showLocationId          ? ((lineTxt ? ' / ' : '') + '%2') : '');
        lineTxt += (showLocationType        ? ((lineTxt ? ' / ' : '') + '%3') : '');
        lineTxt += (showHeight              ? ((lineTxt ? ' / ' : '') + '%4') : '');

        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the warehouses.
    /// </summary>
    /// <returns>
    /// A container that contains the requested information.
    /// </returns>
    abstract protected container inventLocations()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLevelActive</Name>
				<Source><![CDATA[
    protected boolean isLevelActive(
        InventLocationId            _inventLocationId,
        WMSLocationCoordinates      _wmsLocationCoordinates)
    {
        InventLocation  inventLocation = InventLocation::find(_inventLocationId);

        switch (_wmsLocationCoordinates)
        {
            case WMSLocationCoordinates::InventLocation:
                return true;
            case WMSLocationCoordinates::Aisle:
                if (wmsLocationFormCaller == WMSLocationFormCaller::WMSAisle)
                {
                    return true;
                }
                return (inventLocation) ? inventLocation.wmsAisleNameActive : true;
            case WMSLocationCoordinates::Rack:
                return (inventLocation) ? inventLocation.wmsRackNameActive : true;
            case WMSLocationCoordinates::Shelf:
                return (inventLocation) ? inventLocation.wmsLevelNameActive : true;
            case WMSLocationCoordinates::Bin:
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        wmsParameters           = WMSParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextActiveLevel</Name>
				<Source><![CDATA[
    protected WMSLocationCoordinates nextActiveLevel(
        InventLocationId        _inventLocationId,
        WMSLocationCoordinates  _levelNo)
    {
        WMSLocationCoordinates  wmsLocationCoordinates;

        for (wmsLocationCoordinates = _levelNo + 1; wmsLocationCoordinates <= WMSLocationCoordinates::Bin; wmsLocationCoordinates++)
        {
            if (this.isLevelActive(_inventLocationId, wmsLocationCoordinates))
            {
                return wmsLocationCoordinates;
            }
        }
        return WMSLocationCoordinates::Bin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowCurrentLoad</Name>
				<Source><![CDATA[
    public WMSShowCurrentLoad parmShowCurrentLoad(WMSShowCurrentLoad _show = showCurrentLoad)
    {
        if (_show != showCurrentLoad)
        {
            showCurrentLoad = _show;
            this.saveLast();
        }
        return showCurrentLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFreeLoad</Name>
				<Source><![CDATA[
    public WMSShowFreeLoad parmShowFreeLoad(WMSShowFreeLoad _show = showFreeLoad)
    {
        if (_show != showFreeLoad)
        {
            showFreeLoad = _show;
            this.saveLast();
        }
        return showFreeLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowHeight</Name>
				<Source><![CDATA[
    public WMSShowHeight parmShowHeight(WMSShowHeight _show = showHeight)
    {
        if (_show != showHeight)
        {
            showHeight = _show;
            this.saveLast();
        }
        return showHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInputBlocking</Name>
				<Source><![CDATA[
    public WMSShowInputBlocking parmShowInputBlocking(WMSShowInputBlocking _show = showInputBlocking)
    {
        if (_show != showInputBlocking)
        {
            showInputBlocking = _show;
            this.saveLast();
        }
        return showInputBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInventLocationId</Name>
				<Source><![CDATA[
    public WMSShowInventLocationId parmShowInventLocationId(WMSShowInventLocationId _show = showInventLocationId)
    {
        if (_show != showInventLocationId)
        {
            showInventLocationId = _show;
            this.saveLast();
        }
        return showInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowLocationCount</Name>
				<Source><![CDATA[
    public WMSShowLocationCount parmShowLocationCount(WMSShowLocationCount _show = showLocationCount)
    {
        if (_show != showLocationCount)
        {
            showLocationCount = _show;
            this.saveLast();
        }
        return showLocationCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowLocationId</Name>
				<Source><![CDATA[
    public WMSShowLocationId parmShowLocationId(WMSShowLocationId _show = showLocationId)
    {
        if (_show != showLocationId)
        {
            showLocationId = _show;
            this.saveLast();
        }
        return showLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowLocationType</Name>
				<Source><![CDATA[
    public WMSShowLocationType parmShowLocationType(WMSShowLocationType _show = showLocationType)
    {
        if (_show != showLocationType)
        {
            showLocationType = _show;
            this.saveLast();
        }
        return showLocationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMaxLoad</Name>
				<Source><![CDATA[
    public WMSShowMaxLoad parmShowMaxLoad(WMSShowMaxLoad _show = showMaxLoad)
    {
        if (_show != showMaxLoad)
        {
            showMaxLoad = _show;
            this.saveLast();
        }
        return showMaxLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowOutputBlocking</Name>
				<Source><![CDATA[
    public WMSShowOutputBlocking parmShowOutputBlocking(WMSShowOutputBlocking _show = showOutputBlocking)
    {
        if (_show != showOutputBlocking)
        {
            showOutputBlocking = _show;
            this.saveLast();
        }
        return showOutputBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>racks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the rack for the specified aisle.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the racks are retrieved.
    /// </param>
    /// <param name="_aisleId">
    /// The aisle for which the racks are retrieved.
    /// </param>
    /// <returns>
    /// A container that contains the requested information.
    /// </returns>
    abstract protected container racks(
        InventLocationId    _inventLocationId,
        WMSAisleId          _aisleId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shelfLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the locations for the specified shelf.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the locations are retrieved.
    /// </param>
    /// <param name="_aisleId">
    /// The aisle for which the locations are retrieved.
    /// </param>
    /// <param name="_rackId">
    /// The rack for which the locations are retrieved.
    /// </param>
    /// <param name="_shelfId">
    /// The shelf for which the locations are retrieved.
    /// </param>
    /// <returns>
    /// A container that contains the requested information.
    /// </returns>
    abstract protected container shelfLocations(
        InventLocationId    _inventLocationId,
        WMSAisleId          _aisleId,
        WMSRackId           _rackId,
        WMSLevelId          _shelfId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shelves</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container with information about the shelves for the specified rack.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the shelves are retrieved.
    /// </param>
    /// <param name="_aisleId">
    /// The aisle for which the shelves are retrieved.
    /// </param>
    /// <param name="_rackId">
    /// The rack for which the shelves are retrieved.
    /// </param>
    /// <returns>
    /// A container that contains the requested information.
    /// </returns>
    abstract protected container shelves(
        InventLocationId    _inventLocationId,
        WMSAisleId          _aisleId,
        WMSRackId           _rackId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// The delegate definition for tree changed.
    /// </summary>
    delegate void treeChanged()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>raiseTreeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call (trigger) to the delegate, since actual call is protected
    /// </summary>
    public void raiseTreeChanged()
    {
        this.treeChanged();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>