<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransOriginFormDataSourceDynalink</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransOriginFormDataSourceDynalink</c> class adds a form data source dynamic link
/// to an <c>InventTransOrigin</c> table based form data source from the calling form data source.
/// </summary>
public class InventTransOriginFormDataSourceDynalink
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addJoinUsingRelationshipTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a join between the calling data source table and <c>InventTransOrigin</c> table based on a relationship table
    /// which contains foreign keys to both the calling data source table and the <c>InventTransOrigin</c> table.
    /// </summary>
    /// <param name="_query">
    /// A <c>Query</c> object to add the join to.
    /// </param>
    /// <param name="_inventTransOriginDataSource">
    /// An <c>InventTransOrigin</c> form data source.
    /// </param>
    /// <param name="_inventTransDataSource">
    /// An <c>InventTrans</c> form data source.
    /// </param>
    /// <param name="_callerArgs">
    /// A calling form <c>Args</c> object.
    /// </param>
    /// <param name = "_relationshipTableTableId">
    /// The table ID of the relationship table.
    /// </param>
    protected void addJoinUsingRelationshipTable(
        Query           _query, 
        FormDataSource  _inventTransOriginDataSource,
        FormDataSource  _inventTransDataSource,
        Args            _callerArgs,
        TableId         _relationshipTableTableId)
    {
        QueryBuildDataSource inventTransOriginQueryDataSource = 
            this.addInventTransOriginJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _callerArgs, _relationshipTableTableId);

        if (_inventTransDataSource)
        {
            this.addJoinToInventTrans(inventTransOriginQueryDataSource, _inventTransDataSource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransOriginJoinUsingRelationshipTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    protected QueryBuildDataSource addInventTransOriginJoinUsingRelationshipTable(
        Query           _query,
        FormDataSource  _inventTransOriginDataSource,
        Args            _callerArgs,
        TableId         _relationshipTableTableId)
    {
        QueryBuildDataSource inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
        inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

        QueryBuildDataSource relationTableQueryDataSource = inventTransOriginQueryDataSource.addDataSource(_relationshipTableTableId);
        relationTableQueryDataSource.joinMode(JoinMode::InnerJoin);
        relationTableQueryDataSource.addRelation(this.lookupRelation(_relationshipTableTableId, tableNum(InventTransOrigin)));

        this.addDynalinkFromRelation(relationTableQueryDataSource, this.lookupRelation(_relationshipTableTableId, _callerArgs.dataset()), _callerArgs);
        return inventTransOriginQueryDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynalinkFromRelation</Name>
				<Source><![CDATA[
    private void addDynalinkFromRelation(QueryBuildDataSource _dataSource, DictRelation _dictRelation,Args _callerArgs)
    {
        for (int i = 1; i <= _dictRelation.lines(); i++)
        {
            _dataSource.addDynalink(_dictRelation.lineTableValue(i), _callerArgs.record(), _dictRelation.lineExternTableValue(i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRelation</Name>
				<Source><![CDATA[
    private DictRelation lookupRelation(TableId _referencingTableId, TableId _referencedTableId)
    {
        DictRelation    referencingDictRelation;
        Enumerator      relationEnumerator = new SysDictTable(_referencingTableId).relations().getEnumerator();

        while (relationEnumerator.moveNext())
        {
            DictRelation dictRelation = relationEnumerator.current();

            if (dictRelation.externTable() == _referencedTableId)
            {
                if (referencingDictRelation)
                {
                    throw error(strFmt("@SYS59540", tableid2name(_referencingTableId), tableid2name(_referencedTableId)));
                }

                referencingDictRelation = dictRelation;
            }
        }

        if (!referencingDictRelation)
        {
            throw error(strFmt("@SYS59540", tableid2name(_referencingTableId), tableid2name(_referencedTableId)));
        }

        return referencingDictRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJoinToInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds join between the <c>InventTrans</c> table and the <c>InventTransOrigin</c> table.
    /// </summary>
    /// <param name = "_inventTransOriginQueryDataSource">
    /// The parent <c>InventTransOrigin</c> data source.
    /// </param>
    /// <param name="_inventTransDataSource">
    /// An <c>InventTrans</c> form data source.
    /// </param>
    protected void addJoinToInventTrans(
        QueryBuildDataSource    _inventTransOriginQueryDataSource,
        FormDataSource          _inventTransDataSource)
    {
        QueryBuildDataSource inventTransQueryDataSource = _inventTransOriginQueryDataSource.addDataSource(tableNum(InventTrans));
        inventTransQueryDataSource.name(_inventTransDataSource.name());
        inventTransQueryDataSource.joinMode(JoinMode::InnerJoin);
        inventTransQueryDataSource.addLink(fieldNum(InventTransOrigin, RecId),fieldNum(InventTrans, InventTransOrigin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJoinUsingForeignKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds join between the calling data source table and the <c>InventTransOrigin</c> table based a foreign key
    /// on the calling data source table.
    /// </summary>
    /// <param name="_query">
    /// A <c>Query</c> object to add the join to.
    /// </param>
    /// <param name="_inventTransOriginDataSource">
    /// An <c>InventTransOrigin</c> form data source.
    /// </param>
    /// <param name="_inventTransDataSource">
    /// An <c>InventTrans</c> form data source.
    /// </param>
    /// <param name="_callerArgs">
    /// A calling form <c>Args</c> object.
    /// </param>
    protected void addJoinUsingForeignKey(
        Query           _query,
        FormDataSource  _inventTransOriginDataSource,
        FormDataSource  _inventTransDataSource,
        Args            _callerArgs)
    {
        // Using FK on caller to join with InventTransOrigin
        QueryBuildDataSource inventTransOriginQueryDataSource = this.addInventTransOriginJoinUsingForeignKey(_query, _inventTransOriginDataSource, _callerArgs);

        if (_inventTransDataSource)
        {
            this.addJoinToInventTrans(inventTransOriginQueryDataSource, _inventTransDataSource);
            QueryBuildDataSource inventTransQueryDataSource = SysQuery::findOrCreateDataSourceByName(_query, _inventTransDataSource.name(), tableNum(InventTrans));
            inventTransQueryDataSource.addSortField(fieldNum(InventTrans, StatusIssue));
            inventTransQueryDataSource.addSortField(fieldNum(InventTrans, StatusReceipt));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransOriginJoinUsingForeignKey</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    protected QueryBuildDataSource addInventTransOriginJoinUsingForeignKey(
        Query           _query,
        FormDataSource  _inventTransOriginDataSource,
        Args            _callerArgs)
    {
        // Using FK on caller to join with InventTransOrigin
        QueryBuildDataSource inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
        inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

        if (fieldName2id(_callerArgs.dataset(), fieldStr(InventTransOrigin,InventTransId)))
        {
            inventTransOriginQueryDataSource.addDynalink(fieldNum(InventTransOrigin, InventTransId), _callerArgs.record(),
                                fieldName2id(_callerArgs.dataset(), fieldStr(InventTransOrigin, InventTransId)));
        }
        else if (fieldName2id(_callerArgs.dataset(), fieldStr(InventTrans, InventTransOrigin)))
        {
            inventTransOriginQueryDataSource.addDynalink(fieldNum(InventTransOrigin, RecId), _callerArgs.record(),
                                fieldName2id(_callerArgs.dataset(), fieldStr(InventTrans, InventTransOrigin)));
        }
        return inventTransOriginQueryDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDirectJoin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds join directly between the calling data source table and the <c>InventTransOrigin</c> table based on the defined relationship.
    /// </summary>
    /// <param name="_query">
    /// A <c>Query</c> object to add the join to.
    /// </param>
    /// <param name="_inventTransOriginDataSource">
    /// An <c>InventTransOrigin</c> form data source.
    /// </param>
    /// <param name="_inventTransDataSource">
    /// An <c>InventTrans</c> form data source.
    /// </param>
    /// <param name="_callerArgs">
    /// A calling form <c>Args</c> object.
    /// </param>
    protected void addDirectJoin(
        Query           _query,
        FormDataSource  _inventTransOriginDataSource,
        FormDataSource  _inventTransDataSource,
        Args            _callerArgs)
    {
        QueryBuildDataSource inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
        inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

        inventTransOriginQueryDataSource.addDynalink(fieldNum(InventTransOrigin, RecId), _callerArgs.record(), fieldName2Id(_callerArgs.dataset(), fieldStr(InventTrans, InventTransOrigin)));

        if (_inventTransDataSource)
        {
            this.addJoinToInventTrans(inventTransOriginQueryDataSource, _inventTransDataSource);
            QueryBuildDataSource inventTransQueryDataSource = SysQuery::findOrCreateDataSourceByName(_query, _inventTransDataSource.name(), tableNum(InventTrans));
            inventTransQueryDataSource.addDynalink(fieldNum(InventTrans, RecId), _callerArgs.record(), fieldName2Id(_callerArgs.dataset(), fieldStr(InventTrans, RecId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynalinkByRelationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a dynamic link to the form data sources by relations defined on the calling form data source.
    /// </summary>
    /// <param name="_query">
    /// A <c>Query</c> object to add the link to.
    /// </param>
    /// <param name="_inventTransOriginDataSource">
    /// An <c>InventTransOrigin</c> form data source.
    /// </param>
    /// <param name="_inventTransDataSource">
    /// An <c>InventTrans</c> form data source.
    /// </param>
    /// <param name="_callerArgs">
    /// A calling form <c>Args</c> object.
    /// </param>
    /// <returns>
    /// true if the query was set; otherwise, false.
    /// </returns>
    [Replaceable]
    protected boolean addDynalinkByRelationType(
        InventTransRelationType _relationType,
        Query                   _query,
        FormDataSource          _inventTransOriginDataSource,
        FormDataSource          _inventTransDataSource,
        Args                    _callerArgs)
    {
        QueryBuildDataSource    inventTransOriginQueryDataSource;
        QueryBuildDataSource    inventTransQueryDataSource;

        switch (_relationType)
        {
            case InventTransRelationType::ItemIdx:
                _inventTransOriginDataSource.query().dataSourceTable(tableNum(InventTransOrigin)).addSortField(fieldNum(InventTransOrigin,ItemId));
                _inventTransOriginDataSource.query().dataSourceTable(tableNum(InventTrans)).addSortField(fieldNum(InventTrans,DatePhysical));

                _inventTransOriginDataSource.query().dataSourceTable(tableNum(InventTransOrigin)).addDynalink(fieldNum(InventTransOrigin, ItemId), _callerArgs.record(),
                                                                                                        fieldName2id(_callerArgs.dataset(),fieldStr(InventTransOrigin,ItemId)));

                //we allow the join on itemId so SQL can pick a more optimal query plan and filter by inventtrans itemId
                _inventTransOriginDataSource.query().dataSourceTable(tableNum(InventTrans)).addLink(fieldNum(InventTransOrigin, ItemId), fieldNum(InventTrans, ItemId));
                return true;

            case InventTransRelationType::InventDim:
                inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
                inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

                inventTransOriginQueryDataSource.addDynalink(fieldNum(InventTransOrigin, ItemId),_callerArgs.record(),
                                    fieldName2id(_callerArgs.dataset(),fieldStr(InventTransOrigin,ItemId)));

                inventTransOriginQueryDataSource.addSortField(fieldNum(InventTransOrigin,ItemId));

                if (_inventTransDataSource)
                {
                    inventTransQueryDataSource = inventTransOriginQueryDataSource.addDataSource(tableNum(InventTrans));
                    inventTransQueryDataSource.name(_inventTransDataSource.name());
                    inventTransQueryDataSource.joinMode(JoinMode::InnerJoin);
                    inventTransQueryDataSource.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTrans, InventTransOrigin));
                    inventTransQueryDataSource.addSortField(fieldNum(InventTrans,DatePhysical));
                }
                break;

                // For callers who don't have a relationship table to join with. Using FK on caller to join with InventTransOrigin
            case InventTransRelationType::InventTransId:  // Set by menu item InventTransLot
                this.addJoinUsingForeignKey(_query, _inventTransOriginDataSource, _inventTransDataSource, _callerArgs);
                break;

            case InventTransRelationType::ItemId:
                inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
                inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

                inventTransOriginQueryDataSource.addDynalink(fieldNum(InventTransOrigin, ItemId),_callerArgs.record(),
                                    fieldName2id(_callerArgs.dataset(),fieldStr(InventTransOrigin,ItemId)));

                inventTransOriginQueryDataSource.addSortField(fieldNum(InventTransOrigin,ItemId));
                if (_inventTransDataSource)
                {
                    inventTransQueryDataSource = inventTransOriginQueryDataSource.addDataSource(tableNum(InventTrans));
                    inventTransQueryDataSource.name(_inventTransDataSource.name());
                    inventTransQueryDataSource.joinMode(JoinMode::InnerJoin);
                    inventTransQueryDataSource.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTrans, InventTransOrigin));
                    //we allow the join on itemId so SQL can pick a more optimal query plan and filter by inventtrans itemId
                    inventTransQueryDataSource.addLink(fieldNum(InventTransOrigin, ItemId), fieldNum(InventTrans, ItemId));
                    inventTransQueryDataSource.addSortField(fieldNum(InventTrans,DatePhysical));
                }
                break;

            case InventTransRelationType::PurchaseOrderConsignment:
                PurchLine purchLine = _callerArgs.record();
                if (!purchLine
                        || purchLine.PurchaseOrderLineCreationMethod != PurchPurchaseOrderCreationMethod::Consignment)
                {
                    return true;
                }

                inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
                inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

                var qbS_Link = inventTransOriginQueryDataSource.addDataSource(tableNum(InventTransOriginOwnershipChangeJournalTransPurchLineLink));
                qbS_Link.joinMode(JoinMode::InnerJoin);
                qbS_Link.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransOriginOwnershipChangeJournalTransPurchLineLink, OwnershipChangeJournalLine));
                qbS_Link.addRange(fieldNum(InventTransOriginOwnershipChangeJournalTransPurchLineLink, PurchaseOrderLine)).value(queryValue(InventTransOriginPurchLine::findInventTransOriginId(purchLine.DataAreaId, purchLine.InventTransId)));

                if (_inventTransDataSource)
                {
                    this.addJoinToInventTrans(inventTransOriginQueryDataSource, _inventTransDataSource);
                }
                break;

            case InventTransRelationType::ProductionBOMConsignment:
                boolean viewingJournalLineTransForProdBom = _callerArgs.dataset() == tableNum(ProdBOM);
                boolean viewingProdBomTransForJournalLine = _callerArgs.dataset() == tableNum(InventJournalTrans);

                if (!viewingJournalLineTransForProdBom && !viewingProdBomTransForJournalLine)
                {
                    return true;
                }

                inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
                inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

                var qbsLink = inventTransOriginQueryDataSource.addDataSource(tableNum(InventTransOriginProdBomOwnershipChangeJournalTransLink));
                qbsLink.joinMode(JoinMode::InnerJoin);

                if (viewingJournalLineTransForProdBom)
                {
                    ProdBOM prodBom = _callerArgs.record();
                    qbsLink.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransOriginProdBomOwnershipChangeJournalTransLink, JournalLineInventTransOrigin));
                    qbsLink.addRange(fieldNum(InventTransOriginProdBomOwnershipChangeJournalTransLink, ProductionBOMLine)).value(queryValue(InventTransOriginProdBOM::findInventTransOriginId(prodBom.DataAreaId, prodBom.InventTransId)));
                }
                else
                {
                    InventJournalTrans journalLine = _callerArgs.record();
                    qbsLink.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransOriginProdBomOwnershipChangeJournalTransLink, ProductionBOMLine));
                    qbsLink.addRange(fieldNum(InventTransOriginProdBomOwnershipChangeJournalTransLink, JournalLine)).value(queryValue(journalLine.RecId));
                }

                if (_inventTransDataSource)
                {
                    this.addJoinToInventTrans(inventTransOriginQueryDataSource, _inventTransDataSource);
                }
                break;

                // <GEERU>
            case InventTransRelationType::InventTransIdGoodsInRoute_RU:
                if (_callerArgs.dataset() == tableNum(SalesLine))
                {
                    // Link added in formQueryPreExecute. Need to link to several InventTransOrigin's at the same time
                    return true;
                }
                // </GEERU>
                break;

        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynalinkByRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a dynamic link to the form data sources by relations defined on the calling form data source.
    /// </summary>
    /// <param name="_query">
    /// A <c>Query</c> object to add the link to.
    /// </param>
    /// <param name="_inventTransOriginDataSource">
    /// An <c>InventTransOrigin</c> form data source.
    /// </param>
    /// <param name="_inventTransDataSource">
    /// An <c>InventTrans</c> form data source.
    /// </param>
    /// <param name="_callerArgs">
    /// A calling form <c>Args</c> object.
    /// </param>
    /// <returns>
    /// true if the query was set; otherwise, false.
    /// </returns>
    [Replaceable]
    protected boolean addDynalinkByRelation(
        Query           _query,
        FormDataSource  _inventTransOriginDataSource,
        FormDataSource  _inventTransDataSource,
        Args            _callerArgs)
    {
        return this.addDynalinkByRelationHelper(_query, _inventTransOriginDataSource, _inventTransDataSource, _callerArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynalinkByRelationHelper</Name>
				<Source><![CDATA[
    protected boolean addDynalinkByRelationHelper(
        Query           _query,
        FormDataSource  _inventTransOriginDataSource,
        FormDataSource  _inventTransOrInventTransArchiveDataSource,
        Args            _callerArgs)
    {
        switch (_callerArgs.dataset())
        {
            //Owners
            case tableNum(InventBlocking):
            case tableNum(InventJournalTrans):
            case tableNum(InventTransferLine):
            case tableNum(PurchRFQLine):
                // Link added in formQueryPreExecute. Need to link to several InventTransOrigin's at the same time
                return true;

            case tableNum(PurchLine):
                PurchLine purchLine  = _callerArgs.record();
                if ((purchLine.ItemRefType == InventRefType::None || purchLine.ItemRefType == InventRefType::Purch) && purchLine.ProjId)
                {
                    // Link added in formQueryPreExecute. Need to link to several InventTransOrigin's at the same time
                    return true;
                }

                this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginPurchLine));
                break;

            case tableNum(ProdTable):
                ProdTable prodTable = _callerArgs.record();
                if (prodTable.InventRefType == InventRefType::None && (prodTable.isProjMethodFinished() || prodTable.isProjMethodConsumed()))
                {
                    if(!this.queryAllTransactionOrderRelatedToProduction(_callerArgs))
                    {
                        // Link added in formQueryPreExecute. Need to link to several InventTransOrigin's at the same time
                        return true;  
                    }
                }

                if (this.queryAllTransactionOrderRelatedToProduction(_callerArgs))
                {
                    this.addDynaLinkProdTableAllTransactions(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, prodTable);
                }
                else
                {
                    this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginProdTable));
                }
                break;
            case tableNum(PmfProdCoBy):
                this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginPmfProdCoBy));
                break;

            case tableNum(SalesLine):
                this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginSalesLine));
                break;

            case tableNum(RetailTransactionSalesTrans):
                this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginRetailSalesTransTable));
                break;

            case tableNum(SalesQuotationLine):
                this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginSalesQuotationLine));
                break;

            case tableNum(ProdBOM):
                this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginProdBOM));
                break;

            case tableNum(InventQuarantineOrder):
                this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginQuarantineOrder));
                break;

            case tableNum(InventQualityOrderTable):
                this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginQualityOrder));
                break;

            case tableNum(PurchRFQCaseLine):
                this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginPurchRFQCaseLine));
                break;

            case tableNum(WMSOrder):
                WMSOrder wmsOrder = _callerArgs.record();
                if (wmsOrder.PostTransfer)
                {
                    this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginWMSOrder));
                }
                else
                {
                    this.addJoinUsingForeignKey(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs);
                }
                break;

            case tableNum(AssetBook):
                this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(AssetInventTrans));
                break;
            // <GEERU>
            case tableNum(ProdJournalRelease_RU):
                ProdJournalRelease_RU prodJournalRelease = _callerArgs.record();
                if (prodJournalRelease.AutodetectionInventTransId)
                {
                    // Link added in formQueryPreExecute. Need to link to several InventTransOrigin's at the same time
                    return true;
                }
                else
                {
                    this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(InventTransOriginProdJournalRelease_RU));
                }
                break;
            // </GEERU>

            case tableNum(ProdCalcTrans):
                this.addDynaLinkProdCalcTrans(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs);
                break;

            case tableNum(InventTrans):
                this.addDirectJoin(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs);
                break;

            case tableNum(WHSOrderCommittedReservation):
                this.addJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs, tableNum(WHSInventTransOriginOrderCommittedReservation));
                break;

            default: //Non owners
                this.addJoinUsingForeignKey(_query, _inventTransOriginDataSource, _inventTransOrInventTransArchiveDataSource, _callerArgs);
                break;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAllTransactionOrderRelatedToProduction</Name>
				<Source><![CDATA[
    private boolean queryAllTransactionOrderRelatedToProduction(Args _callerArgs)
    {
        return (_callerArgs.menuItemName() == menuItemDisplayStr(CostInventTransProdAll));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynaLinkProdTableAllTransactions</Name>
				<Source><![CDATA[
    private void addDynaLinkProdTableAllTransactions(
        Query           _query,
        FormDataSource  _inventTransOriginDataSource,
        FormDataSource  _inventTransOrInventTransArchiveDataSource,
        ProdTable       _prodTable)
    {
        var inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
        inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

        inventTransOriginQueryDataSource.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(queryValue(InventTransType::ProdLine)   + ',' +
                                                                                        queryValue(InventTransType::Production) + ',' +
                                                                                        queryValue(InventTransType::PmfProdCoBy));
        inventTransOriginQueryDataSource.addDynalink(fieldNum(InventTransOrigin, ReferenceId), _prodTable, fieldNum(ProdTable, ProdId));

        if (_inventTransOrInventTransArchiveDataSource)
        {
            TableId tableId =_inventTransOrInventTransArchiveDataSource.table();
            var inventTransOrInventTransArchiveDataSource = inventTransOriginQueryDataSource.addDataSource(tableId);
            inventTransOrInventTransArchiveDataSource.name(_inventTransOrInventTransArchiveDataSource.name());
            inventTransOrInventTransArchiveDataSource.joinMode(JoinMode::InnerJoin);
            inventTransOrInventTransArchiveDataSource.addLink(fieldNum(InventTransOrigin, RecId),
                fieldName2Id(tableId, fieldStr(InventTrans, InventTransOrigin)));

            inventTransOrInventTransArchiveDataSource.addSortField(fieldName2Id(tableId, fieldStr(InventTrans, DatePhysical)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynaLinkProdCalcTrans</Name>
				<Source><![CDATA[
    private void addDynaLinkProdCalcTrans(
        Query          _query,
        FormDataSource _inventTransOriginDataSource,
        FormDataSource _inventTransOrInventTransArchiveDataSource,
        Args           _callerArgs)
    {
        ProdCalcTrans prodCalcTrans = _callerArgs.record();

        QueryBuildDataSource inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
        inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

        if (prodCalcTrans.TransRefType == ProdTransRefType::Production)
        {
            inventTransOriginQueryDataSource.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(queryValue(InventTransType::ProdLine)   + ',' +
                                                                                        queryValue(InventTransType::Production) + ',' +
                                                                                        queryValue(InventTransType::PmfProdCoBy));
            inventTransOriginQueryDataSource.addDynalink(fieldNum(InventTransOrigin, ReferenceId), _callerArgs.record(), fieldNum(ProdCalcTrans, TransRefId));
        }

        QueryBuildDataSource relationTableQueryDataSource;
        
        if (prodCalcTrans.TransRefType == ProdTransRefType::BackflushCosting)
        {
            relationTableQueryDataSource = inventTransOriginQueryDataSource.addDataSource(tableNum(InventTransPosting));
            relationTableQueryDataSource.joinMode(JoinMode::ExistsJoin);
            relationTableQueryDataSource.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransPosting, InventTransOrigin));

            relationTableQueryDataSource.addRange(fieldNum(InventTransPosting, Voucher)).value(LeanProductionFlowCosting::find(str2int64(prodCalcTrans.TransRefId)).Voucher);
        }

        if (prodCalcTrans.TransRefType == ProdTransRefType::ProductionFlow)
        {
            relationTableQueryDataSource = inventTransOriginQueryDataSource.addDataSource(tableNum(InventCostTrans));
            relationTableQueryDataSource.joinMode(JoinMode::ExistsJoin);
            relationTableQueryDataSource.addLink(fieldNum(InventTransOrigin, InventTransId), fieldNum(InventCostTrans, InventTransId));

            relationTableQueryDataSource.addDynalink(fieldNum(InventCostTrans, TransRefId), _callerArgs.record(), fieldNum(ProdCalcTrans, TransRefId));
            relationTableQueryDataSource.addRange(fieldNum(InventCostTrans, CostTransState)).value(queryValue(InventCostTransState::Physical));
        }

        if (_inventTransOrInventTransArchiveDataSource)
        {
            TableId tableId = _inventTransOrInventTransArchiveDataSource.table();
            QueryBuildDataSource inventTransOrInventTransArchiveDataSource = inventTransOriginQueryDataSource.addDataSource(tableId);
            inventTransOrInventTransArchiveDataSource.name(_inventTransOrInventTransArchiveDataSource.name());
            inventTransOrInventTransArchiveDataSource.joinMode(JoinMode::InnerJoin);
            inventTransOrInventTransArchiveDataSource.addLink(fieldNum(InventTransOrigin, RecId),
                fieldName2Id(tableId, fieldStr(InventTrans, InventTransOrigin)));

            inventTransOrInventTransArchiveDataSource.addDynalink(fieldName2Id(tableId, fieldStr(InventTrans, ItemId)),
                    _callerArgs.record(),
                    fieldNum(ProdCalcTrans, Resource));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InventTransOriginFormDataSourceDynalink construct()
    {
        return new InventTransOriginFormDataSourceDynalink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCallerDynalink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a dynamic link to the form data sources.
    /// </summary>
    /// <param name="_inventTransOriginDataSource">
    /// An <c>InventTransOrigin</c> form data source.
    /// </param>
    /// <param name="_inventTransDataSource">
    /// An <c>InventTrans</c> form data source.
    /// </param>
    /// <param name="_callerArgs">
    /// A calling form <c>Args</c> object.
    /// </param>
    [Hookable(false)]
    public void addCallerDynalink(
        FormDataSource _inventTransOriginDataSource,
        FormDataSource _inventTransDataSource,
        Args           _callerArgs)
    {
        InventTransRelationType relationType = _callerArgs.parmEnum();
        
        if (!_callerArgs.record() && (relationType != InventTransRelationType::ItemIdx))
        {
            return;
        }

        InventTransFormHelper::formQueryAddDefaultOriginLink(_inventTransOriginDataSource, _inventTransDataSource);

        Query  query = new Query();

        if (relationType != InventTransRelationType::Default)
        {
            if (this.addDynalinkByRelationType(relationType, query, _inventTransOriginDataSource, _inventTransDataSource, _callerArgs))
            {
                return;
            }
        }
        else
        {
            if (this.addDynalinkByRelation(query, _inventTransOriginDataSource, _inventTransDataSource, _callerArgs))
            {
                return;
            }
        }

        _inventTransOriginDataSource.query(query);
        if (_inventTransDataSource && _inventTransDataSource.masterObjectSet() == _inventTransDataSource)
        {
            //Queries can only be set on Master DataSources.
            _inventTransDataSource.query(query);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>