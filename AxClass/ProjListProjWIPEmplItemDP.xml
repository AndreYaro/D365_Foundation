<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjWIPEmplItemDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjWIPEmplItemDP</c> class provides data for the <c>ProjListProjWIPEmplItem</c>
///    report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjStatementEmplItem)),
    SRSReportParameterAttribute(classStr(ProjListProjWIPContract))
]

class ProjListProjWIPEmplItemDP extends SRSReportDataProviderPreProcessTempDB
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    ProjOptionRevenue       revenue;
    ProjOptionOnAcc         onAcc;
    TransDate               projFromDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    ProjListColumnData      actualVsBudget;
    ForecastModelId         forecastModelId;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;
    boolean                 skipBlankId;
    boolean                 skipZero;

    ProjListProjWIPTmp              projListProjWIPTmp;
    ProjListProjTrans_WIP           listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    projStatement                   projStatement;

    QueryRun                qrun;
    ProjEmplItemId          id;
    Name                    name;
    ResourceRecId           resource;
    ProjListIDType          projListIDType;

    ProjQty     qtyHour;
    AmountMST   costValue, profit, onAccount, salesValue, production, gross, net;
    Integer     showCostValue, showGross, showNet, showOnAccount,
                showQtyHour, showSalesValue;
    str         costValueLabel, salesValueLabel, periodLabel, selectionLabel, idLabel;
    int         hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate the amounts that are needed for the report.
    /// </summary>
    void calculate()
    {
        if (projListIDType  == ProjListIDType::Employee)
        {
            projStatement.parmEmplItemId(SysQuery::valueEmptyString());
            projStatement.parmResource(resource);
        }
        else
        {
            projStatement.parmEmplItemId(id);
            projStatement.parmResource(0);
        }

        switch (amountQty)
        {
            case ProjAmountQty::Amount:
                break;
            case ProjAmountQty::Qty:
                qtyHour     = projStatement.b300_Gross_qty();
                break;
            case ProjAmountQty::AmountQty:
                qtyHour     = projStatement.b300_Gross_qty();
                break;
        }

        costValue   = projStatement.b200_TotalCostPrice();
        salesValue  = projStatement.b100_Salesvalue();
        production  = projStatement.b130_wip_Production();
        profit      = projStatement.b155_wip_Profit();
        gross       = projStatement.b300_Gross();
        onAccount   = projStatement.b400_wip_Invoiced_OnAccount();
        net         = projStatement.b500_Net();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNoId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate the amounts for the blank IDs.
    /// </summary>
    void calculateNoId()
    {
        projStatement.parmEmplItemId(SysQuery::valueEmptyString());
        projStatement.parmResource(0);

        costValue   = projStatement.b200_TotalCostPrice();
        salesValue  = projStatement.b100_Salesvalue();
        production  = projStatement.b130_wip_Production();
        profit      = projStatement.b155_wip_Profit();
        gross       = projStatement.b300_Gross();
        onAccount   = projStatement.b400_wip_Invoiced_OnAccount();
        net         = projStatement.b500_Net();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjWIPTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>ProjListProjWIPProjSRSTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjListProjWIPProjSRSTmp</c> table.
    /// </returns>

    [SRSReportDataSetAttribute('ProjListProjWIPTmp')]
    public ProjListProjWIPTmp getProjListProjWIPTmp()
    {
        select * from projListProjWIPTmp;
        return projListProjWIPTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProjListProjTrans</c> class by using the parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans = ProjListProjTrans::construct(ProjListStateType::WIP, ProjListStateId::EmplItem);
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);

        listProjTrans.parmHour(hour);
        listProjTrans.parmExpenses(expenses);
        listProjTrans.parmItem(item);
        listProjTrans.parmRevenue(revenue);
        listProjTrans.parmOnAcc(onAcc);

        listProjTrans.parmProjFromDate(projFromDate);
        listProjTrans.parmProjToDate(projToDate);
        listProjTrans.parmLedgerFromDate(ledgerFromDate);
        listProjTrans.parmLedgerToDate(ledgerToDate);

        listProjTrans.parmColumnData(actualVsBudget);
        listProjTrans.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmSkipBlank(skipBlankId);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjWIPTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    protected void insertProjListProjWIPTmp()
    {
        projListProjWIPTmp.Id   = id;
        projListProjWIPTmp.Name = name;
        projListProjWIPTmp.ProjListIdType = projListIDType;

        projListProjWIPTmp.CostValue  = listProjTransLayout.showAmountReport(costValue, showAmount);
        projListProjWIPTmp.SalesValue = listProjTransLayout.showAmountReport(salesValue, showAmount);
        projListProjWIPTmp.Gross      = listProjTransLayout.showAmountReport(gross, showAmount);
        projListProjWIPTmp.Net        = listProjTransLayout.showAmountReport(net, showAmount);
        projListProjWIPTmp.OnAccount  = listProjTransLayout.showAmountReport(onAccount, showAmount);
        projListProjWIPTmp.Production = listProjTransLayout.showAmountReport(production, showAmount);
        projListProjWIPTmp.Profit     = listProjTransLayout.showAmountReport(profit, showAmount);
        projListProjWIPTmp.QtyHour    = listProjTransLayout.showAmountReport(qtyHour, showAmount);

        // set labels
        projListProjWIPTmp.IdLabel         = idLabel;
        projListProjWIPTmp.HeaderLabel     = selectionLabel;
        projListProjWIPTmp.PeriodLabel     = periodLabel;
        projListProjWIPTmp.CostValueLabel  = costValueLabel;
        projListProjWIPTmp.SalesValueLabel = salesValueLabel;

        // set field visibility
        projListProjWIPTmp.ShowCostValue  = showCostValue;
        projListProjWIPTmp.ShowGross      = showGross;
        projListProjWIPTmp.ShowNet        = showNet;
        projListProjWIPTmp.ShowOnAccount  = showOnAccount;
        projListProjWIPTmp.ShowQtyHour    = showQtyHour;
        projListProjWIPTmp.ShowSalesValue = showSalesValue;

        // set decimals
        projListProjWIPTmp.DecimalAmount  = amountDecimals;
        projListProjWIPTmp.DecimalHourQty = hourQtyDecimals;

        projListProjWIPTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the amounts are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if the values are not zero; otherwise false.
    /// </returns>
    boolean lineValue()
    {
        return ((costValue   != 0) || (salesValue != 0) ||
            (production != 0) || (profit     != 0) ||
            (gross      != 0) || (onAccount  != 0) ||
            (net        != 0) || (qtyHour    != 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printEmplItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the employee and item records and calls the <c>calculate</c> method.
    /// </summary>
    void printEmplItem()
    {
        ResourceView            resourceLocal;
        InventTable             itemTableLocal;
        SMASubscriptionTable    smaTableLocal;

        if (SysReportRun::changed(qrun,tableNum(ResourceView)))
        {
            resourceLocal  = qrun.get(tableNum(ResourceView));

            resource        = resourceLocal.RecId;
            id              = ResourceFacade::getID(resource);
            name            = ResourceFacade::getName(resource);
            projListIDType  = ProjListIDType::Employee;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)) && SysReportRun::changed(qrun,tableNum(InventTable)))
        {
            itemTableLocal  = qrun.get(tableNum(InventTable));

            id              = itemTableLocal.ItemId;
            name            = itemTableLocal.defaultProductName();
            projListIDType  = ProjListIDType::Item;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(SMASubscription)) && SysReportRun::changed(qrun,tableNum(SMASubscriptionTable)))
        {
            smaTableLocal   = qrun.get(tableNum(SMASubscriptionTable));

            id              = smaTableLocal.SubscriptionId;
            name            = smaTableLocal.Name;
            projListIDType  = ProjListIDType::Subscription;
        }

        this.calculate();

        if (! skipZero || (this.lineValue()))
        {
            projListProjWIPTmp.clear();
            this.insertProjListProjWIPTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute the data and populate the
    ///    data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjWIPContract contract = this.parmDataContract() as ProjListProjWIPContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();

        hour = contract.parmHour();
        expenses = contract.parmExpenses();
        item = contract.parmItem();
        revenue = contract.parmRevenue();
        onAcc = contract.parmOnAcc();

        projFromDate = contract.parmProjFromDate();
        projToDate = contract.parmProjToDate();
        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();

        actualVsBudget = contract.parmActualVsBudget();
        forecastModelId = contract.parmForecastModelIdV2();

        skipBlankId = contract.parmSkipBlankId();
        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();

        this.initProjListTrans();
        this.setIdLabel();

        periodLabel = listProjTrans.formatPeriodLabel('', DateFlags::None);
        selectionLabel = listProjTrans.formatSelection(showAmount);

        [costValueLabel, salesValueLabel] = listProjTrans.setDisplayLabel(hour, expenses, item);

        [showQtyHour, showCostValue, showSalesValue,
     showOnAccount, showGross, showNet] = listProjTrans.setDisplayFlags(hour, expenses, item,
                                                                        revenue, onAcc, amountQty);

        [hourQtyDecimals, amountDecimals,
     grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        projStatement = projStatement::newProjListWIP(
                        listProjTrans,
                        projListProjTrans2Period::columnData2ActualBudget(actualVsBudget),
                        amountQty,
                        forecastModelId);

        qrun = new QueryRun(this.parmQuery());

        //  print lines with no Id eg. cost and revenue with no Employee
        if (!skipBlankId)
        {
            this.calculateNoId();
            if (this.lineValue())
            {
               projListProjWIPTmp.clear();
               this.insertProjListProjWIPTmp();
            }
        }

        while (qrun.next())
        {
            this.printEmplItem();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIdLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the label for the ID.
    /// </summary>
    private void setIdLabel()
    {
        if ((listProjTrans.parmHour() || listProjTrans.parmRevenue() || listProjTrans.parmExpenses()) &&
       !(listProjTrans.parmItem() || listProjTrans.parmOnAcc()))
        {
            idLabel = "@SYS89158";
        }
        else if ((listProjTrans.parmItem() || listProjTrans.parmOnAcc()) &&
       !(listProjTrans.parmExpenses() || listProjTrans.parmHour() || listProjTrans.parmRevenue()))
        {
            idLabel = "@SYS14428";
        }
        else
        {
            idLabel = "@Res:ResourceItem";
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>