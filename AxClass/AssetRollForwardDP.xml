<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetRollForwardDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider class for Asset roll forward report.
/// </summary>
public class AssetRollForwardDP
{
    #ISOCountryRegionCodes
    AssetRollForwardContract contract;
    AssetRollForwardTmp assetRollForwardTmp;
    private boolean isIsoJP;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetRollForwardTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to store the customer data buffer for the report.
    /// </summary>
    /// <returns>
    /// Returns the temporary table <c>AssetRollForwardTmp</c> to the report for displaying customer data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetRollForwardTmp))
    ]
    public AssetRollForwardTmp getAssetRollForwardTmp(AssetRollForwardContract _contract, Query _query)
    {
        Query query = _query;
        contract = _contract;
        QueryRun queryRun;

        AssetCalcReport balanceReport;
        AssetBook assetBook;
        AssetTable assetTable;
        boolean determineDisposalInfo;
        CurrencyCode reportCurrencyId;

        this.setRegionCodes();

        if (_contract.parmCurrencySelection() == LedgerCurrencySelection::Reporting)
        {
            reportCurrencyId = Ledger::reportingCurrency();
        }
        else
        {
            reportCurrencyId = Ledger::accountingCurrency();
        }

        balanceReport = new AssetRollForwardCalcReport(_contract.parmFromDate(), _contract.parmToDate());

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(AssetRollForwardTmp), true, true, true, false, true, assetRollForwardTmp);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            assetBook = queryRun.get(tablenum(AssetBook));
            assetTable = queryRun.get(tableNum(AssetTable));

            // Filter out assets that have a disposal date before the date range 
            if (assetBook.DisposalDate && assetBook.DisposalDate < _contract.parmFromDate())
            {
                continue;
            }

            if (_contract.parmCurrencySelection() == LedgerCurrencySelection::Reporting)
            {
                balanceReport.calcAssetByCurrency(assetBook, AssetSumCalcType::Reporting);            
            }
            else
            {
                balanceReport.calcAsset(assetBook);
            }

            // Display the disposal info if the report date range matches the disposal date.
            if (assetBook.DisposalDate >= _contract.parmFromDate()
                && assetBook.DisposalDate <= _contract.parmToDate())
            {
                determineDisposalInfo = true;
            }
            else
            {
                determineDisposalInfo = false;
            }

            this.createSummaryRecord(assetTable, assetBook, balanceReport, determineDisposalInfo, reportCurrencyId, recordInsertList);
        }

        recordInsertList.insertDatabase();

        select assetRollForwardTmp;
        
        return assetRollForwardTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AssetRollForwardDP construct()
    {
        AssetRollForwardDP  dataProvider;

        dataProvider = new AssetRollForwardDP();

        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryRecord</Name>
				<Source><![CDATA[
    private void createSummaryRecord(
        AssetTable _assetTable, 
        AssetBook _assetBook,
        AssetRollForwardCalcReport _balanceReport, 
        boolean _generateDisposalInfo,
        CurrencyCode _accountingCurrencyCode,
        RecordInsertList _recordInsertList)
    {
        this.defaultSummaryRecord(_assetTable, _assetBook, _balanceReport, _generateDisposalInfo, _accountingCurrencyCode);
        this.insertSummaryRecord(_recordInsertList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSummaryRecord</Name>
				<Source><![CDATA[
    protected void defaultSummaryRecord (        
        AssetTable _assetTable,
        AssetBook _assetBook,
        AssetRollForwardCalcReport _balanceReport,
        boolean _generateDisposalInfo,
        CurrencyCode _accountingCurrencyCode)
    {
        AssetDepProfileChange_JP depProfileChange_JP = this.setDepProfileChange_JP(_assetBook);

        // Insert data
        assetRollForwardTmp.clear();
        assetRollForwardTmp.AssetGroup = _assetBook.AssetGroup;
        assetRollForwardTmp.AssetId = _assetBook.AssetId;
        assetRollForwardTmp.AssetName = _assetTable.Name;
        assetRollForwardTmp.AssetBookId = _assetBook.BookId;
        assetRollForwardTmp.DepreciationMethodsList = this.getDepreciationMethodsList(_assetBook, depProfileChange_JP);
        assetRollForwardTmp.AssetUsedFromDate = _assetBook.UsedFromDate;
        assetRollForwardTmp.AssetServiceLife = this.getServiceLife(_assetBook, depProfileChange_JP);

        assetRollForwardTmp.BalanceStartPeriod = _balanceReport.balanceStartPeriod();
        assetRollForwardTmp.BalanceEndPeriod = _balanceReport.balanceEndPeriod();

        assetRollForwardTmp.OpeningAcquisitions = _balanceReport.columnAcquisitionStartPeriod();
        assetRollForwardTmp.AcquisitionsPeriod = _balanceReport.columnAcquisitionReceiptRepYear();
        assetRollForwardTmp.DisposalAcquisitionsPeriod = _balanceReport.columnAcquisitionIssueRepYear();
        assetRollForwardTmp.ClosingAcquisitions = _balanceReport.columnAcquisitionEndPeriod();

        assetRollForwardTmp.OpeningDepreciations = _balanceReport.columnDepreciationStartPeriod();
        assetRollForwardTmp.DepreciationsPeriod = _balanceReport.columnDepreciationRepYear();
        assetRollForwardTmp.BonusDepreciationsPeriod = _balanceReport.columnBonusDepreciationRepYear();
        assetRollForwardTmp.DisposalDepreciationsPeriod = _balanceReport.columnDepreciationVoidedRepYear();
        assetRollForwardTmp.ClosingDepreciations = _balanceReport.columnDepreciationEndPeriod();

        assetRollForwardTmp.OpeningWriteUpDowns = _balanceReport.columnAdjStartPeriod();
        assetRollForwardTmp.WriteUpsPeriod = _balanceReport.columnAdjWriteUpRepYear();
        assetRollForwardTmp.WriteDownsPeriod = _balanceReport.columnAdjWriteDownRepYear();
        assetRollForwardTmp.RevaluationsPeriod = _balanceReport.columnAdjRevaluationRepYear();
        assetRollForwardTmp.DisposalWriteUpDownsPeriod = _balanceReport.columnAdjVoidedRepYear();
        assetRollForwardTmp.ClosingWriteUpDowns = _balanceReport.columnAdjEndPeriod();

        if (_generateDisposalInfo)
        {
            assetRollForwardTmp.DisposalDate = _assetBook.DisposalDate;
            assetRollForwardTmp.DisposalNetBookValue = _balanceReport.columnNetBookValueCurrentYear();
            assetRollForwardTmp.DisposalSaleValue = _balanceReport.columnSaleValueCurrentYear();
            assetRollForwardTmp.DisposalScrapValue = _balanceReport.columnScrapValueCurrentYear();
            assetRollForwardTmp.DisposalProfitLoss = _balanceReport.columnProfitLossCurrentYear();
        }

        assetRollForwardTmp.CurrencyCode = _accountingCurrencyCode;
        assetRollForwardTmp.CompanyId = _assetTable.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSummaryRecord</Name>
				<Source><![CDATA[
    protected void insertSummaryRecord(RecordInsertList _recordInsertList)
    {
        _recordInsertList.add(assetRollForwardTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepProfileChange_JP</Name>
				<Source><![CDATA[
    private AssetDepProfileChange_JP setDepProfileChange_JP(AssetBook _assetBook)
    {
        AssetDepProfileChange_JP depProfileChange_JP;

        if (isIsoJP)
        {
            depProfileChange_JP = AssetDepProfileChange_JP::find(_assetBook.TableId, _assetBook.RecId, contract.parmToDate());
        }

        return depProfileChange_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRegionCodes</Name>
				<Source><![CDATA[
    private void setRegionCodes()
    {
        isIsoJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationMethodsList</Name>
				<Source><![CDATA[
    private str getDepreciationMethodsList(AssetBook _assetBook, AssetDepProfileChange_JP _depProfileChange)
    {
        str depreciationMethodsList;
        
        if (isIsoJP
            && _depProfileChange.RecId)
        {
            depreciationMethodsList = this.getDepMethodFromDepProfileChange_JP(_depProfileChange) + this.getPriorDepProfileChangeString_JP(_assetBook, _depProfileChange);
        }

        if (!depreciationMethodsList)
        {
            depreciationMethodsList = enum2Str(_assetBook.depreciationMethod());
        }

        depreciationMethodsList = depreciationMethodsList + this.getAltDepreciationProfileMethod(_assetBook);

        return depreciationMethodsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepMethodFromDepProfileChange_JP</Name>
				<Source><![CDATA[
    private str getDepMethodFromDepProfileChange_JP(AssetDepProfileChange_JP _depProfileChange)
    {
        str depMethod;

        AssetDepreciationProfile assetDepreciationProfile = _depProfileChange.depreciationProfile();

        if (assetDepreciationProfile)
        {
            depMethod = enum2Str(assetDepreciationProfile.Method);
        }

        return depMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriorDepProfileChangeString_JP</Name>
				<Source><![CDATA[
    private str getPriorDepProfileChangeString_JP(AssetBook _assetBook, AssetDepProfileChange_JP _depProfileChange)
    {
        str priorDepProfileString;

        AssetDepProfileChange_JP priorDepProfileChange = AssetDepProfileChange_JP::find(_assetBook.TableId, _assetBook.RecId, contract.parmFromDate());

        if (priorDepProfileChange.RecId
            && priorDepProfileChange.RecId != _depProfileChange.RecId)
        {
            priorDepProfileString = ' ' + strFmt("@FixedAssets:FA_DepreciationProfileChange_JP",
                        this.getDepMethodFromDepProfileChange_JP(priorDepProfileChange),
                        priorDepProfileChange.ServiceLife);
        }

        return priorDepProfileString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAltDepreciationProfileMethod</Name>
				<Source><![CDATA[
    private str getAltDepreciationProfileMethod(AssetBook _assetBook)
    {
        str altDepreciationProfileMethod;

        AssetDepreciationProfile assetAltDepreciationProfile = _assetBook.depreciationAltProfile();
        if (assetAltDepreciationProfile)
        {
            altDepreciationProfileMethod = ',' + enum2Str(assetAltDepreciationProfile.Method);
        }

        return altDepreciationProfileMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceLife</Name>
				<Source><![CDATA[
    private AssetServiceLife getServiceLife(AssetBook _assetBook, AssetDepProfileChange_JP _depProfileChange)
    {
        AssetServiceLife serviceLife = _assetBook.ServiceLife;

        if (isIsoJP
            && _depProfileChange.RecId)
        {
            serviceLife = _depProfileChange.ServiceLife;
        }

        return serviceLife;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>