<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeq_Voucher_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the class that provides continuous number sequences for chinese voucher.
/// </summary>
public class NumberSeq_Voucher_CN extends NumberSeq
{
    PeriodCode periodCode;
    TransDate transDate;
    FiscalPeriodType fiscalPeriodType;
    boolean fiscalPeriodTypeInit;

    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNumInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number internal information.
    /// </summary>
    /// <param name="_numberSequenceId">
    /// The number sequence id.
    /// </param>
    /// <param name="_voucher">
    /// The voucher information.
    /// </param>
    /// <returns>
    /// The number internal information.
    /// </returns>
    /// <exception>
    /// Exception is thrown if deadlock occurs.
    /// </exception>
    protected Integer getNumInternal(RefRecId _numberSequenceId, boolean _voucher)
    {
        Num                     number = '';
        NumberSequenceTable     numberSequenceTable;
        boolean                 ok = true;
        Integer                 increment = 1;
        NumberPeriod_CN         numberPeriodDeleteMin;

        this.setGlobalTransId();

        using (NumberPeriodContext_CN context = new NumberPeriodContext_CN())
        {
            using (NumberSequenceConnection numberSequenceConnection = NumberSequenceConnection::construct())
            {
                context.parmNumberSequenceConnection(numberSequenceConnection);
                numberSequenceConnection.tts_begin();

                sequenceUpdated = false;

                numberSequenceConnection.setConnection(numberSequenceTable);
                numberSequenceConnection.setConnection(numberPeriodDeleteMin);

                select forupdate firstonly numberSequenceTable
                    where numberSequenceTable.RecId == _numberSequenceId;

                if (numberSequenceTable.RecId != 0)
                {
                    if (transDate)
                    {
                        NumberSeq_Voucher_CN::numPeriodCheck(
                            numberSequenceTable,
                            transDate,
                            this.parmFiscalPeriodType());
                    }
                    else
                    {
                        NumberSeq_Voucher_CN::numPeriodCheck(
                            numberSequenceTable,
                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                            this.parmFiscalPeriodType());
                    }

                    ok = this.checkSetUpNum(numberSequenceTable);

                    if (ok)
                    {
                        try
                        {
                            numberPeriodDeleteMin = NumberPeriod_CN::findDeletedSmallerNumber(
                                _numberSequenceId,
                                transDate,
                                true,
                                this.parmFiscalPeriodType());

                            if (numberPeriodDeleteMin)
                            {
                                number = NumberSeq::numInsertFormat(numberPeriodDeleteMin.NextRec, numberSequenceTable.Format);
                                numberPeriodDeleteMin.delete();

                                if (LedgerParameters::isChineseVoucher_CN())
                                {
                                    lastVoucherNumGenerated = number;
                                }
                            }
                        }
                        catch (Exception::Deadlock)
                        {
                            if (xSession::currentRetryCount() >= #RetryNum)
                            {
                                throw Exception::Deadlock;
                            }
                            else
                            {
                                retry;
                            }
                        }
                    }

                    if (number == '')
                    {
                        if (ok)
                        {
                            if (numberSequenceTable.NextRec == 0 || numberSequenceTable.NextRec > numberSequenceTable.Highest)
                            {
                                // Number sequence %1 has been exceeded
                                ok = checkFailed(strfmt("@SYS17478", numberSequenceTable.NumberSequence));
                            }
                            else
                            {
                                number = NumberSeq::numInsertFormat((numberSequenceTable.NextRec + increment - 1), numberSequenceTable.Format);
                                if (LedgerParameters::isChineseVoucher_CN())
                                {
                                    lastVoucherNumGenerated = number;
                                }
                            }
                        }

                        if (ok)
                        {
                            if (numberSequenceTable.InUse == NoYes::No)
                            {
                                numberSequenceTable.InUse = NoYes::Yes;
                            }
                            numberSequenceTable.NextRec += increment;
                            numberSequenceTable.update();

                            if (transDate)
                            {
                                this.updateNumberPeriod(
                                    numberSequenceTable,
                                    transDate,
                                    this.parmFiscalPeriodType());
                            }
                            else
                            {
                                this.updateNumberPeriod(
                                    numberSequenceTable,
                                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                    this.parmFiscalPeriodType());
                            }
                        }
                    }

                    if (!ok)
                    {
                        numberSequenceConnection.tts_abort();
                        // Number selection is canceled
                        throw error("@SYS25038");
                    }
                }

                numberSequenceConnection.tts_commit();
            }
        }

        if (sequenceUpdated)
        {
            this.createTTSLink();
        }

        return numberSequenceTable.NextRec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodCode</Name>
				<Source><![CDATA[
    public PeriodCode parmPeriodCode(PeriodCode _periodCode = periodCode)
    {
        periodCode = _periodCode;
        return periodCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalPeriodType</Name>
				<Source><![CDATA[
    public FiscalPeriodType parmFiscalPeriodType(FiscalPeriodType _fiscalPeriodType = fiscalPeriodType)
    {
        if (!prmIsDefault(_fiscalPeriodType))
        {
            fiscalPeriodTypeInit = true;
        }

        if (!fiscalPeriodTypeInit)
        {
            fiscalPeriodType = FiscalPeriodType::Operating;
        }
        else
        {
            fiscalPeriodType = _fiscalPeriodType;
        }

        return fiscalPeriodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNumberPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates number period.
    /// </summary>
    /// <param name="_numberSequenceTable">
    /// The number sequence table.
    /// </param>
    /// <param name="_transDate">
    /// The transaction data.
    /// </param>
    /// <param name="_periodCode">
    /// The period code.
    /// </param>
    /// <param name="_userConnection">
    /// The user connection.
    /// </param>
    /// <returns>
    /// If 'True', updates succeed.
    /// </returns>
    /// <exception>
    /// Exception is thrown if deadlock occurs.
    /// </exception>
    public boolean updateNumberPeriod(
        NumberSequenceTable _numberSequenceTable,
        TransDate           _transDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        FiscalPeriodType    _periodCode = FiscalPeriodType::Operating,
        UserConnection      _userConnection = null)
    {
        NumberPeriod_CN         numberPeriod;
        NumberPeriod_CN         numberPeriodToDel;
        Integer                 increment = 1;

        FiscalCalendarRecId     fiscalCalendarRecId  = CompanyInfoHelper::fiscalCalendarRecId();
        FiscalCalendarPeriod    fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
            fiscalCalendarRecId,
            _transDate,
            _periodCode);

        NumberPeriodContext_CN context = NumberPeriodContext_CN::current();

        if (context && context.parmNumberSequenceConnection())
        {
            context.parmNumberSequenceConnection().setConnection(numberPeriod);
            context.parmNumberSequenceConnection().setConnection(numberPeriodToDel);
        }
        else if (_userConnection)
        {
            numberPeriod.setConnection(_userConnection);
            numberPeriodToDel.setConnection(_userConnection);
        }

        if (_numberSequenceTable.RecId)
        {
            try
            {
                ttsbegin;
                numberPeriod = NumberPeriod_CN::findByNaturalKey(
                    _numberSequenceTable.RecId,
                    fiscalCalendarPeriod.StartDate,
                    FiscalCalendarPeriod.Type,
                    true,
                    _userConnection);

                if (numberPeriod.RecId)
                {
                    numberPeriod.NextRec = _numberSequenceTable.NextRec;
                    numberPeriodToDel = NumberPeriod_CN::findNum(
                        _numberSequenceTable.RecId,
                        _transDate,
                        numberPeriod.NextRec,
                        VoucherStatus_CN::Used,
                        true,
                        _periodCode,
                        _userConnection);

                    while (numberPeriodToDel)
                    {
                        numberPeriod.NextRec = numberPeriod.NextRec + increment;
                        numberPeriodToDel.delete();
                        numberPeriodToDel = NumberPeriod_CN::findNum(
                            _numberSequenceTable.RecId,
                            _transDate,
                            numberPeriod.NextRec,
                            VoucherStatus_CN::Used,
                            true,
                            _periodCode,
                            _userConnection);
                    }
                    numberPeriod.update();
                }
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGetVoucherFromCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new voucher from code.
    /// </summary>
    /// <param name="_numberSequenceTableRecId">
    /// The number sequence of table record id.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_makeDecisionLater">
    /// If 'True', the code will make decision lateer.
    /// </param>
    /// <param name="_dontThrowOnMissingRefSetUp">
    /// If 'True', the code will not throw on missing reference setup.
    /// </param>
    /// <returns>
    /// The instance of the <c>NumberSeq</c> class.
    /// </returns>
    /// <exception>
    /// Exception is thrown if number sequence does not exist.
    /// </exception>
    public static NumberSeq newGetVoucherFromCode(
        RefRecId _numberSequenceTableRecId,
        TransDate _transDate,
        boolean _makeDecisionLater = false,
        boolean _dontThrowOnMissingRefSetUp = false)
    {
        NumberSeq_Voucher_CN    numberSeq;
        NumberSequenceTable     numberSequenceTableVoucher = NumberSequenceTable::find(_numberSequenceTableRecId);
        NumberSequenceTable_CN  numberSequenceTableCN = NumberSequenceTable_CN::findByNumberSequenceTable(_numberSequenceTableRecId);

        if (!numberSequenceTableVoucher)
        {
            if (_dontThrowOnMissingRefSetUp)
            {
                return numberSeq;
            }
            // Number sequence %1 does not exist
            throw error(strfmt("@SYS26271", _numberSequenceTableRecId));
        }

        if (!numberSequenceTableCN.RestartNum)
        {
            return NumberSeq::newGetVoucherFromCode(
                numberSequenceTableVoucher.NumberSequence,
                NumberSeqScopeFactory::createDefaultScope(),
                _makeDecisionLater,
                _dontThrowOnMissingRefSetUp);
        }

        numberSeq = new NumberSeq_Voucher_CN();

        if (numberSeq)
        {
            numberSeq.parmTransDate(_transDate);
            numberSeq.parmVoucherSequenceCode(numberSequenceTableVoucher.NumberSequence);
            numberSeq.parmNumTableVoucher(numberSequenceTableVoucher);
            numberSeq.parmMakeDecisionLater(_makeDecisionLater);
            numberSeq.parmVoucherSequenceId(numberSequenceTableVoucher.RecId);
        }
        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numPeriodCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks number period.
    /// </summary>
    /// <param name="_numberSequenceTable">
    /// The number sequence table.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_periodCode">
    /// The period code.
    /// </param>
    /// <param name="_userConnection">
    /// The user connection.
    /// </param>
    /// <returns>
    /// If 'True', the number period check is succeed.
    /// </returns>
    /// <exception>
    /// Exception is thrown if date is not in an open period.
    /// </exception>
    public static boolean numPeriodCheck(
        NumberSequenceTable _numberSequenceTable,
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        FiscalPeriodType _periodCode = FiscalPeriodType::Operating,
        UserConnection _userConnection = null)
    {
        NumberPeriod_CN numberPeriod;
        NumberSequenceList numberSequenceList;
        NumberSequenceTable numberSequenceTable;
        FiscalCalendarRecId fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        FiscalCalendarPeriod fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(fiscalCalendarRecId, _transDate, _periodCode);
        NumberSequenceTable_CN numberSequenceTableCN = NumberSequenceTable_CN::findByNumberSequenceTable(_numberSequenceTable.RecId);

        NumberPeriodContext_CN context = NumberPeriodContext_CN::current();

        if (context && context.parmNumberSequenceConnection())
        {
            context.parmNumberSequenceConnection().setConnection(numberSequenceTable);
            context.parmNumberSequenceConnection().setConnection(numberSequenceList);
        }
        else if (_userConnection)
        {
            numberSequenceTable.setConnection(_userConnection);
            numberSequenceList.setConnection(_userConnection);
        }

        if (fiscalCalendarPeriod.RecId
             && (fiscalCalendarPeriod.currentLedgerPeriodStatus() == FiscalPeriodStatus::Open
                || _periodCode != FiscalPeriodType::Operating))
        {
            numberSequenceTable = _numberSequenceTable;
            if (numberSequenceTable.RecId != 0
                && numberSequenceTableCN.RestartNum)
            {
                numberPeriod = NumberPeriod_CN::findByNaturalKey(
                    numberSequenceTable.RecId,
                    fiscalCalendarPeriod.StartDate,
                    FiscalCalendarPeriod.Type,
                    false,
                    _userConnection);

                delete_from numberSequenceList
                    where numberSequenceList.NumberSequenceId == numberSequenceTable.RecId;

                if (numberPeriod.RecId == 0)
                {
                    numberPeriod.NumberSequenceTable = numberSequenceTable.RecId;
                    numberPeriod.PeriodStart         = fiscalCalendarPeriod.StartDate;
                    numberPeriod.PeriodCode          = fiscalCalendarPeriod.Type;
                    numberPeriod.NextRec             = numberSequenceTable.Lowest;
                    numberPeriod.insert();
                }
                numberSequenceTable.NextRec = numberPeriod.NextRec;
                numberSequenceTable.update();

                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            if (context && context.parmNumberSequenceConnection())
            {
                context.parmNumberSequenceConnection().tts_abort();
            }
            else if (_userConnection)
            {
                _userConnection.ttsabort();
                _userConnection.finalize();
            }
            // Date is not in an open period
            throw error("@GLS54482");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>release</Name>
				<Source><![CDATA[
    /// <summary>
    /// The release method of the <c>NumberSeq_Voucher_CN</c> class.
    /// </summary>
    /// <param name="_numberSequenceTableRecId">
    /// The number sequence table RecId.
    /// </param>
    /// <param name="_num">
    /// The number information.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_periodCode">
    /// The period code.
    /// </param>
    /// <returns>
    /// Returns the result of the release method.
    /// </returns>
    /// <exception>
    /// Exception is thrown if an update conflict or deadlock occurs.
    /// </exception>
    public static boolean release(
        RefRecId            _numberSequenceTableRecId,
        Num                 _num,
        TransDate           _transDate,
        FiscalPeriodType    _periodCode = FiscalPeriodType::Operating)
    {
        int                 numberToRelease;
        NumberPeriod_CN     numberPeriod;
        NumberPeriod_CN     numberPeriodInsert;
        boolean             ret = true;
        FiscalCalendarRecId fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        FiscalCalendarPeriod     fiscalCalendarPeriod;

        if (!_transDate
            || !_num
            || !LedgerFiscalCalendar::findYearEndClosingPeriodByDate(fiscalCalendarRecId, _transDate).RecId
            || !NumberSequenceTable::find(_numberSequenceTableRecId)
            || !NumberSeq::numCheckFormat(_num, NumberSequenceTable::find(_numberSequenceTableRecId)))
        {
            return false;
        }

        if (!NumberPeriod_CN::checkRestartNum(_numberSequenceTableRecId))
        {
            return NumberSeq::release(NumberSequenceTable::find(_numberSequenceTableRecId).NumberSequence, _num);
        }

        numberToRelease      = NumberSeq::numRemoveFormat(_num,NumberSequenceTable::find(_numberSequenceTableRecId).Format);
        fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(fiscalCalendarRecId, _transDate, _periodCode);
        numberPeriod         = NumberPeriod_CN::findByNaturalKey(_numberSequenceTableRecId, fiscalCalendarPeriod.StartDate, FiscalCalendarPeriod.Type);

        if (!numberPeriod)
        {
            return false;
        }

        using (NumberSequenceConnection numberSequenceConnection = NumberSequenceConnection::construct())
        {
            try
            {
                numberSequenceConnection.tts_begin();

                numberSequenceConnection.setConnection(numberPeriod);
                numberSequenceConnection.setConnection(numberPeriodInsert);

                if (numberToRelease == numberPeriod.NextRec - 1)
                {
                    numberPeriod.NextRec = numberToRelease;
                    numberPeriod.selectForUpdate(true);
                    numberPeriod.update();
                }
                else if (numberToRelease == numberPeriod.NextRec)
                {
                    ret = false;
                }
                else if (numberToRelease < numberPeriod.NextRec - 1)
                {
                    numberPeriodInsert = NumberPeriod_CN::findNum(
                    _numberSequenceTableRecId,
                    _transDate, numberToRelease,
                    VoucherStatus_CN::Deleted,
                    false,
                    _periodCode);

                    if (numberPeriodInsert)
                    {
                        ret = false;
                    }
                    else
                    {
                        numberPeriodInsert.NumberSequenceTable = _numberSequenceTableRecId;
                        numberPeriodInsert.PeriodCode          = FiscalCalendarPeriod.Type;
                        numberPeriodInsert.PeriodStart         = fiscalCalendarPeriod.StartDate;
                        numberPeriodInsert.NextRec             = numberToRelease;
                        numberPeriodInsert.Status              = VoucherStatus_CN::Deleted;
                        numberPeriodInsert.insert();
                    }
                }
                else
                {
                    numberPeriodInsert = NumberPeriod_CN::findNum(
                    _numberSequenceTableRecId,
                    _transDate,
                    numberToRelease,
                    VoucherStatus_CN::Used,
                    true,
                    _periodCode);

                    if (numberPeriodInsert)
                    {
                        numberPeriodInsert.delete();
                    }
                    else
                    {
                        ret = false;
                    }
                }
                numberSequenceConnection.tts_commit();
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    numberSequenceConnection.tts_abort();
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }

            catch (Exception::UpdateConflict)
            {
                if (!NumberSequenceConnection::isApplicationInTransaction())
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        numberSequenceConnection.tts_abort();
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the instance is used.
    /// </summary>
    /// <param name="_numberSequenceTableRecId">
    /// The number sequence of table RecId.
    /// </param>
    /// <param name="_voucher_CN">
    /// The voucher information.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_periodCode">
    /// The period code.
    /// </param>
    /// <returns>
    /// Return true if the instance is used.
    /// </returns>
    public static boolean isUsed(
        RefRecId            _numberSequenceTableRecId,
        Voucher_CN          _voucher_CN,
        TransDate           _transDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        FiscalPeriodType    _periodCode = FiscalPeriodType::Operating)
    {
        NumberPeriod_CN         numberPeriod;
        NumberPeriod_CN         numberPeriodToDel;
        NumberSequenceTable     numberSequenceTable  = NumberSequenceTable::find(_numberSequenceTableRecId);
        NumberSequenceTable_CN  numberSequenceTableCN  = NumberSequenceTable_CN::findByNumberSequenceTable(_numberSequenceTableRecId);
        FiscalCalendarRecId     fiscalCalendarRecId  = CompanyInfoHelper::fiscalCalendarRecId();
        FiscalCalendarPeriod    fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(fiscalCalendarRecId, _transDate);

        if (!numberSequenceTable
            || !_voucher_CN
            || (!_transDate && numberSequenceTableCN.RestartNum)
            || !NumberSeq::numCheckFormat(_voucher_CN, numberSequenceTable))
        {
            return false;
        }

        int numberUsed = NumberSeq::numRemoveFormat(_voucher_CN, numberSequenceTable.Format);

        if (!numberUsed)
        {
            return false;
        }

        if (numberSequenceTableCN.RestartNum)
        {
            if (!LedgerFiscalCalendar::findYearEndClosingPeriodByDate(fiscalCalendarRecId, _transDate).RecId)
            {
                return false;
            }
            try
            {
                using (NumberPeriodContext_CN context = new NumberPeriodContext_CN())
                {
                    using (NumberSequenceConnection numberSequenceConnection = NumberSequenceConnection::construct())
                    {
                        context.parmNumberSequenceConnection(numberSequenceConnection);
                        numberSequenceConnection.tts_begin();

                        numberSequenceConnection.setConnection(numberSequenceTable);

                        select forupdate firstonly numberSequenceTable
                            where numberSequenceTable.RecId == _numberSequenceTableRecId;

                        NumberSeq_Voucher_CN::numPeriodCheck(numberSequenceTable, _transDate, _periodCode);

                        numberPeriod = NumberPeriod_CN::findByNaturalKey(
                                 _numberSequenceTableRecId,
                                 fiscalCalendarPeriod.StartDate,
                                 fiscalCalendarPeriod.type,
                                 false);

                        if (numberUsed == numberPeriod.NextRec)
                        {
                            numberUsed++;
                            numberPeriod.NextRec = numberUsed;

                            select count(NextRec) from numberPeriodToDel
                                where numberPeriodToDel.NumberSequenceTable == _numberSequenceTableRecId
                                    && numberPeriodToDel.PeriodStart == fiscalCalendarPeriod.StartDate
                                    && numberPeriodToDel.PeriodCode == FiscalCalendarPeriod.Type
                                    && numberPeriodToDel.NextRec >= numberPeriod.NextRec
                                    && numberPeriodToDel.Status == VoucherStatus_CN::Used;

                            int increment = numberPeriodToDel.NextRec;

                            delete_from numberPeriodToDel
                                where numberPeriodToDel.NumberSequenceTable == _numberSequenceTableRecId
                                    && numberPeriodToDel.PeriodStart == fiscalCalendarPeriod.StartDate
                                    && numberPeriodToDel.PeriodCode == fiscalCalendarPeriod.Type
                                    && numberPeriodToDel.NextRec >= numberPeriod.NextRec
                                    && numberPeriodToDel.Status == VoucherStatus_CN::Used;

                            numberPeriod.NextRec += increment;
                            numberPeriod.selectForUpdate(true);
                            numberPeriod.update();
                        }
                        else if (numberUsed > numberPeriod.NextRec)
                        {
                            numberPeriod.NextRec             = numberUsed;
                            numberPeriod.NumberSequenceTable = _numberSequenceTableRecId;
                            numberPeriod.PeriodCode          = FiscalCalendarPeriod.Type;
                            numberPeriod.PeriodStart         = fiscalCalendarPeriod.StartDate;
                            numberPeriod.Status              = VoucherStatus_CN::Used;
                            if (!NumberPeriod_CN::findNum(
                                    _numberSequenceTableRecId,
                                    _transDate,
                                    numberUsed,
                                    VoucherStatus_CN::Used,
                                    false,
                                    _periodCode))
                            {
                                numberPeriod.insert();
                            }
                        }
                        else
                        {
                            numberPeriod = NumberPeriod_CN::findNum(
                                _numberSequenceTableRecId,
                                _transDate,
                                numberUsed,
                                VoucherStatus_CN::Deleted,
                                true,
                                _periodCode);

                            if (numberPeriod)
                            {
                                numberPeriod.delete();
                            }
                        }

                        numberSequenceConnection.tts_commit();
                    }
                }
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>