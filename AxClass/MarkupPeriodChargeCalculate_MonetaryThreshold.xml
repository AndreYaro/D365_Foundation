<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupPeriodChargeCalculate_MonetaryThreshold</Name>
	<SourceCode>
		<Declaration><![CDATA[
[MarkupPeriodChargeCalculateMode(MarkupPeriodChargeRuleLineType::MonetaryThreshold)]
internal class MarkupPeriodChargeCalculate_MonetaryThreshold extends MarkupPeriodChargeCalculate
{
    protected MarkupAmount chargeAmount;
    protected MarkupAmount totalChargeAmount;

    protected RefRecId previousMarkupTransRecId;
    protected RefRecId previousInvoiceLineRecId;

    protected MarkupPeriodChargeInvoiceLineBaseMarkupTxt chargeDescription;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPeriodRuleTypeRanges</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addPeriodRuleTypeRanges(Query _query)
    {
        QueryBuildDataSource qbdsCustInvoiceJour = _query.dataSourceTable(tableNum(CustInvoiceJour));
        QueryBuildDataSource qbdsCustInvoiceTrans = _query.dataSourceTable(tableNum(CustInvoiceTrans));
        QueryBuildDataSource qbdsMarkupTrans = qbdsCustInvoiceTrans.addDataSource(tableNum(MarkupTrans));

        qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, CurrencyCode)).value(periodChargeRuleLine.CurrencyCode);
        qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, SalesId)).value(SysQuery::valueNotEmptyString());

        if (this.requireInvoiceLineChargeMatch())
        {
            qbdsMarkupTrans.joinMode(JoinMode::InnerJoin);
        }
        else
        {
            qbdsMarkupTrans.joinMode(JoinMode::OuterJoin);
        }

        qbdsMarkupTrans.fetchMode(QueryFetchMode::One2Many);
        qbdsMarkupTrans.addLink(fieldNum(CustInvoiceTrans, TableId), fieldNum(MarkupTrans, TransTableId), qbdsCustInvoiceTrans.name());
        qbdsMarkupTrans.addLink(fieldNum(CustInvoiceTrans, RecId), fieldNum(MarkupTrans, TransRecId), qbdsCustInvoiceTrans.name());
        qbdsMarkupTrans.addRange(fieldNum(MarkupTrans, ModuleType)).value(queryValue(MarkupModuleType::Cust));
        qbdsMarkupTrans.addRange(fieldNum(MarkupTrans, MarkupCode)).value(periodChargeRuleLine.ChargeCode);
        qbdsMarkupTrans.addRange(fieldNum(MarkupTrans, CurrencyCode)).value(periodChargeRuleLine.CurrencyCode);

        if (periodChargeRuleLine.DebitChargeAmountOnly)
        {
            qbdsMarkupTrans.addRange(fieldNum(MarkupTrans, CalculatedAmount)).value(strFmt('>%1', 0));
        }

        QueryBuildDataSource qbdsMarkupTransInvoiceLineBaseRelationship = qbdsMarkupTrans.addDataSource(tableNum(MarkupPeriodChargeInvoiceLineBaseRelationship));
        qbdsMarkupTransInvoiceLineBaseRelationship.joinMode(JoinMode::NoExistsJoin);
        qbdsMarkupTrans.fetchMode(QueryFetchMode::One2One);

        str relationShipDataSourceName;
        int relationShipDataSourceNameDataSourceTableId;
        str relationShipDataSourceNameDataSourceFieldName;
        if (this.matchSalesTableInventoryDimension())
        {
            relationShipDataSourceName = qbdsCustInvoiceJour.name();
            relationShipDataSourceNameDataSourceTableId = tableNum(CustInvoiceJour);
            relationShipDataSourceNameDataSourceFieldName = fieldStr(CustInvoiceJour, RecId);
        }
        else
        {
            relationShipDataSourceName = qbdsCustInvoiceTrans.name();
            relationShipDataSourceNameDataSourceTableId = tableNum(CustInvoiceTrans);
            relationShipDataSourceNameDataSourceFieldName = fieldStr(CustInvoiceTrans, RecId);
        }

        qbdsMarkupTransInvoiceLineBaseRelationship.addRange(fieldNum(MarkupPeriodChargeInvoiceLineBaseRelationship, RefRecId)).value(strFmt(
            '(((%1.%2 == %3.%4) && (%1.%5 == %6)) || ((%1.%2 == %7.%8) && (%1.%5 == %9) && (%1.%10 == "%11")))',
            qbdsMarkupTransInvoiceLineBaseRelationship.name(), // %1
            fieldStr(MarkupPeriodChargeInvoiceLineBaseRelationship, RefRecId), // %2
            qbdsMarkupTrans.name(), // %3
            fieldStr(MarkupTrans, RecId), // %4
            fieldStr(MarkupPeriodChargeInvoiceLineBaseRelationship, RefTableId), // %5
            tableNum(MarkupTrans), // %6
            relationShipDataSourceName, // %7
            relationShipDataSourceNameDataSourceFieldName, // %8
            relationShipDataSourceNameDataSourceTableId, // %9
            fieldStr(MarkupPeriodChargeInvoiceLineBaseRelationship, ChargeCode), // %10
            periodChargeRuleLine.ChargeCode)); // %11

        qbdsMarkupTransInvoiceLineBaseRelationship.addRange(fieldNum(MarkupPeriodChargeInvoiceLineBaseRelationship, RuleLineType)).value(SysQuery::value(this.getPeriodChargeRuleLineRelationshipType()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroupingQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void createGroupingQuery(Query _query)
    {
        QueryBuildDataSource qbdsMarkupTrans = _query.dataSourceTable(tableNum(MarkupTrans));
        
        qbdsMarkupTrans.addGroupByAndSelectionField(fieldNum(MarkupTrans, MarkupCode));
        qbdsMarkupTrans.addGroupByAndSelectionField(fieldNum(MarkupTrans, CurrencyCode));
        qbdsMarkupTrans.addGroupByAndSelectionField(fieldNum(MarkupTrans, RecId));
        qbdsMarkupTrans.addSelectionField(fieldNum(MarkupTrans, CalculatedAmount), SelectionField::Sum);
        
        qbdsMarkupTrans.addOrderByField(fieldNum(MarkupTrans, MarkupCode));

        if (!this.matchSalesTableInventoryDimension())
        {
            QueryBuildDataSource qbdsCustInvoiceTrans = _query.dataSourceTable(tableNum(CustInvoiceTrans));
            qbdsCustInvoiceTrans.addGroupByAndSelectionField(fieldNum(CustInvoiceTrans, RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInvoiceLineBase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initializeInvoiceLineBase(QueryRun _queryRun)
    {
        CustInvoiceJour custInvoiceJour = _queryRun.get(tableNum(CustInvoiceJour));

        using (var activityContext = this.instrumentationLogger().periodChargeRuleActivities().initializeInvoiceLineBaseActivity(MarkupPeriodChargeRuleLineType::MonetaryThreshold, custInvoiceJour))
        {
            this.generateInvoiceLineBase(_queryRun);
        
            MarkupTrans markupTrans = _queryRun.get(tableNum(MarkupTrans));
            
            this.instrumentationLogger().periodChargeRuleActivities().logInitializeInvoiceLineBaseRecord(activityContext, markupTrans);
            this.calculateAmounts(markupTrans);

            if (this.matchSalesTableInventoryDimension())
            {
                if (markupTrans.RecId)
                {
                    this.addInvoiceLineBaseRelationshipToSet(tableNum(MarkupTrans), markupTrans.RecId);
                }
            }
            else
            {
                CustInvoiceTrans custInvoiceTrans = _queryRun.get(tableNum(CustInvoiceTrans));

                if (custInvoiceTrans.RecId && previousInvoiceLineRecId != custInvoiceTrans.RecId)
                {
                    this.instrumentationLogger().periodChargeRuleActivities().logInitializeInvoiceLineBaseRecord(activityContext, custInvoiceTrans);
                    this.addInvoiceLineBaseRelationshipToSet(tableNum(CustInvoiceTrans), custInvoiceTrans.RecId, true);

                    previousInvoiceLineRecId = custInvoiceTrans.RecId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceLineBase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void generateInvoiceLineBase(QueryRun _queryRun)
    {
        CustInvoiceJour custInvoiceJour = _queryRun.get(tableNum(CustInvoiceJour));

        if (previousRecId != custInvoiceJour.RecId)
        {
            if (previousRecId)
            {
                if (this.matchSalesTableInventoryDimension())
                {
                    // Add invoice line base for invoice to ensure that this invoice will not be processed for the second time with zero amount
                    this.addInvoiceLineBaseRelationshipToSet(tableNum(CustInvoiceJour), previousRecId, true);
                }

                this.populateInvoiceLineBase();
            }

            previousRecId = custInvoiceJour.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmounts</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void calculateAmounts(MarkupTrans _markupTrans)
    {
        chargeAmount += _markupTrans.CalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void populateInvoiceData()
    {
        if (this.matchSalesTableInventoryDimension())
        {
            // Add invoice line base for invoice to ensure that this invoice will not be processed for the second time with zero amount
            this.addInvoiceLineBaseRelationshipToSet(tableNum(CustInvoiceJour), previousRecId, true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initDefault()
    {
        super();
        chargeDescription = MarkupTable::find(MarkupModuleType::Cust, periodChargeRuleLine.ChargeCode).Txt;

        mustGenerateZeroQuantityInvoiceLineBase = !this.requireInvoiceLineChargeMatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void setDefaultValues()
    {
        super();

        previousRecId = 0;
        totalChargeAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddInvoiceLineBaseHeader</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustAddInvoiceLineBaseHeader()
    {
        return mustGenerateZeroQuantityInvoiceLineBase || chargeAmount != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotals</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void calculateTotals()
    {
        totalChargeAmount += chargeAmount;
        chargeAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleLineCondition</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean checkRuleLineCondition()
    {
        return invoiceLineBaseSet.empty() || totalChargeAmount >= periodChargeRuleLine.MonetaryThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInvoiceLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeRuleChargeAmount calculateInvoiceLineAmount()
    {
        return periodChargeRuleLine.MonetaryThreshold - totalChargeAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCurrencyCode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeRuleAmountCurrencyCode getInvoiceCurrencyCode()
    {
        return periodChargeRuleLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodChargeRuleLineRelationshipType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeRuleLineRelationshipType getPeriodChargeRuleLineRelationshipType()
    {
        return MarkupPeriodChargeRuleLineRelationshipType::MonetaryThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceLineBaseCreationParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal MarkupPeriodChargeInvoiceLineBaseCreateParameters populateInvoiceLineBaseCreationParameters()
    {
        MarkupPeriodChargeInvoiceLineBaseCreateParameters invoiceLineBaseCreationParameters = super();
        invoiceLineBaseCreationParameters.parmChargeCode(periodChargeRuleLine.ChargeCode);
        invoiceLineBaseCreationParameters.parmChargeAmount(chargeAmount);
        invoiceLineBaseCreationParameters.parmChargeDescription(chargeDescription);

        return invoiceLineBaseCreationParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceLineBaseId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected str generateInvoiceLineBaseId()
    {
        return strFmt('%1 %2 %3', int642Str(periodChargeRuleLine.RecId), int642Str(previousRecId), periodChargeRuleLine.ChargeCode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>