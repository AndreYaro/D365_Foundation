<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBRecordFormatter_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>FBRecordFormatter_BR</c> class is the abstract class used as the base class for field formatters.
/// </summary>
abstract class FBRecordFormatter_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formatDateValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats a field value of type date.
    /// </summary>
    /// <param name="_recordValue">
    ///     The record containing the value to be formatted.
    /// </param>
    /// <returns>
    ///     The record value properly formatted.
    /// </returns>
    abstract protected str formatDateValue(FBRecordFieldDate_BR _recordValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatEmptyValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats a field that has empty content.
    /// </summary>
    /// <param name="_recordValue">
    ///     The record containing the value to be formatted.
    /// </param>
    /// <returns>
    ///     The record value properly formatted.
    /// </returns>
    abstract protected str formatEmptyValue(FBRecordFieldEmpty_BR _recordValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatNumericValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats a field value of type numeric.
    /// </summary>
    /// <param name="_recordValue">
    ///     The record containing the value to be formatted.
    /// </param>
    /// <returns>
    ///     The record value properly formatted.
    /// </returns>
    abstract protected str formatNumericValue(FBRecordFieldNumeric_BR _recordValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStringValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats a field value of type string.
    /// </summary>
    /// <param name="_recordValue">
    ///     The record containing the value to be formatted.
    /// </param>
    /// <returns>
    ///     The record value properly formatted.
    /// </returns>
    abstract protected str formatStringValue(FBRecordFieldString_BR _recordValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatTimeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats a field value of type time.
    /// </summary>
    /// <param name="_recordValue">
    ///     The record containing the value to be formatted.
    /// </param>
    /// <returns>
    ///     The record value properly formatted.
    /// </returns>
    abstract protected str formatTimeValue(FBRecordFieldTime_BR _recordValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats the value of a record.
    /// </summary>
    /// <param name="_recordField">
    ///     An instance of a concrete implementation of class <c>FBRecordField_BR</c> containing the value to be formatted.
    /// </param>
    /// <returns>
    ///     A string with the field value properly formatted.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Exception thrown when an unexpected implementation of <c>FBRecordField_BR</c> is passed as parameter to the method.
    /// </exception>
    public str formatValue(FBRecordField_BR _recordField)
    {
        if (_recordField IS FBRecordFieldString_BR)
        {
            return this.formatStringValue(_recordField);
        }

        if (_recordField IS FBRecordFieldNumeric_BR)
        {
            return this.formatNumericValue(_recordField);
        }

        if (_recordField IS FBRecordFieldDate_BR)
        {
            return this.formatDateValue(_recordField);
        }

        if (_recordField IS FBRecordFieldEmpty_BR)
        {
            return this.formatEmptyValue(_recordField);
        }

        if (_recordField IS FBRecordFieldTime_BR)
        {
            return this.formatTimeValue(_recordField);
        }

        throw Exception::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnlyValidChars</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Normalizes a string so that it contains only valid characters according to the rules established for tax statements files.
    /// </summary>
    /// <param name="_text">
    ///     The original string to be normalized.
    /// </param>
    /// <returns>
    ///     The string normalized.
    /// </returns>
    public str getOnlyValidChars(str _text)
    {
        str returnValue;

        returnValue = strkeep(_text, ' 0123456789$%*+,-./:;<=>?@[\]{|}_()abcdefghijklmnopqrstuvxwyzABCDEFGHIJKLMNOPQRSTUVXWYZãáàâÃÁÀÂéêëÉÊËíÍóôõÓÔÕúüÚÜçÇ');

        if (returnValue == '')
        {
            returnValue = ' ';
        }

        return strupr(returnValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>