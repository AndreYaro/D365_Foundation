<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportOffsetTaxTransCreator_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles creation of offset transTrans for India.
/// </summary>
class TaxReportOffsetTaxTransCreator_IN extends TaxReportOffsetTaxTransCreator
{
    boolean                 excessRecPosting;
    LedgerDimensionAccount  taxLedgerDimension;
    Amount                  excessAmount;
    RefRecId                taxRegistrationNumber;
    boolean                 isIndirectTax;
    Amount                  adjustedTaxAmount;
    ExciseRecordType_IN     exciseRecordType;
    TaxAuthorityAddress     taxAuthorityAddress;
    boolean                 isRecoverableAccount;
    boolean                 isPayableAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static TaxReportOffsetTaxTransCreator_IN construct()
    {
        return new TaxReportOffsetTaxTransCreator_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAndInit</Name>
				<Source><![CDATA[
    public static TaxReportOffsetTaxTransCreator_IN constructAndInit(
        Voucher                 _voucher,
        TransDate               _transactionDate,
        TaxPeriod               _taxPeriod,
        TaxPeriodDate           _fromDate,
        boolean                 _excessRecPosting = false,
        LedgerDimensionAccount  _taxLedgerDimension = 0,
        Amount                  _excessAmount = 0,
        RefRecId                _taxRegistrationNumber = 0,
        boolean                 _isIndirectTax = false,
        Amount                  _adjustedTaxAmount = 0,
        ExciseRecordType_IN     _exciseRecordType = ExciseRecordType_IN::None,
        TaxAuthorityAddress     _taxAuthorityAddress = null,
        boolean                 _isRecoverableAccount = false,
        boolean                 _isPayableAccount = false
    )
    {
        TaxReportOffsetTaxTransCreator_IN taxReportOffsetTaxTransCreator_IN = TaxReportOffsetTaxTransCreator_IN::construct();

        taxReportOffsetTaxTransCreator_IN.init(
            _voucher,
            _transactionDate,
            _taxPeriod,
            _fromDate
        );

        taxReportOffsetTaxTransCreator_IN.excessRecPosting        = _excessRecPosting;
        taxReportOffsetTaxTransCreator_IN.taxLedgerDimension      = _taxLedgerDimension;
        taxReportOffsetTaxTransCreator_IN.excessAmount            = _excessAmount;
        taxReportOffsetTaxTransCreator_IN.taxRegistrationNumber   = _taxRegistrationNumber;
        taxReportOffsetTaxTransCreator_IN.isIndirectTax           = _isIndirectTax;
        taxReportOffsetTaxTransCreator_IN.adjustedTaxAmount       = _adjustedTaxAmount;
        taxReportOffsetTaxTransCreator_IN.exciseRecordType        = _exciseRecordType;
        taxReportOffsetTaxTransCreator_IN.taxAuthorityAddress     = _taxAuthorityAddress;
        taxReportOffsetTaxTransCreator_IN.isRecoverableAccount    = _isRecoverableAccount;
        taxReportOffsetTaxTransCreator_IN.isPayableAccount        = _isPayableAccount;

        return taxReportOffsetTaxTransCreator_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveOffsetTaxTrans</Name>
				<Source><![CDATA[
    public RecId saveOffsetTaxTrans(TaxTrans _taxTrans)
    {
        TaxTrans        taxTransOffsetTrans;
        TaxTrans_IN     taxTransLoc;
        TaxTable        taxTable;
        boolean         isIndia = TaxParameters::checkTaxParameters_IN();
        TaxParameters   taxParameters;
        LedgerDimensionDefaultAccount   dimensionDefaultAccount;
        TaxTrans_W      taxTransOffsetTrans_W;
        TaxTrans_W      taxTrans_W;

        taxTransOffsetTrans.clear();

        if (isIndia)
        {
            taxParameters =  TaxParameters::find();
            taxTable = TaxTable::find(_taxTrans.TaxCode);
        }

        if (isIndia
            && excessRecPosting)
        {
            taxTrans_W                                  = _taxTrans.taxTrans_W();
            taxTransOffsetTrans_W                       = taxTransOffsetTrans.taxTrans_W();

            taxTransOffsetTrans.Voucher                 = voucher;
            taxTransOffsetTrans.TransDate               = transactionDate;
            taxTransOffsetTrans.Source                  = TaxModuleType::Voucher;
            taxTransOffsetTrans.TaxCode                 = _taxTrans.TaxCode;
            taxTransOffsetTrans.TaxOrigin               = TaxOrigin::TaxReporting;
            taxTransOffsetTrans.TaxDirection            = _taxTrans.TaxDirection;
            taxTransOffsetTrans.TaxPeriod               = taxPeriod;
            taxTransOffsetTrans.CurrencyCode            = _taxTrans.CurrencyCode;
            taxTransOffsetTrans.TaxBaseAmountCur        = _taxTrans.TaxBaseAmountCur;
            taxTransOffsetTrans.TaxAmountCur            = excessAmount;
            taxTransOffsetTrans.TaxBaseAmount           = _taxTrans.TaxBaseAmount;
            taxTransOffsetTrans.TaxBaseQty              = _taxTrans.TaxBaseQty;
            taxTransOffsetTrans.TaxAmount               = excessAmount;
            taxTransOffsetTrans.TaxInCostPrice          = _taxTrans.TaxInCostPrice;
            taxTransOffsetTrans.TaxInCostPriceMST       = _taxTrans.TaxInCostPriceMST;
            taxTransOffsetTrans.TaxInCostPriceCur       = _taxTrans.TaxInCostPriceCur;
            taxTransOffsetTrans.SourceCurrencyCode      = CompanyInfoHelper::standardCurrency();
            taxTransOffsetTrans.SourceBaseAmountCur     = _taxTrans.TaxBaseAmount;
            taxTransOffsetTrans.SourceTaxAmountCur      = excessAmount;
            taxTransOffsetTrans.SourceRegulateAmountCur = excessAmount;
            taxTransOffsetTrans.ExemptTax               = _taxTrans.ExemptTax;
            taxTransOffsetTrans.ExemptCode              = _taxTrans.ExemptCode;
            taxTransOffsetTrans.TaxValue                = _taxTrans.TaxValue;
            taxTransOffsetTrans.VATExemptPct            = _taxTrans.VATExemptPct;
            taxTransOffsetTrans.PrintCode               = _taxTrans.PrintCode;

            if (!taxTransOffsetTrans.TaxValue)
            {
                taxTransOffsetTrans.TaxValue            = taxTable.showTaxValue();
            }

            taxTransOffsetTrans.TaxAutogenerated                = NoYes::Yes;
            taxTransOffsetTrans_W.TaxType_IN                    = taxTable.TaxType_IN;
            taxTransOffsetTrans_W.TaxComponentTable_IN          = taxTrans_W.TaxComponentTable_IN;
            taxTransOffsetTrans_W.TaxRegistrationNumberTable_IN = taxRegistrationNumber;
            taxTransOffsetTrans.packTaxTrans_W(taxTransOffsetTrans_W);

            if (! taxTransOffsetTrans.TaxPeriod)
            {
                taxTransOffsetTrans.TaxPeriod = taxTable.TaxPeriod;
            }

            if (taxTransOffsetTrans.TaxOrigin != TaxOrigin::TaxReporting)
            taxTransOffsetTrans.TaxRepCounter = TaxReportPeriod_IN::version(taxTransOffsetTrans.TaxPeriod,
                                                                            taxRegistrationNumber,
                                                                            taxTransOffsetTrans.TransDate);
            taxTransOffsetTrans.insert();
        }
        else
        {
            taxTransOffsetTrans = this.initOffsetTaxTrans(_taxTrans);
        }

        if (isIndirectTax)
        {
            if (!taxTransOffsetTrans.TaxValue)
            {
                taxTransOffsetTrans.TaxValue = taxTable.showTaxValue();
            }

            taxTrans_W = _taxTrans.taxTrans_W();
            taxTransOffsetTrans_W = taxTransOffsetTrans.taxTrans_W();
            taxTransOffsetTrans_W.TaxType_IN                       = taxTable.TaxType_IN;
            taxTransOffsetTrans_W.TaxComponentTable_IN             = taxTrans_W.TaxComponentTable_IN;
            taxTransOffsetTrans_W.TaxRegistrationNumberTable_IN    = taxRegistrationNumber;
            taxTransOffsetTrans.packTaxTrans_W(taxTransOffsetTrans_W);

            if (!excessRecPosting)
            {
                // If mannual adjustment is done for recoverable or payable amount to settle field then the taxAmountCur should be adjusted amount.
                // Hence adjustedTaxAmount amount is assigned to taxAmountCur otherwise taxTrans will have wrong taxAmount inserted..
                if (adjustedTaxAmount)
                {
                    taxTransOffsetTrans.TaxAmountCur            = adjustedTaxAmount * -1;
                    taxTransOffsetTrans.TaxAmount               = adjustedTaxAmount * -1;
                    taxTransOffsetTrans.SourceTaxAmountCur      = adjustedTaxAmount * -1;
                    taxTransOffsetTrans.SourceRegulateAmountCur = adjustedTaxAmount * -1;
                }

                taxTransOffsetTrans.insertTaxReporting_IN(fromDate, taxRegistrationNumber);
            }

            taxTrans_W = _taxTrans.taxTrans_W();
            taxTransOffsetTrans_W = taxTransOffsetTrans.taxTrans_W();

            taxTransLoc.RefRecId                        =  taxTransOffsetTrans.RecId;
            taxTransLoc.Voucher                         =  taxTransOffsetTrans.Voucher;
            taxTransLoc.TransDate                       =  taxTransOffsetTrans.TransDate;
            taxTransLoc.Source                          =  taxTransOffsetTrans.Source;
            taxTransLoc.TaxCode                         =  taxTransOffsetTrans.TaxCode;
            taxTransLoc.TaxDirection                    =  taxTransOffsetTrans.TaxDirection;
            taxTransLoc.TaxPeriod                       =  taxTransOffsetTrans.TaxPeriod;
            taxTransLoc.TaxComponentTable               =  taxTrans_W.TaxComponentTable_IN;
            taxTransLoc.TaxType                         =  taxTable.TaxType_IN;
            taxTransLoc.CompanyRegistrationNumber       =  taxTransOffsetTrans_W.TaxRegistrationNumberTable_IN;
            taxTransLoc.CustVendRegistrationNumber      =  taxTransOffsetTrans_W.TaxRegistrationNumberTable_IN;
            taxTransLoc.SourceTaxAmountCur              =  taxTransOffsetTrans.SourceTaxAmountCur;
            taxTransLoc.ExemptCode                      =  taxTransOffsetTrans.ExemptCode;
            taxTransLoc.TaxAmount                       =  taxTransOffsetTrans.TaxAmount;
            taxTransLoc.PostedTaxAmout                  =  taxTransOffsetTrans.SourceTaxAmountCur;
            taxTransLoc.VoucherCurrency                 =  taxTransOffsetTrans.SourceCurrencyCode;
            taxTransLoc.SourceCurrencyCode              =  taxTransOffsetTrans.SourceCurrencyCode;
            taxTransLoc.TaxValue                        =  taxTransOffsetTrans.TaxValue;
            taxTransLoc.SourceBaseAmountCur             =  taxTransOffsetTrans.SourceBaseAmountCur;
            taxTransLoc.TaxGroup                        =  _taxTrans.TaxGroup;
            taxTransLoc.TaxItemGroup                    =  _taxTrans.TaxItemGroup;

            if (taxTable.TaxType_IN == TaxType_IN::Excise)
            {
                taxTransLoc.ExciseRecordType            = exciseRecordType;
            }

            dimensionDefaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(taxLedgerDimension);

            if (taxParameters.ServiceTax_IN &&
                taxTable.TaxType_IN == TaxType_IN::ServiceTax)
            {
                taxTransLoc.Vendor                = taxAuthorityAddress.AccountNum;
                taxTransLoc.CustVendRegistrationNumber = TaxInformation_IN::findDefaultbyLocation(DirParty::primaryPostalAddressLocationRecId(
                                                                                                  VendTable::find(taxAuthorityAddress.AccountNum).Party)).stcRegistrationNumberTable;
                if (taxTransOffsetTrans.TaxDirection == TaxDirection::IncomingTax)
                {
                    taxTransLoc.ServiceRecoverableLedgerDimension = dimensionDefaultAccount;
                }
                else if (taxTransOffsetTrans.TaxDirection == TaxDirection::OutgoingTax)
                {
                    if (isRecoverableAccount)
                    {
                        taxTransLoc.ServiceRecoverableLedgerDimension = dimensionDefaultAccount;
                    }
                    else
                    {
                        taxTransLoc.ServicePayableLedgerDimension = dimensionDefaultAccount;
                    }
                }
            }

            if (taxTransOffsetTrans.TaxDirection == TaxDirection::IncomingTax)
            {
                if (isPayableAccount
                    && (taxTable.TaxType_IN == TaxType_IN::Excise || taxTable.TaxType_IN == TaxType_IN::VAT))
                {
                    taxTransLoc.PayableLedgerDimension  = dimensionDefaultAccount;
                }
                else
                {
                    taxTransLoc.RecoverableLedgerDimension  = dimensionDefaultAccount;
                }
            }
            else if (taxTransOffsetTrans.TaxDirection == TaxDirection::OutgoingTax)
            {
                if (isRecoverableAccount)
                {
                    taxTransLoc.RecoverableLedgerDimension  = dimensionDefaultAccount;
                }
                else
                {
                    taxTransLoc.PayableLedgerDimension  = dimensionDefaultAccount;
                }
            }

            taxTransLoc.insert();
        }
        else
        {
            this.persistOffsetTaxTrans(taxTransOffsetTrans);
        }

        return taxTransOffsetTrans.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>