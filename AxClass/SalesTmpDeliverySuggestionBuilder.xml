<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTmpDeliverySuggestionBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTmpDeliverySuggestionBuilder</c> class builds a list of suggested delivery alternatives.
/// </summary>
public class SalesTmpDeliverySuggestionBuilder
{
    private SalesLine                           salesLine;
    private LogisticsPostalAddress              postalAddress;
    private InventDimParm                       inventDimParm;
    private InventDim                           originalInventDim;
    private SalesTmpDeliverySuggestionDimFlags  allFlags;
    private SalesTmpDeliverySuggestions         potentialSuggestions;
    private EcoResProductUnitConverter          unitConverter;
    private Map                                 detailedInfoMap;
    private DlvModeId                           suggestionsDlvMode;
    private Map                                 orderChainInventTransIdsPerDataArea;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        detailedInfoMap = new Map(Types::String, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    private void initFromSalesLine(salesLine _salesLine)
    {
        salesLine = _salesLine;

        originalInventDim = salesLine.inventDim();
        postalAddress = LogisticsPostalAddress::findRecId(salesLine.DeliveryPostalAddress);

        unitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                          salesLine.InventDimId,
                                                                                          salesLine.inventTable().inventUnitId(),
                                                                                          salesLine.SalesUnit,
                                                                                          NoYes::Yes);

        suggestionsDlvMode = salesLine.DlvMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDimParm</Name>
				<Source><![CDATA[
    private void initFromInventDimParm(InventDimParm _inventDimParm)
    {
        inventDimParm = _inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPotentialSuggestions</Name>
				<Source><![CDATA[
    private void insertPotentialSuggestions(SalesTmpDeliverySuggestions _potentialSuggestions)
    {
        _potentialSuggestions.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new suggestion builder.
    /// </summary>
    /// <param name = "_salesLine">The line for which delivery suggestions will be constructed.</param>
    /// <param name = "_inventDimParm">The dimensions that can be modified.</param>
    /// <returns>An instance of suggestion builder.</returns>
    public static SalesTmpDeliverySuggestionBuilder construct(SalesLine _salesLine, InventDimParm _inventDimParm = InventDimParm::siteAndWarehouse())
    {
        SalesTmpDeliverySuggestionBuilder result = new SalesTmpDeliverySuggestionBuilder();

        result.initFromInventDimParm(_inventDimParm);
        result.initFromSalesLine(_salesLine);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detailedInfo</Name>
				<Source><![CDATA[
    public container detailedInfo(InventDim _inventDim)
    {
        str mapKey = _inventDim.mapKey();

        if (detailedInfoMap.exists(mapKey))
        {
            return detailedInfoMap.lookup(mapKey);
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSuggestions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds potential suggestions for the given dimensions.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimensions to analyze.</param>
    /// <returns>The earliest date when the ordered quantity can be delivered for that set of dimensions.</returns>
    public SalesATPDate addSuggestions(InventDim _inventDim)
    {
        InventDim inventDim = InventDim::findOrCreate(_inventDim);

        SalesLine localSalesLine;
        localSalesLine.data(salesLine);
        localSalesLine.clearInventReference(); // Clear invent references since ATP calculations should not be based on an existing intercompany chain
        localSalesLine.clearSourcingFields();
        localSalesLine.InventDimId = inventDim.inventDimId;

        Debug::assert(appl.ttsLevel() == 0);

        SalesTmpATP                 tempData;
        SalesCalcAvailableDlvDates  availableDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(localSalesLine);
        SalesATPCalculation         salesATPCalculation;

        switch (salesLine.DeliveryDateControlType)
        {
            case SalesDeliveryDateControlType::ATP:
            case SalesDeliveryDateControlType::ATPPlusIssueMargin:
                salesATPCalculation = SalesATPCalculation::newSalesCalculation(salesLine.ItemId, inventDim.inventDimId, salesLine.CustAccount);
                tempData.setTmpData(salesATPCalculation.calcSalesTmpATP(salesLine.InventTransId, salesLine.RemainInventPhysical));
                break;
            case SalesDeliveryDateControlType::SalesLeadTime:
                tempData.ATPQty = salesLine.RemainInventPhysical;
                tempData.ATPDate = availableDates.effectiveOrderDate() + availableDates.salesLeadTime();
                tempData.doInsert();
                break;
            case SalesDeliveryDateControlType::CTP:
                if (MpsDeliveryDateControlTypeCTPHelper::isDeliveryDateControlTypeClassicCTP(salesLine.DeliveryDateControlType))
                {
                    ttsbegin;
                    SalesLineDeliveryDetailsHelper::simulateExplosion(localSalesLine, originalInventDim, inventDim);

                    tempData.ATPQty = salesLine.RemainInventPhysical;
                    tempData.ATPDate = availableDates.effectiveOrderDate() + availableDates.salesLeadTime();
                    tempData.doInsert();

                    ReqTrans reqTrans;
                    InventTransOrigin inventTransOrigin;

                    select forupdate firstonly reqTrans
                    exists join inventTransOrigin
                        where inventTransOrigin.InventTransId == localSalesLine.InventTransId
                           && inventTransOrigin.RecId == reqTrans.InventTransOrigin;

                    container treeInfo = ReqTransExplode::packRunReqTrans(reqTrans, ReqExplodeType::Down);
                    detailedInfoMap.insert(inventDim.mapKey(), treeInfo);

                    ttsabort;
                }
                break;
        }

        SalesATPQty             maxQty = 0;
        InventLocationId        shippingInventLocationId = inventDim.InventLocationId ? inventDim.InventLocationId : InventFallbackWarehouse::find(inventDim.InventSiteId).InventLocationId;
        CustVendTransportDays   transportTime = CustVendTransportPointLine::defaultTransportDays(suggestionsDlvMode,
            shippingInventLocationId,
            postalAddress.CountryRegionId,
            postalAddress.State,
            postalAddress.County,
            postalAddress.ZipCode);

        // For SalesLeadTime and CTP only a single suggestion will be inserted.
        // For ATP and ATPPlusIssueMargin we might add several suggestions for partial quantities.
        while select tempData order by tempData.ATPDate
        {
            SalesATPQty availableQty = min(salesLine.RemainInventPhysical, tempData.ATPQty);

            if (availableQty > maxQty)
            {
                maxQty = availableQty;

                [potentialSuggestions.ShipDate, potentialSuggestions.ReceiptDate] = availableDates.adjustDatesForCalendar(tempData.ATPDate, transportTime);

                potentialSuggestions.initFromSalesLine(salesLine);
                potentialSuggestions.initFromSourcingSpecification(IntercompanySourcingSpecification::currentCompanyInventorySpecification());
                potentialSuggestions.ShipQty = unitConverter.convertValue(availableQty);
                this.initPotentialSuggestionFromInventDim(potentialSuggestions, inventDim);
                potentialSuggestions.TransportDays = transportTime;
                potentialSuggestions.DeliveryModeId = suggestionsDlvMode;
                this.insertPotentialSuggestions(potentialSuggestions);
            }
        }

        SalesATPDate earliestShipDate;

        // For ATP and ATPPlusIssueMargin the logic above might not have inserted any suggestions.
        // We need to make sure that at least the day after the time fence is added.
        if (SalesLine.DeliveryDateControlType == SalesDeliveryDateControlType::ATP ||
            SalesLine.DeliveryDateControlType == SalesDeliveryDateControlType::ATPPlusIssueMargin)
        {
            date earliestReceiptDate;

            earliestShipDate = availableDates.effectiveOrderDate() + salesATPCalculation.atpLeadTimeFromSimulation(salesLine.RemainInventPhysical, availableDates.effectiveOrderDate(), tempData);
            [earliestShipDate, earliestReceiptDate] = availableDates.adjustDatesForCalendar(earliestShipDate, transportTime);

            if (maxQty < salesLine.RemainInventPhysical)
            {
                potentialSuggestions.initFromSalesLine(salesLine);
                potentialSuggestions.initFromSourcingSpecification(IntercompanySourcingSpecification::currentCompanyInventorySpecification());
                potentialSuggestions.ShipDate = earliestShipDate;
                potentialSuggestions.ReceiptDate = earliestReceiptDate;
                potentialSuggestions.TransportDays = transportTime;
                potentialSuggestions.DeliveryModeId = suggestionsDlvMode;
                this.initPotentialSuggestionFromInventDim(potentialSuggestions, inventDim);
                this.insertPotentialSuggestions(potentialSuggestions);
            }
        }
        else
        {
            earliestShipDate = potentialSuggestions.ShipDate;
        }

        return earliestShipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDeliveryAlternativesATPProcurement</Name>
				<Source><![CDATA[
    private void populateDeliveryAlternativesATPProcurement(VendAccount _sourcingVendorAccountNumber, SalesTmpDeliverySuggestionFilter _filter, InventDim _inventDimCriteria)
    {
        SalesLine localSalesLine = salesLine.data();
        localSalesLine.clearInventReference(); // Clear invent references since ATP calculations should not be based on an existing intercompany chain
        localSalesLine.clearSourcingFields();

        // In case of direct delivery the mode of delivery should not be copied to the OSO line
        if (_filter.ProcurementDeliveryType == TradeLineDlvType::None)
        {
            localSalesLine.DlvMode = suggestionsDlvMode;
        }

        localSalesLine.initFromDeliveryType(_filter.ProcurementDeliveryType);
        localSalesLine.initFromSourcingVendorAccountNumber(_sourcingVendorAccountNumber);

        this.addProcurementSuggestionATP(localSalesLine, _inventDimCriteria.inventDimId);

        if (localSalesLine.SourcingCompanyId != localSalesLine.DataAreaId && _filter.AlternativeProductVariantsDimParm.anyProductDimensionFlagSet())
        {
            changecompany (localSalesLine.SourcingCompanyId)
            {
                InventDim inventDimFilter;
                inventDimFilter.InventSiteId = localSalesLine.SourcingInventSiteId;
                inventDimFilter.InventLocationId = localSalesLine.SourcingInventLocationId;

                InventDimParm lockedDimensions = inventDimFilter.toDimParm();
                lockedDimensions.ItemIdFlag = true;

                InventDimParm groupByDimensions = InventDimParm::allProductDim();

                Query inventSumQuery = InventSum::newQuery(null, salesLine.intercompanySourcingCompanyItemId(), inventDimFilter, lockedDimensions, groupByDimensions);
                QueryBuildDataSource dsInventSum = inventSumQuery.dataSourceTable(tableNum(InventSum));
                dsInventSum.addRange(fieldNum(InventSum, PhysicalInvent)).value('>0');
                dsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
                QueryBuildDataSource dsInventDim = inventSumQuery.dataSourceTable(tableNum(InventDim));

                QueryRun inventSumQueryRun = new QueryRun(inventSumQuery);
                while (inventSumQueryRun.next())
                {
                    InventDim inventDimOnHand = inventSumQueryRun.get(tableNum(InventDim));

                    if (!InventDim::isInventDimEqual(_inventDimCriteria, inventDimOnHand, InventDim::dimProductDimFieldList())) // suggestion for the current product variant has already been generated above
                    {
                        changecompany (localSalesLine.DataAreaId)
                        {
                            InventDim inventDimSuggestion = _inventDimCriteria.data();
                            inventDimSuggestion.initFromInventDim(inventDimOnHand, InventDim::dimProductDimFieldList());
                            inventDimSuggestion = InventDim::findOrCreate(inventDimSuggestion);
                            this.addProcurementSuggestionATP(localSalesLine, inventDimSuggestion.InventDimId);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderChainInventTransIdsPerDataArea</Name>
				<Source><![CDATA[
    private Map orderChainInventTransIdsPerDataArea()
    {
        if (!orderChainInventTransIdsPerDataArea)
        {
            orderChainInventTransIdsPerDataArea = SalesTmpDeliverySuggestionBuilder::populateOrderChainInventTransIdsPerDataArea(salesLine);
        }

        return orderChainInventTransIdsPerDataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOrderChainInventTransIdsPerDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a map of intercompany order chain order Lot IDs per data area.
    /// </summary>
    /// <param name = "_salesLine">The original sales line record.</param>
    /// <returns>A map of (Key:DataAreaId, Value:[SalesLineInventTransId, DerivedPurchLineInventTransId])
    /// pairs.</returns>
    /// <remarks>
    /// The method only returns transactions from the current company and the sourcing company
    /// since the ATP algorithm does not support nested chains.
    /// </remarks>
    public static Map populateOrderChainInventTransIdsPerDataArea(SalesLine _salesLine)
    {
        Map orderChainInventTransIdsPerDataArea = new Map(Types::String, Types::Container);

        PurchLine sourcingPurchLine = _salesLine.sourcingPurchLine();

        orderChainInventTransIdsPerDataArea.insert(_salesLine.company(), [_salesLine.InventTransId, sourcingPurchLine.InventTransId]);

        if (sourcingPurchLine)
        {
            SalesLine intercompanySalesLine = sourcingPurchLine.interCompanySalesLine();
            if (intercompanySalesLine)
            {
                changecompany (intercompanySalesLine.DataAreaId)
                {
                    PurchLine intercompanySourcingPurchLine = intercompanySalesLine.sourcingPurchLine();
                    orderChainInventTransIdsPerDataArea.insert(intercompanySalesLine.company(), [intercompanySalesLine.InventTransId, intercompanySourcingPurchLine.InventTransId]);
                }
            }
        }

        return orderChainInventTransIdsPerDataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProcurementSuggestionATP</Name>
				<Source><![CDATA[
    private void addProcurementSuggestionATP(SalesLine _salesLine, InventDimId _inventDimId = _salesLine.InventDimId)
    {
        SalesLine localSalesLine = _salesLine.data();
        localSalesLine.InventDimId = _inventDimId;

        SalesCalcAvailableDlvDates_SalesLine availableDates = SalesCalcAvailableDlvDates_SalesLine::newSalesLine(localSalesLine);
        availableDates.parmReplacedIntercompanyChainInventTransIdsPerDataArea(this.orderChainInventTransIdsPerDataArea());
        potentialSuggestions.initFromSalesLine(localSalesLine);
        [potentialSuggestions.ShipDate, potentialSuggestions.ReceiptDate] = availableDates.calcEarliestShipReceiptDates();
        potentialSuggestions.TransportDays = availableDates.transportDays();
        this.insertPotentialSuggestions(potentialSuggestions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPotentialSuggestionFromInventDim</Name>
				<Source><![CDATA[
    private void initPotentialSuggestionFromInventDim(SalesTmpDeliverySuggestions _suggestion, InventDim _inventDim)
    {
        potentialSuggestions.InventDimId = _inventDim.InventDimId;
        potentialSuggestions.SourcingInventSiteId = _inventDim.InventSiteId;
        potentialSuggestions.SourcingInventLocationId = _inventDim.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDeliveryAlternativesBasedOnDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>SalesTmpDeliverySuggestions</c> temporary table with
    /// delivery alternative suggestions for the specified sales order line with delivery date control type .
    /// </summary>
    /// <param name = "_filter">The filter for the suggested delivery alternatives.</param>
    /// <returns>true if the delivery alternatives for the sales line is populated; otherwise, false.</returns>
    public void populateDeliveryAlternativesBasedOnDeliveryDateControlType(SalesTmpDeliverySuggestionFilter _filter)
    {
        switch (salesLine.DeliveryDateControlType)
        {
            case SalesDeliveryDateControlType::ATP:
            case SalesDeliveryDateControlType::ATPPlusIssueMargin:
            case SalesDeliveryDateControlType::SalesLeadTime:
                this.populateDeliveryAlternativesATP(_filter);
                break;

            case SalesDeliveryDateControlType::CTP:
                if (MpsDeliveryDateControlTypeCTPHelper::isDeliveryDateControlTypeClassicCTP(salesLine.DeliveryDateControlType))
                {
                    this.populateDeliveryAlternativesCTP();
                }
                break;

            case SalesDeliveryDateControlType::None:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDeliveryAlternatives</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>SalesTmpDeliverySuggestions</c> temporary table with
    /// delivery alternative suggestions for the specified sales order line.
    /// </summary>
    /// <param name = "_filter">The filter for the suggested delivery alternatives.</param>
    /// <returns>The <c>SalesTmpDeliverySuggestions</c> temporary table with delivery alternative suggestions</returns>
    public SalesTmpDeliverySuggestions populateDeliveryAlternatives(SalesTmpDeliverySuggestionFilter _filter)
    {
        suggestionsDlvMode = _filter.DeliveryModeId;

        this.populateDeliveryAlternativesBasedOnDeliveryDateControlType(_filter);

        if (!_filter.IncludePartialQuantity)
        {
            delete_from potentialSuggestions
                where potentialSuggestions.ShipQty < salesLine.RemainSalesPhysical;
        }

        if (!_filter.IncludeLaterDates)
        {
            delete_from potentialSuggestions
                where potentialSuggestions.ReceiptDate > salesLine.ReceiptDateRequested;
        }

        return potentialSuggestions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDeliveryAlternativesATP</Name>
				<Source><![CDATA[
    private void populateDeliveryAlternativesATP(SalesTmpDeliverySuggestionFilter _filter)
    {
        InventDimParm parmGroupBy = InventDimParm::orParms(InventDimParm::siteAndWarehouse(), InventDimParm::allProductDim());
        inventDimParm lockedDimensions = _filter.lockedDimensions(salesLine);
        lockedDimensions.ItemIdFlag = true;
        InventDim inventDimCriteria = salesLine.inventDim();
        Query inventSumQuery = InventSum::newQuery(null, salesLine.ItemId, inventDimCriteria, lockedDimensions, parmGroupBy);

        QueryBuildDataSource dsInventDim = inventSumQuery.dataSourceTable(tableNum(InventDim));

        var queryProvider = SalesLineDeliveryDetailsInventDimQueryProvider::newFromDeliveryDateControlType(inventSumQuery, dsInventDim.name(), salesLine.DeliveryDateControlType);
        queryProvider.applyInventDimFiltersForDeliveryAlternatives(salesLine.inventTable(), parmGroupBy, salesLine);
        QueryRun inventSumQueryRun = new QueryRun(inventSumQuery);
        while (inventSumQueryRun.next())
        {
            InventDim inventDim = inventSumQueryRun.get(tableNum(InventDim));
            this.addSuggestions(inventDim);
        }

        if (_filter.IncludeProcurementAlternatives)
        {
            MCRInventTable mcrInventTable = salesLine.mcrInventTable();

            // If the item has a direct delivery warehouse defined, then we need to account for site/warehouse defaulting.
            if (mcrInventTable.DefaultDropShipmentWarehouse)
            {
                boolean isDirectDelivery = _filter.ProcurementDeliveryType == TradeLineDlvType::DropShip;
                inventDimCriteria.InventLocationId = mcrInventTable.getDefaultWarehouse(isDirectDelivery);
                inventDimCriteria.InventSiteId = InventLocation::find(inventDimCriteria.InventLocationId).InventSiteId;
                inventDimCriteria  = InventDim::findOrCreate(inventDimCriteria);
            }

            var includedVendor = SalesTmpDefaultAndApprovedVendorForItem::populateData(salesLine.ItemId, inventDimCriteria.InventDimId);

            while select includedVendor
            {
				this.populateDeliveryAlternativesATPProcurement(includedVendor.VendAccount, _filter, inventDimCriteria);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDeliveryAlternativesCTP</Name>
				<Source><![CDATA[
    private void populateDeliveryAlternativesCTP()
    {
        InventDimParm parmGroupBy = InventDimParm::siteAndWarehouse();

        Map alternativeInventLocations = new Map(Types::String, Types::Record);
        SalesTmpDeliverySuggestionBuilder::ensureSalesLineIsExploded(salesLine);
        SalesTmpDeliverySuggestionBuilder::addWarehousesWithActiveBOMVersions(salesLine, alternativeInventLocations);
        SalesTmpDeliverySuggestionBuilder::addWarehousesWithAvailableOnHand(salesLine, alternativeInventLocations);
        SalesTmpDeliverySuggestionBuilder::addDefaultWarehouse(salesLine, alternativeInventLocations);
        SalesTmpDeliverySuggestionBuilder::addCurrentWarehouse(salesLine, alternativeInventLocations);

        MapEnumerator inventLocationsEnumerator = alternativeInventLocations.getEnumerator();

        while (inventLocationsEnumerator.moveNext())
        {
            InventLocation inventLocation = inventLocationsEnumerator.currentValue();

            InventDim inventDimSuggestionCTP;
            inventDimSuggestionCTP.InventSiteId = inventLocation.InventSiteId;
            inventDimSuggestionCTP.InventLocationId = inventLocation.InventLocationId;
            inventDimSuggestionCTP.initFromInventDim(salesLine.inventDim(), InventDim::dimProductDimFieldList());
            inventDimSuggestionCTP = InventDim::findOrCreate(inventDimSuggestionCTP);

            this.addSuggestions(inventDimSuggestionCTP);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWarehousesWithActiveBOMVersions</Name>
				<Source><![CDATA[
    private static void addWarehousesWithActiveBOMVersions(SalesLine _salesLine, Map _alternativeInventLocations)
    {
        InventLocation inventLocation;
        BOMVersion bomVersion;
        InventDim bomVersionInventDim;

        while select inventLocation
            where inventLocation.InventLocationType != InventLocationType::Quarantine
                && inventLocation.InventLocationType != InventLocationType::Transit
            exists join bomVersionInventDim
                where bomVersionInventDim.InventSiteId == inventLocation.InventSiteId
            exists join bomVersion
                where bomVersion.InventDimId == bomVersionInventDim.inventDimId
                    && bomVersion.ItemId == _salesLine.ItemId
                    && bomVersion.Active
        {
            _alternativeInventLocations.insert(inventLocation.InventLocationId, inventLocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWarehousesWithAvailableOnHand</Name>
				<Source><![CDATA[
    private static void addWarehousesWithAvailableOnHand(SalesLine _salesLine, Map _alternativeInventLocations)
    {
        InventLocation inventLocation;
        InventSum inventSum;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select inventLocation
            where inventLocation.InventLocationType != InventLocationType::Quarantine
                && inventLocation.InventLocationType != InventLocationType::Transit
            exists join inventSum
                where inventSum.InventLocationId == inventLocation.InventLocationId
                    && inventSum.ItemId == _salesLine.ItemId
                    && inventSum.AvailOrdered > 0
                    && inventSum.ClosedQty == NoYes::No
            {
                InventDim inventDimOnHand;
                inventDimOnHand.InventSiteId = inventLocation.InventSiteId;
                inventDimOnHand.InventLocationId = inventLocation.InventLocationId;
                inventDimOnHand.initFromInventDim(_salesLine.inventDim(), InventDim::dimProductDimFieldList());

                if (InventOnhandQty::newParameters(_salesLine.ItemId, inventDimOnHand).availOrdered() > 0)
                {
                    _alternativeInventLocations.insert(inventLocation.InventLocationId, inventLocation);
                }
            }
        }
        else
        {
            InventDim inventSumInventDim;

            while select inventLocation
            where inventLocation.InventLocationType != InventLocationType::Quarantine
                && inventLocation.InventLocationType != InventLocationType::Transit
            exists join inventSumInventDim
                where inventSumInventDim.InventLocationId == inventLocation.InventLocationId
            exists join inventSum
                where inventSum.InventDimId == inventSumInventDim.inventDimId
                    && inventSum.ItemId == _salesLine.ItemId
                    && inventSum.AvailOrdered > 0
                    && inventSum.ClosedQty == NoYes::No
            {
                InventDim inventDimOnHand;
                inventDimOnHand.InventSiteId = inventLocation.InventSiteId;
                inventDimOnHand.InventLocationId = inventLocation.InventLocationId;
                inventDimOnHand.initFromInventDim(_salesLine.inventDim(), InventDim::dimProductDimFieldList());

                if (InventOnhandQty::newParameters(_salesLine.ItemId, inventDimOnHand).availOrdered() > 0)
                {
                    _alternativeInventLocations.insert(inventLocation.InventLocationId, inventLocation);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDefaultWarehouse</Name>
				<Source><![CDATA[
    private static void addDefaultWarehouse(SalesLine _salesLine, Map _alternativeInventLocations)
    {
        InventLocation defaultInventLocation = InventItemSalesSetup::defaultInventLocation(_salesLine.ItemId);

        if (defaultInventLocation)
        {
            _alternativeInventLocations.insert(defaultInventLocation.InventLocationId, defaultInventLocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCurrentWarehouse</Name>
				<Source><![CDATA[
    private static void addCurrentWarehouse(SalesLine _salesLine, Map _alternativeInventLocations)
    {
        InventDim inventDim = _salesLine.inventDim();

        if (inventDim.InventLocationId)
        {
            _alternativeInventLocations.insert(inventDim.InventLocationId, inventDim.inventLocation());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureSalesLineIsExploded</Name>
				<Source><![CDATA[
    private static void ensureSalesLineIsExploded(SalesLine _salesLine)
    {
        if (!_salesLine.reqTrans())
        {
            ReqCalcExplode reqCalcExplode = ReqCalcExplodeSales::newSalesIdPrompt(_salesLine.SalesId, _salesLine.InventTransId);
            reqCalcExplode.parmMultiUserConcurrencyAllowed(true);
            reqCalcExplode.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>