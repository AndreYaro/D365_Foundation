<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendEditInvoiceTotalsPartForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class supports calculating data for display by <c>\Forms\VendEditInvoiceTotalsPart</c>.
/// </summary>
class VendEditInvoiceTotalsPartForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDisplayFieldValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates various values for display by <c>\Forms\VendEditInvoiceTotalsPart</c>.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> to calculate the values for.
    /// </param>
    /// <param name="_specQty">
    /// The value used to determine where there invoice lines will be defaulted from.
    /// </param>
    /// <param name="_sumBy">
    /// The value used to sum multiple invoices by.
    /// </param>
    /// <param name="_parmId">
    /// The <c>ParmID</c> used to group invoices.
    /// </param>
    /// <param name="_sumPurchId">
    /// The purchase id to summarize.
    /// </param>
    /// <param name="_documentStatus">
    /// The document type we are requesting totals to be calculated for.
    /// </param>
    /// <returns>
    /// A container with various document totals.
    /// </returns>
    public static container getDisplayFieldValues(
        VendInvoiceInfoTable _vendInvoiceInfoTable,
        PurchUpdate _specQty,
        ParmId _parmId,
        PurchId _sumPurchId,
        DocumentStatus _documentStatus)
    {
        container displayFields;
        PurchTotals purchTotals = PurchTotals::newParmTable(_vendInvoiceInfoTable, _specQty, _parmId, _sumPurchId, _documentStatus);

        if (_vendInvoiceInfoTable.InvoiceType == PurchInvoiceType::VendorAdvance)
        {
            purchTotals.parmKeepEndDisc(true);
        }

        purchTotals.calc();

        displayFields = purchTotals.displayFields([PurchTotals::posCashDisc(),
            PurchTotals::posEndDisc(),
            PurchTotals::posCurrency(),
            PurchTotals::posBalance(),
            PurchTotals::posMarkup(),
            PurchTotals::posTaxTotal(),
            PurchTotals::posTotalAmount(),
            PurchTotals::posPreAppliedAmount()]);

        return [conPeek(displayFields, PurchTotals::posCurrency()),
            conPeek(displayFields, PurchTotals::posBalance()),
            conPeek(displayFields, PurchTotals::posMarkup()),
            conPeek(displayFields, PurchTotals::posTaxTotal()),
            conPeek(displayFields, PurchTotals::posTotalAmount()),
            conPeek(displayFields, PurchTotals::posCashDisc()),
            conPeek(displayFields, PurchTotals::posEndDisc()),
            conPeek(displayFields, PurchTotals::posPreAppliedAmount())];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>