<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetDimensionsListPanel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetDimensionsListPanel</c> class supports a list panel for selecting dimension attributes
///    for a budget.
/// </summary>
public class BudgetDimensionsListPanel extends SysListPanel
{
    Set budgetDimensions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>BudgetPrimaryLedgerDimensionAttribute</c> record for the current ledger with the
    ///    specified dimension attribute.
    /// </summary>
    /// <param name="data">
    ///    The item that was added to the list of budget-enabled dimension attributes.
    /// </param>
    public void addData(container data)
    {
        int i = 0;

        for (i = conlen(data); i; i--)
        {
            budgetDimensions.add(conPeek(data, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the help text for the lists.
    /// </summary>
    public void build()
    {
        super();

        // Set help text for each control.
        viewBuildSelected.helpText("@SYS315312");
        viewBuildAvailable.helpText("@SYS315311");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the items for the left and right lists of the list panel.
    /// </summary>
    /// <returns>
    ///    A container with the items to add to both the left and right lists of the list panel.
    /// </returns>
    public container getData()
    {
        List                list;
        ListEnumerator      listEnumerator;

        container           selectedData, availableData;
        RecId               recId;
        Name                dimensionName;

        this.initializeBudgetDimensionsSet();

        // Populate the list of dimensions that are currently selected for budget.
        list = BudgetPrimaryLedgerDimensionAttribute::budgetDimensionsList();

        listEnumerator = list.getEnumerator();

        while (listEnumerator.moveNext())
        {
            [recId, dimensionName] = listEnumerator.current();
            selectedData += [[recId, dimensionName]];
            budgetDimensions.add(recId);
        }

        // Populate the list of dimensions that are currently not selected for budget.
        list = BudgetPrimaryLedgerDimensionAttribute::notBudgetDimensionsList();

        listEnumerator = list.getEnumerator();

        while (listEnumerator.moveNext())
        {
            [recId, dimensionName] = listEnumerator.current();
            availableData += [[recId, dimensionName]];
        }

        return [availableData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the <c>BudgetPrimaryLedgerDimensionAttribute</c> record for the current ledger with the
    ///    specified dimension attribute.
    /// </summary>
    /// <param name="data">
    ///    The item that was removed from the list of budget-enabled dimension attributes.
    /// </param>
    public void removeData(container data)
    {
        int i;

        for (i = conlen(data); i; i--)
        {
            budgetDimensions.remove(conPeek(data, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected item should be able to be added or removed from the list.
    /// </summary>
    /// <param name="data">
    ///    The selected item in the panel list.
    /// </param>
    /// <param name="addRemove">
    ///    A <c>AddRemove</c> enumeration value that indicates whether the selected item is being added or
    ///    removed.
    /// </param>
    /// <returns>
    ///    true if the selected item can be added or removed; otherwise, false.
    /// </returns>
    public boolean validate(anytype data, AddRemove addRemove)
    {
        boolean ret;
        RecId dimAttributeRecId;
        BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;

        ret = super(data, addRemove);

        if (ret && (addRemove == AddRemove::Remove))
        {
            dimAttributeRecId = data;

            select firstonly budgetPrimaryLedgerDimensionAttribute
                where budgetPrimaryLedgerDimensionAttribute.PrimaryLedger == Ledger::current() &&
                    budgetPrimaryLedgerDimensionAttribute.DimensionAttribute == dimAttributeRecId;

            ret = budgetPrimaryLedgerDimensionAttribute.validateDelete();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the selected budget dimensions.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>Set</c> class that contains the selected budget dimensions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set getBudgetDimensions()
    {
        return budgetDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBudgetDimensionsSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the set of selected budget dimensions.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initializeBudgetDimensionsSet()
    {
        budgetDimensions = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        this.initializeBudgetDimensionsSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BudgetDimensionsListPanel construct()
    {
        return new BudgetDimensionsListPanel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>BudgetDimensionsListPanel</c> class.
    /// </summary>
    /// <param name="_formRun">
    ///    The form that will contain the list panel controls.
    /// </param>
    /// <param name="_parentId">
    ///    The form control that will contain list panel controls.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetDimensionsListPanel</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BudgetDimensionsListPanel newForm(FormRun _formRun, int _parentId)
    {
        BudgetDimensionsListPanel listPanel;
        BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;

        listPanel = BudgetDimensionsListPanel::construct();
        listPanel.parmOnlyViewAccess(FormSecurity::getMenuItemAccessRight(_formRun) <= AccessRight::View);
        listPanel.parmFormRun(_formRun);
        listPanel.parmParentId(_parentId);
        listPanel.parmCaptionSelected("@SYS314056");
        listPanel.parmCaptionAvailable("@SYS314055");

        listPanel.parmHasAddAllButton(false);
        listPanel.parmHasRemoveAllButton(false);

        listPanel.build();

        return listPanel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>