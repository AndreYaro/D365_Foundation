<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdParmSchedulingSort</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdParmSchedulingSort
{
    prodSchedulingSortType  sortType;

    ParmId              parmId;
    RecordSortedList    cacheList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertSort</Name>
				<Source><![CDATA[
    protected void insertSort()
    {
        switch (sortType)
        {
            case prodSchedulingSortType::LevelIncDlvDate:
                this.insertSortLevel(1);
                break;
            case prodSchedulingSortType::LevelDecDlvDate:
                this.insertSortLevel(-1);
                break;
            case prodSchedulingSortType::StatusStartDate:
                this.insertSortProdStatus();
                break;
            case prodSchedulingSortType::PrioDlvDate:
                this.insertSortPrio();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSortLevel</Name>
				<Source><![CDATA[
    protected void insertSortLevel(Integer direction)
    {
        ProdParmScheduling  prodParmScheduling;

        cacheList.sortOrder(fieldnum(ProdParmScheduling,TmpSortInteger),
                            fieldnum(ProdParmScheduling,TmpSortDate),
                            fieldnum(ProdParmScheduling,TmpSortTime),
                            fieldnum(ProdParmScheduling,RecId));

        while select forupdate prodParmScheduling
            index hint NumLineNumIdx
            where prodParmScheduling.ParmId == parmId
        {
            ProdTable prodTable = ProdTable::find(prodParmScheduling.ProdId);
            prodParmScheduling.TmpSortInteger = direction * InventTable::find(prodTable.ItemId).bomLevel;
            prodParmScheduling.TmpSortDate    = prodTable.DlvDate;
            prodParmScheduling.TmpSortTime    = prodTable.DlvTime;

            cacheList.ins(prodParmScheduling);
            prodParmScheduling.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSortPrio</Name>
				<Source><![CDATA[
    protected void insertSortPrio()
    {
        ProdParmScheduling  prodParmScheduling;

        cacheList.sortOrder(fieldnum(ProdParmScheduling,TmpSortInteger),
                            fieldnum(ProdParmScheduling,TmpSortDate),
                            fieldnum(ProdParmScheduling,TmpSortTime),
                            fieldnum(ProdParmScheduling,RecId));

        while select forupdate prodParmScheduling
            index hint NumLineNumIdx
            where prodParmScheduling.ParmId == parmId
        {
            ProdTable prodTable = ProdTable::find(prodParmScheduling.ProdId);
            prodParmScheduling.TmpSortInteger = -prodTable.ProdPrio;
            prodParmScheduling.TmpSortDate    = prodTable.DlvDate;
            prodParmScheduling.TmpSortTime    = prodTable.DlvTime;

            cacheList.ins(prodParmScheduling);
            prodParmScheduling.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSortProdStatus</Name>
				<Source><![CDATA[
    protected void insertSortProdStatus()
    {
        ProdParmScheduling  prodParmScheduling;

        cacheList.sortOrder(fieldnum(ProdParmScheduling,TmpSortInteger),
                            fieldnum(ProdParmScheduling,TmpSortDate),
                            fieldnum(ProdParmScheduling,TmpSortTime),
                            fieldnum(ProdParmScheduling,RecId));

        while select forupdate prodParmScheduling
            index hint NumLineNumIdx
            where prodParmScheduling.ParmId == parmId
        {
            ProdTable prodTable = ProdTable::find(prodParmScheduling.ProdId);
            prodParmScheduling.TmpSortInteger = -prodTable.ProdStatus;
            prodParmScheduling.TmpSortDate    = prodTable.SchedStart;
            prodParmScheduling.TmpSortTime    = prodTable.SchedFromTime;

            cacheList.ins(prodParmScheduling);
            prodParmScheduling.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        cacheList = new RecordSortedList(tablenum(ProdParmScheduling));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmId</Name>
				<Source><![CDATA[
    public ParmId parmParmId(ParmId _parmId = parmId)
    {
        parmId = _parmId;
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortType</Name>
				<Source><![CDATA[
    public ProdSchedulingSortType parmSortType(ProdSchedulingSortType _sortType = sortType)
    {
        sortType = _sortType;
        return sortType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Do the sorting of records based on the parameters set in this instance.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.insertSort();
            this.updateProdParmScheduling();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdParmScheduling</Name>
				<Source><![CDATA[
    protected void updateProdParmScheduling()
    {
        ProdParmScheduling  prodParmScheduling;
        LineNum             lineNum;

        if (cacheList.first(prodParmScheduling))
        {
            do
            {
                lineNum++;
                prodParmScheduling.LineNum = lineNum;
                prodParmScheduling.insert();
            } while (cacheList.next(prodParmScheduling));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSorting</Name>
				<Source><![CDATA[
    public static void runSorting(ParmId _parmId, ProdSchedulingSortType _sortType)
    {
        ProdParmSchedulingSort prodParmSchedulingSort = new ProdParmSchedulingSort();
        prodParmSchedulingSort.parmParmId(_parmId);
        prodParmSchedulingSort.parmSortType(_sortType);
        prodParmSchedulingSort.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
