<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentLine_BR_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class FiscalDocumentLine_BR_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAdditionalInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves additional information texts associated with this fiscal document line.
    /// </summary>
    /// <returns>
    ///     An instance of <c>FiscalDocumentTextListParmData_BR</c> where each entry represents a diferent additional information text retrieved from this fiscal document line.
    /// </returns>
    /// <remarks>
    ///     This method also eliminates any duplicates that might exists among the retrieved texts.
    /// </remarks>
    public static FiscalDocumentTextListParmData_BR getAdditionalInformation(FiscalDocumentLine_BR _fiscalDocLine)
    {
        DocuRef                             docuRef;
        DocuRefExt_BR                       docuRefExt;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        FiscalDocumentTextListParmData_BR   fiscalDocumentTextListParmData = FiscalDocumentTextListParmData_BR::construct();

        while select Notes from docuRef
            where docuRef.RefTableId == _fiscalDocLine.TableId
               && docuRef.RefRecId == _fiscalDocLine.RecId
               && docuRef.RefCompanyId == _fiscalDocLine.dataAreaId
               && docuRef.Restriction == DocuRestriction::External
            exists join docuRefExt
                where docuRefExt.DocuRef == docuRef.RecId
                   && docuRefExt.FiscalInformation == NoYes::No
        {
            fiscalDocumentTextParmData = FiscalDocumentTextParmData_BR::construct();
            fiscalDocumentTextParmData.parmFiscalInformation(docuRefExt.FiscalInformation);
            fiscalDocumentTextParmData.parmName(docuRef.Name);
            fiscalDocumentTextParmData.parmNotes(docuRef.Notes);
            fiscalDocumentTextParmData.parmRestriction(docuRef.Restriction);
            fiscalDocumentTextParmData.parmTextID(docuRefExt.TextID);
            fiscalDocumentTextParmData.parmType(docuRefExt.Type);

            fiscalDocumentTextListParmData.add(fiscalDocumentTextParmData);
        }

        return fiscalDocumentTextListParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdditionalInformationAsString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the contatenation of the fiscal document texts associated with this fiscal document line.
    /// </summary>
    /// <param name="_separator">
    ///     A string to be used as separator for each text.
    /// </param>
    /// <returns>
    ///     A string containing the fiscal document texts contatenated and separated from each other by a space character.
    /// </returns>
    public static str getAdditionalInformationAsString(FiscalDocumentLine_BR _fiscalDocLine, str _separator = ' ')
    {
        FiscalDocumentTextListParmData_BR fiscalDocumentTexts;

        fiscalDocumentTexts = _fiscalDocLine.getAdditionalInformation();

        return fiscalDocumentTexts.getAlltextsAsString(_separator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalRecord</Name>
				<Source><![CDATA[
    private static Common getFiscalRecord(TableID _tableID, RecID _recId)
    {
        Common common = new DictTable(_tableId).makeRecord();

        select firstonly common
            where Common.recId == _recId;

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeRecordMethod</Name>
				<Source><![CDATA[
    private static Common executeRecordMethod(SysMethodName _methodName, Common _record)
    {
        Common ret;
        DictTable dictTable = new DictTable(_record.TableId);

        if (dictTable && Global::tableHasInstanceMethod(dictTable, _methodName))
        {
            ret = dictTable.callObject(_methodName, _record);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinancialDimension</Name>
				<Source><![CDATA[
    public static RecId updateFinancialDimension(FiscalDocumentLine_BR _fiscaldocumentLine, FiscalDocument_BR _fiscalDocument)
    {
        RecId ret;

        switch (_fiscalDocument.RefTableId)
        {
            case tableNum(VendInvoiceJour) :
                ret = FiscalDocParmDataCreatorVendInvoice_BR::getFinancialDimension(
                    FiscalDocumentLine_BR_Extension::getFiscalRecord(_fiscalDocument.RefTableId, _fiscaldocumentLine.RefRecId));
                break;

            case tableNum(CustInvoiceJour) :
                ret = FiscalDocParmDataCreatorCustInvoice_BR::getFinancialDimension(
                    FiscalDocumentLine_BR_Extension::getFiscalRecord(_fiscalDocument.RefTableId, _fiscaldocumentLine.RefRecId));
                break;

            case tableNum(SalesComplementaryInvoiceHeader) :
                ret = FiscalDocParmDataCreatorSalesComplInv::getFinancialDimension(
                    FiscalDocumentLine_BR_Extension::getFiscalRecord(_fiscalDocument.RefTableId, _fiscaldocumentLine.RefRecId));
                break;

            case tableNum(PurchComplementaryInvoiceHeader) :
                ret = FiscalDocParmDataCreatorPurchComplInv::getFinancialDimension(
                    FiscalDocumentLine_BR_Extension::getFiscalRecord(_fiscalDocument.RefTableId, _fiscaldocumentLine.RefRecId));
                break;

            case tableNum(InventTransferJour) :
                ret = FiscalDocParmDataCreatorInvTransfer_BR::getFinancialDimension(
                    FiscalDocumentLine_BR_Extension::getFiscalRecord(tableNum(InventTransferJourLine), _fiscaldocument.RefRecId),
                    FiscalDocumentLine_BR_Extension::getFiscalRecord(_fiscalDocument.RefTableId, _fiscaldocumentLine.RefRecId));
                break;

            case tableNum (TaxFiscalDocument_BR) :
                ret = FiscalDocParmDataCreatorTaxTransfer_BR::getFinancialDimension(
                    FiscalDocumentLine_BR_Extension::getFiscalRecord(_fiscalDocument.RefTableId, _fiscaldocumentLine.RefRecId));
                break;

            case tableNum (CustPackingSlipJour) :
                ret = FiscalDocParmDataCreatorPackingSlip_BR::getFinancialDimension(
                    FiscalDocumentLine_BR_Extension::executeRecordMethod(
                        tableMethodStr(custPackingSlipTrans, salesLine), 
                        FiscalDocumentLine_BR_Extension::getFiscalRecord(_fiscalDocument.RefTableId, _fiscaldocumentLine.RefRecId)));
                break;

            case tableNum (ProjInvoiceJour) :
                ret = FiscalDocParmDataCreatorProjInv_BR::getFinancialDimension(
                    FiscalDocumentLine_BR_Extension::getFiscalRecord(_fiscalDocument.RefTableId, _fiscaldocumentLine.RefRecId));
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>FiscalDocumentLine_BR</c> table.
    /// </summary>
    /// <param name="_refTableId">
    ///    The Table ID of the document that originated the Fiscal document line.
    /// </param>
    /// <param name="_refRecId">
    ///    The Record ID of the document that originated the Fiscal document line.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>FiscalDocumentLine_BR</c> table; otherwise, an empty record.
    /// </returns>
    public static FiscalDocumentLine_BR findByRef(RefTableId _refTableId, RefRecId _refRecId, boolean _forUpdate = false)
    {
        FiscalDocumentLine_BR fiscalDocumentLine;
    
        fiscalDocumentLine.selectForUpdate(_forUpdate);
    
        select firstOnly fiscalDocumentLine
            where fiscalDocumentLine.RefRecId == _refRecId
                && fiscalDocumentLine.RefTableId == _refTableId;
    
        return fiscalDocumentLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>