<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportERService_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

internal final class TaxReportERService_IT extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    protected void runReport(TaxReportERContract_IT _dataContract)
    {
        TaxReportContract_IT taxReportContract_IT = new TaxReportContract_IT();
        taxReportContract_IT.initFromTaxReportERContract_IT(_dataContract);

        container packedClass = SysOperationHelper::base64Decode(_dataContract.parmTaxReport_IT());
        TaxReport_IT taxReport_IT = new TaxReport_IT();
        taxReport_IT.unpack(packedClass);

        if (_dataContract.parmIsVariativePeriod())
        {
            taxReport_IT.parmFromDate(_dataContract.parmFromDate());
            taxReport_IT.parmToDate(_dataContract.parmToDate());
            taxReportContract_IT.parmTaxReport_IT(SysOperationHelper::base64Encode(taxReport_IT.pack()));
        }
        else
        {
            taxReport_IT.parmPrevVATCredit(_dataContract.parmPrevVATCredit());
            taxReport_IT.parmVATCompensation(_dataContract.parmVATCompensation());
            taxReport_IT.parmPrevVATDebit(_dataContract.parmPrevVATDebit());
            taxReport_IT.parmVATPrePayment(_dataContract.parmVATPrePayment());
            taxReport_IT.parmVATPaymentAmount(_dataContract.parmVATPaymentAmount());
            taxReport_IT.parmPaymentDate(_dataContract.parmPaymentDate());
            taxReport_IT.parmBankAccountId(_dataContract.parmBankAccountId());
            taxReport_IT.parmBankRef1(_dataContract.parmBankRef1());
            taxReport_IT.parmBankRef2(_dataContract.parmBankRef2());
            taxReport_IT.createTaxReportPayment();
        }

        try
        {
            using (TaxReportERContext_IT taxReportERContext = TaxReportERContext_IT::instance())
            {
                taxReportERContext.parmTaxReportContract_IT(taxReportContract_IT);
                taxReportERContext.parmTaxReportERContract_IT(_dataContract);

                TaxReportDP_IT taxReportDP_IT = new TaxReportDP_IT();
                taxReportDP_IT.parmDataContract(taxReportContract_IT);

                if (TaxReportSkipReportTransactionFlight_IT::instance().isEnabled())
                {
                    taxReportDP_IT.processReport();
                }
                else
                {
                    ttsbegin;
                    taxReportDP_IT.processReport();
                    ttscommit;
                }

                ERFormatMappingID formatMappingId = TaxReportERHelper_IT::getTaxReportFormatMappingID(
                    TaxPeriodHead::find(_dataContract.parmTaxPeriod()).TaxAuthority);

                ERSingleModelBinding modelBinding;
                select firstonly SpecificModel from modelBinding
                    where modelBinding.FormatBinding == formatMappingId;

                Name modelName = ERDataModelTable::find(modelBinding.SpecificModel).Name;

                ERModelDefinitionDatabaseContext databaseContext = new ERModelDefinitionDatabaseContext();
                databaseContext.addTemporaryTable(taxReportDP_IT.getTaxReportTmp_IT());

                ERIFormatMappingRun erRun = ERObjectsFactory::createFormatMappingRunWithBatchSupportByFormatMappingId(
                    formatMappingId,
                    '',
                    false,
                    false,
                    false,
                    isRunningOnBatch());

                erRun.withParameter(databaseContext);
                erRun.withCreatingObjectParameter(modelName, classId2Name(classIdGet(_dataContract)), _dataContract);

                ERIFileDestinationFactoryHost factoryHost = ERCast::asObject(erRun) as ERIFileDestinationFactoryHost;

                if (factoryHost)
                {
                    ERIFileDestinationFactory fileDestinationFactory = factoryHost.getFileDestinationFactory();
                    factoryHost.setFileDestinationFactory(TaxReportERDestinationFactory_IT::construct(fileDestinationFactory));
                    erRun.run();
                }
            }
        }
        catch (Exception::CLRError)
        {
            error(AifUtil::getClrErrorMessage());
            throw error("@SYS121520");
        }
        catch
        {
            throw error("@SYS121520");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>