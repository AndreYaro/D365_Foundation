<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCompensationReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendCompensationReportDP</c> class handles the business logic for the <c>CustVendCompensation</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(CustVendCompensationReportContract))]
public class CustVendCompensationReportDP extends SRSReportDataProviderBase
{
    CustVendCompensationReportTmp tmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>CustVendCompensationReportTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>CustVendCompensationReportTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(CustVendCompensationReportTmp))]
    public CustVendCompensationReportTmp getTmp()
    {
        select tmp;
        return tmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>CustVendCompensationReportTmp</c> record for use on the <c>CustVendCompensationReport</c> report.
    /// </summary>
    protected void insertIntoTmp()
    {
        CustVendCompensationReportContract contract = this.parmDataContract();
        CompanyInfo companyInfo = CompanyInfo::find();
        LedgerJournalTrans trans = LedgerJournalTrans::findRecId(contract.parmLedgerCustRecId(), false);
        CustTable custTable = CustTable::find(trans.parmAccount());
        VendTable vendTable = VendTable::find(LedgerJournalTrans::findRecId(contract.parmLedgerVendRecId(), false).parmAccount());
        LanguageId languageId = infolog.language();
        DirPersonUser dirPersonUser;
        DirPerson dirPerson;

        select Name from dirPerson
            exists join dirPersonUser
                where dirPersonUser.User == curUserId()
                    && dirPerson.RecId == dirPersonUser.PersonParty;

        ttsbegin;
        tmp.clear();

        tmp.CompensationDate = trans.TransDate;
        tmp.PreparedBy = dirPerson.Name;

        tmp.HeaderText = FormLetterRemarks::find(languageId, FormTextType::CompensationletterHeader).Txt;
        tmp.BalanceText = FormLetterRemarks::find(languageId, FormTextType::CompensationletterBalance).Txt;
        tmp.PayableText = FormLetterRemarks::find(languageId, FormTextType::CompensationletterPayable).Txt;
        tmp.ReceivableText = FormLetterRemarks::find(languageId, FormTextType::CompensationletterReceivable).Txt;

        tmp.CompanyName = companyInfo.name();
        tmp.CompanyAddress = companyInfo.postalAddress().Address;
        tmp.CompanyPhone = companyInfo.phone();
        tmp.CompanyTeleFax = companyInfo.teleFax();
        tmp.CompanyCoRegNum = companyInfo.CoRegNum;
        tmp.CompanyRegNum = companyInfo.RegNum;
        tmp.CompanyEmail = companyInfo.email();

        tmp.CustomerName = custTable.name();
        tmp.CustomerAddress = custTable.postalAddress().Address;

        tmp.VendorName = vendTable.name();
        tmp.VendorAddress = vendTable.postalAddress().Address;

        tmp.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        this.insertIntoTmp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>