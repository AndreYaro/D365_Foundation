<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoicePaymentAuthorizationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoicePaymentAuthorizationTask</c> class performs the workflow automated task for posting approved vendor invoices.
/// </summary>
public class VendInvoicePaymentAuthorizationTask implements WorkflowElementExecutionEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isInvoiceReadyForPosting</Name>
				<Source><![CDATA[
    [Wrappable]
    protected final boolean isInvoiceReadyForPosting(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return _vendInvoiceInfoTable.isHeaderReadyForPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public void execute(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        using (var invoiceProcessContext = VendorInvoiceProcessContext::instance())
        {
            VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_workflowElementEventArgs.parmWorkflowContext().parmRecId());

            if (this.isInvoiceReadyForPosting(vendInvoiceInfoTable))
            {
                if (vendInvoiceInfoTable.ParmId != '')
                {
                    VendInvoiceInfoTable::moveFromActiveToSaved(vendInvoiceInfoTable);
                    vendInvoiceInfoTable.reread();
                }

                invoiceProcessContext.parmIsWorkflowEventInProcess(true);
                VendInvoicePaymentAuthorizationTask::postSavedInvoice(vendInvoiceInfoTable);
            }
            else
            {
                throw error(strFmt("@SYS319867", vendInvoiceInfoTable.Num));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSavedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a saved vendor invoice
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The saved vendor invoice to post.
    /// </param>
    public static void postSavedInvoice(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        PurchFormLetter_Invoice purchFormLetterInvoice;
        LedgerJournalTrans ledgerJournalTrans;

        if (VendInvoiceFromApprovalPostingDateAutoAdjustmentFlight::instance().isEnabled() &&
            FeatureStateProvider::isFeatureEnabled(VendInvoicePostingDateAutoAdjustmentFeature::instance()))
        {
            _vendInvoiceInfoTable.updatePostingDateV2();
        }

        if (_vendInvoiceInfoTable.Ordering == DocumentStatus::ApproveJournal)
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(_vendInvoiceInfoTable.PoolRecId, false);
            purchFormLetterInvoice = PurchFormLetter_ApproveJournal::newApprovalFromSavedInvoice(_vendInvoiceInfoTable, ledgerJournalTrans);
            purchFormLetterInvoice.parmLedgerJournalTrans(ledgerJournalTrans);
        }
        else
        {
            if (!VendInvoiceFromApprovalPostingDateAutoAdjustmentFlight::instance().isEnabled() &&
                FeatureStateProvider::isFeatureEnabled(VendInvoicePostingDateAutoAdjustmentFeature::instance()))
            {
                _vendInvoiceInfoTable.updatePostingDateV2();
            }
            purchFormLetterInvoice = PurchFormLetter_Invoice::newFromSavedInvoice(_vendInvoiceInfoTable);
        }

        purchFormLetterInvoice.purchParmUpdate(null);
        purchFormLetterInvoice.parmId('');
        purchFormLetterInvoice.initNewPurchParmUpdate();
        purchFormLetterInvoice.printFormLetter(false);
        purchFormLetterInvoice.usePrintManagement(false);
        purchFormLetterInvoice.printSalesFormLetter(false);
        purchFormLetterInvoice.printEUVatInvoice(false);
        purchFormLetterInvoice.proforma(false);
        purchFormLetterInvoice.reArrangeNow(false);
        purchFormLetterInvoice.parmExecutingPaymentAuthorizationTask(true);

        VendInvoicePaymentAuthorizationTask::updatePurchFormLetterInvoice(purchFormLetterInvoice, _vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchFormLetterInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs posting of the given <c>VendInvoiceInfoTable</c> table buffer.
    /// </summary>
    /// <param name="_purchFormLetterInvoice">
    /// The <c>PurchFormLetter_Invoice</c> that carries vend invoice information.
    /// </param>
    /// <param name="_vendInvoiceInfoTable">
    /// The saved vendor invoice to post.
    /// </param>
    /// <remarks>
    /// Calls update method of <c>PurchFormLetter</c> class to post invoice.
    /// </remarks>
    public static void updatePurchFormLetterInvoice(PurchFormLetter_Invoice _purchFormLetterInvoice, VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        _purchFormLetterInvoice.update(_vendInvoiceInfoTable, _vendInvoiceInfoTable.Num);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>