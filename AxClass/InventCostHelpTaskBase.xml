<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostHelpTaskBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The base task for the cost helper.
/// </summary>
abstract class InventCostHelpTaskBase extends RunBaseBatch
{
    Set prodIdSet;
    
    boolean                 masterClient;
    InventClosing           inventClosing;
    Voucher                 voucher;
    TransDate               transDate;
    InventClosingRunNum     runNum;
    InventTransCurrency_RU  inventTransCurrency;

    InventCostTaskController    inventCostTaskController;

    #DEFINE.CurrentVersion(103)

    #LOCALMACRO.CurrentList
        inventClosing,
        masterClient,
        runNum,
        inventTransCurrency,
        voucher,
        transDate
    #ENDMACRO
    
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the task.
    /// </summary>
    abstract protected void doRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend this class must override the <c>runsImpersonated</c> method and return
    ///    false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    static ClassDescription description()
    {
        return "@SYS78022";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    abstract protected ClassDescription getTaskDescription()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>startInstrumentation</Name>
				<Source><![CDATA[
    protected System.Diagnostics.Stopwatch startInstrumentation()
    {
        System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
        stopwatch.Start();

        return stopwatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopInstrumentation</Name>
				<Source><![CDATA[
    protected void stopInstrumentation(UtilElementName _utilElementName, System.Diagnostics.Stopwatch _stopwatch)
    {
        _stopwatch.Stop();

        CostManagementInstrumentation::newInstrumentation(enum2Symbol(enumNum(InventAdjustmentType), inventClosing.AdjustmentType), int642Str(inventClosing.RecId))
            .addMeasureElapsedMilliseconds(_utilElementName, _stopwatch.ElapsedMilliseconds)
            .logMeasures();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the <c>Dialog</c> system or by using a class created in
    ///    the AOT.
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addText(strFmt("@SYS109424", inventClosing.AdjustmentType));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostTaskController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an <c>InventCostTaskController</c> object.
    /// </summary>
    /// <returns>
    /// An <c>InventCostTaskController</c> object.
    /// </returns>
    protected InventCostTaskController inventCostTaskController()
    {
        return InventCostTaskController::newFromParameters( this.parmCurrentBatch().BatchJobId,
                                                            this.parmCurrentBatch().RecId,
                                                            voucher,
                                                            transDate,
                                                            inventClosing.RunNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the execution of the task.
    /// </summary>
    /// <param name="_batchJobId">
    /// The batch job ID under which additional tasks will be created; optional.
    /// </param>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// An update conflict occurred, and kept occuring when it was retried.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// An update conflict occurred.
    /// </exception>
    public void run(RefRecId _batchJobId = this.parmCurrentBatch().BatchJobId)
    {
        Integer logPointBegin = infologLine();

        #OCCRetryCount

        inventClosing = InventClosing::find(voucher, transDate);

        this.parmInventTransCurrency_RU(inventClosing.InventTransCurrency_RU);

        inventCostTaskController = this.inventCostTaskController();

        if (inventCostTaskController.continueExecution())
        {
            setPrefix(this.getTaskDescription());

            this.progressInit(InventCostClosing::prefixText(inventClosing.AdjustmentType),1,#AviUpdate);

            if (!this.isInBatch())
            {
                progress.setText(this.getTaskDescription());
                progress.update(true);
            }

            try
            {
                this.doRun();
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        inventCostTaskController.handleError();
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    inventCostTaskController.handleError();
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::CLRError)
            {
                ApplicationUnhandledExceptionLogger::processUnhandledCLRException();

                inventCostTaskController.handleError();
                throw Exception::Error;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    inventCostTaskController.handleError();
                    throw;
                }
            }
            catch
            {
                inventCostTaskController.handleError();
                throw;
            }
            finally
            {
                if (inventClosing)
                {
                    LogId logId = guid2str(newGuid());
                    Integer logPointNow = infologLine();
                    if (logPointBegin + 1 <= logPointNow)
                    {
                        inventClosing.writeLog(infolog.cut(logPointBegin + 1, logPointNow), LogType::Misc, logId);
                    }
                }
            }

            this.progressKill();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="packedClass" /> parameter value to an instance of the
    ///    <c>InventCostHelpTaskBase</c> class.
    /// </summary>
    /// <param name="packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns true; you may have to unpack some prompt-related
    ///    variables also.
    /// </remarks>
    public boolean unpack(container _packedClass)
    {
        #DEFINE.InventCostHelpVersion102(102)
        #DEFINE.InventCostHelpVersion2(2)
        #DEFINE.InventCostHelpTaskBaseVersion1(1)
        #LOCALMACRO.InventCostHelpVersion2BaseList
            inventClosing,
            masterClient,
            runNum
        #ENDMACRO
        #LOCALMACRO.InventCostHelpVersion102BaseList
            inventClosing,
            masterClient,
            runNum,
            inventTransCurrency
        #ENDMACRO
        #LOCALMACRO.InventCostHelpTaskBaseVersion1List
            voucher,
            transDate
         #ENDMACRO

        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            case #InventCostHelpTaskBaseVersion1:
                container packedBase;
                [version, #InventCostHelpTaskBaseVersion1List, packedBase] = _packedClass;

                Integer baseVersion = conPeek(packedBase, 1);
                switch (baseVersion)
                {
                    case #InventCostHelpVersion102:
                        [baseVersion, #InventCostHelpVersion102BaseList] = packedBase;
                        break;
                    case #InventCostHelpVersion2:
                        [baseVersion, #InventCostHelpVersion2BaseList] = packedBase;
                        break;
                    default :
                        return false;
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunNum</Name>
				<Source><![CDATA[
    public InventClosingRunNum parmRunNum(InventClosingRunNum _runNum = runNum)
    {
        runNum = _runNum;

        return runNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventClosing</Name>
				<Source><![CDATA[
    public InventClosing parmInventClosing(InventClosing _inventClosing = inventClosing)
    {
        inventClosing = _inventClosing;
        return inventClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency_RU</Name>
				<Source><![CDATA[
    public InventTransCurrency_RU parmInventTransCurrency_RU(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;
        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMasterClient</Name>
				<Source><![CDATA[
    public boolean parmMasterClient(boolean _masterClient = masterClient)
    {
        masterClient = _masterClient;
        return masterClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressCalculation</Name>
				<Source><![CDATA[
    public void progressCalculation(InventCostList _inventCostList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the state of the internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    ///    Identifies the object from which this method is called. Default value is null.
    /// </param>
    /// <returns>
    ///    true.
    /// </returns>
    /// <remarks>
    ///    This method is called before closing the dialog, and should be called in the <c>run</c> method. It must only contain code that adds warnings to the Infolog.
    ///    The method should generally return errors
    ///    by using the <c>Global::CheckFailed</c> method. Do not use the <c>throw</c> statement in this method.
    /// </remarks>
    public boolean validate(Object _calledFrom = null)
    {
        ttsbegin;

        inventClosing = InventClosing::find(inventClosing.Voucher,inventClosing.TransDate,true);

        ttscommit;

        if (! inventClosing.RecId || ! inventClosing.Active)
            return checkFailed("@SYS78045");

        if (inventClosing.InventCostStatus == InventCostStatus::Ended)
            return checkFailed(strFmt("@SYS78046",inventClosing.InventCostStatus));

        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>