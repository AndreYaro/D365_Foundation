<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportPopulateWrkCtr</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventValueReportPopulateWrkCtr</c> class generates report data for labor resources.
/// </summary>
public class InventValueReportPopulateWrkCtr extends InventValueReportPopulateResource implements CostIAsyncRunnable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs as an asynchronous task.
    /// </summary>
    /// <returns>The created asynchronous task.</returns>
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventValueReportPopulateWrkCtr),
                                                          staticMethodStr(InventValueReportPopulateWrkCtr, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventValueReportPopulateWrkCtr     dataCollectionTask = new InventValueReportPopulateWrkCtr();
        container                           packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);
        CostManagementInstrumentationLogger logger = CostManagementInstrumentationLogger::createLogger(classStr(InventValueReportPopulateWrkCtr));
        using (var activityContext = logger.inventoryValueReportActivity().populateWrkCtr(dataCollectionTask.parmInventValueReportContract().parmTransactionId()))
        {
            dataCollectionTask.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransactionsWithDynamicQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Collects current balance and transaction data for a particular work center.
    /// </summary>
    protected void buildTransactionsWithDynamicQuery()
    {
        InventValueReportWrkCtrUnionAll routeTransView;
        InventValueReportTmpLine        tmpReportLine;
        RecId                           defaultDimensionRecId = -1;
        InventSiteId                    inventSiteId;
        WrkCtrResourceGroup             wrkCtrResourceGroup;

        boolean joinWrkCtrResourceGroup = inventValueReport.ViewResourceGroup || inventValueReport.ViewResourceGroupTotal ||
                                          this.isRangesSetOnReportLine(this.mapReportLineToWrkCtrResourceGroup());
        Query q = new Query();
        QueryBuildDataSource qbdsRouteTransView = q.addDataSource(tableNum(InventValueReportWrkCtrUnionAll));
        if (this.parmResourceId())
        {
            qbdsRouteTransView.addRange(fieldNum(InventValueReportWrkCtrUnionAll, WrkCtrId)).value(queryValue(resourceId));
        }
        qbdsRouteTransView.addRange(fieldNum(InventValueReportWrkCtrUnionAll, SessionId)).value(queryValue(sessionId()));
        qbdsRouteTransView.orderMode(OrderMode::GroupBy);

        if (this.isDimensionLinkLocked())
        {
            qbdsRouteTransView.addGroupByField(fieldNum(InventValueReportWrkCtrUnionAll, DefaultDimension));
        }

        this.copyRangesFromContractQuery(this.mapReportLineToReportView(), qbdsRouteTransView);
        this.setDimensionRange(fieldNum(InventValueReportWrkCtrUnionAll, DefaultDimension), qbdsRouteTransView);

        if (joinWrkCtrResourceGroup)
        {
            QueryBuildDataSource qbdsWrkCtrResourceGroup = this.joinWrkCtrResourceGroup(qbdsRouteTransView);
        }

        // select sum(field)
        qbdsRouteTransView.addSelectionField(fieldNum(InventValueReportWrkCtrUnionAll, Amount), SelectionField::Sum);

        qbdsRouteTransView.addGroupByField(fieldNum(InventValueReportWrkCtrUnionAll, LineType));
        qbdsRouteTransView.addGroupByField(fieldNum(InventValueReportWrkCtrUnionAll, WrkCtrId));
        qbdsRouteTransView.addGroupByField(fieldNum(InventValueReportWrkCtrUnionAll, ResourceGroup));

        if (inventValueReport.DetailLevel == TotalTrans::Trans)
        {
            qbdsRouteTransView.addGroupByField(fieldNum(InventValueReportWrkCtrUnionAll, Voucher));
            qbdsRouteTransView.addGroupByField(fieldNum(InventValueReportWrkCtrUnionAll, Reference));
        }

        // Group by dates regardless of DetailLevel value, so that the records with TransDate > ToDate could be deleted later
        qbdsRouteTransView.addGroupByField(fieldNum(InventValueReportWrkCtrUnionAll, TransDate));

        QueryRun qr = new QueryRun(q);
        while (qr.next())
        {
            if (qr.changed(tableNum(InventValueReportWrkCtrUnionAll)))
            {
                routeTransView = qr.get(tableNum(InventValueReportWrkCtrUnionAll));
            }

            if (joinWrkCtrResourceGroup && qr.changed(tableNum(WrkCtrResourceGroup)))
            {
                wrkCtrResourceGroup  = qr.get(tableNum(WrkCtrResourceGroup));
                this.insertReportLines();
            }

            if (this.isDimensionLinkLocked())
            {
                if (!DimensionDefaultFacade::areEqual(routeTransView.DefaultDimension, defaultDimensionRecId))
                {
                    inventSiteId = this.getInventSiteId(routeTransView.DefaultDimension);
                    defaultDimensionRecId = routeTransView.DefaultDimension;
                }
            }

            // Only include blank site id if no range has been provided
            if (routeTransView.Amount &&
                (inventSiteId != '' || this.getSiteIdRangeValue() == ''))
            {
                // Update transaction line
                if (inventValueReport.DetailLevel == TotalTrans::Trans)
                {
                    if (routeTransView.TransDate <= this.getActualToDate()
                     && routeTransView.LineType == InventValueReportLineType::Transaction)
                    {
                        tmpReportLine = this.findReportLine(InventValueReportLineType::Transaction, routeTransView, inventSiteId, wrkCtrResourceGroup);
                        this.updateReportLineBalance(tmpReportLine, 1, routeTransView);
                        this.updateReportLine(tmpReportLine);
                    }

                    // Update beginning balance
                    if (inventValueReport.IncludeBeginningBalance)
                    {
                        tmpReportLine = this.findReportLine(InventValueReportLineType::BeginningBalance, routeTransView, inventSiteId, wrkCtrResourceGroup);
                        this.updateReportLineBalance(tmpReportLine, -1, routeTransView);
                        this.updateReportLine(tmpReportLine);
                    }
                }
                else
                {
                    // Update ending balance
                    if (routeTransView.TransDate > this.getActualToDate()
                     || routeTransView.LineType == InventValueReportLineType::CurrentBalance)
                    {
                        tmpReportLine = this.findReportLine(InventValueReportLineType::EndingBalance, routeTransView, inventSiteId, wrkCtrResourceGroup);
                        this.updateReportLineBalance(tmpReportLine, -1, routeTransView);
                        this.updateReportLine(tmpReportLine);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReportLine</Name>
				<Source><![CDATA[
    private InventValueReportTmpLine findReportLine(
        InventValueReportLineType       _lineType,
        InventValueReportWrkCtrUnionAll _routeTransView,
        InventSiteId                    _inventSiteId,
        WrkCtrResourceGroup             _wrkCtrResourceGroup)
    {
        InventValueReportTmpLine tmpReportLine;

        tmpReportLine.clear();
        tmpReportLine.LineType          = _lineType;
        if (inventValueReport.ViewResourceId || inventValueReport.ViewResourceIdTotal)
        {
            tmpReportLine.ResourceId        = _routeTransView.WrkCtrId;
        }
        // WrkCtrId is the group in this case.
        tmpReportLine.ResourceGroupId   = _wrkCtrResourceGroup.WrkCtrId;
        tmpReportLine.ResourceType      = this.resourceType();
        switch (_lineType)
        {
            case InventValueReportLineType::Transaction:
                tmpReportLine.Voucher           = _routeTransView.Voucher;
                tmpReportLine.TransDate         = _routeTransView.TransDate;
                tmpReportLine.Reference         = _routeTransView.Reference;
                tmpReportLine.ReferenceCategory = InventTransType::ProdLine;
                break;
            case InventValueReportLineType::BeginningBalance:
                tmpReportLine.ReferenceCategory = InventTransType::SummedUp;
                tmpReportLine.TransDate = this.getActualFromDate();
                break;
            case InventValueReportLineType::EndingBalance:
                tmpReportLine.ReferenceCategory = InventTransType::SummedUp;
                tmpReportLine.TransDate = this.getActualToDate();
                break;
        }

        if (this.isDimensionLinkLocked())
        {
            tmpReportLine.InventSiteId = _inventSiteId;
        }

        reportLines.find(tmpReportLine);

        return tmpReportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinWrkCtrResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Join the <c>WrkCtrResourceGroup</c> to the query.
    /// </summary>
    /// <param name="_qbdsParent">
    ///     A <c>QueryBuildDataSource</c> object with the parent data source.
    /// </param>
    /// <returns>
    ///     A <c>QueryBuildDataSource</c> object with the data source for the joined table.
    /// </returns>
    protected QueryBuildDataSource joinWrkCtrResourceGroup(
        QueryBuildDataSource    _qbdsParent)
    {
        QueryBuildDataSource qbdsWrkCtrResourceGroup = _qbdsParent.addDataSource(tableNum(WrkCtrResourceGroup));
        qbdsWrkCtrResourceGroup.addLink(fieldNum(InventValueReportWrkCtrUnionAll, ResourceGroup), fieldNum(WrkCtrResourceGroup, RecId));
        qbdsWrkCtrResourceGroup.orderMode(OrderMode::GroupBy);
        if (inventValueReport.ViewResourceGroup || inventValueReport.ViewResourceGroupTotal)
        {
            qbdsWrkCtrResourceGroup.addGroupByField(fieldNum(WrkCtrResourceGroup, WrkCtrId));
        }
        this.copyRangesFromContractQuery(this.mapReportLineToWrkCtrResourceGroup(), qbdsWrkCtrResourceGroup);

        return qbdsWrkCtrResourceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapReportLineToReportView</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Map fields from <c>InventValueReportTmpLine</c> to fields in <c>InventValueReportView</c>.
    /// </summary>
    /// <returns>
    ///     A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in <c>InventValueReportView</c>.
    /// </returns>
    protected Map mapReportLineToReportView()
    {
        Map map = new Map(Types::Integer, Types::Integer);

        map.insert(fieldNum(InventValueReportTmpLine, ResourceId), fieldNum(InventValueReportWrkCtrUnionAll, WrkCtrId));
        map.insert(fieldNum(InventValueReportTmpLine, Reference), fieldNum(InventValueReportWrkCtrUnionAll, Reference));

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapReportLineToWrkCtrResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Map fields from <c>InventValueReportTmpLine</c> to fields in <c>WrkCtrResourceGroup</c>.
    /// </summary>
    /// <returns>
    ///     A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in <c>WrkCtrResourceGroup</c>.
    /// </returns>
    protected Map mapReportLineToWrkCtrResourceGroup()
    {
        Map map = new Map(Types::Integer, Types::Integer);

        map.insert(fieldNum(InventValueReportTmpLine, ResourceGroupId), fieldNum(WrkCtrResourceGroup, WrkCtrId));

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceType</Name>
				<Source><![CDATA[
    protected InventValueReportResourceType resourceType()
    {
        return InventValueReportResourceType::Labor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportLineBalance</Name>
				<Source><![CDATA[
    private void updateReportLineBalance(
        InventValueReportTmpLine        _tmpReportLine,
        int                             _sign,
        InventValueReportWrkCtrUnionAll _routeTransView)
    {
        _tmpReportLine.wipPhysicalPostedAmount += _routeTransView.Amount * _sign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueReportPopulateWrkCtr construct()
    {
        return new InventValueReportPopulateWrkCtr();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>