<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutPaymRecord_NACHA_CTX</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustOutPaymRecord_NACHA_CTX extends CustOutPaymRecord_NACHA
{
    //***** NACHA CTX Record Layout *****
    //
    //      Field                           Offset      Default
    //--    ------------------------------- -------     -----------
    //01    recordTypeCode                  01 - 01     6
    //02    transactionCode                 02 - 03
    //03    receivingDFI_Identification     04 - 11
    //04    checkDigit                      12 - 12
    //05    DFI_AccountNumber               13 - 29
    //06    amount                          30 - 39
    //07    identificationNumber            40 - 54
    //08    numberOfAddendaRecords          55 - 58     0 <ZERO>
    //09    receivingCompanyName            59 - 74
    //10    reserved                        75 - 76     <BLANK>
    //11    discretionaryData               77 - 78     <BLANK>
    //12    addendaRecordIndicator          79 - 79     0 <ZERO>
    //13    traceNumber                     80 - 94

    #define.interfaceName('Standard NACHA - CTX')
    #define.formatType('CTX')

    //Offsets:
    #define.amountOffset(30)
    #define.numberOfAddendaRecordsOffset(55)
    #define.receivingCompanyNameOffset(59)
    #define.reservedOffset(75)
    #define.discretionaryDataOffset(77)
    #define.addendaRecordIndicatorOffset(79)

    //Field Lengths:
    #define.receivingCompanyNameLength(16)
    #define.reservedLength(2)
    #define.discretionaryDataLength(2)

    container nacha_ctx_Record;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCTXFieldPositions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds debug field information to the output file.
    /// </summary>
    private void addCTXFieldPositions()
    {
        #define.cTXRecordLayout         ('ABBCCCCCCCCDEEEEEEEEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGGGGGGHHHHIIIIIIIIIIIIIIIIJJKKLMMMMMMMMMMMMMMM - CTX RECEIVABLES RECORD')
        #define.cTXTraceNumber          ('                                                                               MMMMMMMMMMMMMMM - Trace Number [Journal ID + Line Number]')
        #define.cTXAddendaIndicator     ('                                                                              L - Addenda Record Indicator = "0"')
        #define.cTXDiscretionaryData    ('                                                                            KK - Discretionary Data <BLANK>')
        #define.cTXReserved             ('                                                                          JJ - Reserved <BLANK>')
        #define.cTXReceivingCompanyName ('                                                          IIIIIIIIIIIIIIII - Receiving Company Name/ID')
        #define.cTXNumAddendaRecords    ('                                                      HHHH - Number Of Addenda Records = "0000"')
        #define.cTXIdentificationNumber ('                                       GGGGGGGGGGGGGGG - Identification Number')
        #define.cTXAmount               ('                             FFFFFFFFFF - Amount [$$$$$$$$cc]')
        #define.cTXDFIAccountNumber     ('            EEEEEEEEEEEEEEEEE - DFI Account Number')
        #define.cTXCheckDigit           ('           D - Check Digit')
        #define.cTXReceivingDFI_ID      ('   CCCCCCCC - Receiving DFI Identification')
        #define.cTXTransactionCode      (' BB - Transaction Code = "27" for AR Checking, "37" for AR Savings')
        #define.cTXRecordTypeCode       ('A - Record Type Code = "6"')

        file.write(#cTXRecordLayout);
        file.write(#cTXTraceNumber);
        file.write(#cTXAddendaIndicator);
        file.write(#cTXDiscretionaryData);
        file.write(#cTXReserved);
        file.write(#cTXReceivingCompanyName);
        file.write(#cTXNumAddendaRecords);
        file.write(#cTXIdentificationNumber);
        file.write(#cTXAmount);
        file.write(#cTXDFIAccountNumber);
        file.write(#cTXCheckDigit);
        file.write(#cTXReceivingDFI_ID);
        file.write(#cTXTransactionCode);
        file.write(#cTXRecordTypeCode);
        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    public boolean checkValues(LedgerJournalTrans _ledgerJournalTrans = null, RunbaseProgress _progress = null)
    {
        boolean ok = super(_ledgerJournalTrans, _progress);

        if (!this.parmIsPrenote())
        {
            if (CustPaymMethodVal::exist(_ledgerJournalTrans.PaymMode, CustPaymentValidate::PaymReference)
                && !_ledgerJournalTrans.PaymReference)
            {
                ok = checkFailed("@SYS24523");
            }
        }

        if (ok)
        {
            // Only transactions with Credit Amounts can be used from Accounts Receivable
            if (custVendPaym.paymAmountInSendersCurrency() >= 0)
            {
                if (!this.parmIsPrenote())
                {
                    ok = checkFailed("@SYS98766");
                }
            }
            changecompany(_ledgerJournalTrans.Company)
            {
                custBankAccount = CustBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(), CustTable::findByCompany(custVendPaym.ledgerJournalTrans().Company, custVendPaym.ledgerJournalTrans().parmAccount()).BankAccount);
                if (!custBankAccount)
                {
                    ok = checkFailed(strfmt("@SYS98117", custVendPaym.ledgerJournalTrans().parmAccount()));
                }
                else
                {
                    unchecked (Uncheck::TableSecurityPermission)
                    {
                        if (!custBankAccount.AccountNum)
                        {
                            ok = checkFailed(strfmt("@SYS98697", custBankAccount.AccountID, custVendPaym.ledgerJournalTrans().parmAccount()));
                        }
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField06</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the 'Amount' in the NACHA CTX detail record. The Payment Amount will be formatted as
    ///    '$$$$$$$$cc'.
    /// </summary>
    // Amount in format $$$$$$$$cc
    protected void fillField06()
    {
        transactionAmount = custVendPaym.paymAmountInSendersCurrency();
        this.strInsert(custVendOutPaym.num2StrNACHA(transactionAmount, 10), #amountOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField08</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the 'Number Of Addenda Records' in the NACHA CTX detail record. This will always be '0000'
    ///    (Zeros).
    /// </summary>
    // Number Of Addenda Records
    protected void fillField08()
    {
        #define.numAddendaRecords('0000')

        this.strInsert(#numAddendaRecords, #numberOfAddendaRecordsOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField09</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the 'Receiving Company Name/ID' in the NACHA CTX detail record. This field will contain the
    ///    receiver's company name.
    /// </summary>
    // Receiving Company Name/Id
    protected void fillField09()
    {
        this.strInsert(substr(custVendPaym.recieversCompanyName(), 1, #receivingCompanyNameLength), #receivingCompanyNameOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField10</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This field is reserved and will always be blank.
    /// </summary>
    // Reserved <BLANK>
    protected void fillField10()
    {
        #define.blank(' ')

        this.strInsert(strrep(#blank, #reservedLength), #reservedOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField11</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the 'Discretionary Data' in the NACHA CTX detail record. This will always be blank.
    /// </summary>
    // Discretionary Data <BLANK>
    protected void fillField11()
    {
        #define.blank(' ')

        this.strInsert(strrep(#blank, #discretionaryDataLength), #discretionaryDataOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField12</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the 'Addenda Record Indicator' in the NACHA CTX detail record. This will always be '0' (Zero).
    /// </summary>
    // Addenda Record Indicator -- Always '0' <ZERO>
    //
    // A value of '1' would indicate that one or more addenda records follow, '0' indicates no such record(s) is/are present.
    protected void fillField12()
    {
        #define.addendaIndicator('0')

        this.strInsert(#addendaIndicator, #addendaRecordIndicatorOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calles each fillFieldXX() method to populate all of the CTX payment record.
    /// </summary>
    protected void fillRecord()
    {
        this.fillField01();
        this.fillField02();
        this.fillField03();
        this.fillField04();
        this.fillField05();
        this.fillField06();
        this.fillField07();
        this.fillField08();
        this.fillField09();
        this.fillField10();
        this.fillField11();
        this.fillField12();
        this.fillField13();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the CTX payment output record.
    /// </summary>
    protected void initRecord()
    {
        #define.blankRoutingNumber('0')
        #define.blank(' ')

        nacha_ctx_Record = connull();
        transactionAmount = 0;
        bankRoutingNumber = strrep(#blankRoutingNumber, 8);
        outputRecord = strrep(#blank, 94);

        custBankAccount = CustBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(), CustTable::findByCompany(custVendPaym.ledgerJournalTrans().Company, custVendPaym.ledgerJournalTrans().parmAccount()).BankAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the specification to be displayed in the user interface.
    /// </summary>
    /// <returns>
    ///    The name of the specification to be displayed in the user interface.
    /// </returns>
    public PaymInterfaceName interfaceName()
    {
        return #interfaceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the payment detail to the Electronic Funds Transfer (EFT) output file and increments the
    ///    totals for the transaction.
    /// </summary>
    public void output()
    {
        this.initRecord();
        this.fillRecord();
        custVendOutPaym.addDetailRecord(#formatType, bankRoutingNumber, transactionAmount, 0);

        nacha_ctx_Record = conins(nacha_ctx_Record, 1, outputRecord);

        file.writeExp(nacha_ctx_Record);

        if (custVendOutPaym.isDebug())
        {
            this.addCTXFieldPositions();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>