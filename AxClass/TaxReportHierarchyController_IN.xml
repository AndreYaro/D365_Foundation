<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHierarchyController_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReportHierarchyController_IN</c> class is the controller class for the <c>TaxReportHierarchyDesigner_IN</c> form.
/// </summary>
class TaxReportHierarchyController_IN extends HierarchyDesignerBase
{
    TaxReportHierarchyInstance_IN       hierarchy;
    FormRun                                sdForm;
    Object                              sdFormObj;

    // The selected node
    TaxReportHrchyNode_IN    selectedNode;
    TaxReportHrchyNode_IN    focusedNode;

    // Context variables for finding node
    str     findStr;
    Array   foundNodes;
    int     foundNodeIndex;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelFindNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets all context variables of finding node operation.
    /// </summary>
    public void cancelFindNode()
    {
        findStr = '';
        foundNodes = null;
        foundNodeIndex = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSelectedNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the selected node's info.
    /// </summary>
    /// <param name="id">
    /// The recid of <c>TaxReportHierarchy_IN</c>.
    /// </param>
    public void changeSelectedNode(int64 id)
    {
        boolean editable = hierarchy.parmEditable();
        TaxReportHrchyNode_IN node;
        ;

        if (hierarchy)
        {
            node = hierarchy.findNode(id);

            if (node)
            {
                selectedNode = node;
            }

            sdFormObj.updateToggleEnableButton();
            sdFormObj.updateNodeDetailsButton();
            sdFormObj.updatePreviewGroup(node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editButtonEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the event handler for buttons.
    /// </summary>
    /// <param name="_control">
    /// A instance of <c>FormButtonControl</c>.
    /// </param>
    protected void editButtonEventHandler(FormButtonControl _control)
    {
        if ( this.PerformEditHierarchyDataActions() )
        {
            if (hierarchy.rootNode())
            {
                selectedNode = hierarchy.rootNode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNodeBySearchName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a set of nodes with the given string.
    /// </summary>
    /// <param name="_findStr">
    /// Find string.
    /// </param>
    /// <returns>
    /// First node in the result.
    /// </returns>
    public TaxReportHrchyNode_IN findNodeBySearchName(TaxReportHrchyNodeDisplayValue_IN _findStr)
    {
        findStr = _findStr;
        foundNodes = TaxReportHierarchyHelper_IN::findNodesByDisplayValue(
            hierarchy.rootNode().parmTaxReportHierarchyVersion(), findStr);

        if (this.hasFoundNodes())
        {
            foundNodeIndex = 1;
            return foundNodes.value(foundNodeIndex);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDescendants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record IDs of the children of a node at a specified depth.
    /// </summary>
    /// <param name="id">
    /// The record ID of the node for which to get the child nodes.
    /// </param>
    /// <param name="depth">
    /// The depth at which the child nodes are taken from.
    /// </param>
    /// <returns>
    /// An array of child nodes record ID.
    /// </returns>
    Array GetDescendants(int64 id, int depth)
    {
        //*********************************************************************************************************//
        // Gets the descendents of the specified node at the specified depth.  Called by AxHierarchyDesignerBridge //
        //*********************************************************************************************************//

        Array                   retarray = new Array(Types::Int64);
        TaxReportHrchyNode_IN   currentNode;
        TaxReportHrchyNode_IN   childNode;
        List                    descendantsList;
        ListEnumerator          listEnum;
        int                     counter = 1;

        currentNode = hierarchy.findNode(id);

        descendantsList = TaxReportHierarchyHelper_IN::findAllDescendantsByDepth(currentNode, depth);

        listEnum = descendantsList.getEnumerator();
        while (listEnum.moveNext())
        {
            childNode = listEnum.current();
            retarray.value(counter, childNode.parmRecId());
            counter ++;
        }
        return retarray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFindStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the find string used to find nodes by display value.
    /// </summary>
    /// <returns>
    /// The find string.
    /// </returns>
    public str getFindStr()
    {
        return findStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetMenuItemsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>Array</c> which contains number of menu item.
    /// </summary>
    /// <param name="nodeID">
    /// The record ID of the node type.
    /// </param>
    /// <returns>
    /// An <c>Array</c> which contains number of menu item.
    /// </returns>
    public Array GetMenuItemsEnabled(int64 nodeID)
    {
        return super(nodeID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetMenuItemText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the text of a menu item.
    /// </summary>
    /// <param name="menuItemNumber">
    /// The number of menu item.
    /// </param>
    /// <returns>
    /// Returns the text of a menu item.
    /// </returns>
    public str GetMenuItemText(int menuItemNumber)
    {
        return super(menuItemNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextFoundNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the next node from the search result.
    /// </summary>
    /// <returns>
    /// The node from the search result which is next to the current one if available, otherwise null.
    /// </returns>
    public TaxReportHrchyNode_IN getNextFoundNode()
    {
        if (this.hasNextFoundNode())
        {
            foundNodeIndex++; // Move to next node
            return foundNodes.value(foundNodeIndex);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of node.
    /// </summary>
    /// <param name="id">
    /// The id is used to find node.
    /// </param>
    /// <returns>
    /// Returns the name of node.
    /// </returns>
    str getNodeName(int64 id)
    {
        TaxReportHrchyNode_IN    node;
        if (hierarchy)
        {
            node = hierarchy.findNode(id);
            if (node)
                return node.parmDisplayValue();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of node.
    /// </summary>
    /// <param name="id">
    /// The id is used to find node.
    /// </param>
    /// <returns>
    /// Returns the type of node.
    /// </returns>
    int getNodeType(int64 id)
    {
        TaxReportHrchyNode_IN   node;

        if (hierarchy)
        {
            node = hierarchy.findNode(id);

            if (node)
            {
                // Zero is temporarily used as the type Id of disabled nodes
                return node.parmEnable() ? node.parmClassId() : 0;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfMenuItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of menu item.
    /// </summary>
    /// <returns>
    /// Returns the number of menu item.
    /// </returns>
    public int getNumberOfMenuItems()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parent of this selected node.
    /// </summary>
    /// <param name="id">
    /// The id is used to find node.
    /// </param>
    /// <returns>
    /// Returns the parent of this selected node, if parent exist; otherwise, -1.
    /// </returns>
    int64 getParentID(int64 id)
    {
        TaxReportHrchyNode_IN parentNode;

        if (id <= 0 || !hierarchy)
            return -1;

        parentNode = hierarchy.getParent(hierarchy.findNode(id));

        if (parentNode)
            return parentNode.parmRecId();
        else
            return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousFoundNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the previous node from the search result.
    /// </summary>
    /// <returns>
    /// The node from the search result which is prior to the current one if available, otherwise null.
    /// </returns>
    public TaxReportHrchyNode_IN getPreviousFoundNode()
    {
        if (this.hasPreviousFoundNode())
        {
            foundNodeIndex--; // Move to previous node
            return foundNodes.value(foundNodeIndex);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the root node.
    /// </summary>
    /// <returns>
    /// The ID of the root node.
    /// </returns>
    int64 getRootID()
    {
        return hierarchy.rootNode().parmRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected node.
    /// </summary>
    /// <returns>
    /// The selected node.
    /// </returns>
    public TaxReportHrchyNode_IN getSelectedNode()
    {
        return selectedNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAsParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the given child exist parent.
    /// </summary>
    /// <param name="child">
    /// The child node.
    /// </param>
    /// <param name="parent">
    /// The expected parent node.
    /// </param>
    /// <returns>
    /// Returns true if exist parent; otherwise, false.
    /// </returns>
    boolean hasAsParent(int64 child, int64 parent)
    {
        TaxReportHrchyNode_IN    childNode;
        TaxReportHrchyNode_IN    parentNode;
        List                    parentNodesList;
        ListEnumerator          listEnum;

        if (child <= 0 || parent <= 0 || !hierarchy)
            return false;

        childNode = hierarchy.findNode(child);
        parentNodesList = TaxReportHierarchyHelper_IN::findAllParents(childNode);

        listEnum = parentNodesList.getEnumerator();
        while (listEnum.moveNext())
        {
            parentNode = listEnum.current();
            if (parentNode.parmRecId() == parent)
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFoundNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the search result is not empty.
    /// </summary>
    /// <returns>
    /// True if there are one or more nodes in the search result, otherwise false.
    /// </returns>
    public boolean hasFoundNodes()
    {
        return foundNodes && foundNodes.lastIndex() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNextFoundNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if more nodes are available next to the current node in the search result.
    /// </summary>
    /// <returns>
    /// True if there are one or more nodes next to the current node, otherwise false.
    /// </returns>
    public boolean hasNextFoundNode()
    {
        return foundNodes && foundNodeIndex < foundNodes.lastIndex();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPreviousFoundNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if more nodes are available prior to the current node in the search result.
    /// </summary>
    /// <returns>
    /// True if there are one or more nodes prior to the current node, otherwise false.
    /// </returns>
    public boolean hasPreviousFoundNode()
    {
        return foundNodes && foundNodeIndex > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeMenuItemAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the menu item action.
    /// </summary>
    /// <param name="nodeID">
    /// The id is used to find node.
    /// </param>
    /// <param name="iMenuItemNumber">
    /// The number of menu item is used to decide which method will be execute.
    /// </param>
    /// <param name="iSubMenuItemNumber">
    /// Is not used.
    /// </param>
    public void invokeMenuItemAction(int64 nodeID, int iMenuItemNumber, int iSubMenuItemNumber)
    {
        super(nodeID, iMenuItemNumber, iSubMenuItemNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>TaxReportHierarchyController_IN</c> for given parameters.
    /// </summary>
    /// <param name="_instance">
    /// The instance of <c>TaxReportHierarchyInstance_IN</c>.
    /// </param>
    /// <param name="_sdForm">
    /// The instance of <c>Form</c>.
    /// </param>
    protected void new (
        TaxReportHierarchyInstance_IN _instance,
        Object _sdForm)
    {
        hierarchy = _instance;
        sdForm = _sdForm;
        sdFormObj = _sdForm;

        // Set to display correct node at top
        selectedNode = hierarchy.rootNode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PerformEditHierarchyDataActions</Name>
				<Source><![CDATA[
    private boolean PerformEditHierarchyDataActions()
    {
        try
        {
            hierarchy.enterEditMode();
            return true;
        }
        catch(Exception::Error)
        {
            Global::info("@SYS300663");
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportClickCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports the click count.
    /// </summary>
    /// <param name="clickcount">
    /// The click count.
    /// </param>
    void reportClickCount(int clickcount)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupTaxSetOffRuleEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and runs a MenuFunction for form <c>TaxReportHierarchySetOffRules_IN</c>.
    /// </summary>
    /// <param name="_control">
    /// A instance of <c>FormButtonControl</c>.
    /// </param>
    protected void setupTaxSetOffRuleEventHandler(FormButtonControl _control)
    {
        FormRun formRun;
        Args    args;

        args = new Args();
        args.record(hierarchy.getHierarchyVersion());

        formRun = new MenuFunction(menuitemDisplayStr(TaxReportHierarchySetOffRules_IN), MenuItemType::Display).create(args);

        if (formRun)
        {
            formRun.run();
            formRun.wait(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleEnableNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Togglely enable/disable the selected node.
    /// </summary>
    public void toggleEnableNode()
    {
        TaxReportHierarchyHelper_IN::enableHierarchyNode(selectedNode, !selectedNode.parmEnable());

        // Reload the hierarchy so that the cached hierarchyMap will be refreshed with the latest changes
        hierarchy.reload();

        selectedNode = hierarchy.findNode(selectedNode.parmRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified node is in the hierarchy.
    /// </summary>
    /// <param name="id">
    /// The id is used to find node.
    /// </param>
    /// <returns>
    /// Returns ture, if exist node; otherwise, false.
    /// </returns>
    boolean validNode(int64 id)
    {
        //********************************************************************************************//
        // Determines if the specified node is in the hierarchy.  Called by AxHierarchyDesignerBridge //
        //********************************************************************************************//
        if (!hierarchy)
            return false;

        return hierarchy.findNode(id) != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewTransDetailsButtonEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and runs a MenuFunction for form <c>TaxTrans</c>.
    /// </summary>
    /// <param name="_control">
    /// A instance of <c>FormButtonControl</c>.
    /// </param>
    protected void viewTransDetailsButtonEventHandler(FormFunctionButtonControl _control)
    {
        Args                        args;
        FormRun                     formRun;

        args = new Args();
        args.caller(sdForm);
        args.record(TaxReportHierarchyNode_IN::find(selectedNode.parmRecId()));
        formRun = new MenuFunction(menuitemDisplayStr(TaxTrans), MenuItemType::Display).create(args);
        formRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>TaxReportHierarchyController_IN</c> for given parameters.
    /// </summary>
    /// <param name="_instance">
    /// The instance of <c>TaxReportHierarchyInstance_IN</c>.
    /// </param>
    /// <param name="_sdForm">
    /// The instance of <c>Form</c>.
    /// </param>
    /// <returns>
    /// A new instance of <c>TaxReportHierarchyController_IN</c>
    /// </returns>
    public static TaxReportHierarchyController_IN construct(
        TaxReportHierarchyInstance_IN _instance,
        Object _sdForm)
    {
        TaxReportHierarchyController_IN controller;

        controller = new TaxReportHierarchyController_IN(_instance, _sdForm);

        controller.reportSelectedNode(_instance.rootNode().parmRecId());

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeCustomProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the requested node and adds status to be displayed in the tree node.
    /// </summary>
    /// <param name = "id"></param>
    /// <returns></returns>
    public Array getNodeCustomProperties(int64 id)
    {
        Array properties = new Array(Types::String);
        TaxReportHrchyNode_IN     node;
        int                 idx = 1;

        node = hierarchy.findNode(id);

        properties.value(idx, node.parmEnable() ? node.parmEnableStr("@SYS70338") : node.parmEnableStr("@SYS70337"));

        return properties;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>