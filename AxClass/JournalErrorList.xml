<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalErrorList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalErrorList</c> class is a part of the error handling capability in the journal
///    framework.
/// </summary>
// This class is base for the error list classes
abstract class JournalErrorList
{
    JournalTableData    journalTableData;

    RecordSortedList    cacheJournalError;

    JournalError        journalError;

    boolean             firstCalled;
    boolean             selectDbCalled;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
        public boolean add(JournalError _journalError)
    {
        return cacheJournalError.ins(_journalError,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
        public Integer count()
    {
        return cacheJournalError.len();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDb</Name>
				<Source><![CDATA[
        public void deleteDb(Voucher _voucher = '')
    {
        ttsbegin;

        delete_from journalError
            where journalError.RefTableId   == journalTableData.journalTable().TableId
              &&  journalError.JournalId    == journalTableData.journalTable().JournalId
              && (journalError.Voucher      == _voucher || ! _voucher);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
        public boolean first()
    {
        if (! this.selectDbCalled())
        {
            this.initDb();
        }

        firstCalled = true;

        return cacheJournalError.first(journalError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDb</Name>
				<Source><![CDATA[
        abstract public void initDb()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDb</Name>
				<Source><![CDATA[
        public void insertDb()
    {
        ttsbegin;

        if (this.first())
        {
            do
            {
                this.item().insert();
            } while (this.next());
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>item</Name>
				<Source><![CDATA[
        public JournalError item()
    {
        return journalError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(JournalTableData _journalTableData)
    {
        journalTableData    = _journalTableData;
        cacheJournalError   = new RecordSortedList(tableNum(JournalError));
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
        public boolean next()
    {
        if (! this.selectDbCalled())
        {
            this.initDb();
        }

        if (! firstCalled)
        {
            return this.first();
        }

        return cacheJournalError.next(journalError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        container c = conNull();

        if (this.first())
        {
            do
            {
                c += [this.item().data()];
            } while (this.next());
        }

        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
        public boolean remove()
    {
        return cacheJournalError.del(journalError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDb</Name>
				<Source><![CDATA[
        public void selectDb(
        JournalTableMap     _journalTable,
        boolean             _voucherInfolog)
    {
        JournalError            journalErrorTmp;

        while select journalErrorTmp
            where journalErrorTmp.RefTableId   == _journalTable.TableId
               && journalErrorTmp.JournalId    == _journalTable.JournalId
               && (
                  (journalErrorTmp.LineNum     != 0 && ! _voucherInfolog)
               || (journalErrorTmp.LineNum     == 0 &&   _voucherInfolog)
                  )
        {
            this.add(journalErrorTmp);
        }

        this.selectDbCalled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDbCalled</Name>
				<Source><![CDATA[
        public boolean selectDbCalled(boolean _selectDbCalled = selectDbCalled)
    {
        selectDbCalled = _selectDbCalled;
        return selectDbCalled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unPack</Name>
				<Source><![CDATA[
        public void unPack(container _packedClass)
    {
        Integer i;

        for (i=1; i <= conLen(_packedClass); i++)
        {
            this.add(conPeek(_packedClass,i));
        }

        selectDbCalled = true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>