<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximDBKUpd_Drawback_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim DBK update drawback class.
/// </summary>
class EximDBKUpd_Drawback_IN extends EximDBKUpdate_IN
{
    DimensionDefault    dimensionDefault;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertDBKSchemesHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the DBK schemes header information.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertDBKSchemesHeader()
    {
        EximDBKSchemesTable_IN  newDBKSchemesTable;
        NumberSeq               numSeq;
        NumberSequenceReference numberSequenceReference;
        EximPorts_IN            eximPort;
        CustInvoiceTrans            custInvoiceTrans;
        CustomsShippingBillTrans_IN customsShippingBillTransLoc;

        select DefaultDimension from custInvoiceTrans
            join recId from customsShippingBillTransLoc
             where custInvoiceTrans.InventTransId   == customsShippingBillTransLoc.InventTransId
               && custInvoiceTrans.InvoiceId        == customsShippingBillTransLoc.InvoiceId
               && custInvoiceTrans.InvoiceDate      == customsShippingBillTransLoc.InvoiceDate
               && customsShippingBillTransLoc.RecId == tmpTotalDBKTrans.ShippingBillTransRecId;

        dimensionDefault = custInvoiceTrans.DefaultDimension;

        numberSequenceReference = EximParameters_IN::numRefDBKDrawbackID();

        numSeq  = NumberSeq::newGetNum(numberSequenceReference, true, false);
        if (NumberSequenceTable::find(numberSequenceReference.NumberSequenceId).Continuous == NoYes::No)
        {
            throw error(strfmt("@SYS78707", numberSequenceReference.referenceLabel(), numberSequenceReference.referenceModuleLabel()));
        }

        eximPort = EximPorts_IN::findByPortId(portId);

        newDBKSchemesTable.DrawbackID        = numSeq.num();
        newDBKSchemesTable.DrawbackDateTime  = transDateTime;
        newDBKSchemesTable.EximPorts         = eximPort.RecId;
        newDBKSchemesTable.FromDateTime      = fromDateTime;
        newDBKSchemesTable.ToDateTime        = toDateTime;
        newDBKSchemesTable.Status            = EximDBKTransStatus_IN::Applied;
        newDBKSchemesTable.BankAccount       = eximPort.dbkBankAccount;
        newDBKSchemesTable.CustAccount       = eximPort.dbkCustAccount
                                             ? eximPort.dbkCustAccount
                                             : "";

        if (eximPort.dbkCustAccount)
        {
            newDBKSchemesTable.ReceivableLedgerDimension = 0;
        }
        else
        {
            newDBKSchemesTable.ReceivableLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(EximParameters_IN::find().dbkReceivableLedgerDimension, dimensionDefault);
        }

        newDBKSchemesTable.DetailLevel       = DetailSummary::Detail;
        newDBKSchemesTable.TransDateTime     = DateTimeUtil::getSystemDateTime();
        newDBKSchemesTable.insert();

        this.parmDBKSchemesTable(newDBKSchemesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDBKSchemesLine</Name>
				<Source><![CDATA[
    private void insertDBKSchemesLine(TmpEximTotalDBKTrans_IN _tmpTotalDBKTrans)
    {
        EximDBKSchemesLine_IN   newDBKSchemesLine;

        newDBKSchemesLine.AllowedDrawback        = _tmpTotalDBKTrans.AllowedDrawback;
        newDBKSchemesLine.MarkSelect             = NoYes::Yes;
        newDBKSchemesLine.AmountToSettle         = _tmpTotalDBKTrans.AllowedDrawback;
        newDBKSchemesLine.Status                 = _tmpTotalDBKTrans.AllowedDrawback ? EximDBKTransStatus_IN::Applied : EximDBKTransStatus_IN::Closed;
        newDBKSchemesLine.DrawbackRate           = _tmpTotalDBKTrans.DrawbackRate;
        newDBKSchemesLine.ValueCap               = _tmpTotalDBKTrans.ValueCap;
        newDBKSchemesLine.Unit                   = _tmpTotalDBKTrans.Unit;
        newDBKSchemesLine.DefaultDimension       = _tmpTotalDBKTrans.DefaultDimension;
        newDBKSchemesLine.SchemesTableRecId      = dbkSchemesTable.RecId;
        newDBKSchemesLine.ShippingBillTransRecId = _tmpTotalDBKTrans.ShippingBillTransRecId;
        newDBKSchemesLine.insert();

        totalDrawbackAllowed += newDBKSchemesLine.AllowedDrawback;

        this.parmDBKSchemesLine(newDBKSchemesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDBKTrans</Name>
				<Source><![CDATA[
    private void insertDBKTrans()
    {
        EximDBKTrans_IN newDBKTrans;

        newDBKTrans.Status            = EximDBKStatus_IN::Drawback;
        newDBKTrans.Voucher           = voucher;
        newDBKTrans.TransDate         = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(transDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        newDBKTrans.Amount            = totalDrawbackAllowed;
        newDBKTrans.SchemesTableRecId = dbkSchemesTable.RecId;
        newDBKTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The run method of the instance.
    /// </summary>
    protected void run()
    {
        #OCCRetryCount

        try
        {
            EximDBKUpd_Drawback_IN::runOnServer(portId,
                                                productGroup,
                                                fromDateTime,
                                                toDateTime,
                                                transDateTime,
                                                detailSummary,
                                                tmpTotalDBKTrans);

            info("@GLS62008");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>EximDBKUpd_Drawback_IN</c> class.
    /// </summary>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    protected boolean validate()
    {
        EximParameters_IN   eximParameters;
        EximPorts_IN        eximPortsLoc = EximPorts_IN::findByPortId(portId);
        boolean             ret;

        ret = super();

        eximParameters = EximParameters_IN::find();

        if (ret
            && !eximPortsLoc.dbkCustAccount
            && !eximParameters.dbkReceivableLedgerDimension)
        {
            ret = checkFailed(strfmt("@GLS61987", eximPortsLoc.PortId));
        }

        if (ret
            && !eximParameters.dbkBenefitLedgerDimension)
        {
            ret = checkFailed(strfmt("@GLS62039", fieldpname(EximParameters_IN, dbkBenefitLedgerDimension)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalLine</Name>
				<Source><![CDATA[
    private void writeJournalLine()
    {
        LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtensionIN;

        ledgerJournalTrans.AmountCurDebit        = dbkSchemesLine.AmountToSettle;
        ledgerJournalTrans.OffsetAccountType     = LedgerJournalACType::Ledger;
        ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(EximParameters_IN::find().dbkBenefitLedgerDimension, dimensionDefault);
        ledgerJournalTrans.TransDate             = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(transDateTime, DateTimeUtil::getUserPreferredTimeZone()));

        if (ledgerJournalTrans.validateWrite())
        {
            ledgerJournalTrans.insert();
        }
        if (ledgerJournalTrans.RecId)
        {
            ledgerJournalTransTaxExtensionIN.LedgerJournalTrans = ledgerJournalTrans.RecId;
            ledgerJournalTransTaxExtensionIN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on server side.
    /// </summary>
    /// <param name="_portId">
    /// The port id.
    /// </param>
    /// <param name="_productGroup">
    /// The product group.
    /// </param>
    /// <param name="_fromDateTime">
    /// The from date time.
    /// </param>
    /// <param name="_toDateTime">
    /// The to date time.
    /// </param>
    /// <param name="_transDateTime">
    /// The transaction date time.
    /// </param>
    /// <param name="_detailSummary">
    /// The detail summary.
    /// </param>
    /// <param name="_tmpTotalsDBKTrans">
    /// The tmp totals DBK transaction.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runOnServer(
        EximPortId_IN           _portId,
        EximProductGroup_IN     _productGroup,
        FromDateTime            _fromDateTime,
        ToDateTime              _toDateTime,
        TransDateTime           _transDateTime,
        DetailSummary           _detailSummary,
        TmpEximTotalDBKTrans_IN _tmpTotalsDBKTrans)
    {
        EximDBKUpd_Drawback_IN  dbkDrawBack;

        dbkDrawBack = new EximDBKUpd_Drawback_IN();

        dbkDrawBack.parmPortId(_portId);
        dbkDrawBack.parmProductGroup(_productGroup);
        dbkDrawBack.parmFromDateTime(_fromDateTime);
        dbkDrawBack.parmToDateTime(_toDateTime);
        dbkDrawBack.parmTransDateTime(_transDateTime);
        dbkDrawBack.parmDetailSummary(_detailSummary);
        dbkDrawBack.parmTmpEximTotalDBKTrans(_tmpTotalsDBKTrans);

        if (dbkDrawBack.validate())
        {
            ttsbegin;
            dbkDrawBack.insertDBKSchemesHeader();

            dbkDrawBack.ledgerVoucherTransCreate();

            dbkDrawBack.createJournal();

            while select _tmpTotalsDBKTrans
                    where _tmpTotalsDBKTrans.MarkSelect == NoYes::Yes
            {
                dbkDrawBack.insertDBKSchemesLine(_tmpTotalsDBKTrans);
                if (_tmpTotalsDBKTrans.AllowedDrawback)
                {
                    dbkDrawBack.initJournalLine();
                    dbkDrawBack.writeJournalLine();
                }
            }

            dbkDrawBack.insertDBKTrans();

            EximDBKSchemesTable_IN::updateTransHeaderStatus(dbkDrawBack.parmDBKSchemesTable().RecId);

            dbkDrawBack.ledgerVoucherTransEnd();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>