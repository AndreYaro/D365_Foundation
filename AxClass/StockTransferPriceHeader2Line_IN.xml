<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StockTransferPriceHeader2Line_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>StockTransferPriceHeader2Line_IN</c> class is updating the transfer order lines according transfer order header.
/// for sales quotations.
/// </summary>
public class StockTransferPriceHeader2Line_IN extends RunBase
{
    private NoYes recalculateLines;
    private NoYes changeLinesPriceType;

    private boolean priceTypeChanged;
    private boolean transferTypeChanged;

    DialogField dialogRecalculateLines;
    DialogField dialogChangeLinesPriceType;

    private boolean promptReturnValue;

    private InventTransferTable inventTransferTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addGroup("@ApplicationSuite_Localization:TransferSettingsFromHeaderToLines");
        dialogChangeLinesPriceType = dialog.addFieldValue(
            enumStr(NoYes), 
            changeLinesPriceType, 
            "@ApplicationSuite_Localization:UpdateLinesPriceType");
        dialogChangeLinesPriceType.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(StockTransferPriceHeader2Line_IN, changeLinesPriceTypeModified),
            this);

        dialogRecalculateLines = dialog.addFieldValue(
            enumStr(NoYes), 
            recalculateLines, 
            "@ApplicationSuite_Localization:RecalculateLinesCostPrice");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeLinesPriceTypeModified</Name>
				<Source><![CDATA[
    private boolean changeLinesPriceTypeModified(FormCheckBoxControl _changeLinesPriceTypeCtrl)
    {
        if (!_changeLinesPriceTypeCtrl.checked())
        {
            dialogRecalculateLines.value(NoYes::No);
        }

        dialogRecalculateLines.enabled(_changeLinesPriceTypeCtrl.checked());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        changeLinesPriceType = NoYes::Yes;
        recalculateLines = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        changeLinesPriceType = dialogChangeLinesPriceType.value();
        recalculateLines = dialogRecalculateLines.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExecutePrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>StockTransferPriceHeader2Line_IN</c> class and executes the <c>prompt</c> instance method.
    /// </summary>
    /// <param name="_inventTransferTable">A buffer of the <c>InventTransferTable</c> table./// </param>
    /// <returns>
    /// An initiated instance the <c>StockTransferPriceHeader2Line_IN</c> class if any fields are to be updated; otherwise, null.
    /// </returns>
    public static StockTransferPriceHeader2Line_IN newExecutePrompt(InventTransferTable _inventTransferTable)
    {
        StockTransferPriceHeader2Line_IN stockTransferPriceHeader2Line = new StockTransferPriceHeader2Line_IN();
        stockTransferPriceHeader2Line.inventTransferTable = _inventTransferTable;

        stockTransferPriceHeader2Line.parmPromptReturnValue(stockTransferPriceHeader2Line.prompt());

        if (!stockTransferPriceHeader2Line.isToUpadte())
        {
            stockTransferPriceHeader2Line = null;
        }

        return stockTransferPriceHeader2Line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isToUpadte</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are changes in the header that requires line changes.
    /// </summary>
    /// <returns>
    /// true if lines should be updated; otherwise, false.
    /// </returns>
    public boolean isToUpadte()
    {
        return recalculateLines || changeLinesPriceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPromptReturnValue</Name>
				<Source><![CDATA[
    public boolean parmPromptReturnValue(boolean _promptReturnValue = promptReturnValue)
    {
        promptReturnValue = _promptReturnValue;
        return promptReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalculateLines</Name>
				<Source><![CDATA[
    public NoYes parmRecalculateLines(NoYes _recalculateLines = recalculateLines)
    {
        recalculateLines = _recalculateLines;
        return recalculateLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeLinesPriceType</Name>
				<Source><![CDATA[
    public NoYes parmChangeLinesPriceType(NoYes _changeLinesPriceType = changeLinesPriceType)
    {
        changeLinesPriceType = _changeLinesPriceType;
        return changeLinesPriceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferTable</Name>
				<Source><![CDATA[
    public InventTransferTable parmInventTransferTable(InventTransferTable _inventTransferTable = inventTransferTable)
    {
        inventTransferTable = _inventTransferTable;
        return inventTransferTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean ret;

        if (inventTransferTable.hasLines() && 
            !inventTransferTable.hasTransferJournal() &&
            this.isFieldChanged(fieldNum(InventTransferTable, PriceType_IN)) &&
            ! this.isFieldChanged(fieldNum(InventTransferTable, TransferType_IN)))
        {
            ret = super();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@ApplicationSuite_Localization:UpdateTransferOrderLines";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsbegin;

        if (changeLinesPriceType)
        {
            this.changeLinesPriceType();
        }

        if (recalculateLines)
        {
            this.recalculateLines();
        }
        ttscommit;

        FormDataSource formDataSource = inventTransferTable.dataSource();
        if (formDataSource)
        {
            FormRun formRun = formDataSource.formRun();

            FormDataSource inventTransferLine_DS = formRun.dataSource(formDataSourceStr(InventTransferOrders, InventTransferLine));
            inventTRansferLine_DS.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeLinesPriceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Promotes header price type to lines.
    /// </summary>
    protected void changeLinesPriceType()
    {
        InventTransferLine inventTransferLine;
        InventTransferLine_IN inventTransferLineIN;

        update_recordset InventTransferLineIN
            setting PriceType = inventTransferTable.PriceType_IN
            exists join inventTransferLine
                where inventTransferLine.RecId == inventTransferLineIN.InventTransferLine
                    && inventTransferLine.TransferId == inventTransferTable.TransferId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates line fields that depend on changed fields.
    /// </summary>
    protected void recalculateLines()
    {
        InventTransferLine inventTransferLine;
        InventTransferLine_IN inventTransferLineIN;
        InventDim inventDim;

        while select forupdate inventTransferLineIN
            join inventTransferLine
                where inventTransferLine.TransferId == inventTransferTable.TransferId
                    && inventTransferLineIN.InventTransferLine == inventTransferLine.RecId
            join inventDim
                where inventDim.inventDimId == inventTransferLine.inventDimId
        {
            inventTransferLineIN.recalculateStockTransferValue(inventTransferLine, inventDim);
            inventTransferLineIN.update();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldChanged</Name>
				<Source><![CDATA[
    private boolean isFieldChanged(FieldId _fieldId)
    {
        return inventTransferTable.(_fieldId) != inventTransferTable.orig().(_fieldId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>