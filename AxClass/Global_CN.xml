<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Global_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains utilitiy methods which are consumed by China localization.
/// </summary>
public static class Global_CN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>numeralsToTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Convert numerals to Chinese format text.
    /// </summary>
    /// <param name="_number">
    ///     The numeral to be converted.
    /// </param>
    /// <param name="_type">
    ///     Specify whether to use Chinese simplified language.
    /// </param>
    /// <param name="_isMoney">
    ///     Specify whether to convert as Chinese money format.
    /// </param>
    /// <param name="_numLen">
    ///     The number length that should be converted.
    /// </param>
    /// <returns>
    ///     The converted string.
    /// </returns>
    static TempStr numeralsToTxt(RealBase _number, NoYes _type, NoYes _isMoney, Counter _numLen)
    {
        TempStr strNum[10];
        TempStr strUnitSegmentDetail[16];
        TempStr strUnitDecimalPart[2];
        TempStr strUnitSegment[6];

        TempStr result;
        TempStr strFirst;
        TempStr strEnd;

        Counter lngNumberLen;
        Counter lngI;
        Counter lngJ;
        Counter pos;

        TempStr strNumber;
        TempStr strTmp;

        #MacroLib.Num2Char_CN
        #define.DecimalPrecisionOfAmount(2)

        TempStr cutRightZero(TempStr _strNumber)
        {
            Counter     tempLen;
            Counter     i;
            TempStr     tempStr;
            TempStr     returnStr;

            tempLen   = strLen(_strNumber);
            returnStr = _strNumber;
            for (i = tempLen; i >= 0; i--)
            {
                tempStr = strDel(returnStr, 1, i - 1);
                if (tempStr == #Decimal)
                {
                    returnStr = strDel(returnStr, i, i);
                    return returnStr;
                }
                else
                {
                    if (tempStr == #Zero)
                    {
                        returnStr = strDel(returnStr, i, i - 1);
                    }
                    else
                    {
                        return returnStr;
                    }
                }
            }
            return '';
        }

        TempStr decimalfraction2chinese(TempStr _strDecimal,NoYes _isMon)
        {
            Counter lntgJ;
            Counter decimalLen;
            TempStr tempEndstr;

            decimalLen = strLen(_strDecimal);

            for (lntgJ = decimalLen; lntgJ >=1; lntgJ--)
            {
                if (str2int(subStr(_strDecimal, strLen(_strDecimal), -1)) == 0)
                {
                    _strDecimal = subStr(_strDecimal, 1, strLen(_strDecimal) - 1);
                }
                else
                {
                    break;
                }
            }

            decimalLen = strLen(_strDecimal);
            tempEndstr = '';

            for (lntgJ = 1; lntgJ <= decimalLen; lntgJ++)
            {
                if (str2int(subStr(_strDecimal, lntgJ, 1)) == 0)
                {
                    if (_isMon == NoYes::No)
                    {
                        if (lntgJ == decimalLen)
                        {
                            tempEndstr = tempEndstr;
                        }
                        else
                        {
                            tempEndstr = tempEndstr + strNum[10];
                        }
                    }
                    else
                    {
                        if (lntgJ == 1)
                        {
                            tempEndstr = tempEndstr + strNum[10]+strUnitDecimalPart[1];
                        }
                    }
                }
                else
                {
                    if (_isMon == NoYes::Yes)
                    {
                        tempEndstr = tempEndstr + strNum[str2int(subStr(_strDecimal, lntgJ, 1))] + strUnitDecimalPart[lntgJ];
                        if (decimalLen == 1)
                        {
                            tempEndstr = tempEndstr + #Integer;
                        }
                    }
                    else
                    {
                        tempEndstr = tempEndstr + strNum[str2int(subStr(_strDecimal, lntgJ, 1))];
                    }
                }
            }
            return tempEndstr;
        }

        Counter getDecimalLen(RealBase _numb, Counter _numL)
        {
            Counter lntgI;
            Counter decimalLen;
            TempStr lngTmp;

            lngTmp = strLTrim(strRTrim(num2str(_numb, 10, #DecimalPrecisionOfAmount, 1, 0)));
            lntgI = strFind(lngTmp,#Decimal,1,strLen(lngTmp));
            decimalLen  = _numL - lntgI;
            if (decimalLen < 0)
            {
                decimalLen = 0;
            }
            return decimalLen;
        }

        TempStr keep2digits(TempStr _strNumber)
        {
            Counter lntgI;
            Counter numberLen;
            TempStr strTemp;
            TempStr strDotAfter;

            numberLen = strLen(_strNumber);
            lntgI     = strFind(_strNumber, #Decimal, 1, numberLen);
            if (lntgI)
            {
                strTemp      = _strNumber + #Zeros;
                strDotAfter = subStr(strTemp, lntgI + 1, str2int(#NumTwo));
                if (strDotAfter == #Zeros)
                {
                    strTemp = subStr(_strNumber, 1, lntgI-1);
                }
                else
                {
                    strTemp = subStr(strTemp, 1, lntgI + str2int(#NumTwo));
                }
            }
            return strLTrim(strRTrim(strTemp));
        }

        TempStr number2Chinese(TempStr _strNumber)
        {
            Counter strNumberLen;
            Counter lntgI;
            Counter lntgJ;
            TempStr strTemp;
            TempStr resultNumber;

            resultNumber = '';

            strNumberLen=strLen(_strNumber);
            if (strNumberLen == 0)
            {
                return '';
            }
            else
            {
                lntgI = 1;
                for (lntgJ = strNumberLen; lntgJ >= 1; lntgJ--)
                {
                    strTemp=subStr(_strNumber, lntgJ, -1);
                    if (strTemp == #Zero)
                    {
                        if (resultNumber != '')
                        {
                            if (subStr(_strNumber,lntgJ+1,-1) != #Zero)
                            {
                                resultNumber = strNum[10] + resultNumber;
                            }
                        }
                    }
                    else
                    {
                        resultNumber = strNum[str2int(strTemp)] + strUnitSegmentDetail[lntgI] + resultNumber;
                    }
                    lntgI = lntgI + 1;
                }
            }
            return resultNumber;
        }

        void setUnit(NoYes _istype)
        {
            if (_istype == NoYes::No)
            {
                strNum[1] = #Cone;
                strNum[2] = #Ctwo;
                strNum[3] = #Cthree;
                strNum[4] = #Cfour;
                strNum[5] = #Cfive;
                strNum[6] = #Csix;
                strNum[7] = #Cseven;
                strNum[8] = #Ceight;
                strNum[9] = #Cnine;
                strNum[10] = #Czero;

                strUnitSegmentDetail[1] = '';
                strUnitSegmentDetail[2] = #Cten;
                strUnitSegmentDetail[3] = #Chundred;
                strUnitSegmentDetail[4] = #Cthousand;
            }
            else if (_istype == NoYes::Yes)
            {
                strNum[1] = #Lone;
                strNum[2] = #Ltwo;
                strNum[3] = #Lthree;
                strNum[4] = #Lfour;
                strNum[5] = #Lfive;
                strNum[6] = #Lsix;
                strNum[7] = #Lseven;
                strNum[8] = #Leight;
                strNum[9] = #Lnine;
                strNum[10] = #Lzero;

                strUnitSegmentDetail[1] = '';
                strUnitSegmentDetail[2] = #Lten;
                strUnitSegmentDetail[3] = #Lhundred;
                strUnitSegmentDetail[4] = #Lthousand;
            }
        }

        void setUnitB(NoYes _isMony)
        {
            if (_isMony == NoYes::Yes)
            {
                strUnitDecimalPart[1] = #Penny;
                strUnitDecimalPart[2] = #Cent;
            }
            else
            {
                strUnitDecimalPart[1] = '';
                strUnitDecimalPart[2] = '';
            }
        }

        void setUnitC(NoYes _isMony, NoYes _istype)
        {
            if (_isMony == NoYes::Yes)
            {
                if (_istype == NoYes::No)
                {
                    strUnitSegment[1] = #Cyuan;
                }
                else
                {
                    strUnitSegment[1] = #Lyuan;
                }
            }
            else
            {
                strUnitSegment[1] = '';
            }
            strUnitSegment[2] = #CMillion;
            strUnitSegment[3] = #CBillion;
            strUnitSegment[4] = #CMillion;
        }

        if (_numLen > str2int(#NumSixteen))
        {
            warning(strFmt("@GLS54781", #NumSixteen));
            return '';
        }

        setUnit(_type);
        setUnitB(_isMoney);
        setUnitC(_isMoney, _type);

        if (_isMoney == NoYes::Yes)
        {
            _number = round(_number, Currency::find(Ledger::accountingCurrency()).RoundingPrecision);
        }

        if (_number == 0)
        {
            if (_isMoney == NoYes::Yes)
            {
                result = strNum[10] + strUnitSegment[1] + #Integer;
            }
            else
            {
                result = strNum[10];
            }
        }
        else
        {
            strNumber    = num2str(_number, str2int(#NumTen), getDecimalLen(_number, _numLen),1 ,0);
            strNumber    = strLTrim(strRTrim(strNumber));
            pos          = strFind(strNumber, '.', 1, strLen(strNumber));
            if (pos != 0)
            {
                strNumber = cutRightZero(strNumber);
            }
            lngNumberLen = strLen(strNumber);
            lngI = strFind(strNumber, #Decimal, 1, lngNumberLen);
            if (_isMoney == NoYes::Yes)
            {
                if (!lngI)
                {
                    strEnd = #Integer;
                }
                else
                {
                    strEnd = '';
                    strNumber = keep2digits(strNumber) ;
                }
            }
            else
            {
                if (!lngI)
                {
                    strEnd = '';
                }
                else
                {
                    strEnd = #Point;
                }
            }

            lngNumberLen = strLen(strNumber);

            if (subStr(strNumber, 1,1) == #Minus)
            {
                strFirst = #Negative;
                strNumber = strDel(strNumber, 1, 1);
                lngNumberLen = lngNumberLen - 1;
            }
            else
            {
                strFirst = '';
            }

            lngI = strFind(strNumber, #Decimal, 1, lngNumberLen);

            if (lngI)
            {
                strTmp = subStr(strNumber, lngI + 1, lngNumberLen);

                strEnd=strEnd + decimalfraction2chinese(strTmp, _isMoney);

                strNumber = subStr(strNumber,1, lngI - 1);
                lngNumberLen = strLen(strNumber);
            }

            result = '';

            lngJ = real2int(lngNumberLen / str2int(#NumFour));

            if (lngJ * str2int(#NumFour) < lngNumberLen)
            {
                lngJ = lngJ + 1;
            }

            for (lngI = 0; lngI < lngJ; lngI++)
            {
                if (lngI != lngJ - 1)
                {
                    result = number2Chinese(subStr(strNumber, lngNumberLen - lngI * str2int(#NumFour), -str2int(#NumFour))) + strUnitSegment[lngI + 1] + result;
                }
                else
                {
                    result = number2Chinese(subStr(strNumber, 1, lngNumberLen - lngI * str2int(#NumFour))) + strUnitSegment[lngI + 1] + result;
                }
            }
        }

        // Insert zero when cmilliton is empty but not empty after cmillion.
        lngNumberLen = strLen(result);
        lngI = strScan(result, strUnitSegment[3] + strUnitSegment[2], 1, lngNumberLen);
        if (lngI == lngNumberLen - 1
        || (lngI + 2 <= lngNumberLen
            && (subStr(result, lngI + 2, 1)     == #Decimal
                || subStr(result, lngI + 2, 1)  == strUnitSegment[1]
                || subStr(result, lngI + 2, 1)  == strNum[10])))
        {
            result = strReplace(result, strUnitSegment[3] + strUnitSegment[2], strUnitSegment[3]);
        }
        else
        {
            result = strReplace(result, strUnitSegment[3] + strUnitSegment[2], strUnitSegment[3] + strNum[10]);
        }

        if (result == strUnitSegment[1] && _isMoney == NoYes::Yes )
        {
            result = strNum[10] + result;
        }

        if (strLen(result) == 0 && _isMoney == NoYes::No)
        {
            result = strNum[10] + result;
        }

        result = strFirst + result + strEnd;

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>