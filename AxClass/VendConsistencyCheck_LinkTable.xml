<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendConsistencyCheck_LinkTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendConsistencyCheck_LinkTable extends VendConsistencyCheck implements BatchRetryable
{
    boolean releaseUpdate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkVendInvoicePurchLink</Name>
				<Source><![CDATA[
    void checkVendInvoicePurchLink()
    {
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;
        VendInvoicePurchLink vendInvoicePurchLink;
        VendInvoicePurchLink newvendInvoicePurchLink;
        RecordInsertList arrayInsert = new RecordInsertList(tablenum(VendInvoicePurchLink));

        setprefix(strfmt("@SYS26373", tableid2pname(tablenum(VendInvoicePurchLink))));
        progress.setText(getprefix(),2);
        progress.setTotal(2,2);
        progress.incCount(1,2);

        if (this.checkFix() == CheckFix::Fix || releaseUpdate)
        {
            ttsbegin;

            while select vendInvoiceTrans
                group by OrigPurchId, InvoiceDate, InvoiceId, NumberSequenceGroup, PurchID, InternalInvoiceId

                join vendInvoiceJour
                group by ParmId, PurchId, InvoiceId, InvoiceDate, NumberSequenceGroup, InvoiceAccount, OrderAccount, InternalInvoiceId
                    where vendInvoiceJour.InvoiceId == vendInvoiceTrans.InvoiceId &&
                            vendInvoiceJour.InvoiceDate == vendInvoiceTrans.InvoiceDate &&
                            vendInvoiceJour.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup &&
                            vendInvoiceJour.PurchId == vendInvoiceTrans.PurchID

                notexists join vendInvoicePurchLink
                where vendInvoicePurchLink.OrigPurchId == vendInvoiceTrans.OrigPurchId
                  && vendInvoicePurchLink.InvoiceDate == vendInvoiceTrans.InvoiceDate
                  && vendInvoicePurchLink.InvoiceId == vendInvoiceTrans.InvoiceId
            {
                if (! releaseUpdate)
                {
                    setprefix(#prefixField(vendInvoiceTrans,origPurchId));
                    warning("@SYS78896");
                    this.updateCorrected();
                }

                newvendInvoicePurchLink.initFromVendInvoiceJour(vendInvoiceJour);
                newvendInvoicePurchLink.OrigPurchId = vendInvoiceTrans.OrigPurchId;
                arrayInsert.add(newvendInvoicePurchLink);
            }
            if (! releaseUpdate)
            {
                this.updateNotCorrected();
            }
            if (arrayInsert.usageCount())
                arrayInsert.insertDatabase();

            ttscommit;
        }
        else
        {
            while select vendInvoiceTrans
                group by OrigPurchId, PurchID, InvoiceId, InvoiceDate, InternalInvoiceId
                notexists join vendInvoicePurchLink
                    where vendInvoicePurchLink.OrigPurchId == vendInvoiceTrans.OrigPurchId &&
                          vendInvoicePurchLink.InvoiceId == vendInvoiceTrans.InvoiceId &&
                          vendInvoicePurchLink.InvoiceDate == vendInvoiceTrans.InvoiceDate
            {
                setprefix(#prefixField(vendInvoiceTrans,origPurchId));
                warning("@SYS78896");
            }
            this.updateNotCorrected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendPackingSlipPurchLink</Name>
				<Source><![CDATA[
    void checkVendPackingSlipPurchLink()
    {
        VendPackingSlipJour vendPackingSlipJour;
        VendPackingSlipTrans vendPackingSlipTrans;
        VendPackingSlipPurchLink vendPackingSlipPurchLink;
        VendPackingSlipPurchLink newVendPackingSlipPurchLink;
        RecordInsertList arrayInsert = new RecordInsertList(tablenum(VendPackingSlipPurchLink));

        setprefix(strfmt("@SYS26373", tableid2pname(tablenum(VendPackingSlipPurchLink))));
        progress.setText(getprefix(),2);
        progress.setTotal(3,2);
        progress.incCount(1,2); // update

        if (this.checkFix() == CheckFix::Fix || releaseUpdate)
        {
            ttsbegin;
                delete_from vendPackingSlipPurchLink
                    where vendPackingSlipPurchLink.VendPackingSlipJour == 0;
            ttscommit;

            progress.incCount(1,2);

            vendPackingSlipPurchLink.clear();

            ttsbegin;

            while select vendPackingSlipTrans
                group by OrigPurchid, VendPackingSlipJour
                join vendPackingSlipJour
                group by PurchId, PackingSlipId, DeliveryDate, OrderAccount, InvoiceAccount, RecId
                where vendPackingSlipJour.RecId == vendPackingSlipTrans.VendPackingSlipJour
                notexists join vendPackingSlipPurchLink
                    where vendPackingSlipPurchLink.OrigPurchId == vendPackingSlipTrans.OrigPurchid &&
                          vendPackingSlipPurchLink.PackingSlipId == vendPackingSlipTrans.PackingSlipId &&
                          vendPackingSlipPurchLink.DeliveryDate == vendPackingSlipTrans.DeliveryDate
            {
                if (! releaseUpdate)
                {
                    setprefix(#prefixField(vendPackingSlipTrans,origPurchId));
                    warning(strfmt("@SYS78913",fieldpname(VendPackingSlipPurchLink, VendPackingSlipJour)));
                    this.updateCorrected();
                }

                newVendPackingSlipPurchLink.clear();
                newVendPackingSlipPurchLink.initFromVendPackingSlipJour(vendPackingSlipJour);
                newVendPackingSlipPurchLink.OrigPurchId = vendPackingSlipTrans.OrigPurchid;
                arrayInsert.add(newVendPackingSlipPurchLink);
            }
            if (! releaseUpdate)
            {
                this.updateNotCorrected();
            }
            if (arrayInsert.usageCount())
                arrayInsert.insertDatabase();

            ttscommit;
        }
        else
        {
            while select vendPackingSlipTrans
                group by OrigPurchid, PackingSlipId, DeliveryDate, VendPackingSlipJour
                notexists join vendPackingSlipPurchLink
                    where vendPackingSlipPurchLink.OrigPurchId == vendPackingSlipTrans.OrigPurchid &&
                          vendPackingSlipPurchLink.PackingSlipId == vendPackingSlipTrans.PackingSlipId &&
                          vendPackingSlipPurchLink.DeliveryDate == vendPackingSlipTrans.DeliveryDate
            {
                setprefix(#prefixField(vendPackingSlipTrans,origPurchId));
                warning("@SYS78896");
            }
            this.updateNotCorrected();
            while select vendPackingSlipPurchLink
                where vendPackingSlipPurchLink.VendPackingSlipJour == 0
            {
                setprefix(#prefixField(vendPackingSlipPurchLink,origPurchId));
                warning(strfmt("@SYS78913",fieldpname(VendPackingSlipPurchLink, VendPackingSlipJour)));
            }
            this.updateNotCorrected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendReceiptsListPurchLink</Name>
				<Source><![CDATA[
    void checkVendReceiptsListPurchLink()
    {
        VendReceiptsListJour vendReceiptsListJour;
        VendReceiptsListTrans vendReceiptsListTrans;
        VendReceiptsListPurchLink vendReceiptsListPurchLink;
        VendReceiptsListPurchLink newVendReceiptsListPurchLink;
        RecordInsertList arrayInsert = new RecordInsertList(tablenum(VendReceiptsListPurchLink));

        setprefix(strfmt("@SYS26373", tableid2pname(tablenum(VendReceiptsListPurchLink))));
        progress.setText(getprefix(),2);
        progress.setTotal(2,2);
        progress.incCount(1,2);

        if (this.checkFix() == CheckFix::Fix || releaseUpdate)
        {
            ttsbegin;

            delete_from vendReceiptsListPurchLink
                where vendReceiptsListPurchLink.ParmId == ''
                || vendReceiptsListPurchLink.InvoiceAccount == ''
                || vendReceiptsListPurchLink.OrderAccount == '';

            while select vendReceiptsListTrans
                group by PurchId, OrigPurchId, ReceiptsListId, ReceiptsListDate

                join vendReceiptsListJour
                group by ParmId,PurchId, ReceiptsListId, ReceiptsListDate, VendAccount, InvoiceAccount
                where vendReceiptsListJour.PurchId == vendReceiptsListTrans.PurchId &&
                      vendReceiptsListJour.ReceiptsListId == vendReceiptsListTrans.ReceiptsListId &&
                      vendReceiptsListJour.ReceiptsListDate == vendReceiptsListTrans.ReceiptsListDate

                notexists join vendReceiptsListPurchLink
                    where vendReceiptsListPurchLink.ReceiptsListId == vendReceiptsListJour.ReceiptsListId
                       && vendReceiptsListPurchLink.ReceiptsListDate == vendReceiptsListJour.ReceiptsListDate
                       && vendReceiptsListPurchLink.OrigPurchId == vendReceiptsListTrans.OrigPurchId

            {
                if (! releaseUpdate)
                {
                    setprefix(#prefixField(vendReceiptsListTrans,origPurchId));
                    warning("@SYS78896");
                    this.updateCorrected();
                }

                newVendReceiptsListPurchLink.clear();
                newVendReceiptsListPurchLink.initFromVendReceiptsListJour (vendReceiptsListJour);
                newVendReceiptsListPurchLink.OrigPurchId = vendReceiptsListTrans.OrigPurchId;
                arrayInsert.add(newVendReceiptsListPurchLink);
            }
            if (! releaseUpdate)
            {
                this.updateNotCorrected();
            }
            if (arrayInsert.usageCount())
                arrayInsert.insertDatabase();

            ttscommit;
        }
        else
        {
            while select vendReceiptsListTrans
                group by OrigPurchId, PurchId, ReceiptsListId, ReceiptsListDate
                notexists join vendReceiptsListPurchLink
                    where vendReceiptsListPurchLink.OrigPurchId == vendReceiptsListTrans.OrigPurchId &&
                          vendReceiptsListPurchLink.ReceiptsListId == vendReceiptsListTrans.ReceiptsListId &&
                          vendReceiptsListPurchLink.ReceiptsListDate == vendReceiptsListTrans.ReceiptsListDate
            {
                setprefix(#prefixField(vendReceiptsListTrans,origPurchId));
                warning("@SYS78896");
            }
            this.updateNotCorrected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
    public boolean hasDialog()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConsistencyCheckJob</Name>
				<Source><![CDATA[
    private void initConsistencyCheckJob()
    {
        this.parmSysConsistencyCheckJob(new SysConsistencyCheckJob());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseUpdate</Name>
				<Source><![CDATA[
    boolean parmReleaseUpdate(boolean _releaseUpdate = releaseUpdate)
    {
        releaseUpdate = _releaseUpdate;
        return releaseUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.checkVendReceiptsListPurchLink();

        this.checkVendPackingSlipPurchLink();

        this.checkVendInvoicePurchLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    public classId treeParentClassId()
    {
        return classnum(VendConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS78895";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@SYS78894";
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseUpdateVendPurchLinkTable</Name>
				<Source><![CDATA[
    static void releaseUpdateVendPurchLinkTable()
    {
        VendConsistencyCheck_LinkTable vendConsistencyCheck_LinkTable = new VendConsistencyCheck_LinkTable();

        vendConsistencyCheck_LinkTable.parmReleaseUpdate(true);
        vendConsistencyCheck_LinkTable.initConsistencyCheckJob();
        vendConsistencyCheck_LinkTable.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>