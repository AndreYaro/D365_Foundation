<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostJournalIndirectCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostJournalIndirectCost</c> class calculates the indirect costs, writes the result to
///    the <c>ProdIndirectTrans</c> table, and adds entries to the ledger voucher for additional posting.
/// </summary>
abstract class InventCostJournalIndirectCost
{
    CurrencyCode                    currencyCode;
    InventCostJournalIndirectCost   journalIndirectCost;

    Map                 inventTransIdVoucherDate2AmountPerCostGroupMap; // [inventTransId, voucher, date] -> Map{CostgroupId -> Amount}
    Map                 inventTransIdVoucherDate2PostedAmount; // [inventTransId, voucher, date] -> Amount posted to GL
    RecordInsertList    rilProdIndirectTrans; // use ProdIndirectTrans table for Production AND Purchase orders
    boolean             countryRegion_RU;
    #ISOCountryRegionCodes

    // Relation between indirect cost and the production journal line creates it.
    RecId prodJournalLineRecId;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFinancialPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts indirect cost amounts and marks the <c>ProdIndirectTrans</c> record as posted.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The <c>LedgerVoucher</c> object to use for posting.
    /// </param>
    /// <param name="_prodIndirectTrans">
    /// The <c>ProdIndirectTrans</c> record to post.
    /// </param>
    /// <param name="_stornoPhysical">
    /// True, if the the transaction should be posted as storno; otherwise, false; optional.
    /// </param>
    protected void addFinancialPosting(
        LedgerVoucher       _ledgerVoucher /*inout*/,
        ProdIndirectTrans   _prodIndirectTrans /*inout*/
        , boolean           _stornoPhysical = false
        )
    {
        // <GEERU>
        boolean                     ledgerVoucherCorrectionChanged;
        // </GEERU>

        AmountMST indirectCostAmount = CurrencyExchangeHelper::amount(_prodIndirectTrans.Amount);

        LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

        // <GEERU>
        if (countryRegion_RU)
        {
            if (indirectCostAmount < 0 && _stornoPhysical)
            {
                ledgerVoucherCorrectionChanged = ! ledgerVoucherObject.parmCorrection();
                ledgerVoucherObject.parmCorrection(true);

                _prodIndirectTrans.StornoPhysical_RU = _stornoPhysical;
            }
        }
        // </GEERU>

        // Now post them to the absorption account
        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                _prodIndirectTrans.PostingIndirectAbsorption,
                _prodIndirectTrans.IndirectAbsorptionLedgerDimension,
                currencyCode,
                -indirectCostAmount,
                exchangeRateHelper);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                _prodIndirectTrans.PostingIndirectAbsorptionOffset,
                _prodIndirectTrans.IndirectAbsorptionOffsetLedgerDimension,
                currencyCode,
                indirectCostAmount,
                exchangeRateHelper);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        // <GEERU>
        if (countryRegion_RU)
        {
            _ledgerVoucher.bondLast2_RU();

            if (ledgerVoucherCorrectionChanged)
            {
                ledgerVoucherObject.parmCorrection(! ledgerVoucherObject.parmCorrection());
            }
        }
        // </GEERU>

        _prodIndirectTrans.Posted = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPhysicalPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the estimated indirect cost amounts and marks the <c>ProdIndirectTrans</c> record as posted.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The <c>LedgerVoucher</c> object to use for posting.
    /// </param>
    /// <param name="_prodIndirectTrans">
    /// The <c>ProdIndirectTrans</c> record to post.
    /// </param>
    /// <param name="_stornoPhysical">
    /// A Boolean value that indicates whether the transaction should be posted as storno; optional.
    /// </param>
    protected void addPhysicalPosting(
        LedgerVoucher       _ledgerVoucher /*inout*/,
        ProdIndirectTrans   _prodIndirectTrans /*inout*/
        , boolean           _stornoPhysical = false
        )
    {
        // <GEERU>
        boolean                     ledgerVoucherCorrectionChanged;
        // </GEERU>

        AmountMST indirectCostAmount = CurrencyExchangeHelper::amount(_prodIndirectTrans.Amount);

        LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

        // <GEERU>
        if (countryRegion_RU)
        {
            if (_prodIndirectTrans.TransRefType == ProdTransRefType::InventTransId)
            {
                if (ledgerVoucherObject.parmCorrection())
                {
                    ledgerVoucherObject.parmCorrection(false);
                    ledgerVoucherCorrectionChanged = true;
                }

                if (indirectCostAmount < 0 && _stornoPhysical)
                {
                    ledgerVoucherCorrectionChanged = ! ledgerVoucherCorrectionChanged;
                    ledgerVoucherObject.parmCorrection(true);
                }
            }
            else
            {
                if (indirectCostAmount < 0 && _stornoPhysical)
                {
                    ledgerVoucherCorrectionChanged = ! ledgerVoucherObject.parmCorrection();
                    ledgerVoucherObject.parmCorrection(true);

                    _prodIndirectTrans.StornoPhysical_RU = _stornoPhysical;
                }
            }
        }
        // </GEERU>

        LedgerVoucherTransObject ledgerVoucherTransObject;

        ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createLedgerVoucherTransObject(
                    ledgerVoucherObject,
                    _prodIndirectTrans.PostingEstimatedIndirectAbsorption,
                    _prodIndirectTrans.EstimatedIndirectAbsorpLedgerDimension,
                    currencyCode,
                    -indirectCostAmount,
                    exchangeRateHelper);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createLedgerVoucherTransObject(
                    ledgerVoucherObject,
                    _prodIndirectTrans.PostingEstimatedIndirectAbsorptionOffset,
                    _prodIndirectTrans.EstimIndirectAbsorpOffsetLedgerDimension,
                    currencyCode,
                    indirectCostAmount,
                    exchangeRateHelper);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        // <GEERU>
        if (countryRegion_RU)
        {
            _ledgerVoucher.bondLast2_RU();

            if (ledgerVoucherCorrectionChanged)
            {
                ledgerVoucherObject.parmCorrection(! ledgerVoucherObject.parmCorrection());
            }
        }
        // </GEERU>

        _prodIndirectTrans.Posted = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPostedAmountToMap</Name>
				<Source><![CDATA[
    private void addPostedAmountToMap(
        AmountMST       _postedAmount,
        InventTransId   _inventTransId,
        Voucher         _voucher,
        TransDate       _transDate
        )
    {
        AmountMST totalPostedAmount = this.getIndirectCostPostedTotal(_inventTransId, _voucher, _transDate);

        inventTransIdVoucherDate2PostedAmount.insert([_inventTransId, _voucher, _transDate], totalPostedAmount + _postedAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates indirect costs and then writes the result to the <c>ProdIndirectTrans</c> table and adds
    ///    entries to the ledger voucher for further posting.
    /// </summary>
    /// <param name="_costCalcTransData">
    ///    An instance of the <c>CostCalcTransData</c> class that has the data that is necessary for the
    ///    indirect costs calculation.
    /// </param>
    /// <param name="_inventTransId">
    ///    The inventory lot ID.
    /// </param>
    /// <param name="_transRefId">
    ///    The transaction reference identifier.
    /// </param>
    /// <param name="_transRefType">
    ///    The transaction reference type.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    An instance of the <c>LedgerVoucher</c> class.
    /// </param>
    /// <param name="_voucher">
    ///    A voucher number.
    /// </param>
    /// <param name="_transDate">
    ///    A transaction date.
    /// </param>
    /// <param name="_physical">
    ///    A Boolean value that specifies whether the transaction is physical.
    /// </param>
    /// <param name="_defaultDimension">
    ///    A dimension to use instead of those that are defined in the costing sheet.
    /// </param>
    /// <param name="_postLedger">
    /// True, if the the transaction should be posted to general ledger.
    /// </param>
    /// <param name="_stornoPhysical">
    /// True, if the the transaction should be posted as storno.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    Not all mandatory parameters were provided.
    /// </exception>
    public void addTrans(
        CostCalcTransData           _costCalcTransData,
        InventTransId               _inventTransId,
        CostTransRefId              _transRefId,
        ProdTransRefType            _transRefType,
        LedgerVoucher               _ledgerVoucher = null,  /*inout*/
        Voucher                     _voucher = '',
        TransDate                   _transDate = dateNull(),
        boolean                     _physical = NoYes::Yes,
        DimensionDefault            _defaultDimension = 0,
        boolean                     _postLedger = true
        , boolean                   _stornoPhysical = false
        )
    {
        Voucher                     voucher;
        TransDate                   transDate;

        CostSheet costSheet = CostSheetFactory::construct().createCostSheet(CostSheetModeStrategyCalculate::newParameter(this.costPriceType(), _costCalcTransData));
        boolean costSheetCalculated = costSheet.calc(_costCalcTransData);

        if (!costSheetCalculated)
        {
            return;
        }

        if (_ledgerVoucher)
        {
            voucher = _ledgerVoucher.lastVoucher();
            transDate = _ledgerVoucher.lastTransDate();
        }
        else
        {
            voucher = _voucher;
            transDate = _transDate;
        }

        if (! voucher || transDate == dateNull())
        {
            throw error("@SYS25407");
        }

        CostTmpCalcTrans costTmpCalcTrans = _costCalcTransData.getCostTmpCalcTrans();
        select firstonly costTmpCalcTrans;

        ListEnumerator calculationNodeEnumerator = this.getCostSheetIndirectCalculationNodesEnumerator(costSheet);

        while (calculationNodeEnumerator.moveNext())
        {
            CostSheetNodeCalculation calculationNode = calculationNodeEnumerator.current();

            AmountMST indirectCostAmount = calculationNode.getCostCalcTransData().getCostTotal();

            // Not only positive, also negative indirect cost can occur
            if (indirectCostAmount != 0.00)
            {
                // Only round after the check; for non-zero amounts that would be rounded to zero, a record is still created
                indirectCostAmount = CurrencyExchangeHelper::amount(indirectCostAmount);

                // Init ProdIndirectTrans -->
                ProdIndirectTrans prodIndirectTrans = calculationNode.toProdIndirectTrans();

                if (_defaultDimension != 0)
                {
                    // The costing sheet dimensions have higher priority than the given ones
                    prodIndirectTrans.DefaultDimension = prodIndirectTrans.mergeDimension(calculationNode.getDefaultDimension(), _defaultDimension);
                }

                this.initProdIndirectTrans(
                    _physical,
                    _ledgerVoucher,
                    voucher,
                    transDate,
                    calculationNode,
                    prodIndirectTrans,
                    _postLedger
                    // <GEERU>
                    , _stornoPhysical
                    // </GEERU>
                    );

                // In the closing case, post ledger is called with true, but the ledger postings are done later, so the ledger voucher
                // did not get passed.
                if (prodIndirectTrans.Posted == NoYes::Yes || _postLedger == true)
                {
                    this.addPostedAmountToMap(CurrencyExchangeHelper::amount(prodIndirectTrans.Amount), _inventTransId, voucher, transDate);
                }

                prodIndirectTrans.TransRefId = _transRefId;
                prodIndirectTrans.TransRefType = _transRefType;
                prodIndirectTrans.OpenProdOrder = _physical;

                this.updateProdIndirectTransResource(prodIndirectTrans, costTmpCalcTrans.Resource);
                this.updateProdIndirectTransRelations(prodIndirectTrans, prodJournalLineRecId);

                rilProdIndirectTrans.add(prodIndirectTrans);
                // <-- Init ProdIndirectTrans

                // Add the indirect cost amount to the map -->
                if (!inventTransIdVoucherDate2AmountPerCostGroupMap.exists([_inventTransId, voucher, transDate]))
                {
                    inventTransIdVoucherDate2AmountPerCostGroupMap.insert([_inventTransId, voucher, transDate], new Map(Types::String, Types::Real));
                }

                Map amountPerCostGroupMap = inventTransIdVoucherDate2AmountPerCostGroupMap.lookup([_inventTransId, voucher, transDate]);

                if (!amountPerCostGroupMap.exists(prodIndirectTrans.CostGroupId))
                {
                    amountPerCostGroupMap.insert(prodIndirectTrans.CostGroupId, 0.00);
                }

                AmountMST indirectCostTotal = amountPerCostGroupMap.lookup(prodIndirectTrans.CostGroupId);

                amountPerCostGroupMap.insert(prodIndirectTrans.CostGroupId, indirectCostTotal + indirectCostAmount);
                // <-- Add the indirect cost amount to the map
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdIndirectTransResource</Name>
				<Source><![CDATA[
    protected void updateProdIndirectTransResource(ProdIndirectTrans prodIndirectTrans, BOMCalcResource resource)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdIndirectTransRelations</Name>
				<Source><![CDATA[
    protected void updateProdIndirectTransRelations(ProdIndirectTrans prodIndirectTrans, RecId _prodJournalLineRecId)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostSheetIndirectCalculationNodesEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a cost sheet calculation nodes enumerator for indirect calculations.
    /// </summary>
    /// <param name = "_costSheet">A cost sheet.</param>
    /// <returns>A cost sheet calculation nodes enumerator.</returns>
    protected ListEnumerator getCostSheetIndirectCalculationNodesEnumerator(CostSheet _costSheet)
    {
        return _costSheet.getNodeEnumerator(CostSheetNodeListType::IndirectCalculation);;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPriceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies which costing sheet section to load for the calculation of indirect costs.
    /// </summary>
    /// <returns>
    ///    A value in the <c>CostPriceType</c> enumeration.
    /// </returns>
    abstract CostPriceType costPriceType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCostGroup2AmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a map with indirect cost per cost group amounts that corresponds to the inventory transaction,
    ///    voucher, and date.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The ID of the inventory transaction.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher number.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date.
    /// </param>
    /// <returns>
    ///    A map that has the indirect cost amount per cost group.
    /// </returns>
    /// <remarks>
    ///    Creates an empty map in case no map exists for the combination of inventory transaction, voucher,
    ///    and date.
    /// </remarks>
    public Map getIndirectCostGroup2AmountMap(
        InventTransId    _inventTransId,
        Voucher          _voucher,
        TransDate        _transDate)
    {
        Map             costGroup2AmountMap;

        if (inventTransIdVoucherDate2AmountPerCostGroupMap.exists([_inventTransId, _voucher, _transDate]))
        {
            costGroup2AmountMap = inventTransIdVoucherDate2AmountPerCostGroupMap.lookup([_inventTransId, _voucher, _transDate]);
        }
        else
        {
            costGroup2AmountMap = new Map(Types::String, Types::Real);
        }

        return costGroup2AmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCostPostedTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total posted indirect cost for a particular lot ID, voucher number, and a date.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory lot ID.
    /// </param>
    /// <param name="_voucher">
    /// The voucher number.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The indirect cost amount that is posted.
    /// </returns>
    public AmountMST getIndirectCostPostedTotal(
        InventTransId    _inventTransId,
        Voucher          _voucher,
        TransDate        _transDate)
    {
        AmountMST      totalPostedAmount;

        if (inventTransIdVoucherDate2PostedAmount.exists([_inventTransId, _voucher, _transDate]))
        {
            totalPostedAmount = inventTransIdVoucherDate2PostedAmount.lookup([_inventTransId, _voucher, _transDate]);
        }

        return totalPostedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCostTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total indirect cost for a particular lot ID, voucher number, and date.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The inventory lot ID.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher number.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date.
    /// </param>
    /// <returns>
    ///    The indirect cost amount.
    /// </returns>
    public AmountMST getIndirectCostTotal(
        InventTransId    _inventTransId,
        Voucher          _voucher,
        TransDate        _transDate)
    {
        AmountMST indirectCostAmount = 0.00;

        Map costGroup2AmountMap = this.getIndirectCostGroup2AmountMap(_inventTransId, _voucher, _transDate);

        if (costGroup2AmountMap != null)
        {
            MapEnumerator mapEnumerator = costGroup2AmountMap.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                indirectCostAmount += mapEnumerator.currentValue();
            }
        }

        return indirectCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFinancialAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes accounts on the <c>ProdIndirectTrans</c> record from the costing sheet node to use for
    ///    indirect cost posting during financial updates.
    /// </summary>
    /// <param name="_calculationNode">
    ///    The costing sheet node to use for the indirect cost.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher number to use for posting the indirect cost.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date to use for posting the indirect cost.
    /// </param>
    /// <param name="_prodIndirectTrans">
    ///    The <c>ProdIndirectTrans</c> record in which to set accounts.
    /// </param>
    protected abstract void initFinancialAccounts(
        CostSheetNodeCalculation    _calculationNode,
        Voucher                     _voucher,
        TransDate                   _transDate,
        ProdIndirectTrans           _prodIndirectTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPhysicalAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes accounts on the <c>ProdIndirectTrans</c> record from the costing sheet node to use for
    ///    indirect cost posting during physical updates.
    /// </summary>
    /// <param name="_calculationNode">
    ///    The costing sheet node to use for the indirect cost.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher number to use for posting the indirect cost.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date to use for posting the indirect cost.
    /// </param>
    /// <param name="_prodIndirectTrans">
    ///    The <c>ProdIndirectTrans</c> record in which to set accounts.
    /// </param>
    protected abstract void initPhysicalAccounts(
        CostSheetNodeCalculation    _calculationNode,
        Voucher                     _voucher,
        TransDate                   _transDate,
        ProdIndirectTrans           _prodIndirectTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdIndirectTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes physical or financial accounts for the <c>ProdIndirectTrans</c> record
    /// by delegating to the <c>InventCostJournalIndirectCost.initPhysicalAccounts</c> or
    /// <c>InventCostJournalIndirectCost.initFinancialAccounts</c> methods.
    /// Creates physical or financial postings using the <paramref name="_ledgerVoucher"/> parameter.
    /// </summary>
    /// <param name="_physical">
    /// Physical or financial update.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher for additional posting.
    /// </param>
    /// <param name="_voucher">
    /// The voucher number to be used for posting.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date to be used for posting.
    /// </param>
    /// <param name="_calculationNode">
    /// The costing sheet node used for calculating the indirect cost and for initializing the accounts
    /// used for posting.
    /// </param>
    /// <param name="_prodIndirectTrans">
    /// The <c>ProdIndirectTrans</c> record that will store information about the indirect cost.
    /// </param>
    /// <param name="_postLedger">
    /// True, if the the transaction should be posted to general ledger.
    /// </param>
    /// <param name="_stornoPhysical">
    /// True, if the the transaction should be posted as storno.
    /// </param>
    public void initProdIndirectTrans(
        boolean                     _physical,
        LedgerVoucher               _ledgerVoucher,
        Voucher                     _voucher,
        TransDate                   _transDate,
        CostSheetNodeCalculation    _calculationNode,
        ProdIndirectTrans           _prodIndirectTrans, /*inout*/
        boolean                     _postLedger
        , boolean                   _stornoPhysical = false
        )
    {
        _prodIndirectTrans.Posted = NoYes::No;

        if (_physical)
        {
            this.initPhysicalAccounts(_calculationNode, _voucher, _transDate, _prodIndirectTrans);
            if (_ledgerVoucher != null && _postLedger)
            {
                this.addPhysicalPosting(_ledgerVoucher, _prodIndirectTrans
                    // <GEERU>
                    , _stornoPhysical
                    // </GEERU>
                    );
            }
        }
        else
        {
            this.initFinancialAccounts(_calculationNode, _voucher, _transDate, _prodIndirectTrans);
            if (_ledgerVoucher != null && _postLedger)
            {
                this.addFinancialPosting(_ledgerVoucher, _prodIndirectTrans
                // <GEERU>
                , _stornoPhysical
                // </GEERU>
                );
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        currencyCode = CompanyInfoHelper::standardCurrency();

        inventTransIdVoucherDate2AmountPerCostGroupMap = new Map(Types::Container, Types::Class);
        inventTransIdVoucherDate2PostedAmount = new Map(Types::Container, Types::Real);
        rilProdIndirectTrans = new RecordInsertList(tableNum(ProdIndirectTrans));
        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJournalLineRecId</Name>
				<Source><![CDATA[
    public RecId parmProdJournalLineRecId(RecId _prodJournalLineRecId)
    {
        prodJournalLineRecId = _prodJournalLineRecId;
        return _prodJournalLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Flushes the remaining <c>ProdIndirectTrans</c> records to the database.
    /// </summary>
    /// <param name="_createJournal">
    ///    A Boolean variable that defines whether a journal should be created in association with the
    ///    indirect cost posting.
    /// </param>
    public void run(boolean _createJournal = true)
    {
        rilProdIndirectTrans.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>