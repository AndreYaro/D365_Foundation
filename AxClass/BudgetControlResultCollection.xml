<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlResultCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetControlResultCollection</c> class is used to hold a collection of budget control
///    results for different budget sources or enumerate through the budget control results in the
///    collection.
/// </summary>
public class BudgetControlResultCollection implements SysPackable
{
    Map budgetControlResults;
    MapEnumerator budgetControlResultsEnumerator;
    RecId currentBudgetSourceId;
    BudgetControlResult currentBudgetControlResult;
    BudgetCheckResult overallBudgetCheckResult;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        overallBudgetCheckResult
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetControlResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>BudgetControlResult</c> class instance that contains the budget check result
    /// details for the specified budget source to the collection.
    /// </summary>
    /// <param name="_budgetSourceId">
    /// The ID for the <c>BudgetSource</c> record.
    /// </param>
    /// <param name="_budgetControlResult">
    /// A <c>BudgetControlResult</c> class instance.
    /// </param>
    public void addBudgetControlResult(RecId _budgetSourceId, BudgetControlResult _budgetControlResult)
    {
        budgetControlResults.insert(_budgetSourceId, _budgetControlResult);

        overallBudgetCheckResult =
            (overallBudgetCheckResult > _budgetControlResult.budgetSourceAvailableCheckResult()?
                overallBudgetCheckResult : _budgetControlResult.budgetSourceAvailableCheckResult());
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentBudgetControlResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>BudgetControlResult</c> class instance that the enumerator currently positions in the
    ///    collection.
    /// </summary>
    /// <returns>
    ///    A <c>BudgetControlResult</c> class instance.
    /// </returns>
    public BudgetControlResult currentBudgetControlResult()
    {
        return currentBudgetControlResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentBudgetSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ID for the <c>BudgetSource</c> record for the associated <c>BudgetControlResult</c>class
    ///    instance that the enumerator currently positions in the collection.
    /// </summary>
    /// <returns>
    ///    A <c>BudgetControlResult</c> class instance.
    /// </returns>
    public RecId currentBudgetSourceId()
    {
        return currentBudgetSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the numbers of <c>BudgetControlResult</c> class instances in the collection.
    /// </summary>
    /// <returns>
    ///    An integer that indicates the numbers of <c>BudgetControlResult</c> class instances in the
    ///    collection.
    /// </returns>
    public int elements()
    {
        return budgetControlResults.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget control result for the specified budget source.
    /// </summary>
    /// <param name="_budgetSourceId">
    /// The ID of the <c>BudgetSource</c> record.
    /// </param>
    /// <returns>
    /// A <c>BudgetControlResult</c> class instance.
    /// </returns>
    public BudgetControlResult getBudgetControlResult(RecId _budgetSourceId)
    {
        BudgetControlResult controlResult;

        if (budgetControlResults.exists(_budgetSourceId))
        {
            controlResult = budgetControlResults.lookup(_budgetSourceId);
        }

        return controlResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverallBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the overall budget check result for the collection.
    /// </summary>
    /// <returns>
    ///    The overall budget check result for the collection.
    /// </returns>
    public BudgetCheckResult getOverallBudgetCheckResult()
    {
        return overallBudgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoLogErrorWarningMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the error and warning messages of the budget check results in the Infolog.
    /// </summary>
    /// <param name="_includeErrors">
    /// A Boolean that indicates whether to display error messages.
    /// </param>
    /// <param name="_includeWarnings">
    /// A Boolean that indicates whether to display warning messages.
    /// </param>
    public void infoLogErrorWarningMessages(
        boolean _includeErrors,
        boolean _includeWarnings)
    {
        MapEnumerator localBudgetControlResultsEnumerator = budgetControlResults.getEnumerator();
        BudgetControlResult localBudgetControlResult;

        if (_includeErrors || _includeWarnings)
        {
            while (localBudgetControlResultsEnumerator.moveNext())
            {
                localBudgetControlResult = localBudgetControlResultsEnumerator.currentValue();

                if (_includeErrors)
                {
                    localBudgetControlResult.infoLogErrorMessages();
                }

                if (_includeWarnings)
                {
                    localBudgetControlResult.infoLogWarningMessages();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the enumerator of the collection.
    /// </summary>
    /// <remarks>
    ///    The enumerator can be used to enumerate through the collection.
    /// </remarks>
    public void initializeEnumerator()
    {
        budgetControlResultsEnumerator = budgetControlResults.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetCheckPassed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the overall budget check status is passed for the collection.
    /// </summary>
    /// <returns>
    ///    A Boolean that indicates whether the overall budget check status is passed for the collection.
    /// </returns>
    public boolean isBudgetCheckPassed()
    {
        return (overallBudgetCheckResult != BudgetCheckResult::Failed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the enumerator to the next <c>BudgetControlResult</c> class instance in the collection.
    /// </summary>
    /// <returns>
    ///    A Boolean that indicates whether the enumerator successfully advances to the next
    ///    <c>BudgetControlResult</c> class instance in the collection.
    /// </returns>
    public boolean moveNext()
    {
        boolean hasItem;

        if (budgetControlResultsEnumerator)
        {
            hasItem = budgetControlResultsEnumerator.moveNext();
        }
        else
        {
            hasItem = false;
        }

        if (hasItem)
        {
            currentBudgetSourceId = budgetControlResultsEnumerator.currentKey();
            currentBudgetControlResult = budgetControlResultsEnumerator.currentValue();
        }

        return hasItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        budgetControlResults = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public final container pack()
    {
        // Pack the budget control results.
        return [#CurrentVersion, [#CurrentList, budgetControlResults.pack()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the enumerator to the first <c>BudgetControlResult</c> class instance in the collection.
    /// </summary>
    public void reset()
    {
        if (budgetControlResultsEnumerator)
        {
            budgetControlResultsEnumerator.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public final boolean unpack(container _packedBudgetControlResults)
    {
        int version = conpeek(_packedBudgetControlResults, 1);
        container packedClassMembers;
        container packedBudgetControlResults;

        switch (version)
        {
            case #CurrentVersion:
                // Extract the packed values.
                [version, packedClassMembers] = _packedBudgetControlResults;

                // Extract the #CurrentList and packed maps.
                [#CurrentList, packedBudgetControlResults] = packedClassMembers;

                break;

            default:
                return false;
        }

        if (packedBudgetControlResults != connull())
        {
            budgetControlResults = Map::create(packedBudgetControlResults);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static BudgetControlResultCollection construct()
    {
        return new BudgetControlResultCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetControlResultCollection</c> class from a packed copy.
    /// </summary>
    /// <param name="_packedBudgetControlResults">
    /// The packed instance of the <c>BudgetControlResultCollection</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetControlResultCollection</c> class.
    /// </returns>
    public static BudgetControlResultCollection create(container _packedBudgetControlResults)
    {
        BudgetControlResultCollection controlResults = new BudgetControlResultCollection();

        controlResults.unpack(_packedBudgetControlResults);

        return controlResults;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>