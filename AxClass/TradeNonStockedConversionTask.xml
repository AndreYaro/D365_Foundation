<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TradeNonStockedConversionTask</c> class executes a task.
/// </summary>
abstract class TradeNonStockedConversionTask
extends RunBaseBatch
{
    TradeNonStockedConversion       tradeNonStockedConversion;
    TradeNonStockedConversionItem   tradeNonStockedConversionItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSingleItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the check only will be performed for one item.
    /// </summary>
    /// <returns>
    /// true if the check only will be performed for one item; otherwise, false.
    /// </returns>
    protected boolean isSingleItem()
    {
        return tradeNonStockedConversionItem.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversion</Name>
				<Source><![CDATA[
    public TradeNonStockedConversion parmTradeNonStockedConversion(TradeNonStockedConversion _tradeNonStockedConversion = tradeNonStockedConversion)
    {
        tradeNonStockedConversion = _tradeNonStockedConversion;
        return tradeNonStockedConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversionItem</Name>
				<Source><![CDATA[
    public TradeNonStockedConversionItem parmTradeNonStockedConversionItem(TradeNonStockedConversionItem _tradeNonStockedConversionItem = tradeNonStockedConversionItem)
    {
        tradeNonStockedConversionItem = _tradeNonStockedConversionItem;
        return tradeNonStockedConversionItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    abstract public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status for each of the <c>TradeNonStockedConversionItem</c> records that is included in
    /// the check.
    /// </summary>
    /// <param name="_fromStatus">
    /// An element in the <c>TradeNonStockedConversionStatus</c> enumeration type.
    /// </param>
    /// <param name="_toStatus">
    /// An element in the <c>TradeNonStockedConversionStatus</c> enumeration type.
    /// </param>
    protected void updateStatus(
        TradeNonStockedConversionStatus _fromStatus,
        TradeNonStockedConversionStatus _toStatus)
    {
        TradeNonStockedConversionItem conversionItem;

        ttsbegin;
        update_recordset conversionItem
            setting Status = _toStatus
            where conversionItem.NonStockedConversion == this.parmTradeNonStockedConversion().RecId
            &&    conversionItem.Status == _fromStatus
            &&   (!this.isSingleItem()
            ||    (conversionItem.ItemIdDataAreaId      == tradeNonStockedConversionItem.ItemIdDataAreaId
            &&     conversionItem.ItemId                == tradeNonStockedConversionItem.ItemId));
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionTask newTask(
        TradeNonStockedConversionTaskType   _tradeNonStockedConversionTaskType,
        TradeNonStockedConversion           _tradeNonStockedConversion,
        TradeNonStockedConversionItem       _tradeNonStockedConversionItem = null)
    {
        TradeNonStockedConversionTask tradeNonStockedConversionTask;

        switch (_tradeNonStockedConversionTaskType)
        {
            case TradeNonStockedConversionTaskType::Change :
                tradeNonStockedConversionTask = TradeNonStockedConversionChangeTask::newTask(_tradeNonStockedConversion, _tradeNonStockedConversionItem);
                break;

            case TradeNonStockedConversionTaskType::Check :
                tradeNonStockedConversionTask = TradeNonStockedConversionCheckTask::newTask(_tradeNonStockedConversion, _tradeNonStockedConversionItem);
                break;
        }
        return tradeNonStockedConversionTask;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>