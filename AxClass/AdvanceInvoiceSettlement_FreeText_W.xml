<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvanceInvoiceSettlement_FreeText_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AdvanceInvoiceSettlement_FreeText_W extends AdvanceInvoiceSettlement_W
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSettlement</Name>
				<Source><![CDATA[
    public str checkSettlement(Common _parentDocument)
    {
        str                         ret;

        SpecTrans                   specTrans;
        CustTrans                   custTrans;
        CustTransOpen               custTransOpen;

        CzCustAdvanceInvoiceLink    advanceInvoiceLink;
        CzCustAdvanceInvoiceTable   advanceInvoiceTable;

        Amount                      aiSettlementAmount;
        Set                         aiSet;
        Set                         aiCurrencySet;

        Set                         reported = new Set(Types::Container);

        boolean                     linked;

        if (! CzCustAdvanceInvoiceTable::featureEnabled_Ledger('', _parentDocument.RecId))
            return '';

        while select crossCompany specTrans
            where specTrans.SpecCompany == _parentDocument.company() &&
                  specTrans.SpecTableId == _parentDocument.TableId   &&
                  specTrans.SpecRecId   == _parentDocument.RecId
        {
            custTrans = specTrans.custTrans();

            if (custTrans.Prepayment)
            {
                aiSettlementAmount = 0;
                aiSet              = new Set(Types::String);

                aiCurrencySet      = new Set(Types::String);
                aiCurrencySet.add(custTrans.CurrencyCode);

                while select crosscompany advanceInvoiceLink
                    where advanceInvoiceLink.PaymentCompany == custTrans.company() &&
                          advanceInvoiceLink.Voucher        == custTrans.Voucher   &&
                          advanceInvoiceLink.TransDate      == custTrans.TransDate
                {
                    advanceInvoiceTable = advanceInvoiceLink.advanceInvoiceTable();

                    if (advanceInvoiceTable.FreeInvoiceRefRecId == _parentDocument.RecId &&
                        advanceInvoiceTable.Status              != CzAdvanceInvoiceStatus::Closed)
                    {
                        aiSettlementAmount += this.markTransAmount(advanceInvoiceTable);
                        aiSet.add(advanceInvoiceTable.InvoiceId);
                        aiCurrencySet.add(advanceInvoiceTable.CurrencyCode);
                    }
                }

                if (aiSet.elements())
                {
                    if (aiCurrencySet.elements() == 1)
                    {
                        if (aiSettlementAmount != -specTrans.Balance01)
                        {
                            warning(strfmt("@GLS114159",
                                           custTrans.Voucher,
                                           custTrans.TransDate,
                                           specTrans.Balance01,
                                           strrem(aiSet.toString(), '{"}'),
                                           aiSettlementAmount));
                            ret += (ret ? ', ' : '') + '\n' +
                                   strlwr("@SYS59473") + strfmt(' %1 %2 (%3 %4)',
                                                                custTrans.Voucher,
                                                                custTrans.TransDate,
                                                                specTrans.Balance01,
                                                                custTrans.CurrencyCode) + ', ' +
                                   strlwr("@GLS107927") + strfmt(' %1 (%2 %3)',
                                                                strrem(aiSet.toString(), '{"}'),
                                                                aiSettlementAmount,
                                                                custTrans.CurrencyCode);

                            reported.add([ custTrans.TableId, custTrans.RecId ]);
                        }
                    }
                    else
                    {
                        warning(strfmt("@GLS114143",
                                       strrem(aiCurrencySet.toString(), '{"}'),
                                       custTrans.Voucher,
                                       custTrans.TransDate,
                                       strrem(aiSet.toString(), '{"}')));
                        ret += (ret ? ', ' : '') + '\n' +
                               strlwr("@SYS59473") + strfmt(' %1 %2',
                                                            custTrans.Voucher,
                                                            custTrans.TransDate)             + ', ' +
                               strlwr("@GLS107927") + strfmt(' %1',
                                                            strrem(aiSet.toString(), '{"}')) + ', ' +
                               strlwr("@SYS7572")  + strfmt(' %1',
                                                            strrem(aiCurrencySet.toString(), '{"}'));

                        reported.add([ custTrans.TableId, custTrans.RecId ]);
                    }
                }
                else
                {
                    warning(strfmt("@GLS114150",
                                   custTrans.Voucher,
                                   custTrans.TransDate));
                    ret += (ret ? ', ' : '') + '\n' +
                           strlwr("@SYS59473") + strfmt(' %1 %2',
                                                        custTrans.Voucher,
                                                        custTrans.TransDate) + ', ' +
                           strlwr("@GLS107927") + ' - ' + strlwr("@SYS21247");

                    reported.add([ custTrans.TableId, custTrans.RecId ]);
                }
            }
        }

        advanceInvoiceTable = null;
        while select advanceInvoiceTable
            where advanceInvoiceTable.FreeInvoiceRefRecId == _parentDocument.RecId &&
                  advanceInvoiceTable.Posted                                       &&
                  advanceInvoiceTable.Status              != CzAdvanceInvoiceStatus::Closed
        {
            aiSettlementAmount = this.markTransAmount(advanceInvoiceTable);
            if (! aiSettlementAmount)
                continue;

            linked = false;

            while select crosscompany advanceInvoiceLink
                where advanceInvoiceLink.InvoiceCompany      == advanceInvoiceTable.company() &&
                      advanceInvoiceLink.AdvanceInvoiceRecId == advanceInvoiceTable.RecId
            {
                linked = true;

                custTrans = advanceInvoiceLink.custTrans();
                if (reported.in([ custTrans.TableId, custTrans.RecId ]))
                    continue;

                if (custTrans.CurrencyCode == advanceInvoiceTable.CurrencyCode)
                {
                    changecompany(custTrans.company())
                    {
                        custTransOpen = CustTransOpen::findRefId(custTrans.RecId);
                    }

                    select crossCompany sum(Balance01) from specTrans
                        where specTrans.RefCompany  == custTransOpen.company()   &&
                              specTrans.RefTableId  == custTransOpen.TableId     &&
                              specTrans.RefRecId    == custTransOpen.RecId       &&
                              specTrans.SpecCompany == _parentDocument.company() &&
                              specTrans.SpecTableId == _parentDocument.TableId   &&
                              specTrans.SpecRecId   == _parentDocument.RecId;

                    if (aiSettlementAmount != -specTrans.Balance01)
                    {
                        warning(strfmt("@GLS114159",
                                       custTrans.Voucher,
                                       custTrans.TransDate,
                                       specTrans.Balance01,
                                       advanceInvoiceTable.InvoiceId,
                                       aiSettlementAmount));
                        ret += (ret ? ', ' : '') + '\n' +
                               strlwr("@SYS59473") + strfmt(' %1 %2 (%3 %4)',
                                                            custTrans.Voucher,
                                                            custTrans.TransDate,
                                                            specTrans.Balance01,
                                                            custTrans.CurrencyCode) + ', ' +
                               strlwr("@GLS107927") + strfmt(' %1 (%2 %3)',
                                                            advanceInvoiceTable.InvoiceId,
                                                            aiSettlementAmount,
                                                            advanceInvoiceTable.CurrencyCode);
                    }
                }
                else
                {
                    warning(strfmt("@GLS114149",
                                   custTrans.Voucher,
                                   custTrans.TransDate,
                                   custTrans.CurrencyCode,
                                   advanceInvoiceTable.InvoiceId,
                                   advanceInvoiceTable.CurrencyCode));
                    ret += (ret ? ', ' : '') + '\n' +
                           strlwr("@SYS59473") + strfmt(' %1 %2 (%3 %4)',
                                                        custTrans.Voucher,
                                                        custTrans.TransDate,
                                                        specTrans.Balance01,
                                                        custTrans.CurrencyCode) + ', ' +
                           strlwr("@GLS107927") + strfmt(' %1 (%2 %3)',
                                                        advanceInvoiceTable.InvoiceId,
                                                        aiSettlementAmount,
                                                        advanceInvoiceTable.CurrencyCode);
                }
            }

            if (! linked)
            {
                warning(strfmt("@GLS114113",
                               advanceInvoiceTable.InvoiceId));
                ret += (ret ? ', ' : '') + '\n' +
                       strlwr("@GLS107927") + strfmt(' %1 (%2 %3)',
                                                    advanceInvoiceTable.InvoiceId,
                                                    aiSettlementAmount,
                                                    advanceInvoiceTable.CurrencyCode) + ', ' +
                       strlwr("@SYS59473") + ' - ' + strlwr("@SYS21247");
            }
        }

        if (ret)
        {
            ret = strfmt("@GLS114142", ret);
        }
        else
        {
            if (! advanceInvoiceSettlementMap.elements())
            {
                ret = "@GLS114144";
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAdvanceInvoiceTable</Name>
				<Source><![CDATA[
    protected boolean skipAdvanceInvoiceTable(
        CzCustAdvanceInvoiceTable _advanceInvoiceTable,
        CustInvoiceJour           _custInvoiceJour)
    {
        return _advanceInvoiceTable.FreeInvoiceRefRecId != _custInvoiceJour.custInvoiceTable().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReverseTable</Name>
				<Source><![CDATA[
    protected void updateReverseTable(
        CzCustAdvanceInvoiceTable   _reverseTable,
        CustInvoiceJour             _custInvoiceJour)
    {
        CustInvoiceTable custInvoiceTable = _custInvoiceJour.custInvoiceTable();

        _reverseTable.InvoiceDate  = custInvoiceTable.InvoiceDate;
        _reverseTable.DocumentDate = custInvoiceTable.DocumentDate;
        _reverseTable.VatDueDate_W = custInvoiceTable.VatDueDate_W;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>