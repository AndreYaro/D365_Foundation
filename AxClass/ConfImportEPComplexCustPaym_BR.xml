<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfImportEPComplexCustPaym_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ConfImportEPComplexCustPaym_BR</c> is the basis for the electronic payment process to import the complex file for customer.
/// </summary>
class ConfImportEPComplexCustPaym_BR extends ConfImportEPComplex_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doImport</Name>
				<Source><![CDATA[
    public void doImport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00089, funcName());
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEPReturnValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates an instance of class <c>EPReturnValues_BR</c> representing the values that will be used to updade the ledger journal transaction.
    /// </summary>
    /// <returns>
    ///     An instance of class <c>EPReturnValues_BR</c> with the values to update the ledger jornal transaction.
    /// </returns>
    protected EPReturnValues_BR buildEPReturnValues()
    {
        EPReturnValues_BR               epReturnValues = new EPReturnValues_BR();
        LedgerJournalTrans              ledgerJournalTrans;
        LedgerJournalTransPayment_BR    ledgerJournalTransPayment;
        CustTransCashDisc               custTransCashDisc;
        CustVendPaymJournalFee          custVendPaymJournalFee;
        EPRetOccCodes_BR                epRetOccCodes;
        CustTransEPRemit_BR             custTransEPRemit;

        if (this.hasValuesForTable(tablestr(LedgerJournalTransPayment_BR)))
        {
            ledgerJournalTransPayment = this.getTableByName(tableStr(LedgerJournalTransPayment_BR));
            epReturnValues.parmCompanyDocument(ledgerJournalTransPayment.EPCompanyDocument_BR);
            epReturnValues.parmInterestAmount(ledgerJournalTransPayment.FinInterestAmountCur_BR);
            epReturnValues.parmFineAmount(ledgerJournalTransPayment.FineAmountCur_BR);
        }

        if (this.hasValuesForTable(tablestr(LedgerJournalTrans)))
        {
            ledgerJournalTrans = this.getTableByName(tableStr(LedgerJournalTrans));
            epReturnValues.parmPaymentDate(ledgerJournalTrans.TransDate);
            epReturnValues.parmPaymentAmount(ledgerJournalTrans.AmountCurCredit);
        }

        if (this.hasValuesForTable(tablestr(CustTransCashDisc)))
        {
            custTransCashDisc = this.getTableByName(tableStr(CustTransCashDisc));
            epReturnValues.parmDiscountAmount(custTransCashDisc.CashDiscAmount);
        }

        if (this.hasValuesForTable(tablestr(CustVendPaymJournalFee)))
        {
            custVendPaymJournalFee = this.getTableByName(tableStr(CustVendPaymJournalFee));
            epReturnValues.parmFeeValue(custVendPaymJournalFee.FeeValue);
        }

        if (this.hasValuesForTable(tablestr(EPRetOccCodes_BR)))
        {
            epRetOccCodes = this.getTableByName(tableStr(EPRetOccCodes_BR));
            epReturnValues.parmReturnOccuranceCode(epRetOccCodes.LayoutRetOccCode);
            epReturnValues.parmStatus(this.getStatus(epRetOccCodes.LayoutRetOccCode));
        }

        if (this.hasValuesForTable(tablestr(CustTransEPRemit_BR)))
        {
            custTransEPRemit = this.getTableByName(tableStr(CustTransEPRemit_BR));
            epReturnValues.parmBankInvoiceId(custTransEPRemit.BankInvoiceId);
        }

        return epReturnValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstSegmentToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the first segment to be processed.
    /// </summary>
    /// <param name="_fileLine">
    ///     The content of the file line representing the batch header.
    /// </param>
    /// <param name="_confLayoutLineBatchHeader">
    ///     <c>ConfLayoutLines_BR</c> that represents the configuration of the batch header.
    /// </param>
    /// <returns>
    ///     The <c>EPSegment_BR</c> that should be first processed during the return import operation.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Exception thrown when no <c>CustPaymModeSpec</c> is found for the return segment.
    /// </exception>
    protected EPSegment_BR getFirstSegmentToProcess(str _fileLine, ConfLayoutLines_BR _confLayoutLineBatchHeader)
    {
        CustPaymModeSpec custPaymModeSpec;

        select EPSegmentReturn_BR
            from custPaymModeSpec
            where custPaymModeSpec.PaymMode == this.getPaymentMode();

        if (!custPaymModeSpec)
        {
            throw error("@GLS223827");
        }

        return custPaymModeSpec.EPSegmentReturn_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfRequiredFieldsInLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container of strings representing the required fields.
    /// i.e., Field <c>EPCompanyDocument_BR</c> of table <c>LedgerJournalTransPayment_BR</c>
    /// and field <c>LayoutRetOccCode</c> of table <c>EPRetOccCodes_BR</c>.
    /// </summary>
    /// <returns>
    /// Container with required fields added.
    /// </returns>
    protected container getListOfRequiredFieldsInLayout()
    {
        container requiredFields;

        requiredFields += [[tableNum(LedgerJournalTransPayment_BR), fieldNum(LedgerJournalTransPayment_BR, EPCompanyDocument_BR)]];
        requiredFields += [[tableNum(EPRetOccCodes_BR),             fieldNum(EPRetOccCodes_BR, LayoutRetOccCode)]];

        return requiredFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymModeSpecSegmentFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the field name corresponding to the main segment to be processed.
    /// </summary>
    /// <returns>
    ///     <c>FieldName</c> indicating the value of the first segment to be processed.
    /// </returns>
    protected FieldName getPaymModeSpecSegmentFieldName()
    {
        return fieldStr(CustPaymModeSpec, EPSegmentReturn_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymModeSpecTableName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the table name that keeps the main segment to be processed. This table should be <c>CustPaymModeSpec</c> for the customer payment process.
    /// </summary>
    /// <returns>
    ///     <c>TableName</c> for the <c>CustPaymModeSpec</c> table.
    /// </returns>
    protected TableName getPaymModeSpecTableName()
    {
        return tableStr(CustPaymModeSpec);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>