<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderD365SalesEntityUpdatePrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class SalesOrderD365SalesEntityUpdatePrice extends SalesCDSUpdatePriceBase
{
    private SalesOrderHeaderD365SalesEntity entity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updatePrices</Name>
				<Source><![CDATA[
    internal List updatePrices()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().updatePrices())
        {
            List relatedRecords;
        
            if (entity != null)
            {
                SalesCDSPrePricingAmountsTmp prePricingAmounts = SalesCDSPrePricingAmountsTmp::initPrePricingAmountsFromSalesLines(entity.SalesOrderNumber);
                this.calculatePrices();
                relatedRecords = this.getRecordsToSync(prePricingAmounts);
            }
            else
            {
                relatedRecords = new List(Types::Container);
            }
        
            activityContext.addCustomProperty('UpdatePriceCount', int2Str(relatedRecords.elements()));

            return relatedRecords;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    internal List updateTotals()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().updateTotals())
        {
            List relatedRecords;
        
            if (entity != null)
            {
                SalesCDSPrePricingAmountsTmp prePricingAmounts = SalesCDSPrePricingAmountsTmp::initPrePricingAmountsFromSalesLines(entity.SalesOrderNumber);
                this.calculatePrices(true);
                relatedRecords = this.getRecordsToSync(prePricingAmounts);
            }
            else
            {
                relatedRecords = new List(Types::Container);
            }
        
            activityContext.addCustomProperty('UpdateTotalsCount', int2Str(relatedRecords.elements()));

            return relatedRecords;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePrices</Name>
				<Source><![CDATA[
    private void calculatePrices(boolean skipUpdateLinePriceDisc = false)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().calculatePrices())
        {
            SalesTable salesTable = SalesTable::find(entity.SalesOrderNumber, true);

            activityContext.addCustomProperty(tableStr(SalesTable), int642Str(salesTable.RecId));

            if (!skipUpdateLinePriceDisc)
            {
                this.updateLinesPriceDisc(salesTable); // Updates the line discount for all lines within the given order.
                salesTable.reread(); // Needs reread() because updating SalesLine can change SalesTable.
            }

            salesTable.updateFinalDisc();  // Calculates the total discount for sales orders, purchase orders.
            salesTable.updateMultiLineDisc(); // Updates the multiline discount for all lines within the given order.
            SalesOrderTotalsCalculate::calculateTotalsForOrder(entity.SalesOrderNumber); // Updates the SalesOrderTotals and SalesOrderLineTotals tables, which should trigger the DW on the SalesOrderHeaderD365SalesEntity and SalesOrderLineCDSEntity.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinesPriceDisc</Name>
				<Source><![CDATA[
    private void updateLinesPriceDisc(SalesTable _salesTable)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().updateLinesPriceDisc())
        {
            // Do not recalculate price for call center returns.
            if (!(_salesTable.mcrIsCallCenter() && _salesTable.SalesType != SalesType::ReturnItem))
            {
                SalesLine salesLine;

                while select forupdate salesLine
                    where salesLine.SalesId == entity.SalesOrderNumber
                {
                    salesLine.setPriceDisc(salesLine.inventDim());
                    salesLine.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordsToSync</Name>
				<Source><![CDATA[
    private List getRecordsToSync(SalesCDSPrePricingAmountsTmp _prePricingAmounts)
    {
        boolean amountOutOfSyncFlightEnabled = DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled();
        boolean discountOutOfSyncFlightEnabled = DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled();

        List recordsToSync = new List(Types::Container);
        recordsToSync.addEnd([entity.TableId, entity.RecId]);
       
        SalesOrderLineD365SalesEntity salesOrderLineEntityRecord;
        Set salesOrderLineRecords = new Set(Types::Int64);

        while select salesOrderLineEntityRecord
            where salesOrderLineEntityRecord.SalesOrderNumber == entity.SalesOrderNumber
            exists join _prePricingAmounts // Only amount fields changed lines to be synced.
                where _prePricingAmounts.ReferenceNumber == salesOrderLineEntityRecord.SalesOrderNumber
                    && _prePricingAmounts.LineCreationSequenceNumber == salesOrderLineEntityRecord.LineCreationSequenceNumber
                    && (_prePricingAmounts.LineAmount != salesOrderLineEntityRecord.LineAmount
                        || _prePricingAmounts.LineDisc != salesOrderLineEntityRecord.LineDiscountAmount
                        || _prePricingAmounts.LinePercent != salesOrderLineEntityRecord.LineDiscountPercentage
                        || _prePricingAmounts.MultiLnDisc != salesOrderLineEntityRecord.MultilineDiscountAmount
                        || _prePricingAmounts.MultiLnPercent != salesOrderLineEntityRecord.MultilineDiscountPercentage
                        || _prePricingAmounts.SalesMarkup != salesOrderLineEntityRecord.FixedPriceCharges
                        || _prePricingAmounts.SalesPrice != salesOrderLineEntityRecord.SalesPrice
                        || _prePricingAmounts.TotalTaxAmount != salesOrderLineEntityRecord.TotalTaxAmount
                        || _prePricingAmounts.TotalChargesAmount != salesOrderLineEntityRecord.TotalChargesAmount
                        || _prePricingAmounts.TotalDiscountAmount != salesOrderLineEntityRecord.TotalDiscountAmount)
        {
            recordsToSync.addEnd([salesOrderLineEntityRecord.TableId, salesOrderLineEntityRecord.RecId]);

            if (amountOutOfSyncFlightEnabled || discountOutOfSyncFlightEnabled)
            {
                salesOrderLineRecords.add(salesOrderLineEntityRecord.RecId);
            }
        }

        if (amountOutOfSyncFlightEnabled || discountOutOfSyncFlightEnabled)
        {
            recordsToSync.appendList(this.getSalesPriceOrLineAmountOrLineDiscPercentageOrLineDiscAmountNotSyncedRecords(salesOrderLineEntityRecord.TableId, salesOrderLineRecords));
        }

        return recordsToSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPriceOrLineAmountOrLineDiscPercentageOrLineDiscAmountNotSyncedRecords</Name>
				<Source><![CDATA[
    private List getSalesPriceOrLineAmountOrLineDiscPercentageOrLineDiscAmountNotSyncedRecords(TableId _salesOrderLineEntityTableId, Set _recordsToSync)
    {
        List records = new List(Types::Container);
        SalesOrderLineNotSyncedWithCDSRecord salesOrderLineNotSyncedWithCDSRecord;

        ttsbegin;

        while select forupdate salesOrderLineNotSyncedWithCDSRecord
            where salesOrderLineNotSyncedWithCDSRecord.SalesId == entity.SalesOrderNumber
                && (salesOrderLineNotSyncedWithCDSRecord.FieldsType == SalesNotSyncedWithCDSFieldsType::SalesPriceOrLineAmount
                        && DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
                    || (salesOrderLineNotSyncedWithCDSRecord.FieldsType == SalesNotSyncedWithCDSFieldsType::SalesLineDiscountPercentageOrLineDiscountAmount
                        && DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
        {
            if (!_recordsToSync.in(salesOrderLineNotSyncedWithCDSRecord.SalesLineRefRecId))
            {
                records.addEnd([_salesOrderLineEntityTableId, salesOrderLineNotSyncedWithCDSRecord.SalesLineRefRecId]);
            }

            salesOrderLineNotSyncedWithCDSRecord.delete();
        }

        ttscommit;

        return records;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEntity</Name>
				<Source><![CDATA[
    private void setEntity(SalesOrderHeaderD365SalesEntity _entity)
    {
        entity = _entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromRecord</Name>
				<Source><![CDATA[
    internal static SalesOrderD365SalesEntityUpdatePrice newFromRecord(SalesOrderHeaderD365SalesEntity _entity)
    {
        SalesOrderD365SalesEntityUpdatePrice instance = new SalesOrderD365SalesEntityUpdatePrice();
        
        instance.setEntity(_entity);

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>