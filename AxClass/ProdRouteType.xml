<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdRouteType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdRouteType
{
    ProdRoute prodRoute;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a production route record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a production route record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a production route record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a production route record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(ProdRoute _prodRoute)
    {
        prodRoute= _prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBackStatus</Name>
				<Source><![CDATA[
    void setBackStatus()
    {
        if (prodRoute.OprFinished)
            prodRoute.BackorderStatus = ProdBackStatus::Completed;
        else
            prodRoute.BackorderStatus = ProdBackStatus::Route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a production route record is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a production route record has been updated.
    /// </summary>
    /// <param name="_prodRouteOrig">
    /// The original production route which is updated
    /// </param>
    public void updated(ProdRoute _prodRouteOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean  validateDelete()
    {
        boolean     ok = prodRoute.validateDelete(true);
        ProdRoute   prodRouteSecondary;

        if (! prodRoute.OprPriority)
        {
            while select prodRouteSecondary
                index hint NumOprNumIdx
                where prodRouteSecondary.ProdId      == prodRoute.ProdId    &&
                      prodRouteSecondary.OprNum      == prodRoute.OprNum    &&
                      prodRouteSecondary.OprPriority
            {
                if (! prodRouteSecondary.validateDelete())
                {
                    ok = false;
                }
            }
        }

        ok = InventQualityOrderTable::checkNoOpenQualityOrders(prodRoute) && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean  validateWrite()
    {
        boolean         ok = prodRoute.validateWrite(true);

        if (! prodRoute.RouteOprMap::checkFields())
            ok = false;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdRouteType construct(ProdRoute prodRoute)
    {
        switch (prodRoute.RouteType)
        {
            case RouteOprType::Vendor:
                return new ProdRouteType_Vendor(prodRoute);
            default:
                return new ProdRouteType(prodRoute);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>