<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineCustConfirmTransLineImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>CustConfirmTrans</c>.
/// </summary>
/// <remarks>
///    Not required to add class TaxModelDocLineCustConfirmTransLineImpl_IN. 
///    Confirming sales order will not post tax document for Indian company.
/// </remarks>
[TaxModelDocumentLineAttribute(tableStr(CustConfirmTrans))]
class TaxModelDocLineCustConfirmTransLineImpl extends TaxModelDocLineSalesLineImpl
    implements TaxModelTaxable
{
    CustConfirmTrans        custConfirmTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount.
    /// </summary>
    /// <returns>The total discount amount</returns>
    public Amount getDiscAmount()
    {
        Amount totalDisc;

        PriceUnit priceUnit = custConfirmTrans.PriceUnit == 0? 1 : custConfirmTrans.PriceUnit;

        Amount netAmount = (custConfirmTrans.Qty * ((custConfirmTrans.SalesPrice - salesLine.discAmount()) / priceUnit)) * (100 - salesLine.discPercent()) / 100;

        totalDisc = netAmount * custConfirmTrans.DiscPercent / 100 + (custConfirmTrans.Qty * custConfirmTrans.SalesPrice / priceUnit) - netAmount;

        return totalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
        return custConfirmTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        custConfirmTrans = _documentLineMap;

        super(custConfirmTrans.salesLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line transaction currency.
    /// </summary>
    /// <returns>The document line transaction currency.</returns>
    public CurrencyCode getTransactionCurrency()
    {
        return custConfirmTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return custConfirmTrans.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <param name = "_type">The transaction tax information type.</param>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    /// This method is used to init TransTaxInformation.CompanyLocation, which should be defaulted from company address.
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        if (this.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getReferenceTaxModelDocLine().getTaxLogisticsPostalAddress(_type);
        }
        else
        {
            InventDim inventDim = custConfirmTrans.inventDim();
            return LogisticsPostalAddress::findByLocation(
                TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(inventDim.InventLocationId, inventDim.InventSiteId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount.
    /// </summary>
    /// <returns>The line amount.
    /// </returns>
    public Amount getLineAmount()
    {
        return custConfirmTrans.LineAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>