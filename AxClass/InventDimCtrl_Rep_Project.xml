<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Rep_Project</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimCtrl_Rep_Project extends InventDimCtrl_Rep
{
    DocumentStatus              documentStatus;
    InventDimParm               inventDimParmFormletterParameters;
    InventDimParm               inventDimLine;
    InventDimParm               inventDimItem;
    CustFormletterParameters    custFormletterParameters;
    boolean                     firstInventDimParmFormletterParameters;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventDimCtrl_Rep_Project</c> class.
    /// </summary>
    /// <remarks>
    /// This method must always be called from the constructing new method.
    /// </remarks>
    public void init()
    {
        super();

        custFormletterParameters = CustFormletterParameters::find();
        firstInventDimParmFormletterParameters = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmFormletter</Name>
				<Source><![CDATA[
    protected void initDimParmFormletter()
    {
        ListEnumerator enumerator = this.dimFields().getEnumerator();

        switch (documentStatus)
        {
            case DocumentStatus::Confirmation :
                    InventDimFixedClass::inventDimFixed2InventDimParm(custFormletterParameters.InventDimConfirm,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
            case DocumentStatus::Invoice :
                    InventDimFixedClass::inventDimFixed2InventDimParm(custFormletterParameters.InventDimInvoice,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
            case DocumentStatus::PackingSlip :
                    InventDimFixedClass::inventDimFixed2InventDimParm(custFormletterParameters.InventDimPackingSlip,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
            case DocumentStatus::PickingList :
                    InventDimFixedClass::inventDimFixed2InventDimParm(custFormletterParameters.InventDimPickingList,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
            case DocumentStatus::Quotation :
                    InventDimFixedClass::inventDimFixed2InventDimParm(custFormletterParameters.InventDimQuotation,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
        }

        inventDimLine.clear();
        inventDimItem.clear();

        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            if (InventDim::isFieldIdProductDimension(dimFieldId))
            {
                this.setDimParmFieldId(dimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimParmFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set the field values of the <c>InventDimParm</c> table.
    /// </summary>
    /// <param name = "_dimFieldId">
    ///    A field ID from the <c>InventDim</c> table.
    /// </param>
    protected void setDimParmFieldId(FieldId _dimFieldId)
    {
        FieldId dimParmFieldId = InventDim::dim2dimParm(_dimFieldId);
        if (custFormletterParameters.ItemDimPlacement == ItemDimFormLetter::Line && inventDimParmFormletterParameters.(dimParmFieldId))
        {
            inventDimLine.(dimParmFieldId) = NoYes::Yes;
        }
        else if (custFormletterParameters.ItemDimPlacement == ItemDimFormLetter::Item && inventDimParmFormletterParameters.(dimParmFieldId))
        {
            inventDimItem.(dimParmFieldId) = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowControl</Name>
				<Source><![CDATA[
    protected boolean mustShowControl(InventDimControlInterface _fc)
    {
        FieldId inventDimParmFieldId = InventDim::dim2dimParm(inventDimControls.fieldId(_fc));
        return inventDimLine.(inventDimParmFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowField</Name>
				<Source><![CDATA[
    protected NoYes mustShowField(FieldId _dimFieldId)
    {
        FieldId parmFieldId = InventDim::dim2dimParm(_dimFieldId);

        if (firstInventDimParmFormletterParameters)
        {
            this.initDimParmFormletter();
        }

        if (_dimFieldId && inventDimParmFormletterParameters.(parmFieldId))
        {
            if (InventDim::isFieldIdProductDimension(_dimFieldId) && custFormletterParameters.ItemDimPlacement != ItemDimFormLetter::Below)
            {
                return NoYes::No;
            }
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        documentStatus = _documentStatus;
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Rep_Project construct()
    {
        return new InventDimCtrl_Rep_Project();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>