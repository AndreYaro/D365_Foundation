<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpd</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdUpd</c> class is the base class of production classes, which are used to update the
///    production order status.
/// </summary>
/// <remarks>
///    This is an abstract class and you cannot make an instance out of it. You can only inherit this
///    class from other production update classes. For update production order stage, the following classes
///    are used:
///    <list type="bullet">
///       <item>
///          <description><see cref="T:ProdUpdBOMCalc" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdCostEstimation" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdScheduling" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdScheduling_Operation" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdScheduling_Job" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdRelease" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdStartUp" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdReportFinished" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdHistoricalCost" /></description>
///       </item>
///    </list>
///     For Decrease production order status, the following classes are used:
///    <list type="bullet">
///       <item>
///          <description><see cref="T:ProdUpdStatusDecrease" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdStatusDecrease_CostEstimate" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdStatusDecrease_Schedule" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdStatusDecrease_Release" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdStatusDecrease_StartUp" /></description>
///       </item>
///       <item>
///          <description><see cref="T:ProdUpdStatusDecrease_Finished" /></description>
///       </item>
///    </list>
///     For Split production order, the <see cref="T:ProdUpdSplit" />
///     is used.
/// </remarks>
abstract class ProdUpd extends UpdateBase
{
    ProdTable prodTable;

    internal boolean isProdUpdProductionTypeTelemetryFlightEnabled = ProdUpdProductionTypeTelemetryFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <paramref name="prodTable" /> variable with a value from the parameter table.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Indicates whether the prodTable record should be selected for update; optional.
    /// </param>
    void initProdTable(boolean     _forUpdate = false)
    {
        ParmBuffer  parmBuffer  = this.parmParmBuffer();
        
        prodTable = ProdTable::find(parmBuffer.Id,_forUpdate);
       
        if (! prodTable.checkValid(parmBuffer.Id))
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdTablePessimisticLock</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the prodTable variable with a value from the parameter table. Uses a pessimistic lock for the update.
    /// </summary>
    internal void initProdTablePessimisticLock()
    {
       ParmBuffer  parmBuffer  = this.parmParmBuffer();
      
       prodTable = ProdTable::findWithPessimisticLock(parmBuffer.Id);
       
        if (! prodTable.checkValid(parmBuffer.Id))
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the value of the <paramref name="prodTable" /> variable, specifying which production order
    ///    will be updated.
    /// </summary>
    /// <returns>
    ///    The production order that will be updated.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="prodTable" /> variable is stored as a record from <see cref="T:ProdTable" />.
    ///    This variable specifies which production order will be updated.
    /// </remarks>
    ProdTable prodTable()
    {
        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInstrumentationAdditionalParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds additional telemetry parameters.
    /// </summary>
    /// <returns>
    ///    The instance of <c>SysInstrumentationAdditionalParameters</c> or null.
    /// </returns>
    internal SysInstrumentationAdditionalParameters addInstrumentationAdditionalParameters()
    {
        if (!prodTable.RecId)
        {
            return null;
        }
        return SysInstrumentationAdditionalParameters::construct().add(ProdInstrumentationActivities::ProductionType, enum2Symbol(enumNum(ProdType), prodTable.ProdType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInstrumentationAdditionalParametersToStopEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds additional telemetry parameters to the stop event.
    /// </summary>
    /// <param name="_instrumentationSegment">The instrumentation segment to which to add the parameters</param>
    internal void addInstrumentationAdditionalParametersToStopEvent(SysInstrumentationSegment _instrumentationSegment)
    {
        if (!prodTable.RecId)
        {
            return;
        }

        _instrumentationSegment.addAdditionalParameterToStopEvent(ProdInstrumentationActivities::ProductionType, enum2Symbol(enumNum(ProdType), prodTable.ProdType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printoutReportFromMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the report associated with the specified menu item.
    /// </summary>
    /// <param name="_menuItemStr">
    ///    The name of the menu item.
    /// </param>
    /// <param name="_caller">
    ///    The object the report is called from.
    /// </param>
    /// <param name="_buffer">
    ///    The table buffer passed to the report; optional.
    /// </param>
    public static void printoutReportFromMenuItem(str _menuItemStr, Object _caller, Common _buffer = null)
    {
        Args args = new Args();

        args.caller(_caller);
        if (_buffer)
        {
            args.record(_buffer);
        }
        args.parmEnumType(enumnum(boolean));
        args.parmEnum(true); // suppress report parameters dialog

        using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::PrintReportFromMenuItem, _buffer.RecId, SysInstrumentationAdditionalParameters::construct().add(ProdInstrumentationActivities::ParmMenuItemStr, _menuItemStr)))
        {
            MenuFunction menuFunction = new MenuFunction(_menuItemStr, MenuItemType::Output);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>