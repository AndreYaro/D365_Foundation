<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkRatingService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkRatingService</c> rating class applies transportation rates to shipping entities.
/// </summary>
public class TMSFwkRatingService
{
    private TMSFwkAccessorialHelper     accessorialHelper;
    private TMSFwkTransitTimeHelper     transitTimeHelper;
    private TMSFwkConstraintsHelper     constraintsHelper;
    private TMSFwkNumberSequenceHelper  numberSequenceHelper;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        accessorialHelper = TMSFwkAccessorialHelper::construct();
        transitTimeHelper = TMSFwkTransitTimeHelper::construct();
        constraintsHelper = TMSFwkConstraintsHelper::construct();
        numberSequenceHelper = TMSFwkNumberSequenceHelper::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSFwkRatingService construct()
    {
        return new TMSFwkRatingService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveRatingDtoList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves rating DTO list applicable for the current transaction.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_segment">Segment element</param>
    /// <returns></returns>
    public static RatingDtoList retrieveRatingDtoList(TmsTransactionFacade _transactionFacade, XElement _segment)
    {
        TMSCarrierCode carrierCode = _segment.RetrieveFirstInstanceUpString(ElementXmlConstants::CarrierCode);
        TMSCarrierServiceCode carrierServiceCode = _segment.RetrieveFirstInstanceUpString(ElementXmlConstants::CarrierServiceCode);
        TMSCarrierGroupCode carrierGroupCode = _segment.RetrieveFirstInstanceUpString(ElementXmlConstants::CarrierGroupCode);
        TMSModeCode modeCode = _segment.RetrieveFirstInstanceUpString(ElementXmlConstants::ModeCode);
        TMSScheduledShipUTCDateTime scheduledShipDate = _segment.RetrieveFirstInstanceEffectiveUpDateTime(ElementXmlConstants::ShipDate,
            _transactionFacade.getCurrentDateTime());
        RatingDtoList ratingDTOs = new RatingDtoList();

        if (TMSFwkRatingService::validate(_segment, carrierCode, carrierServiceCode))
        {
            //Get all carriers for carrier group
            if (carrierGroupCode != '')
            {
                ratingDTOs = TMSFwkRatingDtoHelper::getRatingDtosForCarrierGroupAndMode(_transactionFacade, scheduledShipDate, carrierGroupCode, modeCode);
            }
            else if (carrierCode != '' && carrierServiceCode != '')
            {
                RatingDTOs = TMSFwkRatingDtoHelper::getRatingDtosForCarrierAndCarrierService(
                        _transactionFacade,
                        scheduledShipDate,
                        carrierCode,
                        carrierServiceCode);
            }
            else if (carrierCode == ''
                    && carrierServiceCode == ''
                    && modeCode == ''
                    && carrierGroupCode == '')
            {
                //Return all carrier services if no carrier information was passed in.
                ratingDTOs = TMSFwkRatingDtoHelper::getRatingDtos(_transactionFacade, scheduledShipDate);
            }
            else
            {
                ratingDTOs = TMSFwkRatingDtoHelper::getRatingDtosForModeAndCarrier(_transactionFacade, scheduledShipDate, modeCode, carrierCode);
            }
        }

        return ratingDTOs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyNextProNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the next Pro Number from the sequence.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    public void applyNextProNumber(TmsTransactionFacade _transactionFacade)
    {
        numberSequenceHelper.retrieveNumberSequence(_transactionFacade, TMSNumberSequenceType::ProNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAccessorialCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the accessorial charges to the segment element.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_segment">Segment element.</param>
    /// <param name = "_ratingDtos">Rating DTO list.</param>
    public void processAccessorialCharges(
        TmsTransactionFacade    _transactionFacade,
        XElement                _segment,
        RatingDtoList           _ratingDtos)
    {
        if (_ratingDtos != null && _ratingDtos.Count > 0)
        {
            accessorialHelper.assignAccessorials(_transactionFacade, _segment, _ratingDtos);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processConstraints</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apllies rating constraints to the segment element.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_segment">Segment element.</param>
    /// <param name = "_ratingDtos">Rating DTO list.</param>
    public void processConstraints(TmsTransactionFacade _transactionFacade, XElement _segment, RatingDtoList _ratingDtos)
    {
        if (_ratingDtos != null && _ratingDtos.Count > 0)
        {
            constraintsHelper.processConstraints(_transactionFacade, _segment, _ratingDtos);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransitTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies transit time to the segment element.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_segment">Segment element.</param>
    /// <param name = "_ratingDtos">Rating DTO list.</param>
    public void processTransitTime(TmsTransactionFacade _transactionFacade, XElement _segment, RatingDtoList _ratingDtos)
    {
        if (_ratingDtos != null && _ratingDtos.Count > 0)
        {
            transitTimeHelper.retrieveTransitTimeForRatingDTOs(_transactionFacade, _segment, _ratingDtos);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRating</Name>
				<Source><![CDATA[
    private static RatingDto processRating(TmsTransactionFacade _transactionFacade, XElement _segment, RatingDto _ratingDto)
    {
        System.Object rateEngineInstance = TMSFwkRatingService::retrieveRateEngine(_segment, _ratingDto);

        if (rateEngineInstance != null)
        {
            TMSFwkIRateEngine rateEngine = rateEngineInstance;
            _ratingDto = rateEngine.rate(_transactionFacade, _segment, _ratingDto.RateMasterCode);
        }
        else
        {
            _ratingDto = null;
        }

        return _ratingDto;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveRateEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the rate engine object for a particular rating DTO.
    /// </summary>
    /// <param name = "_segment">The segment element.</param>
    /// <param name = "_ratingDto">Rating DTO.</param>
    /// <returns>An instance of rate engine; null otherwise.</returns>
    public static TMSFwkIRateEngine retrieveRateEngine(XElement _segment, RatingDto _ratingDto)
    {
        TMSFwkIRateEngine rateEngine = null;

        if (System.String::IsNullOrEmpty(_ratingDto.RateEngineCode))
        {
            XElement ratingEntity = _segment.RetrieveOrCreateRatingEntity(_ratingDto);
            ratingEntity.AddError(TMSFwkErrorDtoBuilderRate::buildEmptyRateEngine());
        }
        else
        {
            rateEngine = TMSFwkRateEngineFactory::createRateEngine(_ratingDto.RateEngineCode, _ratingDto);
        }

        return rateEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rateEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies transportation rate to an entity.
    /// </summary>
    /// <param name = "_transactionFacade"></param>
    /// <param name = "_entity"></param>
    /// <param name = "_ratingDtos"></param>
    public static void rateEntity(
        TmsTransactionFacade    _transactionFacade,
        XElement                _entity,
        RatingDtoList           _ratingDtos)
    {
        RatingDtoList newRatingDTOs = new RatingDtoList();
        newRatingDTOs.AddRange(_ratingDtos);
        RatingDto returnedRateDTO = null;
        XElement shipment = null;

        if (_ratingDtos != null && _ratingDtos.Count > 0)
        {
            if (_entity.GetString(ElementXmlConstants::ShippingEntityType) == EntityTypeXmlConstants::Segment)
            {
                shipment = _entity.Element(EntityXmlConstants::ShippingEntity);
            }
            else
            {
                shipment = _entity;
            }

            RatingDtoListEnumerator ratingDtosEnumerator = newRatingDTOs.GetListEnumerator();

            while (ratingDtosEnumerator.MoveNext())
            {
                RatingDto ratingDto = ratingDtosEnumerator.Current();
                returnedRateDTO = TMSFwkRatingService::processRating(_transactionFacade, shipment, ratingDTO);

                if (returnedRateDTO == null)
                {
                    _ratingDtos.Remove(ratingDTO);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBestRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates shipping entity so that only the cheapest, non-zero rating entity remains.
    /// </summary>
    /// <param name = "_shippingEntity">Shipping entity to update.</param>
    public static void setBestRate(XElement _shippingEntity)
    {
        // retrieve rates ensure that has a valid total rate > 0 and no errors
        XElement bestRate = _shippingEntity.RetrieveBestRate();

        if (bestRate != null)
        {
            // remove all but the BEST rate!
            XElementList ratingEntities = new XElementList(_shippingEntity.Descendants(EntityXmlConstants::RatingEntity));
            XElementListEnumerator ratingEntitiesEnumerator = ratingEntities.GetListEnumerator();

            while (ratingEntitiesEnumerator.MoveNext())
            {
                XElement current = ratingEntitiesEnumerator.Current();
                if (!current.Equals(bestRate))
                {
                    current.Remove();
                }
            }

            // add carrier/service at the shipment entity level
            _shippingEntity.AddOrChangeElement(ElementXmlConstants::CarrierCode, bestRate.GetString(ElementXmlConstants::CarrierCode));
            _shippingEntity.AddOrChangeElement(ElementXmlConstants::CarrierServiceCode, bestRate.GetString(ElementXmlConstants::CarrierServiceCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotalsOnRatingEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates total charges on rating entities based on sums of all rates beneath.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    public static void updateTotalsOnRatingEntities(TmsTransactionFacade _transactionFacade)
    {
        XElementList ratingEntitiesList = new XElementList(_transactionFacade.parmXTransaction().Descendants(EntityXmlConstants::RatingEntities));

        if (ratingEntitiesList != null)
        {
            XElementListEnumerator ratingEnitiesListEnumerator = ratingEntitiesList.GetListEnumerator();

            while (ratingEnitiesListEnumerator.MoveNext())
            {
                XElement ratingEntitiesElement = ratingEnitiesListEnumerator.Current();
                XElementList ratingEntityList = new XElementList(ratingEntitiesElement.Elements(EntityXmlConstants::RatingEntity));
                XElementListEnumerator ratingEntityListEnumerator = ratingEntityList.GetListEnumerator();

                while (ratingEntityListEnumerator.MoveNext())
                {
                    XElement ratingEntity = ratingEntityListEnumerator.Current();
                    ratingEntity.CreateOrSumElement(
                        ElementXmlConstants::TotalRate,
                        new XElementList(ratingEntity.Descendants(ElementXmlConstants::Rate)).SumElementsDecimal(ElementXmlConstants::TotalRate));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Voids the shipment.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_segment">Segment entity.</param>
    /// <param name = "_ratingDto">Rating DTO.</param>
    public static void voidEntity(
        TmsTransactionFacade    _transactionFacade,
        XElement                _segment,
        RatingDto               _ratingDto)
    {
        if (_ratingDto.rateEngineCode == '')
        {
            XElement ratingEntity = _segment.RetrieveOrCreateRatingEntity(_ratingDto);
            ratingEntity.AddError(TMSFwkErrorDtoBuilderRate::buildEmptyRateEngine());
        }
        else
        {
            TMSFwkIRateEngine rateEngine = TMSFwkRateEngineFactory::createRateEngine(_ratingDto.RateEngineCode, _ratingDto);
            rateEngine.voidShipment(_transactionFacade, _segment, _ratingDto);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomerChargeForDirectDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a customer rate charge based on the total rate
    /// if both Direct Delivery Customer Charge flag is true and a customer rate doesn't already exist
    /// </summary>
    /// <param name = "_shipmentEntity">Shipping entity.</param>
    /// <param name = "_ratingDtos">Rating DTO list.</param>
    public static void addCustomerChargeForDirectDelivery(XElement _shipmentEntity, RatingDtoList _ratingDtos)
    {
        if (TMSParameters::find().DirectDeliveryCustomerCharge == NoYes::Yes)
        {
            RatingDtoListEnumerator ratingDtoListEnumerator = _ratingDtos.GetListEnumerator();

            while (ratingDtoListEnumerator.MoveNext())
            {
                RatingDto ratingDto = ratingDtoListEnumerator.Current();
                XElement ratingEntity = _shipmentEntity.RetrieveOrCreateSegmentRE(ratingDto);
                XElementList rates = new XElementList(ratingEntity.Elements(ElementXmlConstants::Rate));
                XElementListEnumerator ratesEnumerator = rates.GetListEnumerator();

                while (ratesEnumerator.MoveNext())
                {
                    XElement rateElement = ratesEnumerator.Current();

                    // if we don't have a customer rate at this point, just inject one
                    if (rateElement.Element(ElementXmlConstants::CustomerRate) == null)
                    {
                        var totalRate = rateElement.Element(ElementXmlConstants::TotalRate).Value;
                        rateElement.Add(new XElement(ElementXmlConstants::CustomerRate, totalRate));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMissingRates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the CustomerRate and/or ShipperRate with TotalRate value if these elements are missing.
    /// </summary>
    /// <param name="_shipmentEntity">Shipment entity element.</param>
    /// <param name="_ratingDtos">List of rating objects.</param>
    public static void fillMissingRates(XElement _shipmentEntity, RatingDtoList _ratingDtos)
    {
        RatingDtoListEnumerator ratingDtoListEnumerator = _ratingDtos.GetListEnumerator();

        while (ratingDtoListEnumerator.MoveNext())
        {
            RatingDto ratingDto = ratingDtoListEnumerator.Current();
            XElement ratingEntity = _shipmentEntity.RetrieveOrCreateSegmentRE(ratingDto);
            XElementList rateElements = new XElementList(ratingEntity.Elements(ElementXmlConstants::Rate));
            XElementListEnumerator rateElementsEnumerator = rateElements.GetListEnumerator();

            while (rateElementsEnumerator.MoveNext())
            {
                XElement rateElement = rateElementsEnumerator.Current();
                str totalRate = rateElement.Element(ElementXmlConstants::TotalRate).Value;

                if (rateElement.Element(ElementXmlConstants::CustomerRate) == null)
                {
                    rateElement.Add(new XElement(ElementXmlConstants::CustomerRate, totalRate));
                }

                if (rateElement.Element(ElementXmlConstants::ShipperRate) == null)
                {
                    rateElement.Add(new XElement(ElementXmlConstants::ShipperRate, totalRate));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private static boolean validate(XElement _element, TMSCarrierCode _carrierCode, TMSCarrierServiceCode _carrierServiceCode)
    {
        if (_carrierServiceCode != '' && _carrierCode == '')
        {
            _element.GenerateElementForXPath(EntityXmlConstants::RatingEntities, EntityXmlConstants::RatingEntity)
                .AddError(TMSFwkErrorDtoBuilderRate::buildCarrierCodeService());

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>