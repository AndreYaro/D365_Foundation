<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Provides subledger journal information.
/// </summary>
[ExportMetadataAttribute("LedgerISubledgerJournalProvider", "DefaultProvider"),ExportAttribute("Dynamics.AX.Application.LedgerISubledgerJournalProvider")]
class SubledgerJournalProvider implements LedgerISubledgerJournalProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>subLedgerJournalNotTransferredRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a subledger journal entry has been transfered for a specified main account.
    /// </summary>
    /// <param name = "_mainAccountRecId">
    /// The <c>MainAccount</c> record id.
    /// </param>
    /// <returns>
    /// true if the subledger journal has been transferred; otherwise, false.
    /// </returns>
    public boolean subLedgerJournalNotTransferredRecId(MainAccountRecId _mainAccountRecId)
    {
        Query                   query;
        Query                   querySubLedJourAcctEntry;
        QueryRun                queryRun;
        QueryRun                queryRunSubLedJourAcctEntry;

        QueryBuildDataSource    qdbsSubledgerJournalAccountEntry;
        QueryBuildDataSource    qdbsDimensionAttributeValueCombination;
        QueryBuildRange         queryBuildRange;
        SubledgerJournalEntry   subledgerJournalEntry;

        if (_mainAccountRecId == 0)
        {
            // This check only applies on main account updates, so drop out early if it's a new main account
            return false;
        }

        query = new Query(queryStr(SubledgerJournalEntryNotTransferred));

        queryRun = new QueryRun(query);
        querySubLedJourAcctEntry = new Query();
        qdbsSubledgerJournalAccountEntry = querySubLedJourAcctEntry.addDataSource(tableNum(SubledgerJournalAccountEntry));
        queryBuildRange = qdbsSubledgerJournalAccountEntry.addRange(fieldNum(SubledgerJournalAccountEntry, SubledgerJournalEntry));

        qdbsDimensionAttributeValueCombination = qdbsSubledgerJournalAccountEntry.addDataSource(tableNum(DimensionAttributeValueCombination));
        qdbsDimensionAttributeValueCombination.joinMode(JoinMode::InnerJoin);
        qdbsDimensionAttributeValueCombination.addLink(fieldNum(SubledgerJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));

        qdbsDimensionAttributeValueCombination.addRange(fieldNum(DimensionAttributeValueCombination, MainAccount)).value(SysQuery::value(_mainAccountRecId));

        while (queryRun.next())
        {
            subledgerJournalEntry = subledgerJournalEntry.data(queryRun.get(tableNum(SubledgerJournalEntry)));
            queryBuildRange.value(SysQuery::value(subledgerJournalEntry.RecId));

            queryRunSubLedJourAcctEntry = new QueryRun(querySubLedJourAcctEntry);

            if (queryRunSubLedJourAcctEntry.next())
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>