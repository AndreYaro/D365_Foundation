<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostCompareChartViewModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostCompareChartViewModel</c> class is a base class ViewModel for charts that show comparison of cost.
/// </summary>
public abstract class CostCompareChartViewModel
{
    FormDataSource                  chartDataSource;
    SysChart                        chartControl;
    FormButtonControl               homeControl, costGroupTypeControl, costGroupControl;
    CostPriceCompareChartDrillLevel drillLevel;
    boolean                         isChartUnitCostBased;
    boolean                         isDrilldownEnabled = true;

    CostCompareChartTmp             chartData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>CostCompareChartViewModel</c> class.
    /// </summary>
    /// <param name = "_costCompareArgs">Cost comparison parameters.</param>
    public void init(CostICompareArgs _costCompareArgs)
    {
        this.initChartData(_costCompareArgs);

        chartDataSource.cursor().setTmpData(chartData);

        this.initControls();
        this.updateChart('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDrilldownEnabled</Name>
				<Source><![CDATA[
    public boolean isDrilldownEnabled(boolean _isDrilldownEnabled = isDrilldownEnabled)
    {
        if (!prmIsDefault(_isDrilldownEnabled))
        {
            isDrilldownEnabled = _isDrilldownEnabled;
        }

        return isDrilldownEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChartData</Name>
				<Source><![CDATA[
    protected abstract void initChartData(CostICompareArgs _costCompareArgs) { }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    private void initControls()
    {
        if (isDrilldownEnabled)
        {
            costGroupControl.visible(false);
            costGroupTypeControl.visible(false);
        }

        drillLevel = CostPriceCompareChartDrillLevel::Start;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the chart data source.
    /// </summary>
    /// <param name = "_chartDataSource">Data source based on <c>CostCompareChartTmp</c> table.</param>
    public void setDataSource(FormDataSource _chartDataSource)
    {
        chartDataSource = _chartDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChartUnitCostBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the flag specifying if the chart is based on unit cost.
    /// </summary>
    /// <param name = "_isChartUnitCostBased">True if the chart is based on unit cost; otherwise, false.</param>
    public void isChartUnitCostBased(boolean _isChartUnitCostBased)
    {
        isChartUnitCostBased = _isChartUnitCostBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHomeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reset filter control.
    /// </summary>
    /// <param name = "_homeControl">Reset filter button control.</param>
    public void setHomeControl(FormButtonControl _homeControl)
    {
        homeControl = _homeControl;
        homeControl.OnClicked += eventhandler(this.homeButtonClicked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>homeButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the reset button click.
    /// </summary>
    /// <param name = "_sender">Form which contains the clicked button.</param>
    /// <param name = "_eventArgs">Arguments for the button click event.</param>
    public void homeButtonClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        drillLevel = CostPriceCompareChartDrillLevel::Start;
        this.updateChart('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>costGroupTypeButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the cost group type button click.
    /// </summary>
    /// <param name = "_sender">Form which contains the clicked button.</param>
    /// <param name = "_eventArgs">Arguments for the button click event.</param>
    public void costGroupTypeButtonClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        drillLevel = CostPriceCompareChartDrillLevel::CostGroupType;
        this.updateChart(costGroupTypeControl.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>costGroupButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the cost group button click.
    /// </summary>
    /// <param name = "_sender">Form which contains the clicked button.</param>
    /// <param name = "_eventArgs">Arguments for the button click event.</param>
    public void costGroupButtonClicked(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        drillLevel = CostPriceCompareChartDrillLevel::CostGroup;
        this.updateChart(costGroupControl.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChartControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the chart control.
    /// </summary>
    /// <param name = "_chartControl">Chart control of type <c>SysChart</c>.</param>
    public void setChartControl(SysChart _chartControl)
    {
        chartControl = _chartControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostGroupTypeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the cost group type button control.
    /// </summary>
    /// <param name = "_costGroupTypeControl">Cost group type button control.</param>
    public void setCostGroupTypeControl(FormButtonControl _costGroupTypeControl)
    {
        costGroupTypeControl = _costGroupTypeControl;
        costGroupTypeControl.OnClicked += eventhandler(this.costGroupTypeButtonClicked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostGroupControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the cost group button.
    /// </summary>
    /// <param name = "_costGroupControl">Cost group button.</param>
    public void setCostGroupControl(FormButtonControl _costGroupControl)
    {
        costGroupControl = _costGroupControl;
        costGroupControl.OnClicked += eventhandler(this.costGroupButtonClicked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChart</Name>
				<Source><![CDATA[
    protected void updateChart(str _rangeValue)
    {
        if (isDrilldownEnabled)
        {
            this.updateChartControlVisibility(_rangeValue);
            this.updateDataSourceGroupByAndRange(_rangeValue);
        }

        this.updateChartProperties();
        chartDataSource.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChartControlVisibility</Name>
				<Source><![CDATA[
    private void updateChartControlVisibility(str _displayValue)
    {
        switch (drillLevel)
        {
            case CostPriceCompareChartDrillLevel::Start:
                costGroupTypeControl.visible(false);
                costGroupControl.visible(false);
                break;
            case CostPriceCompareChartDrillLevel::CostGroupType:
                costGroupTypeControl.visible(true);
                costGroupTypeControl.text(_displayValue);
                costGroupControl.visible(false);
                break;
            case CostPriceCompareChartDrillLevel::CostGroup:
                costGroupTypeControl.visible(true);
                costGroupControl.visible(true);
                costGroupControl.text(_displayValue);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataSourceGroupByAndRange</Name>
				<Source><![CDATA[
    private void updateDataSourceGroupByAndRange(str _rangeValue)
    {
        chartDataSource.queryBuildDataSource().clearRanges();
        Query query = this.getDrilldownBaseQuery(_rangeValue);
        chartDataSource.query(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDrilldownBaseQuery</Name>
				<Source><![CDATA[
    protected abstract Query getDrilldownBaseQuery(str _rangeValue) { }

]]></Source>
			</Method>
			<Method>
				<Name>updateChartProperties</Name>
				<Source><![CDATA[
    private void updateChartProperties()
    {
        SysBuildChart   chartBuild      = chartControl.build();
        List            dataSets        = chartBuild.parmDataSets();
        List            measures        = chartBuild.parmMeasures();
        FieldName       groupByField, keyField;

        switch (drillLevel)
        {
            case CostPriceCompareChartDrillLevel::Start:
                groupByField = fieldStr(CostCompareChartTmp, CostGroupType);
                keyField = groupByField;
                break;
            case CostPriceCompareChartDrillLevel::CostGroupType:
                groupByField = fieldStr(CostCompareChartTmp, CostGroupId);
                keyField = groupByField;
                break;
            case CostPriceCompareChartDrillLevel::CostGroup:
                groupByField = fieldStr(CostCompareChartTmp, Resource);
                keyField = fieldStr(CostCompareChartTmp, CostGroupId);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        ListEnumerator enumerator = dataSets.getEnumerator();
        while (enumerator.moveNext())
        {
            SysBuildChartDataSet dataSet = enumerator.current();
            dataSet.parmGroupBy(groupByField);
        }
        chartBuild.parmDataSets(dataSets);

        enumerator = measures.getEnumerator();
        while (enumerator.moveNext())
        {
            SysBuildChartMeasure measure = enumerator.current();
            measure.parmKeyField(keyField);
        }
        chartBuild.parmMeasures(measures);
        chartControl.applyBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>drillThroughClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the chart in response to a drill through click event.
    /// </summary>
    /// <param name = "_args">The data value clicked in the chart.</param>
    public void drillThroughClicked(Args _args)
    {
        const str clickedValueMapKey    = 'key';
        Map       valueMap              = _args.parmObject();
        str       clickedValue          = valueMap.lookup(clickedValueMapKey);

        if (drillLevel != CostPriceCompareChartDrillLevel::CostGroup)
        {
            this.incrementedDrillLevel(drillLevel);
            this.updateChart(clickedValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementedDrillLevel</Name>
				<Source><![CDATA[
    protected void incrementedDrillLevel(CostPriceCompareChartDrillLevel _drillLevel)
    {
        switch (_drillLevel)
        {
            case CostPriceCompareChartDrillLevel::Start:
                drillLevel = CostPriceCompareChartDrillLevel::CostGroupType;
                break;
            case CostPriceCompareChartDrillLevel::CostGroupType:
                drillLevel = CostPriceCompareChartDrillLevel::CostGroup;
                break;
            case CostPriceCompareChartDrillLevel::CostGroup:
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
