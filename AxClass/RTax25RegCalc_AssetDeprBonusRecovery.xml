<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_AssetDeprBonusRecovery</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_AssetDeprBonusRecovery extends RTax25RegCalc_Assets implements BatchRetryable
{
    #define.StartDateRecovery(01\01\2008)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAsset</Name>
				<Source><![CDATA[
    protected boolean checkAsset()
    {
        RAssetAcquisitionDate   acquisitionDate;
        boolean ret;
    
        ret = super();
    
        acquisitionDate = RAssetTrans::transTypeFirstDate(rAssetTable.AccountNum,
                                                          assetStandardId,
                                                          RAssetTransType::Acquisition,
                                                          false);
        if (acquisitionDate < #StartDateRecovery)
            return false;
    
        if (! (select firstonly rAssetTrans
                   where rAssetTrans.AccountNum      == rAssetTable.AccountNum               &&
                         rAssetTrans.AssetStandardId == assetStandardId                      &&
                         rAssetTrans.PostingType     == RAssetPostingType::DepreciationBonus &&
                         ! rAssetTrans.StornoRecId).RecId)
            return false;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        RAssetTransCorrectiveView   bonus;
        RefRecId                    profitTableRecId;
        ReportingDate_RU            correctedPeriodDate;
        Query                       query = this.createQuery();
        QueryBuildDataSource        qbdsTrans,
                                    qbdsTable = query.dataSourceTable(tableNum(RAssetTable)),
                                    qbdsStandard = query.dataSourceTable(tableNum(RAssetStandards));
    
        qbdsStandard.sortClear();
        qbdsStandard.addSelectionField(fieldNum(RAssetStandards, TableId));
    
        qbdsTable.joinMode(JoinMode::ExistsJoin);
    
        qbdsTrans = qbdsStandard.addDataSource(tableNum(RAssetTransCorrectiveView));
    
        qbdsTrans.addSelectionField(fieldNum(RAssetTransCorrectiveView, ReportingDate));
        qbdsTrans.addSelectionField(fieldNum(RAssetTransCorrectiveView, DefaultDimension));
        qbdsTrans.addSelectionField(fieldNum(RAssetTransCorrectiveView, LedgerDimension));
    
        qbdsTrans.addSortField(fieldNum(RAssetTransCorrectiveView, ReportingDate), SortOrder::Ascending);
    
        qbdsTrans.addLink(fieldNum(RAssetStandards, AssetId), fieldNum(RAssetTransCorrectiveView, AccountNum));
        qbdsTrans.fetchMode(QueryFetchMode::One2One);
        qbdsTrans.joinMode(JoinMode::InnerJoin);
    
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, AssetStandardId)).value(queryValue(assetStandardId));
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, PostingType)).value(queryValue(RAssetPostingType::DepreciationBonusRecovery));
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, AccountingDate)).value(queryRange(_fromDateCalc, _toDateCalc));
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, ReportingDate)).value(queryRange(dateNull(), _toDateCorr));
    
        qr = new QueryRun(query);
    
        while (qr.next())
        {
            bonus = qr.get(tableNum(RAssetTransCorrectiveView));
    
            profitTableRecId = RTax25ProfitTable::findDefaultDimension(bonus.DefaultDimension ? bonus.DefaultDimension :
                                                                                        LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(bonus.LedgerDimension)).RecId;
            if (!profitTableRecId)
                continue;
    
            correctedPeriodDate = dateEndQtr(bonus.ReportingDate);
            break;
        }
    
        return correctedPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableOperation</Name>
				<Source><![CDATA[
    protected AmountMST tableOperation()
    {
        RefRecId              profitTableRecId;
        RAssetAmount          rAssetAmount;
        RAssetTransReportingView    bonus, bonusStorno;
        Tax                   tax;
        RTax25PeriodIterator        periodIterator = rTax25PeriodIterator.clone();
    
        rTax25PeriodIterator.first();
    
        do
        {
        while select DefaultDimension, LedgerDimension, AmountMST,
                         ReportingDate, AccountNum, TableId, RecId
            from bonus
            where bonus.AccountNum      == rAssetTable.AccountNum                       &&
                  bonus.AssetStandardId == assetStandardId                              &&
                  bonus.PostingType     == RAssetPostingType::DepreciationBonusRecovery &&
                      bonus.AccountingDate  >= rTax25PeriodIterator.fromDateAccounting()    &&
                      bonus.AccountingDate  <= rTax25PeriodIterator.toDateAccounting()      &&
                      bonus.ReportingDate   >= rTax25PeriodIterator.fromDateReporting()     &&
                      bonus.ReportingDate   <= rTax25PeriodIterator.toDateReporting()
            {
                //ignoring transactions which were reversed at the same period
                periodIterator.first();
    
                do
                {
                    select firstonly RecId, TransRecId from bonusStorno
            where bonusStorno.RecId         == bonus.StornoRecId &&
                              bonusStorno.AccountingDate  >= periodIterator.fromDateAccounting()    &&
                              bonusStorno.AccountingDate  <= periodIterator.toDateAccounting()      &&
                              bonusStorno.ReportingDate   >= periodIterator.fromDateReporting()     &&
                              bonusStorno.ReportingDate   <= periodIterator.toDateReporting();
    
                    if (bonusStorno.RecId)
                    {
                        break;
                    }
                }
                while (periodIterator.next());
    
                if (bonusStorno.RecId)
        {
                    continue;
                }
    
            profitTableRecId = RTax25ProfitTable::findDefaultDimension(bonus.DefaultDimension ? bonus.DefaultDimension :
                                                                                        LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(bonus.LedgerDimension)).RecId;
            if (!profitTableRecId)
                continue;
            tax  = new Tax();
            rAssetAmount = bonus.AmountMST;
            regQuery.addBodyRecord(profitTableRecId,
                                        [bonus.ReportingDate,
                                    RTax25ProfitTable::find(profitTableRecId).Description,
                                    strfmt("@GLS113678", bonus.AccountNum),
                                    rAssetAmount,
                                    tax.taxCalcWithoutSource_RU(RTax25ProfitTable::find(profitTableRecId).taxCode(),
                                                                bonus.ReportingDate,
                                                                CompanyInfoHelper::standardCurrency(),
                                                                rAssetAmount,
                                                                TaxModuleType::Voucher)],
                                        tableNum(RAssetTrans),
                                        bonus.TransRecId,
                                    strfmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name));
        }
        }
        while (rTax25PeriodIterator.next());
    
        return 0.0;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>