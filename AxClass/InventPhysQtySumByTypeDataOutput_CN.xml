<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPhysQtySumByTypeDataOutput_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventPhysQtySumByTypeDataOutput_CN</c> class is used to process inventory summary records group by type.
/// </summary>

class InventPhysQtySumByTypeDataOutput_CN extends InventPhysQtySumDataOutput_CN
{
    //save qty of each type
    Map qtyInMap, qtyOutMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQtyOfType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets quantity of some type for current item and dimension.
    /// </summary>
    /// <param name="_type">
    /// A transaction type
    /// </param>
    /// <param name="_dir">
    /// The direction of transaction.
    /// </param>
    /// <returns>
    /// The quantity of a transaction type.
    /// </returns>

    private InventQty getQtyOfType(InventTransType _type, InventDirection _dir)
    {
        if (_dir == InventDirection::Receipt)
        {
            if (qtyInMap.exists(_type))
            {
                return qtyInMap.lookup(_type);
            }
            else
            {
                return 0;
            }
        }
        else if (_dir == InventDirection::Issue)
        {
            if (qtyOutMap.exists(_type))
            {
                return qtyOutMap.lookup(_type);
            }
            else
            {
                return 0;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new()
    {
        qtyInMap = new Map(Types::Enum, Types::Real);
        qtyOutMap = new Map(Types::Enum, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventSumOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates new output line.
    /// </summary>
    /// <returns>
    /// The new output line.
    /// </returns>
    protected InventPhysQtySumTmp_CN newInventSumOutput()
    {
        InventPhysQtySumTmp_CN tmpInventSum = super();

        //out direction
        tmpInventSum.SoldQty        =   this.getQtyOfType(InventTransType::Sales, InventDirection::Issue);
        tmpInventSum.ProdOutQty     =   this.getQtyOfType(InventTransType::Production, InventDirection::Issue)
                                        + this.getQtyOfType(InventTransType::ProdLine, InventDirection::Issue)
                                        + this.getQtyOfType(InventTransType::BOMLine, InventDirection::Issue)
                                        + this.getQtyOfType(InventTransType::BOMMain, InventDirection::Issue);
        tmpInventSum.TransferOutQty =   this.getQtyOfType(InventTransType::InventTransfer, InventDirection::Issue);
        tmpInventSum.CountOutQty    =   this.getQtyOfType(InventTransType::InventCounting, InventDirection::Issue);
        //in directon
        tmpInventSum.PurchQty       =   this.getQtyOfType(InventTransType::Purch, InventDirection::Receipt);
        tmpInventSum.ProdInQty      =   this.getQtyOfType(InventTransType::Production, InventDirection::Receipt)
                                        + this.getQtyOfType(InventTransType::ProdLine, InventDirection::Receipt)
                                        + this.getQtyOfType(InventTransType::BOMLine, InventDirection::Receipt)
                                        + this.getQtyOfType(InventTransType::BOMMain, InventDirection::Receipt);
        tmpInventSum.TransferInQty  =   this.getQtyOfType(InventTransType::InventTransfer, InventDirection::Receipt);
        tmpInventSum.CountInQty     =   this.getQtyOfType(InventTransType::InventCounting, InventDirection::Receipt);

        return tmpInventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLineChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acts when the record is changed.
    /// </summary>

    protected void onLineChanged()
    {
        super();

        qtyInMap.insert(currentInventSum.InventTransType, currentInventSum.receivedQty());
        qtyOutMap.insert(currentInventSum.InventTransType, currentInventSum.issuedQty());

        if (currentInventSum.InventTransType == InventTransType::Sales)
        {
            onHandQty = currentInventSum.PhysicalQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshGroupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshs group data for a new group of records.
    /// </summary>

    protected void refreshGroupData()
    {
        MapEnumerator   qtyEnum;

        super();

        qtyEnum = qtyInMap.getEnumerator();
        while (qtyEnum.moveNext())
        {
            qtyInMap.insert(qtyEnum.currentKey(),0);
        }
        qtyEnum = qtyOutMap.getEnumerator();
        while (qtyEnum.moveNext())
        {
            qtyOutMap.insert(qtyEnum.currentKey(),0);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
