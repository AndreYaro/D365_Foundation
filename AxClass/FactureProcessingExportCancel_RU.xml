<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureProcessingExportCancel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureProcessingExportCancel_RU extends FactureProcessingExport_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteFacture</Name>
				<Source><![CDATA[
    private void deleteFacture(SalesBookFactureProcessingType_RU _newOperationType )
    {
        FactureDelete_RU     factureDelete;
        FactureJour_RU       factureJour;

        while select forupdate factureJour
            order by factureId desc, factureDate desc
            where factureJour.FactureType           == FactureType_RU::Facture          &&
                  factureJour.SourceExportFactureId == factureJourOrig.FactureId        &&
                  factureJour.FactureDate           >= taxPeriodFrom                    &&
                  factureJour.FactureDate           <= taxPeriodTo                      &&
                  factureJour.ProcessingType        == _newOperationType

        {
            factureDelete = FactureDelete_RU::construct(factureJour);
            factureDelete.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpCursor</Name>
				<Source><![CDATA[
    protected void initTmpCursor()
    {
        select forupdate tmpFactureProcessing
            where tmpFactureProcessing.Mark == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newType</Name>
				<Source><![CDATA[
    protected SalesBookFactureProcessingType_RU newType()
    {
        FactureJour_RU factureJourLast, factureJourCurrent;
        SalesBookFactureProcessingType_RU ret;

        switch (tmpFactureProcessing.CurrentProcessingType)
        {
            case SalesBookFactureProcessingType_RU::VATZero:
                ret = SalesBookFactureProcessingType_RU::None;
                break;

            case SalesBookFactureProcessingType_RU::VATStandard:
                ret = SalesBookFactureProcessingType_RU::None;
                break;

            case SalesBookFactureProcessingType_RU::VATStandardCorrection:
                factureJourCurrent = this.findLastFacture(SalesBookFactureProcessingType_RU::VATStandardCorrection, taxPeriodFrom, taxPeriodTo);
                if (factureJourCurrent && factureJourCurrent.RecId != factureJourOrig.RecId)
                {
                    ret = SalesBookFactureProcessingType_RU::VATZero;
                }
                else
                {
                    ret = SalesBookFactureProcessingType_RU::None;
                }

                break;

            case SalesBookFactureProcessingType_RU::VATZeroCorrection:
                factureJourCurrent = this.findLastFacture(SalesBookFactureProcessingType_RU::VATZeroCorrection, taxPeriodFrom, taxPeriodTo);

                if (factureJourCurrent)
                {
                    factureJourLast = this.findLastFacture(SalesBookFactureProcessingType_RU::VATZeroCorrection, dateNull(), taxPeriodFrom);
                    ret = factureJourLast.ProcessingType;
                }
                else
                {
                    ret = SalesBookFactureProcessingType_RU::VATStandardCorrection;
                }

                break;

            case SalesBookFactureProcessingType_RU::OverdueConfirmation:
                factureJourCurrent = this.findLastFacture(SalesBookFactureProcessingType_RU::OverdueConfirmation, taxPeriodFrom, taxPeriodTo);

                if (factureJourCurrent)
                {
                    factureJourLast = this.findLastFacture(SalesBookFactureProcessingType_RU::OverdueConfirmation, dateNull(), taxPeriodFrom);
                    ret = factureJourLast.ProcessingType;
                }
                else
                {
                    ret = SalesBookFactureProcessingType_RU::None;
                }
                break;
             //cancel all
            case SalesBookFactureProcessingType_RU::None:
                ret = SalesBookFactureProcessingType_RU::None;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingOperationType</Name>
				<Source><![CDATA[
    protected void processingOperationType()
    {
        SalesBookFactureProcessingType_RU currentOperationType = tmpFactureProcessing.CurrentProcessingType;

        switch (currentOperationType)
        {
            case SalesBookFactureProcessingType_RU::VATZero:
                factureJourOrig.ProcessingType = this.newType();
                this.createCorrection(SalesBookFactureProcessingType_RU::VATStandardCorrection);
                break;

            case SalesBookFactureProcessingType_RU::VATStandard:
                factureJourOrig.ProcessingType = this.newType();
                this.deleteFacture(currentOperationType);
                this.createCorrection(SalesBookFactureProcessingType_RU::VATZeroCorrection);
                break;

            case SalesBookFactureProcessingType_RU::VATStandardCorrection:
                factureJourOrig.ProcessingType = this.newType();
                this.deleteFacture(SalesBookFactureProcessingType_RU::VATZero);
                this.deleteFacture(SalesBookFactureProcessingType_RU::VATStandardCorrection);
                this.createCorrection(SalesBookFactureProcessingType_RU::VATZeroCorrection);
                break;

            case SalesBookFactureProcessingType_RU::VATZeroCorrection:
                factureJourOrig.ProcessingType = this.newType();
                this.deleteFacture(factureJourOrig.ProcessingType);
                this.deleteFacture(SalesBookFactureProcessingType_RU::VATStandard);
                this.deleteFacture(SalesBookFactureProcessingType_RU::VATStandardCorrection);
                this.createCorrection(SalesBookFactureProcessingType_RU::VATStandardCorrection);
                break;

            case SalesBookFactureProcessingType_RU::OverdueConfirmation:
                factureJourOrig.ProcessingType = this.newType();

                this.deleteFacture(factureJourOrig.ProcessingType);
                this.deleteFacture(SalesBookFactureProcessingType_RU::VATStandard);
                this.deleteFacture(SalesBookFactureProcessingType_RU::OverdueConfirmation);
                this.deleteFacture(SalesBookFactureProcessingType_RU::VATStandardCancellation);
                if (factureJourOrig.ProcessingType == SalesBookFactureProcessingType_RU::None)
                {
                    this.createCorrection(SalesBookFactureProcessingType_RU::VATZeroCorrection);
                }
                break;
             //cancel all
            case SalesBookFactureProcessingType_RU::None:
                switch (factureJourOrig.ProcessingType)
                {
                    case SalesBookFactureProcessingType_RU::VATStandardCorrection :
                    case SalesBookFactureProcessingType_RU::VATStandard           :
                    case SalesBookFactureProcessingType_RU::OverdueConfirmation   :
                        this.createCorrection(SalesBookFactureProcessingType_RU::VATZeroCorrection);
                        break;
                    case SalesBookFactureProcessingType_RU::VATZero               :
                    case SalesBookFactureProcessingType_RU::VATZeroCorrection     :
                        this.createCorrection(SalesBookFactureProcessingType_RU::VATZeroCorrection);
                        break;
                }
                factureJourOrig.ProcessingType = this.newType();
                this.deleteFacture(factureJourOrig.ProcessingType);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewStatus</Name>
				<Source><![CDATA[
    protected boolean validateNewStatus(SalesBookFactureProcessingType_RU _processingType)
    {
        TransDate   toDate;
        TransDate   fromDate;
        boolean     ret = true;
        ;

        if ((factureJourOrig.ProcessingType == SalesBookFactureProcessingType_RU::VATZero              ||
             factureJourOrig.ProcessingType == SalesBookFactureProcessingType_RU::VATZeroCorrection    ||
             factureJourOrig.ProcessingType == SalesBookFactureProcessingType_RU::OverdueConfirmation) &&
             factureJourOrig.StatusChangeDate)
        {
            if (RestoredVATLogTable_RU::purchBookExpConfirmExists(factureJourOrig.StatusChangeDate, true))
            {
                [fromDate, toDate] = BookDataCalc_RU::datePeriodBook(factureJourOrig.StatusChangeDate);

                ret = checkFailed(strfmt("@GLS114224", fromDate, toDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>