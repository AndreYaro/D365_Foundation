<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGiftCardExpiration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailGiftCardExpiration</c> class sets the expired status for the expired gift cards.
/// </summary>
class RetailGiftCardExpiration extends RunBaseBatch implements BatchRetryable
{
    DialogField  dialogExpirationDelay;

    PositiveDays expirationDelay;

    #define.defaultExpirationDelay(1)

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        expirationDelay
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogExpirationDelay = dialog.addFieldValue(extendedtypestr(PositiveDays), expirationDelay, "@SYP4880783", "@SYP4880784");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        expirationDelay = dialogExpirationDelay.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        expirationDelay = #defaultExpirationDelay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RetailGiftCardTable giftCardTable;
        date expiryDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - expirationDelay;

        ttsBegin;

        update_recordSet giftCardTable
            setting Status = RetailGiftCardStatus::Expired
            where giftCardTable.Status     == RetailGiftCardStatus::Active &&
                  giftCardTable.ExpiryDate != dateNull() &&
                  giftCardTable.ExpiryDate <= expiryDate;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailGiftCardExpiration</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>RetailGiftCardExpiration</c> class.
    /// </returns>
    public static RetailGiftCardExpiration construct()
    {
        return new RetailGiftCardExpiration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYP4880779";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RetailGiftCardExpiration giftCardExpiration;

        RetailGiftCardExpiration::validateSettings();

        giftCardExpiration = RetailGiftCardExpiration::construct();

        if (giftCardExpiration.prompt())
        {
            giftCardExpiration.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates requeried settings.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The procedure must be run in the Gift card company.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The Use gift card policies parameter is not enebled.
    /// </exception>
    private static void validateSettings()
    {
        RetailParameters retailParameters = RetailParameters::find();

        if (retailParameters.GiftCardCompany != curext())
            throw error(strFmt("@SYP4880785",
                SysDictMenu::newMenuItem(menuitemActionStr(RetailGiftCardExpiration), MenuItemType::Action).label()));

        if (!retailParameters.UseGiftCardPolicies)
            throw error(strFmt("@SYP4880788",
                SysDictMenu::newMenuItem(menuitemActionStr(RetailGiftCardExpiration), MenuItemType::Action).label()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailGiftCardExpiration</c> class
    ///  can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailGiftCardExpiration</c> can
    ///  be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>