<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVoucherApplicationSuite_IT_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(VendVoucher))]
public final class VendVoucherApplicationSuite_IT_Extension
{
    public boolean isUsualExporter_IT;
    public boolean isUsualExporterLine_IT;
    public boolean isUsualExporterInvoice_IT;
    public IntentLetter_IT intentLetter_IT;
    public Plafond_IT plafond_IT;
    public TaxGroup plafondTaxGroup_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateVendInvoiceJour</Name>
				<Source><![CDATA[
    protected RefRecId populateVendInvoiceJour(CustVendTrans _vendTrans)
    {
        RefRecId ret = next populateVendInvoiceJour(_vendTrans);

        if (FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            this.initUsualExporter_IT();

            if (common != null
                && common.TableId == tableNum(LedgerJournalTrans)
                && plafondTaxGroup_IT)
            {
                isUsualExporterInvoice_IT = this.checkUsualExporterBeforePosting_IT(common);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUsualExporterBeforePosting_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates tax group before invoice posting.
    /// </summary>
    /// <param name = "_journalTrans">Ledger journal line.</param>
    /// <returns>true if tax group is consistent; false otherwise.</returns>
    /// <exception>Throws exception if tax group can not be used.</exception>
    protected boolean checkUsualExporterBeforePosting_IT(LedgerJournalTrans _journalTrans)
    {
        boolean ret = true;

        if (!_journalTrans)
        {
            ret = false;
        }

        if (ret && isUsualExporter_IT)
        {
            if (_journalTrans.TaxGroup == plafondTaxGroup_IT)
            {
                ret = true;
            }
        }
        else if (ret && _journalTrans.TaxGroup == plafondTaxGroup_IT)
        {
            throw error(strFmt("@ExtendedItallianLocalization:ExemptionTaxGroupCannotBeUsed", plafondTaxGroup_IT));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUsualExporter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes plafond fields.
    /// </summary>
    protected void initUsualExporter_IT()
    {
        VendIntentLetterId_IT intentLetterId;
        LedgerJournalTrans ledgerJournalTrans;
        VendInvoiceJour vendInvoiceJour = this.parmVendInvoiceJour_W();

        if (common.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = common;
            intentLetterId = ledgerJournalTrans.IntentLetterId_IT;
        }

        if (intentLetterId)
        {
            intentLetter_IT = IntentLetter_IT::find(intentLetterId);

            if (intentLetter_IT.VendAccount != vendInvoiceJour.InvoiceAccount)
            {
                throw error(strfmt("@ExtendedItallianLocalization:IntentLetterRelatedToVendor", intentLetter_IT.IntentLetterId, intentLetter_IT.VendAccount));
            }

            isUsualExporter_IT = (intentLetter_IT.RecId != 0);
            plafondTaxGroup_IT = VendParameters::find().PlafondTaxGroup_IT;
            plafond_IT = Plafond_IT::findActivePlafond(transDate, true);
            vendInvoiceJour.IntentLetterId_IT = intentLetter_IT.IntentLetterId;
            vendInvoiceJour.PlafondDate_IT = ledgerJournalTrans.PlafondDate_IT;
        }

        this.parmVendInvoiceJour_W(vendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceJour_W</Name>
				<Source><![CDATA[
    public VendInvoiceJour parmVendInvoiceJour_W(VendInvoiceJour _vendInvoiceJour = vendInvoiceJour)
    {
        this.vendInvoiceJour = _vendInvoiceJour;
        return this.vendInvoiceJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>