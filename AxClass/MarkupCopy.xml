<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MarkupCopy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>MarkupCopy</c>.
    /// </summary>
    /// <returns>
    /// An instance of the <c>MarkupCopy</c> class.
    /// </returns>
    public static MarkupCopy construct()
    {
        return new MarkupCopy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromPurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies <c>MarkupTrans</c> table records that are associated with one table record to another table.
    /// </summary>
    /// <param name="_copyFromPurchOrderParameters">
    /// The parameter class that has the information for the copy operation.
    /// </param>
    /// <returns>
    /// The number of markup trans table records copied.
    /// </returns>
    public int copyFromPurchOrder(MarkupCopyFromPurchOrderParameters _copyFromPurchOrderParameters)
    {
        Common                             bufferFrom                   = _copyFromPurchOrderParameters.parmBufferFrom();
        Common                             bufferTo                     = _copyFromPurchOrderParameters.parmBufferTo();
        CurrencyCode                       currencyCode                 = _copyFromPurchOrderParameters.parmCurrencyCode();
        SourceDocumentLineAccountingStatus targetAccountingStatus       = _copyFromPurchOrderParameters.parmTargetAccountingStatus();
        boolean                            interCompanyInvoiceNumPassed = _copyFromPurchOrderParameters.parmInterCompanyInvoiceNumPassed();

        CurrencyCodeMap currencyCodeMap;
        MarkupTrans     oldMarkupTrans;
        MarkupTrans     newMarkupTrans;
        MarkupTable     markupTable;
        boolean         skipZeroValueMarkupTrans = bufferFrom.TableId == tableNum(PurchTable);
        boolean         skippedZeroValueMarkupTrans = false;
        boolean         isIntercompany;
        int             counter = 0;
        Num             interCompanyInvoiceNum;
        PurchTable      purchTable;
        PurchLine       purchLine;

        boolean isInterCompanyOrder()
        {
            if (_copyFromPurchOrderParameters.parmPurchTable())
            {
                purchTable = _copyFromPurchOrderParameters.parmPurchTable();
            }
            else
            {
                if (bufferFrom.TableId == tableNum(PurchLine))
                {
                    purchLine = bufferFrom;
                    purchTable = purchLine.purchTable();
                }
                else
                {
                    purchTable = bufferFrom;
                }
            }

            return purchTable.isInterCompanyOrder();
        }

        Debug::assert(bufferFrom.TableId == tableNum(PurchTable) || bufferFrom.TableId == tableNum(PurchLine)
                      || bufferFrom.TableId == tableNum(VendPackingSlipJour) || bufferFrom.TableId == tableNum(VendPackingSlipTrans));
        Debug::assert(bufferTo.TableId == tableNum(VendInvoiceInfoSubTable) || bufferTo.TableId == tableNum(VendInvoiceInfoLine)
                      || bufferTo.TableId == tableNum(PurchParmTable) || bufferTo.TableId == tableNum(PurchParmLine));

        if (currencyCode == '')
        {
            currencyCodeMap = bufferTo;
            currencyCode = currencyCodeMap.CurrencyCode;
        }

        isIntercompany = isInterCompanyOrder();

        if (isIntercompany && !interCompanyInvoiceNumPassed)
        {
            changecompany(purchTable.InterCompanyCompanyId)
            {
                interCompanyInvoiceNum = purchTable.interCompanySalesTable().lastInvoice(true);
            }
        }
        else
        {
            interCompanyInvoiceNum = _copyFromPurchOrderParameters.parmInterCompanyInvoiceNum();
        }

        ttsbegin;

        while select oldMarkupTrans
            where oldMarkupTrans.TransTableId == bufferFrom.TableId &&
                    oldMarkupTrans.TransRecId == bufferFrom.RecId &&
                    !oldMarkupTrans.IsDeleted
        join CustType, VendType from markupTable
            where markupTable.ModuleType == oldMarkupTrans.ModuleType &&
                    markupTable.MarkupCode == oldMarkupTrans.MarkupCode
        {
            if (oldMarkupTrans.Value == 0 && skipZeroValueMarkupTrans)
            {
                skippedZeroValueMarkupTrans = true;
                continue;
            }
            
            if (this.mustSkipCopyFromPurchOrder(oldMarkupTrans, markupTable, purchLine, bufferFrom, bufferTo, interCompanyInvoiceNum, isIntercompany))
            {
                continue;
            }
            
            newMarkupTrans = Markup::copySingleMarkupTrans(false, oldMarkupTrans, currencyCode, bufferFrom, bufferTo, false, oldMarkupTrans, targetAccountingStatus);

            if  (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                if (bufferFrom.TableId == tableNum(PurchLine))
                {
                    TransTaxInformationHelper::copyTransTaxInformation(oldMarkupTrans, newMarkupTrans);
                }
            }
            counter++;
        }

        ttscommit;

        if (skippedZeroValueMarkupTrans)
        {
            warning("@SYS100830");
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipCopyFromPurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the copy of markup transactions must be skipped.
    /// </summary>
    /// <param name = "_oldMarkupTrans">
    /// Markup transaction table buffer to be copied.
    /// </param>
    /// <param name = "_markupTable">
    /// Charge code table buffer.
    /// </param>
    /// <param name = "_purchLine">
    /// Purchase order line table buffer.
    /// </param>
    /// <param name = "_bufferFrom">
    /// The source table record.
    /// </param>
    /// <param name = "_bufferTo">
    /// The destination table record.
    /// </param>
    /// <param name = "_interCompanyInvoiceNum">
    /// The invoice number used by an intercompany invoice.
    /// </param>
    /// <param name = "_isIntercompany">
    /// A boolean which determines whether an order line is an intercompany order line.
    /// </param>
    /// <returns>
    /// true if the markup copying must be skipped; otherwise, false.
    /// </returns>
    protected boolean mustSkipCopyFromPurchOrder(
        MarkupTrans _oldMarkupTrans, 
        MarkupTable _markupTable, 
        PurchLine   _purchLine, 
        Common      _bufferFrom, 
        Common      _bufferTo, 
        Num         _interCompanyInvoiceNum, 
        boolean     _isIntercompany)
    {
        // Only copy when InterCompany if the invoice number is not blank and matches the invoice number on the MarkupTrans
        if (_isIntercompany
            && (_markupTable.CustType == MarkupType::CustVend
                || _markupTable.VendType == MarkupType::CustVend)
            && (!_interCompanyInvoiceNum
                || _interCompanyInvoiceNum != _oldMarkupTrans.InterCompanyInvoiceId))
        {
            return true;
        }

        // Only copy if the MarkupTrans is marked Keep or if it is not connected to a pending invoice and not yet invoiced
        if (!_oldMarkupTrans.Keep && (!_oldMarkupTrans.connectedFromSet().empty() || _oldMarkupTrans.excludeFromUpdate(DocumentStatus::Invoice, true)))
        {
            return true;
        }

        // If charge to copy from is a purchase line charge,
        //     AND (the the Qty on the purchase line is below zero
        //         OR the line item is not stocked
        //         OR sales tax is included in the amount),
        //     AND is about to be copied to be related to product receipt header/line don't copy it.
        if (_oldMarkupTrans.TransTableId == tableNum(PurchLine)
                && _bufferTo.TableId == tableNum(PurchParmLine))
        {
            _purchLine = _bufferFrom;
            if (_purchLine.PurchQty < 0 || !_purchLine.isStocked() || _purchLine.inclTax())
            {
                return true;
            }
        }

        // If charge to copy from is a purchase order/line charge, AND is marked with Keep=No, AND is about to be copied
        // to be related to product receipt header/line don't copy it.
        if ((_oldMarkupTrans.TransTableId == tableNum(PurchTable) || _oldMarkupTrans.TransTableId == tableNum(PurchLine))
            && _oldMarkupTrans.Keep == NoYes::No
            && (_bufferTo.TableId == tableNum(PurchParmTable) || _bufferTo.TableId == tableNum(PurchParmLine))
            && !(_isIntercompany && PurchParameters::find().ProductReceiptCharges))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyForAllDocumentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies <c>MarkupTrans</c> table records that are associated with all lines of a document to the corresponding
    /// lines of another document.
    /// </summary>
    /// <param name="_copyFromPurchOrderParameters">
    /// The parameter class that has the information for the copy operation.
    /// </param>
    internal void copyForAllDocumentLines(MarkupCopyFromPurchOrderParameters _copyFromPurchOrderParameters)
    {
        SysDaInsertObject insertObj = this.buildMarkupTransInsertObject();
        SysDaQueryObject queryObj = this.buildMarkupTransQueryObject(
            _copyFromPurchOrderParameters.parmBufferFrom(),
            _copyFromPurchOrderParameters.parmBufferTo(),
            _copyFromPurchOrderParameters.parmBufferFromWhereClause(),
            _copyFromPurchOrderParameters.parmBufferToWhereClause(),
            _copyFromPurchOrderParameters.parmDocumentStatusToExclude());
        this.insertRecords(queryObj, insertObj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyForAllDocumentLinesUsingTempMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies <c>MarkupTrans</c> table records that are associated with all lines of a document to the corresponding
    /// lines of another document.
    /// </summary>
    /// <param name="_copyFromPurchOrderParameters">
    /// The parameter class that has the information for the copy operation.
    /// </param>
    internal MarkupTransTmp copyForAllDocumentLinesUsingTempMarkupTrans(MarkupCopyFromPurchOrderParameters _copyFromPurchOrderParameters)
    {
        MarkupTransTmp markupTransTmp;

        SysDaInsertObject insertObj = this.buildMarkupTransTmpInsertObject(markupTransTmp);
        SysDaQueryObject queryObj = this.buildMarkupTransQueryObject(
            _copyFromPurchOrderParameters.parmBufferFrom(),
            _copyFromPurchOrderParameters.parmBufferTo(),
            _copyFromPurchOrderParameters.parmBufferFromWhereClause(),
            _copyFromPurchOrderParameters.parmBufferToWhereClause(),
            _copyFromPurchOrderParameters.parmDocumentStatusToExclude());
        this.insertRecords(queryObj, insertObj);

        return markupTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMarkupTransInsertObject</Name>
				<Source><![CDATA[
    private SysDaInsertObject buildMarkupTransInsertObject()
    {
        //insert_recordset markupTransDestination (
        //    TransTableId, TransRecId,
        //    OrigTableId, OrigRecId,
        //    CurrencyCode, Keep, LineNum, MarkupCategory, MarkupCode, ModuleType, Txt, Value, etc.)

        MarkupTrans markupTransDestination;
        markupTransDestination.skipDataMethods(true);

        SysDaInsertObject markupTransInsertObject = new SysDaInsertObject(markupTransDestination);

        this.addMarkupTransInsertFields(markupTransInsertObject.fields());
        this.addMarkupTransFields(markupTransInsertObject.fields());

        return markupTransInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMarkupTransTmpInsertObject</Name>
				<Source><![CDATA[
    private SysDaInsertObject buildMarkupTransTmpInsertObject(MarkupTransTmp _markupTransDestination)
    {
        //insert_recordset markupTransDestination (
        //    TransTableId, TransRecId,
        //    OrigTableId, OrigRecId,
        //    CurrencyCode, Keep, LineNum, MarkupCategory, MarkupCode, ModuleType, Txt, Value, etc.)

        _markupTransDestination.skipDataMethods(true);

        SysDaInsertObject markupTransInsertObject = new SysDaInsertObject(_markupTransDestination);

        this.addMarkupTransInsertFields(markupTransInsertObject.fields());
        this.addMarkupTransFields(markupTransInsertObject.fields());

        return markupTransInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMarkupTransQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildMarkupTransQueryObject(
        Common _bufferFrom, 
        Common _bufferTo, 
        SysDaBinaryExpression _bufferFromWhereClause,
        SysDaBinaryExpression _bufferToWhereClause,
        DocumentStatus _documentStatusToExclude)
    {
        MarkupTrans markupTransSource, markupTransNotExist;

        SysDaQueryObject markupTransQueryObj = this.buildMarkupTransQueryObjectBasic(markupTransSource);
        markupTransQueryObj.whereClause(this.buildWhereClauseBasic(markupTransQueryObj.table(), _documentStatusToExclude)
                    .and(this.buildWhereClauseForTransIdFields(markupTransQueryObj.table(), _bufferFrom)));

        SysDaQueryObject bufferFromOrigIdQueryObject = this.buildBufferFromQueryObject(_bufferFrom);
        bufferFromOrigIdQueryObject.whereClause(_bufferFromWhereClause);
        
        SysDaQueryObject bufferToTransIdQueryObject = this.buildBufferToTransIdQueryObject(_bufferTo);
        bufferToTransIdQueryObject.whereClause(_bufferToWhereClause);

        SysDaQueryObject notExistsMarkupTransDestQueryObj = this.buildNotExistsMarkupTransDestQueryObj(markupTransNotExist, _bufferTo);

        markupTransQueryObj.joinClause(SysDaJoinKind::InnerJoin, notExistsMarkupTransDestQueryObj);
        bufferFromOrigIdQueryObject.joinClause(SysDaJoinKind::InnerJoin, markupTransQueryObj);
        bufferToTransIdQueryObject.joinClause(SysDaJoinKind::InnerJoin, bufferFromOrigIdQueryObject);

        return bufferToTransIdQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMarkupTransQueryObjectBasic</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildMarkupTransQueryObjectBasic(MarkupTrans _markupTransSource)
    {
        //select TableId, RecId, CurrencyCode, Keep, LineNum, MarkupCategory, MarkupCode, ModuleType, Txt, Value, etc. from markupTransSource

        SysDaQueryObject markupTransQueryObject = new SysDaQueryObject(_markupTransSource);
        this.addTableIdValueToQueryObject(markupTransQueryObject.projection(), _markupTransSource);
        this.addRecIdFieldToQueryObject(markupTransQueryObject.projection(), _markupTransSource);
        this.addMarkupTransFields(markupTransQueryObject.projection());
        
        return markupTransQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseBasic</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildWhereClauseBasic(MarkupTrans _markupTrans, DocumentStatus _documentStatusToExclude)
    {
        // where !markupTransSource.IsDeleted
        //     && (markupTransSource.Keep || markupTransSource.DocumentStatus != DocumentStatus::SomeStatus)

        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
                new SysDaFieldExpression(_markupTrans, fieldStr(MarkupTrans, IsDeleted)), new SysDaValueExpression(0));

        if (_documentStatusToExclude != DocumentStatus::None)
        {
            whereClause = whereClause.and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_markupTrans, fieldStr(MarkupTrans, Keep)), new SysDaValueExpression(1))
                .or(new SysDaNotEqualsExpression(
            new SysDaFieldExpression(_markupTrans, fieldStr(MarkupTrans, DocumentStatus)), new SysDaValueExpression(enum2int(_documentStatusToExclude)))));
        }

        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForTransIdFields</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildWhereClauseForTransIdFields(MarkupTrans _markupTrans, Common _bufferFrom)
    {
        // where markupTransSource.TransTableId == fromBuffer.TableId
        //    && markupTransSource.TransRecId == fromBuffer.RecId
        
        return new SysDaEqualsExpression(
                new SysDaFieldExpression(_markupTrans, fieldStr(MarkupTrans, TransTableId)), new SysDaValueExpression(_bufferFrom.TableId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_markupTrans, fieldStr(MarkupTrans, TransRecId)), new SysDaFieldExpression(_bufferFrom, fieldId2Name(_bufferFrom.TableId, fieldNum(Common, RecId)))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBufferToTransIdQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildBufferToTransIdQueryObject(Common _bufferTo)
    {
        //select TableId, RecId from toBuffer

        SysDaQueryObject bufferToQueryObject = new SysDaQueryObject(_bufferTo);
        this.addTableIdValueToQueryObject(bufferToQueryObject.projection(), _bufferTo);
        this.addRecIdFieldToQueryObject(bufferToQueryObject.projection(), _bufferTo);
        
        return bufferToQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBufferFromQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildBufferFromQueryObject(Common _bufferFrom)
    {
        //select fromBuffer
        SysDaQueryObject bufferFromQueryObject = new SysDaQueryObject(_bufferFrom);
        
        return bufferFromQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTableIdValueToQueryObject</Name>
				<Source><![CDATA[
    private void addTableIdValueToQueryObject(SysDaSelection _selectionObject, Common _buffer)
    {
        _selectionObject
            .addValue(_buffer.TableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecIdFieldToQueryObject</Name>
				<Source><![CDATA[
    private void addRecIdFieldToQueryObject(SysDaSelection _selectionObject, Common _buffer)
    {
        _selectionObject
            .add(fieldId2Name(_buffer.TableId, fieldNum(Common, RecId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNotExistsMarkupTransDestQueryObj</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildNotExistsMarkupTransDestQueryObj(MarkupTrans _markupTrans, Common _bufferTo)
    {
        //notExists join markupTrans
        //        where markupTrans.TransTableId == toBuffer.TableId
        //            && markupTrans.TransRecId == toBuffer.RecId
        //            && !markupTrans.IsDeleted;

        SysDaQueryObject markupTransQueryObject = new SysDaQueryObject(_markupTrans);

        markupTransQueryObject.whereClause(new SysDaEqualsExpression(
                new SysDaFieldExpression(_markupTrans, fieldStr(MarkupTrans, IsDeleted)), new SysDaValueExpression(0))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_markupTrans, fieldStr(MarkupTrans, TransTableId)), new SysDaValueExpression(_bufferTo.TableId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_markupTrans, fieldStr(MarkupTrans, TransRecId)), new SysDaFieldExpression(_bufferTo, fieldId2Name(_bufferTo.TableId, fieldNum(Common, RecId))))));
        
        markupTransQueryObject.joinClauseKind(SysDaJoinKind::NotExistsJoin);

        return markupTransQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecords</Name>
				<Source><![CDATA[
    private void insertRecords(SysDaQueryObject _queryObject, SysDaInsertObject _insertObject)
    {
        _insertObject.query(_queryObject);
        SysDaInsertStatement insertStatement = new SysDaInsertStatement();

        insertStatement.executeQuery(_insertObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMarkupTransFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>MarkupTrans</c> fields for query and insert objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    protected void addMarkupTransFields(SysDaSelection _selectionObject)
    {
        _selectionObject
            .add(fieldStr(MarkupTrans, BankLCImportChargeAllocation_SA))
            .add(fieldStr(MarkupTrans, CalculatedAmount))
            .add(fieldStr(MarkupTrans, CalculatedAmountMST_W))
            .add(fieldStr(MarkupTrans, CurrencyCode))
            .add(fieldStr(MarkupTrans, CustomsAssessableValue_IN))
            .add(fieldStr(MarkupTrans, CustVendPosted_RU))
            .add(fieldStr(MarkupTrans, ExchRate_RU))
            .add(fieldStr(MarkupTrans, ExchRateSecond_RU))
            .add(fieldStr(MarkupTrans, FromAmount))
            .add(fieldStr(MarkupTrans, IsAutoCharge))
            .add(fieldStr(MarkupTrans, IsTieredCharge))
            .add(fieldStr(MarkupTrans, ItemPosted_RU))
            .add(fieldStr(MarkupTrans, Keep))
            .add(fieldStr(MarkupTrans, LineNum))
            .add(fieldStr(MarkupTrans, MarkupAllocateAfter_IN))
            .add(fieldStr(MarkupTrans, MarkupCategory))
            .add(fieldStr(MarkupTrans, MarkupClassification_BR))
            .add(fieldStr(MarkupTrans, MarkupCode))
            .add(fieldStr(MarkupTrans, MCRBrokerContractFee))
            .add(fieldStr(MarkupTrans, MCRCouponMarkup))
            .add(fieldStr(MarkupTrans, MCRInstallmentEligible))
            .add(fieldStr(MarkupTrans, MCRMarkupTransCreatedBy))
            .add(fieldStr(MarkupTrans, MCRMiscChargeOverride))
            .add(fieldStr(MarkupTrans, MCROriginalMiscChargeValue))
            .add(fieldStr(MarkupTrans, MCRReasonCode))
            .add(fieldStr(MarkupTrans, MCRRetailInfoCodeId))
            .add(fieldStr(MarkupTrans, MCRSavedRecId))
            .add(fieldStr(MarkupTrans, MCRSavedTableId))
            .add(fieldStr(MarkupTrans, ModuleCategory))
            .add(fieldStr(MarkupTrans, ModuleType))
            .add(fieldStr(MarkupTrans, NotionalCharges_IN))
            .add(fieldStr(MarkupTrans, NotionalPct_IN))
            .add(fieldStr(MarkupTrans, TaxAmount))
            .add(fieldStr(MarkupTrans, TaxAmountExcise_RU))
            .add(fieldStr(MarkupTrans, TaxAmountExciseMST_RU))
            .add(fieldStr(MarkupTrans, TaxAmountMst_W))
            .add(fieldStr(MarkupTrans, TaxAmountVAT_RU))
            .add(fieldStr(MarkupTrans, TaxAmountVATMST_RU))
            .add(fieldStr(MarkupTrans, TaxAutoGenerated))
            .add(fieldStr(MarkupTrans, TaxGroup))
            .add(fieldStr(MarkupTrans, TaxItemGroup))
            .add(fieldStr(MarkupTrans, TaxValueVAT_RU))
            .add(fieldStr(MarkupTrans, TaxVATType_RU))
            .add(fieldStr(MarkupTrans, TaxWriteCode))
            .add(fieldStr(MarkupTrans, ToAmount))
            .add(fieldStr(MarkupTrans, Txt))
            .add(fieldStr(MarkupTrans, Value))
            .add(fieldStr(MarkupTrans, VATDocumentType_RU))
            .add(fieldStr(MarkupTrans, SATProductCode_MX))
            .add(fieldStr(MarkupTrans, SATUnitCode_MX))
            .add(fieldStr(MarkupTrans, WithholdingTypeCode_MX))
            .add(fieldStr(MarkupTrans, MarkupAutoTableRecId))
            .add(fieldStr(MarkupTrans, RetailShippingPromotionDiscount))
            .add(fieldStr(MarkupTrans, IsAdvancedLineProrated))
            .add(fieldStr(MarkupTrans, IsOverriddenProratedLine))
            .add(fieldStr(MarkupTrans, MarkupAutoLineRecId))
            .add(fieldStr(MarkupTrans, IsOverriddenLine))
            .add(fieldStr(MarkupTrans, PreviousValue))
            .add(fieldStr(MarkupTrans, OverrideSalesTax));

        if (AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled())
        {
            _selectionObject.add(fieldStr(MarkupTrans, SpecificUnitSymbol));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMarkupTransInsertFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>MarkupTrans</c> fields for insert object.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    private void addMarkupTransInsertFields(SysDaSelection _selectionObject)
    {
        _selectionObject
            .add(fieldStr(MarkupTrans, TransTableId))
            .add(fieldStr(MarkupTrans, TransRecId))
            .add(fieldStr(MarkupTrans, OrigTableId))
            .add(fieldStr(MarkupTrans, OrigRecId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>