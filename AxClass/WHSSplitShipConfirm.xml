<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSplitShipConfirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>WHSSplitShipConfirm</c> handles load splitting at ship confirmation.
/// </summary>
public abstract class WHSSplitShipConfirm
{
    protected WHSLoadTable loadTable;
    private WhsInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceLoadLineQuantityToPickedQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reduces quantities on the load line.
    /// </summary>
    /// <param name = "_loadLine">
    /// The load line to be reduced.
    /// </param>
    /// <returns>
    /// The updated load line.
    /// </returns>
    [Hookable(false)]
    internal WHSLoadLine reduceLoadLineQuantityToPickedQuantity(WHSLoadLine _loadLine, boolean _performRounding = NoYes::Yes)
    {
        _loadLine.reduceToPickedQuantity(_performRounding);
        _loadLine.update();

        return _loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOpenWorkLineLoadLineDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there are no open work line load line details associated to the load.
    /// </summary>
    /// <param name = "_loadId">
    /// <c>WHSLoadId</c> being ship confirmed.
    /// </param>
    /// <returns>
    /// true if there are no open <c>WHSLoadLineWorkLineDetails</c> records associated to the load; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Splitting loads at ship confirm does not support work with associated <c>WHSWorkLineLoadLineDetails</c> records.
    /// </remarks>
    public static boolean validateOpenWorkLineLoadLineDetails(WHSLoadId _loadId)
    {
        if (WHSConfirmAndTransferInventoryAtPackingStationToggle::instance().isEnabled())
        {
            return true;
        }

        boolean                     ret = true;
        WHSWorkTable                workTable;
        WHSWorkLineLoadLineDetails  workLineLoadLineDetails;
        WHSLoadLine                 loadLine;

        
        // Exclude PackedContainerPicking from this validation, since we can handle this type of work
        select firstonly RecId from workLineLoadLineDetails
            exists join workTable
                where workTable.WorkId       == workLineLoadLineDetails.WorkId
                    && workTable.WorkTransType != WHSWorkTransType::PackedContainerPicking
                    && (workTable.WorkStatus == WHSWorkStatus::Open
                        || workTable.WorkStatus  == WHSWorkStatus::InProcess)
                    join loadLine
                    where loadLine.LoadId  == _loadId
                        &&  loadLine.RecId == workLineLoadLineDetails.LoadLineRefRecId;        
        
        if (workLineLoadLineDetails.RecId != 0)
        {
            ret = checkFailed("@WAX:WorkCreatedQtyPickedQtyDiscrepancyError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadLineQuantityDiscrepancy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if load lines has quantity discrepancy.
    /// </summary>
    /// <param name = "_loadId">
    /// <c>WHSLoadId</c> being ship confirmed.
    /// </param>
    /// <returns>
    /// True if there is no load line quantity discrepancy, otherwise false.
    /// </returns>
    /// <remarks>
    /// Splitting of loads during shipment confirmation is not support for loads that are not fully picked.
    /// </remarks>
    public static boolean validateLoadLineQuantityDiscrepancy(WHSLoadId _loadId)
    {
        boolean         ret = true;
        WHSLoadLine     loadLine;

        select sum(WorkCreatedQty), sum(PickedQty) from loadLine
            where loadLine.WorkCreatedQty != loadLine.PickedQty
                &&  loadLine.LoadId       == _loadId;

        if (loadLine.WorkCreatedQty - loadLine.PickedQty != 0)
        {
            WHSLoadLine     loadLineForPickLine;
            WHSWorkLine     workLine;
            WHSWorkTable    workTable;

            select sum(InventQtyWork) from workLine
                where workLine.WorkStatus == WHSWorkStatus::Open
                   || workLine.WorkStatus == WHSWorkStatus::InProcess
                   || workLine.WorkStatus == WHSWorkStatus::Closed
                exists join loadLineForPickLine
                where loadLineForPickLine.LoadId == _loadId
                   && loadLineForPickLine.RecId == workLine.LoadLineRefRecId
                exists join workTable
                where workTable.WorkId     == workLine.WorkId
                   && (workTable.WorkStatus == WHSWorkStatus::Open
                   || workTable.WorkStatus == WHSWorkStatus::InProcess);

                             
             workLine.InventQtyWork += WHSSplitShipConfirm::determinePackingWorkConnectedToContainersNotYetLoaded(_loadId);           

            if ((loadLine.WorkCreatedQty - loadLine.PickedQty) - workLine.InventQtyWork != 0)
            {
                WHSWorkLine pickWorkLine;
                WHSWorkLine putWorkLine;
                WMSLocation loc;

                select firstonly loc
                    join LineNum from putWorkLine
                    order by lineNum desc
                    where putWorkLine.WorkType      == WHSWorkType::Put
                       && putWorkLine.WMSLocationId == loc.wMSLocationId
                    exists join pickWorkLine
                        where pickWorkLine.WorkId == putWorkLine.WorkId
                    exists join loadLine
                        where loadLine.RecId  == pickWorkLine.LoadLineRefRecId
                           && loadLine.LoadId == _loadId;

                if (loc.RecId == 0 && WHSConfirmAndTransferInventoryAtPackingStationToggle::instance().isEnabled())
                {
                    loc = WHSSplitShipConfirm::pickLocationFromPackingStationWork(_loadId);
                }

                if (loc.isPackingLocation())
                {
                    if (!WHSConfirmAndTransferInventoryAtPackingStationToggle::instance().isEnabled())
                    {
                        ret = checkFailed("@WAX:InventoryInPackingStationError");
                    }
                }
                else if (loc.isSortingLocation())
                {
                    ret = checkFailed("@WAX:InventoryInSortingLocationError");
                }
                else
                {
                    ret = checkFailed("@WAX:WorkCreatedQtyPickedQtyDiscrepancyError");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePackingWorkConnectedToContainersNotYetLoaded</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventQty determinePackingWorkConnectedToContainersNotYetLoaded(WHSLoadId _loadId, Set _packingWorksSetOutput = null, Set _containersSetOutput = null)
    {
        WHSLoadLine     loadLineForClosedPackingWorkLine;
        WHSWorkLine     closedPackingWorkLine;
        WHSWorkTable    closedPackingWorkTable, packedContainerWorkTable;        
        WHSContainerTable closedContainerTable;        

        InventQty       totalInventQtyOnWorks;        
        
        // Released containers with packed container picking work
        while select sum(InventQtyWork) from closedPackingWorkLine
            group by closedPackingWorkTable.WorkId, closedPackingWorkTable.TargetLicensePlateId, closedPackingWorkTable.ShipmentId
            join closedPackingWorkTable
                where closedPackingWorkTable.WorkId == closedPackingWorkLine.WorkId
                   && closedPackingWorkTable.WorkTransType == WHSWorkTransType::Packing
                   && closedPackingWorkTable.WorkStatus == WHSWorkStatus::Closed
            exists join loadLineForClosedPackingWorkLine
                where loadLineForClosedPackingWorkLine.LoadId == _loadId
                   && loadLineForClosedPackingWorkLine.RecId == closedPackingWorkLine.LoadLineRefRecId
            exists join packedContainerWorkTable
                where packedContainerWorkTable.TargetLicensePlateId == closedPackingWorkTable.TargetLicensePlateId
                   && packedContainerWorkTable.ShipmentId == closedPackingWorkTable.ShipmentId
                   && packedContainerWorkTable.WorkTransType == WHSWorkTransType::PackedContainerPicking
                   && (packedContainerWorkTable.WorkStatus == WHSWorkStatus::Open
                       || packedContainerWorkTable.WorkStatus == WHSWorkStatus::InProcess)
        {
            totalInventQtyOnWorks += closedPackingWorkLine.InventQtyWork;

            if (_packingWorksSetOutput)
            {
                _packingWorksSetOutput.add(closedPackingWorkTable.WorkId);
            }

            if (_containersSetOutput)
            {
                _containersSetOutput.add([closedPackingWorkTable.ShipmentId, closedPackingWorkTable.TargetLicensePlateId]);
            }
        }

        // Unreleased containers
        while select sum(InventQtyWork) from closedPackingWorkLine
            group by closedPackingWorkTable.WorkId, closedPackingWorkTable.TargetLicensePlateId, closedPackingWorkTable.ShipmentId
            join closedPackingWorkTable
            where closedPackingWorkTable.WorkId == closedPackingWorkLine.WorkId
                && closedPackingWorkTable.WorkTransType == WHSWorkTransType::Packing
                && closedPackingWorkTable.WorkStatus == WHSWorkStatus::Closed
            exists join closedContainerTable
            where closedContainerTable.ContainerId == closedPackingWorkTable.TargetLicensePlateId
               && closedContainerTable.ShipmentId == closedPackingWorkTable.ShipmentId
               && !closedContainerTable.ContainerReleased
            exists join loadLineForClosedPackingWorkLine
            where loadLineForClosedPackingWorkLine.LoadId == _loadId
                && loadLineForClosedPackingWorkLine.RecId == closedPackingWorkLine.LoadLineRefRecId
        {
            totalInventQtyOnWorks += closedPackingWorkLine.InventQtyWork;

            if (_packingWorksSetOutput)
            {
                _packingWorksSetOutput.add(closedPackingWorkTable.WorkId);
            }

            if (_containersSetOutput)
            {
                _containersSetOutput.add([closedPackingWorkTable.ShipmentId, closedPackingWorkTable.TargetLicensePlateId]);
            }
        }

        return totalInventQtyOnWorks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickLocationFromPackingStationWork</Name>
				<Source><![CDATA[
    private static WMSLocation pickLocationFromPackingStationWork(WHSLoadId _loadId)
    {
        WMSLocation                 pickLocation;
        WHSWorkLine                 pickWorkLine;
        WHSWorkLineLoadLineDetails  workLineLoadLineDetails;
        WHSLoadLine                 loadLine;

        select firstonly pickLocation
            join LineNum from pickWorkLine
                order by LineNum asc
                    where pickWorkLine.WorkType       == WHSWorkType::Pick
                        && pickWorkLine.WMSLocationId == pickLocation.wMSLocationId
                        exists join workLineLoadLineDetails
                            where workLineLoadLineDetails.WorkId == pickWorkLine.WorkId
                                exists join loadLine
                                    where loadLine.RecId   == workLineLoadLineDetails.LoadLineRefRecId
                                        && loadLine.LoadId == _loadId;

        return pickLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLoadShipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits unfulfilled loads and shipments at outbound ship confirmation.
    /// </summary>
    /// <param name="_loadTable">
    /// The <c>WHSLoadTable</c> record currently being ship confirmed.
    /// </param>
    /// <returns>
    /// Instance of the <c>WHSSplitShipConfirmResults</c> class that gives insight into results of load splitting.
    /// </returns>
    [Hookable(false)]
    public static WHSSplitShipConfirmResult splitLoadShipConfirm(WHSLoadTable _loadTable)
    {
        const boolean prompt = true;
        return WHSSplitShipConfirm::splitLoadShipConfirmPromptPerRequest(_loadTable, prompt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLoadShipConfirmNoPrompt</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSSplitShipConfirmResult splitLoadShipConfirmNoPrompt(WHSLoadTable _loadTable, WHSLoadSplitShipConfirmMethod _loadSplitShipConfirmMethod)
    {
        const boolean prompt = false;
        return WHSSplitShipConfirm::splitLoadShipConfirmPromptPerRequest(_loadTable, prompt, _loadSplitShipConfirmMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLoadShipConfirmPromptPerRequest</Name>
				<Source><![CDATA[
    private static WHSSplitShipConfirmResult splitLoadShipConfirmPromptPerRequest(WHSLoadTable _loadTable, boolean _prompt, WHSLoadSplitShipConfirmMethod _loadSplitShipConfirmMethod = WHSLoadSplitShipConfirmMethod::SplitQty)
    {
        WhsInstrumentationLogger instrumentationLogger = WhsInstrumentationLogger::CreateLogger(classStr(WHSSplitShipConfirm));

        using (var activityContext = instrumentationLogger.splitShipConfirmActivities().splitLoadShipConfirm())
        {
            instrumentationLogger.logRecordInformation(_loadTable);

            WHSSplitShipConfirmResult result;

            if (WHSSplitShipConfirm::isLoadEligibleForSplit(_loadTable))
            {
                WHSLoadSplitShipConfirmMethod loadSplitShipConfirmMethod = _loadSplitShipConfirmMethod;
                boolean ok = true;

                if (_prompt)
                {
                    [ok, loadSplitShipConfirmMethod] = WHSSplitShipConfirm::promptForConfirmation(_loadTable);
                }

                if (ok)
                {
                    WHSSplitShipConfirm splitShipConfirm = WHSSplitShipConfirm::newFromLoadTableSplitShipConfirmMethod(_loadTable, loadSplitShipConfirmMethod);
                    result = WHSSplitShipConfirmResult::newFromSplitShipConfirmResults(splitShipConfirm.splitLoad());
                }
                else
                {
                    result = WHSSplitShipConfirmResult::newFromSplitShipConfirmCancel();
                }
            }

            if (!result)
            {
                result = WHSSplitShipConfirmResult::newNoSplitShipConfirmRequired();
            }

            result.logActivityResult(activityContext);

            return result;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForConfirmation</Name>
				<Source><![CDATA[
    private static container promptForConfirmation(WHSLoadTable _loadTable)
    {
        Dialog dlg = new Dialog("@WAX:ShipConfirm");

        dlg.addText(strFmt("@WAX:SplitLoadConfirmation", _loadTable.LoadId));
                
        DialogField splitLoadMethod = WHSSplitShipConfirm::addLoadSplitShipConfirmMethodDialogField(dlg, _loadTable);
        if (dlg.run())
        {
            return [true, splitLoadMethod.value()];
        }
        return [false];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadSplitShipConfirmMethodDialogField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add field for <c>WHSLoadSplitShipConfirmMethod</c> to the dialog.
    /// </summary>
    /// <param name = "_dialog">The dialog object.</param>
    /// <param name = "_loadTable">The load record.</param>
    /// <returns>The field added to the dialog.</returns>
    protected static DialogField addLoadSplitShipConfirmMethodDialogField(
        Dialog          _dialog,
        WHSLoadTable    _loadTable)
    {
        return _dialog.addField(enumStr(WHSLoadSplitShipConfirmMethod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoadEligibleForSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not load being ship confirmed needs to be split.
    /// </summary>
    /// <param name = "_loadTable">
    /// <c>WHSLoadTable</c> record that is being ship confirmed.
    /// </param>
    /// <returns>
    /// True if load is eligible for split, otherwise false.
    /// </returns>
    [Hookable(false)]
    internal static boolean isLoadEligibleForSplit(WHSLoadTable _loadTable)
    {
        return _loadTable.AllowLoadSplitShipConfirm
            && WHSLoadTable::isAnyLoadQuantityPicked(_loadTable.LoadId)
            && _loadTable.LoadStatus < WHSLoadStatus::Loaded
            && WHSSplitShipConfirm::validateOpenWorkLineLoadLineDetails(_loadTable.LoadId)
            && WHSSplitShipConfirm::validateLoadLineQuantityDiscrepancy(_loadTable.LoadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the load splitting execution.
    /// </summary>
    /// <returns>
    /// True if split succeeds, otherwise false.
    /// </returns>
    protected final boolean splitLoad()
    {
        using (var activityContext = this.instrumentationLogger().splitShipConfirmActivities().splitLoad())
        {
            instrumentationLogger.logRecordInformation(loadTable);

            boolean canSplitLoad = this.canLoadBeSplit();

            activityContext.addCustomProperty('SplitLoad.CanSplitLoad', any2str(canSplitLoad));

            if (canSplitLoad)
            {
                ttsbegin;

                this.updateLoad();
                this.updateShipments();
            
                ttscommit;
            }

            return canSplitLoad;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performLoadSplit</Name>
				<Source><![CDATA[
    internal boolean performLoadSplit()
    {
        boolean canSplitLoad = this.canLoadBeSplit();

        if (canSplitLoad)
        {
            ttsbegin;

            this.updateLoad();
            this.updateShipments();
            
            ttscommit;
        }

        return canSplitLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLoadBeSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Load is eligible for split based on chosen split method.
    /// </summary>
    /// <returns>
    /// True if load passes split method specific validations, otherwise false.
    /// </returns>
    abstract protected boolean canLoadBeSplit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Load during split loads in ship confirmation.
    /// </summary>
    abstract protected void updateLoad()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Shipment during split loads in ship confirmation.
    /// </summary>
    abstract protected void updateShipments()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLoadTableSplitShipConfirmMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates class based on load split ship confirm method.
    /// </summary>
    /// <param name="_loadTable">
    /// The load record being ship confirmed.
    /// </param>
    /// <param name="_loadSplitShipConfirmMethod">
    /// The <c>WHSLoadSplitShipConfirmMethod</c> enum value telling the class how the user wants to split the load.
    /// </param>
    /// <returns>
    /// An instance of the class.
    /// </returns>
    [Hookable(false)]
    internal static WHSSplitShipConfirm newFromLoadTableSplitShipConfirmMethod(WHSLoadTable _loadTable, WHSLoadSplitShipConfirmMethod _loadSplitShipConfirmMethod)
    {
        WHSSplitShipConfirmFactoryAttribute attr = new WHSSplitShipConfirmFactoryAttribute(_loadSplitShipConfirmMethod);
        WHSSplitShipConfirm splitShipConfirm     = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSSplitShipConfirm), attr) as WHSSplitShipConfirm;
                
        if (!splitShipConfirm)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        splitShipConfirm.loadTable = _loadTable;
        
        splitShipConfirm.initializeImplementation();        

        return splitShipConfirm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    protected void initializeImplementation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    internal final WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deterimineSplitLoadShipConfirmMethod</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSLoadSplitShipConfirmMethod deterimineSplitLoadShipConfirmMethod(WHSLoadSplitShipConfirmPolicy _loadSplitShipConfirmPolicy)
    {
        WHSLoadSplitShipConfirmMethod ret = WHSLoadSplitShipConfirmMethod::SplitQty;

        if (_loadSplitShipConfirmPolicy == WHSLoadSplitShipConfirmPolicy::CancelUnfulfilledQuantity)
        {
            ret = WHSLoadSplitShipConfirmMethod::CancelQty;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>