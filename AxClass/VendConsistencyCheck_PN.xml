<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendConsistencyCheck_PN</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendConsistencyCheck_PN extends CustConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPromissoryNoteJour</Name>
				<Source><![CDATA[
        private void checkPromissoryNoteJour()
    {
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        CustVendNegInstSeqNum seqNum;

        while select optimisticlock vendPromissoryNoteJour
        {
            seqNum = VendPromissoryNoteTrans::maxSeqNum(vendPromissoryNoteJour.PromissoryNoteId);

            select firstonly PromissoryNoteId, Status, SeqNum, DueDate from vendPromissoryNoteTrans
            where vendPromissoryNoteTrans.PromissoryNoteId == vendPromissoryNoteJour.PromissoryNoteId &&
                  vendPromissoryNoteTrans.Status == vendPromissoryNoteJour.Status &&
                  vendPromissoryNoteTrans.SeqNum == seqNum;

            if (vendPromissoryNoteJour.DueDate != vendPromissoryNoteTrans.DueDate)
            {
                checkFailed(strfmt("@SYS83707", vendPromissoryNoteJour.PromissoryNoteId));
                if (this.checkFix() == CheckFix::Fix)
                {
                    vendPromissoryNoteJour.DueDate = vendPromissoryNoteTrans.DueDate;
                    vendPromissoryNoteJour.update();
                    this.updateCorrected();
                }
            }
        }
        if (this.checkFix() != CheckFix::Fix)
        {
            this.updateNotCorrected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPromissoryNoteTrans</Name>
				<Source><![CDATA[
        private void checkPromissoryNoteTrans()
    {
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        CustVendNegInstSeqNum seqNum;
        DueDate dueDate;

        while select optimisticlock vendPromissoryNoteTrans
        {
            dueDate = this.getDueDate(vendPromissoryNoteTrans);
            if (vendPromissoryNoteTrans.DueDate != dueDate)
            {
                checkFailed(strfmt("@SYS83708", vendPromissoryNoteTrans.PromissoryNoteId));
                if (this.checkFix() == CheckFix::Fix)
                {
                    vendPromissoryNoteTrans.DueDate = dueDate;
                    vendPromissoryNoteTrans.update();

                    seqNum = VendPromissoryNoteTrans::maxSeqNum(vendPromissoryNoteTrans.PromissoryNoteId);
                    if (vendPromissoryNoteTrans.SeqNum == seqNum)
                    {
                        vendPromissoryNoteJour = VendPromissoryNoteJour::find(vendPromissoryNoteTrans.PromissoryNoteId,true);
                        if (vendPromissoryNoteTrans.Status == vendPromissoryNoteJour.Status)
                        {
                            vendPromissoryNoteJour.DueDate = dueDate;
                            vendPromissoryNoteJour.update();
                        }
                    }

                    this.updateCorrected();
                }
            }
        }
        if (this.checkFix() != CheckFix::Fix)
        {
            this.updateNotCorrected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(VendPromissoryNote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDueDate</Name>
				<Source><![CDATA[
        private DueDate getDueDate(VendPromissoryNoteTrans _vendPromissoryNoteTrans)
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        VendSettlement vendSettlement;
        DueDate dueDate;

        select vendTrans
        where vendTrans.PromissoryNoteID == _vendPromissoryNoteTrans.PromissoryNoteId &&
              vendTrans.AccountNum == _vendPromissoryNoteTrans.VendAccount &&
              vendTrans.Voucher == _vendPromissoryNoteTrans.Voucher &&
              vendTrans.TransDate == _vendPromissoryNoteTrans.TransDate;

        dueDate = vendTrans.DueDate;
        if (! dueDate)
        {
            switch (_vendPromissoryNoteTrans.Status)
            {
                case CustVendNegInstStatus::Honored:
                    select RecId from vendTrans
                    order by PromissoryNoteSeqNum desc
                    where vendTrans.PromissoryNoteID == _vendPromissoryNoteTrans.PromissoryNoteId
                    join DueDate from vendSettlement
                    order by DueDate desc
                    where vendSettlement.TransRecId == vendTrans.RecId;

                    dueDate = vendSettlement.DueDate;
                    break;

                default:
                    select DueDate from vendTransOpen
                        order by DueDate desc
                        exists join vendTrans
                            where vendTrans.RecId == vendTransOpen.RefRecId &&
                                    vendTrans.AccountNum == vendTransOpen.AccountNum &&
                                    vendTrans.PromissoryNoteID == _vendPromissoryNoteTrans.PromissoryNoteId &&
                                    vendTrans.AccountNum == _vendPromissoryNoteTrans.VendAccount &&
                                    vendTrans.Voucher == _vendPromissoryNoteTrans.Voucher &&
                                    vendTrans.TransDate == _vendPromissoryNoteTrans.TransDate;

                    dueDate = vendTransOpen.DueDate ? vendTransOpen.DueDate : _vendPromissoryNoteTrans.DueDate;
                    // if there are no open transactions to the promissory note record, and the duedate is null on vendTrans,
                    // then use the original duedate from vendPromissoryNoteTrans.
            }
        }
        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        ttsbegin;

        this.checkPromissoryNoteJour();

        this.checkPromissoryNoteTrans();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    public classId treeParentClassId()
    {
        return classnum(VendConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        static public ClassDescription description()
    {
        return "@SYS71440";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
        public static HelpTxt helpText()
    {
        return "@SYS83706";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>