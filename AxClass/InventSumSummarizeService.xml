<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumSummarizeService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventSumSummarizeService</c> class provides the service operation for
///    aggregation of non-quantitative associated <c>InventSum</c> records by financial dimensions.
/// </summary>
public class InventSumSummarizeService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findOrInsertInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds or creates <c>InventSum</c> record that matches the specified parameters.
    /// </summary>
    /// <param name="_itemId">
    ///     An item ID associated with <c>InventSum</c> record.
    /// </param>
    /// <param name="_inventDimId">
    ///     The inventory dimension ID to query for.
    /// </param>
    /// <returns>
    ///     An <c>InventSum</c> record.
    /// </returns>
    protected InventSum findOrInsertInventSum(ItemId _itemId, InventDimId _inventDimId)
    {
        InventSum   inventSumFinancial = InventSum::find(_itemId, _inventDimId, true);

        if (!inventSumFinancial.RecId)
        {
            return this.insertClosedInventSum(_itemId, _inventDimId);
        }

        return inventSumFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertClosedInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new closed <c>InventSum</c> record.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID to insert an <c>InventSum</c> record for.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID to insert an <c>InventSum</c> record for.
    /// </param>
    /// <returns>
    ///    Inserted <c>InventSum</c> record.
    /// </returns>
    protected InventSum insertClosedInventSum(ItemId _itemId, InventDimId _inventDimId)
    {
        InventSum   newInventSum;

        newInventSum.initValue();
        newInventSum.ItemId         = _itemId;
        newInventSum.InventDimId    = _inventDimId;

        newInventSum.insert();

        return newInventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFinancialInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Looks up for inventory dimension values associated with an <c>InventDim</c> record where no non-financial dimension values are specified.
    /// </summary>
    /// <param name="_itemId">
    ///     An item ID associated with <c>InventSum</c> record.
    /// </param>
    /// <param name="_origInventDim">
    ///     The <c>InventDim</c> record containing both financial and non-finanial dimension values.
    /// </param>
    /// <returns>
    ///     An <c>InventDim</c> record without non-finanial dimension values.
    /// </returns>
    protected InventDim lookupFinancialInventDim(ItemId _itemId, InventDim _origInventDim)
    {
        InventDim   inventDimFinancial;

        inventDimFinancial.copyDimFinancial(InventDimGroupSetup::newItemId(_itemId), _origInventDim);
        return InventDim::findOrCreate(inventDimFinancial);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads an <c>InventDim</c> record from the specified query.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object to read from.
    /// </param>
    /// <returns>
    ///    An <c>InventDim</c> record.
    /// </returns>
    protected InventDim readInventDim(QueryRun _queryRun)
    {
        return _queryRun.get(tableNum(InventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>readInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads an <c>InventSum</c> record from the specified query.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object to read from.
    /// </param>
    /// <returns>
    ///    An <c>InventSum</c> record.
    /// </returns>
    protected InventSum readInventSum(QueryRun _queryRun)
    {
        return _queryRun.get(tableNum(InventSum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProgress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and displays a progress bar.
    /// </summary>
    /// <returns>
    ///    A <c>SysOperationProgress</c> progress bar object.
    /// </returns>
    protected SysOperationProgress showProgress()
    {
        SysOperationProgress    progress = new SysOperationProgress(0);

        progress.setCaption("@SYS4006021");
        progress.update(true);

        return progress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldContinue</Name>
				<Source><![CDATA[
    protected boolean shouldContinue()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs an aggregation of cost value for non-quantitative associated <c>InventSum</c> records by financial dimensions.
    ///    and closes <c>InventSum</c> records with physical, not financial dimensions post cost value transfer.
    /// </summary>
    /// <param name="_dataContract">
    ///    A <c>InventSumSummarizeContract</c> object specifying the <c>InventSum</c> records that should be cleaned up.
    /// </param>
    public void summarize(InventSumSummarizeContract _dataContract)
    {
        #OCCRetryCount

        int                     summarizedInTransactionScope = 0;
        int                     summarizedTotalCounter = 0;

        Query query = new Query(SysOperationHelper::base64Decode(_dataContract.parmQuery()));
        QueryRun queryRun = new QueryRun(query);
        SysOperationProgress progress = this.showProgress();

        try
        {
            int initialTtsLevel = appl.ttsLevel();
            summarizedInTransactionScope = 0;

            while (queryRun.next())
            {
                InventSum inventSum = this.readInventSum(queryRun);
                InventDim inventDim = this.readInventDim(queryRun);

                if ((appl.ttsLevel() - initialTtsLevel) == 0)
                {
                    ttsbegin;
                }

                if (this.summarizeInventSum(inventSum, inventDim))
                {
                    summarizedInTransactionScope++;
                }

                if (!this.shouldContinue())
                {
                    break;
                }

                if (summarizedInTransactionScope >= _dataContract.parmCommitSize() && (appl.ttsLevel() - initialTtsLevel) == 1)
                {
                    ttscommit;
                    summarizedTotalCounter += summarizedInTransactionScope;
                    summarizedInTransactionScope = 0;
                    ttsbegin;
                }
            }

            if ((appl.ttsLevel() - initialTtsLevel) == 1)
            {
                ttscommit;
                summarizedTotalCounter += summarizedInTransactionScope;
            }

            info(strFmt("@SCM:NumberOfSummarizedAndClosedOnHandEntries", summarizedTotalCounter));
        }
        catch (Exception::Deadlock)
        {
            queryRun.reset();
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        progress.kill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Summarizes the specified <c>InventSum</c> record.
    /// </summary>
    /// <param name="_inventSum">
    ///    The <c>InventSum</c> record to be summarized.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record associated with the <c>InventSum</c> record.
    /// </param>
    /// <returns>
    ///    true if <c>InventSum</c> record was summarized; otherwise, false.
    /// </returns>
    protected boolean summarizeInventSum(InventSum _inventSum, InventDim _inventDim)
    {
        // aggregate physical & financial value by financial dimensions for non-quantitative records
        InventDim inventDimFinancial = this.lookupFinancialInventDim(_inventSum.ItemId, _inventDim);

        if (InventDim::isInventDimEqual(inventDimFinancial, _inventDim) ||
            !_inventSum.isAllQtyFieldsZero()                            ||
             _inventSum.hasOpenTransactions())
        {
                return false;
        }

        InventSum inventSumFinancial = this.findOrInsertInventSum(_inventSum.ItemId, inventDimFinancial.InventDimId);
        this.transferInventSumValue(_inventSum, inventSumFinancial);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInventSumValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Transfers physical and financial value from original <c>InventSum</c> record to <c>InventSum</c> record tracked by financial dimensions.
    /// </summary>
    /// <param name="_inventSumFrom">
    ///     Original <c>InventSum</c> record which is expected to be deleted post transfer
    /// </param>
    /// <param name="_inventSumTo">
    ///     <c>InventSum</c> record that aggregates posted and physical values per financial dimensions
    /// </param>
    protected void transferInventSumValue(InventSum _inventSumFrom, InventSum _inventSumTo)
    {
        _inventSumTo.PostedValue            += _inventSumFrom.PostedValue;
        _inventSumTo.PhysicalValue          += _inventSumFrom.PhysicalValue;
        _inventSumTo.PostedValueSecCur_RU   += _inventSumFrom.PostedValueSecCur_RU;
        _inventSumTo.PhysicalValueSecCur_RU += _inventSumFrom.PhysicalValueSecCur_RU;

        _inventSumFrom.PostedValue            -= _inventSumFrom.PostedValue;
        _inventSumFrom.PhysicalValue          -= _inventSumFrom.PhysicalValue;
        _inventSumFrom.PostedValueSecCur_RU   -= _inventSumFrom.PostedValueSecCur_RU;
        _inventSumFrom.PhysicalValueSecCur_RU -= _inventSumFrom.PhysicalValueSecCur_RU;

        _inventSumFrom.update();
        _inventSumTo.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>