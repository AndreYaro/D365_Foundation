<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportSetOffHrchyChangeTask_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Tasks that update un-settled tax transactions within the sepecified time
/// scope using the specified tax report hierarchy.
/// </summary>
public class TaxReportSetOffHrchyChangeTask_IN
{
    TaxReportHierarchy_IN               hierarchy;
    TaxReportHierarchyVersion_IN        hierarchyVersion;
    date                                fromDate;
    date                                toDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildFailureLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Record the failure log for the invalid tax transaction.
    /// An invalid tax transaction will be identified with two fields
    /// 1) Voucher
    /// 2) TransDate
    /// </summary>
    /// <param name="_taxTransIN">
    /// TaxTrans_IN record of the invalid tax transaction.
    /// </param>
    /// <returns>
    /// Failure log.
    /// </returns>
    private str buildFailureLog(TaxTrans_IN  _taxTransIN)
    {
        return strFmt(
            "@SYS4005651",
            _taxTransIN.Voucher,
            _taxTransIN.TransDate,
            hierarchy.Name,
            hierarchyVersion.Version);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSetOffHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the setoff hierarchy for tax transactions.
    /// </summary>
    /// <returns>
    /// The failure log, as a list of strings.
    /// </returns>
    public List changeSetOffHierarchy()
    {
        List                        failureLogs;

        ClassId                     currentHierarchyType;
        SysDictClass                dictClass;
        TaxReportHrchyStructureAttribute_IN attr;

        failureLogs = new List(Types::String);

        currentHierarchyType = TaxReportHierarchy_IN::find(hierarchyVersion.TaxReportHierarchy_IN).RefClassId;

        // Update trans posted with hierachy
        this.updateTaxTransPostedWithHrchy(currentHierarchyType, failureLogs);

        // Update trans posted without hierachy
        dictClass = new SysDictClass(currentHierarchyType);
        attr = dictClass.getAttribute(attributeStr(TaxReportHrchyStructureAttribute_IN));
        if (attr)
        {
            this.updateTaxTransPostedWithoutHrchy(attr.parmHierarchyType(), failureLogs);
        }

        return failureLogs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryTaxTransToUpdate</Name>
				<Source><![CDATA[
    protected Query getQueryTaxTransToUpdate(TransDate _fromDate, TransDate _toDate)
    {
        Query taxTransBaseQuery;
        QueryBuildDataSource qbdsTaxTrans_IN;
        QueryBuildDataSource qbdsTaxTrans;

        taxTransBaseQuery = new query();
        qbdsTaxTrans_IN = taxTransBaseQuery.addDataSource(tableNum(TaxTrans_IN));
        qbdsTaxTrans_IN.addRange(fieldNum(TaxTrans_IN, TaxReportPeriod_IN)).value(int2str(0));
        qbdsTaxTrans_IN.addRange(fieldNum(TaxTrans_IN, DataAreaId)).value
        (
            strFmt('((%1 != %3) || (%2 != %3))',
                fieldStr(TaxTrans_IN, RecoverableLedgerDimension),
                fieldStr(TaxTrans_IN, PayableLedgerDimension),
                any2int64(0))
        );

        qbdsTaxTrans = qbdsTaxTrans_IN.addDataSource(tableNum(TaxTrans));
        qbdsTaxTrans.relations(false);
        qbdsTaxTrans.joinMode(JoinMode::ExistsJoin);
        qbdsTaxTrans.addLink(fieldNum(TaxTrans_IN, RefRecId), fieldNum(TaxTrans, RecId));
        qbdsTaxTrans.addRange(fieldNum(TaxTrans, TransDate)).
       value(
           strFmt('((%1 >= %2) && (%1 <= %3))', fieldStr(TaxTrans, TransDate), Date2StrXpp(_fromDate), Date2StrXpp(_toDate))
       );

        return taxTransBaseQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryTaxTransWithHrchy</Name>
				<Source><![CDATA[
    protected Query getQueryTaxTransWithHrchy(
        TransDate _fromDate,
        TransDate _toDate,
        ClassId _currentHierarchyType)
    {
        Query queryTaxTransWithHrchy;
        QueryBuildDataSource qbdsTaxTrans_IN;
        QueryBuildDataSource qbdsTaxReportHierarchyNode_IN;
        QueryBuildDataSource qbdsTaxReportHierarchyVersion_IN;
        QueryBuildDataSource qbdsTaxReportHierarchy_IN;

        queryTaxTransWithHrchy = this.getQueryTaxTransToUpdate(_fromDate, _toDate);
        qbdsTaxTrans_IN = queryTaxTransWithHrchy.dataSourceTable(tableNum(TaxTrans_IN));

        qbdsTaxReportHierarchyNode_IN = qbdsTaxTrans_IN.addDataSource(tableNum(TaxReportHierarchyNode_IN));
        qbdsTaxReportHierarchyNode_IN.relations(false);
        qbdsTaxReportHierarchyNode_IN.joinMode(JoinMode::ExistsJoin);
        qbdsTaxReportHierarchyNode_IN.addLink(
        fieldNum(TaxTrans_IN, TaxReportHierarchyNode_IN),
        fieldNum(TaxReportHierarchyNode_IN, RecId)
        );

        qbdsTaxReportHierarchyVersion_IN = qbdsTaxReportHierarchyNode_IN.addDataSource(tableNum(TaxReportHierarchyVersion_IN));
        qbdsTaxReportHierarchyVersion_IN.relations(false);
        qbdsTaxReportHierarchyVersion_IN.joinMode(JoinMode::ExistsJoin);
        qbdsTaxReportHierarchyVersion_IN.addLink(
        fieldNum(TaxReportHierarchyNode_IN, TaxReportHierarchyVersion_IN),
        fieldNum(TaxReportHierarchyVersion_IN, RecId)
        );

        qbdsTaxReportHierarchy_IN = qbdsTaxReportHierarchyVersion_IN.addDataSource(tableNum(TaxReportHierarchy_IN));
        qbdsTaxReportHierarchy_IN.relations(false);
        qbdsTaxReportHierarchy_IN.joinMode(JoinMode::ExistsJoin);
        qbdsTaxReportHierarchy_IN.addLink(
        fieldNum(TaxReportHierarchyVersion_IN, TaxReportHierarchy_IN),
        fieldNum(TaxReportHierarchy_IN, RecId)
        );
        qbdsTaxReportHierarchy_IN.addRange(fieldNum(TaxReportHierarchy_IN, RefClassId)).value(int2str(_currentHierarchyType));

        return queryTaxTransWithHrchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryTaxTransWithoutHrchy</Name>
				<Source><![CDATA[
    protected Query getQueryTaxTransWithoutHrchy(TransDate _fromDate, TransDate _toDate)
    {
        Query queryTaxTransWithoutHrchy;
        QueryBuildDataSource qbdsTaxTrans_IN;
        QueryBuildDataSource qbdsTaxTrans;
        QueryBuildDataSource qbdsComponentTransactions;

        queryTaxTransWithoutHrchy = this.getQueryTaxTransToUpdate(_fromDate, _toDate);
        qbdsTaxTrans_IN = queryTaxTransWithoutHrchy.dataSourceTable(tableNum(TaxTrans_IN));
        qbdsTaxTrans_IN.addRange(fieldNum(TaxTrans_IN, TaxReportHierarchyNode_IN)).value(int2str(0));

        qbdsTaxTrans = queryTaxTransWithoutHrchy.dataSourceTable(tableNum(TaxTrans));
        qbdsTaxTrans.addRange(fieldNum(TaxTrans, TaxOrigin)).value(
        strFmt('(%1 != %2)', fieldStr(TaxTrans, TaxOrigin), int2str(TaxOrigin::TaxReporting)));

        qbdsComponentTransactions = qbdsTaxTrans_IN.addDataSource(tableNum(ComponentTransactions_IN));
        qbdsComponentTransactions.relations(false);
        qbdsComponentTransactions.joinMode(JoinMode::NoExistsJoin);
        qbdsComponentTransactions.addLink(fieldNum(TaxTrans_IN, RefRecId), fieldNum(ComponentTransactions_IN, TransRecid));
        qbdsComponentTransactions.addRange(fieldNum(ComponentTransactions_IN, Posted)).value(int2str(NoYes::Yes));

        return queryTaxTransWithoutHrchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransPostedWithHrchy</Name>
				<Source><![CDATA[
    protected void updateTaxTransPostedWithHrchy(
        ClassId _currentHierarchyType,
        List _failureLogs)
    {
        Query queryTaxTransWithHrchy;
        QueryRun queryRun;
        TaxTrans_IN taxTransIN;

        queryTaxTransWithHrchy = this.getQueryTaxTransWithHrchy(fromDate, toDate, _currentHierarchyType);
        queryRun = new QueryRun(queryTaxTransWithHrchy);
        while (queryRun.next())
        {
            taxTransIN = queryRun.get(tableNum(TaxTrans_IN));
            this.updateTaxTransWithNewHrchy(taxTransIN, _failureLogs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransPostedWithoutHrchy</Name>
				<Source><![CDATA[
    protected void updateTaxTransPostedWithoutHrchy(
    TaxReportHrchyStructDesignType_IN _hierarchyDesignType,
    List _failureLogs)
    {
        Query queryTaxTransWithoutHrchy;
        QueryRun queryRun;
        QueryBuildDataSource qbdsTaxTrans_IN;

        TaxTrans_IN  taxTransIN;

        queryTaxTransWithoutHrchy = this.getQueryTaxTransWithoutHrchy(fromDate, toDate);
        qbdsTaxTrans_IN = queryTaxTransWithoutHrchy.dataSourceTable(tableNum(TaxTrans_IN));

        if (qbdsTaxTrans_IN)
        {
            if (_hierarchyDesignType == TaxReportHrchyStructDesignType_IN::GTE)
            {
                qbdsTaxTrans_IN.addRange(fieldNum(TaxTrans_IN, TaxType)).value(int2str(TaxType_IN::GST));
                queryRun = new QueryRun(queryTaxTransWithoutHrchy);
                while (queryRun.next())
                {
                    taxTransIN = queryRun.get(tableNum(TaxTrans_IN));
                    this.updateTaxTransWithNewHrchy(taxTransIN, _failureLogs);
                }
            }
            else if (_hierarchyDesignType == TaxReportHrchyStructDesignType_IN::Setoff)
            {
                qbdsTaxTrans_IN.addRange(fieldNum(TaxTrans_IN, TaxType)).value(
                strFmt('((%1 == %2) || (%1 == %3) || (%1 == %4) || (%1 == %5))',
                    fieldStr(TaxTrans_IN, TaxType),
                    int2str(TaxType_IN::Excise),
                    int2str(TaxType_IN::SalesTax),
                    int2str(TaxType_IN::ServiceTax),
                    int2str(TaxType_IN::VAT))
            );

                queryRun = new QueryRun(queryTaxTransWithoutHrchy);
                while (queryRun.next())
                {
                    taxTransIN = queryRun.get(tableNum(TaxTrans_IN));

                    if (TaxReportHrchyNodeMatchRule_IN::canMatchNode(taxTransIN))
                    {
                        this.updateTaxTransWithNewHrchy(taxTransIN, _failureLogs);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransWithNewHrchy</Name>
				<Source><![CDATA[
    protected void updateTaxTransWithNewHrchy(
        TaxTrans_IN _taxTransIN,
        List _failureLogs)
    {
        RefRecId hierarchyNodeRecId;

        hierarchyNodeRecId = TaxReportSetoffHrchySetupHelper_IN::findTaxReportHierarchyNodeId(
        _taxTransIN, hierarchyVersion);

        if (hierarchyNodeRecId)
        {
            // Valid tax transactions will be associated with hierarchy nodes
            _taxTransIN.selectForUpdate(true);
            _taxTransIN.TaxReportHierarchyNode_IN = hierarchyNodeRecId;
            _taxTransIN.update();
        }
        else
        {
            // Invalid tax transactions will be recorded as failure logs
            _failureLogs.addEnd(this.buildFailureLog(_taxTransIN));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the From date of the task.
    /// </summary>
    /// <returns>
    /// From date of the task.
    /// </returns>
    public date getFromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxReportHierarchyVersion_IN</c> record of the task.
    /// </summary>
    /// <returns>
    /// The <c>TaxReportHierarchyVersion_IN</c> record of the task.
    /// </returns>
    public TaxReportHierarchyVersion_IN getHierarchyVersion()
    {
        return hierarchyVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the To date of the task.
    /// </summary>
    /// <returns>
    /// To date of the task.
    /// </returns>
    public date getToDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tasks that update un-settled tax transactions within the sepecified time
    /// scope using the specified tax report hierarchy.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// Tax report hierarchy used to update the tax transactions.
    /// </param>
    /// <param name="_fromDate">
    /// The "From" date.
    /// </param>
    /// <param name="_toDate">
    /// The "To" date, or the maximum date if not specified.
    /// </param>
    protected void init(
        TaxReportHierarchyVersion_IN _hierarchyVersion,
        date _fromDate,
        date _toDate = maxDate())
    {
        // Initialize class variables
        hierarchy = TaxReportHierarchy_IN::find(_hierarchyVersion.TaxReportHierarchy_IN);
        hierarchyVersion = _hierarchyVersion;
        fromDate = _fromDate;
        toDate = _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static TaxReportSetOffHrchyChangeTask_IN construct()
    {
        return new TaxReportSetOffHrchyChangeTask_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initalizes a new instance <c>TaxReportSetOffHrchyChangeTask_IN</c>.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// The instance <c>TaxReportHierarchyVersion_IN</c>.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date; optional.
    /// </param>
    /// <returns>
    /// A new instance <c>TaxReportSetOffHrchyChangeTask_IN</c>.
    /// </returns>
    public static TaxReportSetOffHrchyChangeTask_IN newTask(
        TaxReportHierarchyVersion_IN _hierarchyVersion,
        date _fromDate,
        date _toDate = maxDate())
    {
        TaxReportSetOffHrchyChangeTask_IN   task;

        task = TaxReportSetOffHrchyChangeTask_IN::construct();
        task.init(_hierarchyVersion, _fromDate, _toDate);

        return task;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>