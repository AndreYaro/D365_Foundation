<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerVoucherHelper_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a helper class for Chinese voucher in Subledger transfer process.
/// </summary>
class SubledgerVoucherHelper_CN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVoucherTypeForSubledgerSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Chinese ledger voucher type for subledger transfer summary.
    /// </summary>
    /// <param name="_transferId">
    /// The transfer ID value.
    /// </param>
    /// <returns>
    /// The <c>LedgerVoucherType_CN</c> record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The Chinese voucher type was not found.
    /// </exception>
    public static LedgerVoucherType_CN getVoucherTypeForSubledgerSummary(SubledgerJournalTransferId _transferId)
    {
        List                                    debitAccList = new List(Types::Container);
        List                                    creditAccList = new List(Types::Container);
        LedgerVoucherTypeRule_CN                voucherTypeRule;
        LedgerVoucherType_CN                    voucherType;
        SubLedgerJournalAccountEntryView        subLedgerJournalAccountEntryView;
        DimensionAttributeValueCombination      dimAttrValueCombination;
        MainAccount                             mainAccount;

        while select LedgerDimension, IsCorrection, AccountingCurrencyAmount
            from subLedgerJournalAccountEntryView
                where subLedgerJournalAccountEntryView.TransferId == _transferId
                    && subLedgerJournalAccountEntryView.IsTransferredInDetail != TransferPolicy::DoNotTransfer
            outer join RecId from dimAttrValueCombination
                where dimAttrValueCombination.RecId == subLedgerJournalAccountEntryView.LedgerDimension
            outer join MainAccountId from mainAccount
                where mainAccount.RecId == dimAttrValueCombination.MainAccount
        {
            if ((subLedgerJournalAccountEntryView.AccountingCurrencyAmount < 0 && subLedgerJournalAccountEntryView.IsCorrection == false)
                || (subLedgerJournalAccountEntryView.AccountingCurrencyAmount > 0 && subLedgerJournalAccountEntryView.IsCorrection == true))
            {
                creditAccList.addEnd([mainAccount.MainAccountId, LedgerJournalACType::Ledger]);
            }
            else
            {
                debitAccList.addEnd([mainAccount.MainAccountId, LedgerJournalACType::Ledger]);
            }
        }

        voucherTypeRule = LedgerVoucherTypeRule_CN::newFromAccount(debitAccList, creditAccList);
        if (voucherTypeRule)
        {
            voucherType = voucherTypeRule.getVoucherType();
        }

        if (!voucherType)
        {
            // Fail to get voucher type
            throw error("@GLS60253");
        }

        return voucherType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherTypeFromSubledgerAccEntryTemp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Chinese ledger voucher type from the temporary subledger journal account entry.
    /// </summary>
    /// <param name="_subledgerJournalAccountEntryTmpDetail">
    /// The <c>SubledgerJournalAccountEntryTmpDetail</c> record.
    /// </param>
    /// <returns>
    /// The <c>LedgerVoucherType_CN</c> record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The Chinese voucher type was not found.
    /// </exception>
    public static LedgerVoucherType_CN getVoucherTypeFromSubledgerAccEntryTemp(SubledgerJournalAccountEntryTmpDetail _subledgerJournalAccountEntryTmpDetail)
    {
        List                                debitAccList = new List(Types::Container);
        List                                creditAccList = new List(Types::Container);
        LedgerVoucherTypeRule_CN            voucherTypeRule;
        LedgerVoucherType_CN                voucherType;
        SubledgerJournalAccountEntry        subledgerJournalAccountEntry;
        DimensionAttributeValueCombination  dimAttrValueCombination;
        MainAccount                         mainAccount;

        while select AccountingCurrencyAmount, LedgerDimension, IsCorrection from subledgerJournalAccountEntry
            outer join RecId from dimAttrValueCombination
                where dimAttrValueCombination.RecId == subledgerJournalAccountEntry.LedgerDimension
            outer join MainAccountId from mainAccount
                where mainAccount.RecId == dimAttrValueCombination.MainAccount
            exists join _subledgerJournalAccountEntryTmpDetail
                where _subledgerJournalAccountEntryTmpDetail.SubledgerJournalEntry == subledgerJournalAccountEntry.SubledgerJournalEntry
        {
            subledgerJournalAccountEntry.calculateInternalValues();

            if (subledgerJournalAccountEntry.Side == DebitCredit::Credit)
            {
                creditAccList.addEnd([mainAccount.MainAccountId, LedgerJournalACType::Ledger]);
            }
            else
            {
                debitAccList.addEnd([mainAccount.MainAccountId, LedgerJournalACType::Ledger]);
            }
        }

        voucherTypeRule = LedgerVoucherTypeRule_CN::newFromAccount(debitAccList, creditAccList);
        if (voucherTypeRule)
        {
            voucherType = voucherTypeRule.getVoucherType();
        }

        if (!voucherType)
        {
            // Fail to get voucher type
            throw error("@GLS60253");
        }

        return voucherType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>