<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSChangeWorkPoolService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service class for executing the 'Change work pool' business operation.
/// </summary>
public class WHSChangeWorkPoolService extends WHSChangeWorkDetailsServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>startOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Entry point for the business operation.
    /// </summary>
    /// <param name="_dataContract">The data contract object reference.</param>
    public void startOperation(WHSChangeWorkPoolDataContract _dataContract)
    {
        this.loopWorkLinesAndDoOperation(_dataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the actual business operation. Overridden to do the actual implementation.
    /// </summary>
    /// <param name="_workId">Work Id to modify.</param>
    /// <param name="_dataContract">The data contract object reference.</param>
    protected void doOperation(WHSWorkId _workId, WHSChangeWorkDetailsDataContract _dataContract)
    {
        using (var activityContext = this.instrumentationLogger().workTableActivities().changeWorkPool())
        {
            var dataContract = _dataContract as WHSChangeWorkPoolDataContract;
            this.updateWorkPool(_workId, dataContract.parmNewWorkPool());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationFailedErrorMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the message for errors in the operation.
    /// </summary>
    /// <returns>The message to use for formatting the user error message.</returns>
    protected str operationFailedErrorMsg()
    {
        return "@WAX:WorkPoolUpdateFailed";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkPool</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the work pool for the given <c>WHSWorkId</c>.
    /// </summary>
    /// <param name = "_workId"><c>WHSWorkId</c> for the work to modify.</param>
    /// <param name = "_newWorkPoolId"><c>WHSWorkPoolId</c></param>
    [Hookable(false)]
    protected internal void updateWorkPool(WHSWorkId _workId, WHSWorkPoolId _newWorkPoolId)
    {
        using (var activityContext = this.instrumentationLogger().workTableActivities().updateWorkPool())
        {
            ttsbegin;

            var workTable = WHSWorkTable::find(_workId, true);

            this.instrumentationLogger().logRecordInformation(workTable);

            if (workTable.WorkPoolId != _newWorkPoolId)
            {
                workTable.WorkPoolId = _newWorkPoolId;
                workTable.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>