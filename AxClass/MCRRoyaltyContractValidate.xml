<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRoyaltyContractValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRRoyaltyContractValidate</c> class serves to validate the royalty contract.
/// </summary>
public class MCRRoyaltyContractValidate extends RunBase
{
    RecId               recId;

    MCRRoyaltyVerifier  verifier;
    NoYes               remove;
    NoYes               isAlreadyValidated;
    DialogField         fieldVerifier;
    DialogField         fieldRemove;

    MCRRoyaltyContract  mcrRoyaltyContract;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        verifier,
        remove,
        recId,
        isAlreadyValidated
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the dialog to be presented to the user.
    /// </summary>
    /// <returns>
    /// An object of the <c>DialogRunBase</c> Class.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase           dialog = super();
        Object                  fieldApproverControl;

        fieldVerifier           = dialog.addFieldValue(extendedTypeStr(TAMRebateVerifier),
                                                verifier,
                                                "@PDS1418");

        fieldApproverControl    = fieldVerifier.control();

        fieldApproverControl.registerOverrideMethod(identifierstr(LookupReference),
                                                    methodstr(MCRRoyaltyContractValidate,
                                                    workerLookup),
                                                    this);

        fieldApproverControl.replacementFieldGroup(identifierstr(PersonnelNumber));

        if (this.isAlreadyValidated())
        {
            fieldRemove = dialog.addFieldValue(extendedTypeStr(NoYesId),
                                                remove,
                                                "@PDS1431");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the dialog <c>Remove Validation</c> field values.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        this.parmVerifier(fieldVerifier.value());

        if (fieldRemove)
        {
            remove = fieldRemove.value();
        }
        else
        {
            remove = NoYes::No;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables.
    /// </summary>
    /// <returns>
    /// true if there are no problems with the initialization; otherwise false.
    /// </returns>
    public boolean init()
    {
        boolean ret;
        ret     = super();

        mcrRoyaltyContract  = MCRRoyaltyContract::findByRecId(recId);
        isAlreadyValidated  = mcrRoyaltyContract.Validated;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the royalty is already validated.
    /// </summary>
    /// <returns>
    /// true if already validated; otherwise, false.
    /// </returns>
    public boolean isAlreadyValidated()
    {
        return isAlreadyValidated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        verifier = HcmWorker::userId2Worker(curuserid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the dialog object parameters.
    /// </summary>
    /// <returns>
    /// Returns the list of stored parameters.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the <c>RecId</c> of the royalty to Validate.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> of the royalty to validate.
    /// </param>
    /// <returns>
    /// The <c>RecId</c> of the royalty to validate.
    /// </returns>
    public RecId parmRecId(RecId _recId = recId)
    {
        recId = _recId;

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVerifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the verifier of the royalty to validate.
    /// </summary>
    /// <param name="_verifier">
    /// The verifier of the royalty to validate.
    /// </param>
    /// <returns>
    /// The verifier of the royalty to validate.
    /// </returns>
    public TAMRebateVerifier parmVerifier(MCRRoyaltyVerifier _verifier = verifier)
    {
        verifier = _verifier;

        return verifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the selected royalty and validates the royalty.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Validation canceled for invalid royalty.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Validation canceled for invalid royalty.
    /// </exception>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// An update conflict is not recovered.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// An update conflict is present.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        if (!this.validate())
        {
            throw error("@SYS326740");
        }

        try
        {
            ttsbegin;

            MCRRoyaltyContract mcrRoyaltyContractLocal = MCRRoyaltyContract::findByRecId(recId, true);

            if (remove)
            {
                mcrRoyaltyContractLocal.invalidateRoyaltyAgreement(true);
            }
            else
            {
                mcrRoyaltyContractLocal.Validated   = true;
                mcrRoyaltyContractLocal.Verifier    = verifier;

                if (mcrRoyaltyContractLocal.validateWrite())
                {
                    mcrRoyaltyContractLocal.update();
                }
                else
                {
                    error(strFmt("@MCR:MCRRoyaltyContractValidationError", mcrRoyaltyContractLocal.RoyaltyContract));
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the last parameters saved.
    /// </summary>
    /// <param name="packedClass">
    /// List of stored parameters.
    /// </param>
    /// <returns>
    /// true if restore succeeded; otherwise, false.
    /// </returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the vendor rebate agreement is validated.
    /// </summary>
    /// <param name="_calledFrom">
    /// The form that called the validation.
    /// </param>
    /// <returns>
    /// true if the royalty agreement is validated; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean             ret = true;
        MCRRoyaltyTable     mcrRoyaltyTable;

        if (!remove)
        {
            if (verifier)
            {
                ret = HcmWorkerLookup::newOnlyActiveWorkersWithinCompany().validateWorker(verifier);
                if (!ret)
                {
                    error(strfmt("@SYS39817", HcmWorker::find(verifier).PersonnelNumber));
                }
            }
            else
            {
                ret = checkFailed("@SYS8980");
            }

            if (ret == true)
            {
                if (!mcrRoyaltyContract)
                {
                    mcrRoyaltyContract = MCRRoyaltyContract::findByRecId(recId);
                }

                while select mcrRoyaltyTable
                    where mcrRoyaltyTable.RoyaltyContract   == mcrRoyaltyContract.RoyaltyContract
                        && mcrRoyaltyTable.VendAccount      == mcrRoyaltyContract.VendAccount
                {
                    if (!this.validateRoyaltyTable(mcrRoyaltyTable))
                    {
                        ret = checkFailed(strfmt("@MCR4410050", mcrRoyaltyContract.RoyaltyContract));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRoyaltyTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the royalty line agreement is validated.
    /// </summary>
    /// <param name="_mcrRoyaltyTable">
    /// The <c>MCRRoyaltyTable</c> that will be validated.
    /// </param>
    /// <returns>
    /// true if the royalty agreement is validated; otherwise, false.
    /// </returns>
    public boolean validateRoyaltyTable(MCRRoyaltyTable _mcrRoyaltyTable)
    {
        boolean ret = true;

        ret = ret && _mcrRoyaltyTable.checkIfMCRRoyaltyItemCodeExist();
        ret = ret && _mcrRoyaltyTable.checkIfMCRRoyaltyTablePricingExists();
        ret = ret && _mcrRoyaltyTable.checkLineBreaks();
        ret = ret && _mcrRoyaltyTable.checkUOMConvert();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for selecting a worker in the current legal entity.
    /// </summary>
    /// <param name="_callerControl">
    /// The control which called the validation.
    /// </param>
    /// <returns>
    /// The selected worker record.
    /// </returns>
    public Common workerLookup(Object _callerControl)
    {
        return HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().lookupWorker(_callerControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>MCRRoyaltyContractValidate</c> class.
    /// </summary>
    /// <param name="_args">
    /// Any arguments passed from the calling form.
    /// </param>
    /// <returns>
    /// Returns an instance of the <c>MCRRoyaltyContractValidate</c> class.
    /// </returns>
    public static MCRRoyaltyContractValidate construct(Args _args)
    {
        MCRRoyaltyContract          mcrRoyaltyContract;

        if (_args.record())
        {
            mcrRoyaltyContract  = _args.record();
            return MCRRoyaltyContractValidate::newRoyaltyAgreement(mcrRoyaltyContract);
        }
        else
        {
            throw error("@MCR27548");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description of the <c>MCRRoyaltyTableValidate</c> class.
    /// </summary>
    /// <returns>
    /// The description of the <c>MCRRoyaltyTableValidate</c> class.
    /// </returns>
    public static ClassDescription description()
    {
        return "@MCR4410053";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance and runs the <c>MCRRoyaltyTableValidate</c> class.
    /// </summary>
    /// <param name="_args">
    /// Any arguments passed from the calling form.
    /// </param>
    public static void main(Args _args)
    {
        MCRRoyaltyContractValidate  mcrRoyaltyContractValidate;
        FormDataSource              datasource;
        mcrRoyaltyContract          mcrRoyaltyContract;

        mcrRoyaltyContractValidate  = MCRRoyaltyContractValidate::construct(_args);

        if (mcrRoyaltyContractValidate.prompt())
        {
            mcrRoyaltyContractValidate.runOperation();

            if (_args.record()
                && FormDataUtil::getFormDataSource(_args.record())
                && _args.dataset() == tableNum(mcrRoyaltyContract))
            {
                datasource = FormDataUtil::getFormDataSource(_args.record());
                datasource.reread();
                datasource.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRoyaltyAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>MCRRoyaltyTableValidate</c> class and sets the class parms with the
    /// information of the royalty contract.
    /// </summary>
    /// <param name="_mcrRoyaltyContract">
    /// The <c>MCRRoyaltyContract</c> record for which validation occurs.
    /// </param>
    /// <returns>
    /// A new instance of <c>MCRRoyaltyTableValidate</c> class.
    /// </returns>
    public static MCRRoyaltyContractValidate newRoyaltyAgreement(MCRRoyaltyContract  _mcrRoyaltyContract)
    {
        MCRRoyaltyContractValidate validate = new MCRRoyaltyContractValidate();

        validate.getLast();
        validate.parmRecId(_mcrRoyaltyContract.RecId);
        validate.init();

        return validate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>