<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UniqueCertificationExportGER_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class perform all operations to export the Unique Certification file.
/// </summary>
public class UniqueCertificationExportGER_IT extends RunBase
{
    private ERFileName filename;
    private DialogField confirmExportedField;
    private boolean confirmExported;
    private DialogField fieldFileName;
    private UniqueCertificationHeader_IT certificationHeader;

    const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@ExtendedItallianLocalization:UniqueCertificationExtraction";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@ExtendedItallianLocalization:UniqueCertification");
        fieldFileName = dialog.addFieldValue(extendedTypeStr(ERFileName), filename);
        confirmExportedField = dialog.addFieldValue(extendedTypeStr(NoYesId), confirmExported, "@SYS4082315");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        fileName = fieldFileName.value();
        confirmExported = confirmExportedField.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificationHeader</Name>
				<Source><![CDATA[
    public UniqueCertificationHeader_IT parmCertificationHeader(UniqueCertificationHeader_IT _certificationHeader = certificationHeader)
    {
        certificationHeader = _certificationHeader;
        return certificationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfirmExported</Name>
				<Source><![CDATA[
    public boolean parmConfirmExported(boolean _confirmExported = confirmExported)
    {
        confirmExported = _confirmExported;
        return confirmExported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports Unique Certification file.
    /// </summary>
    public void run()
    {
        super();
        RefRecId formatMappingId = LedgerParameters::find().UniqueCertificationERFormatMappingId_IT;
        Query query = new Query();
        query.addDataSource(tableNum(UniqueCertificationHeader_IT))
            .addRange(fieldNum(UniqueCertificationHeader_IT, RecId))
            .value(int642Str(certificationHeader.RecId));

        if (!formatMappingId)
        {
            throw error("@ExtendedItallianLocalization:NoUcFormatSet");
        }

        ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId, fileName)
            .withFileDestination(ERObjectsFactory::createFileDestinationBrowser())
            .withParameter(new ERModelDefinitionDatabaseContext()
            .addQuery(tableNum(UniqueCertificationHeader_IT), query))
            .run();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00050, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCertification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cheks if Unique Certification data are consistent.
    /// </summary>
    /// <returns>true if Unique Certification data are consistent; false otherwise.</returns>
    private boolean validateCertification()
    {
        UniqueCertificationValidate_IT validator = UniqueCertificationValidate_IT::construct();
        validator.parmUniqueCertificationHeader(this.parmCertificationHeader());
        return validator.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (!fileName)
        {
            ret = checkFailed("@SYS18624");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static UniqueCertificationExportGER_IT construct()
    {
        UniqueCertificationExportGER_IT exportRunbase = new UniqueCertificationExportGER_IT();
        return exportRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        UniqueCertificationExportGER_IT export = UniqueCertificationExportGER_IT::construct();

        if (!_args
            || !_args.record().RecId
            || _args.record().TableId != tablenum(UniqueCertificationHeader_IT))
        {
            throw error(strfmt("@SYS25516", export.caption()));
        }

        export.parmCertificationHeader(_args.record());

        if (export.validateCertification() && export.prompt())
        {
            export.runOperation();
        }
        else
        {
            error("@ExtendedItallianLocalization:CanNotGenerateFile");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, filename];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, filename] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>