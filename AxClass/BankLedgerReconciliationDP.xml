<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLedgerReconciliationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankLedgerReconciliationDP</c> class handles all the business logic to display data on the
/// <c>BankLedgerReconciliation</c> SSRS report.
/// </summary>
[SRSReportParameterAttribute(classstr(BankLedgerReconciliationContract))]
public class BankLedgerReconciliationDP extends SrsReportDataProviderPreProcessTempDB
{
    private BankLedgerReconciliationTmp bankLedgerReconciliationTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankLedgerReconciliationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data that is to be displayed from the <c>BankLedgerReconciliationTmp</c> temporary
    /// table.
    /// </summary>
    /// <returns>
    /// The <c>BankLedgerReconciliationTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute('BankLedgerReconciliationTmp')]
    public BankLedgerReconciliationTmp getBankLedgerReconciliationTmp()
    {
        select bankLedgerReconciliationTmp;
        return bankLedgerReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReportTransaction</Name>
				<Source><![CDATA[
    public boolean parmSkipReportTransaction(boolean _skipReportTransaction = skipReportTransaction)
    {
        if (SsrsPreProcessReportSkipDefaultDatabaseTrxScope::instance().isEnabled())
        {
            skipReportTransaction = true;
        }

        return skipReportTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initService</Name>
				<Source><![CDATA[
    private void initService(BankReport_LedgerReconciliation bankReport_LedgerReconciliation)
    {
        BankLedgerReconciliationContract contract = this.parmDataContract() as BankLedgerReconciliationContract;
        bankReport_LedgerReconciliation.parmFromDate(contract.parmFromDate());
        bankReport_LedgerReconciliation.parmToDate(contract.parmToDate());
        bankReport_LedgerReconciliation.parmFromVoucher(contract.parmFromVoucher());
        bankReport_LedgerReconciliation.parmToVoucher(contract.parmToVoucher());
        bankReport_LedgerReconciliation.parmFromMainAccount(contract.parmFromLedger());
        bankReport_LedgerReconciliation.parmToMainAccount(contract.parmToLedger());
        bankReport_LedgerReconciliation.parmIncludeDetails(contract.parmIncludeDetails());
        bankReport_LedgerReconciliation.parmShowDifferencesOnly(contract.parmShowDifferencesOnly());
        bankReport_LedgerReconciliation.parmCurrencySelection(contract.parmCurrencySelection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the <c>BankLedgerReconciliation</c> SSRS report.
    /// </summary>
    public void processReport()
    {
        BankReport_LedgerReconciliation bankReport_LedgerReconciliation;
        bankReport_LedgerReconciliation = new BankReport_LedgerReconciliation(bankLedgerReconciliationTmp);
        this.initService(bankReport_LedgerReconciliation);
        bankLedgerReconciliationTmp = bankReport_LedgerReconciliation.processBankLedgerReconciliation(this.parmUserConnection());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>