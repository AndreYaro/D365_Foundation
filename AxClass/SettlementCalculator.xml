<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementCalculator</c> class is responsible for amount calculations during settlement.
/// </summary>
public class SettlementCalculator
{
    // Note: Calculator should be kept buffer agnostic.

    private SettlementExchRate settlementExchRate;
    private ExchRate exchRateCurToMstDebit;
    private ExchRate exchRateCurToMstCredit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>SettlementCalculator</c> class.
    /// </summary>
    /// <param name = "_settlementExchRate">An instance of <c>SettlementExchRate</c> class.</param>
    /// <param name = "_exchRateCurToMstDebit">The transaction currency to accounting currency exchange rate for the debit transaction.</param>
    /// <param name = "_exchRateCurToMstCredit">The transaction currency to accounting currency exchange rate for the credit transaction.</param>
    /// <returns>A newly created instance of the <c>SettlementCalculator</c> class.</returns>
    public static SettlementCalculator construct(
        SettlementExchRate _settlementExchRate,
        ExchRate _exchRateCurToMstDebit,
        ExchRate _exchRateCurToMstCredit)
    {
        SettlementCalculator instance =  new SettlementCalculator();
        instance.settlementExchRate = _settlementExchRate;
        instance.exchRateCurToMstDebit = _exchRateCurToMstDebit;
        instance.exchRateCurToMstCredit = _exchRateCurToMstCredit;
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettleAmountMstForDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount to settle in the accounting currency of the debit transaction.
    /// </summary>
    /// <param name="_settleAmountCurDebit">
    /// The debit transaction amount to settle in the transaction currency.
    /// </param>
    /// <param name="_settleAmountMstCredit">
    /// The credit transaction amount to settle in the accounting currency.
    /// </param>
    /// <returns>
    /// The debit transaction amount to settle in the accounting currency.
    /// </returns>
    /// <remarks>
    /// The amount returned is not rounded.
    /// </remarks>
    public AmountMST calcSettleAmountMstForDebit(AmountCur _settleAmountCurDebit, AmountMST _settleAmountMstCredit = 0.0)
    {
        AmountMST settleAmountMst;
        boolean isSingleCompany = settlementExchRate.getDebitCompany() == settlementExchRate.getCreditCompany();
        boolean isCreditAmountAvailable = _settleAmountMstCredit != 0.0;

        if (isSingleCompany && isCreditAmountAvailable)
        {
            // Offset the calculated credit MST amount
            settleAmountMst = -_settleAmountMstCredit;
        }
        else if (!isCreditAmountAvailable || settlementExchRate.isCreditExchRateCurToMstAlwaysUsed())
        {
            settleAmountMst = settlementExchRate.convertDebitCurToMst(_settleAmountCurDebit, false);
        }
        else
        {
            // Determine the amount to settle based on the credit amountMST, converted to the debit company currency.
            AmountMST settleAmountCreditMSTInDebitCompany = CurrencyExchange::calculateAmount(_settleAmountMstCredit, settlementExchRate.getCreditMstToDebitMst());

            settleAmountMst = -settleAmountCreditMSTInDebitCompany;
        }

        return settleAmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRealizedExchAdjAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount of the realized exchange adjustment.
    /// </summary>
    /// <param name="_settleAmountCurDebit">
    /// The amount to settle for the debit transaction in the transaction currency.
    /// </param>
    /// <param name="_cashDiscAmountCurDebit">
    /// The amount of cash discount for the debit transaction in the transaction currency.
    /// </param>
    /// <param name="_settleAmountMstOnPaymDate">
    /// The amount to settle for the debit transaction in the accounting currency.
    /// </param>
    /// <param name="_cashDiscAmountMstOnPaymDate">
    /// The amount of cash discount for the debit transaction in the accounting currency.
    /// </param>
    /// <param name="_isFullySettled">
    /// true if a debit transaction is fully settled; otherwise, false.
    /// </param>
    /// <returns>
    /// The realized exchange adjustment amount in the accounting currency.
    /// </returns>
    /// <remarks>
    /// The amount that is returned is rounded.
    /// </remarks>
    public AmountMST calcRealizedExchAdjAmount(
        AmountCur _settleAmountCurDebit,
        AmountCur _cashDiscAmountCurDebit,
        AmountMST _settleAmountMstOnPaymDate,
        AmountMST _cashDiscAmountMstOnPaymDate,
        boolean _isFullySettled)
    {
        AmountMST settleAmountMstOnInvDate;
        boolean needToCalculateRealizedExchAdjAmount;

        needToCalculateRealizedExchAdjAmount = settlementExchRate.getTransDebitCurrency() != settlementExchRate.getDebitCompanyCurrency();

        if (!needToCalculateRealizedExchAdjAmount)
        {
            return 0.0;
        }

        if (_isFullySettled)
        {
            settleAmountMstOnInvDate = (this.amountMstDebit() - this.settleAmountMstDebit()) +
                this.exchAdjustmentRealizedDebit() + _cashDiscAmountMstOnPaymDate;
        }
        else if (this.amountCurOpenDebit() == 0.0 && _cashDiscAmountCurDebit == 0)
        {
            // this payment schedule is fully settled, but transaction isn't
            settleAmountMstOnInvDate = this.amountMstOpenDebit() - this.exchAdjustmentUnrealizedOpenDebit();
        }
        else
        {
            AmountMST settleAmount;
            AmountMST discountAmount;

            // Because the amount on the payment date is composed of adding the settle and discount amounts,
            // need to calculate the amount on the invoice date the same way.
            settleAmount = CurrencyExchange::calculateAmount(
                _settleAmountCurDebit,
                exchRateCurToMstDebit);

            discountAmount = CurrencyExchange::calculateAmount(
                _cashDiscAmountCurDebit,
                exchRateCurToMstDebit);

            settleAmountMstOnInvDate =
                CurrencyExchange::round(settleAmount, settlementExchRate.getDebitCompanyCurrency()) +
                CurrencyExchange::round(discountAmount, settlementExchRate.getDebitCompanyCurrency());
        }

        return _settleAmountMstOnPaymDate - settleAmountMstOnInvDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettleAmountCurForDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount to settle in the transaction currency of the debit transaction.
    /// </summary>
    /// <param name="_remainingSpecTransRecords">
    /// The number of <c>SpecTrans</c> table records not yet processed.
    /// </param>
    /// <returns>
    /// The unrounded amount to settle in the transaction currency.
    /// </returns>
    /// <remarks>
    /// The amount returned is not rounded.
    /// </remarks>
    public AmountCur calcSettleAmountCurForDebit(NumberOfRecords _remainingSpecTransRecords)
    {
        #ISOCountryRegionCodes

        AmountCur settleAmountCur;
        AmountCur roundedSettleAmountCur;
        AmountCur remainingAmount;
        AmountMST settleAmountMst;
        AmountMST roundedSettleAmountMst;
        AmountMST realizedExchAdjAmount;
        CurrencyExchangeHelper currencyHelper;

        AmountCur specTransDebitBalance = this.specTransDebitBalance();
        AmountCur specTransCreditBalance = this.specTransCreditBalance();
        AmountCur amountCurDebit = this.amountCurDebit();
        AmountCur settleAmountCurDebit = this.settleAmountCurDebit();
        AmountMST amountMstDebit = this.amountMstDebit();
        AmountMST settleAmountMstDebit = this.settleAmountMstDebit();
        AmountMST exchAdjustmentRealizedDebit = this.exchAdjustmentRealizedDebit();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoRU ]) &&
            !FeatureStateProvider::isFeatureEnabled(FollowGeneralSettleAmountCalculationForEasterEuropeFeature::instance()))
        {
            if (abs(specTransDebitBalance) < abs(specTransCreditBalance * settlementExchRate.getPaymentToInvoice()))
            {
                settleAmountCur = specTransDebitBalance;
            }
            else
            {
                settleAmountCur = -specTransCreditBalance * settlementExchRate.getPaymentToInvoice();
            }
        }
        else
        {
            // Special handling when SpecTrans balance is inverse of normal invoice balance.  This will happen when there
            // is a primary payment and the debit transaction is a credit memo or another payment.
            if (specTransDebitBalance < 0.0)
            {
                if (_remainingSpecTransRecords == 0)
                {
                    // Because this is the last spec trans record the settled amount should be the lesser of the two amounts.
                    if (-specTransDebitBalance < specTransCreditBalance * settlementExchRate.getPaymentToInvoice())
                    {
                        settleAmountCur = specTransDebitBalance;
                    }
                    else
                    {
                        settleAmountCur = -specTransCreditBalance * settlementExchRate.getPaymentToInvoice();
                    }
                }
                else
                {
                    // This is to handle the scenario where credit transaction is a primary payment for 100
                    // this is settle with debit transcation (credit memo) for -300 and
                    // another debit transaction (invoice) for 200.  In this case the settleAmountCur should
                    // be the amount of the debit transaction or -300)
                    settleAmountCur = specTransDebitBalance;
                }
            }
            else
            {
                if (specTransDebitBalance <= (-specTransCreditBalance * settlementExchRate.getPaymentToInvoice()))
                {
                    settleAmountCur = specTransDebitBalance;
                }
                else
                {
                    settleAmountCur = -specTransCreditBalance * settlementExchRate.getPaymentToInvoice();
                }
            }
        }

        currencyHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(settlementExchRate.getDebitCompany()).RecId));
        roundedSettleAmountCur = CurrencyExchange::round(settleAmountCur, settlementExchRate.getTransDebitCurrency());

        remainingAmount = amountCurDebit - settleAmountCurDebit - roundedSettleAmountCur;

        if (remainingAmount != 0.0)
        {
            // when not fully settled in transaction currency, check if it will be fully settled in mst
            settleAmountMst = this.calcSettleAmountMstForDebit(settleAmountCur);
            roundedSettleAmountMst = CurrencyExchange::round(settleAmountMst, settlementExchRate.getDebitCompanyCurrency());

            realizedExchAdjAmount = this.calcRealizedExchAdjAmount(settleAmountCur, 0.0, roundedSettleAmountMst, 0.0, false);

            if (amountMstDebit ==
                settleAmountMstDebit + roundedSettleAmountMst - exchAdjustmentRealizedDebit - realizedExchAdjAmount)
            {
                // The remaining amount is converted to mst and then rounded, and if it is then equal to zero,
                // adjust the settleAmountCur to be equal to the unsettled amount.
                currencyHelper.parmExchangeRate1(settlementExchRate.getDebitCurToDebitMstCombined());
                remainingAmount = currencyHelper.calculateTransactionToAccounting(settlementExchRate.getTransDebitCurrency(), remainingAmount, true);

                if (remainingAmount == 0.0)
                {
                    settleAmountCur = amountCurDebit - settleAmountCurDebit;
                }
            }
        }

        return settleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettleAmountMstForCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount to settle in the accounting currency for the credit transaction.
    /// </summary>
    /// <param name="_settleAmountCurCredit">
    /// The credit transaction amount to settle in the transaction currency.
    /// </param>
    /// <param name="_isFullySettled">
    /// A boolean value that indicates whether the credit transaction is fully settled.
    /// </param>
    /// <returns>
    /// The credit transaction amount to settle in the accounting currency.
    /// </returns>
    public AmountMST calcSettleAmountMstForCredit(AmountCur _settleAmountCurCredit, boolean _isFullySettled)
    {
        AmountMST settleAmountMst;

        if (_isFullySettled)
        {
            // Transaction is fully settled in transaction currency, so the amount to settle in
            // MST should be the remaining unsettled amount (acknowledging realized exch adjustment)
            settleAmountMst = (this.amountMstCredit() - this.settleAmountMSTCredit()) + this.exchAdjustmentRealizedCredit();
        }
        else if (this.amountCurOpenCredit() == 0.0)
        {
            // this payment schedule is fully settled, but transaction isn't
            settleAmountMst = this.amountMstOpenCredit() - this.exchAdjustmentUnrealizedOpenCredit();
        }
        else
        {
            settleAmountMst = CurrencyExchange::calculateAmount(_settleAmountCurCredit, exchRateCurToMstCredit);
        }

        return settleAmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmountCurFromDebitToCredit</Name>
				<Source><![CDATA[
    public AmountCur calcAmountCurFromDebitToCredit(AmountCur _amountCurDebit)
    {
        DiscAmount amountCredit;

        amountCredit = _amountCurDebit / settlementExchRate.getPaymentToInvoice();

        return CurrencyExchange::round(amountCredit, settlementExchRate.getTransCreditCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmountCurFromCreditToDebit</Name>
				<Source><![CDATA[
    public AmountCur calcAmountCurFromCreditToDebit(AmountCur _amountCurCredit)
    {
        DiscAmount amountDebit;

        amountDebit = _amountCurCredit * settlementExchRate.getPaymentToInvoice();

        return CurrencyExchange::round(amountDebit, settlementExchRate.getTransDebitCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettleAmountCurForCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount to settle in the transaction currency of the credit transaction.
    /// </summary>
    /// <param name="_settleAmountCurDebit">
    /// The amount to settle in the transaction currency of the debit transaction.
    /// </param>
    /// <returns>
    /// The unrounded amount to settle in the transaction currency.
    /// </returns>
    /// <remarks>
    /// The amount returned is not rounded.
    /// </remarks>
    public AmountCur calcSettleAmountCurForCredit(AmountCur _settleAmountCurDebit)
    {
        AmountCur settleAmountCur;
        AmountCur roundedSettleAmountCur;
        AmountCur remainingAmount;
        AmountMST settleAmountMst;
        AmountMST roundedSettleAmountMst;
        CurrencyExchangeHelper currencyHelper;

        settleAmountCur = -(_settleAmountCurDebit / settlementExchRate.getPaymentToInvoice());

        currencyHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(settlementExchRate.getCreditCompany()).RecId));
        roundedSettleAmountCur = CurrencyExchange::round(settleAmountCur, settlementExchRate.getTransCreditCurrency());

        remainingAmount = this.amountCurCredit() - this.settleAmountCurCredit() - roundedSettleAmountCur;

        if (remainingAmount != 0.0)
        {
            // when not fully settled in transaction currency, check if it will be fully settled in mst
            settleAmountMst = this.calcSettleAmountMstForCredit(settleAmountCur, false);
            roundedSettleAmountMst = CurrencyExchange::round(settleAmountMst, settlementExchRate.getCreditCompanyCurrency());

            if (this.amountMstCredit() ==
                this.settleAmountMstCredit() + this.exchAdjustmentRealizedCredit() + roundedSettleAmountMst)
            {
                // The remaining amount is converted to mst and then rounded, and if it is then equal to zero,
                // adjust the settleAmountCur to be equal to the unsettled amount.
                currencyHelper.parmExchangeRate1(exchRateCurToMstCredit);
                remainingAmount = currencyHelper.calculateTransactionToAccounting(settlementExchRate.getTransCreditCurrency(), remainingAmount, true);

                if (remainingAmount == 0.0)
                {
                    settleAmountCur = this.amountCurCredit() - this.settleAmountCurCredit();
                }
            }
        }

        return settleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettleReportingAmountDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount to settle in the reporting currency of the debit company.
    /// </summary>
    /// <param name = "_settleAmountCur">The amount to settle in the transaction currency.</param>
    /// <param name = "_settleAmountReportingCredit">The amount to settle in the reporting currency of the credit company.</param>
    /// <returns>The amount to settle in the reporting currency of the debit company.</returns>
    /// <remarks>
    /// The amount returned is rounded.
    /// </remarks>
    public AmountMSTSecondary calcSettleReportingAmountDebit(AmountCur _settleAmountCur, AmountMSTSecondary _settleAmountReportingCredit)
    {
        AmountMSTSecondary settleAmountReporting;
        boolean isSingleCompany = settlementExchRate.getDebitCompany() == settlementExchRate.getCreditCompany();
        boolean isCreditAmountAvailable = _settleAmountReportingCredit != 0.0;

        if (isSingleCompany && isCreditAmountAvailable)
        {
            // Offset the calculated credit reporting amount
            settleAmountReporting = -_settleAmountReportingCredit;
        }
        else if (!isCreditAmountAvailable || settlementExchRate.isCreditExchRateCurToReportingAlwaysUsed())
        {
            settleAmountReporting = settlementExchRate.convertDebitCurToReporting(_settleAmountCur);
        }
        else
        {
            //Determine the amount to settle based on the credit reporting currency, converted to the debit reporting currency.
            AmountMSTSecondary settleAmountCreditReportingInDebitCompany = CurrencyExchange::calculateAmount(
                _settleAmountReportingCredit,
                settlementExchRate.getCreditReportingToDebitReporting());

            settleAmountReporting = CurrencyExchange::round(-settleAmountCreditReportingInDebitCompany, settlementExchRate.getDebitCompanyCurrency());
        }

        return settleAmountReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettleReportingAmountCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount to settle in the reporting currency of the credit company.
    /// </summary>
    /// <param name = "_settleAmountCur">The amount to settle in the transaction currency.</param>
    /// <param name = "_isFullySettled">A boolean flag, indicating whether transaction is fully settled.</param>
    /// <returns>The amount to settle in the reporting currency of the credit company.</returns>
    /// <remarks>
    /// The amount returned is rounded.
    /// </remarks>
    public AmountMSTSecondary calcSettleReportingAmountCredit(AmountCur _settleAmountCur,
        boolean _isFullySettled)
    {
        AmountMSTSecondary settleReportingAmount;

        if (_isFullySettled)
        {
            // Transaction is fully settled in transactions currency so the amount to settle in
            // Reporting should be the remaining unsettled amount less realized exch adjustment
            settleReportingAmount = this.amountReportingCredit() -
                (this.settleAmountReportingCredit() - this.reportingExchAdjustmentRealizedCredit());
        }
        else if (this.amountCurOpenCredit() == 0.0)
        {
            // this payment schedule is fully settled, but transaction isn't
            settleReportingAmount = this.amountReportingOpenCredit() - this.reportingExchAdjustmentUnrealizedOpenCredit();
        }
        else
        {
            settleReportingAmount = settlementExchRate.convertCreditCurToReporting(_settleAmountCur);
        }

        return settleReportingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransDebitBalance</Name>
				<Source><![CDATA[
    /* Plumbing methods and delegates */

    delegate void getSpecTransDebitBalance(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransDebitBalance</Name>
				<Source><![CDATA[
    private AmountCur specTransDebitBalance()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getSpecTransDebitBalance(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransCreditBalance</Name>
				<Source><![CDATA[
    delegate void getSpecTransCreditBalance(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransCreditBalance</Name>
				<Source><![CDATA[
    private AmountCur specTransCreditBalance()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getSpecTransCreditBalance(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurDebit</Name>
				<Source><![CDATA[
    delegate void getAmountCurDebit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurDebit</Name>
				<Source><![CDATA[
    private AmountCur amountCurDebit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getAmountCurDebit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurCredit</Name>
				<Source><![CDATA[
    delegate void getAmountCurCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurCredit</Name>
				<Source><![CDATA[
    private AmountCur amountCurCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getAmountCurCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountReportingCredit</Name>
				<Source><![CDATA[
    delegate void getAmountReportingCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReportingCredit</Name>
				<Source><![CDATA[
    private AmountMSTSecondary amountReportingCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getAmountReportingCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurOpenDebit</Name>
				<Source><![CDATA[
    delegate void getAmountCurOpenDebit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurOpenDebit</Name>
				<Source><![CDATA[
    private AmountCur amountCurOpenDebit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getAmountCurOpenDebit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurOpenCredit</Name>
				<Source><![CDATA[
    delegate void getAmountCurOpenCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurOpenCredit</Name>
				<Source><![CDATA[
    private AmountCur amountCurOpenCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getAmountCurOpenCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleAmountCurDebit</Name>
				<Source><![CDATA[
    delegate void getSettleAmountCurDebit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleAmountCurDebit</Name>
				<Source><![CDATA[
    private AmountCur settleAmountCurDebit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getSettleAmountCurDebit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleAmountCurCredit</Name>
				<Source><![CDATA[
    delegate void getSettleAmountCurCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleAmountCurCredit</Name>
				<Source><![CDATA[
    private AmountCur settleAmountCurCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getSettleAmountCurCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMstOpenDebit</Name>
				<Source><![CDATA[
    delegate void getAmountMstOpenDebit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleAmountReportingCredit</Name>
				<Source><![CDATA[
    delegate void getSettleAmountReportingCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleAmountReportingCredit</Name>
				<Source><![CDATA[
    private AmountMSTSecondary settleAmountReportingCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getSettleAmountReportingCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMstOpenDebit</Name>
				<Source><![CDATA[
    private AmountMST amountMstOpenDebit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getAmountMstOpenDebit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMstOpenCredit</Name>
				<Source><![CDATA[
    delegate void getAmountMstOpenCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMstOpenCredit</Name>
				<Source><![CDATA[
    private AmountMST amountMstOpenCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getAmountMstOpenCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountReportingOpenCredit</Name>
				<Source><![CDATA[
    delegate void getAmountReportingOpenCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReportingOpenCredit</Name>
				<Source><![CDATA[
    private AmountMSTSecondary amountReportingOpenCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getAmountReportingOpenCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMstDebit</Name>
				<Source><![CDATA[
    delegate void getAmountMstDebit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMstDebit</Name>
				<Source><![CDATA[
    private AmountMST amountMstDebit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getAmountMstDebit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMstCredit</Name>
				<Source><![CDATA[
    delegate void getAmountMstCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMstCredit</Name>
				<Source><![CDATA[
    private AmountMST amountMstCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getAmountMstCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleAmountMstDebit</Name>
				<Source><![CDATA[
    delegate void getSettleAmountMstDebit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleAmountMstDebit</Name>
				<Source><![CDATA[
    private AmountMST settleAmountMstDebit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getSettleAmountMstDebit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleAmountMstCredit</Name>
				<Source><![CDATA[
    delegate void getSettleAmountMstCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleAmountMstCredit</Name>
				<Source><![CDATA[
    private AmountMST settleAmountMstCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getSettleAmountMstCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchAdjustmentRealizedDebit</Name>
				<Source><![CDATA[
    delegate void getExchAdjustmentRealizedDebit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchAdjustmentRealizedDebit</Name>
				<Source><![CDATA[
    private AmountMST exchAdjustmentRealizedDebit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getExchAdjustmentRealizedDebit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchAdjustmentRealizedCredit</Name>
				<Source><![CDATA[
    delegate void getExchAdjustmentRealizedCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchAdjustmentRealizedCredit</Name>
				<Source><![CDATA[
    private AmountMST exchAdjustmentRealizedCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getExchAdjustmentRealizedCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingExchAdjustmentRealizedCredit</Name>
				<Source><![CDATA[
    delegate void getReportingExchAdjustmentRealizedCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingExchAdjustmentRealizedCredit</Name>
				<Source><![CDATA[
    private AmountMSTSecondary reportingExchAdjustmentRealizedCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getReportingExchAdjustmentRealizedCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchAdjustmentUnrealizedOpenDebit</Name>
				<Source><![CDATA[
    delegate void getExchAdjustmentUnrealizedOpenDebit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchAdjustmentUnrealizedOpenDebit</Name>
				<Source><![CDATA[
    private AmountMST exchAdjustmentUnrealizedOpenDebit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getExchAdjustmentUnrealizedOpenDebit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchAdjustmentUnrealizedOpenCredit</Name>
				<Source><![CDATA[
    delegate void getExchAdjustmentUnrealizedOpenCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchAdjustmentUnrealizedOpenCredit</Name>
				<Source><![CDATA[
    private AmountMST exchAdjustmentUnrealizedOpenCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getExchAdjustmentUnrealizedOpenCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingExchAdjustmentUnrealizedOpenCredit</Name>
				<Source><![CDATA[
    delegate void getReportingExchAdjustmentUnrealizedOpenCredit(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingExchAdjustmentUnrealizedOpenCredit</Name>
				<Source><![CDATA[
    private AmountMST reportingExchAdjustmentUnrealizedOpenCredit()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        this.getReportingExchAdjustmentUnrealizedOpenCredit(eventHandlerResult);
        Debug::assert(eventHandlerResult.hasResult());
        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>