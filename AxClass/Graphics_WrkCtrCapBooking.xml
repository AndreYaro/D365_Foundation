<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Graphics_WrkCtrCapBooking</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class Graphics_WrkCtrCapBooking extends Graphics_Period
{
    WrkCtrGroupWrkCtr       groupWrkCtr;
    PercentHours            percentHours;
    ReqPlanId               reqPlanId;
    WrkCtrGroupId           fromGroup;
    WrkCtrGroupId           toGroup;
    WrkCtrId                fromNum;
    WrkCtrId                toNum;
    NoYes                   showCapacity;
    NoYes                   incJobSched;
    NoYes                   incOprSched;
    NoYes                   incPO;
    NoYes                   incProd;
    NoYes                   incProj;
    NoYes                   sumUp;
    NoYes                   sumWrkCtr;
    Object                  baseGraphForm;
    WrkCtrCapacitySum       xWrkCtrCapacitySum;
    ProdUnitId              prodUnitId;

    container               keyValues;
    container               keyNames;
    boolean                 mayBeExecuted;

    #DEFINE.UnDefinedDateOffset(20)
    #DEFINE.CurrentVersion(11)

    #LOCALMACRO.CurrentList
        GroupWrkCtr,
        PercentHours,
        ReqPlanId,
        FromGroup,
        ToGroup,
        FromNum,
        ToNum,
        ShowCapacity,
        incJobSched,
        incOprSched,
        incPO,
        incProd,
        incProj,
        SumUp,
        sumWrkCtr,
        ProdUnitId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>baseGraphForm</Name>
				<Source><![CDATA[
    Object baseGraphForm(Object _baseGraphForm = baseGraphForm)
    {
        baseGraphForm = _baseGraphForm;
        return baseGraphForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaFromDate</Name>
				<Source><![CDATA[
    TransDate criteriaFromDate(TransDate _fromDate= fromDate)
    {
        fromDate  = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaFromGroup</Name>
				<Source><![CDATA[
    WrkCtrGroupId criteriaFromGroup(WrkCtrGroupId _fromGroup = fromGroup)
    {
        if (_fromGroup != fromGroup)
        {
            fromGroup   = _fromGroup;
        }
        return fromGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaFromWrkCtr</Name>
				<Source><![CDATA[
    WrkCtrId criteriaFromWrkCtr(WrkCtrId _fromNum= fromNum)
    {
        if (_fromNum != fromNum)
        {
            fromNum = _fromNum;
        }
        return fromNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaIncJobSched</Name>
				<Source><![CDATA[
    NoYes criteriaIncJobSched(NoYes _incJobSched = incJobSched)
    {
        incJobSched= _incJobSched;
        return incJobSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaIncOprSched</Name>
				<Source><![CDATA[
    NoYes criteriaIncOprSched(NoYes _incOprSched = incOprSched)
    {
        incOprSched = _incOprSched;
        return incOprSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaIncPO</Name>
				<Source><![CDATA[
    NoYes criteriaIncPO(NoYes _incPO = incPO)
    {
        incPO = _incPO;
        return incPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaIncProd</Name>
				<Source><![CDATA[
    NoYes criteriaIncProd(NoYes _incProd = incProd)
    {
        incProd = _incProd;
        return incProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaIncProj</Name>
				<Source><![CDATA[
    NoYes criteriaIncProj(NoYes _incProj = incProj)
    {
        incProj = _incProj;
        return incProj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaPercentHours</Name>
				<Source><![CDATA[
    PercentHours criteriaPercentHours(PercentHours _percentHours = percentHours)
    {
        if (_percentHours != percentHours)
        {
            percentHours = _percentHours;
        }
        return percentHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaPeriodX</Name>
				<Source><![CDATA[
    GraphicsDateDim criteriaPeriodX(GraphicsDateDim _periodX  = periodX)
    {
        periodX  = _periodX;
        return periodX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaProdUnitId</Name>
				<Source><![CDATA[
    ProdUnitId criteriaProdUnitId(ProdUnitId _prodUnitId = prodUnitId)
    {
        prodUnitId = _prodUnitId;

        return prodUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaReqPlan</Name>
				<Source><![CDATA[
    ReqPlanId criteriaReqPlan(ReqPlanId _reqPlanId = reqPlanId)
    {
        reqPlanId = _reqPlanId;

        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaShowCapacity</Name>
				<Source><![CDATA[
    NoYes criteriaShowCapacity(NoYes _showCapacity = showCapacity)
    {
        showCapacity = _showCapacity;
        return showCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaSumUp</Name>
				<Source><![CDATA[
    NoYes criteriaSumUp(NoYes _sumUp     = sumUp)
    {
        sumUp = _sumUp;
        return sumUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaSumWrkCtr</Name>
				<Source><![CDATA[
    NoYes criteriaSumWrkCtr(NoYes _sumWrkCtr     = sumWrkCtr)
    {
        sumWrkCtr = _sumWrkCtr;
        return sumWrkCtr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaToDate</Name>
				<Source><![CDATA[
    TransDate criteriaToDate(TransDate _toDate  = toDate)
    {
        toDate    = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaToGroup</Name>
				<Source><![CDATA[
    WrkCtrGroupId criteriaToGroup(WrkCtrGroupId _toGroup   = toGroup)
    {
        if (_toGroup   != toGroup)
        {
            toGroup     = _toGroup;
        }
        return toGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaToWrkCtr</Name>
				<Source><![CDATA[
    WrkCtrId criteriaToWrkCtr(WrkCtrId _toNum = toNum)
    {
        if (_toNum != toNum)
        {
            toNum   = _toNum;
        }
        return toNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaWrkCtrGroup</Name>
				<Source><![CDATA[
    WrkCtrGroupWrkCtr criteriaWrkCtrGroup(WrkCtrGroupWrkCtr     _groupWrkCtr     = groupWrkCtr)
    {
        if (_groupWrkCtr     != groupWrkCtr)
        {
            groupWrkCtr     = _groupWrkCtr;
        }

        return groupWrkCtr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        Args        args;
        FormRun     formGraphicsDialog;

        args = new Args();
        args.name(formstr(WrkCtrCapResGraphDialog));
        args.caller(this);

        mayBeExecuted= false;

        formGraphicsDialog = classfactory.formRunClass(args);
        formGraphicsDialog.init();
        return formGraphicsDialog as Object;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <see cref="M:RunBase.unpack" /> method returns false, the <see
    ///    cref="M:RunBase.initParmDefault" /> method is called. This method should not be overridden.
    /// </remarks>
    final public void getLast()
    {
        super();

        fromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        toDate   = toDate < fromDate ? fromDate : toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCap</Name>
				<Source><![CDATA[
    container insertCap(WrkCtrTable wrkCtrTable,
                        TransDate   capDate)
    {
        TempStr     keyValue  = '';
        TempStr     keyName   = '';
        Integer     contIdx   = 0;
        container   result;

        if (sumWrkCtr)
        {
            keyName = "@SYS8345";
        }
        else if (showCapacity)
        {
            keyValue = wrkCtrTable.WrkCtrId;
            keyName  = strfmt("@SYS26868",wrkCtrTable.WrkCtrId,"@SYS8345");
        }

        if (keyName)
        {
            contIdx = confind(keyNames,keyName);
            if (!contIdx)
            {
                keyNames  += keyName;
                keyValues += keyValue;
            }
            if (xWrkCtrCapacitySum.find(wrkCtrTable.WrkCtrId,capDate))
                result += [date2str(capDate,-1,-1,-1,-1,-1,-1, DateFlags::None),keyName,xWrkCtrCapacitySum.rec_Capacity()/3600, keyValue];
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLoad</Name>
				<Source><![CDATA[
    container insertLoad(WrkCtrCapRes _wrkCtrCapRes, WrkCtrResourceGroup _wrkCtrResourceGroup)
    {
        TempStr     keyValue  = '';
        TempStr     keyName   = '';

        if (groupWrkCtr == WrkCtrGroupWrkCtr::WrkCtrGroup)
        {
            keyValue = _wrkCtrResourceGroup.WrkCtrId;
            keyName = this.wrkCtrKeyName(_wrkCtrCapRes, _wrkCtrResourceGroup.WrkCtrId);
        }
        else if (groupWrkCtr == WrkCtrGroupWrkCtr::WrkCtr)
        {
            keyValue = _wrkCtrCapRes.WrkCtrId;
            keyName = this.wrkCtrKeyName(_wrkCtrCapRes);
        }

        container result;
        
        if (keyName)
        {
            Integer contIdx = confind(keyNames,keyName);
            if (!contIdx)
            {
                keyNames  += keyName;
                keyValues += keyValue;
            }

            result += [date2str(_wrkCtrCapRes.TransDate,-1,-1,-1,-1,-1,-1, DateFlags::None),keyName,(_wrkCtrCapRes.WrkCtrSec / 3600), keyValue];
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrKeyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns key name to be used for the load.
    /// </summary>
    /// <param name = "_wrkCtrCapRes">The resource capacity reservation.</param>
    /// <param name = "_wrkCtrId">The resource record ID.</param>
    /// <returns>The key name to be used for the load.</returns>
    protected TempStr wrkCtrKeyName(WrkCtrCapRes _wrkCtrCapRes,  WrkCtrId _wrkCtrId = _wrkCtrCapRes.WrkCtrId)
    {
        switch (_wrkCtrCapRes.RefType)
        {
            case WrkCtrCapRefType::PlannedOrder:
                if(this.shouldBuildPlannedOrderWrkCtrCapResKeyName(_wrkCtrCapRes))
                {
                    return this.buildWrkCtrGroupKeyName("@SYS53282", "@SYS8597", _wrkCtrId);
                }
                break;

            case WrkCtrCapRefType::Production:
                if(this.shouldBuildProductionOrderWrkCtrCapResKeyName(_wrkCtrCapRes))
                {
                    return this.buildWrkCtrGroupKeyName("@SYS9747", "@SYS4398", _wrkCtrId);
                }
                break;

            case WrkCtrCapRefType::Project:
                if(this.shouldBuildProjectOrderWrkCtrCapResKeyName(_wrkCtrCapRes))
                {
                    return this.buildWrkCtrGroupKeyName("@SYS50498", "@SYS50498", _wrkCtrId);
                }
                break;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBuildPlannedOrderWrkCtrCapResKeyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the key name should be built for resource capacity reservations referencing planned orders.
    /// </summary>
    /// <param name = "_wrkCtrCapRes">The resource capacity reservation.</param>
    /// <returns>true if the key name should be built for resource capacity reservations referencing planned orders; otherwise, false.</returns>
    private boolean shouldBuildPlannedOrderWrkCtrCapResKeyName(WrkCtrCapRes _wrkCtrCapRes)
    {
        return incPO && (_wrkCtrCapRes.LoadType  == WrkCtrCapacityType::OperationSched   && incOprSched) ||
                        (_wrkCtrCapRes.LoadType  == WrkCtrCapacityType::JobSched         && incJobSched);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBuildProductionOrderWrkCtrCapResKeyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the key name should be built for resource capacity reservations referencing production orders.
    /// </summary>
    /// <param name = "_wrkCtrCapRes">The resource capacity reservation.</param>
    /// <returns>true if the key name should be built for resource capacity reservations referencing production orders; otherwise, false.</returns>
    private boolean shouldBuildProductionOrderWrkCtrCapResKeyName(WrkCtrCapRes _wrkCtrCapRes)
    {
        return incProd && (_wrkCtrCapRes.LoadType  == WrkCtrCapacityType::OperationSched   && incOprSched) ||
                          (_wrkCtrCapRes.LoadType  == WrkCtrCapacityType::JobSched         && incJobSched);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBuildProjectOrderWrkCtrCapResKeyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the key name should be built for resource capacity reservations referencing project orders.
    /// </summary>
    /// <param name = "_wrkCtrCapRes">The resource capacity reservation.</param>
    /// <returns>true if the key name should be built for resource capacity reservations referencing project orders; otherwise, false.</returns>
    private boolean shouldBuildProjectOrderWrkCtrCapResKeyName(WrkCtrCapRes _wrkCtrCapRes)
    {
        return incProj && (_wrkCtrCapRes.LoadType  == WrkCtrCapacityType::OperationSched   && incOprSched) ||
                          (_wrkCtrCapRes.LoadType  == WrkCtrCapacityType::JobSched         && incJobSched);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWrkCtrGroupKeyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the key name based on the passed parameters.
    /// </summary>
    /// <param name = "_orderTypePlural">The type of the order in plural form.</param>
    /// <param name = "_orderTypeSingular">The type of the order in singular form.</param>
    /// <param name = "_wrkCtrId">The resource record ID.</param>
    /// <returns>The built key name.</returns>
    protected TempStr buildWrkCtrGroupKeyName(str _orderTypePlural, str _orderTypeSingular , WrkCtrId _wrkCtrId)
    {
        return sumWrkCtr ? (sumUp ? "@SYS15961"
                                        : _orderTypePlural)
                            : (sumUp ? _wrkCtrId
                                        : strfmt("@SYS26868", _wrkCtrId, _orderTypeSingular));
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadGroupCap</Name>
				<Source><![CDATA[
    container loadGroupCap(date _fromDate, date _toDate)
    {
        WrkCtrResourceGroup     wrkCtrResourceGroup;
        WrkCtrTable             wrkCtrTableGroup;
        date                    tmpDateFrom;
        date                    tmpDateTo;
        date                    incrDate;
        container               res;

        if (!showCapacity)
        {
            return res;
        }

        tmpDateFrom = _fromDate ? _fromDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        tmpDateTo   = _toDate   ? _toDate   : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + #UnDefinedDateOffset;

        while select wrkCtrTableGroup
            exists join wrkCtrResourceGroup
            where wrkCtrTableGroup.WrkCtrId == wrkCtrResourceGroup.WrkCtrId &&
                  (wrkCtrResourceGroup.WrkCtrId    >= fromGroup    || !fromGroup)   &&
                  (wrkCtrResourceGroup.WrkCtrId    <= toGroup      || !toGroup)     &&
                  (wrkCtrResourceGroup.ProdUnitId  == prodUnitId   || !prodUnitId)
        {
            incrDate = tmpDateFrom;
            while (incrDate <= tmpDateTo)
            {
                res += [this.insertCap(wrkCtrTableGroup,incrDate)];
                incrDate += 1;
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLoadReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether reservations should be loaded.
    /// </summary>
    /// <returns>true if the reservations should be loaded.; otherwise, false.</returns>
    protected boolean shouldLoadReservations()
    {
        return (incProd || incProj || incPO) && (incOprSched || incJobSched);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLoadGroupReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether group reservations should be loaded.
    /// </summary>
    /// <returns>true if the group reservations should be loaded.; otherwise, false.</returns>
    protected boolean shouldLoadGroupReservations()
    {
        return this.shouldLoadReservations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWrkCtrCapResWrkCtrIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range for the WrkCtrId field in the <c>WrkCtrCapRes</c> table.
    /// </summary>
    /// <param name = "_query">The <c>Query</c> object for adding the range.</param>
    protected void addWrkCtrCapResWrkCtrIdRange(Query _query)
    {
        if (fromGroup && toGroup)
        {
            _query.dataSourceTable(tableNum(WrkCtrCapRes)).addRange(fieldNum(WrkCtrCapRes, WrkCtrId)).value(queryRange(fromGroup, toGroup));
        }
        else
        {
            if (fromGroup)
            {
                _query.dataSourceTable(tableNum(WrkCtrCapRes)).addRange(fieldNum(WrkCtrCapRes, WrkCtrId)).value(queryRange(fromGroup, null));
            }

            if (toGroup)
            {
                _query.dataSourceTable(tableNum(WrkCtrCapRes)).addRange(fieldNum(WrkCtrCapRes, WrkCtrId)).value(queryRange(null, toGroup));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLoadResourceGroupReservationsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to load the reservations made directly on the resource group.
    /// </summary>
    /// <returns>The query used to load the reservations made directly on the resource group.</returns>
    protected Query buildLoadResourceGroupReservationsQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsWrkCtrCapRes = query.addDataSource(tableNum(WrkCtrCapRes));
        qbdsWrkCtrCapRes.orderMode(OrderMode::OrderBy);
        qbdsWrkCtrCapRes.addOrderByField(fieldNum(WrkCtrCapRes, RefType), SortOrder::Descending);
        qbdsWrkCtrCapRes.addOrderByField(fieldNum(WrkCtrCapRes, WrkCtrId));

        this.addWrkCtrCapResWrkCtrIdRange(query);

        this.addWrkCtrCapResTransDateRange(query);

        this.addWrkCtrCapResLoadTypeRange(query);
        
        this.addWrkCtrCapResRefTypeRange(query);

        QueryBuildDataSource qbdsWrkCtrResourceGroup = qbdsWrkCtrCapRes.addDataSource(tableNum(WrkCtrResourceGroup));
        qbdsWrkCtrResourceGroup.addLink(fieldNum(WrkCtrCapRes, WrkCtrId), fieldNum(WrkCtrResourceGroup, WrkCtrId));

        this.addWrkCtrResourceGroupProdUnitIdRange(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWrkCtrResourceGroupWrkCtrIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range for the WrkCtrId field in the <c>WrkCtrResourceGroup</c> table.
    /// </summary>
    /// <param name = "_query">The <c>Query</c> object for adding the range.</param>
    protected void addWrkCtrResourceGroupWrkCtrIdRange(Query _query)
    {
        if (fromGroup && toGroup)
        {
            _query.dataSourceTable(tableNum(WrkCtrResourceGroup)).addRange(fieldNum(WrkCtrResourceGroup, WrkCtrId)).value(queryRange(fromGroup, toGroup));
        }
        else
        {
            if (fromGroup)
            {
                _query.dataSourceTable(tableNum(WrkCtrResourceGroup)).addRange(fieldNum(WrkCtrResourceGroup, WrkCtrId)).value(queryRange(fromGroup, null));
            }

            if (toGroup)
            {
                _query.dataSourceTable(tableNum(WrkCtrResourceGroup)).addRange(fieldNum(WrkCtrResourceGroup, WrkCtrId)).value(queryRange(null, toGroup));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWrkCtrResourceGroupResourceValidityRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range for the ValidFrom and ValidTo fields in the <c>WrkCtrResourceGroupResource</c> table.
    /// </summary>
    /// <param name = "_query">The <c>Query</c> object for adding the range.</param>
    protected void addWrkCtrResourceGroupResourceValidityRange(Query _query)
    {
        _query.dataSourceTable(tableNum(WrkCtrResourceGroupResource)).addRange(fieldNum(WrkCtrResourceGroup, RecId))
            .value(strfmt('(%1.%2 >= %3.%4) && (%1.%2 <= %3.%5)',
                    _query.dataSourceTable(tableNum(WrkCtrCapRes)).name(),
                    fieldStr(WrkCtrCapRes, TransDate),
                    _query.dataSourceTable(tableNum(WrkCtrResourceGroupResource)).name(),
                    fieldStr(WrkCtrResourceGroupResource, ValidFrom),
                    fieldStr(WrkCtrResourceGroupResource, ValidTo)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLoadResourceReservationsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to load reservations made on the individual resources of the group (only for resource groups from the current company).
    /// </summary>
    /// <param name = "_fromDate">The start date for the valid records.</param>
    /// <param name = "_toDate">The end date for the valid records.</param>
    /// <returns>The query used to load reservations made on the individual resources of the group (only for resource groups from the current company).</returns>
    protected Query buildLoadResourceReservationsQuery(date _fromDate, date _toDate)
    {
        Query query = new Query();
        query.validTimeStateDateRange(_fromDate, _toDate);
        QueryBuildDataSource qbdsWrkCtrResourceGroupResource = query.addDataSource(tableNum(WrkCtrResourceGroupResource));

        QueryBuildDataSource qbdsWrkCtrResourceGroup = qbdsWrkCtrResourceGroupResource.addDataSource(tableNum(WrkCtrResourceGroup));
        qbdsWrkCtrResourceGroup.addLink(fieldNum(WrkCtrResourceGroupResource, ResourceGroup), fieldNum(WrkCtrResourceGroup, RecId));
        qbdsWrkCtrResourceGroup.fetchMode(QueryFetchMode::One2One);

        this.addWrkCtrResourceGroupWrkCtrIdRange(query);
        
        this.addWrkCtrResourceGroupProdUnitIdRange(query);

        QueryBuildDataSource qbdsWrkCtrCapRes = qbdsWrkCtrResourceGroupResource.addDataSource(tableNum(WrkCtrCapRes));
        qbdsWrkCtrCapRes.fetchMode(QueryFetchMode::One2One);
        qbdsWrkCtrCapRes.orderMode(OrderMode::OrderBy);
        qbdsWrkCtrCapRes.addOrderByField(fieldNum(WrkCtrCapRes, RefType), SortOrder::Descending);
        qbdsWrkCtrCapRes.addOrderByField(fieldNum(WrkCtrCapRes, WrkCtrId));
        qbdsWrkCtrCapRes.addLink(fieldNum(WrkCtrCapRes, WrkCtrId), fieldNum(WrkCtrResourceGroupResource, WrkCtrId));
        
        this.addWrkCtrResourceGroupResourceValidityRange(query);

        this.addWrkCtrCapResTransDateRange(query);

        this.addWrkCtrCapResLoadTypeRange(query);
        
        this.addWrkCtrCapResRefTypeRange(query);
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadGroupReservations</Name>
				<Source><![CDATA[
    container loadGroupReservations(date _fromDate, date _toDate)
    {
        WrkCtrCapRes                wrkCtrCapRes;
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        container           res;

        ReqPlanVersion  reqPlanVersionActive = ReqPlan::findReqPlanId(reqPlanId).findActiveVersion();

        if (this.shouldLoadGroupReservations())
        {
            //Select reservations made directly on the resource group
            Query query = this.buildLoadResourceGroupReservationsQuery();
            QueryRun queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                wrkCtrCapRes = queryRun.get(tablenum(WrkCtrCapRes));
                wrkCtrResourceGroup = queryRun.get(tablenum(WrkCtrResourceGroup));
                res += [this.insertLoad(wrkCtrCapRes, wrkCtrResourceGroup)];
            }

            //Select reservations made on the individual resources of the group (only for resource groups from the current company)
            query = this.buildLoadResourceReservationsQuery(_fromDate, _toDate);
            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                wrkCtrCapRes = queryRun.get(tablenum(WrkCtrCapRes));
                wrkCtrResourceGroup = queryRun.get(tablenum(WrkCtrResourceGroup));
                res += [this.insertLoad(wrkCtrCapRes, wrkCtrResourceGroup)];
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadNumCap</Name>
				<Source><![CDATA[
    container loadNumCap(date _fromDate, date _toDate)
    {
        WrkCtrTable                 prodWrkCtrTableRes;
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        date                        tmpDateFrom;
        date                        tmpDateTo;
        date                        incrDate;
        container                   res;

        if (!showCapacity)
        {
            return res;
        }

        tmpDateFrom = _fromDate ? _fromDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        tmpDateTo   = _toDate   ? _toDate   : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + #UnDefinedDateOffset;

        while select validtimestate(tmpDateFrom, tmpDateTo) ValidFrom, ValidTo from wrkCtrResourceGroupResource
            order by WrkCtrId, ValidFrom, ValidTo
            join prodWrkCtrTableRes
            exists join wrkCtrResourceGroup
            where wrkCtrResourceGroupResource.WrkCtrId           == prodWrkCtrTableRes.WrkCtrId                 &&
                  wrkCtrResourceGroup.RecId                      == wrkCtrResourceGroupResource.ResourceGroup   &&
                  prodWrkCtrTableRes.IsIndividualResource        == NoYes::Yes                                  &&
                 (prodWrkCtrTableRes.WrkCtrId                    >= fromNum    || !fromNum)                     &&
                 (prodWrkCtrTableRes.WrkCtrId                    <= toNum      || !toNum)                       &&
                 (wrkCtrResourceGroup.ProdUnitId                 == prodUnitId || !prodUnitId)
        {
            incrDate = max(tmpDateFrom, wrkCtrResourceGroupResource.ValidFrom);
            while (incrDate <= min(tmpDateTo, wrkCtrResourceGroupResource.ValidTo))
            {
                res += [this.insertCap(prodWrkCtrTableRes,incrDate)];
                incrDate += 1;
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLoadNumReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether number reservations should be loaded.
    /// </summary>
    /// <returns>true if the number reservations should be loaded.; otherwise, false.</returns>
    protected boolean shouldLoadNumReservations()
    {
        return this.shouldLoadReservations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadNumReservations</Name>
				<Source><![CDATA[
    container loadNumReservations(date _fromDate, date _toDate)
    {
        WrkCtrCapRes                wrkCtrCapRes;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        container                   res;

        ReqPlanVersion  reqPlanVersionActive = ReqPlan::findReqPlanId(reqPlanId).findActiveVersion();

        if (this.shouldLoadNumReservations())
        {
            Query query = this.buildLoadNumReservationsQuery(_fromDate, _toDate);
            QueryRun queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                wrkCtrCapRes = queryRun.get(tablenum(WrkCtrCapRes));
                wrkCtrResourceGroup = queryRun.get(tablenum(WrkCtrResourceGroup));
                res += [this.insertLoad(wrkCtrCapRes, wrkCtrResourceGroup)];
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWrkCtrCapResTransDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range for the TransDate field in the <c>WrkCtrCapRes</c> table.
    /// </summary>
    /// <param name = "_query">The <c>Query</c> object for adding the range.</param>
    protected void addWrkCtrCapResTransDateRange(Query _query)
    {
        if(FromDate && toDate)
        {
            _query.dataSourceTable(tableNum(WrkCtrCapRes)).addRange(fieldNum(WrkCtrCapRes, TransDate)).value(queryRange(fromDate, toDate));
        }
        else
        {
            if (fromDate)
            {
                _query.dataSourceTable(tableNum(WrkCtrCapRes)).addRange(fieldNum(WrkCtrCapRes, TransDate)).value(queryRange(fromDate, dateNull()));
            }

            if (toDate)
            {
                _query.dataSourceTable(tableNum(WrkCtrCapRes)).addRange(fieldNum(WrkCtrCapRes, TransDate)).value(queryRange(dateNull(), toDate));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWrkCtrCapResLoadTypeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range for the LoadType field in the <c>WrkCtrCapRes</c> table.
    /// </summary>
    /// <param name = "_query">The <c>Query</c> object for adding the range.</param>
    protected void addWrkCtrCapResLoadTypeRange(Query _query)
    {
        WrkCtrCapResQueryBuildHelper::addLoadTypeRange(_query, _query.dataSourceTable(tableNum(WrkCtrCapRes)), incJobSched, incOprSched);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWrkCtrCapResRefTypeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range for the RefType field in the <c>WrkCtrCapRes</c> table.
    /// </summary>
    /// <param name = "_query">The <c>Query</c> object for adding the range.</param>
    protected void addWrkCtrCapResRefTypeRange(Query _query)
    {
        ReqPlanVersion  reqPlanVersionActive = ReqPlan::findReqPlanId(reqPlanId).findActiveVersion();
        QueryBuildDataSource qbdsWrkCtrCapRes = _query.dataSourceTable(tableNum(WrkCtrCapRes));
        str refTypeQueryRangeStr = WrkCtrCapResQueryBuildHelper::buildRefTypeRange(_query, qbdsWrkCtrCapRes, reqPlanVersionActive.RecId, incProd, incProj, incPO);
        
        if (refTypeQueryRangeStr != '')
        {
            qbdsWrkCtrCapRes.addRange(fieldNum(WrkCtrCapRes, RefType)).value(refTypeQueryRangeStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWrkCtrResourceGroupProdUnitIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range for the ProdUnitId field in the <c>WrkCtrResourceGroup</c> table.
    /// </summary>
    /// <param name = "_query">The <c>Query</c> object for adding the range.</param>
    protected void addWrkCtrResourceGroupProdUnitIdRange(Query _query)
    {
        if (prodUnitId)
        {
            _query.dataSourceTable(tableNum(WrkCtrResourceGroup)).addRange(fieldNum(WrkCtrResourceGroup, ProdUnitId)).value(queryValue(prodUnitId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNumWrkCtrCapResWrkCtrIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range for the WrkCtrId field in the <c>WrkCtrCapRes</c> table in the number reservation query.
    /// </summary>
    /// <param name = "_query">The <c>Query</c> object for adding the range.</param>
    protected void addNumWrkCtrCapResWrkCtrIdRange(Query _query)
    {
        if (fromNum && toNum)
        {
            _query.dataSourceTable(tableNum(WrkCtrCapRes)).addRange(fieldNum(WrkCtrCapRes, WrkCtrId)).value(queryRange(fromNum, toNum));
        }
        else
        {
            if (fromNum)
            {
                _query.dataSourceTable(tableNum(WrkCtrCapRes)).addRange(fieldNum(WrkCtrCapRes, WrkCtrId)).value(queryRange(fromNum, null));
            }

            if (toNum)
            {
                _query.dataSourceTable(tableNum(WrkCtrCapRes)).addRange(fieldNum(WrkCtrCapRes, WrkCtrId)).value(queryRange(null, toNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLoadNumReservationsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to load number reservations.
    /// </summary>
    /// <param name = "_fromDate">The start date for the valid records.</param>
    /// <param name = "_toDate">The end date for the valid records.</param>
    /// <returns>The query used to load number reservations.</returns>
    protected Query buildLoadNumReservationsQuery(date _fromDate, date _toDate)
    {
        Query query = new Query();
        query.validTimeStateDateRange(_fromDate, _toDate);
        QueryBuildDataSource qbdsWrkCtrCapRes = query.addDataSource(tableNum(WrkCtrCapRes));
        qbdsWrkCtrCapRes.orderMode(OrderMode::OrderBy);
        qbdsWrkCtrCapRes.addOrderByField(fieldNum(WrkCtrCapRes, RefType), SortOrder::Descending);
        qbdsWrkCtrCapRes.addOrderByField(fieldNum(WrkCtrCapRes, WrkCtrId));

        QueryBuildDataSource qbdsWrkCtrResourceGroupResource = qbdsWrkCtrCapRes.addDataSource(tableNum(WrkCtrResourceGroupResource));
        qbdsWrkCtrResourceGroupResource.joinMode(JoinMode::ExistsJoin);
        qbdsWrkCtrResourceGroupResource.addLink(fieldNum(WrkCtrResourceGroupResource, WrkCtrId), fieldNum(WrkCtrCapRes, WrkCtrId));
        
        this.addWrkCtrResourceGroupResourceValidityRange(query);

        this.addNumWrkCtrCapResWrkCtrIdRange(query);

        this.addWrkCtrCapResTransDateRange(query);

        this.addWrkCtrCapResLoadTypeRange(query);

        this.addWrkCtrCapResRefTypeRange(query);

        QueryBuildDataSource qbdsWrkCtrResourceGroup = qbdsWrkCtrCapRes.addDataSource(tableNum(WrkCtrResourceGroup));
        qbdsWrkCtrResourceGroup.addLink(fieldNum(WrkCtrResourceGroupResource, ResourceGroup), fieldNum(WrkCtrResourceGroup, RecId));

        this.addWrkCtrResourceGroupProdUnitIdRange(query);
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setData</Name>
				<Source><![CDATA[
    void setData(container _con)
    {
        int         i;
        container   tmpcon;
        TempStr     x;
        TempStr     z;
        RealBase    y;
        TempStr     keyValue  = '';
        TempStr     keyName   = '';
        int         contidx;

        // unpack the wrkctr capacity data that was sent from server
        for (i = 1; i <= conlen(_con); i ++)
        {
            tmpcon = conpeek(_con, i);
            [x, z, y, keyValue] = tmpcon;
            keyName = z;
            contIdx = confind(keyNames,keyName);
            if (!contIdx)
            {
                keyNames  += keyName;
                keyValues += keyValue;
            }
            this.loadData(x, z, y);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExecute</Name>
				<Source><![CDATA[
    void setExecute(boolean _mayExecute     = false)
    {
        mayBeExecuted = _mayExecute;

        if (mayBeExecuted)
        {
            if (graphicsOn)
                this.resetGraph();

            if (graphicsOn)
                this.showGraph();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setup</Name>
				<Source><![CDATA[
    void setup()
    {
        if (this.graphicsOn())
        {
            this.prompt();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showGraph</Name>
				<Source><![CDATA[
    void showGraph()
    {
        if (!mayBeExecuted)
        {
            return;
        }

        this.saveLast();

        if (groupWrkCtr == WrkCtrGroupWrkCtr::WrkCtrGroup)
        {
            this.setData(Graphics_WrkCtrCapBooking::loadGroupReservationsServer(this.pack()));
            this.setData(Graphics_WrkCtrCapBooking::loadGroupCapServer(this.pack()));
        }
        else
        {
            this.setData(Graphics_WrkCtrCapBooking::loadNumReservationsServer(this.pack()));
            this.setData(Graphics_WrkCtrCapBooking::loadNumCapServer(this.pack()));
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>titleYaxis</Name>
				<Source><![CDATA[
    TempStr titleYaxis()
    {
        if (percentHours == PercentHours::Percent)
        {
            return "@SYS23414";
        }
        return "@SYS24403";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version    = conpeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base] = packedClass;
                return super(base);

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrCapacitySum</Name>
				<Source><![CDATA[
    WrkCtrCapacitySum wrkCtrCapacitySum(WrkCtrCapacitySum _wrkCtrCapacitySum = xWrkCtrCapacitySum)
    {
        xWrkCtrCapacitySum = _wrkCtrCapacitySum;
        return xWrkCtrCapacitySum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>yValueAdjustment</Name>
				<Source><![CDATA[
    container yValueAdjustment(container    _dates,
                               container    _yValues,
                               Integer      _seriesIdx
                             )
    {
        WrkCtrTable         wrkCtrTable;
        WrkCtrResourceGroup wrkCtrResourceGroup;
        TransDate           capStart;
        TransDate           capEnd;
        TempStr             tmpStr;
        CapacityValue       sumCapacity;
        container           tmpYValues      = _yValues;
        Integer             i               = 1;
        Integer             tmpIdx;
        date                incrDate;

        if (percentHours == PercentHours::Hours)
        {
            return _yValues;
        }

        tmpStr = graphDataZ[_seriesIdx];
        tmpIdx = confind(keyNames, tmpStr);
        tmpStr = conpeek(keyValues, tmpIdx);

        while (i <= conlen(_dates))
        {
            if (conpeek(_dates,i))
            {
                sumCapacity     = 0;

                if (conpeek(conpeek(_dates,i),1))
                {
                    capStart = this.startColumnDate(conpeek(conpeek(_dates,i),1),periodX);
                    capStart = fromDate > capStart ? fromDate: capStart;

                    capEnd   = this.endColumnDate(conpeek(conpeek(_dates,i),1),periodX);
                    capEnd   = toDate  < capEnd  ? toDate  : capEnd;

                    incrDate = capStart;
                    while (incrDate <= capEnd)
                    {
                        if (sumWrkCtr)
                        {
                            if (groupWrkCtr == WrkCtrGroupWrkCtr::WrkCtrGroup)
                            {
                                //Select resource groups from the current company
                                while select WrkCtrId from wrkCtrResourceGroup
                                    where (wrkCtrResourceGroup.WrkCtrId           >= fromGroup    || !fromGroup)    &&
                                          (wrkCtrResourceGroup.WrkCtrId           <= toGroup      || !toGroup)
                                {
                                    if (xWrkCtrCapacitySum.find(wrkCtrResourceGroup.WrkCtrId,incrDate))
                                        sumCapacity  += xWrkCtrCapacitySum.rec_Capacity();
                                }
                            }
                            else
                            {
                                while select IsIndividualResource, WrkCtrId from wrkCtrTable
                                    where  wrkCtrTable.IsIndividualResource == NoYes::Yes       &&
                                          (wrkCtrTable.WrkCtrId    >= fromNum    || !fromNum)   &&
                                          (wrkCtrTable.WrkCtrId    <= toNum      || !toNum)
                                {
                                    if (xWrkCtrCapacitySum.find(wrkCtrTable.WrkCtrId,incrDate))
                                        sumCapacity  += xWrkCtrCapacitySum.rec_Capacity();
                                }
                            }
                        }
                        else
                        {
                            if (xWrkCtrCapacitySum.find(tmpStr,incrDate))
                                sumCapacity  += xWrkCtrCapacitySum.rec_Capacity();
                        }
                        incrDate++;
                    }
                }
                if (sumCapacity)
                    tmpYValues  = conpoke(tmpYValues,i,(conpeek(_yValues,i)/(sumCapacity /3600) * 100));
                else
                    tmpYValues  = conpoke(tmpYValues,i,0);
            }
            i += 1;
        }
        return tmpYValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4816";
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadGroupCapServer</Name>
				<Source><![CDATA[
    static container loadGroupCapServer(container _con)
    {
        Graphics_WrkCtrCapBooking graphics_WrkCtrCapBooking;

        graphics_WrkCtrCapBooking = Graphics_WrkCtrCapBooking::newParams (_con);

        return graphics_WrkCtrCapBooking.loadGroupCap(graphics_WrkCtrCapBooking.parmFromDate(), graphics_WrkCtrCapBooking.parmtoDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadGroupReservationsServer</Name>
				<Source><![CDATA[
    static container loadGroupReservationsServer(container _con)
    {
        Graphics_WrkCtrCapBooking graphics_WrkCtrCapBooking;

        graphics_WrkCtrCapBooking = Graphics_WrkCtrCapBooking::newParams (_con);

        return graphics_WrkCtrCapBooking.loadGroupReservations(graphics_WrkCtrCapBooking.parmFromDate(), graphics_WrkCtrCapBooking.parmtoDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadNumCapServer</Name>
				<Source><![CDATA[
    static container loadNumCapServer(container _con)
    {
        Graphics_WrkCtrCapBooking graphics_WrkCtrCapBooking;

        graphics_WrkCtrCapBooking = Graphics_WrkCtrCapBooking::newParams (_con);

        return graphics_WrkCtrCapBooking.loadNumCap(graphics_WrkCtrCapBooking.parmFromDate(), graphics_WrkCtrCapBooking.parmtoDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadNumReservationsServer</Name>
				<Source><![CDATA[
    static container loadNumReservationsServer(container _con)
    {
        Graphics_WrkCtrCapBooking graphics_WrkCtrCapBooking;

        graphics_WrkCtrCapBooking = Graphics_WrkCtrCapBooking::newParams (_con);

        return graphics_WrkCtrCapBooking.loadNumReservations(graphics_WrkCtrCapBooking.parmFromDate(), graphics_WrkCtrCapBooking.parmtoDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGraphics</Name>
				<Source><![CDATA[
    static Graphics_WrkCtrCapBooking newGraphics(SysChart _sysChart,
                                                GraphicsTmpData _tmpDataSet
                                                )
    {
        Graphics_WrkCtrCapBooking    graphics;

        graphics = new Graphics_WrkCtrCapBooking();
        graphics.parmSysChart(_sysChart);
        graphics.parmTmpDataSet(_tmpDataSet);
        graphics.parmCreateType(#CT_LEGEND | #CT_3D | #CT_CLUSTER);
        graphics.create();
        graphics.parmTitle("@SYS24404");
        graphics.parmTitleXAxis("@SYS7402");

        return graphics;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParams</Name>
				<Source><![CDATA[
    static Graphics_WrkCtrCapBooking newParams(container _params)
    {
        Graphics_WrkCtrCapBooking   graphics;
        WrkCtrCapacitySum           wrkCtrCapacitySum;

        graphics = new Graphics_WrkCtrCapBooking();
        graphics.unpack(_params);
        wrkCtrCapacitySum = new WrkCtrCapacitySum(true);
        graphics.wrkCtrCapacitySum(wrkCtrCapacitySum);

        return graphics;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>