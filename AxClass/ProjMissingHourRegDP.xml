<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjMissingHourRegDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjMissingHourRegDP</c> class is the report data provider class for the
/// <c>ProjMissingHourReg</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjMissingHourReg)),
    SRSReportParameterAttribute(classStr(ProjMissingHourRegContract))
]
class ProjMissingHourRegDP extends SRSReportDataProviderPreProcessTempDB
{
    TmpProjMissingHourReg           tmpProjMissingHourReg;
    ResourceSetup                   resourceSetup;
    ProjPeriodLine                  projPeriodLine;
    TSTimesheetTable                tsTimesheetTable;
    ResourceLegalEntityView         resourceLegalEntity;
    DirPartyTable                   dirPartyTable;
    ProjParameters                  projParameters;
    ProjPeriodId                    periodId;
    ProjPeriodFrom                  periodFrom;
    ProjPeriodTo                    periodTo;
    QueryRun                        qrun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parameter values and assigns them to variables.
    /// </summary>
    private void getParameterValues()
    {
        ProjMissingHourRegContract contract = this.parmDataContract() as ProjMissingHourRegContract;

        periodId   = contract.parmPeriodId();
        periodFrom = contract.parmPeriodFrom();
        periodTo   = ProjPeriodLine::find(periodId, periodFrom).PeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpProjMissingHourReg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data table by querying the temporary table.
    /// </summary>
    /// <returns>
    /// The required report data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('TmpProjMissingHourReg')
    ]
    public TmpProjMissingHourReg getTmpProjMissingHourReg()
    {
        select tmpProjMissingHourReg;
        return tmpProjMissingHourReg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query ranges.
    /// </summary>
    void initQuery()
    {
        QueryBuildRange         rangeDataAreaId, rangePeriodId, rangePeriodFromTo;
        QueryBuildDataSource    qb_ProjPeriodTable, qb_ProjPeriodLine;
        Query                   query;

        query                 = qrun.query();
        qb_ProjPeriodTable    = query.dataSourceTable(tableNum(ProjPeriodTable));

        // Filter the data to the current company
        rangeDataAreaId = SysQuery::findOrCreateRange(qb_ProjPeriodTable, fieldNum(ProjPeriodTable, DataAreaId));
        rangeDataAreaId.value(queryValue(curext()));

        // Set the periodId to the parameter given
        if (periodId)
        {
            rangePeriodId = SysQuery::findOrCreateRange(qb_ProjPeriodTable, fieldNum(ProjPeriodTable, PeriodId));
            rangePeriodId.value(queryValue(periodId));
        }

        qb_ProjPeriodLine = query.dataSourceTable(tableNum(ProjPeriodLine));

        // Set the 'periodFrom' and 'periodTo' range based on the given parameter
        if (periodFrom)
        {
            rangePeriodFromTo = SysQuery::findOrCreateRange(qb_ProjPeriodLine, fieldNum(ProjPeriodLine,DataAreaId));

            // First condition is used to check if the given start date falls in between a period in the past.
            // Second condition is used for the periods whose from date is greater than the start date given
            // Conditions involving the ResourceLegalEntityView check if the worker is employed at least for a part in the period being considered.
            // There are three sub-conditions for this in the following order
            //   a. Employee has his 'End date' in the period but his 'Start date' was before the period
            //   b. Employee has his 'Start date' in the period but his 'End date' is after the period
            //   c. Employee has his 'Start date' before the period and 'End date' after the period.
            // Also the ranges are relaxed by 2 days at the two ends because the ResourceLegalEntityView dates are of UTCDateTime datatype where as the ProjPeriodLine dates are of 'date' type. As the queryRange
            // function does not have an inbuilt way to compare these taking timezones into consideration, we are making sure we get more records than necessary here and filter them later.
            rangePeriodFromTo.value(strFmt(@'(
                                                 (((%6.%7 <= %1) && (%6.%8 >= %1)) || ((%6.%7 >= %1) && (%6.%8 < %2))) &&
                                                 (((%3.%5 <= %6.%8+2) && (%3.%5 >= %6.%7-2)) ||
                                                  ((%3.%4 <= %6.%8+2) && (%3.%4 >= %6.%7-2)) ||
                                                  ((%3.%4 <= %6.%7+2) && (%3.%5 >= %6.%8-2)))
                                             )',
                                    date2StrXpp(periodFrom),
                                    date2StrXpp(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
                                    query.dataSourceTable(tableNum(ResourceLegalEntityView)).name(),
                                    fieldStr(ResourceLegalEntityView, ValidFrom),
                                    fieldStr(ResourceLegalEntityView, ValidTo),
                                    query.dataSourceTable(tableNum(ProjPeriodLine)).name(),
                                    fieldStr(ProjPeriodLine, PeriodFrom),
                                    fieldStr(ProjPeriodLine, PeriodTo)
                                   ));
        }

        // Adjust the validTimeStateRange to consider the workers who are active on or after the startDate given as parameter.
        query.validTimeStateDateTimeRange(DateTimeUtil::newDateTime(periodFrom,0,DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::newDateTime(dateMax(),0,DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAsMissingTimesheet</Name>
				<Source><![CDATA[
	protected boolean insertAsMissingTimesheet(TSAppStatus _ApprovalStatus)
    {
        boolean returnValue = false;

        if (_ApprovalStatus     == TSAppStatus::Pending
             || _ApprovalStatus == TSAppStatus::All
             || _ApprovalStatus == TSAppStatus::Create
             || _ApprovalStatus == TSAppStatus::Returned)
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpProjMissingHourReg</Name>
				<Source><![CDATA[
    /// <summary> Gets the required data and inserts it into the temporary table. </summary>
    /// <param name="_resourceSetup"> Table buffer for the <c>ResourceSetup</c> table </param>
    /// <param name="_projPeriodLine"> Table buffer for the <c>ProjPeriodLine</c> table </param>
    /// <param name="_tsTimesheetTable"> Table buffer for the <c>TSTimesheetTable</c> table </param>
    public void populateTmpProjMissingHourReg(ResourceSetup _resourceSetup, ProjPeriodLine _projPeriodLine, TSTimesheetTable _tsTimesheetTable)
    {
        if (!_resourceSetup.Resource)
        {
            return;
        }

        tmpProjMissingHourReg.clear();

        if (this.insertAsMissingTimesheet(_tsTimesheetTable.ApprovalStatus))
        {
            tmpProjMissingHourReg.initFrom(tsTimesheetTable, resourceSetup.Resource, projPeriodLine);
            tmpProjMissingHourReg.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by the SSRS
    /// at runtime. It computes data and populates the data tables that will be returned to the SSRS.
    /// </remarks>
    public void processReport()
    {
        this.getParameterValues();

        qrun = new QueryRun(this.parmQuery());

        this.initQuery();

        while (qrun.next())
        {
            resourceSetup            = qrun.get(tableNum(ResourceSetup));
            projPeriodLine           = qrun.get(tableNum(ProjPeriodLine));
            tsTimesheetTable         = qrun.get(tableNum(TSTimesheetTable));
            resourceLegalEntity      = qrun.get(tableNum(ResourceLegalEntityView));

            if (TmpProjMissingHourReg::resourceLegalEntityIsValidForPeriod(resourceLegalEntity, projPeriodLine.PeriodFrom, projPeriodLine.PeriodTo))
            {
                this.populateTmpProjMissingHourReg(resourceSetup, projPeriodLine, tsTimesheetTable);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>