<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchivingReverse_Init</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransArchivingReverse_Init</c> class reverse archived inventory transaction from previous archiving closed period.
/// </summary>
public class InventTransArchivingReverse_Init extends InventTransArchivingReverse implements BatchRetryable
{
    DialogGroup dlgGroupReverseArchivedTransactions;
    DialogField dialogFromDateReverse;
    DialogField dialogToDateReverse;

    TransDate fromDateReverse;
    TransDate toDateReverse;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fromDateReverse,
        toDateReverse
    #ENDMACRO
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        if (InventTransArchiveFeatureHelper::isFeatureEnabled())
        {
            dlgGroupReverseArchivedTransactions = dialog.addGroup("@SCM:ReverseArchivedTransV2");
            dialogFromDateReverse = dialog.addField(extendedTypeStr(TransDate), "@SYS312575");
            dialogToDateReverse  = dialog.addField(extendedTypeStr(TransDate), "@SYS312576");
        }
        else
        {
            dlgGroupReverseArchivedTransactions = dialog.addGroup("@SCM:ReverseArchivedTrans");
            dialogFromDateReverse = dialog.addField(extendedTypeStr(TransDate), "@SCM:FromDateInArchivedPeriod");
            dialogToDateReverse  = dialog.addField(extendedTypeStr(TransDate), "@SCM:ToDateInArchivedPeriod");
        }

        dialogFromDateReverse.value(fromDateReverse);
        dialogFromDateReverse.active(false);

        dialogToDateReverse.value(toDateReverse);
        dialogToDateReverse.active(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDateReverse</Name>
				<Source><![CDATA[
    public TransDate parmFromDateReverse(TransDate _fromDateReverse = fromDateReverse)
    {
        fromDateReverse = _fromDateReverse;
        return fromDateReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDateReverse</Name>
				<Source><![CDATA[
     public TransDate parmToDateReverse(TransDate _toDateReverse = toDateReverse)
    {
        toDateReverse = _toDateReverse;
        return toDateReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args args)
    {
        InventTransArchiveProcessHistoryTable reverseInventTransArchiveProcessHistoryTable;

        if (args && args.caller() && args.dataset() == tablenum(InventTransArchiveProcessHistoryTable))
        {
            reverseInventTransArchiveProcessHistoryTable = args.record();
        }

        if (!reverseInventTransArchiveProcessHistoryTable.RecId || !reverseInventTransArchiveProcessHistoryTable.Active)
        {
            throw Error("@SCM:ReverseArchivingRecordValidateFailedV2");
        }

        if (InventTransArchivingReverse::existsNotFinishedInventTransArchivingReverseJob(reverseInventTransArchiveProcessHistoryTable.RecId)
            || InventTransArchivingReverse::existsAnotherInventTransArchivingReverseJobRunning())
        {
            throw error("@SCM:AnotherTransArchivingReverseNotFinishedV2");
        }

        if (InventTransArchiveService::existsAnotherInventTransArchivingJobRunning())
        {
            throw error("@SCM:AnotherTransArchivingNotFinishedV2");
        }

        if (InventTransArchivingReverse::notExistsInventDimFromArchivedTrans(reverseInventTransArchiveProcessHistoryTable.SessionId))
        {
            throw error("@SCM:InventTransArchiveReverseInventDimIdAlreadyCleanedUpV2");
        }

        InventTransArchivingReverse_Init inventTransArchivingReverse = InventTransArchivingReverse_Init::newFromInventTransArchiveProceeTable(reverseInventTransArchiveProcessHistoryTable);

        if (!inventTransArchivingReverse.prompt())
        {
            return;
        }

        inventTransArchivingReverse.runOperation();

        if (reverseInventTransArchiveProcessHistoryTable.RecId)
        {
            if (FormDataUtil::isFormDataSource(reverseInventTransArchiveProcessHistoryTable))
            {
                FormDataUtil::getFormDataSource(reverseInventTransArchiveProcessHistoryTable).research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void execute() 
    {
        InventInstrumentationLogger logger = InventInstrumentationLogger::createLogger(classStr(InventTransArchivingReverse_Init));

        using (var activityContext = logger.inventTransArchivingReverse_Init().logMeasure(funcName()))
        {
            if (reverseInventTransArchiveTable.IsReverse)
            {
                throw error("@SCM:InventoryArchivedTransAlreadyReversedV2");
            }

            if (InventTransArchivingReverse::existsAnotherInventTransArchivingReverseJobRunning(this.parmCurrentBatch().RecId))
            {
                throw error("@SCM:AnotherTransArchivingReverseNotFinishedV2");
            }

            if (InventTransArchiveService::existsAnotherInventTransArchivingJobRunning())
            {
                throw error("@SCM:AnotherTransArchivingNotFinishedV2");
            }

            ttsbegin;

            if (!reverseInventTransArchiveTable.selectForUpdate())
            {
                reverseInventTransArchiveTable.selectForUpdate(true);
            }
            reverseInventTransArchiveTable.StopRunning = NoYes::Yes;
            reverseInventTransArchiveTable.update();

            this.createReverseInventTransArchiving();
            this.prepareReverseArchivingTask(reverseInventTransArchiveTable.SessionId);
            ttscommit;
            this.createTasks();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTasks()
    {
        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        InventTransArchiveTaskBatchManager inventTransArchiveTaskBatchManager = InventTransArchiveTaskBatchManager::newFromBatchParameters(batchHeader, this.parmCurrentBatch());
        inventTransArchiveTaskBatchManager.createReverseArchivingBatchTasks(this.parmReverseInventTransArchivingRecId(), this.parmInventTransArchivingRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ClassDescription caption()
    {
        if (InventTransArchiveFeatureHelper::isFeatureEnabled())
        {
            return "@SCM:InventTransArchivingReverseInitDescriptionV2";
        }

        return "@SCM:InventTransArchivingReverseInitDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventTransArchivingReverse_Init construct()
    {
        return new InventTransArchivingReverse_Init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTransArchiveProceeTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventTransArchivingReverse_Init newFromInventTransArchiveProceeTable(InventTransArchiveProcessHistoryTable _reverseInventTransArchiveProcessHistoryTable)
    {
        InventTransArchivingReverse_Init inventTransArchivingReverse = InventTransArchivingReverse_Init::construct();
        inventTransArchivingReverse.getLast();
        inventTransArchivingReverse.parmReverseInventTransArchivingRecId(_reverseInventTransArchiveProcessHistoryTable.RecId);
        inventTransArchivingReverse.parmFromDateReverse(_reverseInventTransArchiveProcessHistoryTable.FromDateOfClosedPeriod);
        inventTransArchivingReverse.parmToDateReverse(_reverseInventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod);
        return inventTransArchivingReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseInventTransArchiving</Name>
				<Source><![CDATA[
    private void createReverseInventTransArchiving()
    {
        // First of all, check if the reverse record has been created
        select firstonly inventTransArchiveTable
            where inventTransArchiveTable.ReverseArchivingRefRecId == this.parmReverseInventTransArchivingRecId();

        if (!inventTransArchiveTable.RecId)
        {
            inventTransArchiveTable = InventTransArchiveProcessHistoryTable::create(
                        reverseInventTransArchiveTable.FromDateOfClosedPeriod,
                        reverseInventTransArchiveTable.EndDateOfClosedPeriod);

            inventTransArchiveTable.IsReverse = NoYes::Yes;
            inventTransArchiveTable.ReverseArchivingRefRecId = this.parmReverseInventTransArchivingRecId();
            inventTransArchiveTable.SessionId = guid2Str(newGuid());
            inventTransArchiveTable.insert();
        }

        this.parmInventTransArchivingRecId(inventTransArchiveTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReverseArchivingTask</Name>
				<Source><![CDATA[
    private void prepareReverseArchivingTask(SysGuidString _reverseSessionId)
    {
        InventTransArchiveTask reverseInventTransArchiveTask;
        InventTransArchive     archivedInventTrans;

        InventTransArchiveState state = InventTransArchiveState::Waiting;
        SysGuidString currentSessionId = inventTransArchiveTable.SessionId;

        // Clean up not finished cancel task
        delete_from reverseInventTransArchiveTask
            where reverseInventTransArchiveTask.SessionId == currentSessionId
               && reverseInventTransArchiveTask.InventTransArchiveState < InventTransArchiveState::Ended;
         
        insert_recordset reverseInventTransArchiveTask(SessionId, InventTransArchiveState, ItemId, InventDimId)
            select currentSessionId, state, ItemId, InventDimId from archivedInventTrans
                group by archivedInventTrans.ItemId, archivedInventTrans.InventDimId
                where archivedInventTrans.SessionId == _reverseSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
     public container  pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                container base;
                [version, #CurrentList, base] = _packedClass;
                return super(base);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>