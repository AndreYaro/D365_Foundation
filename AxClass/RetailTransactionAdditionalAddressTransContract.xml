<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionAdditionalAddressTransContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionAdditionalAddressTransContract</c> class defines the data contract for RetailTransactionAdditionalAddressTrans serialization.
/// </summary>
[DataContract]
internal class RetailTransactionAdditionalAddressTransContract
{
    private CustName deliveryName;
    private LogisticsAddressStreetNumber streetNumber;
    private AddressStreet street;
    private AddressCity city;
    private LogisticsAddressDistrictName districtName;
    private AddressCountyId county;
    private LogisticsAddressStateId state;
    private LogisticsAddressZipCodeId zipCode;
    private AddressCountryRegionId countryRegionId;
    private Phone phone;
    private Email email;
    private Name buildingCompliment;
    private LogisticsAttentionToAddressLine attentionToAddressLine;
    private LogisticsPostalAddressRecId postalAddressRecordId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the address friendly name.
    /// </summary>
    /// <param name = "_deliveryName">New address friendly name.</param>
    /// <returns>The address friendly name.</returns>
    [Hookable(false),
     DataMember('DeliveryName')]
    public CustName parmDeliveryName(str _deliveryName = deliveryName)
    {
        deliveryName = _deliveryName;
        return deliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStreetNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the street number.
    /// </summary>
    /// <param name = "_streetNumber">New street number.</param>
    /// <returns>The street number.</returns>
    [Hookable(false),
     DataMember('StreetNumber')]
    public LogisticsAddressStreetNumber parmStreetNumber(str _streetNumber = streetNumber)
    {
        streetNumber = _streetNumber;
        return streetNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the street.
    /// </summary>
    /// <param name = "_street">New street.</param>
    /// <returns>The street.</returns>
    [Hookable(false),
     DataMember('Street')]
    public AddressStreet parmStreet(str _street = street)
    {
        street = _street;
        return street;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets city.
    /// </summary>
    /// <param name = "_city">New city.</param>
    /// <returns>The city.</returns>
    [Hookable(false),
     DataMember('City')]
    public AddressCity parmCity(str _city = city)
    {
        city = _city;
        return city;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistrictName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the district name.
    /// </summary>
    /// <param name = "_districtName">New district name.</param>
    /// <returns>The district name.</returns>
    [Hookable(false),
     DataMember('DistrictName')]
    public LogisticsAddressDistrictName parmDistrictName(str _districtName = districtName)
    {
        districtName = _districtName;
        return districtName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCounty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the county.
    /// </summary>
    /// <param name = "_county">New county.</param>
    /// <returns>The county.</returns>
    [Hookable(false),
     DataMember('County')]
    public AddressCountyId parmCounty(str _county = county)
    {
        county = _county;
        return county;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the state.
    /// </summary>
    /// <param name = "_state">New state.</param>
    /// <returns>The state.</returns>
    [Hookable(false),
     DataMember('State')]
    public FirstName parmState(str _state = state)
    {
        state = _state;
        return state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the zip code.
    /// </summary>
    /// <param name = "_zipCode">New zip code.</param>
    /// <returns>The zip code.</returns>
    [Hookable(false),
     DataMember('ZipCode')]
    public LogisticsAddressZipCodeId parmZipCode(str _zipCode = zipCode)
    {
        zipCode = _zipCode;
        return zipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the country region id.
    /// </summary>
    /// <param name = "_countryRegionId">New country region id.</param>
    /// <returns>The country region id.</returns>
    [Hookable(false),
     DataMember('CountryRegionId')]
    public AddressCountryRegionId parmCountryRegionId(str _countryRegionId = countryRegionId)
    {
        countryRegionId = _countryRegionId;
        return countryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the phone.
    /// </summary>
    /// <param name = "_phone">New phone.</param>
    /// <returns>The phone.</returns>
    [Hookable(false),
     DataMember('Phone')]
    public Phone parmPhone(str _phone = phone)
    {
        phone = _phone;
        return phone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the email.
    /// </summary>
    /// <param name = "_email">New email.</param>
    /// <returns>The email.</returns>
    [Hookable(false),
     DataMember('Email')]
    public Email parmEmail(str _email = email)
    {
        email = _email;
        return email;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuildingCompliment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the building compliment.
    /// </summary>
    /// <param name = "_buildingCompliment">New building compliment.</param>
    /// <returns>The building compliment.</returns>
    [Hookable(false),
     DataMember('BuildingCompliment')]
    public Name parmBuildingCompliment(str _buildingCompliment = buildingCompliment)
    {
        buildingCompliment = _buildingCompliment;
        return buildingCompliment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAttentionToAddressLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the attention to address line.
    /// </summary>
    /// <param name = "_attentionToAddressLine">New attention to address line.</param>
    /// <returns>The attention to address line.</returns>
    [Hookable(false),
     DataMember('AttentionToAddressLine')]
    public LogisticsAttentionToAddressLine parmAttentionToAddressLine(str _attentionToAddressLine = attentionToAddressLine)
    {
        attentionToAddressLine = _attentionToAddressLine;
        return attentionToAddressLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostalAddressRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the postal address record identificator.
    /// </summary>
    /// <param name = "_postalAddressRecordId">New postal address record identificator.</param>
    /// <returns>The postal address record identificator.</returns>
    [Hookable(false),
     DataMember('PostalAddressRecordId')]
    public LogisticsPostalAddressRecId parmPostalAddressRecordId(RefRecId _postalAddressRecordId = postalAddressRecordId)
    {
        postalAddressRecordId = _postalAddressRecordId;
        return postalAddressRecordId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRetailTransactionAdditionalAddressTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data contract based on <c>RetailTransactionAdditionalAddressTrans</c>.
    /// </summary>
    /// <param name = "_additionalAddressTrans ">The <c>RetailTransactionAdditionalAddressTrans</c> entity.</param>
    [Hookable(false)]
    public void initFromRetailTransactionAdditionalAddressTrans(RetailTransactionAdditionalAddressTrans _additionalAddressTrans)
    {
        this.parmDeliveryName(_additionalAddressTrans.DeliveryName);
        this.parmStreetNumber(_additionalAddressTrans.StreetNumber);
        this.parmStreet(_additionalAddressTrans.Street);
        this.parmCity(_additionalAddressTrans.City);
        this.parmDistrictName(_additionalAddressTrans.DistrictName);
        this.parmCounty(_additionalAddressTrans.County);
        this.parmState(_additionalAddressTrans.State);
        this.parmZipCode(_additionalAddressTrans.ZipCode);
        this.parmCountryRegionId(_additionalAddressTrans.CountryRegionId);
        this.parmPhone(_additionalAddressTrans.Phone);
        this.parmEmail(_additionalAddressTrans.Email);
        this.parmBuildingCompliment(_additionalAddressTrans.BuildingCompliment);
        this.parmAttentionToAddressLine(_additionalAddressTrans.AttentionToAddressLine);
        this.parmPostalAddressRecordId(_additionalAddressTrans.PostalAddressRecordId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data contract based on <c>LogisticsPostalAddress</c>.
    /// </summary>
    /// <param name = "data">The <c>LogisticsPostalAddress</c> entity.</param>
    [Hookable(false)]
    public void initFromLogisticsPostalAddress(LogisticsPostalAddress _logisticsPostalAddress)
    {
        LogisticsLocation location = LogisticsLocation::find(_logisticsPostalAddress.Location);
        LogisticsElectronicAddress phoneElectronicAddress = LogisticsElectronicAddress::findByLocationAndType(location.RecId, LogisticsElectronicAddressMethodType::Phone);
        LogisticsElectronicAddress emailElectronicAddress = LogisticsElectronicAddress::findByLocationAndType(location.RecId, LogisticsElectronicAddressMethodType::Email);

        this.parmDeliveryName(location.Description);
        this.parmStreetNumber(_logisticsPostalAddress.StreetNumber);
        this.parmStreet(_logisticsPostalAddress.Street);
        this.parmCity(_logisticsPostalAddress.City);
        this.parmDistrictName(_logisticsPostalAddress.DistrictName);
        this.parmCounty(_logisticsPostalAddress.County);
        this.parmState(_logisticsPostalAddress.State);
        this.parmZipCode(_logisticsPostalAddress.ZipCode);
        this.parmCountryRegionId(_logisticsPostalAddress.CountryRegionId);
        this.parmPhone(phoneElectronicAddress.Locator);
        this.parmEmail(emailElectronicAddress.Locator);
        this.parmBuildingCompliment(_logisticsPostalAddress.BuildingCompliment);
        this.parmPostalAddressRecordId(_logisticsPostalAddress.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes data to json string.
    /// </summary>
    /// <returns>The json string.</returns>
    [Hookable(false)]
    public str serialize()
    {
        return FormJsonSerializer::serializeClass(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes data from json string.
    /// </summary>
    /// <param name = "_json">The json string.</param>
    /// <returns>The <c>RetailTransactionAdditionalAddressTransContract</c> entity.</returns>
    [Hookable(false)]
    public static RetailTransactionAdditionalAddressTransContract deserialize(str _json)
    {
        return FormJsonSerializer::deserializeObject(classNum(RetailTransactionAdditionalAddressTransContract), _json) as RetailTransactionAdditionalAddressTransContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>