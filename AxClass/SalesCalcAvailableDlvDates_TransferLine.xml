<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcAvailableDlvDates_TransferLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesCalcAvailableDlvDates_TransferLine extends SalesCalcAvailableDlvDates
{
    InventTransferLine      inventTransferLine;
    InventTransferLine      inventTransferLineOrig;
    InventTransferTable     inventTransferTable;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventTransferLine,
        inventTransferLineOrig,
        inventTransferTable
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditDlvMode</Name>
				<Source><![CDATA[
    public boolean allowEditDlvMode()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditInventLocation</Name>
				<Source><![CDATA[
    public boolean allowEditInventLocation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditInventSite</Name>
				<Source><![CDATA[
    public boolean allowEditInventSite()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLeadTime</Name>
				<Source><![CDATA[
    public LeadTime salesLeadTime(CalendarDays _basedOnCalendarSetup = NoYes::Yes)
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllUnitConversionInfoRequired</Name>
				<Source><![CDATA[
    protected boolean validateAllUnitConversionInfoRequired()
    {
        return EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(inventTransferLine.ItemId, inventTransferLine.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to do delivery date control on the confirmed dates.
    /// </summary>
    /// <returns>
    /// true if it should do the delivery date control on confirmed dates; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should always return false in the sub-classes that are related to tables that do not
    /// contain confirmed date fields. For example, the <c>TmpSalesTable</c> and <c>TmpSalesLine</c> tables.
    /// </remarks>
    protected boolean checkConfirmedDates()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateCaller</Name>
				<Source><![CDATA[
    protected boolean doUpdateCaller(boolean _disableDlvDateControl = false)
    {
        if (_disableDlvDateControl)
        {
            if (inventTransferLineOrig.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                return true;
            }
        }
        else
        {
            if (deliveryDateControlMap.InventDimId             != inventTransferLineOrig.InventDimId           ||
                deliveryDateControlMap.ShippingDateRequested   != inventTransferLineOrig.ShipDate              ||
                deliveryDateControlMap.ReceiptDateRequested    != inventTransferLineOrig.ReceiveDate)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether changes have been made to fields that influence the delivery date control.
    /// </summary>
    /// <returns>
    /// true if changes have been made to fields that influence the delivery date control; otherwise, false.
    /// </returns>
    protected boolean doValidateWrite()
    {
        if (inventTransferLine.InventDimId             != inventTransferLineOrig.InventDimId
            )
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId2DlvDateType</Name>
				<Source><![CDATA[
    protected SalesDlvDateType fieldId2DlvDateType(fieldId _fieldId)
    {
        SalesDlvDateType    dlvDateType;
        switch (_fieldId)
        {
            case fieldnum(InventTransferLine,ReceiveDate) :
                dlvDateType = SalesDlvDateType::RequestedReceipt;
                break;
            case fieldnum(InventTransferLine,ShipDate) :
                dlvDateType = SalesDlvDateType::RequestedShipping;
                break;
            default :
                dlvDateType = SalesDlvDateType::None;
                break;
        }

        return dlvDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    protected ItemId getItemId()
    {
        return inventTransferLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies dimensions, such as the warehouse on sales order lines where all the dimension fields are
    /// positioned in the related <c>InventDim</c> table.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that contains fields that have been modified.
    /// </param>
    /// <remarks>
    /// The reason why people use this method is that the key <c>InventDimId</c> field on the parent table
    /// that links to the <c>InventDim</c> record has not been updated at the time when the delivery date
    /// control is occurring. Therefore, the method is used to get the new value of the dimension field
    /// from the related <c>InventDim</c> table.
    /// </remarks>
    protected void inventDimIdUpdate(InventDim _inventDim)
    {
        if (_inventDim)
            inventTransferLine.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leadTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventory lead time for the current instance of a transfer line.
    /// </summary>
    /// <returns>
    /// The lead time in days.
    /// </returns>
    public LeadTime leadTime()
    {
        return InventItemInventSetup::find(inventTransferLine.ItemId, inventTransferLine.InventDimId).getLeadTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the current <c>SalesCalcAvailableDlvDates_SalesLine</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current <c>SalesCalcAvailableDlvDates_SalesLine</c> class.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDlvMode</Name>
				<Source><![CDATA[
    protected DlvModeId parmDlvMode(DlvModeId _dlvMode = inventTransferTable.DlvModeId)
    {
        inventTransferTable.DlvModeId = _dlvMode;
        return inventTransferTable.DlvModeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId parmInventLocationId(InventLocationId _inventLocationId = '')
    {
        return inventTransferTable.InventLocationIdFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    protected InventSiteId parmInventSiteId(InventSiteId _inventSiteId = '')
    {
        return this.parmInventSiteIdSelected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferLine</Name>
				<Source><![CDATA[
    public InventTransferLine parmTransferLine(InventTransferLine _inventTransferLine = inventTransferLine)
    {
        deliveryDateControlMap      = _inventTransferLine.data();
        inventTransferLine          = _inventTransferLine.data();
        inventTransferTable         = _inventTransferLine.inventTransferTable();
        inventTransferLineOrig      = _inventTransferLine.orig();

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the receipt calendar ID for the customer and returns it.
    /// </summary>
    /// <returns>
    /// The receipt calendar ID for the customer.
    /// </returns>
    protected CalendarId receiptCalendarId()
    {
        if (receiptCalendarId)
        {
            return receiptCalendarId;
        }

        receiptCalendarId = InventLocation::find(inventTransferTable.InventLocationIdTo).ReqCalendarId;

        if (!receiptCalendarId)
        {
            receiptCalendarId = CompanyInfo::find().ShippingCalendarId;
        }

        return receiptCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLeadTimeBasedOnDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales lead time based on the delivery date control type and sets that the sales lead time has been found.
    /// </summary>
    protected void initializeSalesLeadTimeBasedOnDeliveryDateControlType()
    {
        switch (inventTransferLine.DeliveryDateControlType)
        {
            case SalesDeliveryDateControlType::ATPPlusIssueMargin:
                MarginIssue marginIssue = this.marginIssue(
                        inventTransferLine.ItemId,
                        InventDim::find(this.parmInventDimId()));
            //
            // No break here.
            // The process of calculation ATP and "ATP + Issue margin" is
            // typically the same. The only difference is in adding an extra lead time in a latter case.
            //
            case SalesDeliveryDateControlType::ATP:
                SalesATPCalculation salesATPCalculation = SalesATPCalculation::newTransferCalculation(
                        inventTransferLine);

                // marginIssue will be > 0 only for "ATP + Issue margin" delivery date control method.
                salesATPCalculation.parmMarginIssue(marginIssue);
                salesATPCalculation.parmIssueMarginCalendarId(this.reqSetupDim().reqCalendarId());

                InventQty inventQty;
                
                if (ReqSalesCalcDlvDatesTransfLineRemainQtyToggle::instance().isEnabled())
                {
                    inventQty = inventTransferLineOrig.RecId ?
                        inventTransferLine.QtyTransfer - inventTransferLineOrig.QtyTransfer + inventTransferLine.QtyRemainShip:
                        inventTransferLine.QtyTransfer;
                }
                else
                {
                    inventQty = inventTransferLine.QtyTransfer;
                }

                salesLeadTime = salesATPCalculation.atpLeadTime(
                    inventQty,
                    this.effectiveOrderDate(),
                    inventTransferLine.InventTransId);

                salesLeadTimeBasedOnCalendarSetup = salesLeadTime;
                break;
            case SalesDeliveryDateControlType::None:
            case SalesDeliveryDateControlType::SalesLeadTime:
                // For SalesDeliveryDateControlType::None lead time should also be calculated.
                salesLeadTime = this.leadTime();
                salesLeadTimeBasedOnCalendarSetup = this.adjustLeadTimeForWorkingDays(salesLeadTime);
                break;
        }

        salesLeadTimeFound = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of days it takes an order to retrieve from the shipping point to the receiving
    /// point for a given mode of delivery.
    /// </summary>
    /// <returns>
    /// The number of days it takes an order to retrieve from the shipping point to the receiving point for
    /// a given mode of delivery.
    /// </returns>
    public CustVendTransportDays transportDays()
    {
        CustVendTransportDays transportDays = CustVendTransportPointLine::defaultTransportDays(dlvModeIdSelected,
                                                                                       inventLocationIdSelected,
                                                                                       '',
                                                                                       '',
                                                                                       '',
                                                                                       '',
                                                                                       inventTransferTable.InventLocationIdTo);
        return transportDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter to the current instance of the
    ///    <c>SalesCalcAvailableDlvDates_SalesLine</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container that is used to deserialize the current instance of the
    ///    <c>SalesCalcAvailableDlvDates_SalesLine</c> class.
    /// </param>
    /// <returns>
    ///    true if the deserialization was successful; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = _packedClass;

                if (packedSuper)
                    return super(packedSuper);
            break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    protected void updateCaller(Common  _record,
                                boolean _disableDlvDateControl = false)
    {
        super(_record,_disableDlvDateControl);

        if (this.parmCheckOnly())
            return;

        if (_record.TableId != tablenum(InventTransferLine))
            throw error("@SYS18626");

        InventTransferLine inventTransferLineCaller = _record;

        if (this.parmCancelModifiedField())
        {
            if (inventTransferLineCaller.RecId)
            {
                inventTransferLineCaller.ShipDate                   = inventTransferLineOrig.ShipDate;
                inventTransferLineCaller.ReceiveDate                = inventTransferLineOrig.ReceiveDate;
                inventTransferLineCaller.DeliveryDateControlType    = inventTransferLineOrig.DeliveryDateControlType;
                inventTransferLineCaller.atpTimeFence               = inventTransferLineOrig.atpTimeFence;
                inventTransferLineCaller.atpInclPlannedOrders       = inventTransferLineOrig.atpInclPlannedOrders;
                inventTransferLineCaller.atpApplyDemandTimeFence    = inventTransferLineOrig.atpApplyDemandTimeFence;
                inventTransferLineCaller.atpApplySupplyTimeFence    = inventTransferLineOrig.atpApplySupplyTimeFence;
                inventTransferLineCaller.atpBackwardDemandTimeFence = inventTransferLineOrig.atpBackwardDemandTimeFence;
                inventTransferLineCaller.atpBackwardSupplyTimeFence = inventTransferLineOrig.atpBackwardSupplyTimeFence;
            }
            return;
        }

        if (_disableDlvDateControl)
        {
            inventTransferLineCaller.DeliveryDateControlType    = SalesDeliveryDateControlType::None;
            inventTransferLineCaller.atpTimeFence               = 0;
            inventTransferLineCaller.atpInclPlannedOrders       = false;
            inventTransferLineCaller.atpApplyDemandTimeFence    = 0;
            inventTransferLineCaller.atpApplySupplyTimeFence    = 0;
            inventTransferLineCaller.atpBackwardDemandTimeFence = 0;
            inventTransferLineCaller.atpBackwardSupplyTimeFence = 0;
        }
        else
        {
            inventTransferLineCaller.InventDimId = deliveryDateControlMap.InventDimId;
            inventTransferLineCaller.ReceiveDate = deliveryDateControlMap.ReceiptDateRequested;
            inventTransferLineCaller.ShipDate    = deliveryDateControlMap.ShippingDateRequested;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static SalesCalcAvailableDlvDates_TransferLine construct()
    {
        return new SalesCalcAvailableDlvDates_TransferLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(
        InventTransferLine  _inventTransferLine,
        FieldId             _fieldId = 0)
    {
        InventDim           inventDim = InventDim::find(_inventTransferLine.InventDimId);
        SalesDlvDateType    initMasterDateType = this.fieldId2DlvDateType(_fieldId);

        this.parmTransferLine(_inventTransferLine);
        this.parmInventLocationIdSelected(inventDim.InventLocationId);
        this.parmDlvModeIdSelected(_inventTransferLine.inventTransferTable().DlvModeId);
        this.parmInventLocationTransportShipping(inventDim.InventLocationId);
        this.parmInventSiteIdSelected(inventDim.InventSiteId);

        InventLocation inventLocation = InventLocation::find(inventDim.InventLocationId);
        this.parmOrderEntryDeadlineGroupId(InventSite::find(inventLocation.InventSiteId).OrderEntryDeadlineGroupId);

        this.parmRecalculateShippingDate(false);
        this.parmInventDimId(inventDim.InventDimId);
        this.initReqSetupDim(_inventTransferLine.ItemId, inventDim, _inventTransferLine.DeliveryDateControlType);
        this.initMaster(initMasterDateType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransferLine</Name>
				<Source><![CDATA[
    public static SalesCalcAvailableDlvDates_TransferLine  newTransferLine(
        InventTransferLine  _inventTransferLine,
        FieldId             _fieldId = 0)
    {
        SalesCalcAvailableDlvDates_TransferLine salesCalc = SalesCalcAvailableDlvDates_TransferLine::construct();

        salesCalc.initialize(_inventTransferLine, _fieldId);

        return salesCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>