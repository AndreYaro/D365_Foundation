<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustReport_LedgerReconciliation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustReport_LedgerReconciliation extends LedgerReconciliation
{
    CustLedgerReconciliationReportTmp custTransTmp, custTransTmpRef;
    CustLedgerReconciliationTmp custLedgerReconciliationTmp;
    LedgerReconciliationLedgerCurrencyTmp ledgerReconciliationLedgerCurrencyTmp;
    CustLedgerReconciliationCurrencyTmp custLedgerReconciliationCurrencyTmp;
    CustLedgerReconciliationCurrencyReportTmp custLedgerReconciliationCurrencyReportTmp;
    /// <summary>
    /// Creates <c>MainAccount</c> that are associated with every posting profile and inset into <c>LedgerReconcileAccountsTmp</c> table.
    /// </summary>
    /// <remarks>
    /// The summary accounts are used in generating ledger transactions for reconciliation
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerReconcileAccountsTmp</Name>
				<Source><![CDATA[
    protected void createLedgerReconcileAccountsTmp()
    {
        CustLedgerAccounts custLedgerAccounts;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        MainAccount mainAccount;

        insert_recordset ledgerReconcileAccountsTmp
        (
            MainAccount
        )
        select custLedgerAccounts
            where custLedgerAccounts.PostingProfile >= fromPostingProfile
                && custLedgerAccounts.PostingProfile <= toPostingProfile
        join dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == custLedgerAccounts.SummaryLedgerDimension
        join RecId from mainAccount
            group by RecId
            where mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
                && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the customer transaction records and inserts them in to the temporary table.
    /// </summary>
    public final void getCustTrans()
    {
        CustTrans custTrans;

        // Insert the CustTrans records into custTransTmpRef table filtered to
        // Date, Voucher and Posting profile if provided by user.
        // Find the right summary account associated with a Custtrans record
        this.insertCustTransDetailsIntoTmpTable(custTrans);

        // Summarize the CustTrans records for reconciliation
        if (this.parmIncludeDetails())
        {
            insert_recordset custTransTmp
            (
                AccountingDate,
                Voucher,
                CustAmountMST,
                CustAmountReportingCurrency,
                CustomerAccountId,
                CustomerName,
                MainAccountId,
                MainAccountName
            )
            select AccountingDate,
                Voucher,
                sum(CustAmountMST),
                sum(CustAmountReportingCurrency),
                CustomerAccountId,
                minOf(CustomerName),
                MainAccountId,
                minOf(MainAccountName)
            from custTransTmpRef
                group by AccountingDate,
                    Voucher,
                    CustomerAccountId,
                    MainAccountId;
        }
        else
        {
            insert_recordset custTransTmp
            (
                CustAmountMST,
                CustAmountReportingCurrency,
                MainAccountId,
                MainAccountName
            )
            select sum(CustAmountMST),
                sum(CustAmountReportingCurrency),
                MainAccountId,
                minOf(MainAccountName)
            from custTransTmpRef
                group by MainAccountId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustTransDetailsIntoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the customer transaction details into the <c>CustLedgerReconciliationReportTmp</c> temporary
    /// table.
    /// </summary>
    /// <param name="_custTrans">
    /// The Customer transaction record from which the transaction details are inserted.
    /// </param>
    protected void insertCustTransDetailsIntoTmpTable(CustTrans _custTrans)
    {
        CustTable custTable;
        DirPartyTable dirPartyTable;
        CustLedgerAccounts custLedgerAccounts;
        MainAccount mainAccount;
        DimensionAttributeValueCombination dimAttrValComb;

        // Insert the CustTrans records into custTransTmpRef table filtered to
        // Date, Voucher and Posting profile if provided by user.
        insert_recordset custTransTmpRef
        (
            AccountingDate,
            Voucher,
            CustAmountMST,
            CustAmountReportingCurrency,
            PostingProfile,
            CustomerAccountId,
            CustGroup,
            CustomerName
        )
        select TransDate, Voucher, AmountMST, ReportingCurrencyAmount, PostingProfile from _custTrans
            where _custTrans.TransDate >= fromDate
                && _custTrans.TransDate <= toDate
                && _custTrans.Voucher >= fromVoucher
                && _custTrans.Voucher <= toVoucher
                && _custTrans.PostingProfile >= fromPostingProfile
                && _custTrans.PostingProfile <= toPostingProfile
        join AccountNum, CustGroup from CustTable
            where custTable.AccountNum == _custTrans.AccountNum
        join Name from dirPartyTable
            where dirPartyTable.RecId == custTable.Party;

        // Update MainAccountId and MainAccountName for customer transactions with
        // customer specified on a posting profile
        // The records in custTransTmpRef should be updated with following precedence:
        // 1. TableGroupAll::Table
        // 2. TableGroupAll::GroupId
        // 3. TableGroupAll::All
        update_recordset custTransTmpRef setting
            MainAccountId = mainAccount.MainAccountId,
            MainAccountName = mainAccount.Name
            where custTransTmpRef.MainAccountId == ''
        join PostingProfile from custLedgerAccounts
            where custLedgerAccounts.PostingProfile == custTransTmpRef.PostingProfile
                && custLedgerAccounts.Num == custTransTmpRef.CustomerAccountId
                && custLedgerAccounts.AccountCode == TableGroupAll::Table
        join RecId from dimAttrValComb
            where dimAttrValComb.RecId == custLedgerAccounts.SummaryLedgerDimension
        join MainAccountId, Name from mainAccount
            where mainAccount.RecId == dimAttrValComb.MainAccount
                && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();

        // Update MainAccountId and MainAccountName for customer transactions with
        // customers in posting profile groups
        // The records in custTransTmpRef should be updated with following precedence:
        // 1. TableGroupAll::Table
        // 2. TableGroupAll::GroupId
        // 3. TableGroupAll::All
        update_recordset custTransTmpRef setting
            MainAccountId = mainAccount.MainAccountId,
            MainAccountName = mainAccount.Name
            where custTransTmpRef.MainAccountId == ''
        join PostingProfile from custLedgerAccounts
            where custLedgerAccounts.PostingProfile == custTransTmpRef.PostingProfile
                && custLedgerAccounts.Num == custTransTmpRef.CustGroup
                && custLedgerAccounts.AccountCode == TableGroupAll::GroupId
        join RecId from dimAttrValComb
            where dimAttrValComb.RecId == custLedgerAccounts.SummaryLedgerDimension
        join MainAccountId, Name from mainAccount
            where mainAccount.RecId == dimAttrValComb.MainAccount
                && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();

        // Update MainAccountId and MainAccountName for all customer transactions.
        // The records in custTransTmpRef should be updated with following precedence:
        // 1. TableGroupAll::Table
        // 2. TableGroupAll::GroupId
        // 3. TableGroupAll::All
        update_recordset custTransTmpRef setting
            MainAccountId = mainAccount.MainAccountId,
            MainAccountName = mainAccount.Name
            where custTransTmpRef.MainAccountId == ''
        join RecId from custLedgerAccounts
            where custLedgerAccounts.PostingProfile == custTransTmpRef.PostingProfile
                && custLedgerAccounts.AccountCode == TableGroupAll::All
        join RecId from dimAttrValComb
            where dimAttrValComb.RecId == custLedgerAccounts.SummaryLedgerDimension
        join MainAccountId, Name from mainAccount
            where mainAccount.RecId == dimAttrValComb.MainAccount
                && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>CustReport_LedgerReconciliation</c> class.
    /// </summary>
    /// <param name="_custLedgerReconciliationTmp">
    /// The Customer to ledger reconciliation table buffer used on the report.
    /// </param>
    /// <remarks>
    /// In Microsoft Dynamics AX 2012 R2 this constructor was changed to take the
    /// <c>CustLedgerReconciliationTmp</c> table buffer as a parameter to support the printing
    /// of the report using a TempDB table which provides performance improvements.
    /// </remarks>
    public void new(CustLedgerReconciliationTmp _custLedgerReconciliationTmp)
    {
        custLedgerReconciliationTmp = _custLedgerReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustLedgerReconciliationAccountingCurrencyReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>CustLedgerReconciliationCurrencyReportTmp</c> record with <c>CustLedgerReconciliationReportTmp</c> for accounting currency.
    /// </summary>
    private void populateCustLedgerReconciliationAccountingCurrencyReportTmp()
    {
        insert_recordset custLedgerReconciliationCurrencyReportTmp
        (
            CurrencyBalanceDifference,
            AccountingDate,
            CustAmountCurrency,
            CustGroup,
            CustomerAccountId,
            CustomerCurrencyBalance,
            CustomerMainAccountId,
            CustomerName,
            LedgerAccount,
            LedgerCurrencyBalance,
            LedgerAccountName,
            LedgerAmountCurrency,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            Voucher
        )
        select AccountingCurrencyBalanceDifference,
            AccountingDate,
            CustAmountMST,
            CustGroup,
            CustomerAccountId,
            CustomerAccountingCurrencyBalance,
            CustomerMainAccountId,
            CustomerName,
            LedgerAccount,
            LedgerAccountingCurrencyBalance,
            LedgerAccountName,
            LedgerAmountMST,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            Voucher
        from custTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustLedgerReconciliationReportingCurrencyReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>CustLedgerReconciliationCurrencyReportTmp</c> record with <c>CustLedgerReconciliationReportTmp</c> for reporting currency.
    /// </summary>
    private void populateCustLedgerReconciliationReportingCurrencyReportTmp()
    {
        insert_recordset custLedgerReconciliationCurrencyReportTmp
        (
            CurrencyBalanceDifference,
            AccountingDate,
            CustAmountCurrency,
            CustGroup,
            CustomerAccountId,
            CustomerMainAccountId,
            CustomerName,
            LedgerAccount,
            LedgerAccountName,
            LedgerAmountCurrency,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            Voucher
        )
        select ReportingCurrencyBalanceDifference,
            AccountingDate,
            CustAmountReportingCurrency,
            CustGroup,
            CustomerAccountId,
            CustomerMainAccountId,
            CustomerName,
            LedgerAccount,
            LedgerAccountName,
            LedgerAmountReportingCurrency,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            Voucher
        from custTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustLedgerReconciliationAccountingCurrencyTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>CustLedgerReconciliationCurrencyTmp</c> record with <c>CustLedgerReconciliationTmp</c> for accounting currency.
    /// </summary>
    private void populateCustLedgerReconciliationAccountingCurrencyTmp()
    {
        insert_recordset custLedgerReconciliationCurrencyTmp
        (
            CurrencyBalanceDifference,
            AccountingDate,
            CustAmountCurrency,
            CustomerAccountId,
            CustomerCurrencyBalance,
            CustomerMainAccountId,
            CustomerName,
            IsCalcBalanceDiff,
            LedgerAccount,
            LedgerCurrencyBalance,
            LedgerAccountName,
            LedgerAmountCurrency,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            Voucher,
            SumCustAmountCurrency,
            SumCurrencyBalanceDifference,
            SumLedgerAmountCurrency,
            TotalCustAmountCurrency,
            TotalCurrencyBalanceDifference,
            TotalLedgerAmountCurrency
        )
        select AccountingCurrencyBalanceDifference,
            AccountingDate,
            CustAmountMST,
            CustomerAccountId,
            CustomerAccountingCurrencyBalance,
            CustomerMainAccountId,
            CustomerName,
            IsCalcBalanceDiff,
            LedgerAccount,
            LedgerAccountingCurrencyBalance,
            LedgerAccountName,
            LedgerAmountMST,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            Voucher,
            SumCustAmountMST,
            SumAccountingCurrencyBalanceDifference,
            SumLedgerAmountMST,
            TotalCustAmountMST,
            TotalAccountingCurrencyBalanceDifference,
            TotalLedgerAmountMST
        from custLedgerReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustLedgerReconciliationReportingCurrencyTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>CustLedgerReconciliationCurrencyTmp</c> record with <c>CustLedgerReconciliationTmp</c> for reporting currency.
    /// </summary>
    private void populateCustLedgerReconciliationReportingCurrencyTmp()
    {
        insert_recordset custLedgerReconciliationCurrencyTmp
        (
            CurrencyBalanceDifference,
            AccountingDate,
            CustAmountCurrency,
            CustomerAccountId,
            CustomerMainAccountId,
            CustomerName,
            IsCalcBalanceDiff,
            LedgerAccount,
            LedgerAccountName,
            LedgerAmountCurrency,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            Voucher,
            SumCustAmountCurrency,
            SumCurrencyBalanceDifference,
            SumLedgerAmountCurrency,
            TotalCustAmountCurrency,
            TotalCurrencyBalanceDifference,
            TotalLedgerAmountCurrency
        )
        select ReportingCurrencyBalanceDifference,
            AccountingDate,
            CustAmountReportingCurrency,
            CustomerAccountId,
            CustomerMainAccountId,
            CustomerName,
            IsCalcBalanceDiff,
            LedgerAccount,
            LedgerAccountName,
            LedgerAmountReportingCurrency,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            Voucher,
            SumCustAmountReportingCurrency,
            SumReportingCurrencyBalanceDifference,
            SumLedgerAmountReportingCurrency,
            TotalCustAmountReportingCurrency,
            TotalReportingCurrencyBalanceDifference,
            TotalLedgerAmountReportingCurrency
        from custLedgerReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustLedgerReconciliationAccountingCurrencyResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>CustLedgerReconciliationTmp</c> record with <c>CustLedgerReconciliationCurrencyTmp</c> for accounting currency.
    /// </summary>
    private void populateCustLedgerReconciliationAccountingCurrencyResult()
    {
        insert_recordset custLedgerReconciliationTmp
        (
            AccountingCurrencyBalanceDifference,
            AccountingDate,
            CustAmountMST,
            CustomerAccountId,
            CustomerAccountingCurrencyBalance,
            CustomerMainAccountId,
            CustomerName,
            IsCalcBalanceDiff,
            LedgerAccount,
            LedgerAccountingCurrencyBalance,
            LedgerAccountName,
            LedgerAmountMST,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            Voucher,
            SumCustAmountMST,
            SumAccountingCurrencyBalanceDifference,
            SumLedgerAmountMST,
            TotalCustAmountMST,
            TotalAccountingCurrencyBalanceDifference,
            TotalLedgerAmountMST
        )
        select CurrencyBalanceDifference,
            AccountingDate,
            CustAmountCurrency,
            CustomerAccountId,
            CustomerCurrencyBalance,
            CustomerMainAccountId,
            CustomerName,
            IsCalcBalanceDiff,
            LedgerAccount,
            LedgerCurrencyBalance,
            LedgerAccountName,
            LedgerAmountCurrency,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            Voucher,
            SumCustAmountCurrency,
            SumCurrencyBalanceDifference,
            SumLedgerAmountCurrency,
            TotalCustAmountCurrency,
            TotalCurrencyBalanceDifference,
            TotalLedgerAmountCurrency
        from custLedgerReconciliationCurrencyTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustLedgerReconciliationReportingCurrencyResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>CustLedgerReconciliationTmp</c> record with <c>CustLedgerReconciliationCurrencyTmp</c> for reporting currency.
    /// </summary>
    private void populateCustLedgerReconciliationReportingCurrencyResult()
    {
        insert_recordset custLedgerReconciliationTmp
        (
            ReportingCurrencyBalanceDifference,
            AccountingDate,
            CustAmountReportingCurrency,
            CustomerAccountId,
            CustomerMainAccountId,
            CustomerName,
            IsCalcBalanceDiff,
            LedgerAccount,
            LedgerAccountName,
            LedgerAmountReportingCurrency,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            Voucher,
            SumCustAmountReportingCurrency,
            SumReportingCurrencyBalanceDifference,
            SumLedgerAmountReportingCurrency,
            TotalCustAmountReportingCurrency,
            TotalReportingCurrencyBalanceDifference,
            TotalLedgerAmountReportingCurrency
        )
        select CurrencyBalanceDifference,
            AccountingDate,
            CustAmountCurrency,
            CustomerAccountId,
            CustomerMainAccountId,
            CustomerName,
            IsCalcBalanceDiff,
            LedgerAccount,
            LedgerAccountName,
            LedgerAmountCurrency,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            Voucher,
            SumCustAmountCurrency,
            SumCurrencyBalanceDifference,
            SumLedgerAmountCurrency,
            TotalCustAmountCurrency,
            TotalCurrencyBalanceDifference,
            TotalLedgerAmountCurrency
        from custLedgerReconciliationCurrencyTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustLedgerReconciliationReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs reconciliation between the ledger entries and customer transactions.
    /// </summary>
    /// <param name="_userConnection">
    /// The user connection value.
    /// </param>
    /// <returns>
    /// The <c>CustLedgerReconciliationTmp</c> record with reconciled records.
    /// </returns>
    public CustLedgerReconciliationTmp processCustLedgerReconciliationReport(UserConnection _userConnection = null)
    {
        MainAccountTranslation mainAccountTranslation;
        MainAccount mainAccount;
        LanguageId languageId = DimensionCache::currentDimensionValueLanguageId();
        NoYes isCalcBalanceDiff = NoYes::No;

        if (_userConnection)
        {
            custTransTmp.setConnection(_userConnection);
            custTransTmpRef.setConnection(_userConnection);
            ledgerReconciliationLedgerCurrencyTmp.setConnection(_userConnection);
            custLedgerReconciliationCurrencyTmp.setConnection(_userConnection);
            custLedgerReconciliationCurrencyReportTmp.setConnection(_userConnection);
            custLedgerReconciliationTmp.setConnection(_userConnection);
            ledgerReconciliationLedgerTmp.setConnection(_userConnection);
            ledgerReconciliationLedgerTmpSummary.setConnection(_userConnection);
            ledgerReconcileAccountsTmp.setConnection(_userConnection);
        }

        // Setup ranges if not specified by the user
        this.setUpRanges();

        // Get general journal entries.
        this.createLedgerReconciliationLedgerTmp();

        // Get vendor transaction entries.
        this.getCustTrans();

        // Populate custLedgerReconciliationCurrencyReportTmp, custLedgerReconciliationCurrencyTmp and ledgerReconciliationLedgerCurrencyTmp based on ledger currency selection.
        if(this.ledgerCurrencySelection == LedgerCurrencySelection::Accounting)
        {
            this.populateLedgerReconciliationAccountingCurrencyTmp(ledgerReconciliationLedgerTmp, ledgerReconciliationLedgerCurrencyTmp);
            this.populateCustLedgerReconciliationAccountingCurrencyTmp();
            this.populateCustLedgerReconciliationAccountingCurrencyReportTmp();
        }
        else if (this.ledgerCurrencySelection == LedgerCurrencySelection::Reporting)
        {
            this.populateLedgerReconciliationReportingCurrencyTmp(ledgerReconciliationLedgerTmp, ledgerReconciliationLedgerCurrencyTmp);
            this.populateCustLedgerReconciliationReportingCurrencyTmp();
            this.populateCustLedgerReconciliationReportingCurrencyReportTmp();
        }

        // Reconcile the customer transaction with ledger entries for matching records
        if (this.parmShowDifferencesOnly())
        {
            insert_recordset custLedgerReconciliationCurrencyTmp
            (
                AccountingDate,
                CustAmountCurrency,
                CustomerAccountId,
                CustomerCurrencyBalance,
                CustomerMainAccountId,
                CustomerName,
                LedgerAccount,
                LedgerCurrencyBalance,
                LedgerAccountName,
                MainAccountId,
                MainAccountName,
                Voucher,
                IsCalcBalanceDiff,
                LedgerAmountCurrency,
                LedgerJournalId
            )
            select AccountingDate, CustAmountCurrency, CustomerAccountId, CustomerCurrencyBalance, CustomerMainAccountId, CustomerName, LedgerAccount,
                LedgerCurrencyBalance, LedgerAccountName, MainAccountId, MainAccountName, Voucher, isCalcBalanceDiff from custLedgerReconciliationCurrencyReportTmp
                order by MainAccountId, AccountingDate, Voucher, CustomerAccountId
            join CurrencyAmount, JournalNumber from ledgerReconciliationLedgerCurrencyTmp
                order by MainAccountId, AccountingDate, Voucher, CurrencyAmount asc
                where ledgerReconciliationLedgerCurrencyTmp.MainAccountId == custLedgerReconciliationCurrencyReportTmp.MainAccountId
                    && ledgerReconciliationLedgerCurrencyTmp.AccountingDate == custLedgerReconciliationCurrencyReportTmp.AccountingDate
                    && ledgerReconciliationLedgerCurrencyTmp.Voucher == custLedgerReconciliationCurrencyReportTmp.Voucher
                    && ledgerReconciliationLedgerCurrencyTmp.CurrencyAmount != custLedgerReconciliationCurrencyReportTmp.CustAmountCurrency;
        }
        else
        {
            insert_recordset custLedgerReconciliationCurrencyTmp
            (
                AccountingDate,
                CustAmountCurrency,
                CustomerAccountId,
                CustomerCurrencyBalance,
                CustomerMainAccountId,
                CustomerName,
                LedgerAccount,
                LedgerCurrencyBalance,
                LedgerAccountName,
                MainAccountId,
                MainAccountName,
                Voucher,
                IsCalcBalanceDiff,
                LedgerAmountCurrency,
                LedgerJournalId
            )
            select AccountingDate, CustAmountCurrency, CustomerAccountId, CustomerCurrencyBalance, CustomerMainAccountId, CustomerName, LedgerAccount,
                LedgerCurrencyBalance, LedgerAccountName, MainAccountId, MainAccountName, Voucher, isCalcBalanceDiff from custLedgerReconciliationCurrencyReportTmp
                order by MainAccountId, AccountingDate, Voucher, CustomerAccountId
            join CurrencyAmount, JournalNumber from ledgerReconciliationLedgerCurrencyTmp
                order by MainAccountId, AccountingDate, Voucher, CurrencyAmount asc
                where ledgerReconciliationLedgerCurrencyTmp.MainAccountId == custLedgerReconciliationCurrencyReportTmp.MainAccountId
                    && ledgerReconciliationLedgerCurrencyTmp.AccountingDate == custLedgerReconciliationCurrencyReportTmp.AccountingDate
                    && ledgerReconciliationLedgerCurrencyTmp.Voucher == custLedgerReconciliationCurrencyReportTmp.Voucher;
        }

        if (this.parmIncludeDetails())
        {
            this.reconcileMultiTransOneVoucher(_userConnection);
        }

        update_recordSet custLedgerReconciliationCurrencyTmp setting
            CurrencyBalanceDifference = (custLedgerReconciliationCurrencyTmp.CustAmountCurrency - custLedgerReconciliationCurrencyTmp.LedgerAmountCurrency),
            IsCalcBalanceDiff = NoYes::Yes
            where custLedgerReconciliationCurrencyTmp.IsCalcBalanceDiff == NoYes::No;

        // Insert the ledger journal records which cannot be reconciled.
        insert_recordset custLedgerReconciliationCurrencyTmp
        (
            AccountingDate,
            LedgerAmountCurrency,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            Voucher
        )
        select AccountingDate, CurrencyAmount, JournalNumber, MainAccountId, MainAccountName, Voucher from ledgerReconciliationLedgerCurrencyTmp
            order by MainAccountId, AccountingDate, Voucher
        notExists join custLedgerReconciliationCurrencyReportTmp
            where ledgerReconciliationLedgerCurrencyTmp.MainAccountId == custLedgerReconciliationCurrencyReportTmp.MainAccountId
                && ledgerReconciliationLedgerCurrencyTmp.AccountingDate == custLedgerReconciliationCurrencyReportTmp.AccountingDate
                && ledgerReconciliationLedgerCurrencyTmp.Voucher == custLedgerReconciliationCurrencyReportTmp.Voucher;

        update_recordSet custLedgerReconciliationCurrencyTmp setting
            CurrencyBalanceDifference = (0 - custLedgerReconciliationCurrencyTmp.LedgerAmountCurrency)
            where custLedgerReconciliationCurrencyTmp.IsCalcBalanceDiff == NoYes::No;

        // Insert the customer transaction (CustTrans) records which cannot be reconciled.
        insert_recordset custLedgerReconciliationCurrencyTmp
        (
            AccountingDate,
            CustAmountCurrency,
            CustomerAccountId,
            CustomerCurrencyBalance,
            CustomerMainAccountId,
            CustomerName,
            LedgerAccount,
            LedgerCurrencyBalance,
            LedgerAccountName,
            MainAccountId,
            MainAccountName,
            Voucher,
            CurrencyBalanceDifference
        )
        select AccountingDate, CustAmountCurrency, CustomerAccountId, CustomerCurrencyBalance, CustomerMainAccountId, CustomerName, LedgerAccount,
            LedgerCurrencyBalance, LedgerAccountName, MainAccountId, MainAccountName, Voucher, CurrencyBalanceDifference from custLedgerReconciliationCurrencyReportTmp
            order by mainaccountid, accountingdate, voucher, customeraccountid
        notexists join ledgerReconciliationLedgerCurrencyTmp
            where ledgerReconciliationLedgerCurrencyTmp.MainAccountId == custLedgerReconciliationCurrencyReportTmp.MainAccountId
                && ledgerReconciliationLedgerCurrencyTmp.AccountingDate == custLedgerReconciliationCurrencyReportTmp.AccountingDate
                && ledgerReconciliationLedgerCurrencyTmp.Voucher == custLedgerReconciliationCurrencyReportTmp.Voucher;

        // Set the localized main account name
        if (languageId)
        {
            update_recordset custLedgerReconciliationCurrencyTmp setting
                MainAccountName = mainAccountTranslation.Name
            join MainAccountId from mainAccount
                where custLedgerReconciliationCurrencyTmp.MainAccountId == mainAccount.MainAccountId
            join Name from mainAccountTranslation
                where mainAccountTranslation.MainAccount == mainAccount.RecId
                    && mainAccountTranslation.LanguageId == languageId;
        }

        // Populate custLedgerReconciliationTmp based on ledger currency selection.
        if(this.ledgerCurrencySelection == LedgerCurrencySelection::Accounting)
        {
            this.populateCustLedgerReconciliationAccountingCurrencyResult();
        }
        else if (this.ledgerCurrencySelection == LedgerCurrencySelection::Reporting)
        {
            this.populateCustLedgerReconciliationReportingCurrencyResult();
        }

        if (SsrsPreProcessReportSkipDefaultDatabaseTrxScope::instance().isEnabled())
        {
            custTransTmp.dispose();
            custTransTmpRef.dispose();
            ledgerReconciliationLedgerCurrencyTmp.dispose();
            custLedgerReconciliationCurrencyTmp.dispose();
            custLedgerReconciliationCurrencyReportTmp.dispose();
            ledgerReconciliationLedgerTmp.dispose();
            ledgerReconciliationLedgerTmpSummary.dispose();
            ledgerReconcileAccountsTmp.dispose();
        }

        return custLedgerReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeZeroAmtTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removing zero amount transactions.
    /// </summary>
    private void removeZeroAmtTransactions()
    {
        delete_from custLedgerReconciliationCurrencyTmp
                where custLedgerReconciliationCurrencyTmp.LedgerAmountCurrency == 0
                && custLedgerReconciliationCurrencyTmp.CustAmountCurrency == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reconcileMultiTransOneVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fix reconciliation on records where multiple transactions are recorded on one voucher.
    /// </summary>
    /// <param name="_userConnection">
    /// User connection used with custLedgerReconciliationTmp
    /// </param>
    /// <remarks>
    /// Incorrect transactions have the ledger record applied to multiple customer records.
    /// </remarks>
    private void reconcileMultiTransOneVoucher(UserConnection _userConnection)
    {
        CustLedgerReconciliationCurrencyTmp custLedgerReconciliationCurrencyTmpReconcile;
        CustLedgerReconciliationCurrencyTmp custLedgerReconciliationCurrencyTmpSelfReference;

        boolean isConnectionSetup = CustLedgerReconciliationCurrencyDisposeTempTableFlight::instance().isEnabled();

        if (isConnectionSetup && _userConnection)
        {
            custLedgerReconciliationCurrencyTmpSelfReference.setConnection(_userConnection);
            custLedgerReconciliationCurrencyTmp.setConnection(_userConnection);
        }
        else
        {
            CustReport_LedgerReconciliation::takeOwnershipOfTempTable(custLedgerReconciliationCurrencyTmpSelfReference, _userConnection);
            CustReport_LedgerReconciliation::takeOwnershipOfTempTable(custLedgerReconciliationCurrencyTmp, _userConnection);
        }

        custLedgerReconciliationCurrencyTmpSelfReference.linkPhysicalTableInstance(custLedgerReconciliationCurrencyTmp);

        if (_userConnection)
        {
            custLedgerReconciliationCurrencyTmpReconcile.setConnection(_userConnection);
        }

        insert_recordSet custLedgerReconciliationCurrencyTmpReconcile
        (
            AccountingDate,
            LedgerAmountCurrency,
            MainAccountID,
            MainAccountName,
            LedgerJournalId,
            Voucher,
            CustAmountCurrency
        )
        select AccountingDate,
            LedgerAmountCurrency,
            MainAccountID,
            MainAccountName,
            LedgerJournalId,
            Voucher,
            sum(CustAmountCurrency)
        from custLedgerReconciliationCurrencyTmp
        group by AccountingDate,
            LedgerAmountCurrency,
            MainAccountID,
            MainAccountName,
            LedgerJournalId,
            Voucher
        where custLedgerReconciliationCurrencyTmp.custAmountCurrency != 0
        exists join custLedgerReconciliationCurrencyTmpSelfReference
            where custLedgerReconciliationCurrencyTmpSelfReference.MainAccountId == custLedgerReconciliationCurrencyTmp.MainAccountId
                && custLedgerReconciliationCurrencyTmpSelfReference.LedgerJournalId == custLedgerReconciliationCurrencyTmp.LedgerJournalId
                && custLedgerReconciliationCurrencyTmpSelfReference.Voucher == custLedgerReconciliationCurrencyTmp.Voucher
                && custLedgerReconciliationCurrencyTmpSelfReference.RecId != custLedgerReconciliationCurrencyTmp.RecId;

        // We want to leave transaction sets as-is where there is a discrepancy between the ledger and summed customer amounts for accounting and reporting currency.
        delete_from custLedgerReconciliationCurrencyTmpReconcile
            where custLedgerReconciliationCurrencyTmpReconcile.custAmountCurrency != custLedgerReconciliationCurrencyTmpReconcile.LedgerAmountCurrency;

        // If parmShowDifferencesOnly is true other records were taken care of earlier in the process, so we special case them here.
        if (this.parmShowDifferencesOnly())
        {
            delete_from custLedgerReconciliationCurrencyTmp
            exists join custLedgerReconciliationCurrencyTmpReconcile
                where custLedgerReconciliationCurrencyTmp.MainAccountId == custLedgerReconciliationCurrencyTmpReconcile.MainAccountId
                    && custLedgerReconciliationCurrencyTmp.LedgerJournalId == custLedgerReconciliationCurrencyTmpReconcile.LedgerJournalId
                    && custLedgerReconciliationCurrencyTmp.Voucher == custLedgerReconciliationCurrencyTmpReconcile.Voucher;
        }
        else
        {
            update_recordSet custLedgerReconciliationCurrencyTmp
                setting LedgerAmountCurrency = custLedgerReconciliationCurrencyTmp.custAmountCurrency
            exists join custLedgerReconciliationCurrencyTmpReconcile
                where custLedgerReconciliationCurrencyTmp.MainAccountId == custLedgerReconciliationCurrencyTmpReconcile.MainAccountId
                    && custLedgerReconciliationCurrencyTmp.LedgerJournalId == custLedgerReconciliationCurrencyTmpReconcile.LedgerJournalId
                    && custLedgerReconciliationCurrencyTmp.Voucher == custLedgerReconciliationCurrencyTmpReconcile.Voucher;
        }

        if (isConnectionSetup)
        {
            // custLedgerReconciliationCurrencyTmp and custLedgerReconciliationCurrencyTmpSelfReference are the same temp table.
            // It would be enough to dispose one only.
            custLedgerReconciliationCurrencyTmp.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpRanges</Name>
				<Source><![CDATA[
    private void setUpRanges()
    {
        CustLedgerAccounts custLedgerAccounts;

        if (!fromDate)
        {
            fromDate = dateNull();
        }

        if (!toDate)
        {
            toDate = maxDate();
        }

        if (!fromVoucher)
        {
            fromVoucher = '';
        }

        if (!toVoucher)
        {
            toVoucher = strMax(extendedtypestr(Voucher));
        }

        if (!fromPostingProfile)
        {
            fromPostingProfile = '';
        }

        if (!toPostingProfile)
        {
            select firstonly PostingProfile
                from custLedgerAccounts
                order by PostingProfile desc;

            toPostingProfile = custLedgerAccounts.PostingProfile;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeOwnershipOfTempTable</Name>
				<Source><![CDATA[
    private static void takeOwnershipOfTempTable(Common _tempDbTable, UserConnection _userConnection)
    {
        DictTable dictTable;
        TableId tableId;
        #SRSFramework

        if (_userConnection)
        {
            _tempDbTable.setConnection(_userConnection);

            tableId = _tempDbTable.TableId;
            dictTable = new DictTable(tableId);

            if (!dictTable)
            {
                throw error(strFmt("@SYS4007193", tableId2name(tableId)));
            }

            new ExecutePermission().assert();
            dictTable.callObject(#TempDBMethodName_TakeOwnership, _tempDbTable, true);
            CodeAccessPermission::revertAssert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>