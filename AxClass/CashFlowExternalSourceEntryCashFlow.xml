<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowExternalSourceEntryCashFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>CashFlowExternalSourceEntryCashFlow</c> class is the implementation between external cash flow entries and cash flow.
/// </summary>
[ExportMetadata(classStr(LedgerCovIDocument), 'CashFlowExternalSourceEntry')]
[ExportAttribute('Dynamics.AX.Application.LedgerCovIDocument')]
final internal class CashFlowExternalSourceEntryCashFlow implements LedgerCovIDocument, LedgerCovIDocumentSingleTransactionScope
{
    private TableId CashFlowExternalSourceEntryTableNum = tableNum(CashFlowExternalSourceEntry);
    private date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    private LedgerCovContext ledgerCovContext;
    private SysInstrumentationProgressLogger progressLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateCashFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates cash flow.
    /// </summary>
    /// <param name = "_allNew">
    /// Identifies when cash flow is generated for only new documents or all documents.
    /// </param>
    public void generateCashFlow(AllNew _allNew)
    {  
        this.init();

        if (LedgerCovDocumentSingleTransactionScopeKillSwitchFlight::isEnabled())
        {
            this.generateCashFlowSetBased(_allNew);
        }
        else
        {
            if (CashflowInsightsActivation::isActive())
            {
                this.generateCashFlowForProcessSet(_allNew);
                this.deleteCompletedRows();
            }
            else
            {
                this.deleteExistingRows();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        progressLogger = this.createProgressLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerCovContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initLedgerCovContext(LedgerCovContext _ledgerCovContext)
    {
        this.ledgerCovContext = _ledgerCovContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void generateCashFlowForProcessSet(AllNew _allNew)
    {
        const int SetSize = 1000;

        RecId lastRecId;
        RecId fromRecId;
        RecId toRecId;

        Query countByRecIdQuery = this.buildRecIdQuery(_allNew);
        QueryRun countByRecIdQueryRun = new QueryRun(countByRecIdQuery);

        int i = 0;
        while (countByRecIdQueryRun.next())
        {
            i++;

            CashFlowExternalSourceEntry cashFlowExternalSourceEntry = countByRecIdQueryRun.get(CashFlowExternalSourceEntryTableNum);

            RecId currentRecId = cashFlowExternalSourceEntry.RecId;

            if (i == 1)
            {
                fromRecId = currentRecId;
            }

            if (i == SetSize)
            {
                toRecId = currentRecId;

                this.processCashFlowForProcessSet(_allNew, fromRecId, toRecId);

                i = 0;
                fromRecId = 0;
                toRecId = 0;
            }

            lastRecId = currentRecId;
        }

        if (i > 0 )
        {
            toRecId = lastRecId;

            this.processCashFlowForProcessSet(_allNew, fromRecId, toRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void processCashFlowForProcessSet(AllNew _allNew,  RecId _fromRecId, RecId _toRecId)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowExternalSource))
        {
            System.Exception exception;
            RecId extSourceEntryRecId;
            try
            {
                CashFlowExternalSourceEntry extSourceEntry;

                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(extSourceEntry, NoYes::Yes);

                Query q = this.buildGenerateCashFlowQueryForSet(_allNew, _fromRecId, _toRecId);

                QueryRun qr = new QueryRun(q);
                while (qr.next())
                {
                    extSourceEntry = qr.get(CashFlowExternalSourceEntryTableNum);
                    extSourceEntryRecId = extSourceEntry.RecId;
                    extSourceEntry.updateLedgerCov(ledgerCoverage);
                }

                LedgerCov::deleteForTransTableIdAndFilter(tableNum(CashFlowExternalSourceEntry), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                ledgerCoverage.insertDatabase();

                LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(CashFlowExternalSourceEntry), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                this.updateCashFlowExternalSourceEntryCovStatus(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(CashFlowExternalSourceEntry), extSourceEntryRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(CashFlowExternalSourceEntry), extSourceEntryRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQueryForSet</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQueryForSet(AllNew _allNew, RecId _fromRecId, RecId _toRecId)
    {
        Query query = this.buildGenerateCashFlowQuery(_allNew);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(CashFlowExternalSourceEntry));

        QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(CashFlowExternalSourceEntry, RecId));
        qbr.value(SysQuery::range(_fromRecid, _toRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRecIdQuery</Name>
				<Source><![CDATA[
    private Query buildRecIdQuery(AllNew _allNew)
    {
        Query query = this.buildGenerateCashFlowQuery(_allNew);

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(CashFlowExternalSourceEntry));

        qbds.addSelectionField(fieldNum(CashFlowExternalSourceEntry, RecId));
        qbds.addOrderByField(fieldNum(CashFlowExternalSourceEntry, RecId), SortOrder::Ascending);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashFlowForecasting, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessExecutionMessage</Name>
				<Source><![CDATA[
    private void logProcessExecutionMessage(Exception _exceptionType, SysInfoLogStr _message, URL _helpUrl = '', SysInfoAction _sysInfoAction = null)
    {
        if (ledgerCovContext != null && ledgerCovContext.parmProcessExecutionSourceLinkRecId() != 0)
        {
            ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
            messageLogItem.parmException(_exceptionType);
            messageLogItem.parmProcessExecutionSourceLink(ledgerCovContext.parmProcessExecutionSourceLinkRecId());
            messageLogItem.parmMessage(_message);

            ProcessExecutionMessageLog::insertMessage(messageLogItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQuery</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQuery(AllNew _allNew)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(CashFlowExternalSourceEntryTableNum);

        qbds.addRange(fieldNum(CashFlowExternalSourceEntry, TransactionDate))
            .value(queryRange(currentDate, dateNull()));

        if (_allNew == AllNew::New)
        {
            qbds.addRange(fieldNum(CashFlowExternalSourceEntry, CovStatus)).value(queryValue(0));
        }

        QueryBuildDataSource extSourceLEDS = qbds.addDataSource(tableNum(CashFlowExternalSourceLegalEntity));
        extSourceLEDS.joinMode(JoinMode::InnerJoin);
        extSourceLEDS.addLink(fieldNum(CashFlowExternalSourceEntry, ExternalSourceLegalEntity), fieldNum(CashFlowExternalSourceLegalEntity, RecId));
        extSourceLEDS.addRange(fieldNum(CashFlowExternalSourceLegalEntity,LegalEntity)).value(queryValue(CompanyInfo::current()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingRows</Name>
				<Source><![CDATA[
    private void deleteExistingRows()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            LedgerCov::deleteForTransTableId(CashFlowExternalSourceEntryTableNum);
            LedgerCovDocument::deleteForTransTableId(CashFlowExternalSourceEntryTableNum);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedRows</Name>
				<Source><![CDATA[
    private void deleteCompletedRows()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            this.deleteCompletedLedgerCovRows();
            this.deleteCompletedLedgerCovDocumentRows();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovRows()
    {
        CashFlowExternalSourceEntry extSourceEntry;
        LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

        // Delete ledgerCov that has transaction date before current date.
        // Those are the records generated for previous run, but will not be used any more.
        delete_from ledgerCov
            where ledgerCov.TransDate < currentDate
                && ledgerCov.TransTableId == CashFlowExternalSourceEntryTableNum;

        // Delete ledgerCov that point to a non-exists CashFlowExternalSourceEntry record
        delete_from ledgerCov
            where ledgerCov.TransTableId == CashFlowExternalSourceEntryTableNum
                notexists join extSourceEntry
                    where ledgerCov.TransTableId == CashFlowExternalSourceEntryTableNum
                        && ledgerCov.TransRecId == extSourceEntry.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovDocumentRows()
    {
        CashFlowExternalSourceEntry extSourceEntry;
        LedgerCovDocument ledgerCovDocument = LedgerCovDocument::initializeForSetBasedDelete();

        // Delete ledgerCovDocument that has transaction date before current date.
        // Those are the records generated for previous run, but will not be used any more.
        delete_from ledgerCovDocument
                where ledgerCovDocument.TransDate < currentDate
                    && ledgerCovDocument.TransTableId == CashFlowExternalSourceEntryTableNum;

        // Delete ledgerCovDocument that point to a non-exists CashFlowExternalSourceEntry record
        delete_from ledgerCovDocument
                where ledgerCovDocument.TransTableId == CashFlowExternalSourceEntryTableNum
                    notexists join extSourceEntry
                        where ledgerCovDocument.TransTableId == CashFlowExternalSourceEntryTableNum
                            && ledgerCovDocument.TransRecId == extSourceEntry.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowSetBased</Name>
				<Source><![CDATA[
    private void generateCashFlowSetBased(AllNew _allNew)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowExternalSource))
        {
            System.Exception exception;
            RecId extSourceEntryRecId;

            try
            {
                if (CashflowInsightsActivation::isActive())
                {
                    CashFlowExternalSourceEntry extSourceEntry;

                    ttsbegin;

                    LedgerCoverage ledgerCoverage = LedgerCoverage::construct(extSourceEntry, NoYes::Yes);

                    Query q = this.buildGenerateCashFlowQuery(_allNew);
                    QueryRun qr = new QueryRun(q);
                    while (qr.next())
                    {
                        extSourceEntry = qr.get(CashFlowExternalSourceEntryTableNum);
                        extSourceEntry.updateLedgerCov(ledgerCoverage);
                    }

                    this.deleteLedgerCovRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                    ledgerCoverage.insertDatabase();

                    this.deleteLedgerCovDocumentRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                    this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                    this.updateCashFlowExternalSourceEntryCovStatus(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                    ttscommit;
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(CashFlowExternalSourceEntry), extSourceEntryRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(CashFlowExternalSourceEntry), extSourceEntryRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCov::deleteForTransTableId(CashFlowExternalSourceEntryTableNum);
        }
        else
        {
            LedgerCov::deleteForTransTableIdAndFilter(CashFlowExternalSourceEntryTableNum, _filter);

            CashFlowExternalSourceEntry extSourceEntry;
            LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

            // Delete ledgerCov that has transaction date before current date.
            // Those are the records generated for previous run, but will not be used any more.
            delete_from ledgerCov
                where ledgerCov.TransDate < currentDate
                    && ledgerCov.TransTableId == CashFlowExternalSourceEntryTableNum;

            // Delete ledgerCov that point to a non-exists CashFlowExternalSourceEntry record
            delete_from ledgerCov
                where ledgerCov.TransTableId == CashFlowExternalSourceEntryTableNum
                    notexists join extSourceEntry
                        where ledgerCov.TransTableId == CashFlowExternalSourceEntryTableNum
                            && ledgerCov.TransRecId == extSourceEntry.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashFlowExternalSourceEntryCovStatus</Name>
				<Source><![CDATA[
    private void updateCashFlowExternalSourceEntryCovStatus(TmpDataAreaRecIdFilter _updatedRows)
    {
        CashFlowExternalSourceEntry extSourceEntry;

        extSourceEntry.skipDataMethods(true);
        extSourceEntry.skipDatabaseLog(true);
        extSourceEntry.skipEvents(true);

        update_recordset extSourceEntry
            setting CovStatus = 1
            exists join _updatedRows
                where extSourceEntry.RecId == _updatedRows.RefRecId
                    && _updatedRows.RefTableId == CashFlowExternalSourceEntryTableNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovDocumentRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCovDocument::deleteForTransTableId(CashFlowExternalSourceEntryTableNum);
        }
        else
        {
            LedgerCovDocument::deleteForTransTableIdAndFilter(CashFlowExternalSourceEntryTableNum, _filter);

            CashFlowExternalSourceEntry extSourceEntry;
            LedgerCovDocument ledgerCovDocument = LedgerCovDocument::initializeForSetBasedDelete();

            // Delete ledgerCovDocument that has transaction date before current date.
            // Those are the records generated for previous run, but will not be used any more.
            delete_from ledgerCovDocument
                where ledgerCovDocument.TransDate < currentDate
                    && ledgerCovDocument.TransTableId == CashFlowExternalSourceEntryTableNum;

            // Delete ledgerCovDocument that point to a non-exists CashFlowExternalSourceEntry record
            delete_from ledgerCovDocument
                where ledgerCovDocument.TransTableId == CashFlowExternalSourceEntryTableNum
                    notexists join extSourceEntry
                        where ledgerCovDocument.TransTableId == CashFlowExternalSourceEntryTableNum
                            && ledgerCovDocument.TransRecId == extSourceEntry.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void insertLedgerCovDocumentRows(TmpDataAreaRecIdFilter _filter)
    {
        LedgerCovDocument ledgerCovDocument;
        CashFlowExternalSourceEntry extSourceEntry;
        CashFlowExternalSourceLegalEntity extSourceLE;
        CashFlowExternalSource extSource;

        TableId cashFlowExternalSourceEntryTableId = CashFlowExternalSourceEntryTableNum;
        LedgerCovDocumentType type = LedgerCovDocumentType::ExternalSourceEntry;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();
        
        insert_recordset ledgerCovDocument
            (TransTableId,
            TransRecId,
            TransDate,
            Type,
            AccountingCurrency,
            Number,
            AccountNumber,
            AccountName,
            SubTypeName)
            select cashFlowExternalSourceEntryTableId,
                RecId,
                TransactionDate,
                type,
                accountingCurrency,
                DocumentNumber,
                AccountNumber,
                AccountName
                from extSourceEntry
            join _filter
                where extSourceEntry.TableId == _filter.RefTableId
                && extSourceEntry.RecId == _filter.RefRecId
            join extSourceLE
                where extSourceEntry.ExternalSourceLegalEntity == extSourceLE.RecId
                    && extSourceLE.LegalEntity == CompanyInfo::current()
            join Name from extSource
                where extSourceLE.ExternalSource == extSource.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The document name.
    /// </summary>
    /// <returns>The document name.</returns>
    public str getDocumentName()
    {
        return "@CashManagement:CashFlowExternalSourceDocumentName";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of the document.
    /// </summary>
    /// <param name = "_tableId">Identifies the document table.</param>
    /// <param name = "_recId">Identifies the row of the document.</param>
    /// <returns>The number of the document.</returns>
    public Name getDocumentNum(TableId _tableId, RecId _recId)
    {
        Name documentNum;

        switch (_tableId)
        {
            case CashFlowExternalSourceEntryTableNum:
                CashFlowExternalSourceEntry extSourceEntry;
                select firstonly entryId from extSourceEntry where extSourceEntry.RecId == _recId;
                documentNum = extSourceEntry.EntryId;
                break;
        }

        return documentNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>