<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerTurnoverView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RLedgerTurnoverView</c> class implements UI logic for turnover statements.
/// </summary>
class RLedgerTurnoverView
{
    const int dataKeyPos = 1;
    const int dataLevelPos = 2;
    const int dataLineRecIdPos = 3;

    const str str2ConDivider = ',';

    const int bufferSize = 30;
    const int totalPicture = 3;
    const int ledgerAccountPicture = 2;

    const int transLevel = 0;
    const int nonAccountTypeColumn = 0;

    RLedgerTurnoverSheet    RLedgerTurnoverSheet;
    int                     curKeyLength;
    int                     curRowNum;
    FormListControl         listControl;
    Map                     mapData;
    boolean                 refreshRows;
    MapIterator             turnoverIterator;
    CurrencyType_RU         currencyType;
    CurrencyCode            currencyCode;
    TransDate               fromDate;
    TransDate               toDate;
    int                     keyLength;
    str                     title;
    container               amountTypeCon;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>contextMenu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mockup for the eliminated context menu method.
    /// </summary>
    /// <param name="_hwnd">
    /// The window handle.
    /// </param>
    /// <param name="_idx">
    /// The grid line number.
    /// </param>
    /// <param name="_col">
    /// The grid column number.
    /// </param>
    public void contextMenu(HWND _hwnd, int _idx, int _col){}

]]></Source>
			</Method>
			<Method>
				<Name>drillThrough</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the drill-through action.
    /// </summary>
    /// <param name="_idx">
    /// The grid line number.
    /// </param>
    /// <param name="_col">
    /// The grid column number.
    /// </param>
    public void drillThrough(int _idx, int _col)
    {
        container                   dataCon;
        RecId                       reportLineRecId;
        int                         amountType;

        _col++;

        if (! listcontrol.getitem(_idx) || ! listcontrol.getitem(_idx).data() || conpeek(amounttypecon, _col) == nonaccounttypecolumn)
        {
            return;
        }

        dataCon = str2con(listControl.getItem(_idx).data(), str2ConDivider, false);
        reportLineRecId = conPeek(dataCon, dataLineRecIdPos);

        amountType = conPeek(amountTypeCon, _col);

        RLedgerTurnoverDrillThroughAction::drillThrough(reportLineRecId, amountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandOneRow</Name>
				<Source><![CDATA[
    private void expandOneRow(int  _idx,
                              int  _depth)
    {
        MapIterator                 it = new MapIterator(mapData);
        str                         key;
        str                         curKey;
        str                         curLCKey;
        container                   curValue;
        int                         curLevel;
        boolean                     needRedraw;
        container                   dataCon;
        container                   dataConLC;
        int                         curIdx = _idx + 1;

        dataCon = str2con(listControl.getItem(_idx).data(), str2ConDivider, false);
        key = conPeek(dataCon, dataKeyPos);

        if (! it.find(key))
        {
            return;
        }

        it.next();

        while (it.more())
        {
            curKey = it.key();
            curValue = it.value();

            curLevel = conPeek(curValue, conLen(curValue));

            dataConLC = str2con(listControl.getItem(curidx).data(), ',', false);
            curLCKey = conPeek(dataConLC, dataKeyPos);

            if (curLevel > _depth || curLevel == transLevel)
            {
                if (curKey == curLCKey)
                {
                    it.next();
                    curIdx++;
                    continue;
                }

                this.insertOneRow(curKey, curValue, curIdx);

                needRedraw = true;
                curIdx++;
            }
            else
            {
                break;
            }

            it.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRows</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs fetching of the next row block.
    /// </summary>
    /// <param name="_maxDepth">
    /// The maximum depth.
    /// </param>
    public void fetchNextRows(int  _maxDepth = curKeyLength)
    {
        str                         key;
        container                   value;
        int                         level;

        str getSumStr(real _amount)
        {
            return strFmt('%1', _amount);
        }

        if (refreshRows)
        {
            turnoverIterator = new MapIterator(mapData);
            refreshRows      = false;
        }

        while (turnoverIterator.more())
        {
            key   = turnoverIterator.key();
            value = turnoverIterator.value();

            level = conPeek(value, conLen(value));

            if (level > _maxDepth
                || (level == transLevel && _maxDepth != keyLength))
            {
                turnoverIterator.next();
                continue;
            }

            this.insertOneRow(key, value);

            turnoverIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountTypeCon</Name>
				<Source><![CDATA[
    public container getAmountTypeCon()
    {
        return amounttypecon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency code parameter value.
    /// </summary>
    /// <returns>
    /// The currency code parameter value.
    /// </returns>
    public CurrencyCode getCurrencyCode()
    {
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency type parameter value.
    /// </summary>
    /// <returns>
    /// The currency type parameter value.
    /// </returns>
    public CurrencyType_RU getCurrencyType()
    {
        return currencyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the start date parameter value.
    /// </summary>
    /// <returns>
    /// The start date parameter value.
    /// </returns>
    public TransDate getFromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHelpText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mockup of the eliminated help text method.
    /// </summary>
    public str getHelpText(int _idx,int _col)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKey</Name>
				<Source><![CDATA[
    private str getKey(int _value)
    {
        const int keyLength_local = 5;
        str     value;
        str     ret;

        value = int2str(_value);

        ret = strrep('0', keyLength_local - strLen(value)) + value;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the report title.
    /// </summary>
    /// <returns>
    /// The report title.
    /// </returns>
    public str getTitle()
    {
        return title;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ending date parameter value.
    /// </summary>
    /// <returns>
    /// The ending date parameter value.
    /// </returns>

    public TransDate getToDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes internal parameters.
    /// </summary>
    public void initAccounts()
    {
        container                   groupKey = RLedgerTurnoverSheet.GroupKey;
        RLedgerTurnoverSheetHeader  RLedgerTurnoverSheetHeader = RLedgerTurnoverSheetHeader::findRefRecId(RLedgerTurnoverSheet.RecId);

        currencyType    = RLedgerTurnoverSheet.CurrencyType;
        currencyCode    = RLedgerTurnoverSheet.CurrencyCode;
        fromDate        = RLedgerTurnoverSheet.FromDate;
        toDate          = RLedgerTurnoverSheet.ToDate;
        keyLength       = conLen(groupKey);
        curKeyLength    = keyLength;
        title           = RLedgerTurnoverSheetHeader.title;

        refreshRows = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the list view.
    /// </summary>
    public void initListView()
    {
        const int width = 130;
        const int nameWidth = 230;

        const int balanceDebitStart = 1;
        const int balanceCreditStart = 2;
        const int turnoverDebit = 3;
        const int turnoverCredit = 4;
        const int balanceDebitEnd = 5;
        const int balanceCreditEnd = 6;

        FormListColumn  listColumn;
        int             i;
        container       groupKey = RLedgerTurnoverSheet.GroupKey;

        RLedgerTurnoverSheetHeader  RLedgerTurnoverSheetHeader = RLedgerTurnoverSheetHeader::findRefRecId(RLedgerTurnoverSheet.RecId);

        FormListColumn createListColumn()
        {
            FormListColumn listColumnLocal;

            listColumnLocal = new FormListColumn();
            listColumnLocal.format(FormListFormat::Right);
            listColumnLocal.width(width);

            return listColumnLocal;
        }

        amountTypeCon = conNull();

        for (i=1; i <= conlen(groupKey); i++)
        {
            if (RLedgerTurnoverSheetHeader.GroupParam[i])
            {
                amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, nonAccountTypeColumn);

                listColumn = new FormListColumn();
                listColumn.format(FormListFormat::Left);

                listColumn.width(width);
                listColumn.text(RLedgerTurnoverSheetHeader.GroupParam[i]);
                listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
            }
        }

        if (RLedgerTurnoverSheetHeader.Name)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, nonAccountTypeColumn);

            listColumn = new FormListColumn();
            listColumn.format(FormListFormat::Left);
            listColumn.width(nameWidth);
            listColumn.text(RLedgerTurnoverSheetHeader.Name);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.TransDate)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, nonAccountTypeColumn);

            listColumn = new FormListColumn();
            listColumn.format(FormListFormat::Left);
            listColumn.width(nameWidth);
            listColumn.text(RLedgerTurnoverSheetHeader.TransDate);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.DocumentNum)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, nonAccountTypeColumn);

            listColumn = new FormListColumn();
            listColumn.format(FormListFormat::Left);
            listColumn.width(nameWidth);
            listColumn.text(RLedgerTurnoverSheetHeader.DocumentNum);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.Description)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, nonAccountTypeColumn);

            listColumn = new FormListColumn();
            listColumn.format(FormListFormat::Left);
            listColumn.width(nameWidth);
            listColumn.text(RLedgerTurnoverSheetHeader.Description);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.Txt)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, nonAccountTypeColumn);

            listColumn = new FormListColumn();
            listColumn.format(FormListFormat::Left);
            listColumn.width(nameWidth);
            listColumn.text(RLedgerTurnoverSheetHeader.Txt);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.BalanceDebitStart)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, balanceDebitStart);

            listColumn = createListColumn();
            listColumn.text(RLedgerTurnoverSheetHeader.BalanceDebitStart);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.BalanceCreditStart)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, balanceCreditStart);

            listColumn = createListColumn();
            listColumn.text(RLedgerTurnoverSheetHeader.BalanceCreditStart);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.TurnoverDebit)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, turnoverDebit);

            listColumn = createListColumn();
            listColumn.text(RLedgerTurnoverSheetHeader.TurnoverDebit);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.TurnoverCredit)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, turnoverCredit);

            listColumn = createListColumn();
            listColumn.text(RLedgerTurnoverSheetHeader.TurnoverCredit);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.SettlementDebit)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, nonAccountTypeColumn);

            listColumn = createListColumn();
            listColumn.text(RLedgerTurnoverSheetHeader.SettlementDebit);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.SettlementCredit)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, nonAccountTypeColumn);

            listColumn = createListColumn();
            listColumn.text(RLedgerTurnoverSheetHeader.SettlementCredit);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.BalanceDebitEnd)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, balanceDebitEnd);

            listColumn = createListColumn();
            listColumn.text(RLedgerTurnoverSheetHeader.BalanceDebitEnd);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        if (RLedgerTurnoverSheetHeader.BalanceCreditEnd)
        {
            amountTypeCon = conIns(amountTypeCon, conLen(amountTypeCon) + 1, balanceCreditEnd);

            listColumn = createListColumn();
            listColumn.text(RLedgerTurnoverSheetHeader.BalanceCreditEnd);
            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOneRow</Name>
				<Source><![CDATA[
    private void insertOneRow(str               _key,
                              container         _value,
                              int               _idx = -1)
    {
        const int specialParamsQty = 3;
        FormListItem                    listItem;
        int                             curSubItemNum;
        int                             i;
        int                             level;
        int                             idx;
        RLedgerTurnoverSheetLineType    RLedgerTurnoverSheetLineType;
        RecId                           reportLineRecId;

        level                        = conPeek(_value, conLen(_value));
        RLedgerTurnoverSheetLineType = conPeek(_value, conLen(_value) - 1);
        reportLineRecId              = conPeek(_value, conLen(_value) - 2);

        listItem = new FormListItem(conPeek(_value, 1));

        if (_idx >= 0)
        {
            listItem.idx(_idx);
        }
        else
        {
           listItem.idx(str2int(_key));
        }

        listItem.data(con2Str([_key, level, reportLineRecId]));

        switch (RLedgerTurnoverSheetLineType)
        {
            case RLedgerTurnoverSheetLineType::Total:
                listItem.image(totalPicture);
                break;

            default :
                if (level == 1)
                {
                    listItem.image(ledgerAccountPicture);
                }
                break;
        }

        idx = listControl.addItem(listItem);

        curSubItemNum = 0;

        for (i = 2; (i <= conLen(_value) - specialParamsQty); i++)
        {
            curSubItemNum++;

            listControl.setText(idx, conPeek(_value, i), curSubItemNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>listControlRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the list control.
    /// </summary>
    public void listControlRefresh()
    {
        this.fetchNextRows();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormListControl</Name>
				<Source><![CDATA[
    public FormListControl parmFormListControl(FormListControl _listControl = listControl)
    {
        listControl = _listControl;

        return listControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRLedgerTurnoverSheet</Name>
				<Source><![CDATA[
    public RLedgerTurnoverSheet parmRLedgerTurnoverSheet(RLedgerTurnoverSheet _RLedgerTurnoverSheet = RLedgerTurnoverSheet)
    {
        RLedgerTurnoverSheet = _RLedgerTurnoverSheet;

        return RLedgerTurnoverSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.initAccounts();

        this.initListView();

        mapData = Map::create(RLedgerTurnoverView::fillDataMap(RLedgerTurnoverSheet));

        this.fetchNextRows();

        this.setItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the list control item.
    /// </summary>
    protected void setItem()
    {
        FormListItem item;

        item = listControl.getItem(0);

        if (item)
        {
            item.stateFocus(true);
            item.stateSelected(true);
            listControl.setItem(item);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shrinkAllAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands or collapses all grouping parameters.
    /// </summary>
    /// <param name="_shrink">
    /// A Boolean parameters indicating whether to collapse or expand the rows.
    /// </param>
    public void shrinkAllAccounts(boolean _shrink)
    {
        int depth = 1;

        listControl.deleteAll();
        refreshRows     = true;

        curKeyLength = _shrink ? depth : keyLength;

        this.fetchNextRows(curKeyLength);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shrinkOneItem</Name>
				<Source><![CDATA[
    private void shrinkOneItem(int  _idx,
                               int  _depth = 1)
    {
        int             idx;
        int             level;
        container       dataCon;

        idx = listControl.getNextItem(FormListNext::All, _idx);

        while (idx != -1)
        {
            dataCon = str2con(listControl.getItem(idx).data(), str2ConDivider, false);
            level = conPeek(dataCon, dataLevelPos);

            if (_depth >= level && level != transLevel)
            {
                break;
            }

            listControl.delete(idx);
            idx = listControl.getNextItem(FormListNext::All, _idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static RLedgerTurnoverView construct()
    {
        return new RLedgerTurnoverView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDataMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills internal data structures.
    /// </summary>
    /// <param name="_RLedgerTurnoverSheet">
    /// The reference to the report table.
    /// </param>
    /// <returns>
    /// The packed internal structure.
    /// </returns>
    protected static container fillDataMap(RLedgerTurnoverSheet _RLedgerTurnoverSheet)
    {
        RLedgerTurnoverSheetLine    reportLine;
        int                         i;
        container                   groupKey = _RLedgerTurnoverSheet.GroupKey;
        container                   valueCon;
        Map                         mapData;
        Int                         curRowNum;
        RLedgerTurnoverSheetHeader  RLedgerTurnoverSheetHeader = RLedgerTurnoverSheetHeader::findRefRecId(_RLedgerTurnoverSheet.RecId);

        str getSumStr(real _amount)
        {
            return strFmt('%1', _amount);
        }

        str getKey(int _value)
        {
            const int keyLength_local = 5;
            str     value = int2str(_value);
            str     ret;

            ret = strrep('0', keyLength_local - strLen(value)) + value;

            return ret;
        }

        mapData = new Map(Types::String, Types::Container);

        while select reportLine
        order by LineNum
        where reportLine.RefRecId == _RLedgerTurnoverSheet.RecId
        {
            curRowNum++;
            valueCon = conNull();

            for (i = 1; i <= conLen(groupKey); i++)
            {
                if (RLedgerTurnoverSheetHeader.GroupParam[i])
                {
                    valueCon = conIns(valueCon, conLen(valueCon) + 1, reportLine.Parameter[i]);
                }
            }

            if (RLedgerTurnoverSheetHeader.Name)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, reportLine.Name);
            }

            if (RLedgerTurnoverSheetHeader.TransDate)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, reportLine.TransDate);
            }

            if (RLedgerTurnoverSheetHeader.DocumentNum)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, reportLine.DocumentNum);
            }

            if (RLedgerTurnoverSheetHeader.Description)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, reportLine.Description);
            }

            if (RLedgerTurnoverSheetHeader.Txt)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, reportLine.Txt);
            }

            if (RLedgerTurnoverSheetHeader.BalanceDebitStart)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, getSumStr(reportLine.BalanceDebitStart));
            }

            if (RLedgerTurnoverSheetHeader.BalanceCreditStart)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, getSumStr(reportLine.BalanceCreditStart));
            }

            if (RLedgerTurnoverSheetHeader.TurnoverDebit)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, getSumStr(reportLine.TurnoverDebit));
            }

            if (RLedgerTurnoverSheetHeader.TurnoverCredit)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, getSumStr(reportLine.TurnoverCredit));
            }

            if (RLedgerTurnoverSheetHeader.SettlementDebit)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, getSumStr(reportLine.SettlementDebit));
            }

            if (RLedgerTurnoverSheetHeader.SettlementCredit)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, getSumStr(reportLine.SettlementCredit));
            }

            if (RLedgerTurnoverSheetHeader.BalanceDebitEnd)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, getSumStr(reportLine.BalanceDebitEnd));
            }

            if (RLedgerTurnoverSheetHeader.BalanceCreditEnd)
            {
                valueCon = conIns(valueCon, conLen(valueCon) + 1, getSumStr(reportLine.BalanceCreditEnd));
            }

            valueCon = conIns(valueCon, conLen(valueCon) + 1, reportLine.RecId);
            valueCon = conIns(valueCon, conLen(valueCon) + 1, reportLine.LineType);
            valueCon = conIns(valueCon, conLen(valueCon) + 1, reportLine.Level);

            mapData.insert(
                getKey(curRowNum),
                valueCon);
        }

        return mapData.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRLedgerTurnoverView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the object.
    /// </summary>
    /// <param name="_RLedgerTurnoverSheet">
    /// The reference to the report table.
    /// </param>
    /// <returns>
    /// The instance of the class.
    /// </returns>
    public static RLedgerTurnoverView newRLedgerTurnoverView(RLedgerTurnoverSheet _RLedgerTurnoverSheet)
    {
        RLedgerTurnoverView RLedgerTurnoverView;

        RLedgerTurnoverView = RLedgerTurnoverView::construct();
        RLedgerTurnoverView.parmRLedgerTurnoverSheet(_RLedgerTurnoverSheet);

        return RLedgerTurnoverView;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>