<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsLocationWizardTableCtrl_OutboundDock</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class wmsLocationWizardTableCtrl_OutboundDock extends WMSLocationWizardTableCtrl_Dock
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNotExistTmp</Name>
				<Source><![CDATA[
        public boolean checkNotExistTmp(
        Common          _bufferToCheck = this.buffer(),
        boolean         onlySuper = false)
    {
        WMSLocationWizard   localLocationWizard = this.defaultDataParent() as WMSLocationWizard;
        WMSLocation         bufferToCheck = _bufferToCheck as WMSLocation;

        if (! super(bufferToCheck,onlySuper))
        {
            return false;
        }

        if (onlySuper)
        {
            return true;
        }

        if (! localLocationWizard.wmsLocationWizardTableCtrl_InboundDock().checkNotExistTmp(bufferToCheck,true))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the class.
    /// </summary>
    /// <param name="tableNo">
    /// The table number for which to get the description.
    /// </param>
    /// <returns>
    /// The description of the class.
    /// </returns>
    public Name description(int tableNo = 1)
    {
        if (tableNo != 1)
        {
            return super();
        }

        return "@SYS57496";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstKeyCountTmp</Name>
				<Source><![CDATA[
        public Integer getFirstKeyCountTmp(Integer startCnt, boolean checkOther = true)
    {
        Counter                                     cnt = super(startCnt);
        WMSLocationWizardTableCtrl_InboundDock      wmsLocationWizardTableCtrl_InboundDock;
        WMSLocationWizard                           localLocationWizard = this.defaultDataParent() as WMSLocationWizard;

        if (checkOther)
        {
            wmsLocationWizardTableCtrl_InboundDock = localLocationWizard.wmsLocationWizardTableCtrl_InboundDock();
            if (wmsLocationWizardTableCtrl_InboundDock.parmFormat() == this.parmFormat())
            {
                cnt = wmsLocationWizardTableCtrl_InboundDock.getFirstKeyCountTmp(cnt, false);
            }
        }
        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpTxt</Name>
				<Source><![CDATA[
        public HelpTxt helpTxt()
    {
        return "@SYS57497";
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFirstKeyCount</Name>
				<Source><![CDATA[
        protected void setFirstKeyCount()
    {
        WMSLocationWizardTableCtrl_InboundDock      wmsLocationWizardTableCtrl_InboundDock;
        WMSLocationWizard                           localLocationWizard = this.defaultDataParent() as WMSLocationWizard;

        super();

        wmsLocationWizardTableCtrl_InboundDock = localLocationWizard.wmsLocationWizardTableCtrl_InboundDock();
        if (wmsLocationWizardTableCtrl_InboundDock.parmFormat() == this.parmFormat())
        {
            nextKeyCount = wmsLocationWizardTableCtrl_InboundDock.getFirstKeyCountTmp(nextKeyCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sorting</Name>
				<Source><![CDATA[
        public Sorting sorting()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestFormat</Name>
				<Source><![CDATA[
        public NumberSequenceFormat suggestFormat()
    {
        return "@SYS50545";
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationType</Name>
				<Source><![CDATA[
        WMSLocationType wmsLocationType()
    {
        return WMSLocationType::OutputPort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static WMSLocationWizardTableCtrl_OutboundDock construct()
    {
        WMSLocationWizardTableCtrl_OutboundDock wmsLocationWizardTableCtrl_OutboundDock = new WMSLocationWizardTableCtrl_OutboundDock();

        return wmsLocationWizardTableCtrl_OutboundDock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehouseInformation</Name>
				<Source><![CDATA[
        static container getWarehouseInformation(InventLocationId _inventLocationId)
    {
        return WMSLocationWizardTableCtrl_Dock::getWarehouseInformation(_inventLocationId, WMSLocationType::InputPort);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWizard</Name>
				<Source><![CDATA[
        static WMSLocationWizardTableCtrl_OutboundDock newFromWizard(WMSLocationWizard wmsLocationWizard)
    {
        WMSLocationWizardTableCtrl_OutboundDock wmsLocationWizardTableCtrl_OutboundDock = WMSLocationWizardTableCtrl_OutboundDock::construct();

        wmsLocationWizardTableCtrl_OutboundDock.parmDefaultDataParent(wmsLocationWizard);
        return wmsLocationWizardTableCtrl_OutboundDock;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>