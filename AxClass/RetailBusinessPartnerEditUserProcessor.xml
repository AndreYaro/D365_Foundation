<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBusinessPartnerEditUserProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailBusinessPartnerEditUserProcessor</c> class to process the edit business partner user operation.
/// </summary>
internal class RetailBusinessPartnerEditUserProcessor extends RetailBusinessPartnerOperationProcessorBase
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    protected void processInternal(RetailBusinessPartnerOperation _operation)
    {
        RetailBusinessPartnerManageUserContract contract
            = RetailBusinessPartnerManageUserContract::deserialize(_operation.Value);
        
        CustHierarchyNode custHierarchyNode = custHierarchyNode::findByHierarchyAndEmail(_operation.BusinessPartnerID, contract.parmEmail());

        if (!custHierarchyNode.RecId)
        {
            throw error("@Retail:RetailB2BUserNotExistByEmailError");
        }

        if (custHierarchyNode.isNodeRemoved())
        {
            throw error("@Retail:RetailB2BUserPreviouslyRemovedError");
        }

        DirPersonName personName = DirPersonName::find(custHierarchyNode.Party, true);

        personName.FirstName = contract.parmFirstName();
        personName.LastName = contract.parmLastName();
        personName.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        personName.update();

        if (this.validateSpendingLimit(contract.parmSpendingLimit(), custHierarchyNode))
        {
            CustTable custTable = CustTable::findByPartyRecId(custHierarchyNode.Party, true);

            custTable.CreditMax = contract.parmSpendingLimit();
            custTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSpendingLimit</Name>
				<Source><![CDATA[
    private boolean validateSpendingLimit(AmountMST _spendingLimit, CustHierarchyNode _hierarchyNode)
    {
        if (_hierarchyNode.Role == CustHierarchyNodeRole::Admin)
        {
            return true;
        }

        CustHierarchyNode adminHierarchyNode;
        select firstonly Party from adminHierarchyNode
            where adminHierarchyNode.CustHierarchyId == _hierarchyNode.CustHierarchyId && adminHierarchyNode.Role == CustHierarchyNodeRole::Admin;

        CustTable adminCustTable = CustTable::findByPartyRecId(adminHierarchyNode.Party);
        
        return _spendingLimit <= adminCustTable.CreditMax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>