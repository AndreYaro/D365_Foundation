<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSGroupPickLineDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles details for grouped pick lines.
/// </summary>
internal final class WHSGroupPickLineDetails
{
    internal Qty lowestUOMOnWorkQty;
    internal UnitOfMeasureSymbol lowestUOMOnWork;
    internal InventQty inventQty;
    internal InventQty totalInventQty;
    internal InventQty pickedQty;
    private  WHSUOMSeqGroupId uomSeqGroupId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>WHSGroupPickLineDetails</c> class that provides
    /// the work qty in the lowest UOM of the group, the lowest UOM of the group, 
    /// and the invent qty for grouped pick lines.
    /// </summary>
    /// <param name = "_workLine">
    /// <c>WHSWorkLine</c> record that is the first line of a potential group.
    /// </param>
    /// <returns>
    /// New instance of the <c>WHSGroupPickLineDetails</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSGroupPickLineDetails newFromWorkLine(WHSWorkLine _workLine)
    {
        WHSGroupPickLineDetails groupPickLineDetails = new WHSGroupPickLineDetails();

        groupPickLineDetails.findSimilarWorkLines(_workLine);

        return groupPickLineDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForTotalGroupPickQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>WHSGroupPickLineDetails</c> class that provides
    /// the total invent qty for grouped pick lines.
    /// </summary>
    /// <param name = "_workLine">
    /// <c>WHSWorkLine</c> record that is the first line of a potential group.
    /// </param>
    /// <returns>
    /// New instance of the <c>WHSGroupPickLineDetails</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSGroupPickLineDetails newForTotalGroupPickQty(WHSWorkLine _workLine)
    {
        WHSGroupPickLineDetails groupPickTotalQty = new WHSGroupPickLineDetails();

        groupPickTotalQty.calculateTotalGroupPickQty(_workLine);

        return groupPickTotalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSimilarWorkLines</Name>
				<Source><![CDATA[
    private void findSimilarWorkLines(WHSWorkLine _workLine)
    {
        WHSWorkLine groupWorkLine;
        uomSeqGroupId = WHSInventTable::find(_workLine.ItemId).UOMSeqGroupId;

        while select groupWorkLine
            order by LineNum
            where groupWorkLine.WorkId == _workLine.WorkId
                && groupWorkLine.LineNum >= _workLine.LineNum
                && (groupWorkLine.WorkStatus == WHSWorkStatus::Open
                    || groupWorkLine.WorkStatus == WHSWorkStatus::InProcess)
        {
            if (!WHSWorkLine::canWorkLineBeGroupPicked(_workLine, groupWorkLine))
            {
                break;
            }

            this.updateGroupPickLineValues(groupWorkLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalGroupPickQty</Name>
				<Source><![CDATA[
    private void calculateTotalGroupPickQty(WHSWorkLine _workLine)
    {
        WHSWorkLine lastSkippedWorkLine;
        WHSWorkLine groupWorkLine;
        
        select firstonly lastSkippedWorkLine
            order by LineNum desc
            where lastSkippedWorkLine.WorkId == _workLine.WorkId
                && lastSkippedWorkLine.LineNum < _workLine.LineNum
                && lastSkippedWorkLine.WorkType == WHSWorkType::Pick
                && lastSkippedWorkLine.Skipped == NoYes::Yes;

        if (lastSkippedWorkLine)
        {
            while select groupWorkLine
            order by LineNum
            where groupWorkLine.WorkId == _workLine.WorkId
                && groupWorkLine.WorkType == WHSWorkType::Pick
                && groupWorkLine.LineNum > lastSkippedWorkLine.LineNum
                && groupWorkLine.WorkStatus != WHSWorkStatus::Cancelled
            {
                if (groupWorkLine.LineNum < _workLine.LineNum
                    && groupWorkLine.WorkStatus == WHSWorkStatus::Closed)
                {
                    if (!WHSWorkLine::canWorkLineBeGroupPicked(_workLine, groupWorkLine))
                    {
                        continue;
                    }

                    totalInventQty += groupWorkLine.InventQtyWork;
                    pickedQty += groupWorkLine.InventQtyWork - groupWorkLine.InventQtyRemain;
                }

                if (groupWorkLine.LineNum >= _workLine.LineNum)
                {
                    if (!WHSWorkLine::canWorkLineBeGroupPicked(_workLine, groupWorkLine))
                    {
                        break;
                    }
                
                    totalInventQty += groupWorkLine.InventQtyWork;
                    pickedQty += groupWorkLine.InventQtyWork - groupWorkLine.InventQtyRemain;
                }
            }
        }
        else
        {
            while select groupWorkLine
            order by LineNum
            where groupWorkLine.WorkId == _workLine.WorkId
                && groupWorkLine.WorkType == WHSWorkType::Pick
                && groupWorkLine.WorkStatus != WHSWorkStatus::Cancelled
            {
                if (!WHSWorkLine::canWorkLineBeGroupPicked(_workLine, groupWorkLine))
                {
                    break;
                }
                
                totalInventQty += groupWorkLine.InventQtyWork;
                pickedQty += groupWorkLine.InventQtyWork - groupWorkLine.InventQtyRemain;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGroupPickLineValues</Name>
				<Source><![CDATA[
    private void updateGroupPickLineValues(WHSWorkLine _groupWorkLine)
    {
        if (!lowestUOMOnWork)
        {
            lowestUOMOnWorkQty = _groupWorkLine.QtyRemain;
            
            lowestUOMOnWork = _groupWorkLine.UnitId;
        }
        else if (lowestUOMOnWork != _groupWorkLine.UnitId)
        {
            this.maintainQtyInLowestUOM(_groupWorkLine);
        }
        else
        {
            lowestUOMOnWorkQty += _groupWorkLine.QtyRemain;
        }

        inventQty += _groupWorkLine.InventQtyRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainQtyInLowestUOM</Name>
				<Source><![CDATA[
    private void maintainQtyInLowestUOM(WHSWorkLine _groupWorkLine)
    {
        if (this.isCurrentUOMLargerThanQtyUOM(_groupWorkLine.UnitId))
        {
            lowestUOMOnWorkQty += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_groupWorkLine.ItemId,
                                                                                                        _groupWorkLine.InventDimId,
                                                                                                        _groupWorkLine.QtyRemain,
                                                                                                        _groupWorkLine.UnitId,
                                                                                                        lowestUOMOnWork);
        }
        else
        {
            lowestUOMOnWorkQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_groupWorkLine.ItemId,
                                                                                                       _groupWorkLine.InventDimId,
                                                                                                       lowestUOMOnWorkQty,
                                                                                                       lowestUOMOnWork,
                                                                                                       _groupWorkLine.UnitId);

            lowestUOMOnWorkQty += _groupWorkLine.QtyRemain;

            lowestUOMOnWork = _groupWorkLine.UnitId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrentUOMLargerThanQtyUOM</Name>
				<Source><![CDATA[
    private boolean isCurrentUOMLargerThanQtyUOM(UnitOfMeasureSymbol _groupWorkLineUOM)
    {
       return WHSUOMSeqGroupLine::findByUnitId(uomSeqGroupId, _groupWorkLineUOM).LineNum
            > WHSUOMSeqGroupLine::findByUnitId(uomSeqGroupId, lowestUOMOnWork).LineNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>