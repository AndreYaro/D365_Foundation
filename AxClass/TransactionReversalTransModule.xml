<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionReversalTransModule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TransactionReversalTransModule</c> class is used by the <c>TransactionReversalTransBase</c> form
///     that shows the transactions that have been reversed and/or revoked.
/// </summary>
public class TransactionReversalTransModule
{
    TmpLedgerBase       tmpLedgerBase;
    Integer             numTrans;
    TraceNum            traceNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allModules</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>ledger</c>, <c>cust</c>, <c>vend</c>, and <c>tax</c> methods.
    /// </summary>
    void allModules()
    {
        this.ledger();
        this.cust();
        this.vend();
        this.tax();
        this.asset();

        // <GIN>
        if (AssetParameters::isDepreciationIncomeTaxActEnable_IN())
        {
            this.assetGroup_IN();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>asset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the asset transactions that are to be shown in the <c>TransactionReversalTransBase</c> form, in the temporary table <c>TmpLedgerBase</c>.
    /// </summary>
    protected void asset()
    {
        AssetTrans                  assetTrans;
        TransactionReversalTrans    transactionReversalTrans;

        while select RecId, AssetId, AmountMST, DefaultDimension, Txt, AmountCur,
                CurrencyCode, Voucher, TransDate
            from assetTrans
            exists join transactionReversalTrans
            where transactionReversalTrans.RefTableId == assetTrans.TableId
               && transactionReversalTrans.RefRecId   == assetTrans.RecId
               && transactionReversalTrans.TraceNum   == traceNum
        {
            this.insertTransList(
                tablenum(AssetTrans),
                assetTrans.RecId,
                SysModule::FixedAssets,
                assetTrans.AssetId, //AccountNum
                6,
                assetTrans.AmountMST,
                assetTrans.DefaultDimension,
                assetTrans.AssetId, //Name
                assetTrans.Txt,
                assetTrans.AmountCur,
                assetTrans.CurrencyCode,
                '',
                assetTrans.Voucher,
                assetTrans.TransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetGroup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records in <c>TmpLedgerBase</c> table for the given asset group transaction.
    /// </summary>
    protected void assetGroup_IN()
    {
        AssetGroupTrans_IN          assetGroupTransLoc;
        TransactionReversalTrans    transactionReversalTrans;
        AssetGroupInformation_IN    assetGroupInformation;

        while select RecId, AssetId, DefaultDimension, Voucher
            from assetGroupTransLoc
            exists join transactionReversalTrans
            where transactionReversalTrans.RefTableId == assetGroupTransLoc.TableId
               && transactionReversalTrans.RefRecId   == assetGroupTransLoc.RecId
               && transactionReversalTrans.TraceNum   == traceNum
        {
            select firstonly AmountMST, Txt, AmountCur, CurrencyCode, TransDate from assetGroupInformation
                where assetGroupInformation.RecId == assetGroupTransLoc.AssetGroupInformation;

            this.insertTransList(
                tablenum(AssetGroupTrans_IN),
                assetGroupTransLoc.RecId,
                SysModule::FixedAssets,
                assetGroupTransLoc.AssetId, //AccountNum
                6,
                assetGroupInformation.AmountMST,
                assetGroupTransLoc.DefaultDimension,
                assetGroupTransLoc.AssetId, //Name
                assetGroupInformation.Txt,
                assetGroupInformation.AmountCur,
                assetGroupInformation.CurrencyCode,
                '',
                assetGroupTransLoc.Voucher,
                assetGroupInformation.TransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cust</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the customer transactions that are to be shown in the <c>TransactionReversalTransBase</c> form, in the temporary table <c>TmpLedgerBase</c>.
    /// </summary>
    protected void cust()
    {
        CustTrans                   custTrans;
        TransactionReversalTrans    transactionReversalTrans;

        while select RecId, AccountNum, AmountMST, DefaultDimension, Txt, AmountCur,
                CurrencyCode, Voucher, TransDate
            from custTrans
            exists join transactionReversalTrans
            where transactionReversalTrans.RefTableId == custTrans.TableId
               && transactionReversalTrans.RefRecId   == custTrans.RecId
               && transactionReversalTrans.TraceNum   == traceNum
        {
            this.insertTransList(
                tablenum(CustTrans),
                custTrans.RecID,
                SysModule::Cust,
                custTrans.AccountNum,
                1,
                custTrans.AmountMST,
                custTrans.DefaultDimension,
                CustTable::Find(CustTrans.AccountNum).Name(),
                custTrans.Txt,
                custTrans.AmountCur,
                custTrans.CurrencyCode,
                '',
                custTrans.Voucher,
                custTrans.TransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a transaction into the temporary table <c>TmpLedgerBase</c>.
    /// </summary>
    /// <param name = "_recordTableId">
    /// The table identifier of the record.
    /// </param>
    /// <param name = "_recordRecId">
    /// The record identifier of the record.
    /// </param>
    /// <param name = "_module">
    /// The <c>SysModule</c> enumeration value.
    /// </param>
    /// <param name = "_id">
    /// An identifier string for the transaction.
    /// </param>
    /// <param name = "_color">
    /// An integer value.
    /// </param>
    /// <param name = "_amount">
    /// The MST amount on the transaction.
    /// </param>
    /// <param name = "_defaultdimension">
    /// The <c>DimensionDefault</c> value.
    /// </param>
    /// <param name = "_idName">
    /// A name of the transaction.
    /// </param>
    /// <param name = "_transText">
    /// The transaction text.
    /// </param>
    /// <param name = "_amountCur">
    /// The amount in the specified currency.
    /// </param>
    /// <param name = "_currencyCode">
    /// The currency code.
    /// </param>
    /// <param name = "_taxCodeString">
    /// The tax code.
    /// </param>
    /// <param name = "_voucher">
    /// The voucher string.
    /// </param>
    /// <param name = "_transDate">
    /// The transaction date.
    /// </param>
    /// <param name = "_ledgerDimension">
    /// The transaction ledger dimension; optional.
    /// </param>
    void insertTransList(
        tableId                _recordTableId,
        recId                  _recordRecId,
        SysModule              _module,
        Description            _id,
        Integer                _color,
        Amount                 _amount,
        DimensionDefault       _defaultdimension,
        tableName              _idName,
        TransactionTextLarge   _transText,
        AmountCur              _amountCur,
        CurrencyCode           _currencyCode,
        Name                   _taxCodeString,
        Voucher                _voucher,
        TransDate              _transDate,
        LedgerDimensionAccount _ledgerDimension = 0)
    {
        numTrans += 1;

        tmpLedgerBase.clear();
        tmpLedgerBase.Counter           = numTrans;
        tmpLedgerBase.RecordTableId     = _recordTableId;
        tmpLedgerBase.RecordRecId       = _recordRecId;
        tmpLedgerBase.Module            = _module;
        tmpLedgerBase.Amount            = _amount;
        tmpLedgerBase.DefaultDimension  = _defaultdimension;
        tmpLedgerBase.IdName            = _idName;
        tmpLedgerBase.TransText         = _transText;
        tmpLedgerBase.Id                = _id;
        tmpLedgerBase.AmountCur         = _amountCur;
        tmpLedgerBase.CurrencyCode      = _currencyCode;
        tmpLedgerBase.TaxCodeString     = _taxCodeString;
        tmpLedgerBase.Voucher           = _voucher;
        tmpLedgerBase.TransDate         = _transDate;
        tmpLedgerBase.TraceNum          = traceNum;
        if (_module == SysModule::Ledger)
        {
            tmpLedgerBase.LedgerDimension   = _ledgerDimension;
        }

        tmpLedgerBase.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpLedgerBaseforLedgerModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a transaction into the temporary table <c>TmpLedgerBase</c> for ledger module when specific features are turned on.
    /// </summary>
    /// <param name = "_generalJournalAccountEntry">
    /// The <c>GeneralJournalAccountEntry</c> table buffer.
    /// </param>
    /// <param name = "_generalJournalEntry">
    /// The <c>GeneralJournalEntry</c> table buffer.
    /// </param>
    /// <param name = "_dimAttrValueCombo">
    /// The <c>DimAttrValueCombo</c> table buffer.
    /// </param>
    /// <param name = "_subledgerVoucherGeneralJournalEntry">
    /// The <c>SubledgerVoucherGeneralJournalEntry</c> table buffer.
    /// </param>
    /// <param name = "_mainAccount">
    /// The <c>Mainaccount</c> table buffer
    /// </param>
    /// <param name = "_taxCodeString">
    /// The tax code.
    /// </param>
    /// <param name = "_defaultDimension">
    /// The <c>DimensionDefault</c> value.
    /// </param>
    protected void populateTmpLedgerBaseforLedgerModule(
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        GeneralJournalEntry _generalJournalEntry,
        DimensionAttributeValueCombination _dimAttrValueCombo,
        SubledgerVoucherGeneralJournalEntry _subledgerVoucherGeneralJournalEntry,
        MainAccount _mainAccount,
        Name _taxCodeString,
        DimensionDefault _defaultDimension)
    {
        numTrans += 1;

        tmpLedgerBase.clear();
        tmpLedgerBase.Counter = numTrans;
        tmpLedgerBase.RecordTableId = tablenum(GeneralJournalAccountEntry);
        tmpLedgerBase.RecordRecId = _generalJournalAccountEntry.RecId;
        tmpLedgerBase.Module = SysModule::Ledger;
        tmpLedgerBase.Amount = _generalJournalAccountEntry.AccountingCurrencyAmount;
        tmpLedgerBase.DefaultDimension = _defaultdimension;
        tmpLedgerBase.IdName = MainAccount::getLocalizedName(_mainAccount.RecId);
        tmpLedgerBase.TransText = _generalJournalAccountEntry.Text;
        tmpLedgerBase.Id = _dimAttrValueCombo.DisplayValue;
        tmpLedgerBase.AmountCur = _generalJournalAccountEntry.TransactionCurrencyAmount;
        tmpLedgerBase.CurrencyCode = _generalJournalAccountEntry.TransactionCurrencyCode;
        tmpLedgerBase.TaxCodeString = _taxCodeString;
        tmpLedgerBase.Voucher = _subledgerVoucherGeneralJournalEntry.Voucher;
        tmpLedgerBase.TransDate = _subledgerVoucherGeneralJournalEntry.AccountingDate;
        tmpLedgerBase.TraceNum = traceNum;
        tmpLedgerBase.FinTag = _generalJournalAccountEntry.FinTag;
        tmpLedgerBase.Company = _generalJournalEntry.SubledgerVoucherDataAreaId;
        tmpLedgerBase.LedgerDimension = _generalJournalAccountEntry.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the ledger transactions that are to be shown in the <c>TransactionReversalTransBase</c> form, into the temporary table <c>TmpLedgerBase</c>.
    /// </summary>
    protected void ledger()
    {
        DimensionAttributeLevelValueView    dimAttrLevelValueView;
        DimensionAttributeValueCombination  dimAttrValueCombo;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        GeneralJournalEntry                 generalJournalEntry;
        MainAccount                         mainAccount;
        TaxTrans                            taxTrans;
        TaxTransGeneralJournalAccountEntry  taxTransGeneralJournalAccountEntry;
        TransactionReversalTrans            transactionReversalTrans1;
        TransactionReversalTrans            transactionReversalTrans2;
        Name                                taxCodeString;
        DimensionAttributeRecId             mainAccountDimensionRecId;
        DimensionDefault                    defaultDimension;

        mainAccountDimensionRecId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        while select AccountingCurrencyAmount, TransactionCurrencyAmount, TransactionCurrencyCode, Text, RecId, LedgerDimension, GeneralJournalEntry, FinTag from generalJournalAccountEntry
        join DisplayValue from dimAttrValueCombo
            where dimAttrValueCombo.RecId == generalJournalAccountEntry.LedgerDimension
        join RecId from dimAttrLevelValueView
            where dimAttrLevelValueView.ValueCombinationRecId == generalJournalAccountEntry.LedgerDimension
                && dimAttrLevelValueView.DimensionAttribute == mainAccountDimensionRecId
        join RecId from mainAccount
            where mainAccount.RecId == dimAttrLevelValueView.EntityInstance
        join RecId, SubledgerVoucherDataAreaId from generalJournalEntry
            where generalJournalEntry.Ledger == Ledger::current()
                && generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
        join AccountingDate, Voucher from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
        exists join transactionReversalTrans1
            where transactionReversalTrans1.RefTableId == tablenum(GeneralJournalAccountEntry)
               && transactionReversalTrans1.RefRecId == generalJournalAccountEntry.RecId
               && transactionReversalTrans1.TraceNum == traceNum
        {
            taxCodeString = '';

            while select RecId from taxTransGeneralJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
            outer join TaxCode from taxTrans
                where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
            exists join transactionReversalTrans2
                where transactionReversalTrans2.RefTableId == tablenum(TaxTrans)
                    && transactionReversalTrans2.RefRecId == taxTrans.RecId
                    && transactionReversalTrans2.TraceNum == traceNum
            {
                taxCodeString += taxTrans.TaxCode + ' ';
            }

            if (FinTagConfiguration::isFinTagConfigurationSet(generalJournalEntry.SubledgerVoucherDataAreaId))
            {
                this.populateTmpLedgerBaseforLedgerModule(
                    generalJournalAccountEntry,
                    generalJournalEntry,
                    dimAttrValueCombo,
                    subledgerVoucherGeneralJournalEntry,
                    mainAccount,
                    taxCodeString,
                    defaultDimension);

                tmpLedgerBase.insert();
            }
            else
            {
                this.insertTransList(
                    tablenum(GeneralJournalAccountEntry),
                    generalJournalAccountEntry.RecId,
                    SysModule::Ledger,
                    dimAttrValueCombo.DisplayValue,
                    5,
                    generalJournalAccountEntry.AccountingCurrencyAmount,
                    defaultDimension,
                    MainAccount::getLocalizedName(mainAccount.RecId),
                    generalJournalAccountEntry.Text,
                    generalJournalAccountEntry.TransactionCurrencyAmount,
                    generalJournalAccountEntry.TransactionCurrencyCode,
                    taxCodeString,
                    subledgerVoucherGeneralJournalEntry.Voucher,
                    subledgerVoucherGeneralJournalEntry.AccountingDate,
                    generalJournalAccountEntry.LedgerDimension);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(TraceNum _traceNum)
    {
        traceNum = _traceNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>TransactionReversalTransModule</c> object.
    /// </summary>
    /// <param name="_traceNum">The trace number.</param>
    /// <returns>A new instance of the <c>TransactionReversalTransModule</c> object.</returns>
    public static TransactionReversalTransModule construct(TraceNum _traceNum)
    {
        return new TransactionReversalTransModule(_traceNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the tax transactions that are to be shown in the <c>TransactionReversalTransBase</c> form, in the temporary table <c>TmpLedgerBase</c>.
    /// </summary>
    protected void tax()
    {
        TaxTrans                            taxTrans;
        TransactionReversalTrans            transactionReversalTrans;
        TaxTransGeneralJournalAccountEntry  taxTransGeneralJournalAccountEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;

        while select RecId, TaxAmount, TaxInCostPriceMST, TaxCode, TaxOrigin, SourceRegulateAmountCur,
            TaxInCostPriceRegulated, SourceTaxAmountCur, TaxInCostPrice, SourceCurrencyCode, Voucher, TransDate, TaxAutoGenerated from taxTrans
        join RecId from transactionReversalTrans
            where transactionReversalTrans.RefTableId == taxTrans.TableId
                && transactionReversalTrans.RefRecId   == taxTrans.RecId
                && transactionReversalTrans.TraceNum   == traceNum
        outer join RecId from taxTransGeneralJournalAccountEntry
            where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans &&
                taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
        outer join RecId from generalJournalAccountEntry
            where generalJournalAccountEntry.RecId == taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry
        outer join RecId, DisplayValue from dimensionAttributeValueCombination
            where ((dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension && taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry) ||
                    (dimensionAttributeValueCombination.RecId == taxTransGeneralJournalAccountEntry.LedgerDimension && !taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry))
        {
            this.insertTransList(TaxTrans.TableId,
                taxTrans.RecID,
                SysModule::Tax,
                dimensionAttributeValueCombination.DisplayValue,
                4,
                taxTrans.netTaxAmountMST(),
                LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(dimensionAttributeValueCombination.RecId),
                TaxTable::Find(taxTrans.TaxCode).TaxName,
                enum2str(taxTrans.TaxOrigin),
                taxTrans.netSourceTaxAmountCur(),
                taxTrans.SourceCurrencyCode,
                taxTrans.taxCode,
                taxTrans.Voucher,
                taxTrans.TransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the temporary table <c>TmpLedgerBase</c>.
    /// </summary>
    /// <returns>
    ///    A <c>TmpLedgerBase</c> buffer.
    /// </returns>
    TmpLedgerBase transModule()
    {
        return tmpLedgerBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vend</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the vendor transactions that are to be shown in the <c>TransactionReversalTransBase</c> form, into the temporary table <c>TmpLedgerBase</c>.
    /// </summary>
    protected void vend()
    {
        VendTrans                   vendTrans;
        TransactionReversalTrans    transactionReversalTrans;

        while select RecId, AccountNum, AmountMST, DefaultDimension, Txt, AmountCur, CurrencyCode,
                Voucher, TransDate
            from vendTrans
            exists join transactionReversalTrans
                where transactionReversalTrans.RefTableId == vendTrans.TableId
                    && transactionReversalTrans.RefRecId   == vendTrans.RecId
                    && transactionReversalTrans.TraceNum   == traceNum
        {
            this.insertTransList(
                tablenum(VendTrans),
                vendTrans.RecId,
                SysModule::Vend,
                vendTrans.AccountNum,
                4,
                vendTrans.AmountMST,
                vendTrans.DefaultDimension,
                VendTable::Find(vendTrans.AccountNum).Name(),
                vendTrans.Txt,
                vendTrans.AmountCur,
                vendTrans.CurrencyCode,
                '',
                vendTrans.Voucher,
                vendTrans.TransDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>