<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransTaxInformationUIControllerProjects</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UI controller class for controlling all Projects on new tax information UI and transaction update.
/// </summary>
[TransTaxInfoUIControllerAttribute(tableStr(ProjTable))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjInvoiceTable))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjInvoiceTableTaxExtensionIN))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjCostTransTaxExtensionIN))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjEmplTransTaxExtensionIN))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjItemTransTaxExtensionIN))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjOnAccTransTaxExtensionIN))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjRevenueTransTaxExtensionIN))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjEmplTrans))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjCostTrans))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjItemTrans))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjRevenueTrans))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjOnAccTrans))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjAdvancedJournalLine))]
[TransTaxInfoUIControllerAttribute(tableStr(ProjAdvancedJournalLineTaxExtensionIN))]
[TransTaxInfoUIControllerAttribute(tableStr(TmpProjAdjustment))]
[TransTaxInfoUIControllerAttribute(tableStr(TmpProjAdjustmentCreate))]
public class TransTaxInformationUIControllerProjects extends TransTaxInformationUIController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or get the class TaxModelTaxable.
    /// </summary>
    /// <param name="_taxModelTaxable">
    /// Tax model doc line instance
    /// </param>
    /// <returns>
    /// The class TaxModelTaxable.
    /// </returns>
    protected TaxModelTaxable parmTaxModelTaxable(TaxModelTaxable _taxModelTaxable = taxModelTaxable)
    {
        if (!taxModelTaxable)
        {
            if (sourceTable.TableId == tableNum(TmpProjAdjustment) || sourceTable.TableId == tableNum(TmpProjAdjustmentCreate))
            {
                taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(sourceTable);
            }
            else
            {
                taxModelTaxable = super();
            }
        }

        return taxModelTaxable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes UI controls and data source for Tax information form.
    /// </summary>
    protected void init()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToCustTaxInfoCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all customer tax information controls on Tax information form.
    /// </summary>
    protected void setVisibleToCustTaxInfoCtrls()
    {
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_Project  ledgerJournalTrans_Project;
        ProjCostTrans               projCostTrans;
        TmpProjAdjustmentCreate     tmpProjAdjustmentCreate;
        TmpProjAdjustment           tmpProjAdjustment;
        ProjAdvancedJournalLine projAdvancedJournalLine;

        super();

        if (sourceTable.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = sourceTable;
        }
        else if (sourceTable.TableId == tableNum(LedgerJournalTrans_Project))
        {
            ledgerJournalTrans_Project = sourceTable;
            ledgerJournalTrans         = ledgerJournalTrans_Project.ledgerJournalTrans();
        }
        else if (sourceTable.TableId == tableNum(ProjCostTrans))
        {
            projCostTrans      = sourceTable;
            ledgerJournalTrans = LedgerJournalTrans::findRecId(projCostTrans.LedgerJournalTrans, false);
        }
        else if(sourceTable.TableId == tableNum(TmpProjAdjustmentCreate))
        {
            tmpProjAdjustmentCreate = sourceTable;
            ProjCostTrans           = projCostTrans::find(tmpProjAdjustmentCreate.TransID);
            ledgerJournalTrans      = LedgerJournalTrans::findRecId(projCostTrans.LedgerJournalTrans, false);
        }
        else if (sourceTable.TableId == tableNum(TmpProjAdjustment))
        {
            tmpProjAdjustment  = sourceTable;
            ProjCostTrans      = projCostTrans::find(tmpProjAdjustment.TransID);
            ledgerJournalTrans = LedgerJournalTrans::findRecId(projCostTrans.LedgerJournalTrans, false);
        }
        else if (sourceTable.TableId == tableNum(ProjAdvancedJournalLine))
        {
            projAdvancedJournalLine = sourceTable;
        }

        if (sourceTable.TableId     == tableNum(ProjJournalTrans)
            || sourceTable.TableId  == tableNum(TmpProjAdjustment)
            || sourceTable.TableId  == tableNum(tmpProjAdjustmentCreate)
            || sourceTable.TableId  == tableNum(ProjEmplTrans)
            || sourceTable.TableId  == tableNum(ProjItemTrans)
            || sourceTable.TableId  == tableNum(ProjRevenueTrans)
            || sourceTable.TableId  == tableNum(ProjOnAccTrans)
            || sourceTable.TableId  == tableNum(ProjTable)
            || sourceTable.TableId  == tableNum(TSTimesheetLine)
            || sourceTable.TableId  == tableNum(LedgerJournalTrans_Project)
            || (ledgerJournalTrans.RecId != 0
                && (ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::Cost
                || (ledgerJournalTrans.ledgerJournalTable().JournalType  == LedgerJournalType::Daily
                    && (ledgerJournalTrans.AccountType ==  LedgerJournalACType::Project
                        || ledgerJournalTrans.OffsetAccountType ==  LedgerJournalACType::Project))))
            || (sourceTable.TableId == tableNum(ProjAdvancedJournalLine)
                && projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Cust)
            || (sourceTable.TableId == tableNum(ProjAdvancedJournalLineTaxExtensionIN))
            || (sourceTable.TableId == tableNum(ProjCostTrans)
                && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled()))
        {
            transTaxInformationCustTaxInfoCtrl.parmCustomerTaxInformation().visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToVendTaxInfoCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all vendor tax information controls on Tax information form.
    /// </summary>
    protected void setVisibleToVendTaxInfoCtrls()
    {
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_Project  ledgerJournalTrans_Project;
        ProjCostTrans               projCostTrans;
        TmpProjAdjustmentCreate     tmpProjAdjustmentCreate;
        TmpProjAdjustment           tmpProjAdjustment;
        ProjAdvancedJournalLine     projAdvancedJournalLine;

        super();

        if (sourceTable.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans =  sourceTable;
        }
        else if (sourceTable.TableId == tableNum(LedgerJournalTrans_Project))
        {
            ledgerJournalTrans_Project = sourceTable;
            ledgerJournalTrans         = ledgerJournalTrans_Project.ledgerJournalTrans();
        }
        else if (sourceTable.TableId == tableNum(ProjCostTrans))
        {
            projCostTrans      = sourceTable;
            ledgerJournalTrans =  LedgerJournalTrans::findRecId(projCostTrans.LedgerJournalTrans, false);
        }
        else if(sourceTable.TableId == tableNum(TmpProjAdjustmentCreate))
        {
            tmpProjAdjustmentCreate = sourceTable;
            ProjCostTrans = projCostTrans::find(tmpProjAdjustmentCreate.TransID);
            ledgerJournalTrans =  LedgerJournalTrans::findRecId(projCostTrans.LedgerJournalTrans, false);
        }
        else if (sourceTable.TableId == tableNum(TmpProjAdjustment))
        {
            tmpProjAdjustment = sourceTable;
            ProjCostTrans = projCostTrans::find(tmpProjAdjustment.TransID);
            ledgerJournalTrans =  LedgerJournalTrans::findRecId(projCostTrans.LedgerJournalTrans, false);
        }
        else if (sourceTable.TableId == tableNum(ProjAdvancedJournalLine))
        {
            projAdvancedJournalLine = sourceTable;
        }

        if ((ledgerJournalTrans.RecId != 0
                && ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::Cost)
            || (sourceTable.TableId == tableNum(ProjAdvancedJournalLine)
                && projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Vend))
        {
            transTaxInformationVendorTaxInfoCtrl.parmVendorTaxInformation().visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToTransTaxInformationFormCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets enabled or disabled to all controls on Tax information form.
    /// </summary>
    protected void setEnabledToTransTaxInformationFormCtrls()
    {
        super();
        this.setEnableToDeliveryInfoCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnableToDeliveryInfoCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets enabled or disabled to all delivery information controls on Tax information form.
    /// </summary>
    protected void setEnableToDeliveryInfoCtrls()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>