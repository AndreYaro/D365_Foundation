<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymProposalReportJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymProposalReportJournalPost extends PaymProposalReportJournal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the data for the report and inserts into the temp table.
    /// </summary>
    /// <param name = "_custVendPaymProposalTmp">Instance of the report temp table.</param>
    public void createTmpTable(CustVendPaymProposalTmp _custVendPaymProposalTmp)
    {
        CustVendTransStatic custVendTransStatic;
        CustVendTrans custVendTransPaym;
        CustVendTrans custVendTrans;
        CustVendTransOpen custVendTransOpen;
        CustVendSettlement custVendSettlement;
        LedgerJournalTrans intercompanyLedgerJournalTrans;

        Set custVendTransPaymSet;

        ModuleCustVend accountType;
        boolean first = true;
        Voucher voucherNumber;

        ledgerJournalTrans.recordLevelSecurity(true);
        custVendTrans.recordLevelSecurity(true);
        custVendSettlement.recordLevelSecurity(true);

        this.initQuery();
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));
            if (first)
            {
                first = false;
                accountType = (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust) ? ModuleCustVend::Cust : ModuleCustVend::Vend;
                custVendTransStatic = CustVendTransStatic::newModuleCustVend(accountType);
                custVendTrans = custVendTransStatic.custVendTrans();
                custVendTransPaym = custVendTransStatic.custVendTrans();
                custVendTransOpen = custVendTransStatic.custVendTransOpen();
                custVendSettlement = custVendTransStatic.custVendSettlement();
                custVendTransPaymSet = new Set(Types::Int64);
            }

            if (printPaymLines)
            {
                this.journalInsertPayment(_custVendPaymProposalTmp);
            }

            if (printInvoiceLines)
            {
                if (ledgerJournalTrans.Company != ledgerJournalTrans.DataAreaId)
                {
                    intercompanyLedgerJournalTrans = LedgerJournalTrans::findIntercompanyPayment(ledgerJournalTrans);
                }

                voucherNumber = ledgerJournalTrans.findVoucherForIntercompanyPayment();

                if (voucherNumber)
                {
                    this.insertInvoices(
                        _custVendPaymProposalTmp,
                        [ledgerJournalTrans.Company],
                        accountType,
                        custVendTransPaym,
                        custVendSettlement,
                        intercompanyLedgerJournalTrans ? intercompanyLedgerJournalTrans : ledgerJournalTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoices</Name>
				<Source><![CDATA[
    private void  insertInvoices(
        CustVendPaymProposalTmp _custVendPaymProposalTmp,
        container _intercompanyAccountCompany,
        ModuleCustVend _accountType,
        CustVendTrans _custVendTransPaym,
        CustVendSettlement _custVendSettlement,
        LedgerJournalTrans _ledgerJournalTrans)
    {
        // Find the CustVendTrans payment record in the correct company
        while select crosscompany:_intercompanyAccountCompany _custVendTransPaym
            where _custVendTransPaym.Voucher == _ledgerJournalTrans.Voucher
                && _custVendTransPaym.AccountNum == _ledgerJournalTrans.parmAccount()
                && _custVendTransPaym.TransDate == _ledgerJournalTrans.TransDate
                && _custVendTransPaym.TransType == LedgerTransType::Payment
                && ((_custVendTransPaym.RecId == _ledgerJournalTrans.VendTransId && _custVendTransPaym.TableId == tableNum(VendTrans))
                    || (_custVendTransPaym.RecId == _ledgerJournalTrans.CustTransId && _custVendTransPaym.TableId == tableNum(CustTrans)))
        {
            this.postInsertInvoice(_custVendPaymProposalTmp, _accountType, _custVendTransPaym, _custVendSettlement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInsertInvoice</Name>
				<Source><![CDATA[
    private void postInsertInvoice(
        CustVendPaymProposalTmp _custVendPaymProposalTmp,
        ModuleCustVend _accountType,
        CustVendTrans _custVendTransPaym,
        CustVendSettlement _custVendSettlement)
    {
        CustVendTrans custVendTrans;
        CustVendTable custVendTable;
        container paymentCompany;
        container invoiceCompany;

        paymentCompany += _custVendTransPaym.company();

        // Find Offset Invoice Settlement(s)
        while select crosscompany _custVendSettlement
            where _custVendSettlement.OffsetRecId == _custVendTransPaym.RecId
                && _custVendSettlement.OffsetCompany == _custVendTransPaym.DataAreaId
        {
            custVendTrans = _custVendSettlement.custVendTrans();

            invoiceCompany = conNull();
            invoiceCompany += _custVendSettlement.TransCompany;

            // Invoice Trans
            select firstonly crosscompany:invoiceCompany custVendTrans
                where custVendTrans.RecId == _custVendSettlement.TransRecId;

            this.checkForCrossCompanySettlement(_custVendSettlement.TransCompany, _custVendSettlement.OffsetCompany);
            this.checkForIntercompanyAccount(custVendTrans.company());

            changecompany(custVendTrans.company())
            {
                custVendTrans = _custVendSettlement.custVendTrans();
                _custVendPaymProposalTmp.initFromCustVendTrans(custVendTrans);
                custVendTable = CustVendTable::findModule(_accountType,custVendTrans.AccountNum);
                _custVendPaymProposalTmp.Name = custVendTable.name();
                _custVendPaymProposalTmp.initFromCustVendSettlement(_custVendSettlement);
                _custVendPaymProposalTmp.AmountCur -= _custVendSettlement.UtilizedCashDisc;
                _custVendPaymProposalTmp.DiscAmountMST = CurrencyExchangeHelper::amountCur2MST(_custVendSettlement.UtilizedCashDisc, _custVendPaymProposalTmp.CurrencyCode);
                _custVendPaymProposalTmp.AmountMST -= _custVendPaymProposalTmp.DiscAmountMST;
                _custVendPaymProposalTmp.CustVendAC = _accountType == ModuleCustVend::Cust ? custVendTrans.OrderAccount : custVendTrans.AccountNum;
                _custVendPaymProposalTmp.Company = custVendTrans.company();
            }

            this.insertInvoice(_custVendPaymProposalTmp);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>