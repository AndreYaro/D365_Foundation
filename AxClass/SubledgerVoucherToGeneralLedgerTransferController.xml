<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerVoucherToGeneralLedgerTransferController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerVoucherToGeneralLedgerTransferController</c> class acts as a controller for the
/// <c>SubLedgerJournalTransferOperation</c> service.
/// </summary>
/// <remarks>
/// This class is a customized controller extending from the <c>SysOperationServiceController</c> class.
/// </remarks>
internal class SubledgerVoucherToGeneralLedgerTransferController extends SysOperationServiceController implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSubledgerJournalTransferController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>SubledgerJournalTransferController</c>.
    /// </summary>
    /// <returns>An instance of <c>SubledgerJournalTransferController</c>.</returns>
    public static SubledgerVoucherToGeneralLedgerTransferController createSubledgerJournalTransferController()
    {
        // Create new controller for subledger journal to general ledger transfer of posted vouchers
        SubledgerVoucherToGeneralLedgerTransferController subledgerJournalTransferController = new SubledgerVoucherToGeneralLedgerTransferController(
            classStr(SubledgerJournalTransferOperation),
            methodStr(SubledgerJournalTransferOperation,executeBulkTransfer),
            SysOperationExecutionMode::ReliableAsynchronous);

        return subledgerJournalTransferController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides caption for the transfer.
    /// </summary>
    /// <returns>
    /// Caption for the transfer.
    /// </returns>
    public ClassDescription caption()
    {
        return "@SYS317493";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>