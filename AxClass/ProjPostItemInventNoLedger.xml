<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemInventNoLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemInventNoLedger extends  ProjPost
{
    InventTrans     inventTrans;

    TransDate       neverLedgerTransDate;
    Voucher         neverLedgerVoucher;
    AmountMST       neverLedgerCostAmount;
    boolean         inventAdjust;

    ProjAdjustRefId projAdjustRefId;
    ProjId          projId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the transaction should be posted to the general ledgers.
    /// </summary>
    /// <returns>
    /// true if amounts should be posted to general ledgers; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  This method makes calls to the following methods:
    ///  <list type="bullet">
    ///   <item>
    ///    <description>
    ///    <c>checkEnterCostValue()</c>
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    <c>checkEnterNeverLedger()</c>
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    <c>checkEnterNoneLedger()</c>
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    <c>checkEnterOnAcc()</c>
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    <c>checkEnterSalesAccrued()</c>
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    <c>checkEnterTurnover()</c>
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected boolean checkLedger()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
        private InventTransId inventTransId()
    {
        return (inventTrans ? inventTrans.inventTransOrigin().InventTransId : inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(InventTrans  _inventTrans)
    {
        inventTrans  = _inventTrans;

        super(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parminventAdjust</Name>
				<Source><![CDATA[
        public boolean parminventAdjust(boolean _inventAdjust = inventAdjust)
    {
        inventAdjust = _inventAdjust;

        return inventAdjust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNeverLedgerCostAmount</Name>
				<Source><![CDATA[
        public AmountMST parmNeverLedgerCostAmount(AmountMST _neverLedgerCostAmount = neverLedgerCostAmount)
    {
        neverLedgerCostAmount = _neverLedgerCostAmount;

        return neverLedgerCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNeverLedgerTransDate</Name>
				<Source><![CDATA[
        public TransDate parmNeverLedgerTransDate(TransDate _neverLedgerTransDate = neverLedgerTransDate)
    {
        neverLedgerTransDate = _neverLedgerTransDate;

        return neverLedgerTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNeverLedgerVoucher</Name>
				<Source><![CDATA[
        public Voucher parmNeverLedgerVoucher(Voucher _neverLedgerVoucher = neverLedgerVoucher)
    {
        neverLedgerVoucher = _neverLedgerVoucher;

        return neverLedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdjustRefId</Name>
				<Source><![CDATA[
        public ProjAdjustRefId parmProjAdjustRefId(ProjAdjustRefId _projAdjustRefId = projAdjustRefId)
    {
        projAdjustRefId = _projAdjustRefId;

        return projAdjustRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
        public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projAdjustRefId</Name>
				<Source><![CDATA[
        private ProjAdjustRefId projAdjustRefId()
    {
        return (inventTrans ? inventTrans.ProjAdjustRefId : projAdjustRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
        private ProjId projId()
    {
        return (inventTrans ? inventTrans.ProjId : projId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the
    /// <c>ledgerTransActionsCreate</c>method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjItemTrans       projItemTrans;
        ProjItemTransCost   projItemTransCost;
        ProjLedger          projLedger;

        projItemTransCost.LedgerStatusCost  = ProjLedgerStatus::Never;
        projItemTransCost.ProjInventAdjust  = false;

        projItemTransCost.TransStatus       = ProjTransStatus::Posted;
        projItemTransCost.InventTransId     = this.inventTransId();
        projItemTransCost.ProjAdjustRefId   = this.projAdjustRefId();

        projItemTransCost.AmountMST         = this.parmNeverLedgerCostAmount();
        projItemTransCost.LineAmount        = this.parmNeverLedgerCostAmount();
        projItemTransCost.LedgerTransdate   = this.parmNeverLedgerTransDate();
        projItemTransCost.Voucher           = this.parmNeverLedgerVoucher();
        projItemTransCost.ProjId            = this.projId();

        projItemTransCost.CostType          = this.parmProjItemTransCostType();

        projItemTransCost.insert();

        if (this.parminventAdjust())
        {
            projItemTrans   = ProjItemTrans::findInvent(projItemTransCost.InventTransId,projItemTransCost.ProjAdjustRefId);
            projLedger      = ProjLedger::newInventCostAdjust(projItemTransCost.ProjId,projItemTransCost.InventTransId,projItemTransCost.ProjAdjustRefId,
                                                              projItemTrans.TransactionOrigin,true);

            if (projLedger)
            {
                ProjLedgerUpdate::newNeverLedger(projLedger,
                                                LedgerPostingType::ProjNeverLedger,
                                                projItemTrans.DefaultDimension,
                                                this.parmNeverLedgerVoucher(),
                                                projItemTransCost.LedgerTransdate,
                                                projItemTransCost.AmountMST).insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>