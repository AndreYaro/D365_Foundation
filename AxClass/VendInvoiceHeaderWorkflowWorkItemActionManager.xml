<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceHeaderWorkflowWorkItemActionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceHeaderWorkflowWorkItemActionManager</c> class manages the workitem actions for vendor invoices header workflows.
/// </summary>
internal final class VendInvoiceHeaderWorkflowWorkItemActionManager extends VendInvoiceWorkflowWorkItemActionManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    internal static VendInvoiceHeaderWorkflowWorkItemActionManager newFromVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceHeaderWorkflowWorkItemActionManager vendInvoiceHeaderWorkflowWorkItemActionManager = new VendInvoiceHeaderWorkflowWorkItemActionManager();
        vendInvoiceHeaderWorkflowWorkItemActionManager.parmVendInvoiceInfoTable(_vendInvoiceInfoTable);

        return vendInvoiceHeaderWorkflowWorkItemActionManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WorkflowWorkItemTable workflowWorkItemTable = _args.caller().getActiveWorkflowWorkItem();

        if (workflowWorkItemTable.RecId != 0
            && _args.record()
            && _args.record().TableId == tableNum(VendInvoiceInfoTable))
        {
            if (workflowWorkItemTable.RefRecId)
            {
                VendInvoiceInfoTable vendInvoiceInfoTable =  VendInvoiceInfoTable::findRecId(workflowWorkItemTable.RefRecId);
                if (_args.menuItemName() != menuitemActionStr(VendInvoiceApprovalApprove) || VendInvoiceHeaderWorkflowWorkItemActionManager::validateInvoiceAccountingDistributions(vendInvoiceInfoTable))
                {
                    VendInvoiceHeaderWorkflowWorkItemActionManager vendInvoiceHeaderWorkflowWorkItemActionManager = VendInvoiceHeaderWorkflowWorkItemActionManager::newFromVendInvoiceInfoTable(
                        vendInvoiceInfoTable);
                    vendInvoiceHeaderWorkflowWorkItemActionManager.parmArgs(_args);
                    vendInvoiceHeaderWorkflowWorkItemActionManager.parmCaller(_args.caller());
                    vendInvoiceHeaderWorkflowWorkItemActionManager.run();
                }
            }
        }
        else
        {
            VendInvoiceWorkflowWorkItemActionManager::main(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudget</Name>
				<Source><![CDATA[
    protected void checkBudget()
    {
        super();

        if (Ledger::isLedgerBudgetControlEnabled())
        {
            SourceDocumentProcessorFacade::submitOnDemandSourceDocumentImpl(
                this.parmVendInvoiceInfoTable(),
                this.parmCaller() as SourceDocumentProcessorCaller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceAccountingDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates accounting distributions on a given vendor invoice.
    /// </summary>
    /// <param name = "_vendorInvoice">The vendor invoice.</param>
    /// <returns>True if acounting distributions are valid; else, false.</returns>
    internal static boolean validateInvoiceAccountingDistributions(VendInvoiceInfoTable _vendorInvoice)
    {
        boolean areAccountingDistributionsValid = true;

        if (_vendorInvoice)
        {
            VendParameters vendParameters = VendParameters::find();

            if (!_vendorInvoice.validateAccountingDistributions())
            {
                areAccountingDistributionsValid = false;
            }
        }

        return areAccountingDistributionsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocumentEventLog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void insertDocumentEventLog(str _menuItemName)
    {
        super(_menuItemName);

        VendInvoiceAutomationHeaderWorkflowManualAction headerAction;

        switch (_menuItemName)
        {
            // Approved
            case menuitemActionStr(VendInvoiceApprovalApprove):
                headerAction = VendInvoiceAutomationHeaderWorkflowManualAction::Approved;
                break;

            // Delegated
            case menuitemActionStr(VendInvoiceApprovalDelegate):
                headerAction = VendInvoiceAutomationHeaderWorkflowManualAction::Delegated;
                break;

            // Change requested
            case menuitemActionStr(VendInvoiceApprovalRequestChange):
                headerAction = VendInvoiceAutomationHeaderWorkflowManualAction::ChangeRequested;
                break;

            // Rejected or Returned
            case menuitemActionStr(VendInvoiceApprovalReject):
                headerAction = VendInvoiceAutomationHeaderWorkflowManualAction::Rejected;
                break;

            // Unknown action
            default:
                headerAction = VendInvoiceAutomationHeaderWorkflowManualAction::None;
                break;
        }

        DocumentEventLogRequest documentEventLogRequest = new DocumentEventLogRequest();
        documentEventLogRequest.eventEnumId = enumNum(VendInvoiceAutomationHeaderWorkflowManualAction);
        documentEventLogRequest.eventEnumValue = headerAction;
        documentEventLogRequest.sourceRecId = this.parmVendInvoiceInfoTable().RecId;
        documentEventLogRequest.sourceTableId = tableNum(VendInvoiceInfoTable);

        DocumentEventLog::logDocumentEvent(documentEventLogRequest);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>