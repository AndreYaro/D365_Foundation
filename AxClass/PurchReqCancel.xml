<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqCancel</c> class is used to cancel a purchase requisition workflow.
/// </summary>
/// <remarks>
/// This class inherits properties from the <c>WorkflowCancelManager</c> class and handles the update
/// of the purchase requisition record when the cancel button is clicked. The purchase requisition is
/// set to a pending cancellation status and is presented to the user immediately. The default dialog
/// and cancel functionality that is from the <c>WorkflowCancelManager</c> class is reused.
/// </remarks>
public class PurchReqCancel
{
    MenuItemNameAction callerMenuItemNameAction;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doCancel</Name>
				<Source><![CDATA[
    public void doCancel(Common _common)
    {
        PurchReqTable   purchReqTable;
        PurchReqLine    purchReqLine;

        if (_common is PurchReqTable)
        {
            purchReqTable = _common;
        }
        else if (_common is PurchReqLine)
        {
            purchReqLine = _common;
        }

        try
        {
            if (PurchReqCancel::isCancelButtonEnabled(_common.TableId, _common.RecId))
            {
                switch (_common.TableId)
                {
                    case tableNum(PurchReqTable) : PurchReqWFStatusTransitionHelper::setPurchReqTable2Cancelled(_common.RecId); break;

                    case tableNum(PurchReqLine)  : PurchReqWFStatusTransitionHelper::setPurchReqLineStatus(_common.RecId, PurchReqRequisitionStatus::Cancelled); break;
                }

                _common.reread();
            }
            else
            {
                if (_common.TableId == tableNum(PurchReqTable))
                {
                    warning(strFmt("@SYS333808", purchReqTable.PurchReqId));
                }
                else if (_common.TableId == tableNum(PurchReqLine))
                {
                    warning(strFmt("@SYS333809", purchReqLine.SequenceNumber));
                }
            }
        }
        catch (Exception::Error)
        {
            //Purchase requisition %1 could be canceled. Please see the error log for details
            warning(strFmt("@SYS339973", _common.TableId == tableNum(PurchReqTable) ? purchReqTable.PurchReqId : purchReqLine.purchReqId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDialogMessage</Name>
				<Source><![CDATA[
    public str getDialogMessage(TableId _tableId)
    {
        str dialogMessage;

        switch (_tableId)
        {
            case tableNum(PurchReqTable) : dialogMessage = "@SYS319814"; break;
            case tableNum(PurchReqLine)  : dialogMessage = "@SYS319815"; break;
        }

        return dialogMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmcallerMenuItemNameAction</Name>
				<Source><![CDATA[
    public void parmcallerMenuItemNameAction(MenuItemNameAction _callerMenuItemNameAction)
    {
        callerMenuItemNameAction = _callerMenuItemNameAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the status to cancelled on the purchase requisition that is canceled.
    /// </summary>
    /// <param name="_common">
    ///    An argument that references the record that should be canceled.
    /// </param>
    /// <param name="_args">
    ///    <c>Args</c> object used to invoke the class.
    /// </param>

    public void run(Common _common, Args _args)
    {
        str dialogMessage;

        if (callerMenuItemNameAction != menuitemActionStr(PurchReqEPCancel))
        {
            dialogMessage = this.getDialogMessage(_common.TableId);

            if (Box::yesNo(dialogMessage, DialogButton::Cancel,"@SYS319807") == DialogButton::Yes)
            {
                this.runLoopCancelWin(_common);
            }
        }
        else
        {
            this.runLoopCancelEP(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runLoopCancelEP</Name>
				<Source><![CDATA[
    private void runLoopCancelEP(Args _args)
    {
        Common         common;

        if (_args.multiSelectionContext())
        {
            for (common = _args.multiSelectionContext().getFirst(); common; common = _args.multiSelectionContext().getNext())
            {
                this.doCancel(common);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runLoopCancelWin</Name>
				<Source><![CDATA[
    private void runLoopCancelWin(Common _common)
    {
        FormDataSource fds            = FormDataUtil::getFormDataSource(_common);
        Common         common;

        for (common = fds.getFirst(1) ? fds.getFirst(1) : fds.cursor(); common; common = fds.getNext())
        {
            this.doCancel(common);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelConsumptionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if a requisition header of purpose type consumption can be canceled.
    /// </summary>
    /// <param name="_purchReqTable">
    /// The <c>PurchReqTable</c> record to cancel.
    /// </param>
    /// <returns>
    /// true if the requisition header can be canceled; otherwise, false.
    /// </returns>
    public static boolean canCancelConsumptionHeader(PurchReqTable _purchReqTable)
    {
        boolean         ret;

        if (_purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::Approved)
        {
            if (_purchReqTable.notPostedLineExists())
            {
                if (PurchReqLineProcessingError::existAccountingError(_purchReqTable.RecId))
                {
                    ret = true;
                }
            }
            else
            {
                ret = PurchReqLine::existsStatus(_purchReqTable.RecId,PurchReqRequisitionStatus::Approved);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelConsumptionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if a requisition line of purpose type consumption can be canceled.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The <c>PurchReqLine</c> record to cancel.
    /// </param>
    /// <returns>
    /// true if the requisition line can be canceled; otherwise, false.
    /// </returns>
    public static boolean canCancelConsumptionLine(PurchReqLine _purchReqLine)
    {
        boolean         ret;

        if (_purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Approved)
        {
            if (_purchReqLine.lineNotPosted())
            {
                if (PurchReqLineProcessingError::existAccountingError(_purchReqLine.PurchReqTable, _purchReqLine.RecId))
                {
                    ret = true;
                }
            }
            else
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelReplenishHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if a requisition header of purpose type replenishment can be canceled.
    /// </summary>
    /// <param name="_purchReqTable">
    /// The <c>PurchReqTable</c> record to cancel.
    /// </param>
    /// <returns>
    /// true if the requisition header can be canceled; otherwise, false.
    /// </returns>
    public static boolean canCancelReplenishHeader(PurchReqTable _purchReqTable)
    {
        PurchReqLine    purchReqLine;
        boolean         ret;

        if (_purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::Approved
            || (_purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::Closed && !_purchReqTable.existFirmedLineForClosedLine()))
        {
            select firstonly RecId from purchReqLine
                where purchReqLine.PurchReqTable     == _purchReqTable.RecId
                    && (purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Approved
                    ||  purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Closed);

            if (purchReqLine)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelReplenishLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if a requisition line of purpose type replenishment can be canceled.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The <c>PurchReqLine</c> record to cancel.
    /// </param>
    /// <returns>
    /// true if the requisition line can be canceled; otherwise, false.
    /// </returns>
    public static boolean canCancelReplenishLine(PurchReqLine _purchReqLine)
    {
        boolean         ret;

        if (_purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Approved
        ||  (_purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Closed && !_purchReqLine.existFirmedLine()))
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReqCancel construct()
    {
        return new PurchReqCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancelButtonEnabled</Name>
				<Source><![CDATA[
    static public boolean isCancelButtonEnabled(TableId _tableId, RecId _recId)
    {
        boolean                     ret;
        PurchReqTable               purchReqTable;
        PurchReqLine                purchReqLine;

        if (!_recId)
        {
            ret = false;
        }
        else if (_tableId == tableNum(PurchReqTable))
        {
            purchReqTable = PurchReqTable::find(_recId);
            if (purchReqTable.isConsumption())
            {
                ret = PurchReqCancel::canCancelConsumptionHeader(purchReqTable);
            }
            else
            {
                ret = PurchReqCancel::canCancelReplenishHeader(purchReqTable);
            }
        }
        else if (_tableId == tableNum(PurchReqLine))
        {
            purchReqLine = PurchReqLine::find(_recId);
            if (purchReqLine.isConsumption())
            {
                ret = PurchReqCancel::canCancelConsumptionLine(purchReqLine);
            }
            else
            {
                ret = PurchReqCancel::canCancelReplenishLine(purchReqLine);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PurchReqCancel  purchReqCancel = PurchReqCancel::construct();
        purchReqCancel.parmcallerMenuItemNameAction(_args.menuItemName());
        purchReqCancel.run(_args.record(), _args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>