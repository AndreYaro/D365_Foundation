<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAccountCreate_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates chinese ledger account.
/// </summary>
class LedgerAccountCreate_CN
{
    LedgerAccountUtility_CN     accountUtility;
    List                        lstNewMainAccount;
    Map                         mapSrcMainAccount;
    LedgerSeparator_CN          separator;
    char                        separatorChar;
    recId                       chartOfAccounts;
    #MacroLib.Num2Char_CN
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>commitCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commits copied main account list.
    /// </summary>
    private void commitCopy()
    {
        ListIterator    liNew;
        recId           srcMainAccountRecId;
        MainAccount     newMainAccount;

        liNew = new ListIterator(lstNewMainAccount);

        while (liNew.more())
        {
            newMainAccount = liNew.value();

            srcMainAccountRecId = mapSrcMainAccount.lookup([newMainAccount.MainAccountId, chartOfAccounts]);

            newMainAccount.MainAccountId = accountUtility.renameMainAccount(
                newMainAccount.MainAccountId,
                LedgerSeparator_CN::None,
                separator,
                chartOfAccounts);

            newMainAccount.insert();

            LedgerAccountCreate_CN::copyMainAccountProperties(newMainAccount, MainAccount::find(srcMainAccountRecId));

            liNew.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates main account copy include its sub main account.
    /// </summary>
    /// <param name="_srcAccount">
    /// Source account
    /// </param>
    /// <param name="_destAccount">
    /// Destination account
    /// </param>
    /// <param name="_lstSrcSub">
    /// List for source sub account
    /// </param>
    /// <returns>
    /// Flag indicate the operation successful or not.
    /// </returns>
    public boolean copyAccount(
        MainAccountNum  _srcAccount,
        MainAccountNum  _destAccount,
        List            _lstSrcSub)
    {
        MainAccount parentMainAccount;
        MainAccount mainAccount;

        mainAccount = accountUtility.findFirstSubLeaf(MainAccount::findByMainAccountId(_destAccount, false, chartOfAccounts).RecId);

        if (mainAccount.RecId == 0)
        {
            mainAccount = mainAccount::findByMainAccountId(_destAccount, false, chartOfAccounts);
        }

        this.createCopy(_srcAccount, _destAccount, mainAccount, _lstSrcSub);

        try
        {
            ttsbegin;

            this.commitCopy();

            parentMainAccount = mainAccount::findByMainAccountId(_destAccount,true, chartOfAccounts);
            parentMainAccount.Type = DimensionLedgerAccountType::Total;
            parentMainAccount.write();

            this.copyTotals(_destAccount);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create account's interval of the destination account and its sub accounts if necessary.
    /// </summary>
    /// <param name="_destAccount">
    /// The main account ID of the destination account.
    /// </param>
    public void copyTotals(MainAccountNum  _destAccount)
    {
        int                     countUpdateTimes;
        MainAccount             mainAccount;
        MainAccount             destMainAccount = MainAccount::findByMainAccountId(_destAccount, false, chartOfAccounts);
        MainAccountNum          wildcard = LedgerAccountUtility_CN::initWildcard(destMainAccount);

        while select MainAccountId from mainAccount
            where mainAccount.LedgerChartOfAccounts == destMainAccount.LedgerChartOfAccounts
                && mainAccount.MainAccountId != destMainAccount.MainAccountId
                && mainAccount.MainAccountId like destMainAccount.MainAccountId + wildcard
        {
            //Only updateTotals once if the destMainAccount has serveral sub accounts.
            if (!countUpdateTimes)
            {
                LedgerAccountCreate_CN::updateTotals(destMainAccount);
                countUpdateTimes ++;
            }

            this.copyTotals(mainAccount.MainAccountId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts new main account.
    /// </summary>
    /// <param name="_mainAccount">
    /// Main account record
    /// </param>
    /// <returns>
    /// Flag indicates the operation result.
    /// </returns>
    public boolean createAccount(MainAccount _mainAccount)
    {
        boolean         ret = false;

        if (!_mainAccount.Name)
        {
            return checkFailed(strfmt("@SYS26332","@SYS943"));
        }

        ret = accountUtility.checkAccountLength(
            _mainAccount,
            separatorChar,
            chartOfAccounts);

        if (ret)
        {
            try
            {
                ttsbegin;

                _mainAccount.MainAccountId = accountUtility.renameMainAccount(
                    _mainAccount.MainAccountId,
                    LedgerSeparator_CN::None,
                    separator,
                    chartOfAccounts);

                _mainAccount.write();

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perpares main account copy list.
    /// </summary>
    /// <param name="_srcAccount">
    /// Source account number
    /// </param>
    /// <param name="_destAccount">
    /// Destination account number
    /// </param>
    /// <param name="_mainAccount">
    /// Main account record
    /// </param>
    /// <param name="_lstSrcSubRecId">
    /// List for the source sub account rec id
    /// </param>
    /// <returns>
    /// Flag indicates operation result.
    /// </returns>
    private boolean createCopy(
        MainAccountNum  _srcAccount,
        MainAccountNum  _destAccount,
        MainAccount     _mainAccount,
        List            _lstSrcSubRecId)
    {
        ListIterator    srcLi;
        MainAccountNum  subCodeSrc, srcMainAccount;
        MainAccountNum  destSubAccount;
        MainAccountNum  newDestAccountId;
        List            lstDestSubIds;
        MainAccountNum  localSrcAccount, localDestAccount;
        boolean         existSub;
        Level           destSubLevel;
        Counter         i, subLength;

        localSrcAccount     = strrem(_srcAccount, separatorChar);
        localDestAccount    = strrem(_destAccount, separatorChar);

        srcLi           = new ListIterator(_lstSrcSubRecId);
        lstDestSubIds = accountUtility.getNextLevelSubAccountIds(
            MainAccount::findByMainAccountId(_destAccount, false, chartOfAccounts).RecId);

        while (srcLi.more())
        {
            srcMainAccount  = MainAccount::find(srcLi.value()).MainAccountId;
            subCodeSrc      = this.getSubCode(localSrcAccount, strrem(srcMainAccount, separatorChar));

            destSubLevel    = accountUtility.getAccountLevelbyLength(strlen(localDestAccount), chartOfAccounts) + 1;
            subLength       = LedgerChartOfAccountsTreeLevel_CN::findByLevel(destSubLevel, chartOfAccounts).Length - strlen(subCodeSrc);

            if (subLength > 0)
            {
                for (i=1; i <= subLength; i++)
                {
                    subCodeSrc = strins(subCodeSrc, #Zero, 1);
                }
            }
            else if (subLength < 0)
            {
                for (i=1; i <= -subLength; i++)
                {
                    subCodeSrc = strdel(subCodeSrc, 1, 1);
                }
            }

            destSubAccount  = localDestAccount + subCodeSrc;
            existSub        = LedgerAccountUtility_CN::existSub(srcLi.value());

            if (this.exsitInList(destSubAccount, lstDestSubIds))
            {
                newDestAccountId = this.createNew(
                    srcMainAccount,
                    this.getNext(_destAccount, lstDestSubIds),
                    _mainAccount);
            }
            else
            {
                newDestAccountId = this.createNew(
                    srcMainAccount,
                    destSubAccount,
                    _mainAccount);
            }

            if (existSub)
            {
                this.createCopy(
                    srcMainAccount,
                    accountUtility.renameMainAccount(
                        newDestAccountId,
                        LedgerSeparator_CN::None,
                        this.parmSeparator(),
                        chartOfAccounts),
                    _mainAccount,
                    accountUtility.getNextLevelSubRecIds(srcLi.value()));
            }

            lstDestSubIds.addEnd(newDestAccountId);

            srcLi.next();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new main account into copy list.
    /// </summary>
    /// <param name="_destAccount">
    /// Destination account
    /// </param>
    /// <param name="_srcSubAccount">
    /// Sub source account
    /// </param>
    /// <param name="_destSubAccount">
    /// Sub destination account
    /// </param>
    /// <param name="_mainAccount">
    /// Main Account
    /// </param>
    /// <returns>
    /// Account Number
    /// </returns>
    private MainAccountNum createNew(
        MainAccountNum  _srcSubAccount,
        MainAccountNum  _destSubAccount,
        MainAccount     _mainAccount)
    {
        MainAccount newMainAccount;

        newMainAccount = MainAccount::findByMainAccountId(_srcSubAccount, false, chartOfAccounts);
        newMainAccount.MainAccountId = _destSubAccount;

        if (newMainAccount.Type != DimensionLedgerAccountType::Total)
        {
            newMainAccount.Type = _mainAccount.Type;
        }

        if (newMainAccount.validateWrite())
        {
            lstNewMainAccount.addEnd(newMainAccount);
            mapSrcMainAccount.insert([newMainAccount.MainAccountId, chartOfAccounts], _mainAccount.RecId);
        }

        return newMainAccount.MainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates sub account.
    /// </summary>
    /// <param name="_mainAccount">
    /// Main account record
    /// </param>
    /// <param name="_parentAccountId">
    /// The parent account ID of the main account.
    /// </param>
    /// <returns>
    /// Flag indicates operation result.
    /// </returns>
    public boolean createSubAccount(MainAccount _mainAccount, MainAccountNum _parentAccountId)
    {
        boolean         ret = false;
        List            parentAccountRecLst;
        ListIterator    parentAccuontLstIter;
        RecId           parentAccountRecId;
        MainAccount     parentAccount;
        MainAccount     firstSubLeafMainAcc;

        if (!_mainAccount.MainAccountId)
        {
            return checkFailed("@GLS54968");
        }

        if (!_mainAccount.Name)
        {
            return checkFailed(strfmt("@SYS26332","@SYS943"));
        }

        parentAccountRecLst  = accountUtility.getAllParentRecIds(_mainAccount.MainAccountId, chartOfAccounts);
        parentAccuontLstIter = new ListIterator(parentAccountRecLst);

        while (parentAccuontLstIter.more())
        {
            parentAccountRecId = parentAccuontLstIter.value();
            parentAccuontLstIter.next();
        }

        if (parentAccountRecId || _parentAccountId)
        {
            if (GeneralJournalAccountEntry::checkExistMainAccountRecId_CN(parentAccountRecId))
            {
                // can't create a new account under the selected account, as transactions exist.
                return checkFailed("@GLS54774");
            }

            ret = accountUtility.checkAccountLength(
                _mainAccount,
                separatorChar,
                chartOfAccounts,
                _parentAccountId);

            if (ret
                && LedgerAccountUtility_CN::existSub(parentAccountRecId))
            {
                firstSubLeafMainAcc = accountUtility.findLastPeerAccount(parentAccountRecId);
                _mainAccount.Type = firstSubLeafMainAcc.Type;
            }

            try
            {
                ttsbegin;

                if (ret)
                {
                    _mainAccount.write();

                    parentAccount = MainAccount::find(parentAccountRecId, true);
                    parentAccount.Type = DimensionLedgerAccountType::Total;
                    parentAccount.write();
                    LedgerAccountCreate_CN::copyMainAccountProperties(_mainAccount, MainAccount::find(parentAccountRecId), firstSubLeafMainAcc);
                    LedgerAccountCreate_CN::updateTotals(parentAccount);
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
        }
        else
        {
            return checkFailed("@GLS54580");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exsitInList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the account number in the list.
    /// </summary>
    /// <param name="_destSubAccount">
    /// Destination sub account
    /// </param>
    /// <param name="_lstRecId">
    /// Account number list
    /// </param>
    /// <returns>
    /// Flag indicates existing or not
    /// </returns>
    private boolean exsitInList(
        MainAccountNum  _destSubAccount,
        List            _lstRecId)
    {
        // rewrite this logic
        ListIterator li = new ListIterator(_lstRecId);
        MainAccountNum   accountNum;

        if (li.more() == false)
        {
            return false;
        }
        else
        {
            while (li.more())
            {
                accountNum = strrem(li.value(), separatorChar);

                if (_destSubAccount == accountNum)
                {
                    return true;
                }

                li.next();
            }

            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets next sub main account number.
    /// </summary>
    /// <param name="_parentNum">
    /// Parent account number
    /// </param>
    /// <param name="_lst">
    /// Destination list
    /// </param>
    /// <returns>
    /// Account number
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Maximun length exceeds.
    /// </exception>
    private MainAccountNum getNext(
        MainAccountNum  _parentNum,
        List            _lst)
    {
        MainAccountNum      subCode, destAccountNum;
        Integer             nMaximum;
        MaximumLength       subLength,parentLength;
        Counter             i, counterZero;
        MainAccountNum      subAcccount;
        Level               parentLevel;
        ListIterator        dstLi = new ListIterator(_lst);

        nMaximum   = 0;

        _parentNum = strrem(_parentNum, separatorChar);

        while (dstLi.more())
        {
            destAccountNum = dstLi.value();
            subCode = this.getSubCode(
                _parentNum,
                strrem(destAccountNum, separatorChar));

            if (str2int(subCode) > nMaximum)
            {
                nMaximum = str2int(subCode);
            }

            dstLi.next();
        }

        subAcccount = int2str(nMaximum+1);

        parentLevel  = accountUtility.getAccountLevelbyLength(strlen(_parentNum), chartOfAccounts);
        parentLength = strLen(strRem(_parentNum, separatorChar));
        subLength    = accountUtility.getAccountLengthByLevel(parentLevel+1, chartOfAccounts);

        if ((parentLength + strlen(subAcccount) ) > subLength)
        {
            throw error("@GLS54843");
        }
        else if ((parentLength + strlen(subAcccount)) < subLength)
        {
            counterZero = subLength - parentLength - strlen(subAcccount);

            for (i=1; i <= counterZero; i++)
            {
                subAcccount = strins(subAcccount, #Zero, strlen(subAcccount));
            }
        }

        return  _parentNum + subAcccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets subcode from account number.
    /// </summary>
    /// <param name="_accountParent">
    /// Parent account
    /// </param>
    /// <param name="_accountSub">
    /// Source account
    /// </param>
    /// <returns>
    /// Account number
    /// </returns>
    private MainAccountNum getSubCode(
        MainAccountNum _accountParent,
        MainAccountNum _accountSub)
    {
        return strdel(_accountSub, 1, strlen(_accountParent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct new instance of the <c>LedgerAccountCreate_CN</c> class.
    /// </summary>
    /// <param name="_chartOfAccounts">
    /// The parameter chart of accounts.
    /// </param>
    /// <returns>
    /// New instance of the <c>LedgerAccountCreate_CN</c> class
    /// </returns>
    public static LedgerAccountCreate_CN construct(recId   _chartOfAccounts)
    {
        return new LedgerAccountCreate_CN(_chartOfAccounts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>LedgerAccountCreate_CN</c> class.
    /// </summary>
    /// <param name="_chartOfAccounts">
    /// The parameter chart of accounts.
    /// </param>
    protected void new(recId   _chartOfAccounts)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00010, funcName());

        accountUtility = new LedgerAccountUtility_CN();
        lstNewMainAccount = new List(Types::Record);
        mapSrcMainAccount = new Map(Types::Container, Types::Int64);

        chartOfAccounts = _chartOfAccounts;
        accountUtility.initMap(_chartOfAccounts);
        separator = LedgerChartOfAccountsTree_CN::findByLedgerChartOfAccounts(chartOfAccounts).Separator;
        separatorChar = LedgerAccountUtility_CN::findSeparatorChar(separator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeparator</Name>
				<Source><![CDATA[
    public LedgerSeparator_CN parmSeparator(LedgerSeparator_CN _separator = separator)
    {
        if (!prmisdefault(_separator))
        {
            separator = _separator;
        }

        return separator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeparatorChar</Name>
				<Source><![CDATA[
    public char parmSeparatorChar(char _separatorChar = separatorChar)
    {
        if (!prmisdefault(_separatorChar))
        {
            separatorChar = _separatorChar;
        }

        return separatorChar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates source account number and destination account number for copy.
    /// </summary>
    /// <param name="_srcAccount">
    /// Source account number
    /// </param>
    /// <param name="_destAccount">
    /// Destination account number
    /// </param>
    /// <returns>
    /// Flag indicates operation result.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Please specify an account that have sub accounts to copy.
    /// </exception>
    public boolean validateCopy(
        MainAccountNum _srcAccount,
        MainAccountNum _destAccount)
    {
        boolean         ret = true;
        Level           copyLevel;
        MainAccountNum  accountNum;

        if (GeneralJournalAccountEntry::checkExistMainAccountNum_CN(_destAccount, chartOfAccounts))
        {
            return checkFailed("@GLS54774");
        }

        if (!_srcAccount)
        {
            ret = checkFailed(strfmt(MainAccount::txtNotExist(), _srcAccount));
        }

        if (ret
            && !_destAccount)
        {
            ret = checkFailed(strfmt(MainAccount::txtNotExist(), _destAccount));
        }

        if (ret
            && strcmp(_srcAccount, _destAccount) == 0)
        {
            ret = checkFailed("@GLS54889");
        }

        if (ret)
        {
            if (accountUtility.getNextLevelSubRecIds(MainAccount::findByMainAccountId(_srcAccount, false, chartOfAccounts).RecId).empty())
            {
                throw error("@GLS54879");
            }
        }

        if (ret)
        {
            accountNum   = strrem(accountUtility.findMaxAccountNum(chartOfAccounts, _srcAccount), separatorChar);
            _srcAccount  = strrem(_srcAccount, separatorChar);
            _destAccount = strrem(_destAccount, separatorChar);

            copyLevel = accountUtility.getAccountLevelbyLength(strlen(accountNum), chartOfAccounts)
                - accountUtility.getAccountLevelbyLength(strlen(_srcAccount), chartOfAccounts);

            if (copyLevel + accountUtility.getAccountLevelbyLength(strlen(_destAccount), chartOfAccounts) >
                LedgerAccountTreeUtils_CN::findMaxLevelInChartOfAccount(chartOfAccounts))
            {
                return checkFailed("@GLS54854");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies DimensionAttributeValue from source account to destination account.
    /// </summary>
    /// <param name="_dimensionAttributeRecId">
    /// DimensionAttribute recId
    /// </param>
    /// <param name="_destMainAccountRecId">
    /// Destination main account recId
    /// </param>
    /// <param name="_srcDimAttrVal">
    /// Source DimensionAttributeValue record
    /// </param>
    /// <returns>
    /// A recId of table DimensionAttributeValue.
    /// </returns>
    private static RecId copyDimensionAttributeValue(
        RecId _dimensionAttributeRecId,
        MainAccount _destMainAccount,
        DimensionAttributeValue _srcDimAttrVal)
    {
        DimensionAttributeValue dimAttrValDest;

        // Find or create related dimension attribute value for destination main account
        dimAttrValDest = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(
            _dimensionAttributeRecId,
            _destMainAccount.RecId,
            true,
            true);
        dimAttrValDest.ActiveFrom               = _srcDimAttrVal.ActiveFrom;
        dimAttrValDest.ActiveTo                 = _srcDimAttrVal.ActiveTo;
        dimAttrValDest.IsBlockedForManualEntry  = _srcDimAttrVal.IsBlockedForManualEntry;
        dimAttrValDest.IsSuspended              = _srcDimAttrVal.IsSuspended;
        dimAttrValDest.GroupDimension           = _srcDimAttrVal.GroupDimension;
        dimAttrValDest.Owner                    = _srcDimAttrVal.Owner;
        // Keep the dimension attribute value IsTotal flag in sync with the type on the main account
        dimAttrValDest.IsTotal                  = (_destMainAccount.Type == DimensionLedgerAccountType::Total);
        dimAttrValDest.update();

        return dimAttrValDest.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimensionAttributeValueFinancialStmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies DimensionAttributeValueFinancialStmt from source account to destination account.
    /// </summary>
    /// <param name="_destDimAttrValRecId">
    /// Destination DimensionAttributeValue recId
    /// </param>
    /// <param name="_srcDimAttrValRecId">
    /// Source DimensionAttributeValue record
    /// </param>
    private static void copyDimensionAttributeValueFinancialStmt(
        RecId _destDimAttrValRecId,
        RecId _srcDimAttrValRecId)
    {
        DimensionAttributeValueFinancialStmt dimAttrValFinStmtDest;
        DimensionAttributeValueFinancialStmt dimAttrValFinStmtSrc;

        // Check if existing related dimension attribute value financial statement
        dimAttrValFinStmtSrc = DimensionAttributeValueFinancialStmt::findByDimensionAttributeValue(_srcDimAttrValRecId);
        if (dimAttrValFinStmtSrc.RecId)
        {
            dimAttrValFinStmtDest.DimensionAttributeValue   = _destDimAttrValRecId;
            dimAttrValFinStmtDest.Bold                      = dimAttrValFinStmtSrc.Bold;
            dimAttrValFinStmtDest.Column                    = dimAttrValFinStmtSrc.Column;
            dimAttrValFinStmtDest.InvertSign                = dimAttrValFinStmtSrc.InvertSign;
            dimAttrValFinStmtDest.Italic                    = dimAttrValFinStmtSrc.Italic;
            dimAttrValFinStmtDest.LineAbove                 = dimAttrValFinStmtSrc.LineAbove;
            dimAttrValFinStmtDest.LineBelow                 = dimAttrValFinStmtSrc.LineBelow;
            dimAttrValFinStmtDest.UnderlineAmount           = dimAttrValFinStmtSrc.UnderlineAmount;
            dimAttrValFinStmtDest.UnderlineText             = dimAttrValFinStmtSrc.UnderlineText;
            dimAttrValFinStmtDest.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimensionAttrValueLedgerOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies DimensionAttrValueLedgerOverride from source account to destination account.
    /// </summary>
    /// <param name="_destDimAttrValRecId">
    /// Destination DimensionAttributeValue recId
    /// </param>
    /// <param name="_srcDimAttrValRecId">
    /// Source DimensionAttributeValue recId
    /// </param>
    /// <param name="_list">
    /// A record list for save DimensionAttrValueLedgerOverride records
    /// </param>
    private static void copyDimensionAttrValueLedgerOverride(
        RecId _destDimAttrValRecId,
        RecId _srcDimAttrValRecId,
        RecordInsertList _list)
    {
        DimensionAttrValueLedgerOverride dimAttrValLedgerOverrideDest;
        DimensionAttrValueLedgerOverride dimAttrValLedgerOverrideSrc;

        while select dimAttrValLedgerOverrideSrc
            where dimAttrValLedgerOverrideSrc.DimensionAttributeValue == _srcDimAttrValRecId
        {
            dimAttrValLedgerOverrideDest.DimensionAttributeValue        = _destDimAttrValRecId;
            dimAttrValLedgerOverrideDest.ActiveFrom                     = dimAttrValLedgerOverrideSrc.ActiveFrom;
            dimAttrValLedgerOverrideDest.ActiveTo                       = dimAttrValLedgerOverrideSrc.ActiveTo;
            dimAttrValLedgerOverrideDest.IsSuspended                    = dimAttrValLedgerOverrideSrc.IsSuspended;
            dimAttrValLedgerOverrideDest.Owner                          = dimAttrValLedgerOverrideSrc.Owner;
            dimAttrValLedgerOverrideDest.IsDateRangeOverriddenByUser    = dimAttrValLedgerOverrideSrc.IsDateRangeOverriddenByUser;
            dimAttrValLedgerOverrideDest.IsSuspendedOverriddenByUser    = dimAttrValLedgerOverrideSrc.IsSuspendedOverriddenByUser;
            dimAttrValLedgerOverrideDest.IsOwnerOverriddenByUser        = dimAttrValLedgerOverrideSrc.IsOwnerOverriddenByUser;
            dimAttrValLedgerOverrideDest.Ledger                         = dimAttrValLedgerOverrideSrc.Ledger;
             _list.add(dimAttrValLedgerOverrideDest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMainAccountLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies MainAccountLegalEntity from source account to destination account.
    /// </summary>
    /// <param name="_destMainAccountRecId">
    /// Destination main account recId
    /// </param>
    /// <param name="_srcMainAccountRecId">
    /// Source main account recId
    /// </param>
    /// <param name="_list">
    /// A record list for save MainAccountLegalEntity records
    /// </param>
    private static void copyMainAccountLegalEntity(
        RecId _destMainAccountRecId,
        RecId _srcMainAccountRecId,
        RecordInsertList _list)
    {
        MainAccountLegalEntity mainAccountLegalEntityDest;
        MainAccountLegalEntity mainAccLegalEntitySrc;

        while select mainAccLegalEntitySrc
            where mainAccLegalEntitySrc.MainAccount == _srcMainAccountRecId
        {
            mainAccountLegalEntityDest.MainAccount      = _destMainAccountRecId;
            mainAccountLegalEntityDest.LegalEntity      = mainAccLegalEntitySrc.LegalEntity;
            mainAccountLegalEntityDest.TaxCode          = mainAccLegalEntitySrc.TaxCode;
            mainAccountLegalEntityDest.TaxGroup         = mainAccLegalEntitySrc.TaxGroup;
            mainAccountLegalEntityDest.TaxItemGroup     = mainAccLegalEntitySrc.TaxItemGroup;
            mainAccountLegalEntityDest.TaxDirection     = mainAccLegalEntitySrc.TaxDirection;
            mainAccountLegalEntityDest.TaxFree          = mainAccLegalEntitySrc.TaxFree;
            mainAccountLegalEntityDest.ValidateTaxCode  = mainAccLegalEntitySrc.ValidateTaxCode;
            mainAccountLegalEntityDest.DefaultDimension = mainAccLegalEntitySrc.DefaultDimension;
            mainAccountLegalEntityDest.AutoAllocate     = mainAccLegalEntitySrc.AutoAllocate;
            mainAccountLegalEntityDest.TaxTableDataAreaId            = mainAccLegalEntitySrc.TaxTableDataAreaId;
            mainAccountLegalEntityDest.TaxItemGroupHeadingDataAreaId = mainAccLegalEntitySrc.TaxItemGroupHeadingDataAreaId;
            _list.add(mainAccountLegalEntityDest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMainAccountProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies main account properties.
    /// </summary>
    /// <param name="_destMainAccount">
    /// Destination main account record
    /// </param>
    /// <param name="_srcMainAccount">
    /// Source main account record
    /// </param>
    /// <param name="_firstSubLeafMainAcc">
    /// First sub leaf main account record
    /// </param>
    /// <returns>
    /// Updated main account record
    /// </returns>
    public static MainAccount copyMainAccountProperties(
        MainAccount _destMainAccount,
        MainAccount _srcMainAccount,
        MainAccount _firstSubLeafMainAcc = null)
    {
        RecId                                   dimAttrRecId;
        RecId                                   dimAttrValRecIdDest;
        DimensionAttributeValue                 dimAttrValSrc;
        DimensionAttributeValue                 dimAttrValfirstSubLeaf;
        RecordInsertList                        dimAttrValLedgerOverList = new RecordInsertList(tablenum(DimensionAttrValueLedgerOverride));
        RecordInsertList                        mainAccLegalEntityList = new RecordInsertList(tablenum(MainAccountLegalEntity));

        // Get dimension attribute RecId
        dimAttrRecId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        // Check if exiting related dimension attribute value for source main account
        dimAttrValSrc = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(
            dimAttrRecId,
            _srcMainAccount.RecId);

        ttsBegin;
        if (dimAttrValSrc.RecId)
        {
            // Copy dimension attribute value
            dimAttrValRecIdDest = LedgerAccountCreate_CN::copyDimensionAttributeValue(dimAttrRecId, _destMainAccount, dimAttrValSrc);

            // When exist other sub account under same parent account, copy finincal statement group (not including the level) from first sub account which has no sub account,.
            if (_firstSubLeafMainAcc)
            {
                // Check if exiting related dimension attribute value for first sub main account
                dimAttrValfirstSubLeaf = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(
                dimAttrRecId,
                _firstSubLeafMainAcc.RecId);
                if (dimAttrValfirstSubLeaf.RecId)
                {
                    LedgerAccountCreate_CN::copyDimensionAttributeValueFinancialStmt(dimAttrValRecIdDest, dimAttrValfirstSubLeaf.RecId);
                }
            }
            else
            {
                // Copy dimension attribute value financial Statment from source account
                LedgerAccountCreate_CN::copyDimensionAttributeValueFinancialStmt(dimAttrValRecIdDest, dimAttrValSrc.RecId);
            }

            //Copy Dimension code ledger override
            LedgerAccountCreate_CN::copyDimensionAttrValueLedgerOverride(dimAttrValRecIdDest, dimAttrValSrc.RecId, dimAttrValLedgerOverList);
            dimAttrValLedgerOverList.insertDatabase();
        }

        //Copy Main account legal entity
        LedgerAccountCreate_CN::copyMainAccountLegalEntity(_destMainAccount.RecId, _srcMainAccount.RecId, mainAccLegalEntityList);
        mainAccLegalEntityList.insertDatabase();
        ttsCommit;

        return _destMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set FromValue and ToValue of the Totals.
    /// </summary>
    /// <param name="_mainAccount">
    /// Main account record.
    /// </param>
    public static void updateTotals(MainAccount _mainAccount)
    {
        DimensionAttributeValueTotallingCriteria    dimensionAttributeValueTotallingCriteria;
        DimensionAttributeValue                     dimensionAttributeValue;
        MainAccountNum                              fromAc,toAc;
        recId                                       mainAccountDimAttribute;
        LedgerAccountUtility_CN                     ledgerAccountUntility = new LedgerAccountUtility_CN();
        // Get all subAccountIds from the List.
        ListEnumerator                              allsubAccountIds = ledgerAccountUntility.getNextLevelSubAccountIds(_mainAccount.RecId).getEnumerator();

        mainAccountDimAttribute = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
        dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(mainAccountDimAttribute, _mainAccount.RecId, true, true);

        // Get the first value from allsubAccountIds and assign it to fromAc.
        if (allsubAccountIds.moveNext())
        {
            fromAc = allsubAccountIds.current();
        }

        // Get the last value from allsubAccountIds and assign it to toAc.
        while (allsubAccountIds.moveNext())
        {
            toAc = allsubAccountIds.current();
        }

        ttsBegin;

        if (dimensionAttributeValue && !dimensionAttributeValue.IsTotal)
        {
            dimensionAttributeValue.IsTotal = true;
            dimensionAttributeValue.update();
        }

        // If the record of dimensionAttributeValueTotallingCriteria specified exsits, update it, if not ,insert a new one.
        dimensionAttributeValueTotallingCriteria = DimensionAttributeValueTotallingCriteria::findInterval_CN(dimensionAttributeValue.RecId, true);

        if (dimensionAttributeValueTotallingCriteria.RecId)
        {
            dimensionAttributeValueTotallingCriteria.FromValue = fromAc;

            if (toAc)
            {
                dimensionAttributeValueTotallingCriteria.ToValue = toAc;
            }
            else
            {
                dimensionAttributeValueTotallingCriteria.ToValue = fromAc;
            }

            dimensionAttributeValueTotallingCriteria.update();
        }
        else
        {
            dimensionAttributeValueTotallingCriteria.DimensionAttributeValue = dimensionAttributeValue.RecId;
            dimensionAttributeValueTotallingCriteria.FromValue = fromAc;

            if (toAc)
            {
                dimensionAttributeValueTotallingCriteria.ToValue = toAc;
            }
            else
            {
                dimensionAttributeValueTotallingCriteria.ToValue = fromAc;
            }

            dimensionAttributeValueTotallingCriteria.insert();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>