<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransferMassTaskService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetTransferMassTaskService</c> class handles the Fixed Asset Mass transfer operations through Sys Operation Framework.
/// </summary>
public class AssetTransferMassTaskService extends SysOperationServiceBase
{
    boolean isExecutionModeSynchronous;
    #AssetTransfer
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Divides the total number of assets into pages and set up runtime tasks.
    /// </summary>
    /// <param name="_assetTransferContract">
    ///     An object of the <c>AssetTransferMassContract</c> class.
    /// </param>
    /// <param name="sRSPrintDestinationSettings">
    ///     An object of the <c>SRSPrintDestinationSettings</c> class.
    /// </param>
    public void process(
        AssetTransferMassContract _assetTransferContract,
        SRSPrintDestinationSettings sRSPrintDestinationSettings)
    {
        AssetTransferMassController assetTransferController;
        AssetTransferMassContract   assetTransferContract;
        BatchHeader                 assetTransferBatchHeader;
        Query                       query;
        QueryRun                    queryRun;
        QueryBuildDataSource        qbds;
        SysRecordSortedList         assetBookList;

        AssetBook                   assetBook;
        AssetId                     currentAssetId;

        boolean                     hasNextAssetBook;
        container                   packedAssetBookList;
        int                         maxAssetsPerBatch = #pageSize;
        int                         assetCounter;

        if (_assetTransferContract.parmAction() == AssetTransferMassAction::Transfer)
        {
            query = new Query(SysOperationHelper::base64Decode(_assetTransferContract.parmQuery()));

            // Adding order to query results to arrange first by AssetId, then AssetBook RecId.
            qbds = query.dataSourceTable(tableNum(AssetBook));
            qbds.addOrderByField(fieldNum(AssetBook, AssetId));
            qbds.addOrderByField(fieldNum(AssetBook, RecId));

            queryRun = new QueryRun(query);

            queryRun.literals(true);

            hasNextAssetBook = queryRun.next();

            if (hasNextAssetBook)
            {
                assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;
                currentAssetId = assetBook.AssetId;

                //
                // Executes until all asset books have been divided and set to be processed into batches.
                // Executes once per batch.
                //
                while (hasNextAssetBook)
                {
                    assetCounter = 0;

                    // Initializing the asset book list for a single batch.
                    assetBookList = new SysRecordSortedList(tableNum(AssetBook));
                    assetBookList.sortOrder(fieldNum(AssetBook, AssetId), fieldNum(AssetBook, RecId));

                    //
                    // Adding asset books to the list for a single batch.
                    // Executes until all asset books returned by the query are added and/or all asset books for maximum allowed number of assets per batch is reached.
                    //
                    while (hasNextAssetBook && assetCounter < maxAssetsPerBatch)
                    {
                        assetBookList.ins(assetBook);

                        hasNextAssetBook = queryRun.next();
                        assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;

                        //
                        // Check if next asset book record belongs to different Asset.
                        // If so, increment the assetCounter by 1 and proceed to check if maximum assets per batch limit is reached.
                        // Otherwise, do not increase the asset counter and proceed to add the next asset book in the list since it belongs to the same asset.
                        // Executes once per first asset book of each asset to ensure all assetBooks for a particular asset gets added to the same list.
                        //
                        if (assetBook.AssetId != currentAssetId)
                        {
                            assetCounter++;
                            currentAssetId = assetBook.AssetId;
                        }
                    }

                    packedAssetBookList = assetBookList.pack();

                    assetTransferController = new AssetTransferMassController();

                    assetTransferController.parmMethodName(methodStr(AssetTransferMassTaskService, processTask));
                    assetTransferController.parmDialogCaption("@SYS4006393");
                    assetTransferController.parmExecutionMode(SysOperationExecutionMode::ScheduledBatch);

                    if (isExecutionModeSynchronous)
                    {
                        assetTransferController.parmExecutionMode(SysOperationExecutionMode::Synchronous);
                    }

                    assetTransferContract = assetTransferController.getAssetTransferContract();

                    assetTransferContract.parmAction(_assetTransferContract.parmAction());
                    assetTransferContract.parmAssetBookList(packedAssetBookList);
                    assetTransferContract.parmDueFromAccount(_assetTransferContract.parmDueFromAccount());
                    assetTransferContract.parmDueToAccount(_assetTransferContract.parmDueToAccount());
                    assetTransferContract.parmQuery(_assetTransferContract.parmQuery());
                    assetTransferContract.parmTargetDefaultDimension(_assetTransferContract.parmTargetDefaultDimension());
                    assetTransferContract.parmTransferComment(_assetTransferContract.parmTransferComment());
                    assetTransferContract.parmTransferDate(_assetTransferContract.parmTransferDate());

                    if (this.isExecutingInBatch())
                    {
                        if (!assetTransferBatchHeader)
                        {
                            assetTransferBatchHeader = BatchHeader::getCurrentBatchHeader();
                        }

                        assetTransferBatchHeader.addRunTimeTask(assetTransferController, this.getCurrentBatchTask().RecId);
                    }
                    else
                    {
                        assetTransferController.parmExecutionMode(SysOperationExecutionMode::Synchronous);
                        assetTransferController.run();
                    }
                }

                if (assetTransferBatchHeader)
                {
                    assetTransferBatchHeader.save();
                }
            }
        }
        else
        {
            if (this.isExecutingInBatch())
            {
                if (!assetTransferBatchHeader)
                {
                    assetTransferBatchHeader = BatchHeader::getCurrentBatchHeader();
                }

                if (!assetTransferBatchHeader.parmRuntimeJob())
                {
                    AssetTransferMassController::executeReport(_assetTransferContract, sRSPrintDestinationSettings, new Args());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes as the runtime task in Fixed Asset Mass Transfer.
    /// </summary>
    /// <param name="_assetTransferContract">
    ///     Data Contract object passed from the Controller object.
    /// </param>
    public void processTask(AssetTransferMassContract _assetTransferContract)
    {
        AssetBook                   assetBook;
        AssetTransfer               assetTransfer;
        AssetTransferBalancing      assetTransferBalancing;
        boolean                     haveMoreRecords;
        boolean                     transferSuccessful;
        container                   packedAssetBookList;
        SysRecordSortedList         assetBookList;
        BatchJob                    batchJob;

        packedAssetBookList = _assetTransferContract.parmAssetBookList();

        assetBookList = new SysRecordSortedList(tableNum(AssetBook));
        assetBookList.sortOrder(fieldNum(AssetBook, AssetId), fieldNum(AssetBook, RecId));
        assetBookList.unpack(packedAssetBookList);

        try
        {
            ttsBegin;

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                assetTransfer = AssetTransferBalancing::newByDueFromDueTo(
                                                        MainAccount::findByMainAccountId(_assetTransferContract.parmDueFromAccount()).RecId,
                                                        MainAccount::findByMainAccountId(_assetTransferContract.parmDueToAccount()).RecId);

                assetTransferBalancing = assetTransfer as AssetTransferBalancing;
            }
            else
            {
                assetTransfer = AssetTransfer::construct();
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                && assetTransferBalancing.isBalancing(_assetTransferContract.parmTargetDefaultDimension())
                && !(_assetTransferContract.parmDueFromAccount() && _assetTransferContract.parmDueToAccount()))
            {
                error(strFmt("@SPS1598", "@SPS1209", "@SPS1210"));
                transferSuccessful = false;
            }
            else
            {
                // Method transferAsset() of the AssetTransferMass class appends warning messages to infolog in case of missing mandatory fields.
                transferSuccessful = assetTransfer.transferAsset(
                                        assetBookList,
                                        _assetTransferContract.parmTargetDefaultDimension(),
                                        _assetTransferContract.parmTransferDate(),
                                        _assetTransferContract.parmTransferComment());

                if (transferSuccessful)
                {
                    ttsCommit;
                    info("@SYS4006338");
                }
            }
        }
        catch (Exception::Error)
        {
            transferSuccessful = false;
        }

        if (!transferSuccessful)
        {
            ttsAbort;

            error("@SYS4006340");
            haveMoreRecords = assetBookList.first(assetBook);

            while (haveMoreRecords)
            {
                error(strFmt("@FixedAssets:FA_MessageError_FailedToTransferBook", assetBook.AssetId, assetBook.BookId));
                haveMoreRecords = assetBookList.next(assetBook);
            }

            if (this.isExecutingInBatch())
            {
                ttsBegin;

                select forUpdate * from batchJob
                    where batchJob.RecId == this.getCurrentBatchTask().BatchJobId;

                if (batchJob)
                {
                    batchJob.Status = BatchStatus::Error;
                    batchJob.update();
                }

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExecutionModeSynchronous</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the execution mode of the batch tasks to be synchronous.
    /// </summary>
    /// <param name="_isExecutionModeSynchronous">
    ///     A Boolean value that indicates whether to set the execution mode of the batch tasks to synchronous.
    /// </param>
    /// <returns>
    ///     true if the execution mode of batch tasks to be processed is true.
    /// </returns>
    public boolean setExecutionModeSynchronous(boolean _isExecutionModeSynchronous)
    {
        isExecutionModeSynchronous = _isExecutionModeSynchronous;
        return isExecutionModeSynchronous;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>