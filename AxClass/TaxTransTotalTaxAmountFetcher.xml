<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransTotalTaxAmountFetcher</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Used to determine the total tax amount of a group of tax transactions.
/// </summary>
class TaxTransTotalTaxAmountFetcher
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    public static TaxTransTotalTaxAmountFetcher construct()
    {
        #ISOCountryRegionCodes

        // <GIN>
        if (TaxParameters::isServiceTaxEnable_IN())
        {
            return TaxTransTotalTaxAmountFetcher_W::construct();
        }
        // </GIN>
        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]) || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            return TaxTransTotalTaxAmountFetcher_W::construct();
        }
        // </GEECZ>

        return new TaxTransTotalTaxAmountFetcher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalActualTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The actual total tax amount in the transaction currency.
    /// </summary>
    /// <param name="_query">
    ///  A query that indicates the range restrictions.
    /// </param>
    /// <param name="_changeDisplaySign">
    ///  A Boolean value that indicates if the sign should be determined based on the tax code tax direction.
    /// </param>
    /// <param name="_generalJournalEntryId">
    ///  A RefRecId value that indicates an additional range restriction.
    /// </param>
    /// <returns>
    ///  The total tax amount in the transaction currency.
    /// </returns>
    public TaxAmountCur getTotalActualTaxAmount(Query                       _query,
                                                boolean                     _changeDisplaySign = false,
                                                RefRecId                    _generalJournalEntryId = 0)
    {
        Query                   taxQuery;
        AmountCur               taxAmountCur;
        QueryBuildDataSource    qB;

        taxQuery = new Query();
        SysQuery::mergeRanges(taxQuery, _query);
        qB = taxQuery.dataSourceNo(1);

        this.addQueryConditions(qB);

        this.addFilterByGeneralJournalEntryId(_generalJournalEntryId, taxQuery);

        taxAmountCur += this.getTaxAmountForAutoGenerated(qB, taxQuery, _changeDisplaySign);

        taxAmountCur += this.getTaxAmountForNotAutoGenerated(qB, taxQuery, _changeDisplaySign);

        return taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueryConditions</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Add additional query conditions to the query that will be used to determine the total tax amount.
    /// </summary>
    /// <param name = "_qB">The <c>QueryBuildDateSource</c> for the query that will be run to determine the total tax amount.</param>
    protected void addQueryConditions(QueryBuildDataSource _qB)
    {
        _qB.orderMode(OrderMode::GroupBy);

        _qB.addSortField(fieldNum(TaxTrans, CurrencyCode));
        _qB.addSortField(fieldNum(TaxTrans, TaxDirection));
        _qB.addSortField(fieldNum(TaxTrans, ReverseCharge_W));

        _qB.addSelectionField(fieldNum(TaxTrans, TaxAmount), SelectionField::Sum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterByGeneralJournalEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Add an exist join condition to the query to check with the General journal entry when collecting
    ///  the tax transactions to get the total sum for if a general journal entry id is provided.
    /// </summary>
    /// <param name = "_generalJournalEntryId">The general journal entry id that is filtering the tax transactions.</param>
    /// <param name = "_taxQuery">The query that will be used to get the tax transactions to find the total tax amount from.</param>
    protected void addFilterByGeneralJournalEntryId (RefRecId _generalJournalEntryId, Query _taxQuery)
    {
        QueryBuildDataSource    ds;

        if (_generalJournalEntryId)
        {
            //Adding the join to the SubledgerVoucherGeneralJournalEntry table
            _taxQuery = SubledgerVoucherGeneralJournalEntry::addJoinForNaturalKey(_taxQuery, tableNum(TaxTrans),
                                     fieldNum(TaxTrans, TransDate),
                                     fieldNum(TaxTrans, Voucher),
                                     fieldNum(TaxTrans, DataAreaId));

            ds = _taxQuery.dataSourceTable(tableNum(SubledgerVoucherGeneralJournalEntry));
            ds.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry)).value(int642str(_generalJournalEntryId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountForAutoGenerated</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get the total tax amount for all auto generated tax transactions.
    /// </summary>
    /// <param name = "_qB">The <c>QueryBuildDataSource</c> for the query.</param>
    /// <param name = "_taxQuery">The query that will find the tax transactions to get the total tax amount from.</param>
    /// <param name = "_changeDisplaySign">Is this a change display sign scenario?</param>
    /// <returns>The total tax amount for all auto generated tax transactions found by the query.</returns>
    protected TaxAmountCur getTaxAmountForAutoGenerated(QueryBuildDataSource _qB, Query _taxQuery, boolean _changeDisplaySign)
    {
        TaxAmountCur    sourceTaxAmountCur;
        QueryRun        taxQueryRun;
        TaxTrans        taxTrans;
        int             sign;

        _qB.addSelectionField(fieldNum(TaxTrans, SourceTaxAmountCur), SelectionField::Sum);
        _qB.addRange(fieldNum(TaxTrans, TaxAutogenerated)).value(queryValue(NoYes::Yes));

        taxQueryRun = new QueryRun(_taxQuery);
        while (taxQueryRun.next())
        {
            taxTrans = taxQueryRun.getNo(1);

            sign = this.determineSign(_changeDisplaySign, taxTrans);

            sourceTaxAmountCur += taxTrans.SourceTaxAmountCur * sign;
        }

        return sourceTaxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountForNotAutoGenerated</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get the total tax amount for all non auto generated tax transactions.
    /// </summary>
    /// <param name = "_qB">The <c>QueryBuildDataSource</c> for the query.</param>
    /// <param name = "_taxQuery">The query that will find the tax transactions to get the total tax amount from.</param>
    /// <param name = "_changeDisplaySign">Is this a change display sign scenario?</param>
    /// <returns>The total tax amount for all non auto generated tax transactions found by the query.</returns>
    protected TaxAmountCur getTaxAmountForNotAutoGenerated(QueryBuildDataSource _qB, Query _taxQuery, boolean _changeDisplaySign)
    {
        TaxAmountCur    sourceRegulateAmountCur;
        QueryRun        taxQueryRun;
        TaxTrans        taxTrans;
        int             sign;

        _qB.addSelectionField(fieldNum(TaxTrans, SourceRegulateAmountCur), SelectionField::Sum);
        _qB.findRange(fieldNum(TaxTrans, TaxAutogenerated)).value(queryValue(NoYes::No));

        taxQueryRun = new QueryRun(_taxQuery);
        while (taxQueryRun.next())
        {
            taxTrans = taxQueryRun.getNo(1);

            sign = this.determineSign(_changeDisplaySign, taxTrans);

            sourceRegulateAmountCur += taxTrans.SourceRegulateAmountCur * sign;
        }

        return sourceRegulateAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determine the sign of the amount of the tax transaction. This ensures we correctly sum the tax amount.
    /// </summary>
    /// <param name = "_changeDisplaySign">Is this a change display sign scenario?</param>
    /// <param name = "_taxTrans">The tax transaction we will be retrieving the amount from.</param>
    /// <returns>1 or -1, -1 means we flip the sign on the amount found on the tax transaction. 1 means we leave teh sign as is.</returns>
    protected int determineSign(boolean _changeDisplaySign, TaxTrans _taxTrans)
    {
        int sign;

        sign = (_changeDisplaySign && _taxTrans.ReverseCharge_W == NoYes::No) ? Tax::changeDisplaySign(_taxTrans.TaxDirection) : 1;

        return sign;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>