<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalizingDefinitionEngine</c> class produces system generated entries based on the
///    attributes of the originating transaction.
/// </summary>
public class JournalizingDefinitionEngine
{
    boolean matchingEntryFound;
    JournalizingDefinitionMatchId matchingEntry;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEngineResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the input parameters defined in the <c>journalizingDefinitionEngineResult</c>
    ///    object have already been processed in this instance of the engine.
    /// </summary>
    /// <param name="_journalizingDefinitionEngineResult">
    ///    The object of the <c>JournalizingDefinitionEngineResult</c> class that contains the input
    ///    parameters to be processed by the engine.
    /// </param>
    /// <returns>
    ///    true if the engine has already processed this set of input parameters; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the engine finds a match, the system generated entries from the cache are stored in the
    ///    <paramref name="_journalizingDefinitionEngineResult" /> parameter.
    /// </remarks>
    protected boolean checkEngineResults(JournalizingDefinitionEngineResult _journalizingDefinitionEngineResult)
    {
        boolean result = false;
        container genereatedEntriesListCache;
        JournalizingDefinitionEngineMatchKey engineResultKey = _journalizingDefinitionEngineResult.getMatchKey();

        genereatedEntriesListCache = JournalizingDefinitionCache::getValue(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries, [engineResultKey]);

        if (genereatedEntriesListCache != conNull())
        {
            result = true;
            _journalizingDefinitionEngineResult.parmJournalizingDefinitionEntries(List::create(genereatedEntriesListCache));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalancingSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the debit or credit balancing sign for a detail entry line based on the sign value.
    /// </summary>
    /// <param name="_debitCredit">
    ///    The sign to evaluate to determine the balancing sign that corresponds.
    /// </param>
    /// <returns>
    ///    A value of <c>JournalizingDefinitionDebitCredit::Debit</c> if the <paramref name="_debitCredit" />
    ///    parameter is a value of <c>JournalizingDefinitionDebitCredit::Credit</c>; otherwise,
    ///    <c>JournalizingDefinitionDebitCredit::Credit</c>.
    /// </returns>
    private JournalizingDefinitionDebitCredit getBalancingSign(JournalizingDefinitionDebitCredit _debitCredit)
    {
        JournalizingDefinitionDebitCredit balancingSign;
        if (_debitCredit == DebitCredit::Credit)
        {
            balancingSign = DebitCredit::Debit;
        }
        else
        {
             balancingSign = DebitCredit::Credit;
        }
        return balancingSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalizingDefinitionMatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the matching ledger account record ID corresponding to the ledger account and posting
    /// definition given.
    /// </summary>
    /// <param name="_ledgerDimensionAccount">
    /// The ledger dimension account from an originating transaction.
    /// </param>
    /// <param name="_debitCredit">
    /// The debit or credit sign of the originating transaction.
    /// </param>
    /// <param name="_journalizingDefinitionId">
    /// The record ID of the journalizing defintion to process. Any linked journalizing definitions will also be processed.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date that will be used to select appropirate journalizing definition version. Any linked journalizing definitions will also be processed.
    /// </param>
    /// <returns>
    /// The matching ledger account record ID value.
    /// </returns>
    public JournalizingDefinitionMatchId getJournalizingDefinitionMatchId(
    LedgerDimensionAccount _ledgerDimensionAccount,
    JournalizingDefinitionDebitCredit _debitCredit,
    JournalizingDefinitionId _journalizingDefinitionId,
    TransDate                _transDate
    )
    {
        this.matchingAccountExist(_ledgerDimensionAccount, _debitCredit, _journalizingDefinitionId, _transDate);

        return matchingEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSystemGeneratedEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of system generated entries produced by the engine based on the input parameters. Each entry is an instance of a
    /// <c>JournalizingDefinitionOutput</c> class that consists of a ledger dimension account and a debit or credit sign.
    /// </summary>
    /// <param name="_ledgerDimensionAccount">
    /// The ledger dimension account from an originating transaction.
    /// </param>
    /// <param name="_debitCredit">
    /// The debit or credit sign of the originating transaction.
    /// </param>
    /// <param name="_journalizingDefinitionId">
    /// The record ID of the journalizing defintion to process. Any linked journalizing definitions will also be processed.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date that will be used to select appropirate journalizing definition version. Any linked journalizing definitions will also be processed.
    /// </param>
    /// <returns>
    /// A list of JournalizingDefinitionEntry class objects.
    /// </returns>
    public List getSystemGeneratedEntries(LedgerDimensionAccount _ledgerDimensionAccount,
                                JournalizingDefinitionDebitCredit _debitCredit,
                                JournalizingDefinitionId _journalizingDefinitionId,
                                TransDate                _transDate)
    {
        boolean                                         ret = false;
        List                                            list = new List(Types::Class);
        JournalizingDefinitionEngineResult              journalizingDefinitionEngineResult = JournalizingDefinitionEngineResult::construct();

        this.validateJournalizingDefinition(_journalizingDefinitionId, _transDate, _ledgerDimensionAccount); // throws an error if not valid

        // setup object to check local memory of engine results to see if this criteria has already been processed
        // if it has, we will return the entries from the local memory instead of regenerating the entries
        journalizingDefinitionEngineResult.parmLedgerDimensionAccountMatch(_ledgerDimensionAccount);
        journalizingDefinitionEngineResult.parmJournalizingDefinitionMatch(_journalizingDefinitionId);
        journalizingDefinitionEngineResult.parmJournalizingDefinitionDebitCredit(_debitCredit);
        journalizingDefinitionEngineResult.parmTransDate(_transDate);
        if (!this.checkEngineResults(journalizingDefinitionEngineResult))
        {
            journalizingDefinitionEngineResult.parmJournalizingDefinitionEntries(list);

            this.processJournalizingDefinition(journalizingDefinitionEngineResult);
            this.processRelatedJournalizingDefinitions(journalizingDefinitionEngineResult);

            JournalizingDefinitionCache::insertValue(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries,
                                    [journalizingDefinitionEngineResult.getMatchKey()],
                                    journalizingDefinitionEngineResult.parmJournalizingDefinitionEntries().pack());
        }

        return journalizingDefinitionEngineResult.parmJournalizingDefinitionEntries();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <paramref name="_originatingLedgerDimensionAccount" /> parameter matches the
    ///    ledger dimension account that is defined on the match detail of the journalizing definition.
    /// </summary>
    /// <param name="_originatingDimensionStorage">
    ///    The <c>DimensionStorage</c> object created from the ledger dimension account from the transaction
    ///    for which to generate entries.
    /// </param>
    /// <param name="_matchLedgerDimensionAccount">
    ///    The journalizing definition detail ledger dimension account to match.
    /// </param>
    /// <param name="_dimensionHierarchyId">
    ///    The record ID of account structure to match.
    /// </param>
    /// <returns>
    ///    true if the ledger dimension accounts match; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method matches the hierarchy and dimensions of the <paramref
    ///    name="_originatingLedgerDimensionAccount" /> parameter and the <paramref
    ///    name="_matchLedgerDimensionAccount" /> parameter dimension, by dimension. Any empty segment in the
    ///    <paramref name="_matchLedgerDimensionAccount" /> parameter is considered as a match with the
    ///    corresponding dimension of the <paramref name="_matchLedgerDimensionAccount" /> parameter.
    /// </remarks>
    protected boolean isAccountMatch(DimensionStorage       _originatingDimensionStorage,
                                   LedgerDimensionAccount   _matchLedgerDimensionAccount,
                                   DimensionHierarchyId     _dimensionHierarchyId)
    {
        boolean          ret = true;

        if (_originatingDimensionStorage.lastSavedRecId() != _matchLedgerDimensionAccount && _matchLedgerDimensionAccount)
        {            
            if (DimensionAttributeValueCombination::find(_matchLedgerDimensionAccount).AccountStructure == _originatingDimensionStorage.getHierarchyIdForSegment(1))
            {
                DimensionAttributeLevelValue matchDimensionAttributeLevelValue;
                DimensionAttributeValueGroupCombination matchDimensionAttributeValueGroupCombination;
                DimensionAttributeLevelValue originatingDimensionAttributeLevelValue;
                DimensionAttributeValueGroupCombination originatingDimensionAttributeValueGroupCombination;

                select firstOnly DimensionAttributeValue from matchDimensionAttributeLevelValue
                    exists join matchDimensionAttributeValueGroupCombination
                        where matchDimensionAttributeValueGroupCombination.DimensionAttributeValueGroup == matchDimensionAttributeLevelValue.DimensionAttributeValueGroup
                            && matchDimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == _matchLedgerDimensionAccount
                    notexists join originatingDimensionAttributeLevelValue
                        where originatingDimensionAttributeLevelValue.DimensionAttributeValue == matchDimensionAttributeLevelValue.DimensionAttributeValue
                    exists join  originatingDimensionAttributeValueGroupCombination
                        where originatingDimensionAttributeValueGroupCombination.DimensionAttributeValueGroup == originatingDimensionAttributeLevelValue.DimensionAttributeValueGroup
                            && originatingDimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == _originatingDimensionStorage.lastSavedRecId();
                
                if (matchDimensionAttributeLevelValue.DimensionAttributeValue)
                {
                    ret = false;
                }
            }
            else
            {
                ret = false;
            }
        }
        else if (!_matchLedgerDimensionAccount)
        {
            ret = _originatingDimensionStorage.getHierarchyId(1) == _dimensionHierarchyId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchingAccountExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines, if the matching ledger account exist corresponding to the ledger account for Advanaced Ledger Entry.
    /// </summary>
    /// <param name="_ledgerDimensionAccount">
    /// The ledger dimension account from an originating transaction.
    /// </param>
    /// <param name="_debitCredit">
    /// The debit or credit sign of the originating transaction.
    /// </param>
    /// <param name="_journalizingDefinitionId">
    /// The record ID of the journalizing defintion to process. Any linked journalizing definitions will also be processed.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date that will be used to select appropirate journalizing definition version. Any linked journalizing definitions will also be processed.
    /// </param>
    /// <returns>
    /// A boolean value which indicates the existence of matching ledger account in the selected journalizing definition record.
    /// </returns>
    public boolean matchingAccountExist(LedgerDimensionAccount _ledgerDimensionAccount,
                                JournalizingDefinitionDebitCredit _debitCredit,
                                JournalizingDefinitionId _journalizingDefinitionId,
                                TransDate                _transDate)
    {
        boolean                                         ret = false;
        List                                            list = new List(Types::Class);
        JournalizingDefinitionEngineResult              journalizingDefinitionEngineResult = JournalizingDefinitionEngineResult::construct();

        this.validateJournalizingDefinition(_journalizingDefinitionId, _transDate, _ledgerDimensionAccount); // throws an error if not valid

        // setup object to check local memory of engine results to see if this criteria has already been processed
        // if it has, we will return the entries from the local memory instead of regenerating the entries
        journalizingDefinitionEngineResult.parmLedgerDimensionAccountMatch(_ledgerDimensionAccount);
        journalizingDefinitionEngineResult.parmJournalizingDefinitionMatch(_journalizingDefinitionId);
        journalizingDefinitionEngineResult.parmJournalizingDefinitionDebitCredit(_debitCredit);
        journalizingDefinitionEngineResult.parmTransDate(_transDate);

        journalizingDefinitionEngineResult.parmJournalizingDefinitionEntries(list);

        this.processJournalizingDefinition(journalizingDefinitionEngineResult);
        this.processRelatedJournalizingDefinitions(journalizingDefinitionEngineResult);

        return matchingEntryFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates system generated entries based on the journalizing definition and the originating
    ///    transaction attributes passed in the <paramref name="_journalizingDefinitionEngineResult" />
    ///    parameter.
    /// </summary>
    /// <param name="_journalizingDefinitionEngineResult">
    ///    The object that contains the originating transaction attributes and journalizing definition to
    ///    process.
    /// </param>
    /// <remarks>
    ///    This method only processes the journalizing definition passed into the method, not any linked
    ///    journalizing definitions.
    /// </remarks>
    protected void processJournalizingDefinition(JournalizingDefinitionEngineResult _journalizingDefinitionEngineResult)
    {
        QueryRun                                        qrJournalizingDefinitionMatchDetail;
        Query                                           queryJournalizingDefinitionMatchDetail;
        QueryBuildRange                                 qbrJournalizingDefinition;
        JournalizingDefinitionMatch                     journalizingDefinitionMatch;
        JournalizingDefinitionMatchDetail               journalizingDefinitionMatchDetail;
        JournalizingDefinitionEntry                     generatedEntry;
        DimensionStorage                                originatingDimensionStorage;
        int                                             currentPriority;
        JournalizingDefinitionCode                      journalizingDefinitionCode;

        queryJournalizingDefinitionMatchDetail = new Query(queryStr(JournalizingDefinitionMatchRules));
        queryJournalizingDefinitionMatchDetail.validTimeStateAsOfDate(_journalizingDefinitionEngineResult.parmTransDate());
        qbrJournalizingDefinition = queryJournalizingDefinitionMatchDetail.dataSourceNo(1).findRange(fieldNum(JournalizingDefinitionVersion, JournalizingDefinition));
        qbrJournalizingDefinition.value(queryValue(_journalizingDefinitionEngineResult.parmJournalizingDefinitionMatch()));

        qrJournalizingDefinitionMatchDetail = new QueryRun(queryJournalizingDefinitionMatchDetail);

        if (_journalizingDefinitionEngineResult.parmLedgerDimensionAccountMatch() &&
            !DimensionAttributeValueCombination::exist(_journalizingDefinitionEngineResult.parmLedgerDimensionAccountMatch()))
        {
            throw error("@SYS132142");
        }

        originatingDimensionStorage = DimensionStorage::findById(_journalizingDefinitionEngineResult.parmLedgerDimensionAccountMatch());

        while (qrJournalizingDefinitionMatchDetail.next())
        {
            journalizingDefinitionMatch = qrJournalizingDefinitionMatchDetail.get(tableNum(JournalizingDefinitionMatch));

            if  ((currentPriority) && (currentPriority != journalizingDefinitionMatch.JournalizingDefinitionPriority))
            {
                break; // done processing a priority, no more priorities will be considered
            }
            else if (this.isAccountMatch(originatingDimensionStorage, journalizingDefinitionMatch.LedgerDimension, journalizingDefinitionMatch.DimensionHierarchy))
            {
                currentPriority = journalizingDefinitionMatch.JournalizingDefinitionPriority;

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    matchingEntryFound = true;
                }
                if (matchingEntry == 0)
                {
                    matchingEntry = journalizingDefinitionMatch.RecId;
                }

                journalizingDefinitionCode = JournalizingDefinition::findByJournalizingDefinitionMatchId(journalizingDefinitionMatch.RecId).JournalizingDefinitionCode;

                while select JournalizingDefinitionSign, LedgerDimension
                    from  journalizingDefinitionMatchDetail
                        where journalizingDefinitionMatchDetail.JournalizingDefinitionMatch == journalizingDefinitionMatch.RecId
                {
                    generatedEntry = new JournalizingDefinitionEntry();

                    generatedEntry.parmLedgerDimension(
                        LedgerDimensionFacade::serviceMergeLedgerDimensions(
                            journalizingDefinitionMatchDetail.LedgerDimension,
                            _journalizingDefinitionEngineResult.parmLedgerDimensionAccountMatch()));

                    switch (journalizingDefinitionMatchDetail.JournalizingDefinitionSign)
                    {
                        case JournalizingDefinitionSignId::Balancing:
                            generatedEntry.parmJournalizingDefinitionDebitCredit(
                                    this.getBalancingSign(_journalizingDefinitionEngineResult.parmJournalizingDefinitionDebitCredit()));
                            break;
                        case JournalizingDefinitionSignId::SameSign:
                            generatedEntry.parmJournalizingDefinitionDebitCredit(_journalizingDefinitionEngineResult.parmJournalizingDefinitionDebitCredit());
                            break;
                    }
                    generatedEntry.parmJournalizingDefinitionCode(journalizingDefinitionCode);
                    _journalizingDefinitionEngineResult.parmJournalizingDefinitionEntries().addEnd(generatedEntry);
                }
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRelatedJournalizingDefinitions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates system generated entries based on the journalizing definitions that link to the
    ///    journalizing definition and originating transaction attributes in the <paramref
    ///    name="_journalizingDefinitionEngineResult" /> parameter.
    /// </summary>
    /// <param name="_journalizingDefinitionEngineResult">
    ///    The object that contains the originating transaction attributes and parent journalizing definition
    ///    of the linked journalizing definitions to process.
    /// </param>
    /// <remarks>
    ///    This method only processes the related linked journalizing definition of the journalizing
    ///    definition passed into the method, not the journalizing definition itself.
    /// </remarks>
    protected void processRelatedJournalizingDefinitions(JournalizingDefinitionEngineResult _journalizingDefinitionEngineResult)
    {
        QueryRun                                        qrJournalizingDefinitionMatchDetail;
        Query                                           queryRelatedJournalizingDefinitionMatchDetail;
        QueryBuildRange                                 qbrJournalizingDefinition;
        JournalizingDefinitionMatch                     journalizingDefinitionMatch;
        JournalizingDefinitionMatchDetail               journalizingDefinitionMatchDetail;
        JournalizingDefinitionEntry                     generatedEntry;
        JournalizingDefinitionVersion                   journalizingDefinitionVersion;
        int                                             currentPriority = 0;
        int64                                           currentJournalizingDefinitionVersion = 0;
        DimensionStorage                                originatingDimensionStorage;
        SysDateEffectiveDataManager                     sysDateEffectiveDataManager;
        JournalizingDefinitionCode                      journalizingDefinitionCode;

        sysDateEffectiveDataManager = SysDateEffectiveDataManager::construct(SysDateEffectiveSetupType::JournalizingDefinition);

        journalizingDefinitionVersion = sysDateEffectiveDataManager.findVersionByParentIdAndDate(_journalizingDefinitionEngineResult.parmJournalizingDefinitionMatch(),
                                                                                                             _journalizingDefinitionEngineResult.parmTransDate());
        queryRelatedJournalizingDefinitionMatchDetail = new Query(queryStr(JournalizingDefinitionRelatedMatchRules));
        queryRelatedJournalizingDefinitionMatchDetail.validTimeStateAsOfDate(_journalizingDefinitionEngineResult.parmTransDate());
        qbrJournalizingDefinition = queryRelatedJournalizingDefinitionMatchDetail.dataSourceNo(1).findRange(fieldNum(JournalizingDefinitionRelatedDefinition, ParentJournalizingDefinitionVersion));
        qbrJournalizingDefinition.value(queryValue(journalizingDefinitionVersion.RecId));

        qrJournalizingDefinitionMatchDetail = new QueryRun(queryRelatedJournalizingDefinitionMatchDetail);
        originatingDimensionStorage = DimensionStorage::findById(_journalizingDefinitionEngineResult.parmLedgerDimensionAccountMatch());

        while (qrJournalizingDefinitionMatchDetail.next())
        {
            journalizingDefinitionMatch = qrJournalizingDefinitionMatchDetail.get(tableNum(JournalizingDefinitionMatch));

            if (currentJournalizingDefinitionVersion != journalizingDefinitionMatch.JournalizingDefinitionVersion)
            {
                currentPriority = 0;
                currentJournalizingDefinitionVersion = journalizingDefinitionMatch.JournalizingDefinitionVersion;
            }

            if  ((currentPriority != 0) && (currentPriority != journalizingDefinitionMatch.JournalizingDefinitionPriority))
            {
                continue; // done processing a priority, no more priorities for this jounalizing definition will be considered
            }
            else if (this.isAccountMatch(originatingDimensionStorage, journalizingDefinitionMatch.LedgerDimension, journalizingDefinitionMatch.DimensionHierarchy))
            {
                currentPriority = journalizingDefinitionMatch.JournalizingDefinitionPriority;

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    matchingEntryFound = true;
                }
                if (matchingEntry == 0)
                {
                    matchingEntry = journalizingDefinitionMatch.RecId;
                }

                journalizingDefinitionCode = JournalizingDefinition::findByJournalizingDefinitionMatchId(journalizingDefinitionMatch.RecId).JournalizingDefinitionCode;

                while select JournalizingDefinitionSign, LedgerDimension
                    from  journalizingDefinitionMatchDetail
                        where journalizingDefinitionMatchDetail.JournalizingDefinitionMatch == journalizingDefinitionMatch.RecId
                {
                    generatedEntry = new JournalizingDefinitionEntry();
                    generatedEntry.parmLedgerDimension(journalizingDefinitionMatchDetail.LedgerDimension);
                    switch (journalizingDefinitionMatchDetail.JournalizingDefinitionSign)
                    {
                        case JournalizingDefinitionSignId::Balancing:
                            generatedEntry.parmJournalizingDefinitionDebitCredit(
                                    this.getBalancingSign(_journalizingDefinitionEngineResult.parmJournalizingDefinitionDebitCredit()));
                            break;
                        case JournalizingDefinitionSignId::SameSign:
                            generatedEntry.parmJournalizingDefinitionDebitCredit(_journalizingDefinitionEngineResult.parmJournalizingDefinitionDebitCredit());
                            break;
                    }
                    generatedEntry.parmJournalizingDefinitionCode(journalizingDefinitionCode);
                    _journalizingDefinitionEngineResult.parmJournalizingDefinitionEntries().addEnd(generatedEntry);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the journalizing definition record ID parameter references a valid journalizing definition.
    /// </summary>
    /// <param name="_journalizingDefinitionId">
    /// The record ID of the journalizing definition to validate.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date to validate.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    /// The ledger dimension account to validate.
    /// </param>
    protected void validateJournalizingDefinition(JournalizingDefinitionId _journalizingDefinitionId, TransDate _transDate, LedgerDimensionAccount _ledgerDimensionAccount)
    {
        SysDateEffectiveDataManager        sysDateEffectiveDataManager;
        JournalizingDefinitionEngineResult journalizingDefinitionEngineResult = JournalizingDefinitionEngineResult::construct();

        sysDateEffectiveDataManager = SysDateEffectiveDataManager::construct(SysDateEffectiveSetupType::JournalizingDefinition);
        if (!_transDate)
        {
            throw error("@SYS128707");
        }
        if ((_journalizingDefinitionId <=0) || (!JournalizingDefinition::findByRecId(_journalizingDefinitionId, false)))
        {
            throw error("@SYS132140");
        }
        else if (!sysDateEffectiveDataManager.findVersionByParentIdAndDate(_journalizingDefinitionId, _transDate).RecId)
        {
            throw error("@SYS132141");
        }
        if (!_ledgerDimensionAccount || (journalizingDefinitionEngineResult.parmLedgerDimensionAccountMatch() && !DimensionAttributeValueCombination::exist(journalizingDefinitionEngineResult.parmLedgerDimensionAccountMatch())))
        {
            throw error("@SYS132142");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JournalizingDefinitionEngine construct()
    {
        return new JournalizingDefinitionEngine();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>