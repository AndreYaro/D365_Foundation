<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQuarantineOrderSplitStarted</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventQuarantineOrderSplitStarted</c> class splits a started quarantine order.
/// </summary>
public class InventQuarantineOrderSplitStarted
{
    InventQuarantineOrder   quarantineOrderToSplit;
    InventQuarantineOrder   newQuarantineOrder;
    InventTransOriginId     newQuarantineOrderOriginId;

    InventQty               splitQuantity;
    PdsInventQty            splitCWQuantity;

    boolean                 isCatchWeight;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventQuarantineOrderSplitStarted</c> class.
    /// </summary>
    /// <param name = "_quarantineOrderToSplit">The quarantine order to split.</param>
    /// <param name = "_splitQuantity">Quantity to split.</param>
    /// <param name = "_splitCWQuantity">CW quantity to split; optional.</param>
    /// <returns>A new instance of the <c>InventQuarantineOrderSplitStarted</c> class.</returns>
    public static InventQuarantineOrderSplitStarted newFromParameters(
        InventQuarantineOrder   _quarantineOrderToSplit,
        InventQty               _splitQuantity,
        PdsInventQty            _splitCWQuantity = 0)
    {
        InventQuarantineOrderSplitStarted split = new InventQuarantineOrderSplitStarted();
        split.quarantineOrderToSplit    = _quarantineOrderToSplit;
        split.splitQuantity             = _splitQuantity;
        split.splitCWQuantity           = _splitCWQuantity;
        split.isCatchWeight             = PdsGlobal::pdsIsCWItem(_quarantineOrderToSplit.ItemId);

        return split;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the quarantine order split.
    /// </summary>
    public void execute()
    {
        this.updateQuantityThatHasSplitIntoOtherQuarantineOrders();
        this.endQuarantineOrderForSplitQuantity();
        this.createNewQuarantineOrderWithSplitQuantity();
        this.startNewQuarantineOrder();
        this.splitMarking();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuantityThatHasSplitIntoOtherQuarantineOrders</Name>
				<Source><![CDATA[
    private void updateQuantityThatHasSplitIntoOtherQuarantineOrders()
    {
        quarantineOrderToSplit.selectForUpdate(true);
        quarantineOrderToSplit.QuantityThatHasSplitIntoOtherQuarantineOrders
            += splitQuantity;
        quarantineOrderToSplit.PdsCWQuantityThatHasSplitIntoOtherQuarantineOrders
            += splitCWQuantity;
        quarantineOrderToSplit.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endQuarantineOrderForSplitQuantity</Name>
				<Source><![CDATA[
    private void endQuarantineOrderForSplitQuantity()
    {
        InventQuarantineUpdEnd inventQuarantineUpdEnd = InventQuarantineUpdEnd::newQuarantineOrder(quarantineOrderToSplit, splitQuantity, splitCWQuantity);
        inventQuarantineUpdEnd.parmSkipQualityOrderCreation(true);
        inventQuarantineUpdEnd.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewQuarantineOrderWithSplitQuantity</Name>
				<Source><![CDATA[
    private void createNewQuarantineOrderWithSplitQuantity()
    {
        newQuarantineOrder = quarantineOrderToSplit.data();
        newQuarantineOrder.Status           = InventQuarantineStatus::Created;
        newQuarantineOrder.RecId            = 0;
        newQuarantineOrder.QuarantineId     = '';
        newQuarantineOrder.Qty              = splitQuantity;
        newQuarantineOrder.RemainQty        = splitQuantity;
        newQuarantineOrder.PdsCWQty         = splitCWQuantity;
        newQuarantineOrder.PdsCWRemainQty   = splitCWQuantity;
        newQuarantineOrder.QuantityThatHasSplitIntoOtherQuarantineOrders         = 0;
        newQuarantineOrder.PdsCWQuantityThatHasSplitIntoOtherQuarantineOrders    = 0;
        newQuarantineOrder.insert(NoYes::No, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startNewQuarantineOrder</Name>
				<Source><![CDATA[
    private void startNewQuarantineOrder()
    {
        InventParmQuarantineOrder parm;
        parm.initParmDefault();
        parm.LineNum        = 1;
        parm.QuarantineId   = newQuarantineOrder.QuarantineId;
        parm.Qty            = newQuarantineOrder.RemainQty;
        parm.PdsCWQty       = newQuarantineOrder.PdsCWRemainQty;
        parm.Type           = InventQuarantineStatus::Started;

        var inventQuarantineUpdStartUp = InventQuarantineUpdStartUp::newParmBuffer(parm);
        inventQuarantineUpdStartUp.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitMarking</Name>
				<Source><![CDATA[
    private void splitMarking()
    {
        this.splitQuarantineIssueMarking();
        this.splitQuarantineReceiptMarking();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitQuarantineIssueMarking</Name>
				<Source><![CDATA[
    private void splitQuarantineIssueMarking()
    {
        InventTrans quarantineIssuesTrans = this.findQuarantineIssuesToUnmark();
        List unmarkedReceipts = this.unmarkQuarantineOrder(quarantineIssuesTrans); // Receipts previously marked against quarantine issues
        boolean markIssuesAgainstQuarantine = false;
        this.markTransactionsAgainstNewQuarantineOrder(unmarkedReceipts, markIssuesAgainstQuarantine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitQuarantineReceiptMarking</Name>
				<Source><![CDATA[
    private void splitQuarantineReceiptMarking()
    {
        InventTrans quarantineReceiptTrans = this.findQuarantineReceiptsToUnmark();
        List unmarkedIssues = this.unmarkQuarantineOrder(quarantineReceiptTrans); // Issues previously marked against quarantine receipts
        boolean markIssuesAgainstQuarantine = true;
        this.markTransactionsAgainstNewQuarantineOrder(unmarkedIssues, markIssuesAgainstQuarantine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findQuarantineIssuesToUnmark</Name>
				<Source><![CDATA[
    private InventTrans findQuarantineIssuesToUnmark()
    {
        InventTransOriginId quarantineInventTransOriginId = InventTransOriginQuarantineOrder::findInventTransOriginId(quarantineOrderToSplit.DataAreaId, quarantineOrderToSplit.QuarantineId);

        InventTrans quarantineTrans;
        InventDim quarantineDim;
        select Qty, PdsCWQty, InventTransOrigin, MarkingRefInventTransOrigin, InventDimId
            from quarantineTrans
            order by quarantineTrans.Qty // issue quantities are negative; start with the largest absolute quantity to minimize the number of unmarkings
            where quarantineTrans.InventTransOrigin             == quarantineInventTransOriginId
                && quarantineTrans.StatusReceipt                == StatusReceipt::None
                && quarantineTrans.StatusIssue                  == StatusIssue::Sold
                && quarantineTrans.MarkingRefInventTransOrigin  != 0
            exists join quarantineDim
                where quarantineDim.inventDimId         == quarantineTrans.inventDimId
                    && quarantineDim.InventLocationId   == quarantineOrderToSplit.inventDim().InventLocationId;

        return quarantineTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findQuarantineReceiptsToUnmark</Name>
				<Source><![CDATA[
    private InventTrans findQuarantineReceiptsToUnmark()
    {
        InventTransOriginId quarantineInventTransOriginId = InventTransOriginQuarantineOrder::findInventTransOriginId(quarantineOrderToSplit.DataAreaId, quarantineOrderToSplit.QuarantineId);

        InventTrans quarantineTrans;
        InventDim quarantineDim;
        select Qty, PdsCWQty, InventTransOrigin, MarkingRefInventTransOrigin, InventDimId
            from quarantineTrans
            order by quarantineTrans.Qty desc // start with the largest quantity to minimize the number of unmarkings
            where quarantineTrans.InventTransOrigin             == quarantineInventTransOriginId
                && quarantineTrans.StatusReceipt                == StatusReceipt::Purchased
                && quarantineTrans.StatusIssue                  == StatusIssue::None
                && quarantineTrans.MarkingRefInventTransOrigin  != 0
            exists join quarantineDim
                where quarantineDim.inventDimId         == quarantineTrans.inventDimId
                    && quarantineDim.InventLocationId   == quarantineOrderToSplit.inventDim().InventLocationId;

        return quarantineTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkQuarantineOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unmarks quarantine order transactions for split quantities.
    /// </summary>
    /// <param name = "_quarantineTransaction">Quarantine order transactions to unmark; multiple records can be selected, the method should iterate over them.</param>
    /// <returns>
    /// A list with unmarking information, where each member is a container with the following values:
    /// - Unmarked inventory transaction originator ID
    /// - Unmarked inventory dimension ID
    /// - Unmarked quantity; always positive
    /// - Unmarked CW quantity; always positive
    /// </returns>
    private List unmarkQuarantineOrder(InventTrans _quarantineTransaction)
    {
        List unmarkedData = new List(Types::Container);

        PmfQtyDataCarrier remainingQuantitiesToUnmark = PmfQtyDataCarrier::newStandard(splitQuantity, splitCWQuantity);

        while (_quarantineTransaction)
        {
            PmfQtyDataCarrier quantitiesToUnmark = this.determineQuantitiesToUnmark(_quarantineTransaction, remainingQuantitiesToUnmark);
            PmfQtyDataCarrier unmarkedQuantities = this.unmarkQuarantineTransaction(_quarantineTransaction, quantitiesToUnmark);

            unmarkedData.addEnd([_quarantineTransaction.MarkingRefInventTransOrigin, _quarantineTransaction.inventDimId, unmarkedQuantities.parmInventQty(), unmarkedQuantities.parmCwQty()]);
            
            this.subtractQuantities(remainingQuantitiesToUnmark, unmarkedQuantities);
            if (remainingQuantitiesToUnmark.parmInventQty() == 0 || (isCatchWeight && remainingQuantitiesToUnmark.parmCwQty() == 0))
            {
                break;
            }

            next _quarantineTransaction;
        }

        return unmarkedData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineQuantitiesToUnmark</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines quantities to unmark for a given quarantine order inventory transaction.
    /// </summary>
    /// <param name = "_quarantineTransaction">Quarantine order transaction to unmark.</param>
    /// <param name = "_remainingQuantitiesToUnmark">Remaining quantities to unmark.</param>
    /// <returns>Quantities to unmark; always positive.</returns>
    private PmfQtyDataCarrier determineQuantitiesToUnmark(InventTrans _quarantineTransaction, PmfQtyDataCarrier _remainingQuantitiesToUnmark)
    {
        PmfQtyDataCarrier quantitiesToUnmark = new PmfQtyDataCarrier();

        PdsInventQty transCWQtyAbsolute = abs(_quarantineTransaction.PdsCWQty);
        InventQty transQtyAbsolute = abs(_quarantineTransaction.Qty);

        if (isCatchWeight)
        {
            if (transCWQtyAbsolute < _remainingQuantitiesToUnmark.parmCwQty())
            {
                quantitiesToUnmark.parmCwQty(transCWQtyAbsolute);
                quantitiesToUnmark.parmInventQty(transQtyAbsolute);
            }
            else
            {
                quantitiesToUnmark.parmCwQty(_remainingQuantitiesToUnmark.parmCwQty());
                quantitiesToUnmark.parmInventQty(_remainingQuantitiesToUnmark.parmInventQty());
            }
        }
        else
        {
            quantitiesToUnmark.parmInventQty(transQtyAbsolute < _remainingQuantitiesToUnmark.parmInventQty() ? transQtyAbsolute : _remainingQuantitiesToUnmark.parmInventQty());
        }

        return quantitiesToUnmark;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkQuarantineTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes marking between a given quarantine order transaction and the transaction it's marked against.
    /// </summary>
    /// <param name = "_quarantineTransaction">A marked quarantine order transaction.</param>
    /// <param name = "_quantitiesToUnmark">Quantities to unmark; always positive.</param>
    /// <returns>Unmarked quantities; always positive.</returns>
    private PmfQtyDataCarrier unmarkQuarantineTransaction(InventTrans _quarantineTransaction, PmfQtyDataCarrier _quantitiesToUnmark)
    {
        InventDim markedDims = InventDim::find(_quarantineTransaction.inventDimId);
        InventDimParm markedDimParm;
        markedDimParm.initFromInventDim(markedDims);
        
        PmfQtyDataCarrier unmarkedQuantities = new PmfQtyDataCarrier();

        // Signs of unmarking quantities passed to InventTransOrigin::deleteMarking have to match the sign of the transaction quantity
        int quarantineTransactionSign = _quarantineTransaction.Qty > 0 ? 1 : -1;
        InventTransOrigin::deleteMarking(_quarantineTransaction.InventTransOrigin, _quarantineTransaction.MarkingRefInventTransOrigin, quarantineTransactionSign * _quantitiesToUnmark.parmInventQty(), false, markedDims, markedDimParm, false, false, quarantineTransactionSign * _quantitiesToUnmark.parmCwQty(),  unmarkedQuantities, false, SortOrder::Ascending);
        // Remove marking from the marked transactions, too. Sign of the marked transaction's quantity will be inverse of the quarantine transaction's, so invert the sign of unmarking quantities as well.
        InventTransOrigin::deleteMarking(_quarantineTransaction.MarkingRefInventTransOrigin, _quarantineTransaction.InventTransOrigin, -quarantineTransactionSign * _quantitiesToUnmark.parmInventQty(), false, markedDims, markedDimParm, false, false, -quarantineTransactionSign * _quantitiesToUnmark.parmCwQty(), unmarkedQuantities, false, SortOrder::Ascending);

        this.ensureQuantitiesPositive(unmarkedQuantities);

        return unmarkedQuantities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTransactionsAgainstNewQuarantineOrder</Name>
				<Source><![CDATA[
    private void markTransactionsAgainstNewQuarantineOrder(List _markingData, boolean _markIssuesAgainstQuarantine)
    {
        int quarantineTransactionSign = _markIssuesAgainstQuarantine ? 1 : -1;

        PmfQtyDataCarrier remainingQuantitiesToMark = PmfQtyDataCarrier::newStandard(newQuarantineOrder.Qty, newQuarantineOrder.PdsCWQty);

        ListIterator listIterator = new ListIterator(_markingData);
        while (listIterator.more())
        {
            InventTransOriginId originToMark;
            InventDimId dimIdToMark;
            InventQty qtyToMark;
            PdsCWInventQty cwQtyToMark;

            [originToMark, dimIdToMark, qtyToMark, cwQtyToMark] = listIterator.value();

            InventDim dimToMark = InventDim::find(dimIdToMark);
            InventDimParm dimParmToMark;
            dimParmToMark.initFromInventDim(dimToMark);

            PmfQtyDataCarrier markedQuantities = new PmfQtyDataCarrier();
            // Match the sign of quarantine transaction and marking quantities passed to InventTransOrigin::deleteMarking.
            InventTransOrigin::updateMarking(this.parmNewQuarantineOrderOriginId(), originToMark, quarantineTransactionSign * qtyToMark, '', SortOrder::Ascending, false, dimToMark, dimParmToMark, quarantineTransactionSign * cwQtyToMark, markedQuantities);
            // Invert quantity sign for the other side of marking; quarantine issues will be marked against other receipts, and vice versa.
            InventTransOrigin::updateMarking(originToMark, this.parmNewQuarantineOrderOriginId(), -quarantineTransactionSign * qtyToMark, '', SortOrder::Ascending, false, dimToMark, dimParmToMark, -quarantineTransactionSign * cwQtyToMark, markedQuantities);
            
            this.ensureQuantitiesPositive(markedQuantities);

            if (_markIssuesAgainstQuarantine)
            {
                markedQuantities = this.markIssueAgainstQuarantineWithNoDimensions(PmfQtyDataCarrier::newStandard(qtyToMark, cwQtyToMark), markedQuantities, originToMark);
                this.restoreReservationsRemovedDuringUnmarking(originToMark);
            }
            
            this.subtractQuantities(remainingQuantitiesToMark, markedQuantities);
            if (remainingQuantitiesToMark.parmInventQty() == 0 || (isCatchWeight && remainingQuantitiesToMark.parmCwQty() == 0))
            {
                break;
            }
            
            listIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markIssueAgainstQuarantineWithNoDimensions</Name>
				<Source><![CDATA[
    private PmfQtyDataCarrier markIssueAgainstQuarantineWithNoDimensions(
        PmfQtyDataCarrier   _quantitiesToMark,
        PmfQtyDataCarrier   _markedQuantities,
        InventTransOriginId _issueOriginToMark)
    {
        PmfQtyDataCarrier returnQuantities = _markedQuantities;

        InventQty qtyNotMarked = _quantitiesToMark.parmInventQty() - _markedQuantities.parmInventQty();
        PdsInventQty cwQtyNotMarked = _quantitiesToMark.parmCwQty() - _markedQuantities.parmCwQty();
        
        if (qtyNotMarked > 0 || (isCatchWeight && cwQtyNotMarked > 0))
        {
            // Marking with dimensions failed, probably because dimensions were changed when reservation was removed during unmarking.
            // Try to mark without dimensions.
            PmfQtyDataCarrier markedQuantitiesNoDimensions = new PmfQtyDataCarrier();;
            InventTransOrigin::updateMarking(_issueOriginToMark, this.parmNewQuarantineOrderOriginId(), -_quantitiesToMark.parmInventQty(), '', SortOrder::Ascending, false, null, null, -_quantitiesToMark.parmCwQty(), markedQuantitiesNoDimensions);

            this.ensureQuantitiesPositive(markedQuantitiesNoDimensions);
            returnQuantities = markedQuantitiesNoDimensions;
        }
        
        return returnQuantities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreReservationsRemovedDuringUnmarking</Name>
				<Source><![CDATA[
    private void restoreReservationsRemovedDuringUnmarking(InventTransOriginId _issueOriginToReserve)
    {
        InventMovement markedIssueMovement = InventTrans::findByInventTransOrigin(_issueOriginToReserve).inventMovement(true);
        if (markedIssueMovement)
        {
            InventUpd_Reservation::updateReserveRefTransIdOnOrder(markedIssueMovement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureQuantitiesPositive</Name>
				<Source><![CDATA[
    private void ensureQuantitiesPositive(PmfQtyDataCarrier _quantities)
    {
        _quantities.parmInventQty(abs(_quantities.parmInventQty()));
        _quantities.parmCwQty(abs(_quantities.parmCwQty()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>subtractQuantities</Name>
				<Source><![CDATA[
    private void subtractQuantities(PmfQtyDataCarrier _quantitiesToSubtractFrom, PmfQtyDataCarrier _quantitiesToSubtract)
    {
        _quantitiesToSubtractFrom.parmInventQty(_quantitiesToSubtractFrom.parmInventQty() - _quantitiesToSubtract.parmInventQty());
        _quantitiesToSubtractFrom.parmCwQty(_quantitiesToSubtractFrom.parmCwQty() - _quantitiesToSubtract.parmCwQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewQuarantineOrderOriginId</Name>
				<Source><![CDATA[
    private InventTransOriginId parmNewQuarantineOrderOriginId()
    {
        if (!newQuarantineOrderOriginId)
        {
            newQuarantineOrderOriginId = InventTransOriginQuarantineOrder::findInventTransOriginId(newQuarantineOrder.DataAreaId, newQuarantineOrder.QuarantineId);
        }

        return newQuarantineOrderOriginId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>