<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostingVersionCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostingVersionCopy</c> class is the base class for performing costing version copy.
/// </summary>
abstract class CostingVersionCopy extends RunBase
{
    QueryRun                    queryRun;

    CostingVersionId            fromCostingVersion;

    boolean                     useFromVersionAsSource;
    NoYes                       includeActive;
    FromDate                    asPerDate;
    CostingVersionId            toCostingVersion;

    NoYes                       changeSite;
    InventSiteId                fromSiteId,
                                toSiteId;

    NoYes                       changePeriod;
    int                         displacementQty;
    PeriodUnit                  displacementMethod;

    Factor                      priceFactor;
    MarkupAmount                priceMarkup;

    MarkupAmount                priceMarkupSec;
    #ISOCountryRegionCodes

    DialogGroup                 dialogGroupChangeDate;
    DialogGroup                 dialogGroupChangeSite;
    DialogGroup                 dialogGroupActive;
    DialogGroup                 dialogGroupVersion;

    DialogField                 dialogToCostingVersion;
    DialogField                 dialogFieldPriceFactor;
    DialogField                 dialogFieldPriceMarkup;

    DialogField                 dialogFieldPriceMarkupSec;

    DialogField                 dialogFieldChangeQty;
    DialogField                 dialogFieldChangePcs;

    DialogField                 dialogFieldFromSite;
    DialogField                 dialogFieldToSite;

    DialogField                 dialogFieldIncludeActive;
    DialogField                 dialogFieldAsPerDate;

    #DEFINE.CurrentVersion(13)
    #LOCALMACRO.CurrentList
        fromCostingVersion,
        toCostingVersion,
        useFromVersionAsSource,
        includeActive,
        asPerDate,
        changeSite,
        toSiteId,
        changePeriod,
        displacementQty,
        displacementMethod,
        priceFactor,
        priceMarkup,
        priceMarkupSec,
        fromSiteId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new from date based on the specified from date.
    /// </summary>
    /// <param name = "_fromDate">The from date.</param>
    /// <returns>The calculated from date.</returns>
    protected FromDate calcFromDate(FromDate _fromDate)
    {
        FromDate    newFromDate;

        if (changePeriod)
        {
            Futures futures = Futures::construct(_fromDate, displacementQty, displacementMethod);
            newFromDate = futures.next();
        }
        else
        {
            newFromDate = _fromDate;
        }

        return newFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the price.
    /// </summary>
    /// <param name = "_price">The original price.</param>
    /// <param name = "_factor">The factor to apply.</param>
    /// <param name = "_markup">The charges amount to add.</param>
    /// <returns>The calculated price.</returns>
    /// <remarks>
    ///    The price is calculated by multiplying by the factor and adding the charges amount.
    /// </remarks>
    protected Price calcPrice(
        Price           _price,
        Factor          _factor,
        MarkupAmount    _markup
        )
    {
        return (_price * _factor) + _markup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Bulk copies the prices between costing versions according to the selected parameters.
    /// </summary>
    abstract protected void copy()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        // Template Method design pattern:
        this.dialogBuildSection_SourceVersion(dialog);
        this.dialogBuildSection_SelectionCriteria(dialog);
        this.dialogBuildSection_AsPerDate(dialog);
        this.dialogBuildSection_TargetVersion(dialog);
        this.dialogBuildSection_ChangeDate(dialog);
        this.dialogBuildSection_ChangeSite(dialog);
        this.dialogBuildSection_ChangePrice(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_AsPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a group to the dialog that represents the <c>AsPerDate</c> variable.
    /// </summary>
    /// <param name="_dialog">
    ///     The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    protected void dialogBuildSection_AsPerDate(Dialog _dialog /*in-out*/)
    {
        // Copy price per date
        _dialog.addGroup("@SYS117846");
            // As per date
        dialogFieldAsPerDate = _dialog.addFieldValue(extendedTypeStr(FromDate), asPerDate,"@SYS117038");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_ChangeDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a group to the dialog that represents the variables related to changing the dates of the prices.
    /// </summary>
    /// <param name="_dialog">
    ///     The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    protected void dialogBuildSection_ChangeDate(Dialog _dialog /*in-out*/)
    {
        // Change date
        dialogGroupChangeDate = _dialog.addGroup("@SYS68704");
        dialogGroupChangeDate.frameOptionButton(FormFrameOptionButton::Check);
        dialogGroupChangeDate.optionValue(changePeriod);
            // Change
        dialogFieldChangeQty = _dialog.addFieldValue(extendedTypeStr(Integer), displacementQty, "@SYS15593", "@SYS23075");
            // Units
        dialogFieldChangePcs = _dialog.addFieldValue(enumStr(PeriodUnit), displacementMethod, "@SYS7867");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_ChangePrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a group to the dialog that represents the variables related to changing the amounts.
    /// </summary>
    /// <param name="_dialog">
    ///     The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    abstract protected void dialogBuildSection_ChangePrice(Dialog _dialog /*in-out*/)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_ChangeSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a group to the dialog that represents the variables that are related to changing the site of
    ///    the prices.
    /// </summary>
    /// <param name="_dialog">
    ///    The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    protected void dialogBuildSection_ChangeSite(Dialog _dialog /*in-out*/)
    {
        // Change site
        dialogGroupChangeSite = _dialog.addGroup("@SYS117847");
        dialogGroupChangeSite.frameOptionButton(FormFrameOptionButton::Check);
        dialogGroupChangeSite.optionValue(changeSite);
            // Change
        dialogFieldFromSite = _dialog.addFieldValue(extendedTypeStr(InventSiteId), fromSiteId, "@SYS106955");
        dialogFieldToSite = _dialog.addFieldValue(extendedTypeStr(InventSiteId), toSiteId, "@SYS106956");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_SelectionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a group to the dialog that represents the variables related to changing the selection criteria.
    /// </summary>
    /// <param name="_dialog">
    ///     The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    abstract protected void dialogBuildSection_SelectionCriteria(Dialog _dialog /*in-out*/)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_SourceVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a group to the dialog that represents the variables that are related to the source costing
    ///    version.
    /// </summary>
    /// <param name="_dialog">
    ///    The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    protected void dialogBuildSection_SourceVersion(Dialog _dialog /*in-out*/)
    {
        // Copy from
        _dialog.addGroup("@SYS68297");
            // Version
        _dialog.addFieldValue(extendedTypeStr(CostingVersionId), fromCostingVersion).enabled(false);
            // Name
        _dialog.addFieldValue(extendedTypeStr(Name), CostingVersion::find(fromCostingVersion).Name).enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_TargetVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a group to the dialog that represents the variables related to the target costing version.
    /// </summary>
    /// <param name="_dialog">
    ///     The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    protected void dialogBuildSection_TargetVersion(Dialog _dialog /*in-out*/)
    {
        // Copy to
        _dialog.addGroup("@SYS40316");
            // Version
        dialogToCostingVersion = _dialog.addFieldValue(extendedTypeStr(CostingVersionIdOpen), toCostingVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the values from the dialog fields.
    /// </summary>
    /// <returns>
    ///    true if the values are read successfully; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        asPerDate               = dialogFieldAsPerDate.value();
        toCostingVersion        = dialogToCostingVersion.value();
        useFromVersionAsSource  = dialogGroupVersion.optionValue() == 1;
        includeActive           = dialogFieldIncludeActive.value();

        changePeriod            = dialogGroupChangeDate.optionValue();
        displacementQty         = dialogFieldChangeQty.value();
        displacementMethod      = dialogFieldChangePcs.value();

        changeSite              = dialogGroupChangeSite.optionValue();
        fromSiteId              = dialogFieldFromSite.value();
        toSiteId                = dialogFieldToSite.value();

        priceFactor             = dialogFieldPriceFactor.value();
        priceMarkup             = dialogFieldPriceMarkup.value();

        if (dialogFieldPriceMarkupSec)
            priceMarkupSec          = dialogFieldPriceMarkupSec.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        useFromVersionAsSource = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        priceFactor = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromCostingVersion</Name>
				<Source><![CDATA[
    CostingVersionId parmFromCostingVersion(CostingVersionId _costingVersionId = fromCostingVersion)
    {
        fromCostingVersion = _costingVersionId;

        return fromCostingVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        if (!this.validate())
        {
            throw error("@SYS104103");
        }

        try
        {
            ttsbegin;

            this.copy();

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18738");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> object.If you change the return value to false, the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        PackedQueryRun  packedQueryRun;
        Integer         version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQueryRun] = _packedClass;

                if (packedQueryRun)
                {
                    queryRun = new QueryRun(packedQueryRun);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified inventory site exists.
    /// </summary>
    /// <param name = "_siteId">The site ID.</param>
    /// <param name = "_label">The label associated to this site.</param>
    /// <returns>true if the site is valid; otherwise, false.</returns>
    public boolean validateSite(InventSiteId _siteId, str _label)
    {
        if (_siteId != '')
        {
            if (!InventSite::exist(_siteId))
            {
                return checkFailed(strFmt("@TableFieldValidation", _label));
            }
        }
        else
        {
            return checkFailed(strFmt("@SYS50104", _label));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        CostingVersion  dsFromCostingVersion = CostingVersion::find(fromCostingVersion);
        CostingVersion  dsToCostingVersion   = CostingVersion::find(toCostingVersion);

        boolean ret = super();

        if (toCostingVersion == '')
        {
            return checkFailed("@SYS104098");
        }

        if (toCostingVersion == fromCostingVersion && useFromVersionAsSource)
        {
            return checkFailed("@SYS104100");
        }

        if (dsToCostingVersion.RecId == 0)
        {
            return checkFailed("@SYS104363");
        }

        if (dsToCostingVersion.Blocked)
        {
            return checkFailed("@SYS104099");
        }

        if (changeSite)
        {
            ret = this.validateSite(fromSiteId, "@SYS106955") && ret;
            ret = this.validateSite(toSiteId, "@SYS106956") && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
