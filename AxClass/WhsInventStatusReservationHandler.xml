<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsInventStatusReservationHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Removes marking and/or reservations as necessary upon inventory dimension changes.
/// </summary>
class WhsInventStatusReservationHandler
{
    InventTrans                         inventTransReceipt;
    InventDim                           fromInventDim;
    InventDim                           toInventDim;
    WHSReservationHierarchyLevel        bottomRequiredDimLevel;
    WHSReservationHierarchyLevel        topRequiredDimLevel;
    List                                hierarchyList;
    InventTable                         inventTable;
    WHSReservationHierarchyProvider     reservationHierarchyProvider;
    WHSAllowMarkingReservationRemoval   allowMarkingReservationRemoval;
    InventMovement                      receiptMovement;
    InventQty                           unmarkedQty;
    Map                                 mapMovementIssue;
    List                                pendingBlockingReductions;

    #WHSReservationHierarchy
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>handleOrderedReservations</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks availability at the required dimension levels and removes reservations, if necessary.
    /// </summary>
    private void handleOrderedReservations()
    {
        InventDim                           loopInventDim;
        FieldId                             dimFieldId;
        ListEnumerator                      le;
        WHSReservationHierarchyElementData  hierarchyElementData;
        InventTransOrigin                   receiptTransOrigin;
        WHSReservationHierarchyLevel        currentLevel;

        // Set the lowest and highest required dimension levels to check for ordered reserved quantities
        this.setRequiredDimLevels();

        le = hierarchyList.getEnumerator();

        loopInventDim = InventDim::find(fromInventDim.InventDimId);

        while (le.moveNext())
        {
            hierarchyElementData = le.current();

            currentLevel    = hierarchyElementData.parmLevel();
            dimFieldId      = hierarchyElementData.parmDimensionFieldId();

            if (currentLevel >= topRequiredDimLevel && currentLevel <= bottomRequiredDimLevel)
            {
                receiptTransOrigin = InventTransOrigin::find(inventTransReceipt.InventTransOrigin);

                WHSReservation::staticRemoveReservation(
                    inventTransReceipt.ItemId,
                    loopInventDim.InventDimId,
                    inventTransReceipt.Qty,
                    receiptTransOrigin.ReferenceCategory,
                    receiptTransOrigin.ReferenceId,
                    receiptTransOrigin.InventTransId,
                    true,
                    false,
                    true);
            }

            loopInventDim.clearField(dimFieldId);
            loopInventDim               = InventDim::findOrCreate(loopInventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize the required global variables for the <c>WHSInventStatusReservationHandler</c> class.
    /// </summary>
    private void init()
    {
        inventTable = inventTransReceipt.inventTable();

        reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();

        hierarchyList = reservationHierarchyProvider.getDimListAllFromInventTable(inventTable, WHSReservationHierarchySortOrder::BottomUp);

        allowMarkingReservationRemoval = InventLocation::find(fromInventDim.InventLocationId).AllowMarkingReservationRemoval;

        mapMovementIssue = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReceiptTransWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finishes the removal of markings after the receipt transaction has been written to the database.
    /// </summary>
    public void onReceiptTransWritten()
    {
        ListEnumerator              blockingReductionEnumerator;
        InventBlockingQtyReduction  blockingReduction;
        InventBlocking              blocking;

        if (pendingBlockingReductions)
        {
            blockingReductionEnumerator = pendingBlockingReductions.getEnumerator();

            while (blockingReductionEnumerator.moveNext())
            {
                blockingReduction = blockingReductionEnumerator.current();
                blocking = blockingReduction.parmBlocking();
                blocking.Qty -= blockingReduction.parmQtyReduction();
                blocking.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromInventDim</Name>
				<Source><![CDATA[
        public InventDim parmFromInventDim(InventDim _fromInventDim = fromInventDim)
    {
        fromInventDim = _fromInventDim;
        return fromInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransReceipt</Name>
				<Source><![CDATA[
        public InventTrans parmInventTransReceipt(InventTrans _inventTransReceipt = inventTransReceipt)
    {
        inventTransReceipt = _inventTransReceipt;
        return inventTransReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptMovement</Name>
				<Source><![CDATA[
        public InventMovement parmReceiptMovement(InventMovement _receiptMovement = receiptMovement)
    {
        receiptMovement = _receiptMovement;
        return receiptMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToInventDim</Name>
				<Source><![CDATA[
        public InventDim parmToInventDim(InventDim _toInventDim = toInventDim)
    {
        toInventDim = _toInventDim;
        return toInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnmarkedQty</Name>
				<Source><![CDATA[
        public InventQty parmUnmarkedQty(InventQty _unmarkedQty = unmarkedQty)
    {
        unmarkedQty = _unmarkedQty;
        return unmarkedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTransMarking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes the marking references on both the issue and receipt transactions.
    /// </summary>
    /// <remarks>
    ///     For issue transactions, the method set the status back to 'On order' and reverts the inventory dimensions to those specified on the movement.
    /// </remarks>
    private void removeTransMarking()
    {
        InventTrans     inventTransIssue;
        InventDim       inventDim;
        InventQty       unmarkNow;
        InventMovement  issueMovement;
        MapEnumerator   me;

        if (allowMarkingReservationRemoval == WHSAllowMarkingReservationRemoval::MarkingReservation)
        {
            unmarkNow = inventTransReceipt.Qty;

            // Ordered reserved transactions must be processed first.
            while select inventTransIssue
                where inventTransIssue.ItemId               == inventTransReceipt.ItemId
                    && inventTransIssue.ValueOpen           == InventTransOpen::Yes
                    && inventTransIssue.StatusReceipt       == StatusReceipt::None
                    && inventTransIssue.StatusIssue         == StatusIssue::ReservOrdered
                    && inventTransIssue.InventTransOrigin   != inventTransReceipt.InventTransOrigin
                    && inventTransIssue.InventTransOrigin   == inventTransReceipt.MarkingRefInventTransOrigin
                #WHSInventDimExistsJoin(inventTransIssue.InventDimId, inventDim, fromInventDim)
            {
                unmarkNow = this.updateMarkedIssueTrans(inventTransIssue, unmarkNow);

                if (!unmarkNow)
                {
                    break;
                }
            }

            // If necessary, process the remaining issue transactions.
            if (unmarkNow > 0)
            {
                while select inventTransIssue
                    order by StatusIssue desc
                    where inventTransIssue.ItemId                       == inventTransReceipt.ItemId
                        && inventTransIssue.ValueOpen                   == InventTransOpen::Yes
                        && inventTransIssue.StatusReceipt               == StatusReceipt::None
                        && inventTransIssue.Qty                         <  0
                        && inventTransIssue.InventTransOrigin           != inventTransReceipt.InventTransOrigin
                        && inventTransIssue.InventTransOrigin           == inventTransReceipt.MarkingRefInventTransOrigin
                        && inventTransIssue.MarkingRefInventTransOrigin == inventTransReceipt.InventTransOrigin
                {
                    unmarkNow = this.updateMarkedIssueTrans(inventTransIssue, unmarkNow);

                    if (!unmarkNow)
                    {
                        break;
                    }
                }
            }

            // Remove marking references from the issue movements.
            if (mapMovementIssue.elements())
            {
                me = mapMovementIssue.getEnumerator();

                while (me.moveNext())
                {
                    issueMovement = me.currentValue();

                    issueMovement.clearInventRefFields();
                }
            }

            // Throw an error if the expected quantity could not be unmarked.
            if (unmarkNow)
            {
                throw error(strFmt("@WAX5377", inventTransReceipt.Qty));
            }

            // If all quantity has been unmarked we must clear the marking reference on the receipt transaction and movement.
            inventTransReceipt.clearMarking();

            receiptMovement.clearInventRefFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTransReservationMarking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes the removal of reservations and/or marking transaction references if inventory status has changed.
    /// </summary>
    /// <remarks>
    /// Removal of inventory blockings before the receipt transction has been written to the database can cause
    /// optimistic concurrency issues since removal of a marked blocking can result in an update to the receipt transaction.
    /// </remarks>
    public void removeTransReservationMarking()
    {
        // Verify that only the inventory status dimension has changed.
        if (this.validateStatusChange() && allowMarkingReservationRemoval != WHSAllowMarkingReservationRemoval::None)
        {
            if (inventTransReceipt.MarkingRefInventTransOrigin)
            {
                // Remove marking references from both the receipt and issue transactions.
                this.removeTransMarking();
            }
            else
            {
                // Attempt to remove ordered reservations to allow for inventory status change.
                this.handleOrderedReservations();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequiredDimLevels</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the top and bottom required dimension levels to be checked for reservation removal.
    /// </summary>
    private void setRequiredDimLevels()
    {
        InventDimParm                   receiptDimParm;
        WHSReservationHierarchyLevel    topHierarchyHoleLevel;

        // Find the first hole in the dimension hierarchy starting from the top level dimension (if one exists).
        topHierarchyHoleLevel = WHSReservationHierarchyInventDimUtil::getLevelOfFirstBlankDim(inventTable.ItemId, fromInventDim, WHSReservationHierarchySortOrder::TopDown);

        receiptDimParm.initFromInventDim(fromInventDim);

        // Find the lowest required inventory dimension on the transaction
        // If a hole exists in the hierarchy, the lowest required dimension is the one located directly above the hole.
        bottomRequiredDimLevel = min(WHSReservationHierarchyInventDimUtil::deepestLevelFromInventDimParm(hierarchyList, receiptDimParm), topHierarchyHoleLevel - 1);

        // Find the highest required inventory dimension on the transaction.
        topRequiredDimLevel = WHSInventStatus::isBlockingStatus(toInventDim.InventStatusId) ? #FIRSTRESERVABLEHIERARCHYLEVEL : reservationHierarchyProvider.getStatusHierarchyLevel(inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkedIssueTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates issue transactions to remove marking references.
    /// </summary>
    /// <param name="_inventTrans">
    ///     The inventory transaction to update.
    /// </param>
    /// <param name="_unmarkNow">
    ///     The quantity to be unmarked.
    /// </param>
    /// <returns>
    ///     Returns the quantity that remains to be unmarked.
    /// </returns>
    private InventQty updateMarkedIssueTrans(InventTrans _inventTrans, InventQty _unmarkNow)
    {
        InventQty       unmarkNow = _unmarkNow;
        InventQty       unmarkedQtyForTrans;
        InventTrans     inventTransIssue;
        InventMovement  issueMovement;
        InventBlocking  blocking;

        ttsbegin;

        inventTransIssue = InventTrans::findRecId(_inventTrans.RecId, true);

        if (inventTransIssue.RecId != 0)
        {
            // Do not allow status to be changed if marked transactions have been financially settled.
            if (inventTransIssue.financialOpenQty() != inventTransIssue.Qty)
            {
                throw error("@WAX5376");
            }

            issueMovement = inventTransIssue.inventMovement(true);

            if (issueMovement.transType() == InventTransType::Blocking
                && inventTransIssue.inventDim().inventLocation().RemoveInventBlockingOnStatusChange)
            {
                blocking = InventBlocking::findByTransIdIssue(_inventTrans.inventTransOrigin().InventTransId, true);
                unmarkedQtyForTrans = min(blocking.Qty, _unmarkNow);

                pendingBlockingReductions = pendingBlockingReductions ? pendingBlockingReductions : new List(Types::Class);
                pendingBlockingReductions.addEnd(new InventBlockingQtyReduction(blocking, unmarkedQtyForTrans));

                unmarkNow -= unmarkedQtyForTrans;
                unmarkedQty += unmarkedQtyForTrans;
            }
            else if (issueMovement.transType() != InventTransType::Blocking)
            {
                if (unmarkNow < abs(inventTransIssue.Qty))
                {
                    inventTransIssue.updateSplit(-unmarkNow);
                }

                inventTransIssue.clearMarking();

                // Set the issue status back to 'On order' for 'Ordered reserved' transactions.
                if (inventTransIssue.StatusIssue == StatusIssue::ReservOrdered)
                {
                    inventTransIssue.StatusIssue = StatusIssue::OnOrder;
                    WHSReservationRemoveHistory::createRemoveHistory(inventTransReceipt, inventTransIssue, fromInventDim.inventDimId);
                }

                if (issueMovement)
                {
                    if (inventTransIssue.StatusIssue == StatusIssue::OnOrder)
                    {
                        inventTransIssue.InventDimId    = issueMovement.inventdim().InventDimId;
                        inventTransIssue.InventDimFixed = 0;
                    }

                    // Build a map of the movements from which we need to remove marking references.
                    if (!mapMovementIssue.exists(inventTransIssue.InventTransOrigin))
                    {
                        mapMovementIssue.insert(inventTransIssue.InventTransOrigin, issueMovement);
                    }
                }

                inventTransIssue.update();

                unmarkNow += inventTransIssue.Qty;
                unmarkedQty += abs(inventTransIssue.Qty);

                inventTransIssue.updateSumUp();
            }
        }

        ttscommit;

        return unmarkNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Compares two dimension sets to ensure that the inventory status has changed, but all dimension levels above status remain the same.
    /// </summary>
    /// <returns>
    ///     Returns true if the inventory status has changed, but all dimension levels above status remain the same.
    /// </returns>
    private boolean validateStatusChange()
    {
        InventDimParm   inventDimParm;
        boolean         ret;

        // Only check for marking/reservation removal if the inventory status dimension has changed.
        if (fromInventDim.InventStatusId != toInventDim.InventStatusId)
        {
            inventDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveStatus(inventTable);

            ret = InventDim::isInventDimParmEqual(fromInventDim, toInventDim, inventDimParm, false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static WHSInventStatusReservationHandler construct()
    {
        return new WHSInventStatusReservationHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>WHSInventStatusReservationHandler</c> class.
    /// </summary>
    /// <param name="_inventTransReceipt">
    ///     The receipt <c>InventTrans</c> record.
    /// </param>
    /// <param name="_receiptMovement">
    ///     The inventory movement associated with the receipt transaction.
    /// </param>
    /// <param name="_fromInventDim">
    ///     The original inventory dimension set.
    /// </param>
    /// <param name="_toInventDim">
    ///     The new inventory dimension set.
    /// </param>
    /// <returns>
    ///     An instance of the <c>WHSInventStatusReservationHandler</c> class.
    /// </returns>
    public static WHSInventStatusReservationHandler newStandard(
        InventTrans     _inventTransReceipt,
        InventMovement  _receiptMovement,
        InventDim       _fromInventDim,
        InventDim       _toInventDim)
    {
        WHSInventStatusReservationHandler inventStatusReservationHandler;

        inventStatusReservationHandler = WHSInventStatusReservationHandler::construct();

        inventStatusReservationHandler.parmInventTransReceipt(_inventTransReceipt);
        inventStatusReservationHandler.parmReceiptMovement(_receiptMovement);
        inventStatusReservationHandler.parmFromInventDim(_fromInventDim);
        inventStatusReservationHandler.parmToInventDim(_toInventDim);

        inventStatusReservationHandler.init();

        return inventStatusReservationHandler;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>