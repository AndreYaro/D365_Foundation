<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineDeliveryDetailsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class SalesLineDeliveryDetailsHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resetReqTrans</Name>
				<Source><![CDATA[
    internal static void resetReqTrans(SalesLine _salesLine, InventDimId _newInventDimId)
    {
        ReqTrans reqTrans = _salesLine.reqTrans(ReqPlanVersion::findActiveReqPlanIdDynamic().RecId, true);

        reqTrans.CovInventDimId = _newInventDimId;
        date effectiveOrderDate = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(_salesLine).effectiveOrderDate();
        reqTrans.ReqDate = effectiveOrderDate;
        reqTrans.ReqDateDlvOrig = effectiveOrderDate;
        reqTrans.update();

        reqTrans.deleteExplosionCoverage(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>simulateExplosion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Simulates the explosion of a sales order line for the specified set of dimensions.
    /// </summary>
    /// <param name = "_salesLine">The sales order line to explode.</param>
    /// <param name = "_originalInventDim">The original inventory dimensions from the sales line.</param>
    /// <param name = "_simulatedInventDim">The inventory dimensions to simulate.</param>
    public static void simulateExplosion(SalesLine _salesLine, InventDim _originalInventDim, InventDim _simulatedInventDim)
    {
        Debug::assert(appl.ttsLevel() > 0);

        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(_salesLine.ItemId);

        // There must already be an explosion existing for the current inventdim

        if (!InventDim::isInventDimEqualCovDim(inventDimGroupSetup, _originalInventDim, _simulatedInventDim))
        {
            SalesLineDeliveryDetailsHelper::resetReqTrans(_salesLine, _simulatedInventDim.InventDimId);

            InventMovement movement = InventMovement::constructNoThrow(_salesLine);
            ReqCalcExplode reqCalcExplode = ReqCalcExplode::newInventoryMovement(movement, movement.mustBeAutoReserved(), NoYes::Yes);

            reqCalcExplode.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimParm</Name>
				<Source><![CDATA[
    public static void updateInventDimParm(
        InventDimParm _visibleDimensions,
        InventDimCtrl_Frm_SalesLineDeliveryDetails _inventDimCtrl,
        SalesLine _salesLine)
    {
        InventDimParm   lockedDimensions;

        lockedDimensions.data(_visibleDimensions);
        lockedDimensions.toggleAllInventDim();
        SalesLineDeliveryDetailsHelper::updateLockedDimensions(lockedDimensions, _salesLine);

        _inventDimCtrl.parmDimParmLockedRightClick(lockedDimensions);
        _inventDimCtrl.parmDimParmVisibleGrid(_visibleDimensions, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLockedDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the set of the locked dimensions.
    /// </summary>
    /// <param name = "_lockedDimensions">The <c>InventDimParm</c> record with the set of inventory dimension which must be updated.</param>
    /// <param name = "_salesLine">The sales order line for which the delivery alternatives are being calculated.</param>
    public static void updateLockedDimensions(InventDimParm _lockedDimensions, SalesLine _salesLine)
    {
        // Site and Warehouse should never be locked
        _lockedDimensions.InventSiteIdFlag = NoYes::No;
        _lockedDimensions.InventLocationIdFlag = NoYes::No;

        // Location and License plate should never be locked
        _lockedDimensions.WMSLocationIdFlag = NoYes::No;
        _lockedDimensions.LicensePlateFlag = NoYes::No;

        // Batch, Serial No. and Inventory Status - Locked if not blank on sales line
        _lockedDimensions.InventStatusFlag = _salesLine.inventDim().InventStatusId ? NoYes::Yes: NoYes::No;
        _lockedDimensions.InventBatchIdFlag = _salesLine.inventDim().inventBatchId ? NoYes::Yes: NoYes::No;
        _lockedDimensions.InventSerialIdFlag = _salesLine.inventDim().inventSerialId ? NoYes::Yes: NoYes::No;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>