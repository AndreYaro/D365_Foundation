<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventoryServiceServiceHealthChecker</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ServiceFramework.Communication.Http;

public class InventoryServiceServiceHealthChecker
{
    private InventoryServiceClient inventClient;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>upsertEndpoint</Name>
				<Source><![CDATA[
    internal boolean upsertEndpoint(str _endpoint, str _dialogMesg)
    {
        if (Box::yesNo(_dialogMesg, DialogButton::Yes) == DialogButton::Yes)
        {
            ttsbegin;

            InventInventoryDataServiceParameters updateParameters;            
            select forupdate firstonly updateParameters;
            updateParameters.InventoryServiceEndpoint = _endpoint;

            if (updateParameters.RecId)
            {
                updateParameters.update();
            }
            else
            {
                updateParameters.insert();
            }

            ttscommit;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceEndpoint</Name>
				<Source><![CDATA[
    internal container getServiceEndpoint()
    {
        NonSuccessHttpResponseException commException;
        str endpoint;
        str errorMesg;

        try
        {
            var registrationInfo = inventClient.getRegistrationInfo();
            var result = FormJsonSerializer::deserializeObject(classNum(InventoryServiceRegistrationContract), registrationInfo) as InventoryServiceRegistrationContract;

            if (result == null)
            {
                errorMesg = "@SCM:InventoryServiceRegistrationInformationIsNullErrorMessage";
            }
            else
            {
                if (!result.validateInstallation())
                {
                    if (!result.validateActive())
                    {
                        errorMesg = "@SCM:InventoryServiceServiceIsInActiveAndUninstalledErrorMessage";
                    }
                    else
                    {
                        errorMesg = "@SCM:InventoryServiceServiceIsUninstalledErrorMessage";
                    }                    
                }
                else
                {
                    if (!result.validateActive())
                    {
                        errorMesg = "@SCM:InventoryServiceServiceIsInactiveErrorMessage";
                    }
                }
                
                if (result.validate() && this.checkHealth(inventClient.dropSlashInEnd(result.parmServiceEndpoint())))
                {
                    endpoint = inventClient.dropSlashInEnd(result.parmServiceEndpoint());
                }

            }
            
        }
        catch(commException)
        {
            var errorType = commException.RemoteReasonPhrase;
            errorMesg = this.analyzeNonSuccessHttpResponseReason(commException.RemoteReasonPhrase);
        }
        return [endpoint, errorMesg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHealth</Name>
				<Source><![CDATA[
    internal boolean checkHealth(str _endPoint)
    {
        try
        {
            var response = inventClient.getRegistration(_endPoint);
            var result = FormJsonSerializer::deserializeObject(classNum(InventoryServiceRegistrationContract), response) as InventoryServiceRegistrationContract;

            return result != null && result.validate();
        }
        catch
        {
            if (InventInventoryDataServiceRetryHelper::retryTransientError())
            {
                retry;
            }

            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegistration</Name>
				<Source><![CDATA[
    internal static container checkRegistration()
    {
        boolean isProcessQueue = false;
        boolean isDisableQueue = false;
        str errorMessage = '';
        InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();

        if (parameter.InventoryServiceEndpoint == '')
        {
            errorMessage = "@SCM:InventoryServiceEndpointShouldNotBeEmpty";
        }

        var inventoryServiceClient = new InventoryServiceClient();
        str registrationInfo;
        try
        {
            registrationInfo = inventoryServiceClient.getRegistration(parameter.InventoryServiceEndpoint);
        }
        catch
        {
            if (InventInventoryDataServiceRetryHelper::retryTransientError())
            {
                retry;
            }
        }
        var result = FormJsonSerializer::deserializeObjectStrict(classNum(InventoryServiceRegistrationContract), registrationInfo) as InventoryServiceRegistrationContract;

        if (result == null)
        {
            errorMessage = "@SCM:InventoryServiceRegistrationInformationIsNullErrorMessage";
        }
        else
        {
            if (result.validate())
            {
                isProcessQueue = true;
            }
            else if (!result.validateInstallation())
            {
                if (!result.validateActive())
                {
                    errorMessage = "@SCM:InventoryServiceServiceIsInActiveAndUninstalledErrorMessage";
                }
                else
                {
                    errorMessage = "@SCM:InventoryServiceServiceIsUninstalledErrorMessage";
                }

                if (result.validateUnInstallation())
                {
                    isDisableQueue = true;
                }
            }
            else if (!result.validateActive())
            {
                errorMessage = "@SCM:InventoryServiceServiceIsInactiveErrorMessage";
            }
        }

        return [isProcessQueue, isDisableQueue, errorMessage];
    }

]]></Source>
			</Method>
			<Method>
				<Name>analyzeNonSuccessHttpResponseReason</Name>
				<Source><![CDATA[
    private str analyzeNonSuccessHttpResponseReason(str _remoteReasonPhrase)
    {
        switch (_remoteReasonPhrase)
        {
            case 'FABRIC_E_SERVICE_DOES_NOT_EXIST':
                return "@SCM:InventoryServiceServiceNotExistErrorMessage";
            case 'Not Found':
                return "@SCM:InventoryServiceFailToFindInventoryServiceRegistrationInformationErrorMessage";
            case 'Unauthorized':
                return "@SCM:InventoryServiceUnauthorizedErrorMessage";
            default:
                return "@SCM:InventoryServiceFailToConnectToInventoryServiceErrorMessage";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        this.inventClient = new InventoryServiceClient();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>