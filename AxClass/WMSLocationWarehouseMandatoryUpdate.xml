<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationWarehouseMandatoryUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSLocationWarehouseMandatoryUpdate</c> class is used to make sure that warehouse aisles and
///    locations have a warehouse specified.
/// </summary>
class WmsLocationWarehouseMandatoryUpdate extends RunBase
{
    InventSiteId        inventSiteIdBlank;
    InventLocationId    inventLocationIdBlank;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        inventLocationIdBlank,
        inventSiteIdBlank
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initInventLocationIdBlank</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>inventLocationIdBlank</c> variable to hold the new warehouse.
    /// </summary>
    protected void initInventLocationIdBlank()
    {
        int                     newIdInt = 0;
        InventLocation          inventLocation;
        InventDim               inventDim;
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         range;
        QueryRun                queryRun;

        if (inventLocationIdBlank)
        {
            return; // already initialized
        }

        this.initInventSiteIdDefault();

        query   = new Query();
        query.allowCrossCompany(true);
        qbds    = query.addDataSource(tableNum(InventLocation));
        range   = qbds.addRange(fieldNum(InventLocation, InventLocationId));

        while (true)
        {
            newIdInt++;
            inventLocationIdBlank = strFmt('%1', newIdInt);

            range.value(inventLocationIdBlank);
            queryRun    = new QueryRun(query);
            if (!queryRun.next()) // inventLocationIdBlank not used
            {
                select firstonly RecId from inventDim  // avoid potential index violations when upgrading inventDim
                    where inventDim.InventLocationId    == inventLocationIdBlank;
                if (!inventDim.RecId)
                {
                    inventLocation.initValue();
                    inventLocation.InventLocationId = inventLocationIdBlank;
                    inventLocation.InventSiteId = inventSiteIdBlank;
                    inventLocation.insert();
                    return;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSiteIdDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the site to use for the new warehouses
    /// </summary>
    protected void initInventSiteIdDefault()
    {
        int                     newIdInt = 0;
        InventParameters        inventParameters;
        InventSite              inventSite;
        InventLocation          inventLocation;
        InventDim               inventDim;
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         range;
        QueryRun                queryRun;

        if (inventSiteIdBlank)
        {
            return; // already initialized
        }

        if (inventLocationIdBlank)
        {
            inventLocation = InventLocation::find(inventLocationIdBlank);
            if (inventLocation && inventLocation.InventSiteId)
            {
                inventSiteIdBlank = inventLocation.InventSiteId;
                return;
            }
        }

        inventParameters = InventParameters::find();
        if (inventParameters.MultiSiteDefaultInventSiteId)
        {
            inventSiteIdBlank = inventParameters.MultiSiteDefaultInventSiteId;
            return;
        }

        query   = new Query();
        query.allowCrossCompany(true);
        qbds    = query.addDataSource(tableNum(InventSite));
        range   = qbds.addRange(fieldNum(InventSite, SiteId));

        while (true)
        {
            newIdInt++;
            inventSiteIdBlank = strFmt('%1', newIdInt);

            range.value(inventSiteIdBlank);
            queryRun    = new QueryRun(query);
            if (!queryRun.next()) // inventSiteIdBlank not used
            {
                select firstonly RecId from inventDim  // avoid potential index violations when upgrading inventDim
                    where inventDim.InventSiteId    == inventSiteIdBlank;
                if (!inventDim.RecId)
                {
                    inventSite.initValue();
                    inventSite.SiteId = inventSiteIdBlank;
                    inventSite.insert();
                    return;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Standard method that is used by packable framework which is overridden to avoid individual users to
    ///    save these.
    /// </summary>
    /// <returns>
    ///    An empty string.
    /// </returns>
    public UserId lastValueUserId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationIdBlank</Name>
				<Source><![CDATA[
    protected InventLocationId parmInventLocationIdBlank(InventLocationId _inventLocationIdBlank = inventLocationIdBlank)
    {
        inventLocationIdBlank = _inventLocationIdBlank;
        return inventLocationIdBlank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version     = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeExisting</Name>
				<Source><![CDATA[
    protected void upgradeExisting()
    {
        this.getLast();

        ttsbegin;

        this.upgradeExistingWMSAisle();

        this.saveLast();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeExistingInventDim</Name>
				<Source><![CDATA[
    protected void upgradeExistingInventDim()
    {
        InventDim   inventDim;

        if (inventLocationIdBlank)
        {
            inventDim.skipDataMethods(true);

            update_recordset inventDim
                setting InventLocationId    = inventLocationIdBlank,
                        InventSiteId        = inventSiteIdBlank
                where inventDim.InventLocationId    == ''
                   && inventDim.wmsLocationId       != '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeExistingInventItemLocation</Name>
				<Source><![CDATA[
    protected void upgradeExistingInventItemLocation()
    {
        InventItemLocation  inventItemLocation;
        InventItemLocation  inventItemLocationNew;
        InventDim           inventDim;
        InventDim           inventDimNew;

        while select forupdate inventItemLocation
            where (inventItemLocation.wmsLocationIdDefaultIssue != ''
                || inventItemLocation.wmsLocationIdDefaultReceipt != ''
                || inventItemLocation.wmsPickingLocation != '')
            exists join inventDim
            where inventDim.InventDimId         == inventItemLocation.InventDimId
               && inventDim.InventLocationId    == ''
        {   // create new record for specific warehouse and remove locations from blank warehouse
            inventItemLocationNew.data(inventItemLocation.data());
            inventDimNew =  inventItemLocationNew.inventDim();
            inventDimNew.InventLocationId   = inventLocationIdBlank;
            inventDimNew = InventDim::findOrCreate(inventDimNew);
            inventItemLocationNew.InventDimId = inventDimNew.InventDimId;
            inventItemLocationNew.insert();

            inventItemLocation.wmsLocationIdDefaultIssue    = '';
            inventItemLocation.wmsLocationIdDefaultReceipt  = '';
            inventItemLocation.wmsPickingLocation           = '';
            inventItemLocation.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeExistingWMSAisle</Name>
				<Source><![CDATA[
    protected void upgradeExistingWMSAisle()
    {
        WMSAisle            wmsAisle;

        select firstonly wmsAisle
            where wmsAisle.InventLocationId == '';
        if (wmsAisle.RecId)
        {
            this.initInventLocationIdBlank();

            wmsAisle.skipDataMethods(true);

            update_recordset wmsAisle
                setting InventLocationId    = inventLocationIdBlank
                where wmsAisle.InventLocationId == '';

            this.upgradeExistingWMSLocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeExistingWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Upgrades existing locations where the warehouse field is blank.
    /// </summary>
    /// <remarks>
    ///    Also calls upgrade methods for tables related to locations.
    /// </remarks>
    protected void upgradeExistingWMSLocation()
    {
        WMSLocation         wmsLocation;

        select firstonly wmsLocation
            where wmsLocation.InventLocationId == '';
        if (wmsLocation.RecId)
        {
            this.initInventLocationIdBlank();

            wmsLocation.skipDataMethods(true);

            update_recordset wmsLocation
                setting InventLocationId    = inventLocationIdBlank
                where wmsLocation.InventLocationId == '';

            this.upgradeExistingInventItemLocation();
            this.upgradeExistingWMSShipment();
            this.upgradeExistingWMSPickingRoute();
            this.upgradeExistingInventDim();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeExistingWMSPickingRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates picking routes without a defined warehouse field where at least one picking line has a
    ///    location specified
    /// </summary>
    protected void upgradeExistingWMSPickingRoute()
    {
        WMSPickingRoute     wmsPickingRoute;
        WMSOrderTrans       wmsOrderTrans;
        InventDim           inventDim;

        if (inventLocationIdBlank)
        {
            wmsPickingRoute.skipDataMethods(true);

            update_recordset wmsPickingRoute
                setting InventLocationId    = inventLocationIdBlank
                where wmsPickingRoute.InventLocationId == ''
                exists join wmsOrderTrans
                    where wmsOrderTrans.RouteId     == wmsPickingRoute.PickingRouteID
                    join inventDim
                        where inventDim.InventDimId         == wmsOrderTrans.InventDimId
                           && inventDim.InventLocationId    == ''
                           && inventDim.wmsLocationId       != '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeExistingWMSShipment</Name>
				<Source><![CDATA[
    protected void upgradeExistingWMSShipment()
    {
        WMSShipment         wmsShipment;

        if (inventLocationIdBlank)
        {
            wmsShipment.skipDataMethods(true);

            update_recordset wmsShipment
                setting InventLocationId    = inventLocationIdBlank
                where wmsShipment.InventLocationId  == ''
                   && wmsShipment.OutputPort        != '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSLocationWarehouseMandatoryUpdate construct()
    {
        return new WMSLocationWarehouseMandatoryUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationIdBlank</Name>
				<Source><![CDATA[
    static InventLocationId inventLocationIdBlank()
    {
        WMSLocationWarehouseMandatoryUpdate     wmsLocationWarehouseMandatoryUpdate;

        wmsLocationWarehouseMandatoryUpdate = WMSLocationWarehouseMandatoryUpdate::construct();
        wmsLocationWarehouseMandatoryUpdate.getLast();
        if (wmsLocationWarehouseMandatoryUpdate.parmInventLocationIdBlank())
        {
            if (!InventLocation::exist(wmsLocationWarehouseMandatoryUpdate.parmInventLocationIdBlank()))
            {   // The warehouse has been renamed, so there is no longer track of which warehouse it was
                return '';
            }
        }
        return wmsLocationWarehouseMandatoryUpdate.parmInventLocationIdBlank();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performUpgrade</Name>
				<Source><![CDATA[
    static public void performUpgrade()
    {
        WMSLocationWarehouseMandatoryUpdate wmsLocationWarehouseMandatoryUpdate;

        wmsLocationWarehouseMandatoryUpdate     = WMSLocationWarehouseMandatoryUpdate::construct();
        wmsLocationWarehouseMandatoryUpdate.upgradeExisting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>