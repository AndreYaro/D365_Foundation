<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransferPriceLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to lookup transfer price from <c>ProjTransferPrice</c> by <c>ProjTransferPriceParameters</c> object.
/// </summary>
class ProjTransferPriceLookup extends ProjPriceLookup
{
    protected ProjTransferPriceParameters transferPriceParameters;
    
    protected const RefRecId projectCategoryRecIdDefaultValue = 0;
    protected const ProjInvoiceTableRecId contractRecIdDefaultValue = 0;
    protected const ProjectRecId projectRecIdDefaultValue = 0;
    protected const ResourceRecId resourceRecIdDefaultValue = 0;
    protected const ResourceCategoryRecId resourceCategoryRecIdDefaultValue = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initTablefieldlNumsToParameterValuesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the map of <c>ProjTransferPrice</c> table fields ID with the <c>ProjTransferPriceParameters</c> class parameter values.
    /// </summary>
    protected void initTablefieldlNumsToParameterValuesMap()
    {
        fieldNumToParmValueMap.insert(fieldNum(ProjTransferPrice, Currency), transferPriceParameters.parmTransferCurrencyCode());
        fieldNumToParmValueMap.insert(fieldNum(ProjTransferPrice, ProjCategory), transferPriceParameters.parmProjectCategoryRecId());
        fieldNumToParmValueMap.insert(fieldNum(ProjTransferPrice, ProjectDataAreaId), transferPriceParameters.parmProjectDataAreaId());
        fieldNumToParmValueMap.insert(fieldNum(ProjTransferPrice, ProjInvoiceTable), transferPriceParameters.parmContractRecId());
        fieldNumToParmValueMap.insert(fieldNum(ProjTransferPrice, ProjTable), transferPriceParameters.parmProjectRecId());
        fieldNumToParmValueMap.insert(fieldNum(ProjTransferPrice, Resource), transferPriceParameters.parmResourceRecId());
        fieldNumToParmValueMap.insert(fieldNum(ProjTransferPrice, ResourceCategory), transferPriceParameters.parmResourceCategoryRecId());
        fieldNumToParmValueMap.insert(fieldNum(ProjTransferPrice, TransDate), transferPriceParameters.parmTransDate());
        fieldNumToParmValueMap.insert(fieldNum(ProjTransferPrice, TransType), transferPriceParameters.parmTransferPriceTransType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariableValueFieldsToDefaultLookupValuesMap</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Initialize the map of <c>ProjTransferPrice</c> table variable values fields ID with default lookup values.
    /// Default value will be used to lookup if the field is not specified in the lookup fields container precedence list.
    /// </summary>
    protected void initVariableValueFieldsToDefaultLookupValuesMap()
    {
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjTransferPrice, ProjCategory), projectCategoryRecIdDefaultValue);
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjTransferPrice, ProjInvoiceTable), contractRecIdDefaultValue);
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjTransferPrice, ProjTable), projectRecIdDefaultValue);
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjTransferPrice, Resource), resourceRecIdDefaultValue);
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjTransferPrice, ResourceCategory), resourceCategoryRecIdDefaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFixedValueFieldList</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Initialize the list of the fix values lookup fields for <c>ProjTransferPrice</c> table.
    /// These fields value should not change once it's initialize during the entire lookup process.
    /// </summary>
    /// <remarks>
    /// Each table field nums specified in this list should not appear in variableValueFieldsToDefaultLookupValuesMap as key.
    /// </remarks>
    protected void initFixedValueFieldList()
    {
        fixedValueFieldsList.addEnd(fieldNum(ProjTransferPrice, ProjectDataAreaId));
        fixedValueFieldsList.addEnd(fieldNum(ProjTransferPrice, TransDate));
        fixedValueFieldsList.addEnd(fieldNum(ProjTransferPrice, Currency));
        fixedValueFieldsList.addEnd(fieldNum(ProjTransferPrice, TransType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariableValueLookupFieldsConPrecedenceList</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Initialize this <c>ProjTransferPrice</c> table fields container list which specified the specific query lookup order.
    /// Each container includes the combination of variable value fields to lookup. Value to lookup for each field in the container will be 
    /// specified by the parameter value in <c>ProjTransferPriceParameters</c> object.
    /// </summary>
    protected void initVariableValueLookupFieldsConPrecedenceList()
    {
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjTable), fieldNum(ProjTransferPrice, Resource), fieldNum(ProjTransferPrice, ProjCategory)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjTable), fieldNum(ProjTransferPrice, Resource)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, Resource), fieldNum(ProjTransferPrice, ProjCategory)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjTable), fieldNum(ProjTransferPrice, ProjCategory)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjTable), fieldNum(ProjTransferPrice, Resource), fieldNum(ProjTransferPrice, ResourceCategory)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjTable), fieldNum(ProjTransferPrice, ResourceCategory)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, Resource), fieldNum(ProjTransferPrice, ResourceCategory)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjTable)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjInvoiceTable), fieldNum(ProjTransferPrice, Resource), fieldNum(ProjTransferPrice, ProjCategory)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjInvoiceTable), fieldNum(ProjTransferPrice, Resource)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjInvoiceTable), fieldNum(ProjTransferPrice, ProjCategory)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjInvoiceTable), fieldNum(ProjTransferPrice, Resource), fieldNum(ProjTransferPrice, ResourceCategory)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjInvoiceTable), fieldNum(ProjTransferPrice, ResourceCategory)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjInvoiceTable)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, Resource)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ProjCategory)]);
        variableValueFieldsLookupConPrecedenceList.addEnd(
            [fieldNum(ProjTransferPrice, ResourceCategory)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct <c>ProjTransferPriceLookup</c> object.
    /// </summary>
    /// <param name = "_transferPriceParameters"><c>ProjTransferPriceParameters</c> object for parameters specification.</param>
    /// <returns><c>ProjTransferPriceLookup</c> object.</returns>
    public static ProjTransferPriceLookup construct(ProjTransferPriceParameters _transferPriceParameters)
    {
        ProjTransferPriceLookup transferPriceLookup = new ProjTransferPriceLookup();
        transferPriceLookup.transferPriceParameters = _transferPriceParameters;
        transferPriceLookup.initTablefieldlNumsToParameterValuesMap();
        transferPriceLookup.initVariableValueFieldsToDefaultLookupValuesMap();
        transferPriceLookup.initFixedValueFieldList();
        transferPriceLookup.initVariableValueLookupFieldsConPrecedenceList();
        return transferPriceLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransferPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the transfer price from <c>ProjTransferPrice</c> table according to the 
    /// <c>ProjTransferPriceParameters</c> class parameters specification.
    /// </summary>
    /// <returns>Transfer price.</returns>
    public CostPrice findTransferPrice()
    {
        CostPrice transferPrice;

        ProjOpsPricingLogger logger = ProjOpsPricingLogger::createLogger(classStr(ProjTransferPriceLookup));

        using (var activityContext = logger.projOpsPricingActivity().codeInstrumentationContext(methodStr(ProjTransferPriceLookup, findTransferPrice)))
        {
            ProjTransferPrice transferPriceTable = this.findTransferPriceOperation();

            transferPrice = this.calculateProjTransferPriceByPriceModel(transferPriceTable);

            if (transferPrice < 0.0)
            {
                // Do not allow transfer price at a loss.
                transferPrice = 0.00;
            }
        }

        return transferPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProjTransferPriceByPriceModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate transfer price according to transfer price model.
    /// </summary>
    /// <param name = "_transferPriceTable"><c>ProjTransferPrice</c> table buffer.</param>
    /// <returns>Calculated transfer price.</returns>
    protected CostPrice calculateProjTransferPriceByPriceModel(ProjTransferPrice _transferPriceTable)
    {
        CostPrice transferPrice = _transferPriceTable.TransferPrice;
        CostPrice costPrice = transferPriceParameters.parmCostPrice();
        SalesPrice salesPrice = transferPriceParameters.parmSalesPrice();
        CurrencyCode transferCurrency = transferPriceParameters.parmTransferCurrencyCode();
        TransDate transDate = transferPriceParameters.parmTransDate();
        CurrencyCode costCurrencyCode = Ledger::accountingCurrency(
            CompanyInfo::findDataArea(transferPriceParameters.parmResourceDataAreaId()).RecId);

        if (_transferPriceTable)
        {
            switch (_transferPriceTable.PriceModel)
            {
                case ProjTransferPriceModel::TransferPrice :
                    break;

                case ProjTransferPriceModel::Contributionratio :
                    if (costPrice)
                    {
                        transferPrice = CurrencyExchangeHelper::price(
                            100 * costPrice / (100 - transferPrice ? 100 - transferPrice : 1), costCurrencyCode);

                        if (costCurrencyCode != transferCurrency)
                        {
                            transferPrice = ExchangeRateHelper::curPrice(transferPrice, transferCurrency, transDate);
                        }
                    }
                    else
                    {
                        transferPrice = 0.0;
                    }
                    break;

                case ProjTransferPriceModel::PercentMarkup :
                    if (costPrice)
                    {
                        transferPrice  = CurrencyExchangeHelper::price(pt(costPrice, transferPrice / 100), costCurrencyCode);
                        if (costCurrencyCode != transferCurrency)
                        {
                            transferPrice = ExchangeRateHelper::curPrice(transferPrice, transferCurrency, transDate);
                        }
                    }
                    else
                    {
                        transferPrice = 0.0;
                    }
                    break;

                case ProjTransferPriceModel::AmountMarkup :
                    transferPrice = CurrencyExchangeHelper::curAmount(costPrice, transferCurrency, transDate, 0, 0, 0, false) + transferPrice;
                    break;

                case ProjTransferPriceModel::PercentSalePrice :
                    if (ProjNegativeSalesPriceTransferPriceFixFlight::instance().isEnabled())
                    {
                        transferPrice = abs(salesPrice * (transferPrice / 100));
                    }
                    else
                    {
                        transferPrice = salesPrice * (transferPrice / 100);
                    }

                    break;

                case ProjTransferPriceModel::AmountSalesPrice :
                    if (ProjNegativeSalesPriceTransferPriceFixFlight::instance().isEnabled())
                    {
                        transferPrice = abs(salesPrice) - transferPrice;
                    }
                    else
                    {
                        transferPrice = (salesPrice - transferPrice);
                    }

                    break;
            }
        }

        return transferPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryBuildDataSourceWithFixedValueFieldsBySpecificFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query build date source with the fixed values fields by specific fields.
    /// </summary>
    /// <param name = "_fieldId">Specific field identifier for matching.</param>
    /// <param name = "_qbdsProjTransferPrice">Query build datasource for the project transfer price table query filter.</param>
    /// <returns>true if specific field identifier matches the expected value; otherwise, false.</returns>
    protected boolean buildQueryBuildDataSourceWithFixedValueFieldsBySpecificFieldId(FieldId _fieldId, QueryBuildDataSource _qbdsProjTransferPrice)
    {
        boolean buildBySpecificFieldId = false;

        if (_fieldId == fieldNum(ProjTransferPrice, TransType))
        {
            buildBySpecificFieldId = true;

            ProjTransferPriceTransType transTypeValue = fieldNumToParmValueMap.lookup(fieldNum(ProjTransferPrice, TransType));
            str transTypeRange;

            if (transTypeValue == ProjTransferPriceTransType::All)
            {
                transTypeRange = queryValue(transTypeValue);
            }
            else
            {
                transTypeRange = strFmt('((%1 == %2) || (%1 == %3))',
                    fieldStr(ProjTransferPrice, TransType),
                    enum2int(transTypeValue),
                    enum2int(ProjTransferPriceTransType::All));
            }

            _qbdsProjTransferPrice.addRange(fieldNum(ProjTransferPrice, TransType)).value(transTypeRange);
        }
        else if (_fieldId == fieldNum(ProjTransferPrice, Currency))
        {
            buildBySpecificFieldId = true;

            CurrencyCode currencyCodeValue = fieldNumToParmValueMap.lookup(fieldNum(ProjTransferPrice, Currency));
            str currencyCodeRange = strFmt('((%1 == "") || (%1 == "%2"))',
                fieldStr(ProjTransferPrice, Currency),
                currencyCodeValue);

            _qbdsProjTransferPrice.addRange(fieldNum(ProjTransferPrice, Currency)).value(currencyCodeRange);
        }
        else if (_fieldId == fieldNum(ProjTransferPrice, TransDate))
        {
            buildBySpecificFieldId = true;

            _qbdsProjTransferPrice.addRange(_fieldId)
                .value(queryRange(
                    dateNull(),
                    fieldNumToParmValueMap.lookup(fieldNum(ProjTransferPrice, TransDate))));
        }

        return buildBySpecificFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectParameterByParentProjectRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update project parameters by project project record ID. and map to parent project.
    /// </summary>
    /// <param name = "_parentProjectRecId">Parent project record identifier.</param>
    protected void updateProjectParameterByParentProjectRecId(ProjectRecId _parentProjectRecId)
    {
        transferPriceParameters.parmProjectRecId(_parentProjectRecId);
        fieldNumToParmValueMap.remove(fieldNum(ProjTransferPrice, ProjTable));
        fieldNumToParmValueMap.insert(fieldNum(ProjTransferPrice, ProjTable), transferPriceParameters.parmProjectRecId());

        // Parent project may have a differetn contract, hence update map with the latest contract record ID parameter.
        fieldNumToParmValueMap.remove(fieldNum(ProjTransferPrice, ProjInvoiceTable));
        fieldNumToParmValueMap.insert(fieldNum(ProjTransferPrice, ProjInvoiceTable), transferPriceParameters.parmContractRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransferPriceOperation</Name>
				<Source><![CDATA[
    private ProjTransferPrice findTransferPriceOperation()
    {
        ProjTransferPrice transferPriceTable;
        select firstonly RecId from transferPriceTable;

        // Only execute the lookup if the table has at least one record.
        if (transferPriceTable)
        {
            transferPriceTable.clear();
            // Attempt to lookup transfer price record according to the fields lookup container precedence list.
            transferPriceTable = this.findPriceLoop() as ProjTransferPrice;

            // If transfer price record cannot be found, then lookup transfer price by the parent project.
            if (!transferPriceTable)
            {
                transferPriceTable = this.findTransferPriceByParentProject();
            }

            // If transfer record record cannot be found, then attempt to lookup by only the fixed value fields and all variable fields by default values.
            if (!transferPriceTable)
            {
                transferPriceTable = this.findPriceByFixedValueFieldOnly() as ProjTransferPrice;
            }
        }

        return transferPriceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryByFixedValueLookupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override base class to build transfer price query by the fixed values lookup fields.
    /// </summary>
    /// <returns>Transfer price query.</returns>
    protected Query buildQueryByFixedValueLookupFields()
    {
        Query query = new Query();
        query.allowCrossCompany(true);
        query.addCompanyRange(transferPriceParameters.parmResourceDataAreaId());        
        query.firstOnly1(true);
        
        QueryBuildDataSource qbdsProjTransferPrice = query.addDataSource(targetTableNum);
        qbdsProjTransferPrice.addSortField(fieldNum(ProjTransferPrice, TransDate), SortOrder::Descending);
        qbdsProjTransferPrice.addSortField(fieldNum(ProjTransferPrice, TransType), SortOrder::Descending);

        ListEnumerator fixedValuesLookupFieldsListEnum = fixedValueFieldsList.getEnumerator();
        while (fixedValuesLookupFieldsListEnum.moveNext())
        {
            if (!this.buildQueryBuildDataSourceWithFixedValueFieldsBySpecificFieldId(
                fixedValuesLookupFieldsListEnum.current(), qbdsProjTransferPrice))
            {
                qbdsProjTransferPrice.addRange(fixedValuesLookupFieldsListEnum.current())
                    .value(queryValue(fieldNumToParmValueMap.lookup(fixedValuesLookupFieldsListEnum.current())));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override base class to lookup transfer price according to the specified query.
    /// </summary>
    /// <param name = "_priceQuery">Specified price lookup query.</param>
    /// <returns>Transfer price table buffer.</returns>
    protected Common find(Query _priceQuery)
    {
        ProjTransferPrice transferPriceTable;

        QueryRun queryRun = new QueryRun(_priceQuery);

        while (queryRun.next())
        {
            ProjTransferPrice transferPriceBuffer = queryRun.get(targetTableNum) as ProjTransferPrice;
            transferPriceTable.data(transferPriceBuffer);
        }

        return transferPriceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
        targetTableNum = tableNum(ProjTransferPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransferPriceByParentProject</Name>
				<Source><![CDATA[
    private ProjTransferPrice findTransferPriceByParentProject()
    {
        // Lookup the project transfer price from parent project.
        // This function should only be called if transfer price cannot be found by looking up the current project.

        ProjTransferPrice transferPriceTable;

        do
        {
            ProjectRecId parentProjectRecId;

            changecompany(transferPriceParameters.parmProjectDataAreaId())
            {
                ProjTable   projTable;
                ProjTable   parentProjTable;

                // Look up parent project and avoid infinite loop in case of the project record has both the ProjId and ParentId having the same values.
                select firstonly RecId from parentProjTable
                    exists join projTable
                        where projTable.RecId == transferPriceParameters.parmProjectRecId()
                            && projTable.ParentId != ''
                            && projTable.ParentId == parentProjTable.ProjId
                            && projTable.RecId != parentProjTable.RecId;

                parentProjectRecId = parentProjTable.RecId;
            }

            if (parentProjectRecId)
            {
                this.updateProjectParameterByParentProjectRecId(parentProjectRecId);
                transferPriceTable = this.findPriceLoop() as ProjTransferPrice;
            }
            else
            {
                transferPriceParameters.parmProjectRecId(0);
            }
        }
        while (!transferPriceTable && transferPriceParameters.parmProjectRecId());
        
        return transferPriceTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>