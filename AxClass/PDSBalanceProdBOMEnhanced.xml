<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSBalanceProdBOMEnhanced</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class PDSBalanceProdBOMEnhanced extends PDSBalanceProdBOM
{
    private Map matchHashKeyToInventDimMap = new Map(Types::String, Types::Class); 
    private boolean isPDSBalanceProdBOMEnhancedRemainActiveFlightEnabled = PDSBalanceProdBOMEnhancedRemainActiveFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventDimHashKey</Name>
				<Source><![CDATA[
    internal str inventDimHashKey(InventSum _inventSum)
    {
        InventDim   inventDim;
        
        inventDim.data(_inventSum.joinChild());
        return strFmt('%1#%2', _inventSum.ItemId, inventDim.hashKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    internal InventDimId hashKey(InventSum _inventSum)
    {
        str hashKey = this.inventDimHashKey(_inventSum);

        if (matchHashKeyToInventDimMap.exists(hashKey))
        {
            MapEnumerator me = matchHashKeyToInventDimMap.lookup(hashKey).getEnumerator();

            while (me.moveNext())
            {
                return me.currentKey();
            }
        }

        return this.matchHashKeyToInventDimMap(_inventSum, hashKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchHashKeyToInventDimMap</Name>
				<Source><![CDATA[
    internal InventDimId matchHashKeyToInventDimMap(InventSum _inventSum, str _hashKey)
    {
        QueryRun    queryRun = new QueryRun(this.initInventSumQuery(_inventSum));
        InventSum   inventSum;
        InventDimId inventDimId;
        Map         inventSumInventDimMap = new Map(Types::String, Types::Container);
        
        while (queryRun.next())
        {
            inventSum = queryRun.get(tableNum(InventSum));
            inventSumInventDimMap.add(inventSum.InventDimId, [inventSum.AvailPhysical, 0, 0]);

            if (!inventDimId)
            {
                inventDimId = inventSum.InventDimId;
            }
        }

        matchHashKeyToInventDimMap.add(_hashKey, inventSumInventDimMap);
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUsedQuantityByInventDimHashKey</Name>
				<Source><![CDATA[
    internal container getUsedQuantityByInventDimHashKey(InventSum _sum)
    {
        str hashKey = this.inventDimHashKey(_sum); 
        InventQty availablePhysicalQtySum;
        InventQty usedAvailablePhysicalQtySum;
        InventQty usedActiveQtySum;

        if (matchHashKeyToInventDimMap.exists(hashKey))
        {
            MapEnumerator me = matchHashKeyToInventDimMap.lookup(hashKey).getEnumerator();
            InventQty availablePhysicalQty;
            InventQty usedAvailablePhysicalQty;
            InventQty usedActivelQty;

            while (me.moveNext())
            {
                [availablePhysicalQty, usedAvailablePhysicalQty, usedActivelQty] = me.currentValue();
                availablePhysicalQtySum     += availablePhysicalQty;
                usedAvailablePhysicalQtySum += usedAvailablePhysicalQty;
                usedActiveQtySum            += usedActivelQty;
            }
        }

        return [availablePhysicalQtySum, usedAvailablePhysicalQtySum, usedActiveQtySum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity used for the given production BOM line and inventory summary.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table to retrieve the computed used quantity of.
    /// </param>
    /// <param name="_default">
    /// The value containing the default result if there is no computed quantity used; optional.
    /// </param>
    /// <returns>
    /// The quantity used of <paramref name="_sum"/>.
    /// </returns>
    public PDSQtyUsed qtyUsed(ProdBOM _prodBOM, InventSum _sum, PDSQtyUsed _default = 0)
    {
        InventQty availablePhysicalQtySum;
        InventQty usedAvailablePhysicalQtySum;
        InventQty usedActiveQtySum;

        [availablePhysicalQtySum, usedAvailablePhysicalQtySum, usedActiveQtySum] = this.getUsedQuantityByInventDimHashKey(_sum);

        if (usedAvailablePhysicalQtySum)
        {
            return usedAvailablePhysicalQtySum;
        }

        return _default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeQtyUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active quantity currently used from the given inventory summary line.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table with the inventory summary.
    /// </param>
    /// <returns>
    /// The quantity used.
    /// </returns>
    public PDSActiveQtyUsed activeQtyUsed(ProdBOM _prodBOM, InventSum _sum)
    {
        InventQty availablePhysicalQtySum;
        InventQty usedAvailablePhysicalQtySum;
        InventQty usedActiveQtySum;

        [availablePhysicalQtySum, usedAvailablePhysicalQtySum, usedActiveQtySum] = this.getUsedQuantityByInventDimHashKey(_sum);
        return usedActiveQtySum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the attribute value of the base attribute for the related batch.
    /// </summary>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table with the inventory.
    /// </param>
    /// <returns>
    /// The attribute value for the base attribute in the batch.
    /// </returns>
    public PdsBatchAttribValue baseAttributeValue(InventSum _sum)
    {
        if (baseAttributeId)
        {
            InventDim inventDim;
        
            inventDim.data(_sum.joinChild());
            return PdsBatchAttributes::find(_sum.itemId, inventDim.InventBatchId, baseAttributeId).PdsBatchAttribValue;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSelectionList</Name>
				<Source><![CDATA[
    internal void insertSelectionList(str       key,
                                      InventSum _sum,
                                      ProdBOM   _prodBOM,
                                      Qty       usedInvQty,
                                      Qty       batchActiveQty,
                                      PDSBaseValueNum     baseVal,
                                      PDSBaseValueNum     attribVal)
    {
        if (!usedInvQty)
        {
            return;
        }
        
        InventDim inventDim;
        
        inventDim.data(_sum.joinChild());
        str hashKey = this.inventDimHashKey(_sum);

        if (matchHashKeyToInventDimMap.exists(hashKey))
        {
            Map           inventSumInventDimMap = matchHashKeyToInventDimMap.lookup(hashKey);
            MapEnumerator me = inventSumInventDimMap.getEnumerator();
            InventQty     availablePhysicalQty;
            InventQty     availablePhysicalQtyPerBatch = InventBatch::find(inventDim.inventBatchId, _sum.ItemId).inventOnhand().availPhysical();
            InventQty     usedAvailablePhysicalQty;
            InventQty     usedActivePhysicalQty;
            InventQty     distributeActiveQty;                                       
            InventQty     distributePhysicalQty;
            InventQty     remainQty = min(usedInvQty, availablePhysicalQtyPerBatch); 

            if (!availablePhysicalQtyPerBatch)
            {                
                throw error(strFmt("@SCM:BatchBalancingNoAvailablePhysicalQty", inventDim.inventBatchId));
            }

            while (me.moveNext())
            {
                if (remainQty <= 0 || (isPDSBalanceProdBOMEnhancedRemainActiveFlightEnabled && batchActiveQty <= 0))
                {
                    break;
                }

                [availablePhysicalQty, usedAvailablePhysicalQty, usedActivePhysicalQty] = me.currentValue();
                if (availablePhysicalQty - usedAvailablePhysicalQty == 0)
                {
                    continue;
                }

                distributePhysicalQty = min(remainQty, availablePhysicalQty - usedAvailablePhysicalQty);
                if (distributePhysicalQty > 0)
                {
                    if (distributePhysicalQty >= batchActiveQty)
                    {
                        distributeActiveQty = batchActiveQty;
                    }
                    else
                    {
                        distributeActiveQty = (batchActiveQty / usedInvQty) * distributePhysicalQty;
                    }

                    inventSumInventDimMap.insert(me.currentKey(), [availablePhysicalQty, usedAvailablePhysicalQty + distributePhysicalQty, usedActivePhysicalQty + distributeActiveQty]);

                    var actualKey = this.key(_prodBOM.InventTransId,me.currentKey());
                    selectionList.insert(actualKey, [_sum.ItemId, me.currentKey(), usedAvailablePhysicalQty + distributePhysicalQty, _prodBOM.InventTransId, distributeActiveQty, baseVal, attribVal]);
                    remainQty -= distributePhysicalQty;

                    if (isPDSBalanceProdBOMEnhancedRemainActiveFlightEnabled)
                    {
                        batchActiveQty -= distributeActiveQty;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMark</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the mark for using inventory for the current production BOM line.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table for the inventory to release the mark on.
    /// </param>
    public void removeMark(ProdBOM _prodBOM, InventSum _sum)
    {
        if (PDSBalanceProdBOMEnhancedUnmarkBatchFlight::instance().isEnabled())
        {
            selectionList.remove(this.key(_prodBOM.InventTransId, this.hashKey(_sum)));
        }
        else
        {
            super(_prodBOM, _sum);
        }
        matchHashKeyToInventDimMap.remove(this.inventDimHashKey(_sum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the inventory has been selected for the production BOM line.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table to check.
    /// </param>
    /// <returns>
    /// true if <paramref name="_sum"/> has been selected for balancing purposes; otherwise, false.
    /// </returns>
    public boolean isMarked(ProdBOM _prodBOM, InventSum _sum)
    {
        str hashKey = this.inventDimHashKey(_sum);
        return matchHashKeyToInventDimMap.exists(hashKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the used quantity.
    /// </summary>
    /// <param name="_prodBOM">
    /// The record of the <c>ProdBOM</c> table for the current production BOM line.
    /// </param>
    /// <param name="_sum">
    /// The record of the <c>InventSum</c> table for the selected inventory summary.
    /// </param>
    /// <param name="_qty">
    /// The quantity to use.
    /// </param>
    /// <returns>
    /// The quantity actually used, this may be less than <paramref name="_qty"/>.
    /// </returns>
    public Qty setQtyMarked(ProdBOM _prodBOM, InventSum _sum, InventQty _qty)
    {
        InventDim   inventDim;
        
        inventDim.data(_sum.joinChild());
        InventBatch inventBatch = InventBatch::find(inventDim.InventBatchId, _sum.ItemId);

        if (PdsDispositionMaster::find(inventBatch.PdsDispositionCode).prodRestrictStatus())
        {
            throw error(strFmt("@SCM:BatchBalancingDispositionCodeCheck", inventBatch.InventBatchId, inventBatch.PdsDispositionCode));
        }

        if (_prodBOM.PDSIngredientType != PDSIngredientTypeEnum::Active)
        {
            throw error(strFmt("@SCM:BatchBalancingNonActiveIngredientCheck", _prodBOM.ItemId));
        }

        return super(_prodBOM, _sum, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSumQuery</Name>
				<Source><![CDATA[
    internal Query initInventSumQuery(InventSum _inventSumAggregate)
    {
        InventDim inventDim;
        InventDimParm inventDimParm;

        inventDim.data(_inventSumAggregate.joinChild());
        inventDimParm.initFromInventDim(inventDim);

        Query query = new Query();
        QueryBuildDataSource qbdsInventSum = query.addDataSource(tableNum(InventSum));

        InventSum::queryAddRangeCriteriaForSelectedDims(qbdsInventSum, inventDim, inventDimParm);
        qbdsInventSum.addRange(fieldNum(InventSum, ItemId)).value(SysQuery::value(_inventSumAggregate.ItemId));
        qbdsInventSum.addRange(fieldNum(InventSum, PhysicalInvent)).value(">0");

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearState</Name>
				<Source><![CDATA[
    internal void clearState()
    {
        selectionList = new Map(Types::String, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PDSBalanceProdBOMEnhanced construct()
    {
        return new PDSBalanceProdBOMEnhanced();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>