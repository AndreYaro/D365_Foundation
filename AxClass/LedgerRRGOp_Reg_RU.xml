<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGOp_Reg_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGOp_Reg_RU extends LedgerRRGOp_RU
{
    private const int               MonthsInYear	= 12;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AmountMST calc()
    {
        AmountMST                   totalSum;
        RTax25RegisterJournalTable  registerJournalTable;
        RTax25Query                 query;
        RTax25PeriodType            rTax25PeriodType;
        DictEnum                    dictEnum = new DictEnum(enumnum(RTax25PeriodType));
        int                         idx;
        boolean                     found;
        SetEnumerator               se;

        TransDate                   fromDate        = parms.fromDate();
        TransDate                   toDate          = parms.toDate();
        RTax25RegisterId            registerId      = parms.operation().rTax25RegisterId;
        RTax25FieldId               registerFieldId = parms.operation().rTax25FieldId;
        Query                       queryRegJour    = new Query();
        QueryBuildDataSource        qbds,
                                    qbdsVersion;
        QueryBuildRange             qbr;
        QueryRun                    queryRun;
    
        const str                   VersionRange	= '(\%1.Version > \%2.Version)';
        const str                   AcceptedRange	= '((\%1.Accepted = 1) || (\%1.Version = 0))';

        qbds = queryRegJour.addDataSource(tableNum(RTax25RegisterJournalTable));
    
        qbds.addRange(fieldNum(RTax25RegisterJournalTable, EndDate)).value(queryRange(dateNull(), toDate));
        qbds.addRange(fieldNum(RTax25RegisterJournalTable, PeriodType));
    
        if (parms.calcMethod() == ReportCalcMethod_RU::AccountingDate)
        {
            qbds.addRange(fieldNum(RTax25RegisterJournalTable, Version)).value(queryValue(0));
        }
        else
        {
            qbds.addRange(fieldNum(RTax25RegisterJournalTable, Accepted)).value(strFmt(AcceptedRange, qbds.name()));
    
            qbdsVersion = qbds.addDataSource(tableNum(RTax25RegisterJournalTable));
            qbdsVersion.joinMode(JoinMode::NoExistsJoin);
            qbdsVersion.addLink(fieldNum(RTax25RegisterJournalTable, PeriodType),           fieldNum(RTax25RegisterJournalTable, PeriodType));
            qbdsVersion.addLink(fieldNum(RTax25RegisterJournalTable, PeriodNum),            fieldNum(RTax25RegisterJournalTable, PeriodNum));
            qbdsVersion.addLink(fieldNum(RTax25RegisterJournalTable, FiscalYear),           fieldNum(RTax25RegisterJournalTable, FiscalYear));
            qbdsVersion.addLink(fieldNum(RTax25RegisterJournalTable, RegisterJournalType),  fieldNum(RTax25RegisterJournalTable, RegisterJournalType));
    
            qbdsVersion.addRange(fieldNum(RTax25RegisterJournalTable, Version)).value(strFmt(VersionRange, qbdsVersion.name(), qbds.name()));
            qbdsVersion.addRange(fieldNum(RTax25RegisterJournalTable, Accepted)).value(queryValue(NoYes::Yes));
    
            if (parms.reportOnDate())
            {
                qbds.addRange(fieldNum(RTax25RegisterJournalTable, CalculationDate)).value(queryRange(dateNull(), parms.reportOnDate()));
                qbdsVersion.addRange(fieldNum(RTax25RegisterJournalTable, CalculationDate)).value(queryRange(dateNull(), parms.reportOnDate()));
            }
        }
    
        if (parms.accountSet())
        {
            found = false;
            for (idx = dictEnum.values()-1; idx >= 0 && !found; idx--)
            {
                rTax25PeriodType = dictEnum.index2Value(idx);
    
                if (RTax25RegisterJournalTable::periodMthLength(rTax25PeriodType) <= this.dateDifferenceMths(fromDate, toDate))
                {
                    qbr = qbds.findRange(fieldNum(RTax25RegisterJournalTable, PeriodType));
                    qbr.value(queryValue(rTax25PeriodType));
    
                    queryRun = new QueryRun(queryRegJour);
                    while (queryRun.next())
                    {
                        registerJournalTable = queryRun.get(tableNum(RTax25RegisterJournalTable));
    
                        if (registerJournalTable.fromDate() >= fromDate)
                        {
                            found = true;
                            query = RTax25Query::newParameters(RTax25RegisterTable::registerId2Type(registerId),
                                                               RTax25RegisterJournalTrans::findLink(registerJournalTable, registerId),
                                                               ! RTax25RegisterTrans::existAny(registerJournalTable.JournalNum,
                                                                                               registerId,
                                                                                                registerJournalTable.PeriodType,
                                                                                                registerJournalTable.PeriodNum,
                                                                                               registerJournalTable.FiscalYear));
                            se = parms.accountSet().getEnumerator();
                            if (se.moveNext())
                            {
                                do
                                {
                                    totalSum += query.getProfitTotal(registerFieldId, RTax25ProfitTable::findByProfitId(se.current()).RecId);
                                }
                                while(se.moveNext());
                            }
                            else
                            {
                                totalSum += query.getProfitTotal(registerFieldId, 0);
                            }
                        }
                    }
                }
            }
        }
    
        return  totalSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateDifferenceMths</Name>
				<Source><![CDATA[
    private int dateDifferenceMths(TransDate _dateFrom, TransDate _dateTo)
    {
        return (year(_dateTo) - year(_dateFrom)) * MonthsInYear + mthofyr(_dateTo) - mthofyr(_dateFrom) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        public void init(LedgerRRGEBufferEval_W _bufferEval)
    {
        super(_bufferEval);

        if (parms.currencyForCalc() == LedgerRRGCurrencyForCalc_RU::AmountMSTSecond)
        {
            throw error("@LedgerRRG:LedgerRRG_AccountCurrencyOnly");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
	public static LedgerRRGOp_Reg_RU construct()
    {
        return new LedgerRRGOp_Reg_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromOperationType</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
	public static LedgerRRGOp_Reg_RU newFromOperationType(LedgerRRGOperationType_RU _operationType)
    {
        if (_operationType == LedgerRRGOperationType_RU::Turnover)
        {
            return LedgerRRGOp_Reg_RU::construct();
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>