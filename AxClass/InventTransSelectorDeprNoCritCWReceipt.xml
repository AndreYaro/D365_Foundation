<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransSelectorDeprNoCritCWReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransSelectorDeprNoCritCWReceipt</c> provides the select statement for the receipt inventory transactions for catch weight controlled items
/// that are elegible for depriciation and that are either not constrained by any inventory dimensions or that are constrained by all inventory dimensions.
/// </summary>
[InventTransSelectorDepreciationAttribute(InventDirection::Receipt, NoYes::No, NoYes::Yes)]
class InventTransSelectorDeprNoCritCWReceipt extends InventTransSelectorDepreciation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>select</Name>
				<Source><![CDATA[
    public void select(InventTrans _inventTrans)
    {
        InventDim   inventDim;
        InventBatch inventBatch;

        #macro.QueryInventTransWhereClause
        where _inventTrans.InventTransOrigin == movement.inventTransOriginId()
                    && _inventTrans.TransChildType   == movement.transChildType()
                    && _inventTrans.TransChildRefId  == movement.transChildRefId()
                    && _inventTrans.StatusIssue      >= fromStatusIssue
                    && _inventTrans.StatusIssue      <= toStatusIssue
                    && _inventTrans.StatusReceipt    >= fromStatusReceipt
                    && _inventTrans.StatusReceipt    <= toStatusReceipt
                    && ((   selectMarkedTrans && _inventTrans.MarkingRefInventTransOrigin != 0)
                        ||(!selectMarkedTrans && _inventTrans.MarkingRefInventTransOrigin == 0))
                    && (inventDimParm.isAllFlagNo() || _inventTrans.InventDimId == inventDimCriteria.InventDimId);
        #endmacro

        #macro.QueryInventTransWhereClauseWithBatchFilter
        where _inventTrans.InventTransOrigin == movement.inventTransOriginId()
                    && _inventTrans.TransChildType   == movement.transChildType()
                    && _inventTrans.TransChildRefId  == movement.transChildRefId()
                    && _inventTrans.StatusIssue      >= fromStatusIssue
                    && _inventTrans.StatusIssue      <= toStatusIssue
                    && _inventTrans.StatusReceipt    >= fromStatusReceipt
                    && _inventTrans.StatusReceipt    <= toStatusReceipt
                    && ((   selectMarkedTrans && _inventTrans.MarkingRefInventTransOrigin != 0)
                        ||(!selectMarkedTrans && _inventTrans.MarkingRefInventTransOrigin == 0))
                    && (inventDimParm.isAllFlagNo() || _inventTrans.InventDimId == inventDimCriteria.InventDimId)
                    join TableId from inventDim
                        where inventDim.inventDimId == _inventTrans.inventDimId
                    // Here outer join is used to make sure inventTrans can be selected if no batch is specified.
                    outer join TableId from inventBatch
                        where inventBatch.inventBatchId == inventDim.inventBatchId
                            && inventBatch.itemId       == _inventTrans.ItemId;
        #endmacro

        // Need to process empty batch number transaction firstly when no criteria, only for receipt transaction
        boolean needConsiderEmptyBatchNumberOrderBy = fromStatusIssue == StatusIssue::None
                                                          && toStatusIssue == StatusIssue::None
                                                          && inventDimParm.isAllFlagNo()
                                                          && InventDimParm::activeDimFlag(movement.inventDimGroupSetup()).InventBatchIdFlag;

        // Need to process none 'intercompany inventdim transfer' transaction firstly for intercompany transaction
        if (movement.interCompanyTransaction())
        {
            if (needConsiderEmptyBatchNumberOrderBy)
            {
                select noFetch forupdate _inventTrans
                    order by StatusReceipt desc, StatusIssue desc, InterCompanyInventDimTransferred asc, PdsCWQty asc, inventBatch.InventBatchId asc, inventDim.inventDimId desc
                    #QueryInventTransWhereClauseWithBatchFilter
            }
            else
            {
                select noFetch forupdate _inventTrans
                    order by StatusReceipt desc, StatusIssue desc, InterCompanyInventDimTransferred asc, PdsCWQty asc, InventDimId desc
                    #QueryInventTransWhereClause
            }
        }
        else
        {
            if (needConsiderEmptyBatchNumberOrderBy)
            {
                select noFetch forupdate _inventTrans
                    order by StatusReceipt desc, StatusIssue desc, PdsCWQty asc, inventBatch.InventBatchId asc, inventDim.inventDimId desc
                    #QueryInventTransWhereClauseWithBatchFilter
            }
            else
            {
                select noFetch forupdate _inventTrans
                    order by StatusReceipt desc, StatusIssue desc, PdsCWQty asc, InventDimId desc
                    #QueryInventTransWhereClause
            }
        }
           
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>