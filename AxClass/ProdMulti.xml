<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMulti</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdMulti</c> class is the base class of other classes for updating production orders. It is
/// based on the <c>RunBaseMultiParm</c> class. A user interface should be implemented for derived
/// classes.
/// </summary>
/// <remarks>
/// This is an abstract class; you cannot make an instance of it. This class can only be inherited from
/// other production classes that are used to update production orders. The UI should be implemented in
/// the form, and should be used in the derived class.
/// </remarks>
public abstract class ProdMulti extends RunBaseMultiParm
{
    NoYes   autoUpdate;
    boolean usedInitParmDefault;
    internal boolean toggleIsEnabledForEnsuringParamsAreSet;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        usedInitParmDefault
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a way to clean up after a dialog box has been canceled.
    /// </summary>
    protected void cleanupDialog()
    {
        super();
        ProdParmUpdate::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default <c>ParmUpdate</c> value .
    /// </summary>
    /// <returns>
    /// The default <c>ParmUpdate</c> value .
    /// </returns>
    /// <remarks>
    /// The default value is null so subclasses have to override this method if <c>ParmUpdate</c> values
    /// should be used.
    /// </remarks>
    public ParmUpdate defaultParmUpdate()
    {
        ProdParmUpdate prodParmUpdate;

        return prodParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParmCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the count of the parameter buffers.
    /// </summary>
    /// <returns>
    ///    An integer value that indicates the count of the parameter buffers to process.
    /// </returns>
    protected int getParmCount()
    {
        int parmCount = 0;

        ParmBuffer parmBuffer  = this.setProduction();
        while (parmBuffer)
        {
            parmCount++;
            next parmBuffer;
        }

        return parmCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    The method should initialize the internal variables. This method is called when no
    ///    <c>SysLastValue</c> record is found in <c>SysLastValue.GetLast()</c>.Remember to call the
    ///    <c>super</c> method.
    /// </remarks>
    void initParmDefault()
    {
        super();

        autoUpdate          = NoYes::No;
        if (!usedAllUsersSysLastValue)
        {
            usedInitParmDefault = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdTable</Name>
				<Source><![CDATA[
    ProdTable initProdTable(
        ProdId  _prodId,
        boolean _forUpdate = false
        )
    {
        ProdTable retProdTable = ProdTable::find(_prodId,_forUpdate);
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        if (! retProdTable.checkValid(retProdTable.ProdId))
        {
            throw error("@SYS18447");
        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            !retProdTable.checkWIPCalcMethod_RU(true))
        {
            throw error("@SYS18447");
        }
        // </GEERU>

        return retProdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and initializes a <c>ParmUpdate</c> value .
    /// </summary>
    /// <param name="_parmUpdate">
    /// The <c>ParmUpdate</c> value that should be initialized.
    /// </param>
    /// <remarks>
    /// Overridden methods must call the insert method on the <c>parmUpdate</c> value .
    /// </remarks>
    public void insertParmUpdate(ParmUpdate _parmUpdate)
    {
        super(_parmUpdate);

        _parmUpdate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the dialog system or the form created in <c>dialog()</c> should be used for
    ///    dialog boxes.
    /// </summary>
    /// <returns>
    ///    true if the dialog system should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    By using the dialog system, a batch tab page is added to the form.
    /// </remarks>
    boolean mustUseDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        autoUpdate              = NoYes::Yes;
        usedInitParmDefault     = false;
        toggleIsEnabledForEnsuringParamsAreSet = ReqEnsureParmIdAndParmUpdateAreSetInProdMultiToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>ParmUpdate</c> value that is common for all updates.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>ParmUpdate</c> value that is used for this update.
    /// </returns>
    /// <remarks>
    /// By default the ParmUpdate value is null.
    /// </remarks>
    public ParmUpdate parmUpdate(boolean _forUpdate = false)
    {
        return ProdParmUpdate::find(this.parmId(),_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performLateSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs late selection on the query elements to update while in batch.
    /// </summary>
    protected void performLateSelection()
    {         
        if (this.parmInBatch())
        {
            var prodParmUpdate = this.parmUpdate();

            if (prodParmUpdate.LateSelection && prodParmUpdate.LateSelectionQuery)
            {
                ttsbegin;
        
                // Create new parm ID to identify selection in each recurrence.
                this.initParmId();
        
                var batch = Batch::findRecId(this.parmCurrentBatch().RecId, true);
                prodParmUpdate.ParmId = this.parmId();
                prodParmUpdate.doInsert();
        
                batch.Parameters = this.pack();
                batch.doUpdate();
        
                var query = new Query(prodParmUpdate.LateSelectionQuery);
                this.chooseFromQueryAndInsert(query);
        
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfUpdateConsOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the consolidated order to ended.
    /// </summary>
    public void pmfUpdateConsOrders()
    {
        container       consOrders;
        int             i;
        ProdTable       orders;

        if (!updatedRecs)
        {
            return;
        }

        MapIterator mi = new MapIterator(updatedRecs);
        mi.begin();
        while (mi.more())
        {
            Common buffer = updatedRecs.lookup(mi.key());

            if (buffer.TableId == tablenum(ProdTable))
            {
                ProdTable prodTable = updatedRecs.lookup(mi.key());
                if (prodTable.PmfConsOrdId != '')
                {
                    if (confind(consOrders,prodTable.PmfConsOrdId) == 0)
                    {
                        consOrders = conins(
                                        consOrders,
                                        conlen(consOrders+1),
                                        prodTable.PmfConsOrdId);
                    }
                }
            }
            mi.next();
        }
        for (i=1; i<=conlen(consOrders); i++)
        {
            PmfConsOrdId ordId = conpeek(consOrders,i);
            select firstonly ProdStatus
                from orders
                order by ProdStatus
                where orders.PmfConsOrdId == ordId;

            ttsbegin;
            PmfConsOrd consOrd = PmfConsOrd::find(ordId,true);
            consOrd.ProdStatus = orders.ProdStatus;
            consOrd.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshOrRereadCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes or rereads the calling form.
    /// </summary>
    /// <param name="_args">
    ///    The instance of the <c>Args</c> object.
    /// </param>
    protected void refreshOrRereadCaller(Args _args)
    {
        switch (_args.record().TableId)
        {
            case tableNum(ProdTable):
                this.refreshCaller(_args);
                break;

            case tableNum(ProdBOM)  :
            case tableNum(ProdRoute):
                this.rereadCaller(_args);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rereads the caller datasource.
    /// </summary>
    /// <param name="_args">
    ///    The instance of the <c>Args</c> object.
    /// </param>
    protected void rereadCaller(Args _args)
    {
        Object sysFormRun_doRe = _args.caller();
        sysFormRun_doRe.dataSource().reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the calling form.
    /// </summary>
    /// <param name="_args">
    ///    The instance of the <c>Args</c> object.
    /// </param>
    public void refreshCaller(Args _args)
    {
        if (_args && _args.caller())
        {
            Object sysFormRun_doRe = _args.caller();

            if (SysFormRun::hasMethod(sysFormRun_doRe,identifierstr(doFormCache)))
            {
                sysFormRun_doRe.doFormCache(this.packRecs());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (!this.validate())
        {
            throw error("@SYS18447");
        }
        this.performLateSelection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    The task is run on the server.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProduction</Name>
				<Source><![CDATA[
    // Overload this if a different order by is needed !
    ParmBuffer setProduction()
    {
        ParmBuffer parmBuffer = this.defaultParmBuffer();

        if (this.parmId())
        {
            select parmBuffer
                order by Linenum
                where parmBuffer.ParmId == this.parmId();
        }
        return parmBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductionForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the current production orders for update and returns a buffer of all selected.
    /// </summary>
    /// <returns>A buffer containing selected production orders to be updated.</returns>
    public ParmBuffer setProductionForUpdate()
    {
        ParmBuffer parmBuffer = this.defaultParmBuffer();

        if (this.parmId())
        {
            select forupdate parmBuffer
                order by LineNum
                where parmBuffer.ParmId == this.parmId();
        }

        return parmBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLateSelectionBePerformed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a query should be saved to the <c>ParmUpdate</c> map.
    /// </summary>
    /// <returns>
    /// true if query should be saved; otherwise, false.
    /// </returns>
    public boolean shouldLateSelectionBePerformed()
    {
        this.ensureParmIdAndParmUpdateHaveBeenInitialized();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldTableBePopulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the tables should be populated with a prompted query.
    /// </summary>
    /// <returns>
    /// true if tables should be populated; otherwise, false.
    /// </returns>
    public boolean shouldTableBePopulated()
    {
        this.ensureParmIdHasBeenInitialized();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureParmIdAndParmUpdateHaveBeenInitialized</Name>
				<Source><![CDATA[
    private void ensureParmIdAndParmUpdateHaveBeenInitialized()
    {
        if (!toggleIsEnabledForEnsuringParamsAreSet)
        {
            return;
        }

        ParmUpdate parmUpdate = this.parmUpdate();
        if(!parmUpdate)
        {
            this.ensureParmIdHasBeenInitialized();
            this.insertParmUpdate(this.defaultParmUpdate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureParmIdHasBeenInitialized</Name>
				<Source><![CDATA[
    private void ensureParmIdHasBeenInitialized()
    {
        if (!toggleIsEnabledForEnsuringParamsAreSet)
        {
            return;
        }

        if (parmId == '')
        {
            RunBaseMultiParm::initParm(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     result;
        Integer     version = conpeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                result = super(base);
                break;
            default :
                result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTableWithQueryResults</Name>
				<Source><![CDATA[
    protected void populateTableWithQueryResults(ParmBuffer _parmBuffer, RunBaseMultiParm _runBaseMultiParm, ParmId _parmId, QueryRun _queryRun)
    {
        _parmBuffer.Linenum = this.nextLineNum();

        while (_queryRun.next())
        {
            try
            {
                Common record = _queryRun.getNo(1);

                if (this.checkBuffer(record))
                {
                    ttsbegin;

                    _parmBuffer.Linenum++;
                    this.insert(record, _parmBuffer);

                    ttscommit;
                }
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseUsedQueryRun</Name>
				<Source><![CDATA[
    internal SysQueryRun chooseUsedQueryRun()
    {        
        SysQueryRun    ret;     
        ParmUpdate     parmUpdate = this.parmUpdate();

        if (parmUpdate.LateSelection && parmUpdate.LateSelectionQuery)
        {
            ret = new SysQueryRun(parmUpdate.LateSelectionQuery);
            ret.promptLoadLastUsedQuery(false);
        }
        else
        {
            ret = super();
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>