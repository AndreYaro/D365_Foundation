<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateFindAndCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that serves to create Rebates.
/// </summary>
class PdsRebateFindAndCreate
{
    CustInvoiceJour         custInvoiceJour;
    CustInvoiceTrans        custInvoiceTrans;
    PdsRebateCustInvoiceTrans pdsRebateCustInvoiceTrans;

    PdsCWInventQty          sumCWQty;
    SalesQty                sumQty;
    AmountCur               sumGrossAmt;
    AmountCur               sumNetAmt;
    PdsRebateAgreementLine  tmpRebateAgreementLine;
    CustTable               custTableOrderAccount;
    #localMacro.FreightAccruedCondition
        && (%1 || pdsRebateAgreement.PdsRebateProgramType != PdsRebateProgramType::Freight)
    #endMacro

    #localMacro.CatchWeightCondition
        && (PdsGlobal::pdsIsCWItem(%1) || pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
    #endMacro

    #localMacro.JoinPdsRebate
    join RecId from pdsRebate
            where pdsRebate.PdsRebateType == pdsRebateAgreement.PdsRebateType
            && pdsRebate.PdsRebateProgramType != PdsRebateProgramType::BillBack
    #endMacro

    #localMacro.NotExistRebateTable
        notexists join pdsRebateTable
            where pdsRebateTable.CustInvoiceTransRefRecId   == %2.RecId
               && pdsRebateTable.PdsRebateAgreementRefRecId == %1.RecId
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCustomerInvoiceTransactionSums</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity and amount totals for the rebate based on the customer invoice transactions.
    /// </summary>
    protected void calculateCustomerInvoiceTransactionSums()
    {
        CustInvoiceTrans    lclCustInvoiceTrans;
        PriceUnit           priceUnit;

        // Gross amount is required to determine Rebates.  Gross amount is determined
        // by multiplying Quantity * Price.
        lclCustInvoiceTrans = this.parmCustInvoiceTrans();
        sumCWQty    = lclCustInvoiceTrans.PdsCWQty;
        sumQty      = lclCustInvoiceTrans.Qty;

        sumGrossAmt = PdsRebateHelpers::grossAmountFromCustInvoiceTrans(lclCustInvoiceTrans);

        sumGrossAmt =   CurrencyExchangeHelper::curAmount2CurAmount(sumGrossAmt, lclCustInvoiceTrans.CurrencyCode, this.currency());
        sumNetAmt   = CurrencyExchangeHelper::curAmount2CurAmount(lclCustInvoiceTrans.LineAmount, lclCustInvoiceTrans.CurrencyCode, this.currency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConvertCurrencyAndUnits</Name>
				<Source><![CDATA[
    protected boolean canConvertCurrencyAndUnits(PdsRebateAgreement _pdsRebateAgreement)
    {
        UnitOfMeasureSymbol calcUOM;
        boolean             ret = true;

        calcUOM = this.unitForRebateContract(_pdsRebateAgreement);

        if (_pdsRebateAgreement.PdsRebateUnit != calcUOM
            && !EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(custInvoiceTrans.ItemId,
                                                                                             custInvoiceTrans.InventDimId,
                                                                                             calcUOM,
                                                                                             _pdsRebateAgreement.PdsRebateUnit))
        {
            ret = false;
        }

        if (ret)
        {
            //check if currency convertion is needed and possible
            try
            {
                if (!CurrencyExchangeHelper::curAmount2CurAmount(100, this.currency(), _pdsRebateAgreement.RebateCurrency))
                {
                    ret = false;
                }
            }
            catch
            {
                //currency convertion failed
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTmpAgreementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates rebate records based on the contents of the tmpRebateAgreementLine buffer.
    /// </summary>
    /// <param name="_agreementHeaderRequirementsMet">
    /// A boolean flag indicating if the current sales line meets the rebate agreement header requirements.
    /// </param>
    protected void createFromTmpAgreementLines(boolean _agreementHeaderRequirementsMet)
    {
        PdsRebateAgreement      pdsRebateAgreementLocal, rebateAgreementZeroRebate;
        PdsRebateAgreementLine  rebateAgreementLineLocal;
        PdsRebateTable          pdsRebateTable;
        date                    dateMin = dateNull();
        date                    dateMax = maxDate();

        select firstOnly RecId from tmpRebateAgreementLine;

        if (tmpRebateAgreementLine)
        {
            if (_agreementHeaderRequirementsMet)
            {
                while select validTimeState(dateMin, dateMax) RebateAgreementRefRecId, LineNum from tmpRebateAgreementLine
                    join rebateAgreementLineLocal
                    where rebateAgreementLineLocal.RebateAgreementRefRecId == tmpRebateAgreementLine.RebateAgreementRefRecId
                        && rebateAgreementLineLocal.LineNum                == tmpRebateAgreementLine.LineNum
                    join pdsRebateAgreementLocal
                        where pdsRebateAgreementLocal.RecId == rebateAgreementLineLocal.RebateAgreementRefRecId
                    notexists join pdsRebateTable
                        where pdsRebateTable.CustInvoiceTransRefRecId    == custInvoiceTrans.RecId
                            && pdsRebateTable.PdsRebateAgreementRefRecId == tmpRebateAgreementLine.RebateAgreementRefRecId
                {
                    this.findPdsRebateAgreementLineAndCreate(pdsRebateAgreementLocal, rebateAgreementLineLocal);
                }
            }

            while select RebateAgreementRefRecId from tmpRebateAgreementLine
                group by RebateAgreementRefRecId
            {
                select firstonly validTimeState(dateMin, dateMax) rebateAgreementZeroRebate
                    where rebateAgreementZeroRebate.RecId == tmpRebateAgreementLine.RebateAgreementRefRecId
                        && rebateAgreementZeroRebate.PdsCumulateSalesBy != PdsCumulationPeriod::Invoice
                    notexists join pdsRebateTable
                        where pdsRebateTable.CustInvoiceTransRefRecId    == custInvoiceTrans.RecId
                            && pdsRebateTable.PdsRebateAgreementRefRecId == rebateAgreementZeroRebate.RecId;

                if (rebateAgreementZeroRebate)
                {
                    // this creates a zero rebate for the sales lines that does not meet the rebate quantity or amount
                    // requirements and the cumulation is periodic.
                    this.createZeroRebate(rebateAgreementZeroRebate);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates rebate from rebate agreement line.
    /// </summary>
    /// <param name="_line">
    /// The <c>PdsRebateAgreementLine</c> table record.
    /// </param>
    /// <param name="_manualRebate">
    /// The boolean value that specifies whether to create the rebate manually.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_pdsRebateProgramId">
    /// The rebate type.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Manual TMA rebates cannot be created if there is a pending unprocessed TMA rebates.
    /// </exception>
    protected void createRebate(
        PdsRebateAgreementLine  _line                   = null,
        boolean                 _manualRebate           = false,
        CustAccount             _custAccount            = '',
        PdsRebateType           _pdsRebateProgramId     = '')
    {
        PdsRebateTable          newRebateTable;
        PdsRebate               pdsRebate;

        newRebateTable.initValue();

        if (_manualRebate)
        {
            pdsRebate                            = PdsRebate::find(_pdsRebateProgramId);
            newRebateTable.CustAccount           = _custAccount;
            newRebateTable.LedgerDimension       = pdsRebate.LedgerDimension;
            newRebateTable.OffsetLedgerDimension = pdsRebate.OffsetLedgerDimension;
            newRebateTable.CurrencyCode          = CustTable::find(_custAccount).Currency;
            newRebateTable.PdsRebateType         = _pdsRebateProgramId;
            newRebateTable.PdsRebateStatus       = PdsRebateStatus::Free;

            // with manual rebates, use current date for aggregation purposes
            newRebateTable.RebateCalcDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            newRebateTable.initFromPdsRebateAgreement(_line);
            newRebateTable.initFromCustInvoiceJour(
                                    custInvoiceJour,
                                    custInvoiceTrans,
                                    sumQty,
                                    sumGrossAmt,
                                    sumNetAmt,
                                    sumCWQty,
                                    this.currency());
            newRebateTable.calculateRebateAmount();
            newRebateTable.status().setInitialStatus();
        }

        newRebateTable.updateClaimDimensions();

        ttsbegin;

        newRebateTable.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createZeroRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates zero rebate for the sales orders those does not meet the rebate quantity and amount requirements initially and if the rebate agreemnet has cumulation of periodic.
    /// </summary>
    /// <param name="_pdsRebateAgreement">
    /// The <c>RebateAgreement</c> table record by which zero rebate is creating.
    /// </param>
    protected void createZeroRebate(PdsRebateAgreement _pdsRebateAgreement)
    {
        PdsRebateTable      newRebateTable;
        PdsRebateAgreement  pdsRebateAgreement = _pdsRebateAgreement;

        newRebateTable.initValue();
        newRebateTable.initFromPdsRebateAgreementTable(pdsRebateAgreement);

        newRebateTable.initFromCustInvoiceJour(
                                    custInvoiceJour,
                                    custInvoiceTrans,
                                    sumQty,
                                    sumGrossAmt,
                                    sumNetAmt,
                                    sumCWQty,
                                    this.currency());

        newRebateTable.calculateRebateAmount();

        newRebateTable.status().setInitialStatus();
        newRebateTable.updateClaimDimensions();

        ttsbegin;

        newRebateTable.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code of the invoice transaction.
    /// </summary>
    /// <returns>
    /// The currency.
    /// </returns>
    protected CurrencyCode currency()
    {
        return custInvoiceTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateProgramTypesForPartyCountryCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets required PdsRebateProgramType container for PartyCountry condition.
    /// </summary>
    /// <returns>
    /// The required PdsRebateProgramType container.
    /// </returns>
    protected container pdsRebateProgramTypesForPartyCountryCondition()
    {
        return [PdsRebateProgramType::Freight];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateProgramTypesForPdsFreightAllocationGroupIdCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets required PdsRebateProgramType container for PdsFreightAllocationGroupId condition.
    /// </summary>
    /// <returns>
    /// The required PdsRebateProgramType container.
    /// </returns>
    protected container pdsRebateProgramTypesForPdsFreightAllocationGroupIdCondition()
    {
        return [PdsRebateProgramType::Freight];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateProgramTypesForSalesTablePdsRebateProgramTMAGroupCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets required PdsRebateProgramType container for SalesTablePdsRebateProgramTMAGroup condition.
    /// </summary>
    /// <returns>
    /// The required PdsRebateProgramType container.
    /// </returns>
    protected container pdsRebateProgramTypesForSalesTablePdsRebateProgramTMAGroupCondition()
    {
        return [PdsRebateProgramType::TMA];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateProgramTypesForSalesTablePdsCustRebateGroupIdCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets required PdsRebateProgramType container for SalesTablePdsCustRebateGroupId condition.
    /// </summary>
    /// <returns>
    /// The required PdsRebateProgramType container.
    /// </returns>
    protected container pdsRebateProgramTypesForSalesTablePdsCustRebateGroupIdCondition()
    {
        return [PdsRebateProgramType::Rebate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateProgramTypesForSalesLinePdsItemRebateGroupIdCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets required PdsRebateProgramType container for SalesLinePdsItemRebateGroupId condition.
    /// </summary>
    /// <returns>
    /// The required PdsRebateProgramType container.
    /// </returns>
    protected container pdsRebateProgramTypesForSalesLinePdsItemRebateGroupIdCondition()
    {
        return [PdsRebateProgramType::Rebate, PdsRebateProgramType::TMA];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPdsRebateAgreementAndCreateClaim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PdsRebateAgreement</c> table record to create the rebate.
    /// </summary>
    protected void findPdsRebateAgreementAndCreateClaim()
    {
        PdsRebateAgreement      pdsRebateAgreement;

        PdsRebateAgreementLine  rebateAgreementLine;
        InventTable             inventTable = custInvoiceTrans.inventTable();
        CustTable               custTable   = custTableOrderAccount ? custTableOrderAccount : custInvoiceJour.custTable_OrderAccount();
        InventQty               calcQty;
        UnitOfMeasureSymbol     calcUOM;
        PdsRebateItem           pdsRebateItem;
        PdsRebateTable          pdsRebateTable;
        PdsRebate               pdsRebate;
        InventDim               inventDim;
        InventDim               inventDimLine;
        InventDim               custInvoiceTransInventDim = custInvoiceTrans.inventDim();
        date                    dateMin = dateNull();
        date                    dateMax= maxDate();

        tmpRebateAgreementLine.setTmp();

        //Find all applicable Rebate Agreements.
        while select validTimeState(dateMin, dateMax) pdsRebateAgreement
            where (pdsRebateAgreement.PdsCustRebateCode             == TableGroupAll::All
                    || (pdsRebateAgreement.PdsCustRebateCode        == TableGroupAll::GroupId
                        && pdsRebateAgreement.PdsRebateProgramType  in this.pdsRebateProgramTypesForSalesTablePdsCustRebateGroupIdCondition()
                        && pdsRebateAgreement.PdsCustRebateRelation == pdsRebateCustInvoiceTrans.SalesTablePdsCustRebateGroupId)
                    || (pdsRebateAgreement.PdsCustRebateCode        == TableGroupAll::GroupId
                        && pdsRebateAgreement.PdsRebateProgramType  in this.pdsRebateProgramTypesForPartyCountryCondition()
                        && pdsRebateAgreement.PdsCustRebateRelation == custTable.PartyCountry)
                    || (pdsRebateAgreement.PdsCustRebateCode        == TableGroupAll::GroupId
                        && pdsRebateAgreement.PdsRebateProgramType  in this.pdsRebateProgramTypesForSalesTablePdsRebateProgramTMAGroupCondition()
                        && pdsRebateAgreement.PdsCustRebateRelation == pdsRebateCustInvoiceTrans.SalesTablePdsRebateProgramTMAGroup)
                    || (pdsRebateAgreement.PdsCustRebateCode        == TableGroupAll::Table
                        && pdsRebateAgreement.PdsCustRebateRelation == custTable.AccountNum))

                && (pdsRebateAgreement.PdsItemRebateCode            == PdsRebateItemCode::All
                    || (pdsRebateAgreement.PdsRebateProgramType     in this.pdsRebateProgramTypesForSalesLinePdsItemRebateGroupIdCondition()
                        && pdsRebateAgreement.PdsItemRebateCode     == PdsRebateItemCode::GroupId
                        && pdsRebateAgreement.PdsItemRebateRelation == pdsRebateCustInvoiceTrans.SalesLinePdsItemRebateGroupId)
                    || (pdsRebateAgreement.PdsRebateProgramType     in this.pdsRebateProgramTypesForPdsFreightAllocationGroupIdCondition()
                        && pdsRebateAgreement.PdsItemRebateCode     == PdsRebateItemCode::GroupId
                        && pdsRebateAgreement.PdsItemRebateRelation == inventTable.PdsFreightAllocationGroupId)
                    || (pdsRebateAgreement.PdsItemRebateCode        == PdsRebateItemCode::Table
                        && pdsRebateAgreement.PdsItemRebateRelation == custInvoiceTrans.ItemId)
                    || pdsRebateAgreement.PdsItemRebateCode         == PdsRebateItemCode::Selection)

                && ((pdsRebateAgreement.RebateCalcDateType == PdsRebateCalcDateType::CreatedDate
                        && (!pdsRebateAgreement.ValidFrom || pdsRebateAgreement.ValidFrom <= pdsRebateCustInvoiceTrans.SalesLineCreatedDate)
                        && (!pdsRebateAgreement.ValidTo   || pdsRebateAgreement.ValidTo >= pdsRebateCustInvoiceTrans.SalesLineCreatedDate))
                    || (pdsRebateAgreement.RebateCalcDateType == PdsRebateCalcDateType::RequestedReceiptDate
                        && (!pdsRebateAgreement.ValidFrom || pdsRebateAgreement.ValidFrom <= pdsRebateCustInvoiceTrans.SalesLineReceiptDateRequested)
                        && (!pdsRebateAgreement.ValidTo   || pdsRebateAgreement.ValidTo   >= pdsRebateCustInvoiceTrans.SalesLineReceiptDateRequested))
                    || (pdsRebateAgreement.RebateCalcDateType == PdsRebateCalcDateType::RequestedShipDate
                        && (!pdsRebateAgreement.ValidFrom || pdsRebateAgreement.ValidFrom <= pdsRebateCustInvoiceTrans.SalesLineShippingDateRequested)
                        && (!pdsRebateAgreement.ValidTo   || pdsRebateAgreement.ValidTo   >= pdsRebateCustInvoiceTrans.SalesLineShippingDateRequested)))

                && (pdsRebateAgreement.RebateGenericCurrency == NoYes::Yes
                    ||  pdsRebateAgreement.RebateCurrency    == custInvoiceTrans.CurrencyCode)

                && (pdsRebateAgreement.RebateUOMOption       == PdsRebateUOMOption::Convert
                    || (pdsRebateAgreement.PdsUnitType       == PdsUnitType::InventoryUnit
                        && pdsRebateAgreement.PdsRebateUnit  == custInvoiceTrans.SalesUnit)
                    || (pdsRebateAgreement.PdsUnitType       == PdsUnitType::CWUnit
                        && pdsRebateAgreement.PdsRebateUnit  == custInvoiceTrans.pdsCWUnitId()))

                && pdsRebateAgreement.Validated
                && pdsRebateAgreement.Verifier
            #FreightAccruedCondition(custTable.PdsFreightAccrued)
        #CatchWeightCondition(custInvoiceTrans.ItemId)
        #TAMRebateInventDimExistsJoin(pdsRebateAgreement.InventDimId, inventDim, custInvoiceTransInventDim)
        #JoinPdsRebate
        #NotExistRebateTable(pdsRebateAgreement, custInvoiceTrans)
        {
            calcQty = this.productQuantityForRebateContract(pdsRebateAgreement);
            calcUOM = this.unitForRebateContract(pdsRebateAgreement);

            if (!this.canConvertCurrencyAndUnits(pdsRebateAgreement))
            {
                continue;
            }

            RebateQuantityCheckRequirementContract contract = RebateQuantityCheckRequirementContract::constructWithVariables(sumGrossAmt,
                                                                                                                             calcQty,
                                                                                                                             calcUOM,
                                                                                                                             this.currency(),
                                                                                                                             custInvoiceTrans.ItemId,
                                                                                                                             custInvoiceTrans.InventDimId);

            boolean agreementHeaderRequirementsMet = pdsRebateAgreement.checkRebateRequirement(contract);

            if (this.mustCreateRebateFromRebateAgreementLine(pdsRebateAgreement, agreementHeaderRequirementsMet))
            {
                // Agreements with the custom item code are using an item list.
                if (pdsRebateAgreement.PdsItemRebateCode == PdsRebateItemCode::Selection)
                {
                    // Ensure that the item and dimensions on the transaction
                    // are also included in the item list if the custom code is selected.
                    tmpRebateAgreementLine.skipDataMethods(true);
                    insert_recordset tmpRebateAgreementLine (Currency, LineNum, RebateAgreementRefRecId, RebateAmtType,
                        RebateFromAmount, RebateFromQty, RebateToAmount, RebateUnit, RebateValue, InventDimId)
                    select Currency, LineNum, RebateAgreementRefRecId, RebateAmtType,
                        RebateFromAmount, RebateFromQty, RebateToAmount, RebateUnit, RebateValue
                    from rebateAgreementLine
                        where rebateAgreementLine.RebateAgreementRefRecId == pdsRebateAgreement.RecId
                    join InventDimID from pdsRebateItem
                        where pdsRebateItem.RebateAgreementRefRecId == rebateAgreementLine.RebateAgreementRefRecId
                           && pdsRebateItem.ItemID == custInvoiceTrans.ItemId
                    #TAMRebateInventDimExistsJoin(pdsRebateItem.InventDimId, inventDimLine, custInvoiceTransInventDim);
                    tmpRebateAgreementLine.skipDataMethods(false);
                }
                else
                {
                    tmpRebateAgreementLine.skipDataMethods(true);
                    insert_recordset tmpRebateAgreementLine (Currency, InventDimId, LineNum, RebateAgreementRefRecId, RebateAmtType,
                        RebateFromAmount, RebateFromQty, RebateToAmount, RebateToQty, RebateUnit, RebateValue)
                    select Currency, InventdimId, LineNum, RebateAgreementRefRecId, RebateAmtType,
                        RebateFromAmount, RebateFromQty, RebateToAmount, RebateToQty, RebateUnit, RebateValue
                    from rebateAgreementLine
                    where rebateAgreementLine.RebateAgreementRefRecId == pdsRebateAgreement.RecId;
                    tmpRebateAgreementLine.skipDataMethods(false);
                }

                this.createFromTmpAgreementLines(agreementHeaderRequirementsMet);
                // clear the temporary buffer for the next agreement
                delete_from tmpRebateAgreementLine;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateRebateFromRebateAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether rebate record from rebate agreement line must be created.
    /// </summary>
    /// <param name = "_pdsRebateAgreement">The rebate agreement.</param>
    /// <param name = "_agreementHeaderRequirementsMet">A <c>Boolean</c> value indicating whether rebate satisfies the rebate minimum requirements.</param>
    /// <returns>true if  rebate record must be created; otherwise, false.</returns>
    protected boolean mustCreateRebateFromRebateAgreementLine(PdsRebateAgreement _pdsRebateAgreement, boolean _agreementHeaderRequirementsMet)
    {
        return _pdsRebateAgreement.PdsCumulateSalesBy != PdsCumulationPeriod::Invoice  || _agreementHeaderRequirementsMet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPdsRebateAgreementLineAndCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>PdsRebateTable</c> table based on rebate agreement line and rebate agreement header.
    /// </summary>
    /// <param name="_pdsRebateAgreement">
    /// The rebate agreement header record on which the rebate is creating.
    /// </param>
    /// <param name="_pdsRebateAgreementLine">
    /// The rebate agreement line record on which the rebate is creating.
    /// </param>
    protected void findPdsRebateAgreementLineAndCreate(
        PdsRebateAgreement      _pdsRebateAgreement,
        PdsRebateAgreementLine  _pdsRebateAgreementLine)
    {
        PdsRebateAgreementLine  rebateAgreementLine = _pdsRebateAgreementLine;
        PdsRebateAgreement      rebateAgreement = _pdsRebateAgreement;
        InventQty               calcQty;
        UnitOfMeasureSymbol     calcUOM;
        AmountCur               calcAmt;
        PDSRebateAgreementLine  rebateAgreementLineMax;

        if (PdsRebateAgreement::convertRebateValue(rebateAgreementLine.RebateValue, rebateAgreementLine.RebateAmtType, rebateAgreement.RebateCurrency, this.currency()))
        {
            calcQty = this.productQuantityForRebateContract(rebateAgreement);
            calcUOM = this.unitForRebateContract(rebateAgreement);
            calcAmt = this.amountForRebateContract(rebateAgreement);

            if (rebateAgreement.RebateGenericCurrency == NoYes::Yes)
            {
                calcAmt = CurrencyExchangeHelper::curAmount2CurAmount(calcAmt, this.currency(), rebateAgreement.RebateCurrency);
            }

            RebateQuantityRequirementContract contract = RebateQuantityRequirementContract::constructWithVariables(calcQty,
                                                                                                                   calcUOM,
                                                                                                                   custInvoiceTrans.ItemId,
                                                                                                                   custInvoiceTrans.InventDimId,
                                                                                                                   false);

            if ((rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Quantity
                        && rebateAgreementLine.checkRebateQuantityRequirements(contract)
                 )
                    ||(rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount
                        && rebateAgreementLine.checkRebateAmtRequirements(calcAmt)))
            {
                this.createRebate(rebateAgreementLine);
            }
            else
            {
                rebateAgreementLineMax = PDSRebateAgreementLine::selectRebateAgreementLineMax(rebateAgreement,
                                                                                              custInvoiceTrans.inventDim(),
                                                                                              custInvoiceTrans.ItemId,
                                                                                              calcQty,
                                                                                              calcUOM,
                                                                                              rebateAgreement.RebateCurrency,
                                                                                              calcAmt);
                contract.maxRebateLineBreak = true;

                if (rebateAgreementLineMax.RecId == rebateAgreementLine.RecId
                    && ((rebateAgreement.PDSRebateLineBreakType == PDSRebateLineBreakType::Quantity
                    && rebateAgreementLine.checkRebateQuantityRequirements(contract)
                    ||(rebateAgreement.PDSRebateLineBreakType == PDSRebateLineBreakType::Amount
                    && rebateAgreementLine.checkRebateAmtRequirements(calcAmt, true)))))
                {
                    this.createRebate(rebateAgreementLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountForRebateContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines amount in transaction currency for rebate agreement.
    /// </summary>
    /// <param name = "_pdsRebateAgreement">The rebate agreement.</param>
    /// <returns>Amount in transaction currency.</returns>
    protected AmountCur amountForRebateContract(PdsRebateAgreement _pdsRebateAgreement)
    {
        if (_pdsRebateAgreement.PdsRebateTakenFrom == PdsRebateTakenFrom::Gross)
        {
            return sumGrossAmt;
        }
        return sumNetAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRebateInUse</Name>
				<Source><![CDATA[
    private boolean isRebateInUse()
    {
        return (select firstOnly RecId from PdsRebateAgreement).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>CustInvoiceJour</c> table record for which the rebate is creating.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> table record.
    /// </param>
    /// <returns>
    /// The Customer invoice journal record.
    /// </returns>
    protected CustInvoiceJour parmCustInvoiceJour(Common _custInvoiceJour = custInvoiceJour)
    {
        if (!prmisDefault(_custInvoiceJour))
        {
            custInvoiceJour = _custInvoiceJour;
        }

        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>CustInvoiceTrans</c> table records for which the rebate is creating.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> table records.
    /// </param>
    /// <returns>
    /// The customer invoice transactions.
    /// </returns>
    protected CustInvoiceTrans parmCustInvoiceTrans(Common _custInvoiceTrans = custInvoiceTrans)
    {
        if (!prmisDefault(_custInvoiceTrans))
        {
            custInvoiceTrans = _custInvoiceTrans;
        }

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsRebateCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>PdsRebateCustInvoiceTrans</c> table records for which the rebate is creating.
    /// </summary>
    /// <param name="_pdsRebateCustInvoiceTrans">
    /// The <c>PdsRebateCustInvoiceTrans</c> table record.
    /// </param>
    /// <returns>
    /// The rebate transaction related to a customer invoice transaction.
    /// </returns>
    protected PdsRebateCustInvoiceTrans parmPdsRebateCustInvoiceTrans(Common _pdsRebateCustInvoiceTrans = pdsRebateCustInvoiceTrans)
    {
        if (!prmisDefault(_pdsRebateCustInvoiceTrans))
        {
            pdsRebateCustInvoiceTrans = _pdsRebateCustInvoiceTrans;
        }

        return pdsRebateCustInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTransactionSums</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the amount and quantity totals for the rebate.
    /// </summary>
    protected void resetTransactionSums()
    {
        sumCWQty    = 0;
        sumQty      = 0;
        sumGrossAmt = 0;
        sumNetAmt   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the creation of reabtes for the customer invoice transactions.
    /// </summary>
    public void run()
    {
        CustInvoiceTrans            localCustInvoiceTrans;
        PdsRebateCustInvoiceTrans   localPdsRebateCustInvoiceTrans;

        if (this.validate() && this.isRebateInUse())
        {
            custTableOrderAccount = this.retrieveCustomer();
            if (this.parmCustInvoiceTrans())
            {
                localPdsRebateCustInvoiceTrans = custInvoiceTrans.pdsRebateCustInvoiceTrans();
                this.parmPdsRebateCustInvoiceTrans(localPdsRebateCustInvoiceTrans);
                if (localPdsRebateCustInvoiceTrans.SalesLinePdsExcludeFromRebate == NoYes::No)
                {
                    this.calculateCustomerInvoiceTransactionSums();
                    this.findPdsRebateAgreementAndCreateClaim();
                    this.tamFindBillBackAgreementAndCreateClaim();
                }
            }
            else
            {
                while select localCustInvoiceTrans
                    where localCustInvoiceTrans.SalesId             == custInvoiceJour.SalesId
                       && localCustInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
                       && localCustInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate
                       && localCustInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup
                    join localPdsRebateCustInvoiceTrans
                        where localPdsRebateCustInvoiceTrans.CustInvoiceTransRecId == localCustInvoiceTrans.Recid &&
                              localPdsRebateCustInvoiceTrans.SalesLinePdsExcludeFromRebate   == NoYes::No
                {
                    this.parmCustInvoiceTrans(localCustInvoiceTrans);
                    this.parmPdsRebateCustInvoiceTrans(localPdsRebateCustInvoiceTrans);
                    this.resetTransactionSums();
                    this.calculateCustomerInvoiceTransactionSums();
                    this.findPdsRebateAgreementAndCreateClaim();
                    this.tamFindBillBackAgreementAndCreateClaim();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves customer record.
    /// </summary>
    /// <returns>Customer record.</returns>
    protected CustTable retrieveCustomer()
    {
        return custInvoiceJour.custTable_OrderAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamFindBillBackAgreementAndCreateClaim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PdsRebateAgreement</c> table record to create the rebate for TAM Bill back rebates.
    /// </summary>
    protected void tamFindBillBackAgreementAndCreateClaim()
    {
        PdsRebateAgreement      pdsRebateAgreement;
        PdsRebateAgreementLine  rebateAgreementLine;
        TAMPromotionItem        tamPromotionItem;
        TAMPromotionCust        tamPromotionCust;
        TAMMerchandisingEvent   tamMerchEvent;
        PdsRebateTable          pdsRebateTable;
        InventQty               calcQty;
        UnitOfMeasureSymbol     calcUOM;
        InventDimId             blankInventDim = InventDim::findOrCreateBlank().InventDimId;
        InventDimId             tamPromotionItemInventDimId;
        InventDim               inventDim;
        InventDim               custInvoiceTransInventDim = custInvoiceTrans.inventDim();
        TAMTradePromotion       tamTradePromotion;
        boolean                 isCatchWeightItem = PdsGlobal::pdsIsCWItem(custInvoiceTrans.ItemId);
        CustTable               custTable   = custTableOrderAccount ? custTableOrderAccount : custInvoiceJour.custTable_OrderAccount();
        date                    dateMin = dateNull();
        date                    dateMax = maxDate();

        tmpRebateAgreementLine.setTmp();

        //Find all applicable Rebate Agreements.
        while select validTimeState(dateMin, dateMax) MerchandisingEventID, InventDimID from tamPromotionItem
            where tamPromotionItem.ItemID == custInvoiceTrans.ItemId
            join MerchandisingEventID, PromotionID from tamMerchEvent
            where tamMerchEvent.MerchandisingEventID == tamPromotionItem.MerchandisingEventID
                && tamMerchEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack
            join RecId from tamPromotionCust
            where tamPromotionCust.PromotionID == tamMerchEvent.PromotionID
                && tamPromotionCust.CustAccount == custTable.AccountNum
            join RecId from tamTradePromotion
                where tamTradePromotion.PromotionID == tamMerchEvent.PromotionID
                   && tamTradePromotion.Currency == custInvoiceTrans.CurrencyCode
                   && tamTradePromotion.PromotionStatus == TAMStatus::CustomerApproved
            join pdsRebateAgreement
                where pdsRebateAgreement.tamMerchandisingEventID == tamMerchEvent.MerchandisingEventID
                    && pdsRebateAgreement.Validated
                    && pdsRebateAgreement.Verifier
                    && pdsRebateAgreement.PdsRebateProgramType          == PdsRebateProgramType::BillBack
                    && (pdsRebateAgreement.PdsUnitType != PdsUnitType::CWUnit
                        || isCatchWeightItem) //Ensure that if the rebate specifies a CW unit, that the item is a CW item.
                    //Ensure Rebate Agreement is not out of date.
                    && ((pdsRebateAgreement.RebateCalcDateType == PdsRebateCalcDateType::RequestedReceiptDate
                            && (!tamTradePromotion.ShipmentStartDate || tamTradePromotion.ShipmentStartDate <= pdsRebateCustInvoiceTrans.SalesLineReceiptDateRequested)
                            && (!tamTradePromotion.ShipmentEndDate || tamTradePromotion.ShipmentEndDate >= pdsRebateCustInvoiceTrans.SalesLineReceiptDateRequested))
                        || (pdsRebateAgreement.RebateCalcDateType == PdsRebateCalcDateType::RequestedShipDate
                            && (!tamTradePromotion.RequestedShipmentStartDate || tamTradePromotion.RequestedShipmentStartDate <= pdsRebateCustInvoiceTrans.SalesLineShippingDateRequested)
                            && (!tamTradePromotion.RequestedShipmentEndDate || tamTradePromotion.RequestedShipmentEndDate >= pdsRebateCustInvoiceTrans.SalesLineShippingDateRequested))
                        || (pdsRebateAgreement.RebateCalcDateType == PdsRebateCalcDateType::CreatedDate
                            && (!pdsRebateAgreement.ValidFrom || pdsRebateAgreement.ValidFrom <= pdsRebateCustInvoiceTrans.SalesLineCreatedDate)
                            && (!pdsRebateAgreement.ValidTo || pdsRebateAgreement.ValidTo >= pdsRebateCustInvoiceTrans.SalesLineCreatedDate)))
                    && (pdsRebateAgreement.RebateUOMOption       == PdsRebateUOMOption::Convert
                        || (pdsRebateAgreement.PdsUnitType       == PdsUnitType::InventoryUnit
                            && pdsRebateAgreement.PdsRebateUnit  == custInvoiceTrans.SalesUnit)
                        || (pdsRebateAgreement.PdsUnitType       == PdsUnitType::CWUnit
                            && pdsRebateAgreement.PdsRebateUnit  == custInvoiceTrans.pdsCWUnitId()))
            #TAMRebateInventDimExistsJoin(tamPromotionItem.InventDimId, inventDim, custInvoiceTransInventDim)
            notExists join pdsRebateTable //Check for rebates already applied.
                where pdsRebateTable.CustInvoiceTransRefRecId == custInvoiceTrans.RecId
                    && pdsRebateTable.PdsRebateAgreementRefRecId == pdsRebateAgreement.RecId
        {
            
            calcQty = this.productQuantityForRebateContract(pdsRebateAgreement);
            calcUOM = this.unitForRebateContract(pdsRebateAgreement);

            if (!this.canConvertCurrencyAndUnits(pdsRebateAgreement))
            {
                continue;
            }

            RebateQuantityCheckRequirementContract contract = RebateQuantityCheckRequirementContract::constructWithVariables(sumGrossAmt,
                                                                                                                             calcQty,
                                                                                                                             calcUOM,
                                                                                                                             this.currency(),
                                                                                                                             custInvoiceTrans.ItemId,
                                                                                                                             custInvoiceTrans.InventDimId);

            boolean agreementHeaderRequirementsMet = pdsRebateAgreement.checkRebateRequirement(contract);

            if (this.mustCreateRebateAgreementForClaim(pdsRebateAgreement, custInvoiceTrans, agreementHeaderRequirementsMet))
            {
                tamPromotionItemInventDimId = tamPromotionItem.InventDimId;
                tmpRebateAgreementLine.skipDataMethods(true);
                insert_recordset tmpRebateAgreementLine (Currency, LineNum, RebateAgreementRefRecId, RebateAmtType,
                    RebateFromAmount, RebateFromQty, RebateToAmount, RebateUnit, RebateValue, InventDimId)
                select Currency, LineNum, RebateAgreementRefRecId, RebateAmtType,
                    RebateFromAmount, RebateFromQty, RebateToAmount, RebateUnit, RebateValue, tamPromotionItemInventDimID
                from rebateAgreementLine
                    where rebateAgreementLine.RebateAgreementRefRecId == pdsRebateAgreement.RecId;
                tmpRebateAgreementLine.skipDataMethods(false);

                this.createFromTmpAgreementLines(agreementHeaderRequirementsMet);
                delete_from tmpRebateAgreementLine;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateRebateAgreementForClaim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether rebate for TAM bill back rebates must be created.
    /// </summary>
    /// <param name = "_pdsRebateAgreement">The rebate agreement.</param>
    /// <param name = "_custInvoiceTrans">The customer invoice line.</param>
    /// <param name = "_agreementHeaderRequirementsMet">A <c>Boolean</c> value indicating whether rebate satisfies the rebate minimum requirements.</param>
    /// <returns>true if  rebate for TAM bill back rebates must be created; otherwise, false.</returns>
    protected boolean mustCreateRebateAgreementForClaim(PdsRebateAgreement _pdsRebateAgreement, CustInvoiceTrans _custInvoiceTrans, boolean _agreementHeaderRequirementsMet)
    {
        return _pdsRebateAgreement.PdsCumulateSalesBy != PdsCumulationPeriod::Invoice
            || _agreementHeaderRequirementsMet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productQuantityForRebateContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine product quantity for <c>RebateQuantityCheckRequirementContract</c>
    /// </summary>
    /// <param name = "_pdsRebateAgreement">The rebate agreement</param>
    /// <returns>Product quantity for <c>RebateQuantityCheckRequirementContract</c></returns>
    protected InventQty productQuantityForRebateContract(PdsRebateAgreement _pdsRebateAgreement)
    {
        if (_pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
        {
            return sumQty;
        }
        
        return sumCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitForRebateContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine unit for <c>RebateQuantityCheckRequirementContract</c>
    /// </summary>
    /// <param name = "_pdsRebateAgreement">The rebate agreement</param>
    /// <returns>The unit for <c>RebateQuantityCheckRequirementContract</c></returns>
    protected UnitOfMeasureSymbol unitForRebateContract(PdsRebateAgreement _pdsRebateAgreement)
    {
        if (_pdsRebateAgreement.PdsUnitType == PdsUnitType::InventoryUnit)
        {
            return custInvoiceTrans.SalesUnit;
        }
        
        return custInvoiceTrans.pdsCWUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>CustInVoiceJour</c> table record.
    /// </summary>
    /// <returns>
    /// true if the customer invoice journal is present; otherwise false.
    /// </returns>
    protected boolean validate()
    {
        boolean ret = true;

        if (!custInvoiceJour)
        {
            ret = checkFailed("@PRO44");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the class.
    /// </summary>
    /// <returns>
    /// A class instance.
    /// </returns>
    public static PdsRebateFindAndCreate construct()
    {
        return new PdsRebateFindAndCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createManualRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the manual rebates for the customer.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_pdsRebateProgramId">
    /// The Rebate type.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The parameters customer account and rebate type are missed.
    /// </exception>
    //AOSRunmode:Server
    public static void createManualRebates(
        CustAccount     _custAccount,
        PdsRebateType   _pdsRebateProgramId)
    {
        PdsRebateFindAndCreate  findAndCreate = PdsRebateFindAndCreate::construct();

        if (_custAccount && _pdsRebateProgramId)
        {
            findAndCreate.createRebate(null, true, _custAccount, _pdsRebateProgramId);
        }
        else
        {
            throw error("@PDS1428");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>PdsRebateFindAndCreate</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> table.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsRebateFindandCreate</c> class.
    /// </returns>
    public static PdsRebateFindAndCreate newFromCustInvoiceJour(
        CustInvoiceJour  _custInvoiceJour)
    {
        PdsRebateFindAndCreate  findAndCreate = PdsRebateFindAndCreate::construct();

        findAndCreate.parmCustInvoiceJour(_custInvoiceJour);

        return findAndCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>PdsRebateFindAndCreate</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> table.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> table.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsRebateFindandCreate</c> class.
    /// </returns>
    public static PdsRebateFindAndCreate newFromCustInvoiceTrans(
        CustInvoiceJour  _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans)
    {
        PdsRebateFindAndCreate  findAndCreate = PdsRebateFindAndCreate::construct();

        findAndCreate.parmCustInvoiceJour(_custInvoiceJour);
        findAndCreate.parmCustInvoiceTrans(_custInvoiceTrans);

        return findAndCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>