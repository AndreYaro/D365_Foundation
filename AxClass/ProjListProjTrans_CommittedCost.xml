<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjTrans_CommittedCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjListProjTrans_CommittedCost extends ProjListProjTrans

{
    DialogField                 dialogFixedPrice,
                                dialogTimeMaterial,
                                dialogInternalCost,
                                dialogInvestment,
                                dialogPurchRequisition,
                                dialogVendInvoice,
                                dialogPurchaseOrder,
                                dialogSalesOrder,
                                dialogItemRequirement,
                                dialogProduction,
                                dialogItemJournal,
                                dialogHour,
                                dialogExpenses,
                                dialogItem,
                                dialogShow,
                                dialogCommittedDateFrom,
                                dialogCommittedDateTo;

    boolean                     fixedPrice;
    boolean                     timeMaterial;
    boolean                     internalCost;
    boolean                     investment;

    boolean                     purchRequisition;
    boolean                     salesOrder;
    boolean                     purchaseOrder;
    boolean                     itemRequirement;
    boolean                     itemJournal;
    boolean                     production;
    boolean                     vendInvoice;
    ProjCommittedCostStatus     show;
    TransDate                   committedDateFrom;
    TransDate                   committedDateTo;

    #define.CurrentVersion(4)

    #localmacro.CurrentList
        fixedPrice,
        timeMaterial,
        internalCost,
        investment,
        purchRequisition,
        vendInvoice,
        salesOrder,
        purchaseOrder,
        itemRequirement,
        production,
        itemJournal,
        committedDateFrom,
        committedDateTo,
        show
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog(Object _dialog)
    {
        #define.one(1)

        DialogRunbase   dialog = _dialog;
        DialogGroup     dialogCommittedDate,
                        dialogDataGroup,
                        dialogMainGroup;

        if (! dontShowdialog)
        {
            dialogMainGroup = dialog.addGroup();
            dialogMainGroup.columns(2);
            dialogMainGroup.frameType(FormFrameType::None);

            dialog.addGroup("@SYS78367", dialogMainGroup);

            dialogTimeMaterial  = dialog.addFieldValue(extendedtypestr(ProjOptionTM),         timeMaterial, "@SYS53874", "@SYS78362");
            dialogFixedPrice    = dialog.addFieldValue(extendedtypestr(ProjOptionFixedPrice), fixedPrice,   "@SYS3237",  "@SYS78361");
            dialogInvestment    = dialog.addFieldValue(extendedtypestr(ProjOptionInvestment), investment,   "@SYS78353", "@SYS78364");
            dialogInternalCost  = dialog.addFieldValue(extendedtypestr(ProjOptionInternal),   internalCost, "@SYS78366", "@SYS78363");

            dialog.addGroup("@SYS105524", dialogMainGroup);

            dialogPurchRequisition  = dialog.addFieldValue(extendedtypestr(ProjOptionSales),      purchRequisition,  "@SYS114136","@SYS302172");
            dialogPurchaseOrder     = dialog.addFieldValue(extendedtypestr(ProjOptionSales),      purchaseOrder,     "@SYS15812", "@SYS105512");
            dialogItemRequirement   = dialog.addFieldValue(extendedtypestr(ProjOptionSales),      itemRequirement,   "@SYS84947", "@SYS105510");
            dialogProduction        = dialog.addFieldValue(extendedtypestr(ProjOptionProduction), production,        "@SYS10657", "@SYS105511");
            dialogSalesOrder        = dialog.addFieldValue(extendedtypestr(ProjOptionSales),      salesOrder,        "@SYS19627", "@SYS105509");
            dialogItemJournal       = dialog.addFieldValue(extendedtypestr(ProjOptionSales),      itemJournal,       "@SYS81925", "@SYS105513");
            dialogVendInvoice       = dialog.addFieldValue(extendedtypestr(ProjOptionSales),      vendInvoice,       "@SYS3179" , "@SYS322728");

            dialogCommittedDate = dialog.addGroup("@SYS12896");
            dialogCommittedDate.columns(#one);
            dialogCommittedDate.frameType(FormFrameType::None);

            dialog.addGroup("@SYS105525",dialogCommittedDate);
            dialogProjFromDate      = dialog.addFieldValue(extendedtypestr(TransDate),projFromDate,   "@SYS24050","@SYS90467");
            dialogProjToDate        = dialog.addFieldValue(extendedtypestr(TransDate),projToDate,     "@SYS80934","@SYS90468");

            dialogDataGroup         = dialog.addGroup("@SYS7403");
            dialogDataGroup.columns(#one);
            dialogShow              = dialog.addFieldValue(enumstr(ProjCommittedCostStatus),      show,       "@SYS105530", "@SYS105531");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;

        if (!dontShowdialog)
        {
            committedDateFrom    = dialogProjFromDate.value();
            committedDateTo      = dialogProjToDate.value();

            fixedPrice      = dialogFixedPrice.value();
            timeMaterial    = dialogTimeMaterial.value();
            internalCost    = dialogInternalCost.value();
            investment      = dialogInvestment.value();

            purchRequisition= dialogPurchRequisition.value();
            salesOrder      = dialogSalesOrder.value();
            purchaseOrder   = dialogPurchaseOrder.value();
            itemRequirement = dialogItemRequirement.value();
            itemJournal     = dialogItemJournal.value();
            production      = dialogProduction.value();
            vendInvoice     = dialogVendInvoice.value();
            show            = dialogShow.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowBlankId</Name>
				<Source><![CDATA[
    boolean mustShowBlankId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #currentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommittedDateFrom</Name>
				<Source><![CDATA[
    public TransDate parmCommittedDateFrom(TransDate _committedDateFrom = committedDateFrom)
    {
        committedDateFrom = _committedDateFrom;

        if (committedDateFrom)
        {
            return committedDateFrom;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommittedDateTo</Name>
				<Source><![CDATA[
    public TransDate parmCommittedDateTo(TransDate _committedDateTo = committedDateTo)
    {
        committedDateTo = _committedDateTo;

        if (committedDateTo)
        {
            return committedDateTo;
        }

        return dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPrice</Name>
				<Source><![CDATA[
    public boolean parmFixedPrice(boolean _fixedPrice = fixedPrice)
    {
        fixedPrice = _fixedPrice;

        return fixedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInternalCost</Name>
				<Source><![CDATA[
    public boolean parmInternalCost(boolean _internalCost = internalCost)
    {
        internalCost = _internalCost;

        return internalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvestment</Name>
				<Source><![CDATA[
    public boolean parmInvestment(boolean _investment = investment)
    {
        investment = _investment;

        return investment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemJournal</Name>
				<Source><![CDATA[
    public boolean parmItemJournal(boolean _itemJournal = itemJournal)
    {
        itemJournal = _itemJournal;

        return itemJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemRequirement</Name>
				<Source><![CDATA[
    public boolean parmItemRequirement(boolean _itemRequirement = itemRequirement)
    {
        itemRequirement = _itemRequirement;

        return itemRequirement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProduction</Name>
				<Source><![CDATA[
    public boolean parmProduction(boolean _production = production)
    {
        production = _production;

        return production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseOrder</Name>
				<Source><![CDATA[
    public boolean parmPurchaseOrder(boolean _purchaseOrder = purchaseOrder)
    {
        purchaseOrder = _purchaseOrder;

        return purchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRequisition</Name>
				<Source><![CDATA[
    public boolean parmPurchRequisition(boolean _purchRequisition = purchRequisition)
    {
        purchRequisition = _purchRequisition;

        return purchRequisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesOrder</Name>
				<Source><![CDATA[
    public boolean parmSalesOrder(boolean _salesOrder = salesOrder)
    {
        salesOrder = _salesOrder;

        return salesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShow</Name>
				<Source><![CDATA[
    public ProjCommittedCostStatus parmShow(ProjCommittedCostStatus _show = show)
    {
        show = _show;

        return show;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterial</Name>
				<Source><![CDATA[
    public boolean parmTimeMaterial(boolean _timeMaterial = timeMaterial)
    {
        timeMaterial = _timeMaterial;

        return timeMaterial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoice</Name>
				<Source><![CDATA[
    public boolean parmVendInvoice(boolean _vendInvoice = vendInvoice)
    {
        vendInvoice = _vendInvoice;

        return vendInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);
        container       conListProjTrans;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, conListProjTrans] = _packedClass;
                super(conListProjTrans);
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        boolean ret;

        ret = super();

        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
            !(fixedPrice || timeMaterial || internalCost || investment ))
        {
            // Project type not selected
            ret = checkFailed("@SYS91026");
        }

        if (!(purchRequisition || salesOrder || purchaseOrder || itemRequirement || itemJournal || production || vendInvoice))
        {
            // Commitment type not selected
            ret = checkFailed("@SYS105592");
        }

        if (committedDateFrom > committedDateTo && committedDateTo != dateNull())
        {
            // Invalid date interval
            ret = checkFailed("@SYS91020");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>