<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetTransactionLine_SalesOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjBudgetTransactionLine_SalesOrder</c> class is used to hold the budget transaction information associated with the sales order line.
/// </summary>
class ProjBudgetTransactionLine_SalesOrder extends ProjBudgetTransactionLine
{
    SalesLine       salesLine;
    AmountCur       costPrice;
    AmountCur       salesPrice;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project activity number of the transaction.
    /// </summary>
    /// <returns>
    /// The project activity number of the transaction.
    /// </returns>
    public ProjActivityNumber activityNumber()
    {
        return  salesLine.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSalesLine</Name>
				<Source><![CDATA[
    public SalesLine kittingSalesLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project category ID of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The project category ID of the project budget transaction line.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return salesLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the cost amount of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The total cost amount of the project budget transaction line.
    /// </returns>
    public CostAmount costAmount()
    {
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of the cost amount.
    /// </summary>
    /// <returns>
    ///    The currency code of the cost amount.
    /// </returns>
    public CurrencyCode costAmountCurrencyCode()
    {
        return Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project Line Property ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project Line Property ID of the transaction.
    /// </returns>
    public ProjLinePropertyId linePropertyId()
    {
        return salesLine.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ProjBudgetTransactionLine_SalesOrder</c> class from the instance
    ///    of the sales order line.
    /// </summary>
    /// <param name="_salesLine">
    ///    The <c>SalesLine</c> table buffer.
    /// </param>
    void new(SalesLine _salesLine)
    {
        super();
        salesLine  = _salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostAmount</Name>
				<Source><![CDATA[
    public CostAmount parmCostAmount(CostAmount _costAmount = costAmount)
    {
        costAmount = _costAmount;

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project ID of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The project ID of the project budget transaction line.
    /// </returns>
    public ProjId projId()
    {
        return salesLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sales amount of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The sales amount of the project budget transaction line.
    /// </returns>
    public SalesAmount salesAmount()
    {
        return salesLine.calcLineAmount(quantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of the sales amount.
    /// </summary>
    /// <returns>
    ///    The currency code of the sales amount.
    /// </returns>
    public CurrencyCode salesAmountCurrencyCode()
    {
        return salesLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction date of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The transaction date of the project budget transaction line.
    /// </returns>
    public TransDate transDate()
    {
        return (salesLine.CreatedDateTime) ? DateTimeUtil::date(salesLine.CreatedDateTime) : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction ID of the project budget transaction line.
    /// </summary>
    /// <returns>
    ///    The transaction ID of the project budget transaction line.
    /// </returns>
    public ProjTransIdBase transId()
    {
        return salesLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction type of project budget transaction line.
    /// </summary>
    /// <returns>
    ///    An <c>ItemType</c> enumeration value that represents the transaction type of project budget
    ///    transaction line.
    /// </returns>
    public ProjTransType transType()
    {
        return ProjTransType::Item;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>