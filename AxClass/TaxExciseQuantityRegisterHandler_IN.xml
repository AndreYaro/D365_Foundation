<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxExciseQuantityRegisterHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the excise quantity register handler class.
/// </summary>
public class TaxExciseQuantityRegisterHandler_IN extends TaxExciseRegisterHandler_IN
{
    TaxExciseQuantityRegister_IN        quantityRegister;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRegisterBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the register buffer
    /// </summary>
    /// <returns>
    /// The register buffer
    /// </returns>
    protected TaxExciseRegister_IN createRegisterBuffer()
    {
        TaxExciseRegister_IN ret;
        ExciseRG23AIRegister_IN exciseRG23AIRegister;
        ExciseRG23CIRegister_IN exciseRG23CIRegister;

        switch (taxModelExciseTaxable.getExciseRecordType())
        {
            case ExciseRecordType_IN::RG23A :
                ret = exciseRG23AIRegister;
                break;
            case ExciseRecordType_IN::RG23C :
                ret =  exciseRG23CIRegister;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExiseRegisterNumberSequenceReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the excise registration number sequence reference type.
    /// </summary>
    /// <returns>
    /// The excise registration number sequence reference type.
    /// </returns>
    protected ExciseReference_IN getExiseRegisterNumberSequenceReference()
    {
        ExciseReference_IN exciseReference;

        switch (taxModelExciseTaxable.getExciseRecordType())
        {
            case ExciseRecordType_IN::RG23A :
                exciseReference = ExciseReference_IN::RG23AI;
                break;
            case ExciseRecordType_IN::RG23C :
                exciseReference = ExciseReference_IN::RG23CI;
                break;
        }

        return exciseReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequencePosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence position.
    /// </summary>
    /// <returns>
    /// The position
    /// </returns>
    protected int getNumberSequencePosition()
    {
        #define.PartI(1)

        return #PartI;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the register
    /// </summary>
    public void init()
    {
        super();
        quantityRegister = register as Common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQty</Name>
				<Source><![CDATA[
/// <summary>
    /// Sets the quantity.
    /// </summary>
    protected void setQty()
    {
        Qty qty;
        VendInvoiceTrans vendInvoiceTrans;
        ExciseRecordType_IN         exciseRecordType;

        exciseRecordType    = taxModelExciseTaxable.getExciseRecordType();

        if (taxModelTaxable.getDocumentLineMainTableId() == tableNum(VendInvoiceTrans)
            && TaxParameters::find().VendorCalculationDateType_IN == VendorCalculationDateType_IN::DeliveryDate)
        {
            vendInvoiceTrans = SalesPurchJournalLine::findRecId(
                taxModelTaxable.getDocumentLineMainTableId(),
                taxModelTaxable.getDocumentLineMainTableRecId());
            qty = vendInvoiceTrans.QtyPhysical;
        }
        else
        {
            qty = taxModelTaxable.getQuantity();
        }

        if (taxModelExciseTaxable.isExciseProduction()
            && (exciseRecordType == ExciseRecordType_IN::RG23A
                || exciseRecordType == ExciseRecordType_IN::RG23C
                || taxModelExciseTaxable.isExicseDSA()))
        {
            quantityRegister.DSAQty = qty;
        }
        else
        {
        if (taxModelTaxable.getTransactionType() == TaxModelTransactionType::Return)
        {
            qty = - qty;
        }
        switch (taxModelTaxable.getTaxDirection())
        {
            case TaxDirection::IncomingTax :
                register.ReceiptQty = qty;
                break;
            case TaxDirection::OutgoingTax :
                register.IssueQty = qty;
                break;
        }
        }

        if (taxModelTaxable is TaxModelTaxableScrap_IN)
        {
            register.IsDestructiveQty = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRegisterBasicData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the basic data for the registration.
    /// </summary>
    protected void setRegisterBasicData()
    {
        super();
        quantityRegister.ExciseRecordType = taxModelExciseTaxable.getExciseRecordType();
        quantityRegister.Item = taxModelTaxable.getItemId();
        //ApplyExciseBalQty
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRegisterReferenceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference data.
    /// </summary>
    protected void setRegisterReferenceData()
    {
        SalesPurchJournalLine orignalTable;

        super();
        orignalTable = taxModelTaxable.getDocumentLineOriginalTable();
        quantityRegister.RefTableId = orignalTable.SourceTableId;
        quantityRegister.RefRecId   = orignalTable.SourceRecId;
        quantityRegister.PostedDocumentLineRecId = taxModelTaxable.getDocumentLineMainTableRecId();
        quantityRegister.PostedDocumentLineTableId = taxModelTaxable.getDocumentLineMainTableId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>