<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMVendRebateCorrectClaims</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMVendRebateCorrectClaims</c> class generates correction claims during the cumulate process.
/// </summary>
public class TAMVendRebateCorrectClaims
{
    date                        startOfCumulationPeriod;
    date                        endOfCumulationPeriod;
    Amount                      amountToDistribute;
    TAMVendRebateTable          tamVendRebateTableSum;
    TAMVendRebateTable          tamVendRebateTableInit;
    boolean                     isCWAgreement;
    TAMVendRebateAgreementLine  tamVendRebateAgreementLine;
    TAMVendRebateAgreement      tamVendRebateAgreement;
    Map                         vendInvTransExpectedRebate;
    Map                         vendInvTransRebateAlreadyGiven;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateExpectedValuePerClaim</Name>
				<Source><![CDATA[
    private Amount calculateExpectedValuePerClaim()
    {
        TAMVendRebateTable tamVendRebateTable;
        Amount             totalExpectedAmount = 0;
        Amount             claimExpectedAmount;
        Amount             rebateAlreadyGiven;

        // Loop over all claims which are not adjustment claims
        while select tamVendRebateTable
            where tamVendRebateTable.VendAccount                  == tamVendRebateTableInit.VendAccount
                && tamVendRebateTable.ItemId                      == tamVendRebateTableInit.ItemId
                && tamVendRebateTable.VendRebateAgreementRefRecId == tamVendRebateTableInit.VendRebateAgreementRefRecId
                && (tamVendRebateTable.RebateStatus               == TAMVendRebateStatus::ToCalculate
                    || tamVendRebateTable.RebateStatus            == TAMVendRebateStatus::Calculated
                    || tamVendRebateTable.RebateStatus            == TAMVendRebateStatus::Approved
                    || tamVendRebateTable.RebateStatus            == TAMVendRebateStatus::Processed)
                && tamVendRebateTable.RebateCalcDate              >= startOfCumulationPeriod
                && tamVendRebateTable.RebateCalcDate              <= endOfCumulationPeriod
                // Not adjustment claims
                && (tamVendRebateTable.PurchInvoicedQty || tamVendRebateTable.CWInventQty)
        {
            // find how much was supposed to be given
            claimExpectedAmount = this.claimExpectedAmount(tamVendRebateTable);

            // find how much was already given
            rebateAlreadyGiven = this.rebateAlreadyGiven(tamVendRebateTable);

            vendInvTransExpectedRebate.insert(tamVendRebateTable.vendInvoiceTransRefRecId, claimExpectedAmount);
            vendInvTransRebateAlreadyGiven.insert(tamVendRebateTable.vendInvoiceTransRefRecId, rebateAlreadyGiven);

            totalExpectedAmount += claimExpectedAmount - rebateAlreadyGiven;
        }

        return totalExpectedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>claimDifferenceAmount</Name>
				<Source><![CDATA[
    private Amount claimDifferenceAmount(TAMVendRebateTable _tamVendRebateTable, Amount _totalDifferenceAmount)
    {
        if (tamVendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity)
        {
            if (isCWAgreement)
            {
                return CurrencyExchangeHelper::amount(this.lineShareCWQtyBased(_tamVendRebateTable) * _totalDifferenceAmount, _tamVendRebateTable.CurrencyCode);
            }

            return CurrencyExchangeHelper::amount(this.lineShareQtyBased(_tamVendRebateTable) * _totalDifferenceAmount, _tamVendRebateTable.CurrencyCode);
        }

        return CurrencyExchangeHelper::amount(this.lineShareAmountBased(_tamVendRebateTable) * _totalDifferenceAmount, _tamVendRebateTable.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>claimExpectedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the expected amount for a claim.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// A <c>TAMVendRebateTable</c>
    /// </param>
    /// <returns>
    /// The expected amount.
    /// </returns>
    private Amount claimExpectedAmount(TAMVendRebateTable _tamVendRebateTable)
    {
        TAMRebateAmt rebateAmount;
        switch (tamVendRebateAgreementLine.RebateAmtType)
        {
            case TAMRebateAmtType::AmountPerUnit :
                rebateAmount = this.rebateAmountPerUnit(_tamVendRebateTable);
                break;

            case TAMRebateAmtType::FixedAmount:
                rebateAmount = _tamVendRebateTable.convertToNegativeRebate(tamVendRebateAgreementLine.RebateValue);
                break;

            case TAMRebateAmtType::Percentage:
                rebateAmount = _tamVendRebateTable.PurchAmount * tamVendRebateAgreementLine.RebateValue / 100;
                break;

            default:
                throw error("@PDS1430");
        }
        rebateAmount = CurrencyExchangeHelper::amount(rebateAmount, tamVendRebateAgreementLine.Currency);
        rebateAmount = CurrencyExchangeHelper::curAmount2CurAmount(rebateAmount, tamVendRebateAgreementLine.Currency, _tamVendRebateTable.CurrencyCode);

        return rebateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAmountPerUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the rebate amount when the rebate amount type is calculated per unit.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// A <c>TAMVendRebateTable</c> record.
    /// </param>
    /// <returns>
    /// The rebate amount.
    /// </returns>
    protected Amount rebateAmountPerUnit(TAMVendRebateTable _tamVendRebateTable)
    {
        Qty rebateQty = tamVendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit
                                                       ? _tamVendRebateTable.PurchInvoicedQty
                                                       : _tamVendRebateTable.CWInventQty;

        return rebateQty * tamVendRebateAgreementLine.RebateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctClaims</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Corrects the claims generated from invoice posting.
    /// </summary>
    public void correctClaims()
    {
        TAMVendRebateTable              tamVendRebateTable;
        TAMVendRebateTable              tamVendRebateTableCreated;
        Amount                          claimCorrectAmount;
        Amount                          claimCorrectAmountSum;
        Amount                          roundingDiff;
        Amount                          rebateAlreadyGiven;
        Amount                          rebateExpected;
        Amount                          totalDifferenceBetweenExpectedAndActual;
        Amount                          totalExpectedAmount;

        if (tamVendRebateTableSum.CWInventQty || tamVendRebateTableSum.PurchInvoicedQty)
        {
            if (amountToDistribute)
            {
                // Calculate expected value per claim and store
                totalExpectedAmount = this.calculateExpectedValuePerClaim();
                totalDifferenceBetweenExpectedAndActual = totalExpectedAmount - amountToDistribute;

                SysDaQueryObject	 qeTAMVendRebateTable = this.buildVendorRebateQuery(tamVendRebateTable);

                SysDaSearchObject	 soTAMVendRebateTable = new SysDaSearchObject(qeTAMVendRebateTable);
                SysDaSearchStatement ssTAMVendRebateTable = new SysDaSearchStatement();

                ttsBegin;
                // Loop over all claims which are not adjustment claims
                while (ssTAMVendRebateTable.nextRecord(soTAMVendRebateTable))
                {
                    rebateAlreadyGiven = vendInvTransRebateAlreadyGiven.lookup(tamVendRebateTable.vendInvoiceTransRefRecId);

                    rebateExpected = vendInvTransExpectedRebate.lookup(tamVendRebateTable.vendInvoiceTransRefRecId);

                    // the delta
                    claimCorrectAmount = rebateExpected - rebateAlreadyGiven;

                    // Adjustment because of upper threshold or if it is of type Fixed
                    if (totalDifferenceBetweenExpectedAndActual)
                    {
                        claimCorrectAmount -= this.claimDifferenceAmount(tamVendRebateTable, totalDifferenceBetweenExpectedAndActual);
                    }

                    if (claimCorrectAmount != 0)
                    {
                        claimCorrectAmountSum += claimCorrectAmount;
                        tamVendRebateTableCreated = this.createClaimCorrection(tamVendRebateTable, claimCorrectAmount, endOfCumulationPeriod);
                    }
                }

                roundingDiff = amountToDistribute - claimCorrectAmountSum;
                if (roundingDiff && tamVendRebateTableCreated)
                {
                    tamVendRebateTableCreated.StartingRebateAmt  += roundingDiff;
                    tamVendRebateTableCreated.CorrectedRebateAmt += roundingDiff;
                    tamVendRebateTableCreated.RebateBalance      += roundingDiff;
                    tamVendRebateTableCreated.doupdate();
                }
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildVendorRebateQuery</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Builds query object for <c>TAMVendRebateTable</c> record.
    /// </summary>
    /// <param name = "_tamVendRebateTable">
    ///		A <c>TAMVendRebateTable</c> record.
	/// </param>
    /// <returns>
    ///		A vendor rebate query object.
	/// </returns>
    protected SysDaQueryObject buildVendorRebateQuery(TAMVendRebateTable _tamVendRebateTable)
    {
        SysDaQueryObject qeTAMVendRebateTable = new SysDaQueryObject(_tamVendRebateTable);

        SysDaQueryExpression whereClause = this.buildWhereClauseForVendorRebateQuery(_tamVendRebateTable);
        qeTAMVendRebateTable.whereClause(whereClause);

        return qeTAMVendRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForVendorRebateQuery</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Builds where clause for <c>TAMVendRebateTable</c> record.
    /// </summary>
    /// <param name = "_tamVendRebateTable">
    ///		A <c>TAMVendRebateTable</c> record.
    /// </param>
    /// <returns>
    ///		A vendor rebate query expression.
	/// </returns>
    protected SysDaQueryExpression buildWhereClauseForVendorRebateQuery(TAMVendRebateTable _tamVendRebateTable)
    {
        SysDaQueryExpression tamVendRebateTableWhereClause =
                        (new SysDaEqualsExpression(new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, VendAccount)), new SysDaFieldExpression(tamVendRebateTableInit, fieldStr(TAMVendRebateTable, VendAccount)))
                    .and(new SysDaEqualsExpression(new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, ItemId)), new SysDaFieldExpression(tamVendRebateTableInit, fieldStr(TAMVendRebateTable, ItemId))))
                    .and(new SysDaEqualsExpression(new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, VendRebateAgreementRefRecId)), new SysDaFieldExpression(tamVendRebateTableInit, fieldStr(TAMVendRebateTable, VendRebateAgreementRefRecId))))
                    .and((new SysDaEqualsExpression(new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, RebateStatus)), new SysDaValueExpression(TAMVendRebateStatus::ToCalculate)))
                        .or(new SysDaEqualsExpression(new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, RebateStatus)), new SysDaValueExpression(TAMVendRebateStatus::Calculated)))
                        .or(new SysDaEqualsExpression(new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, RebateStatus)), new SysDaValueExpression(TAMVendRebateStatus::Approved)))
                        .or(new SysDaEqualsExpression(new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, RebateStatus)), new SysDaValueExpression(TAMVendRebateStatus::Processed))))
                    .and(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, RebateCalcDate)), new SysDaValueExpression(startOfCumulationPeriod)))
                    .and(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, RebateCalcDate)), new SysDaValueExpression(endOfCumulationPeriod)))
                    // Not adjustment claims
					.and((new SysDaNotEqualsExpression(new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, PurchInvoicedQty)), new SysDaValueExpression(0)))
                        .or(new SysDaNotEqualsExpression(new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, CWInventQty)), new SysDaValueExpression(0)))));

        return tamVendRebateTableWhereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createClaimCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a correction claim.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// The <c>TAMVendRebateTable</c> record to create the correction claim for.
    /// </param>
    /// <param name="_amountDiff">
    /// The correction amount
    /// </param>
    /// <param name="_endOfCumulationPeriod">
    /// The end date for the cumulation period.
    /// </param>
    /// <returns>
    /// The created correction claim.
    /// </returns>
    private tamVendRebateTable createClaimCorrection(
        TAMVendRebateTable      _tamVendRebateTable,
        Amount                  _amountDiff,
        TAMRebateCalcDate       _endOfCumulationPeriod)
    {
        TAMVendRebateTable      tamVendRebateTable;

        ttsbegin;
        tamVendRebateTable.initFromTAMVendRebateTable(_tamVendRebateTable);

        this.assignCorrectionAmount(tamVendRebateTable, _amountDiff);
        
        tamVendRebateTable.RebateStatus       = TAMVendRebateStatus::Calculated;
        tamVendRebateTable.RebateAmtType      = TAMRebateAmtType::FixedAmount;
        tamVendRebateTable.RebateCalcDate     = _endOfCumulationPeriod;
        tamVendRebateTable.doInsert();
        ttscommit;

        return tamVendRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCorrectionAmount</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Assigns the correction amount for the <c>TAMVendRebateTable</c> record.
    /// </summary>
    /// <param name = "_tamVendRebateTable">
    ///		The <c>TAMVendRebateTable</c> record to create the correction claim for.
	/// </param>
    /// <param name = "_amountDiff">
    ///		The correction amount.
	/// </param>
    protected void assignCorrectionAmount(TAMVendRebateTable _tamVendRebateTable, Amount _amountDiff)
    {
        if (this.mustAssignCorrectionAmount())
        {
			_tamVendRebateTable.StartingRebateAmt  = _amountDiff;
			_tamVendRebateTable.CorrectedRebateAmt = _amountDiff;
			_tamVendRebateTable.RebateBalance      = _amountDiff;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAssignCorrectionAmount</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Determines whether the correction amount must be assigned.
    /// </summary>
    /// <returns>
    ///		true, if the correction amount must be assigned; otherwise, false.
	/// </returns>
    protected boolean mustAssignCorrectionAmount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineShareAmountBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the claims share of all claims being corrected for amount based rebates.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// A <c>TAMVendRebateTable</c> record.
    /// </param>
    /// <returns>
    /// The claims share of all claims being corrected.
    /// </returns>
    private real lineShareAmountBased(TAMVendRebateTable  _tamVendRebateTable)
    {
        return tamVendRebateTableSum.PurchAmount ? _tamVendRebateTable.PurchAmount/tamVendRebateTableSum.PurchAmount : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineShareCWQtyBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the claims share of all claims being corrected for catch weight items for quantity based rebates.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// A <c>TAMVendRebateTable</c> record.
    /// </param>
    /// <returns>
    /// The claims share of all claims being corrected.
    /// </returns>
    private real lineShareCWQtyBased(TAMVendRebateTable  _tamVendRebateTable)
    {
        return tamVendRebateTableSum.CWInventQty ? _tamVendRebateTable.CWInventQty/tamVendRebateTableSum.CWInventQty : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineShareQtyBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the claims share of all claims being corrected for quantity based rebates.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// A <c>TAMVendRebateTable</c> record.
    /// </param>
    /// <returns>
    /// The claims share of all claims being corrected.
    /// </returns>
    private real lineShareQtyBased(TAMVendRebateTable  _tamVendRebateTable)
    {
        return tamVendRebateTableSum.PurchInvoicedQty ? _tamVendRebateTable.PurchInvoicedQty/tamVendRebateTableSum.PurchInvoicedQty : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        vendInvTransExpectedRebate      = new Map(Types::Int64, Types::Real);
        vendInvTransRebateAlreadyGiven  = new Map(Types::Int64, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountToDistribute</Name>
				<Source><![CDATA[
    public Amount parmAmountToDistribute(Amount _amountToDistribute = amountToDistribute)
    {
        amountToDistribute = _amountToDistribute;

        return amountToDistribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndOfCumulationPeriod</Name>
				<Source><![CDATA[
    public TransDate parmEndOfCumulationPeriod(TransDate _endOfCumulationPeriod = endOfCumulationPeriod)
    {
        endOfCumulationPeriod = _endOfCumulationPeriod;

        return endOfCumulationPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCWAgreement</Name>
				<Source><![CDATA[
    public boolean parmIsCWAgreement(boolean _isCWAgreement = isCWAgreement)
    {
        isCWAgreement = _isCWAgreement;

        return isCWAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartOfCumulationPeriod</Name>
				<Source><![CDATA[
    public TransDate parmStartOfCumulationPeriod(TransDate _startOfCumulationPeriod = startOfCumulationPeriod)
    {
        startOfCumulationPeriod = _startOfCumulationPeriod;

        return startOfCumulationPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMVendRebateAgreement</Name>
				<Source><![CDATA[
    public TAMVendRebateAgreement parmTAMVendRebateAgreement(TAMVendRebateAgreement _tamVendRebateAgreement = tamVendRebateAgreement)
    {
        tamVendRebateAgreement = _tamVendRebateAgreement;

        return tamVendRebateAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMVendRebateAgreementLine</Name>
				<Source><![CDATA[
    public TAMVendRebateAgreementLine parmTAMVendRebateAgreementLine(TAMVendRebateAgreementLine _tamVendRebateAgreementLine = tamVendRebateAgreementLine)
    {
        tamVendRebateAgreementLine = _tamVendRebateAgreementLine;

        return tamVendRebateAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendRebateTableInit</Name>
				<Source><![CDATA[
    public TAMVendRebateTable parmVendRebateTableInit(TAMVendRebateTable _tamVendRebateTableInit = tamVendRebateTableInit)
    {
        tamVendRebateTableInit = _tamVendRebateTableInit;

        return tamVendRebateTableInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendRebateTableSum</Name>
				<Source><![CDATA[
    public TAMVendRebateTable parmVendRebateTableSum(TAMVendRebateTable _tamVendRebateTableSum = tamVendRebateTableSum)
    {
        tamVendRebateTableSum = _tamVendRebateTableSum;

        return tamVendRebateTableSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAlreadyGiven</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Calculates the rebate amount which was already given.
    /// </summary>
    /// <param name = "_tamVendRebateTable">
    ///		A <c>TAMVendRebateTable</c> buffer.
	/// </param>
    /// <returns>
    ///		The rebate amount which was already given.
	/// </returns>
    protected Amount rebateAlreadyGiven(TAMVendRebateTable _tamVendRebateTable)
    {
        TAMVendRebateTable              tamVendRebateTable;
        Amount                          rebateAlreadyGiven;

        select sum(StartingRebateAmt) from tamVendRebateTable
            where tamVendRebateTable.VendRebateAgreementRefRecId == _tamVendRebateTable.VendRebateAgreementRefRecId
               && tamVendRebateTable.VendInvoiceTransRefRecId    == _tamVendRebateTable.VendInvoiceTransRefRecId;

        rebateAlreadyGiven = tamVendRebateTable.StartingRebateAmt;

        return rebateAlreadyGiven;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static TAMVendRebateCorrectClaims construct()
    {
        return new TAMVendRebateCorrectClaims();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromCumulate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>TAMVendRebateCorrectClaims</c> class.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// A <c>TAMVendRebateTable</c> buffer.
    /// </param>
    /// <param name="_tamVendRebateAgreement">
    /// A <c>TAMVendRebateAgreement</c> buffer.
    /// </param>
    /// <param name="_tamVendRebateAgreementLine">
    /// A <c>TAMVendRebateAgreementLine</c> buffer.
    /// </param>
    /// <param name="_startOfCumulationPeriod">
    /// The start date of the cumulation period to correct claims for.
    /// </param>
    /// <param name="_endOfCumulationPeriod">
    /// The end date of the cumulation period to correct claims for.
    /// </param>
    /// <param name="_amountToDistribute">
    /// The amount to correct the claims with.
    /// </param>
    /// <param name="_tamVendRebateTableSum">
    /// A <c>TAMVendRebateTable</c> buffer.
    /// </param>
    /// <returns>
    /// A new instance of the <c>TAMVendRebateCorrectClaims</c> class.
    /// </returns>
    public static TAMVendRebateCorrectClaims constructFromCumulate(
        TAMVendRebateTable          _tamVendRebateTable,
        TAMVendRebateAgreement      _tamVendRebateAgreement,
        TAMVendRebateAgreementLine  _tamVendRebateAgreementLine,
        date                        _startOfCumulationPeriod,
        date                        _endOfCumulationPeriod,
        Amount                      _amountToDistribute,
        TAMVendRebateTable          _tamVendRebateTableSum
        )
    {
        TAMVendRebateCorrectClaims  TAMVendRebateCorrectClaims = TAMVendRebateCorrectClaims::construct();

        TAMVendRebateCorrectClaims.parmVendRebateTableInit(_tamVendRebateTable);
        TAMVendRebateCorrectClaims.parmTAMVendRebateAgreementLine(_tamVendRebateAgreementLine);
        TAMVendRebateCorrectClaims.parmStartOfCumulationPeriod(_startOfCumulationPeriod);
        TAMVendRebateCorrectClaims.parmEndOfCumulationPeriod(_endOfCumulationPeriod);
        TAMVendRebateCorrectClaims.parmAmountToDistribute(_amountToDistribute);
        TAMVendRebateCorrectClaims.parmVendRebateTableSum(_tamVendRebateTableSum);
        TAMVendRebateCorrectClaims.parmTAMVendRebateAgreement(_tamVendRebateAgreement);
        TAMVendRebateCorrectClaims.parmIsCWAgreement(_tamVendRebateAgreement.UnitType == TAMRebateUnitType::CWUnit);

        return TAMVendRebateCorrectClaims;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>