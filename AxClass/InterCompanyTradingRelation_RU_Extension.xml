<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyTradingRelation_RU_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InterCompanyTradingRelation_RU_Extension</c> class is an extension class which extends the <c>InterCompanyTradingRelation</c> table.
/// </summary>
[ExtensionOf(tableStr(InterCompanyTradingRelation))]
public final class InterCompanyTradingRelation_RU_Extension
{
    #IsoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRelationBetweenRUCountries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if both companies belong to RU country-region context
    /// </summary>
    /// <param name = "_current">First company</param>
    /// <param name = "_counterpart">Second Company</param>
    /// <returns>True, if both companies belong to RU region</returns>
    internal static boolean isRelationBetweenRUCountries(DataAreaId _current, DataAreaId _counterpart)
    {
        return (_current
            && _counterpart
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], _current)
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], _counterpart));
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearGTDValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears GTD values for the trading partner relation
    /// </summary>
    /// <param name = "_interCompanyTradingPartner">Intercompany trading partener reference</param>
    /// <returns>True, if value was cleared for provided traing partner reference</returns>
    internal static boolean clearGTDValue(RecId _interCompanyTradingPartner)
    {
        boolean                                     valueCleared;

        if (_interCompanyTradingPartner)
        {
            InterCompanyEndpointActionPolicyTransfer    interCompanyEndpointActionPolicyTransferUpdate;
            InterCompanyEndpointActionPolicy            interCompanyEndpointActionPolicyJoin;

            update_recordset InterCompanyEndpointActionPolicyTransferUpdate
                setting InventGTDId_RU = NoYes::No
                where  InterCompanyEndpointActionPolicyTransferUpdate.InventGTDId_RU == NoYes::Yes
                exists join interCompanyEndpointActionPolicyJoin
                    where  interCompanyEndpointActionPolicyJoin.RecId == InterCompanyEndpointActionPolicyTransferUpdate.InterCompanyEndpointActionPolicy
                        && interCompanyEndpointActionPolicyJoin.InterCompanyTradingPartner == _interCompanyTradingPartner;

            valueCleared = InterCompanyEndpointActionPolicyTransferUpdate.RowCount() > 0;
        }

        return valueCleared;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Record update
    /// </summary>
    public void update()
    {
        next update();

        this.resetGTDSelection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetGTDSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update GTD values for current partner selection
    /// </summary>
    private void resetGTDSelection()
    {
        DataAreaId  custDataAreaId;
        DataAreaId  vendDataAreaId;

        if (this.InterCompanyTradingCustomer)
        {
            custDataAreaId = InterCompanyTradingPartner::find(this.InterCompanyTradingCustomer).CustomerDataAreaId;
        }

        if (this.InterCompanyTradingCustomer)
        {
            vendDataAreaId = InterCompanyTradingPartner::find(this.InterCompanyTradingVendor).VendorDataAreaId;
        }

        if (!InterCompanyTradingRelation::isRelationBetweenRUCountries(custDataAreaId, vendDataAreaId))
        {
            boolean refresh = InterCompanyTradingRelation::clearGTDValue(this.InterCompanyTradingCustomer);
            refresh = InterCompanyTradingRelation::clearGTDValue(this.InterCompanyTradingVendor) || refresh;
            if (refresh)
            {
                this.refreshGTDDataSource();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshGTDDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh form data sources
    /// </summary>
    private void refreshGTDDataSource()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            FormRun     form =  this.dataSource().formRun();

            if (form
                && (form.name() == formStr(InterCompanyTradingRelationSetupCustomer)
                || form.name() == formStr(InterCompanyTradingRelationSetupVendor)))
            {
                FormDataSource dataSourceCust;
                FormDataSource dataSourceVend;

                if (form.name() == formStr(InterCompanyTradingRelationSetupCustomer))
                {
                    dataSourceCust = form.dataSource(formDataSourceStr(InterCompanyTradingRelationSetupCustomer, InterCompanyActionPolicyTransferCustomer));
                    dataSourceVend = form.dataSource(formDataSourceStr(InterCompanyTradingRelationSetupCustomer, InterCompanyActionPolicyTransferVendorEx));
                }
                else if(form.name() == formStr(InterCompanyTradingRelationSetupVendor))
                {
                    dataSourceCust = form.dataSource(formDataSourceStr(InterCompanyTradingRelationSetupVendor, InterCompanyActionPolicyTransferCustomer));
                    dataSourceVend = form.dataSource(formDataSourceStr(InterCompanyTradingRelationSetupVendor, InterCompanyActionPolicyTransferVendorEx));
                }

                if (dataSourceCust)
                {
                    dataSourceCust.reread();
                    dataSourceCust.refresh();
                }
                
                if (dataSourceVend)
                {
                    dataSourceVend.reread();
                    dataSourceVend.refresh();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>