<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPostInvoice_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class extends the logic of invoice posting in order to support intent letters functionality.
/// </summary>
[ExtensionOf(classStr(CustPostInvoice))]
public final class CustPostInvoice_ApplicationSuite_Extension
{
    public boolean isUsualExporterInvoice_IT;
    public boolean isIntentLetterUsed_IT;
    public CustIntentLetter_IT custIntentLetter_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUsualExporterBeforePosting_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks usual exporter on tax group.
    /// </summary>
    /// <param name = "_taxGroup">The invoice line tax group to check.</param>
    /// <returns>true if tax group for usual exporter is properly used; false otherwise.</returns>
    protected boolean checkUsualExporterBeforePosting_IT(TaxGroup _taxGroup)
    {
        boolean ret = true;
        TaxGroup usExpExemptionTaxGroup = CustParameters::find().UsualExporterExemptionTaxGroup_IT;

        // If UsExpExemptionTaxGroup in CustParameters is not set up, skip this check and allow posting
        if (usExpExemptionTaxGroup && _taxGroup == usExpExemptionTaxGroup)
        {
            ret = false;

            if (isUsualExporterInvoice_IT && custIntentLetter_IT)
            {
                isIntentLetterUsed_IT = true;
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUsualExporter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the custIntentLetter variable.
    /// </summary>
    protected void initUsualExporter_IT()
    {
        isIntentLetterUsed_IT = false;
        isUsualExporterInvoice_IT = CustTable::find(custInvoiceTable.InvoiceAccount).UsualExporter_IT;

        if (isUsualExporterInvoice_IT)
        {
            custIntentLetter_IT = CustIntentLetter_IT::findInternalId(custInvoiceTable.IntentLetterId_IT);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInvoiceJourFromCustInvoiceTable</Name>
				<Source><![CDATA[
    protected void initCustInvoiceJourFromCustInvoiceTable(CustInvoiceJour _custInvoiceJour, CustInvoiceTable _custInvoiceTable, NoYes _creditNote)
    {
        next initCustInvoiceJourFromCustInvoiceTable( _custInvoiceJour, _custInvoiceTable, _creditNote);

        if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            this.initUsualExporter_IT();

            if (isUsualExporterInvoice_IT && custIntentLetter_IT)
            {
                _custInvoiceJour.IntentLetterInternalId_IT = custIntentLetter_IT.InternalLetterId;
                _custInvoiceJour.IntentLetterId_IT = custIntentLetter_IT.LetterId;
                _custInvoiceJour.IntentLetterFromDate_IT = custIntentLetter_IT.FromDate;
                _custInvoiceJour.IntentLetterToDate_IT = custIntentLetter_IT.ToDate;

                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00043, funcName());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    protected void createJournalLines(
        CustInvoiceJour _custInvoiceJour,
        LedgerVoucher _ledgerVoucher,
        boolean _creditNote)
    {
        if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            CustInvoiceTable custInvoiceTable = this.custInvoiceTable;
            CustInvoiceLine custInvoiceLineLocal;

            while select custInvoiceLineLocal
                group by TaxGroup
                where custInvoiceLineLocal.ParentRecId == custInvoiceTable.RecId
            {
                if (!this.checkUsualExporterBeforePosting_IT(custInvoiceLineLocal.TaxGroup))
                {
                    throw error(StrFmt("@ExtendedItallianLocalization:ExemptionTaxGroupCannotBeUsed", custInvoiceLineLocal.TaxGroup));
                }
            }
        }

        next createJournalLines(
            _custInvoiceJour,
            _ledgerVoucher,
            _creditNote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePostCustInvoice</Name>
				<Source><![CDATA[
    protected void prePostCustInvoice()
    {
        next prePostCustInvoice();

        if (FeatureStateProvider::isFeatureEnabled(SplitPaymentMandatoryRuleFeature_PL::instance()))
        {
            SplitPaymentMandatoryRuleEngine::analyseAndUpdateSplitPaymMode(this.custInvoiceTable, true);
        }

        if (FeatureStateProvider::isFeatureEnabled(ChronologicalNumberingFeature::instance()))
        {
            ChronologicalNumberSequenceGroupEngine::applyChronologicalNumberSequenceGroup(custInvoiceTable, custInvoiceTable.InvoiceDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeaderDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// A delegate that is called in the <c>createJournalHeader</c> method.
    /// </summary>
    /// <param name = "_custInvoiceJour">The <c>CustInvoiceJour</c> record.</param>
    [SubscribesTo(classStr(CustPostInvoice), delegateStr(CustPostInvoice, createJournalHeaderDelegate))]
    public static void createJournalHeaderDelegateHandler(CustInvoiceJour _custInvoiceJour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCustInvoice</Name>
				<Source><![CDATA[
    protected void postCustInvoice(CustInvoiceJour _custInvoiceJour, LedgerVoucher _ledgerVoucher, boolean _creditNote, NumberSeq _numberSeq)
    {
        next postCustInvoice(_custInvoiceJour, _ledgerVoucher, _creditNote, _numberSeq);

        if (FeatureStateProvider::isFeatureEnabled(EInvoice_IN_Feature::instance()))
        {
            OnlineInvoicingHelper_IN::createEInvoice(_custInvoiceJour);
            OnlineInvoicingHelper_IN::validateEInvoice(_custInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(AmountCur _invoiceAmount, boolean _creditNote)
    {
        boolean ok = next validate(_invoiceAmount, _creditNote);

        if (ok
            && FeatureStateProvider::isFeatureEnabled(BaseDocumentTrackingImprovementsFeature_IT::instance())
            && custInvoiceTable.custTable_InvoiceAccount().IsPublicSector_IT == NoYes::Yes)
        {
            BaseDocument_IT baseDocument = BaseDocument_IT::findByTable(custInvoiceTable);

            if (baseDocument.documentType == DocumentType_IT::None
                || !baseDocument.CIPEcode
                || !baseDocument.TenderCode)
            {
                ok = checkFailed(strFmt("@BaseDocument_IT:PublicSectorBaseDocumentValidationError",
                    custInvoiceTable.InvoiceAccount,
                    "@SYS98630"));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeaderPreInsert</Name>
				<Source><![CDATA[
    protected void createJournalHeaderPreInsert(CustInvoiceJour _custInvoiceJour)
    {
        next createJournalHeaderPreInsert(_custInvoiceJour);

        if (FeatureStateProvider::isFeatureEnabled(TaxInvoiceSerialNumberGenerateIndonesiaFeature::instance())
            && TaxInvoiceSerialNumberGenerator_ID::shouldGetNumber(custInvoiceTable, false))
        {
            _custInvoiceJour.TaxInvoiceSalesId = TaxInvoiceSerialNumberGenerator_ID::getNumber(
                custInvoiceTable,
                custInvoiceTable.TaxInvoiceTransactionCode_ID);
        }

        if (isFinTagConfigurationSetForCurrent
            && AccountsReceivableFinTagFlight::instance().isEnabled())
        {
            _custInvoiceJour.FinTag = custInvoiceTable.FinTag;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>