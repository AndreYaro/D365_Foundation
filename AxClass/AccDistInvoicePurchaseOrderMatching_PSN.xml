<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistInvoicePurchaseOrderMatching_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AccDistInvoicePurchaseOrderMatching_PSN</c> class contains methods that determine invalid segments for the <c>AccDistInvoicePurchaseOrderMatchingFeature_PSN</c>.
/// </summary>
internal final class AccDistInvoicePurchaseOrderMatching_PSN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findInvalidAttributeValuesForPurchFixedDimensionFeature</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static DimensionStorageSegmentCollection findInvalidAttributeValuesForPurchFixedDimensionFeature(
        LedgerDimensionAccount _ledgerDimensionOriginal,
        LedgerDimensionAccount _ledgerDimensionChanged)
    {          
        DimensionStorageSegmentCollection dimensionStorageSegmentCollectionFromDerived = AccDistInvoicePurchaseOrderMatching_PSN::determineSegmentsFromDerived(_ledgerDimensionChanged);
        DimensionStorageSegmentCollection dimensionStorageSegmentsInvalid = AccDistInvoicePurchaseOrderMatching_PSN::findInvalidStorageSegmentsForPurchFixedDimensionFeature(
            dimensionStorageSegmentCollectionFromDerived,
            _ledgerDimensionOriginal,
            _ledgerDimensionChanged);

        return dimensionStorageSegmentsInvalid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionStorageSegmentInCollection</Name>
				<Source><![CDATA[
    private static boolean findDimensionStorageSegmentInCollection(
        DimensionStorageSegmentCollection _dimensionSegmentStorageCollection,
        DimensionStorageSegment _dimensionStorageSegment)
    {
        boolean foundDimensionStorageSegment;

        if (_dimensionSegmentStorageCollection)
        {
            for (Level dimensionHierarchyLevel = 1; dimensionHierarchyLevel <= _dimensionSegmentStorageCollection.elements(); dimensionHierarchyLevel++)
            {
                DimensionStorageSegment dimensionStorageSegment = _dimensionSegmentStorageCollection.getSegment(dimensionHierarchyLevel);

                if (dimensionStorageSegment.parmDimensionAttributeId() == _dimensionStorageSegment.parmDimensionAttributeId()
                    && dimensionStorageSegment.parmDimensionAttributeValueId() == _dimensionStorageSegment.parmDimensionAttributeValueId())
                {
                    foundDimensionStorageSegment = true;
                    break;
                }
            }
        }

        return foundDimensionStorageSegment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionStorageSegmentByAttribute</Name>
				<Source><![CDATA[
    private static DimensionStorageSegment findDimensionStorageSegmentByAttribute(
        DimensionStorage _dimensionStorage,
        DimensionAttributeRecId _dimensionAttribute)
    {
        DimensionStorageSegment dimensionStorageSegmentFound;
        if (_dimensionStorage)
        {
            for (Level dimensionHierarchyLevel = 1; dimensionHierarchyLevel <= _dimensionStorage.segmentCount(); dimensionHierarchyLevel++)
            {
                DimensionStorageSegment dimensionStorageSegment = _dimensionStorage.getSegment(dimensionHierarchyLevel);

                if (dimensionStorageSegment.parmDimensionAttributeId() == _dimensionAttribute)
                {
                    dimensionStorageSegmentFound = dimensionStorageSegment;
                    break;
                }
            }
        }

        return dimensionStorageSegmentFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvalidStorageSegmentsForPurchFixedDimensionFeature</Name>
				<Source><![CDATA[
    private static DimensionStorageSegmentCollection findInvalidStorageSegmentsForPurchFixedDimensionFeature(
        DimensionStorageSegmentCollection _derivedDimension,
        LedgerDimensionAccount _ledgerDimensionOriginal,
        LedgerDimensionAccount _ledgerDimensionChanged)
    {
        DimensionStorage dimensionStorageOriginal = DimensionStorage::findById(_ledgerDimensionOriginal);
        DimensionStorage dimensionStorageChanged = DimensionStorage::findById(_ledgerDimensionChanged);
        Set checkedDimensionAttribute = new Set(Types::Int64);
        
        DimensionStorageSegmentCollection changedSegments;

        for (int collectionIndex = 1; collectionIndex <= dimensionStorageOriginal.segmentCount(); collectionIndex++)
        {
            DimensionStorageSegment dimensionStorageSegmentOriginal = dimensionStorageOriginal.getSegment(collectionIndex);
            DimensionStorageSegment dimensionStorageSegmentChanged = dimensionStorageChanged.getSegment(collectionIndex);
            
            if (dimensionStorageSegmentOriginal.parmDimensionAttributeValueId() != dimensionStorageSegmentChanged.parmDimensionAttributeValueId())
            {
                DimensionAttribute dimensionAttribute;
                DimensionAttributeInvoicePurchaseOrderMatching_PSN dimensionAttributeMatching;
                
                if (dimensionStorageSegmentOriginal.parmDimensionAttributeId())
                {
                    dimensionAttribute = DimensionAttribute::find(dimensionStorageSegmentOriginal.parmDimensionAttributeId());
                }
                else if (dimensionStorageSegmentChanged.parmDimensionAttributeId())
                {
                    dimensionAttribute = DimensionAttribute::find(dimensionStorageSegmentChanged.parmDimensionAttributeId());
                }

                select firstonly IsMatchingRequired from dimensionAttributeMatching where dimensionAttributeMatching.DimensionAttribute == dimensionAttribute.RecId;

                if (dimensionAttribute.RecId
                    && dimensionAttributeMatching.IsMatchingRequired
                    && !checkedDimensionAttribute.in(dimensionAttribute.RecId))
                {
                    dimensionStorageSegmentChanged.parmDimensionAttributeId(dimensionAttribute.RecId);
                    
                    if (!AccDistInvoicePurchaseOrderMatching_PSN::findDimensionStorageSegmentInCollection(
                        _derivedDimension,
                        dimensionStorageSegmentChanged))
                    {
                        if (!changedSegments)
                        {
                            changedSegments = DimensionStorageSegmentCollection::construct();
                        }
                    
                        changedSegments.addSegment(changedSegments.elements()+1, dimensionStorageSegmentChanged);
                    }
                }
                checkedDimensionAttribute.add(dimensionAttribute.RecId);
            }
        }
        
        return changedSegments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSegmentsFromDerived</Name>
				<Source><![CDATA[
    private static DimensionStorageSegmentCollection determineSegmentsFromDerived(LedgerDimensionAccount _ledgerDimension)
    {
        DimensionStorageSegmentCollection derivedSegments = DimensionStorageSegmentCollection::construct();;
        DimensionStorage dimensionStorage = DimensionStorage::findById(_ledgerDimension);
        Set checkedValueSet = new Set(Types::Int64);

        if (dimensionStorage)
        {
            for (Level segmentLevel = 1; segmentLevel <= dimensionStorage.segmentCount(); segmentLevel++)
            {
                DimensionStorageSegment dimensionStorageSegment = dimensionStorage.getSegment(segmentLevel);

                DimensionAttributeValueDerivedDimensions derivedDimensionValue;
                select firstonly derivedDimensionValue
                where derivedDimensionValue.DimensionAttribute == dimensionStorageSegment.parmDimensionAttributeId()
                        && derivedDimensionValue.DimensionAttributeValue == dimensionStorageSegment.parmDimensionAttributeValueId();
         

                if (derivedDimensionValue.RecId && !checkedValueSet.in(derivedDimensionValue.RecId))
                {
                    AccDistInvoicePurchaseOrderMatching_PSN::fillDerivedSegmentsCollection(derivedSegments, derivedDimensionValue, dimensionStorage);
                }
                checkedValueSet.add(derivedDimensionValue.RecId);
            }
        }

        return derivedSegments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDerivedSegmentsCollection</Name>
				<Source><![CDATA[
    private static void fillDerivedSegmentsCollection(DimensionStorageSegmentCollection _derivedSegments, DimensionAttributeValueDerivedDimensions _derivedDimensionValue, DimensionStorage _dimensionStorage)
    {
        const int MaxDerivedAttributeValue = 10;

        DimensionAttributeDerivedDimensions derivedDimension;
        DimensionHierarchy dimensionHierarchy;
        DimensionHierarchyLevel dimensionHierarchyLevel;
                
        select derivedDimension
                    join dimensionHierarchyLevel
                        where  dimensionHierarchyLevel.DimensionAttribute == _derivedDimensionValue.DimensionAttribute
                        && dimensionHierarchyLevel.RecId == derivedDimension.DimensionHierarchyLevel
                    join dimensionHierarchy
                        where dimensionHierarchy.StructureType == DimensionHierarchyType::DerivedDimension
                        && dimensionHierarchy.RecId == dimensionHierarchyLevel.DimensionHierarchy;
                 
        for (int i = 1; i <= MaxDerivedAttributeValue; i++)
        {
            FieldId derivedDimensionAttributeValueFieldId = AccDistInvoicePurchaseOrderMatching_PSN::getDimensionAttributeValueFieldIdByNumber(i);
                    
            select derivedDimension
                        where derivedDimension.DerivedDimensionFieldNum == derivedDimensionAttributeValueFieldId
                        join dimensionHierarchyLevel
                            where dimensionHierarchyLevel.RecId == derivedDimension.DimensionHierarchyLevel
                            && dimensionHierarchyLevel.DimensionHierarchy == dimensionHierarchy.RecId;
            if (derivedDimension)
            {
                DimensionStorageSegment dimensionStorageSegmentDerived = AccDistInvoicePurchaseOrderMatching_PSN::findDimensionStorageSegmentByAttribute(
                    _dimensionStorage,
                    dimensionHierarchyLevel.DimensionAttribute);

                if (!dimensionStorageSegmentDerived
                    && (_derivedDimensionValue.(derivedDimensionAttributeValueFieldId) == 0))
                {
                    DimensionStorageSegment dimensionStorageSegmentNew = DimensionStorageSegment::emptySegment();
                    dimensionStorageSegmentNew.parmDimensionAttributeId(dimensionHierarchyLevel.DimensionAttribute);

                    _derivedSegments.addSegment(_derivedSegments.elements()+1, dimensionStorageSegmentNew);
                }
                else if (dimensionStorageSegmentDerived
                    && _derivedDimensionValue.(derivedDimensionAttributeValueFieldId) == dimensionStorageSegmentDerived.parmDimensionAttributeValueId())
                {
                    _derivedSegments.addSegment(_derivedSegments.elements()+1, dimensionStorageSegmentDerived);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDerivedAttributeValueFieldNameFromNumber</Name>
				<Source><![CDATA[
    private static DimensionDisplayValue getDerivedAttributeValueFieldNameFromNumber(int _number)
    {
        FieldName nameBase = 'DerivedDimensionAttributeValue';

        return strFmt('%1%2', nameBase, _number);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeValueFieldIdByNumber</Name>
				<Source><![CDATA[
    private static FieldId getDimensionAttributeValueFieldIdByNumber(int _fieldNumber)
    {
        return new SysDictTable(tableNum(DimensionAttributeValueDerivedDimensions)).fieldName2Id(AccDistInvoicePurchaseOrderMatching_PSN::getDerivedAttributeValueFieldNameFromNumber(_fieldNumber));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>