<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRMarginAlert_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRMarginAlert_Purch</c> is a representation of purchase specific margin alert.
/// </summary>
public class MCRMarginAlert_Purch extends MCRMarginAlert
{
    PurchLine purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    protected Qty parmInventQty()
    {
        return purchLine.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleInventPurchSales</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales parmModuleInventPurchSales()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnDisc</Name>
				<Source><![CDATA[
    protected DiscAmount parmMultiLnDisc()
    {
        return PurchLine.MultiLnDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnPercent</Name>
				<Source><![CDATA[
    protected DiscPct parmMultiLnPercent()
    {
        return PurchLine.MultiLnPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPDSCWQty</Name>
				<Source><![CDATA[
    protected Qty parmPDSCWQty()
    {
        return purchLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
    public PurchLine parmPurchLine(PurchLine _purchLine = purchLine)
    {
        purchLine = _purchLine;

        // Initialize the map of parent.
        this.parmMCRMarginAlertMap(purchLine);

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductBroker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value to indicate whether to deduct a broker.
    /// </summary>
    /// <returns>
    /// false, telling not to deduct a broker.
    /// </returns>
    protected boolean shouldDeductBroker()
    {
        // Without a specific customer to use to find valid brokerages, there
        // is no way to narrow the search and possibly too many rebates would be found.
        // This would cause an inaccurate rebate amount for margin calculation.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductCustRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value to indicate whether to deduct a customer rebate.
    /// </summary>
    /// <returns>
    /// false, telling not to deduct a customer rebate.
    /// </returns>
    protected boolean shouldDeductCustRebate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductRoyalty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value to indicate whether to deduct a royalty.
    /// </summary>
    /// <returns>
    /// false, telling not to deduct a royalty.
    /// </returns>
    protected boolean shouldDeductRoyalty()
    {
        // Without a specific customer to use to find valid customer royalty, there
        // is no way to narrow the search and possibly too many rebates would be found.
        // This would cause an inaccurate rebate amount for margin calculation.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductVendorRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value to indicate whether to deduct a vendor rebate.
    /// </summary>
    /// <returns>
    /// true, meaning that a vendor rebate should be deducted; otherwise, false.
    /// </returns>
    protected boolean shouldDeductVendorRebate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useEstimatedSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value to indicate whether to use an estimated sales price.
    /// </summary>
    /// <returns>
    /// true, telling that an estimated sales price should be used.
    /// </returns>
    protected boolean useEstimatedSalesPrice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePurchPriceForMarginCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value to indicate whether to use a purchase price for margin calculation.
    /// </summary>
    /// <returns>
    /// true, telling that a purchase price for margin calculation should be used.
    /// </returns>
    protected boolean usePurchPriceForMarginCalc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRMarginAlert_Purch construct()
    {
        return new MCRMarginAlert_Purch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>MCRMarginAlert_Purch</c> object from a <c>PurchLine</c> record.
    /// </summary>
    /// <param name="_purchLine">
    /// The record to use to create the margin alert object.
    /// </param>
    /// <returns>
    /// An initialized margin alert object.
    /// </returns>
    public static MCRMarginAlert_Purch newPurchLine(PurchLine _purchLine)
    {
        MCRMarginAlert_Purch mcrMarginAlert_Purch;

        mcrMarginAlert_Purch  = MCRMarginAlert_Purch::construct();
        mcrMarginAlert_Purch.parmPurchLine(_purchLine);
        return mcrMarginAlert_Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAmountExclTax</Name>
				<Source><![CDATA[
    protected LineAmount parmLineAmountExclTax()
    {
        return purchLine.calcLineAmountExclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrossAmountExclTax</Name>
				<Source><![CDATA[
    protected LineAmount parmGrossAmountExclTax()
    {
        return purchLine.calcGrossAmountExclTax();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>