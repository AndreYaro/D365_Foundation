<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgCalculateDate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgCalculateDate</c> class calculates the registrations for a whole day for workers that
///    belong to a specified calculation group.
/// </summary>
public class JmgCalculateDate extends RunBaseBatch implements BatchRetryable
{
    JmgGroupCalcId      jmgGroupCalcId;
    JmgGroupApproveId   jmgGroupApproveId;
    boolean             simulation;
    date                profileDate;
    Args                args; // packed inside pack/unpack methods
    NoYes               submitToWorkflow;

    DialogField         dfJmgGroupCalcId;
    DialogField         dfJmgGroupApproveId;
    DialogField         dfSubmitToWorkflow;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        profileDate,
        simulation,
        submitToWorkflow,
        jmgGroupCalcId,
        jmgGroupApproveId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cangobatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean cangobatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog ret;

        ret = super();

        dfJmgGroupCalcId    = ret.addField(extendedtypestr(JmgGroupCalcId));
        dfJmgGroupApproveId = ret.addField(extendedtypestr(JmgGroupApproveId));
        dfSubmitToWorkflow  = ret.addField(enumstr(NoYes), "@SYS325391", "@SYS325392");

        dfJmgGroupCalcId.value(jmgGroupCalcId);
        dfJmgGroupApproveId.value(jmgGroupApproveId);
        dfSubmitToWorkflow.value(submitToWorkflow);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates values entered by the user.
    /// </summary>
    /// <returns>
    ///    true if all values was validated correctly; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        jmgGroupCalcId      = dfJmgGroupCalcId.value();
        jmgGroupApproveId   = dfJmgGroupApproveId.value();
        submitToWorkflow    = dfSubmitToWorkflow.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, the <c>initParmDefault</c>
    ///    method will be called.This method should not typically be overridden.
    /// </remarks>
    void getLast()
    {
        JmgDate tmpDate = profileDate;
        JmgGroupApproveId tmpApproveId = jmgGroupApproveId;

        super();

        if (tmpDate)
            profileDate = tmpDate;
        if (tmpApproveId)
            jmgGroupApproveId = tmpApproveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProfileDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the profile date for which calculation is run.
    /// </summary>
    /// <returns>
    /// The profile date for which calculation is run.
    /// </returns>
    date getProfileDate()
    {
        return profileDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (args)
        {
            return [#CurrentVersion,#CurrentList,args.pack()];
        }
        else
        {
            return [#CurrentVersion,#CurrentList];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        JmgStampJournalTable    jmgStampJournalTable;
        Counter                 cnt;
        Counter                 errors;
        Counter                 calculated;
        StartDate               simEndDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        JmgSeconds              simEndTime      = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
        ProdTable               prodTable;
        ProdTable               prodTableCur;

        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         profileDateRange;
        QueryRun                queryRun;
        JmgDaysTotalWorkflow    jmgDaysTotalWorkflow;

        #AviFiles

        using(var activityContext = JmgInstrumentationLogger::createLogger(classStr(JmgCalculateDate)).calcApprove().calculateAll())
        {
            if (simulation)
            {
                this.runSimulate();

                if (args && args.dataset() == tablenum(ProdTable))
                {
                    prodTable       = args.record();
                    prodTableCur    = ProdTable::find(prodTable.ProdId);
                    FormDataUtil::getFormDataSource(prodTable).research();
                    FormDataUtil::getFormDataSource(prodTable).findRecord(prodTableCur);
                }
                return;
            }

            if(this.isInBatch())
            {
                // Calculate all for the current day
                this.setProfileDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
            }

            try
            {
                JmgStampJournalTable::makeLines(profileDate, jmgGroupCalcId, jmgGroupApproveId);          

                this.progressInit(JmgCalculateDate::description(), any2int(this.numberOfStampJournalTableRecordsToProcess()), #AviUpdate);
                ttsbegin;

                query = new Query();
                queryBuildDataSource = query.addDataSource(tablenum(JmgStampJournalTable));
                queryBuildDataSource.update(true);
                queryBuildDataSource.addRange(fieldnum(JmgStampJournalTable, Calculated)).value(queryValue(NoYes::No));
                if (jmgGroupCalcId)
                {
                    queryBuildDataSource.addRange(fieldnum(JmgStampJournalTable, CalculateGroupId)).value(queryValue(jmgGroupCalcId));
                }
                else if (jmgGroupApproveId)
                {
                    queryBuildDataSource.addRange(fieldnum(JmgStampJournalTable, ApproveGroupId)).value(queryValue(jmgGroupApproveId));
                }

                profileDateRange = queryBuildDataSource.addRange(fieldnum(JmgStampJournalTable, ProfileDate));
                if (profileDate)
                {
                    profileDateRange.value(queryValue(profileDate));
                }
                else
                {
                    profileDateRange.value(queryValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
                }

                queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    jmgStampJournalTable = queryRun.get(tablenum(JmgStampJournalTable));

                    progress.setText(HcmWorker::worker2Name(jmgStampJournalTable.Worker));
                    JmgStampJournalCalculate::newFromJournalTable(jmgStampJournalTable).run(simulation, simEndDate, simEndTime);

                    // Submit to workflow if no workflow has previous been submitted and an active workflow
                    // configuration exists
                    if (submitToWorkflow
                    && !Workflow::findTrackingStatusForCurrentUser(jmgStampJournalTable)
                    && Workflow::findWorkflowConfigurationToActivate(jmgStampJournalTable))
                    {
                        jmgDaysTotalWorkflow = JmgDaysTotalWorkflow::construct();
                        jmgDaysTotalWorkflow.parmJmgStampJournalTable(jmgStampJournalTable);
                        jmgDaysTotalWorkflow.parmMenuItemName(menuitemactionstr(JmgDaysTotalSubmitWorkflow));
                        jmgDaysTotalWorkflow.parmWorkflowComment("@SYS325393");
                        jmgDaysTotalWorkflow.submit();
                        jmgStampJournalTable.update();
                    }
                    if (jmgStampJournalTable.Calculated == NoYes::Yes)
                    {
                        calculated++;
                    }
                    else
                    {
                        errors++;
                    }

                    cnt++;
                    progress.setCount(cnt);
                }

                ttscommit;

                info(strfmt("@SYS38975",calculated));
                info(strfmt("@SYS38976",errors));
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfStampJournalTableRecordsToProcess</Name>
				<Source><![CDATA[
    private int numberOfStampJournalTableRecordsToProcess()
    {
        return (select count(RecId) from jmgStampJournalTable
            where jmgStampJournalTable.ProfileDate == profileDate).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSimulate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs calculation in simulated mode.
    /// </summary>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    The number of retries on update conflicts has been exceeded.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    The update conflict occurs if the <c>ttslevel</c> value is greater than zero.
    /// </exception>
    void runSimulate()
    {
        #OCCRetryCount
        JmgStampJournalTable    jmgStampJournalTable;
        JmgStampJournalTrans    clockInStampJournalTrans;
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgEmployee             jmgEmployee;
        JmgProfileDay           jmgProfileDay;
        JmgBreaks               jmgBreaks;
        JmgProfiles             jmgProfiles;
        StartDate               simEndDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        JmgSeconds              simEndTime      = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
        StartDate               simTransEndDate;
        JmgSeconds              simTransEndTime;

        #AviFiles

        try
        {
            this.progressInit("@SYS38594", any2int((select count(RecId) from jmgEmployee).RecId),#AviUpdate);

            ttsbegin;

            while select forupdate clockInStampJournalTrans
                    where clockInStampJournalTrans.JourRegType  == JmgJourRegTypeEnum::SignIn
            {
                progress.setText(HcmWorker::worker2Name(clockInStampJournalTrans.Worker));
                jmgStampJournalTable    = JmgStampJournalTable::find(clockInStampJournalTrans.Worker,clockInStampJournalTrans.ProfileDate);
                if ((jmgStampJournalTable.Calculated    == NoYes::No)   &&
                    (jmgStampJournalTable.Locked        == NoYes::No)   )
                {
                    if (! jmgStampJournalTable.Profile)
                    {
                        jmgEmployee                         = JmgEmployee::find(clockInStampJournalTrans.Worker);
                        jmgStampJournalTable.Profile        = jmgEmployee.profileId(clockInStampJournalTrans.StartDate,clockInStampJournalTrans.StartTime);
                        jmgProfileDay   = JmgProfileDay::find(jmgEmployee.profileId(clockInStampJournalTrans.StartDate,clockInStampJournalTrans.StartTime),JmgProfiles::date2DayId(clockInStampJournalTrans.StartDate));

                        if (jmgProfileDay                                                           &&
                            jmgProfileDay.StartTime                                                 &&
                            jmgProfileDay.StartTime         <= clockInStampJournalTrans.StartTime   &&
                            jmgProfileDay.PushProfile       == NoYes::No)
                        {
                            jmgStampJournalTable.ProfileDate = clockInStampJournalTrans.StartDate + 1;
                        }
                        else if (jmgProfileDay                                                      &&
                                 jmgProfileDay.StartTime                                            &&
                                 jmgProfileDay.StartTime     >= clockInStampJournalTrans.StartTime  &&
                                 jmgProfileDay.PushProfile   == NoYes::Yes)
                        {
                            jmgStampJournalTable.ProfileDate = clockInStampJournalTrans.StartDate - 1;
                        }
                        else
                        {
                            jmgStampJournalTable.ProfileDate = clockInStampJournalTrans.StartDate;
                        }
                    }
                    jmgStampJournalTable.resetValues();
                    jmgProfiles = new JmgProfiles(false,true,simEndDate,simEndTime);
                    jmgProfiles.getProfile(jmgStampJournalTable.Profile,JmgProfiles::date2DayId(jmgStampJournalTable.ProfileDate),jmgStampJournalTable);
                    jmgProfiles.initStampJournalTable(jmgStampJournalTable);
                    jmgProfiles.loadEventCodes(jmgStampJournalTable);
                    jmgBreaks = jmgProfiles.getBreaks(jmgStampJournalTable.Worker,jmgStampJournalTable.ProfileDate);

                    while select forupdate jmgStampJournalTrans
                        index EmplProfDateIdx
                        order by  Worker,ProfileDate,StartDate,StartTime,StopDate,StopTime,JourRegType
                        where jmgStampJournalTrans.Worker       == clockInStampJournalTrans.Worker          &&
                              jmgStampJournalTrans.ProfileDate  == clockInStampJournalTrans.ProfileDate     &&
                              (jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::MrpQueueBefore   ||
                               jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::MrpSetup         ||
                               jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::MrpProcess       ||
                               jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::MrpTransport     ||
                               jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::MrpQueueAfter    ||
                               jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::MrpOverlap       ||
                               jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::PrjProject       ||
                               jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::PrjActivity      ||
                               jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::IndActivity)
                    {
                        simTransEndDate = jmgStampJournalTrans.StopDate;
                        simTransEndTime = jmgStampJournalTrans.StopTime;
                        if (jmgStampJournalTrans.Active == NoYes::Yes)
                        {
                            simTransEndDate = simEndDate;
                            simTransEndTime = simEndTime;
                        }
                        jmgStampJournalTrans.calcInitStamp(jmgStampJournalTable);
                        jmgProfiles.simulateSetSignInOutTransId(jmgStampJournalTrans,simTransEndDate,simTransEndTime);

                        jmgProfiles.bundleAddStack(jmgStampJournalTrans,simTransEndDate,simTransEndTime);
                        jmgProfiles.simulatesetTmpvariables(jmgStampJournalTrans,simTransEndDate,simTransEndTime);
                        jmgStampJournalTrans.update();
                    }
                    jmgStampJournalTable.Worker = clockInStampJournalTrans.Worker;
                    jmgProfiles.bundleSlizeTime(jmgStampJournalTable,simTransEndDate,simTransEndTime);
                }
            }
            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setApproveGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the approval group for which calculation is performed.
    /// </summary>
    /// <param name="jmgGroupApproveIdIn">
    /// The ID of the approval group.
    /// </param>
    private void setApproveGroup(JmgGroupApproveId jmgGroupApproveIdIn)
    {
        jmgGroupApproveId = jmgGroupApproveIdIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the arguments with which the class is run.
    /// </summary>
    /// <param name="_args">
    /// The arguments to set.
    /// </param>
    public void setArgs(Args _args)
    {
        args = _args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalcGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the calculation group for which calculation is performed.
    /// </summary>
    /// <param name="jmgGroupCalcIdIn">
    /// The ID of the calculation group.
    /// </param>
    void setCalcGroup(JmgGroupCalcId jmgGroupCalcIdIn)
    {
        jmgGroupCalcId = jmgGroupCalcIdIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProfileDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the profile date for which calculation is performed.
    /// </summary>
    /// <param name="_profileDate">
    /// The profile date to set.
    /// </param>
    void setProfileDate(JmgDate   _profileDate)
    {
        profileDate = _profileDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSimulate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets whether the calculation must be run in simulation mode.
    /// </summary>
    /// <param name="value">
    ///    true if calculation must be run in simulation mode; otherwise, false.
    /// </param>
    void setSimulate(boolean value)
    {
        simulation = value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version      = conpeek(packedClass,1);
        container   packedArgs;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedArgs] = packedClass;
                if (packedArgs)
                {
                    args = Args::create(packedArgs);
                }
                break;
            case 1:
                [version, profileDate] = packedClass;
                simulation              = false;
                break;
            default :
                return false;
        }

        if (args)
        {
            simulation = args.parmEnum() == NoYes::Yes;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the object is valid.
    /// </summary>
    /// <param name="calledFrom">
    ///    The caller of the class.
    /// </param>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    boolean validate(Object calledFrom = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS38615";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        JmgCalculateDate        calculateDate;
        JmgStampJournalTable    jmgStampJournalTable;
        JmgStampJournalTable    jmgStampJournalTableCurRec;

        Object                  obj;
        FormRun                 fr;
        Args                    frArgs;

        JmgParameters::checkSFCSetupOK();
        calculateDate = new JmgCalculateDate();
        calculateDate.setArgs(args);
        if (args && args.parmEnum() == NoYes::Yes)
        {
            calculateDate.setSimulate(true);
            if (calculateDate.prompt())
            {
                calculateDate.runOperation();
            }
            return;
        }

        if (args && args.dataset() == tablenum(JmgStampJournalTable))
        {
            jmgStampJournalTable = args.record();
            calculateDate.setProfileDate(jmgStampJournalTable.ProfileDate);

            obj = args.caller();
            if (obj)
            {
                fr      = obj;
                frArgs  = fr.args();

                if (frArgs.parmEnumType() == enumnum(NoYes))
                {
                    if (frArgs.parmEnum() == NoYes::No)
                    {
                        calculateDate.setCalcGroup(jmgStampJournalTable.CalculateGroupId);
                    }
                    else
                    {
                        calculateDate.setApproveGroup(jmgStampJournalTable.ApproveGroupId);
                    }
                }
            }
            else
                calculateDate.setCalcGroup(jmgStampJournalTable.CalculateGroupId);

            if (calculateDate.prompt())
                calculateDate.runOperation();

            if (FormDataUtil::getFormDataSource(jmgStampJournalTable))
            {
                select firstonly jmgStampJournalTableCurRec
                    where jmgStampJournalTableCurRec.RecId == jmgStampJournalTable.RecId;

                FormDataUtil::getFormDataSource(jmgStampJournalTable).research();
                FormDataUtil::getFormDataSource(jmgStampJournalTable).findRecord(jmgStampJournalTableCurRec);
            }
        }
        else
        {
            calculateDate.setProfileDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            if (calculateDate.prompt())
            {
                JmgStampJournalTable::makeLines(calculateDate.getProfileDate());
                calculateDate.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>