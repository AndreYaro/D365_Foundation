<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanHcmSelectForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanHcmSelectForm</c> class is the form runner class for the <c>BudgetPlanHcmSelect</c> form.
/// </summary>
public class BudgetPlanHcmSelectForm
{
    BudgetPlanHeader budgetPlanHeader;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the budget plan lines for the passed in <c>BudgetPlanHcmPositionsSelectTmp</c> record.
    /// </summary>
    /// <param name="_budgetPlanHcmPositionSelectTmp">
    /// The <c>BudgetPlanHcmPositionSelectTmp</c> table containing the records that the budget lines should be created for.
    /// </param>
    /// <param name="_budgetPlanHeader">
    /// The budget plan header that the new budget plan lines should be related to.
    /// </param>
    /// <param name="_budgetPlanScenario">
    /// The budget plan scenario that the new budget plan lines should be related to.
    /// </param>
    /// <param name="_budgetPlanQuantityScenario">
    /// The budget plan quantity scenario that the new budget plan lines should be related to.
    /// </param>
    /// <param name="_budgetPlanScenarioMainAccount">
    /// The main account that should be on the new budget plan lines.
    /// </param>
    public void createBudgetPlanLines(
        BudgetPlanHcmPositionSelectTmp      _budgetPlanHcmPositionSelectTmp,
        BudgetPlanHeader                    _budgetPlanHeader,
        BudgetPlanScenarioRecId             _budgetPlanScenario,
        BudgetPlanScenarioRecId             _budgetPlanQuantityScenario,
        LedgerDimensionBudgetPlanning       _budgetPlanScenarioMainAccount)
    {
        BudgetPlanGenerateContractHcm   budgetPlanGenerateContractHcm;
        BudgetPlanGenerateServiceHcm    budgetPlanGenerateServiceHcm;
        BudgetPlanningProcess           budgetPlanningProcess = BudgetPlanningProcess::find(_budgetPlanHeader.BudgetPlanningProcess);

        budgetPlanGenerateContractHcm = BudgetPlanGenerateContractHcm::construct();

        budgetPlanGenerateContractHcm.parmTargetFactor(1.00);
        budgetPlanGenerateContractHcm.parmTargetLedgerRecId(budgetPlanningProcess.Ledger);
        budgetPlanGenerateContractHcm.parmTargetBudgetPlanGenerateType(BudgetPlanGenerateType::UpdateBudgetPlan);
        budgetPlanGenerateContractHcm.parmTargetBudgetPlanningProcess(budgetPlanningProcess.RecId);
        budgetPlanGenerateContractHcm.parmTargetResponsibilityCenter(budgetPlanHeader.BudgetingOrganization);
        budgetPlanGenerateContractHcm.parmTargetBudgetPlanDocumentNumber(budgetPlanHeader.RecId);
        budgetPlanGenerateContractHcm.parmTargetBudgetPlanScenario(_budgetPlanScenario);
        budgetPlanGenerateContractHcm.parmTargetBudgetPlanScenarioQuantity(_budgetPlanQuantityScenario);
        budgetPlanGenerateContractHcm.parmTargetBudgetPlanScenarioMainAccount(_budgetPlanScenarioMainAccount);
        budgetPlanGenerateContractHcm.parmTargetBudgetPlanLineIncludePosition(NoYes::Yes);

        ttsbegin;
        budgetPlanGenerateServiceHcm = BudgetPlanGenerateServiceHcm::construct();
        budgetPlanGenerateServiceHcm.parmBudgetPlanGenerateContract(budgetPlanGenerateContractHcm);
        budgetPlanGenerateServiceHcm.initialize();
        budgetPlanGenerateServiceHcm.createOrUpdateBudgetPlanHeader();

        while select _budgetPlanHcmPositionSelectTmp
        {
            budgetPlanGenerateServiceHcm.setPositionDetailsFromForecast(_budgetPlanHcmPositionSelectTmp.PositionForecastScenario);
            budgetPlanGenerateServiceHcm.createBudgetPlanLine(_budgetPlanHeader.RecId, _budgetPlanHcmPositionSelectTmp.Factor);
        }

        budgetPlanGenerateServiceHcm.bulkInsertOrUpdateBudgetPlanLines();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBudgetPlanHcmSelectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the passed in <c>BudgetPlanHcmPositionSelectTmp</c> table has records.
    /// </summary>
    /// <param name="_budgetPlanHcmPositionSelectTmp">
    /// The temporary table to validate if it is empty.
    /// </param>
    /// <returns>
    /// true if the <c>BudgetPlanHcmPositionSelectTmp</c> table instance passed in has records; otherwise, false.
    /// </returns>
    protected boolean existBudgetPlanHcmSelectTmp(BudgetPlanHcmPositionSelectTmp _budgetPlanHcmPositionSelectTmp)
    {
        boolean                         existBudgetPlanHcmSelectTmp = false;

        if (_budgetPlanHcmPositionSelectTmp)
        {
            existBudgetPlanHcmSelectTmp = true;
        }

        return existBudgetPlanHcmSelectTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeadingRecordLabelValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the heading string for the current <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <returns>
    /// The heading string for the current <c>BudgetPlanHeader</c> record.
    /// </returns>
    public str getHeadingRecordLabelValue()
    {
        return "@GLS70070" + ': ' + budgetPlanHeader.DocumentNumber + ' ' + budgetPlanHeader.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupQuantityScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the full time equivalency scenario lookup for the passed in <c>FormStringControl</c>.
    /// </summary>
    /// <param name="_formStringControl">
    /// The control to perform the lookup on.
    /// </param>
    public void lookupQuantityScenario(FormStringControl _formStringControl)
    {
        Query                   query;
        SysTableLookup          tableLookup;

        if (_formStringControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        query = BudgetPlanLookupHelper::getBudgetPlanScenarioQueryByLayout(
                    this.parmBudgetPlanHeader().BudgetPlanningProcess,
                    this.parmBudgetPlanHeader().Layout,
                    UnitOfMeasureClass::Quantity,
                    UnitOfMeasureClass::Undefined,
                    true);

        tableLookup = SysTableLookup::newParameters(tableNum(BudgetPlanScenarioTranslation), _formStringControl, true);

        // Add fields that will be shown in the lookup form as columns
        tableLookup.addLookupfield(fieldNum(BudgetPlanScenarioTranslation, Name));

        // Add the query to the lookup form
        tableLookup.parmQuery(query);

        // Perform the lookup
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanHeader</Name>
				<Source><![CDATA[
    public BudgetPlanHeader parmBudgetPlanHeader(BudgetPlanHeader _budgetPlanHeader = budgetPlanHeader)
    {
        budgetPlanHeader = _budgetPlanHeader;

        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCloseOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the values entered on the <c>BudgetPlanHcmSelect</c> form prior to closing of the form.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account to be validated.
    /// </param>
    /// <param name="_ledger">
    /// The ledger associated with the current budget planning process.
    /// </param>
    /// <param name="_budgetPlanningProcess">
    /// The current budget planning process.
    /// </param>
    /// <param name="_budgetPlanHcmPositionSelectTmp">
    /// The <c>BudgetPlanHcmPositionSelectTmp</c> table instance to validate.
    /// </param>
    /// <param name="_validateMainAccount">
    /// true if the main account should be validated; otherwise, false.
    /// </param>
    /// <returns>
    /// true if all validations pass; otherwise, false.
    /// </returns>
    public boolean validateCloseOk(MainAccount _mainAccount, Ledger _ledger, BudgetPlanningProcess _budgetPlanningProcess, BudgetPlanHcmPositionSelectTmp _budgetPlanHcmPositionSelectTmp, boolean _validateMainAccount)
    {
        boolean isValid = true;

        if (_validateMainAccount)
        {
            isValid = this.validateMainAccount(_mainAccount, _ledger, _budgetPlanningProcess);
        }

        if (isValid && !this.existBudgetPlanHcmSelectTmp(_budgetPlanHcmPositionSelectTmp))
        {
            error("@GLS150305");
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsMainAccountActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the supplied main account is active.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account to be checked.
    /// </param>
    /// <param name="_budgetPlanningProcess">
    /// The budget planning process for the budget plan header that lines will be inserted under.
    /// </param>
    /// <returns>
    /// true if the main account is active; otherwise, false.
    /// </returns>
    protected boolean validateIsMainAccountActive(MainAccount _mainAccount, BudgetPlanningProcess _budgetPlanningProcess)
    {
        DimensionAttribute      dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;
        BudgetCycle             budgetCycle = BudgetCycle::find(_budgetPlanningProcess.BudgetCycle);
        boolean                 isActive = true;

        dimensionAttribute.RecId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimensionAttribute.RecId, _mainAccount.RecId, false);

        if (dimensionAttributeValue.IsSuspended == NoYes::Yes)
        {
            error(strFmt("@SYS28188", _mainAccount.MainAccountId));
            isActive = false;
        }

        //If there are no active from: /active to: dates defined for the Main account, it should pass the validation.
        //If there are active from / active to dates defined for the main account, the validation should fail if the range of active dates is outside the budget cycle dates.
        //If any active date is within the budget cycle dates, the main account should be allowed.

        else if (!(dimensionAttributeValue.ActiveFrom == dateNull() && dimensionAttributeValue.ActiveTo == dateNull())
                   && (budgetCycle.getStartDate() >= dimensionAttributeValue.ActiveTo || budgetCycle.getEndDate() <= dimensionAttributeValue.ActiveFrom))
        {
            error(strFmt("@SYS135697", _mainAccount.MainAccountId));
            isActive = false;
        }

        return isActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the main account selected by the user.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account to validate.
    /// </param>
    /// <param name="_ledger">
    /// The ledger for the current budget planning process.
    /// </param>
    /// <param name="_budgetPlanningProcess">
    /// The current budget planning process.
    /// </param>
    /// <returns>
    /// true if the main account is valid; otherwise, false.
    /// </returns>
    public boolean validateMainAccount(MainAccount _mainAccount, Ledger _ledger, BudgetPlanningProcess _budgetPlanningProcess)
    {
        boolean isValid = true;

        if (!_mainAccount || _mainAccount.LedgerChartOfAccounts != _ledger.ChartOfAccounts)
        {
            error("@GLS150306");
            isValid = false;
        }

        if (isValid && !this.validateIsMainAccountActive(_mainAccount, _budgetPlanningProcess))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuantityScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the quantity scenario type that the user selected.
    /// </summary>
    /// <param name="_budgetPlanScenarioName">
    /// The name of the scenario the user selected.
    /// </param>
    /// <returns>
    /// true if the scenario is valid; otherwise, false.
    /// </returns>
    public boolean validateQuantityScenario(BudgetPlanScenarioName  _budgetPlanScenarioName)
    {
        BudgetPlanScenario  budgetPlanScenario = BudgetPlanScenario::findByLocalizedName(_budgetPlanScenarioName);
        boolean             isValid = true;

        if (!budgetPlanScenario)
        {
            isValid = false;
        }

        if (isValid && !this.scenarioIsValidForHeader(budgetPlanScenario.RecId, true))
        {
            error("@Budget:ScenarioNotAvailableInLayout");
            isValid = false;
        }

        if (isValid && budgetPlanScenario.UnitOfMeasureClass != UnitOfMeasureClass::Quantity)
        {
            error("@GLS150304");
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the scenario that the user selected.
    /// </summary>
    /// <param name="_budgetPlanScenarioName"> The name of the scenario the user selected. </param>
    /// <returns> true if the scenario is valid; otherwise, false. </returns>
    public boolean validateScenario(BudgetPlanScenarioName  _budgetPlanScenarioName)
    {
        BudgetPlanScenario  budgetPlanScenario = BudgetPlanScenario::findByLocalizedName(_budgetPlanScenarioName);
        boolean             isValid = true;

        if (!budgetPlanScenario)
        {
            isValid = false;
        }

        if (isValid && !this.scenarioIsValidForHeader(budgetPlanScenario.RecId))
        {
            error("@Budget:ScenarioNotAvailableInLayout");
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scenarioIsValidForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a scenario is valid for the given <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <param name = "_budgetPlanScenarioRecId"> The record ID of the <c>BudgetPlanScenario</c> record. </param>
    /// <param name = "_validateQuantityLookup"> A boolean determining whether to validate for the quantity lookup; optional. </param>
    /// <returns> true if the scenario is valid; otherwise, false. </returns>
    protected boolean scenarioIsValidForHeader(BudgetPlanScenarioRecId _budgetPlanScenarioRecId, boolean _validateQuantityLookup = false)
    {
        Query query;

        if (_validateQuantityLookup)
        {
            query = BudgetPlanLookupHelper::getBudgetPlanScenarioQueryByLayout(
                        this.parmBudgetPlanHeader().BudgetPlanningProcess,
                        this.parmBudgetPlanHeader().Layout,
                        UnitOfMeasureClass::Quantity,
                        UnitOfMeasureClass::Undefined,
                        true);
        }
        else
        {
            query = BudgetPlanLookupHelper::getBudgetPlanScenarioQueryByLayout(
                        this.parmBudgetPlanHeader().BudgetPlanningProcess,
                        this.parmBudgetPlanHeader().Layout);
        }
        query.dataSourceTable(tableNum(BudgetPlanScenario)).addRange(fieldNum(BudgetPlanScenario, RecId)).value(SysQuery::value(_budgetPlanScenarioRecId));

        QueryRun queryRun = new QueryRun(query);
        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup for <c>BudgetPlanScenario</c> records, filtered by the stored <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form string control to perform the lookup for.
    /// </param>
    public void lookupBudgetPlanScenario(FormStringControl _formStringControl)
    {
        Query           query;
        SysTableLookup  tableLookup;

        if (_formStringControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        query = BudgetPlanLookupHelper::getBudgetPlanScenarioQueryByLayout(
                    this.parmBudgetPlanHeader().BudgetPlanningProcess,
                    this.parmBudgetPlanHeader().Layout);

        tableLookup = SysTableLookup::newParameters(tableNum(BudgetPlanScenarioTranslation), _formStringControl, true);

        // Add fields that will be shown in the lookup form as columns
        tableLookup.addLookupfield(fieldNum(BudgetPlanScenarioTranslation, Name));

        // Add the query to the lookup form
        tableLookup.parmQuery(query);

        // Perform the lookup
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the main account lookup for the passed in form control.
    /// </summary>
    /// <param name="_ctrl">
    /// The control to perform the lookup on.
    /// </param>
    /// <param name="_ledgerRecId">
    /// The record ID of the ledger whose main accounts should be shown in the lookup.
    /// </param>
    public static void lookupMainAccount(FormControl _ctrl, LedgerRecId _ledgerRecId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(MainAccount), _ctrl, true);
        Query                   lookupQuery;
        QueryBuildDataSource    qbds;
        Ledger                  ledger = Ledger::find(_ledgerRecId);

        // Display the MainAccountId, Name, and Type fields in the lookup form.
        sysTableLookup.addLookupfield(fieldNum(MainAccount, MainAccountId));
        sysTableLookup.addLookupMethod(tableMethodStr(MainAccount, localizedName));
        sysTableLookup.addLookupfield(fieldNum(MainAccount, Type));

        // Create a custom Query that filters on the Type field.
        lookupQuery = new Query();
        qbds = lookupQuery.addDataSource(tableNum(MainAccount));
        MainAccount::addSecureRangeForChartOfAccounts(qbds, ledger.ChartOfAccounts);

        sysTableLookup.parmQuery(lookupQuery);

        // Return the record selected by the user.
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBudgetPlanHcmPositionSelectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records for <c>BudgetPlanHcmPositionSelectTmp</c> table based on
    /// the collection positionForecastScenarioRecIdCollection RecIds.
    /// </summary>
    /// <param name="_budgetPlanHcmPositionSelectTmp">
    /// <c>BudgetPlanHcmPositionSelectTmp</c> table containing all the available
    /// records that the budget lines should be created for.
    /// </param>
    /// <param name="_stagingBudgetPlanHcmPositionSelectTmp">
    /// <c>BudgetPlanHcmPositionSelectTmp</c> table containing the
    /// selected records that the budget lines should be created for.
    /// </param>
    /// <param name="_positionForecastScenarioRecIdCollection">
    /// Packed value of the list containing collection of <c>HcmPositionForecastScenario</c> record RecIds.
    /// </param>
    public static void deleteBudgetPlanHcmPositionSelectTmp(
        BudgetPlanHcmPositionSelectTmp _budgetPlanHcmPositionSelectTmp,
        BudgetPlanHcmPositionSelectTmp _stagingBudgetPlanHcmPositionSelectTmp,
        container _positionForecastScenarioRecIdCollection)
    {
        Set             positionForecastScenarioRecIdCollection;
        SetEnumerator   positionForecastScenarioRecIdEnumerator;
        RecId           positionForecastScenarioRecId;

        positionForecastScenarioRecIdCollection = Set::create(_positionForecastScenarioRecIdCollection);
        positionForecastScenarioRecIdEnumerator = positionForecastScenarioRecIdCollection.getEnumerator();

        ttsbegin;
        while (positionForecastScenarioRecIdEnumerator.moveNext())
        {
            positionForecastScenarioRecId = positionForecastScenarioRecIdEnumerator.current();

            delete_from _budgetPlanHcmPositionSelectTmp
                where _budgetPlanHcmPositionSelectTmp.PositionForecastScenario == positionForecastScenarioRecId;

            delete_from _stagingBudgetPlanHcmPositionSelectTmp
                where _stagingBudgetPlanHcmPositionSelectTmp.PositionForecastScenario == positionForecastScenarioRecId;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBudgetPlanHcmPositionSelectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records for <c>BudgetPlanHcmPositionSelectTmp</c> table based on
    /// the collection <c>HcmPositionForecastScenario</c> records.
    /// </summary>
    /// <param name="_budgetPlanHcmPositionSelectTmp">
    /// <c>BudgetPlanHcmPositionSelectTmp</c> table containing all the available
    /// records that the budget lines should be created for.
    /// </param>
    /// <param name="_stagingBudgetPlanHcmPositionSelectTmp">
    /// <c>BudgetPlanHcmPositionSelectTmp</c> table containing the
    /// selected records that the budget lines should be created for.
    /// </param>
    /// <param name="_positionForecastScenarioCollection">
    /// Packed value of the list containing collection of <c>HcmPositionForecastScenario</c> records.
    /// </param>
    public static void insertBudgetPlanHcmPositionSelectTmp(
        BudgetPlanHcmPositionSelectTmp _budgetPlanHcmPositionSelectTmp,
        BudgetPlanHcmPositionSelectTmp _stagingBudgetPlanHcmPositionSelectTmp,
        container                      _positionForecastScenarioCollection)
    {
        Set                         positionForecastScenarioCollection;
        SetEnumerator               positionForecastScenarioEnumerator;
        HcmPositionForecastScenario positionForecastScenario;

        positionForecastScenarioCollection = Set::create(_positionForecastScenarioCollection);
        positionForecastScenarioEnumerator = positionForecastScenarioCollection.getEnumerator();

        ttsbegin;
        while (positionForecastScenarioEnumerator.moveNext())
        {
            positionForecastScenario = positionForecastScenarioEnumerator.current();

            _budgetPlanHcmPositionSelectTmp.insertRecordFromForecastScenario(positionForecastScenario);
            _stagingBudgetPlanHcmPositionSelectTmp.insertRecordFromForecastScenario(positionForecastScenario);
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>