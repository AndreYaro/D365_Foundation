<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPickWaveHeaderDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRPickWaveHeaderDP</c> class is the report data provider class for the <c>MCRPickWaveHeader</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(MCRPickWaveHeaderContract))
]
class MCRPickWaveHeaderDP extends SRSReportDataProviderBase
{
    TmpMCRPickWaveHeader        tmpMCRPickWaveHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpMCRPickWaveHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TmpMCRPickWaveHeader</c> record.
    /// </summary>
    /// <returns>
    /// The <c>TmpMCRPickWaveHeader</c> record.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpMCRPickWaveHeader))
    ]
    public TmpMCRPickWaveHeader getTmpMCRPickWaveHeader()
    {
        select tmpMCRPickWaveHeader;
        return tmpMCRPickWaveHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        MCRPickWaveHeaderContract contract = this.parmDataContract() as MCRPickWaveHeaderContract;
        MCRPickingWorkbenchWave mcrPickingWorkbenchWave;
        Barcode pickWaveIdBarcode;

        select firstonly mcrPickingWorkbenchWave
            where mcrPickingWorkbenchWave.WaveReferenceId == contract.parmWaveRefId();

        if (mcrPickingWorkbenchWave)
        {
            tmpMCRPickWaveHeader.WaveReferenceId = mcrPickingWorkbenchWave.WaveReferenceId;
            tmpMCRPickWaveHeader.SessionId       = mcrPickingWorkbenchWave.SessionId;
            tmpMCRPickWaveHeader.Worker          = mcrPickingWorkbenchWave.AssigneeWorker;
            tmpMCRPickWaveHeader.Warehouse       = mcrPickingWorkbenchWave.Warehouse;
            tmpMCRPickWaveHeader.NumOrders       = mcrPickingWorkbenchWave.displayNumOrders();
            tmpMCRPickWaveHeader.NumItems        = mcrPickingWorkbenchWave.displayNumItems();

            pickWaveIdBarcode = Barcode::construct(BarcodeType::Code39);
            pickWaveIdBarcode.string(true,strUpr(mcrPickingWorkbenchWave.WaveReferenceId));
            pickWaveIdBarcode.encode();
            tmpMCRPickWaveHeader.BarCodeDisplay         = pickWaveIdBarcode.barcodeStr();

            tmpMCRPickWaveHeader.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
