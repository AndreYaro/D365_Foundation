<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck</c>
/// checks or fixes <c>TaxTransGeneralJournalAccountEntry</c> when
/// <c>TaxParameters</c>'s <c>BankExchRate_W</c> is enabled.
/// </summary>
public class TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck
    extends SysConsistencyCheck
{
    private static SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(
        classStr(TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>contextOf</Name>
				<Source><![CDATA[
    private static SysInstrumentationActivityContext contextOf(str _space, str _name, RefRecId _recId)
    {
        var activity = SysInstrumentationActivity::construct(_name, _space);
        SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(activity);
        activityContext.addCustomProperty('RecId', int642Str(_recId));
        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checkes or fixes <c>TaxTransGeneralJournalAccountEntry</c>.
    /// </summary>
    public void run()
    {
        if (!FeatureStateProvider::isFeatureEnabled(TaxTransAssociationBankExchangeRateConsistencyCheckFeature::instance())
            || TaxParameters::find().BankExchRate_W == NoYes::No)
        {
            this.updateNotCorrected();
            return;
        }

        FromDate fromDate = this.consistencyCheckJob.parmFromDate();
        CheckFix checkFix = this.checkFix();
        Counter counter = this.process(checkFix, fromDate);
        if (checkFix == CheckFix::Fix)
        {
            this.updateCorrected(counter);
        }
        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    private Counter process(CheckFix _checkFix, FromDate _fromDate)
    {
        TaxTrans taxTransDifference;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntryDifference;
        Counter counter = 0;

        if (_checkFix == CheckFix::Fix)
        {
            ttsbegin;
        }

        while select taxTransDifference
            where taxTransDifference.TransDate >= _fromDate
                && taxTransDifference.SourceDocumentLine == 0
                && taxTransDifference.TaxGroup != '' // excluding <c>TaxTrans</c> from settlement
                && taxTransDifference.TaxItemGroup != ''
                && (taxTransDifference.TaxDirection == TaxDirection::IncomingTax_W
                    || taxTransDifference.TaxDirection == TaxDirection::OutgoingTax_W)
                && taxTransDifference.TaxAmount != 0
            notexists join taxTransGeneralJournalAccountEntryDifference
                where taxTransGeneralJournalAccountEntryDifference.TaxTrans == taxTransDifference.RecId
        {
            Counter updater = 0;
            Counter deleter = 0;

            [updater, deleter] = this.processPerDifference(taxTransDifference, CheckFix::Check);

            boolean erroneous = false;
            if (updater != 1)
            {
                erroneous = true;
                using (var context = TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck::contextOf(
                    'TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck', 'Error: Updating', taxTransDifference.RecId))
                {
                    error(strFmt("@TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck:ErrorMessageOfUpdating",
                        "@SYS318719", "@SYS23189", taxTransDifference.RecId, updater));
                }
            }
            if (deleter != 0 && taxTransDifference.ReverseCharge_W == NoYes::No)
            {
                erroneous = true;
                using (var context = TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck::contextOf(
                    'TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck', 'Error: Deleting', taxTransDifference.RecId))
                {
                    error(strFmt("@TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck:ErrorMessageOfDeleting",
                        "@SYS318719", "@SYS23189", taxTransDifference.RecId, deleter));
                }
            }
            if (deleter != 1 && taxTransDifference.ReverseCharge_W == NoYes::Yes)
            {
                erroneous = true;
                using (var context = TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck::contextOf(
                    'TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck', 'Error: Deleting (Reverse Charge)', taxTransDifference.RecId))
                {
                    error(strFmt("@TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck:ErrorMessageOfDeletingRC",
                        "@SYS318719", "@SYS23189", taxTransDifference.RecId, deleter));
                }
            }

            if (!erroneous && _checkFix == CheckFix::Fix)
            {
                [updater, deleter] = this.processPerDifference(taxTransDifference, CheckFix::Fix);
                counter += updater;
                counter += deleter;
            }
        }

        if (_checkFix == CheckFix::Fix)
        {
            ttscommit;
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPerDifference</Name>
				<Source><![CDATA[
    private container processPerDifference(TaxTrans _taxTransDifference, CheckFix _checkFix)
    {
        Counter updater = 0;
        Counter deleter = 0;

        TaxDirection taxDirection = _taxTransDifference.TaxDirection == TaxDirection::IncomingTax_W
            ? TaxDirection::IncomingTax
            : TaxDirection::OutgoingTax;

        TaxTrans taxTrans;
        taxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntryDifference;

        while select taxTrans
            where taxTrans.SourceTableId == _taxTransDifference.SourceTableId
                && taxTrans.SourceRecId == _taxTransDifference.SourceRecId
                && taxTrans.Voucher == _taxTransDifference.Voucher
                && taxTrans.SourceDocumentLine != 0
                && taxTrans.TaxCode == _taxTransDifference.TaxCode
                && taxTrans.TaxDirection == taxDirection
            join taxTransGeneralJournalAccountEntryDifference
                where taxTransGeneralJournalAccountEntryDifference.TaxTrans == taxTrans.RecId
                    && taxTransGeneralJournalAccountEntryDifference.TaxTransRelationship == TaxTransRelationshipType::Tax
                    && (taxTransGeneralJournalAccountEntryDifference.AccountingCurrencyAmount == _taxTransDifference.TaxAmount
                        || taxTransGeneralJournalAccountEntryDifference.AccountingCurrencyAmount == -_taxTransDifference.TaxAmount)
        {
            TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
            select taxTransGeneralJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.TaxTrans == taxTransGeneralJournalAccountEntryDifference.TaxTrans
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship == taxTransGeneralJournalAccountEntryDifference.TaxTransRelationship
                    && taxTransGeneralJournalAccountEntry.RecId != taxTransGeneralJournalAccountEntryDifference.RecId
                    && taxTransGeneralJournalAccountEntry.AccountingCurrencyAmount * taxTransGeneralJournalAccountEntryDifference.AccountingCurrencyAmount > 0;
            if (taxTransGeneralJournalAccountEntry)
            {
                updater++;
                if (_checkFix == CheckFix::Check)
                {
                    warning(strFmt("@TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck:WarningMessageOfUpdating",
                        "@SYS318719",
                        taxTransGeneralJournalAccountEntryDifference.RecId,
                        "@SYS23189",
                        taxTrans.RecId,
                        _taxTransDifference.RecId));
                }
                if (_checkFix == CheckFix::Fix)
                {
                    using (var context = taxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck::contextOf(
                            'TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck', 'Fix: Updating', _taxTransDifference.RecId))
                    {
                        taxTransGeneralJournalAccountEntryDifference.selectForUpdate(true);
                        taxTransGeneralJournalAccountEntryDifference.TaxTrans = _taxTransDifference.RecId;
                        taxTransGeneralJournalAccountEntryDifference.update();
                    }
                }
            }
            else
            {
                deleter++;
                if (_checkFix == CheckFix::Check)
                {
                    warning(strFmt("@TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck:WarningMessageOfDeleting",
                        "@SYS318719",
                        taxTransGeneralJournalAccountEntryDifference.RecId,
                        "@SYS23189",
                        taxTrans.RecId));
                }
                if (_checkFix == CheckFix::Fix)
                {
                    using (var context = taxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck::contextOf(
                            'TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck', 'Fix: Deleting', _taxTransDifference.RecId))
                    {
                        taxTransGeneralJournalAccountEntryDifference.selectForUpdate(true);
                        taxTransGeneralJournalAccountEntryDifference.delete();
                    }
                }
            }
        }

        return [updater, deleter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tree parent class id.
    /// </summary>
    /// <returns>The tree parent class ids.</returns>
    public ClassId treeParentClassId()
    {
        return classNum(TaxConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs <c>TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck</c>.
    /// </summary>
    /// <returns>The constructed object.</returns>
    public static TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck construct()
    {
        return new TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description.
    /// </summary>
    /// <returns>The description.</returns>
    public static ClassDescription description()
    {
        return strFmt("@TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck:Description", "@SYS318719", "@GLS110038");
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the help text.
    /// </summary>
    /// <returns>The help text.</returns>
    public static HelpTxt helpText()
    {
        return strFmt("@TaxTransGeneralJournalAccountEntryBankExchangeRateConsistencyCheck:HelpText", "@SYS318719", "@GLS110038");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>