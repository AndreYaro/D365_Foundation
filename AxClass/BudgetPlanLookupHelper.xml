<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLookupHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Performs and supplies various lookups and queries used in budget planning.
/// </summary>
public class BudgetPlanLookupHelper
{
    private BudgetPlanningProcessRecId      budgetPlanningProcessRecId;
    private BudgetPlanLayoutRecId           budgetPlanLayoutRecId;
    private BudgetingOrganizationRecId      budgetingOrganizationRecId;
    private BudgetPlanningStageRecId        budgetPlanningStageRecId;
    private NoYes                           isHistorical;
    private boolean                         doFilterByFirstWorkflowStage;
    private boolean                         doFilterByBudgetProcessStageRule;
    private boolean                         doFilterByEditableElements;
    private UnitOfMeasureClass              unitOfMeasureClass;
    private UnitOfMeasureClass              unitOfMeasureToExclude;
    private AssetId                         assetId;
    private ProjId                          projId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanLookupHelper construct()
    {
        return new BudgetPlanLookupHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns class instance values used in various lookups.
    /// </summary>
    /// <param name = "_budgetPlanningProcessRecId"> The record ID of <c>BudgetPlanningProcess</c> record. </param>
    /// <param name = "_budgetPlanLayoutRecId"> The record ID of <c>BudgetPlanLayout</c> record; optional. </param>
    /// <param name = "_budgetingOrganizationRecId"> The record ID of <c>BudgetingOrganization</c> record; optional. </param>
    /// <param name = "_budgetPlanningStageRecId"> The record ID of <c>BudgetPlanningStage</c> record; optional. </param>
    /// <param name = "_isHistorical"> The <c>NoYes</c> value to filter by the final stage; optional. </param>
    /// <param name = "_doFilterByFirstWorkflowStage"> A boolean value determining to filter by the first <c>BudgetPlanningWorkflowStage</c> record; optional. </param>
    /// <param name = "_unitOfMeasureClass"> The <c>UnitOfMeasureClass</c> value to include in the query result; optional. </param>
    /// <param name = "_unitOfMeasureToExclude"> The <c>UnitOfMeasureClass</c> value to exclude in the query result; optional. </param>
    /// <param name = "_doFilterByBudgetProcessStageRule"> A boolean value determining to filter by the current process stage rule; optional. </param>
    /// <param name = "_doFilterByEditableElements"> A boolean value determining to filter by editable layout elements; optional. </param>
    public void initialize(
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetPlanLayoutRecId       _budgetPlanLayoutRecId              = 0,
        BudgetingOrganizationRecId  _budgetingOrganizationRecId         = 0,
        BudgetPlanningStageRecId    _budgetPlanningStageRecId           = 0,
        NoYes                       _isHistorical                       = NoYes::No,
        boolean                     _doFilterByFirstWorkflowStage       = false,
        UnitOfMeasureClass          _unitOfMeasureClass                 = UnitOfMeasureClass::Undefined,
        UnitOfMeasureClass          _unitOfMeasureToExclude             = UnitOfMeasureClass::Undefined,
        boolean                     _doFilterByBudgetProcessStageRule   = true,
        boolean                     _doFilterByEditableElements         = false)
    {
        if (!_budgetPlanningProcessRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", methodStr(BudgetPlanLookupHelper, initialize),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanningProcessRecId))));
        }

        this.budgetPlanningProcessRecId = _budgetPlanningProcessRecId;
        this.budgetPlanLayoutRecId = _budgetPlanLayoutRecId;
        this.budgetingOrganizationRecId = _budgetingOrganizationRecId;
        this.budgetPlanningStageRecId = _budgetPlanningStageRecId;
        this.isHistorical = _isHistorical;
        this.doFilterByFirstWorkflowStage = _doFilterByFirstWorkflowStage;
        this.unitOfMeasureClass = _unitOfMeasureClass;
        this.unitOfMeasureToExclude = _unitOfMeasureToExclude;
        this.doFilterByBudgetProcessStageRule = _doFilterByBudgetProcessStageRule;
        this.doFilterByEditableElements = _doFilterByEditableElements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanningProcessRecId</Name>
				<Source><![CDATA[
    public BudgetPlanningProcessRecId parmBudgetPlanningProcessRecId(BudgetPlanningProcessRecId _budgetPlanningProcessRecId = budgetPlanningProcessRecId)
    {
        this.budgetPlanningProcessRecId = _budgetPlanningProcessRecId;
        return this.budgetPlanningProcessRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanLayoutRecId</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutRecId parmBudgetPlanLayoutRecId(BudgetPlanLayoutRecId _budgetPlanLayoutRecId = budgetPlanLayoutRecId)
    {
        this.budgetPlanLayoutRecId = _budgetPlanLayoutRecId;
        return this.budgetPlanLayoutRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetingOrganizationRecId</Name>
				<Source><![CDATA[
    public BudgetingOrganizationRecId parmBudgetingOrganizationRecId(BudgetingOrganizationRecId _budgetingOrganizationRecId = budgetingOrganizationRecId)
    {
        this.budgetingOrganizationRecId = _budgetingOrganizationRecId;
        return this.budgetingOrganizationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanningStageRecId</Name>
				<Source><![CDATA[
    public BudgetPlanningStageRecId parmBudgetPlanningStageRecId(BudgetPlanningStageRecId _budgetPlanningStageRecId = budgetPlanningStageRecId)
    {
        this.budgetPlanningStageRecId = _budgetPlanningStageRecId;
        return this.budgetPlanningStageRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsHistorical</Name>
				<Source><![CDATA[
    public NoYes parmIsHistorical(NoYes _isHistorical = isHistorical)
    {
        this.isHistorical = _isHistorical;
        return this.isHistorical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoFilterByFirstWorkflowStage</Name>
				<Source><![CDATA[
    public boolean parmDoFilterByFirstWorkflowStage(boolean _doFilterByFirstWorkflowStage = doFilterByFirstWorkflowStage)
    {
        this.doFilterByFirstWorkflowStage = _doFilterByFirstWorkflowStage;
        return this.doFilterByFirstWorkflowStage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoFilterByBudgetProcessStageRule</Name>
				<Source><![CDATA[
    public boolean parmDoFilterByBudgetProcessStageRule(boolean _doFilterByBudgetProcessStageRule = doFilterByBudgetProcessStageRule)
    {
        this.doFilterByBudgetProcessStageRule = _doFilterByBudgetProcessStageRule;
        return this.doFilterByBudgetProcessStageRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitOfMeasureClass</Name>
				<Source><![CDATA[
    public UnitOfMeasureClass parmUnitOfMeasureClass(UnitOfMeasureClass _unitOfMeasureClass = unitOfMeasureClass)
    {
        this.unitOfMeasureClass = _unitOfMeasureClass;
        return this.unitOfMeasureClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitOfMeasureToExclude</Name>
				<Source><![CDATA[
    public UnitOfMeasureClass parmUnitOfMeasureToExclude(UnitOfMeasureClass _unitOfMeasureToExclude = unitOfMeasureToExclude)
    {
        this.unitOfMeasureToExclude = _unitOfMeasureToExclude;
        return this.unitOfMeasureToExclude;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoFilterByEditableElements</Name>
				<Source><![CDATA[
    public boolean parmDoFilterByEditableElements(boolean _doFilterByEditableElements = doFilterByEditableElements)
    {
        this.doFilterByEditableElements = _doFilterByEditableElements;
        return this.doFilterByEditableElements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    public AssetId parmAssetId(AssetId _assetId = assetId)
    {
        this.assetId = _assetId;
        return this.assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        this.projId = _projId;
        return this.projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanScenario</c> records.
    /// </summary>
    /// <param name="_formStringControl"> The form string control to perform the lookup for. </param>
    /// <param name="_budgetPlanningProcessRecId"> The <c>BudgetPlanningProcess</c> record ID which will be used to filter scenario. </param>
    /// <param name="_budgetPlanLayoutRecId"> The <c>BudgetPlanLayout</c> record ID which will be used to filter scenario; optional. </param>
    /// <param name="_budgetingOrganizationRecId"> The <c>OMInternalOrganization</c> record ID which will be used to filter scenario; optional. </param>
    /// <param name="_isHistorical"> A Boolean value that indicates whether the historical field is selected; optional. </param>
    /// <param name="_doFilterByFirstWorkflowStage"> A Boolean value that indicates whether only first workflow stage is selected; optional. </param>
    /// <param name="_currentBudgetPlanningStageRecId"> The record ID of the <c>BudgetPlanningStage</c> record; optional. </param>
    /// <param name="_unitOfMeasureClass"> A <c>UnitOfMeasureClass</c> value; optional. </param>
    /// <param name="_unitOfMeasureToExclude"> A <c>UnitOfMeasureClass</c> value which should not be included in the lookup; optional. </param>
    /// <param name="_doFilterByBudgetProcessStageRule"> A Boolean value that indicates whether to filter based on budget planning process stage rules; optional. </param>
    /// <param name="_doFilterByEditableElements"> A boolean value determining to filter by editable layout elements; optional. </param>
    public static void lookupBudgetPlanScenario(
        FormStringControl           _formStringControl,
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetPlanLayoutRecId       _budgetPlanLayoutRecId              = 0,
        BudgetingOrganizationRecId  _budgetingOrganizationRecId         = 0,
        NoYes                       _isHistorical                       = NoYes::No,
        boolean                     _doFilterByFirstWorkflowStage       = false,
        BudgetPlanningStageRecId    _currentBudgetPlanningStageRecId    = 0,
        UnitOfMeasureClass          _unitOfMeasureClass                 = UnitOfMeasureClass::Undefined,
        UnitOfMeasureClass          _unitOfMeasureToExclude             = UnitOfMeasureClass::Undefined,
        boolean                     _doFilterByBudgetProcessStageRule   = true,
        boolean                     _doFilterByEditableElements         = false)
    {
        Query           query;
        SysTableLookup  sysTableLookup;

        if (_formStringControl == null)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLookupHelper, lookupBudgetPlanScenario),
                                                                classstr(FormReferenceControl)));
        }

        if (!_budgetPlanningProcessRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLookupHelper, lookupBudgetPlanScenario),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanningProcessRecId))));
        }

        if (!_budgetPlanLayoutRecId && !_budgetingOrganizationRecId)
        {
            throw error(strfmt("@Budget:IncorrectFunctionUsage", funcname()));
        }

        if (_budgetPlanLayoutRecId)
        {
            query = BudgetPlanLookupHelper::getBudgetPlanScenarioQueryByLayout(
                        _budgetPlanningProcessRecId,
                        _budgetPlanLayoutRecId,
                        _unitOfMeasureClass,
                        _unitOfMeasureToExclude,
                        _doFilterByEditableElements);
        }
        else
        {
            query = BudgetPlanLookupHelper::getBudgetPlanScenarioQuery(
                        _budgetPlanningProcessRecId,
                        _budgetingOrganizationRecId,
                        _currentBudgetPlanningStageRecId,
                        _isHistorical,
                        _doFilterByFirstWorkflowStage,
                        _unitOfMeasureClass,
                        _unitOfMeasureToExclude,
                        _doFilterByBudgetProcessStageRule,
                        _doFilterByEditableElements);
        }

        sysTableLookup = SysTableLookup::newParameters(tableNum(BudgetPlanScenarioTranslation), _formStringControl, true);

        // Add fields that will be shown in the lookup form as columns
        sysTableLookup.addLookupfield(fieldNum(BudgetPlanScenarioTranslation, Name));
        sysTableLookup.addLookupfield(fieldNum(BudgetPlanScenarioTranslation, Description));

        // Add the query to the lookup form
        sysTableLookup.parmQuery(query);

        // Perform the lookup
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanScenarioQueryByLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a query to retrieve <c>BudgetPlanScenario</c> records.
    /// </summary>
    /// <param name = "_budgetPlanningProcessRecId"> The record ID of the <c>BudgetPlanningProcess</c> record. </param>
    /// <param name = "_budgetPlanLayoutRecId"> The record ID of the <c>BudgetPlanLayout</c> record. </param>
    /// <param name = "_unitOfMeasureClass"> A <c>UnitOfMeasureClass</c> value which should be included in the lookup; optional </param>
    /// <param name = "_unitOfMeasureToExclude"> A <c>UnitOfMeasureClass</c> value which should not be included in the lookup; optional. </param>
    /// <param name ="_doFilterByEditableElements"> A boolean value to determine if only editable elements are to be retrieved; optional. </param>
    /// <returns> A query to retrieve a list of <c>BudgetPlanScenario</c> records. </returns>
    public static Query getBudgetPlanScenarioQueryByLayout(
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetPlanLayoutRecId       _budgetPlanLayoutRecId,
        UnitOfMeasureClass          _unitOfMeasureClass         = UnitOfMeasureClass::Undefined,
        UnitOfMeasureClass          _unitOfMeasureToExclude     = UnitOfMeasureClass::Undefined,
        boolean                     _doFilterByEditableElements = false)
    {
        Query query = new Query(querystr(BudgetPlanTranslatedScenarios));
        BudgetPlanLookupHelper budgetPlanLookupHelper = BudgetPlanLookupHelper::construct();

        budgetPlanLookupHelper.initialize(
            _budgetPlanningProcessRecId,
            _budgetPlanLayoutRecId,
            0,
            0,
            NoYes::No,
            false,
            _unitOfMeasureClass,
            _unitOfMeasureToExclude,
            false,
            _doFilterByEditableElements);

        budgetPlanLookupHelper.addQueryRanges(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanScenarioQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a query to retrieve <c>BudgetPlanScenario</c> records.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId"> The <c>BudgetPlanningProcess</c> record ID which will be used to filter scenario. </param>
    /// <param name="_budgetingOrganizationRecId"> The <c>OMInternalOrganization</c> record ID which will be used to filter scenario; optional. </param>
    /// <param name="_isHistorical"> A Boolean value that indicates whether the historical field is selected; optional. </param>
    /// <param name="_doFilterByFirstWorkflowStage"> A Boolean value that indicates whether only first worklfow stage is selected; optional. </param>
    /// <param name="_currentBudgetPlanningStageRecId"> The record ID of the <c>BudgetPlanningStage</c> record; optional. </param>
    /// <param name="_unitOfMeasureClass"> A <c>UnitOfMeasureClass</c> value; optional. </param>
    /// <param name="_unitOfMeasureToExclude"> A <c>UnitOfMeasureClass</c> value which should not be included in the lookup; optional. </param>
    /// <param name="_doFilterByBudgetProcessStageRule"> A Boolean value that indicates whether to filter based on budget planning process stage rules; optional. </param>
    /// <param name="_doFilterByEditableElements"> A boolean value to determine if only editable elements are to be retrieved; optional. </param>
    /// <returns> A query to retrieve a list of <c>BudgetPlanScenario</c> records. </returns>
    public static Query getBudgetPlanScenarioQuery(
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetingOrganizationRecId  _budgetingOrganizationRecId,
        BudgetPlanningStageRecId    _budgetPlanningStageRecId,
        NoYes                       _isHistorical                       = NoYes::No,
        boolean                     _doFilterByFirstWorkflowStage       = false,
        UnitOfMeasureClass          _unitOfMeasureClass                 = UnitOfMeasureClass::Undefined,
        UnitOfMeasureClass          _unitOfMeasureToExclude             = UnitOfMeasureClass::Undefined,
        boolean                     _doFilterByBudgetProcessStageRule   = true,
        boolean                     _doFilterByEditableElements         = false)
    {
        Query query = new Query(querystr(BudgetPlanScenariosByStageRule));
        BudgetPlanLookupHelper budgetPlanLookupHelper = BudgetPlanLookupHelper::construct();

        budgetPlanLookupHelper.initialize(
            _budgetPlanningProcessRecId,
            0,
            _budgetingOrganizationRecId,
            _budgetPlanningStageRecId,
            _isHistorical,
            _doFilterByFirstWorkflowStage,
            _unitOfMeasureClass,
            _unitOfMeasureToExclude,
            _doFilterByBudgetProcessStageRule,
            _doFilterByEditableElements);

        budgetPlanLookupHelper.addQueryRanges(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTableQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a <c>Query</c> object to return <c>AssetTable</c> records.
    /// </summary>
    /// <param name = "_assetIdToFilter"> The <c>AssetId</c> value to filter records on; optional. </param>
    /// <returns> The <c>Query</c> object to retrieve <c>AssetTable</c> records. </returns>
    public static Query getAssetTableQuery(AssetId _assetIdToFilter = '')
    {
        Query assetTableQuery = new Query(queryStr(AssetTableNotSoldScrappedFiltered));

        if (_assetIdToFilter)
        {
            BudgetPlanLookupHelper budgetPlanLookupHelper = BudgetPlanLookupHelper::construct();
            budgetPlanLookupHelper.parmAssetId(_assetIdToFilter);
            budgetPlanLookupHelper.addQueryRanges(assetTableQuery);
        }

        return assetTableQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjTableQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a <c>Query</c> object to return <c>ProjTable</c> records.
    /// </summary>
    /// <param name = "_projIdToFilter"> The <c>ProjId</c> value to filter records on; optional. </param>
    /// <returns> The <c>Query</c> object to retrieve <c>ProjTable</c> records. </returns>
    public static Query getProjTableQuery(ProjId _projIdToFilter = '')
    {
        Query projTableQuery = ProjTable::getProjTableByStatusTypeRuleQuery();

        if (_projIdToFilter)
        {
            BudgetPlanLookupHelper budgetPlanLookupHelper = BudgetPlanLookupHelper::construct();
            budgetPlanLookupHelper.parmProjId(_projIdToFilter);
            budgetPlanLookupHelper.addQueryRanges(projTableQuery);
        }

        return projTableQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAlternateLayoutsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a <c>Query</c> object to return <c>BudgetPlanLayout</c> records.
    /// </summary>
    /// <param name = "_processRecId"> The record ID of the <c>BudgetPlanningProcess</c> record. </param>
    /// <param name = "_budgetingOrgRecId"> The record ID of the <c>BudgetingOrganization</c> record. </param>
    /// <param name = "_planningStageRecId"> The record ID of the <c>BudgetPlanningStage</c> record. </param>
    /// <returns> The <c>Query</c> object to retrieve <c>BudgetPlanLayout</c> records. </returns>
    public static Query getAlternateLayoutsQuery(
        BudgetPlanningProcessRecId  _processRecId,
        BudgetingOrganizationRecId  _budgetingOrgRecId,
        BudgetPlanningStageRecId    _planningStageRecId)
    {
        Query                   query = new Query(queryStr(BudgetPlanTranslatedLayouts));
        BudgetPlanningStageRule budgetPlanningStageRule = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                                _processRecId,
                                                                _budgetingOrgRecId,
                                                                _planningStageRecId);
        QueryBuildDataSource    layoutDataSource = query.dataSourceTable(tableNum(BudgetPlanLayout));

        layoutDataSource.addRange(fieldNum(BudgetPlanLayout, RecId)).value(SysQuery::value(budgetPlanningStageRule.Layout));

        BudgetPlanAlternateLayout alternateLayout;
        while select BudgetPlanLayout from alternateLayout
            where alternateLayout.BudgetPlanningStageRule == budgetPlanningStageRule.RecId
        {
            layoutDataSource.addRange(fieldNum(BudgetPlanLayout, RecId)).value(SysQuery::value(alternateLayout.BudgetPlanLayout));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a given <c>Query</c> object to have various ranges based on the attributes that are set on an instance of the class.
    /// </summary>
    /// <param name = "_query"> The <c>Query</c> object to modify. </param>
    public void addQueryRanges(Query _query)
    {
        QueryBuildDataSource        queryBuilderDataSource;
        QueryBuildRange             queryRange;
        int                         dataSourceCount;
        int                         dataSourceIndex;
        BudgetPlanningStageRecId    lastBudgetPlanningStageRecId;

        if (!_query)
        {
            throw error(strfmt("@Budget:MissingParameterValue", methodStr(BudgetPlanLookupHelper, addQueryRanges), classstr(Query)));
        }

        dataSourceCount = _query.dataSourceCount();

        // Get each datasource and add ranges for specific tables
        for (dataSourceIndex = 1; dataSourceIndex <= dataSourceCount; dataSourceIndex++)
        {
            queryBuilderDataSource = _query.dataSourceNo(dataSourceIndex);

            switch (queryBuilderDataSource.table())
            {
                case tablenum(BudgetPlanScenario):
                    if (unitOfMeasureClass != UnitOfMeasureClass::Undefined)
                    {
                        // Filter by Unit of Measure to include
                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(BudgetPlanScenario, UnitOfMeasureClass));
                        queryRange.value(SysQuery::value(unitOfMeasureClass));
                    }

                    if (unitOfMeasureToExclude != UnitOfMeasureClass::Undefined)
                    {
                        // Filter by Unit of Measure to exclude
                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(BudgetPlanScenario, UnitOfMeasureClass));
                        queryRange.value(SysQuery::valueNot(unitOfMeasureToExclude));
                    }
                    break;

                case tablenum(BudgetPlanningStageRule):
                    // Filter by the Process, required.
                    queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(BudgetPlanningStageRule, BudgetPlanningProcess));
                    queryRange.value(SysQuery::value(budgetPlanningProcessRecId));

                    if (isHistorical == NoYes::No && doFilterByBudgetProcessStageRule)
                    {
                        // Filter by Stage-Rule: Can modify lines
                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(BudgetPlanningStageRule, CanModifyBudgetPlanLines));
                        queryRange.value(SysQuery::value(NoYes::Yes));
                    }
                    break;

                case tablenum(BudgetPlanningProcessAdministration):
                    if (budgetingOrganizationRecId)
                    {
                        // Filter by the Org
                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(BudgetPlanningProcessAdministration, BudgetingOrganization));
                        queryRange.value(SysQuery::value(budgetingOrganizationRecId));

                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(BudgetPlanningProcessAdministration, BudgetPlanningProcess));
                        queryRange.value(SysQuery::value(budgetPlanningProcessRecId));
                    }
                    break;

                case tablenum(BudgetPlanningWorkflowStage):
                    if (doFilterByFirstWorkflowStage)
                    {
                        // Filter by first workflow stage.
                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(BudgetPlanningWorkflowStage, PriorBudgetPlanningWorkflowStage));
                        queryRange.value(SysQuery::value(0));
                    }
                    else if (budgetPlanningStageRecId)
                    {
                        // Filter by the current stage
                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(BudgetPlanningWorkflowStage, BudgetPlanningStage));
                        queryRange.value(SysQuery::value(budgetPlanningStageRecId));
                    }
                    else if (isHistorical == NoYes::Yes)
                    {
                        lastBudgetPlanningStageRecId = BudgetPlanningWorkflowSetup::getLastPlanningStage(budgetPlanningProcessRecId, budgetingOrganizationRecId).RecId;

                        // Filter by the last stage
                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(BudgetPlanningWorkflowStage, BudgetPlanningStage));
                        queryRange.value(SysQuery::value(lastBudgetPlanningStageRecId));
                    }
                    break;

                case tablenum(BudgetPlanLayoutElement):
                    if (budgetPlanLayoutRecId)
                    {
                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(BudgetPlanLayoutElement, Layout));
                        queryRange.value(SysQuery::value(budgetPlanLayoutRecId));
                    }

                    if (doFilterByEditableElements)
                    {
                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(BudgetPlanLayoutElement, IsEditable));
                        queryRange.value(SysQuery::value(NoYes::Yes));
                    }
                    break;

                case tablenum(AssetTable):
                    if (assetId)
                    {
                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(AssetTable, AssetId));
                        queryRange.value(SysQuery::value(assetId));
                    }
                    break;

                case tablenum(ProjTable):
                    if (projId)
                    {
                        queryRange = SysQuery::findOrCreateRange(queryBuilderDataSource, fieldnum(ProjTable, ProjId));
                        queryRange.value(SysQuery::value(projId));
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for budget plan justification document records.
    /// </summary>
    /// <param name = "_formStringControl"> The form string control to bind the lookup to. </param>
    public static void lookupBudgetPlanTemplates(FormStringControl _formStringControl)
    {
        if (!_formStringControl)
        {
            throw error(strfmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLookupHelper, lookupBudgetPlanTemplates), classstr(FormStringControl)));
        }

        Query query = new Query();
        QueryBuildDataSource docuTemplateDataSource = query.addDataSource(tableNum(DocuTemplate));
        QueryBuildDataSource budgetPlanTemplateDataSource = docuTemplateDataSource.addDataSource(tableNum(BudgetPlanTemplate));
        budgetPlanTemplateDataSource.joinMode(JoinMode::InnerJoin);
        budgetPlanTemplateDataSource.relations(true);

        SysTableLookup tableLookup = SysTableLookup::newParameters(tableNum(DocuTemplate), _formStringControl, true);
        tableLookup.addLookupfield(fieldNum(DocuTemplate, DisplayName));
        tableLookup.addLookupfield(fieldNum(DocuTemplate, Description));
        tableLookup.parmQuery(query);

        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCurrentAndAlternateLayouts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for records in the <c>BudgetPlanLayout</c> table.
    /// </summary>
    /// <param name = "_formStringControl"> The form string control to bind the lookup to. </param>
    /// <param name = "_processRecId"> The record ID of the <c>BudgetPlanningProcess</c> record. </param>
    /// <param name = "_budgetingOrgRecId"> The record ID of the <c>BudgetingOrganization</c> record. </param>
    /// <param name = "_planningStageRecId"> The record ID of the <c>BudgetPlanningStage</c> record. </param>
    public static void lookupCurrentAndAlternateLayouts(
        FormStringControl           _formStringControl,
        BudgetPlanningProcessRecId  _processRecId,
        BudgetingOrganizationRecId  _budgetingOrgRecId,
        BudgetPlanningStageRecId    _planningStageRecId)
    {
        if (_formStringControl == null)
        {
            throw error(strfmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLookupHelper, lookupCurrentAndAlternateLayouts), classstr(FormStringControl)));
        }
        else if (!_processRecId)
        {
            throw error(strfmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLookupHelper, lookupCurrentAndAlternateLayouts), extendedTypeId2pname(extendedTypeNum(BudgetPlanningProcessRecId))));
        }
        else if (!_budgetingOrgRecId)
        {
            throw error(strfmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLookupHelper, lookupCurrentAndAlternateLayouts), extendedTypeId2pname(extendedTypeNum(BudgetingOrganizationRecId))));
        }
        else if (!_planningStageRecId)
        {
            throw error(strfmt("@Budget:MissingParameterValue",  staticMethodStr(BudgetPlanLookupHelper, lookupCurrentAndAlternateLayouts), extendedTypeId2pname(extendedTypeNum(BudgetPlanningStageRecId))));
        }

        SysTableLookup tableLookup = SysTableLookup::newParameters(tableNum(BudgetPlanLayoutTranslation), _formStringControl, true);

        // Add fields that will be shown in the lookup form as columns
        tableLookup.addLookupfield(fieldNum(BudgetPlanLayoutTranslation, Name));
        tableLookup.addLookupfield(fieldNum(BudgetPlanLayoutTranslation, Description));

        tableLookup.parmQuery(BudgetPlanLookupHelper::getAlternateLayoutsQuery(_processRecId, _budgetingOrgRecId, _planningStageRecId));

        // Perform the lookup and return the selected record
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAllocationScenarios</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanScenario</c> records that can be used in allocation.
    /// </summary>
    /// <param name = "_formStringControl"> The form string control to bind the lookup to. </param>
    /// <param name = "_budgetPlanHeader"> The record ID of the <c>BudgetPlanHeader</c> record. </param>
    /// <param name = "_allocateType"> The <c>BudgetPlanAllocateType</c> that has been selected. </param>
    /// <param name = "_filterByEditableElements"> Boolean to indicate if the scenario records should be filtered by only editable layout elements; optional. </param>
    /// <param name = "_scenarioName"> The <c>BudgetPlanScenarioName</c> value to locate the unit of measure to filter by. </param>
    /// <param name = "_findByLines"> Boolean to indicate if the scenario records should be retrieved based on their usage in lines; optional. </param>
    /// <param name = "_isTargetScenario"> Boolean to indicate if the scenario records should be retrieved for children of the header; optional. </param>
    public static void lookupAllocationScenarios(
        FormStringControl       _formStringControl,
        BudgetPlanHeader        _budgetPlanHeader,
        BudgetPlanAllocateType  _allocateType,
        boolean                 _filterByEditableElements = false,
        BudgetPlanScenarioName  _scenarioName = BudgetPlanningConstants::emptyString,
        boolean                 _findByLines = false,
        boolean                 _isTargetScenario = false)
    {
        if (_formStringControl == null)
        {
            throw error(Error::missingParameter(null));
        }
        if (_budgetPlanHeader == null)
        {
            throw error(strfmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLookupHelper, lookupAllocationScenarios), tableStr(BudgetPlanHeader)));
        }

        UnitOfMeasureClass unitOfMeasureClass = UnitOfMeasureClass::Undefined;
        if (_scenarioName != BudgetPlanningConstants::emptyString)
        {
            unitOfMeasureClass = BudgetPlanScenario::findByLocalizedName(_scenarioName).UnitOfMeasureClass;
        }

        boolean retrieveByChildrenLayouts;
        if ((_isTargetScenario && _allocateType == BudgetPlanAllocateType::AllocateByParent)
            || (!_isTargetScenario && _allocateType == BudgetPlanAllocateType::AllocateByChildren))
        {
            retrieveByChildrenLayouts = true;
        }

        Query           query = BudgetPlanLookupHelper::getAllocationScenariosQuery(_budgetPlanHeader,_filterByEditableElements, unitOfMeasureClass, _findByLines, retrieveByChildrenLayouts);
        SysTableLookup  tableLookup = SysTableLookup::newParameters(tableNum(BudgetPlanScenarioTranslation), _formStringControl, true);

        tableLookup.addLookupfield(fieldNum(BudgetPlanScenarioTranslation, Name));
        tableLookup.addLookupfield(fieldNum(BudgetPlanScenarioTranslation, Description));

        tableLookup.parmQuery(query);

        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationScenariosQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a <c>Query</c> object to return <c>BudgetPlanScenario</c> records for use in allocation.
    /// </summary>
    /// <param name = "_budgetPlanHeader"> The record ID of the <c>BudgetPlanHeader</c> record. </param>
    /// <param name = "_filterByEditableElements"> Boolean to indicate if the scenario records should be filtered by only editable layout elements; optional. </param>
    /// <param name = "_unitOfMeasure"> The <c>UnitOfMeasureClass</c> value to filter scenario records; optional. </param>
    /// <param name = "_findByLines"> Boolean to indicate if the scenario records should be retrieved based on their usage in lines; optional. </param>
    /// <param name = "_findChildrenScenarios"> Boolean to indicate if the scenario records should be retrieved for children of the header; optional. </param>
    /// <returns> A <c>Query</c> object. </returns>
    public static Query getAllocationScenariosQuery(
        BudgetPlanHeader    _budgetPlanHeader,
        boolean             _filterByEditableElements = false,
        UnitOfMeasureClass  _unitOfMeasure = UnitOfMeasureClass::Undefined,
        boolean             _findByLines = false,
        boolean             _findChildrenScenarios = false)
    {
        Query                query = new Query(queryStr(BudgetPlanTranslatedScenarios));
        QueryBuildDataSource scenarioDataSource = query.dataSourceTable(tableNum(BudgetPlanScenario));
        QueryBuildDataSource layoutElementDataSource = query.dataSourceTable(tableNum(BudgetPlanLayoutElement));
        QueryBuildDataSource headerDataSource;

        if (_filterByEditableElements)
        {
            layoutElementDataSource.addRange(fieldNum(BudgetPlanLayoutElement, IsEditable)).value(SysQuery::value(NoYes::Yes));
        }

        if (_unitOfMeasure != UnitOfMeasureClass::Undefined)
        {
            scenarioDataSource.addRange(fieldNum(BudgetPlanScenario, UnitOfMeasureClass)).value(SysQuery::value(_unitOfMeasure));
        }

        if (_findByLines)
        {
            QueryBuildDataSource lineDataSource = scenarioDataSource.addDataSource(tableNum(BudgetPlanLine));
            lineDataSource.relations(false);
            lineDataSource.addLink(fieldNum(BudgetPlanScenario, RecId), fieldNum(BudgetPlanLine, BudgetPlanScenario));
            lineDataSource.joinMode(JoinMode::ExistsJoin);

            headerDataSource = lineDataSource.addDataSource(tableNum(BudgetPlanHeader));
            headerDataSource.relations(false);
            headerDataSource.addLink(fieldNum(BudgetPlanLine, BudgetPlanHeader), fieldNum(BudgetPlanHeader, RecId));
            headerDataSource.joinMode(JoinMode::ExistsJoin);
        }
        else
        {
            headerDataSource = layoutElementDataSource.addDataSource(tableNum(BudgetPlanHeader));
            headerDataSource.relations(false);
            headerDataSource.addLink(fieldNum(BudgetPlanLayoutElement, Layout), fieldNum(BudgetPlanHeader, Layout));
            headerDataSource.joinMode(JoinMode::ExistsJoin);
        }

        if (_findChildrenScenarios)
        {
            headerDataSource.addRange(fieldNum(BudgetPlanHeader, ParentBudgetPlanHeader)).value(SysQuery::value(_budgetPlanHeader.RecId));
        }
        else
        {
            headerDataSource.addRange(fieldNum(BudgetPlanHeader, RecId)).value(SysQuery::value(_budgetPlanHeader.RecId));
            layoutElementDataSource.addRange(fieldNum(BudgetPlanLayoutElement, Layout)).value(SysQuery::value(_budgetPlanHeader.Layout));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanTranslatedScenarios</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanScenario</c> records.
    /// </summary>
    /// <param name="_formStringControl"> The form control on which the lookup will be performed. </param>
    /// <param name="_unitOfMeasure"> The <c>UnitOfMeasureClass</c> to filter by; optional. </param>
    public static void lookupBudgetPlanTranslatedScenarios(FormStringControl _formStringControl, UnitOfMeasureClass _unitOfMeasure = UnitOfMeasureClass::Undefined)
    {
        if (_formStringControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        SysTableLookup tableLookup = SysTableLookup::newParameters(tableNum(BudgetPlanScenarioTranslation), _formStringControl, true);

        tableLookup.addLookupfield(fieldNum(BudgetPlanScenarioTranslation, Name));
        tableLookup.addLookupfield(fieldNum(BudgetPlanScenarioTranslation, Description));

        Query query = new Query(queryStr(BudgetPlanScenarioTranslationAll));

        if (!prmIsDefault(_unitOfMeasure))
        {
            QueryBuildDataSource scenarioDataSource = query.dataSourceTable(tableNum(BudgetPlanScenario));
            scenarioDataSource.addRange(fieldNum(BudgetPlanScenario, UnitOfMeasureClass)).value(enum2Value(_unitOfMeasure));
        }

        tableLookup.parmQuery(query);

        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupForecastPositionReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for records in the <c>HcmPositionForecast</c> table.
    /// </summary>
    /// <param name="_formReferenceControl"> The form reference control to bind the lookup to. </param>
    /// <returns> The selected <c>HcmPosition</c> records. </returns>
    /// <exception cref="M:Exception::Error"> The required parameters are null. </exception>
    public static HcmPosition lookupForecastPositionReference(FormReferenceControl _formReferenceControl)
    {
        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        SysReferenceTableLookup referenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(HcmPositionForecast), _formReferenceControl);

        referenceTableLookup.addLookupField(fieldNum(HcmPositionForecast, Position));
        referenceTableLookup.addLookupMethod(tableMethodStr(HcmPositionForecast, title));
        referenceTableLookup.addLookupMethod(tableMethodStr(HcmPositionForecast, worker));
        referenceTableLookup.addSelectionField(fieldNum(HcmPositionForecast, Position));

        return referenceTableLookup.performFormLookup() as HcmPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupForecastPositionReferenceV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for records in the <c>HcmPositionForecast</c> table.
    /// </summary>
    /// <param name="_formReferenceControl"> The form reference control to bind the lookup to. </param>
    /// <returns> The selected <c>HcmPosition</c> records. </returns>
    /// <exception cref="M:Exception::Error"> The required parameters are null. </exception>
    public static HcmPosition lookupForecastPositionReferenceV2(FormReferenceControl _formReferenceControl)
    {
        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        SysReferenceTableLookup referenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(HcmPositionForecast), _formReferenceControl);

        referenceTableLookup.addLookupField(fieldNum(HcmPositionForecast, Position));
        referenceTableLookup.addLookupMethod(tableMethodStr(HcmPositionForecast, titleV2));
        referenceTableLookup.addLookupMethod(tableMethodStr(HcmPositionForecast, worker));
        referenceTableLookup.addSelectionField(fieldNum(HcmPositionForecast, Position));

        return referenceTableLookup.performFormLookup() as HcmPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanningProcessQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a <c>Query</c> object to return <c>BudgetPlanningProcess</c> records.
    /// </summary>
    /// <param name="_filterByCurrentLedger"> Determines whether to filter the <c>BudgetPlanningProcess</c> by the current ledger. </param>
    /// <param name="_filterByInProcess"> Determines whether to filter the <c>BudgetPlanningProcess</c> by active processes. </param>
    /// <returns> The <c>BudgetPlanningProcess</c> record selected by the lookup. </returns>
    /// <remarks> The query returned will return processes which are completed or in process if the _filterByInProcess parameter is false. </remarks>
    public static Query getBudgetPlanningProcessQuery(boolean _filterByCurrentLedger, boolean _filterByInProcess)
    {
        Query                   query = new Query();
        QueryBuildDataSource    processDataSource = query.addDataSource(tableNum(BudgetPlanningProcess));

        if (_filterByInProcess)
        {
            processDataSource.addRange(fieldNum(BudgetPlanningProcess, ApprovalProcessState))
                                .value(SysQuery::value(BudgetPlanningApprovalProcessState::InProcess));
        }
        else
        {
            processDataSource.addRange(fieldNum(BudgetPlanningProcess, ApprovalProcessState))
                                .value(SysQuery::valueNot(BudgetPlanningApprovalProcessState::Draft));
        }

        if (_filterByCurrentLedger)
        {
            processDataSource.addRange(fieldNum(BudgetPlanningProcess, Ledger))
                                .value(SysQuery::value(Ledger::current()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanningProcessReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanningProcess</c> records.
    /// </summary>
    /// <param name="_formReferenceControl"> The form reference control to find. </param>
    /// <param name="_filterByCurrentLedger"> Determines whether to filter the <c>BudgetPlanningProcess</c> by the current ledger; optional. </param>
    /// <param name="_filterByInProcess"> Determines whether to filter the <c>BudgetPlanningProcess</c> by active processes; optional. </param>
    /// <returns> The <c>BudgetPlanningProcess</c> record selected by the lookup. </returns>
    public static BudgetPlanningProcess lookupBudgetPlanningProcessReference(
        FormReferenceControl    _formReferenceControl,
        boolean                 _filterByCurrentLedger = false,
        boolean                 _filterByInProcess = true)
    {
        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        SysReferenceTableLookup referenceLookup = SysReferenceTableLookup::newParameters(tableNum(BudgetPlanningProcess), _formReferenceControl, true);

        // Add fields that will be shown in the lookup form as columns
        referenceLookup.addLookupfield(fieldNum(BudgetPlanningProcess, Name));
        referenceLookup.addLookupfield(fieldNum(BudgetPlanningProcess, Description));
        referenceLookup.addLookupfield(fieldNum(BudgetPlanningProcess, Ledger));

        Query query = BudgetPlanLookupHelper::getBudgetPlanningProcessQuery(_filterByCurrentLedger, _filterByInProcess);

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as BudgetPlanningProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>Query</c> object to retrieve dimension values for a given <c>DimensionAttribute</c> record.
    /// </summary>
    /// <param name = "_dimensionAttribute">The <c>DimensionAttribute</c> record.</param>
    /// <param name = "_ledger">The <c>Ledger</c> record.</param>
    /// <returns>The <c>Query</c> object.</returns>
    public static Query getDimensionValueQuery(DimensionAttribute _dimensionAttribute, Ledger _ledger)
    {
        DimensionAttributeViewContract  dimAttrViewContract = DimensionAttribute::getViewContract(_dimensionAttribute.RecId);
        Query                           query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(dimAttrViewContract.parmViewId());
        queryBuildDataSource.addSortField(dimAttrViewContract.parmValueFieldId());

        DimensionAttribute::addTranslViewRangesToBackingEntityQuery(_dimensionAttribute.RecId, queryBuildDataSource);

        if (DimensionCache::instance().dimensionAttributeHasCategorization(_dimensionAttribute.RecId))
        {
            if (_dimensionAttribute.BackingEntityType == tablenum(DimensionFinancialTag))
            {
                queryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(DimensionAttributeDirCategory), 'DimAttDirCat');
                queryBuildDataSource.relations(true);
                queryBuildDataSource.joinMode(JoinMode::InnerJoin);
                queryBuildDataSource.fetchMode(QueryFetchMode::One2One);
                queryBuildDataSource.addLink(dimAttrViewContract.parmCategoryFieldId(), fieldnum(DimensionAttributeDirCategory, DirCategory));
                queryBuildDataSource.addRange(fieldnum(DimensionAttributeDirCategory, DimensionAttribute)).value(strfmt('%1', _dimensionAttribute.RecId));
            }
            else if (_dimensionAttribute.Type == DimensionAttributeType::MainAccount)
            {
                QueryBuildDataSource dimAttributeMainAccount = query.dataSourceTable(tablenum(DimAttributeMainAccount));
                dimAttributeMainAccount.addRange(fieldnum(DimAttributeMainAccount, Category)).value(queryValue(_ledger.ChartOfAccounts));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHcmPositionTableQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a <c>Query</c> object to return <c>HcmPosition</c> records.
    /// </summary>
    /// <returns>The <c>Query</c> object.</returns>
    public static Query getHcmPositionTableQuery()
    {
        Query query = new Query();
        QueryBuildDataSource hcmPositionDS = query.addDataSource(tableNum(HcmPosition));
        QueryBuildDataSource hcmPositionForecastDS = hcmPositionDS.addDataSource(tableNum(HcmPositionForecast));
        hcmPositionForecastDS.relations(false);
        hcmPositionForecastDS.addLink(fieldNum(HcmPosition, RecId), fieldNum(HcmPositionForecast, Position));
        hcmPositionForecastDS.joinMode(JoinMode::ExistsJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanHeaderAncestors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the budget plan ancestors document number records in the <c>BudgetPlanHeader</c> table.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form string control to perform the lookup for.
    /// </param>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void lookupBudgetPlanHeaderAncestors(
        FormStringControl     _formStringControl,
        BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        Query          query = new Query();
        SysTableLookup tableLookup;

        if (_formStringControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        if (!_budgetPlanHeaderRecId)
        {
            throw error(strfmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLookupHelper, lookupBudgetPlanHeaderAncestors), fieldStr(BudgetPlanHeader, RecId)));
        }

        query.addDataSource(tableNum(BudgetPlanHeaderTmp));
        tableLookup = SysTableLookup::newParameters(tableNum(BudgetPlanHeaderTmp), _formStringControl, true);

        tableLookup.parmTmpBuffer(BudgetPlanLookupHelper::populateBudgetPlanHeaderAncestors(_budgetPlanHeaderRecId));

        // Add fields that will be shown in the lookup form as columns
        tableLookup.addLookupfield(fieldNum(BudgetPlanHeaderTmp, DocumentNumber));
        tableLookup.addLookupfield(fieldNum(BudgetPlanHeaderTmp, Name));

        // Add the query to the lookup form
        tableLookup.parmQuery(query);

        // Perform the lookup
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBudgetPlanHeaderAncestors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the budget plan ancestors data in the <c>BudgetPlanHeaderTmp</c> table.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// The temporary table populates with ancestors plans.
    /// </returns>
    public static BudgetPlanHeaderTmp populateBudgetPlanHeaderAncestors(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        // Populates the temporary table
        BudgetPlanHeaderRecId parentBudgetPlanHeaderRecId = BudgetPlanHeader::find(_budgetPlanHeaderRecId).ParentBudgetPlanHeader;
        BudgetPlanHeader      budgetPlanHeader;
        BudgetPlanHeaderTmp   budgetPlanHeaderTmp;

        while (parentBudgetPlanHeaderRecId)
        {
            select firstonly Name, DocumentNumber, ParentBudgetPlanHeader from budgetPlanHeader
                where budgetPlanHeader.RecId == parentBudgetPlanHeaderRecId;

            if (budgetPlanHeader.RecId)
            {
                budgetPlanHeaderTmp.Name = budgetPlanHeader.Name;
                budgetPlanHeaderTmp.DocumentNumber = budgetPlanHeader.DocumentNumber;
                budgetPlanHeaderTmp.insert();
            }

            parentBudgetPlanHeaderRecId = budgetPlanHeader.ParentBudgetPlanHeader;
        }

        return budgetPlanHeaderTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>