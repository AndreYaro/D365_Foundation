<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetDepreciationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Report Data Provider <c>RAssetDepreciationDP</c> class for <c>RAssetDepreciation</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(RAssetTable)),
    SRSReportParameterAttribute(classStr(RAssetDepreciationContract))
]
class rAssetDepreciationDP extends SRSReportDataProviderBase
{
    RAssetDepreciationTMP   rAssetDepreciationTMP;
    TransDate               beginDate;
    TransDate               endDate;
    RAssetAmount            acquisitionPrice;
    RAssetAmount            acquisitionAdj;
    RAssetAmount            soldScrap;
    RAssetAmount            netBook;
    RAssetAmount            acquisitionStart;
    RAssetAmount            depreciationPeriod;
    RAssetAmount            depreciationYear;
    RAssetAmount            depreciationStart;
    RAssetAmount            netBookValueStart;
    str                     attachDocumentPurch;
    str                     attachDocumentSale;
    str                     disposalReason;
    int                     tekNumber;
    NoYes                   zeroBookValue;
    RAssetStandardId        rAssetStandardId;
    #define.Value123(123)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSum</Name>
				<Source><![CDATA[
    private void calcSum(RAssetTable _rAssetTable)
    {
        RAssetTrans             rAssetTrans;
        RAssetSumCalc           rassetSumTrans;
        RAssetStandardIdDefault standardIdDefault = RAssetParameters::find().StandardIdDefault;
        ;

        acquisitionPrice    = 0.;
        attachDocumentPurch = "";
        attachDocumentSale  = "";
        disposalReason      = "";
        soldScrap           = 0;

        rassetSumTrans      = RAssetSumCalc_Trans::newAssetPeriod(_rAssetTable.AccountNum,
                                                                  rAssetStandardId,
                                                                  beginDate-1);

        if (rAssetStandardId == standardIdDefault)
        {
            acquisitionStart  = rassetSumTrans.acquisitionTotalMST() - rassetSumTrans.takeDownAcqAdjValueMST();
            depreciationStart = abs(rassetSumTrans.depreciationTotalMST() - rassetSumTrans.takeDownDeprAdjValueMST());
        }
        else
        {
            acquisitionStart  = rassetSumTrans.acquisitionTotal() - rassetSumTrans.takeDownAcqAdjValue();
            depreciationStart = abs(rassetSumTrans.depreciationTotal() - rassetSumTrans.takeDownDeprAdjValue());
        }

        select firstonly rAssetTrans
            order by TransDate asc
            where rAssetTrans.AccountNum      == _rAssetTable.AccountNum       &&
                  rAssetTrans.AssetStandardId == rAssetStandardId             &&
                  rAssetTrans.AssetTransType  == RAssetTransType::Acquisition &&
                  ! rAssetTrans.StornoRecId;

        if (rAssetTrans && rAssetTrans.TransDate >= beginDate && rAssetTrans.TransDate <= endDate)
        {
            acquisitionPrice = (rAssetTrans.AssetStandardId == standardIdDefault ?
                                rAssetTrans.AmountMST : rAssetTrans.AmountCur);
        }

        rassetSumTrans.parmDateFrom(beginDate);
        rassetSumTrans.parmDateTo(endDate);

        if (rAssetStandardId == standardIdDefault)
        {
            acquisitionAdj     = rassetSumTrans.acquisitionTotalMST() - acquisitionPrice - rassetSumTrans.takeDownAcqAdjValueMST();
            netBook            = abs(rassetSumTrans.disposalDisposedValueMST() +
                                     rassetSumTrans.disposalSaleValueMST()     +
                                     rassetSumTrans.disposalScrapValueMST());
            netBook            = netBook ? netBook : abs(rassetSumTrans.takeDownAcqAdjValueMST() + rassetSumTrans.takeDownDeprAdjValueMST());
            depreciationPeriod = abs(rassetSumTrans.depreciationTotalMST() - rassetSumTrans.takeDownDeprAdjValueMST());
        }
        else
        {
            acquisitionAdj     = rassetSumTrans.acquisitionTotal() - acquisitionPrice + rassetSumTrans.takeDownAcqAdjValue();
            netBook            = abs(rassetSumTrans.disposalDisposedValue() +
                                     rassetSumTrans.disposalSaleValue()     +
                                     rassetSumTrans.disposalScrapValue());
            netBook            = netBook ? netBook : abs(rassetSumTrans.takeDownAcqAdjValue() + rassetSumTrans.takeDownDeprAdjValue());
            depreciationPeriod = abs(rassetSumTrans.depreciationTotal() - rassetSumTrans.takeDownDeprAdjValue());
        }

        while select * from rAssetTrans
            order by TransDate asc
            where rAssetTrans.AccountNum      == _rAssetTable.AccountNum &&
                  rAssetTrans.AssetStandardId == rAssetStandardId       &&
                  rAssetTrans.AssetTransType  != RAssetTransType::Other &&
                  rAssetTrans.TransDate       >= beginDate              &&
                  rAssetTrans.TransDate       <= endDate                &&
                  ! rAssetTrans.StornoRecId
        {
            if ((rAssetTrans.AssetTransType == RAssetTransType::Acquisition    ||
                 rAssetTrans.AssetTransType == RAssetTransType::AcquisitionAdj ||
                 rAssetTrans.AssetTransType == RAssetTransType::Revaluation    ||
                 rAssetTrans.AssetTransType == RAssetTransType::WriteUpAdj)    &&
                 rAssetTrans.PostingType    != RAssetPostingType::PartialTakeDown)
            {

                attachDocumentPurch = rAssetTrans.AttachDocumentDate ?
                                      date2str(rAssetTrans.AttachDocumentDate, 123, DateDay::Digits2, DateSeparator::Dot, DateMonth::Digits2, DateSeparator::Dot, DateYear::Digits4, DateFlags::None) +
                                      strFmt("@GLS106007", rAssetTrans.AttachDocumentNumber) :
                                      attachDocumentPurch;
            }
            else if (rAssetTrans.AssetTransType == RAssetTransType::DisposalSale  ||
                     rAssetTrans.AssetTransType == RAssetTransType::DisposalScrap ||
                     rAssetTrans.AssetTransType == RAssetTransType::Disposal      ||
                     rAssetTrans.PostingType    == RAssetPostingType::PartialTakeDown)
            {
                attachDocumentSale = rAssetTrans.AttachDocumentDate ?
                                     date2str(rAssetTrans.AttachDocumentDate, #Value123, DateDay::Digits2, DateSeparator::Dot, DateMonth::Digits2, DateSeparator::Dot, DateYear::Digits4, DateFlags::None) +
                                     strFmt("@GLS106007", rAssetTrans.AttachDocumentNumber) :
                                     attachDocumentPurch;

                if (rAssetTrans.PostingType == RAssetPostingType::PartialTakeDown)
                {
                    rassetSumTrans.parmDateFrom(beginDate);
                    if (rAssetStandardId == standardIdDefault)
                    {
                        soldScrap = abs(rassetSumTrans.takeDownAcqAdjValueMST());
                    }
                    else
                    {
                        soldScrap = abs(rassetSumTrans.takeDownAcqAdjValue());
                    }
                }
                else
                {
                    rassetSumTrans.parmDateFrom(dateNull());
                    if (rAssetStandardId == standardIdDefault)
                    {
                        soldScrap = rassetSumTrans.acquisitionTotalMST() - rassetSumTrans.takeDownAcqAdjValueMST();
                    }
                    else
                    {
                        soldScrap = rassetSumTrans.acquisitionTotal() - rassetSumTrans.takeDownAcqAdjValue();
                    }
                }

                switch (rAssetTrans.AssetTransType)
                {
                    case RAssetTransType::DisposalSale:
                        disposalReason = "@SYS10139";
                        break;
                    case RAssetTransType::DisposalScrap,
                         RAssetTransType::Disposal:
                        disposalReason = "@GLS116458";
                        break;
                    default:
                        disposalReason = "@GLS116983";
                        break;
                }
            }
        }

        tekNumber++;

        rassetSumTrans.parmDateFrom(mkDate(1, 1, year(beginDate)));
        rassetSumTrans.parmDateTo(beginDate-1);

        if (rAssetStandardId == standardIdDefault)
        {
            depreciationYear = abs(rassetSumTrans.depreciationTotalMST() - rassetSumTrans.takeDownDeprAdjValueMST());
        }
        else
        {
            depreciationYear = abs(rassetSumTrans.depreciationTotal() - rassetSumTrans.takeDownDeprAdjValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRAssetDepreciationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// Temporary table <c>RAssetDepreciationTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(RAssetDepreciationTMP))
    ]
    public RAssetDepreciationTMP getRAssetDepreciationTmp()
    {
        return rAssetDepreciationTMP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDepreciationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts all the values into the <c>rAssetDepreciationTmp</c> temporary table.
    /// </summary>
    /// <param name="_rAssetTable">
    /// Passes <c>RAssettable</c> table object.
    /// </param>
    private void insertDepreciationTmp(RAssetTable _rAssetTable)
    {

        rAssetDepreciationTMP.clear();
        rAssetDepreciationTMP.AccountNum            = _rAssetTable.AccountNum;
        rAssetDepreciationTMP.Name                  = _rAssetTable.Name;
        rAssetDepreciationTMP.TekNumber             = tekNumber;
        rAssetDepreciationTMP.AssetQty              = 1;
        rAssetDepreciationTMP.AcquisitionStart      = acquisitionStart;
        rAssetDepreciationTMP.AcquisitionPrice      = acquisitionPrice;
        rAssetDepreciationTMP.AcquisitionAdj        = acquisitionAdj;
        rAssetDepreciationTMP.SoldScrap             = soldScrap;
        rAssetDepreciationTMP.NetBook               = netBook;
        rAssetDepreciationTMP.DisposalReason        = disposalReason;
        rAssetDepreciationTMP.AcquisionStartPeriod  = acquisitionStart + acquisitionPrice + acquisitionAdj - soldScrap;
        rAssetDepreciationTMP.rAssetDepreciationRate= this.rAssetDepreciationRate(_rAssetTable);
        rAssetDepreciationTMP.DepreciationPeriod    = depreciationPeriod;
        rAssetDepreciationTMP.DepreciationYear      = depreciationYear;
        rAssetDepreciationTMP.DepreciationStart     = depreciationStart;
        rAssetDepreciationTMP.AssetGroupTypes       = RAssetMainGroup::find(_rAssetTable.AssetGroup).GroupType;
        rAssetDepreciationTMP.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>notDisposed</Name>
				<Source><![CDATA[
    private boolean notDisposed(RAssetTable _rAssetTable)
    {
        RAssetTrans rAssetTrans, rassetTransStorno;

        select firstonly RecId from rAssetTrans
            where rAssetTrans.AccountNum      == _rAssetTable.AccountNum
                && rAssetTrans.AssetStandardId == rAssetStandardId
                && (rAssetTrans.AssetTransType == RAssetTransType::Disposal
                ||  rAssetTrans.AssetTransType == RAssetTransType::DisposalSale
                ||  rAssetTrans.AssetTransType == RAssetTransType::DisposalScrap
                ||  rAssetTrans.PostingType    == RAssetPostingType::CompanyIssue)
                && rAssetTrans.TransDate       <  beginDate
        notexists join firstonly rassetTransStorno
            where rassetTransStorno.RecId     == rAssetTrans.StornoRecId
                && rassetTransStorno.TransDate <= beginDate;
        return ! rAssetTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun                qr;
        RAssetSumCalc           rAssetSum;
        RAssetTable             rAssetTable;
        RAssetDepreciationContract contract = this.parmDataContract() as RAssetDepreciationContract;

        beginDate            = contract.parmRAssetStartDate();
        endDate             = contract.parmRAssetToDate();
        rAssetStandardId    = contract.parmRAssetStandardId();
        zeroBookValue       = contract.parmZeroBookValue();

        qr  = new QueryRun(this.parmQuery());
        while(qr.next())
        {
            rAssetTable = qr.get(tableNum(RAssetTable));
            rAssetSum   = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum, rAssetStandardId, beginDate-1);
            netBookValueStart = rAssetSum.netBookValueMST();
            rAssetSum.parmDateFrom(beginDate);
            rAssetSum.parmDateTo(endDate);

            if ((zeroBookValue                           &&
                 (netBookValueStart                     ||
                  rAssetSum.netBookValueMST()           ||
                  rAssetSum.acquisitionTotalMST()       ||
                  rAssetSum.depreciationTotalMST()      ||
                  rAssetSum.disposalSaleValueMST()      ||
                  rAssetSum.disposalScrapValueMST()     ||
                  rAssetSum.takeDownAcqAdjValueMST()    ||
                  rAssetSum.takeDownDeprAdjValueMST()   ||
                  rAssetSum.disposalDisposedValueMST()))||
                (! zeroBookValue                        &&
                 this.putIntoOperation(rAssetTable)     &&
                 this.notDisposed(rAssetTable)))
            {
                this.calcSum(rAssetTable);
                this.insertDepreciationTmp(rAssetTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>putIntoOperation</Name>
				<Source><![CDATA[
    private boolean putIntoOperation(RAssetTable _rAssetTable)
    {
        RAssetTrans rAssetTrans, rassetTransStorno;
        select firstonly RecId from rAssetTrans
            where rAssetTrans.AccountNum      == _rAssetTable.AccountNum
                && rAssetTrans.AssetStandardId == rAssetStandardId
                && rAssetTrans.AssetTransType  == RAssetTransType::Acquisition
                && rAssetTrans.TransDate       <= endDate
        notexists join firstonly rassetTransStorno
            where rassetTransStorno.RecId     == rAssetTrans.StornoRecId
                && rassetTransStorno.TransDate <= endDate;
        return rAssetTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetDepreciationRate</Name>
				<Source><![CDATA[
    private RAssetDepreciationRate rAssetDepreciationRate(RAssetTable _rAssetTable)
    {
        RAssetStandards assetStandards = RAssetStandards::find(_rAssetTable.AccountNum, rAssetStandardId);

        if (assetStandards.Say)
        {
            return (select firstonly reverse rassetsayvalue
                        where rassetsayvalue.Say       == assetStandards.Say &&
                              rassetsayvalue.BeginDate <= endDate).DepreciationRate;
        }
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>