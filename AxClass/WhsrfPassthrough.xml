<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRFPassthrough</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsrfPassthrough</c> class is used to store form state during processing RF controls.
/// </summary>
public class WhsrfPassthrough extends Map
{
    private boolean skipEvents;
    private UserId overrideUserIdForDateConversion;
    #WHSRF

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an inventDim from the dimensions in the current pass through values.
    /// </summary>
    /// <param name = "_fieldEnumerator">An enumerator of the fields to include.</param>
    /// <returns>
    /// An inventDim record.
    /// </returns>
    /// <remarks>
    /// This method relies on the keys of the pass through map to match inventDim field names.
    /// </remarks>
    private InventDim createInventDim(Enumerator _fieldEnumerator)
    {
        return InventDim::findOrCreate(this.initInventDimFromPass(_fieldEnumerator));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimFromPass</Name>
				<Source><![CDATA[
    private InventDim initInventDimFromPass(Enumerator _fieldEnumerator)
    {
        InventDim       inventDim;
        boolean         useDimensionType = WHSRFInventDimConfigKeyDimensionInitFromPassthroughFlight::instance().isEnabled();

        while (_fieldEnumerator.moveNext())
        {
            FieldId inventDimFieldId = _fieldEnumerator.current();
            FieldName fieldName = fieldId2name(inventDim.TableId, inventDimFieldId);

            if (this.hasValue(fieldName))
            {
                inventDim.(inventDimFieldId) = useDimensionType ? this.lookupBaseType(fieldName, InventDim::dimFieldType(inventDimFieldId)) : this.lookup(fieldName);
            }
            }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductInventDimFromPass</Name>
				<Source><![CDATA[
    internal InventDim initProductInventDimFromPass()
    {
        return this.initInventDimFromPass(InventDim::dimProductDimFieldList().getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrackingInventDimFromPass</Name>
				<Source><![CDATA[
    internal InventDim initTrackingInventDimFromPass()
    {
        return this.initInventDimFromPass(InventDim::dimTrackingDimFieldList().getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductAndTrackingInventDimFromPass</Name>
				<Source><![CDATA[
    internal InventDim initProductAndTrackingInventDimFromPass()
    {
        List dimList = InventDim::dimProductDimFieldList();
        dimList.appendList(InventDim::dimTrackingDimFieldList());

        return this.initInventDimFromPass(dimList.getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyProductDimensionSpecified</Name>
				<Source><![CDATA[
    internal boolean anyProductDimensionSpecified()
    {
        ListEnumerator enumerator = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();        
        FieldName fieldName;

        while (enumerator.moveNext())
        {
            fieldName = fieldId2name(tableNum(InventDim), enumerator.current());

            if (this.hasValue(fieldName))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyTrackingDimensionSpecified</Name>
				<Source><![CDATA[
    internal boolean anyTrackingDimensionSpecified()
    {
        ListEnumerator enumerator = InventDim::dimTrackingDimEnabledFieldList().getEnumerator();
        FieldName fieldName;

        while (enumerator.moveNext())
        {
            fieldName = fieldId2name(tableNum(InventDim), enumerator.current());

            if (this.hasValue(fieldName))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimFromPass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an inventDim from the current pass through values.
    /// </summary>
    /// <returns>
    /// An inventDim record.
    /// </returns>
    public InventDim createInventDimFromPass()
    {
        return this.createInventDim(InventDim::dimFieldListEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductInventDimFromPass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an inventDim from the product dimensions in the current pass through values.
    /// </summary>
    /// <returns>
    /// An inventDim record.
    /// </returns>
    public InventDim createProductInventDimFromPass()
    {
        return this.createInventDim(InventDim::dimProductDimFieldList().getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given key exists and is not null equivalent.
    /// </summary>
    /// <param name="_key">
    ///    The key.
    /// </param>
    /// <returns>
    ///    true if the key exists and the value is not null equivalent.
    /// </returns>
    public boolean hasValue(anytype _key)
    {
        return    this.exists(_key)
               && this.lookup(_key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the current passthough with the values of <c>InventDim</c> according to the <c>InventDimParm</c> rules.
    /// </summary>
    /// <param name="_inventDim">
    ///     An <c>InventDim</c> record.
    /// </param>
    /// <param name="_inventDimParm">
    ///     An <c>InventDimParm</c> record.
    /// </param>
    public void initFromInventDimParm(InventDim _inventDim, InventDimParm _inventDimParm)
    {
        ListEnumerator  enumerator            = InventDim::dimFieldListEnumerator();
        FieldId         inventDimParmFieldId;
        FieldId         inventDimFieldId;
        str             inventDimFieldValue;
        str             fieldName;
        boolean         checkDimensionNotEmpty = WHSRFPassthroughInitFromInventDimParmEmptyDimensionFlight::instance().isEnabled();

        while (enumerator.moveNext())
        {
            inventDimFieldId     = enumerator.current();
            inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
            inventDimFieldValue  = _inventDim.(inventDimFieldId);

            boolean insertInventDimFieldValue = checkDimensionNotEmpty ? _inventDimParm.(inventDimParmFieldId) && (_inventDim.(inventDimFieldId) != InventDim::emptyDimField(inventDimFieldId))
                                                                       : _inventDimParm.(inventDimParmFieldId) && inventDimFieldValue;

            if (insertInventDimFieldValue)
            {
                fieldName = fieldId2name(tableNum(InventDim), inventDimFieldId);

                if (checkDimensionNotEmpty)
                {
                    this.insert(fieldName, _inventDim.(inventDimFieldId));
                }
                else
                {
                    this.insert(fieldName, inventDimFieldValue);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimFromPassParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the <c>InventDim</c> record with the values of current passthrough according to the <c>InventDimParm</c> rules.
    /// </summary>
    /// <param name="_inventDim">
    ///     An <c>InventDim</c> record.
    /// </param>
    /// <param name="_inventDimParm">
    ///     An <c>InventDimParm</c> record.
    /// </param>
    public void initInventDimFromPassParm(InventDim _inventDim, InventDimParm _inventDimParm)
    {
        ListEnumerator  enumerator = InventDim::dimFieldListEnumerator();
        FieldId         inventDimParmFieldId;
        FieldId         inventDimFieldId;
        str             fieldName;
        boolean         useDimensionType = WHSRFPassthroughInitFromInventDimParmEmptyDimensionFlight::instance().isEnabled();

        while (enumerator.moveNext())
        {
            inventDimFieldId     = enumerator.current();
            fieldName            = fieldId2name(tableNum(InventDim), inventDimFieldId);
            inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);

            if (_inventDimParm.(inventDimParmFieldId) && this.hasValue(fieldName))
            {
                _inventDim.(inventDimFieldId) = useDimensionType ? this.lookupBaseType(fieldName, InventDim::dimFieldType(inventDimFieldId)) : this.lookup(fieldName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event raised when a value is being removed.
    /// </summary>
    /// <param name = "_pass">The instance it is removed from.</param>
    /// <param name = "_keyValue">The key of the value.</param>
    delegate void removing(WhsrfPassthrough _pass, anytype _keyValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event raised when a value was removed.
    /// </summary>
    /// <param name = "_pass">The instance it was removed from.</param>
    /// <param name = "_keyValue">The key of the value.</param>
    delegate void removed(WhsrfPassthrough _pass, anytype _keyValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    public boolean remove(anytype _keyValue)
    {
        if (!skipEvents)
        {
            this.removing(this, _keyValue);
        }

        boolean ret = super(_keyValue);

        if (!skipEvents)
        {
            this.removed(this, _keyValue);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event raised when a value is being inserted.
    /// </summary>
    /// <param name = "_pass">The instance it is inserted into.</param>
    /// <param name = "_keyValue">The key of the value.</param>
    /// <param name = "_valueValue">The value being inserted.</param>
    delegate void inserting(WhsrfPassthrough _pass, anytype _keyValue, anytype _valueValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event raised when a value was inserted.
    /// </summary>
    /// <param name = "_pass">The instance it was inserted into.</param>
    /// <param name = "_keyValue">The key of the value.</param>
    /// <param name = "_valueValue">The value being inserted.</param>
    delegate void inserted(WhsrfPassthrough _pass, anytype _keyValue, anytype _valueValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public boolean insert(anytype _KeyValue, anytype _valueValue)
    {
        if (!skipEvents)
        {
            this.inserting(this, _KeyValue, _valueValue);
        }

        boolean ret;

        switch (typeOf(_valueValue))
        {
            case Types::String:
                ret = super(_keyValue, _valueValue);
                break;

            case Types::Real:
                ret = super(_keyValue, WHSWorkExecuteDisplay::num2StrDisplay(_valueValue));
                break;

            case Types::Integer:
                ret = super(_keyValue, int2str(_valueValue));
                break;

            case Types::Int64:
                ret = super(_keyValue, int642str(_valueValue));
                break;

            case Types::Enum:
                ret = super(_keyValue, strFmt('%1', enum2int(_valueValue)));
                break;

            case Types::Date, Types::Time, Types::UtcDateTime:
                ret = super(_keyValue, strFmt('%1', _valueValue));
                break;

            default:
                ret = super(_keyValue, _valueValue);
                break;
        }

        if (!skipEvents)
        {
            this.inserted(this, _keyValue, _valueValue);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDecimal</Name>
				<Source><![CDATA[
    private System.Decimal lookupDecimal(str _key)
    {
        str            value = this.lookupStr(_key);
        boolean        isParsed;
        System.Decimal ret;

        isParsed = System.Decimal::TryParse(
            value,
            System.Globalization.NumberStyles::Number,
            System.Globalization.CultureInfo::CreateSpecificCulture(infolog.language()),
            byRef ret);

        if (!isParsed)
        {
            ret = 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInt64</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an int64 mapped by a particular key.
    /// </summary>
    /// <param name="_key">
    /// The key to find.
    /// </param>
    /// <returns>
    /// The int64 value that is mapped by the specified key.
    /// </returns>
    /// <remarks>
    /// A zero value is returned if the key is not found in the map.
    /// </remarks>
    public int64 lookupInt64(str _key)
    {
        int64 result;

        result = any2Int64(this.lookupDecimal(_key));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDate</Name>
				<Source><![CDATA[
    public Date lookupDate(str _key)
    {
        str value = this.lookupStr(_key);
        Date result;

        if (ProcessGuideDataProcessorPassUserIdFlight::instance().isEnabled())
        {
            UserId userId = overrideUserIdForDateConversion ? overrideUserIdForDateConversion : this.lookupStr(#UserId);
            result = WHSRFControlData::convertDateFormatStr2Date(value, userId);
        }
        else
        {
            result = WHSRFControlData::convertDateFormatStr2Date(value, this.lookupStr(#UserId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDateTime</Name>
				<Source><![CDATA[
    internal utcdatetime lookupDateTime(str _key)
    {
        str value = this.lookupStr(_key);
        utcdatetime result;

        if (ProcessGuideDataProcessorPassUserIdFlight::instance().isEnabled())
        {
            UserId userId = overrideUserIdForDateConversion ? overrideUserIdForDateConversion : this.lookupStr(#UserId);
            result = WHSRFControlData::convertDateTimeFormatStr2DateTime(value, userId);
        }
        else
        {
            result = WHSRFControlData::convertDateTimeFormatStr2DateTime(value, this.lookupStr(#UserId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBaseType</Name>
				<Source><![CDATA[
    internal anytype lookupBaseType(str _key, Types _type)
    {
        switch (_type)
        {
            case Types::String:         return this.lookupStr(_key);
            case Types::Real:           return this.lookupReal(_key);
            case Types::Integer:        return this.lookupNum(_key);
            case Types::Int64:          return this.lookupInt64(_key);
            case Types::Date:           return this.lookupDate(_key);
            case Types::UtcDateTime:    return this.lookupDateTime(_key);
            default:                    return this.lookup(_key);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverrideUserIdForDateConversion</Name>
				<Source><![CDATA[
    internal UserId parmOverrideUserIdForDateConversion(UserId _userId = overrideUserIdForDateConversion)
    {
        overrideUserIdForDateConversion = _userId;

        return overrideUserIdForDateConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a real number mapped by a particular key.
    /// </summary>
    /// <param name="_key">
    /// The key to find.
    /// </param>
    /// <returns>
    /// The real value that is mapped by the specified key.
    /// </returns>
    /// <remarks>
    /// A zero value is returned if the key is not found in the map.
    /// </remarks>
    public real lookupNum(str _key)
    {
        real result;

        result = this.lookupDecimal(_key);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for a string typed key.
    /// </summary>
    /// <param name="_key">
    /// Key value.
    /// </param>
    /// <param name="_notExistsDefault">
    /// Default value when key does not exist.
    /// </param>
    /// <returns>
    /// Value corresponds to the key.
    /// </returns>
    public str lookupStr(str _key, str _notExistsDefault = '')
    {
        str     ret;

        if (this.exists(_key))
        {
            ret = this.lookup(_key);
        }
        else
        {
            ret = _notExistsDefault;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReal</Name>
				<Source><![CDATA[
    public real lookupReal(str _key)
    {
        str    decimalStr;
        real   ret;

        decimalStr = System.Convert::ToString(this.lookupDecimal(_key), System.Globalization.CultureInfo::get_InvariantCulture());

        ret = str2num(decimalStr);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    public str toString()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSRFPassthrough construct(Types _key, Types _value)
    {
        return new WHSRFPassthrough(_key, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSRFPassthrough</c> instance from a container.
    /// </summary>
    /// <param name="_con">
    /// Container that populates the instance.
    /// </param>
    /// <returns>
    /// The <c>WHSRFPassthrough</c> instance.
    /// </returns>
    public static WHSRFPassthrough create(container _con)
    {
        WHSRFPassthrough    ret = new WHSRFPassthrough(Types::String, Types::String);
        Map                 map = Map::create(_con);
        MapEnumerator       me;

        me = map.getEnumerator();
        ret.skipEvents = true;

        while (me.moveNext())
        {
            ret.insert(me.currentKey(), me.currentValue());
        }

        ret.skipEvents = false;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromFormContainer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSRFPassthrough createFromFormContainer(container _formCon)
    {
        container passCon = conPeek(_formCon, #PassthroughInfo);

        return WHSRFPassthrough::create(passCon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSRFPassthrough</c> instance.
    /// </summary>
    /// <returns>
    /// <c>WHSRFPassthrough</c> instance.
    /// </returns>
    public static WHSRFPassthrough newEmpty()
    {
        return WHSRFPassthrough::construct(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Copy-constructs a new instance of <c>WHSRFPassthrough</c> class.
    ///   Only common passtrhough parameters are copied (user ID, session ID, menu item).
    /// </summary>
    /// <param name="pass">
    ///   Original instance of <c>WHSRFPassthrough</c> from which to copy.
    /// </param>
    /// <returns>
    ///   A new instance of <c>WHSRFPassthrough</c> class.
    /// </returns>
    public static WHSRFPassthrough newReset(WHSRFPassthrough pass)
    {
        WHSRFPassthrough result = WHSRFPassthrough::construct(Types::String, Types::String);

        if (pass.exists(#UserId))
        {
            result.insert(#UserId, pass.lookup(#UserId));
        }
        if (pass.exists(#UserSessionId))
        {
            result.insert(#UserSessionId, pass.lookup(#UserSessionId));
        }
        if (pass.exists(#MenuItem))
        {
            result.insert(#MenuItem, pass.lookup(#MenuItem));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeGroupPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes group pick functionality.
    /// </summary>
    /// <param name = "_workTable">
    /// <c>WHSWorkTable</c> record for the header of the lines being grouped.
    /// </param>
    [Hookable(false)]
    internal void initializeGroupPick(WHSWorkTable _workTable)
    {
        if (this.isGroupPickAllowed(_workTable))
        {
            this.setGroupPick();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupPickAllowed</Name>
				<Source><![CDATA[
    private boolean isGroupPickAllowed(WHSWorkTable _workTable)
    {
        boolean ret;

        ret = this.validateItemsAreNotCatchWeight(_workTable.WorkId);

        ret = ret && this.validateNoUnfinishedReplenishmentWorkExists(_workTable);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemsAreNotCatchWeight</Name>
				<Source><![CDATA[
    private boolean validateItemsAreNotCatchWeight(WHSWorkId _workId)
    {
        boolean ret = true;

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            WHSWorkLine groupPickWorkLine;
            PdsCatchWeightItem catchWeightItem;

            select firstonly RecId from groupPickWorkLine
                where groupPickWorkLine.WorkId == _workId
                    exists join catchWeightItem
                        where catchWeightItem.itemid == groupPickWorkLine.ItemId;

            // Group Pick does not support catch weight items.
            if (groupPickWorkLine.RecId)
            {
                ret = checkFailed("@WAX:Error_GroupPickCatchWeightItemsNotAllowed");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoUnfinishedReplenishmentWorkExists</Name>
				<Source><![CDATA[
    private boolean validateNoUnfinishedReplenishmentWorkExists(WHSWorkTable _workTable)
    {
        boolean ret = true;

        if (_workTable.canHaveLinkedReplenishmentWork()
            && _workTable.ReplenishmentDependentWorkBlockingPolicy == WHSReplenishmentDependentWorkBlockingPolicy::IndividualWorkLine
            && _workTable.hasUnFinishedReplenWork())
        {
            ret = checkFailed("@WAX:Error_GroupPickUnfinishedReplenishmentWorkNotAllowed");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeGroupPickConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the pass with confirmation that the current work line is a subsequent line in a group pick sequence.
    /// </summary>
    /// <param name = "_location">
    /// <c>WMSLocation</c> of the pick work.
    /// </param>
    [Hookable(false)]
    internal void initializeGroupPickConfirmation(WMSLocation _location)
    {
        if (this.isQtyAvailable(_location))
        {
            this.setGroupPickConfirm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQtyAvailable</Name>
				<Source><![CDATA[
    private boolean isQtyAvailable(WMSLocation _location)
    {
        if (_location.whsLocationIsLPControlled())
        {
             if (!WHSLicensePlate::isLicensePlateEmptyOnLocation(this.lookupStr(#LicensePlateId), _location.wMSLocationId, _location.inventLocationId))
            {
                return true;
            }
        }
        else
        {
            if (_location.hasPhysicalOnhandForItem(this.lookupStr(#ItemId)))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeGroupPickLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensure that the license plate is stored for subsequent grouped pick lines.
    /// </summary>
    [Hookable(false)]
    internal void initializeGroupPickLicensePlate()
    {
        if (this.isGroupPickLicensePlateNeeded())
        {
            this.setGroupPickLP();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupPickLicensePlateNeeded</Name>
				<Source><![CDATA[
    private boolean isGroupPickLicensePlateNeeded()
    {
        return this.exists(WHSWorkExecuteDisplayGroupPickControls::GroupPickLP)
            && !this.hasValue(#LicensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupPick</Name>
				<Source><![CDATA[
    private void setGroupPick()
    {
        this.insert(WHSWorkExecuteDisplayGroupPickControls::GroupPick, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupPickConfirm</Name>
				<Source><![CDATA[
    private void setGroupPickConfirm()
    {
        this.insert(WHSWorkExecuteDisplayGroupPickControls::GroupPickConfirm, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupPickFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks that group pick functionality is not valid.
    /// </summary>
    [Hookable(false)]
    internal void setGroupPickFailure()
    {
        this.insert(WHSWorkExecuteDisplayGroupPickControls::GroupPickFail, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupPickLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the License Plate for grouped pick lines.
    /// </summary>
    [Hookable(false)]
    internal void setGroupPickLP()
    {
        this.insert(#LicensePlateId, this.lookupStr(WHSWorkExecuteDisplayGroupPickControls::GroupPickLP));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether group pick functionality is enabled or not.
    /// </summary>
    /// <returns>
    /// true if group picking is enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isGroupPick()
    {
        return this.exists(WHSWorkExecuteDisplayGroupPickControls::GroupPick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupPickConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines that group pick functionality is valid for the subsequent lines in the group.
    /// </summary>
    /// <returns>
    /// true if group picking has been confirmed; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isGroupPickConfirmed()
    {
        return this.exists(WHSWorkExecuteDisplayGroupPickControls::GroupPickConfirm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasGroupPickFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether enabled group pick functionality has failed its check.
    /// </summary>
    /// <returns>
    /// true if group picking has failed; otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean hasGroupPickFailed()
    {
        return this.exists(WHSWorkExecuteDisplayGroupPickControls::GroupPickFail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearGroupPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the status of group pick functionality.
    /// </summary>
    [Hookable(false)]
    internal void clearGroupPick()
    {
        if (this.exists(WHSWorkExecuteDisplayGroupPickControls::GroupPick))
        {
            this.remove(WHSWorkExecuteDisplayGroupPickControls::GroupPick);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearGroupPickConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the confirmation for picking the remainder of the group.
    /// </summary>
    [Hookable(false)]
    internal void clearGroupPickConfirmation()
    {
        if (this.exists(WHSWorkExecuteDisplayGroupPickControls::GroupPickConfirm))
        {
            this.remove(WHSWorkExecuteDisplayGroupPickControls::GroupPickConfirm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearGroupPickFail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets group pick functionality from being marked as failed.
    /// </summary>
    [Hookable(false)]
    internal void clearGroupPickFail()
    {
        if (this.exists(WHSWorkExecuteDisplayGroupPickControls::GroupPickFail))
        {
            this.remove(WHSWorkExecuteDisplayGroupPickControls::GroupPickFail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearGroupPickQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the statuses of group pick qty and qty verification.
    /// </summary>
    [Hookable(false)]
    internal void clearGroupPickQty()
    {
        this.remove(WHSWorkExecuteDisplayGroupPickControls::GroupPickQty);
        this.remove(#QtyVerification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipGroupedWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skips the current grouped work lines and clears group pick values from pass.
    /// </summary>
    [Hookable(false)]
    internal void skipGroupedWorkLines()
    {
        WHSWorkLine::skipGroupedWorkLines(this.lookup(#WorkId), this.parmLineNum());

        this.clearGroupPick();
        this.clearGroupPickFail();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemAndProductDimensionsPopulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether item id and all active product dimensions are stored in the pass.
    /// </summary>
    /// <returns>
    /// true if pass contains item id and all active product dimensions; otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isItemAndProductDimensionsPopulated()
    {
        ItemId _itemId = this.parmItemId();

        if (_itemId)
        {
            ListEnumerator le = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields().getEnumerator();
            while (le.moveNext())
            {
                FieldName fieldName = fieldId2name(tableNum(InventDim), le.current());
                if (!this.lookupStr(fieldName))
                {
                    return false;
                }
            }
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes from the <c>WHSRFPassthrough</c> object the product dimension values if there are any specified.
    /// </summary>
    [Hookable(false)]
    internal void removeProductDimensions()
    {
        List productDimesions = InventDim::dimProductDimensionEnabledFieldList();

        if (productDimesions)
        {
            ListEnumerator le = productDimesions.getEnumerator();

            while (le.moveNext())
            {
                FieldName fieldName = fieldId2name(tableNum(InventDim), le.current());
                this.remove(fieldName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds in the <c>WHSRFPassthrough</c> object the product dimension values for current item if there are any specified.
    /// </summary>
    /// <param name="_itemId">
    /// The current item id.
    /// </param>
    /// <param name="_itemInventDim">
    /// The <c>InventDim</c> record to iterate through.
    /// </param>
    [Hookable(false)]
    internal void addProductDimensions(
        ItemId      _itemId,
        InventDim   _itemInventDim)
    {
        ListEnumerator productDimEnumerator;

        if (_itemInventDim.anyProductDimensionSpecified())
        {
            productDimEnumerator = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields().getEnumerator();

            while (productDimEnumerator.moveNext())
            {
                this.insert(fieldId2name(tableNum(InventDim), productDimEnumerator.current()), _itemInventDim.(productDimEnumerator.current()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProductDimensionsForItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes from the <c>WHSRFPassthrough</c> object the product dimension values for current item if there are any specified.
    /// </summary>
    /// <param name = "_itemId">The current item id.</param>
    [Hookable(false)]
    internal void removeProductDimensionsForItemId(ItemId _itemId)
    {
        ListEnumerator le = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields().getEnumerator();

        while (le.moveNext())
        {
            FieldName fieldName = fieldId2name(tableNum(InventDim), le.current());
            this.remove(fieldName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTrackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds in the <c>WHSRFPassthrough</c> object the tracking dimension values for current item if there are any specified.
    /// </summary>
    /// <param name = "_itemId">The current item id.</param>
    /// <param name = "_trackingInventDim">The <c>InventDim</c> record to iterate through.</param>
    [Hookable(false)]
    internal void addTrackingDimensions(ItemId _itemId, InventDim _trackingInventDim)
    {
        if (_trackingInventDim.anyTrackingDimensionSpecified())
        {
            ListEnumerator trackingDimEnumerator = InventDimGroupSetup::newItemIdTrackingDimensionsOnly(_itemId).activeFields().getEnumerator();

            while (trackingDimEnumerator.moveNext())
            {
                this.insert(fieldId2name(tableNum(InventDim), trackingDimEnumerator.current()), _trackingInventDim.(trackingDimEnumerator.current()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTrackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes from the <c>WHSRFPassthrough</c> object the tracking dimension values if there are any specified.
    /// </summary>
    [Hookable(false)]
    internal void removeTrackingDimensions()
    {
        List trackingDimesions = InventDim::dimTrackingDimEnabledFieldList();

        if (trackingDimesions)
        {
            ListEnumerator le = trackingDimesions.getEnumerator();

            while (le.moveNext())
            {
                FieldName fieldName = fieldId2name(tableNum(InventDim), le.current());
                this.remove(fieldName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivingOrderProvider</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkExecuteDisplayReceivingOrderProvider receivingOrderProvider(boolean _throwOnNonReceiving = true)
    {
        if (!WHSWorkExecuteDisplayReceivingRefactoringFlight::instance().isEnabled())
        {
            return new WHSWorkExecuteDisplayReceivingPurchOrderProvider();
        }

        return WHSWorkExecuteDisplayReceivingOrderProvider::newFromPass(this, _throwOnNonReceiving);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>