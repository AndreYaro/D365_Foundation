<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSubledgerJournalizerExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostSubledgerJournalizerExtension</c> class is an extension for the
/// <c>SublegerJournalizer</c> class that processes and journalizes cost events.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProductReceipt), SourceDocument_ProductReceipt::ProductReceipt),
SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice)]
public class CostSubledgerJournalizerExtension extends SubledgerJournalizerExtension
{
    FormLetterJournalPostCaller     journalPostCaller;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether to subscribe to the journalizer event.
    /// </summary>
    /// <returns>
    /// True if we can subscribe the journalizer event; otherwise, false.
    /// </returns>
    protected boolean canSubscribe()
    {
        boolean canSubscribe = false;

        journalPostCaller = subledgerJournalizer.parmCaller() as FormLetterJournalPostCaller;

        if (journalPostCaller != null && journalPostCaller.parmLedgerVoucher() != null)
        {
            canSubscribe = true;
        }

        return canSubscribe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordingSubledgerEntriesEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes and journalizes cost events.
    /// </summary>
    /// <param name="_eventArgs">
    /// Event handler arguments.
    /// </param>
    /// <remarks>
    /// This event handler is only invoked during Product Receipt or Vendor Invoice journalization.
    /// </remarks>
    public void recordingSubledgerEntriesEventHandler(SubledgerJournalizerExtensionArgs _eventArgs)
    {
        LedgerVoucher ledgerVoucher = journalPostCaller.parmLedgerVoucher();

        CostEventProcessor::process();
        CostJournalizer::journalize(ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the subledger journalizer extension's recordingSubledgerJournalAccountEntries event.
    /// </summary>
    protected void subscribe()
    {
        if (this.canSubscribe())
        {
            subledgerJournalizer.recordingSubledgerJournalAccountEntries += eventhandler(this.recordingSubledgerEntriesEventHandler);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
