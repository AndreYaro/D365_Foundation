<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVoucher_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(CustVoucher))]
public final class CustVoucher_ApplicationSuite_Extension
{
    public boolean isUsualExporter_IT;
    public boolean isUsualExporterInvoice_IT;
    public CustIntentLetter_IT custIntentLetter_IT;
    public NoYes postSalesCommission_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateCustInvoiceJour</Name>
				<Source><![CDATA[
    protected void populateCustInvoiceJour(CustVendTrans _custTrans)
    {
        next populateCustInvoiceJour(_custTrans);

        CustInvoiceJour custInvoiceJourLocal = this.parmCustInvoiceJour_W();

        if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            this.initUsualExporter_IT(custInvoiceJourLocal.InvoiceAccount, custInvoiceJourLocal.InvoiceDate);

            if (common.TableId == tableNum(LedgerJournalTrans))
            {
                LedgerJournalTrans ledgerJournalTrans = common;

                isUsualExporterInvoice_IT = this.checkUsualExporterBeforePosting_IT(ledgerJournalTrans);
            }

            if (isUsualExporterInvoice_IT)
            {
                custInvoiceJourLocal.IntentLetterInternalId_IT = custIntentLetter_IT.InternalLetterId;
                custInvoiceJourLocal.IntentLetterId_IT = custIntentLetter_IT.LetterId;
                custInvoiceJourLocal.IntentLetterFromDate_IT = custIntentLetter_IT.FromDate;
                custInvoiceJourLocal.IntentLetterToDate_IT = custIntentLetter_IT.ToDate;
                this.parmCustInvoiceJour_W(custInvoiceJourLocal);
            }
        }

        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            custInvoiceJourLocal.custInvoiceJour_W();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUsualExporter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes customer intent letter.
    /// </summary>
    /// <param name = "_account">Customer ID.</param>
    /// <param name = "_invoiceDate">Invoice date.</param>
    public void initUsualExporter_IT(CustAccount _account, TransDate _invoiceDate)
    {
        isUsualExporter_IT = CustTable::find(_account).UsualExporter_IT;

        if (isUsualExporter_IT)
        {
            custIntentLetter_IT = CustIntentLetter_IT::findActiveIntentLetter(_account, _invoiceDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUsualExporterBeforePosting_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks usual exporter on tax group.
    /// </summary>
    /// <param name = "_journalTrans">The <c>LedgerJournalTrans</c> record.</param>
    /// <returns>true if tax group for usual exporter is properly used; false otherwise.</returns>
    /// <exception>Throws exception if special tax group can not be used.</exception>
    protected boolean checkUsualExporterBeforePosting_IT(LedgerJournalTrans _journalTrans)
    {
        boolean ret = true; // ret means 'isUsualExporterInvoice'
        TaxGroup usExpExemptionTaxGroup = CustParameters::find().UsualExporterExemptionTaxGroup_IT;

        if (!_journalTrans || !usExpExemptionTaxGroup)
        {
            return false;
        }

        if (_journalTrans.TaxGroup != usExpExemptionTaxGroup)
        {
            ret = false;
        }
        else if (!isUsualExporter_IT || !custIntentLetter_IT)
        {
            ret = false;
            throw error(StrFmt("@ExtendedItallianLocalization:ExemptionTaxGroupCannotBeUsed", _journalTrans.TaxGroup));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVoucherJournal</Name>
				<Source><![CDATA[
    public static CustVoucher newCustVoucherJournal(LedgerJournalTrans _ledgerJournalTrans, LedgerTransTxt _ledgerTransTxt)
    {
        CustVoucher custVoucher = next newCustVoucherJournal(_ledgerJournalTrans, _ledgerTransTxt);

        if (FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance()))
        {
            LedgerJournalTable ledgerJournalTable = _ledgerJournalTrans.ledgerJournalTable();
            LedgerJournalType ledgerJournalType = ledgerJournalTable.JournalType;

            switch (ledgerJournalType)
            {
                case LedgerJournalType::CustPayment:
                    custVoucher.parmPostSalesCommission_IT(NoYes::Yes);
                    break;
                case LedgerJournalType::CustBillOfExchangeAccept,
                     LedgerJournalType::CustBillOfExchangeDraw,
                     LedgerJournalType::CustBillOfExchangeProtest,
                     LedgerJournalType::CustBillOfExchangeRedraw,
                     LedgerJournalType::CustPaymRemittance,
                     LedgerJournalType::CustBillOfExchangeSettle:
                    custVoucher.parmPostSalesCommission_IT(ledgerJournalType == LedgerJournalType::CustBillOfExchangeSettle);
                    break;
            }
        }

        return custVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVoucherSales</Name>
				<Source><![CDATA[
    public static CustVoucher newCustVoucherSales(
        LedgerTransTxt _ledgerTransTxt,
        CustInvoiceJour _custInvoiceJour,
        SalesParmTable _salesParmTable,
        SalesTable _salesTable)
    {
        CustVoucher custVoucherSales = next newCustVoucherSales(
            _ledgerTransTxt,
            _custInvoiceJour,
            _salesParmTable,
            _salesTable);

        if (FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance()))
        {
            custVoucherSales.parmPostSalesCommission_IT(NoYes::Yes);
        }

        return custVoucherSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostSalesCommission_IT</Name>
				<Source><![CDATA[
    public NoYes parmPostSalesCommission_IT(NoYes _postSalesCommission = this.PostSalesCommission_IT)
    {
        postSalesCommission_IT = _postSalesCommission;
        return postSalesCommission_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostSalesCommission_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>postSalesCommission_IT</c> variable value.
    /// </summary>
    /// <returns>The current <c>postSalesCommission_IT</c> variable value.</returns>
    public NoYes getPostSalesCommission_IT()
    {
        return postSalesCommission_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(
        LedgerVoucher _ledgerPostingJournal,
        CustVendTrans _custVendTrans,
        NoYes _approval,
        UnknownNoYes _euroTriangulation,
        boolean _withHoldTaxType,
        boolean _useSubLedger)
    {
        using (ContextPostSalesCommission_IT contextPostSalesCommission = new ContextPostSalesCommission_IT())
        {
            if (FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance()))
            {
                contextPostSalesCommission.postSalesCommission = this.postSalesCommission_IT();
            }

            next post(
                _ledgerPostingJournal,
                _custVendTrans,
                _approval,
                _euroTriangulation,
                _withHoldTaxType,
                _useSubLedger);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSalesCommission_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if commission must be posted.
    /// </summary>
    /// <returns>Yes if posting conditions were met, otherwise No.</returns>
    public NoYes postSalesCommission_IT()
    {
        return this.getPostSalesCommission_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTrans</Name>
				<Source><![CDATA[
    protected void initCustVendTrans(
        CustVendTrans _custVendTrans,
        LedgerVoucher _ledgerPostingJournal,
        boolean _useSubLedger)
    {
        next initCustVendTrans(_custVendTrans, _ledgerPostingJournal, _useSubLedger);

        if (FeatureStateProvider::isFeatureEnabled(SplitPaymentMandatoryRuleFeature_PL::instance()))
        {
            CustVendTrans_W custVendTrans_W = _custVendTrans.CustVendTrans::getCustVendTrans_W();

            custVendTrans_W.CustVendTrans_W::initSplitPayment(_custVendTrans.PaymMode, _custVendTrans.PaymSpec);
            _custVendTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>