<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscHeadingInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Base class providing an interface to common functionality applicable for tables mapped to the <c>PriceDiscHeading</c> table map.
/// </summary>
public abstract class PriceDiscHeadingInterface
{
    private PriceDiscHeading priceDiscHeading;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new ()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePriceDiscHeading</Name>
				<Source><![CDATA[
    private void initializePriceDiscHeading(PriceDiscHeading _priceDiscHeading)
    {
        priceDiscHeading = _priceDiscHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscHeading</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final PriceDiscHeading parmPriceDiscHeading()
    {
        return priceDiscHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a <c>PriceDiscHeadingInterface</c> object based on the provided <c>PriceDiscHeading</c> record.
    /// </summary>
    /// <param name = "_priceDiscHeading">
    ///     A <c>PriceDiscHeading</c> record to create a <c>PriceDiscHeadingInterface</c> object for.
    /// </param>
    /// <returns>
    ///     The instantiated <c>PriceDiscHeadingInterface</c> object.
    /// </returns>
    [Hookable(false)]
    public static PriceDiscHeadingInterface createInstance(PriceDiscHeading _priceDiscHeading)
    {
        PriceDiscHeadingInterfaceFactoryAttribute attr = new PriceDiscHeadingInterfaceFactoryAttribute(tableId2Name(_priceDiscHeading.tableId));
        
        PriceDiscHeadingInterface instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PriceDiscHeadingInterface), attr) as PriceDiscHeadingInterface;

        if (!instance)
        {
            instance = new PriceDiscHeadingDefault();
        }

        instance.initializePriceDiscHeading(_priceDiscHeading);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTmpsum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the total balance for the specified multiline discount code.
    /// </summary>
    /// <param name="_tmpSum">
    ///    A <c>TmpSum</c> buffer to initialize the balance.
    /// </param>
    /// <param name="_multiLineDisc">
    ///    The multiline discount code for which the balance must be initialized.
    /// </param>
    /// <param name="_qty">
    ///    The quantity to be initialized into the <c>TmpSum</c> buffer.
    /// </param>
    protected void initializeTmpsum(TmpSum _tmpSum, InventMultiLineDiscCode _multiLineDisc, Qty _qty)
    {
        _tmpSum.Key           =  _multiLineDisc;
        _tmpSum.Balance01     += _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDiscQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the total balance for the specified multiline discount code.
    /// </summary>
    /// <param name="_tmpSum">
    ///    A <c>TmpSum</c> buffer to update the balance.
    /// </param>
    /// <param name="_multiLineDisc">
    ///    The multiline discount code for which the balance must be updated.
    /// </param>
    /// <param name="_qty">
    ///    The quantity to be updated into the <c>TmpSum</c> buffer.
    /// </param>
    [Hookable(false)]
    final public void updateDiscQty(TmpSum _tmpSum, InventMultiLineDiscCode _multiLineDisc, Qty _qty)
    {
        select _tmpSum where _tmpSum.Key == _multiLineDisc;
        
        this.initializeTmpsum(_tmpSum, _multiLineDisc, _qty);

        _tmpSum.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustChangeBalanceEndDiscSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the sign for balance end disc amount must be changed.
    /// </summary>
    /// <returns>
    ///     true if the sign for balance end disc amount must be changed; otherwise, false.
    /// </returns>
    [Hookable(false)]
    protected boolean mustChangeBalanceEndDiscSign()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParametersForFinalDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates and initializes a <c>PriceDiscParameters</c> instance.
    /// </summary>
    /// <returns>
    ///     An instance of <c>PriceDiscParameters</c>.
    /// </returns>
    [Hookable(false)]
    final public PriceDiscParameters createAndInitPriceDiscParametersForFinalDiscount()
    {
        PriceDiscParameters parameters = PriceDiscParameters::construct();

        parameters.parmModuleType(priceDiscHeading.moduleType());
        parameters.parmPriceDiscDate(priceDiscHeading.getFinalDiscPriceDate());
        parameters.parmCurrencyCode(priceDiscHeading.Currency);
        parameters.parmAccountNum(priceDiscHeading.AccountNum);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstanceForFinalDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>PriceDisc</c>.
    /// </summary>
    /// <returns>
    ///     A <c>PriceDisc</c> instance.
    /// </returns>
    [Hookable(false)]
    final public PriceDisc createPriceDiscInstanceForFinalDiscount(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFinalDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the final discount for sales quotations, purchase orders.
    /// </summary>
    /// <param name="_priceDiscLine">
    /// A <c>PriceDiscLine</c> buffer of the transacton line for which total discount is to be calculated.
    /// </param>
    /// <param name="_salesId">
    /// The sales quotation ID or purchase ID.
    /// </param>
    /// <param name="_moduleType">
    /// The module type of the sales quotation or purchase order.
    /// </param>
    /// <returns>
    /// The total discount for the sales quotation or purchase order.
    /// </returns>
   public static AmountCur calcFinalDisc(PriceDiscLine _priceDiscLine, SalesId  _salesId, ModuleInventPurchSales _moduleType)
    {
        AmountCur              balanceEndDisc;
      
        SysDaQueryObject nonSalesTableQueryObject = PriceDiscHeadingInterfaceQueryBuilder::buildNonSalesTableQuery(_priceDiscLine, _salesId, _moduleType);
        SysDaFindObject findObject = new SysDaFindObject(nonSalesTableQueryObject);
        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.executeQuery(findObject);
        
        balanceEndDisc = _priceDiscLine.LineAmount;

        return balanceEndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinalDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total discount for sales orders, purchase orders.
    /// </summary>
    /// <param name="_priceDiscLine">
    /// A <c>PriceDiscLine</c> buffer of the transacton line for which total discount is to be calculated.
    /// </param>
    /// <param name="_bypassDialog">
    /// A boolean value that controls execution of Dialog; optional.
    /// </param>
    /// <returns>
    /// A Boolean value indicating whether the total discount was changed.
    /// </returns>
    [Hookable(false)]
    final public boolean  updateFinalDiscount(PriceDiscLine _priceDiscLine, boolean _bypassDialog = false)
    {
        InventTableModule       inventTableModule;
        AmountCur               balanceEndDisc;
        ModuleInventPurchSales  moduleType = _priceDiscLine.moduleType();
        boolean                 ret;
        // <GEERU>
        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        boolean policyDialogResult;
           
        if ((_bypassDialog || priceDiscHeading.PriceDiscResultFields::runPriceDiscPolicyDialog(fieldNum(PriceDiscResultFields, DiscPercent))) &&
            PriceDiscPolicyCheckPolicy::newFromParm(priceDiscHeading.PriceDiscResultFields::parmPriceDiscResultFields()).mustUpdateField(fieldNum(PriceDiscResultFields, DiscPercent)))
        {
            //All category based lines are eligible for total discount
            select sum(LineAmount) from _priceDiscLine
             where _priceDiscLine.SalesPurchId   == priceDiscHeading.SalesPurchId
                && !_priceDiscLine.ItemId;

            balanceEndDisc = _priceDiscLine.LineAmount;

            //Only those item based lines which have endDisc applicable, are eligible for total discount
            if (_priceDiscLine.TableId == tablenum(SalesLine))
            {
                balanceEndDisc += SalesTable::calcSalesTotalDisc(priceDiscHeading.SalesPurchId);
            }
            else
            {

                balanceEndDisc += PriceDiscHeadingInterface::calcFinalDisc(_priceDiscLine, priceDiscHeading.SalesPurchId, moduleType);
            }

            if (this.mustChangeBalanceEndDiscSign())
            {
                balanceEndDisc = -balanceEndDisc;
            }

            PriceDisc priceDisc =   priceDiscHeading.PriceDiscHeading::createPriceDiscInstanceForFinalDiscount(priceDiscHeading.PriceDiscHeading::createAndInitPriceDiscParametersForFinalDiscount());

            if (countryRegion_RU)
            {
                priceDisc.parmPriceDiscParameters().parmAgreementHeaderExt_RU(priceDiscHeading.agreementHeaderExt_RU());
                priceDisc.parmPriceDiscParameters().parmAgreementPartnerCode_RU(priceDiscHeading.AgreementPartnerCode_RU);
            }

            ttsbegin;

            boolean foundByAgreement_RU = countryRegion_RU && priceDisc.searchbyAgreement_RU() && priceDisc.findEndDisc(priceDiscHeading.EndDisc, balanceEndDisc);

            if (!foundByAgreement_RU)
            {
                priceDisc.parmPriceDiscParameters().parmAgreementHeaderExt_RU(0);
                priceDisc.parmPriceDiscParameters().parmAgreementPartnerCode_RU('');
            }

            if (foundByAgreement_RU || priceDisc.findEndDisc(priceDiscHeading.EndDisc, balanceEndDisc) )
            {
                if (priceDisc.getDiscAmount() * balanceEndDisc != 0)
                {
                    if (priceDiscHeading.TableId == tableNum(SalesTable) && priceDiscHeading.returnItem())
                    {
                        priceDiscHeading.DiscPercent = balanceEndDisc ? 100 *  priceDiscHeading.calcDiscAmountForReturns() / balanceEndDisc : 0;
                    }
                    else
                    {
                        priceDiscHeading.DiscPercent = balanceEndDisc ? abs(100 * priceDisc.getDiscAmount() / balanceEndDisc) : 0;
                    }
                    // roudning is needed not to update when the DiscPercent doesn't change
                    if (decRound(priceDiscHeading.DiscPercent, 16) != decRound(priceDiscHeading.orig().DiscPercent, 16))
                    {
                        ret = true;
                        priceDiscHeading.update();
                    }
                }
            }
            else
            {
                priceDiscHeading.DiscPercent = 0;
                if (priceDiscHeading.DiscPercent != priceDiscHeading.orig().DiscPercent)
                {
                    ret = true;
                    priceDiscHeading.update();
                }
            }

            ttscommit;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates and initializes a <c>PriceDiscParameters</c> instance.
    /// </summary>
    /// <param name = "_tmpPriceDiscTrans">
    ///     An <c>PriceDiscAdmTransfer</c> record.
    ///     </param>
    /// <param name = "_tmpSum">
    ///     An <c>TmpSum</c> record.
    /// </param>
    /// <returns>
    ///     An instance of <c>PriceDiscParameters</c>.
    /// </returns>
    [Hookable(false)]
    final public PriceDiscParameters createAndInitPriceDiscParameters(PriceDiscLine _priceDiscLine, TmpSum _tmpSum)
    {
        PriceDiscParameters parameters = PriceDiscParameters::construct();

        parameters.parmModuleType(priceDiscHeading.moduleType());
        parameters.parmItemId(_priceDiscLine.ItemId);
        parameters.parmInventDim(_priceDiscLine.inventDim());
        parameters.parmUnitID(_priceDiscLine.Unit);
        parameters.parmPriceDiscDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        parameters.parmQty(_tmpSum.Balance01);
        parameters.parmAccountNum(priceDiscHeading.AccountNum);
        parameters.parmCurrencyCode(priceDiscHeading.Currency);
        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            parameters.parmAgreementHeaderExt_RU(priceDiscHeading.agreementHeaderExt_RU());
            parameters.parmAgreementPartnerCode_RU(priceDiscHeading.AgreementPartnerCode_RU);
        }

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>PriceDisc</c>.
    /// </summary>
    /// <returns>
    ///     A <c>PriceDisc</c> instance.
    /// </returns>
    [Hookable(false)]
    final public PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateMultiLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether multiline discount must be updated.
    /// </summary>
    /// <param name="_priceDiscLine">
    ///     A <c>PriceDiscLine</c> buffer for which the multiline discount needs to be calculated.
    /// </param>
    /// <returns>
    ///     true if multiline discount must be updated; otherwise, false.
    /// </returns>
    protected boolean mustUpdateMultiLineDiscount(PriceDiscLine _priceDiscLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldIncludeLineInMultiLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the <c>PriceDiscLine</c> buffer should be taken into account when applying multiline discount
    /// </summary>
    /// <param name="_priceDiscLine">
    ///     A <c>PriceDiscLine</c> buffer for which the multiline discount needs to be calculated.
    /// </param>
    /// <returns>
    ///     true if the line is applicable,otherwise, false.
    /// </returns>
    protected boolean shouldIncludeLineInMultiLineDiscount(PriceDiscLine _priceDiscLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultiLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the multiline discount for all lines within the given order.
    /// </summary>
    /// <param name="_priceDiscLine">
    ///     A <c>PriceDiscLine</c> buffer for which the multiline discount needs to be calculated.
    /// </param>
    /// <param name="_bypassDialog">
    ///     A boolean value that controls execution of Dialog, optional.
    /// </param>
    /// <returns>
    ///     true if any discounts were applied; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean updateMultiLineDiscount(PriceDiscLine _priceDiscLine, boolean _bypassDialog = false)
    {
        InventTableModule           inventTableModule;
        TmpSum                      tmpSum;
        Map                         priceDateMap = new Map(Types::String, Types::Date);
        FieldId                     lineDeliveryTypeFieldId = new DictTable(_priceDiscLine.TableId).fieldName2Id(identifierStr(LineDeliveryType));
        boolean                     ret;
        DiscAmount                  prevMultiLineDiscAmount;
        DiscPct                     prevMultiLineDiscPercent;
        AmountCur                   prevLineAmount;
        MCRPriceHistoryUpdate       mcrPriceHistoryUpdate;

        if (!this.mustUpdateMultiLineDiscount(_priceDiscLine))
        {
            return false;
        }

        boolean updateLine()
        {
            boolean updateLine = _priceDiscLine.LineAmount      != _priceDiscLine.orig().LineAmount
                              || _priceDiscLine.MultiLnDisc     != _priceDiscLine.orig().MultiLnDisc
                              || _priceDiscLine.MultiLnPercent  != _priceDiscLine.orig().MultiLnPercent;

            if (!ret && updateLine)
            {
                ret = true;
            }

            return updateLine;
        }
        
        boolean skipLine(PriceDiscLine _currentLine = _priceDiscLine)
        {
            boolean result = false;

            if (_currentLine.RecId)
            {
                switch (_currentLine.tableId)
                {
                    case tableNum(SalesLine):                        
                        result = (SalesLine::findRecId(_currentLine.RecId).SalesStatus == SalesStatus::Canceled);
                        break;

                    case tableNum(PurchLine):
                        break;
                }
            }

            return result;
        }

        if ((_bypassDialog || priceDiscHeading.PriceDiscResultFields::runPriceDiscPolicyDialog(fieldNum(PriceDiscResultFields, MultiLineDiscCode))) &&
            PriceDiscPolicyCheckPolicy::newFromParm(priceDiscHeading.PriceDiscResultFields::parmPriceDiscResultFields()).mustUpdateField(fieldNum(PriceDiscResultFields, MultiLineDiscCode)))
        {
            //Update the total quantity and min price date for all category based lines
            while select _priceDiscLine
                    where _priceDiscLine.SalesPurchId  == priceDiscHeading.SalesPurchId
                        && (!lineDeliveryTypeFieldId || _priceDiscLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
                        && !_priceDiscLine.ItemId
            {
                if (this.shouldIncludeLineInMultiLineDiscount(_priceDiscLine) && !skipLine(_priceDiscLine))
                {
                    priceDiscHeading.PriceDiscHeading::updateDiscQty(tmpSum, '', _priceDiscLine.Qty);
                }
            }

            //Update the total quantity and min price date for all item based lines grouped by multiline discount code
            while select _priceDiscLine
                where _priceDiscLine.SalesPurchId  == priceDiscHeading.SalesPurchId
                    && (!lineDeliveryTypeFieldId || _priceDiscLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
                join MultiLineDisc from inventTableModule
                    where inventTableModule.ModuleType == priceDiscHeading.moduleType()
                        && inventTableModule.ItemId     == _priceDiscLine.ItemId
            {
                if (this.shouldIncludeLineInMultiLineDiscount(_priceDiscLine) && !skipLine(_priceDiscLine))
                {
                    priceDiscHeading.PriceDiscHeading::updateDiscQty(tmpSum, inventTableModule.MultiLineDisc, _priceDiscLine.Qty);
                }
            }

            ttsbegin;
            //Calculate multiline discount for item based lines considering total quantity of all lines with the corresponding multiline discount code.
            while select forupdate _priceDiscLine
                where _priceDiscLine.SalesPurchId  == priceDiscHeading.SalesPurchId
                    && (!lineDeliveryTypeFieldId || _priceDiscLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
                join MultiLineDisc from inventTableModule
                    where inventTableModule.ModuleType == priceDiscHeading.moduleType() 
                        && inventTableModule.ItemId     == _priceDiscLine.ItemId
            {
                if (this.shouldIncludeLineInMultiLineDiscount(_priceDiscLine) && !_priceDiscLine.hasOnlyLineAmount())
                {
                    select tmpSum
                        where tmpSum.Key == inventTableModule.MultiLineDisc;

                    // Store current values before calculate and assign values.
                    prevMultiLineDiscAmount     = _priceDiscLine.MultiLnDisc;
                    prevMultiLineDiscPercent    = _priceDiscLine.MultiLnPercent;
                    prevLineAmount              = _priceDiscLine.LineAmount;

                    mcrPriceHistoryUpdate = MCRPriceHistoryUpdate::constructNoThrow(_priceDiscLine);

                    PriceDisc priceDisc =   priceDiscHeading.PriceDiscHeading::createPriceDiscInstance(priceDiscHeading.PriceDiscHeading::createAndInitPriceDiscParameters(_priceDiscLine, tmpSum));

                    boolean hasPriceDate = tableHasInstanceMethod(new DictTable(_priceDiscLine.TableId), identifierStr(priceDate));
                    priceDisc.parmPriceDiscParameters().parmPriceDiscDate(hasPriceDate? _priceDiscLine.priceDate(): DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

                    priceDisc.findMultiLineDisc(inventTableModule.MultiLineDisc, priceDiscHeading.MultiLineDisc, tmpSum.Balance01, mcrPriceHistoryUpdate);

                    _priceDiscLine.MultiLnDisc = priceDisc.getDiscAmount();
                    _priceDiscLine.MultiLnPercent = priceDisc.getDiscPercent();

                    // </GEERU>
                    _priceDiscLine.LineAmount = _priceDiscLine.calcLineAmountForced();
                    // <GIN>
                    _priceDiscLine.PriceDiscLine::lineAmountModified_IN();
                    // </GIN>

                    // Only update if at least one value changed.
                    if (updateLine()
                        || _priceDiscLine.MultiLnDisc       != prevMultiLineDiscAmount
                        || _priceDiscLine.MultiLnPercent != prevMultiLineDiscPercent
                        || _priceDiscLine.LineAmount     != prevLineAmount)
                    {
                        _priceDiscLine.update();
                    }
                }
            }
            //Calculate multiline discount for category based lines considering total quantity of all lines with no multiline discount code specified.
            while select forupdate _priceDiscLine
                where _priceDiscLine.SalesPurchId  == priceDiscHeading.SalesPurchId
                    && !_priceDiscLine.ItemId
                    && (!lineDeliveryTypeFieldId || _priceDiscLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)                
            {
                if (this.shouldIncludeLineInMultiLineDiscount(_priceDiscLine) && !_priceDiscLine.hasOnlyLineAmount())
                {
                    select tmpSum
                        where tmpSum.Key == inventTableModule.MultiLineDisc;

                    // Store current values before calculate and assign values.
                    prevMultiLineDiscAmount     = _priceDiscLine.MultiLnDisc;
                    prevMultiLineDiscPercent    = _priceDiscLine.MultiLnPercent;
                    prevLineAmount              = _priceDiscLine.LineAmount;

                    mcrPriceHistoryUpdate = MCRPriceHistoryUpdate::constructNoThrow(_priceDiscLine);

                    PriceDisc priceDisc =   priceDiscHeading.PriceDiscHeading::createPriceDiscInstance(priceDiscHeading.PriceDiscHeading::createAndInitPriceDiscParameters(_priceDiscLine, tmpSum));

                    boolean hasPriceDate = tableHasInstanceMethod(new DictTable(_priceDiscLine.TableId), identifierStr(priceDate));
                    priceDisc.parmPriceDiscParameters().parmPriceDiscDate(hasPriceDate? _priceDiscLine.priceDate(): DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

                    priceDisc.findMultiLineDisc('', priceDiscHeading.MultiLineDisc, tmpSum.Balance01, mcrPriceHistoryUpdate);
                    _priceDiscLine.MultiLnDisc = priceDisc.getDiscAmount();
                    _priceDiscLine.MultiLnPercent = priceDisc.getDiscPercent();

                    _priceDiscLine.LineAmount = _priceDiscLine.calcLineAmountForced();

                    // Only update if at least one value changed.
                    if (updateLine()
                        || _priceDiscLine.MultiLnDisc    != prevMultiLineDiscAmount
                        || _priceDiscLine.MultiLnPercent != prevMultiLineDiscPercent
                        || _priceDiscLine.LineAmount     != prevLineAmount)
                    {
                        _priceDiscLine.update();
                    }
                }
            }
            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateMultiLineDiscTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether multiline discount must be updated for all lines for a given account number.
    /// </summary>
    /// <param name="_priceDiscLine">
    ///    A <c>priceDiscLine</c> buffer for which the multiline discount must be calculated.
    /// </param>
    /// <param name="_accountNum">
    ///    The account number for which the multiline discount must be calculated.
    /// </param>
    /// <returns>
    ///     true if multiline discount must be updated for all lines for a given account number; otherwise, false.
    /// </returns>
    protected boolean mustUpdateMultiLineDiscTmp(PriceDiscLine _priceDiscLine, AccountNum _accountNum)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultiLineDiscTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the multiline discount for all lines for a given account number.
    /// </summary>
    /// <param name="_priceDiscLine">
    ///    A <c>priceDiscLine</c> buffer for which the multiline discount must be calculated.
    /// </param>
    /// <param name="_accountNum">
    ///    The account number for which the multiline discount must be calculated.
    /// </param>
    [Hookable(false)]
    final void updateMultiLineDiscTmp(PriceDiscLine _priceDiscLine, AccountNum _accountNum)
    {
        InventTableModule   inventTableModule;
        TmpSum              tmpSum;

        if (!this.mustUpdateMultiLineDiscTmp(_priceDiscLine, _accountNum))
        {
            return;
        }

        while select _priceDiscLine
            where _priceDiscLine.AccountNum  == _accountNum
                && _priceDiscLine.Included == NoYes::Yes
                && !_priceDiscLine.ItemId
        {
            priceDiscHeading.PriceDiscHeading::updateDiscQty(tmpSum, inventTableModule.MultiLineDisc, _priceDiscLine.Qty);
        }

        while select _priceDiscLine
            where _priceDiscLine.AccountNum  == _accountNum &&
                _priceDiscLine.Included    == NoYes::Yes
            join MultiLineDisc from inventTableModule
                where inventTableModule.ModuleType == priceDiscHeading.moduleType()
                    && inventTableModule.ItemId     == _priceDiscLine.ItemId
        {
            priceDiscHeading.PriceDiscHeading::updateDiscQty(tmpSum, inventTableModule.MultiLineDisc, _priceDiscLine.Qty);
        }

        ttsbegin;

        while select forupdate _priceDiscLine
            where _priceDiscLine.AccountNum  == _accountNum 
                && _priceDiscLine.Included    == NoYes::Yes
            join MultiLineDisc from inventTableModule
                where inventTableModule.ModuleType == priceDiscHeading.moduleType() 
                    && inventTableModule.ItemId     == _priceDiscLine.ItemId
        {
            if (!_priceDiscLine.hasOnlyLineAmount())
            {
                select tmpSum
                    where tmpSum.Key == inventTableModule.MultiLineDisc;

                PriceDisc priceDisc = priceDiscHeading.PriceDiscHeading::createPriceDiscInstance(priceDiscHeading.PriceDiscHeading::createAndInitPriceDiscParameters(_priceDiscLine, tmpSum));
                priceDisc.findMultiLineDisc(inventTableModule.MultiLineDisc, priceDiscHeading.MultiLineDisc, tmpSum.Balance01);
                _priceDiscLine.MultiLnDisc = priceDisc.getDiscAmount();
                _priceDiscLine.MultiLnPercent = priceDisc.getDiscPercent();

                _priceDiscLine.setLineAmount();
                _priceDiscLine.update();
            }
        }

        while select forupdate _priceDiscLine
            where _priceDiscLine.AccountNum  == _accountNum
                && _priceDiscLine.Included    == NoYes::Yes
                && !_priceDiscLine.ItemId
        {
            if (!_priceDiscLine.hasOnlyLineAmount())
            {
                select tmpSum
                    where tmpSum.Key == '';

                PriceDisc priceDisc = priceDiscHeading.PriceDiscHeading::createPriceDiscInstance(priceDiscHeading.PriceDiscHeading::createAndInitPriceDiscParameters(_priceDiscLine, tmpSum));
                priceDisc.findMultiLineDisc(inventTableModule.MultiLineDisc, priceDiscHeading.MultiLineDisc, tmpSum.Balance01);
                _priceDiscLine.MultiLnDisc = priceDisc.getDiscAmount();
                _priceDiscLine.MultiLnPercent = priceDisc.getDiscPercent();

                _priceDiscLine.setLineAmount();
                _priceDiscLine.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the date for a given multiline discount code to use for discount calculations.
    /// </summary>
    /// <param name="_priceDiscLine">
    ///    A <c>PriceDiscLine</c> buffer for which the date must be considered.
    /// </param>
    /// <param name="_priceDateMap">
    ///    A map that contains the price dates based on multiline discount codes.
    /// </param>
    /// <param name="_multiLineDisc">
    ///    The multiline discount code for which to calculate the price date.
    /// </param>
    /// <param name="_hasPriceDate">
    ///    Determines whether the price date is applicable for the <c>PriceDiscLine</c> object.
    /// </param>
    [Hookable(false)]
    final public void updatePriceDate(PriceDiscLine _priceDiscLine, Map _priceDateMap, InventMultiLineDiscCode _multiLineDisc, boolean _hasPriceDate)
    {
        if (_hasPriceDate)
        {
            PriceDate priceDate = _priceDiscLine.priceDate();
            if (_priceDateMap.exists(_multiLineDisc))
            {
                _priceDateMap.insert(_multiLineDisc, min(priceDate, _priceDateMap.lookup(_multiLineDisc)));
            }
            else
            {
                _priceDateMap.insert(_multiLineDisc, priceDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public CustVendAC parmAccountNum()
    {
        return priceDiscHeading.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrency</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public CurrencyCode parmCurrency()
    {
        return priceDiscHeading.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscPercent</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public DiscPct parmDiscPercent()
    {
        return priceDiscHeading.DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDisc</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public EndDiscCode parmEndDisc()
    {
        return priceDiscHeading.EndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDisc</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public LineDiscCode parmLineDisc()
    {
        return priceDiscHeading.LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLineDisc</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public MultiLnDiscCode parmMultiLineDisc()
    {
        return priceDiscHeading.MultiLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceGroup</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public PriceGroupId parmPriceGroup()
    {
        return priceDiscHeading.PriceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public SalesId parmSalesPurchId()
    {
        return priceDiscHeading.SalesPurchId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>