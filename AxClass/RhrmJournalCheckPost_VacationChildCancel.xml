<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmJournalCheckPost_VacationChildCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmJournalCheckPost_VacationChildCancel extends RHRMJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
        protected boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean            ret;
        RHRMOrderTrans     rhrmOrderTrans = _journalTransData.journalTrans();
        ;

        ret = super(_journalTransData);

        ret = ret && rhrmOrderTrans.validateWrite();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
        protected void postTrans(JournalTransData _journalTransData)
    {
        RHRMOrderTrans     rhrmOrderTrans = _journalTransData.journalTrans();
        RHRMOrderTable     rhrmOrderTable = journalTableData.journalTable();
        RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTable;

        super(_journalTransData);

        select firstonly forupdate rPayAverageEarnEmplPeriodTable
            where rPayAverageEarnEmplPeriodTable.StartDate          == rhrmOrderTrans.PrevVacationStartDate     &&
                  rPayAverageEarnEmplPeriodTable.EmplId             == rhrmOrderTrans.EmplId                    &&
                  rPayAverageEarnEmplPeriodTable.Included           == NoYes::Yes                               &&
                  rPayAverageEarnEmplPeriodTable.RpayIllType        == RPayIllType::ChildVacation;
        if (rPayAverageEarnEmplPeriodTable.RecId != 0)
        {
            rPayAverageEarnEmplPeriodTable.EndDate = rhrmOrderTrans.StartDate - 1;
            rPayAverageEarnEmplPeriodTable.update();
        }

        RPayTblUpdater::updateTimesheetFromDocument(rPayAverageEarnEmplPeriodTable.StartDate,
                                                    rhrmOrderTrans.PrevVacationEndDate,
                                                    rhrmOrderTrans.EmplId);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>