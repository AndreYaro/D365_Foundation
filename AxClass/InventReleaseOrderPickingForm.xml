<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventReleaseOrderPickingForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventReleaseOrderPickingForm</c> class generates and updates data in the
/// <c>InventReleaseOrderPickingTmp</c> table.
/// </summary>
/// <remarks>
/// The <c>InventReleaseOrderPickingTmp</c> table is used in the release sales order and release
/// transfer order forms.
/// </remarks>
class InventReleaseOrderPickingForm
{
    InventReleaseOrderPickingTmp    inventReleaseOrderPickingTmp;

    boolean                         deductUnReserved;

    InventDimCtrl_Frm_OnHand        inventDimFormSetup;

    Map                             inventOnHandQtyMap;         //Key : itemId+inventdimId, Value : inventSum record
    Map                             cwQtyOnPickMap;             //Key : itemId+inventdimId, Value : cw qty on pick
    Map                             qtyOnPickMap;               //Key : itemId+inventdimId, Value : qty on pick

    Map                             salesLineItemExistMap;      //Key : itemId+inventdimId, Value : true, if order exist
    Map                             transferLineItemExistMap;   //Key : itemId+inventdimId, Value : true, if order exist
    Map                             prodItemExistMap;           //Key : itemId+inventdimId, Value : true, if order exist

    Map                             inventDimMap;
    Map                             inventDimParmMap;
    //Transfer orders exist query and ranges
    Query                   queryTransferExist;
    QueryBuildRange         qbrInventTransferLineItemId;
    QueryBuildRange         qbrInventTransferLineInventDimId;
    QueryBuildRange         qbrInventTransferLineShipDate;
    QueryBuildRange         qbrInventTransferLineStatus;
    //Sales order exist query and ranges
    Query                   querySalesLineExist;
    QueryBuildRange         qbrSalesLineItemId;
    QueryBuildRange         qbrSalesLineInventDimId;
    QueryBuildRange         qbrSalesLineConfirmedDlv;
    QueryBuildRange         qbrSalesLineSalesStatus;
    //production order line exist query and ranges
    Query                   queryInventTrans;
    QueryBuildRange         qbrInventTransItemId;
    QueryBuildRange         qbrInventTransInventDimId;
    QueryBuildRange         qbrInventTransDateExpected;
    QueryBuildRange         qbrInventTransStatus;
    QueryBuildRange         qbrInventTransTransType;

    str                     dateRange;

    private boolean skipProductionOrderExistCalculation;
    private boolean skipTransferOrderExistCalculation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allOrdersDeliverable</Name>
				<Source><![CDATA[
    protected boolean allOrdersDeliverable(ItemId _itemId, InventDim _inventDim)
    {
        InventSum           inventSum = this.findInventOnHandQty(_itemId, _inventDim);

        if (inventSum.PhysicalInvent <= 0
        ||  inventSum.AvailPhysical < inventSum.OnOrder)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventDim</c> record by the specified <c>InventDimId</c>.
    /// </summary>
    /// <param name="_inventDimId">
    /// An <c>InventDimId</c> value.
    /// </param>
    /// <returns>
    /// An <c>InventDim</c> record.
    /// </returns>
    /// <remarks>
    /// Caches previously found <c>InventDim</c> records.
    /// </remarks>
    protected InventDim findInventDim(inventDimId _inventDimId)
    {
        InventDim       inventDim;

        if (!inventDimMap)
        {
            inventDimMap   = new Map(Types::String, Types::Record);
        }

        if (inventDimMap.exists(_inventDimId))
        {
            inventDim = inventDimMap.lookup(_inventDimId);
        }
        else
        {
            inventDim = inventDim::find(_inventDimId);
            inventDimMap.insert(_inventDimId, inventDim);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventOnHandQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the on hand quantities for the specified item and dimensions.
    /// </summary>
    /// <param name="_itemId">
    /// The item.
    /// </param>
    /// <param name="_inventDim">
    /// The set of inventory dimensions for which on hand is found.
    /// </param>
    /// <returns>
    /// An <c>InventSum</c> record holding on hand values.
    /// </returns>

    protected InventSum findInventOnHandQty(ItemId _itemId, InventDim _inventDim)
    {
        InventSum           inventSum;
        InventDimParm       inventDimParm;

        if (!inventOnHandQtyMap)
        {
            inventOnHandQtyMap   = new Map(Types::String, Types::Record);
        }

        if (inventOnHandQtyMap.exists(_itemId + _inventDim.InventDimId))
        {
            inventSum = inventOnHandQtyMap.lookup(_itemId + _inventDim.InventDimId);
        }
        else
        {
            inventDimParm.initFromInventDim(_inventDim);
            inventSum = InventOnHandQty::newParameters(_itemId,_inventDim, inventDimParm).inventSum();
            inventOnHandQtyMap.insert(_itemId + _inventDim.InventDimId, inventSum);
        }

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findQtyOnPick</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the quantity on a picking list or output order for the item and the <c>inventdim</c> on the
    ///    sales line.
    /// </summary>
    /// <param name="_itemId">
    ///    The <c>ItemId</c> of the item on the sales line.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> on the sales line.
    /// </param>
    /// <returns>
    ///    The quantity of <c>inventTrans</c> with a child reference equal to
    ///    <c>InventTransChildType::WMSOrder</c> or <c>InventTransChildType::InventJournalPickingList</c>.
    /// </returns>
    /// <remarks>
    ///    The result is saved in a map, for performance reasons.
    /// </remarks>
    protected InventQty findQtyOnPick(ItemId _itemId, InventDim _inventDim)
    {
        InventQty           qtyOnPickWMSTotal;
        InventDimParm       inventDimParm;

        if (!qtyOnPickMap)
        {
            qtyOnPickMap   = new Map(Types::String, Types::Real);
        }

        if (qtyOnPickMap.exists(_itemId + _inventDim.InventDimId))
        {
            qtyOnPickWMSTotal = qtyOnPickMap.lookup(_itemId + _inventDim.InventDimId);
        }
        else
        {
            inventDimParm.data(this.initInventDimParm(_inventDim));
            qtyOnPickWMSTotal = InventTrans::qtyTotalWMSOrder(_itemId, _inventDim, inventDimParm);
            qtyOnPickMap.insert(_itemId + _inventDim.InventDimId, qtyOnPickWMSTotal);
        }

        return -qtyOnPickWMSTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findQtyPhysicalInvent</Name>
				<Source><![CDATA[
    protected InventQty findQtyPhysicalInvent(ItemId _itemId, InventDim _inventDim)
    {
        return this.findInventOnHandQty(_itemId, _inventDim).PhysicalInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findQtyReservedOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity from <c>inventTrans</c> that has a
    ///    <c>statusIssue</c><c>StatusIssue::ReservOrdered</c>.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The <c>InventTransId</c> for the transactions that should be summed.
    /// </param>
    /// <returns>
    ///    The quantity from <c>inventTrans</c> that has a <c>statusIssue</c> of
    ///    <c>StatusIssue::ReservOrdered</c>.
    /// </returns>
    protected InventQty findQtyReservedOrdered(InventTransId _inventTransId)
    {
        InventTransOriginId inventTransOriginId = InventTransOrigin::findByInventTransId(_inventTransId).RecId;

        return -(select sum(Qty) from inventTrans
                    where inventTrans.InventTransOrigin        == inventTransOriginId
                       && inventTrans.MarkingRefInventTransOrigin
                       && inventTrans.StatusIssue              == StatusIssue::ReservOrdered
                       && inventTrans.StatusReceipt            == StatusReceipt::None).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>InventDimParm</c> buffer from the the specified <c>InventDim</c> buffer.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> buffer.
    /// </param>
    /// <returns>
    /// An <c>InventDimParm</c> buffer.
    /// </returns>
    /// <remarks>
    /// Caches previously initialized <c>InventDimParm</c> buffers.
    /// </remarks>
    protected InventDimParm initInventDimParm(InventDim _inventDim)
    {
        InventDimParm inventDimParm;

        if (!inventDimParmMap)
        {
            inventDimParmMap = new Map(Types::String, Types::Record);
        }

        if (inventDimParmMap.exists(_inventDim.inventDimId))
        {
            inventDimParm = inventDimParmMap.lookup(_inventDim.inventDimId);
        }
        else
        {
            inventDimParm.initFromInventDim(_inventDim);
            inventDimParmMap.insert(_inventDim.inventDimId, inventDimParm);
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdExistQueryAndRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query and <c>querybuildranges</c> that are used to determine whether a production
    /// order exists.
    /// </summary>
    protected void initProdExistQueryAndRange()
    {
        queryInventTrans        = new Query();

        QueryBuildDataSource qbdsInventTransOrigin = queryInventTrans.addDataSource(tableNum(InventTransOrigin));
        qbdsInventTransOrigin.firstOnly();

        QueryBuildDataSource qbdsInventTrans = qbdsInventTransOrigin.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.joinMode(JoinMode::InnerJoin);
        qbdsInventTrans.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTrans, InventTransOrigin));

        qbrInventTransTransType     = qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin,ReferenceCategory));
        qbrInventTransItemId        = qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin,ItemId));

        qbrInventTransInventDimId   = qbdsInventTrans.addRange(fieldNum(InventTrans,InventDimId));
        qbrInventTransDateExpected  = qbdsInventTrans.addRange(fieldNum(InventTrans,DateExpected));
        qbrInventTransStatus        = qbdsInventTrans.addRange(fieldNum(InventTrans,StatusIssue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesLineExistQueryAndRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query and <c>querybuildrange</c>s that are used to determine whether a sales order
    /// exists.
    /// </summary>
    protected void initSalesLineExistQueryAndRange()
    {
        querySalesLineExist = new Query();
        QueryBuildDataSource qbdsSalesLine = querySalesLineExist.addDataSource(tableNum(SalesLine));
        qbdsSalesLine.firstOnly();
        qbrSalesLineItemId          = qbdsSalesLine.addRange(fieldNum(SalesLine,ItemId));
        qbrSalesLineInventDimId     = qbdsSalesLine.addRange(fieldNum(SalesLine,InventDimId));
        qbrSalesLineConfirmedDlv    = qbdsSalesLine.addRange(fieldNum(SalesLine,ConfirmedDlv));
        qbrSalesLineSalesStatus     = qbdsSalesLine.addRange(fieldNum(SalesLine,SalesStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransferExistQueryAndRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query and <c>querybuildrange</c>s that are used to determine whether a transfer order
    /// exists.
    /// </summary>
    protected void initTransferExistQueryAndRange()
    {
        queryTransferExist = new Query();
        queryTransferExist.addDataSource(tableNum(InventTransferLine));
        QueryBuildDataSource qbdsInventTransferLine = queryTransferExist.dataSourceTable(tableNum(InventTransferLine));
        qbdsInventTransferLine.firstOnly();
        qbrInventTransferLineItemId         = qbdsInventTransferLine.addRange(fieldNum(InventTransferLine,ItemId));
        qbrInventTransferLineInventDimId    = qbdsInventTransferLine.addRange(fieldNum(InventTransferLine,InventDimId));
        qbrInventTransferLineShipDate       = qbdsInventTransferLine.addRange(fieldNum(InventTransferLine,ShipDate));
        qbrInventTransferLineStatus         = qbdsInventTransferLine.addRange(fieldNum(InventTransferLine,RemainStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>needAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether manual allocation is need for orders.
    /// </summary>
    /// <param name="_itemId">
    /// The item that is being ordered.
    /// </param>
    /// <param name="_inventDim">
    /// The set of inventory dimensions that are required for the order.
    /// </param>
    /// <param name="_buffer">
    /// The originating order line; optional.
    /// </param>
    /// <returns>
    /// true if manual allocation is needed; otherwise false.
    /// </returns>
    protected boolean needAllocation(ItemId _itemId, InventDim _inventDim, Common _buffer = null)
    {
        InventSum           inventSum = this.findInventOnHandQty(_itemId, _inventDim);

        return (inventSum.AvailPhysical < inventSum.OnOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marked as protected to avoid creating instances of this base class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeductUnreserved</Name>
				<Source><![CDATA[
    protected boolean parmDeductUnreserved(boolean _deductUnreserved = deductUnreserved)
    {
        deductUnreserved = _deductUnreserved;
        return deductUnreserved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventReleaseOrderPickingTmp</Name>
				<Source><![CDATA[
    InventReleaseOrderPickingTmp parmInventReleaseOrderPickingTmp(InventReleaseOrderPickingTmp _inventReleaseOrderPickingTmp = inventReleaseOrderPickingTmp)
    {
        inventReleaseOrderPickingTmp.linkPhysicalTableInstance(_inventReleaseOrderPickingTmp);
        return inventReleaseOrderPickingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAllOrdersDeliverable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the result of the search if there is enough available physical
    /// inventory to fulfill quantity on order.
    /// </summary>
    /// <param name="_itemId">ItemId to check quantities for.</param>
    /// <param name="_inventDim">Dimensions to check quantity for.</param>
    /// <returns>
    /// Result of the search if there is enough available physical inventory to
    /// fulfill quantity on order.  True if there is enough quantity, otherwise false.
    /// </returns>
    protected boolean pdsCWAllOrdersDeliverable(
        ItemId _itemId,
        InventDim _inventDim)
    {
        InventDimParm       inventDimParm;

        inventDimParm.initFromInventDim(_inventDim);
        InventSum inventSum = InventSum::findSumQty(_itemId, _inventDim, inventDimParm);

        return (inventSum.PdsCWAvailPhysical >= inventSum.PdsCWOnOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWFindQtyOnPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the catch weight quantity on a picking list or output order for the item and the
    /// <c>inventdim</c> on the sales line.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> value of the item on the sales line.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> value on the sales line.
    /// </param>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    /// <remarks>
    /// The result is saved in a map for performance reasons.
    /// </remarks>
    public PdsCWInventQty pdsCWFindQtyOnPick(ItemId _itemId, InventDim _inventDim)
    {
        PdsCWInventQty   cwQtyOnPickWMSTotal;
        InventDimParm       inventDimParm;

        inventDimParm.initFromInventDim(_inventDim);
        if (!cwQtyOnPickMap)
        {
            cwQtyOnPickMap   = new Map(Types::String, Types::Real);
        }

        if (cwQtyOnPickMap.exists(_itemId + _inventDim.InventDimId))
        {
            cwQtyOnPickWMSTotal =
                cwQtyOnPickMap.lookup(_itemId + _inventDim.InventDimId);
        }
        else
        {
            cwQtyOnPickWMSTotal = InventTrans::pdsCWQtyTotalWMSOrder(
                                                                _itemId,
                                                                _inventDim,
                                                                inventDimParm);
            cwQtyOnPickMap.insert(
                        _itemId + _inventDim.InventDimId,
                        cwQtyOnPickWMSTotal);
        }

        return -cwQtyOnPickWMSTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWFindQtyPhysicalInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds total catch weight qty for item _itemId with dimensions _inventDim
    /// </summary>
    /// <param name="_itemId">ItemId to get quantities for.</param>
    /// <param name="_inventDim">Dimensions to get qty for.</param>
    /// <returns>
    /// Total catch weight qty for item _itemId at with dimensions _inventDim.
    /// </returns>
    public PdsCWInventQty pdsCWFindQtyPhysicalInvent(
        ItemId _itemId,
        InventDim _inventDim)
    {
        InventSum   inventSum   = this.findInventOnHandQty(_itemId, _inventDim);

        return inventSum.PdsCWPhysicalInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWFindQtyReservedOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight quantity from the <c>inventTrans</c> table that has a <c>statusIssue</c>
    /// enumeration value of <c>StatusIssue::ReservOrdered</c>.
    /// </summary>
    /// <param name="_inventTransId">
    /// The <c>InventTransId</c> value for the transactions that should be summed.
    /// </param>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWFindQtyReservedOrdered(InventTransId _inventTransId)
    {
        InventTransOriginId inventTransOriginId = InventTransOrigin::findByInventTransId(_inventTransId).RecId;

        return -(select sum(PdsCWQty) from inventTrans
                    where inventTrans.InventTransOrigin             == inventTransOriginId
                       && inventTrans.MarkingRefInventTransOrigin
                       && inventTrans.StatusReceipt                 == StatusReceipt::None
                       && inventTrans.StatusIssue                   == StatusIssue::ReservOrdered).PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWNeedAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs check to see if more inventory needs to be allocated to cover CW
    /// qty on order.
    /// </summary>
    /// <param name="_itemId">
    /// ItemId to check quantities for.
    /// </param>
    /// <param name="_inventDim">
    /// ItemId to check quantities for.
    /// </param>
    /// <returns>
    /// Result of check to see if more inventory needs to be allocated to cover CW
    /// qty on order.  True if there is not enough inventory, otherwise false.
    /// </returns>
    protected boolean pdsCWNeedAllocation(
        ItemId _itemId,
        InventDim _inventDim)
    {
        InventSum           inventSum = this.findInventOnHandQty(_itemId, _inventDim);

        return (inventSum.PdsCWAvailPhysical < inventSum.PdsCWOnOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionOrderLineExist</Name>
				<Source><![CDATA[
    protected boolean productionOrderLineExist(ItemId _itemId, InventDimId _inventDimId, str _dateRange = '')
    {
        if (!prodItemExistMap)
        {
            prodItemExistMap   = new Map(Types::String, Types::Enum);
        }

        if (prodItemExistMap.exists(_itemId + _inventDimId))
        {
            return prodItemExistMap.lookup(_itemId + _inventDimId);
        }

        if (!queryInventTrans)
        {
            this.initProdExistQueryAndRange();
        }

        qbrInventTransItemId.value(queryValue(_itemId));
        qbrInventTransInventDimId.value(queryValue(_inventDimId));
        qbrInventTransStatus.value(SysQuery::range(StatusIssue::ReservPhysical, StatusIssue::OnOrder));
        qbrInventTransTransType.value(queryValue(InventTransType::ProdLine));

        if (_dateRange)
        {
            qbrInventTransDateExpected.value(_dateRange);
        }
        else //if user has not entered anything _dateRange will be blank corresponding to unlimited range
        {
            qbrInventTransDateExpected.value(SysQuery::valueUnlimited());
        }

        QueryRun queryRun = new QueryRun(queryInventTrans);

        if (queryRun.next())
        {
            prodItemExistMap.insert(_itemId + _inventDimId,true);
            return true;
        }

        prodItemExistMap.insert(_itemId + _inventDimId,false);
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesOrderExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tests whether a sales order for the <c>_itemId</c> with <c>_inventDim</c> exists.
    /// </summary>
    /// <param name="_itemId">
    ///    The <c>ItemId</c> for the order line.
    /// </param>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> for the order line.
    /// </param>
    /// <param name="_dateRange">
    ///    A date range for which to restrict the test; optional.
    /// </param>
    /// <returns>
    ///    Returns true if a sales order for the <c>_itemId</c> with <c>_inventDim</c> exists.
    /// </returns>
    protected boolean salesOrderExist(ItemId _itemId, InventDimId _inventDimId, str _dateRange = '')
    {
        if (!salesLineItemExistMap)
        {
            salesLineItemExistMap   = new Map(Types::String, Types::Enum);
        }

        if (salesLineItemExistMap.exists(_itemId + _inventDimId))
        {
            return salesLineItemExistMap.lookup(_itemId + _inventDimId);
        }

        if (!querySalesLineExist)
        {
            this.initSalesLineExistQueryAndRange();
        }

        qbrSalesLineItemId.value(queryValue(_itemId));
        qbrSalesLineInventDimId.value(queryValue(_inventDimId));
        qbrSalesLineSalesStatus.value(queryValue(SalesStatus::Backorder));

        if (_dateRange)
        {
            qbrSalesLineConfirmedDlv.value(_dateRange);
        }
        else //if user has not entered anything _dateRange will be blank corresponding to unlimited range
        {
            qbrSalesLineConfirmedDlv.value(SysQuery::valueUnlimited());
        }

        QueryRun queryRunSalesLineExist = new QueryRun(querySalesLineExist);

        if (queryRunSalesLineExist.next())
        {
            salesLineItemExistMap.insert(_itemId + _inventDimId,true);
            return true;
        }

        salesLineItemExistMap.insert(_itemId + _inventDimId,false);
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferOrderExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a transfer order for the <c>_itemId</c> with <c>_inventDim</c> exists.
    /// </summary>
    /// <param name="_itemId">
    ///    <c>ItemId</c> for the order line.
    /// </param>
    /// <param name="_inventDimId">
    ///    <c>InventDimId</c> for the order line.
    /// </param>
    /// <param name="_dateRange">
    ///    A date range to which to restrict the test.
    /// </param>
    /// <returns>
    ///    true if a transfer order for the <c>_itemId</c> with <c>_inventDim</c> exists; otherwise, false.
    /// </returns>
    protected boolean transferOrderExist(ItemId _itemId, InventDimId _inventDimId, str _dateRange = '')
    {
        if (!transferLineItemExistMap)
        {
            transferLineItemExistMap   = new Map(Types::String, Types::Enum);
        }

        if (transferLineItemExistMap.exists(_itemId + _inventDimId))
        {
            return transferLineItemExistMap.lookup(_itemId + _inventDimId);
        }

        if (!queryTransferExist)
        {
            this.initTransferExistQueryAndRange();
        }

        qbrInventTransferLineItemId.value(queryValue(_itemId));
        qbrInventTransferLineInventDimId.value(queryValue(_inventDimId));
        qbrInventTransferLineStatus.value(queryValue(InventTransferRemainStatus::Shipping));

        if (_dateRange)
        {
            qbrInventTransferLineShipDate.value(_dateRange);
        }
        else //if user has not entered anything _dateRange will be blank corresponding to unlimited range
        {
            qbrInventTransferLineShipDate.value(SysQuery::valueUnlimited());
        }

        QueryRun queryRun = new QueryRun(queryTransferExist);

        if (queryRun.next())
        {
            transferLineItemExistMap.insert(_itemId + _inventDimId,true);
            return true;
        }

        transferLineItemExistMap.insert(_itemId + _inventDimId,false);
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverActivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the user is requesting to release a quantity that exceeds the available quantity.
    /// </summary>
    /// <param name="_buffer">
    /// The order line that is being modified.
    /// </param>
    /// <param name="_activateNow">
    /// The quantity that is being requested by the user.
    /// </param>
    /// <param name="_deductUnreserved">
    /// A Boolean value that indicates whether the form check box is marked.
    /// </param>
    /// <param name="_cwActivateNow">
    ///    The catch weight quantity being requested by the user.
    /// </param>
    /// <returns>
    /// true if the quantity is acceptable; otherwise, false.
    /// </returns>
    static protected boolean checkOverActivate(
        Common          _buffer,
        InventQty       _activateNow,
        boolean         _deductUnreserved,
        PdsCWInventQty  _cwActivateNow)
    {
        Qty                 qtyTotalWMSOrder;
        Qty                 availableForActivation;
        Qty                 reserveNow;
        InventDimParm       inventDimParm;

        InventMovement movement = InventMovement::construct(_buffer);
        boolean isCWItem = movement.pdsCWItem();

        inventDimParm.initFromInventDim(movement.inventdim());
        // find qty on pickinglist or output order not reserved - if deductUnreserved is set on form
        if (_deductUnreserved)
        {
            if (!isCWItem)
            {
                qtyTotalWMSOrder    = -InventTrans::qtyTotalWMSOrderNotReserved(movement.itemId(), movement.inventdim(), inventDimParm);
            }
            else
            {
                qtyTotalWMSOrder    = -InventTrans::pdsCWQtyTotalWMSOrderNotReserved(movement.itemId(), movement.inventdim(), inventDimParm);
            }
        }

        InventQty activateRemainder;
        InventQty onOrderQty;
        InventTransferLine inventTransferLine;
        SalesLine          salesLine;

        switch (_buffer.TableId)
        {
            case tableNum(InventTransferLine):
                inventTransferLine =_buffer;
                activateRemainder = isCWItem ? inventTransferLine.pdsCWQtyActivateRemainder() : inventTransferLine.qtyActivateRemainder();
                onOrderQty = isCWItem ? inventTransferLine.PdsCWQtyRemainShip : inventTransferLine.QtyRemainShip;
                break;

            case tableNum(SalesLine):
                salesLine = _buffer;
                activateRemainder = isCWItem ? salesLine.pdsCWQtyActivateRemainder() : salesLine.qtyActivateRemainder();
                onOrderQty = isCWItem ? salesLine.PdsCWRemainInventPhysical : salesLine.RemainInventPhysical;
                break;

            default:
                break;
        }

        // find qty to reserve now from salesLine
        if (!isCWItem)
        {
            reserveNow = (onOrderQty - activateRemainder) + _activateNow - (-movement.transIdSum().reserved()) - (-movement.transIdSum().picked());
        }
        else
        {
            reserveNow = (onOrderQty - activateRemainder) + _cwActivateNow - (-movement.transIdSum().pdsCWReserved()) - (-movement.transIdSum().pdsCWPicked());
        }

        //find qty to check for availableForActivation
        if (reserveNow > 0)
        {
            InventOnHandQty inventOnHandQty = InventOnHandQty::newEstimatedUpdate(movement,movement.inventdim());

            if (!isCWItem)
            {
                availableForActivation = inventOnHandQty.availReservation(InventParameters::find().ReserveOnOrdered) - qtyTotalWMSOrder;
            }
            else
            {
                availableForActivation = inventOnHandQty.pdsCWAvailReservation(InventParameters::find().ReserveOnOrdered) - qtyTotalWMSOrder;
            }

            if (reserveNow > availableForActivation)
            {
                return checkFailed("@SYS8691");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipProductionOrderExistCalculation</Name>
				<Source><![CDATA[
    protected boolean parmSkipProductionOrderExistCalculation(boolean _skipProductionOrderExistCalculation = skipProductionOrderExistCalculation)
    {
        skipProductionOrderExistCalculation = _skipProductionOrderExistCalculation;
        return skipProductionOrderExistCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipTransferOrderExistCalculation</Name>
				<Source><![CDATA[
    protected boolean parmSkipTransferOrderExistCalculation(boolean _skipTransferOrderExistCalculation = skipTransferOrderExistCalculation)
    {
        skipTransferOrderExistCalculation = _skipTransferOrderExistCalculation;
        return skipTransferOrderExistCalculation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>