<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanBudgetTransAuditDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanBudgetTransAuditDP</c> class is the report data provider class for <c>BudgetPlanBudgetTransAuditReport</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(BudgetPlanTransAuditReport)),
    SRSReportParameterAttribute(classStr(BudgetPlanBudgetTransAuditContract))
]
public class BudgetPlanBudgetTransAuditDP extends SRSReportDataProviderBase
{
    NoYes                              isDiscrepancyVisible;
    CurrencyCode                       currencyCode;
    BudgetPlanLine                     budgetPlanLine;
    BudgetPlanHeader                   budgetPlanHeader;
    BudgetPlanScenario                 budgetPlanScenario;
    BudgetTransactionLine              budgetTransactionLine;
    BudgetPlanningProcess              budgetPlanningProcess;
    OMInternalOrganization             internalOrganization;
    BudgetTransactionHeader            budgetTransactionHeader;
    BudgetPlanReportGroupOption        firstGroupOption;
    BudgetPlanBudgetTransAuditTmp      budgetPlanBudgetTransAuditTmp;
    DimensionAttributeValueCombination dimensionAttributeValueCombination;

    AmountMST budgetPlanExpenseAmount;
    AmountMST budgetPlanRevenueAmount;
    AmountMST budgetTransExpenseAmount;
    AmountMST budgetTransRevenueAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBudgetPlanBudgetTransAuditTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>BudgetPlanBudgetTransAuditTmp</c> record.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(BudgetPlanBudgetTransAuditTmp))
    ]
    public BudgetPlanBudgetTransAuditTmp getBudgetPlanBudgetTransAuditTmp()
    {
        select budgetPlanBudgetTransAuditTmp;
        return budgetPlanBudgetTransAuditTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBudgetPlanBudgetTransAuditTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the records in the <c>BudgetPlanBudgetTransAuditTmp</c> temporary table.
    /// </summary>
    protected void insertBudgetPlanBudgetTransAuditTmp()
    {
        budgetPlanBudgetTransAuditTmp.Name                                  = budgetPlanHeader.Name;
        budgetPlanBudgetTransAuditTmp.CurrencyCode                          = currencyCode;
        budgetPlanBudgetTransAuditTmp.EffectiveDate                         = budgetPlanLine.EffectiveDate;
        budgetPlanBudgetTransAuditTmp.DocumentNumber                        = budgetPlanHeader.DocumentNumber;
        budgetPlanBudgetTransAuditTmp.DimensionDisplayValue                 = dimensionAttributeValueCombination.DisplayValue;
        budgetPlanBudgetTransAuditTmp.BudgetPlanScenarioName                = budgetPlanScenario.Name;
        budgetPlanBudgetTransAuditTmp.BudgetRegisterEntryNumber             = budgetTransactionHeader.TransactionNumber;
        budgetPlanBudgetTransAuditTmp.BudgetPlanAccountingCurRevenueAmount  = budgetPlanRevenueAmount;
        budgetPlanBudgetTransAuditTmp.BudgetPlanAccountingCurExpenseAmount  = budgetPlanExpenseAmount;
        budgetPlanBudgetTransAuditTmp.BudgetTransAccountingCurExpenseAmount = budgetTransExpenseAmount;
        budgetPlanBudgetTransAuditTmp.BudgetTransAccountingCurRevenueAmount = budgetTransRevenueAmount;

        budgetPlanBudgetTransAuditTmp.FirstReportGroup = BudgetPlanReportHelper::getBudgetPlanReportGroupData(
                                                                           firstGroupOption,
                                                                           budgetPlanHeader,
                                                                           budgetPlanLine,
                                                                           budgetPlanningProcess,
                                                                           internalOrganization);

        budgetPlanBudgetTransAuditTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        BudgetPlanScenarioRecId            budgetPlanScenarioRecId;
        BudgetPlanLineEffectiveDate        effectiveFromDate;
        BudgetPlanLineEffectiveDate        effectiveToDate;
        BudgetPlanBudgetTransAuditContract contract;
        RecId                              lastBudgetPlanLineRecId;

        Query query = this.parmQuery();

        QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(BudgetPlanLine));

        contract = this.parmDataContract() as BudgetPlanBudgetTransAuditContract;

        currencyCode            = Ledger::accountingCurrency();
        firstGroupOption        = contract.parmFirstGroupOption();
        effectiveToDate         = contract.parmBudgetPlanLineEffectiveToDate();
        effectiveFromDate       = contract.parmBudgetPlanLineEffectiveFromDate();
        isDiscrepancyVisible    = contract.parmIsDiscrepancyVisible();
        budgetPlanScenarioRecId = contract.parmBudgetPlanScenario();

        SysQuery::findOrCreateRange(
            queryBuildDataSource,
            fieldNum(BudgetPlanLine, BudgetPlanScenario)).value(SysQuery::value(budgetPlanScenarioRecId));

        SysQuery::findOrCreateRange(
            queryBuildDataSource,
            fieldNum(BudgetPlanLine, EffectiveDate)).value(SysQuery::range(effectiveFromDate, effectiveToDate));

        QueryRun queryRun = new QueryRun(query);

        // Populate the temp table datasource to restrict the budget plan headers the user can view.
        queryRun.setRecord(BudgetPlan::populateBudgetPlanInquiryTmp());

        while (queryRun.next())
        {
            budgetPlanLine                     = queryRun.get(tableNum(BudgetPlanLine));
            budgetPlanHeader                   = queryRun.get(tableNum(BudgetPlanHeader));
            budgetPlanScenario                 = queryRun.get(tableNum(BudgetPlanScenario));
            internalOrganization               = queryRun.get(tableNum(OMInternalOrganization));
            budgetPlanningProcess              = queryRun.get(tableNum(BudgetPlanningProcess));
            budgetTransactionLine              = queryRun.get(tableNum(BudgetTransactionLine));
            budgetTransactionHeader            = queryRun.get(tableNum(BudgetTransactionHeader));
            dimensionAttributeValueCombination = queryRun.get(tableNum(DimensionAttributeValueCombination));

            this.setExpenseAndRevenueAmount(budgetPlanLine, budgetTransactionLine);

            if (budgetPlanLine.RecId == lastBudgetPlanLineRecId)
            {
                // This BudgetPlanLine record has already been processed. Don't show the budget plan amount for the same BudgetPlanLine record.
                budgetPlanRevenueAmount = 0;
                budgetPlanExpenseAmount = 0;
            }
            else
            {
                lastBudgetPlanLineRecId = budgetPlanLine.RecId;
            }

            if (isDiscrepancyVisible)
            {
                if (budgetPlanRevenueAmount != budgetTransRevenueAmount || budgetPlanExpenseAmount != budgetTransExpenseAmount)
                {
                    this.insertBudgetPlanBudgetTransAuditTmp();
                }
            }
            else
            {
                this.insertBudgetPlanBudgetTransAuditTmp();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpenseAndRevenueAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the expense and revenue amount for budget plan and budget transaction from budget plan line and budget transaction line records.
    /// </summary>
    /// <param name="_budgetPlanLine">
    /// The budget plan line record.
    /// </param>
    /// <param name="_budgetTransactionLine">
    /// The budget transaction line record.
    /// </param>
    private void setExpenseAndRevenueAmount(
        BudgetPlanLine _budgetPlanLine,
        BudgetTransactionLine _budgetTransactionLine)
    {
        // Initializing budget plan line and budget transaction line revenue and expense amounts to zero.
        budgetPlanExpenseAmount  = 0;
        budgetPlanRevenueAmount  = 0;
        budgetTransExpenseAmount = 0;
        budgetTransRevenueAmount = 0;

        if (_budgetPlanLine.BudgetClass == BudgetClass::Expense)
        {
            budgetPlanExpenseAmount = _budgetPlanLine.AccountingCurrencyAmount;
        }
        else if (_budgetPlanLine.BudgetClass == BudgetClass::Revenue)
        {
            budgetPlanRevenueAmount = _budgetPlanLine.AccountingCurrencyAmount;
        }

        if (_budgetTransactionLine.BudgetType == BudgetType::Expense)
        {
            budgetTransExpenseAmount = _budgetTransactionLine.AccountingCurrencyAmount;
        }
        else if (_budgetTransactionLine.BudgetType == BudgetType::Revenue)
        {
            budgetTransRevenueAmount = _budgetTransactionLine.AccountingCurrencyAmount;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>