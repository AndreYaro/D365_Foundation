<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgCurrentActivitiesFactbox</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgCurrentActivitiesFactbox</c> class maintains the current activities fact box on the
///    registration client.
/// </summary>
public class JmgCurrentActivitiesFactbox extends Object
{
    FormGroupControl    txtGrp;
    JmgWorkerRecId      worker;
    JmgDate             viewDate;
    container           jobIds;
    container           myControls;
    FormRun             parentForm;
    FormStaticTextControl   noActs;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Occurs when the current activities for the current user is to be gathered and displayed in the
    ///    parent form.
    /// </summary>
    public void getActivities()
    {
        JmgStampJournalTrans trs;
        Object formRun;
        JmgRegistrationForm formClass;
        if (worker == 0)
        {
            return;
        }
        jobIds = connull();
        if (parentForm.name() == formstr(JmgCurrentActivity))
        {
            formRun = parentForm;
            formClass = formRun.registrationFormClass();
            jobIds = formClass.getCurrJobIdsCon();
        }
        else
        {
            trs = JmgCurrentActivitiesFactbox::getStampJournalTrans(worker, viewDate);
            while select JobId from trs
            order by StartTime asc
            where trs.Active == NoYes::Yes
            {
                jobIds += trs.JobId;
            }
        }

        this.showCurrentActivities();

        if (parentForm != null)
        {
            parentForm.design().caption(strfmt("@SYS70938","@SYS301946",int2str(conlen(jobIds))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(FormGroupControl _txtGrp, FormRun _parentForm)
    {
        txtGrp  = _txtGrp;
        parentForm = _parentForm;
        myControls = connull();
        noActs = txtGrp.controlNum(1);
        super();

        this.getActivities();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewDate</Name>
				<Source><![CDATA[
    public JmgDate parmviewDate(JmgDate _viewDate = viewDate)
    {
        viewDate = _viewDate;
        return viewDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorker</Name>
				<Source><![CDATA[
    public JmgWorkerRecId parmWorker(JmgWorkerRecId _worker = worker)
    {
        worker = _worker;
        return worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCurrentActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the current activities group on the parent form with the jobs that the user is currently
    ///    working on.
    /// </summary>
    private void showCurrentActivities()
    {
        FormStaticTextControl     fst;
        JmgJobTable                 jobTbl;
        int actNo;
        int totalElements = conlen(jobIds);

        noActs.visible(!totalElements);

        // The first control is the label stating there are no current activities, which should not be removed.
        if (parentForm != null)
        {
            for (int controlNo = txtGrp.controlCount(); controlNo >= 2; controlNo--)
            {
                FormControl control = txtGrp.controlNum(controlNo);
                parentForm.design().removeControl(control.id());
            }
        }

        for (actNo = 0; actNo < max(totalElements, conlen(myControls)); actNo++)
        {
            if (actNo >= conlen(myControls))
            {
                fst = txtGrp.addControl(FormControlType::StaticText,'statText'+int2str(actNo));
                myControls += fst.id();
            }
            fst = parentForm.control(conpeek(myControls,actNo+1));
            if (actNo >= totalElements)
            {
                fst.visible(false);
            }
            else
            {
                jobTbl = JmgJobTable::find(conpeek(jobIds,actNo+1));
                fst.text(strfmt("@SYS330953",jobTbl.ModuleRefId,enum2str(jobTbl.Type),jobTbl.Description));
                fst.visible(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs the <c>JmgCurrentActivitiesFactbox</c> class.
    /// </summary>
    /// <param name="_txtGrp">
    ///    The <c>FormGroupControl</c> element in which to display the current activities.
    /// </param>
    /// <param name="_parentForm">
    ///    The instance of the form in which the current activities is to be displayed.
    /// </param>
    /// <returns>
    ///    An active <c>JmgCurrentActivitiesFactbox</c> class.
    /// </returns>
    public static JmgCurrentActivitiesFactbox construct(FormGroupControl _txtGrp, FormRun _parentForm)
    {
        return new JmgCurrentActivitiesFactbox(_txtGrp,_parentForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStampJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>JmgStampJournalTrans</c> table buffer for the specified worker on the specified date.
    /// </summary>
    /// <param name="_worker">
    ///    The worker ID to use.
    /// </param>
    /// <param name="_profileDate">
    ///    The profile date for when the buffer should be retrieved.
    /// </param>
    /// <returns>
    ///    A buffer of records for the specified day.
    /// </returns>
    private static JmgStampJournalTrans getStampJournalTrans(JmgWorkerRecId _worker, JmgDate _profileDate)
    {
        JmgStampJournalTable    tbl = JmgStampJournalTable::find(_worker,_profileDate);

        return tbl.getTransLinesTmp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>