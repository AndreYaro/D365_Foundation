<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostItemDimSecCur_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventTransCurrencyFactoryAttribute(InventTransCurrency_RU::SecondaryCur)]
class InventCostItemDimSecCur_RU extends InventCostItemDim
{
    CurrencyCode secondaryCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcKeyAdjustmentAllocation</Name>
				<Source><![CDATA[
    protected Amount calcKeyAdjustmentAllocation(   ProdBOM           _prodBOM,
                                                    Amount            _adjustment,
                                                    InventTransOrigin _parent = inventTrans::findTransId(_prodBOM.InventTransId).assemblyInventTransOrigin())
    {
        Amount                          allocation;
        PmfProdCoBy                     prodCoBy;
        InventTransOriginPmfProdCoBy    inventTransOriginPmfProdCoBy;
        InventTrans                     inventTrans;

        while select RecId, CostAllocationPct from prodCoBy
            where prodCoBy.ProdId == _prodBOM.ProdId
            &&    prodCoBy.ProductType == PmfProductType::Co_Product
        {
            while select InventTransOrigin from inventTransOriginPmfProdCoBy
                where  inventTransOriginPmfProdCoBy.PmfProdCoByDataAreaId   == prodCoBy.DataAreaId
                    && inventTransOriginPmfProdCoBy.PmfProdCoByRecId        == prodCoBy.RecId
                exists join inventTrans
                where  inventTrans.InventTransOrigin    == inventTransOriginPmfProdCoBy.InventTransOrigin
                    && (inventTrans.ValueOpenSecCur_RU  == InventTransOpen::Yes
                        || inventTrans.DateClosedSecCur_RU == inventClosing.TransDate)
            {
                Amount adjustmentAmount = _adjustment * prodCoBy.CostAllocationPct / 100;
                adjustmentAmount = CurrencyExchangeHelper::amount(adjustmentAmount);
                this.addkeyAdjustment(false, inventTransOriginPmfProdCoBy.InventTransOrigin, adjustmentAmount, 0, '');
                allocation += adjustmentAmount;
            }
        }

        return allocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountPosted</Name>
				<Source><![CDATA[
    protected CostAmountPosted costAmountPosted(InventTrans _inventTrans)
    {
        return _inventTrans.CostAmountSecCurPosted_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValue</Name>
				<Source><![CDATA[
    protected CostAmount costValue(InventTrans _inventTrans)
    {
        return _inventTrans.costValueSecCur_RU() - this.calcLaterAdjustment(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createErrorQtySettled</Name>
				<Source><![CDATA[
    protected void createErrorQtySettled(InventTrans _inventTrans,
                                         Qty         _qty
                                         , PdsCWInventQty _cwQty = 0
                                         )
    {
        InventSettlement inventSettlement = this.initInventSettlement(_inventTrans,_qty,0,0,InventSettleModel::Adjustment,_inventTrans.Qty >= 0 ? InventSettleType::Receipt : InventSettleType::Issue, InitLedgerDrop
            , false, _cwQty
        );
        inventSettlement.insert();

        _inventTrans.QtySettledSecCur_RU += _qty;

        this.updateInventTrans(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyTransfer_RU</Name>
				<Source><![CDATA[
    protected boolean currencyTransfer_RU(InventTrans _inventTrans)
    {
        return _inventTrans.CostAmountSecCurPosted_RU != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialOpenQty</Name>
				<Source><![CDATA[
    protected Qty financialOpenQty(InventTrans _inventTrans)
    {
        if (mapSettleQty.exists(_inventTrans.RecId))
        {
            return _inventTrans.financialOpenQtySecCur_RU() + mapSettleQty.lookup(_inventTrans.RecId);
        }

        return _inventTrans.financialOpenQtySecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialOpenValue</Name>
				<Source><![CDATA[
    protected CostAmount financialOpenValue(InventTrans _inventTrans)
    {
        CostAmount  costAmount = _inventTrans.isUpdatedFinancial() ? _inventTrans.financialOpenValueSecCur_RU() : _inventTrans.CostAmountSecCurPhysical_RU;

        if (mapSettleValue.exists(_inventTrans.RecId))
        {
            return costAmount + mapSettleValue.lookup(_inventTrans.RecId);
        }

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransFinancialOpenQty</Name>
				<Source><![CDATA[
    protected InventQty inventTransFinancialOpenQty(InventTrans _inventTrans)
    {
        return _inventTrans.openQtySecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTranspdsCWFinancialOpenQty</Name>
				<Source><![CDATA[
    protected InventQty inventTranspdsCWFinancialOpenQty(InventTrans _inventTrans)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventTransOpen</Name>
				<Source><![CDATA[
    protected boolean isInventTransOpen(InventTrans _receipt)
    {
        return _receipt.ValueOpenSecCur_RU == InventTransOpen::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    protected void load(
        InventDim   _inventDimCriteria,
        boolean     _transferOrdersOnly)
    {
        InventTrans         inventTrans;
        InventDim           inventDim;

        StatusReceipt       statusReceipt   = StatusReceipt::Purchased;
        StatusIssue         statusIssue     = StatusIssue::Sold;

        boolean             physicalDateCriteria;

        InventTransOrigin   inventTransOrigin;

        if (this.inventModelGroup(inventCostList.ItemId).InclPhysicalValueInCost)
        {
            if (this.inventModelGroup(inventCostList.ItemId).InventModel != InventModel::AverageCost &&
                this.inventModelGroup(inventCostList.ItemId).InventModel != InventModel::AverageCostDate)
            {
                statusReceipt           = StatusReceipt::Received;
                statusIssue             = StatusIssue::Deducted;
                physicalDateCriteria    = true;
            }
        }

        InventDimParm inventDimParm = this.inventDimParmFinancial(this.inventDimGroupSetup(this.inventTable(inventCostList.ItemId)));

        #inventDimDevelop

        if (inventDimParm.InventSerialIdFlag && _inventDimCriteria.InventSerialId)
        {
            while #inventDimSelect(inventDim, _inventDimCriteria, inventDimParm, forcePlaceholders, SerialIdIdx)
            join forupdate inventTrans
                where inventTrans.ItemId                == inventCostList.ItemId
                    &&   inventTrans.ValueOpenSecCur_RU == InventTransOpen::Yes
                    &&   inventTrans.StatusReceipt      <= statusReceipt
                    &&   inventTrans.StatusIssue        <= statusIssue
                    && (_transferOrdersOnly || inventTrans.MarkingRefInventTransOrigin == 0)
                    && ((inventTrans.DatePhysical  <= inventClosing.TransDate &&   physicalDateCriteria)
                    ||  (inventTrans.DateFinancial <= inventClosing.TransDate && ! physicalDateCriteria))
                    &&   inventTrans.InventDimId == inventDim.InventDimId
            join ReferenceCategory, InventTransId from inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                    && (!_transferOrdersOnly
                        || inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip
                        || inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderReceive)
            {
                this.loadTrans(inventTrans, _transferOrdersOnly, inventTransOrigin);
            }
        }
        else if (inventDimParm.InventBatchIdFlag && _inventDimCriteria.InventBatchId)
        {
            while #inventDimSelect(inventDim, _inventDimCriteria, inventDimParm, forcePlaceholders, BatchIdIdx)
            join forupdate inventTrans
                where inventTrans.ItemId                == inventCostList.ItemId
                    &&   inventTrans.ValueOpenSecCur_RU == InventTransOpen::Yes
                    &&   inventTrans.StatusReceipt      <= statusReceipt
                    &&   inventTrans.StatusIssue        <= statusIssue
                    && (_transferOrdersOnly || inventTrans.MarkingRefInventTransOrigin == 0)
                    && ((inventTrans.DatePhysical  <= inventClosing.TransDate &&   physicalDateCriteria)
                    ||  (inventTrans.DateFinancial <= inventClosing.TransDate && ! physicalDateCriteria))
                    &&   inventTrans.InventDimId == inventDim.InventDimId
            join ReferenceCategory, InventTransId from inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                    && (!_transferOrdersOnly
                        || inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip
                        || inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderReceive)
            {
                this.loadTrans(inventTrans, _transferOrdersOnly, inventTransOrigin);
            }
        }
        else
        {
            // Optimization note: All columns in the where clause are expected to be included in the index
            while select forupdate forceplaceholders inventTrans
                where inventTrans.ItemId                == inventCostList.ItemId
                    &&   inventTrans.ValueOpenSecCur_RU == InventTransOpen::Yes
                    &&   inventTrans.StatusReceipt      <= statusReceipt
                    &&   inventTrans.StatusIssue        <= statusIssue
                    && (_transferOrdersOnly || inventTrans.MarkingRefInventTransOrigin == 0)
                    && ((inventTrans.DatePhysical  <= inventClosing.TransDate &&   physicalDateCriteria)
                    ||  (inventTrans.DateFinancial <= inventClosing.TransDate && ! physicalDateCriteria))
            join ReferenceCategory, InventTransId from inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                    && (!_transferOrdersOnly
                        || inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip
                        || inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderReceive)
                #inventDimExistsJoin(inventTrans.inventDimId, inventDim, _inventDimCriteria, inventDimParm)
            {
                this.loadTrans(inventTrans, _transferOrdersOnly, inventTransOrigin);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new <c>InventCostItemDimSecCur_RU</c> object.
    /// </summary>
    /// <param name="_inventCostHelpTaskBase">
    ///    The <c>InventCostItemDim</c> class does the cost calculations for a single item.
    /// </param>
    /// <param name="_inventClosing">
    ///    The inventory closing that is currently being processed.
    /// </param>
    /// <param name="_inventTransCurrency">
    ///    The transaction currency: primary (accounting) or secondary (reporting).
    /// </param>
    public void new(InventCostHelpTaskBase _inventCostHelpTaskBase, InventClosing _inventClosing, InventTransCurrency_RU _inventTransCurrency)
    {
        super(_inventCostHelpTaskBase, _inventClosing, _inventTransCurrency);

        secondaryCurrency = CompanyInfoHelper::secondaryCurrency_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNonFinancialInventTransToClosed</Name>
				<Source><![CDATA[
    protected void setNonFinancialInventTransToClosed(InventTrans _inventTrans)
    {
        _inventTrans.ValueOpenSecCur_RU = InventTransOpen::No;
        _inventTrans.DateClosedSecCur_RU = inventClosing.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostAmountStd</Name>
				<Source><![CDATA[
    protected void updateCostAmountStd(InventTrans _inventTrans)
    {
        if (_inventTrans.Qty > 0 && ! this.inventModelGroup(_inventTrans.ItemId).StandardCost)
        {
            _inventTrans.CostAmountStdSecCur_RU = _inventTrans.costValueSecCur_RU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemReturnAdjustments</Name>
				<Source><![CDATA[
    public void updateItemReturnAdjustments(ItemId _itemId = inventCostList.ItemId)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventTrans         issue;
        Price               costPrice;
        CostAmount          adjustment;
        InventDim           inventDim;
        InventLocation      inventLocation;

        while select sum(Qty), sum(CostAmountSecCurAdjustment_RU), sum(CostAmountSecCurPosted_RU) from inventTrans
            group by   InventTransOrigin, ReturnInventTransOrigin
            where inventTrans.ItemId                        == _itemId
               && inventTrans.ValueOpenSecCur_RU            == InventTransOpen::Yes
               && inventTrans.StatusReceipt                 == StatusReceipt::Purchased
               && inventTrans.StatusIssue                   == StatusIssue::None
               && inventTrans.DateStatus                    <= inventClosing.TransDate
               && inventTrans.PackingSlipReturned           == 0
               && inventTrans.ReturnInventTransOrigin       != 0
            exists join inventTransOrigin
            where inventTransOrigin.RecId                   == inventTrans.InventTransOrigin
               && (  inventTransOrigin.ReferenceCategory    == InventTransType::Sales
                  || inventTransOrigin.ReferenceCategory    == InventTransType::BOMLine
                  || inventTransOrigin.ReferenceCategory    == InventTransType::InventLossProfit
                  || inventTransOrigin.ReferenceCategory    == InventTransType::InventTransaction
                  || inventTransOrigin.ReferenceCategory    == InventTransType::Project
                  || inventTransOrigin.ReferenceCategory    == InventTransType::ProdLine
                  )
        {
            select sum(Qty), sum(CostAmountSecCurAdjustment_RU), sum(CostAmountSecCurPosted_RU) from issue
                where issue.InventTransOrigin       == inventTrans.ReturnInventTransOrigin
                  &&  issue.StatusReceipt           == StatusReceipt::None
                  &&  issue.StatusIssue             == StatusIssue::Sold
                  &&  issue.PackingSlipReturned     == 0
                  &&  issue.ReturnInventTransOrigin == inventTrans.InventTransOrigin;

            if (issue.Qty)
            {
                costPrice   = (issue.CostAmountSecCurPosted_RU + issue.CostAmountSecCurAdjustment_RU) / issue.Qty;
                adjustment  = CurrencyExchangeHelper::amount(inventTrans.Qty * costPrice - inventTrans.CostAmountSecCurPosted_RU - inventTrans.CostAmountSecCurAdjustment_RU, secondaryCurrency);

                if (abs(adjustment) >= inventClosing.MinTransferValue && !InventAdj::isOnhandAdjusted(inventTrans.InventTransOrigin, inventTrans.ReturnInventTransOrigin, '', inventTransCurrency))
                {
                    this.updateTransIdReturnReceipt(inventTrans.InventTransOrigin, inventTrans.ReturnInventTransOrigin, costPrice);
                }
            }
        }

        while select sum(Qty), sum(CostAmountSecCurAdjustment_RU), sum(CostAmountSecCurPosted_RU) from inventTrans
            group by   InventTransOrigin, ReturnInventTransOrigin
            where inventTrans.ItemId                        == _itemId
               && inventTrans.ValueOpenSecCur_RU            == InventTransOpen::Yes
               && inventTrans.StatusReceipt                 == StatusReceipt::Purchased
               && inventTrans.StatusIssue                   == StatusIssue::None
               && inventTrans.DateStatus                    <= inventClosing.TransDate
               && inventTrans.PackingSlipReturned           == 0
               && inventTrans.ReturnInventTransOrigin       != 0
            exists join inventTransOrigin
            where inventTransOrigin.RecId                   == inventTrans.InventTransOrigin
               && (  inventTransOrigin.ReferenceCategory    == InventTransType::TransferOrderScrap
                  || inventTransOrigin.ReferenceCategory    == InventTransType::TransferOrderShip
                  || inventTransOrigin.ReferenceCategory    == InventTransType::TransferOrderReceive
                  )
            exists join inventDim
                where inventDim.InventDimId                 == inventTrans.InventDimId
             exists join inventLocation
                where inventLocation.InventLocationId       == inventDim.InventLocationId
                   && (inventTransOrigin.ReferenceCategory  == InventTransType::TransferOrderScrap
                   || (inventTransOrigin.ReferenceCategory  == InventTransType::TransferOrderShip
                   &&  inventLocation.InventLocationType    == InventLocationType::Standard)
                   || (inventTransOrigin.ReferenceCategory  == InventTransType::TransferOrderReceive
                   &&  inventLocation.InventLocationType    == InventLocationType::Transit))
        {
            select sum(Qty), sum(CostAmountSecCurAdjustment_RU), sum(CostAmountSecCurPosted_RU) from issue
                where issue.InventTransOrigin       == inventTrans.ReturnInventTransOrigin
                   && issue.StatusReceipt           == StatusReceipt::None
                   && issue.StatusIssue             == StatusIssue::Sold
                   && issue.PackingSlipReturned     == 0
                   && issue.ReturnInventTransOrigin == inventTrans.InventTransOrigin;

            if (issue.Qty)
            {
                costPrice   = (issue.CostAmountSecCurPosted_RU + issue.CostAmountSecCurAdjustment_RU) / issue.Qty;
                adjustment  = CurrencyExchangeHelper::amount(inventTrans.Qty * costPrice - inventTrans.CostAmountSecCurPosted_RU - inventTrans.CostAmountSecCurAdjustment_RU, secondaryCurrency);

                if (abs(adjustment) >= inventClosing.MinTransferValue && !InventAdj::isOnhandAdjusted(inventTrans.InventTransOrigin, inventTrans.ReturnInventTransOrigin, '', inventTransCurrency))
                {
                    this.updateTransIdReturnReceipt(inventTrans.InventTransOrigin, inventTrans.ReturnInventTransOrigin, costPrice);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMapOpenIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add an issue to mapOpenIssue because it could not be closed. Messages about these will later be written to the infolog.
    /// </summary>
    /// <param name="_inventTrans">
    /// The issue transaction that could not be closed.
    /// </param>
    protected void updateMapOpenIssue(InventTrans _inventTrans)
    {
        if (inventClosing.AdjustmentType    == InventAdjustmentType::Closing    &&
            inventClosing.NumOfIteration    == 0                                &&
            selfLoopCount                   == 0                                &&
            _inventTrans.StatusIssue        == StatusIssue::Sold                &&
            _inventTrans.StatusReceipt      == StatusReceipt::None              &&
            _inventTrans.ValueOpenSecCur_RU == InventTransOpen::Yes             &&
            _inventTrans.DateFinancial      <= inventClosing.TransDate)
        {
            mapOpenIssue.insert(_inventTrans.InventTransOrigin, _inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReceiptAdjustmentTrans</Name>
				<Source><![CDATA[
    protected void updateReceiptAdjustmentTrans(
        InventTrans   _receipt,
        CostAmount    _adjustmentLater
        )
    {
        InventSettlement        settlementReceipt;
        InventSettlement        settlementIssue;
        InventTrans             issue;
        InventQty               allocateQty;
        Map                     mapAllocateQty;
        CostAmount              adjustment;

        if (this.isUpdatedFinancialLater(_receipt))
        {
            return;
        }

        if (this.inventModelGroup(inventCostList.ItemId).StandardCost)
        {
            if (this.inventModelType_RU(_receipt.ItemId).allowTransactionAdjustment(_receipt))
            {
                adjustment = CurrencyExchangeHelper::amount(_receipt.CostAmountStdSecCur_RU, secondaryCurrency) - CurrencyExchangeHelper::amount(this.costValue(_receipt), secondaryCurrency);

                if (adjustment != 0)
                {
                    _receipt.updateStdCostAdjust(adjustment,
                        inventClosing.TransDate,
                        inventClosing.Voucher,
                        _receipt.dimensionFinancialDefaultDimension(),
                        inventTransCurrency);
                    mapInventTrans.insert(_receipt.RecId, _receipt);
                }
            }
        }

        if (_receipt.Qty != 0 && _receipt.QtySettledSecCur_RU > 0)
        {
            CostAmount costAmount = CurrencyExchangeHelper::amount((_receipt.costValueSecCur_RU() - _adjustmentLater) / _receipt.Qty * _receipt.QtySettledSecCur_RU, secondaryCurrency);
            adjustment = costAmount - _receipt.CostAmountSettledSecCur_RU;

            if (adjustment &&
                (abs(adjustment) < inventClosing.MinTransferValue ||
                 (_receipt.CostAmountSecCurAdjustment_RU - _adjustmentLater == 0 &&
                  CurrencyExchangeHelper::amount(_receipt.CostAmountSettledSecCur_RU / _receipt.QtySettled) == CurrencyExchangeHelper::amount(costAmount / _receipt.QtySettled))))
            {
                if (! this.financialOpenQty(_receipt))
                {
                    this.createErrorAdjustment(_receipt, -adjustment);
                }

                adjustment  = 0;
            }

            CostAmount allocateValue = adjustment;

            if (allocateValue != 0)
            {
                while select forceplaceholders pessimisticlock RecId,
                    QtySettled,
                    CostAmountSettled,
                    CostAmountAdjustment,
                    TransDate,
                    Voucher,
                    TransRecId,
                    SettleTransId,
                    SettleType from settlementReceipt
                    where settlementReceipt.TransRecId              == _receipt.RecId
                       && settlementReceipt.SettleType              == InventSettleType::Receipt
                       && settlementReceipt.InventTransId           == _receipt.inventTransOrigin().InventTransId
                       && settlementReceipt.InventTransCurrency_RU  == inventTransCurrency
                       && settlementReceipt.Cancelled               == 0
                       && settlementReceipt.QtySettled              >  0
                join forupdate RecId,
                    QtySettled,
                    CostAmountSettled,
                    CostAmountAdjustment,
                    TransDate,
                    Voucher,
                    TransRecId,
                    SettleTransId,
                    SettleType from settlementIssue
                    where settlementIssue.SettleTransId             == settlementReceipt.SettleTransId
                       && settlementIssue.SettleType                == InventSettleType::Issue
                       && settlementReceipt.InventTransCurrency_RU  == inventTransCurrency
                       && settlementIssue.Cancelled                 == 0
                       && settlementIssue.QtySettled                <  0
                {
                    if (!mapAllocateQty)
                    {
                        mapAllocateQty = new Map(Types::String, Types::Real);
                    }

                    if (mapAllocateQty.exists(settlementReceipt.SettleTransId))
                    {
                        allocateQty = mapAllocateQty.lookup(settlementReceipt.SettleTransId);
                    }
                    else
                    {
                        allocateQty = (select sum(QtySettled) from inventSettlement
                                        where inventSettlement.SettleTransId == settlementReceipt.SettleTransId
                                           && inventSettlement.SettleType    == InventSettleType::Issue
                                           && inventSettlement.Cancelled     == 0
                                           && inventSettlement.QtySettled    <  0).QtySettled;

                        mapAllocateQty.insert(settlementReceipt.SettleTransId, allocateQty);
                    }

                    CostAmount settleValueDec = (settlementIssue.QtySettled * adjustment / allocateQty);
                    if (_receipt.QtySettledSecCur_RU)
                    {
                        settleValueDec = settleValueDec * settlementReceipt.QtySettled / _receipt.QtySettledSecCur_RU;
                    }

                    CostAmount settleValue = CurrencyExchangeHelper::amount(settleValueDec, secondaryCurrency);

                    if (abs(settleValueDec) < abs(settleValue))
                    {
                        settleValue += (settleValueDec > 0 ? -roundOffunit : roundOffunit);
                    }

                    settleValue     = abs(settleValue) > abs(allocateValue) ? allocateValue: settleValue;
                    allocateValue   -= settleValue;

                    if (settleValue != 0)
                    {
                        if (mapInventTrans && mapInventTrans.exists(settlementIssue.TransRecId))
                        {
                           issue = mapInventTrans.lookup(settlementIssue.TransRecId);
                        }
                        else
                        {
                           issue = settlementIssue.inventTrans(true);
                        }

                        if (! issue.RecId)
                        {
                            this.createErrorAdjustment(_receipt, -settleValue);
                        }
                        else
                        {
                            if (this.costValue(issue) - settleValue > 0)
                            {
                                CostAmount errorAmount = this.costValue(issue) - settleValue;
                                this.createErrorAdjustment(_receipt,errorAmount);
                                settleValue += errorAmount;
                            }

                            _receipt.CostAmountSettledSecCur_RU    += settleValue;

                            issue.CostAmountSettledSecCur_RU      -= settleValue;
                            issue.CostAmountSecCurAdjustment_RU   -= settleValue;

                            this.updateInventTrans(issue);

                            if (settlementReceipt.TransDate == inventClosing.TransDate &&
                                settlementReceipt.Voucher   == inventClosing.Voucher)
                            {
                                settlementReceipt.reread();
                                settlementReceipt.CostAmountSettled    += settleValue;
                                settlementReceipt.update();

                                settlementIssue.CostAmountSettled      -= settleValue;
                                settlementIssue.CostAmountAdjustment   -= settleValue;
                                settlementIssue.update();
                            }
                            else
                            {
                                this.updateSettlementReceipt(settlementReceipt, settleValue);
                                this.updateSettlementIssue(settlementIssue, settleValue);
                            }
                            this.adjustTrans(issue, -settleValue);
                        }
                    }
                }

                this.updateInventTrans(_receipt);

                if (allocateValue != 0)
                {
                    if (!this.financialOpenQty(_receipt) ||
                        CurrencyExchangeHelper::price(_receipt.CostAmountSettledSecCur_RU / _receipt.QtySettledSecCur_RU, secondaryCurrency) != CurrencyExchangeHelper::price(costAmount / _receipt.QtySettledSecCur_RU, secondaryCurrency))
                    {
                        this.createErrorAdjustment(_receipt, -allocateValue);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransIdReturnReceipt</Name>
				<Source><![CDATA[
    protected void updateTransIdReturnReceipt(
        InventTransOriginId     _inventTransOriginId,
        InventTransOriginId     _returnInventTransOriginId,
        Price                   _costPrice  = 0
        )
    {
        InventTrans receipt;
        InventTrans issue;

        if (!_inventTransOriginId || !_returnInventTransOriginId)
        {
            return;
        }

        if (!_costPrice)
        {
            select sum(Qty), sum(CostAmountSecCurAdjustment_RU), sum(CostAmountSecCurPosted_RU) from issue
                where issue.InventTransOrigin       == _returnInventTransOriginId
                  &&  issue.StatusReceipt           == StatusReceipt::None
                  &&  issue.StatusIssue             == StatusIssue::Sold
                  &&  issue.PackingSlipReturned     == 0
                  &&  issue.ReturnInventTransOrigin == _inventTransOriginId;

            if (!issue.Qty)
            {
                return;
            }

            _costPrice = (issue.CostAmountSecCurPosted_RU + issue.CostAmountSecCurAdjustment_RU) / issue.Qty;
        }

        boolean onHandIsAdjusted = InventAdj::isOnhandAdjusted(_inventTransOriginId, _returnInventTransOriginId, '', inventTransCurrency);

        while select forupdate receipt
            where receipt.InventTransOrigin         == _inventTransOriginId
              &&  receipt.StatusReceipt             == StatusReceipt::Purchased
              &&  receipt.StatusIssue               == StatusIssue::None
              &&  receipt.PackingSlipReturned       == 0
              &&  receipt.ReturnInventTransOrigin   == _returnInventTransOriginId
              &&  receipt.DateStatus                <=  inventClosing.TransDate
        {
            CostAmount adjustNow = CurrencyExchangeHelper::amount(receipt.Qty * _costPrice - receipt.CostAmountSecCurPosted_RU - receipt.CostAmountSecCurAdjustment_RU, secondaryCurrency);

            if (adjustNow)
            {
                receipt.CostAmountSecCurAdjustment_RU += adjustNow;

                this.createAdjustSettlement(receipt, adjustNow, '');

                if (! this.inventModelType_RU(receipt.ItemId).stdCostBased())
                {
                    if (onHandIsAdjusted)
                    {
                        this.createErrorAdjustment(receipt, -adjustNow);
                    }

                    if (this.costValue(receipt) < 0)
                    {
                        this.createErrorAdjustment(receipt, -adjustNow);
                    }

                    if ((inventClosing.AdjustmentType == InventAdjustmentType::Closing) &&
                        (abs(adjustNow) < inventClosing.MinTransferValue || inventClosing.NumOfIteration >= inventClosing.MaxIterations))
                    {
                        this.createErrorAdjustment(receipt, -adjustNow);
                    }
                }
                else
                {
                    this.inventModelType_RU(receipt.ItemId).postUpdateFinancialAdjustment(receipt, inventClosing.Voucher, inventClosing.TransDate, adjustNow);
                }

                this.updateCostAmountStd(receipt);
                this.updateReceipt(receipt);
            }

            mapInventTrans.insert(receipt.RecId, receipt);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>