<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSBalanceIngredient_Active</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PDSBalanceIngredient_Active</c> class provides balancing logic specific for active ingredients.
/// </summary>
[PDSIngredientTypeFactoryAttribute(PDSIngredientTypeEnum::Active)]
public class PDSBalanceIngredient_Active extends PDSBalanceIngredient
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceQty</Name>
				<Source><![CDATA[
    public Set balanceQty()
    {
        UnitOfMeasureDecimalPrecision   precision;
        ProdBom                         lclProdBom;

        if (!result)
        {
            result = new Set(Types::container);
        }

        while select activeIng
        {
            select firstonly UnitId
                from lclProdBom
                where lclProdBom.InventTransId == activeIng.InventTransId;

            precision = UnitOfMeasure::findBySymbol(lclProdBom.UnitId).DecimalPrecision;

            result.add(
                    [   activeIng.InventTransId,
                        activeIng.ItemId,
                        decround(activeIng.Qty, precision),
                        activeIng.InventBatchId,
                        decround(activeIng.Qty, precision),
                        activeIng.InventDimId]);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizeQty</Name>
				<Source><![CDATA[
    public PDSNormalizedQty normalizeQty(
        InventBatchId   _inventBatchId,
        Qty             _qty,
        Common          _record)
    {
        PdsBatchAttributes          attributeValue;
        InventBatch                 inventBatch;
        PDSBaseValueNum             baseValue;
        PDSBaseValueNum             calcValue;
        PdsBatchAttribByItem        attribByItem;
        int                         decimal;
        InventTable                 inventTable;

        PDSNormalizedQty            ret = _qty;

        switch (_record.TableId)
        {
            case tablenum(InventBatch):
                inventBatch     = _record;
                inventTable     = InventTable::find(inventBatch.ItemId);

                attribByItem    = InventTable::pdsFindBaseAttribute(inventTable.ItemId);
                baseValue       = str2Num(attribByItem.PDSBaseValue);
                decimal         = InventTable::inventDecimals(inventTable.ItemId);
                break;
        }

        if (inventTable.PDSBaseAttributeId)
        {
            attributeValue  = PdsBatchAttributes::find(inventTable.ItemId, _inventBatchId, inventTable.PDSBaseAttributeId);

            if (str2NumOk(attributeValue.PdsBatchAttribValue))
            {
                calcValue = str2Num(attributeValue.PdsBatchAttribValue);
                ret       = decround(_qty * (calcValue / 100), decimal);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PDSBalanceIngredient_Active construct()
    {
        return new PDSBalanceIngredient_Active();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>