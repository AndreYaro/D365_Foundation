<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureTransCreateVend_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureTransCreateVend_RU extends FactureTransCreate_RU
{
    VendInvoiceTrans vendInvoiceTrans;
    VendInvoiceJour  vendInvoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    protected boolean calcAmounts(Qty _qty)
    {
        VATType_RU      vatType;
        FactureTrans_RU tmpTrans, tmpTransSec;
        VendInvoiceTrans vendInvoiceTransUpdate;
        int             sign =  vendInvoiceTrans.TaxAmount                  ?
                               (vendInvoiceTrans.TaxAmount  >= 0 ? 1 : -1)  :
                               (vendInvoiceTrans.LineAmount >= 0 ? 1 : -1);

        MarkupTrans markupTrans;
        Amount      markupVAT,
                    markupExcise,
                    markupVal,
                    markupTax;
        AmountMST   markupVATMST,
                    markupExciseMST,
                    markupValMST,
                    markupTaxMST;
        TaxCode     tmpCode = facture.vatCode(vendInvoiceTrans.TaxGroup, vendInvoiceTrans.TaxItemGroup);
        ;

        if (vendInvoiceTrans.FacturedFully_RU)
            return false;

        factor = _qty / vendInvoiceTrans.Qty;

        this.calcTaxes(vendInvoiceJour.LedgerVoucher,
                       vendInvoiceJour.InvoiceDate,
                       vendInvoiceTrans.TaxGroup,
                       vendInvoiceTrans.TaxItemGroup,
                       vendInvoiceTrans.InventTransId,
                       vendInvoiceTrans.LineAmount);

        if (vendInvoiceJour.InvoiceId &&
            this.fetchTaxes(vendInvoiceJour.LedgerVoucher,
                            vendInvoiceJour.InvoiceDate,
                            vendInvoiceTrans.TaxGroup,
                            vendInvoiceTrans.TaxItemGroup,
                            vendInvoiceTrans.InventTransId))
        {
            vatType = calcTaxes.taxBaseAmountCur_VAT()             ? VATType_RU::Full     :
                         (calcTaxes.taxBaseAmountCur_VATReduced()  ? VATType_RU::Reduced  :
                             (calcTaxes.taxBaseAmountCur_VATZero() ? VATType_RU::Zero     :
                                                                      VATType_RU::NonLiable));
        }
        else
        {
            vatType = FactureTrans_RU::taxType2VATType(TaxTable::find(TaxTable::vatCode_RU(vendInvoiceTrans.TaxGroup,
                                                                                           vendInvoiceTrans.TaxItemGroup)).TaxType_W);
        }

        // markups, included in line -->
        while select ItemPosted_RU,
                     TaxAmountVAT_RU,
                     TaxAmountExcise_RU,
                     CalculatedAmount,
                     TaxAmount,
                     TaxAmountVATMST_RU,
                     TaxAmountExciseMST_RU,
                     CalculatedAmountMST_W,
                     TaxAmountMST_W,
                     TaxGroup,
                     TaxItemGroup
            from markupTrans
        where markupTrans.TransTableId == vendInvoiceTrans.TableId  &&
              markupTrans.TransRecId   == vendInvoiceTrans.RecId    &&
              markupTrans.CustVendPosted_RU                         &&
              markupTrans.ItemPosted_RU
        {
            if ((markupTrans.TaxGroup     == vendInvoiceTrans.TaxGroup      &&
                 markupTrans.TaxItemGroup == vendInvoiceTrans.TaxItemGroup) ||
                 facture.vatCode(markupTrans.TaxGroup, markupTrans.TaxItemGroup) == tmpCode)
            {
                markupVAT       += markupTrans.TaxAmountVAT_RU;
                markupExcise    += markupTrans.TaxAmountExcise_RU;
                markupVal       += markupTrans.CalculatedAmount;
                markupTax       += markupTrans.TaxAmount;
                markupVATMST    += markupTrans.TaxAmountVATMST_RU;
                markupExciseMST += markupTrans.TaxAmountExciseMST_RU;
                markupValMST    += markupTrans.CalculatedAmountMST_W;
                markupTaxMST    += markupTrans.TaxAmountMST_W;
            }
        }
        // markups, included in line <--

        if (factureTrans.isTmp())
        {
            tmpTransSec.setTmp();
            tmpTransSec.setTmpData(factureTrans);

            select sum(Qty),
                   sum(LineAmount),
                   sum(vat),
                   sum(Excise),
                   sum(TaxAmount),
                   sum(LineAmountMST),
                   sum(vatAmountMST),
                   sum(ExciseAmountMST),
                   sum(TaxAmountMST)
                from  tmpTransSec
                where tmpTransSec.InternalInvoiceId == vendInvoiceTrans.InternalInvoiceId &&
                      tmpTransSec.InvoiceId         == vendInvoiceTrans.InvoiceId         &&
                      tmpTransSec.InvoiceDate       == vendInvoiceTrans.InvoiceDate       &&
                      tmpTransSec.SalesPurchId      == vendInvoiceTrans.PurchID           &&
                      tmpTransSec.InvoiceLineNum    == vendInvoiceTrans.LineNum           &&
                      tmpTransSec.FactureLineType   == FactureLineType_RU::InvoiceLine    &&
                      tmpTransSec.Module            == FactureModule_RU::Vend;
        }

        select sum(Qty),
               sum(LineAmount),
               sum(vat),
               sum(Excise),
               sum(TaxAmount),
               sum(LineAmountMST),
               sum(vatAmountMST),
               sum(ExciseAmountMST),
               sum(TaxAmountMST)
            from  tmpTrans
            where tmpTrans.InternalInvoiceId == vendInvoiceTrans.InternalInvoiceId &&
                  tmpTrans.InvoiceId         == vendInvoiceTrans.InvoiceId         &&
                  tmpTrans.InvoiceDate       == vendInvoiceTrans.InvoiceDate       &&
                  tmpTrans.SalesPurchId      == vendInvoiceTrans.PurchID           &&
                  tmpTrans.InvoiceLineNum    == vendInvoiceTrans.LineNum           &&
                  tmpTrans.FactureLineType   == FactureLineType_RU::InvoiceLine    &&
                  tmpTrans.Module            == FactureModule_RU::Vend;

        if (! refCommReportTrans && abs(tmpTransSec.Qty + tmpTrans.Qty + _qty) >= abs(vendInvoiceTrans.Qty))
        {
            factureTrans.Qty             = vendInvoiceTrans.Qty                                  ?
                                           vendInvoiceTrans.Qty - tmpTrans.Qty - tmpTransSec.Qty :
                                           1;
            factureTrans.LineAmount      = vendInvoiceTrans.LineAmount         +
                                           markupVal                           +
                                           markupExcise                        -
                                           tmpTrans.LineAmount                 -
                                           tmpTransSec.LineAmount;
            factureTrans.Excise          = vendInvoiceTrans.ExciseAmount_RU    +
                                           markupExcise                        -
                                           tmpTrans.Excise                     -
                                           tmpTransSec.Excise;
            factureTrans.TaxAmount       = vendInvoiceTrans.TaxAmount          +
                                           markupTax                           -
                                           tmpTrans.TaxAmount                  -
                                           tmpTransSec.TaxAmount;
            factureTrans.vat             = abs(vendInvoiceTrans.vatAmount_RU + markupVAT) * sign -
                                           tmpTrans.vat                                          -
                                           tmpTransSec.vat;

            factureTrans.LineAmountMST   = vendInvoiceTrans.LineAmountMST_W    +
                                           markupValMST                        +
                                           markupExciseMST                     -
                                           tmpTrans.LineAmountMST              -
                                           tmpTransSec.LineAmountMST;
            factureTrans.ExciseAmountMST = vendInvoiceTrans.ExciseAmountMST_RU +
                                           markupExciseMST                     -
                                           tmpTrans.ExciseAmountMST            -
                                           tmpTransSec.ExciseAmountMST;
            factureTrans.TaxAmountMST    = vendInvoiceTrans.TaxAmountMST_W     +
                                           markupTaxMST                        -
                                           tmpTrans.TaxAmountMST               -
                                           tmpTransSec.TaxAmountMST;
            factureTrans.vatAmountMST    = abs(vendInvoiceTrans.vatAmountMST_RU + markupVATMST) * sign -
                                           tmpTrans.vatAmountMST                                       -
                                           tmpTransSec.vatAmountMST;
        }
        else
        {
            factureTrans.Qty           = _qty;
            factureTrans.LineAmount    = CurrencyExchangeHelper::amount((vendInvoiceTrans.LineAmount + markupVal + markupExcise) * factor, vendInvoiceJour.CurrencyCode);
            factureTrans.LineAmountMST = CurrencyExchangeHelper::amount((vendInvoiceTrans.LineAmountMST_W + markupValMST + markupExciseMST) * factor);

            if (recalcTaxes)
            {
                factureTrans.Excise          = abs(calcTaxes.taxAmountCur_Excise() * taxBaseFactor +
                                                   markupExcise)    * factor * sign;

                factureTrans.TaxAmount       = abs(calcTaxes.totalTaxAmountCur()   * taxBaseFactor +
                                                   markupTax)       * factor * sign;

                factureTrans.vat             = abs(calcTaxes.taxAmountCur_VAT()        +
                                                   calcTaxes.taxAmountCur_VATReduced() +
                                                   calcTaxes.taxAmountCur_VATZero()) * factor * taxBaseFactor * sign;

                factureTrans.ExciseAmountMST = abs(calcTaxes.taxAmount_Excise() * taxBaseFactor +
                                                   markupExciseMST) * factor * sign;

                factureTrans.TaxAmountMST    = abs(calcTaxes.totalTaxAmount() * taxBaseFactor +
                                                   markupTaxMST)    * factor * sign;

                factureTrans.vatAmountMST    = abs(calcTaxes.taxAmount_VAT()        +
                                                   calcTaxes.taxAmount_VATReduced() +
                                                   calcTaxes.taxAmount_VATZero()) * factor * taxBaseFactor * sign;
            }
            else
            {
                factureTrans.Excise          = abs(vendInvoiceTrans.ExciseAmount_RU    + markupExcise) * factor * sign;
                factureTrans.TaxAmount       = abs(vendInvoiceTrans.TaxAmount          + markupTax)    * factor * sign;
                factureTrans.vat             = abs(vendInvoiceTrans.vatAmount_RU       + markupVAT)    * factor * sign;
                factureTrans.ExciseAmountMST = abs(vendInvoiceTrans.ExciseAmountMST_RU + markupExcise) * factor * sign;
                factureTrans.TaxAmountMST    = abs(vendInvoiceTrans.TaxAmountMST_W     + markupTax)    * factor * sign;
                factureTrans.vatAmountMST    = abs(vendInvoiceTrans.vatAmountMST_RU    + markupVAT)    * factor * sign;
            }
            factureTrans.Excise          = CurrencyExchangeHelper::amount(factureTrans.Excise, vendInvoiceJour.CurrencyCode);
            factureTrans.TaxAmount       = CurrencyExchangeHelper::amount(factureTrans.TaxAmount, vendInvoiceJour.CurrencyCode);
            factureTrans.vat             = CurrencyExchangeHelper::amount(factureTrans.vat, vendInvoiceJour.CurrencyCode);
            factureTrans.ExciseAmountMST = CurrencyExchangeHelper::amount(factureTrans.ExciseAmountMST);
            factureTrans.TaxAmountMST    = CurrencyExchangeHelper::amount(factureTrans.TaxAmountMST);
            factureTrans.vatAmountMST    = CurrencyExchangeHelper::amount(factureTrans.vatAmountMST);
        }

        factureTrans.TaxGroup     = vendInvoiceTrans.TaxGroup;
        factureTrans.TaxItemGroup = vendInvoiceTrans.TaxItemGroup;
        factureTrans.TaxCode      = tmpCode;

        factureTrans.vatType     = vatType;
        factureTrans.vatValue    = abs(vendInvoiceTrans.vatValue_RU);
        factureTrans.ExciseValue = abs(vendInvoiceTrans.ExciseValue_RU);

        if (refCommReportTrans)
        {
            factureTrans.Price = vendInvoiceTrans.PurchPrice;
        }
        else
        {
            factureTrans.Price = abs(factureTrans.LineAmount / (factureTrans.Qty ? factureTrans.Qty : 1));
        }

        if (! factureTrans.isTmp() && ! refCommReportTrans)
        {
            vendInvoiceTransUpdate = VendInvoiceTrans::findRecId(vendInvoiceTrans.RecId, true);
            vendInvoiceTransUpdate.FacturedQty_RU  += factureTrans.Qty;
            vendInvoiceTransUpdate.FacturedFully_RU = (vendInvoiceTransUpdate.FacturedQty_RU ? vendInvoiceTransUpdate.FacturedQty_RU == vendInvoiceTransUpdate.Qty : NoYes::Yes);
            vendInvoiceTransUpdate.doUpdate();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxes</Name>
				<Source><![CDATA[
    protected void calcTaxes(Voucher        _ledgerVoucher,
                         TransDate      _transDate,
                         TaxGroup       _taxGroup,
                         TaxItemGroup   _taxItemGroup,
                         InventTransId  _inventTransId,
                         Amount         _amount)
    {
        TmpTaxWorkTrans tmpTaxWorkTrans;
        Tax             tax;
        ;

        if (vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::CommissionAgent ||
        vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::CommissionPrincipalAgent)
        {
            tax = Tax::construct();
            tax.taxCalcWithoutSource(_taxGroup,
                                     _taxItemGroup,
                                     _transDate,
                                     vendInvoiceTrans.CurrencyCode,
                                     _amount,
                                     TaxModuleType::Purch);

            tmpTaxWorkTrans = tax.tmpTaxWorkTrans();
            select tmpTaxWorkTrans;

            calcTaxes = CalcTaxes_RU::construct(tmpTaxWorkTrans);
            calcTaxes.calc();

            taxBaseFactor = calcTaxes.totalTaxBaseAmountCur() ? abs(_amount / calcTaxes.totalTaxBaseAmountCur()) : 0;
        }
        else
        {
            super(_ledgerVoucher,
                  _transDate,
                  _taxGroup,
                  _taxItemGroup,
                  _inventTransId,
                  _amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans()
    {
        boolean ret = super();

        if (vendInvoiceJour.InvoiceDate > factureJour.FactureDate)
        {
            ret = checkFailed("@GLS104572");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    public void createTrans(Qty _qty = qty)
    {
        if (refCommReportTrans)
        {
            vendInvoiceTrans = CommReportTransItem_RU::find(refCommReportTrans).initPartnerInvoiceTrans(ModuleCustVend::Vend);
            qty = vendInvoiceTrans.Qty;
            _qty = qty;
        }

        super(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    protected void initTrans()
    {
        InventGTD_RU inventGTD;

        super();

        factureTrans.initFromInvoiceTrans(vendInvoiceTrans);

        factureTrans.InternalInvoiceId = vendInvoiceTrans.InternalInvoiceId;
        factureTrans.ExchRate          = vendInvoiceJour.ExchRate;

        // Prepare country & GTD data
        if (vendInvoiceTrans.isStocked())
        {
            inventGTD                      = InventGTD_RU::find(vendInvoiceTrans.inventDim().InventGtdId_RU, vendInvoiceTrans.ItemId);
            factureTrans.CountryRegionName = LogisticsAddressCountryRegionTranslation::find(inventGTD.ItemOrigCountryRegionId).ShortName;
            factureTrans.InventGTDId       = inventGTD.InventGTDId;
        }
        else
        {
            factureTrans.CountryRegionName = vendInvoiceTrans.CountryRegionName_RU;
            factureTrans.InventGTDId       = vendInvoiceTrans.InvoiceGTDId_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU _facture,
                    RecId                _recId,
                    Qty                  _qty,
                    NoYes                _recalcTaxes)
    {
        super(_facture, _recId, _qty, _recalcTaxes);

        vendInvoiceTrans = VendInvoiceTrans::findRecId(_recId);

        vendInvoiceJour  = VendInvoiceJour::findFromVendInvoiceTrans(vendInvoiceTrans.PurchID,
                                                                     vendInvoiceTrans.InvoiceId,
                                                                     vendInvoiceTrans.InvoiceDate,
                                                                     vendInvoiceTrans.NumberSequenceGroup,
                                                                     vendInvoiceTrans.InternalInvoiceId,
                                                                     ! _facture.getFactureJour().isTmp());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(RecId _recId, Qty _qty, NoYes _recalcTaxes)
    {
        super(_recId, _qty, _recalcTaxes);

        vendInvoiceTrans = VendInvoiceTrans::findRecId(_recId, ! facture.getFactureJour().isTmp());

        vendInvoiceJour  = VendInvoiceJour::findFromVendInvoiceTrans(vendInvoiceTrans.PurchID,
                                                                     vendInvoiceTrans.InvoiceId,
                                                                     vendInvoiceTrans.InvoiceDate,
                                                                     vendInvoiceTrans.NumberSequenceGroup,
                                                                     vendInvoiceTrans.InternalInvoiceId,
                                                                     ! facture.getFactureJour().isTmp());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>