<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInstrumentationPerformanceTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using ApplicationEventSource = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;
using Stopwatch = System.Diagnostics.Stopwatch;

/// <summary>
/// Implements instrumentation for a performance-tracked task.
/// </summary>
internal class WHSInstrumentationPerformanceTask implements System.IDisposable
{    	
    internal static readonly boolean IsPostTaskStartFlightEnabled = WHSInstrumentationPerformanceTaskPostTaskStartFlight::instance().isEnabled();

	public const str ParameterNameWaveId = 'waveId';
    public const str ParameterNameWaveExecutionId = 'waveExecutionId';

    public const str ParameterValueTrue = 'yes';
    public const str ParameterValueFalse = 'no';

    private SysInstrumentationEventDataJsonSerializer parameters = new SysInstrumentationEventDataJsonSerializer();
    private str category;
    private str action;
    private Stopwatch stopwatch;
    private boolean ended = false;
    
    WHSInstrumentationLogger            instrumentationLogger;
    SysInstrumentationActivity          instrumentationActivity;
    SysInstrumentationActivityContext   instrumentationActivityContext;
	
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	/// <summary>
    /// Initializes a new instance of the <c>WHSInstrumentationPerformanceTask</c> and writes the Start instrumentation event.
    /// </summary>
    /// <param name = "_category">The category of performed action.</param>
    /// <param name = "_action">The action being performed.</param>
	public void new(str _category, str _action)
    {
        category = _category;
        action = _action;
        
        str activityName = _action ? _action : _category;

        instrumentationLogger = WHSInstrumentationLogger::createLogger(_category);

        if (activityName)
        {
            instrumentationActivity = instrumentationLogger.activity(activityName);
        }

        this.preTaskStart();
        this.startTask();
        this.postTaskStart();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preTaskStart</Name>
				<Source><![CDATA[
    protected void preTaskStart()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaskStart</Name>
				<Source><![CDATA[
    protected void postTaskStart()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInformation</Name>
				<Source><![CDATA[
    internal void logInformation(str _message)
    {
        instrumentationLogger.logInformation(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTask</Name>
				<Source><![CDATA[
    private void startTask()
    {
        if (instrumentationActivity)
        {
            instrumentationActivityContext = instrumentationLogger.activityContext(instrumentationActivity);
        }

        ApplicationEventSource::EventWriteWhsPerformanceTaskStart(category, action, 0, parameters.toString());
        stopwatch = Stopwatch::StartNew();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameter</Name>
				<Source><![CDATA[
	/// <summary>
    /// Adds a new parameter to the event details.
    /// </summary>
    /// <param name = "_name">Name of the parameter.</param>
    /// <param name = "_value">Value of the parameter.</param>
    /// <returns>This instance.</returns>
    public final WHSInstrumentationPerformanceTask setParameter(str _name, str _value)
    {
        if (instrumentationActivityContext)
        {
            instrumentationActivityContext.addCustomProperty(_name, _value);            
        }

        parameters.setValue(_name, _value);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds parameters to the event details.
    /// </summary>
    /// <param name = "_parameters">Parameter maps.</param>
    /// <returns>This instance.</returns>
    public final WHSInstrumentationPerformanceTask setParameters(Map _parameters)
    {
        MapEnumerator parametersEnumerator = new MapEnumerator(_parameters);

        while (parametersEnumerator.moveNext())
        {
            this.setParameter(parametersEnumerator.currentKey(), parametersEnumerator.currentValue());
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameterIfNotZero</Name>
				<Source><![CDATA[
	public final WHSInstrumentationPerformanceTask setParameterIfNotZero(str _name, int _value)
    {
		if (_value != 0)
        {
            this.setParameter(_name, int2Str(_value));
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endTask</Name>
				<Source><![CDATA[
	/// <summary>
    /// Writes the Stop instrumentation event.
    /// </summary>
	public final void endTask()
    {
		if (!ended)
        {
            stopwatch.Stop();

            this.endTaskInternal();

            if (instrumentationActivityContext)
            {
                instrumentationActivityContext.dispose();
            }

            ApplicationEventSource::EventWriteWhsPerformanceTaskStop(category, action, stopwatch.ElapsedMilliseconds, parameters.toString());
            ended = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endTaskInternal</Name>
				<Source><![CDATA[
	protected void endTaskInternal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
	/// <summary>
    /// Writes the Stop instrumentation event.
    /// </summary>
	public final void Dispose()
    {
        this.endTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBooleanParameterValue</Name>
				<Source><![CDATA[
	public final str getBooleanParameterValue(boolean _value)
    {
        return WHSInstrumentationPerformanceTask::booleanToString(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHashValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the hash of the value passed in, so we are compliant.
    /// </summary>
    /// <param name = "_value">Non-compliant value that contains customer content.</param>
    /// <returns>Hash value that is compliant.</returns>
    static internal final str getHashValue(str _value)
    {
        System.String tmp = _value;
        return int2Str(tmp.GetHashCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>booleanToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a boolean value to string.
    /// </summary>
    /// <param name = "_value">Boolean value.</param>
    /// <returns>String representation of the boolean value.</returns>
    static internal str booleanToString(boolean _value)
    {
        return _value ? ParameterValueTrue : ParameterValueFalse;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>