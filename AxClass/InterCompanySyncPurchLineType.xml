<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanySyncPurchLineType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Synchronization engine at order line level for intercompany trade.
/// </summary>
public class InterCompanySyncPurchLineType
{
    PurchLine                                   purchLine;
    PurchTable                                  purchTable;
    PurchLineType                               purchLineType;

    AxSalesLine                                 axSalesLine;
    
    SalesTable                                  salesTable;
    CustTable                                   custTable;
    VendTable                                   vendTable;

    InterCompanyTradingValueMap                 fromInterCompanyTradingValueMap;
    InterCompanyTradingValueMap                 toInterCompanyTradingValueMap;
    InterCompanyEndpointActionPolicy            toEndpointActionPolicy;
    
    ItemId                                      axItemId;
    InventDim                                   axInventDim;

    boolean                                     create;

    private boolean                             forceSync;
    private boolean                             taxParameters;

    protected TradeInterCompanyConv             convItem;
    private TradeInterCompanyConv               convReturnDispositionCode;
    private TradeInterCompanyConv               convInventProfile;
    private InventRefTransId                    interCompanyInventTransIdSales;
    private SalesInstrumentationLogger          instrumentationLogger;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        instrumentationLogger = SalesInstrumentationLogger::createLogger(classStr(InterCompanySyncPurchLineType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InterCompanySyncPurchLineType construct()
    {
        return new InterCompanySyncPurchLineType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal state of the synchronization engine from the <c>PurchlineType</c> instance.
    /// </summary>
    /// <param name = "_purchLineType">An instance of <c>PurchLineType</c> class.</param>
    protected void initFromPurchLineType(PurchLineType _purchLineType)
    {
        purchLineType = _purchLineType;
        purchLine = purchLineType.parmPurchLine();
        purchTable = PurchLineType.parmPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchLineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate a new intercompany synchronization engine for the provided <c>PurchLineType</c> instance.
    /// </summary>
    /// <param name = "_purchLineType">An instance of <c>PurchLineType</c> class representing the purchase order line.</param>
    /// <returns>The instantiated instance.</returns>
    public static InterCompanySyncPurchLineType newFromPurchLineType(PurchLineType _purchLineType)
    {
        InterCompanySyncPurchLineType syncEngine = InterCompanySyncPurchLineType::construct();
        syncEngine.initFromPurchLineType(_purchLineType);

        return syncEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizationApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is intercompany synchronization applicable for this order line?
    /// </summary>
    /// <returns>true, if synchronization needs to happen; otherwise, false.</returns>
    protected boolean synchronizationApplicable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if synchronization should run regardless of the order line state (assumes that it is applicable to this order line type).
    /// </summary>
    /// <param name = "_forceSync">Force synchronization?</param>
    /// <returns>true, if synchronization should be run regardless, if applicable; otherwise, false.</returns>
    public boolean forceSync(boolean _forceSync = forceSync)
    {
        forceSync = _forceSync;
        return forceSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipSynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if intercompany synchronization should be skipped
    /// </summary>
    /// <returns>true, if synchronization should be skipped; otherwise, false.</returns>
    protected boolean skipSynchronization()
    {
        if (!this.synchronizationApplicable())
        {
            return true;
        }

        if (!forceSync)
        {
            if (purchLine.SkipUpdate == InterCompanySkipUpdate::InterCompany
                || purchLine.SkipUpdate == InterCompanySkipUpdate::Both
                || !purchLineType.isPurchTableInterCompanyOrder()
                || !PurchTableType::construct(purchTable).interCompanyCreateAllowed()
                || !purchLine.interCompanyUpdateNow())
            {
                return true;
            }
        }

        if (! TradeInterCompany::checkDataAreaAccess(purchTable.InterCompanyCompanyId))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the actions necessary to synchronize the purchase order line with the intercompany sales order line.
    /// </summary>
    public void synchronize()
    {
        using (var activityContext = instrumentationLogger.salesOrderLineCreationActivities().interCompanySynchronize(purchTable, purchLine))
        {
            if (this.skipSynchronization())
            {
                return;
            }

            using (var activityContextPrepare = instrumentationLogger.salesOrderLineCreationActivities().prepareSynchronization())
            {
                this.prepareSynchronization();
            }

            changecompany (purchTable.InterCompanyCompanyId)
            {
                using (var activityContextTradeCompany = instrumentationLogger.salesOrderLineCreationActivities().synchronizeInTradeCompany())
                {
                    this.synchronizeInTradeCompany();
                }
            }

            using (var activityContextPost = instrumentationLogger.salesOrderLineCreationActivities().postSynchronization())
            {
                this.postSynchronization();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes any additional internal state necesary for synchronization
    /// </summary>
    protected void prepareSynchronization()
    {
        vendTable                       = purchTable.vendTable_OrderAccount();
        fromInterCompanyTradingValueMap = vendTable.interCompanyTradingPartner().interCompanyTradingValueMap();

        convItem = TradeInterCompanyConv::construct();
        convItem.axPurchItemId(fromInterCompanyTradingValueMap,
                               purchTable.OrderAccount,
                               purchLine.ItemId,
                               purchLine.inventDim());
       
        if (purchLine.ReturnDispositionCodeId)
        {
            convReturnDispositionCode = TradeInterCompanyConv::construct();
            convReturnDispositionCode.axReturnDispositionCodeId(fromInterCompanyTradingValueMap, purchLine.ReturnDispositionCodeId);
        }
        
        if (purchLine.inventDim().InventProfileId_RU)
        {
            convInventProfile = TradeInterCompanyConv::construct();
            convInventProfile.axInventProfileId(fromInterCompanyTradingValueMap, purchLine.inventDim().InventProfileId_RU);
        }

        if (purchLine.creditNoteLine(purchTable))
        {
            interCompanyInventTransIdSales = VendInvoiceTrans::findInventTransId(purchLine.InventRefTransId).InterCompanyInventTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSynchronization</Name>
				<Source><![CDATA[
    private void postSynchronization()
    {
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            PurchLine origPurchLine;
            buf2Buf(purchLine, origPurchLine);
            SalesShippingDateRequested origSalesShippingDateRequested = axSalesLine.salesLine().ShippingDateRequested;
            if (purchLine.RequestedShipDate != origSalesShippingDateRequested)
            {
                if (purchLine.ShippingDateRequested && purchLine.ShippingDateRequested != origSalesShippingDateRequested)
                {
                    purchLine.ShippingDateRequested = origSalesShippingDateRequested;
                }
                purchLine.calculateRequestedShipAndReceiptDate(origSalesShippingDateRequested, dateNull(), SchedDirection::Forward);
            }

            changecompany (purchTable.InterCompanyCompanyId)
            {
                ttsbegin;
                SalesLine localSalesLine = SalesLine::find(axSalesLine.salesLine().SalesId, axSalesLine.salesLine().LineNum, true);
                
                if (localSalesLine && purchLine.DeliveryDate != origPurchLine.DeliveryDate)
                {
                    localSalesLine.ReceiptDateRequested = purchLine.DeliveryDate;
                    localSalesLine.doUpdate();
                }        
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveItemIdInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item number and inventory dimension combination.
    /// </summary>
    /// <param name = "_salesTable">
    /// A <c>SalesTable</c> record buffer
    /// </param>
    /// <returns>
    /// The container with item number and inventory dimension combination.
    /// </returns>
    protected container retrieveItemIdInventDim(SalesTable _salesTable)
    {
        return convItem.axSalesItemId(toInterCompanyTradingValueMap, _salesTable.CustAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeInTradeCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the synchronization of the order line in the trade company.
    /// </summary>
    protected void synchronizeInTradeCompany()
    {
        setPrefix(strFmt("@SYS93821", TradeInterCompany::curCompanyName()));

        custTable                       = CustTable::find(vendTable.interCompanyTradingPartnerAccount());
        toInterCompanyTradingValueMap   = custTable.interCompanyTradingPartner().interCompanyTradingValueMap();
        toEndpointActionPolicy          = custTable.interCompanyTradingPartner().interCompanyEndpointActionPolicy();

        salesTable               = SalesTable::find(purchTable.InterCompanySalesId);
        [axItemId, axInventDim]  = this.retrieveItemIdInventDim(salesTable);
      
        if (! axItemId)
        {
            EcoResProduct ecoResProduct;
            changecompany (purchLine.company())
            {
                ecoResProduct = EcoResProduct::find(InventTable::find(purchLine.ItemId).Product);
            }
            throw error(strFmt("@SYS329423", ecoResProduct.productNumber(), ecoResProduct.productName(), purchTable.InterCompanyCompanyId));
        }

        if (PdsGlobal::pdsIsCWItem(axItemId))
        {
            this.validateCatchWeightProductSetupInSync();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            taxParameters = TaxParameters::checkTaxParameters_IN();
            TaxWithholdParameters_IN::checkTaxParameters();
        }

        this.createOrUpdateSalesLine();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            TaxServiceTariff::insertTaxServiceTariffForNewParent(salesTable.TableId, salesTable.RecId, axSalesLine.currentRecord().TableId, axSalesLine.currentRecord().RecId);
        }

        SalesTable salesTableLocal = axSalesLine.salesLine().salesTable();
        if (salesTableLocal.mcrIsCallCenter())
        {
            MCRCustPaymTotals mcrCustPaymTotals = MCRCustPaymTotals::construct(salesTableLocal.TableId, salesTableLocal.RecId);
            mcrCustPaymTotals.recalculatePaymAmounts();
                
            if (salesTableLocal.SalesStatus != SalesStatus::Canceled)
            {
                MCREndOrder::orderRecap(salesTableLocal);
            }
        }

        purchLine.InterCompanyInventTransId = axSalesLine.salesLine().InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInterCompanySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves sales line record for intercompany synchronization.
    /// </summary>
    /// <param name = "_purchLine">
    /// A <c>PurchLine</c> record buffer.
    /// </param>
    /// <returns>
    /// The related <c>SalesLine</c> record buffer.
    /// </returns>
    protected SalesLine findInterCompanySalesLine(PurchLine _purchLine)
    {
        return SalesLine::findInventTransId(_purchLine.InterCompanyInventTransId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the intercompany order line in the trade company.
    /// </summary>
    protected void createOrUpdateSalesLine()
    {
        using (var activityContext = instrumentationLogger.salesOrderLineCreationActivities().interCompanySync(classStr(AxSalesLine)))
        {
            axSalesLine = AxSalesLine::newSalesLine(this.findInterCompanySalesLine(purchLine));
            axSalesLine.axSalesTable(AxSalesTable::newSalesTable(salesTable));
            axSalesLine.parmSkipUpdate(InterCompanySkipUpdate::InterCompany);

            create = axSalesLine.salesLine().RecId == 0;

            this.setSalesLineData();

            axSalesLine.validateInput(true);
            axSalesLine.save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetCatchWeightQuantity</Name>
				<Source><![CDATA[
    protected boolean mustSetCatchWeightQuantity()
    {
        return create || purchLine.fieldChanged(fieldNum(PurchLine, PdsCWQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatchWeightQuantity</Name>
				<Source><![CDATA[
    protected void setCatchWeightQuantity()
    {
        axSalesLine.parmPdsCWQty(purchLine.PdsCWQty);
        axSalesLine.parmPdsCWExpectedRetQty(purchLine.PdsCWQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetQuantity</Name>
				<Source><![CDATA[
    protected boolean mustSetQuantity()
    {
        return create || purchLine.fieldChanged(fieldNum(PurchLine, PurchQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuantity</Name>
				<Source><![CDATA[
    protected void setQuantity()
    {
        axSalesLine.parmSalesQty(purchLine.PurchQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnStatusCreated</Name>
				<Source><![CDATA[
    protected ReturnStatusLine getReturnStatusCreated()
    {
        return ReturnStatusLine::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesLineQuantity</Name>
				<Source><![CDATA[
    protected boolean validateSalesLineQuantity()
    {
        boolean ok = true;

        // Check should only be performed for catch weight items (another check will fail if the item isn't a catch weight item in both companies).
        if (purchLine.inventTable().pdsCWItem() && purchLine.PurchQty != axSalesLine.salesLine().SalesQty)
        {
            ok = checkFailed("@SCM:IntercompanySalesLineSalesQuantityError");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesLineData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the intercompany order line record with data from the purchase order line.
    /// </summary>
    protected void setSalesLineData()
    {
        if (create)
        {
            axSalesLine.salesLine().initFromSalesTable(salesTable);
            axSalesLine.parmReturnStatus(this.getReturnStatusCreated());

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                this.initFromPurchLineInterCompany_IN();
            }
        }

        if (!create
            && AxSalesLineNotResetNameIntercompanySyncFlight::instance().isEnabled()
            && !purchLine.fieldChanged(fieldNum(PurchLine, ItemId)))
        {
            axSalesLine.setFieldAsTouched(fieldNum(SalesLine, Name));
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, ItemId)))
        {
            axSalesLine.parmItemId(axItemId);
            axSalesLine.salesLine().initDropShipAndInstallmentEligible(InventTable::find(axSalesLine.parmItemId()));
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, InventDimId)))
        {
            InventDimId currentProductDimensionsDimId;
            boolean productVariantItemSalesTaxGroupFeatureEnabled = EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled()
                && (!EcoResProductVariantItemSalesTaxGroupNoBRFlight::instance().isEnabled() || !(BrazilParameters::isEnabled() && axSalesLine.salesLine().salesLine_BR().CFOPTable_BR));
            if (productVariantItemSalesTaxGroupFeatureEnabled
                && !create)
            {
                currentProductDimensionsDimId = InventDim::findOrCreate(axSalesLine.axInventDim().productDimensions()).InventDimId;
            }

            axSalesLine.axInventDim().productDimensions(axInventDim);

            if (productVariantItemSalesTaxGroupFeatureEnabled
                && (create
                    || currentProductDimensionsDimId != InventDim::findOrCreate(axSalesLine.axInventDim().productDimensions()).InventDimId))
            {
                axSalesLine.parmTaxItemGroup(InventTable::getTaxItemGroupId(ModuleInventPurchSales::Sales, axItemId, axInventDim.InventDimId));
            }
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, VariantId)))
        {
            axSalesLine.parmRetailVariantId(InventDimCombination::find(axItemId, axInventDim.inventDimId).RetailVariantId);
        }

        if (create)
        {
            axSalesLine.axInventDim().setInventLocationId();
        }
        axSalesLine.axInventDim().setInventSiteId();

        this.setInventProfileId_RU();

        this.setInventDimId();

        if (create)
        {
            axSalesLine.salesLine().setStockedProduct();
            axSalesLine.salesLine().setDeliveryDateControlType();
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, LineNumber)))
        {
            axSalesLine.parmLineNum(any2real(purchLine.LineNumber));
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, InventTransId)))
        {
            axSalesLine.parmInterCompanyInventTransId(purchLine.InventTransId);

            if ((create || purchLine.fieldChanged(fieldNum(PurchLine, Complete))) && !TradeInterCompanySyncPurchLineSyncCompleteFlight::instance().isEnabled())
            {
                axSalesLine.parmComplete(purchLine.Complete);
            }
        }

        if ((create || purchLine.fieldChanged(fieldNum(PurchLine, Complete))) && TradeInterCompanySyncPurchLineSyncCompleteFlight::instance().isEnabled())
        {
            axSalesLine.parmComplete(purchLine.Complete);
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, Blocked)))
        {
            axSalesLine.parmBlocked(purchLine.Blocked);
        }

        if (this.mustSetQuantity())
        {
            this.setQuantity();
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, PurchUnit)))
        {
            axSalesLine.parmSalesUnit(purchLine.PurchUnit);
        }

        if (this.mustSetCatchWeightQuantity())
        {
            this.setCatchWeightQuantity();
        }

        if (create)
        {
            if (!this.validateSalesLineQuantity())
            {
                throw error("@SYS21628");
            }
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, UnderDeliveryPct)))
        {
            axSalesLine.parmUnderDeliveryPct(purchLine.UnderDeliveryPct);
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, OverDeliveryPct)))
        {
            axSalesLine.parmOverDeliveryPct(purchLine.OverDeliveryPct);
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, PlanningPriority)))
        {
            axSalesLine.parmPlanningPriority(purchLine.PlanningPriority);
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, MatchingAgreementLine)))
        {
            axSalesLine.parmMatchingAgreementLine(AgreementLine::find(purchLine.MatchingAgreementLine).intercompanyAgreementLine().RecId);
        }

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, ReturnDispositionCodeId)))
        {
            axSalesLine.parmReturnDispositionCodeId(purchLine.ReturnDispositionCodeId ? convReturnDispositionCode.axReturnDispositionCodeId(toInterCompanyTradingValueMap) : '');
            if (axSalesLine.parmReturnDispositionCodeId())
            {
                axSalesLine.salesLine().returnUpdateBasedOnDispcode();
            }
        }

        this.syncPricingInformation();

        if (!create || IntercompanySetPricePolicyWhenCreateFlight::instance().isEnabled())
        {
            axSalesLine.salesLine().setManualEntryChangePolicyFromPurchLine(purchLine);
        }

        if (create)
        {
            axSalesLine.parmReceiptDateConfirmed(dateNull());
            axSalesLine.parmShippingDateConfirmed(dateNull());
        }

        if (purchTable.InterCompanyDirectDelivery)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl)))
            {
                axSalesLine.parmReceiptDateRequested(purchLine.DeliveryDate);
                if (purchTable.InterCompanyOriginalSalesId)
                    axSalesLine.parmShippingDateRequested(purchLine.ShippingDateRequested ? purchLine.ShippingDateRequested : purchLine.DeliveryDate);
                else
                    axSalesLine.parmShippingDateRequested(purchLine.DeliveryDate);
            }
            else
            {
                axSalesLine.parmShippingDateRequested(purchLine.DeliveryDate);
            }

            if (create ||  purchLine.fieldChanged(fieldNum(PurchLine, OverDeliveryPct)))
                axSalesLine.parmOverDeliveryPct(purchLine.OverDeliveryPct);

            if (create ||  purchLine.fieldChanged(fieldNum(PurchLine, UnderDeliveryPct)))
                axSalesLine.parmUnderDeliveryPct(purchLine.UnderDeliveryPct);
        }
        else
        {
            PurchLine purchLineOrig = purchLine.orig();

            if (this.mustUpdateDeliveryDateFromPurchLine(purchLineOrig))
            {
                this.updateDeliveryDateFromPurchLine();
            }
         }
        
        PurchLineType::syncDeliveryAddress(purchLine, axSalesLine, create);

        if (create)
        {
            axSalesLine.parmInterCompanyOrigin(InterCompanyOrigin::Derived);
        }

        if (interCompanyInventTransIdSales
            && (create || purchLine.fieldChanged(fieldNum(PurchLine,InventRefTransId)))
            && axSalesLine.salesLine().creditNoteLine())
        {
            axSalesLine.parmInventTransIdReturn(interCompanyInventTransIdSales);
            axSalesLine.parmDefaultDimension(axSalesLine.salesLine().copyDimension(CustInvoiceTrans::findInventTransid(interCompanyInventTransIdSales).DefaultDimension));
        }

        if (!create)
        {
            if (purchLine.fieldChanged(fieldNum(PurchLine, PurchStatus)) && purchLine.isCanceled())
            {
                axSalesLine.parmSalesStatus(SalesStatus::Canceled);
                if (axSalesLine.salesLine().SalesType == SalesType::ReturnItem)
                {
                    axSalesLine.parmReturnStatus(ReturnStatusLine::Canceled);
                }
            }
        }

        if (create
             || purchLine.fieldChanged(fieldNum(PurchLine, IntrastatCommodity))
             || purchLine.fieldChanged(fieldNum(PurchLine, OrigCountryRegionId))
             || purchLine.fieldChanged(fieldNum(PurchLine, OrigStateId)))
        {
            this.initForeignTradeFromInventTable(InventTable::find(axSalesLine.parmItemId()));
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIN00118, funcName());
        }

        if (TaxParameters::checkTaxParameters_IN())
        {
            PurchLine purchLine_orig;
            PurchLine_W purchLine_W;
            SalesLine salesLine_orig;

            VendInvoiceTrans vendInvoiceTrans_orig;
            CustInvoiceTrans custInvoiceTrans_orig;

            select firstonly crosscompany InventTransId from purchLine_orig
                join RecId from vendInvoiceTrans_orig
                    where purchLine_orig.PurchId == vendInvoiceTrans_orig.PurchID
                        && purchLine_orig.LineNumber == vendInvoiceTrans_orig.LineNum
                    join RecId from purchLine_W
                        where purchLine_W.purchLine == purchLine.RecId
                            && vendInvoiceTrans_orig.RecId == purchLine_W.RefReturnInvoiceTrans_W;

            if (purchLine_orig.InventTransId)
            {
                select firstonly custInvoiceTrans_orig
                    join RecId from salesLine_orig
                        where custInvoiceTrans_orig.SalesId == salesLine_orig.SalesId
                            && custInvoiceTrans_orig.LineNum == salesLine_orig.LineNum
                            && salesLine_orig.InterCompanyInventTransId == purchLine_orig.InventTransId;

                SalesLine salesLine = axSalesLine.salesLine();
                SalesLine_IN salesLine_IN = salesLine.salesLine_IN();
                salesLine_IN.TaxWithholdLineNum = custInvoiceTrans_orig.LineNum;
                salesLine_IN.TaxWithholdVoucher = custInvoiceTrans_orig.CustInvoiceJour().LedgerVoucher;
                salesLine.packSalesLine_IN(salesLine_IN);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSyncManualChangePolicy</Name>
				<Source><![CDATA[
    private boolean mustSyncManualChangePolicy()
    {
        return axSalesLine.parmManualEntryChangepolicy() || purchLine.ManualEntryChangepolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightProductSetupInSync</Name>
				<Source><![CDATA[
    protected void validateCatchWeightProductSetupInSync()
    {
        if (!PdsCatchWeight::validateQty(axItemId, purchLine.PurchQty, UnitOfMeasure::unitOfMeasureIdBySymbol(purchLine.PurchUnit), purchLine.pdsCWQty, false))
        {
            throw error("@PRO1523");
        }

        UnitOfMeasureRecId fromUnitRecId;
        UnitOfMeasureRecId fromCWUnitRecId;

        changeCompany (purchLine.company())
        {
            fromUnitRecId   = UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(purchLine.ItemId).inventUnitId());
            fromCWUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(PdsCatchWeight::cwUnitId(purchLine.ItemId));
        }

        UnitOfMeasureRecId toUnitRecId   = UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(axItemId).inventUnitId());
        UnitOfMeasureRecId toCWUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(PdsCatchWeight::cwUnitId(axItemId));

        if (fromUnitRecId != toUnitRecId
            || fromCWUnitRecId != toCWUnitRecId)
        {
            throw error("@SCM:IntercompanyCatchWeightUnitError");
        }
        
        PdsCatchWeightItem::compareInterCompanyCatchWeightQuantities(purchLine.ItemId, purchLine.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileId_RU</Name>
				<Source><![CDATA[
    protected void setInventProfileId_RU()
    {
        if (InventDimGroupSetup::newItemId(axSalesLine.parmItemId()).isDimensionActive(fieldNum(InventDim, InventProfileId_RU)))
        {
            if (axSalesLine.axSalesTable_RU().parmInventProfileId_RU())
            {
                axSalesLine.axInventDim().parmInventProfileId_RU(axSalesLine.axSalesTable_RU().parmInventProfileId_RU());
            }
            else if (convInventProfile)
            {
                axSalesLine.axInventDim().parmInventProfileId_RU(convInventProfile.axInventProfileId(toInterCompanyTradingValueMap));
            }
            else
            {
                axSalesLine.axInventDim().parmInventProfileId_RU(PurchParameters::find().InventProfileId_RU);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTrackingInventoryDimensionFromPurchaseLine</Name>
				<Source><![CDATA[
    private void setTrackingInventoryDimensionFromPurchaseLine()
    {
        InterCompanyEndpointActionPolicyTransfer transferExternal = purchTable.interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External);

        if (transferExternal && (transferExternal.InventBatchIdOnLines || transferExternal.InventSerialIdOnLines))
        {
            InventTable inventTable                 = axSalesLine.inventTableRecord();
            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);

            boolean transferBatch = transferExternal.InventBatchIdOnLines
                             && inventDimGroupSetup.isDimensionActive(fieldNum(InventDim,InventBatchId))
                             && !WHSReservationHierarchyInventDimUtil::isBatchBelowLocation(inventTable);

            boolean transferSerial = transferExternal.InventSerialIdOnLines
                             && inventDimGroupSetup.isDimensionActive(fieldNum(InventDim,InventSerialId))
                             && !WHSReservationHierarchyInventDimUtil::isSerialBelowLocation(inventTable);

            if (transferBatch || transferSerial)
            {
                InventDim purchInventDim;
                InventDim inventDim = axSalesLine.axInventDim().inventDim();

                changecompany (purchLine.company())
                {
                    purchInventDim = purchLine.inventDim();
                }

                if (transferBatch)
                {
                    inventDim.InventBatchId = purchInventDim.InventBatchId;

                    if (!InventBatch::exist(purchInventDim.InventBatchId, axItemId))
                    {
                        InventBatch purchInventBatch;
                        changecompany (purchLine.company())
                        {
                            purchInventBatch = InventBatch::find(purchInventDim.inventBatchId, axItemId);
                        }
                        if (purchInventBatch)
                        {
                            purchInventBatch.createInterCompanyBatch(axItemId, purchInventDim);
                        }
                    }
                }

                if (transferSerial)
                {
                    inventDim.InventSerialId = purchInventDim.InventSerialId;
                    if (!InventSerial::exist(purchInventDim.inventSerialId, axItemId))
                    {
                        InventSerial purchInventSerial;
                        changecompany (purchLine.company())
                        {
                            purchInventSerial = InventSerial::find(purchInventDim.InventSerialId, axItemId);
                        }
                        if (purchInventSerial)
                        {
                            purchInventSerial.createInterCompanySerial(axItemId, purchInventDim);
                        }
                    }
                }

                axSalesLine.parmInventDimId(InventDim::findOrCreate(inventDim).InventDimId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    protected void setInventDimId()
    {
        // always set the inventDimId on the axSalesLine, so item dimensions are not overwritten by axClass defaulting
        axSalesLine.parmInventDimId(InventDim::findOrCreate(axSalesLine.axInventDim().inventDim()).InventDimId);
        
        this.setTrackingInventoryDimensionFromPurchaseLine();

        SalesLine salesLine = axSalesLine.salesLine();
        if (purchLine.IntercompanyOSOSourcingInventSiteId &&
            (salesLine.DeliveryType == TradeLineDlvType::DropShip || salesLine.mcrSalesLineDropShipment().DropShipment))
        {
            InventDim inventDim = axSalesLine.axInventDim().inventDim();
            inventDim.inventSiteId = purchLine.IntercompanyOSOSourcingInventSiteId;
            inventDim.inventLocationId = purchLine.IntercompanyOSOSourcingInventLocationId;
            axSalesLine.parmInventDimId(InventDim::findOrCreate(inventDim).InventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needRecalcPricingInfo</Name>
				<Source><![CDATA[
    protected boolean needRecalcPricingInfo()
    {
        return toEndpointActionPolicy.PriceDiscountSearch
            && (axSalesLine.salesLine().SalesQty != 0     // SalesQty field is zero on Return order lines; So for return need to look at ExpectedRetQty instead, but only update price if line is not referencing a credit note
                || (!purchLine.InventRefTransId && axSalesLine.parmSalesType() == SalesType::ReturnItem && axSalesLine.parmExpectedRetQty() != 0))
            && (create || purchLineType.interCompanyIsPriceDiscSearchNeeded()) 
            && !this.mustSyncManualChangePolicy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcPricingInfo</Name>
				<Source><![CDATA[
    protected void recalcPricingInfo()
    {
        SalesLine       salesLineLocal;
        SalesLine_IN    salesLineLocal_IN;
        boolean         skipRecalc = false;

        buf2Buf(axSalesLine.salesLine(),salesLineLocal);
        salesLineLocal.initFromSalesTable(salesTable);

        if (!create)
        {
            axSalesLine.parmShippingDateConfirmed(axSalesLine.salesLine().ShippingDateConfirmed);
            axSalesLine.parmReceiptDateConfirmed(axSalesLine.salesLine().ReceiptDateConfirmed);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            salesLineLocal_IN = salesLineLocal.salesLine_IN();
            if (taxParameters)
            {
                salesLineLocal.initFromPurchLineInterCompany_IN(purchLine);
            }
        }

        if (!IntercompanyUpdatePriceDiscOnPurchaseDeliveryDateChangeFlight::instance().isEnabled())
        {
            skipRecalc = axSalesLine.salesLine().salesPurchLineInterface().priceDisc_PriceCache(axSalesLine.salesLine().inventDim(), true).price() == 0 ? true : false;
        }

        if (!skipRecalc)
        {
            salesLineLocal.setPriceDisc(axSalesLine.salesLine().inventDim());
        }

        if (axSalesLine.parmMatchingAgreementLine())
        {
            salesLineLocal.salesPurchLineInterface().setAgreementQtyAndPrice(axSalesLine.agreementLineRecord());
        }

        if (axSalesLine.inventTableRecord().pdsBaseAttributeId)
        {
            axSalesLine.salesLine().pdsCopySalesLinePricingCalculation(salesLineLocal.pdsSalesLinePricingCalculation());
        }

        this.setSalesPriceDiscFromSalesLine(salesLineLocal);

        this.setPurchLinePricingFieldsFromSalesLine(salesLineLocal);

        purchLine.DiscAmount     = purchLine.discAmount();
        purchLine.DiscPercent    = purchLine.discPercent();
        purchLine.LineAmount     = purchLine.calcPrice2LineAmount(purchLine.PurchQty, true);

        if (taxParameters)
        {
            PurchLine_IN purchLine_IN = purchLine.purchLine_IN();
            purchLine_IN.MaximumRetailPrice                 = salesLineLocal_IN.MaximumRetailPrice;
            purchLine_IN.AssessableValueTransactionCurrency = purchLine.getMiscChargesAmount_IN();
            purchLine.packPurchLine_IN(purchLine_IN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPriceDiscFromSalesLine</Name>
				<Source><![CDATA[
    protected void setSalesPriceDiscFromSalesLine(SalesLine _salesLine)
    {
        axSalesLine.parmSalesPrice    (_salesLine.SalesPrice);
        axSalesLine.parmPriceUnit     (_salesLine.PriceUnit);
        axSalesLine.parmSalesMarkup   (_salesLine.SalesMarkup);
        axSalesLine.parmLinePercent   (_salesLine.LinePercent);
        axSalesLine.parmLineDisc      (_salesLine.LineDisc);
        axSalesLine.parmMultiLnPercent(_salesLine.MultiLnPercent);
        axSalesLine.parmMultiLnDisc   (_salesLine.MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchLinePricingFieldsFromSalesLine</Name>
				<Source><![CDATA[
    protected void setPurchLinePricingFieldsFromSalesLine(SalesLine _salesLine)
    {
        purchLine.PurchPrice     = _salesLine.SalesPrice;
        purchLine.PriceUnit      = _salesLine.PriceUnit;
        purchLine.PurchMarkup    = _salesLine.SalesMarkup;

        if (IntercompanyUpdatePriceDiscOnPurchaseDeliveryDateChangeFlight::instance().isEnabled()
            || purchLineType.parmPurchTable().interCompanyEndpointActionPolicy().PriceDiscountSearch)
        {
            purchLine.LinePercent    = _salesLine.LinePercent;
            purchLine.LineDisc       = _salesLine.LineDisc;
        }

        purchLine.MultiLnPercent = _salesLine.MultiLnPercent;
        purchLine.MultiLnDisc    = _salesLine.MultiLnDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyModifiedPricingFieldsFromPurchLine</Name>
				<Source><![CDATA[
    protected void copyModifiedPricingFieldsFromPurchLine()
    {
        if (create || purchLine.fieldChanged(fieldNum(PurchLine, PurchPrice)))
            axSalesLine.parmSalesPrice(purchLine.PurchPrice);
        else
            axSalesLine.parmSalesPrice(axSalesLine.salesLine().SalesPrice);

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, PriceUnit)))
            axSalesLine.parmPriceUnit(purchLine.PriceUnit);
        else
            axSalesLine.parmPriceUnit(axSalesLine.salesLine().PriceUnit);

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, PurchMarkup)))
            axSalesLine.parmSalesMarkup(purchLine.PurchMarkup);
        else
            axSalesLine.parmSalesMarkup(axSalesLine.salesLine().SalesMarkup);

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, LinePercent)))
            axSalesLine.parmLinePercent(purchLine.LinePercent);
        else
            axSalesLine.parmLinePercent(axSalesLine.salesLine().LinePercent);

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, LineDisc)))
            axSalesLine.parmLineDisc(purchLine.LineDisc);
        else
            axSalesLine.parmLineDisc(axSalesLine.salesLine().LineDisc);

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, MultiLnPercent)))
            axSalesLine.parmMultiLnPercent(purchLine.MultiLnPercent);
        else
            axSalesLine.parmMultiLnPercent(axSalesLine.salesLine().MultiLnPercent);

        if (create || purchLine.fieldChanged(fieldNum(PurchLine, MultiLnDisc)))
            axSalesLine.parmMultiLnDisc(purchLine.MultiLnDisc);
        else
            axSalesLine.parmMultiLnDisc(axSalesLine.salesLine().MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPricingInformation</Name>
				<Source><![CDATA[
    protected void syncPricingInformation()
    {
        if (this.needRecalcPricingInfo())
        {
            this.recalcPricingInfo();
        }
        else
        {
            this.copyModifiedPricingFieldsFromPurchLine();
        }

        axSalesLine.parmLineAmount(purchLine.LineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForeignTradeFromInventTable</Name>
				<Source><![CDATA[
    private void initForeignTradeFromInventTable(InventTable _inventTable)
    {
        axSalesLine.salesLine().IntrastatCommodity = _inventTable.IntrastatCommodity;
        axSalesLine.salesLine().OrigCountryRegionId = _inventTable.OrigCountryRegionId;
        axSalesLine.salesLine().OrigStateId = _inventTable.OrigStateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLineInterCompany_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>SalesLine_IN</c> record and assigning assessable value for sales order from intercompany purchase order.
    /// </summary>
    protected void initFromPurchLineInterCompany_IN()
    {
        SalesLine    salesLineLocal                     = axSalesLine.salesLine();
        SalesLine_IN salesLine_IN                       = salesLineLocal.salesLine_IN();

        salesLine_IN.AssessableValueTransactionCurrency = purchLine.purchLine_IN().AssessableValueTransactionCurrency;
        salesLine_IN.MaximumRetailPrice                 = purchLine.purchLine_IN().MaximumRetailPrice;

        salesLineLocal.packSalesLine_IN(salesLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateSalesDeliveryDateFromPurchLine</Name>
				<Source><![CDATA[
    private boolean shouldUpdateSalesDeliveryDateFromPurchLine()
    {
        if (purchLine.InterCompanyInventTransId
            && purchLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateDeliveryDateFromPurchLine</Name>
				<Source><![CDATA[
    private boolean mustUpdateDeliveryDateFromPurchLine(PurchLine _purchLineOrig)
    {
        InterCompanyEndpointActionPolicyTransfer transferExternal = purchTable.interCompanyEndpointActionPolicy()
            .getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External);

         return (create
            || (!(transferExternal.DisableRequestedDatesSync && IntercompanySyncDlvDatesFeature::instance().isEnabled())
            && (_purchLineOrig.DeliveryDate != purchLine.DeliveryDate
                || _purchLineOrig.RemainPurchPhysical != purchLine.RemainPurchPhysical
                || _purchLineOrig.PurchUnit != purchLine.PurchUnit
                || _purchLineOrig.DeliveryPostalAddress != purchLine.DeliveryPostalAddress
                || _purchLineOrig.InventDimId != purchLine.InventDimId
                || this.shouldUpdateSalesDeliveryDateFromPurchLine())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestedShippingDate</Name>
				<Source><![CDATA[
    internal static date getRequestedShippingDate(SalesLine _salesLine, PurchLine _purchLine, SalesCalcAvailableDlvDates _salesCalcAvailableDlvDates)
    {
        _salesCalcAvailableDlvDates.validateWritePrompt(_salesLine, false, true, true, false);

        date today = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (_purchLine.DeliveryDate < today || !_salesLine.ShippingDateRequested)
        {
            _salesLine.ShippingDateRequested = _purchLine.DeliveryDate;
        }
        else if (_salesLine.ShippingDateRequested < today)
        {
            _salesLine.ShippingDateRequested = today;
        }
        return _salesLine.ShippingDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeliveryDateFromPurchLine</Name>
				<Source><![CDATA[
    private void updateDeliveryDateFromPurchLine()
    {        
        axSalesLine.parmReceiptDateRequested(purchLine.DeliveryDate);

        SalesLine axSalesLineRecord = axSalesLine.salesLine();

        if (isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl))
            && axSalesLineRecord.DeliveryDateControlType != SalesDeliveryDateControlType::None)
        {
            SalesLine salesLineLocal;
            buf2Buf(axSalesLineRecord, salesLineLocal);
            salesLineLocal.initFromSalesTable(salesTable);
            salesLineLocal.InventDimId             = InventDim::findOrCreate(axSalesLineRecord.inventDim()).InventDimId;
            salesLineLocal.ReceiptDateConfirmed    = axSalesLineRecord.ReceiptDateConfirmed;
            salesLineLocal.ReceiptDateRequested    = axSalesLineRecord.ReceiptDateRequested;
            salesLineLocal.ShippingDateConfirmed   = axSalesLineRecord.ShippingDateConfirmed;
            salesLineLocal.ShippingDateRequested   = axSalesLineRecord.ShippingDateRequested;
            salesLineLocal.DeliveryDateControlType = axSalesLineRecord.DeliveryDateControlType;

            // Delivery address should be taken from the purchLine, not be defaulted from sales table
            salesLineLocal.DeliveryPostalAddress = purchLine.DeliveryPostalAddress;

            SalesCalcAvailableDlvDates salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(salesLineLocal, fieldNum(SalesLine, ReceiptDateRequested));            

            salesLineLocal.ShippingDateRequested = InterCompanySyncPurchLineType::getRequestedShippingDate(salesLineLocal, purchLine, salesCalcAvailableDlvDates);
            
            axSalesLine.parmShippingDateRequested(salesLineLocal.ShippingDateRequested);
        }
        else
        {
            axSalesLine.parmShippingDateRequested(purchLine.DeliveryDate);
        }

        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            if (purchLine.RequestedShipDate && purchLine.RequestedShipDate != axSalesLine.parmShippingDateRequested())
            {
                info(strFmt("@SCM:VendorDispatchDateSalesOrderLineRequestDateUpdateInfoMessage", axSalesLineRecord.SalesId, axSalesLineRecord.itemName()));
                axSalesLine.parmShippingDateRequested(purchLine.RequestedShipDate);
            }

            if (purchLine.ConfirmedShipDate && purchLine.ConfirmedShipDate != axSalesLine.parmShippingDateConfirmed())
            {
                info(strFmt("@SCM:VendorDispatchDateSalesOrderLineConfirmDateUpdateInfoMessage", axSalesLineRecord.SalesId, axSalesLineRecord.itemName()));
                axSalesLine.parmShippingDateConfirmed(purchLine.ConfirmedShipDate);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>