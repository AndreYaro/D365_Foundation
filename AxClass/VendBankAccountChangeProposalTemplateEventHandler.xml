<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendBankAccountChangeProposalTemplateEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendBankAccountChangeProposalTemplateEventHandler</c> workflow event handler.
/// </summary>
public class  VendBankAccountChangeProposalTemplateEventHandler implements WorkflowCanceledEventHandler,  
	WorkflowCompletedEventHandler,
	WorkflowStartedEventHandler
{
    #OCCRetryCount
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    public void started(WorkflowEventArgs _workflowEventArgs)
	{
	}

]]></Source>
			</Method>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    public void canceled(WorkflowEventArgs _workflowEventArgs)
	{
        this.clearWorkFlowState(_workflowEventArgs);
	}

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        RecId vendBankAccountRecId = _workflowEventArgs.parmWorkflowContext().parmRecId();
        VendBankAccount bankAccount = VendBankAccount::findByRecId(vendBankAccountRecId,true);
        VendBankAccountChangeProposal proposal = VendBankAccountChangeProposal::findByVendBankAccountRecId(vendBankAccountRecId);
        
        if(proposal.RecId)
        {
            this.updateVendBankAccount(proposal, _workflowEventArgs);
        }
        else if(bankAccount.RecId && bankAccount.IsDraft())
        {
            this.activateVendBankAccount(bankAccount,_workflowEventArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the proposed changes to vendor bank account.
    /// </summary>
    /// <param name = "_proposal">The corresponding <c>VendBankAccountChangeProposal</c> record.</param>
    /// <param name = "_workflowEventArgs">The argument to identify the record associated with the workflow.</param>
    private void updateVendBankAccount(VendBankAccountChangeProposal _proposal, WorkflowEventArgs _workflowEventArgs)
    {
        VendBankAccountChangeProposalApply applier = VendBankAccountChangeProposalApply::newVendBankAccountChangeProposal(_proposal);

        ttsbegin;
        applier.applyProposedChanges();
        this.clearWorkFlowState(_workflowEventArgs);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateVendBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>IsDraft</c> field to false.
    /// </summary>
    /// <param name = "_bankAccount">The <c>VendBankAccount</c> record to approve</param>
    /// <param name = "_workflowEventArgs">The argument to identify the record associated with the workflow.</param>
    private void activateVendBankAccount(VendBankAccount _bankAccount, WorkflowEventArgs _workflowEventArgs)
    {
        WorkflowContext workflowContext = _workflowEventArgs.parmWorkflowContext();

        try
        {
            ttsbegin;
            _bankAccount.VersioningState = VendBankAccountVersioningState::Approved;
            _bankAccount.WorkflowState = VendBankAccountChangeProposalWorkflowState::NotSubmitted;
            _bankAccount.update();
            ttscommit;
        }
        catch(Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWorkFlowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes logic to clear workflow state when a corresponding workflow is cancelled or completed.
    /// </summary>
    /// <param name = "_workflowEventArgs">The argument to identify the record associated with the workflow.</param>
    private void clearWorkFlowState(WorkflowEventArgs _workflowEventArgs)
    {
        WorkflowContext workflowContext = _workflowEventArgs.parmWorkflowContext();
        VendBankAccount::updateWorkflowState(workflowContext.parmRecId(), VendBankAccountChangeProposalWorkflowState::NotSubmitted);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>