<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBAssessmentBookIcmsDP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBAssessmentBookIcmsDP_BR</c> class is the Report Data Provider class for the <c>FBAssessmentBookIcms_BR</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(FBAssessmentBookContract_BR))]
class FBAssessmentBookIcmsDP_BR extends SRSReportDataProviderBase
{
    TmpFBAssessmentBook_BR tmpAssessmentBook;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccountingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sum of fiscal document lines' accounting amount.
    /// </summary>
    /// <param name="_taxAssessmentRecId">
    /// RecId of tax assessment record.
    /// </param>
    /// <param name="_cfop">
    /// CFOP to be used as query filter in fiscal document lines.
    /// </param>
    /// <returns>
    /// The sum of <c>FiscalDocumentLine_BR</c> accounting amount per tax assessment and CFOP.
    /// </returns>
    protected LineAmount getAccountingAmount(RefRecId _taxAssessmentRecId, SalesPurchCFOPId_BR _cfop)
    {
        FiscalDocumentLine_BR               fiscalDocumentLine;
        FiscalDocument_BR                   fiscalDocument;
        FBBookingPeriodFiscalDocument_BR    bookingPeriodFiscalDocument;
        FBBookingPeriod_BR                  bookingPeriod;
        FBTaxAssessment_BR                  taxAssessment;

        select FiscalEstablishmentDataArea
        from bookingPeriod
        join taxAssessment
            where bookingPeriod.RecId   == taxAssessment.FBBookingPeriod_BR
                && taxAssessment.RecId  == _taxAssessmentRecId;

        changeCompany(bookingPeriod.FiscalEstablishmentDataArea)
        {
            select sum(AccountingAmount) from fiscalDocumentLine
            where fiscalDocumentLine.CFOP == _cfop
            exists join fiscalDocument
                where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
                    && fiscalDocument.Status            == FiscalDocumentStatus_BR::Approved
            exists join bookingPeriodFiscalDocument
                where bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
            exists join taxAssessment
                where taxAssessment.FBBookingPeriod_BR == bookingPeriodFiscalDocument.FBBookingPeriod_BR
                    && taxAssessment.RecId == _taxAssessmentRecId;
        }

        return fiscalDocumentLine.AccountingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve Fiscal Documents data filtered by contract parameters
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data.
    /// </returns>
    protected Query buildQuery()
    {
        Query                           query;
        QueryBuildDataSource            qbds;
        FBAssessmentBookContract_BR     contract = this.parmDataContract() as FBAssessmentBookContract_BR;

        query = new Query();

        //FiscalDocument_BR
        qbds = query.addDataSource(tableNum(FiscalDocument_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, Direction));

        // FiscalDocumentLine_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);

        // FiscalDocumentTaxTrans_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);

        // FBTaxTrans_BR
        qbds = qbds.addDataSource(tableNum(FBTaxTrans_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(FBTaxTrans_BR, CFOP));
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmountExempt), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmountOther), SelectionField::Sum);
        qbds.addRange(fieldNum(FBTaxTrans_BR, FBTaxAssessment_BR)).value(SysQuery::value(contract.parmTaxAssessmentRecId()));
        qbds.addRange(fieldNum(FBTaxTrans_BR, TaxType)).value(SysQuery::value(TaxType_BR::ICMS));

        // CFOPTable_BR
        qbds = qbds.addDataSource(tableNum(CFOPTable_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addGroupByField(fieldNum(CFOPTable_BR, Name));
        qbds.addLink(fieldnum(FBTaxTrans_BR, CFOP), fieldNum(CFOPTable_BR, CFOPId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRetailQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve Retail Fical Receipts data filtered by contract parameters
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data.
    /// </returns>
    protected Query buildRetailQuery()
    {
        Query                           query;
        QueryBuildDataSource            qbds;
        FBAssessmentBookContract_BR     contract = this.parmDataContract() as FBAssessmentBookContract_BR;

        query = new Query();

        // RetailZReportTotalizerTaxTrans_BR
        qbds = query.addDataSource(tableNum(RetailZReportTotalizerTaxTrans_BR));

        // FBTaxTrans_BR
        qbds = qbds.addDataSource(tableNum(FBTaxTrans_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(FBTaxTrans_BR, CFOP));
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmountExempt), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FBTaxTrans_BR, TaxBaseAmountOther), SelectionField::Sum);
        qbds.addRange(fieldNum(FBTaxTrans_BR, FBTaxAssessment_BR)).value(SysQuery::value(contract.parmTaxAssessmentRecId()));
        qbds.addRange(fieldNum(FBTaxTrans_BR, TaxType)).value(SysQuery::value(TaxType_BR::ICMS));

        // CFOPTable_BR
        qbds = qbds.addDataSource(tableNum(CFOPTable_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addGroupByField(fieldNum(CFOPTable_BR, Name));
        qbds.addLink(fieldnum(FBTaxTrans_BR, CFOP), fieldNum(CFOPTable_BR, CFOPId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpAssessmentBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpFBAssessmentBook_BR</c> table.
    /// </summary>
    /// <returns>
    /// The <c>TmpFBAssessmentBook_BR</c>
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TmpFBAssessmentBook_BR))]
    public TmpFBAssessmentBook_BR getTmpAssessmentBook()
    {
        TmpFBAssessmentBook_BR tmpAssessmentBookFinal;

        insert_recordset tmpAssessmentBookFinal (CFOP, CFOPValue, Description, Direction, FooterPosition, FooterValue,
                itemAmount, TaxBaseAmount, TaxAmount, TaxBaseAmountExempt, TaxBaseAmountOther)
        select CFOP, CFOPValue, Description, Direction, FooterPosition, FooterValue,
                sum(itemAmount), sum(TaxBaseAmount), sum(TaxAmount), sum(TaxBaseAmountExempt), sum(TaxBaseAmountOther)
            from tmpAssessmentBook
            group by CFOP, CFOPValue, Description, Direction, FooterPosition, FooterValue;

        select tmpAssessmentBookFinal;
        return tmpAssessmentBookFinal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpAssessmentBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a register in the table <c>TmpFBAssessmentBook_BR</c>
    /// </summary>
    private void insertTmpAssessmentBook()
    {
        tmpAssessmentBook.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        const str Position001 = '001';
        const str Position00202 = '00202';
        const str Position00207 = '00207';
        const str Position003 = '003';
        const str Position005 = '005';
        const str Position00602 = '00602';
        const str Position00607 = '00607';
        const str Position007 = '007';
        const str Position009 = '009';
        const str Position012 = '012';
        const str Position013 = '013';
        const str Position014 = '014';

        Query       query;
        QueryRun    queryRun;

        FiscalDocument_BR                   fiscalDocument;
        FBTaxAssessment_BR                  fbTaxAssessment;
        FBTaxTrans_BR                       fbTaxTrans;
        CFOPTable_BR                        cfopTable;

        FBTaxAssessmentCalculatorICMS_BR fbTaxAssessmentCalculatorIcms;

        FBAssessmentBookContract_BR contract = this.parmDataContract() as FBAssessmentBookContract_BR;

        fbTaxAssessment = FBTaxAssessment_BR::find(contract.parmTaxAssessmentRecId());

        changeCompany(fbTaxAssessment.bookingPeriod().FiscalEstablishmentDataArea)
        {
            query = this.buildQuery();
            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                fiscalDocument          = queryRun.get(tableNum(FiscalDocument_BR));
                fbTaxTrans              = queryRun.get(tableNum(FBTaxTrans_BR));
                cfopTable               = queryRun.get(tableNum(CFOPTable_BR));

                tmpAssessmentBook.Direction             = enum2int(fiscalDocument.Direction);

                tmpAssessmentBook.CFOP                  = fbTaxTrans.CFOP;
                tmpAssessmentBook.CFOPValue             = str2int(strKeep(fbTaxTrans.cfop, '0123456789'));

                tmpAssessmentBook.Description           = cfopTable.Name;
                tmpAssessmentBook.ItemAmount            = this.getAccountingAmount(contract.parmTaxAssessmentRecId(), fbTaxTrans.CFOP);

                tmpAssessmentBook.TaxBaseAmount         = fbTaxTrans.TaxBaseAmount;
                tmpAssessmentBook.TaxAmount             = fbTaxTrans.TaxAmount;
                tmpAssessmentBook.TaxBaseAmountExempt   = fbTaxTrans.TaxBaseAmountExempt;
                tmpAssessmentBook.TaxBaseAmountOther    = fbTaxTrans.TaxBaseAmountOther;

                this.insertTmpAssessmentBook();
            }

            query = this.buildRetailQuery();
            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                fbTaxTrans               = queryRun.get(tableNum(FBTaxTrans_BR));
                cfopTable                = queryRun.get(tableNum(CFOPTable_BR));

                tmpAssessmentBook.Direction             = enum2int(FiscalDocDirection_BR::Outgoing);

                tmpAssessmentBook.CFOP                  = fbTaxTrans.CFOP;
                tmpAssessmentBook.CFOPValue             = str2int(strKeep(fbTaxTrans.cfop, '0123456789'));

                tmpAssessmentBook.Description           = cfopTable.Name;
                // At the fiscal receipt, the line amount is equal to the sum of the base amounts
                tmpAssessmentBook.ItemAmount            = fbTaxTrans.TaxBaseAmount + fbTaxTrans.TaxBaseAmountExempt + fbTaxTrans.TaxBaseAmountOther;

                tmpAssessmentBook.TaxBaseAmount         = fbTaxTrans.TaxBaseAmount;
                tmpAssessmentBook.TaxAmount             = fbTaxTrans.TaxAmount;
                tmpAssessmentBook.TaxBaseAmountExempt   = fbTaxTrans.TaxBaseAmountExempt;
                tmpAssessmentBook.TaxBaseAmountOther    = fbTaxTrans.TaxBaseAmountOther;

                this.insertTmpAssessmentBook();
            }
        }

        fbTaxAssessmentCalculatorIcms = fbTaxAssessment.getCalculator();
        fbTaxAssessmentCalculatorIcms.calculate();

        tmpAssessmentBook.FooterPosition    = Position001;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getDebits();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position00202;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getDebitsByDocumentAdjustment();
        tmpAssessmentBook.FooterValue       += fbTaxAssessmentCalculatorIcms.getDebitsByGeneralAdjustment();
        tmpAssessmentBook.FooterValue       -= fbTaxAssessmentCalculatorIcms.getDebitICMSDiffAmount();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position00207;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getDebitICMSDiffAmount();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position003;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getCreditReversalByGeneralAdjustment();
        tmpAssessmentBook.FooterValue       += fbTaxAssessmentCalculatorIcms.getCreditReversalByDocumentAdjustment();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position005;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getCredits();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position00602;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getCreditsByDocumentAdjustment();
        tmpAssessmentBook.FooterValue       += fbTaxAssessmentCalculatorIcms.getCreditsByGeneralAdjustment();
        tmpAssessmentBook.FooterValue       -= fbTaxAssessmentCalculatorIcms.getCreditICMSDiffAmount();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position00607;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getCreditICMSDiffAmount();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position007;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getDebitReversalByGeneralAdjustment();
        tmpAssessmentBook.FooterValue       += fbTaxAssessmentCalculatorIcms.getDebitReversalByDocumentAdjustment();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position009;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getCreditBalanceFromPreviousPeriod();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position012;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getDeductions();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position013;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getTaxAmountToPay();
        this.insertTmpAssessmentBook();

        tmpAssessmentBook.FooterPosition    = Position014;
        tmpAssessmentBook.FooterValue       = fbTaxAssessmentCalculatorIcms.getCreditBalanceAtEndOfthePeriod();
        this.insertTmpAssessmentBook();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>