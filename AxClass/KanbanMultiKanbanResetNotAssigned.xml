<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanMultiKanbanResetNotAssigned</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanMultiKanbanResetNotAssigned</c> class provides the interface between the <c>KanbanStatus</c> class and the user interface.
/// </summary>
/// <remarks>
/// Status updates can be performed through a form or silently.
/// </remarks>
public class KanbanMultiKanbanResetNotAssigned extends KanbanMultiKanbanReset implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query to be use when the class is run from a form.
    /// </summary>
    /// <returns>
    /// The <c>Query</c> object to use.
    /// </returns>
    public Query query()
    {
        return new QueryRun(querystr(KanbanMultiKanbanReset)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>targetKanbanStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>LeanKanbanStatus</c> enumeration value that represents the target status.
    /// </summary>
    /// <param name="_kanban">
    /// A <c>Kanban</c> table buffer.
    /// </param>
    /// <returns>
    /// The target status.
    /// </returns>
    public LeanKanbanStatus targetKanbanStatus(Kanban _kanban = null)
    {
        return LeanKanbanStatus::NotAssigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanMultiKanban construct()
    {
        return new KanbanMultiKanbanResetNotAssigned();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        KanbanMultiKanban::newArgs(_args,LeanKanbanStatus::NotAssigned,true).runMain(_args);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>