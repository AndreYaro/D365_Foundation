<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventIncomeOutlayDP_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventIncomeOutlayDP_RU</c> class fetches records for the<c>InventIncomeOutlay_RU</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventIncomeOutlay_RU)),
    SRSReportParameterAttribute(classStr(InventIncomeOutlayContract_RU))
]
public class InventIncomeOutlayDP_RU extends SRSReportDataProviderBase
{
    InventIncomeOutlayTmp_RU    inventIncomeOutlayTmp_RU;
    Amount                      outGoingDirect;
    Amount                      inComingDirect;
    Qty                         outQtyDirect;
    Qty                         inQtyDirect;
    Amount                      outGoingStorno;
    Amount                      inComingStorno;
    Qty                         outQtyStorno;
    Qty                         inQtyStorno;
    Query                       inventSettlementQuery;
    QueryBuildRange             inventSettlementRange;
    Map                         costAmountMap;
    boolean                     hideStorno;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    private void calc(Query _query)
    {
        QueryRun queryRun = new QueryRun(_query);

        while (queryRun.next())
        {
            InventTable inventTable = queryRun.get(tableNum(InventTable));
            InventTrans inventTrans = queryRun.get(tableNum(InventTrans));

            if (this.skipTrans(inventTrans, _query))
            {
                continue;
            }

            Amount amountTrans = this.costValueDate(inventTrans);
            Qty qtyTrans = inventTrans.Qty;

            if (inventTrans.Storno_RU)
            {
                if (qtyTrans >= 0)
                {
                    outGoingStorno += amountTrans;
                    outQtyStorno   += qtyTrans;
                }
                else
                {
                    inComingStorno += amountTrans;
                    inQtyStorno    += qtyTrans;
                }
            }
            else
            {
                if (qtyTrans < 0)
                {
                    outGoingDirect += amountTrans;
                    outQtyDirect   += qtyTrans;
                }
                else
                {
                    inComingDirect += amountTrans;
                    inQtyDirect    += qtyTrans;
                }
            }

            if (hideStorno)
            {
                outGoingDirect += outGoingStorno;
                inComingDirect += inComingStorno;
                outQtyDirect   += outQtyStorno;
                inQtyDirect    += inQtyStorno;

                outGoingStorno = 0;
                inComingStorno = 0;
                outQtyStorno   = 0;
                inQtyStorno    = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSum</Name>
				<Source><![CDATA[
    private void clearSum()
    {
        outGoingDirect = 0;
        outQtyDirect   = 0;
        inComingDirect = 0;
        inQtyDirect    = 0;
        outGoingStorno = 0;
        outQtyStorno   = 0;
        inComingStorno = 0;
        inQtyStorno    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate CostAmountPosted value.
    /// </summary>
    /// <param name="_inventTrans">
    /// Passes <c>InventTtrans</c> table object.
    /// </param>
    /// <returns>
    ///  The value of CostAmount.
    /// </returns>
    private CostAmountPosted costValueDate(InventTrans _inventTrans)
    {
        CostAmountPosted ret;

        if (costAmountMap.exists(_inventTrans.RecId))
        {
            ret = costAmountMap.lookup(_inventTrans.RecId);
        }
        else
        {
            inventSettlementRange.value(SysQuery::value(_inventTrans.RecId));

            QueryRun settlementQueryRun = new QueryRun(inventSettlementQuery);
            settlementQueryRun.next();

            InventSettlement settlement = settlementQueryRun.get(tableNum(InventSettlement));

            ret = _inventTrans.CostAmountPosted + settlement.CostAmountAdjustment;
            costAmountMap.insert(_inventTrans.RecId, ret);
        }
        return CurrencyExchangeHelper::amount(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConditions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get conditions from query
    /// </summary>
    /// <returns>
    /// The text conditions.
    /// </returns>
    private FreeText getConditions()
    {
        FreeText        retTxt;

        Query qr = this.parmQuery();

        int countDatasource = qr.dataSourceCount();

        while ( countDatasource >0)
        {
            int countRange = qr.dataSourceNo(countDatasource).rangeCount();

            while (countRange > 0)
            {
                QueryBuildRange qbr = qr.dataSourceNo(countDatasource).range(countRange);
                if (qbr.value())
                {
                    DictField dictField = new DictField(qbr.table(),qbr.field());
                    if (retTxt)
                        retTxt += ' ';
                    retTxt += dictField.label() + ': ' + qbr.value();
                }
                countRange--;
            }
            countDatasource--;
        }

        return retTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventIncomeOutlayTmp_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the <c>InventIncomeOutlayTmp_RU</c> temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>InventIncomeOutlayTmp_RU</c>
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventIncomeOutlayTmp_RU))
    ]
    public InventIncomeOutlayTmp_RU getInventIncomeOutlayTmp_RU()
    {
        return inventIncomeOutlayTmp_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSettlementQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init Query for InventSettlement
    /// </summary>
    private void initInventSettlementQuery()
    {
        QueryBuildDataSource    transDS  = this.parmQuery().dataSourceTable(tableNum(InventTrans));
        int                     rangeIdx = 1;

        inventSettlementQuery = new Query();

        QueryBuildDataSource ds = inventSettlementQuery.addDataSource(tableNum(InventSettlement));
        ds.firstOnly(true);

        while (transDS.findRange(fieldNum(InventTrans, DatePhysical), rangeIdx))
        {
            ds.addRange(fieldNum(InventSettlement, TransDate)).value(transDS.findRange(fieldNum(InventTrans, DatePhysical), rangeIdx).value());

            rangeIdx ++;
        }

        ds.addRange(fieldNum(InventSettlement, Cancelled)).value(SysQuery::value(NoYes::No));
        ds.addRange(fieldNum(InventSettlement, InventTransCurrency_RU)).value(SysQuery::value(InventTransCurrency_RU::PrimaryCur));

        inventSettlementRange = ds.addRange(fieldNum(InventSettlement, TransRecId));

        ds.addSelectionField(fieldNum(InventSettlement, CostAmountAdjustment), SelectionField::Sum);

        costAmountMap = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventIncomeOutlayTmp_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts all the values into the <c>inventIncomeOutlayTmp_RU</c> temporary table.
    /// </summary>
    /// <param name="_inventTable">
    /// Passes <c>InventTable</c> table object.
    /// </param>
    private void insertInventIncomeOutlayTmp_RU(InventTable _inventTable)
    {
        inventIncomeOutlayTmp_RU.ItemName       = InventTable::find(_inventTable.ItemId).itemName();
        inventIncomeOutlayTmp_RU.ItemId         = _inventTable.ItemId;
        inventIncomeOutlayTmp_RU.InComingAmount = CurrencyExchangeHelper::amount(inComingDirect);
        inventIncomeOutlayTmp_RU.OutGoingAmount = - CurrencyExchangeHelper::amount(outGoingDirect);
        inventIncomeOutlayTmp_RU.InQty          = inQtyDirect;
        inventIncomeOutlayTmp_RU.OutQty         = - outQtyDirect;
        inventIncomeOutlayTmp_RU.insert();

        if (outGoingStorno || outQtyStorno || inComingStorno || inQtyStorno)
        {
            inventIncomeOutlayTmp_RU.Storno_RU      = NoYes::Yes;
            inventIncomeOutlayTmp_RU.InComingAmount = CurrencyExchangeHelper::amount(inComingStorno);
            inventIncomeOutlayTmp_RU.OutGoingAmount = -CurrencyExchangeHelper::amount(outGoingStorno);
            inventIncomeOutlayTmp_RU.InQty          = inQtyStorno;
            inventIncomeOutlayTmp_RU.OutQty         = -outQtyStorno;
            inventIncomeOutlayTmp_RU.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        InventIncomeOutlayContract_RU   contract = this.parmDataContract() as InventIncomeOutlayContract_RU;

        Query query = new Query(this.parmQuery());
        this.initInventSettlementQuery();
        hideStorno = contract.parmHideStorno();

        Query queryGroup = new Query(this.parmQuery());
        queryGroup.dataSourceTable(tableNum(InventTable)).addSortField(fieldNum(InventTable, ItemId));
        queryGroup.dataSourceTable(tableNum(InventTable)).addGroupByField(fieldNum(InventTable, ItemId));

        QueryRun queryRunGroup = new QueryRun(queryGroup);

        while (queryRunGroup.next())
        {
            InventTable inventTable = queryRunGroup.get(tableNum(InventTable));
            QueryBuildRange qbr = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(InventTable)), fieldNum(InventTable, ItemId));
            qbr.value(inventTable.ItemId);
            this.calc(query);
            this.insertInventIncomeOutlayTmp_RU(inventTable);
            this.clearSum();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether transaction should be skipped from the report. If transaction is transfer,
    /// or WMS transfer it should be shown only if it changes at least one dimension selected in the dialog.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> inventory transaction.
    /// </param>
    /// <param name="_query">
    /// The report query.
    /// </param>
    /// <returns>
    /// True, if transaction should be skipped; otherwise false.
    /// </returns>
    private boolean skipTrans(InventTrans _inventTrans, Query _query)
    {
        InventTransOriginTransfer   inventTransOriginTransfer;

        QueryBuildRange             checkQBR;
        int                         i;

        InventTransOrigin           inventTransOrigin = InventTransOrigin::find(_inventTrans.InventTransOrigin);

        if (inventTransOrigin.ReferenceCategory != InventTransType::InventTransfer &&
            inventTransOrigin.ReferenceCategory != InventTransType::WMSTransport &&
            inventTransOrigin.ReferenceCategory != InventTransType::SummedUp)
        {
            return false;
        }

        if (inventTransOrigin.ReferenceCategory == InventTransType::SummedUp)
        {
            return true;
        }

        select firstonly inventTransOriginTransfer
            where(inventTransOriginTransfer.ReceiptInventTransOrigin == inventTransOrigin.RecId ||
                  inventTransOriginTransfer.IssueInventTransOrigin   == inventTransOrigin.RecId);

        InventTransOriginId inventTransOriginIdCheck = inventTransOriginTransfer.ReceiptInventTransOrigin == inventTransOrigin.RecId ?
            inventTransOriginTransfer.IssueInventTransOrigin :
            inventTransOriginTransfer.ReceiptInventTransOrigin;

        Query checkQuery = new Query();
        QueryBuildDataSource checkQBDS = checkQuery.addDataSource(tableNum(InventTrans));
        checkQBDS.addRange(fieldNum(InventTrans, RecId)).value(SysQuery::valueNot(_inventTrans.RecId));
        checkQBDS.addRange(fieldNum(InventTrans, InventTransOrigin)).value(queryValue(inventTransOriginIdCheck));
        checkQBDS.addRange(fieldNum(InventTrans, StatusIssue)).value(SysQuery::range(queryValue(StatusIssue::None), queryValue(StatusIssue::Deducted)));
        checkQBDS.addRange(fieldNum(InventTrans, StatusReceipt)).value(SysQuery::range(queryValue(StatusReceipt::None), queryValue(StatusReceipt::Received)));

        checkQBDS = checkQBDS.addDataSource(tableNum(InventDim));
        checkQBDS.relations(true);
        checkQBDS.joinMode(JoinMode::NoExistsJoin);

        QueryBuildDataSource inventDimQBDS = _query.dataSourceTable(tableNum(InventDim));

        for (i = 1; i <= inventDimQBDS.rangeCount(); i++)
        {
            QueryBuildRange inventDimQBR = inventDimQBDS.range(i);
            checkQBR = checkQBDS.addRange(inventDimQBR.field());
            checkQBR.value(inventDimQBR.value());
        }

        for (i = 1; i <= _query.queryFilterCount(); i++)
        {
            QueryFilter inventDimQF = _query.queryFilter(i);
            if (inventDimQF.dataSource().table() == tableNum(InventDim))
            {
                checkQBR = checkQBDS.addRange(fieldName2id(tableNum(InventDim), inventDimQF.field()));
                checkQBR.value(inventDimQF.value());
            }
        }

        QueryRun checkQueryRun = new QueryRun(checkQuery);

        if (checkQueryRun.next())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
