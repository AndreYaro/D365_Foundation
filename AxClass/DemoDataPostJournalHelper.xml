<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostJournalHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Consolidates shared journal functionality for the demo data post feature.
/// </summary>
public class DemoDataPostJournalHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a date range for a given set of dates.
    /// </summary>
    /// <param name = "_fromDate">The beginning range date.</param>
    /// <param name = "_toDate">The final range date.</param>
    /// <returns>The date range query string.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str buildDateRange(date _fromDate, date _toDate)
    {
        str dateRange;
        if (_fromDate != dateNull() && _toDate != dateNull())
        {
            dateRange = SysQueryRangeUtil::dateRange(_fromDate, _toDate);
        }
        else if (_fromDate != dateNull())
        {
            dateRange = '>= ' + SysQueryRangeUtil::value(_fromDate);
        }
        else if (_toDate != dateNull())
        {
            dateRange = '<= ' + SysQueryRangeUtil::value(_toDate);
        }

        return dateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildIdentifierRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the identifier string range for a given field and identifiers.
    /// </summary>
    /// <param name = "_fieldString">The field to apply range over.</param>
    /// <param name = "_startId">The beginning range identifier.</param>
    /// <param name = "_endId">The final range identifier.</param>
    /// <returns>The query string for the identifier range.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str buildIdentifierRange(str _fieldString, str _startId, str _endId)
    {
        str numRange = SysQueryRangeUtil::valueUnlimited();

        str fromRange;
        if (_startId)
        {
            fromRange = strFmt('(%1 >= "%2")', _fieldString, queryValue(_startId));
        }

        str toRange;
        if (_endId)
        {
            toRange = strFmt('(%1 <= "%2")', _fieldString, queryValue(_endId));
        }

        if (fromRange && toRange)
        {
            numRange = strFmt('(%1 && %2)', fromRange, toRange);
        }
        else if (fromRange)
        {
            numRange = strFmt('(%1)', fromRange);
        }
        else if (toRange)
        {
            numRange = strFmt('(%1)', toRange);
        }

        return numRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the set of journal documents to attempt to post.
    /// </summary>
    /// <param name = "_journalType">The journal type to process.</param>
    /// <param name = "_demoDataPostRunDocument">The parameter buffer.</param>
    /// <returns>A set of journal documents to attempt to post.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RecordSortedList findLedgerJournals(
        LedgerJournalType _journalType,
        DemoDataPostRunDocument _demoDataPostRunDocument)
    {
        LedgerJournalTable ledgerJournalTable;
        RecordSortedList ledgerJournalTableList = new RecordSortedList(tableNum(LedgerJournalTable));
        ledgerJournalTableList.sortOrder(fieldNum(LedgerJournalTable, JournalNum));

        Query query = new Query();
        QueryBuildDataSource journalHeaderDataSource = query.addDataSource(tableNum(LedgerJournalTable));

        //Static ranges
        journalHeaderDataSource.addRange(fieldNum(LedgerJournalTable, JournalType)).value(queryValue(_journalType));
        journalHeaderDataSource.addRange(fieldNum(LedgerJournalTable, Posted)).value(queryValue(NoYes::No));
        journalHeaderDataSource.addRange(fieldNum(LedgerJournalTable, WorkflowApprovalStatus)).value(queryValue(LedgerJournalWFApprovalStatus::None));
        journalHeaderDataSource.addRange(fieldNum(LedgerJournalTable, SystemBlocked)).value(queryValue(NoYes::No));

        // Dynamic ranges
        str dateRange = DemoDataPostJournalHelper::buildDateRange(_demoDataPostRunDocument.FromDocumentDate, _demoDataPostRunDocument.ToDocumentDate);
        str journalNumRange = DemoDataPostJournalHelper::buildIdentifierRange(
            fieldStr(LedgerJournalTable, JournalNum),
            _demoDataPostRunDocument.FromDocumentId,
            _demoDataPostRunDocument.ToDocumentId);

        if (journalNumRange)
        {
            journalHeaderDataSource.addRange(fieldNum(LedgerJournalTable, JournalNum)).value(journalNumRange);
        }

        if (dateRange)
        {
            QueryBuildDataSource journalLineDataSource = journalHeaderDataSource.addDataSource(tableNum(LedgerJournalTrans));
            journalLineDataSource.joinMode(JoinMode::ExistsJoin);
            journalLineDataSource.addLink(
                fieldNum(LedgerJournalTable, JournalNum),
                fieldNum(LedgerJournalTrans, JournalNum),
                journalHeaderDataSource.name());

            journalLineDataSource.addRange(fieldNum(LedgerJournalTrans, TransDate)).value(dateRange);
        }

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            ledgerJournalTable = queryRun.get(tableNum(LedgerJournalTable));
            ledgerJournalTableList.ins(ledgerJournalTable);
        }

        return ledgerJournalTableList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentJournalMultipost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post a set of journals.
    /// </summary>
    /// <param name = "_caller">The class calling this functionality.</param>
    /// <param name = "_journalList">The list of journals.</param>
    /// <param name = "_runDocument">The run document for posting.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void paymentJournalMultipost(Object _caller, RecordSortedList _journalList, DemoDataPostRunDocument _runDocument)
    {
        DemoDataPostJournalHelper::initializeDocumentStatus(
            _runDocument.RunId,
            _runDocument.RecId,
            tableNum(LedgerJournalTable),
            _journalList);

        LedgerJournalMultiPost::multiSelectPost(_caller, _journalList, NoYes::No);

        DemoDataPostJournalHelper::finalizeDocumentStatus(
            _runDocument.RunId,
            _runDocument.RecId,
            tableNum(LedgerJournalTable),
            _journalList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the document status records for the set of journals to attempt posting.
    /// </summary>
    /// <param name = "_runId">The run context.</param>
    /// <param name = "_runDocumentRecId">The run document for posting.</param>
    /// <param name = "_documentTableId">The table id for the document table.</param>
    /// <param name = "_documents">The set of documents for processing.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void initializeDocumentStatus(
        DemoDataPostRunId _runId,
        RefRecId _runDocumentRecId,
        TableId _documentTableId,
        RecordSortedList _documents)
    {
        LedgerJournalTable ledgerJournalTable;
        boolean journalFound = _documents.first(ledgerJournalTable);

        while (journalFound)
        {
            DemoDataPostRunDocumentStatus::addDocumentForProcessing(
                _runId,
                _runDocumentRecId,
                ledgerJournalTable.RecId,
                _documentTableId,
                ledgerJournalTable.JournalNum);

            journalFound = _documents.next(ledgerJournalTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign final status to the document status for processed posting records.
    /// </summary>
    /// <param name = "_runId">The run context.</param>
    /// <param name = "_runDocumentRecId">The run document for posting.</param>
    /// <param name = "_documentTableId">The table id for the document table.</param>
    /// <param name = "_documents">The set of documents for processing.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void finalizeDocumentStatus(
        DemoDataPostRunId _runId,
        RefRecId _runDocumentRecId,
        TableId _documentTableId,
        RecordSortedList _documents)
    {
        DemoDataPostRunDocumentStatus runDocumentStatus;
        LedgerJournalTable ledgerJournalTable;

        ttsbegin;

        boolean journalFound = _documents.first(ledgerJournalTable);

        while (journalFound)
        {
            runDocumentStatus = DemoDataPostRunDocumentStatus::find(
                _runId,
                _runDocumentRecId,
                ledgerJournalTable.RecId,
                _documentTableId,
                true);

            if (runDocumentStatus)
            {
                ledgerJournalTable.reread();

                if (ledgerJournalTable.Posted)
                {
                    runDocumentStatus.DocumentStatus = DemoDataPostDocumentStatus::Success;
                }
                else
                {
                    runDocumentStatus.DocumentStatus = DemoDataPostDocumentStatus::Failed;
                }

                runDocumentStatus.CompletionTime = DateTimeUtil::getSystemDateTime();
                runDocumentStatus.update();
            }

            journalFound = _documents.next(ledgerJournalTable);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>