<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherContinuityCheck_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerVoucherContinuityCheck_CN</c> class is used to provide user interface and runbase behavior for the <c>LedgerVoucherContinuityFix_CN</c> class
/// </summary>
class LedgerVoucherContinuityCheck_CN extends RunBaseBatch implements BatchRetryable
{
    TransDate                   transDate;
    NoYes                       printRenumberLog;
    FiscalCalendarPeriod        fiscalCalendarPeriod;

    DialogField                 dlgTransDate;
    DialogField                 dlgPrintRenumberLog;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        transDate,
        printRenumberLog
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        #resAppl
        DialogRunbase       dialog = super();
        DialogText          dialogText;
        DialogGroup         dialogGroup;
        str                 warning;

        dlgTransDate = dialog.addFieldValue(extendedTypeStr(PeriodStart), transDate);
        dlgPrintRenumberLog = dialog.addFieldValue(extendedTypeStr(NoYesId), printRenumberLog, "@GLS63830");

        warning = "@GLS63818";

        dialogGroup = dialog.addGroup();
        dialogGroup.frameType(FormFrameType::Auto);
        dialogGroup.columns(2);

        FormBuildGroupControl warningGroup = dialogGroup.control();
        FormBuildWindowControl warningImage = warningGroup.addControl(FormControlType::Image, 'WarningImage');
        warningImage.normalImage('Warning');

        dialogText = dialog.addText(warning, 360);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets information from dialog.
    /// </summary>
    /// <returns>
    /// Returns the result of the operation.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        transDate           = dlgTransDate.value();
        printRenumberLog    = dlgPrintRenumberLog.value();

        fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(CompanyInfoHelper::fiscalCalendarRecId(), transDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion,#CurrentList];
        packed = this.appendVariableToPack(packed, varStr(fiscalCalendarPeriod), fiscalCalendarPeriod);
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00009, funcName());

        LedgerVoucherContinuityFix_CN   ledgerVoucherContinuityFix;

        if (! transDate)
        {
            transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(CompanyInfoHelper::fiscalCalendarRecId(), transDate);
        }

        if (! this.validateParameters())
        {
            throw error("@SYS18447");
        }

        ledgerVoucherContinuityFix = new LedgerVoucherContinuityFix_CN(fiscalCalendarPeriod, printRenumberLog);

        ledgerVoucherContinuityFix.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                fiscalCalendarPeriod = this.extractPackedVariable(packedClass, varStr(fiscalCalendarPeriod));
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOpeningVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that there are opening voucher in the specified period; if yes, an error message is displayed.
    /// </summary>
    /// <returns>
    /// true if there are opening voucher exist; otherwise, false.
    /// </returns>
    protected boolean validateOpeningVoucher()
    {
        LedgerJournalTable      ledgerJournalTable;
        LedgerJournalTrans      ledgerJournalTrans;
        boolean                 ret = true;

        select firstonly JournalType, JournalNum from ledgerJournalTable
            exists join ledgerJournalTrans
            where ledgerJournalTable.Posted     == NoYes::No
               && ledgerJournalTrans.TransDate  >= fiscalCalendarPeriod.StartDate
               && ledgerJournalTrans.TransDate  <= fiscalCalendarPeriod.EndDate
               && ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
               && LedgerJournalTable.JournalType != LedgerJournalType::Periodic;

        if (ledgerJournalTable.RecId)
        {
            ret = checkFailed(strFmt("@GLS63820", ledgerJournalTable.JournalType, ledgerJournalTable.JournalNum, fiscalCalendarPeriod.EndDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates parameters.
    /// </summary>
    /// <returns>
    /// If 'True', parameters are ready.
    /// </returns>
    public boolean validateParameters()
    {
        boolean ret = true;

        if (ret)
        {
            ret = this.validatePeriod();
        }

        if (ret)
        {
            ret = this.validateOpeningVoucher();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified period is opening; if not, an error message is displayed.
    /// </summary>
    /// <returns>
    /// true if the specified period is opening; otherwise, false.
    /// </returns>
    protected boolean validatePeriod()
    {
        boolean ret = true;

        if (fiscalCalendarPeriod.currentLedgerPeriodStatus() != FiscalPeriodStatus::OnHold)
        {
            ret = checkFailed(strFmt("@GLS63821", fiscalCalendarPeriod.StartDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS63822";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        LedgerVoucherContinuityCheck_CN    ledgerVoucherContinuityCheck;

        if (!LedgerParameters::isChineseVoucher_CN())
        {
            throw error("@GLS63823");
        }

        ledgerVoucherContinuityCheck = new LedgerVoucherContinuityCheck_CN();

        if (ledgerVoucherContinuityCheck.prompt())
        {
            ledgerVoucherContinuityCheck.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        prePostArgs.setReturnValue(_pack);
        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(LedgerVoucherContinuityCheck_CN) + '.' + _variableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype value;
        [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>