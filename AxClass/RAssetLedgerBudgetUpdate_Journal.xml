<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetLedgerBudgetUpdate_Journal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>rAssetLedgerBudgetUpdate_Journal</c> transfers the asset budget transactions to ledger budget
///  from the budget journal.
/// </summary>
class rAssetLedgerBudgetUpdate_Journal extends RAssetLedgerBudgetUpdate
{
    LedgerJournalTable  ledgerJournalTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current transaction record is valid to transfer to budget.
    /// </summary>
    /// <returns>
    /// true if all checks are OK; otherwise, false.
    /// </returns>
    protected boolean check()
    {
        RAssetTable         assetTable;
        RAssetStandards     assetStandards;
        RAssetSumCalc       assetSumTrans;
        CurrencyCode        currencyCode;
        RAssetAmount        assetAmount;
        RAssetBudgetTrans   assetBudgetTrans;
        RAssetParameters    assetParameters = RAssetParameters::find();
        LedgerJournalTrans  ledgerJournalTrans;
        LedgerJournalTrans_RAsset  ledgerJournalTrans_RAsset;
        ;

        super();

        //BP deviation documented
        while select ledgerJournalTrans_RAsset
            order by BudgetModel, AssetId, StandardId
        join ledgerJournalTrans
            order by TransDate
            where ledgerJournalTrans.RecId      == ledgerJournalTrans_RAsset.RefRecId &&
                  ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
        {
            assetTable     = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId);
            assetStandards = RAssetStandards::find(assetTable.AccountNum, ledgerJournalTrans_RAsset.StandardId);

            if (assetTable.AcquisitionDate > ledgerJournalTrans.TransDate)
                return checkFailed(strFmt("@GLS116467", assetTable.AccountNum));

            if (! assetStandards.Depreciation)
                return checkFailed(strFmt("@GLS116208", assetTable.AccountNum));

            assetSumTrans = RAssetSumCalc_Budget::newAssetPeriod(assetTable.AccountNum,
                                                                 ledgerJournalTrans_RAsset.StandardId,
                                                                 ledgerJournalTrans_RAsset.BudgetModel);

            if (assetStandards.DisposalDate)
                return checkFailed(strFmt("@GLS116565", assetTable.AccountNum));

            if (ledgerJournalTrans_RAsset.TransType == RAssetTransType::Depreciation
				|| ledgerJournalTrans_RAsset.TransType == RAssetTransType::DepreciationAdj
				|| ledgerJournalTrans_RAsset.TransType == RAssetTransType::Revaluation
				|| ledgerJournalTrans_RAsset.TransType == RAssetTransType::Acquisition
				|| ledgerJournalTrans_RAsset.TransType == RAssetTransType::AcquisitionAdj)
            {
                currencyCode = assetStandards.CurrencyCode;

                if (ledgerJournalTrans.CurrencyCode == currencyCode)
                {
                    assetAmount = ledgerJournalTrans.amount();
                }
                else
                {
                    assetAmount = CurrencyExchangeHelper::curAmount2CurAmount(ledgerJournalTrans.amount(), ledgerJournalTrans.CurrencyCode, currencyCode, ledgerJournalTrans.TransDate);
                }

                if (assetSumTrans.netBookValue() + assetAmount < 0 )
                    return checkFailed(strFmt("@GLS116209", assetTable.AccountNum, ledgerJournalTrans_RAsset.StandardId));
            }

            assetBudgetTrans = RAssetBudgetTrans::findRange(assetStandards.AssetId,
                                                            RAssetTransType::Acquisition,
                                                            assetStandards.AssetStandardId,
                                                            ledgerJournalTrans_RAsset.BudgetModel);

            if (! assetBudgetTrans)
            {
                if (ledgerJournalTrans_RAsset.TransType != RAssetTransType::Acquisition)
                    return checkFailed(strFmt("@GLS116210", assetTable.AccountNum));
            }
            else
            {
                if (! assetParameters.MultiAcq && ledgerJournalTrans_RAsset.TransType == RAssetTransType::Acquisition)
                    return checkFailed(strFmt("@GLS116211", assetTable.AccountNum));
            }

            if (! ledgerJournalTrans.correct()                                        &&
                ledgerJournalTrans_RAsset.TransType != RAssetTransType::WriteDownAdj &&
                ledgerJournalTrans_RAsset.TransType != RAssetTransType::WriteUpAdj   &&
                ledgerJournalTrans_RAsset.TransType != RAssetTransType::Other        &&
                ledgerJournalTrans.TransDate         < dateStartMth(assetStandards.lastDepDate(ledgerJournalTrans_RAsset.BudgetModel)))
                return checkFailed(strFmt("@GLS116507", assetTable.AccountNum, assetStandards.AssetStandardId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@SYS71111");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a buffer of <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <param name="_common">
    /// A buffer of <c>LedgerJournalTrans</c> table record.
    /// </param>
    protected void initInstance(Common _common)
    {
        LedgerJournalTrans  ledgerJournalTrans = _common as LedgerJournalTrans;
        ;

        ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetBudgetTrans          assetBudgetTrans;
        LedgerJournalTrans         ledgerJournalTrans;
        LedgerJournalTrans_RAsset  ledgerJournalTrans_RAsset;
        ;

        if (! this.check())
            throw error("@SYS79625");

        this.initForBudgetTransaction();

        ttsbegin;

        while select forupdate ledgerJournalTrans_RAsset
            order by BudgetModel, AssetId, StandardId
        join forupdate ledgerJournalTrans
            order by TransDate
            where ledgerJournalTrans.RecId      == ledgerJournalTrans_RAsset.RefRecId &&
                  ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
        {
            assetBudgetTrans.initFromLedgerJournalTrans(ledgerJournalTrans);
            assetBudgetTrans.AssetBudgetPostingStatus = RAssetBudgetPostingStatus::PostedToAssets;
            assetBudgetTrans.insert();

            if (this.parmUpdateLedger())
            {
                assetBudgetTrans.AssetBudgetPostingStatus = RAssetBudgetPostingStatus::PostedToBudgets;
                assetBudgetTrans.update();

                this.createBudgetTransaction(assetBudgetTrans);
            }

            ledgerJournalTrans_RAsset.BudgetPostingStatus = assetBudgetTrans.AssetBudgetPostingStatus;
            ledgerJournalTrans_RAsset.update();
        }
        if (budgetTransactionPost != null)
        {
            budgetTransactionPost.runOperation();
        }

        ledgerJournalTable.selectForUpdate(true);
        ledgerJournalTable.Posted           = NoYes::Yes;
        ledgerJournalTable.PostedDateTime   = DateTimeUtil::getSystemDateTime();
        ledgerJournalTable.update();

        ttscommit;

        info("@GLS116466");


        if (budgetTransactionManager != null)
        {
            budgetTransactionManager.showWarningsDimAttsNotBudgetEnabled("@SYS300283");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>