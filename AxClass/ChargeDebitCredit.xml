<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChargeDebitCredit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ChargeDebitCredit</c> class switches debit and credit on the charge if the charge is a
/// discount.
/// </summary>
class ChargeDebitCredit
{
    MarkupTable                     markupTable;
    MarkupType                      debitMarkupType;
    MarkupType                      creditMarkupType;
    LedgerDimensionDefaultAccount   debitLedgerDimension;
    LedgerDimensionDefaultAccount   creditLedgerDimension;
    boolean                         discount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the sign of the amount if the charge is a discount.
    /// </summary>
    /// <param name="_amount">
    /// The amount.
    /// </param>
    /// <returns>
    /// The amount with the sign change; otherwise, the amount.
    /// </returns>
    public Amount amount(Amount _amount)
    {
        if (discount)
        {
            return -_amount;
        }
        else
        {
            return _amount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
        private void initialize()
    {
        discount = (markupTable.ModuleType ==
                                    MarkupModuleType::Vend &&
                    markupTable.CustType == MarkupType::CustVend &&
                    markupTable.VendType == MarkupType::LedgerAccount);

        if (discount)
        {
            debitMarkupType         = markupTable.VendType;
            debitLedgerDimension    = markupTable.VendorLedgerDimension;
            creditMarkupType        = markupTable.CustType;
            creditLedgerDimension   = markupTable.CustomerLedgerDimension;
        }
        else
        {
            debitMarkupType         = markupTable.CustType;
            debitLedgerDimension    = markupTable.CustomerLedgerDimension;
            creditMarkupType        = markupTable.VendType;
            creditLedgerDimension   = markupTable.VendorLedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditLedgerDimension</Name>
				<Source><![CDATA[
        public LedgerDimensionDefaultAccount parmCreditLedgerDimension()
    {
        return creditLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditMarkupType</Name>
				<Source><![CDATA[
        public MarkupType parmCreditMarkupType()
    {
        return creditMarkupType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebitLedgerDimension</Name>
				<Source><![CDATA[
        public LedgerDimensionDefaultAccount parmDebitLedgerDimension()
    {
        return debitLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebitMarkupType</Name>
				<Source><![CDATA[
        public MarkupType parmDebitMarkupType()
    {
        return debitMarkupType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupTable</Name>
				<Source><![CDATA[
        protected MarkupTable parmMarkupTable(MarkupTable _markupTable = markupTable)
    {
        markupTable = _markupTable;

        return markupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ChargeDebitCredit construct(markupTable _markupTable)
    {
        ChargeDebitCredit      ChargeDebitCredit;

        ChargeDebitCredit = new ChargeDebitCredit();
        ChargeDebitCredit.parmMarkupTable(_markupTable);
        ChargeDebitCredit.initialize();

        return ChargeDebitCredit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>