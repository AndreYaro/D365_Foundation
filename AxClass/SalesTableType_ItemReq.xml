<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableType_ItemReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesLineTypeFactoryAttribute(SalesType::ItemReq, NoYes::No)]
class SalesTableType_ItemReq extends SalesTableType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the sales order can be modified.
    /// </summary>
    /// <param name = "_useWarning">
    /// A boolean value that indicates whether the user must be notified about the reasons why the changes are not allowed; optional.
    /// </param>
    /// <param name = "_interCompanyCheck">
    /// A boolean value that indicates whether the intercompany check must be performed; optional.
    /// </param>
    /// <param name = "_treatInvoicedOrderUpdateWarningAsError">
    /// A boolean value that indicates whether the "Warning" access level to invoiced orders must be treated as "Locked".
    /// </param>
    /// <returns>true, if the modification is allowed; otherwise, false.</returns>
    public boolean checkUpdate(
        boolean _useWarning = true,
        boolean _interCompanyCheck = true,
        boolean _treatInvoicedOrderUpdateWarningAsError = false)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDeliveryDateControl</Name>
				<Source><![CDATA[
    boolean doDeliveryDateControl()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditCheckEligible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the sales order is eligible for a credit limit check.
    /// </summary>
    /// <returns>
    ///    true if the sales order is eligible for a credit limit check; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Unconditionally returns false indicating that this kind of sales orders are not eligible for the
    ///    credit limit check.This is an override of the base class method.
    /// </remarks>
    boolean isCreditCheckEligible()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayConfirmationBeUpdated</Name>
				<Source><![CDATA[
    boolean mayConfirmationBeUpdated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayInvoiceBeUpdated</Name>
				<Source><![CDATA[
    boolean mayInvoiceBeUpdated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPackingSlipBeUpdated</Name>
				<Source><![CDATA[
    boolean mayPackingSlipBeUpdated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeRegistered</Name>
				<Source><![CDATA[
    boolean mayPickingListBeRegistered()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeUpdated</Name>
				<Source><![CDATA[
    boolean mayPickingListBeUpdated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeCovPlanned</Name>
				<Source><![CDATA[
    boolean  mustBeCovPlanned()
    {
        LedgerCov::deleteTransact(salesTable.TableId, salesTable.RecId);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a field in the <c>SalesTable</c> table.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field to validate.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the field; optional.
    /// </param>
    /// <returns>
    /// true if the value in the field is valid; otherwise, false.
    /// </returns>
    public boolean  validateField(fieldId  _fieldId
        , TableId _tableId = tableNum(salesTable)
        )
    {
        boolean  ok = true;

        // <GEERU>
        if (_tableId == tableNum(salesTable))
        {
        // </GEERU>
            switch (_fieldId)
            {
                case(fieldNum(SalesTable, SalesType)):
                    ok = this.blockManualTypeChange();
                    break;
            }
        // <GEERU>
        }
        // </GEERU>

        if (ok)
        {
            ok = super(_fieldId
                // <GEERU>
                , _tableId
                // </GEERU>
                );
        }

        return ok;
    }
    
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>