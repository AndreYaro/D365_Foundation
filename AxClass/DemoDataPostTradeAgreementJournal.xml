<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostTradeAgreementJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes and posts trade agreement journals based on run document parameters.
/// </summary>
[DemoDataPostBaseFactoryAttribute(DemoDataPostDocument::TradeAgreement)]
public class DemoDataPostTradeAgreementJournal extends DemoDataPostBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findTradeAgreementJournals</Name>
				<Source><![CDATA[
    private Set findTradeAgreementJournals()
    {
        Set tradeAgreementJournals = new Set(Types::String);
        PriceDiscAdmTable agreementTable;

        if (demoDataPostRunDocument.FromDocumentId && demoDataPostRunDocument.ToDocumentId)
        {
            while select agreementTable
                where agreementTable.Posted == NoYes::No
                && agreementTable.LockedForDeletion == NoYes::No
                && agreementTable.JournalNum >= demoDataPostRunDocument.FromDocumentId
                && agreementTable.JournalNum <= demoDataPostRunDocument.ToDocumentId
            {
                tradeAgreementJournals.add(agreementTable.JournalNum);
            }
        }
        else if (demoDataPostRunDocument.FromDocumentId && !demoDataPostRunDocument.ToDocumentId)
        {
            while select agreementTable
                where agreementTable.Posted == NoYes::No
                && agreementTable.LockedForDeletion == NoYes::No
                && agreementTable.JournalNum >= demoDataPostRunDocument.FromDocumentId
            {
                tradeAgreementJournals.add(agreementTable.JournalNum);
            }
        }
        else if (!demoDataPostRunDocument.FromDocumentId && demoDataPostRunDocument.ToDocumentId)
        {
            while select agreementTable
                where agreementTable.Posted == NoYes::No
                && agreementTable.LockedForDeletion == NoYes::No
                && agreementTable.JournalNum <= demoDataPostRunDocument.ToDocumentId
            {
                tradeAgreementJournals.add(agreementTable.JournalNum);
            }
        }
        else
        {
            while select agreementTable
                where agreementTable.Posted == NoYes::No
                && agreementTable.LockedForDeletion == NoYes::No
            {
                tradeAgreementJournals.add(agreementTable.JournalNum);
            }
        }

        return tradeAgreementJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    public DemoDataPostDocument getDocument()
    {
        return DemoDataPostDocument::TradeAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    private void post(Set _tradeAgreementJournals)
    {
        DemoDataPostDocumentStatus status;
        DemoDataPostRunDocumentStatus documentStatus;
        PriceDiscJournalNum tradeAgreementJournalNum;

        if (!_tradeAgreementJournals)
        {
            return;
        }

        SetEnumerator trageAgreementEnumerator = _tradeAgreementJournals.getEnumerator();

        while (trageAgreementEnumerator.moveNext())
        {
            tradeAgreementJournalNum = trageAgreementEnumerator.current();

            PriceDiscAdmTable agreementTable = PriceDiscAdmTable::find(tradeAgreementJournalNum);

            documentStatus = DemoDataPostRunDocumentStatus::addDocumentForProcessing(
                runId,
                demoDataPostRunDocument.RecId,
                agreementTable.RecId,
                agreementTable.TableId,
                agreementTable.JournalNum);

            status = DemoDataPostDocumentStatus::Failed;

            try
            {
                boolean isPosted = this.postSingleTradeAgreement(tradeAgreementJournalNum);

                if (isPosted)
                {
                    status = DemoDataPostDocumentStatus::Success;
                }
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0 && xSession::currentRetryCount() < DemoDataPostConstants::MaxRetryCount)
                {
                    retry;
                }
            }
            catch
            {
                Global::exceptionTextFallThrough();
            }
            finally
            {
                ttsbegin;

                documentStatus.DocumentStatus = status;
                documentStatus.CompletionTime = DateTimeUtil::getSystemDateTime();
                documentStatus.update();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSingleTradeAgreement</Name>
				<Source><![CDATA[
    private boolean postSingleTradeAgreement(PriceDiscJournalNum _journalNum)
    {
        const PriceDiscAdmCheckActionType checkActionType = PriceDiscAdmCheckActionType::ValidateAll;
        Set priceDiscAdmTransSetSelected = new Set(typeName2Type(extendedTypeStr(RecId)));

        PriceDiscAdmTrans priceDiscAdmTrans;
        while select priceDiscAdmTrans
            where priceDiscAdmTrans.JournalNum == _journalNum
        {
            priceDiscAdmTransSetSelected.add(priceDiscAdmTrans.RecId);
        }

        PriceDiscAdmCheckPostInputContract priceDiscAdmCheckPostInputContract = PriceDiscAdmCheckPostInputContract::construct();
        priceDiscAdmCheckPostInputContract.parmJournalNum(_journalNum);
        priceDiscAdmCheckPostInputContract.parmCheckActionType(checkActionType);
        priceDiscAdmCheckPostInputContract.parmPriceDiscAdmTransSetSelected(priceDiscAdmTransSetSelected);
        priceDiscAdmCheckPostInputContract.parmCheckOnly(false);
        priceDiscAdmCheckPostInputContract.parmAcceptWarnings(true);

        PriceDiscAdmCheckPostOutputContract priceDiscAdmCheckPostOutputContract = PriceDiscAdmCheckPostOutputContract::create(PriceDiscAdmCheckPost::runFromContract(priceDiscAdmCheckPostInputContract.pack()));

        return priceDiscAdmCheckPostOutputContract.parmIsPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process()
    {
        Set tradeAgreements = this.findTradeAgreementJournals();

        this.post(tradeAgreements);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>