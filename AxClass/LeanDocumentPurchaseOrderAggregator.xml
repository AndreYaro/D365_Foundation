<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentPurchaseOrderAggregator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentPurchaseOrderAggregator</c> class provides aggregation that is specific for
///    creating release purchase orders.
/// </summary>
public class LeanDocumentPurchaseOrderAggregator extends LeanDocumentAggregator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The other object.
    /// </param>
    /// <returns>
    ///    true if the two objects hold the same state; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentPurchaseOrderAggregator otherAggregator = otherObject as LeanDocumentPurchaseOrderAggregator;

        return  otherObject == this
                || (otherAggregator != null
                    && super(otherAggregator)) ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentHeaderKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the document header key.
    /// </summary>
    /// <returns>
    ///    A key that can be used for identifying the document header.
    /// </returns>
    protected anytype getDocumentHeaderKey()
    {
        return currentPlanActivityService.PurchAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a document line key.
    /// </summary>
    /// <returns>
    ///    A key that can be used for identifying the document line.
    /// </returns>
    protected anytype getDocumentLineKey()
    {
        PlanActivity currentActivity = currentProvider.getCurrentRecord(tablenum(PlanActivity));

        // we do the grouping by service, output service dimensions and the time bucket
        return LeanDocumentAggregationPurchKey::newStandard(
                                                    currentKanbanJob,
                                                    currentActivity,
                                                    currentPlanActivityService,
                                                    serviceOutputDimensions,
                                                    this.getTimePeriodKey(currentKanbanJob)).key();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the default factory method for this class.
    /// </summary>
    /// <param name="_aggregationMode">
    ///    The aggregation mode.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanDocumentPurchaseOrderAggregator</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentPurchaseOrderAggregator newStandard(LeanDocumentLinesAggregationMode _aggregationMode)
    {
        return new LeanDocumentPurchaseOrderAggregator(_aggregationMode, Types::Int64);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>