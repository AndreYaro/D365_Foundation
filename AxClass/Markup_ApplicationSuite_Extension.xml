<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Markup_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(Markup))]
public final class Markup_ApplicationSuite_Extension
{
    private AmountCur markupGWHTaxAmount;
    private TaxWithholdGroup taxWithholdGroup;
    private boolean doCalculateGWHTChargeCodes;
    private TaxWithholdCalculation taxWithholdCalculation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmOrderTaxWithholdGroup</Name>
				<Source><![CDATA[
    internal TaxWithholdGroup parmOrderTaxWithholdGroup(TaxWithholdGroup _taxWithholdGroup)
    {
        taxWithholdGroup = _taxWithholdGroup;

        return taxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoCalculateGWHTChargeCodes</Name>
				<Source><![CDATA[
    internal boolean parmDoCalculateGWHTChargeCodes(boolean _doCalculateGWHTChargeCodes)
    {
        doCalculateGWHTChargeCodes = _doCalculateGWHTChargeCodes;

        return doCalculateGWHTChargeCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupGWHTaxAmount</Name>
				<Source><![CDATA[
    internal AmountCur markupGWHTaxAmount()
    {
        return markupGWHTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc(
        Qty _qty,
        AmountCur _value,
        Common _source,
        DocumentStatus _documentStatus,
        AmountCur _interCompanyValue,
        InvoiceId _invoiceId,
        AmountCur _absoluteValue,
        ParmId _parmId,
        TradeLineRefId _parmMCRTableRefId,
        boolean _isInterCompanyMarkup)
    {
        markupGWHTaxAmount = 0;

        next calc(_qty,
            _value,
            _source,
            _documentStatus,
            _interCompanyValue,
            _invoiceId,
            _absoluteValue,
            _parmId,
            _parmMCRTableRefId,
            _isInterCompanyMarkup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMarkup</Name>
				<Source><![CDATA[
    protected void calculateMarkup(
        MarkupTrans _markupTrans,
        Qty _qty,
        AmountCur _value,
        Common _source,
        DocumentStatus _documentStatus,
        AmountCur _interCompanyValue,
        InvoiceId _invoiceId,
        AmountCur _absoluteValue,
        ParmId _parmId,
        TradeLineRefId _parmMCRTableRefId,
        boolean _isInterCompanyMarkup,
        boolean _searchInvoiceId)
    {
        next calculateMarkup(
            _markupTrans,
             _qty,
            _value,
            _source,
            _documentStatus,
            _interCompanyValue,
            _invoiceId,
            _absoluteValue,
            _parmId,
            _parmMCRTableRefId,
            _isInterCompanyMarkup,
            _searchInvoiceId);

        if (doCalculateGWHTChargeCodes || (isCalcWHTInInvoiceWithChargeEnabled && taxWithholdCalculation))
        {
            TaxWithholdGroup taxWithholdGroupCur;

            if (_markupTrans.TaxWithholdGroup)
            {
                taxWithholdGroupCur = _markupTrans.TaxWithholdGroup;
            }
            else
            {
                taxWithholdGroupCur = taxWithholdGroup;
            }

            if (isCalcWHTInInvoiceWithChargeEnabled && taxWithholdCalculation)
            {
                taxWithholdCalculation.fillCalcBasicDataForMarkupTrans(_markupTrans, -markupAmountPerLine, -markupTax);
            }
            else
            {
                markupGWHTaxAmount = TaxWithhold::calcWithholdingTax(
                    taxWithholdGroupCur,
                    _markupTrans.TaxWithholdItemGroup,
                    abs(markupCustVend),
                    _markupTrans.TransDate,
                    abs(markupTax));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    protected boolean checkDiscardLine(
        MarkupTrans _markupTrans,
        DocumentStatus _documentStatus,
        boolean _searchInvoice,
        InvoiceId _invoiceId)
    {
        boolean ret = next checkDiscardLine(
            _markupTrans,
            _documentStatus,
            _searchInvoice,
            _invoiceId);

        if (FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance()))
        {
            ret = ret || _markupTrans.discardTransactionForFree_IT();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySingleMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies one <c>MarkupTrans</c> table record associated with one table record to another.
    ///    Changes the <c>MarkupTrans</c> TaxGroup created for <c>SalesTable</c> from quotation with Intent letter feature enabeled and Usual exporter options.
    /// </summary>
    /// <param name="_reverseSign">
    ///    A <c>NoYes</c> enumeration value that determines whether the sign of the value will be reversed on
    ///    the copied records.
    /// </param>
    /// <param name="_oldMarkupTrans">
    ///    The source <c>MarkupTrans</c> table record.
    /// </param>
    /// <param name="_currencyCode">
    ///    The currency code to use during the conversion to the destination table record.
    /// </param>
    /// <param name="_bufferFrom">
    ///    The source table record.
    /// </param>
    /// <param name="_bufferTo">
    ///    The destination table record.
    /// </param>
    /// <param name="_copyPostingFields">
    ///    A Boolean value that determines whether the posting fields will be copied; otherwise, they will be
    ///    initialized to default values; optional.
    /// </param>
    /// <param name="_bufferOrig">
    ///    The original document table record that is required if the <paramref name="_copyPostingFields" />
    ///    parameter is false; optional.
    /// </param>
    /// <param name="_targetAccountingStatus">
    ///    The desired SourceDocumentLineAccountingStatus; optional.
    /// </param>
    /// <param name="_initLineNum_RU">
    /// Determines if new markup trans line number neeeded to prevent index dub violation.
    /// </param>
    /// <param name="_initCalculatedAmount">
    ///    Determines if CalculatedAmount from <c>MarkupTrans</c> should be recalculated; optional.
    /// </param>
    /// <returns>
    /// Created MarkupTrans record.
    /// </returns>
    /// <remarks>
    ///    If no <c>currencyCode</c> is provided, the currency code of the destination table record will be
    ///    used for conversion.
    /// </remarks>
    public static MarkupTrans copySingleMarkupTrans(
        NoYes _reverseSign,
        MarkupTrans _oldMarkupTrans,
        CurrencyCode _currencyCode,
        Common _bufferFrom,
        Common _bufferTo,
        boolean _copyPostingFields,
        Common _bufferOrig,
        SourceDocumentLineAccountingStatus _targetAccountingStatus,
        boolean _initLineNum_RU,
        boolean _initCalculatedAmount)
    {
        MarkupTrans newMarkupTrans = next copySingleMarkupTrans(
            _reverseSign,
            _oldMarkupTrans,
            _currencyCode,
            _bufferFrom,
            _bufferTo,
            _copyPostingFields,
            _bufferOrig,
            _targetAccountingStatus,
            _initLineNum_RU,
            _initCalculatedAmount);

        if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance())
            && _bufferTo is SalesTable 
            && _bufferFrom is SalesQuotationTable)
        {
            SalesTable salesTable = _bufferTo;
            SalesQuotationTable salesQuotationTable = _bufferFrom;

            if (salesTable.custTable_InvoiceAccount().UsualExporter_IT
                && salesQuotationTable.TaxGroup != salesTable.TaxGroup)
            { 
                MarkupTrans::updateUsualExporterTaxGroup_IT(newMarkupTrans, salesTable.DeliveryDate, salesTable.invoiceAccount);
            }
        }

        return newMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdCalculation</Name>
				<Source><![CDATA[
    internal TaxWithholdCalculation parmTaxWithholdCalculation(TaxWithholdCalculation _taxWithholdCalculation = taxWithholdCalculation)
    {
        taxWithholdCalculation = _taxWithholdCalculation;

        return taxWithholdCalculation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>