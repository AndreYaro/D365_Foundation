<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProdStartup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgProdStartup</c> class is used to report a production as started from Manufacturing execution.
/// </summary>
class JmgProdStartup
{
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prodParmSetStartUpParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the specified <c>ProdParmStartUp</c> record to use to start up a production.
    /// </summary>
    /// <param name="prodParm">
    ///    The <c>ProdParmStartUp</c> record to initialize.
    /// </param>
    /// <returns>
    ///    An initialized <c>ProdParmStartUp</c> record.
    /// </returns>
    static ProdParmStartUp prodParmSetStartUpParm(ProdParmStartUp prodParm)
    {
        ProdParmStartUp initprodParm = ProdParmStartUp::find(tablestr(JmgParameters),JmgParameters::version());

        // Start field group:
        prodParm.StartUpProduction          = initprodParm.StartUpProduction;
        prodParm.References                 = initprodParm.References;

        // Route card journal field group:
        prodParm.RouteJournalNameId         = initprodParm.RouteJournalNameId;
        prodParm.RouteAutoConsump           = initprodParm.RouteAutoConsump;
        prodParm.PostNowRoute               = initprodParm.PostNowRoute;
        prodParm.EndRouteCard               = initprodParm.EndRouteCard;

        // Picking list journal field group:
        prodParm.bomJournalNameId           = initprodParm.bomJournalNameId;
        prodParm.bomAutoConsump             = initprodParm.bomAutoConsump;
        prodParm.bomJournalSplit            = initprodParm.bomJournalSplit;
        prodParm.PostNowBOM                 = initprodParm.PostNowBOM;
        prodParm.EndPicklist                = initprodParm.EndPicklist;
        prodParm.ReducePhysical             = initprodParm.ReducePhysical;
        prodParm.DrawNegative               = initprodParm.DrawNegative;
        prodParm.CompletePickListJournal    = initprodParm.CompletePickListJournal;
        prodParm.PrintPickList              = NoYes::No;

        return prodParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyGood</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the reported good quantity on the specified production operation.
    /// </summary>
    /// <param name="_prodRoute">
    ///    The <c>ProdRoute</c> record for which to retrieve the reported good quantity.
    /// </param>
    /// <returns>
    ///    The reported good quantity for the specified production operation.
    /// </returns>
    public static ProdReportedGood qtyGood(ProdRoute _prodRoute)
    {
        return (JmgJobStatusFactory::buildJmgJobStatusInstance()).calculateGoodQtyPerProdRoute(_prodRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyStartup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the reported started quantity on the specified production operation.
    /// </summary>
    /// <param name="_prodRoute">
    ///    The <c>ProdRoute</c> record for which to retrieve the reported started quantity.
    /// </param>
    /// <returns>
    ///    The started good quantity for the specified production operation.
    /// </returns>
    static real qtyStartup(ProdRoute _prodRoute)
    {
        return (JmgJobStatusFactory::buildJmgJobStatusInstance()).calculateStartQtyPerProdRoute(_prodRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStartupQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a worker is allowed to start the specified quantity on a specified job ID.
    /// </summary>
    /// <param name="_quantity">
    ///    The quantity to validate.
    /// </param>
    /// <param name="_jobId">
    ///    The ID of the job for which to validate the quantity.
    /// </param>
    /// <param name="_jmgJobBundle">
    ///    A reference to a <c>JmgJobBundle</c> object, which contains the jobs, that the worker is currently
    ///    starting.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    It is not allowed to start the specified quantity on the specified job ID.
    /// </exception>
    public static void validateStartupQuantity(real _quantity, JmgJobId _jobId, JmgJobBundle _jmgJobBundle = null)
    {
        real            maxQty;
        str             checkFailedLabel;

        JmgTermJob_Prod prodJob = JmgTermJob::construct(_jobId);
        JmgProdParametersDim jmgProdParametersDim    = JmgProdParametersDim::find(prodJob.siteInventDimId());

        if (!jmgProdParametersDim.ValidateStartupQuantity)
        {
            return;
        }

        if (!prodJob.jmgJobTable().canHaveStartQuantity())
        {
            return;
        }

        // Find production
        ProdRoute prodRoute   = prodJob.prodRoute();
        Qty checkQty    = _quantity + prodJob.qtyStarted();
        switch (jmgProdParametersDim.StartupValidateMethod)
        {
            case JmgStartupValidateMethod::ProdPlannedQty:
                JmgProdStartup::validateNonZeroQuantity(checkQty);
                maxQty = prodRoute.prodTable().QtySched;
                checkFailedLabel = "@SYS39590";
                break;
            case JmgStartupValidateMethod::ProdStartedQty:
                JmgProdStartup::validateNonZeroQuantity(checkQty);
                maxQty = prodRoute.prodTable().QtyStUp;
                checkFailedLabel = "@SYS39591";
                break;
            case JmgStartupValidateMethod::PrevOprStartedQty:
            // fallthrough
            case JmgStartupValidateMethod::PrevOprFinishedQty:
                boolean         previousOperationEncountered;

                [maxQty, checkFailedLabel, previousOperationEncountered] = JmgProdStartup::calcPrevOperationQty(jmgProdParametersDim.StartupValidateMethod, prodRoute, _jmgJobBundle);

                // If no previous operation exists, we allow any non-zero amount to be started
                if (!previousOperationEncountered)
                {
                    JmgProdStartup::validateNonZeroQuantity(checkQty);
                    return;
                }
               
                break;
        }

        real overDelivery = 0.0;
        if (jmgProdParametersDim.StartupAcceptOverDelivery)
        {
            overDelivery = maxQty * jmgProdParametersDim.StartupOverDeliveryPercentage / 100;
        }

        if (checkQty > maxQty + overDelivery)
        {
            throw error(strfmt(checkFailedLabel, checkQty, maxQty, overDelivery));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNonZeroQuantity</Name>
				<Source><![CDATA[
    private static void validateNonZeroQuantity(Qty _checkQty)
    {
        if (!_checkQty)
        {
            throw error("@SYS4006017");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrevOperationQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gathers all nessasary information regarding previous operation for a current job for the PrevOprStartedQty and PrevOprFinishedQty startup validation methods.
    /// </summary>
    /// <param name = "_startupValidateMethod">
    ///     The <c>JmgStartupValidateMethod</c> enum that can have only 2 value: PrevOprStartedQty or PrevOprFinishedQty.
    /// </param>
    /// <param name = "_prodRoute">
    ///     The <c>ProdRoute</c> of the current job.
    /// </param>
    /// <param name="_jmgJobBundle">
    ///    A reference to a <c>JmgJobBundle</c> object, which contains the jobs, that the worker is currently
    ///    starting.
    /// </param>
    /// <returns>
    ///     Returns container: a maximum of the quantities from previous operations, a failed message and an indicator if previous operation is encountered.
    /// </returns>
    private static container calcPrevOperationQty(JmgStartupValidateMethod _startupValidateMethod, ProdRoute _prodRoute, JmgJobBundle _jmgJobBundle)
    {
        real      qtyPrevOperation;
        real      maxQtyAllPrevOperation;
        boolean   previousOperationEncountered = false;
        boolean   startupValidateMethodPrevOprStartedQty = _startupValidateMethod == JmgStartupValidateMethod::PrevOprStartedQty;

        str checkFailedLabel = startupValidateMethodPrevOprStartedQty? "@SYS39592" : "@SYS39593";

        boolean onlyPrimaryOperations = true;
        ListEnumerator previousOperationListEnumerator = ProdRoute::getPreviousOperationsForQuantityValidation(_prodRoute.ProdId, _prodRoute.OprNum, onlyPrimaryOperations).getEnumerator();
        while (previousOperationListEnumerator.moveNext())
        {
            ProdRoute prevOperation = previousOperationListEnumerator.current();

            previousOperationEncountered = true;
            qtyPrevOperation = startupValidateMethodPrevOprStartedQty? JmgProdStartup::qtyStartup(prevOperation) : JmgProdStartup::qtyGood(prevOperation);

            if (_jmgJobBundle)
            {
                JmgTermJob_Prod prevJob;
                MapIterator jobs = startupValidateMethodPrevOprStartedQty? _jmgJobBundle.getNewJobsIterator() : _jmgJobBundle.getActiveJobsIterator();

                while (jobs.more())
                {
                    if (jobs.value() is JmgTermJob_Prod)
                    {
                        prevJob = jobs.value() as JmgTermJob_Prod;

                        if (prevJob.prodRoute().ProdId  == prevOperation.ProdId &&
                            prevJob.prodRoute().OprNum  == prevOperation.OprNum &&
                            prevJob.prodJobType()       == RouteJobType::Process)
                        {
                            qtyPrevOperation += startupValidateMethodPrevOprStartedQty?
                                _jmgJobBundle.getStartupParameters(prevJob.jobId()).startQuantity() : _jmgJobBundle.getFeedbackParameters(prevJob.jobId()).goodQuantity();
                        }
                    }
                    jobs.next();
                }
            }
            if (maxQtyAllPrevOperation < qtyPrevOperation)
            {
                maxQtyAllPrevOperation = qtyPrevOperation;
            }
        }

        return [maxQtyAllPrevOperation, checkFailedLabel, previousOperationEncountered];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>