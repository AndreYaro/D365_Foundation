<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostARRetention</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPostARRetention extends ProjPost
{
    Common              buffer;
    ProjJournalTrans    projJournalTrans;
    ProjRevenueTrans    projRevenueTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        projJournalTrans    = _buffer;
        projTrans           = ProjTrans::newProjJournalTrans(projJournalTrans);

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    public void projTransCreate()
    {
        ProjRevenueTransSale    projRevenueTransSale;
        MapEnumerator           enumerateMap;
        ProjFundingSource       projFundingSource;

        TransDate getLedgerTransdate()
        {
            TransDate ret;

            if (ledgerVoucher)
            {
                ret = ledgerVoucher.lastTransDate();
            }

            return ret;
        }

        projRevenueTrans.clear();
        projRevenueTrans = ProjRevenueTrans::initTransFromJournal(projJournalTrans);
        projRevenueTrans.TransactionOrigin = ProjOrigin::FeeJournal;

        if (ledgerVoucher)
        {
            projRevenueTrans.VoucherJournal = ledgerVoucher.lastVoucher();
        }

        if (this.parmAdjustment())
        {
            projRevenueTrans.TransIdRef = this.parmTransIdRef();
            projRevenueTrans.AdjRefTransId = this.parmAdjRefTransId();
        }

        if (this.parmTransactionOriginOrig())
        {
            projRevenueTrans.TransactionOrigin = this.parmTransactionOriginOrig();
        }

        if (! projRevenueTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        projRevenueTrans.insert();

        if (this.parmLedgerOrigin() != ProjOrigin::Adjustment)
        {
           //Create ProjRevenueTransSale record
            enumerateMap = new MapEnumerator(saleDistributions);
            while (enumerateMap.moveNext())
            {
                projRevenueTransSale.clear();
                projRevenueTransSale.LedgerTransdate    = ledgerVoucher.lastTransDate();
                projRevenueTransSale.TransId            = projRevenueTrans.TransId;
                projRevenueTransSale.DefaultDimension   = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projRevenueTrans.DefaultDimension, projFundingSource.DefaultDimension);
                projRevenueTransSale.FundingSource      = enumerateMap.currentKey();
                projRevenueTransSale.LineAmount         = enumerateMap.currentValue();

                projFundingSource = ProjFundingSource::find(projRevenueTransSale.FundingSource);
                if (projTrans.qty() != 0)
                {
                    projRevenueTransSale.SalesPrice = projRevenueTransSale.LineAmount/projTrans.qty();
                }
                else
                {
                    // Set Qty value as 1
                    projRevenueTransSale.SalesPrice = projRevenueTransSale.LineAmount;
                }

                if (this.checkEnterSalesAccrued() && ProjFundingSource::isExternalFunding(projRevenueTransSale.FundingSource))
                {
                    projRevenueTransSale.LedgerSalesPosted = true;
                    if (projTrans.transTurnoverMST() != 0.0)
                    {
                        projRevenueTransSale.LedgerSalesAmount = CurrencyExchangeHelper::mstAmount(CurrencyExchangeHelper::amount(projTrans.qty() * projRevenueTransSale.SalesPrice, this.currencyIdSales()), this.currencyIdSales(), projTrans.transDate(), Currency::noYes2UnknownNoYes(projTrans.triangulationSales()), this.exchRateSales(), this.exchRateSecondarySales());
                    }
                }
                projRevenueTransSale.TransStatus = this.parmTransStatus();
                if (! projRevenueTransSale.TransStatus)
                {
                    projRevenueTransSale.TransStatus = ProjTransStatus::Posted;
                }
                projRevenueTransSale.insert();
            }
        }

        if (this.parmCostUseOrig())
        {
            this.parmTransIdCost(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdCost(projRevenueTrans.TransId);
        }

        if (this.parmsalesUseOrig())
        {
            this.parmTransIdSales(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdSales(projRevenueTrans.TransId);
        }

        transIdNew = projRevenueTrans.TransId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>