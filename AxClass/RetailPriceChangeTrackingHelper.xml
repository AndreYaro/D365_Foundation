<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class providers the most common helper logic for price change tracking to be shared by others, e.g. the enable/disable status checking.
/// </summary>
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

internal class RetailPriceChangeTrackingHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isPriceChangeTrackingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a value indicating whether price change tracking is enabled.
    /// </summary>
    /// <returns>True is price change tracking is enabled in any legal entity; otherwise false.</returns>
    public static boolean isPriceChangeTrackingEnabled()
    {
        RetailPriceChangeTrackingDataArea trackedDataArea;

        select firstonly RecId from trackedDataArea;

        return trackedDataArea.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDMFDataEntityImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether the current session is data management framework data entity import.
    /// </summary>
    /// <returns>True if it's data entity import in DMF, otherwise return false.</returns>
    public static boolean isDMFDataEntityImport()
    {
        RetailPriceChangeTrackingContext context = RetailPriceChangeTrackingContext::current();
        boolean isDataImportInDataManagementContext = context != null && context.parmDataImporting() && context.parmIsInDataManagementContext();

        return isDataImportInDataManagementContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipChangeTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether to skip the price change tracking. 
    /// </summary>
    /// <returns>True if change tracking should be skipped, otherwise, false. </returns>
    public static boolean shouldSkipChangeTracking()
    {
        return !RetailPriceChangeTrackingHelper::isPriceChangeTrackingEnabled() 
            || RetailPriceChangeTrackingHelper::isDMFDataEntityImport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBatchGroup</Name>
				<Source><![CDATA[
    internal static void setBatchGroup(RunBaseBatch _batch)
    {
        if (!RetailPriceChangeTrackingDisableSpecifyBatchGroupFlight::instance().isEnabled())
        {
            RetailSharedParameters sharedParameters = RetailSharedParameters::find();
            if (sharedParameters.PricingBatchJobGroupId && BatchGroup::exist(sharedParameters.PricingBatchJobGroupId))
            {
                _batch.batchInfo().parmGroupId(sharedParameters.PricingBatchJobGroupId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>