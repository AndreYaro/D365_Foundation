<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSFeatureExtensionValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSFeatureExtensionValidator</c> class validates whether any extender have taken a dependency on method marked as obsolete as part of
/// implementing a warehouse management feature. Create a derived class to specify the methods that must be validated for a specific feature.
/// The class contains extension points such that additional methods can be added in case these need to be verified as well, 
/// and extenders with existing dependencies which should remain can opt their model out of the validation in case the dependency is by design.
/// </summary>
public abstract class WHSFeatureExtensionValidator extends FeatureManagementExtensionValidator
{
    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>featureValidationActivities</Name>
				<Source><![CDATA[
    protected final FeatureManagementExtensionValidationInstrumentationActivities featureValidationActivities()
    {
        return this.instrumentationLogger().featureValidationActivities();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildObsoletedMethodList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a list of <c>SysDictMethod</c> objects referencing obsolete methods that need to be validated.
    /// </summary>
    /// <returns>
    /// The list of obsoleted methods.
    /// </returns>
    /// <remarks>
    /// This is an extension point, where extending models can add other obsolete methods that need to be included in the validation.
    /// </remarks>
    protected List buildObsoletedMethodList()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildValidatedModuleSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a set of module names, that do not need to be included when validating whether the modules contain extensions to any of the obsoleted methods.
    /// </summary>
    /// <returns>
    /// The set of validated module names.
    /// </returns>
    /// <remarks>
    /// This is an extension point, where an extending model having a extension of an obsolete methods, can add its own module name to the set to avoid the module from failing the validation.
    /// An extending model must only add its name to the set if the extension is there by-design, and will not lead to incorrect behavior when the catch weight for warehouse management feature is enabled;
    /// otherwise the extension must be refactored.
    /// </remarks>
    protected Set buildValidatedModuleSet()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableFeature</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean canEnableFeature()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExtensionErrors</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean parmReportExtensionErrors(boolean _reportExtensionErrors = reportExtensionErrors)
    {
        return super(_reportExtensionErrors);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>