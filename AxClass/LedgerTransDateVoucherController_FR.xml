<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransDateVoucherController_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransDateVoucherController_FR</c> class is the controller class for the
/// <c>LedgerTransDateVoucher_FR</c> report.
/// </summary>
/// <remarks>
/// This class contains methods that validate the parameters of the <c>LedgerTransDateVoucher_FR</c>
/// report.
/// </remarks>
public class LedgerTransDateVoucherController_FR extends SrsReportRunController implements BatchRetryable
{
    private const SRSCatalogItemName LedgerTransDateVoucherReportName = 'LedgerTransDateVoucher_FR.Report';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00009, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodStatus</Name>
				<Source><![CDATA[
    private str periodStatus(FiscalCalendarRecId _calendarRecId, FromDate _fromDate, ToDate _toDate)
    {
        boolean     isCloseYearExist;
        LedgerRecId ledgerRecId = Ledger::current();

        isCloseYearExist = LedgerFiscalCalendar::existYearByYearStatusDates(
                                    _calendarRecId,
                                    ledgerRecId,
                                    _toDate,
                                    _fromDate,
                                    FiscalYearStatus::Close);

        if (isCloseYearExist)
        {
            return "@SYS77870";
        }
        else
        {
            return "@SYS19731";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before running the report.
    /// </summary>
    public void preRunModifyContract()
    {
        Range                               rangeVoucher;
        Query                               query = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        LedgerTransDateVoucherContract_FR   rdpContract;
        FiscalCalendarRecId                 calendarRecId;
        CurrentOperationsTaxInclAll_FR      postingLayerFilter;

        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        rdpContract = this.parmReportContract().parmRdpContract() as LedgerTransDateVoucherContract_FR;

        rdpContract.parmPeriodStatus(this.periodStatus(calendarRecId, rdpContract.parmFromDate(), rdpContract.parmToDate()));

        rangeVoucher = rdpContract.parmRangeVoucher();

        postingLayerFilter = rdpContract.parmPostingLayerFilter();

        this.updateQueryRange(rangeVoucher, postingLayerFilter, query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query with the input parameter values.
    /// </summary>
    /// <param name="_rangeVoucher">
    /// The range voucher value.
    /// </param>
    /// <param name="_postingLayerFilter">
    /// The posting layer value.
    /// </param>
    /// <param name="_query">
    /// The query value.
    /// </param>
    private void updateQueryRange(Range                             _rangeVoucher,
                                  CurrentOperationsTaxInclAll_FR    _postingLayerFilter,
                                  Query                             _query)
    {
        GeneralJournalEntry::addSecureRangeForLedger(_query.dataSourceTable(tableNum(GeneralJournalEntry)));
        MainAccount::addSecureRangeForChartOfAccounts(_query.dataSourceTable(tableNum(MainAccount)));

        findOrCreateRange_W(_query.dataSourceTable(tableNum(GeneralJournalEntry)), fieldNum(GeneralJournalEntry, SubledgerVoucher)).value(_rangeVoucher);
        findOrCreateRange_W(_query.dataSourceTable(tableNum(GeneralJournalAccountEntry)), fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount)).value('!0');

        if (_postingLayerFilter != CurrentOperationsTaxInclAll_FR::All)
        {
            findOrCreateRange_W(_query.dataSourceTable(tableNum(GeneralJournalEntry)), fieldNum(GeneralJournalEntry, PostingLayer)).value(queryValue(_postingLayerFilter));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerTransDateVoucherController_FR controller = new LedgerTransDateVoucherController_FR();
        controller.parmReportName(LedgerTransDateVoucherReportName);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>