<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEodTrickleFeedFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.BusinessPlatform.SharedTypes;

/// <summary>
/// The <c>RetailEodTrickleFeedFeature</c> represents the feature management for Trickle feed in Retail statements.
/// </summary>
[FeatureMetadataConfigurationKey(configurationKeyStr(Retail))]
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[InternalUseOnly]
internal final class RetailEodTrickleFeedFeature implements IFeatureMetadata, IFeatureLifecycle, IFeatureMetadataEnablementNotifiable
{
    private static RetailEodTrickleFeedFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new RetailEodTrickleFeedFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>The <c>RetailEodTrickleFeedFeature</c> instance.</returns>
    [Hookable(false)]
    public static RetailEodTrickleFeedFeature instance()
    {
        return RetailEodTrickleFeedFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Retail:RetailEodTrickleFeedConfigKey");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Retail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Retail:RetailEodTrickleFeedFeatureDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return "https://docs.microsoft.com/en-us/dynamics365/commerce/trickle-feed";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(RetailEOD)) && !RetailStatementTable::existUnposted())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    public void onDisabled()
    {
        // Feature should not be allowed to be disabled
        // for any type of existing unposted statement.
        if (RetailStatementTable::existUnposted())
        {
            throw error("@Retail:RetailEodTrickleFeedFeatureDisableNotAllowed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    public void onEnabled()
    {
        // Feature should not be allowed to be enabled
        // for any type of existing unposted statement.
        if (RetailStatementTable::existUnposted())
        {
            throw error("@Retail:RetailEodTrickleFeedFeatureEnableNotAllowed");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>