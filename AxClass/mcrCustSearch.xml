<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>mcrCustSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRCustSearch</c> class manages customer search.
/// </summary>
class mcrCustSearch
{
    #define.MCRCustSearchType('MCRCustSearchType')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fullTextSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>TmpMCRCustSearchTable</c> table.
    /// </summary>
    /// <param name="_mcrSearchText">
    /// The search text entered by user.
    /// </param>
    /// <param name="_getBusRel">
    /// A <c>boolean</c> value that indicates whether to get business relation; optional.
    /// </param>
    /// <returns>
    /// A buffer of the <c>TmpMCRCustSearchTable</c> table.
    /// </returns>
    public static container fullTextSearch(MCRSearchText _mcrSearchText, boolean _getBusRel = true)
    {
        Query query = new Query();
        List listSearch = new List(Types::Record);
        MCRFullTextParameters   mcrFullTextParameters = MCRFullTextParameters::find();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(MCRCustTableIndex));
        
        // There is no unique constraint on RefRecId/RefTableId, hence duplicates need to be filtered out but at performance cost.
        // Duplicates are not expected, just not enforced. Also, expected RefTableId are limited to CustTable or smmBusRelTable.
        // The sort order here does not impact how the data is shown to the user.
        // Flight ability to optimize performance, assuming duplicates do not exist:
        if (!MCRCustSearchPerfFlight::instance().isEnabled())
        {
            queryBuildDataSource.addSortField(fieldnum(MCRCustTableIndex, RefRecId));
            queryBuildDataSource.addSortField(fieldnum(MCRCustTableIndex, RefTableID));
            queryBuildDataSource.orderMode(ordermode::GroupBy);
        }

        QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldNum(MCRCustTableIndex, SearchText));
        if (mcrFullTextParameters.SearchType == MCRSearchMatchType::Full)
        {
            queryBuildRange.rangeType(QueryRangeType::FullText);
            queryBuildRange.value(SysQuery::value(_mcrSearchText));
        }
        else
        {
            // If the user added their own wild card do not wrap the search text
            if (strFind(_mcrSearchText, '*', 1, strLen(_mcrSearchText)))
            {
                queryBuildRange.value(_mcrSearchText);
            }
            else
            {
                queryBuildRange.value(SysQuery::valueLike(_mcrSearchText));
            }
        }

        QueryRun queryRun = new QueryRun(query);
        queryRun.recordLevelSecurity(true);

        // Loop over all customers or prospects that meet search text and them to the list that will be displayed the user
        while (queryRun.next())
        {
            MCRCustTableIndex mcrCustTableIndex = queryRun.get(tableNum(MCRCustTableIndex));

            // Builds the result record from the MCRCustTableIndex record
            TmpMCRCustSearchTable   tmpMCRCustSearchTable;

            if (tmpMCRCustSearchTable.addSearchRecord(mcrCustTableIndex.RefRecId, mcrCustTableIndex.RefTableId, _getBusRel))
            {
                listSearch.addEnd(tmpMCRCustSearchTable);

                // If the number of results exceeds the parameter, exit loop and return
                if (listSearch.elements() >= mcrFullTextParameters.NumResults)
                {
                    break;
                }
            }
        }

        return listSearch.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustSearchType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user's saved customer search type.
    /// </summary>
    /// <returns>
    /// Returns a <c>MCRCustSearchType</c> enum value.
    /// </returns>
    /// <remarks>
    /// The hard coded value of '2' in the following call says to get the second
    /// value of the stored container, which always stores the 'version' in the
    /// first element, and then the actual value in the second element.
    /// See the saveCustSearchType method's comment mentioning 'version'.
    /// </remarks>
    public static MCRCustSearchType getCustSearchType()
    {
        return conPeek(xSysLastValue::getValue(curext(),
                        curUserId(),
                        UtilElementType::Enum,
                        #MCRCustSEARCHTYPE,
                        #MCRCustSEARCHTYPE),
                        2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchSearchForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the <c>MCRCustSearch</c> form.
    /// </summary>
    /// <param name="_searchText">
    /// The search text entered by user.
    /// </param>
    /// <param name="_searchType">
    /// The search type to be used.
    /// </param>
    /// <param name="_callingForm">
    /// The object that call this process.
    /// </param>
    /// <param name="_listSearch">
    /// A list of <c>TmpMCRCustSearchTable</c> records.
    /// </param>
    /// <returns>
    /// The customer account number.
    /// </returns>
    /// <remarks>
    /// Initialize the parameters to launch the <c>MCRCustSearch</c> form.
    /// If the search type is not passed in it will default to the default cust
    /// search type. Return the resulting account number of the search.
    /// </remarks>
    private static AccountNum launchSearchForm(str _searchText,
                                                        MCRCustSearchType _searchType = MCRCustSearchType::DefaultCustSearch,
                                                        Object _callingForm = null,
                                                        List _listSearch = null)
    {
        str formToLaunch = formStr(MCRcustSearch);
        Args formArgs = new Args(formToLaunch);

        formArgs.parm(_searchText);
        formArgs.caller(_callingForm);
        formArgs.parmObject(_listSearch);
        formArgs.parmEnumeration(_searchType);

        FormRun formRun = classfactory.formRunClass(formArgs);

        formRun.init();
        formRun.run();
        formRun.wait();

        return formArgs.parm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptNewCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts user if the business relation should be converted to a customer.
    /// </summary>
    /// <returns>
    /// A <c>boolean</c> value that indicates whether to convert or not.
    /// </returns>
    /// <remarks>
    /// If only 1 result comes back from the search and happens to
    /// be a BR that is not tied to a customer. Ask the user if they
    /// want to create an equivelant customer.
    /// </remarks>
    private static boolean promptNewCust()
    {
        str             promptMessage;
        DialogButton    dialogButton;

        // prompt user
        promptMessage = strFmtLB("@MCR26339");

        dialogButton = Box::yesNo(promptMessage, DialogButton::No, "@MCR26340");

        if (dialogButton == DialogButton::No)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCustSearchType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the user's customer search type.
    /// </summary>
    /// <param name="_custSearchType">
    /// A <c>MCRCustSearchType</c> enum value.
    /// </param>
    /// <remarks>
    /// The hard-coded default value of 1 here is the
    /// 'version' of the value saved.
    /// </remarks>
    public static void saveCustSearchType(MCRCustSearchType _custSearchType)
    {
        xSysLastValue::putValue(
            [1, _custSearchType],
            curext(),
            curUserId(),
            UtilElementType::Enum,
            #MCRCustSearchType,
            #MCRCustSearchType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the type of customer searches as selected.
    /// </summary>
    /// <param name="_searchText">
    /// The search text entered by user.
    /// </param>
    /// <param name="_searchType">
    /// The search type to be used.
    /// </param>
    /// <param name="_getBusRel">
    /// A <c>boolean</c> value that indicates whether to get business relation; optional.
    /// </param>
    /// <returns>
    /// A buffer of the <c>TmpMCRCustSearchTable</c> table.
    /// </returns>
    /// <remarks>
    /// See the F1 help for the <c>MCRCustSearchType</c> enum for copy of search types.
    /// Returns a container of customer accounts that the search returned.  The
    /// first value in the container will be the number results returned.
    /// </remarks>
    public static container search(str               _searchText,
                                   MCRCustSearchType _searchType = MCRCustSearchType::DefaultCustSearch,
                                   boolean           _getBusRel = true)
    {
        TmpMCRCustSearchTable   tmpMCRCustSearchTable;

        container               conSearchTokens;
        int                     counter;
        str 75                  searchToken;
        SalesTable              salesTable;
        CustTable               custTable;
        RetailLoyaltyCard       retailLoyaltyCardTable;
        MCRCustPaymTable        mcrCustPaymTable;
        smmBusRelTable          smmBusRelTable;
        smmBusRelTypeGroup      smmBusRelTypeGroup;
        MCRsmmBusRelTable       mcRsmmBusRelTable;

        CustInvoiceJour          custInvoiceJour;

        DirPartyTable               dirPartyTable;
        DirPartyLocation            dirPartyLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;

        CustAccount                 custAccount;

        List                        listSearch = new List(Types::Record);

        MCRFullTextParameters       mcrFullTextParameters = MCRFullTextParameters::find();

        // Here we substitute * for % for axapta queries
        _searchText = strReplace(_searchText, '%', '*');
        conSearchTokens += _searchText;

        // Added search limit, based on the current functionality that non default searches
        // will contain only one token.
        switch (_searchType)
        {
            case MCRCustSearchType::DefaultCustSearch:
                // Search for customer using the method 'fullTextSearch'.
                return MCRCustSearch::fullTextSearch(_searchText, _getBusRel);
            case MCRCustSearchType::SalesOrderNumber:
                // Search for customer using sales order number.
                for (counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    searchToken = conPeek(conSearchTokens, counter);
                    while select RecId from custTable
                        exists join salesTable
                            where salesTable.CustAccount == custTable.AccountNum
                            && salesTable.SalesId like searchToken
                    {
                        if (tmpMCRCustSearchTable.addSearchRecord(custTable.RecId, tableNum(CustTable), true))
                        {
                            listSearch.addEnd(tmpMCRCustSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;
            case MCRCustSearchType::PurchOrderNumber:
                // Search for customer using purchase order number.
                for (counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    searchToken = conPeek(conSearchTokens, counter);
                    while select RecId from custTable
                        exists join salesTable
                            where salesTable.CustAccount == custTable.AccountNum
                            && salesTable.PurchOrderFormNum like searchToken
                    {
                        if (tmpMCRCustSearchTable.addSearchRecord(custTable.RecId, tableNum(CustTable), true))
                        {
                            listSearch.addEnd(tmpMCRCustSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;
            case MCRCustSearchType::CustAccount:
                // Search for customer using customer account number.
                for (counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    searchToken = conPeek(conSearchTokens, counter);
                    while select RecId from custTable
                        where custTable.AccountNum like searchToken
                    {
                        if (tmpMCRCustSearchTable.addSearchRecord(custTable.RecId, tableNum(CustTable), true))
                        {
                            listSearch.addEnd(tmpMCRCustSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;
            case MCRCustSearchType::EmailAddress:
                // Search for customer using email address.
                for (counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    searchToken = conPeek(conSearchTokens, counter);
                    while select RecId from custTable
                        exists join dirPartyLocation
                        where dirPartyLocation.Party == custTable.Party
                            && dirPartyLocation.IsPostalAddress == NoYes::No
                        exists join logisticsElectronicAddress
                        where logisticsElectronicAddress.Location == dirPartyLocation.Location
                            && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                            && logisticsElectronicAddress.IsPrimary == NoYes::Yes
                            && logisticsElectronicAddress.Locator like searchToken
                    {
                        if (tmpMCRCustSearchTable.addSearchRecord(custTable.RecId, tableNum(CustTable), true))
                        {
                            listSearch.addEnd(tmpMCRCustSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;
            case MCRCustSearchType::PhoneNumber:
                // Search for customer using phone number.
                for (counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    searchToken = conPeek(conSearchTokens, counter);
                    while select RecId from custTable
                        exists join dirPartyLocation
                        where dirPartyLocation.Party == custTable.Party
                            && dirPartyLocation.IsPostalAddress == NoYes::No
                        exists join logisticsElectronicAddress
                        where logisticsElectronicAddress.Location == dirPartyLocation.Location
                            && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone
                            && logisticsElectronicAddress.IsPrimary == NoYes::Yes
                            && logisticsElectronicAddress.Locator like searchToken
                    {
                        if (tmpMCRCustSearchTable.addSearchRecord(custTable.RecId, tableNum(CustTable), true))
                        {
                            listSearch.addEnd(tmpMCRCustSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;
            case MCRCustSearchType::CheckNumber:
                // Search for customer using check number.
                for (counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    searchToken = conPeek(conSearchTokens, counter);
                    while select RecId from custTable
                        exists join mcrCustPaymTable
                        where mcrCustPaymTable.CustAccount == custTable.AccountNum
                            && mcrCustPaymTable.CustPaymType == MCRCustPaymType::Check
                            && mcrCustPaymTable.CheckNumber like searchToken
                    {
                        if (tmpMCRCustSearchTable.addSearchRecord(custTable.RecId, tableNum(CustTable), true))
                        {
                            listSearch.addEnd(tmpMCRCustSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;
            case MCRCustSearchType::RMANumber:
                // Search for customer using return material authorization number.
                for (counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    searchToken = conPeek(conSearchTokens, counter);
                    while select RecId from custTable
                        exists join salesTable
                        where salesTable.CustAccount == custTable.AccountNum
                            && salesTable.ReturnItemNum like searchToken
                    {
                        if (tmpMCRCustSearchTable.addSearchRecord(custTable.RecId, tableNum(CustTable), true))
                        {
                            listSearch.addEnd(tmpMCRCustSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;
            case MCRCustSearchType::Invoice:
                // Search for customer using invoice number.
                for (counter=1; counter<=conLen(conSearchTokens); counter++)
                {
                    searchToken = conPeek(conSearchTokens, counter);
                    while select RecId from custTable
                        exists join custInvoiceJour
                        where custInvoiceJour.InvoiceAccount == custTable.AccountNum
                            && custInvoiceJour.InvoiceId like searchToken
                    {
                        if (tmpMCRCustSearchTable.addSearchRecord(custTable.RecId, tableNum(CustTable), true))
                        {
                            listSearch.addEnd(tmpMCRCustSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;
            case MCRCustSearchType::BusAccount:
                // Search for customer using business account number.
                for (counter = 1; counter <= conLen(consearchTokens); counter++)
                {
                    searchToken = conPeek(conSearchTokens,counter);

                    while select RecId, Party from smmBusRelTable
                        where smmBusRelTable.BusRelAccount  like searchToken
                        exists join mcRsmmBusRelTable
                        where mcRsmmBusRelTable.SmmBusRelTable == smmBusRelTable.RecId
                            && mcRsmmBusRelTable.IsListDeleted  == NoYes::No
                        exists join smmBusRelTypeGroup
                        where smmBusRelTypeGroup.TypeId == smmBusRelTable.BusRelTypeId
                            && smmBusRelTypeGroup.TableType != smmBusRelTypeSourceTable::Vendor
                    {
                        custAccount = smmBusRelTable.custAccount();
                        if (custAccount)
                        {
                            if (tmpMCRCustSearchTable.addSearchRecord(CustTable::find(custAccount).RecId, tableNum(CustTable), true))
                            {
                                listSearch.addEnd(tmpMCRCustSearchTable);
                            }
                        }
                        else
                        {
                            if (tmpMCRCustSearchTable.addSearchRecord(smmBusRelTable.RecId, tableNum(smmBusRelTable)))
                            {
                                listSearch.addEnd(tmpMCRCustSearchTable);
                            }
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;
            case MCRCustSearchType::CNPJCPFNum_BR:
                // Search for customer using CNPJ/CPF number.
                for (counter = 1; counter <= conlen(conSearchTokens); counter++)
                {
                    searchToken = conpeek(conSearchTokens, counter);
                    while select RecId from custTable
                        where custTable.CNPJCPFNum_BR like strKeep(searchToken, '0123456789-*')
                    {
                        if (tmpMCRCustSearchTable.addSearchRecord(custTable.RecId, tableNum(CustTable), true))
                        {
                            listSearch.addEnd(tmpMCRCustSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;
            case MCRCustSearchType::CustName:
                // Search for customer by name.
                for (counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    searchToken = conPeek(conSearchTokens, counter);
                    while select RecId from custTable
                        exists join dirPartyTable
                        where dirPartyTable.RecId == custTable.Party
                            && dirPartyTable.Name like searchToken
                    {
                        if (tmpMCRCustSearchTable.addSearchRecord(custTable.RecId, tableNum(CustTable), true))
                        {
                            listSearch.addEnd(tmpMCRCustSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;
            case MCRCustSearchType::LoyaltyCardNumber:
                // Search for customer by loyalty card number.
                for (counter = 1; counter <= conLen(conSearchTokens); counter++)
                {
                    searchToken = conPeek(conSearchTokens, counter);
                    while select RecId from custTable
                        exists join retailLoyaltyCardTable
                        where retailLoyaltyCardTable.Party == custTable.Party
                            && retailLoyaltyCardTable.CardNumber like searchToken
                    {
                        if (tmpMCRCustSearchTable.addSearchRecord(custTable.RecId, tableNum(CustTable), true))
                        {
                            listSearch.addEnd(tmpMCRCustSearchTable);
                        }

                        if (mcrFullTextParameters.NumResults <= listSearch.elements())
                        {
                            break;
                        }
                    }
                }
                break;

            default:
                // Do nothing as MCRCustSearchType is extensible and CoC might handle new enum elements.
        }
        return listSearch.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchDisplayForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates customer search form.
    /// </summary>
    /// <param name="_searchText">
    /// The search text entered by user.
    /// </param>
    /// <param name="_searchType">
    /// The search type to be used.
    /// </param>
    /// <param name="_showMergedWarning">
    /// A <c>boolean</c> value that indicates whether to show that
    /// the customer was previously merged.
    /// </param>
    /// <param name="_callingForm">
    /// The object that call this process.
    /// </param>
    /// <returns>
    /// A customer account number.
    /// </returns>
    /// <remarks>
    /// If only one match is found, and "Automatically fill customer
    /// search" parameter is on, it returns the customer record, else it
    /// will open the customer search form and display all customer records
    /// that were found, and then returns customer account selected there.
    /// </remarks>
    public static ExternalAccount searchDisplayForm(str               _searchText,
                                                           MCRCustSearchType _searchType = MCRCustSearchType::DefaultCustSearch,
                                                           boolean           _showMergedWarning = false,
                                                           Object            _callingForm = null)
    {
        MCRCustSearch           mcrCustSearch = new MCRCustSearch();
        TmpMCRCustSearchTable   tmpMCRCustSearchTable;
        ExternalAccount         externalAccount;
        smmBusRelTable          smmBusRelTable;
        CustTable               custTable;
        List                    listSearch;
        ListEnumerator          listEnumeratorSearch;
        container               containerSearch;
        boolean                 getBR = true;
        MCRFullTextParameters   mcrFullTextParameters;

        delete_from tmpMCRCustSearchTable;

        if (_searchText)
        {
            if (_callingForm
                && _callingForm.name() != formStr(SalesCreateQuotation)
                && _callingForm.name() != formStr(SalesCreateOrder))
            {
                getBR = false;
            }

            containerSearch = MCRCustSearch::search(_searchText, _searchType, getBR);
            listSearch = List::create(containerSearch);

            mcrFullTextParameters = MCRFullTextParameters::find();

            // Returns account number immediately if there is only one result returned
            // from the search, and "Automatically fill customer search" parameter is on.
            // changed search to use a temporary table rather than a container.
            if (listSearch.elements() == 1 && mcrFullTextParameters.AutoFillCustSearch)
            {
                listEnumeratorSearch = listSearch.getEnumerator();
                listEnumeratorSearch.moveNext();
                tmpMCRCustSearchTable.data(listEnumeratorSearch.current());

                if (tmpMCRCustSearchTable.CustAccount)
                {
                    externalAccount = tmpMCRCustSearchTable.CustAccount;
                    custTable = CustTable::find(externalAccount);
                    if (custTable.mcrMergedRoot && _showMergedWarning)
                    {
                        // Show warning that the customer has been changed.
                        checkFailed(strFmt("@MCR12337", externalAccount, custTable.mcrMergedRoot));
                        externalAccount = custTable.mcrMergedRoot;
                    }
                    return externalAccount;
                }
                else if (tmpMCRCustSearchTable.BusRelAccount)
                {
                    externalAccount = tmpMCRCustSearchTable.BusRelAccount;

                    if (_callingForm)
                    {
                        if (MCRCustSearch::promptNewCust())
                        {
                            smmBusRelTable = smmBusRelTable::find(externalAccount);

                            if (smmBusRelTable::convert2Customer(smmBusRelTable))
                            {
                                info("@MCR25568");
                                smmBusRelTable.reread();
                                externalAccount = smmBusRelTable.custAccount();
                            }
                        }
                        else
                        {
                            externalAccount = '';
                        }
                    }
                    return externalAccount;
                }

                // If it is, it means that a record was found matching the search
                //      criteria.  But it doesn't have a customer account or
                //      business relation account number.
                else
                {
                    return externalAccount;
                }
            }
            // If more than one record was found.
            else
            {
                externalAccount = MCRCustSearch::launchSearchForm(_searchText, _searchType, _callingForm, listSearch);
                return externalAccount;
            }
        }
        else
        {
            externalAccount = MCRCustSearch::launchSearchForm(_searchText, _searchType, _callingForm);

            return externalAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteListItemFromComboBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// In an enum-populated combo box, delete an enum's label from the list of options.
    /// Should be utilized in both the form's run method, and in the combo box's enter method.
    /// </summary>
    /// <param>
    /// formComboBoxControl An instance of the FormComboBoxControl class that is populated by an enum.
    /// </param>
    /// <param>
    /// enumToDelete The enum value to delete from the combo box list.
    /// </param>
    /// <param>
    /// predicate The conditional statement to be satisfied in order for the enum to be deleted from the list. Default is true.
    /// </param>
    public static void deleteListItemFromComboBox(FormComboBoxControl formComboBoxControl, Str itemStrToDelete, boolean condition = true)
    {
        if (condition)
        {
            formComboBoxControl.delete(itemStrToDelete);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>