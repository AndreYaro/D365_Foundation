<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetJournalExcelTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.Office;

/// <summary>
/// The <c>AssetJournalExcelTemplate</c> is the supporting class for the Asset journal excel template.
/// </summary>
public class AssetJournalExcelTemplate extends DocuTemplateRegistrationBase implements LedgerIJournalExcelTemplate
{
    private const DocuTemplateName ExcelTemplateName = resourceStr(AssetJournalLineEntityTemplate);
    private const DataEntityName LineEntityName = tableStr(AssetJournalLineEntity);
    private const FieldName LineEntityJournalNum = fieldStr(AssetJournalLineEntity, JournalBatchNumber);
    private const FieldName LineEntityDataAreaId = fieldStr(AssetJournalLineEntity, dataAreaId);
    private const DataEntityName HeaderEntityName = tableStr(AssetJournalHeaderEntity);
    private const FieldName HeaderEntityJournalNum = fieldStr(AssetJournalHeaderEntity, JournalBatchNumber);
    private const FieldName HeaderEntityDataAreaId = fieldStr(AssetJournalHeaderEntity, dataAreaId);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isJournalTypeSupported</Name>
				<Source><![CDATA[
    public boolean isJournalTypeSupported(LedgerJournalType _ledgerJournalType)
    {
        return _ledgerJournalType == LedgerJournalType::Assets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTemplateName</Name>
				<Source><![CDATA[
    public DocuTemplateName documentTemplateName()
    {
        return ExcelTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedAccountTypes</Name>
				<Source><![CDATA[
    public Set supportedAccountTypes()
    {
        Set accountTypeSet = new Set(Types::Integer);

        accountTypeSet.add(LedgerJournalACType::FixedAssets);

        return accountTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedOffsetAccountTypes</Name>
				<Source><![CDATA[
    public Set supportedOffsetAccountTypes()
    {
        Set offsetAccountTypeSet = new Set(Types::Integer);

        offsetAccountTypeSet.add(LedgerJournalACType::Ledger);
        offsetAccountTypeSet.add(LedgerJournalACType::Cust);
        offsetAccountTypeSet.add(LedgerJournalACType::Vend);
        offsetAccountTypeSet.add(LedgerJournalACType::Bank);

        return offsetAccountTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalForTemplate</Name>
				<Source><![CDATA[
    public boolean validateJournalForTemplate(LedgerJournalTable _ledgerJournalTable)
    {
        return LedgerJournalExcelTemplate::validateJournalForTemplate(_ledgerJournalTable, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCustomTrimming</Name>
				<Source><![CDATA[
	public boolean allowCustomTrimming(LedgerJournalTable _ledgerJournalTable)
    {
        boolean ret = false;

        if (_ledgerJournalTable.CurrentOperationsTax == CurrentOperationsTax::None)
        {
            ret = true;
        }
		
		return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCustomTrimming</Name>
				<Source><![CDATA[
    public void applyCustomTrimming(Excel.IWorkbookManager _templateManager, Excel.WorkbookSettingsManager _settingsManager, LedgerJournalTable _ledgerJournalTable)
    {
        if (_templateManager && _settingsManager && _ledgerJournalTable.CurrentOperationsTax == CurrentOperationsTax::None)
        {
            var settings = _settingsManager.DataConnectorSettings;
            var entity = ExportToExcelMetadataCache::getEntity(tableStr(AssetJournalLineEntity));

            if (entity && settings)
            {
                var bindings = settings.GetBindingsForEntity(entity.PublicEntityName, fieldStr(AssetJournalLineEntity, OffsetAccountType), fieldStr(DimensionCombinationEntity, MainAccount));

                for (int i = 0; i < bindings.get_Count(); i++)
                {
                    IDynamicsExtensionBinding binding = bindings.get_Item(i);
                    var tableBinding = binding as BindingInfo;

                    if (tableBinding)
                    {
                        var fields = tableBinding.GetFields(fieldStr(AssetJournalLineEntity, OffsetAccountType), fieldStr(DimensionCombinationEntity, MainAccount));
                        List columnsToRemove = new List(Types::Class);

                        for (int j = 0; j < fields.get_Count(); j++)
                        {
                            var field = fields.get_Item(j);
							// We check for the entity relation as we have two main accounts in the entity and we are hiding only the offset main account.
                            if (field.Name == fieldStr(AssetJournalLineEntity, OffsetAccountType)
                                || (field.Name == fieldStr(DimensionCombinationEntity, MainAccount) && field.EntityRelation == literalStr(AssetJournalLineOffsetLedgerDimensionCombination)))
                            {
                                columnsToRemove.addEnd(new Microsoft.Dynamics.Platform.Integration.Office.Column(field.Name, field.EntityName));
                            }
                        }

                        Microsoft.Dynamics.Platform.Integration.Office.Column[] columnsToRemoveArray = new Microsoft.Dynamics.Platform.Integration.Office.Column[columnsToRemove.elements()]();
                        ListEnumerator columnsToRemoveIterator = columnsToRemove.getEnumerator();
                        int counter = 0;

                        while (columnsToRemoveIterator.moveNext())
                        {
                            columnsToRemoveArray.Set(counter, columnsToRemoveIterator.current());
                            counter++;
                        }

                        _templateManager.RemoveColumns(tableBinding.Id, columnsToRemoveArray);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTemplates</Name>
				<Source><![CDATA[
    public void registerTemplates()
    {
        this.addTemplate(
            OfficeAppApplicationType::Excel,
            ExcelTemplateName,
            ExcelTemplateName,
            literalStr("@FixedAssets:FA_TemplateDescription_AssetJournalLineTemplate"),
            literalStr("@FixedAssets:FA_TemplateName_AssetJournalLineTemplate"),
            NoYes::No,
            NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerEntityName</Name>
				<Source><![CDATA[
    public DataEntityName headerEntityName()
    {
        return HeaderEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEntityName</Name>
				<Source><![CDATA[
    public DataEntityName lineEntityName()
    {
        return LineEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerJournalBatchNumberFieldName</Name>
				<Source><![CDATA[
    public FieldName headerJournalBatchNumberFieldName()
    {
        return HeaderEntityJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerDataAreaFieldName</Name>
				<Source><![CDATA[
    public FieldName headerDataAreaFieldName()
    {
        return HeaderEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineJournalBatchNumberFieldName</Name>
				<Source><![CDATA[
    public FieldName lineJournalBatchNumberFieldName()
    {
        return LineEntityJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDataAreaFieldName</Name>
				<Source><![CDATA[
    public FieldName lineDataAreaFieldName()
    {
        return LineEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendHeaderEntityFilters</Name>
				<Source><![CDATA[
    public FilterCollectionNode appendHeaderEntityFilters(FilterCollectionNode _headerFilter, ExportToExcelFilterTreeBuilder _headerFilterBuilder)
    {
        return _headerFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendLineEntityFilters</Name>
				<Source><![CDATA[
    public FilterCollectionNode appendLineEntityFilters(FilterCollectionNode _lineFilter, ExportToExcelFilterTreeBuilder _lineFilterBuilder)
    {
        return _lineFilterBuilder.and(_lineFilter, _lineFilterBuilder.areEqual(fieldStr(AssetJournalLineEntity, AccountType), LedgerJournalACType::FixedAssets));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>