<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalculate_ByWorker</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayCalculate_ByWorker extends RPayCalculate
{
    RPayAmount  totalSumOnHand, controlSumOnHand, totalAddSum, totalAmount;
    boolean     firstCalculation, lastEmployee;
    Set         setEmplCalculated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_CorrectionSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_CorrectionSum()
    {
        RPayAmount          correctionSum,
                            tmpAmount;

        if (firstCalculation)
        {
            controlSumOnHand = this.calcControlSumOnHand();

            if (controlSumOnHand < 0)
            {
                firstCalculation = false;
                return 0;
            }

            totalSumOnHand   = this.calcTotalSumOnHand();
            totalAddSum      = this.calcTotalAddSum();
            firstCalculation = false;
        }

        if (controlSumOnHand < 0)
        {
            return 0;
        }

        tmpAmount = this.calcCurrentSum();

        if (! lastEmployee)
        {
            if (totalAddSum)
            {
                tmpAmount = (tmpAmount * totalSumOnHand) / totalAddSum;
            }
            else
            {
                return 0;
            }

            tmpAmount   =  CurrencyExchangeHelper::amount(this.round(min(tmpAmount, controlSumOnHand)));
            totalAmount += tmpAmount;
        }
        else
        {
            tmpAmount = CurrencyExchangeHelper::amount(this.round(totalSumOnHand - totalAmount));
        }

        correctionSum = tmpAmount - this.calcCurrentSum(false);

        return correctionSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommon</Name>
				<Source><![CDATA[
    public void calcCommon(RPaySequence _paySequence  = 0,
                           NoYes        _errorMessage = NoYes::No)
    {
        RHRMEmplTable   emplTableLocal, emplTableLocal1;
        int         total, i;
        boolean     needCalc;

        if (needCheckModuleCalculate && ! this.canModuleCalculate())
        {
            throw info("@RUP387");
        }

        this.checkPostingProfiles(true);

        if (setEmplCalculated.in(emplTable.PayMainEmplId))
        {
            return;
        }

        emplTableLocal1.data(emplTable);

        select count(RecId) from emplTableLocal
            where emplTableLocal.PayMainEmplId == emplTableLocal1.EmployeeId;

        total = any2int(emplTableLocal.RecId);

        if (total == 1)
        {
            return;
        }

        while select EmployeeId from emplTableLocal
            where emplTableLocal.PayMainEmplId == emplTableLocal1.EmployeeId
        {
            if (this.calcEmplSumOnHand(emplTableLocal.EmployeeId) < 0)
            {
                needCalc = true;
                break;
            }
        }

        if (! needCalc)
        {
            return;
        }

        if (! emplTable.checkEmplBeforeCalc(payPeriod, _errorMessage, true))
        {
            return;
        }

        while select paySeqTable
            where paySeqTable.PayModuleCode == payModuleTable.PayModuleCode
        {
            lastEmployee     = false;
            firstCalculation = true;
            i                = 0;
            totalAmount      = 0;
            while select emplTableLocal
                where emplTableLocal.PayMainEmplId == emplTableLocal1.PayMainEmplId
            {
                i ++;
                lastEmployee = (i == total);
                emplTable.data(emplTableLocal);
                this.setSourceTable(emplTableLocal);
                this.calcSequence();
            }
            setEmplCalculated.add(emplTableLocal1.PayMainEmplId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcControlSumOnHand</Name>
				<Source><![CDATA[
    private RPayAmount calcControlSumOnHand()
    {
        RPayTrans   rPayTrans;
        RHRMEmplTable   emplTableLocal;

        select sum(Amount) from rPayTrans index hint PeriodEmplIdx
            where rPayTrans.PayPeriod     == payPeriod &&
                  rPayTrans.PayModuleCode != payModuleTable.PayModuleCode
        exists join emplTableLocal
            where emplTableLocal.EmployeeId    == rPayTrans.Emplid &&
                  emplTableLocal.PayMainEmplId == emplTable.PayMainEmplId;

        return rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurrentSum</Name>
				<Source><![CDATA[
    private RPayAmount calcCurrentSum(boolean _addSum = true)
    {
        RPayTrans           rPayTrans;
        RPayFundMember      rPayFundMember;
        RPayTable           rPayTable;

        select sum(Amount) from rPayTrans index hint PeriodEmplIdx
            where rPayTrans.PayPeriod     == payPeriod                    &&
                  rPayTrans.PayModuleCode != payModuleTable.PayModuleCode &&
                  rPayTrans.Emplid        == emplTable.EmployeeId
        exists join rPayFundMember
            where rPayFundMember.CounterUnit == payCounterCalcTable.NumFrom &&
                  rPayFundMember.PayCostType == rPayTrans.PayCtype
        exists join rPayTable
            where rPayTable.PayCtype       == rPayTrans.PayCtype     &&
                  (rPayTable.PayChargeType == RPayChargeType::AddSum ||
                  (_addSum ? false : true));

        return rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmpl</Name>
				<Source><![CDATA[
    public void calcEmpl(RHRMEmplId _emplId, RPaySequence _paySequence = 0)
    {
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange      queryBuildRange;
        RHRMEmplTable        emplTableLocal;
        int                  i;
        int                  dsCount = queryRun.query().dataSourceCount();
        RHRMEmplId               emplId;

        setPrefix(payModuleTable.PayModuleName);
        needCheckModuleCalculate = false;

        emplId = RHRMEmplTable::find(_emplId).PayMainEmplId;

        this.payPeriod(RPayParameters::payPeriod(emplId));
        payPeriodVirtual = this.payPeriod();

        if (payModuleTable.NeedDeleteBeforeCalc)
        {
            ttsbegin;

            delete_from payTrans
                where payTrans.PayPeriod     == payPeriod                    &&
                      payTrans.PayModuleCode == payModuleTable.PayModuleCode &&
                      payTrans.SourceTableId                                 &&
                      payTrans.SourceRecId                                   &&
                      payTrans.PayPeriod     == payTrans.CorrectedPeriod
            exists join emplTableLocal
                where emplTableLocal.EmployeeId    == payTrans.Emplid &&
                      emplTableLocal.PayMainEmplId == emplId;

            ttscommit;
        }

        for (i = 1; i <= dsCount ; i ++)
        {
           queryRun.query().dataSourceNo(i).clearRanges();
        }

        queryBuildDataSource = queryRun.query().dataSourceTable(tableNum(RHRMEmplTable));
        queryBuildRange      = queryBuildDataSource.addRange(fieldNum(RHRMEmplTable, EmployeeId));
        queryBuildRange.value(queryValue(emplId));

        while (queryRun.next())
        {
            emplTableLocal = queryRun.get(tableNum(RHRMEmplTable));
            if (emplTableLocal.EmployeeId == emplId)
            {
                this.setSourceTable(emplTableLocal);
                this.calcCommon(_paySequence, NoYes::Yes);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmplSumOnHand</Name>
				<Source><![CDATA[
    private RPayAmount calcEmplSumOnHand(RHRMEmplId _emplId)
    {
        RPayTrans   rPayTrans;

        select sum(Amount) from rPayTrans
            index hint PeriodEmplIdx
            where rPayTrans.PayPeriod     == payPeriod                    &&
                  rPayTrans.PayModuleCode != payModuleTable.PayModuleCode &&
                  rPayTrans.Emplid        == _emplId;

        return rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQuery</Name>
				<Source><![CDATA[
    public void calcQuery(RPaySequence _paySequence = 0)
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        int                     current;
        int                     dsCount = queryRun.query().dataSourceCount();

        if (! queryRun.interactive())
        {
            for (current = 1; current <= dsCount ; current ++)
            {
                queryRun.query().dataSourceNo(current).clearRanges();
            }
        }

        queryBuildDataSource = queryRun.query().dataSourceTable(tableNum(RHRMEmplTable));
        queryBuildRange      = queryBuildDataSource.addRange(fieldNum(RHRMEmplTable, PayMainEmplId));
        queryBuildRange.value(#RPayMainEmplId(queryBuildDataSource.name()));
        queryBuildRange.status(RangeStatus::Hidden);
        super(_paySequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalAddSum</Name>
				<Source><![CDATA[
    private RPayAmount calcTotalAddSum()
    {
        RPayTrans           rPayTrans;
        RPayFundMember      rPayFundMember;
        RHRMEmplTable       emplTableLocal;
        RPayTable           rPayTable;

        select sum(Amount) from rPayTrans index hint PeriodEmplIdx
            where rPayTrans.PayPeriod     == payPeriod &&
                  rPayTrans.PayModuleCode != payModuleTable.PayModuleCode
        exists join emplTableLocal
            where emplTableLocal.EmployeeId    == rPayTrans.Emplid &&
                  emplTableLocal.PayMainEmplId == emplTable.PayMainEmplId
        exists join rPayFundMember
            where rPayFundMember.CounterUnit == payCounterCalcTable.NumFrom &&
                  rPayFundMember.PayCostType == rPayTrans.PayCtype
        exists join rPayTable
            where rPayTable.PayCtype      == rPayTrans.PayCtype &&
                  rPayTable.PayChargeType == RPayChargeType::AddSum;

        return rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalSumOnHand</Name>
				<Source><![CDATA[
    private RPayAmount calcTotalSumOnHand()
    {
        RPayTrans           rPayTrans;
        RPayFundMember      rPayFundMember;
        RHRMEmplTable           emplTableLocal;

        select sum(Amount) from rPayTrans index hint PeriodEmplIdx
            where rPayTrans.PayPeriod     == payPeriod &&
                  rPayTrans.PayModuleCode != payModuleTable.PayModuleCode
        exists join rPayFundMember
            where rPayFundMember.CounterUnit == payCounterCalcTable.NumFrom &&
                  rPayFundMember.PayCostType == rPayTrans.PayCtype
        exists join emplTableLocal
             where emplTableLocal.EmployeeId    == rPayTrans.Emplid &&
                   emplTableLocal.PayMainEmplId == emplTable.PayMainEmplId;

        return rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransValue</Name>
				<Source><![CDATA[
    public void initPayTransValue()
    {
        super();

        if (RPayTable::find(payTrans.PayCtype).PayChargeType == RPayChargeType::Deduction)
        {
            payTrans.Amount = - payTrans.Amount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RPayModuleTable _payModuleTable)
    {
        super(_payModuleTable);

        setEmplCalculated = new Set(Types::String);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
