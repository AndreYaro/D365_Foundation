<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateServiceBudgetPlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateServiceBudgetPlan</c> class is used to generate budget plan data from another budget plan.
/// </summary>
public class BudgetPlanGenerateServiceBudgetPlan extends BudgetPlanGenerateService
{
    BudgetPlanGenerateContractBudgetPlan budgetPlanGenerateContractBudgetPlan;
    boolean                              useLineCurrency;
    BudgetPlanLine budgetPlanLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// The instance of <c>Query</c> class.
    /// </returns>
    protected Query createQuery()
    {
        Query                   query;
        QueryBuildDataSource    budgetPlanHeaderQueryBuildDataSource;
        QueryBuildDataSource    budgetPlanLineQueryBuildDataSource;

        query = new Query(SysOperationHelper::base64Decode(budgetPlanGenerateContractBudgetPlan.parmQueryBudgetPlanGenerateBudgetPlan()));

        budgetPlanHeaderQueryBuildDataSource = query.dataSourceTable(tableNum(BudgetPlanHeader));

        SysQuery::findOrCreateRange(budgetPlanHeaderQueryBuildDataSource, fieldNum(BudgetPlanHeader, RecId)).Value(SysQuery::value(budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanHeaderRecId()));

        budgetPlanLineQueryBuildDataSource = query.dataSourceTable(tableNum(BudgetPlanLine));

        SysQuery::findOrCreateRange(budgetPlanLineQueryBuildDataSource, fieldNum(BudgetPlanLine, BudgetPlanScenario)).Value(SysQuery::value(budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanScenarioRecId()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllMatchingBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records in the <c>BudgetPlanLine</c> table that match the values in the temp table buffer passed as an argument.
    /// </summary>
    /// <param name="_budgetPlanLineDataGenerationTmp">
    /// The <c>BudgetPlanLineDataGenerationTmp</c> record used to find an existing record in
    /// the <c>BudgetPlanLine</c> table.
    /// </param>
    protected void deleteAllMatchingBudgetPlanLine(BudgetPlanLineDataGenerationTmp _budgetPlanLineDataGenerationTmp)
    {
        BudgetPlanLine       budgetPlanLineLocal;

        // Delete any existing record matching the temp table record passed in.
        delete_from budgetPlanLineLocal
            where budgetPlanLineLocal.BudgetPlanHeader         == _budgetPlanLineDataGenerationTmp.BudgetPlanHeader
                && budgetPlanLineLocal.BudgetPlanScenario      == _budgetPlanLineDataGenerationTmp.BudgetPlanScenario
                && budgetPlanLineLocal.LedgerDimension         == _budgetPlanLineDataGenerationTmp.LedgerDimension
                && budgetPlanLineLocal.EffectiveDate           == _budgetPlanLineDataGenerationTmp.EffectiveDate
                && budgetPlanLineLocal.BudgetClass             == _budgetPlanLineDataGenerationTmp.BudgetClass
                && budgetPlanLineLocal.AssetId                 == _budgetPlanLineDataGenerationTmp.AssetId
                && budgetPlanLineLocal.ProjectId               == _budgetPlanLineDataGenerationTmp.ProjectId
                && budgetPlanLineLocal.PositionScenario        == _budgetPlanLineDataGenerationTmp.PositionForecastScenario
                && budgetPlanLineLocal.ProposedAsset           == _budgetPlanLineDataGenerationTmp.BudgetPlanProposedAsset
                && budgetPlanLineLocal.ProposedProject         == _budgetPlanLineDataGenerationTmp.BudgetPlanProposedProject
                && budgetPlanLineLocal.SourceDataAreaId        == _budgetPlanLineDataGenerationTmp.SourceDataAreaId
                && budgetPlanLineLocal.TransactionCurrencyCode == _budgetPlanLineDataGenerationTmp.TransactionCurrencyCode
                && budgetPlanLineLocal.ForecastModelId         == _budgetPlanLineDataGenerationTmp.ForecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecordInTmpTable</Name>
				<Source><![CDATA[
    protected void findRecordInTmpTable(BudgetPlanLineDataGenerationTmp _budgetPlanLineDataGenerationTmp)
    {
        // All fields in the BudgetPlanLineIdx index are specified as where clauses in index order to improve read performance.
        select firstonly forupdate budgetPlanLineDataGenerationTmpBulkInsert
            where budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanHeader           == _budgetPlanLineDataGenerationTmp.BudgetPlanHeader
                && budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanScenario        == _budgetPlanLineDataGenerationTmp.BudgetPlanScenario
                && budgetPlanLineDataGenerationTmpBulkInsert.LedgerDimension           == _budgetPlanLineDataGenerationTmp.LedgerDimension
                && budgetPlanLineDataGenerationTmpBulkInsert.EffectiveDate             == _budgetPlanLineDataGenerationTmp.EffectiveDate
                && budgetPlanLineDataGenerationTmpBulkInsert.BudgetClass               == _budgetPlanLineDataGenerationTmp.BudgetClass
                && budgetPlanLineDataGenerationTmpBulkInsert.AssetId                   == _budgetPlanLineDataGenerationTmp.AssetId
                && budgetPlanLineDataGenerationTmpBulkInsert.HcmPosition               == _budgetPlanLineDataGenerationTmp.HcmPosition
                && budgetPlanLineDataGenerationTmpBulkInsert.ProjectId                 == _budgetPlanLineDataGenerationTmp.ProjectId
                && budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanProposedAsset   == _budgetPlanLineDataGenerationTmp.BudgetPlanProposedAsset
                && budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanProposedProject == _budgetPlanLineDataGenerationTmp.BudgetPlanProposedProject
                && budgetPlanLineDataGenerationTmpBulkInsert.SourceDataAreaId          == _budgetPlanLineDataGenerationTmp.SourceDataAreaId
                && budgetPlanLineDataGenerationTmpBulkInsert.TransactionCurrencyCode   == _budgetPlanLineDataGenerationTmp.TransactionCurrencyCode
                && budgetPlanLineDataGenerationTmpBulkInsert.ForecastModelId           == _budgetPlanLineDataGenerationTmp.ForecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the data in the budget plan tables.
    /// </summary>
    protected void generateData()
    {
        Query                           userDefinedQuery;
        QueryRun                        userDefinedQueryRun;
        BudgetPlanHeader                budgetPlanHeaderLocal;
        BudgetPlanHeader                budgetPlanHeader;
        boolean                         isValidQuery;
        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmp;
        BudgetCycle                     sourceBudgetCycle;
        BudgetCycle                     destinationBudgetCycle;
        boolean                         isEquivalentBudgetCycles;
        LedgerDimensionBudgetPlanning   activeSourceLedgerDimension;

        #OCCRetryCount

        userDefinedQuery = this.createQuery();

        try
        {
            ttsBegin;

            // Creating or finding the Budget plan header record.
            budgetPlanHeaderLocal = this.createOrUpdateBudgetPlanHeader();

            this.parmUseLineCurrency(BudgetPlanLayoutHelper::doesLayoutContainEditableCurrencyElement(budgetPlanHeaderLocal.Layout));

            userDefinedQueryRun   = new QueryRun(userDefinedQuery);

            sourceBudgetCycle = BudgetCycle::find(BudgetPlanningProcess::find(budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanBudgetPlanProcess()).BudgetCycle);
            destinationBudgetCycle = BudgetCycle::find(BudgetPlanningProcess::find(budgetPlanGenerateContractBudgetPlan.parmTargetBudgetPlanningProcess()).BudgetCycle);
            isEquivalentBudgetCycles = this.validateEquivalentBudgetCycles(sourceBudgetCycle, destinationBudgetCycle);

            while (userDefinedQueryRun.next())
            {
                isValidQuery         = true;
                budgetPlanHeader     = userDefinedQueryRun.get(tableNum(BudgetPlanHeader)) as BudgetPlanHeader;
                budgetPlanLine       = userDefinedQueryRun.get(tableNum(BudgetPlanLine)) as BudgetPlanLine;

                budgetPlanLineDataGenerationTmp.data(this.setBudgetPlanLineDataGenerationTmp(budgetPlanHeaderLocal.RecId));
                budgetPlanLineDataGenerationTmp.SourceLedgerDimension = budgetPlanLine.LedgerDimension;

                // Sync the source ledger dimension to the active structure.
                activeSourceLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimFromLedgerDim(budgetPlanLine.LedgerDimension);

                if (budgetPlanGenerateContractBudgetPlan.parmTargetDimensionDefault())
                {
                    budgetPlanLineDataGenerationTmp.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimForDefaultDim(budgetPlanGenerateContractBudgetPlan.parmTargetDimensionDefault(), activeSourceLedgerDimension);
                }
                else
                {
                    budgetPlanLineDataGenerationTmp.LedgerDimension = activeSourceLedgerDimension;
                }

                // Check to see if the source and target budget cycles have the same start and end month/day and the same number of operating periods
                if (isEquivalentBudgetCycles)
                {
                    budgetPlanLineDataGenerationTmp.EffectiveDate = this.calculateBudgetPlanLineEffectiveDate(sourceBudgetCycle, destinationBudgetCycle, budgetPlanLine.EffectiveDate);
                }

                budgetPlanLineDataGenerationTmp.TransactionCurrencyAmount = budgetPlanLine.TransactionCurrencyAmount;
                budgetPlanLineDataGenerationTmp.SourceEffectiveDate = budgetPlanLine.EffectiveDate;
                budgetPlanLineDataGenerationTmp.TransactionCurrencyCode   = budgetPlanLine.TransactionCurrencyCode;
                budgetPlanLineDataGenerationTmp.BudgetClass               = budgetPlanLine.BudgetClass;
                budgetPlanLineDataGenerationTmp.Comment                   = budgetPlanLine.Comment;
                budgetPlanLineDataGenerationTmp.IsRecurring               = budgetPlanLine.IsRecurring;
                budgetPlanLineDataGenerationTmp.IsNewRequest              = budgetPlanLine.IsNewRequest;
                budgetPlanLineDataGenerationTmp.Quantity                  = budgetPlanLine.Quantity;
                budgetPlanLineDataGenerationTmp.UnitPrice                 = budgetPlanLine.TransactionUnitPrice;
                budgetPlanLineDataGenerationTmp.UnitOfMeasure             = budgetPlanLine.UnitOfMeasure;
                budgetPlanLineDataGenerationTmp.AssetId                   = budgetPlanLine.AssetId;
                budgetPlanLineDataGenerationTmp.PositionForecastScenario  = budgetPlanLine.PositionScenario;
                budgetPlanLineDataGenerationTmp.HcmPosition               = budgetPlanLine.Position;
                budgetPlanLineDataGenerationTmp.ProjectId                 = budgetPlanLine.ProjectId;
                budgetPlanLineDataGenerationTmp.BudgetPlanProposedAsset   = budgetPlanLine.ProposedAsset;
                budgetPlanLineDataGenerationTmp.BudgetPlanProposedProject = budgetPlanLine.ProposedProject;
                budgetPlanLineDataGenerationTmp.SourceDataAreaId          = budgetPlanLine.SourceDataAreaId;
                budgetPlanLineDataGenerationTmp.ForecastModelId           = budgetPlanLine.ForecastModelId;

                if (this.parmUseLineCurrency())
                {
                    currencyCode = budgetPlanLine.TransactionCurrencyCode;
                }

                this.createOrUpdateBudgetPlanLine(budgetPlanLineDataGenerationTmp);
            }

            if (isValidQuery)
            {
                this.bulkInsertOrUpdateBudgetPlanLines();
            }

            if (!isValidQuery || !isBudgetPlanLineCreated)
            {
                throw error(this.recordNotFoundErrorMessage());
            }

            if (budgetPlanHeaderLocal)
            {
                this.showTaskCompleteMessage();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            error("@SYS78886");
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserDefinedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// The instance of <c>Query</c> class.
    /// </returns>
    public Query getUserDefinedQuery()
    {
        return this.createQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateContract</Name>
				<Source><![CDATA[
    public BudgetPlanGenerateContract parmBudgetPlanGenerateContract(BudgetPlanGenerateContract _budgetPlanGenerateContract = budgetPlanGenerateContract)
    {
        super(_budgetPlanGenerateContract);

        budgetPlanGenerateContractBudgetPlan = _budgetPlanGenerateContract as BudgetPlanGenerateContractBudgetPlan;

        return budgetPlanGenerateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanHeader</Name>
				<Source><![CDATA[
    protected BudgetPlanHeader setBudgetPlanHeader()
    {
        BudgetPlanHeader    budgetPlanHeader;
        BudgetPlanningStage budgetPlanningStage;

        budgetPlanHeader = super();

        // Set the BudgetPlanningStage to last stage for historical plans
        if (budgetPlanGenerateContract.parmTargetIsHistorical() == NoYes::Yes)
        {
            budgetPlanningStage = BudgetPlanningWorkflowSetup::getLastPlanningStage(
                                    budgetPlanGenerateContract.parmTargetBudgetPlanningProcess(),
                                    budgetPlanGenerateContract.parmTargetResponsibilityCenter());

            budgetPlanHeader.BudgetPlanningStage = budgetPlanningStage.RecId;
            budgetPlanHeader.Layout              = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                        budgetPlanHeader.BudgetPlanningProcess,
                                                        budgetPlanHeader.BudgetingOrganization,
                                                        budgetPlanHeader.BudgetPlanningStage).Layout;
        }

        budgetPlanHeader.IsHistorical        = budgetPlanGenerateContract.parmTargetIsHistorical();
        budgetPlanHeader.DocumentStatus      = budgetPlanGenerateContract.parmTargetIsHistorical() == NoYes::Yes ? BudgetPlanStatus::Finalized : BudgetPlanStatus::Draft;
        budgetPlanHeader.WorkflowStatus      = budgetPlanGenerateContract.parmTargetIsHistorical() == NoYes::Yes ? BudgetPlanWorkflowStatus::Approved : BudgetPlanWorkflowStatus::NotSubmitted;

        if (budgetPlanGenerateContractBudgetPlan.parmSourceIsBudgetPlanDescriptionIncluded())
        {
            budgetPlanHeader.Description = BudgetPlanHeader::find(budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanHeaderRecId()).Description;
        }

        if (budgetPlanGenerateContractBudgetPlan.parmSourceIsBudgetPlanRevenueSummaryIncluded())
        {
            budgetPlanHeader.RevenueSummary = BudgetPlanHeader::find(budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanHeaderRecId()).RevenueSummary;
        }

        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the process of data generation.
    /// </summary>
    /// <param name="_contract">
    /// An object of <c>BudgetPlanGenerateContractBudgetPlan</c> class.
    /// </param>
    public void startProcess(BudgetPlanGenerateContractBudgetPlan _contract)
    {
        BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanGenerateServiceBudgetPlan));
        using (SysInstrumentationActivityContext budgetPlanGenerateServiceBudgetPlanContext = budgetPlanLogger.budgetPlanGeneration().budgetPlanContext(_contract))
        {
            this.parmBudgetPlanGenerateContract(_contract);
            this.initialize();
            this.generateData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanGenerateServiceBudgetPlan construct()
    {
        return new BudgetPlanGenerateServiceBudgetPlan();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseLineCurrency</Name>
				<Source><![CDATA[
    public boolean parmUseLineCurrency(boolean _useLineCurrency = useLineCurrency)
    {
        useLineCurrency = _useLineCurrency;

        return useLineCurrency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>