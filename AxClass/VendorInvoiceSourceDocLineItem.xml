<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendorInvoiceSourceDocLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendorInvoiceSourceDocLineItem</c> class provides the information to handle the
///    distributions and sub-ledger journal account entries for an invoice header.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_VendorInvoice), SourceDocumentLine_VendorInvoice::VendorInvoiceTotalsLine)]
public class VendorInvoiceSourceDocLineItem extends SourceDocumentLineItem
    implements SourceDocumentIChargeSource,
               SourceDocumentIDataProvider,
               SourceDocumentLineItemIProductionFlow,
               SourceDocumentIReportingExchRate
{
    VendInvoiceMap vendInvoiceMap;
    boolean totalsCalculated;
    Amount purchBalance;
    Amount roundOffAmount;
    Amount cashDiscountAmount;
    Amount totalDiscountAmount;

    VendInvoiceInfoTable vendInvoiceInfoTable;
    MarkupTrans markupTrans;
    VendInvoiceJour vendInvoiceJour;

    boolean isAdvancedInvoice;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault calculateDefaultDimension()
    {
        return vendInvoiceMap.VendInvoiceMap::defaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap sourceDocumentAmountMap = SourceDocumentAmountMap::construct();
        SourceDocumentAmount sourceDocumentAmount;
        Amount lineTotalDiscountAmount;
        Amount totalDiscountRoundingAmount;

        this.initializeAmounts();

        if (cashDiscountAmount)
        {
            sourceDocumentAmount = SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(), cashDiscountAmount, MonetaryAmount::CashDiscount);
            sourceDocumentAmountMap.insert(sourceDocumentAmount);
        }

        if (totalDiscountAmount)
        {
            lineTotalDiscountAmount = this.getLineTotalDiscountAmount();
            totalDiscountRoundingAmount = totalDiscountAmount - lineTotalDiscountAmount;

            if (totalDiscountRoundingAmount)
            {
                sourceDocumentAmount = SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(), totalDiscountRoundingAmount, MonetaryAmount::TotalDiscountRounding);
                sourceDocumentAmountMap.insert(sourceDocumentAmount);
            }
        }

        if (roundOffAmount)
        {
            sourceDocumentAmount = SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(), roundOffAmount, MonetaryAmount::RoundingAmount);
            sourceDocumentAmountMap.insert(sourceDocumentAmount);
        }

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SourceDocumentLineItem</c> class documents a business event.
    /// </summary>
    /// <returns>
    /// true if the <c>SourceDocumentLineItem</c> class documents a business event; otherwise, false.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        return new BusinessEvent(enumNum(BusinessEvent_VendorInvoice),BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineTotalDiscountAmount</Name>
				<Source><![CDATA[
    private Amount getLineTotalDiscountAmount()
    {
        SourceDocumentLine sourceDocumentLineLocal;
        SourceDocumentLineItem sourceDocumentLineItem;
        SourceDocumentAmountMapEnumerator invoiceLineAmountMapEnumerator;
        SourceDocumentAmount invoiceLineSourceDocumentAmount;
        Amount lineTotalDiscountAmount;

        if (!totalDiscountAmount)
        {
            return 0;
        }

        while select sourceDocumentLineLocal
            where sourceDocumentLineLocal.SourceDocumentHeader == sourceDocumentLine.SourceDocumentHeader
               && sourceDocumentLineLocal.TypeEnumValue == SourceDocumentLine_VendorInvoice::VendorInvoiceLine
               && sourceDocumentLineLocal.RecId != sourceDocumentLine.RecId
        {
            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLineLocal);

            invoiceLineAmountMapEnumerator = sourceDocumentLineItem.parmSourceDocumentAmountMap().getEnumerator();

            while (invoiceLineAmountMapEnumerator.moveNext())
            {
                invoiceLineSourceDocumentAmount = invoiceLineAmountMapEnumerator.currentValue();

                switch (invoiceLineSourceDocumentAmount.parmMonetaryAmount())
                {
                    case MonetaryAmount::TotalDiscount,
                         MonetaryAmount::TotalDiscountVariance:

                        lineTotalDiscountAmount += invoiceLineSourceDocumentAmount.parmAmount();
                        break;
                }
            }
        }

        return lineTotalDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMainAccDerivationInputChanged</Name>
				<Source><![CDATA[
    public boolean hasMainAccDerivationInputChanged()
    {
        boolean hasMainAccDerivationInputChanged;

        // Capture case where doing deep copy of invoice. Status is always draft
        if (this.parmOriginSourceDocumentLineItem() && this.parmSourceDocumentLine().AccountingStatus == SourceDocumentLineAccountingStatus::Draft)
        {
            hasMainAccDerivationInputChanged = false;
        }
        else
        {
            hasMainAccDerivationInputChanged = super();
        }

        return hasMainAccDerivationInputChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the discount amount.
    /// </summary>
    private void initializeAmounts()
    {
        PurchTotals purchTotals;

        if (!totalsCalculated)
        {
            totalsCalculated = true;

            if (vendInvoiceMap.TableId == tableNum(VendInvoiceInfoTable))
            {
                VendInvoiceInfoTable localVendInvoiceInfoTable = vendInvoiceMap;

                purchTotals = PurchTotals::newParmTable(localVendInvoiceInfoTable, // parmTable
                                                        PurchUpdate::All, // specQty
                                                        localVendInvoiceInfoTable.ParmId, // parmId
                                                        '', // sumPurchId
                                                        localVendInvoiceInfoTable.Ordering, // documentStatus
                                                        PurchTotalsCachingMethod::Reuse); // shareInstances (override default)

                //Turn off discount calculation on advance invoice
                if (localVendInvoiceInfoTable.InvoiceType == PurchInvoiceType::VendorAdvance)
                {
                    purchTotals.parmKeepEndDisc(true);
                }

                purchTotals.calc(true, false);

                roundOffAmount = purchTotals.invoiceRoundOff();
                purchBalance = purchTotals.purchBalance();
                totalDiscountAmount = -purchTotals.endDisc();

                if (purchTotals.cashDiscAmount() && TaxParameters::canApplyCashDiscOnInvoice_ES())
                {
                    cashDiscountAmount = purchTotals.cashDiscAmount();
                }
            }
            else if (vendInvoiceMap.TableId == tableNum(VendInvoiceJour))
            {
                roundOffAmount = vendInvoiceJour.InvoiceRoundOff;
                purchBalance = vendInvoiceJour.SalesBalance;
                totalDiscountAmount = -vendInvoiceJour.EndDisc;

                if (vendInvoiceJour.CashDisc && TaxParameters::canApplyCashDiscOnInvoice_ES())
                {
                    cashDiscountAmount = vendInvoiceJour.CashDisc;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables of the <c>VendorInvoiceSourceDocLineItem</c> class.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// A <c>SourceDocumentLineImplementation</c> table to use to initialize the instance variables.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects needed by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        if (_sourceDocumentLineImplementation.TableId == tableNum(VendInvoiceInfoTable))
        {
            vendInvoiceInfoTable = _sourceDocumentLineImplementation;
            vendInvoiceMap = vendInvoiceInfoTable;
            isAdvancedInvoice = vendInvoiceInfoTable.isAdvance();
        }
        else if (_sourceDocumentLineImplementation.TableId == tableNum(VendInvoiceJour))
        {
            vendInvoiceJour = _sourceDocumentLineImplementation;
            vendInvoiceMap = vendInvoiceJour;
            isAdvancedInvoice = vendInvoiceJour.isAdvance();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOriginSourceDocumentLineItem</Name>
				<Source><![CDATA[
    protected void initOriginSourceDocumentLineItem()
    {
        VendInvoiceInfoTable originVendInvoiceInfoTable;

        if (vendInvoiceMap.TableId != tableNum(VendInvoiceInfoTable))
        {
            return;
        }

        if (vendInvoiceInfoTable.ParmId)
        {
            // copy distributions from saved.

            select * from originVendInvoiceInfoTable where
                originVendInvoiceInfoTable.TableRefId == vendInvoiceInfoTable.TableRefId &&
                originVendInvoiceInfoTable.ParmId == '';
        }
        else
        {
            // copy distributions from the active image

            select * from originVendInvoiceInfoTable where
                originVendInvoiceInfoTable.TableRefId == vendInvoiceInfoTable.TableRefId &&
                originVendInvoiceInfoTable.ParmId != '';
        }

        if (originVendInvoiceInfoTable.RecId != 0)
        {
            originSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(originVendInvoiceInfoTable);
            isCopyOfOriginSourceDocumentLineItem = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeInputAmount</Name>
				<Source><![CDATA[
    public Amount parmChargeInputAmount()
    {
        Amount chargeInputAmount;

        if (!totalsCalculated)
        {
            this.initializeAmounts();
        }

        chargeInputAmount = purchBalance;

        return chargeInputAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeQuantity</Name>
				<Source><![CDATA[
    public Qty parmChargeQuantity()
    {
        return 0; //MarkupTrans attached to this SourceDocumentLine are not allowed to have qty.
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeSource</Name>
				<Source><![CDATA[
    public Common parmChargeSource(Common _markupTrans = markupTrans)
    {
        markupTrans = _markupTrans;
        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompletedSourceRelationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the table Id which owns the source document line after completion/posting.
    /// </summary>
    /// <returns>
    /// The table Id which owns the source document line after completion/posting.
    /// </returns>
    public TableId parmCompletedSourceRelationType()
    {
        return tableNum(VendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        return vendInvoiceMap.accDistributionTemplateRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInProcessSourceRelationType</Name>
				<Source><![CDATA[
    public TableId parmInProcessSourceRelationType()
    {
        return tableNum(VendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTaxInChargeInputAmountIncluded</Name>
				<Source><![CDATA[
    public boolean parmIsTaxInChargeInputAmountIncluded()
    {
        return vendInvoiceMap.isInclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmId</Name>
				<Source><![CDATA[
    public ParmId parmParmId()
    {
        if (vendInvoiceMap.TableId != tableNum(VendInvoiceInfoTable))
        {
            return '';
        }

        return vendInvoiceInfoTable.ParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanReference</Name>
				<Source><![CDATA[
    public LeanProductionFlowReferenceRefRecId parmPlanReference()
    {
        PurchLine purchLine;
        VendInvoiceInfoTable localVendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceTrans vendInvoiceTrans;
        VendInvoiceJour localVendInvoiceJour;

        if (vendInvoiceMap.TableId == tableNum(VendInvoiceInfoTable))
        {
            // This assumes that matching is restricted to one production flow only.
            // No matter which line we retrieve, we will get the same production flow.

            localVendInvoiceInfoTable = vendInvoiceMap;

            select firstonly PlanReference from purchLine
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == localVendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == localVendInvoiceInfoTable.TableRefId
                    && vendInvoiceInfoLine.PurchLineRecId == purchLine.RecId;
        }
        else if (vendInvoiceMap.TableId == tableNum(VendInvoiceJour))
        {
            localVendInvoiceJour = vendInvoiceMap;

            select firstonly PlanReference from purchLine
                exists join vendInvoiceTrans
                    where vendInvoiceTrans.PurchID == localVendInvoiceJour.PurchId
                        && vendInvoiceTrans.InvoiceId == localVendInvoiceJour.InvoiceId
                        && vendInvoiceTrans.InvoiceDate == localVendInvoiceJour.InvoiceDate
                        && vendInvoiceTrans.NumberSequenceGroup == localVendInvoiceJour.NumberSequenceGroup
                        && vendInvoiceTrans.InternalInvoiceId == localVendInvoiceJour.InternalInvoiceId
                        && purchLine.InventTransId == vendInvoiceTrans.InventTransId;
        }
        return purchLine.PlanReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableRefId</Name>
				<Source><![CDATA[
    public TradeLineRefId parmTableRefId()
    {
        if (vendInvoiceMap.TableId != tableNum(VendInvoiceInfoTable))
        {
            return '';
        }

        return vendInvoiceInfoTable.TableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return vendInvoiceMap.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useOriginalDistributionAmount</Name>
				<Source><![CDATA[
    public boolean useOriginalDistributionAmount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyExchangeRate1</Name>
				<Source><![CDATA[
    public ReportingCurrencyExchRate parmReportingCurrencyExchangeRate1()
    {
        return vendInvoiceMap.VendInvoiceMap::parmReportingCurrencyExchangeRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a default exchange rate 1 for the currency.
    /// If it is required to differentiate currencies between amounts, use the <c>SourceDocumentAmount</c> class.
    /// </summary>
    /// <returns>
    /// An exchange rate.
    /// </returns>
    public ExchRate parmExchangeRate1()
    {
        return vendInvoiceMap.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a default exchange rate 2 for the currency.
    /// If it is required to differentiate currencies between amounts, use the <c>SourceDocumentAmount</c> class.
    /// </summary>
    /// <returns>
    /// An exchange rate.
    /// </returns>
    public ExchrateSecondary parmExchangeRate2()
    {
        return vendInvoiceMap.ExchRateSecondary;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>