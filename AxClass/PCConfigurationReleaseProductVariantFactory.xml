<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCConfigurationReleaseProductVariantFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Factory class for creating and releasing product variants for product configuration.
/// </summary>
class PCConfigurationReleaseProductVariantFactory
{
    PCConfigurationProductVariantFactory    productVariantFactory;
    PCVariantConfiguration                  variantConfiguration;
    PCExecuteSupplyLocation                 supplyLocation;

    InventDim   demandInventDim;
    InventDim   supplyInventDim;
    List        releaseLegalEntities;
    InventTable inventTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCConfigurationReleaseProductVariantFactory construct()
    {
        return new PCConfigurationReleaseProductVariantFactory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVariantFactory   = PCConfigurationProductVariantFactory::construct();
        supplyLocation          = PCExecuteSupplyLocation::construct();
        releaseLegalEntities    = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseLegalEntities</Name>
				<Source><![CDATA[
    public List parmReleaseLegalEntities(List _releaseLegalEntities = releaseLegalEntities)
    {
        releaseLegalEntities = _releaseLegalEntities;

        return releaseLegalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductVariantFactory</Name>
				<Source><![CDATA[
    public PCConfigurationProductVariantFactory parmProductVariantFactory(PCConfigurationProductVariantFactory _productVariantFactory = productVariantFactory)
    {
        productVariantFactory = _productVariantFactory;

        return productVariantFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDemandInventDim</Name>
				<Source><![CDATA[
    public InventDim parmDemandInventDim(InventDim _demandInventDim = demandInventDim)
    {
        demandInventDim = _demandInventDim;

        return demandInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSupplyInventDim</Name>
				<Source><![CDATA[
    public InventDim parmSupplyInventDim(InventDim _supplyInventDim = supplyInventDim)
    {
        supplyInventDim = _supplyInventDim;

        return supplyInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVariantConfiguration</Name>
				<Source><![CDATA[
    public PCVariantConfiguration parmVariantConfiguration(PCVariantConfiguration _variantConfiguration = variantConfiguration)
    {
        variantConfiguration = _variantConfiguration;

        return variantConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDistinctProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a distinct product variant.
    /// </summary>
    /// <param name = "_inventTable">An item.</param>
    /// <param name = "_demandInventDim">The demand invent dimension.</param>
    /// <param name = "_configurationName">The suggested configuration name.</param>
    public void createDistinctProductVariant(
        InventTable                         _inventTable,
        InventDim                           _demandInventDim,
        PCConstraintBasedConfigurationName  _configurationName)
    {
        RefRecId                variantConfigurationRecId;
        InventDimId             generatedInventDimId;
        EcoResConfigurationName configurationName;
        EcoResProductMaster     productMaster = EcoResProductMaster::find(_inventTable.Product);

        demandInventDim = _demandInventDim;
        inventTable     = _inventTable;

        // first we need to create the new product variant in the demand company
        changecompany(demandInventDim.company())
        {
            // Result is returned as a RecId instead of as a buffer since a super-sub type table buffer loses information when passed back in a container
            [variantConfigurationRecId, generatedInventDimId, configurationName] = productVariantFactory.createVariant(productMaster, _inventTable.ItemId, demandInventDim.InventDimId, _configurationName);

            variantConfiguration = PCProductConfiguration::find(variantConfigurationRecId);

            demandInventDim = this.updateInventDim(demandInventDim, configurationName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseCreatedProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the created variant to any aditional legal entities, defined in the legal entity chain.
    /// </summary>
    /// <param name = "_demandInventDim">The demand inventory dimension.</param>
    /// <param name = "_inventQuantity">Inventory quantity.</param>
    /// <param name = "_issueDate">Issue date.</param>
    public void releaseCreatedProductVariant(
        InventDim                           _demandInventDim,
        InventQty                           _inventQuantity,
        TransDate                           _issueDate)
    {
        ListEnumerator  le;
        InventDim       inventDim;

        supplyInventDim = this.updateInventDim(supplyInventDim, demandInventDim.configId);

        //Use the legal entity chain which has been created on PCExecuteVariantConfiguration.setupSupplyLocation().
        le = this.parmReleaseLegalEntities().getEnumerator();

        // release the variant all legal entities in the chain
        if (this.isMultiCompanyScenario())
        {
            while (le.moveNext())
            {
                inventDim = le.current();

                if (inventdim.dataAreaId != demandInventDim.dataAreaId)
                {
                    changecompany(inventDim.company())
                    {
                        productVariantFactory.ensureVariantIsReleased(EcoResDistinctProductVariant::find(variantConfiguration.DistinctProductVariant));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory dimension.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimension record.
    /// </param>
    /// <param name="_configurationName">
    /// A configuration name.
    /// </param>
    /// <returns>
    /// The updated inventory dimensions.
    /// </returns>
    protected InventDim updateInventDim(InventDim _inventDim, EcoResConfigurationName _configurationName)
    {
        changecompany(_inventDim.company())
        {
            _inventDim.ConfigId = _configurationName;
            _inventDim = InventDim::findOrCreate(_inventDim);
        }

        return _inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiCompanyScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the configurator is running in a multiple company scenario.
    /// </summary>
    /// <returns>
    /// true if the configuration is running in a multiple company scenario; otherwise, false.
    /// </returns>
    public boolean isMultiCompanyScenario()
    {
        return demandInventDim.company() != supplyInventDim.company();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>