<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendSettlementClosedDatePostUpgradeTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendSettlementClosedDatePostUpgradeTask extends SysOperationServiceController
{

    private ModuleCustVend module;

    #define.CurrentVersion(1)

    #LocalMacro.CurrentList
        module
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        Array instances = this.getPostTasks();
        for (int i = 1; i <= instances.lastIndex(); i++)
        {
            instances.value(i).run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostTasks</Name>
				<Source><![CDATA[
    private Array getPostTasks()
    {
        SysPluginMetadataCollection collection = new SysPluginMetadataCollection();
        collection.SetManagedValue(enumStr(ModuleCustVend),module);

        return SysPluginFactory::Instances(identifierStr(Dynamics.AX.Application),
            classStr(ICustVendSettlementClosedDatePostUpgrade),
            collection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTask</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static CustVendSettlementClosedDatePostUpgradeTask constructTask()
    {
        return new CustVendSettlementClosedDatePostUpgradeTask(
            classStr(CustVendSettlementClosedDatePostUpgradeTask),
            methodStr(CustVendSettlementClosedDatePostUpgradeTask, run),
            SysOperationExecutionMode::ScheduledBatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModule</Name>
				<Source><![CDATA[
    public ModuleCustVend parmModule(ModuleCustVend _module = module)
    {
        module = _module;
        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedState)
    {
        container packedSuper;
        int version = SysOperationHelper::getVersion(packedState);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = packedState;

                return super(packedSuper);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>