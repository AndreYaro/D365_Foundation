<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetRepairDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetRepairDP</c> class is the data provider for the <c>AssetRepair</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetRepairContract)),
    SRSReportQueryAttribute(queryStr(Assetrepair))
]
public class AssetRepairDP extends SrsReportDataProviderPreProcessTempDB
{
    AssetRepairTmp assetRepairTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetRepairTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an <c>AssetRepairTmp</c> record.
    /// </summary>
    /// <returns>
    /// The <c>AssetRepairTmp</c> record.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetRepairTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetRepairTmp getAssetRepairTmp()
    {
        select assetRepairTmp;
        return assetRepairTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// Note that this is a framework class. Customizing this class may cause problems with future upgrades
    /// to the software.
    /// </remarks>
    public void processReport()
    {
        AssetTable assetTable;
        AssetBook assetBook;
        LtAssetRepair assetRepair;

        QueryRun queryRun;
        AssetRepairSumCalcLT assetRepairSumCalc;
        AssetRepairContract contract;

        FromDate fromDate;
        ToDate toDate;
        Percent minPercent;
        NoYes showTransactions;
        LTRepairPercent repairPercent;

        contract = this.parmDataContract() as AssetRepairContract;
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();
        minPercent = contract.parmMinPercent();
        showTransactions = contract.parmShowTransactions();

        assetRepairSumCalc = new AssetRepairSumCalcLT();
        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(AssetBook)))
            {
                assetTable = queryRun.get(tableNum(AssetTable)) as AssetTable;
                assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;

                assetRepairSumCalc.parmAssetId(assetBook.AssetId);
                assetRepairSumCalc.parmBookId(assetBook.BookId);
                assetRepairSumCalc.parmFromDate(fromDate);
                assetRepairSumCalc.parmToDate(toDate);
                assetRepairSumCalc.calc();

                repairPercent = assetRepairSumCalc.repairPcnt();

                // Requirement is to round the percent value calculated by AssetRepairSumCalcLT class to 2 decimal places
                if (round(repairPercent, 0.01) >= minPercent)
                {
                    assetRepairTmp.clear();

                    assetRepairTmp.AssetGroup = assetTable.AssetGroup;
                    assetRepairTmp.AssetId = assetTable.AssetId;
                    assetRepairTmp.Name = assetTable.Name;
                    assetRepairTmp.AcquisitionAmount = assetRepairSumCalc.acquisitionAmount();
                    assetRepairTmp.RepairAmount = assetRepairSumCalc.repairAmount();
                    assetRepairTmp.RepairPercent = repairPercent;

                    if (showTransactions)
                    {
                        while select AmountMST, DocumentNum, TransDate, TransTxt from assetRepair
                            where assetRepair.AssetId == assetBook.AssetId &&
                                assetRepair.BookID == assetBook.BookId &&
                                assetRepair.TransDate >= fromDate &&
                                assetRepair.TransDate <= toDate
                        {
                            assetRepairTmp.AccountingCurrencyAmount = assetRepair.AmountMST;
                            assetRepairTmp.DocumentNumber = assetRepair.DocumentNum;
                            assetRepairTmp.TransDate = assetRepair.TransDate;
                            assetRepairTmp.TransText = assetRepair.TransTxt;

                            assetRepairTmp.insert();
                        }
                    }
                    else
                    {
                        assetRepairTmp.insert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>