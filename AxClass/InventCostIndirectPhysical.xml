<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostIndirectPhysical</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostIndirectPhysical</c> class updates the indirect cost related to an inventory
///    transaction.
/// </summary>
public class InventCostIndirectPhysical
{
    InventCostIndirect  inventCostIndirect;
    InventMovement      movement;
    Qty                 qty;
    Qty                 remainingQty;
    Map                 indirectCostGroup2RemainingAmountMap;
    Map                 inventTrans2IndirectCostGroupMap;
    boolean             hasIndirectCost;
    CostAmount          savedCostAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costAmount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the calculated inderect cost amount.
    /// </summary>
    /// <returns>
    ///    The calculated inderect cost amount.
    /// </returns>
    public CostAmount costAmount_RU()
    {
        return savedCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCostEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>MapEnumerator</c> object for the indirect cost per cost group map that corresponds
    ///    to the <c>InventTrans</c> record that is specified by the <paramref name="_inventTrans" />
    ///    parameter.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record for which to return the indirect cost per cost group
    ///    <c>MapEnumerator</c> object.
    /// </param>
    /// <returns>
    ///    The <c>MapEnumerator</c> object for the indirect cost per cost group.
    /// </returns>
    /// <remarks>
    ///    Creates an empty map in case there is no indirect cost for the <c>InventTrans</c> record that is
    ///    specified by the <paramref name="_inventTrans" /> parameter.
    /// </remarks>
    public MapEnumerator getIndirectCostEnumerator(InventTrans _inventTrans)
    {
        Map     indirectCostGroup2AmountMap;

        if (hasIndirectCost && inventTrans2IndirectCostGroupMap && inventTrans2IndirectCostGroupMap.exists(_inventTrans.RecId))
        {
            indirectCostGroup2AmountMap = inventTrans2IndirectCostGroupMap.lookup(_inventTrans.RecId);
        }
        else
        {
            indirectCostGroup2AmountMap = new Map(Types::Int64, Types::Class);
        }

        return indirectCostGroup2AmountMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasIndirectCost</Name>
				<Source><![CDATA[
    protected boolean parmHasIndirectCost(boolean _hasIndirectCost = hasIndirectCost)
    {
        hasIndirectCost = _hasIndirectCost;

        return hasIndirectCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventCostIndirect</Name>
				<Source><![CDATA[
    protected InventCostIndirect parmInventCostIndirect(InventCostIndirect _inventCostIndirect = inventCostIndirect)
    {
        inventCostIndirect = _inventCostIndirect;

        return inventCostIndirect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovement</Name>
				<Source><![CDATA[
    protected InventMovement parmMovement(InventMovement _movement = movement)
    {
        movement = _movement;

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    protected Qty parmQty(Qty _qty = qty)
    {
        qty = _qty;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the indirect cost that corresponds to the inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction for which the overhead cost amount is calculated.
    /// </param>
    /// <returns>
    ///    The total indirect cost amount.
    /// </returns>
    public AmountMST update(InventTrans _inventTrans)
    {
        CostAmount          total;

        // <GEERU>
        savedCostAmount = 0;
        // </GEERU>

        if (!hasIndirectCost)
        {
            return 0.0;
        }

        if (qty == 0.00)
            throw error(strFmt("@SCM:UpdatedQtyIsZero", _inventTrans.ItemId));

        if (indirectCostGroup2RemainingAmountMap == null)
        {
            indirectCostGroup2RemainingAmountMap = Map::create(inventCostIndirect.getIndirectCostGroup2AmountMap(InventTransOrigin::find(movement.inventTransOriginId()).InventTransId).pack());
            remainingQty = qty;
        }
        Map indirectCostGroup2AmountMap = new Map(Types::String, Types::Real);

        // Loop through a copy of the indirectCostGroup2RemainingAmountMap to avoid modifying the collection behind the instantiated enumerator
        Map indirectCostGroup2RemainingAmountMapCopy = Map::create(indirectCostGroup2RemainingAmountMap.pack());
        MapEnumerator enumerator = indirectCostGroup2RemainingAmountMapCopy.getEnumerator();
        while (enumerator.moveNext())
        {
            CostAmount costAmount = CurrencyExchangeHelper::amount(enumerator.currentValue() / remainingQty * _inventTrans.Qty);
            indirectCostGroup2AmountMap.insert(enumerator.currentKey(), costAmount);
            indirectCostGroup2RemainingAmountMap.insert(enumerator.currentKey(), enumerator.currentValue() - costAmount);
            total += costAmount;
        }
        remainingQty -= _inventTrans.Qty;

        if (inventTrans2IndirectCostGroupMap == null)
        {
            inventTrans2IndirectCostGroupMap = new Map(Types::Int64, Types::Class);
        }

        inventTrans2IndirectCostGroupMap.insert(_inventTrans.RecId, indirectCostGroup2AmountMap);

        // <GEERU>
        savedCostAmount = total;
        // </GEERU>

        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventCostIndirectPhysical</c> class with a indirect cost calculation for the quantity and input amount.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// An instance of the <c>LedgerVoucher</c> class.
    /// </param>
    /// <param name="_movement">
    /// An instance of the <c>inventMovement</c> class.
    /// </param>
    /// <param name="_qty">
    /// The quantity.
    /// </param>
    /// <param name="_inputAmount">
    /// The input amount.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventCostIndirectPhysical</c> class.
    /// </returns>
    public static InventCostIndirectPhysical newCalculation(
        LedgerVoucher           _ledgerVoucher,
        InventMovement          _movement,
        Qty                     _qty,
        InventCostInputAmount   _inputAmount)
    {
        InventCostIndirectPhysical      inventCostIndirectPhysical = new InventCostIndirectPhysical();
        PurchLine                       purchLine = _movement.buffer();
        InventTransOrigin               inventTransOrigin = InventTransOrigin::find(_movement.inventTransOriginId());
        CostAmount                      amount;

        if (_movement.mustBeBookedPhysically() &&
            _movement.mustBeBookedFinancially() &&
            CostSheetTable::hasCostType(CostPriceType::Purchase))
        {
            if (_movement.inventModelType().stdCostBased())
            {
                InventItemPrice inventItemPrice = InventItemPrice::stdCostFindDate(inventTransOrigin.inventTable(), _movement.transDate(), _movement.inventDimId());
                amount = inventItemPrice.stdCostMaterialPcsPrice() * _qty;
            }
            else
            {
                amount = _inputAmount.getRemainingAmount();
            }

            InventCostIndirect inventCostIndirect = InventCostIndirect::newInventMovLedgerVoucher(_movement, _ledgerVoucher);

            inventCostIndirect.calcInvent(
                InventCostPurchIndirectData::newParameters(
                    inventTransOrigin,
                    _movement.inventdim().InventSiteId,
                    _qty,
                    amount
                    // <GEERU>
                    , null
                    , _movement.parmStornoPhysical_RU()
                    // </GEERU>
                    ));

            inventCostIndirect.finalizeCalc();
            inventCostIndirectPhysical.parmHasIndirectCost(true);
            inventCostIndirectPhysical.parmInventCostIndirect(inventCostIndirect);
        }
        inventCostIndirectPhysical.parmMovement(_movement);
        inventCostIndirectPhysical.parmQty(_qty);

        return inventCostIndirectPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newNoIndirectCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventCostIndirectPhysical</c> class with no indirect cost.
    /// </summary>
    /// <returns>
    ///    The new instance of the <c>InventCostIndirectPhysical</c> class.
    /// </returns>
    /// <remarks>
    ///    No indirect cost will be updated when calling <c>InventCostIndirectPhysical.update</c> method if
    ///    the <c>InventCostIndirectPhysical</c> instance has no indirect cost.
    /// </remarks>
    public static InventCostIndirectPhysical newNoIndirectCost()
    {
        InventCostIndirectPhysical      inventCostIndirectPhysical = new InventCostIndirectPhysical();

        inventCostIndirectPhysical.parmHasIndirectCost(false);

        return inventCostIndirectPhysical;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>