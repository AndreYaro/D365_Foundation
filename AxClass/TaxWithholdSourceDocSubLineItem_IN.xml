<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdSourceDocSubLineItem_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxWithholdSourceDocSubLineItem_IN</c> class provides the information to handle the
///    distributions and subledger journal lines of withholding tax.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_ProductOrder), SourceDocumentLine_ProductOrder::PurchaseOrderWithholdTaxLine),
SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_VendorInvoice), SourceDocumentLine_VendorInvoice::VendorInvoiceWithholdingTaxLine),
SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_CustomerInvoice), SourceDocumentLine_CustomerInvoice::CustomerInvoiceWithHoldingTaxLine),
SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_ProjAdvancedJournal), SourceDocumentLine_ProjAdvancedJournal::ProjAdvancedJournalWithholdingTaxLine)
]
class TaxWithholdSourceDocSubLineItem_IN extends SourceDocumentSublineItem implements
    SourceDocumentLineItemITaxWithhold_IN,
    SourceDocumentLineItemIFinalize
{
    TaxWithholdMap_IN taxWithholdMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LegalEntityRecId</c> value for withholding tax.
    /// </summary>
    /// <returns>
    /// The value of the <c>LegalEntityRecId</c> for withholding tax.
    /// </returns>
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::findDataArea(taxWithholdMap.DataAreaId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap     sourceDocumentAmountMap;
        SourceDocumentAmount        sourceDocumentAmount;
        this.initializeTaxWithholdMap();
        // Create map
        sourceDocumentAmountMap = SourceDocumentAmountMap::construct();
        if (taxWithholdMap.SourceRegulateAmountCur)
        {
            sourceDocumentAmount = SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(), taxWithholdMap.SourceRegulateAmountCur, MonetaryAmount::WithholdTax_IN);
            sourceDocumentAmountMap.insert(sourceDocumentAmount);
        }

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxWithholdMap_IN</c> value.
    /// </summary>
    /// <returns>
    /// The value of the <c>TaxWithholdMap_IN</c>.
    /// </returns>
    public TaxWithholdMap_IN getTaxWithholdMap()
    {
        return taxWithholdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>TaxWithholdMap_IN</c> instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    ///    A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects need by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        taxWithholdMap = this.sourceDocumentLineMapToTaxWithholdMap(_sourceDocumentLineImplementation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxWithholdMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the TaxWithholdMap_IN exists. If not, initialize the TaxWithholdMap_IN.
    /// </summary>
    private void initializeTaxWithholdMap()
    {
        if (!taxWithholdMap && sourceDocumentLine)
        {
            sourceDocumentLineImplementation = sourceDocumentLine.getSourceDocumentLineImplementation();
            this.initializeImplementation(sourceDocumentLineImplementation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceDocumentLineMatchingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// intialize the <c>SourceDocumentLineMatchingList</c> object for withholding tax.
    /// </summary>
    protected void initSourceDocumentLineMatchingList()
    {
        Common                                      common;
        TaxWithholdMap_IN                           taxWithholdUncommitted;
        TaxWithholdUncommitted_IN                   matchCandidateTaxWithholdUncommitted;
        SourceDocumentLineMatching                  parentSourceDocumentLineMatched;
        SourceDocumentLineMatchingList              linesMatchedToTaxWithholdParent;
        SourceDocumentLineMatchingListEnumerator    linesMatchedToTaxWithholdParentEnumerator;
        SourceDocumentLine                          taxWithholdSourceDocumentLine;
        SourceDocumentLine                          taxWithholdParentSourceDocumentLine;
        SourceDocumentLineRecId                     matchedParentSourceDocumentLineItemRecId;
        SourceDocumentLineItem                      matchedSourceDocumentLineItem;

        sourceDocumentLineMatchingList = SourceDocumentLineMatchingList::construct();
        common = this.parmSourceDocumentLine().getSourceDocumentLineImplementation();
        taxWithholdUncommitted = common;

        if (taxWithholdUncommitted != null)
        {
            // get parent line
            parentSourceDocumentLineItem = this.parmParentSourceDocumentLineItem();
            // get lines parent is matched to
            linesMatchedToTaxWithholdParent = parentSourceDocumentLineItem.parmSourceDocumentLineMatchingList();
            if (linesMatchedToTaxWithholdParent)
            {
                linesMatchedToTaxWithholdParentEnumerator = linesMatchedToTaxWithholdParent.getEnumerator();

                while (linesMatchedToTaxWithholdParentEnumerator.moveNext())
                {
                    parentSourceDocumentLineMatched = linesMatchedToTaxWithholdParentEnumerator.current();
                    matchedSourceDocumentLineItem =  parentSourceDocumentLineMatched.parmIndependentSourceDocumentLineItem();
                    matchedParentSourceDocumentLineItemRecId = matchedSourceDocumentLineItem.parmSourceDocumentLine().RecId;

                    select firstonly matchCandidateTaxWithholdUncommitted
                        where
                           matchCandidateTaxWithholdUncommitted.TaxWithholdCode == taxWithholdUncommitted.TaxWithholdCode
                        join RecId from taxWithholdSourceDocumentLine
                            where taxWithholdSourceDocumentLine.RecId == matchCandidateTaxWithholdUncommitted.SourceDocumentLine
                        exists join taxWithholdParentSourceDocumentLine
                            where taxWithholdParentSourceDocumentLine.RecId == taxWithholdSourceDocumentLine.ParentSourceDocumentLine &&
                                taxWithholdParentSourceDocumentLine.RecId == matchedParentSourceDocumentLineItemRecId;

                    if (matchCandidateTaxWithholdUncommitted != null)
                    {
                        sourceDocumentLineMatchingList = SourceDocumentLineMatchingFacade::addSourceDocLineImplementationToList(common, matchCandidateTaxWithholdUncommitted, 1, sourceDocumentLineMatchingList);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return this.parmParentSourceDocumentLineItem().parmAccountingDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyDistributionReferenceOfOriginal</Name>
				<Source><![CDATA[
    public boolean parmCopyDistributionReferenceOfOriginal()
    {
        parentSourceDocumentLineItem = this.parmParentSourceDocumentLineItem();

        return parentSourceDocumentLineItem.parmCopyDistributionReferenceOfOriginal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode()
    {
        return taxWithholdMap.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineFinalizedDate</Name>
				<Source><![CDATA[
    public AccountingDate parmSourceDocLineFinalizedDate()
    {
        return this.parmParentSourceDocumentLineItem().parmAccountingDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdCode</Name>
				<Source><![CDATA[
    public TaxWithholdCode parmTaxWithholdCode()
    {
        return taxWithholdMap.TaxWithholdCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdDataAreaId</Name>
				<Source><![CDATA[
    public SelectableDataArea parmTaxWithholdDataAreaId()
    {
        return taxWithholdMap.company();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdDirection</Name>
				<Source><![CDATA[
    public TaxWithholdDirection_IN parmTaxWithholdDirection()
    {
        return taxWithholdMap.parmTaxWithholdDirection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdGroup</Name>
				<Source><![CDATA[
    public TaxWithholdGroup parmTaxWithholdGroup()
    {
        return taxWithholdMap.TaxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineMapToTaxWithholdMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// initializes TaxWithholdMap_IN based on the SourceDocumentLineImplementation.
    /// </summary>
    /// <param name="_lineMap">
    /// The SourceDocumentLineImplementation instance.
    /// </param>
    /// <returns>
    /// The TaxWithholdMap_IN value.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// returns Exception if Implementation is not matched with TaxwithholdTrans_IN or TaxWithholdUncommitted_IN tables.
    /// </exception>
    private TaxWithholdMap_IN sourceDocumentLineMapToTaxWithholdMap(SourceDocumentLineImplementation  _lineMap)
    {
        TaxWithholdUncommitted_IN   taxWithholdUncommitted;
        TaxWithholdTrans_IN         taxWithholdTrans;

        switch (_lineMap.TableId)
        {
            case tableNum(TaxWithholdTrans_IN) :
                taxWithholdTrans = _lineMap;
                return taxWithholdTrans;
            case tableNum(TaxWithholdUncommitted_IN) :
                taxWithholdUncommitted = _lineMap;
                return taxWithholdUncommitted;
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate1</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate1()
    {
        ExchRate ret;

        if (this.isUsingTDSImportExchangeRate())
        {
            ret = TaxExchangeRateHelper::getTDSExchangeRate_IN(taxWithholdMap.CurrencyCode, taxWithholdMap.TransDate);
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate2</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate2()
    {
        ExchRate ret;

        if (this.isUsingTDSImportExchangeRate())
        {
            ret = TaxExchangeRateHelper::getTDSExchangeRateSecond_IN(taxWithholdMap.CurrencyCode, taxWithholdMap.TransDate);
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyExchangeRate1</Name>
				<Source><![CDATA[
    public ExchRate parmReportingCurrencyExchangeRate1()
    {
        ExchRate ret;

        if (this.isUsingTDSImportExchangeRate())
        {
            ret = TaxExchangeRateHelper::getTDSExchangeRateRep_IN(taxWithholdMap.CurrencyCode, Ledger::reportingCurrency(), taxWithholdMap.TransDate);
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyExchangeRate2</Name>
				<Source><![CDATA[
    public ExchRate parmReportingCurrencyExchangeRate2()
    {
        ExchRate ret;

        if (this.isUsingTDSImportExchangeRate())
        {
            ret = TaxExchangeRateHelper::getTDSExchangeRateRepSecond_IN(taxWithholdMap.CurrencyCode, Ledger::reportingCurrency(), taxWithholdMap.TransDate);
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsingTDSImportExchangeRate</Name>
				<Source><![CDATA[
    private ExchRate isUsingTDSImportExchangeRate()
    {
        return LedgerExtensionIN::findByLedger(Ledger::current()).TDSImportExchangeRateType
            && taxWithholdMap.TaxWithholdType == TaxWithholdCodeType_IN::TDS
            && (taxWithholdMap.SourceTableId == tableNum(VendInvoiceInfoLine)
                || (taxWithholdMap.SourceTableId == tableNum(VendInvoiceTrans)
                    && LedgerPostingsOccursOnSingleVoucher_INFlight::instance().isEnabled()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>