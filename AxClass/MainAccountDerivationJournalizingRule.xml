<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MainAccountDerivationJournalizingRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>MainAccountDerivationJournalizingRule</c> class is a rule for deriving main account ledger
///    dimensions for classifying the financial consequences of business events in the source document
///    journalizing process.
/// </summary>
[
SourceDocumentClassExtensionAttribute(classStr(AccountingJournalizingRule))
]
class MainAccountDerivationJournalizingRule extends MainAccountDerivationRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateMainAccountList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension allocation list.
    /// </summary>
    protected void populateMainAccountList()
    {
        boolean                     initialized;

        if (accountingRUle.parmReclassifyDistributionAmounts() && !accountingRUle.canUseTaxMainAccDimensionListProvider()
            && !accountingRUle.canUsePayrollMainAccDimListProvider()
        )
        {
            initialized = this.populateMainAccListFromProvider(MainAccountDimensionListProviderType::Journalizing);
        }
        else
        {
            MainAccountDerivationRuleExtensionArgs mainAccountDerivationRuleExtensionArgs = new MainAccountDerivationRuleExtensionArgs();
            mainAccountDerivationRuleExtensionArgs.accountingRule = accountingRule;
            mainAccountDerivationRuleExtensionArgs.mainAccountDimensionList = this.parmMainAccountDimensionList();

            initialized = MainAccountDerivationJournalizingRule::populateMainAccountListFromExtension(mainAccountDerivationRuleExtensionArgs);
                        
            if (!initialized && accountingRule.canUseTaxMeasureMainAccDimListProvider())
            {
                initialized = this.populateMainAccListFromProvider(MainAccountDimensionListProviderType::TaxMeasure);
            }

            if (!initialized && accountingRUle.canUseTaxMainAccDimensionListProvider())
            {
                initialized = this.populateMainAccListFromProvider(MainAccountDimensionListProviderType::Tax);
            }

            // <GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters() && !initialized && accountingRUle.canUseTaxWHTMainAccDimListProvider_IN())
            {
                initialized = this.populateMainAccListFromProvider(MainAccountDimensionListProviderType::WithHoldTax_IN);
            }
            // </GIN>

            if (!initialized && accountingRUle.canUseTermMainAccDimensionListProvider())
            {
                initialized = this.populateMainAccListFromProvider(MainAccountDimensionListProviderType::Term);
            }

            if (!initialized && accountingRUle.canUseProductionFlowMainAccDimListProv())
            {
                initialized = this.populateMainAccListFromProvider(MainAccountDimensionListProviderType::ProductionFlow);
            }

            if (!initialized && accountingRUle.canUseInventMainAccDimensionListProvider())
            {
                initialized = this.populateMainAccListFromProvider(MainAccountDimensionListProviderType::Inventory);
            }

            if (!initialized && accountingRUle.canUsePartyMainAccDimensionListProvider())
            {
                initialized = this.populateMainAccListFromProvider(MainAccountDimensionListProviderType::Party);
            }
    // <GEERU>
            if (!initialized && AccountingRule_RU::canUseEmplMainAccDimListProviderFromAccountingRule_RU(accountingRUle))
            {
                initialized = this.populateMainAccListFromProvider(MainAccountDimensionListProviderType::Empl_RU);
            }
    // </GEERU>
            if (!initialized && accountingRUle.canUseBankMainAccDimensionListProvider())
            {
                initialized = this.populateMainAccListFromProvider(MainAccountDimensionListProviderType::Bank);
            }
            if (!initialized && accountingRUle.canUsePayrollMainAccDimListProvider())
            {
                initialized = this.populateMainAccListFromProvider(MainAccountDimensionListProviderType::Payroll);
            }

            MainAccountDerivationJournalizingRule::modifyMainAccountListFromExtension(mainAccountDerivationRuleExtensionArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountListFromExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// An extension point for population of the <c>MainAccountDimensionList</c>.
    /// </summary>
    /// <param name = "_mainAccountDerivationRuleExtensionArgs">Extension point method arguments object.</param>
    /// <returns>True if the <c>MainAccountDimensionList</c> has values; otherwise false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean populateMainAccountListFromExtension(MainAccountDerivationRuleExtensionArgs _mainAccountDerivationRuleExtensionArgs)
    {
        Debug::assert(_mainAccountDerivationRuleExtensionArgs.mainAccountDimensionList != null);
        
        return !_mainAccountDerivationRuleExtensionArgs.mainAccountDimensionList.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyMainAccountListFromExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// An extension point for modifying the <c>MainAccountDimensionList</c>.
    /// </summary>
    /// <param name = "_mainAccountDerivationRuleExtensionArgs">Extension point method arguments object.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void modifyMainAccountListFromExtension(MainAccountDerivationRuleExtensionArgs _mainAccountDerivationRuleExtensionArgs)
    {
        return;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>