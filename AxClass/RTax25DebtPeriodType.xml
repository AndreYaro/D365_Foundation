<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25DebtPeriodType</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25DebtPeriodType
{
    #define.standardPeriodLength(45)

    RTax25DebtPeriodMap debtPeriodMap;
    RTax25DebtType      debtType;
    RefRecId            debtModel;

    RTax25FieldLabel    fieldLabels[];
    Description         fieldDescriptions[];

    TransDate           baseDate;
    Amount              amounts[];
    Days                daysFrom[], daysTo[];
    RTax25BadDebtType   badDebtTypes[];
    boolean             isNonZeroLine[];

    Counter             rowCount;
    int                 maxIdx;
    int                 nonZeroCount;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAmounts</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clearAmounts()
    {
        amounts[0] = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInterval</Name>
				<Source><![CDATA[
    private void fillInterval()
    {
        rowCount++;
        daysFrom[rowCount] = debtPeriodMap.DaysFrom;

        if (debtPeriodMap.daysTo())
        {
            daysTo[rowCount] = debtPeriodMap.daysTo();
        }
        else
        {
            daysTo[rowCount] = maxint();
        }

        badDebtTypes[rowCount]  = debtPeriodMap.BadDebtType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLabel</Name>
				<Source><![CDATA[
    private void fillLabel(
        Description      _description,
        RTax25FieldLabel _fieldLabel,
        Percent          _percent,
        NoYes            _ignoreZeroPercentLines)
    {
        if (_percent != 0 || _ignoreZeroPercentLines == NoYes::No)
        {
            rowCount++;
            fieldLabels[rowCount] = _fieldLabel;
            fieldDescriptions[rowCount] = _description;
        }

        maxIdx++;
        isNonZeroLine[maxIdx] = _percent != 0;

        if (_percent != 0)
        {
            nonZeroCount++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        debtPeriodMap = new DictTable(
        debtModel != 0                  ?
        tableNum(RTax25DebtModelPeriod) :
        tableNum(RTax25DebtPeriod)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST getAmount(int _idx)
    {
        return amounts[_idx];
    }

]]></Source>
			</Method>
			<Method>
				<Name>idx2BadDebtType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RTax25BadDebtType idx2BadDebtType(Counter   _cnt)
    {
        return badDebtTypes[_cnt];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriods</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initPeriods()
    {
        int i, j;
        RTax25DebtPeriod debtPeriod;

        select count(RecId) from debtPeriod
            where debtPeriod.DebtType == debtType;

        if (debtPeriod.RecId)
            return;

        for (i = 1; i <= enumcnt(RTax25BadDebtType); i++)
        {
            for (j = 1; j <= this.numPeriods(i); j++)
            {
                debtPeriod.DebtType    = debtType;
                debtPeriod.BadDebtType = i;
                debtPeriod.DaysFrom    = debtPeriod.DaysTo;
                debtPeriod.DaysTo      = debtPeriod.DaysFrom + #standardPeriodLength;
                debtPeriod.FieldLabel  = strfmt("@GLS111173", debtPeriod.DaysFrom, debtPeriod.DaysTo);
                debtPeriod.Description = "";
                debtPeriod.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldValid</Name>
				<Source><![CDATA[
    public boolean isFieldValid(int _idx)
    {
        return (_idx <= maxIdx && isNonZeroLine[_idx]) || (_idx > RTax25DebtModelPeriod::maxPeriodNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonZeroCount</Name>
				<Source><![CDATA[
    public int nonZeroCount()
    {
        return nonZeroCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebtModel</Name>
				<Source><![CDATA[
    public RefRecId parmDebtModel(RefRecId _debtModel = debtModel)
    {
        debtModel = _debtModel;
        return debtModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insDescriptions</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container insDescriptions(container _source, int _start, str _prefix)
    {
        container   ret = _source;
        int         i;

        for (i = 0; i < rowCount; i++)
        {
            ret = conins(ret, _start + i, _prefix + fieldDescriptions[i+1]);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insLabels</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container insLabels(container _source, int _start, str _prefix)
    {
        container   ret = _source;
        int         i;

        for (i = 0; i < rowCount; i++)
        {
            ret = conins(ret, _start + i, _prefix + fieldLabels[i+1]);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>numPeriods</Name>
				<Source><![CDATA[
    #define.Three(3)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Counter numPeriods(RTax25BadDebtType _badDebtType)
    {
        int     ret = 0;

        switch (debtType)
        {
            case RTax25DebtType::Debit :
                switch (_badDebtType)
                {
                    case RTax25BadDebtType::Bad :
                        ret = #Three;
                        break;
                    case RTax25BadDebtType::Hopeless :
                        ret = 1;
                        break;
                }
                break;
            case RTax25DebtType::Credit :
                switch (_badDebtType)
                {
                    case RTax25BadDebtType::Bad :
                        ret = 0;
                        break;
                    case RTax25BadDebtType::Hopeless :
                        ret = 1;
                        break;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebtType</Name>
				<Source><![CDATA[
    private RTax25DebtType parmDebtType(RTax25DebtType _debtType = debtType)
    {
        ;
        debtType = _debtType;
        return debtType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareLabels</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void prepareLabels(RTax25BadDebtType _badDebtType = RTax25BadDebtType::None)
    {
        this.prepareLabelsExt(_badDebtType, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareLabelsExt</Name>
				<Source><![CDATA[
    public void prepareLabelsExt(RTax25BadDebtType _badDebtType            = RTax25BadDebtType::None,
                                 NoYes             _ignoreZeroPercentLines = NoYes::No)
    {
        rowCount = 0;
        maxIdx = 0;
        nonZeroCount = 0;

        if (debtModel)
        {
            while select debtPeriodMap
            order by DaysFrom, BadDebtType
            where debtPeriodMap.DebtModel == debtModel
            {
                this.fillLabel(debtPeriodMap.Description, debtPeriodMap.FieldLabel, debtPeriodMap.Percent, _ignoreZeroPercentLines);
            }
        }
        else
        {
            while select debtPeriodMap
            order by DaysFrom, BadDebtType
            where debtPeriodMap.DebtType == debtType &&
                  (debtPeriodMap.BadDebtType == _badDebtType || _badDebtType == RTax25BadDebtType::None)
            {
                this.fillLabel(debtPeriodMap.Description, debtPeriodMap.FieldLabel, debtPeriodMap.Percent, _ignoreZeroPercentLines);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSummator</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void prepareSummator(TransDate _baseDate, RTax25BadDebtType _badDebtType = RTax25BadDebtType::None)
    {
        rowCount = 0;
        baseDate = _baseDate;
        this.clearAmounts();

        if (debtModel)
        {
            while select debtPeriodMap
                order by DaysFrom, BadDebtType
                where debtPeriodMap.DebtModel == debtModel
            {
                this.fillInterval();
            }
        }
        else
        {
            while select debtPeriodMap
                order by DaysFrom, BadDebtType
                where debtPeriodMap.DebtType == debtType &&
                      (debtPeriodMap.BadDebtType == _badDebtType || _badDebtType == RTax25BadDebtType::None)
            {
                this.fillInterval();
            }
        }

        if (debtType == RTax25DebtType::Debit)
        {
            daysFrom[1] = minint();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rowCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter rowCount()
    {
        return rowCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setAmount(TransDate _date, AmountMST _amount)
    {
        int i;

        if (! _date)
        {
            _date = baseDate;
        }

        for (i = 1; i <= rowCount; i++)
        {
            if ((baseDate - _date) >= daysFrom[i] && (baseDate - _date) < daysTo[i])
            {
                amounts[i] += _amount;
                return;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDays</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean updateDays(FormDataSource _debtPeriod_ds)
    {
        Days                dayTo;
        RTax25DebtPeriod    localDebtPeriod, localDebtPeriod2;

        localDebtPeriod = _debtPeriod_ds.cursor();
        dayTo = localDebtPeriod.DaysTo;

        //RTax25DebtPeriod is cached EntireTable
        select firstonly localDebtPeriod2
            where localDebtPeriod2.DebtType == localDebtPeriod.DebtType         &&
                  localDebtPeriod2.DaysFrom == localDebtPeriod.orig().DaysTo;

        if (! localDebtPeriod2 || localDebtPeriod2.DaysFrom == 0)
            return true;

        localDebtPeriod2.DaysFrom = dayTo;
        if (! localDebtPeriod2.validateField(fieldnum(RTax25DebtPeriod, DaysFrom)))
            return false;

        _debtPeriod_ds.next();
        localDebtPeriod.DaysFrom = dayTo;
        localDebtPeriod.update();
        _debtPeriod_ds.research();
        _debtPeriod_ds.prev();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25DebtPeriodType construct()
    {
        return new RTax25DebtPeriodType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25DebtPeriodType newParameters(RTax25DebtType _debtType)
    {
        RTax25DebtPeriodType ret = RTax25DebtPeriodType::construct();

        ret.parmDebtType(_debtType);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newModelParameters</Name>
				<Source><![CDATA[
    public static RTax25DebtPeriodType newModelParameters(RTax25DebtType _debtType, RefRecId _debtModel)
    {
        RTax25DebtPeriodType ret = RTax25DebtPeriodType::construct();

        ret.parmDebtType(_debtType);
        ret.parmDebtModel(_debtModel);
        ret.init();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>