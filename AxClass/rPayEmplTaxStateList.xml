<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayEmplTaxStateList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Holds the employee states list for tax calculation.
/// </summary>
class rPayEmplTaxStateList extends RPayTaxCalcList
{
    List            stateList;
    ListEnumerator  stateListEnum;
    RPayEmplTax     emplTaxCurrent;
    Map             mapStatusPeriod;
    Set             years2Calc;
    SetEnumerator   years2CalcEnum;

    ReportPeriod_RU         payPeriodCalcTo;
    StartDate               stateStartDate, sessionStartDate;
    EndDate                 stateEndDate;
    RHRMPayMainEmplId       emplId;
    boolean                 lazy, useCachedData;
    boolean                 useLastTaxStatus;
    RPayEmplTaxStatus       lastTaxStatus;
    RpayHRMOrganizationId   organizationId;
    Yr                      currentYear;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEnd</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void addEnd(RPayEmplTax _emplTax)
    {
        stateList.addEnd(_emplTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
        public anytype current()
    {
        if (useCachedData)
        {
            emplTaxCurrent = stateListEnum.current();
        }

        return emplTaxCurrent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIteration</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initIteration()
    {
        if (stateEndDate == dateNull())
        {
            if (years2CalcEnum.moveNext())
            {
                currentYear    = years2CalcEnum.current();
                stateStartDate = mkDate(1, 1, currentYear);
                stateEndDate   = endmth(stateStartDate);
                this.initTaxStatusPerYr();
            }
            else
            {
                currentYear = 0;
            }
        }
        else
        {
            stateStartDate = stateEndDate + 1;

            if (year(stateStartDate) != currentYear)
            {
                if (years2CalcEnum.moveNext())
                {
                    currentYear    = years2CalcEnum.current();
                    stateStartDate = mkDate(1, 1, currentYear);
                    this.initTaxStatusPerYr();
                }
                else
                {
                    currentYear = 0;
                }
            }

            stateEndDate = endmth(stateStartDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initList</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initList(RHRMPayMainEmplId _mainEmplId,  ReportPeriod_RU _payPeriodCalcTo, boolean _lazy)
    {
        payPeriodCalcTo = _payPeriodCalcTo;
        lazy            = _lazy;

        this.parmEmplId(_mainEmplId);
        this.initYearsCollection();

        if (lazy)
        {
            useCachedData = false;
        }
        else
        {
            this.initIteration();
            while (this.validateState())
            {
                this.initState();
                this.addEnd(emplTaxCurrent);
                this.initIteration();
            }
            this.resetIterator();
            useCachedData = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initState</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initState()
    {
        container   conTaxDates;

        emplTaxCurrent = RPayEmplTax::construct(emplId, stateEndDate, stateStartDate, !useLastTaxStatus);
        emplTaxCurrent.parmStartDateTax(dateStartYr(stateStartDate));
        emplTaxCurrent.parmSessionStartDate(dateStartYr(sessionStartDate));

        if (useLastTaxStatus)
        {
            emplTaxCurrent.taxStatus(lastTaxStatus);
        }
        else
        {
            if (mapStatusPeriod.exists(emplTaxCurrent.taxStatus()))
            {
                conTaxDates = mapStatusPeriod.lookup(emplTaxCurrent.taxStatus());
                emplTaxCurrent.parmStartDateTax(conPeek(conTaxDates, 1));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxStatusPerYr</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initTaxStatusPerYr()
    {
        RPayEmplTax emplTax;

        emplTax = RPayEmplTax::construct(emplId, min(RPayParameters::payPeriod(emplId), dateEndYr(stateStartDate)));
        mapStatusPeriod = Map::create(emplTax.taxStatusPeriod());

        useLastTaxStatus = emplTax.useLastTaxStatus();

        if (useLastTaxStatus)
        {
            lastTaxStatus = emplTax.taxStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initYearsCollection</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initYearsCollection()
    {
        RPayTrans       payTrans;
        RHRMEmplTable   emplTable;
        ReportPeriod_RU payPeriod;
        RPayTaxSumYear  taxSumYear;

        payPeriod        = payPeriodCalcTo;
        sessionStartDate = dateStartYr(payPeriod);

        while (payPeriod)
        {
            if (!RPayTaxSumYear::yrClosedState(dateEndYr(payPeriod), emplId))
            {
                years2Calc.add(year(payPeriod));
                if (sessionStartDate > dateStartYr(payPeriod))
                {
                    sessionStartDate = dateStartYr(payPeriod);
                }
            }

            select firstonly CorrectedPeriod from payTrans
                order by CorrectedPeriod
                where  payTrans.CorrectedPeriod <  dateStartYr(payPeriod)
                    && payTrans.PayPeriod       >= dateStartYr(payPeriod)
                    && payTrans.PayPeriod       <= dateEndYr(payPeriod)
                    && payTrans.TaxIncomeGroupCode == ''
                exists join emplTable
                    where  emplTable.EmployeeId    == payTrans.Emplid
                        && emplTable.PayMainEmplId == emplId;

            payPeriod = payTrans.CorrectedPeriod;
        }

        payPeriod = dateStartYr(payPeriodCalcTo) - 1;

        select firstonly RecId from payTrans
                order by CorrectedPeriod
                where  payTrans.CorrectedPeriod >=  dateStartYr(payPeriod)
                    && payTrans.CorrectedPeriod <= dateEndYr(payPeriod)
                    && payTrans.PayPeriod       >= dateStartYr(payPeriodCalcTo)
                    && payTrans.PayPeriod       <= dateEndYr(payPeriodCalcTo)
                    && payTrans.TaxIncomeGroupCode == ''
                exists join emplTable
                where  emplTable.EmployeeId    == payTrans.Emplid
                    && emplTable.PayMainEmplId == emplId;

        select sum(AddTaxAmount), sum(DeductTaxAmount) from taxSumYear
            where taxSumYear.EmplId    == emplId
               && taxSumYear.PayPeriod == payPeriod;

        if (taxSumYear.AddTaxAmount != taxSumYear.DeductTaxAmount || payTrans.RecId)
        {
            if (payTrans.RecId || !RPayTaxSumYear::yrClosedState(dateEndYr(payPeriod), emplId))
            {
                years2Calc.add(year(payPeriod));
                if (sessionStartDate > dateStartYr(payPeriod))
                {
                    sessionStartDate = dateStartYr(payPeriod);
                }
            }
        }

        years2CalcEnum = years2Calc.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
        public boolean moveNext()
    {
        boolean ret;

        if (useCachedData)
        {
            ret = stateListEnum.moveNext();
        }
        else
        {
            this.initIteration();
            if (this.validateState())
            {
                this.initState();
                this.addEnd(this.current());
                ret = true;
            }
            else
            {
                ret           = false;
                useCachedData = true; //reached to the end of list in lazy mode, in next calls used precached data
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
        stateList  = new List(Types::Class);
        years2Calc = new Set(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RHRMPayMainEmplId parmEmplId(RHRMPayMainEmplId _mainEmplId = emplId)
    {
        emplId = _mainEmplId;

        return emplId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetIterator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the iterator.
    /// </summary>
    protected void resetIterator()
    {
        stateListEnum = stateList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateState</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean validateState()
    {
        return stateEndDate <= payPeriodCalcTo && currentYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayEmplTaxStateList construct(RHRMPayMainEmplId _mainEmplId,  ReportPeriod_RU _payPeriodCalcTo, boolean _lazy = true)
    {
        RPayEmplTaxStateList stateList = new RPayEmplTaxStateList();

        stateList.initList(_mainEmplId, _payPeriodCalcTo, _lazy);

        return stateList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTaxCalcContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the instance from the tax calculation context.
    /// </summary>
    /// <param name="_context">
    /// The context.
    /// </param>
    /// <returns>
    /// The <c>RPayEmplTaxStateList</c> class instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RPayEmplTaxStateList createFromTaxCalcContext(RPayTaxCalcContext _context)
    {
        return RPayEmplTaxStateList::construct(_context.parmEmplId(), _context.parmPayPeriodOpen());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>