<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostRevenueProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostRevenueProposal extends ProjPost
{
    ProjInvoiceRevenue  newProjInvoiceRevenue;
    ProjProposalRevenue projProposalRevenue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCreditNoteSalesAccrued</Name>
				<Source><![CDATA[
    public boolean checkCreditNoteSalesAccrued()
    {
        ProjActivateTrans transTurnover   = false;

        if (projTrans.transStatus() == ProjTransStatus::CreditnoteProposal)
        {
            transTurnover = ProjRevRecHelper::postWIPFeeForProject(ProjTable::find(projTrans.projId()));
        }

        return transTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterAccruedCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have an accrued credit amount.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by the class that extends this class to provide the necessary
    /// functionality for the transaction that is being posted.
    /// </remarks>
    public boolean checkEnterAccruedCredit()
    {
        return projTrans.canBeAccrued();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterAccruedDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have an accrued debit amount.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method will should be overridden by the class that extends this class to provide the necessary
    /// functionality for the transaction that is being posted.
    /// </remarks>
    public boolean checkEnterAccruedDebit()
    {
        return projTrans.canBeAccrued();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterSalesAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the accrued sales amount has been entered and is expected to be posted.
    /// </summary>
    /// <returns>
    /// true if the accrued sales amount is nonzero and not a subscription <c>parmEnterSalesAccrued</c> method returns;
    /// otherwise, false.
    /// </returns>
    protected boolean checkEnterSalesAccrued()
    {
        boolean ret = false;

        if (this.checkCreditNoteSalesAccrued() && !projTrans.smaSubscriptionId()) //Subscription is excluded due to including it will fetch the wrong accounts when 'Accrue revenue - fee' is enable in project parameters.
        {
            this.parmEnterSalesAccrued(true);
            this.parmUpdateTrans(true);
            ret = super();
        }
        else
        {
            ret = this.parmEnterSalesAccrued()  &&
                projTrans.canBeAccrued() &&
                this.ledgerSalesAmount();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountSalesAccruedLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountSalesAccruedLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        if (projTrans.smaSubscriptionId())
        {
            return projTrans.accruedRevenueSubsLedgerDimension(_fundingSourceId);
        }
        else
        {
            return projTrans.salesOffsetAccountLedgerDimension(_fundingSourceId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountSalesAccruedLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount debitAccountSalesAccruedLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        if (projTrans.smaSubscriptionId())
        {
            return projTrans.wipSubscriptionLedgerDimension(_fundingSourceId);
        }
        else
        {
            return super(_fundingSourceId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNoteSubscription</Name>
				<Source><![CDATA[
    public boolean isCreditNoteSubscription()
    {
        if (! projTrans.smaSubscriptionId())
        {
            return false;
        }

        if (projTrans.transStatus() != ProjTransStatus::CreditnoteProposal)
        {
            return false;
        }

        if (!SMASubscriptionGroup::find(SMASubscriptionTable::find(projTrans.smaSubscriptionId()).GroupId).AccueRevenue)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmount</Name>
				<Source><![CDATA[
    public AmountCur ledgerSalesAmount()
    {
        AmountCur   amountCur = super();

        if (this.isCreditNoteSubscription())
        {
            amountCur   = this.totalSubscriptionAccruedAmount();
        }
        else if (this.checkCreditNoteSalesAccrued())
        {
            amountCur   = -amountCur;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        projProposalRevenue = _buffer;
        projTrans       = ProjTrans::newProjProposalRevenue(projProposalRevenue);

        this.parmTransIdCost(projTrans.transId());
        this.parmTransIdSales(projTrans.transId());

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTrans</Name>
				<Source><![CDATA[
    public Common newTrans()
    {
        return newProjInvoiceRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransStatus</Name>
				<Source><![CDATA[
    public ProjTransStatus parmTransStatus(ProjTransStatus  _transStatus = 0)
    {
        return projTrans.transStatus() == ProjTransStatus::CreditnoteProposal ? ProjTransStatus::Posted : ProjTransStatus::Invoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetTurnoverAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>LedgerPostingType::ProjSalesvalueOffset</c> enumeration value.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::ProjSalesvalueOffset</c> enumeration value.
    /// </returns>
    public LedgerPostingType postingTypeOffsetTurnoverAccrued()
    {
        if (projTrans.smaSubscriptionId())
        {
            return LedgerPostingType::ProjAccruedRevenueSubscription;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeTurnoverAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>LedgerPostingType::ProjSalesValue</c> enumeration value.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::ProjSalesValue</c> enumeration value.
    /// </returns>
    public LedgerPostingType postingTypeTurnoverAccrued()
    {
        if (projTrans.smaSubscriptionId())
        {
            return LedgerPostingType::ProjWIPSubscription;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    public void projTransCreate()
    {
        ProjRevenueTrans        projRevenueTrans;

        newProjInvoiceRevenue.clear();

        newProjInvoiceRevenue = ProjInvoiceRevenue::initInvoiceFromProposale(projProposalRevenue);

        newProjInvoiceRevenue.ProjInvoiceId  = projProposalRevenue.projProposalJour().ProjInvoiceId;
        newProjInvoiceRevenue.InvoiceDate    = projProposalRevenue.projProposalJour().InvoiceDate;

        if (!newProjInvoiceRevenue.validateWrite())
        {
            // Update has been aborted due to an error.
            throw error("@SYS21628");
        }

        newProjInvoiceRevenue.insert();

        Docu::copy(projProposalRevenue, newProjInvoiceRevenue);

        projRevenueTrans = ProjRevenueTrans::find(projProposalRevenue.TransId, true);

        if ((projRevenueTrans.TransactionOrigin == ProjOrigin::Subscription) && SMAParametersSubscription::find().InvoiceToProjectDate)
        {
            if (ledgerVoucher.findLedgerVoucherObject().parmTransDate())
            {
                projRevenueTrans.TransDate      = ledgerVoucher.findLedgerVoucherObject().parmTransDate();
            }
        }

        projRevenueTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        ProjRevenueTrans    projRevenueTrans;

        projRevenueTrans = ProjRevenueTrans::find(projTrans.transId(),true);

        projRevenueTrans.Txt = projTrans.txt();

        if ((projRevenueTrans.TransactionOrigin == ProjOrigin::Subscription) && SMAParametersSubscription::find().InvoiceToProjectDate)
        {
            if (ledgerVoucher.findLedgerVoucherObject().parmTransDate())
            {
                projRevenueTrans.TransDate      = ledgerVoucher.findLedgerVoucherObject().parmTransDate();
            }
        }

        projRevenueTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalSubscriptionAccruedAmount</Name>
				<Source><![CDATA[
    public AmountCur totalSubscriptionAccruedAmount()
    {
        SMAAccruePeriodLine smaAccruePeriodLine;

        select sum(AmountMST) from smaAccruePeriodLine
            where smaAccruePeriodLine.ProjRevenueTransId == projTrans.transId();

        return CurrencyExchangeHelper::curAmount(-smaAccruePeriodLine.AmountMST, this.currencyIdSales(), projTrans.transDate(), this.triangulationSales(), projTrans.exchRateSales(), projTrans.exchRateSecondarySales());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>