<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatProductSubmitToWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatProductSubmitToWorkflow
{
    menuItemName                submitMenuItemName;
    Common                      documentRecord;
    menuItemName                menuItemName;
    WorkflowVersionTable        workflowVersionTable;
    WorkflowComment             workflowComment;
    WorkflowWorkItemTable       workflowWorkItemTable;
    workflowTypeName			 workflowTemplateName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows a dialog box to submit workflow comments.
    /// </summary>
    /// <returns>
    ///    true if the dialog box was closed by pressing the OK button; otherwise, false.
    /// </returns>
    public boolean dialogOk()
    {
        WorkflowSubmitDialog            workflowSubmitDialog;
        boolean                         ok;

            if (this.isSubmit())
            {
                workflowSubmitDialog = WorkflowSubmitDialog::construct(this.parmWorkflowVersionTable());
                workflowSubmitDialog.run();
                this.parmWorkflowComment(workflowSubmitDialog.parmWorkflowComment());
                ok = workflowSubmitDialog.parmIsClosedOK();
            }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(
        Common _documentRecord,
        menuItemName _menuItemName,
        WorkflowVersionTable _workflowVersionTable,
        WorkflowWorkItemTable _workflowWorkItemTable
    )
    {
            this.parmDocumentRecord(_documentRecord);
            this.parmMenuItemName(_menuItemName);
            this.parmWorkflowVersionTable(_workflowVersionTable);
            this.parmWorkflowWorkItemtable(_workflowWorkItemTable);
            this.parmWorkflowTemplateName(this.parmWorkflowVersionTable().WorkflowTable().TemplateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEPWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the workflow item action was executed by using the Enterprise Portal framework.
    /// </summary>
    /// <returns>
    ///    true if the workflow item action was executed by using the Enterprise Portal framework; otherwise,
    ///    false.
    /// </returns>
    public boolean isEPWorkflow()
    {
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the workflow item action was submit.
    /// </summary>
    /// <returns>
    ///    true if the workflow item action was submit; otherwise, false.
    /// </returns>
    public boolean isSubmit()
    {
        if (menuItemName == submitMenuItemName)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the menu item strings to the configured values for the workflow template and workflow
    ///    approval.
    /// </summary>
    void new()
    {
        this.parmSubmitMenuItemName(menuitemactionstr(CatProductSubmitToWorkflow));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the document record.
    /// </summary>
    /// <param name="_documentRecord">
    ///    The document record to set; optional.
    /// </param>
    /// <returns>
    ///    The current document record.
    /// </returns>
    public Common parmDocumentRecord(Common _documentRecord = documentRecord)
    {
        documentRecord = _documentRecord;

        return documentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the workflow action menu item name.
    /// </summary>
    /// <param name="_menuItemName">
    ///    The workflow action menu item name to set; optional.
    /// </param>
    /// <returns>
    ///    The workflow action menu item name.
    /// </returns>
    public menuItemName parmMenuItemName(menuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;

        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubmitMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the submit action menu item name.
    /// </summary>
    /// <param name="_submitMenuItemName">
    ///    The submit action menu item name to set; optional.
    /// </param>
    /// <returns>
    ///    The submit action menu item name.
    /// </returns>
    public menuItemName parmSubmitMenuItemName(menuItemName _submitMenuItemName = submitMenuItemName)
    {
        submitMenuItemName = _submitMenuItemName;

        return submitMenuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>WorkflowComment</c> parameter.
    /// </summary>
    /// <param name="_workflowComment">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The current <c>WorkflowComment</c> parameter.
    /// </returns>
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowTemplateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>WorkflowTemplateName</c> parameter.
    /// </summary>
    /// <param name="_workflowTemplateName">
    ///    The <c>WorkflowTemplateName</c> to set; optional.
    /// </param>
    /// <returns>
    ///    The current <c>WorkflowTemplateName</c> parameter.
    /// </returns>
    public workflowTypeName parmWorkflowTemplateName(workflowTypeName _workflowTemplateName = workflowTemplateName)
    {
        workflowTemplateName = _workflowTemplateName;

        return workflowTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>WorkflowVersionTable</c> record.
    /// </summary>
    /// <param name="_workflowVersionTable">
    ///    The <c>WorkflowVersionTable</c> record to set.
    /// </param>
    /// <returns>
    ///    The current <c>WorkflowVersionTable</c> record.
    /// </returns>
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>WorkflowWorkItemTable</c> record.
    /// </summary>
    /// <param name="_workflowWorkItemTable">
    ///    The <c>WorkflowWorkItemTable</c> record to set.
    /// </param>
    /// <returns>
    ///    The current <c>WorkflowWorkItemTable</c> record.
    /// </returns>
    public WorkflowWorkItemTable parmWorkflowWorkItemTable(WorkflowWorkItemTable _workflowWorkItemTable = workflowWorkItemTable)
    {
        workflowWorkItemTable = _workflowWorkItemTable;

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Submits to the approval workflow.
    /// </summary>
    /// <remarks>
    ///    This method starts the workflow by calling the <c>activateFromWorkflowTemplate</c> method on the
    ///    <c>Workflow</c> class.The document is updated.
    /// </remarks>
    public void submit()
    {
        ttsbegin;

        // Activate the workflow.
        Workflow::activateFromWorkflowType(this.parmWorkflowTemplateName(),
                this.parmDocumentRecord().RecId,
                this.parmWorkflowComment(),
                this.isEPWorkflow());

        // Update the document
        this.updateDocument();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    public void updateDocument()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>CatProcureCatalogWorkflow</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>CatProcureCatalogWorkflow</c> class.
    /// </returns>
    public static CatProductSubmitToWorkflow construct()
    {
        return new CatProductSubmitToWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CatProductSubmitToWorkflow catProductSubmitToWorkflow;

        // Initialize the CatProductSubmitToWorkflow object
        catProductSubmitToWorkflow = CatProductSubmitToWorkflow::construct();
        if (_args.menuItemName() == catProductSubmitToWorkflow.parmSubmitMenuItemName()
                &&
            _args.caller() is FormRun)
        {
            catProductSubmitToWorkflow.init(_args.record(), _args.menuItemName(), _args.caller().getActiveWorkflowConfiguration(), _args.caller().getActiveWorkflowWorkItem());
        }
        else
        {
            throw error(strfmt('The CatProductSubmitToWorkflow main method is being called from an unsupported action menu item %1.', _args.menuItemName()));
        }
        // Display the workflow dialog
        if (catProductSubmitToWorkflow.dialogOk())
        {
                catProductSubmitToWorkflow.submit();

            // Update the workflow controls if it is the AX thick client

                _args.caller().updateWorkflowControls();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>