<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesConfirmDP_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesConfirmDP))]
public final class SalesConfirmDP_ApplicationSuite_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeSalesOrderConfirmationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales order confirmation line.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation header.
    /// </param>
    /// <param name = "_confirmationLineSelection">
    /// A <c>SalesConfirmDPConfirmationLineQuerySelection</c> object which the sales order confirmation line should be initialized from.
    /// </param>
    /// <returns>
    /// The initialized <c>SalesConfirmDetailsTmp</c> sales order confirmation line record.
    /// </returns>
    protected SalesConfirmDetailsTmp initializeSalesOrderConfirmationLine(SalesConfirmHeaderTmp _salesConfirmHeaderTmp, SalesConfirmDPConfirmationLineQuerySelection _confirmationLineSelection)
    {
        SalesConfirmDetailsTmp salesConfirmTmp = next initializeSalesOrderConfirmationLine(_salesConfirmHeaderTmp, _confirmationLineSelection);

        if (conFind(FreeNotesOnDocumentsConstants::DocuOnFormularAllLine, this.parmCustFormletterDocument().DocuOnConfirm))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(
                _confirmationLineSelection.parmCustConfirmTrans(),
                this.parmCustFormletterDocument().DocuTypeConfirm,
                DocuRestriction::External);

            if (docuRefSearch)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00041, funcName());
            }

            salesConfirmTmp.Notes = Docu::concatDocuRefNotes(docuRefSearch);
        }

        return salesConfirmTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxSpecSalesOrderConfirmationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales order confirmation tax line.
    /// </summary>
    /// <param name = "_salesConfirmHeaderTmp">
    /// A <c>SalesConfirmHeaderTmp</c> record which is the sales order confirmation header.
    /// </param>
    /// <param name = "_taxSpec">
    /// The <c>TaxSpec</c> object that is used to create the sales order confirmation tax line.
    /// </param>
    /// <returns>
    /// The initialized <c>SalesConfirmDetailsTmp</c> sales order confirmation tax line record.
    /// </returns>
    protected SalesConfirmDetailsTmp initializeTaxSpecSalesOrderConfirmationLine(SalesConfirmHeaderTmp _salesConfirmHeaderTmp, TaxSpec _taxSpec)
    {
        SalesConfirmDetailsTmp salesConfirmTmp = next initializeTaxSpecSalesOrderConfirmationLine(_salesConfirmHeaderTmp, _taxSpec);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]) && _taxSpec)
        {
            if (!_taxSpec.taxCode())
            {
                salesConfirmTmp.TaxCode = _taxSpec.reportingTaxCode();
            }

            if (!_taxSpec.taxWriteCode())
            {
                salesConfirmTmp.PrintCode = _taxSpec.reportingTaxWriteCode();
            }
        }

        return salesConfirmTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesOrderConfirmationHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales order confirmation header.
    /// </summary>
    /// <returns>
    /// The initialized <c>SalesConfirmHeaderTmp</c> sales order confirmation header record.
    /// </returns>
    protected SalesConfirmHeaderTmp initializeSalesOrderConfirmationHeader()
    {
        SalesConfirmHeaderTmp salesConfirmHeaderTmp = next initializeSalesOrderConfirmationHeader();

        if (conFind(FreeNotesOnDocumentsConstants::DocuOnFormularAllHead, this.parmCustFormletterDocument().DocuOnConfirm))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(
                this.parmCustConfirmJour(),
                this.parmCustFormletterDocument().DocuTypeConfirm,
                DocuRestriction::External);

            if (docuRefSearch)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00041, funcName());
            }

            salesConfirmHeaderTmp.MainNotes = Docu::concatDocuRefNotes(docuRefSearch);
        }
        return salesConfirmHeaderTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>