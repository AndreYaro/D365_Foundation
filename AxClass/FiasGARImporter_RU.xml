<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiasGARImporter_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
using Microsoft.DynamicsOnline.Infrastructure.Components.SharedServiceUnitStorage;

/// <summary>
/// The <c>FiasGARImporter_RU</c> is a service for <c>FiasGARImportController_RU</c>,
/// imports data from xml to FiasGAR* tables.
/// </summary>
internal class FiasGARImporter_RU extends SysOperationServiceBase
{
    private const str integrationPointFormat = classStr(ERTableDestination) + '#' + '%1';
    private LogisticsAddressImportVersionId_RU versionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importGARFile</Name>
				<Source><![CDATA[
    internal void importGARFile(FiasGARImportContract_RU _dataContract)
    {
        FiasGARConfigurations::initGARFileConfigurations();
        try
        {
            this.unZipFileAndImportAddressToGAB(_dataContract);
        }
        catch
        {
            throw error(AifUtil::getClrErrorMessage());
        }
        finally
        {
            this.clearAllFiasGARTables();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unZipFileAndImportAddressToGAB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unzip GAR file and import address:
    /// 1. Validates files version.
    /// 2. Import metadata from xml file to FiasGAR*Types and <c>FIASOperationStatuses</c> tables.
    /// 3. import address data from xml file to FiasGAR* tables.
    /// 4. Import address from FiasGAR* tables to GAB LogisticsAddress* tables.
    /// 5. Create logs.
    /// </summary>
    /// <param name = "_dataContract">The data contract.</param>
    private void unZipFileAndImportAddressToGAB(FiasGARImportContract_RU _dataContract)
    {
        if (!_dataContract.parmUploadGARFileID())
        {
            return;
        }
        Container metadataFiles, addressHierarchyParamsFiles;
        str filePath = this.getUploadFileURL(_dataContract.parmUploadGARFileID());
        using (System.IO.Compression.ZipArchive archive = new System.IO.Compression.ZipArchive(File::UseFileFromURL(filePath), System.IO.Compression.ZipArchiveMode::Read))
        {
            CLRObject archiveEntries = archive.get_Entries();
            for (int i = 0; i < archiveEntries.get_Count(); i++)
            {
                System.IO.Compression.ZipArchiveEntry entryTmp = archiveEntries.get_Item(i);
                if (System.IO.Path::HasExtension(entryTmp.Name) && !this.isValidVersionId(entryTmp.Name))
                {
                    return;
                }

                if (FiasGARConfigurations::getFiasGARConfigurationByFileNameAndFileType(FiasGARImportUtils::getAddressFileNamePrefix(entryTmp.Name), FiasGARFileType::Metadata).RecId)
                {
                    metadataFiles += [entryTmp.FullName];
                }
                else
                {
                    addressHierarchyParamsFiles += [entryTmp.FullName];
                }
            }
        }

        Map directories = this.getDirectoriesInZip(addressHierarchyParamsFiles, _dataContract);
        using (System.IO.Compression.ZipArchive archive = new System.IO.Compression.ZipArchive(File::UseFileFromURL(filePath), System.IO.Compression.ZipArchiveMode::Read))
        {
            RecId solutionVersionRecId;
            str integrationPoint;
            // Imports metadata
            for (int i = 1; i <= conLen(metadataFiles); i++)
            {
                System.IO.Compression.ZipArchiveEntry entry = archive.GetEntry(conPeek(metadataFiles, i));
                System.IO.Stream originStream = entry.Open();
                using (System.IO.MemoryStream fileStream = new System.IO.MemoryStream())
                {
                    [solutionVersionRecId, integrationPoint] = this.getMetadataConfigurationAndIntegrationPoint(FiasGARImportUtils::getAddressFileNamePrefix(entry.Name));
                    if (solutionVersionRecId && integrationPoint != '')
                    {
                        originStream.CopyTo(fileStream);
                        this.importDataByConfigurationAndIntegrationPoint(solutionVersionRecId, fileStream, integrationPoint);
                    }
                    else
                    {
                        throw error(strFmt("@FIAS:MissingConfiguration", entry.Name));
                    }
                }
            }

            // Imports address
            if (this.isMetadataImported(_dataContract))
            {
                MapEnumerator directoriesEnumerator = directories.getEnumerator();
                while(directoriesEnumerator.moveNext())
                {
                    this.clearAllFiasGARTables();
                    str stateId = directoriesEnumerator.currentKey();
                    container addressFiles = directoriesEnumerator.currentValue();
                    boolean isAllowedImport = true;
                    for (int i = 1; i <= conLen(addressFiles); i++)
                    {
                        System.IO.Compression.ZipArchiveEntry entry = archive.GetEntry(conPeek(addressFiles, i));
                        int fileSizeGB = entry.Length >> 30;
                        if (fileSizeGB >= 2)
                        {
                            isAllowedImport = false;
                            warning(strFmt("@FIAS:FileSizeLargerThanTwoGB", stateId, entry.Name));
                            break;
                        }
                    }

                    if (isAllowedImport)
                    {
                        for (int i = 1; i <= conLen(addressFiles); i++)
                        {
                            str fullPath = conPeek(addressFiles, i);
                            System.IO.Compression.ZipArchiveEntry entry = archive.GetEntry(fullPath);
                            System.IO.Stream originStream = entry.Open();
                            using (System.IO.MemoryStream fileStream = new System.IO.MemoryStream())
                            {
                                [solutionVersionRecId, integrationPoint] = this.getAddressHierarchyParamsConfigAndIntegrationPoint(FiasGARImportUtils::getAddressFileNamePrefix(entry.Name));
                                if (solutionVersionRecId && integrationPoint != '')
                                {
                                    originStream.CopyTo(fileStream);
                                    this.importDataByConfigurationAndIntegrationPoint(solutionVersionRecId, fileStream, integrationPoint);
                                }
                                else
                                {
                                    throw error(strFmt("@FIAS:MissingConfiguration", fullPath));
                                }
                            }
                        }

                        this.importAddressFromFiasTableToGAB(stateId, _dataContract);
                    }
                }
            }
        }
        this.createLogs(directories.keySet(), _dataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importDataByConfigurationAndIntegrationPoint</Name>
				<Source><![CDATA[
    internal void importDataByConfigurationAndIntegrationPoint(RecId _solutionRecId, System.IO.MemoryStream _fileStream,  str _integrationPoint)
    {
        ERSolutionVersionTable solutionVersionTable;
        select firstonly RecId, Solution from solutionVersionTable
            order by solutionVersionTable.VersionNumber desc
            where solutionVersionTable.Solution == _solutionRecId
                && (solutionVersionTable.Status == ERSolutionVersionStatus::Completed
                    || solutionVersionTable.Status == ERSolutionVersionStatus::Shared);

        if (solutionVersionTable)
        {
            ERSolutionTable solutionTable;
            ERModelMappingTable mappingTable;

            select firstonly RecId from mappingTable
                join RecId from solutionTable
                where mappingTable.Solution == solutionTable.RecId
                    && solutionTable.RecId == solutionVersionTable.Solution;

            ERIModelMappingDestinationRun runner = ERObjectsFactory::createMappingDestinationRunByImportFormatMappingId(mappingTable.RecId, _integrationPoint, false, false, false);
            runner.init();
            ERModelDefinitionParameters parameters = runner.getParameters();
            ERModelDefinitionParametersTraverser traverser = new ERModelDefinitionParametersTraverser(parameters);

            while (traverser.moveNext())
            {
                ERIImportFormatDataSourceContract current = ERCast::asAny(traverser.current()) as ERIImportFormatDataSourceContract;
                if (current)
                {
                    current.parmInputDataStream(_fileStream);
                    break;
                }
            }
            runner.runUnattended();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importAddressFromFiasTableToGAB</Name>
				<Source><![CDATA[
    private void importAddressFromFiasTableToGAB(str _stateId, FiasGARImportContract_RU _dataContract)
    {
        FiasGARImportToGAB_RU gabImporter = FiasGARImportToGAB_RU::construct(versionId);
        gabImporter.importFromFiasGARToGAB(_stateId, _dataContract.parmIsImportHousesSteads(), _dataContract.parmIsImportRoomsAparts());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressHierarchyParamsConfigAndIntegrationPoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the configuration by the GAR file name.
    /// </summary>
    /// <param name = "_fileName">GAR address file name.</param>
    /// <returns>Configuration name and address data type.</returns>
    private container getAddressHierarchyParamsConfigAndIntegrationPoint(str _fileName)
    {
        RecId solution;
        str integrationPoint;

        FiasGARConfigurations fiasGARConfigurations= FiasGARConfigurations::getFiasGARConfigurationByFileNameAndFileType(_fileName, FiasGARFileType::Hierarchy);
        if (fiasGARConfigurations)
        {
            solution = fiasGARConfigurations.ERSolutionRecId;
            integrationPoint = strFmt(integrationPointFormat, tableStr(FiasGARMUNHierarchy));
            return [solution, integrationPoint];
        }

        fiasGARConfigurations= FiasGARConfigurations::getFiasGARConfigurationByFileNameAndFileType(_fileName, FiasGARFileType::Params);
        if (fiasGARConfigurations)
        {
            solution = fiasGARConfigurations.ERSolutionRecId;
            integrationPoint = strFmt(integrationPointFormat, tableStr(FiasGARParams));
            return [solution, integrationPoint];
        }

        fiasGARConfigurations= FiasGARConfigurations::getFiasGARConfigurationByFileNameAndFileType(_fileName, FiasGARFileType::Address);
        if (fiasGARConfigurations)
        {
            solution = fiasGARConfigurations.ERSolutionRecId;
            for (int i = 1; i <= conLen(FiasGARImportUtils::AddressTypes); i++)
            {
                str addressType = conPeek(FiasGARImportUtils::AddressTypes, i);
                if (strScan(_fileName, addressType, 1, strLen(_fileName)))
                {
                    integrationPoint = strFmt(integrationPointFormat, FiasGARImportUtils::fiasGARAddressTypeToTableName(addressType));
                    return [solution, integrationPoint];
                }
            }
        }

        return [solution, integrationPoint];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMetadataConfigurationAndIntegrationPoint</Name>
				<Source><![CDATA[
    private container getMetadataConfigurationAndIntegrationPoint(str _metadataFileName)
    {
        RecId solution;
        str integrationPoint;
        FiasGARConfigurations fiasGARConfigurations = FiasGARConfigurations::getFiasGARConfigurationByFileNameAndFileType(_metadataFileName, FiasGARFileType::Metadata);

        if (fiasGARConfigurations.RecId)
        {
            solution = fiasGARConfigurations.ERSolutionRecId;

            for (int i = 1; i <= conLen(FiasGARImportUtils::MetadataTypes); i++)
            {
                str metadataTypeName = conPeek(FiasGARImportUtils::MetadataTypes, i);
                if (strScan(_metadataFileName, metadataTypeName, 1, strLen(_metadataFileName)))
                {
                    integrationPoint = strFmt(integrationPointFormat, FiasGARImportUtils::fiasGARMetadataTypeToTableName(metadataTypeName));
                    break;
                }
            }
        }
        return [solution, integrationPoint];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirectoriesInZip</Name>
				<Source><![CDATA[
    private Map getDirectoriesInZip(container _addressHierarchyParamsFiles, FiasGARImportContract_RU _dataContract)
    {
        Set statesSet = new Set(Types::String);

        // Only import states that already existed if not full import
        if (!_dataContract.parmIsFullImport())
        {
            LogisticsAddressCountryRegionId countryRegionCode = LogisticsAddressCountryRegion::findByISOCode(SysCountryRegionCode::countryInfo(curext())).CountryRegionId;

            LogisticsAddressState logisticsAddressState;
            while select StateId from logisticsAddressState
                 where logisticsAddressState.CountryRegionId == countryRegionCode
            {
                statesSet.add(logisticsAddressState.StateId);
            }
        }

        Map directories = new Map(Types::String, Types::Container);
        for (int i = 1; i <= conLen(_addressHierarchyParamsFiles); i++)
        {
            str fileFullPathName = conPeek(_addressHierarchyParamsFiles, i);
            var path = ERPath::Parse(fileFullPathName);

            boolean isSkipRoomApartImport = !_dataContract.parmIsImportRoomsAparts()
                && (strScan(fileFullPathName, FiasGARImportUtils::APARTMENT, 1, strLen(fileFullPathName))
                    || strScan(fileFullPathName, FiasGARImportUtils::ROOM, 1, strLen(fileFullPathName)));

            boolean isSkipHouseSteads = !_dataContract.parmIsImportHousesSteads()
                && (strScan(fileFullPathName, FiasGARImportUtils::HOUSE, 1, strLen(fileFullPathName))
                    || strScan(fileFullPathName, FiasGARImportUtils::STEAD, 1, strLen(fileFullPathName)));

            if (isSkipRoomApartImport
                || isSkipHouseSteads
                || !System.IO.Path::HasExtension(fileFullPathName)
                || !FiasGARImportUtils::isAllowedImportFielType(FiasGARImportUtils::getAddressFileNamePrefix(path.GetValue(path.Length - 1))))
            {
                continue;
            }

            if (path.length > 1)
            {
                str folderName = path.GetValue(path.Length - 2);
                if (!_dataContract.parmIsFullImport() && !statesSet.in(folderName))
                {
                    continue;
                }

                container filesInFolder;
                if (directories.exists(folderName))
                {
                    filesInFolder = directories.lookup(folderName);
                    filesInFolder += [fileFullPathName];
                }
                else
                {
                    filesInFolder = [fileFullPathName];
                }
                directories.insert(folderName, filesInFolder);
            }
        }
        return directories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllFiasGARTables</Name>
				<Source><![CDATA[
    private void clearAllFiasGARTables()
    {
        ttsbegin;
        FiasGARAddressObject fiasGARAddressObject;
        FiasGARApartment fiasGARApartment;
        FiasGARHouse fiasGARHouse;
        FiasGARMUNHierarchy fiasGARMUNHierarchy;
        FiasGARParams fiasGARParams;
        FiasGARRoom fiasGARRoom;
        FiasGARSteads fiasGARSteads;

        delete_from fiasGARAddressObject;
        delete_from fiasGARApartment;
        delete_from fiasGARHouse;
        delete_from fiasGARMUNHierarchy;
        delete_from fiasGARParams;
        delete_from fiasGARRoom;
        delete_from fiasGARSteads;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMetadataImported</Name>
				<Source><![CDATA[
    private boolean isMetadataImported(FiasGARImportContract_RU _dataContract)
    {
        boolean isvalid = true;
        str missingMetadata;

        FiasGARAddrObjTypes addrObjTypes;
        select firstonly RecId from addrObjTypes;
        if (!addrObjTypes.RecId)
        {
            isvalid = false;
            missingMetadata += strFmt(FiasGARImportUtils::MeataDataFileNameFormat, FiasGARImportUtils::ADDR_OBJ);
        }

        FIASOperationStatuses_RU operStatus;
        select firstonly RecId from operStatus;
        if (!operStatus.RecId)
        {
            missingMetadata = isvalid ? missingMetadata : (missingMetadata + ',');
            missingMetadata += strFmt(FiasGARImportUtils::MeataDataFileNameFormat, FiasGARImportUtils::MetadataOPERATIONE);
            isvalid = false;
        }

        FiasGARHouseTypes houseTypes;
        select firstonly RecId from houseTypes;
        if (_dataContract.parmIsImportHousesSteads() && !houseTypes.RecId)
        {
            missingMetadata = isvalid ? missingMetadata : (missingMetadata + ',');
            missingMetadata += strFmt(FiasGARImportUtils::MeataDataFileNameFormat, FiasGARImportUtils::HOUSE);
            isvalid = false;
        }

        if (_dataContract.parmIsImportRoomsAparts())
        {
            FiasGARRoomTypes roomTypes;
            select firstonly RecId from roomTypes;
            if (!roomTypes.RecId)
            {
                missingMetadata = isvalid ? missingMetadata : (missingMetadata + ',');
                missingMetadata += strFmt(FiasGARImportUtils::MeataDataFileNameFormat, FiasGARImportUtils::ROOM);
                isvalid = false;
            }

            FiasGARApartmentTypes apartTypes;
            select firstonly RecId from apartTypes;
            if (!apartTypes.RecId)
            {
                missingMetadata = isvalid ? missingMetadata : (missingMetadata + ',');
                missingMetadata += strFmt(FiasGARImportUtils::MeataDataFileNameFormat, FiasGARImportUtils::APARTMENT);
                isvalid = false;
            }
        }

        if (!isvalid)
        {
            throw error(strFmt("@FIAS:UploadMetadata", missingMetadata));
        }

        return isvalid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUploadFileURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the uploaded file URL from storage by the file id.
    /// </summary>
    /// <param name = "_uploadFileID">The file ID.</param>
    /// <returns>Returns the file URL.</returns>
    private str getUploadFileURL(SharedServiceUnitFileID _uploadFileID)
    {
        SharedServiceUnitNotFoundException sharedServiceUnitNotFoundException;
        str uploadFileURL = '';
        var blobStorageService = new SharedServiceUnitStorage(SharedServiceUnitStorage::GetDefaultStorageContext());
        var strategy = new FileUploadTemporaryStorageStrategy();
        SharedServiceUnitStorageData uploadedBlobInfo;
        try
        {
            uploadedBlobInfo = blobStorageService.GetData(
                _uploadFileID,
                FileUploadTemporaryStorageStrategy::AzureStorageCategory,
                BlobUrlPermission::Read,
                System.TimeSpan::FromMinutes(strategy.getBlobLinkExpirationTimeSpanInMinutes()),
                false);

            uploadFileURL = uploadedBlobInfo.BlobLink;
        }
        catch (sharedServiceUnitNotFoundException)
        {
            if (sharedServiceUnitNotFoundException.get_Id() && sharedServiceUnitNotFoundException.get_Name())
            {
                throw error(strFmt("@ApplicationPlatform:FileUploadFileExpiredMessage",
                    uploadedBlobInfo.Name,
                    sharedServiceUnitNotFoundException.get_ExpirationDate().ToLocalTime().ToString()));
            }
            else
            {
                throw error(sharedServiceUnitNotFoundException.get_Message());
            }
        }
        return uploadFileURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validtes GAR address file version.
    /// E.g, address file version should be 20211213 if _fileName is AS_ADDR_OBJ_20211213_ca419d77-f4ed-4577-82f5-ef45bebd91d5.XML
    /// </summary>
    /// <param name = "_fileName">The full file name in GAR</param>
    /// <returns>true if valid address version, otherwise false.</returns>
    private boolean isValidVersionId(str _fileName)
    {
        boolean validVersion = true;
        str pattern = '_([0-9]{8})+_';
        System.Text.RegularExpressions.Regex regex  = new System.Text.RegularExpressions.Regex(pattern);
        System.Text.RegularExpressions.Match regExMatch = regex.Match(_fileName);

        if (regExMatch && regExMatch.Success)
        {
            str currentDateStr = strReplace(regExMatch.get_Value(), '_', '');
            if (versionId == 0)
            {
                versionId = str2int(currentDateStr);
            }

            if (versionId < this.getLatestImportedGARVersion())
            {
                validVersion = false;
                throw error("@FIAS:GARAddressValidateFailedWithOldVersion");
            }
            if (versionId != str2int(currentDateStr))
            {
                validVersion = false;
                throw error("@FIAS:GARAddressVersionValidateFailedWithMutipleVersion");
            }
        }
        else
        {
            validVersion = false;
        }
        return validVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogs</Name>
				<Source><![CDATA[
    private void createLogs(Set _statesSet, FiasGARImportContract_RU _dataContract)
    {
        if (!_statesSet.empty())
        {
            ttsbegin;
            FiasGARImportHistory importHistory;
            importHistory.ImportDate = DateTimeUtil::getToday(Timezone::GMT_COORDINATEDUNIVERSALTIME);
            importHistory.VersionId = versionId;
            importHistory.Regions = strRem(_statesSet.toString(), '{}"');
            importHistory.IsFullImport = _dataContract.parmIsFullImport();
            importHistory.IsHouseSteadIncluded = _dataContract.parmIsImportHousesSteads();
            importHistory.IsRoomApartIncluded = _dataContract.parmIsImportRoomsAparts();
            importHistory.CountryRegionId = LogisticsAddressCountryRegion::findByISOCode(SysCountryRegionCode::countryInfo(curext())).CountryRegionId;
            importHistory.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestImportedGARVersion</Name>
				<Source><![CDATA[
    private LogisticsAddressImportVersionId_RU getLatestImportedGARVersion()
    {
        FiasGARImportHistory importHistory;
        select firstonly VersionId from importHistory
            order by importHistory.VersionId desc;

        return importHistory.VersionId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>