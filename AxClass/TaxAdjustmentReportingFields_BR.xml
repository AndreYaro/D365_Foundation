<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxAdjustmentReportingFields_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Adjust the brazillian reporting fields.
/// </summary>
class TaxAdjustmentReportingFields_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjust</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts the brazillian reporting fields.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    ///     The <c>TmpTaxWorkTrans</c> record to be adjusted.
    /// </param>
    /// <param name="_sourceCurrencyCode">
    ///     The source currency code to calculate amount in accounting currency.
    /// </param>
    public static void adjust(TmpTaxWorkTrans _tmpTaxWorkTrans, CurrencyCode _sourceCurrencyCode)
    {
        TaxTable taxTable = taxTable::find(_tmpTaxWorkTrans.TaxCode);
        Currency        currencyMST;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceInfoLine     vendInvoiceInfoLine;

        void clearOtherTaxFields()
        {
            _tmpTaxWorkTrans.SourceOtherBaseAmount_BR       = 0;
            _tmpTaxWorkTrans.SourceOtherBaseTaxAmount_BR    = 0;
            _tmpTaxWorkTrans.SourceOtherBaseAmountMST_BR    = 0;
            _tmpTaxWorkTrans.SourceOtherTaxAmountMST_BR     = 0;
        }

        void clearExemptFields()
        {
            if (_tmpTaxWorkTrans.TaxDirection == TaxDirection::TaxExemptPurchase)
            {
                _tmpTaxWorkTrans.TaxDirection = TaxDirection::IncomingTax;
                _tmpTaxWorkTrans.ExemptTax = false;
            }
            _tmpTaxWorkTrans.SourceExemptBaseAmountMST_BR   = 0;
            _tmpTaxWorkTrans.SourceExemptBaseAmount_BR = 0;
        }

        void clearTaxReportingFields()
        {
            clearOtherTaxFields();
            clearExemptFields();

            _tmpTaxWorkTrans.TaxInCostPrice                 = 0;
            _tmpTaxWorkTrans.TaxInCostPriceCur              = 0;
            _tmpTaxWorkTrans.TaxInCostPriceRep              = 0;
            _tmpTaxWorkTrans.TaxInCostPriceMST              = 0;
        }

        switch (_tmpTaxWorkTrans.TaxType_BR)
        {
            case TaxType_BR::ICMS :
            case TaxType_BR::IPI  :

                switch (_tmpTaxWorkTrans.FiscalValue_BR)
                {
                    case TaxFiscalValue_BR::WithCreditDebit :
                        clearTaxReportingFields();

                        if (_tmpTaxWorkTrans.TaxReductionPct_BR != 0)
                        {
                            _tmpTaxWorkTrans.SourceExemptBaseAmount_BR = _tmpTaxWorkTrans.TaxBaseAmountOrig - (_tmpTaxWorkTrans.SourceBaseAmountCurRegulated ? _tmpTaxWorkTrans.SourceBaseAmountCurRegulated : _tmpTaxWorkTrans.SourceBaseAmountCur);
                        }
                        break;

                    case TaxFiscalValue_BR::WithoutCreditDebitOther :
                        clearExemptFields();

                        _tmpTaxWorkTrans.SourceOtherBaseAmount_BR = _tmpTaxWorkTrans.SourceBaseAmountCurRegulated ? _tmpTaxWorkTrans.SourceBaseAmountCurRegulated : _tmpTaxWorkTrans.SourceBaseAmountCur;
                        _tmpTaxWorkTrans.SourceOtherBaseTaxAmount_BR = _tmpTaxWorkTrans.SourceRegulateAmountCur ? _tmpTaxWorkTrans.SourceRegulateAmountCur : _tmpTaxWorkTrans.SourceTaxAmountCur;

                        _tmpTaxWorkTrans.SourceOtherBaseAmountMST_BR = _tmpTaxWorkTrans.TaxBaseAmount;
                        _tmpTaxWorkTrans.SourceOtherTaxAmountMST_BR = _tmpTaxWorkTrans.TaxAmount;

                        if (_tmpTaxWorkTrans.TaxReductionPct_BR != 0)
                        {
                            _tmpTaxWorkTrans.SourceExemptBaseAmount_BR = _tmpTaxWorkTrans.TaxBaseAmountOrig - _tmpTaxWorkTrans.SourceBaseAmountCur;
                        }
                        break;

                    case TaxFiscalValue_BR::WithoutCreditDebitExempt :
                        clearOtherTaxFields();

                        if (_tmpTaxWorkTrans.TaxReductionPct_BR !=0)
                        {
                            _tmpTaxWorkTrans.SourceExemptBaseAmount_BR = _tmpTaxWorkTrans.TaxBaseAmountOrig;
                        }
                        else
                        {
                            _tmpTaxWorkTrans.SourceExemptBaseAmount_BR = _tmpTaxWorkTrans.SourceBaseAmountCurRegulated ? _tmpTaxWorkTrans.SourceBaseAmountCurRegulated : _tmpTaxWorkTrans.SourceBaseAmountCur;
                        }
                        break;
                }
                break;

            default :
                switch (_tmpTaxWorkTrans.FiscalValue_BR)
                {
                    case TaxFiscalValue_BR::WithCreditDebit :
                        clearTaxReportingFields();
                        break;

                    case TaxFiscalValue_BR::WithoutCreditDebitExempt :
                        clearOtherTaxFields();
                        _tmpTaxWorkTrans.SourceExemptBaseAmount_BR = _tmpTaxWorkTrans.SourceBaseAmountCurRegulated ? _tmpTaxWorkTrans.SourceBaseAmountCurRegulated : _tmpTaxWorkTrans.SourceBaseAmountCur;
                        break;

                    case TaxFiscalValue_BR::WithoutCreditDebitOther :
                        clearExemptFields();

                        _tmpTaxWorkTrans.SourceOtherBaseAmount_BR = _tmpTaxWorkTrans.SourceBaseAmountCurRegulated ? _tmpTaxWorkTrans.SourceBaseAmountCurRegulated : _tmpTaxWorkTrans.SourceBaseAmountCur;
                        _tmpTaxWorkTrans.SourceOtherBaseTaxAmount_BR = _tmpTaxWorkTrans.SourceRegulateAmountCur ? _tmpTaxWorkTrans.SourceRegulateAmountCur : _tmpTaxWorkTrans.SourceTaxAmountCur;
                        break;
                }
        }

        currencyMST = Currency::find(Ledger::accountingCurrency(CompanyInfo::findDataArea(_tmpTaxWorkTrans.Company).RecId));

        if (currencyMST.CurrencyCode != _sourceCurrencyCode)
        {
            if (_tmpTaxWorkTrans.SourceTableId == tableNum(VendInvoiceInfoLine))
            {
                vendInvoiceInfoLine     = VendInvoiceInfoLine::findRecId( _tmpTaxWorkTrans.SourceRecId);
                vendInvoiceInfoTable    = vendInvoiceInfoLine.vendInvoiceInfoTable();

                if (vendInvoiceInfoTable.FixedExchRate && vendInvoiceInfoTable.ExchRate)
                {
                    _tmpTaxWorkTrans.SourceExemptBaseAmountMST_BR   =   CurrencyExchangeHelper::mstAmount(_tmpTaxWorkTrans.SourceExemptBaseAmountMST_BR,
                                                                                                                _sourceCurrencyCode,
                                                                                                                _tmpTaxWorkTrans.TransDate,
                                                                                                                _tmpTaxWorkTrans.EUROTriangulation ? UnknownNoYes::Unknown : UnknownNoYes::No,
                                                                                                                vendInvoiceInfoTable.ExchRate);

                    _tmpTaxWorkTrans.SourceOtherBaseAmountMST_BR    =   CurrencyExchangeHelper::mstAmount(_tmpTaxWorkTrans.SourceOtherBaseAmount_BR,
                                                                                                                _sourceCurrencyCode,
                                                                                                                _tmpTaxWorkTrans.TransDate,
                                                                                                                _tmpTaxWorkTrans.EUROTriangulation ? UnknownNoYes::Unknown : UnknownNoYes::No,
                                                                                                                vendInvoiceInfoTable.ExchRate);

                    _tmpTaxWorkTrans.SourceOtherTaxAmountMST_BR     =   CurrencyExchangeHelper::mstAmount(_tmpTaxWorkTrans.SourceOtherBaseTaxAmount_BR,
                                                                                                                _sourceCurrencyCode,
                                                                                                                _tmpTaxWorkTrans.TransDate,
                                                                                                                _tmpTaxWorkTrans.EUROTriangulation ? UnknownNoYes::Unknown : UnknownNoYes::No,
                                                                                                                vendInvoiceInfoTable.ExchRate);
                }
                else
                {
                    _tmpTaxWorkTrans.SourceExemptBaseAmountMST_BR   = CurrencyExchangeHelper::mstAmount(_tmpTaxWorkTrans.SourceExemptBaseAmount_BR,
                                                                                                            _sourceCurrencyCode,
                                                                                                            _tmpTaxWorkTrans.TransDate);

                    _tmpTaxWorkTrans.SourceOtherBaseAmountMST_BR = CurrencyExchangeHelper::mstAmount(_tmpTaxWorkTrans.SourceOtherBaseAmount_BR,
                                                                                                         _sourceCurrencyCode,
                                                                                                         _tmpTaxWorkTrans.TransDate);

                    _tmpTaxWorkTrans.SourceOtherTaxAmountMST_BR = CurrencyExchangeHelper::mstAmount(_tmpTaxWorkTrans.SourceOtherBaseTaxAmount_BR,
                                                                                                        _sourceCurrencyCode,
                                                                                                        _tmpTaxWorkTrans.TransDate);
                }
            }
            else
            {
                _tmpTaxWorkTrans.SourceExemptBaseAmountMST_BR   = CurrencyExchangeHelper::mstAmount(_tmpTaxWorkTrans.SourceExemptBaseAmount_BR,
                                                                                            _sourceCurrencyCode,
                                                                                            _tmpTaxWorkTrans.TransDate);

                _tmpTaxWorkTrans.SourceOtherBaseAmountMST_BR = CurrencyExchangeHelper::mstAmount(_tmpTaxWorkTrans.SourceOtherBaseAmount_BR,
                                                                                        _sourceCurrencyCode,
                                                                                        _tmpTaxWorkTrans.TransDate);

                _tmpTaxWorkTrans.SourceOtherTaxAmountMST_BR = CurrencyExchangeHelper::mstAmount(_tmpTaxWorkTrans.SourceOtherBaseTaxAmount_BR,
                                                                                      _sourceCurrencyCode,
                                                                                      _tmpTaxWorkTrans.TransDate);
            }
        }
        else
        {
            _tmpTaxWorkTrans.SourceExemptBaseAmountMST_BR   = _tmpTaxWorkTrans.SourceExemptBaseAmount_BR;
            _tmpTaxWorkTrans.SourceOtherBaseAmountMST_BR = _tmpTaxWorkTrans.SourceOtherBaseAmount_BR;
            _tmpTaxWorkTrans.SourceOtherTaxAmountMST_BR = _tmpTaxWorkTrans.SourceOtherBaseTaxAmount_BR;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>