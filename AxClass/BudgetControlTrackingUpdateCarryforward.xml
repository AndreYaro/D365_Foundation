<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlTrackingUpdateCarryforward</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlTrackingUpdateCarryforward</c> class is a sub class of the
/// <c>BudgetControlTrackingUpdate</c> class and is specialized in order to manage the carry forward
/// budget tracking information.
/// </summary>
public class BudgetControlTrackingUpdateCarryforward extends BudgetControlTrackingUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>relieveSourceLedgerDimensionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the base implementation and will always throw an exception.
    /// </summary>
    /// <param name="_primaryLedgerIdToRelieve">
    /// The ID of primary <c>Ledger</c> record to relieve budget funds.
    /// </param>
    /// <param name="_controlLedgerDimension">
    /// The budget control ledger dimension that is relieving the budget funds.
    /// </param>
    /// <param name="_relievingDetail">
    /// The <c>BudgetRelievingDetail</c> object that contains the ledger dimension detail for budget funds
    /// relieving.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// Cannot perform carry forward amounts tracking and relieve ledger dimension amounts for the same
    /// budget source at the same time.
    /// </exception>
    public void relieveSourceLedgerDimensionAmount(
        LedgerRecId _primaryLedgerIdToRelieve,
        LedgerDimensionBudgetControl _controlLedgerDimension,
        BudgetRelievingDetail _relievingDetail)
    {
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tracks the ledger dimension amount as a carry forward amounts.
    /// </summary>
    /// <param name="_primaryLedgerId">
    /// The ID for the primary <c>Ledger</c> record for which the ledger dimension details are tracked.
    /// </param>
    /// <param name="_controlRuleId">
    /// The ID for the <c>BudgetControlRule</c> record for the budget control ledger dimension to track
    /// budget funds.
    /// </param>
    /// <param name="_groupMemberId">
    /// The ID for the <c>BudgetGroupMember</c> record for the budget control ledger dimension to track
    /// budget funds.
    /// </param>
    /// <param name="_controlLedgerDimension">
    /// The budget control ledger dimension to track budget funds.
    /// </param>
    /// <param name="_sourceDetails">
    /// The collection of budget source ledger dimension details associated with the budget control ledger
    /// dimension to track budget funds.
    /// </param>
    public void trackLedgerDimension(
        LedgerRecId _primaryLedgerId,
        recId _controlRuleId,
        recId _groupMemberId,
        LedgerDimensionBudgetControl _controlLedgerDimension,
        Set _sourceDetails)
    {
        SetEnumerator budgetSourceDetailsEnumerator;
        BudgetSourceDetail budgetSourceDetail;

        if (_primaryLedgerId &&
            _controlLedgerDimension &&
            _sourceDetails &&
            _sourceDetails.elements() > 0)
        {
            budgetSourceDetailsEnumerator = _sourceDetails.getEnumerator();

            while (budgetSourceDetailsEnumerator.moveNext())
            {
                budgetSourceDetail = budgetSourceDetailsEnumerator.current();

                if (budgetSourceDetail.parmCurrencyAmount())
                {
                    // Create budget source tracking to track budget control ledger dimension detail if not already created.
                    this.trackBudgetSource();

                    this.createTrackingDetail(
                        currentBudgetSourceTracking.RecId,
                        _primaryLedgerId,
                        budgetSourceDetail.parmLedgerDimension(),
                        _controlRuleId,
                        _groupMemberId,
                        _controlLedgerDimension,
                        budgetSourceDetail.parmCurrencyAmount(),
                        NoYes::Yes,
                        NoYes::No);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetControlTrackingUpdateCarryforward</c> class.
    /// </summary>
    /// <returns>
    ///    A <c>BudgetControlTrackingUpdateCarryforward</c> class instance.
    /// </returns>
    public static BudgetControlTrackingUpdateCarryforward construct()
    {
        return new BudgetControlTrackingUpdateCarryforward();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>