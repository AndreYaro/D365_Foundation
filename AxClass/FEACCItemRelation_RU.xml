<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FEACCItemRelation_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FEACCItemRelation_RU</c> class handles the logic for creating a relation between TN VED code and inventory item.
/// </summary>
class FEACCItemRelation_RU extends RunBaseBatch implements BatchRetryable
{
    FEACCIdActive_RU        feaccId;
    TransDate               dateFrom;
    VendAccountCustom_RU    vendAccountCustom;

    InventTable             currentInventTable;

    DialogField     feaccIdDlg, dateFromDlg, vendAccountCustomDlg;

    MultiSelectionHelper    multiSelectionHelper;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        feaccId,
        dateFrom,
        vendAccountCustom
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;
        ;

        dialog = super();

        feaccIdDlg              = dialog.addFieldValue(extendedTypeStr(FEACCIdActive_RU), feaccId);
        dateFromDlg             = dialog.addFieldValue(extendedTypeStr(TransDate), dateFrom, "@SYS22951", "@GLS115168");
        vendAccountCustomDlg    = dialog.addFieldValue(extendedTypeStr(VendAccountCustom_RU), vendAccountCustom);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            feaccId             = feaccIdDlg.value();
            dateFrom            = dateFromDlg.value();
            vendAccountCustom   = vendAccountCustomDlg.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this object based on provided arguments.
    /// </summary>
    /// <param name="_args">
    /// The arguments object representing the caller form, its dataset, and the selected records.
    /// </param>
    public void initFromArgs(Args _args)
    {
        currentInventTable = _args.record() as InventTable;
        if (FormDataUtil::isFormDataSource(currentInventTable))
        {
            multiSelectionHelper = MultiSelectionHelper::createFromCaller(_args.caller());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFEACCInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record for finding or creating the <c>FEACCInventTable_RU</c> table.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record.</param>
    /// <returns>The <c>FEACCInventTable_RU</c> record.</returns>
    protected FEACCInventTable_RU initializeFEACCInventTable(InventTable _inventTable)
    {
        FEACCInventTable_RU feaccInventTable;
        feaccInventTable.initValue();

        feaccInventTable.ItemId = _inventTable.itemId;
        feaccInventTable.FEACCId = feaccId;
        feaccInventTable.ActivationDate = dateFrom;
        feaccInventTable.VendAccountCustom =  vendAccountCustom;

        return feaccInventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        InventTable         inventTable;
        Counter cnt;

        try
        {
            if (multiSelectionHelper)
            {
                inventTable = multiSelectionHelper.getFirst();
            }
            else
            {
                inventTable = currentInventTable;
            }

            ttsbegin;
            while (inventTable)
            {
                FEACCInventTable_RU feaccInventTable = this.initializeFEACCInventTable(inventTable);
                
                if (FEACCInventTable_RU::existByNaturalKey(feaccInventTable))
                {
                    warning(strfmt("@GLS115931", inventTable.ItemId));
                }
                else
                {
                    feaccInventTable.insert();
                    ++cnt;
                }

                if (multiSelectionHelper)
                {
                    inventTable = multiSelectionHelper.getNext();
                }
                else
                {
                    inventTable = null;
                }
            }
            ttscommit;
            info(strfmt("@GLS115928", cnt));
        }
        catch
        {
            error("@GLS115929");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
    ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates inputs.
    /// </summary>
    /// <param name="calledFrom">
    /// The object that called this class.
    /// </param>
    /// <returns>
    /// False if FEACC id was not entered in the dialog, if the entered id was not found
    /// in the corresponding table, if the found table record is marked as blocked, or if the
    /// custom vendor account entered in the dialog was not found in the custom partners table.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (!feaccId)
            ret = checkFailed(strfmt("@GLS115316", "@GLS114897"));

        if (feaccId && !FeaccTable_RU::exist(feaccId))
            ret = checkFailed(strfmt(FeaccTable_RU::txtNotExist(), feaccId));

        if (feaccId && FeaccTable_RU::find(feaccId).Blocked)
            ret = checkFailed(strfmt("@GLS115944", feaccId));

        if (vendAccountCustom && !CustomPartners_RU::find(vendAccountCustom))
            ret = checkFailed(strfmt("@GLS115945", vendAccountCustom));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of this object.
    /// </summary>
    /// <param name="_args">
    /// Arguments object representing the caller form, its dataset, and the selected records.
    /// </param>
    /// <returns>
    /// An instance of this object, instantiated using provided arguments.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the argument is null, does not contain a caller, its dataset is not <c>InventTable</c>,
    /// or its selected record is not part of a form datasource.
    /// </exception>
    public static FEACCItemRelation_RU constructFromArgs(Args _args)
    {
        FEACCItemRelation_RU    itemRelation;

        if (!(_args && _args.caller() && _args.dataset() == tableNum(InventTable) && FormDataUtil::isFormDataSource(_args.record())))
            throw Error(Error::wrongUseOfFunction(funcname()));

        itemRelation = new FEACCItemRelation_RU();
        itemRelation.initFromArgs(_args);

        return itemRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS115934";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FEACCItemRelation_RU    itemRelation = FEACCItemRelation_RU::constructFromArgs(_args);

        if (itemRelation.prompt())
            itemRelation.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>