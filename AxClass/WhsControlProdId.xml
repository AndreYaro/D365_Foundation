<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlProdId</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControlProdId</c> class is responsible for handling the product id controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#ProdId)]
public class WhsControlProdId extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        ProdId prodId = this.parmData();
        ProdTable prodTable = ProdTable::find(prodId);

        if (!prodTable)
        {
            return this.fail("@WAX1162");
        }   

        if (mode == WHSWorkExecuteMode::StartProdOrder && prodTable.inventDim().InventLocationId != fieldValues.parmInventLocationId())
        {
            return this.fail("@WAX1239");
        }

        if (!controlData.validateProdOrder(prodId))
        {
            return this.fail(strFmt("@WAX5569", prodId));
        }

        fieldValues.insert(#ProdId, prodId);

        

        if (mode == WHSWorkExecuteMode::ProdLastPallet)
        {
            if (this.prodStatus(prodTable) != ProdStatus::StartedUp)
            {
                return this.fail("@WAX2578");
            }
            else if (WHSProdTable::find(prodId).LastPallet)
            {
                return this.fail("@WAX2579");
            }
        }
        else if (mode == WHSWorkExecuteMode::MaterialConsumption
                && step == #GetProductionOrderIdStep)
        {

            if (this.prodStatusIsBefore(prodTable, ProdStatus::StartedUp))
            {
                return this.fail(strFmt("@WAX:ErrorProdOrderNotStartedForMaterialConsumption", prodId));
            }

            if (prodTable.ProdType == ProdType::Standard
                || prodTable.ProdType == ProdType::Vendor
                || (prodTable.ProdType == ProdType::Process
                    && !PmfProdCoBy::existProdId(prodId)
                    && !prodTable.PmfCoByVarAllow))
            {
                fieldValues.insert(#FinishedGoodItemId, prodTable.ItemId);
            }
            else
            {
                fieldValues.insert(#FinishedGoodItemId, '');
            }

            if (prodTable)
            {
                JournalId openJournalId = ProdJournalTable::findOpenJournalForMobileDeviceUser(prodTable.ProdId, pass.lookup(#UserId));

                if (openJournalId && !fieldValues.exists(#ContinueOpenJournal))
                {
                    fieldValues.insert(#ContinueOpenJournal, openJournalId);
                }
            }
        }
        else if (mode != WHSWorkExecuteMode::ProductionScrap)
        {
            if ((mode == WHSWorkExecuteMode::ReportAsFinished || mode == WHSWorkExecuteMode::ReportAsFinishedAndLocate)
                 && this.prodStatus(prodTable) != ProdStatus::StartedUp
                 && this.prodStatus(prodTable) != ProdStatus::ReportedFinished)
            {
                return this.fail(strFmt("@WAX2508", this.prodStatus(prodTable)));
            }

            if (prodTable.ProdType == ProdType::Standard
                || prodTable.ProdType == ProdType::Vendor
                || (prodTable.ProdType == ProdType::Process
                    && !PmfProdCoBy::existProdId(prodId)
                    && !prodTable.PmfCoByVarAllow))
            {
                fieldValues.parmItemId(prodTable.ItemId);
            }
            else
            {
                fieldValues.parmItemId('');
            }
            InventHandlingUnitId uom = WHSCatchWeightHelper::inventHandlingUnitId(prodTable.ItemId);
            controlData.parmUOM(uom);
            fieldValues.insert(#UOM, uom);
        }
        else
        {
            if (this.prodStatusIsBefore(prodTable, ProdStatus::StartedUp)
                || this.prodStatus(prodTable) == ProdStatus::Completed)
            {
                return this.fail("@WAX1162");
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodStatusIsBefore</Name>
				<Source><![CDATA[
    private boolean prodStatusIsBefore(ProdTable _prodTable, ProdStatus _prodStatus)
    {
        return ProdStatusOrderedList::newFromOrder().isBefore(this.prodStatus(_prodTable), _prodStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodStatus</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal ProdStatus prodStatus(ProdTable _prodTable)
    {
        return _prodTable.ProdStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    public void populate()
    {
        fieldValues.insert(#ProdId, '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>