<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSettlementsAutomationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// This <c>LedgerSettlementsAutomationTask</c> class is designed to create a new controller instance for ledger settlements automations.
/// </summary>
[ExportMetadata(classStr(ProcessAutomationTask), classStr(LedgerSettlementsAutomationTask))]
[Export(identifierStr(Microsoft.Dynamics.AX.Application.ProcessAutomationTask))]
internal final class LedgerSettlementsAutomationTask extends ProcessAutomationTask implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isProcessAutomationEnabledForThisTask</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean isProcessAutomationEnabledForThisTask()
    {
        return this.isPASettlementParameterEnabledForAnyCompaniesInSystem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfWorkToBePerformed</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected List getListOfWorkToBePerformed()
    {
        List controllerList = new List(Types::Class);

        LedgerSettlementsAutomationController controller = new LedgerSettlementsAutomationController(
            classStr(LedgerSettlementsAutomationProcessor),
            methodStr(LedgerSettlementsAutomationProcessor, run),
            SysOperationExecutionMode::Synchronous);

        ProcessScheduleWorkItem processScheduleWorkItemContract = controller.getDataContractObject() as ProcessScheduleWorkItem;

        processScheduleWorkItemContract.initializeFromScheduleWorkItem(this.parmProcessScheduleWorkItem());

        controllerList.addEnd(controller);

        return controllerList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobCaption</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected BatchCaption batchJobCaption()
    {
        return "@GeneralLedger:LedgerSettlementsAutomationFeatureName";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPASettlementParameterEnabledForAnyCompaniesInSystem</Name>
				<Source><![CDATA[
    private boolean isPASettlementParameterEnabledForAnyCompaniesInSystem()
    {
        LedgerParameters ledgerParameters;

        select firstonly crosscompany RecId from ledgerParameters
            where ledgerParameters.EnableLedgerSettlementAdvancedAwarenessOptions == NoYes::Yes
                && ledgerParameters.EnableLedgerSettlementProcessAutomation == NoYes::Yes;

        return ledgerParameters.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>