<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcBackEndConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCBackEndConfiguration</c> class handles the back end configuration, which consists of the
/// generation of production documents and document reference notes.
/// </summary>
class PcBackEndConfiguration
{
    PCBackEndConfigurationInput     input;
    PCBackEndConfigurationOutput    output;
    PCAdaptor                       adaptor;
    PCAdaptorFactory                adaptorFactory;

    boolean     needToGenerateRoute;

    PCDocumentHandling              documentHandling;
    PCProductionDocumentsUtility    productionDocumentsUtility;
    PCSourceDocumentLineUtility     sourceDocumentLineUtility;

    PCXmlParseConfigurationInstance xmlParseConfigurationInstance;

    PCAdaptorVisitorConfigurationReuse  visitorConfigurationReuse;
    PCAdaptorVisitorBOMGeneration       visitorBOMGeneration;
    PCAdaptorVisitorRouteGeneration     visitorRouteGeneration;
    PCAdaptorVisitorDocumentReference   visitorDocumentReference;
    PCAdaptorVisitorPersistValues       visitorPersistValues;

    PCGenerateComponentInstInfoCollection  generateComponentInstInfoCollection;
    PCGenerateFindProductionDocumentIds    generateFindProductionDocumentIds;

    PCVariantConfiguration variantConfiguration;

    private PCInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkArguments</Name>
				<Source><![CDATA[
    protected void checkArguments()
    {
        input.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the generation of a bill of materials for the configuration session.
    /// </summary>
    protected void generateBOM()
    {
        using (var activityContext = logger.postRuntime().generateBOM())
        {
            visitorBOMGeneration.initialize(input.parmProductModelVersion(),
                                              input.parmVariantConfiguration(),
                                              input.parmItemId(),
                                              input.parmSupplyInventDim(),
                                              generateComponentInstInfoCollection,
                                              true,
                                              input.parmDemandInventDim());

            visitorBOMGeneration.parmReleaseLegalEntities(input.parmReleaseLegalEntities());

            adaptor.accept(visitorBOMGeneration);

            // get the invent dim assigned to the root component during the bom generation,
            // this could be different than the supply invent dim originally passed as argument
            // if the configuration was reused.
            output.parmAppliedSupplyInventDim(InventDim::find(visitorBOMGeneration.getRootInventDimId()));

            this.setIsConfigurationReused();
            this.setGeneratedBOMId();
            output.parmAppliedConfigurationName(output.parmAppliedSupplyInventDim().ConfigId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocumentReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates document references if the settings are used in the product configuration parameters.
    /// </summary>
    protected void generateDocumentReference()
    {
        if ( input.parmGenerateDocumentReference())
        {
            using (var activityContext = logger.postRuntime().generateDocumentReference())
            {
                changecompany(input.parmDemandInventDim().company())
                {
                    visitorDocumentReference.setLanguageId(this.getInputLanguageIdFromSourceLine());

                    adaptor.accept(visitorDocumentReference);

                    documentHandling.createOrUpdateDocument(input.parmSourceLine(), visitorDocumentReference.getNotes());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInputLanguageIdFromSourceLine</Name>
				<Source><![CDATA[
    protected LanguageId getInputLanguageIdFromSourceLine()
    {
        Common sourceLine = input.parmSourceLine();

        switch (sourceLine.TableId)
        {
            case tableNum(SalesLine):
                SalesLine salesLine = sourceLine;
                return salesLine.salesTable().LanguageId;

            case tableNum(SalesQuotationLine):
                SalesQuotationLine salesQuotationLine = sourceLine;
                return salesQuotationLine.salesQuotationTable().LanguageId;

            case tableNum(PurchLine):
                PurchLine PurchLine = sourceLine;
                return PurchLine.purchTable().LanguageId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the generation of a route for the configuration session.
    /// </summary>
    /// <param name="_generateRoute">
    /// A Boolean value that indicates whether a route should be generated.
    /// </param>
    protected void generateRoute(boolean _generateRoute)
    {
        using (var activityContext = logger.postRuntime().generateRoute())
        {
            if ( _generateRoute )
            {
                visitorRouteGeneration.initialize(input.parmProductModelVersion(),
                                              input.parmVariantConfiguration(),
                                              input.parmItemId(),
                                              input.parmSupplyInventDim(),
                                              generateComponentInstInfoCollection);

                adaptor.accept(visitorRouteGeneration);
            }

            this.setGeneratedRouteId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppliedConfigurationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an applied configuration name.
    /// </summary>
    /// <returns>
    /// The configuration name.
    /// </returns>
    public EcoResConfigurationName getAppliedConfigurationName()
    {
        return output.parmAppliedConfigurationName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppliedDistinctProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an applied distinct product variant.
    /// </summary>
    /// <returns>
    /// The distinct product variant.
    /// </returns>
    public EcoResDistinctProductVariant getAppliedDistinctProductVariant()
    {
        InventDimCombination inventDimCombination = InventDimCombination::findByInventDim(input.parmItemId(), output.parmAppliedSupplyInventDim());

        PCContractNotNull::assertRecord(inventDimCombination, funcName());

        return EcoResDistinctProductVariant::find(inventDimCombination.DistinctProductVariant);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneratedBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the generated BOM ID.
    /// </summary>
    /// <returns>
    /// The BOM ID.
    /// </returns>
    /// <remarks>
    /// This method should only be called in the producing company.
    /// </remarks>
    public BOMId getGeneratedBOMId()
    {
        PCContractNotNull::assertRecord(output.parmAppliedSupplyInventDim(), funcName());

        return output.parmAppliedBOMId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneratedRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the generated route ID.
    /// </summary>
    /// <returns>
    /// The route ID.
    /// </returns>
    /// <remarks>
    /// This method should only be called in the producing company.
    /// </remarks>
    public RouteId getGeneratedRouteId()
    {
        PCContractNotNull::assertRecord(output.parmAppliedSupplyInventDim(), funcName());

        return output.parmAppliedRouteId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationReused</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a configuration is reused.
    /// </summary>
    /// <returns>
    /// true if the configuration is reused; otherwise, false.
    /// </returns>
    public boolean isConfigurationReused()
    {
        return output.parmIsConfigurationReused();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiCompanyScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the configurator is running in a multi-company scenario.
    /// </summary>
    /// <returns>
    /// true if the configurator is running in a multi-company scenario; otherwise, false.
    /// </returns>
    protected boolean isMultiCompanyScenario()
    {
        return input.parmDemandInventDim().company() != input.parmSupplyInventDim().company();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiSiteScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a configurator is ran in a multi-site scenario.
    /// </summary>
    /// <returns>
    /// true if the configuration is ran in a multi-site scenario; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method assumes that the configurator is not ran in a multi-company scenario.
    /// </remarks>
    public boolean isMultiSiteScenario()
    {
        return input.parmDemandInventDim().InventSiteId != input.parmSupplyInventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        documentHandling            = PCDocumentHandling::construct();
        productionDocumentsUtility  = PCProductionDocumentsUtility::construct();

        visitorConfigurationReuse   = PCAdaptorVisitorConfigurationReuse::construct();
        visitorBOMGeneration        = PCAdaptorVisitorBOMGeneration::construct();
        visitorRouteGeneration      = PCAdaptorVisitorRouteGeneration::construct();
        visitorDocumentReference    = PCAdaptorVisitorDocumentReference::construct();
        visitorPersistValues        = PCAdaptorVisitorPersistValues::construct();

        generateComponentInstInfoCollection = PCGenerateComponentInstInfoCollection::construct();
        generateFindProductionDocumentIds   = PCGenerateFindProductionDocumentIds::construct();

        adaptorFactory                  = PCAdaptorFactory::construct();
        xmlParseConfigurationInstance   = PCXmlParseConfigurationInstance::construct();
        input                           = PCBackEndConfigurationInput::construct();
        output                          = PCBackEndConfigurationOutput::construct();

        logger = PCInstrumentationLogger::createLogger(classStr(PCBackEndConfiguration));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentHandling</Name>
				<Source><![CDATA[
    public PCDocumentHandling parmDocumentHandling(PCDocumentHandling _documentHandling = documentHandling)
    {
        documentHandling = _documentHandling;

        return documentHandling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGenerateComponentInstInfoCollection</Name>
				<Source><![CDATA[
    public PCGenerateComponentInstInfoCollection parmGenerateComponentInstInfoCollection(PCGenerateComponentInstInfoCollection _generateComponentInstInfoCollection = generateComponentInstInfoCollection)
    {
        generateComponentInstInfoCollection = _generateComponentInstInfoCollection;

        return generateComponentInstInfoCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGenerateDocumentReference</Name>
				<Source><![CDATA[
    public boolean parmGenerateDocumentReference(boolean _generate = input.parmGenerateDocumentReference())
    {
        input.parmGenerateDocumentReference(_generate);

        return input.parmGenerateDocumentReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGenerateFindProductionDocumentIds</Name>
				<Source><![CDATA[
    public PCGenerateFindProductionDocumentIds parmGenerateFindProductionDocumentIds(PCGenerateFindProductionDocumentIds _generateFindProductionDocumentIds = generateFindProductionDocumentIds)
    {
        generateFindProductionDocumentIds = _generateFindProductionDocumentIds;

        return generateFindProductionDocumentIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductionDocumentsUtility</Name>
				<Source><![CDATA[
    public PCProductionDocumentsUtility parmProductionDocumentsUtility(PCProductionDocumentsUtility _productionDocumentsUtility = productionDocumentsUtility)
    {
        productionDocumentsUtility = _productionDocumentsUtility;

        return productionDocumentsUtility;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLineUtility</Name>
				<Source><![CDATA[
    public PCSourceDocumentLineUtility parmSourceDocumentLineUtility(PCSourceDocumentLineUtility _sourceDocumentLineUtility = sourceDocumentLineUtility)
    {
        sourceDocumentLineUtility = _sourceDocumentLineUtility;

        return sourceDocumentLineUtility;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVisitorBOMGeneration</Name>
				<Source><![CDATA[
    public PCAdaptorVisitorBOMGeneration parmVisitorBOMGeneration(PCAdaptorVisitorBOMGeneration _visitorBOMGeneration = visitorBOMGeneration)
    {
        visitorBOMGeneration = _visitorBOMGeneration;

        return visitorBOMGeneration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVisitorConfigurationReuse</Name>
				<Source><![CDATA[
    public PCAdaptorVisitorConfigurationReuse parmVisitorConfigurationReuse(PCAdaptorVisitorConfigurationReuse _visitorConfigurationReuse = visitorConfigurationReuse)
    {
        visitorConfigurationReuse = _visitorConfigurationReuse;

        return visitorConfigurationReuse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVisitorDocumentReference</Name>
				<Source><![CDATA[
    public PCAdaptorVisitorDocumentReference parmVisitorDocumentReference(PCAdaptorVisitorDocumentReference _visitorDocumentReference = visitorDocumentReference)
    {
        visitorDocumentReference = _visitorDocumentReference;

        return visitorDocumentReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVisitorRouteGeneration</Name>
				<Source><![CDATA[
    public PCAdaptorVisitorRouteGeneration parmVisitorRouteGeneration(PCAdaptorVisitorRouteGeneration _visitorRouteGeneration = visitorRouteGeneration)
    {
        visitorRouteGeneration = _visitorRouteGeneration;

        return visitorRouteGeneration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the back end configuration part that consists of generating product documents and documents
    /// reference notes.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The configuration is not valid.
    /// </exception>
    public void run()
    {
        this.checkArguments();

        this.setupAdaptor();

        this.execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runConfigurationReuse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs reuse for the configuration computations.
    /// </summary>
    protected void runConfigurationReuse()
    {
        using (var activityContext = logger.postRuntime().configurationReuse())
        {
            visitorConfigurationReuse.initialize(input.parmItemId(), input.parmSupplyInventDim().InventSiteId);

            adaptor.accept(visitorConfigurationReuse);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the <c>PCBackEndConfiguration</c> class.
    /// </summary>
    /// <param name="_variantConfiguration">
    /// A variant configuration.
    /// </param>
    /// <param name="_productModelVersion">
    /// A product configuration model version.
    /// </param>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_configurationName">
    /// A configuration name.
    /// </param>
    /// <param name="_supplyInventDim">
    /// The supply inventory dimension.
    /// </param>
    /// <param name="_demandInventDim">
    /// The demand inventory dimension.
    /// </param>
    /// <param name="_price">
    /// The price of the configured product.
    /// </param>
    /// <param name="_shipDate">
    /// The ship date of the configured product.
    /// </param>
    /// <param name="_adaptor">
    /// Not used.
    /// </param>
    /// <param name="_generateDocumentReference">
    /// A Boolean value that indicates whether a document reference should be created.
    /// </param>
    /// <param name="_xmlValues">
    /// The xml values from the .NET configurator component.
    /// </param>
    /// <param name="_sourceLine">
    /// The source line of the configuration.
    /// </param>
    /// <param name="_productConfigurationModel">
    /// A product configuration model.
    /// </param>
    /// <param name="_inventQuantity">
    /// The inventory quantity.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    public void setup(
            PCVariantConfiguration      _variantConfiguration,
            PCProductModelVersion       _productModelVersion,
            ItemId                      _itemId,
            EcoResConfigurationName     _configurationName,
            InventDim                   _supplyInventDim,
            InventDim                   _demandInventDim,
            SalesPrice                  _price,
            SalesShippingDate           _shipDate,
            PCAdaptor                   _adaptor,
            boolean                     _generateDocumentReference = false,
            str                         _xmlValues = "",
            Common                      _sourceLine = null,
            PCProductConfigurationModel _productConfigurationModel = null,
            InventQty                   _inventQuantity = 0,
            TransDate                   _transDate = dateNull()
            )
    {
        input.parmXmlValues(_xmlValues);
        input.parmSourceLine(_sourceLine);
        input.parmProductConfigurationModel(_productConfigurationModel);
        input.parmVariantConfiguration(_variantConfiguration);
        input.parmProductModelVersion(_productModelVersion);
        input.parmItemId(_itemId);
        input.parmConfigurationName(_configurationName);
        input.parmSupplyInventDim(_supplyInventDim);
        input.parmDemandInventDim(_demandInventDim);
        input.parmPrice(_price);
        input.parmShipDate(_shipDate);
        input.parmGenerateDocumentReference(_generateDocumentReference);
        input.parmInventQuantity(_inventQuantity);
        input.parmIssueDate(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupReleaseLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the legal entity chain where the product configuration variant should be released.
    /// </summary>
    /// <param name = "_releaseLegalEntities">
    /// The legal entity chain where the product configuration variant should be released.
    /// </param>
    public void setupReleaseLegalEntities(List _releaseLegalEntities)
    {
        input.parmReleaseLegalEntities(_releaseLegalEntities);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCBackEndConfiguration construct()
    {
        return new PCBackEndConfiguration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the <c>PCBackEndConfiguration</c> logic.
    /// </summary>
    public void execute()
    {
        using (var activityContext = logger.postRuntime().execute())
        {
            changecompany(input.parmSupplyInventDim().company())
            {
                try
                {
                    ttsbegin;

                    xmlParseConfigurationInstance.parse(
                input.parmProductConfigurationModel(),
                null,
                '',
                input.parmXmlValues(),
                PCRuntimeMode::NewVariant,
                adaptor);

                    // execute code extended by partner class if any exists
                    adaptor.run();

                    // the price could have been changed by partner code
                    output.parmPrice(adaptor.getPrice());

                    // Determine if there is a need to generate Route
                    needToGenerateRoute = adaptor.isGenerationOfRouteNeeded();

                    //
                    //  Create a BOM and a Route
                    //  BOM needs to be generated first, because of the creation of dimensions.
                    //
                    this.runConfigurationReuse();

                    this.generateBOM();

                    // there is no need to generate routes if the bom has been reused
                    this.generateRoute(needToGenerateRoute && !this.isConfigurationReused());

                    this.generateDocumentReference();

                    if (!this.isConfigurationReused())
                    {
                        this.persistValues();
                    }

                    ttscommit;
                }
                catch
                {
                    ttsabort;
                    //The current configuration is not valid.
                    throw error("@SYS135235");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the values currently in the adaptor structure into the database.
    /// </summary>
    protected void persistValues()
    {
        using (var activityContext = logger.postRuntime().persistValues())
        {
            visitorPersistValues.initialize(visitorBOMGeneration.getRootVariantConfiguration());

            adaptor.accept(visitorPersistValues);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the price.
    /// </summary>
    /// <returns>
    /// The price.
    /// </returns>
    public SalesPrice getPrice()
    {
        return output.parmPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdaptor</Name>
				<Source><![CDATA[
    public PCAdaptor parmAdaptor(PCAdaptor _adaptor = adaptor)
    {
        adaptor = _adaptor;

        return adaptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdaptorFactory</Name>
				<Source><![CDATA[
    public PCAdaptorFactory parmAdaptorFactory(PCAdaptorFactory _adaptorFactory = adaptorFactory)
    {
        adaptorFactory = _adaptorFactory;

        return adaptorFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInput</Name>
				<Source><![CDATA[
    public PCBackEndConfigurationInput parmInput(PCBackEndConfigurationInput _input = input)
    {
        input = _input;

        return input;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOutput</Name>
				<Source><![CDATA[
    public PCBackEndConfigurationOutput parmOutput(PCBackEndConfigurationOutput _output = output)
    {
        output = _output;

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXmlParseConfigurationInstance</Name>
				<Source><![CDATA[
    public PCXmlParseConfigurationInstance parmXmlParseConfigurationInstance(PCXmlParseConfigurationInstance _xmlParseConfigurationInstance = xmlParseConfigurationInstance)
    {
        xmlParseConfigurationInstance = _xmlParseConfigurationInstance;

        return xmlParseConfigurationInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGeneratedBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the generated BOM ID.
    /// </summary>
    /// <remarks>
    /// This method should only be called in the producing company.
    /// </remarks>
    protected void setGeneratedBOMId()
    {
        PCContractNotNull::assertRecord(output.parmAppliedSupplyInventDim(), funcName());

        if (this.isConfigurationReused())
        {
            output.parmAppliedBOMId(generateFindProductionDocumentIds.findGeneratedBomId(input.parmItemId(), output.parmAppliedSupplyInventDim()));
        }
        else
        {
            output.parmAppliedBOMId(visitorBOMGeneration.getGeneratedBOMId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGeneratedRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the generated route ID.
    /// </summary>
    /// <remarks>
    /// This method should only be called in the producing company.
    /// </remarks>
    protected void setGeneratedRouteId()
    {
        PCContractNotNull::assertRecord(output.parmAppliedSupplyInventDim(), funcName());

        if ( needToGenerateRoute)
        {
            if (this.isConfigurationReused())
            {
                output.parmAppliedRouteId(generateFindProductionDocumentIds.findGeneratedRouteId(input.parmItemId(), output.parmAppliedSupplyInventDim()));
            }
            else
            {
                output.parmAppliedRouteId(visitorRouteGeneration.getGeneratedRouteId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsConfigurationReused</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets whether a configuration is reused.
    /// </summary>
    protected void setIsConfigurationReused()
    {
        output.parmIsConfigurationReused(adaptor.parmProductConfigurationModel().getRootComponent().parmIsConfigurationReusable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupAdaptor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the adaptor instance.
    /// </summary>
    public void setupAdaptor()
    {
        adaptor = adaptorFactory.getAdaptorFromModelName(input.parmProductConfigurationModel().Name);
        adaptor.parmProductConfigurationModel(adaptorFactory.createConfigurationModel(input.parmProductConfigurationModel()));
        adaptor.parmSourceDocumentLine(adaptorFactory.createSourceDocumentLine(input.parmSourceLine()));

        // if the price has been calculated make sure the price is available in the adaptor source document class
        if (input.parmPrice())
        {
            adaptor.parmSourceDocumentLine().parmPrice(input.parmPrice());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>