<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackRegTrans_FinancialIssue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the controller class for the <c>InventTrackingRegisterTrans</c> form.
/// It is used when form is opened to register serial numbers for financial issue.
/// </summary>
public class InventTrackRegTrans_FinancialIssue extends InventTrackingRegisterTransForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInsertSerialId</Name>
				<Source><![CDATA[
    public boolean canInsertSerialId(InventSerialId _inventSerialId)
{
    InventTrackingRegisterTrans tracking;
    InventDim   inventDim;

    select firstonly RecId from tracking
        where !tracking.FinancialRefRecId
            && tracking.InventTransOrigin == inventTransOrigin.RecId
    exists join inventDim
        where inventDim.InventDimId == tracking.InventDimId
            && inventDim.InventSerialId == _inventSerialId;

    return tracking.RecId == 0;
}

]]></Source>
			</Method>
			<Method>
				<Name>getTotalLinesCount</Name>
				<Source><![CDATA[
    public InventQty getTotalLinesCount()
{
    return abs(InventTrackingRegisterTrans::qtyFinancialIssue(inventTransOrigin.RecId));
}

]]></Source>
			</Method>
			<Method>
				<Name>initFormDatasource</Name>
				<Source><![CDATA[
    public void initFormDatasource(FormDataSource _formDataSource)
{
    QueryBuildDataSource    queryBuildDS = _formDataSource.queryBuildDataSource();

    super(_formDataSource);
    if (!isReadOnly)
    {
        QueryBuildRange financialRefRange = queryBuildDS.addRange(fieldNum(InventTrackingRegisterTrans, FinancialRefRecId));
        financialRefRange.status(RangeStatus::Hidden);
        financialRefRange.value(queryValue(0));

        QueryBuildRange cancelledRange = queryBuildDS.addRange(fieldNum(InventTrackingRegisterTrans, Cancelled));
        cancelledRange.status(RangeStatus::Hidden);
        cancelledRange.value(queryValue(NoYes::No));
    }
    else
    {
        _formDataSource.object(fieldNum(InventTrackingRegisterTrans, ReadyForFinancialUpdate)).visible(false);
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>initInventTrackingRegisterTrans</Name>
				<Source><![CDATA[
    public void initInventTrackingRegisterTrans(InventTrackingRegisterTrans _inventTrackingRegisterTrans)
{
    super(_inventTrackingRegisterTrans);
    _inventTrackingRegisterTrans.ReadyForFinancialUpdate = NoYes::Yes;
}

]]></Source>
			</Method>
			<Method>
				<Name>lineCountLabel</Name>
				<Source><![CDATA[
    public str lineCountLabel()
{
    return "@SYS5965";
}

]]></Source>
			</Method>
			<Method>
				<Name>removeAll</Name>
				<Source><![CDATA[
    public void removeAll()
{
    InventTrackingRegisterTrans tracking;

    ttsbegin;

    delete_from tracking
        where tracking.InventTransOrigin == inventTransOrigin.RecId
            && !tracking.FinancialRefRecId
            && !tracking.PhysicalRefRecId;

    update_recordset tracking
        setting ReadyForFinancialUpdate = NoYes::No
        where tracking.InventTransOrigin == inventTransOrigin.RecId
            && !tracking.FinancialRefRecId
            && tracking.PhysicalRefRecId
            && tracking.ReadyForFinancialUpdate
            && !tracking.Cancelled;

    ttscommit;

    this.setOkStatus();
}

]]></Source>
			</Method>
			<Method>
				<Name>requiredQty</Name>
				<Source><![CDATA[
    /// <summary>
/// Returns quantity required to be registred on the form.
/// </summary>
/// <returns>
/// Quantity of serial numbers.
/// </returns>
public Qty requiredQty()
{
    // number of serial numbers that has been packing slip posted, but not invoiced for given sales order
    Qty numberOfSerialsOnPackingSlipNotInvoiced = abs(InventTrackingRegisterTrans::qtyPostedOnPackingSlipNotInvoiced(inventTransOrigin.RecId));

    // total inventory quantity that has been packing slip posted and invoiced for given sales order
    InventQty totalQtyPSPostedAndInvoiced = CustInvoicePackingSlipQuantityMatch::totalInventoryQuantityMatched(inventTransOrigin.RecId);

    // total inventory quantity that has been packing slip posted for given sales order
    InventQty totalQtyPSPosted = CustPackingSlipTrans::totalQuantityPostedOnPackingSlip(inventTransOrigin.InventTransId);

    InventQty qtyPSpostedNotInvoiced = totalQtyPSPosted - totalQtyPSPostedAndInvoiced;

    // calculate required inventory quantity
    if (registerQty <= qtyPSpostedNotInvoiced)
    {
        return abs(min(registerQty, numberOfSerialsOnPackingSlipNotInvoiced));
    }
    else
    {
        return min(registerQty, numberOfSerialsOnPackingSlipNotInvoiced) + registerQty - qtyPSpostedNotInvoiced;
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>unregisterSerialNumber</Name>
				<Source><![CDATA[
    public void unregisterSerialNumber(InventSerialId _inventSerialId)
{
    InventTrackingRegisterTrans inventTrackingRegisterTrans;
    InventDim inventTrackingDim;

    select forupdate firstonly inventTrackingRegisterTrans
    exists join inventTrackingDim
    where inventTrackingDim.InventDimId == inventTrackingRegisterTrans.InventDimId
        && inventTrackingDim.InventSerialId == _inventSerialId
        && inventTrackingRegisterTrans.InventTransOrigin == inventTransOrigin.RecId
        && !inventTrackingRegisterTrans.Cancelled;

    if (!inventTrackingRegisterTrans)
    {
        this.setUnknownSerialStatus();
        return;
    }

    ttsbegin;
    if (inventTrackingRegisterTrans.PhysicalRefRecId)
    {
        inventTrackingRegisterTrans.ReadyForFinancialUpdate = NoYes::No;
        inventTrackingRegisterTrans.update();
    }
    else
    {
        inventTrackingRegisterTrans.delete();
    }
    ttscommit;

    this.setOkStatus();
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
