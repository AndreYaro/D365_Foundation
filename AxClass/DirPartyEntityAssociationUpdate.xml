<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyEntityAssociationUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DirPartyEntityAssociationUpdate
{
    DirPartyRecId   newParty;
    DirPartyMap     entityRecord;
    boolean         showConfirmation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the account number of the entity.
    /// </summary>
    /// <returns>
    ///    An account number string value, which is usually generated by a number sequence.
    /// </returns>
    public AccountNumber getAccount()
    {
        AccountNumber ret;

        try
        {
            ret = entityRecord.Account;
        }
        catch
        {
            ret = '';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Disables or enables the filter for vendors, customers, and busRel entities.
    /// </summary>
    /// <returns>
    ///    An instantiated <c>DirPartyLookupEntitiesFilter</c> object.
    /// </returns>
    public dirPartyLookupEntitiesFilter getEntityFilter()
    {
        dirPartyLookupEntitiesFilter entityFilter = DirPartyLookupEntitiesFilter::generateDirPartyLookupEntitiesFilter();

        entityFilter.parmDisableAllEntityTypeFilters(false);
        entityFilter.parmDataAreaId(curext());

        switch (entityRecord.TableId)
        {
            case tablenum(CustTable) :
                entityFilter.parmFilterCustomers(FilterStatus::NotSet);
                break;
            case tablenum(VendTable) :
                entityFilter.parmFilterVendors(FilterStatus::NotSet);
                break;
            case tablenum(smmBusRelTable) :
                entityFilter.parmFilterBusinessRelations(FilterStatus::NotSet);
                break;
        }

        return entityFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the party record ID of the entity.
    /// </summary>
    /// <returns>
    ///    A party record ID value.
    /// </returns>
    public DirPartyRecId getParty()
    {
        DirPartyRecId ret;

        try
        {
            ret = entityRecord.Party;
        }
        catch
        {
            ret = 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to show the confirmation message.
    /// </summary>
    /// <param name="_showConfirmation">
    ///    A Boolean value that indicates whether to show the confirmation.
    /// </param>
    /// <returns>
    ///    true if the confirmation should be shown; otherwise, false.
    /// </returns>
    public boolean parmShowConfirmation(boolean _showConfirmation = showConfirmation)
    {
        showConfirmation = _showConfirmation;
        return showConfirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIntercompanyTradingPartnerParty</Name>
				<Source><![CDATA[
    private void updateIntercompanyTradingPartnerParty()
    {
        InterCompanyTradingPartner intercompanyTradingPartner;
        switch (entityRecord.TableId)
        {
            case tableNum(CustTable):
                intercompanyTradingPartner = InterCompanyTradingPartner
                    ::findCustomer(entityRecord.Party, entityRecord.dataAreaId, true);

                if (intercompanyTradingPartner)
                {
                    intercompanyTradingPartner.CustomerParty = newParty;
                    intercompanyTradingPartner.update();
                }
                break;
            
            case tableNum(VendTable):
                intercompanyTradingPartner = InterCompanyTradingPartner
                    ::findVendor(entityRecord.Party, entityRecord.dataAreaId, true);

                if (intercompanyTradingPartner)
                {
                    intercompanyTradingPartner.VendorParty = newParty;
                    intercompanyTradingPartner.update();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the party record of the entity.
    /// </summary>
    public void run()
    {
        #ISOCountryRegionCodes

        DirPartyName    currentPartyName, newPartyName;
        FormDatasource  fds;
        ShipCarrierAddress carrierAddress;
        Common recordForPositioning;
        LogisticsPostalAddress  postalAddress;
        ProjFundingSource   projFundingSource;
        DictTable dt;
        ProjGrant projGrant;

        if (newParty)
        {
            currentPartyName = DirPartyTable::findRec(entityRecord.Party).Name;
            newPartyName = DirPartyTable::findRec(newParty).Name;

            if (!showConfirmation || Box::yesNo(
            strfmt("@SYS321785", this.getAccount(), currentPartyName, newPartyName), DialogButton::No) == DialogButton::Yes)
            {
                ttsbegin;
                this.updateIntercompanyTradingPartnerParty();

                entityRecord.selectForUpdate(true);
                entityRecord.Party = newParty;
                // <GBR>
                if (BrazilParameters::isEnabled() || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                {
                    switch (entityRecord.TableId)
                    {
                        case tableNum(CustTable):
                            entityRecord.modifiedField(fieldNum(CustTable, Party));
                            break;
                        case tableNum(VendTable):
                            entityRecord.modifiedField(fieldNum(VendTable, Party));
                            break;
                    }
                }

               //Updating contactpersonId to blank associated with the Customer/Vendor account as there is a party change.
               if (FormDataUtil::isFormDataSource(entityRecord))
                {
                    fds = FormDataUtil::getFormDataSource(entityRecord);
                    ContactPerson contactPerson;

                    if (fds.cursor().tableId == tablenum(CustTable))
                    {
                        CustTable customer = fds.cursor();
                        if (customer.ContactPersonId)
                        {
                            //updating contact person table as custaccount no longer associated with the contact.
                            select forUpdate contactPerson where
                            contactPerson.ContactPersonId == customer.ContactPersonId;

                            contactPerson.CustAccount = '';
                            contactPerson.update();
                            customer.ContactPersonId = '';
                        }
                     
                    }
                    else if (fds.cursor().tableId == tablenum(VendTable))
                    {
                        VendTable vendor = fds.cursor();
                        if (vendor.ContactPersonId)
                        {
                          vendor.ContactPersonId = '';
                        }
                    }
                }
                // </GBR>
                entityRecord.update();

                switch (entityRecord.TableId)
                {
                    case tableNum(CustTable):
                        DirPartyRelationship::createLegalEntityRelationship(entityRecord.Party, entityRecord.DataAreaId, DirSystemRelationshipType::Customer);
                        break;
                    case tableNum(VendTable):
                        DirPartyRelationship::createLegalEntityRelationship(entityRecord.Party, entityRecord.DataAreaId, DirSystemRelationshipType::Vendor);
                        break;
                }

                // If custTable delete delivery information
                if (entityRecord.TableId == tablenum(CustTable))
                {   
                    // Set the partyid and invoicelocation for the custAccount type funding source
                    while select forupdate projFundingSource
                        where projFundingSource.CustAccount == entityRecord.Account &&
                              projFundingSource.Party != entityRecord.Party
                    {
                        projFundingSource.Party = entityRecord.Party;
                        projFundingSource.setInvoiceLocation(entityRecord);                        
                        projFundingSource.update();
                    }

                    // Set the partyId and invoicelocation for the grant type funding source
                    while select forupdate projFundingSource
                        where projFundingSource.Party != entityRecord.Party
                        join projGrant
                            where projFundingSource.ProjGrant == projGrant.RecId &&
                                projGrant.CustAccount == entityRecord.Account
                    {
                        projFundingSource.Party = entityRecord.Party;
                        projFundingSource.setInvoiceLocation(entityRecord);
                        projFundingSource.update();
                    }

                    delete_from carrierAddress where carrierAddress.CustAccount == entityRecord.Account;
                }

                LogisticsLocationDefaultAppUtil::deleteDefaultForExistingParty(entityRecord);

                ttscommit;

                info(strfmt("@SYS321786", this.getAccount()));

                if (FormDataUtil::isFormDataSource(entityRecord))
                {
                    fds = FormDataUtil::getFormDataSource(entityRecord);
                    // This will guarantee that the record is fresh
                    dt = new DictTable(entityRecord.TableId);
                    recordForPositioning = dt.makeRecord();
                    recordForPositioning.data(entityRecord.data());
                    fds.formRun().args().lookupRecord(recordForPositioning);
                    fds.research();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEntityRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the table buffer of the current entity.
    /// </summary>
    /// <param name="_entityRecord">
    ///    The current entity buffer.
    /// </param>
    public void setEntityRecord(DirPartyMap _entityRecord)
    {
        entityRecord = _entityRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewParty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the new party record ID that is selected.
    /// </summary>
    /// <param name="_newParty">
    ///    The party record ID of the new selection.
    /// </param>
    public void setNewParty(DirPartyRecId _newParty = newParty)
    {
        newParty = _newParty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an address book record is referenced by an entity.
    /// </summary>
    /// <param name="_newParty">
    ///    The party record ID of the new party selection.
    /// </param>
    /// <returns>
    ///    Boolean value of the result.
    /// </returns>
    public boolean validate(DirPartyRecId _newParty)
    {
        return !DirPartyTable::partyRelationExist(entityRecord.TableId, _newParty, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DirPartyEntityAssociationUpdate construct()
    {
        return new DirPartyEntityAssociationUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called by menu items.
    /// </summary>
    /// <param name="_args">
    ///    The <c>Args</c> object that is passed from the menu item.
    /// </param>
    /// <param name="_showForm">
    ///    Returns a Boolean value that specifies whether to show the form.
    /// </param>
    public static void main(Args _args, boolean _showForm = true)
    {
        Args args;
        DirPartyEntityAssociationUpdate partyAssociationUpdate;
        FormRun formRun;

        if (!_args.record() && !SysDictTable::isTableMapped(tablenum(DirPartyMap), _args.dataset()))
        {
            throw error("@SYS18626");
        }

        partyAssociationUpdate = DirPartyEntityAssociationUpdate::newWithCaller(_args.record());
        partyAssociationUpdate.parmShowConfirmation(true);

        args = _args;
        args.name(formstr(DirPartyEntityAssociationUpdate));
        args.parmObject(partyAssociationUpdate);

        formRun = classfactory.formRunClass(args);

        if (formRun)
        {
            formRun.init();
            if (_showForm)
            {
                formRun.run();
                formRun.wait();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWithCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>DirPartyEntityAssociationUpdate</c> class by using the required
    ///    parameters.
    /// </summary>
    /// <param name="_entityRecord">
    ///    A <c>Common</c> table buffer of the current entity.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>DirPartyEntityAssociationUpdate</c> object.
    /// </returns>
    public static DirPartyEntityAssociationUpdate newWithCaller(Common _entityRecord)
    {
        DirPartyEntityAssociationUpdate partyAssociationUpdate;

        partyAssociationUpdate = DirPartyEntityAssociationUpdate::construct();
        partyAssociationUpdate.setEntityRecord(_entityRecord);

        return partyAssociationUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>