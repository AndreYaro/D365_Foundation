<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplAdvanceLineType_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EmplAdvanceLineType_RU
{
    EmplAdvLine_RU advLine;
    EmplAdvanceId_RU advanceId;
    EmplTrans_RU emplTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    protected void create()
    {
        if (!advLine.AdvanceId || !advLine.LineNum)
        {
            advLine.AdvanceId = advanceId;
            advLine.LineNum = decround(
                (select maxof(LineNum) from emplAdvLine_RU
                    where emplAdvLine_RU.AdvanceId == advanceId).LineNum, 0) + 1.0;
        }

        if (advLine.validateWrite())
        {
            advLine.initExchRates();
            advLine.insert();
        }
        else
            throw error("@SYS18447");
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public boolean delete(FormDataSource _lineDs)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editableFields</Name>
				<Source><![CDATA[
    protected container editableFields()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    public boolean exchRate(EmplAdvTable_RU _emplAdvTable, EmplAdvLine_RU _emplAdvLine)
    {
        if (_emplAdvLine.Triangulation)
            return ExchangeRateHelper::mayExchangeRateBeModified(_emplAdvLine.CurrencyCode, _emplAdvTable.TransDate);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecond</Name>
				<Source><![CDATA[
    public boolean exchRateSecond(EmplAdvTable_RU _emplAdvTable, EmplAdvLine_RU _emplAdvLine)
    {
        if (_emplAdvLine.Triangulation)
            return ExchangeRateHelper::maySecondaryCurrencyBeModified(_emplAdvLine.CurrencyCode, _emplAdvTable.TransDate);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEmplTransSource</Name>
				<Source><![CDATA[
    public void initFromEmplTransSource(EmplTransSource_RU _transSource)
    {
        throw error(error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(EmplAdvLine_RU _advLine)
    {
        advLine = _advLine.selectForUpdate() ? _advLine : EmplAdvLine_RU::findRecId(_advLine.RecId, true);
        advanceId = advLine.AdvanceId;
        emplTrans = advLine.emplTrans(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceId</Name>
				<Source><![CDATA[
    public EmplAdvanceId_RU parmAdvanceId(EmplAdvanceId_RU _advanceId = advanceId)
    {
        advanceId = _advanceId;
        return advanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEdit</Name>
				<Source><![CDATA[
    public void setEdit(FormDataSource _advLineDs)
    {
        DictTable dictTable = new DictTable(_advLineDs.table());
        FormDataObject dataObject;

        for (int i = 1; i <= dictTable.fieldCnt(); i++)
        {
            for (int j = 1; j <= dictTable.fieldObject(dictTable.fieldCnt2Id(i)).arraySize(); j++)
            {
                dataObject = _advLineDs.object(fieldId2Ext(dictTable.fieldCnt2Id(i), j));
                if (dataObject)
                {
                    if (this.editableFields())
                    {
                        dataObject.allowEdit(confind(this.editableFields(), dictTable.fieldCnt2Id(i)));
                    }
                    else
                    {
                        dataObject.allowEdit(true);
                    }
                }
            }
        }
        _advLineDs.refreshEx();
        _advLineDs.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCurrencyGroup</Name>
				<Source><![CDATA[
    public boolean showCurrencyGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    public boolean triangulation(EmplAdvTable_RU _emplAdvTable, EmplAdvLine_RU _emplAdvLine)
    {
        return ExchangeRateHelper::mayTriangulationBeModified(_emplAdvLine.CurrencyCode, _emplAdvTable.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EmplAdvanceLineType_RU construct(EmplAdvLine_RU _advLine)
    {
        EmplAdvanceLineType_RU ret;

        switch (_advLine.LineType)
        {
            case EmplAdvLineType_RU::Vendor :
                ret = new EmplAdvanceLineType_Invoice_RU(_advLine);
                break;
            case EmplAdvLineType_RU::Expend :
                ret = new EmplAdvanceLineType_Expend_RU(_advLine);
                break;
            case EmplAdvLineType_RU::AccountPayable :
                ret = new EmplAdvanceLineType_AccountPayable_RU(_advLine);
                break;
            case EmplAdvLineType_RU::None :
                ret = new EmplAdvanceLineType_RU(_advLine);
                break;

            default :
                throw error(strfmt("@SYS51070", _advLine.LineType));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceType2LineType</Name>
				<Source><![CDATA[
    public static EmplAdvLineType_RU sourceType2LineType(EmplTransSourceType_RU _sourceType)
    {
        EmplAdvLineType_RU ret;

        switch (_sourceType)
        {
            case EmplTransSourceType_RU::VendInvoiceTrans, EmplTransSourceType_RU::VendInvoice:
                ret = EmplAdvLineType_RU::Vendor;
                break;
            case EmplTransSourceType_RU::AccountPayable :
                ret = EmplAdvLineType_RU::AccountPayable;
                break;
            default :
                throw error(strfmt("@SYS51070", _sourceType));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>