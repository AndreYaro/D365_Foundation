<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalWFApprovalStatusManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalWFApprovalStatusManager</c> class manages all workflow approval status changes
///    to the <c>LedgerJournalTable</c> table.
/// </summary>
public class LedgerJournalWFApprovalStatusManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelFromEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the workflow approval status of the journal to
    ///    <c>LedgerJournalWFApprovalStatus::NotSubmitted</c> enumeration.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the journal to be updated.
    /// </param>
    /// <remarks>
    ///    This method handles both the <c>WorkflowElementCancelledEventHandler</c> interface and the
    ///    <c>WorkflowCancelledEventHandler</c> interface based callback events.
    /// </remarks>
    /// <exception cref="M:Exception::Deadlock">
    ///    An unrecoverable deadlock occurred.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An unrecoverable update conflict occurred inside the scope of another transaction.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An unrecoverable update conflict occurred outside the scope of another transaction.
    /// </exception>
    public static void cancelFromEvent(RecId _recId)
    {
        #OCCRetryCount

        LedgerJournalTable  ledgerJournalTable;

        try
        {
            //  Every update must check the most current workflow approval status.
            ledgerJournalTable = LedgerJournalTable::findByRecId(_recId, true);

            boolean isJournalRecIdOk = false;
            isJournalRecIdOk = LedgerJournalWFApprovalStatusManager::isJournalRecIdOkWithWarning(ledgerJournalTable.RecId);

            //  Validate the RecId, Posted, and SystemBlocked status on the journal.
            if (isJournalRecIdOk &&
                !LedgerJournalWFApprovalStatusManager::isJournalPosted(ledgerJournalTable.Posted,
                                                                       ledgerJournalTable.JournalName,
                                                                       ledgerJournalTable.JournalNum)&&
                !LedgerJournalWFApprovalStatusManager::isJournalSystemLocked(ledgerJournalTable.SystemBlocked,
                                                                             ledgerJournalTable.JournalName,
                                                                             ledgerJournalTable.JournalNum))
            {
                //
                //  Validate that the current state allows for a transition to "NotSubmitted".
                //  All existing states should allow for transition to "NotSubmitted".
                //  This is required to handled a workflow faulted condition.
                //  If status is already "NotSubmitted" ignore the request.
                //
                if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::None ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Submitted   ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::PendingApproval ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::ChangeRequested ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Rejected ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Approved)
                {
                    ledgerJournalTable.WorkflowApprovalStatus = LedgerJournalWFApprovalStatus::NotSubmitted;
                    ttsbegin;
                    ledgerJournalTable.update();
                    ttscommit;
                }
            }
        }

        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeFromWorkflowEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the workflow approval status of the journal to
    ///    <c>LedgerJournalWFApprovalStatus::Approved</c>.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the journal to be updated.
    /// </param>
    /// <remarks>
    ///    This method handles only the <c>WorkflowCompletedEventHandler</c> interface based callback event.
    /// </remarks>
    /// <exception cref="M:Exception::Deadlock">
    ///    An unrecoverable deadlock occurred.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An unrecoverable update conflict occurred inside the scope of another transaction.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An unrecoverable update conflict occurred outside the scope of another transaction.
    /// </exception>
    public static void completeFromWorkflowEvent(RecId _recId)
    {
        #OCCRetryCount

        LedgerJournalTable  ledgerJournalTable;

        try
        {
            //  Every update must check the most current workflow approval status.
            ledgerJournalTable = LedgerJournalTable::findByRecId(_recId, true);

            //  Validate the RecId, Posted, and SystemBlocked status on the journal.
            if (LedgerJournalWFApprovalStatusManager::isJournalRecIdOk(ledgerJournalTable.RecId) &&
                !LedgerJournalWFApprovalStatusManager::isJournalPosted(ledgerJournalTable.Posted,
                                                                       ledgerJournalTable.JournalName,
                                                                       ledgerJournalTable.JournalNum) &&
                !LedgerJournalWFApprovalStatusManager::isJournalSystemLocked(ledgerJournalTable.SystemBlocked,
                                                                             ledgerJournalTable.JournalName,
                                                                             ledgerJournalTable.JournalNum))
            {
                //
                //  Validate that the current state allows for a transition to "Approved".
                //  "PendingApproval" is ok for transition to "Approved".
                //  If status is already "Approved" ignore the request.
                //
                if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::None ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::NotSubmitted ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Submitted ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::ChangeRequested ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Rejected)
                {
                    //  An invalid status change has been detected.
                    LedgerJournalWFApprovalStatusManager::invalidWorkflowStatusChangeError(ledgerJournalTable.JournalName,
                                                                                           ledgerJournalTable.JournalNum);

                    // throw error(strfmt("@SYS107962", ledgerJournalTable.JournalName, ledgerJournalTable.JournalNum));
                }
                else if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::PendingApproval)
                {
                    ledgerJournalTable.WorkflowApprovalStatus = LedgerJournalWFApprovalStatus::Approved;
                    ttsbegin;
                    ledgerJournalTable.update();
                    ttscommit;
                }
            }
        }

        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnFromElementEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a workflow approval status of the journal to
    ///    <c>LedgerJournalWFApprovalStatus::Rejected</c>.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the journal to be updated.
    /// </param>
    public static void returnFromElementEvent(RecId _recId)
    {
        LedgerJournalWFApprovalStatusManager::updateWorkflowApprovalStatus(_recId, LedgerJournalWFApprovalStatus::Rejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowApprovalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the workflow approval status of a given journal.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the journal to be updated.
    /// </param>
    /// <param name="_desiredJournalWorkflowApprovalStatus">
    ///   Desired ledger journal workflow approval status.
    /// </param>
    /// <remarks>
    ///    This method handles only a <c>WorkflowElemChangeRequestedEventHandler</c> interface based callback
    ///    event.
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An unrecoverable update conflict occurred inside the scope of another transaction.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An unrecoverable update conflict occurred outside the scope of another transaction.
    /// </exception>
    private static void updateWorkflowApprovalStatus(RecId _recId, LedgerJournalWFApprovalStatus _desiredJournalWorkflowApprovalStatus = LedgerJournalWFApprovalStatus::None)
    {
        #OCCRetryCount

        try
        {
            //  Every update must check the most current workflow approval status.
            LedgerJournalTable ledgerJournalTable = LedgerJournalTable::findByRecId(_recId, true);

            boolean isJournalRecord = LedgerJournalWFApprovalStatusManager::isJournalRecIdOk(ledgerJournalTable.RecId);

            boolean isJournalPosted = LedgerJournalWFApprovalStatusManager::isJournalPosted(
                ledgerJournalTable.Posted,
                ledgerJournalTable.JournalName,
                ledgerJournalTable.JournalNum);

            boolean isJournalSystemBlocked = LedgerJournalWFApprovalStatusManager::isJournalSystemLocked(
                ledgerJournalTable.SystemBlocked,
                ledgerJournalTable.JournalName,
                ledgerJournalTable.JournalNum);

            //  Validate the RecId, Posted, and SystemBlocked status on the journal.
            if (isJournalRecord && !isJournalPosted && !isJournalSystemBlocked)
            {
                //  Validate that the current state allows for a transition to desired workflow approval status.
                //  "PendingApproval" is ok for transition to desired workflow approval status.
                //  If status is already changed to desired status ignore the request.
              
                if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::None ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::NotSubmitted ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Submitted ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Approved ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::ChangeRequested ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Rejected)
                {
                    //  An invalid status change has been detected.
                    LedgerJournalWFApprovalStatusManager::invalidWorkflowStatusChangeError(ledgerJournalTable.JournalName,
                                                                                           ledgerJournalTable.JournalNum);
                }
                else if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::PendingApproval)
                {
                    ledgerJournalTable.WorkflowApprovalStatus = _desiredJournalWorkflowApprovalStatus;
                    ttsbegin;
                    ledgerJournalTable.update();
                    ttscommit;
                }
            }
        }

        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidWorkflowStatusChangeError</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reports that a workflow approval status change update error has occurred.
    /// </summary>
    /// <param name="_journalName">
    ///    The name of the journal.
    /// </param>
    /// <param name="_journalNum">
    ///    The number of the journal.
    /// </param>
    /// <remarks>
    ///    This method is called from the event based updates to the workflow approval status of the journal.
    ///    It indicates that the current status of the journal does not allow for a transition to the new
    ///    status. The result is that the running workflow instance associated with the journal could enter a
    ///    faulted state.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A general error has occurred.
    /// </exception>
    protected static void invalidWorkflowStatusChangeError(LedgerJournalNameId _journalName, LedgerJournalId _journalNum)
    {
        throw error(strfmt("@SYS107962", _journalName, _journalNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalInUse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the journal lines are not being edited.
    /// </summary>
    /// <param name="_inUseBy">
    ///    The User ID of the user who has the journal opened for editing.
    /// </param>
    /// <param name="_journalName">
    ///    The name of the journal.
    /// </param>
    /// <param name="_journalNum">
    ///    The number of the journal.
    /// </param>
    /// <returns>
    ///    false if the journal is not being used; otherwise, an error that prevents more processing.
    /// </returns>
    /// <remarks>
    ///    This method is used to prevent any attempt to update the workflow approval status of the journal if
    ///    the lines of the journal could be in the process of being edited.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The in use state of the journal indicates that it is being opened for editing.
    /// </exception>
    protected static boolean isJournalInUse(userId _inUseBy, LedgerJournalNameId _journalName, LedgerJournalId _journalNum)
    {
        if (_inUseBy != "")
        {
            // Edits might be occurring on this journal, the status transition can not occur.
            throw error(strfmt("@SYS111656", _journalName, _journalNum));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the journal is not posted.
    /// </summary>
    /// <param name="_isPosted">
    ///    A value that indicates whether the journal has been posted.
    /// </param>
    /// <param name="_journalName">
    ///    The name of the journal.
    /// </param>
    /// <param name="_journalNum">
    ///    The number of the journal.
    /// </param>
    /// <returns>
    ///    false if the journal is not already posted; otherwise, an error that prevents additional processing.
    /// </returns>
    /// <remarks>
    ///    This method is used to prevent any attempt to update the workflow approval status of the journal if
    ///    the journal is already posted.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The already posted state of the journal indicates it is posted.
    /// </exception>
    protected static boolean isJournalPosted(JournalPosted _isPosted, LedgerJournalNameId _journalName, LedgerJournalId _journalNum)
    {
        ;

        if (_isPosted == NoYes::Yes)
        {
            //  The journal is already posted therefore the status transition can not occur.
            throw error(strfmt("@SYS107961", _journalName, _journalNum));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalRecIdOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a journal record exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of a <c>LedgerJournalTable</c> buffer.
    /// </param>
    /// <returns>
    ///    true if the journal record exists; otherwise, an error that prevents additional processing.
    /// </returns>
    /// <remarks>
    ///    This method is used to prevent any attempt to update the workflow approval status of the journal if
    ///    the journal does not exist.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The journal does not exist.
    /// </exception>
    protected static boolean isJournalRecIdOk(RecId _recId)
    {
        if (_recId == 0)
        {
            //  The journal does not exist therefore the status transition can not occur.
            throw error("@LedgerJournal:LedgerJournalWFCancelInvalidJournal");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalSystemLocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the journal is not in the process of being posted.
    /// </summary>
    /// <param name="_isSystemLocked">
    ///    A <c>NoYes</c> enumeration value that indicates whether the journal is being posted.
    /// </param>
    /// <param name="_journalName">
    ///    The name of the journal.
    /// </param>
    /// <param name="_journalNum">
    ///    The number of the journal.
    /// </param>
    /// <returns>
    ///    false if the journal is not being posted; otherwise, an error that prevents additional processing.
    /// </returns>
    /// <remarks>
    ///    This method is used to prevent any attempt to update the workflow approval status of the journal if
    ///    the journal is being posted.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The journal is being posted.
    /// </exception>
    protected static boolean isJournalSystemLocked(NoYes _isSystemLocked, LedgerJournalNameId _journalName, LedgerJournalId _journalNum)
    {
        if (_isSystemLocked == NoYes::Yes)
        {
            // Edits might be occurring on this journal, the status transition can not occur.
            throw error(strfmt("@SYS111657", _journalName, _journalNum));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noneFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the workflow approval status of the journal to the
    ///    <c>LedgerJournalWFApprovalStatus::None</c> enumeration value from a form-based workflow Submit
    ///    action.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    ///    A form data source for a <c>LedgerJournalTable</c> table.
    /// </param>
    /// <remarks>
    ///    This method is designed to be used with workflow common UI controls.
    /// </remarks>
    public static void noneFromForm(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalTable ledgerJournalTable = _ledgerJournalTable;

        ledgerJournalTable.WorkflowApprovalStatus = LedgerJournalWFApprovalStatus::None;
        ttsbegin;
        FormDataUtil::getFormDataSource(ledgerJournalTable).write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestChangeFromElementEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a workflow approval status of the journal to
    ///    <c>LedgerJournalWFApprovalStatus::ChangeRequested</c>.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the journal to be updated.
    /// </param>
    public static void requestChangeFromElementEvent(RecId _recId)
    {       
        LedgerJournalWFApprovalStatusManager::updateWorkflowApprovalStatus(_recId, LedgerJournalWFApprovalStatus::ChangeRequested);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resubmitFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the workflow approval status of the journal to
    ///    <c>LedgerJournalWFApprovalStatus::Submitted</c> from a form based workflow "Resubmit" action.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    ///    A form data source for a <c>LedgerJournalTable</c> table.
    /// </param>
    /// <remarks>
    ///    This method is designed to be used with workflow common UI controls.
    /// </remarks>
    public static void resubmitFromForm(LedgerJournalTable _ledgerJournalTable)
    {

        LedgerJournalWFApprovalStatusManager::submitFromForm(_ledgerJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startFromElementEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the workflow approval status of a journal to
    ///    <c>LedgerJournalWFApprovalStatus::PendingApproval</c>.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the journal to be updated.
    /// </param>
    /// <remarks>
    ///    This method handles only a <c>WorkflowElementStartedEventHandler</c> interface based callback event.
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An unrecoverable update conflict occurred inside the scope of another transaction.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An unrecoverable update conflict occurred outside the scope of another transaction.
    /// </exception>
    public static void startFromElementEvent(RecId _recId)
    {
        #OCCRetryCount

        LedgerJournalTable  ledgerJournalTable;

        try
        {
            //  Every update must check the most current workflow approval status.
            ledgerJournalTable = LedgerJournalTable::findByRecId(_recId, true);

            //  Validate the RecId, Posted, and SystemBlocked status on the journal.
            if (LedgerJournalWFApprovalStatusManager::isJournalRecIdOk(ledgerJournalTable.RecId) &&
                !LedgerJournalWFApprovalStatusManager::isJournalPosted(ledgerJournalTable.Posted,
                                                                       ledgerJournalTable.JournalName,
                                                                       ledgerJournalTable.JournalNum)&&
                !LedgerJournalWFApprovalStatusManager::isJournalSystemLocked(ledgerJournalTable.SystemBlocked,
                                                                             ledgerJournalTable.JournalName,
                                                                             ledgerJournalTable.JournalNum))
            {
                //
                //  Validate that the current state allows for a transition to "PendingApproval".
                //  "Submitted"  and "ChangeRequest" are ok for transition to "PendingApproval".
                //  If status is already "PendingApproval" ignore the request.
                //
                if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::None ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::NotSubmitted ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Approved)
                {
                    //  An invalid status change has been detected.
                    LedgerJournalWFApprovalStatusManager::invalidWorkflowStatusChangeError(ledgerJournalTable.JournalName,
                                                                                           ledgerJournalTable.JournalNum);
                    // throw error(strfmt("@SYS107962", ledgerJournalTable.JournalName, ledgerJournalTable.JournalNum));
                }
                else if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Submitted ||
                         ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::ChangeRequested)
                {
                    ledgerJournalTable.WorkflowApprovalStatus = LedgerJournalWFApprovalStatus::PendingApproval;
                    ttsbegin;
                    ledgerJournalTable.update();
                    ttscommit;
                }
            }
        }

        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startFromWorkflowEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the workflow status to "Submitted".
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the journal to be updated.
    /// </param>
    /// <remarks>
    ///    This method handles only a <c>WorkflowStartedEventHandler</c> interface based callback event.
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An unrecoverable update conflict occurred inside the scope of another transaction.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An unrecoverable update conflict occurred outside the scope of another transaction.
    /// </exception>
    public static void startFromWorkflowEvent(RecId _recId)
    {
        #OCCRetryCount

        LedgerJournalTable  ledgerJournalTable;

        try
        {
            //  Every update must check the most current workflow approval status.
            ledgerJournalTable = LedgerJournalTable::findByRecId(_recId, true);

            //  Validate the RecId, inUseBy, Posted, and SystemBlocked status on the journal.
            if (LedgerJournalWFApprovalStatusManager::isJournalRecIdOk(ledgerJournalTable.RecId) &&
                !LedgerJournalWFApprovalStatusManager::isJournalInUse(ledgerJournalTable.InUseBy,
                                                                      ledgerJournalTable.JournalName,
                                                                      ledgerJournalTable.JournalNum)&&
                !LedgerJournalWFApprovalStatusManager::isJournalPosted(ledgerJournalTable.Posted,
                                                                       ledgerJournalTable.JournalName,
                                                                       ledgerJournalTable.JournalNum)&&
                !LedgerJournalWFApprovalStatusManager::isJournalSystemLocked(ledgerJournalTable.SystemBlocked,
                                                                             ledgerJournalTable.JournalName,
                                                                             ledgerJournalTable.JournalNum))
            {
                //
                //  Validate that the current state allows for a transition to "Submitted".
                //  "NotSubmitted" is considered ok for transition to "Submitted".
                //  If status is already submitted ignore the request.
                //
                if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::None ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::PendingApproval ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::ChangeRequested ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Rejected ||
                    ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Approved)
                {
                    //  An invalid status change has been detected.
                    LedgerJournalWFApprovalStatusManager::invalidWorkflowStatusChangeError(ledgerJournalTable.JournalName,
                                                                                           ledgerJournalTable.JournalNum);
                    // throw error(strfmt("@SYS107962", ledgerJournalTable.JournalName, ledgerJournalTable.JournalNum));
                }
                else if (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::NotSubmitted)
                {
                    ledgerJournalTable.WorkflowApprovalStatus = LedgerJournalWFApprovalStatus::Submitted;
                    ttsbegin;
                    ledgerJournalTable.update();
                    ttscommit;
                }
            }
        }

        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the workflow approval status of the journal to
    ///    <c>LedgerJournalWFApprovalStatus::Submitted</c> from a form based workflow "Submit" operation.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    ///    A form data source for a <c>LedgerJournalTable</c> table.
    /// </param>
    /// <remarks>
    ///    This method is designed to be used with workflow common UI controls.
    /// </remarks>
    public static void submitFromForm(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalTable ledgerJournalTable = _ledgerJournalTable;

		ledgerJournalTable.WorkflowApprovalStatus = LedgerJournalWFApprovalStatus::Submitted;
        
        if (FormDataUtil::getFormDataSource(ledgerJournalTable))
		{
			ttsbegin;
			FormDataUtil::getFormDataSource(ledgerJournalTable).write();
			ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalRecIdOkWithWarning</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a journal record exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of a <c>LedgerJournalTable</c> buffer.
    /// </param>
    /// <returns>
    ///    true if the journal record exists; otherwise, warning message to customer regarding the missing journal record
    /// </returns>
    /// <remarks>
    ///    This method is used to allow workflow to be updated when journal record is not existed
    /// </remarks>
    protected static boolean isJournalRecIdOkWithWarning(RecId _recId)
    {
        if (_recId == 0)
        {
            //  The journal does not exist
            warning("@LedgerJournal:LedgerJournalWFCancelInvalidJournal");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>