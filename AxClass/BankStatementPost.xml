<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementPost</c>class performs posting of bank statement.
/// </summary>
class BankStatementPost extends Object
{
    BankStmtISOAccountStatement statementPosting;

    Voucher     voucherPosting;
    TransDate   accountingDate;

    private List statementLineRecIds = new List(Types::Int64);
    private RecId voucherGroupId;
    private int countOfLines;
    private BankStatementPostLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNumberSequenceOfPostingStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets bank statement posting voucher.
    /// </summary>
    /// <returns>
    /// Bank statement posting voucher.
    /// </returns>
    private NumberSequenceTable getNumberSequenceOfPostingStatement()
    {
        NumberSequenceReference numberSeqReference;
        NumberSequenceTable     numberSequenceTable;

        numberSeqReference = NumberSeqReference::findReference(extendedtypenum(BankReconcileVoucher));
        if (numberSeqReference)
        {
            numberSequenceTable = numberSeqReference.numberSequenceTable();
        }
        return numberSequenceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherOfPostingStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets bank statement posting voucher.
    /// </summary>
    /// <returns>
    /// The posting voucher.
    /// </returns>
    private Voucher getVoucherOfPostingStatement()
    {
        Voucher voucher;
        NumberSequenceReference numberSeqReference;

        numberSeqReference = NumberSeqReference::findReference(extendedtypenum(BankReconcileVoucher));
        if (numberSeqReference)
        {
            // Get the voucher number
            voucher = NumberSeq::newGetVoucherFromId(numberSeqReference.numberSequenceTable().RecId).voucher();
        }
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the buffer is loaded.
    /// </summary>
    /// <returns>
    ///     True if it is loaded; otherwise, false.
    /// </returns>
    protected boolean isDataLoaded()
    {
        return statementPosting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementPosting</Name>
				<Source><![CDATA[
    public BankStmtISOAccountStatement parmStatementPosting(BankStmtISOAccountStatement _statementPosting = statementPosting)
    {
        statementPosting = _statementPosting;

        return statementPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementLines</Name>
				<Source><![CDATA[
    internal List parmStatementLines(List _statementLineRecIds = statementLineRecIds)
    {
        statementLineRecIds = _statementLineRecIds;

        return statementLineRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLogger</Name>
				<Source><![CDATA[
    internal void setLogger(BankStatementPostLogger _logger)
    {
        this.logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountOfLines</Name>
				<Source><![CDATA[
    internal int getCountOfLines()
    {
        return this.countOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVoucherGroupId</Name>
				<Source><![CDATA[
    private void initVoucherGroupId()
    {
        BankStmtISOReportEntry statementLine;
        select firstonly Voucher, AccountingDate
            from statementLine
            where statementLine.BankStmtISOAccountStatement == statementPosting.RecId
                && statementLine.Voucher;

        if (statementLine.Voucher)
        {
            voucherGroupId = LedgerTransVoucherLink::findVoucherGroupId(statementLine.Voucher, statementLine.AccountingDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does posting.
    /// </summary>
    /// <returns>
    /// Whether the posting is successful.
    /// </returns>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// Exception of not recovered conflict.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// Exception of conflict.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Exception of error.
    /// </exception>
    protected boolean post()
    {
        boolean result = true;
        #OCCRetryCount

        Microsoft.Dynamics.Ax.Xpp.UpdateConflictException updateConflictException;
        Microsoft.Dynamics.Ax.Xpp.DeadlockException deadlockException;
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        try
        {
            if (!FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance()))
            {
                ttsbegin;

                voucherPosting = this.getVoucherOfPostingStatement();
                accountingDate = statementPosting.getAccountingDate();

                Debug::assert(voucherPosting != '');
                Debug::assert(statementPosting.Posted == false);

                //statement process
                this.processTax();

                this.processStatement(statementPosting);

                //submit source document
                SourceDocumentProcessorFacade::submitSourceDocumentImplementation(statementPosting, false, SourceDocumentAccountingStatus::Completed);

                //transaction process
                this.processBankTransaction();

                TransactionLog::create(TransactionLogType::BankReconciliation, strFmt("@CashManagement:BankStatementVoucherPost", voucherPosting));

                ttscommit;
            }
            else if (BankStmtISOReportEntry::updateEmptyAccountingDate(statementPosting))
            {
                ttsbegin;

                if (statementLineRecIds.elements() == 0)
                {
                    this.processAllStatementLines();
                    this.processStatement(statementPosting);

                    if (SourceDocumentHeader::find(statementPosting.SourceDocumentHeader).AccountingStatus != SourceDocumentAccountingStatus::Completed)
                    {
                        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(statementPosting, false, SourceDocumentAccountingStatus::Completed);
                    }

                    info(strFmt("@GLS221572", statementPosting.Identification));
                }
                else
                {
                    this.processPartialStatementLines();
                    info("@CashManagement:BankReconciliationDirectPostingResult");
                }

                ttscommit;
            }
            else
            {
                return false;
            }
        }
        catch (deadlockException)
        {
            result = false;
            logger.logException(deadlockException);
            retry;
        }
        catch (updateConflictException)
        {
            result = false;
            logger.logException(updateConflictException);
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (errorException)
        {
            result = false;
            logger.logException(errorException);
            throw error(strFmt("@GLS221748", statementPosting.Identification));
        }
        finally
        {
            if (!result)
            {
                logger.finishActivity();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAllStatementLines</Name>
				<Source><![CDATA[
    private void processAllStatementLines()
    {
        BankStmtISOReportEntry statementLine;

        while select statementLine
            order by RecId
            where statementLine.BankStmtISOAccountStatement == statementPosting.RecId
                && statementLine.IsNewBankDocument == NoYes::Yes
                && statementLine.Voucher == ''
        {
            this.processSingleStatementLine(statementLine);
            countOfLines ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPartialStatementLines</Name>
				<Source><![CDATA[
    private void processPartialStatementLines()
    {
        ListEnumerator enumerator = statementLineRecIds.getEnumerator();

        while (enumerator.moveNext())
        {
            BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(enumerator.current());

            if (statementLine.IsNewBankDocument == NoYes::Yes && !statementLine.isPosted())
            {
                this.processSingleStatementLine(statementLine);
                countOfLines ++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSingleStatementLine</Name>
				<Source><![CDATA[
    private void processSingleStatementLine(BankStmtISOReportEntry _statementLine)
    {
        Voucher lineVoucher = this.getVoucherOfPostingStatement();

        this.updateStatementLineVoucher(_statementLine, lineVoucher);

        if (!voucherGroupId)
        {
            voucherGroupId = LedgerTransVoucherLink::findOrCreateParentVoucherLink(lineVoucher, _statementLine.AccountingDate).RecId;
        }
        else
        {
            LedgerTransVoucherLink::getCurrentVoucherGroupId(voucherGroupId, lineVoucher, _statementLine.AccountingDate);
        }

        if (_statementLine.hasTax())
        {
            this.processLineTax(_statementLine, lineVoucher);

            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(_statementLine.SourceDocumentLine);

            boolean updateDistribution = !sourceDocumentLine.StateContainer
                || sourceDocumentLine.StateContainer != SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine).parmCurrentStateContainer();

            if (updateDistribution)
            {
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(_statementLine);
            }
        }

        SourceDocumentLineImplementationList sourceDocumentLineImplementationList = SourceDocumentLineImplementationList::construct();
        sourceDocumentLineImplementationList.addEnd(_statementLine);

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(
            statementPosting,
            false,
            SourceDocumentAccountingStatus::Completed,
            null,
            curUserId(),
            true,
            sourceDocumentLineImplementationList);

        this.processLineBankTransaction(_statementLine, lineVoucher);

        TransactionLog::create(TransactionLogType::BankReconciliation, strFmt("@CashManagement:BankStatementVoucherPost", lineVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes bank posting.
    /// </summary>
    private void processBankTransaction()
    {
        LedgerVoucher       ledgerVoucher;
        LedgerVoucherObject ledgerVoucherObject;
        NumberSequenceCode  voucherSeriesCode;
        BankVoucher         bankVoucher;
        BankStmtISOReportEntry bankStatementLine;
        BankStatementLineBankDocumentInformation bankStatementLineBankDocumentInformation;

        SubledgerJournalEntry           subledgerJournalEntry;
        AccountingDistribution          accountingDistribution;
        SubledgerJournalAccountEntry    subledgerJournalAccountEntry;
        SubledgerJournalAccountEntryDistribution    subledgerJournalAccountEntryDistribution;
        AccountingEvent                 accountingEvent;

        //cache
        RefRecId    lastSourceDocumentLineId;
        RefRecId    lastSubledgerJournalAccountEntryRecId;

        // Create BankVoucher
        // ledgerVoucher is the old interface to post to GL. We do not really post to GL here, i.e. not calling ledgerVoucher.end
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Ledger, voucherSeriesCode);

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherPosting,
                                                accountingDate,
                                                SysModule::Bank,
                                                LedgerTransType::Bank);
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        while select * from subledgerJournalAccountEntry
            order by subledgerJournalAccountEntry.RecId, bankStatementLine.BookingDateTime desc
            where subledgerJournalAccountEntry.PostingType == LedgerPostingType::Bank
        join SourceDocumentLine, RecId from accountingDistribution
        join BookingDateTime, TableId, RecId from bankStatementLine
            where bankStatementLine.SourceDocumentLine == accountingDistribution.SourceDocumentLine
        exists join subledgerJournalAccountEntryDistribution
            where subledgerJournalAccountEntryDistribution.AccountingDistribution == accountingDistribution.RecId
                && subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
        exists join subledgerJournalEntry
            where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
        exists join accountingEvent
            where subledgerJournalEntry.AccountingEvent == accountingEvent.RecId
                && accountingEvent.SourceDocumentHeader == statementPosting.SourceDocumentHeader
        {
            if (lastSubledgerJournalAccountEntryRecId != subledgerJournalAccountEntry.RecId)
            {
                lastSubledgerJournalAccountEntryRecId = subledgerJournalAccountEntry.RecId;

                if (lastSourceDocumentLineId != accountingDistribution.SourceDocumentLine)
                {
                    lastSourceDocumentLineId = accountingDistribution.SourceDocumentLine;
                    bankStatementLineBankDocumentInformation = BankStatementLineBankDocumentInformation::findByReportEntry(bankStatementLine.RecId);
                }

                bankVoucher = BankVoucher::newBankVoucher(
                    subledgerJournalAccountEntry.TransactionCurrencyAmount,
                    subledgerJournalAccountEntry.TransactionCurrency,
                    statementPosting.BankAccountTable,
                    '',
                    '',
                    '',
                    bankStatementLineBankDocumentInformation.TransactionTxt,
                    LedgerPostingType::Bank,
                    LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(subledgerJournalAccountEntry.LedgerDimension),
                    LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(subledgerJournalAccountEntry.LedgerDimension),
                    bankStatementLineBankDocumentInformation.BankTransType,
                    0,
                    0,
                    UnknownNoYes::Unknown,
                    0,
                    0,
                    '');

                bankVoucher.parmTransDate(accountingDate);
                bankVoucher.parmReasonRefRecID(0);
                bankVoucher.parmJournalType(LedgerJournalType::Daily);
                bankVoucher.parmReconcile(NoYes::Yes);
                bankVoucher.parmReconcileFromStatement(NoYes::Yes);
                bankVoucher.parmSourceTableId(bankStatementLine.TableId);
                bankVoucher.parmSourceRecId(bankStatementLine.RecId);

                bankVoucher.post(ledgerVoucher);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLineBankTransaction</Name>
				<Source><![CDATA[
    private void processLineBankTransaction(BankStmtISOReportEntry _statementLine, Voucher _voucherLine)
    {
        NumberSequenceCode voucherSeriesCode;

        LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Ledger, voucherSeriesCode);

        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(_voucherLine, _statementLine.AccountingDate, SysModule::Bank, LedgerTransType::Bank);

        ledgerVoucher.addVoucher(ledgerVoucherObject);

        BankStmtISOReportEntry bankStatementLine;
        AccountingDistribution accountingDistribution;
        BankStatementLineBankDocumentInformation bankStatementLineBankDocumentInformation;

        while select AllocationFactor, LedgerDimension, MonetaryAmount, SourceDocumentLine from accountingDistribution
            where accountingDistribution.MonetaryAmount == MonetaryAmount::StatementAmount
            join bankStatementLine
                where bankStatementLine.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                    && bankStatementLine.RecId == _statementLine.RecId
            join TransactionTxt, BankTransType, BankStmtISOReportEntry from bankStatementLineBankDocumentInformation
                where bankStatementLineBankDocumentInformation.BankStmtISOReportEntry == bankStatementLine.RecId
        {
            DimensionDefault defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(accountingDistribution.LedgerDimension);
            LedgerDimensionAccount bankLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(statementPosting.getBankAccountTable().LedgerDimension, defaultDimension);
            LedgerDimensionAccount fixedLedgerDimension = LedgerDimensionFacade::serviceApplyFixedDimensions(bankLedgerDimension);

            if (bankLedgerDimension != fixedLedgerDimension)
            {
                defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(fixedLedgerDimension);
            }

            BankVoucher bankVoucher = BankVoucher::newBankVoucher(
                bankStatementLine.getBankCurrencyAmount() * accountingDistribution.AllocationFactor,
                statementPosting.AccountCurrency,
                statementPosting.BankAccountTable,
                '',
                '',
                '',
                bankStatementLineBankDocumentInformation.TransactionTxt,
                LedgerPostingType::Bank,
                defaultDimension,
                LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(statementPosting.getBankAccountTable().LedgerDimension),
                bankStatementLineBankDocumentInformation.BankTransType);

            bankVoucher.parmTransDate(_statementLine.AccountingDate);
            bankVoucher.parmJournalType(LedgerJournalType::Daily);
            bankVoucher.parmReconcile(NoYes::Yes);
            bankVoucher.parmReconcileFromStatement(NoYes::Yes);
            bankVoucher.parmSourceTableId(_statementLine.TableId);
            bankVoucher.parmSourceRecId(_statementLine.RecId);

            bankVoucher.post(ledgerVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes bank statement.
    /// </summary>
    /// <param name="_statement">
    /// The bank statement.
    /// </param>
    private void processStatement(BankStmtISOAccountStatement _statement)
    {
        //update the voucher
        _statement.selectForUpdate(true);
        if (!FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance()))
        {
            _statement.Voucher = voucherPosting;
        }
        _statement.Posted = true;
        _statement.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatementLineVoucher</Name>
				<Source><![CDATA[
    private void updateStatementLineVoucher(BankStmtISOReportEntry _statementLine, Voucher _voucherLine)
    {
        _statementLine.selectForUpdate(true);
        _statementLine.Voucher = _voucherLine;
        _statementLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes tax.
    /// </summary>
    private void processTax()
    {
        LedgerVoucher               ledgerVoucher;
        LedgerVoucherObject         ledgerVoucherObject;
        NumberSequenceCode          voucherSeriesCode;
        BankStatementTaxDocument    bankStatementTaxDocument;

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Ledger, voucherSeriesCode);

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherPosting,
                                                accountingDate,
                                                SysModule::Ledger);

        ledgerVoucher.addVoucher(ledgerVoucherObject);

        bankStatementTaxDocument = BankStatementTaxDocument::construct(statementPosting);
        bankStatementTaxDocument.post(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLineTax</Name>
				<Source><![CDATA[
    private void processLineTax(BankStmtISOReportEntry _statementLine, Voucher _voucherLine)
    {
        NumberSequenceCode voucherSeriesCode;

        LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Ledger, voucherSeriesCode);

        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(_voucherLine, _statementLine.getBookingDate(), SysModule::Ledger);

        ledgerVoucher.addVoucher(ledgerVoucherObject);

        BankStatementTaxDocumentPost bankStatementTaxDocumentPost = BankStatementTaxDocumentPost::construct(_statementLine);
        bankStatementTaxDocumentPost.post(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reloadData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reloads the buffer.
    /// </summary>
    /// <remarks>
    ///     Called when create an instance on server from client instance.
    /// </remarks>
    protected void reloadData()
    {
        statementPosting = BankStmtISOAccountStatement::find(statementPosting.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>BankStatementPost</c>.
    /// </summary>
    /// <param name="_statement">
    /// The statement buffer.
    /// </param>
    /// <returns>
    /// A new instance of <c>BankStatementPost</c>.
    /// </returns>
    private static BankStatementPost construct(BankStmtISOAccountStatement _statement, List _statementLineRecIds = new List(Types::Int64))
    {
        BankStatementPost post = new BankStatementPost();
        post.parmStatementPosting(_statement);
        post.parmStatementLines(_statementLineRecIds);
        post.initVoucherGroupId();
        return post;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BankStmtISOAccountStatement statement = _args.record();

        BankStatementPost::postBankStatement(statement.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBankStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts bank statement.
    /// </summary>
    /// <param name="_statementRecId">
    /// The record recid of bank statement.
    /// </param>
    public static void postBankStatement(RefRecId _statementRecId)
    {
        BankStmtISOAccountStatement statement = BankStmtISOAccountStatement::find(_statementRecId);
        BankStatementPost bankStatementPost = BankStatementPost::construct(statement);

        BankStatementPostLogger logger = new BankStatementPostLogger();
        if (!FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance()))
        {
            logger.addActivity(BankInstrumentationConstants::PostBankStatementHeader);
        }
        else
        {
            logger.addActivity(BankInstrumentationConstants::PostBankStatementLine);
        }

        bankStatementPost.setLogger(logger);
        bankStatementPost.post();

        logger.logLineCountMagnitude(bankStatementPost.getCountOfLines());
        logger.finishActivity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBankStatementLines</Name>
				<Source><![CDATA[
    internal static void postBankStatementLines(Map _statementHeaderLines)
    {
        MapEnumerator enumerator = _statementHeaderLines.getEnumerator();
        BankStatementPostLogger logger = new BankStatementPostLogger();
        logger.addActivity(BankInstrumentationConstants::PostBankStatementPartial);
        int countOfLines = 0;

        while (enumerator.moveNext())
        {
            BankStmtISOAccountStatement statement = BankStmtISOAccountStatement::find(enumerator.currentKey());
            BankStatementPost bankStatementPost = BankStatementPost::construct(statement, enumerator.currentValue());
            bankStatementPost.setLogger(logger);
            bankStatementPost.post();
            countOfLines += bankStatementPost.getCountOfLines();
        }

        logger.logLineCountMagnitude(countOfLines);
        logger.finishActivity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBankStatementInBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts bank statement in batch.
    /// </summary>
    /// <param name = "_statementRecId">The statement RecId to be posted in batch.</param>
    internal static void postBankStatementInBatch(RecId _statementRecId)
    {
        BankStatementPostController controller = BankStatementPostController::construct();
        BankStatementPostContract contract = controller.getContract();
        contract.parmBankReconciliationOperationType(BankReconciliationOperationType::BankStatementPost);
        contract.parmSingleBankStatementRecId(_statementRecId);
        contract.parmIsMainBatch(true);
        controller.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBankStatementLinesInBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts bank statement lines in batch.
    /// </summary>
    /// <param name = "_statementHeaderToLinesMap">The statement header to lines map that to be posted in batch.</param>
    internal static void postBankStatementLinesInBatch(Map _statementHeaderToLinesMap)
    {
        BankStatementPostController controller = BankStatementPostController::construct();
        BankStatementPostContract contract = controller.getContract();
        contract.parmBankReconciliationOperationType(BankReconciliationOperationType::BankStatementLinePost);
        contract.parmStatementToLineListMap(_statementHeaderToLinesMap);
        contract.parmIsMainBatch(true);
        controller.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankStatementBeforePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the bank statement can be posted.
    /// </summary>
    /// <param name = "_statementRecId">The statement RecId to be validated.</param>
    /// <returns>true if the bank statement can be posted; otherwise, false.</returns>
    internal static boolean validateBankStatementBeforePost(RecId _statementRecId)
    {
        boolean canPost = true;
        BankStmtISOAccountStatement statement = BankStmtISOAccountStatement::find(_statementRecId);
        if (!statement.isPostable())
        {
            canPost = checkFailed(strFmt("@Bank:DataCorruptionErrorWhenPosting", tableId2Name(tableNum(BankStmtISOAccountStatement))));
        }
        canPost = canPost && BankReconciliationOperationValidator::validateAnyBatchJobProcessingOnRecord(tableNum(BankStmtISOAccountStatement), _statementRecId);
        return canPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankStatementLinesBeforePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the bank statement lines can be for posted.
    /// </summary>
    /// <param name = "_statementHeaderToLinesMap">The statement header to lines map that to be validated.</param>
    /// <returns>true if the bank statement lines can be posted; otherwise, false.</returns>
    internal static boolean validateBankStatementLinesBeforePost(Map _statementHeaderToLinesMap)
    {
        boolean canPost = true;
        MapEnumerator enumerator = _statementHeaderToLinesMap.getEnumerator();
        while (canPost && enumerator.moveNext())
        {
            BankStmtISOAccountStatement statement = BankStmtISOAccountStatement::find(enumerator.currentKey());
            if (statement.isPostable() && BankReconciliationOperationValidator::validateAnyBatchJobProcessingOnRecord(statement.TableId, statement.RecId))
            {
                List statementLines = enumerator.currentValue();
                ListEnumerator listEnumerator = statementLines.getEnumerator();
                while (listEnumerator.moveNext())
                {
                    BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(listEnumerator.current());
                    if (!statementLine.isReadyToPost())
                    {
                        canPost = checkFailed(strFmt("@Bank:DataCorruptionErrorWhenPosting", tableId2Name(tableNum(BankStmtISOReportEntry))));
                        break;
                    }
                    if (!BankReconciliationOperationValidator::validateAnyBatchJobProcessingOnRecord(statementLine.TableId, statementLine.RecId))
                    {
                        canPost = false;
                        break;
                    }
                }
            }
            else
            {
                canPost = false;
            }
        }
        return canPost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>