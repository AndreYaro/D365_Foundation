<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqItemJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqItemJournalCreate extends JournalRunBaseBatch implements BatchRetryable
{
    SysQueryRun     queryRun;

    JournalId       journalId;
    TransDate       transDateFrom;
    TransDate       transDateTo;
    NoYes           calcStdDeviation;

    // Dialog fields
    DialogField     dlgJournalId;
    DialogField     dlgTransDateFrom;
    DialogField     dlgTransDateTo;
    DialogField     dlgCalcStdDeviation;

    private boolean reqItemJournalCreateCalcDemandPeriodFlight;

    #define.CurrentVersion(3)
    #define.Version(3)

    #localmacro.CurrentList
        journalId,
        transDateFrom,
        transDateTo,
        calcStdDeviation
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAvgDemandPerMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the average demand per month.
    /// </summary>
    /// <param name="_mapDemandPerMonth">
    ///    A map that contains demand per month; optional.
    /// </param>
    /// <param name="_demandTotal">
    ///    The total demand for the whole period; optional.
    /// </param>
    /// <returns>
    ///    The average demand per month based on the period.
    /// </returns>
    /// <remarks>
    ///    This method calculates the average demand per month. The calculation requires either a map that
    ///    contains the demand per month, or the total demand for the whole period.
    /// </remarks>
    protected InventQty calcAvgDemandPerMonth(
            Map             _mapDemandPerMonth = null,
            InventQty       _demandTotal = 0)
    {
        InventQty           demandSum;
        MapEnumerator       me;
        int                 numOfMonths = ReqItemJournalCreate::numOfMonth(transDateFrom,transDateTo);

        if (prmisDefault(_mapDemandPerMonth) && prmisDefault(_demandTotal))
        {
            //the function must be called with one parameter
            throw error(strFmt("@SYS54195",funcName()));
        }

        if (prmisDefault(_demandTotal))
        {
            if (! _mapDemandPerMonth || ! _mapDemandPerMonth.elements())
            {
                return 0;
            }

            me = _mapDemandPerMonth.getEnumerator();

            while (me.moveNext())
            {
                demandSum += me.currentValue();
            }
        }
        else
        {
            demandSum = _demandTotal > 0 ? _demandTotal : 0;
        }

        return numOfMonths > 0 ? demandSum/numOfMonths : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDemandPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates demand for a period.
    /// </summary>
    /// <param name="_itemId">
    ///    The item number for which the calculation is performed.
    /// </param>
    /// <param name="_inventDimCov">
    ///    An <c>inventDim</c> record that holds the inventory coverage dimensions for which the calculation
    ///    is performed.
    /// </param>
    /// <param name="_fromDate">
    ///    The first date in the calculation period.
    /// </param>
    /// <param name="_toDate">
    ///    The last date in the calculation period.
    /// </param>
    /// <returns>
    ///    The summarized demand during the specified period and for the specified item number and inventory
    ///    dimensions.
    /// </returns>
    /// <remarks>
    ///    Demand is calculated as issues in the specified period. Not all issues should be included in the
    ///    calculation.
    ///    Issues that have a corresponding receipt on the same coverage dimension should not be
    ///    included.
    /// </remarks>
    protected InventQty calcDemandPeriod(
        ItemId              _itemId,
        InventDim           _inventDimCov,
        TransDate           _fromDate,
        TransDate           _toDate)
    {
        InventTransOrigin   inventTransOriginIssue;
        InventTrans         inventTransIssue;
        InventTrans         transferReceipt;

        InventTransOriginTransfer inventTransOriginTransfer;

        InventDim           inventDimIssue;
        InventDim           inventDimReceipt;
        InventDimParm       inventDimParm;

        if ( _fromDate > _toDate )
        {
            return 0;
        }

        inventDimParm.initFromInventDim(_inventDimCov);

        // find demand - internal transfers must not count as demand
        // internal transfer means that the issue and receipt has same coverage dimensions.
        // if warehouse isn't a coverage dimension then don't count transfer orders as demand

        transferReceipt.allowIndexHint(true);
        inventTransIssue.allowIndexHint(true);

        #LOCALMACRO.queryHint
            forceplaceholders
        #ENDMACRO

        #LOCALMACRO.queryHintWithForceSelectOrder
            #queryHint forceSelectOrder
        #ENDMACRO

        #LOCALMACRO.sumIssue
            select %1 sum(Qty) from inventTransIssue
                index hint ItemIdx
                where inventTransIssue.ItemId              == _itemId
                   && inventTransIssue.StatusReceipt       == StatusReceipt::None
                   && inventTransIssue.StatusIssue         >= StatusIssue::Sold
                   && inventTransIssue.StatusIssue         <= StatusIssue::Deducted
                   && inventTransIssue.InvoiceReturned     == NoYes::No
                   && inventTransIssue.PackingSlipReturned == NoYes::No
                   && inventTransIssue.DatePhysical        >= _fromDate
                   && inventTransIssue.DatePhysical        <= _toDate
            join TableId from inventTransOriginIssue
                where inventTransOriginIssue.RecId == inventTransIssue.InventTransOrigin
                   && (inventDimParm.InventLocationIdFlag  || inventTransOriginIssue.ReferenceCategory != InventTransType::TransferOrderShip)
            outer join ReceiptInventTransOrigin from inventTransOriginTransfer
                where (inventTransOriginTransfer.IssueInventTransOrigin == inventTransOriginIssue.RecId)
            #inventDimExistsJoin(inventTransIssue.inventDimId,InventDimIssue,_inventDimCov,inventDimParm)
            notexists join transferReceipt
                index hint %2
                where transferReceipt.ItemId                == _itemId
                    && transferReceipt.StatusIssue          == StatusIssue::None
                    && transferReceipt.StatusReceipt        >= StatusReceipt::Purchased
                    && transferReceipt.StatusReceipt        <= StatusReceipt::Received
                    && (!reqItemJournalCreateCalcDemandPeriodFlight
                        || inventTransOriginIssue.ReferenceCategory != InventTransType::Sales)
                    && (transferReceipt.InventTransOrigin   == inventTransIssue.InventTransOrigin
                        || transferReceipt.InventTransOrigin   == inventTransOriginTransfer.ReceiptInventTransOrigin)
            #inventDimExistsJoin(transferReceipt.inventDimId,InventDimReceipt,_inventDimCov,inventDimParm);
        #ENDMACRO

        #sumIssue(#queryHintWithForceSelectOrder, TransOriginIdx);

        return sign(inventTransIssue.Qty) * inventTransIssue.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDemandPerMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates a map that contains the demand per month.
    /// </summary>
    /// <param name="_fromDate">
    ///    The first date in the calculation period.
    /// </param>
    /// <param name="_toDate">
    ///    The last date in the calculation period.
    /// </param>
    /// <param name="_itemId">
    ///    The item number for which the calculation is performed.
    /// </param>
    /// <param name="_inventDim">
    ///    An <c>inventDim</c> record that holds the inventory dimensions for which the calculation is
    ///    performed.
    /// </param>
    /// <returns>
    ///    A map that contains the first date in the month and the demand for the month.
    /// </returns>
    /// <remarks>
    ///    The map will serve as input in other methods.
    /// </remarks>
    protected Map calcDemandPerMonth(
        TransDate           _fromDate,
        TransDate           _toDate,
        ItemId              _itemId,
        InventDim           _inventDim)
    {
        InventQty           issueQty;
        Map                 mapIssuesPerMonth;

        TransDate           monthStartDate;
        InventDimParm       inventDimParm;

        if ( (_fromDate != dateStartMth(_fromDate)) ||  // _fromdate isn't the first date in the month
             (_toDate != endmth(_toDate)) ||            // _toDate isn't the end date in the month
             (_fromDate >= _toDate) )
        {
            return null;
        }

        monthStartDate = _fromDate;
        mapIssuesPerMonth = new Map(Types::Date,Types::Real);   // [first date in month, demand]
        inventDimParm.initFromInventDim(_inventDim);

        while (monthStartDate < _toDate)
        {
            issueQty = this.calcDemandPeriod(_itemId,_inventDim,monthStartDate,nextMth(monthStartDate)-1);
            mapIssuesPerMonth.insert(monthStartDate,issueQty);
            monthStartDate = nextMth(monthStartDate);
        }

        return mapIssuesPerMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStdDeviationPerMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the standard deviation of the demands per month.
    /// </summary>
    /// <param name="_mapDemandPerMonth">
    ///    A map that contains demand per month.
    /// </param>
    /// <param name="_avgDemandPerMonth">
    ///    The average demand per month.
    /// </param>
    /// <returns>
    ///    A real that holds the standard deviation.
    /// </returns>
    protected InventQty calcStdDeviationPerMonth(
        Map             _mapDemandPerMonth,
        InventQty       _avgDemandPerMonth)
    {
        MapEnumerator   me;
        real            squaredDeviationSum;
        real            deviation;

        #define.squared(2)

        if (! _mapDemandPerMonth || ! _mapDemandPerMonth.elements())
        {
            return 0;
        }

        me = _mapDemandPerMonth.getEnumerator();

        while (me.moveNext())
        {
            deviation = abs(_avgDemandPerMonth - me.currentValue());
            squaredDeviationSum += power(deviation,#squared);
        }

        return sqrt(squaredDeviationSum/_mapDemandPerMonth.elements());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates <c>ReqItemJournalTrans</c> records.
    /// </summary>
    void createLines()
    {
        ReqItemJournalTable         reqItemJournalTable;
        ReqItemJournalTrans         reqItemJournalTrans;

        JournalTableData            journalTableData =  JournalTableData::newTable(ReqItemJournalTable::find(journalId,true));
        JournalTransData            journalTransData =  journalTableData.journalStatic().newJournalTransData(reqItemJournalTrans,journalTableData);

        InventTable                 inventTable;
        ReqItemTable                reqItemTable;

        InventDimId                 inventDimId;
        InventDim                   inventDim;
        InventDimParm               covInventDimParm;

        Map                         mapQueryCovDimId;
        Map                         mapDemandPerMonth;

        Query                       queryInventTrans;
        QueryRun                    queryRunInventTrans;

        int                         numOfMonths = ReqItemJournalCreate::numOfMonth(transDateFrom,transDateTo);
        InventDimGroupSetup         inventDimGroupSetup;

        setPrefix(ReqItemJournalCreate::description());
        this.progressInit("@SYS5058", SysQuery::countLoops(queryRun), #AviUpdate);

        mapQueryCovDimId = new Map(Types::String, Types::Class);

        while (queryRun.next())
        {
            inventTable = queryRun.get(tableNum(InventTable));
            progress.setText(inventTable.ItemId,1);
            progress.incCount();

            inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
            //Finds coverage dimensions with has issues
            if (! mapQueryCovDimId.exists(inventDimGroupSetup.hashString()))
            {
                covInventDimParm.initCovPrDimension(inventDimGroupSetup);
                mapQueryCovDimId.insert(inventDimGroupSetup.hashString(), this.newQueryInventTransIssue(covInventDimParm));
            }

            queryInventTrans = mapQueryCovDimId.lookup(inventDimGroupSetup.hashString());

            queryInventTrans.dataSourceTable(tableNum(InventTrans)).findRange(fieldNum(InventTrans,ItemId)).value(queryValue(inventTable.ItemId));
            queryRunInventTrans = new SysQueryRun(queryInventTrans);

            // journal lines are created for each coverage dimension which has issues in the specified period
            while (queryRunInventTrans.next())
            {
                inventDim   = queryRunInventTrans.get(tableNum(InventDim));
                inventDimId = InventDim::findOrCreate(inventDim).InventDimId;

                reqItemJournalTrans.clear();
                reqItemJournalTrans.JournalId = journalId;
                reqItemJournalTrans.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                reqItemJournalTrans.ItemId = inventTable.ItemId;
                reqItemJournalTrans.initFromInventTable();
                reqItemJournalTrans.InventDimId = inventDimId;

                if (calcStdDeviation)
                {
                    // start by finding demand per month
                    mapDemandPerMonth = this.calcDemandPerMonth(transDateFrom,transDateTo,inventTable.ItemId,inventDim);

                    // calc average demand per month
                    reqItemJournalTrans.InventQtyAvgIssueMonth = this.calcAvgDemandPerMonth(mapDemandPerMonth);

                    // calc standard deviation
                    reqItemJournalTrans.StdDeviationIssueMonth = this.calcStdDeviationPerMonth(mapDemandPerMonth,reqItemJournalTrans.InventQtyAvgIssueMonth);
                }
                else
                {
                    reqItemJournalTrans.InventQtyAvgIssueMonth = this.calcAvgDemandPerMonth(null,this.calcDemandPeriod(inventTable.ItemId,inventDim,transDateFrom,transDateTo));
                }
                journalTransData.create();
            }

            //Extra journal lines are added in case no issues exist for the coverage dimension, but a reqItemTable record exist
            while select ItemId, CovInventDimId from reqItemTable
                where    reqItemTable.ItemId == inventTable.ItemId
                      && reqItemTable.MinInventOnhand > 0
            {
                if (! ReqItemJournalTrans::exist(journalId,reqItemTable.ItemId,reqItemTable.CovInventDimId))
                {
                    reqItemJournalTrans.clear();
                    reqItemJournalTrans.JournalId = journalId;
                    reqItemJournalTrans.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    reqItemJournalTrans.ItemId = reqItemTable.ItemId;
                    reqItemJournalTrans.InventDimId = reqItemTable.CovInventDimId;

                    journalTransData.create();
                }
            }
        }
        reqItemJournalTable = journalTableData.journalTable();
        reqItemJournalTable.IssuesFromDate = transDateFrom;
        reqItemJournalTable.IssuesToDate = transDateTo;
        reqItemJournalTable.CalcStdDeviation = calcStdDeviation;
        journalTableData.journalTable().update();

        this.endUpdate(journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        DialogRunbase   dialog = this.dialogInternal(_dialog, _forceOnClient);
        DialogGroup     dlgGroupJournal, dlgGroupPeriod;

        dlgGroupJournal = dialog.addGroup();
        dlgGroupJournal.caption("@SYS6790");

        dlgJournalId     = dialog.addFieldValue(extendedTypeStr(JournalId),journalId);
        dlgJournalId.active(false);

        dlgGroupPeriod = dialog.addGroup();
        dlgGroupPeriod.caption("@SYS74421");

        dlgTransDateFrom = dialog.addFieldValue(extendedTypeStr(TransDate),transDateFrom,"@SYS5209","@SYS74464");
        dlgTransDateTo   = dialog.addFieldValue(extendedTypeStr(TransDate),transDateTo,"@SYS14656","@SYS74465");

        dlgCalcStdDeviation = dialog.addFieldValue(enumStr(NoYes),calcStdDeviation,"@SYS74462",strFmt("@SYS74463","@SYS74462"));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        journalId               = dlgJournalId.value();
        transDateFrom           = dateStartMth(dlgTransDateFrom.value());
        transDateTo             = endmth(dlgTransDateTo.value());

        calcStdDeviation        = dlgCalcStdDeviation.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedNumOfLines</Name>
				<Source><![CDATA[
    boolean hasChangedNumOfLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustLoadSaveQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the last query must be loaded and saved when you leave the form.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method is called from the <c>SysQueryForm</c> form.
    /// </remarks>
    public boolean mustLoadSaveQuery()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQueryInventTransIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a query to find used coverage dimensions for an item.
    /// </summary>
    /// <param name="_inventDimParm">
    ///    An <c>InventDimParm</c> record that is initialized according to coverage dimensions.
    /// </param>
    /// <returns>
    ///    A query object.
    /// </returns>
    /// <remarks>
    ///    The query is used to identify coverage dimensions.
    /// </remarks>
    protected Query newQueryInventTransIssue(InventDimParm _inventDimParm)
    {
        QueryBuildDataSource    qbsTrans;
        QueryBuildDataSource    qbsDim;
        QueryBuildDataSource    qbsLocation;
        Query                   query;

        #query

        query = new Query();

        qbsTrans    = query.addDataSource(tableNum(InventTrans));

        qbsTrans.addRange(fieldNum(InventTrans,ItemId));
        qbsTrans.addRange(fieldNum(InventTrans,DatePhysical)).value(queryValue(transDateFrom)+'..'+queryValue(transDateTo));
        qbsTrans.addRange(fieldNum(InventTrans,StatusReceipt)).value(queryValue(StatusReceipt::None));
        qbsTrans.addRange(fieldNum(InventTrans,StatusIssue)).value(queryValue(StatusIssue::Sold)+'..'+queryValue(StatusIssue::Deducted));
        qbsTrans.addRange(fieldNum(InventTrans,InvoiceReturned)).value(queryValue(NoYes::No));
        qbsTrans.addRange(fieldNum(InventTrans,PackingSlipReturned)).value(queryValue(NoYes::No));

        qbsTrans.addSortField(fieldNum(InventTrans,ItemId));
        qbsTrans.orderMode(OrderMode::GroupBy);
        qbsTrans.addSortIndex(indexNum(InventTrans,ItemIdx));
        qbsTrans.indexIsHint(true);

        // InventDim
        qbsDim      = qbsTrans.addDataSource(tableNum(InventDim));
        qbsDim.joinMode(JoinMode::InnerJoin);
        qbsDim.relations(true);
        _inventDimParm.queryAddSortField(qbsDim);
        qbsDim.addSortIndex(indexNum(InventDim,DimIdIdx));
        qbsDim.indexIsHint(true);

        // inventLocation
        qbsLocation = qbsDim.addDataSource(tableNum(InventLocation));
        qbsLocation.joinMode(JoinMode::InnerJoin);
        qbsLocation.relations(true);
        qbsLocation.addRange(fieldNum(InventLocation,Manual)).value(queryValue(NoYes::No));

        query.literals(#queryForcePlaceholders);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcStdDeviation</Name>
				<Source><![CDATA[
    public NoYes parmCalcStdDeviation(NoYes _calcStdDeviation = calcStdDeviation)
    {
        calcStdDeviation = _calcStdDeviation;

        return calcStdDeviation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    QueryRun parmQuery(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDateFrom</Name>
				<Source><![CDATA[
    public TransDate parmTransDateFrom(TransDate _transDateFrom = transDateFrom)
    {
        transDateFrom = _transDateFrom;

        return transDateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDateTo</Name>
				<Source><![CDATA[
    public TransDate parmTransDateTo(TransDate _transDateTo = transDateTo)
    {
        transDateTo = _transDateTo;

        return transDateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Instead
    ///    do it in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c>
    ///    method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validate(this))
            throw(error("@SYS18447"));

        reqItemJournalCreateCalcDemandPeriodFlight = ReqItemJournalCreateCalcDemandPeriodFlight::instance().isEnabled();

        try
        {
            ttsbegin;

            this.createLines();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container   packedQuery;
        Version     version = RunBase::getVersion(packedClass);

        #localmacro.Version2List
            journalId,
            transDateFrom,
            transDateTo,
            calcStdDeviation
        #endmacro

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;

                if (packedQuery)
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
                break;

            case 2:
                [version,#Version2List,packedQuery] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (calcStdDeviation)
        {
            if ( ret && ReqItemJournalCreate::numOfMonth(transDateFrom,transDateTo) <=2 )
            {
                ret = checkFailed(  strFmt("@SYS74460",
                                    date2StrUsr(transDateFrom,  DateFlags::FormatAll),
                                    date2StrUsr(transDateTo,    DateFlags::FormatAll)));
            }
        }

        if ( transDateFrom >= transDateTo )
        {
            ret = checkFailed(strFmt("@SYS55013",
                                    date2StrUsr(transDateFrom,  DateFlags::FormatAll),
                                    date2StrUsr(transDateTo,    DateFlags::FormatAll)));
        }

        if (ReqItemJournalCreate::numOfMonth(transDateTo,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) <=1)
        {
            ret = checkFailed(strFmt("@SYS74461","@SYS14656"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>argsJournalId</Name>
				<Source><![CDATA[
    static JournalId argsJournalId(Args _args)
    {
        fieldId     id;
        JournalId   journalId;
        FormRun     callerForm;

        if (_args && _args.caller() && _args.dataset() )
        {
            id = fieldName2id(_args.dataset(),fieldStr(ReqItemJournalTrans,JournalId));

            if (id)
                journalId = _args.record().(id);

            callerForm = _args.caller();

            if (!journalId)
            {
                if (callerForm && callerForm.args() && callerForm.args().record() && callerForm.args().record().TableId)
                {
                    id = fieldName2id(callerForm.args().record().TableId,fieldStr(ReqItemJournalTable,JournalId));

                    if (id)
                        journalId = callerForm.args().record().(id);
                }
            }
        }

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS74296";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ReqItemJournalCreate    journalCreate;
        JournalForm             journalForm;

        journalForm   = JournalForm::fromArgs(args);
        journalCreate = ReqItemJournalCreate::newFromForm(args,journalForm);

        journalForm.runbaseMainStart();

        if (!journalCreate.prompt())
        {
            if (! journalCreate.batchInfo().parmBatchExecute())
            {
                journalForm.runbaseMainCancel(journalCreate.parmJournalId());
            }
            return;
        }

        try
        {
            journalCreate.runOperation();
            journalForm.runbaseMainEnd(journalCreate,false);
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(journalCreate,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for constructing an object of <c>ReqItemJournalCreate</c> or one of its subclasses.
    /// </summary>
    /// <param name = "_journalForm">The <c>JournalForm</c> object used to create a new <c>ReqItemJournalCreate</c>.</param>
    /// <param name = "_args">The <c>JournalForm</c> Args.</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where an object of <c>ReqItemJournalCreate</c> or one of its subclasses can be returned.</param>
    static delegate void newFromFormDelegate(
        JournalForm         _journalForm,
        Args                _args,
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    static ReqItemJournalCreate newFromForm(Args _args,JournalForm _journalForm)
    {
        ReqItemJournalTable journalTable = _journalForm.journalTableData().journalTable();
        switch (journalTable.JournalType)
        {
            case ReqItemJournalType::SafetyStock :
                return  ReqItemJournalCreate::newJournalCreate(_args);

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                ReqItemJournalCreate::newFromFormDelegate(_journalForm, _args, result);
                
                if (result.hasResult())
                {
                    return result.result() as ReqItemJournalCreate;
                }
                throw error(strFmt("@SYS23455",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCreate</Name>
				<Source><![CDATA[
    static ReqItemJournalCreate newJournalCreate(Args _args)
    {
        ReqItemJournalCreate        reqItemJournalCreate;

        reqItemJournalCreate = new ReqItemJournalCreate();

        if (! reqItemJournalCreate.parmQuery())
            reqItemJournalCreate.parmQuery(new SysQueryRun(queryStr(ReqItemJournalCreate)));

        reqItemJournalCreate.getLast();
        reqItemJournalCreate.parmJournalId(ReqItemJournalCreate::argsJournalId(_args));
        reqItemJournalCreate.parmTransDateFrom(prevYr(dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))));
        reqItemJournalCreate.parmTransDateTo(endmth(prevMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))));

        return reqItemJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfMonth</Name>
				<Source><![CDATA[
    public static int numOfMonth(TransDate _fromDate, TransDate _toDate)
    {
        #timeConstants

        return (year(_toDate)-year(_fromDate))*#monthsPerYear + mthOfYr(_toDate) - mthOfYr(_fromDate) +1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>