<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQTableMap2LineUpdatePrompt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchRFQTableMap2LineUpdatePrompt</c> class shows the prompt message box when the header
///    field is changed and new values should be copied to the lines.
/// </summary>
class PurchRFQTableMap2LineUpdatePrompt extends RunBase
{
    DialogRunbase       dialog;
    PurchRFQTableMap    purchRFQTableMap;
    List                purchRFQTableMap2LineUpdateFields;
    Map                 fieldList;
    container           packedFieldList;
    container           packedPreviousAnswers;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        packedFieldList,
        packedPreviousAnswers
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    void closeCancel()
    {
        FormRun formRun;
        formRun = dialog.formRun();
        formRun.closeCancel();
        formRun.notify();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        #resource
        PurchRFQTableMap2LineField  purchRFQTableMap2LineField;
        ListEnumerator              purchRFQTableMap2LineUpdateFieldsEnumerator;
        DialogGroup                 mainDialogGroup;
        DialogGroup                 dialogGroup;
        DialogField                 dialogField;
        if (!purchRFQTableMap2LineUpdateFields.elements() || (this.fieldsToPromptFor() == 0))
            return dialog;

        dialog = super();

        dialog.formBuildDesign().windowType(FormWindowType::PopUp);

        purchRFQTableMap2LineUpdateFieldsEnumerator = purchRFQTableMap2LineUpdateFields.getEnumerator();

        fieldList   = new Map(Types::Integer, Types::Class);

        mainDialogGroup = dialog.addGroup('1');
        mainDialogGroup.columns(1);
        mainDialogGroup.frameType(FormFrameType::None);

        dialogGroup = dialog.addGroup('1.1', mainDialogGroup);
        dialogGroup.columns(2);
        dialogGroup.frameType(FormFrameType::None);
        dialogGroup.formBuildGroup().widthMode(FormWidth::ColumnWidth);

        dialog.addInfoImage();

        dialog.addText("@SYS62845");

        dialogGroup = dialog.addGroup('1.2', mainDialogGroup);
        dialogGroup.columns(this.dialogColumns());
        dialogGroup.frameType(FormFrameType::None);

        while (purchRFQTableMap2LineUpdateFieldsEnumerator.moveNext())
        {
            purchRFQTableMap2LineField = purchRFQTableMap2LineUpdateFieldsEnumerator.current();

            if (purchRFQTableMap2LineField.table2LineUpdate() == TradeTable2LineUpdate::Prompt)
            {
                dialog.addGroup(purchRFQTableMap2LineField.fieldGroupLabel(), dialogGroup);

                dialogField = dialog.addField(enumStr(NoYes),
                                              purchRFQTableMap2LineField.questionLabel(),
                                              purchRFQTableMap2LineField.questionHelp());
                dialogField.value(purchRFQTableMap2LineField.updatePurchRFQLines());
                fieldList.insert(purchRFQTableMap2LineField.fieldId(), dialogField);
            }
        }

        dialog.form().design().alwaysOnTop(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogColumns</Name>
				<Source><![CDATA[
    int dialogColumns()
    {
        return real2int(trunc(power(this.fieldsToPromptFor(), 0.5)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsToPromptFor</Name>
				<Source><![CDATA[
    Counter fieldsToPromptFor()
    {
        Counter                     fieldsToPromptFor = 0;
        PurchRFQTableMap2LineField  purchRFQTableMap2LineField;
        ListEnumerator              purchRFQTableMap2LineUpdateFieldsEnumerator;

        purchRFQTableMap2LineUpdateFieldsEnumerator = purchRFQTableMap2LineUpdateFields.getEnumerator();

        while (purchRFQTableMap2LineUpdateFieldsEnumerator.moveNext())
        {
            purchRFQTableMap2LineField = purchRFQTableMap2LineUpdateFieldsEnumerator.current();

            if (purchRFQTableMap2LineField.table2LineUpdate() == TradeTable2LineUpdate::Prompt)
            {
                fieldsToPromptFor++;
            }
        }

        return fieldsToPromptFor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsToUpdate</Name>
				<Source><![CDATA[
    boolean fieldsToUpdate()
    {
        boolean                     fieldsToUpdate = false;
        ListEnumerator              purchRFQTableMap2LineUpdateFieldsEnumerator;
        PurchRFQTableMap2LineField  purchRFQTableMap2LineField;

        purchRFQTableMap2LineUpdateFieldsEnumerator = purchRFQTableMap2LineUpdateFields.getEnumerator();

        while (purchRFQTableMap2LineUpdateFieldsEnumerator.moveNext())
        {
            purchRFQTableMap2LineField = purchRFQTableMap2LineUpdateFieldsEnumerator.current();

            if (purchRFQTableMap2LineField.updatePurchRFQLines())
            {
                fieldsToUpdate = true;
                break;
            }
        }

        return fieldsToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ListEnumerator              purchRFQTableMap2LineUpdateFieldsEnumerator;
        PurchRFQTableMap2LineField  purchRFQTableMap2LineField;
        DialogField                 dialogField;
        purchRFQTableMap2LineUpdateFieldsEnumerator = purchRFQTableMap2LineUpdateFields.getEnumerator();

        while (purchRFQTableMap2LineUpdateFieldsEnumerator.moveNext())
        {
            purchRFQTableMap2LineField = purchRFQTableMap2LineUpdateFieldsEnumerator.current();

            if (fieldList.exists(purchRFQTableMap2LineField.fieldId()))
            {
                dialogField = fieldList.lookup(purchRFQTableMap2LineField.fieldId());

                purchRFQTableMap2LineField.updatePurchRFQLines(dialogField.value());
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchRFQTableMap2LineUpdateFields</Name>
				<Source><![CDATA[
    void initPurchRFQTableMap2LineUpdateFields()
    {
        SysDictField                sysDictField;
        SysDictField                sysDictFieldArray;
        PurchRFQTableMap2LineField  purchRFQTableMap2LineField;
        container                   header2LineFieldIds;
        fieldId                     fieldId;
        int                         pos;
        int                         array;
        boolean                     fieldChanged;
        PurchRFQTableMap2LineUpdate purchRFQTableMap2LineUpdate;

        purchRFQTableMap2LineUpdateFields = new List(Types::Class);

        if (!this.lines2Update())
            return;

        header2LineFieldIds = PurchRFQTableMap2LineParameters::header2LineFieldIdList();
        purchRFQTableMap2LineUpdate = PurchRFQTableMap2LineUpdate::create(this);

        for (pos = 1 ; pos <= conlen(header2LineFieldIds); pos++)
        {
            fieldId = conpeek(header2LineFieldIds, pos);

            // If the current field is expiry date, and the rfq is sealed then we don't want to show the prompt because a different one will be shown.
            if (fieldId == fieldNum(purchRFQTableMap, ExpiryDateTime)
                && purchRFQTableMap.TableId == tableNum(PurchRFQCaseTable)
                && purchRFQTableMap.IsSealed == NoYes::Yes)
            {
                continue;
            }

            if (purchRFQTableMap2LineUpdate.getFieldIdFromMappedTable(fieldId) && PurchRFQTableMap2LineParameters::fieldEnabled(fieldId))
            {
                purchRFQTableMap2LineField = PurchRFQTableMap2LineField::construct(fieldId);

                if (purchRFQTableMap2LineField.table2LineUpdate() != TradeTable2LineUpdate::Never)
                {
                    fieldChanged = false;

                    sysDictField = new SysDictField(tablenum(PurchRFQTableMap), fieldId);

                    for (array = 1; array <= sysDictField.arraySize(); array++)
                    {
                        sysDictFieldArray = new SysDictField(sysDictField.tableid(), sysDictField.id(), array);
                        if (purchRFQTableMap.(sysDictFieldArray.id()) != purchRFQTableMap.orig().(sysDictFieldArray.id()))
                        {
                            fieldChanged = true;
                        }
                    }

                    if (fieldId == fieldnum(PurchRFQTableMap,InventLocationId))
                    {
                        if (purchRFQTableMap.InventSiteId != purchRFQTableMap.orig().InventSiteId)
                        {
                            fieldChanged = true;
                        }
                    }

                    if (fieldChanged)
                    {
                        if (purchRFQTableMap2LineField.table2LineUpdate() == TradeTable2LineUpdate::Always)
                        {
                            purchRFQTableMap2LineField.updatePurchRFQLines(NoYes::Yes);
                        }

                        purchRFQTableMap2LineUpdateFields.addEnd(purchRFQTableMap2LineField);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lines2Update</Name>
				<Source><![CDATA[
    boolean lines2Update()
    {
        return purchRFQTableMap.existLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        packedFieldList = this.packedPurchRFQTableMap2LineUpdateFields();
        this.packPreviousAnswers();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedPurchRFQTableMap2LineUpdateFields</Name>
				<Source><![CDATA[
    container packedPurchRFQTableMap2LineUpdateFields()
    {
        return purchRFQTableMap2LineUpdateFields.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPreviousAnswers</Name>
				<Source><![CDATA[
    protected void packPreviousAnswers()
    {
        Map                         previousAnswers = new Map(Types::Integer, Types::Enum);
        ListEnumerator              purchRFQTableMap2LineUpdateFieldsEnumerator;
        PurchRFQTableMap2LineField purchRFQTableMap2LineField;
        purchRFQTableMap2LineUpdateFieldsEnumerator = purchRFQTableMap2LineUpdateFields.getEnumerator();

        while (purchRFQTableMap2LineUpdateFieldsEnumerator.moveNext())
        {
            purchRFQTableMap2LineField = purchRFQTableMap2LineUpdateFieldsEnumerator.current();

            if (previousAnswers.exists(purchRFQTableMap2LineField.fieldId()))
            {
                previousAnswers.remove(purchRFQTableMap2LineField.fieldId());
            }
            previousAnswers.insert(purchRFQTableMap2LineField.fieldId(), purchRFQTableMap2LineField.updatePurchRFQLines());
        }

        packedPreviousAnswers = previousAnswers.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQTableMap</Name>
				<Source><![CDATA[
    public PurchRFQTableMap purchRFQTableMap(PurchRFQTableMap _purchRFQTableMap = null)
    {
        if (_purchRFQTableMap)
        {
            purchRFQTableMap = _purchRFQTableMap;
            this.initPurchRFQTableMap2LineUpdateFields();
        }
        return purchRFQTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        PurchRFQTableMap2LineUpdate    purchRFQTableMap2LineUpdate;
        if (!this.fieldsToUpdate())
            return;

        purchRFQTableMap2LineUpdate = PurchRFQTableMap2LineUpdate::create(this);
        purchRFQTableMap2LineUpdate.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                //When moving data from server to client, we need to copy all purchRFQTableMap2LineUpdateFields list,
                //because dialog() is using it. Otherwise, it is better to move only checkbox results in order not
                //to overwrite changed settings in PurchRFQTableMap2LineUpdateField fields
                if (!purchRFQTableMap2LineUpdateFields)
                {
                    purchRFQTableMap2LineUpdateFields = List::create(packedFieldList);
                }
                else
                {
                    this.unpackPreviousAnswers();
                }
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackPreviousAnswers</Name>
				<Source><![CDATA[
    protected void unpackPreviousAnswers()
    {
        Map                         previousAnswers;
        ListEnumerator              purchRFQTableMap2LineUpdateFieldsEnumerator;
        PurchRFQTableMap2LineField purchRFQTableMap2LineField;
        purchRFQTableMap2LineUpdateFieldsEnumerator  = purchRFQTableMap2LineUpdateFields.getEnumerator();
        previousAnswers                               = (packedPreviousAnswers) ? Map::create(packedPreviousAnswers) : null;

        while (purchRFQTableMap2LineUpdateFieldsEnumerator.moveNext())
        {
            purchRFQTableMap2LineField = purchRFQTableMap2LineUpdateFieldsEnumerator.current();

            if (purchRFQTableMap2LineField.table2LineUpdate() == TradeTable2LineUpdate::Prompt)
            {
                if (previousAnswers && previousAnswers.exists(purchRFQTableMap2LineField.fieldId()))
                {
                    purchRFQTableMap2LineField.updatePurchRFQLines(previousAnswers.lookup(purchRFQTableMap2LineField.fieldId()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQTableMap2LineUpdatePrompt construct()
    {
        PurchRFQTableMap2LineUpdatePrompt purchRFQTableMap2LineUpdatePrompt;

        purchRFQTableMap2LineUpdatePrompt = new PurchRFQTableMap2LineUpdatePrompt();
        return purchRFQTableMap2LineUpdatePrompt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS103602";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>