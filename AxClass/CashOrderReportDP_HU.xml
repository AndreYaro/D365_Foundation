<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashOrderReportDP_HU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CashOrderReportDP_HU</c> class extends the base class to add Hungary specific functionality
///     for the Hungarian cash order report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CashOrder)),
    SRSReportParameterAttribute(classstr(CashOrderReportContract_HU))
]
class CashOrderReportDP_HU extends CashOrderReportDP
{
    LedgerJournalTrans_RCash    ledgerJournalTrans_RCash;
    LedgerJournalTrans          ledgerJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTmpTransactions</Name>
				<Source><![CDATA[
    protected void createTmpTransactions(QueryRun _queryRun)
    {
        ledgerJournalTrans = _queryRun.get(tableNum(ledgerJournalTrans));
        super(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountInWords</Name>
				<Source><![CDATA[
    protected TempStr getAmountInWords()
    {
        RNumDateInWordConverter dateInWordConverter = RNumDateInWordConverter::construct(currentUserLanguage());
        if (cashTrans.Posted)
        {
            return dateInWordConverter.numeralsToTxt(abs(cashTrans.AmountCur));
        }
        else
        {
            return dateInWordConverter.numeralsToTxt(abs(cashTrans.AmountCur) + ledgerJournalTrans_RCash.RoundOffCashAmount_HU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetRoundingAccountId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the main account to be displayed for rounding transaction.
    /// </summary>
    /// <returns>
    ///     Main account number.
    /// </returns>
    /// <remarks>
    ///     The rounding account information is first looked up in the posted transactions
    ///     and if not found, the value specified in cash posting profile is returned.
    /// </remarks>
    protected MainAccountNum getOffsetRoundingAccountId()
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        LedgerDimensionAccount              OffsetRoundingDimension;
        LedgerDimensionAccount              cashLedgerDimension;

        if (cashTrans.Posted)
        {
            select firstOnly LedgerDimension from generalJournalAccountEntry
                    where generalJournalAccountEntry.PostingType == LedgerPostingType::RCash
            exists join generalJournalEntry
                where generalJournalEntry.RecId   == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry  == generalJournalEntry.RecId
                    && subledgerVoucherGeneralJournalEntry.Voucher             == cashTrans.Voucher
                    && subledgerVoucherGeneralJournalEntry.AccountingDate      == cashTrans.TransDate;

            cashLedgerDimension = generalJournalAccountEntry.LedgerDimension;

            select firstOnly LedgerDimension from generalJournalAccountEntry
                    where (generalJournalAccountEntry.accountingCurrencyAmount      == ledgerJournalTrans_RCash.RoundOffCashAmount_HU
                            || generalJournalAccountEntry.accountingCurrencyAmount  == -ledgerJournalTrans_RCash.RoundOffCashAmount_HU)
                       && generalJournalAccountEntry.LedgerDimension != cashLedgerDimension
                exists join generalJournalEntry
                    where generalJournalEntry.RecId  == generalJournalAccountEntry.GeneralJournalEntry
                       && generalJournalEntry.Ledger == Ledger::current()
                exists join subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
                       && subledgerVoucherGeneralJournalEntry.Voucher             == cashTrans.Voucher
                       && subledgerVoucherGeneralJournalEntry.AccountingDate      == cashTrans.TransDate;

            OffsetRoundingDimension = generalJournalAccountEntry.LedgerDimension;
        }

        if (!OffsetRoundingDimension)
        {
            OffsetRoundingDimension = RCashLedgerAccount::roundOffLedgerDimension(ledgerJournalTrans.parmAccount(), ledgerJournalTrans.PostingProfile);
        }

        return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(OffsetRoundingDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    protected Query getQuery()
    {
        Query ret = super();

        ret.dataSourceTable(tableNum(LedgerJournalTrans)).enabled(true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashOrderHeaderTmp</Name>
				<Source><![CDATA[
    protected CashOrderHeaderTmp initializeCashOrderHeaderTmp()
    {
        CashOrderHeaderTmp          cashOrderHeaderLocal = super();
        CashOrderReportContract_HU  contract = this.parmDataContract() as CashOrderReportContract_HU;

        cashOrderHeaderLocal.PrintSetupOriginalCopy = contract.parmPrintSetupOriginalCopy();

        return cashOrderHeaderLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashOrderLinesTmp</Name>
				<Source><![CDATA[
    protected CashOrderLinesTmp initializeCashOrderLinesTmp()
    {
        CashOrderLinesTmp cashOrderLinesLocal = super();

        select firstonly RoundOffCashAmount_HU from ledgerJournalTrans_RCash
            where ledgerJournalTrans_RCash.RefRecId == ledgerJournalTrans.RecId;

        cashOrderLinesLocal.RoundOffCashAmount_HU = ledgerJournalTrans_RCash.RoundOffCashAmount_HU;

        if (ledgerJournalTrans_RCash.RoundOffCashAmount_HU)
        {
            cashOrderLinesLocal.OffsetRoundingAccountId_HU = this.getOffsetRoundingAccountId();
        }
        cashOrderLinesLocal.JournalNum      = ledgerJournalTrans.JournalNum;
        cashOrderLinesLocal.CashierName     = HcmWorker::find(HcmWorkerLookup::currentWorker()).name();
        cashOrderLinesLocal.AmountCur       = this.adjustAmountCur(cashOrderLinesLocal);
        cashOrderLinesLocal.AmountInWords   = this.getAmountInWords();
        cashOrderLinesLocal.DocumentDate    = ledgerJournalTrans.DocumentDate;
        cashOrderLinesLocal.ExchRate        = ledgerJournalTrans.ExchRate;
        cashOrderLines.OffsetMainAccountId  = cashTrans.offsetAccountNum();
        return cashOrderLinesLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAmountCur</Name>
				<Source><![CDATA[
    private AmountCur adjustAmountCur(CashOrderLinesTmp _cashOrderLinesLocal)
    {
        if (cashTrans.Posted)
        {
            if (cashTrans.AmountCur >= 0)
            {
                return cashTrans.AmountCur - _cashOrderLinesLocal.RoundOffCashAmount_HU;
            }
            else
            {
                return abs(cashTrans.AmountCur + _cashOrderLinesLocal.RoundOffCashAmount_HU);
            }
        }
        else
        {
            return _cashOrderLinesLocal.AmountCur;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>