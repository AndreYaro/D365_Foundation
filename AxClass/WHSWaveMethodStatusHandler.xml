<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveMethodStatusHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>WHSWaveMethodStatusHandler</c> is responsible for creating, updating wave method status record.
/// </summary>
public class WHSWaveMethodStatusHandler
{
    private const int           UpdateFrequencyInMs = 2000; // 2 second * 1000
    
    private WHSWaveMethodStatus waveMethodStatus;
    private int64               lastUpdated;
    private int                 executedSteps;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSWaveMethodStatusHandler construct()
    {
        return new WHSWaveMethodStatusHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWaveMethodStatusHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSWaveMethodStatusHandler</c>.
    /// </summary>
    /// <param name = "_waveId">
    /// The wave ID that the method status is created or updated for.
    /// </param>
    /// <param name = "_postMethodName">
    /// The method name.
    /// </param>
    /// <param name = "_totalSteps">
    /// The number of total steps.
    /// </param>
    /// <param name = "_parentRecId">
    /// The parent record ID.
    /// </param>
    public static WHSWaveMethodStatusHandler newWaveMethodStatusHandler(
        WHSWaveId	               _waveId,
        WHSPostMethodName          _postMethodName,
        WHSTotalSteps              _totalSteps = 0,
        RefRecId                   _parentRecId = 0)
    {
        WHSWaveMethodStatusHandler waveMethodStatusHandler;

        if (WHSParameters::find().WaveProgressLog)
        {
            waveMethodStatusHandler = WHSWaveMethodStatusHandler::construct();

            WHSWaveMethodStatus waveMethodStatus = WHSWaveMethodStatus::find(_waveId, _postMethodName, _parentRecId);
            waveMethodStatus.WaveId = _waveId;
            waveMethodStatus.PostMethodName = _postMethodName;
            waveMethodStatus.TotalSteps = _totalSteps ? _totalSteps : waveMethodStatus.TotalSteps;
            waveMethodStatus.RefRecId = _parentRecId;

            waveMethodStatusHandler.parmWaveMethodStatus(waveMethodStatus);
        }

        return waveMethodStatusHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWaveMethodStatusHandlerByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSWaveMethodStatusHandler</c> based on wave method status record ID.
    /// </summary>
    /// <param name = "_waveMethodStatusRecId">
    /// The record ID of wave method status to update.
    /// </param>
    public static WHSWaveMethodStatusHandler newWaveMethodStatusHandlerByRecId(RecId _waveMethodStatusRecId)
    {
        WHSWaveMethodStatusHandler waveMethodStatusHandler;

        if (WHSParameters::find().WaveProgressLog && _waveMethodStatusRecId)
        {
            waveMethodStatusHandler = WHSWaveMethodStatusHandler::construct();

            WHSWaveMethodStatus waveMethodStatus = WHSWaveMethodStatus::findByRecId(_waveMethodStatusRecId);

            waveMethodStatusHandler.parmWaveMethodStatus(waveMethodStatus);
        }

        return waveMethodStatusHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeOneStepForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds 1 to the number of executed steps of wave method status.
    /// </summary>
    /// <param name = "_waveMethodStatusHandler">
    /// The wave method status handler to update wave method status.
    /// </param>
    /// <param name = "_forceUpdate">
    /// True, if need update the wave method status immediately.
    /// </param>
    [Hookable(false)]
    public static void makeOneStepForward(WHSWaveMethodStatusHandler _waveMethodStatusHandler, boolean _forceUpdate = false)
    {
        if (_waveMethodStatusHandler)
        {
            _waveMethodStatusHandler.makeProgress(1, _forceUpdate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates executed steps of wave method status.
    /// </summary>
    /// <param name = "_steps">
    /// Steps to be added to execute steps of wave method status.
    /// </param>
    /// <param name = "_forceUpdate">
    /// True, if need update the wave method status immediately.
    /// </param>
    internal void makeProgress(int _steps, boolean _forceUpdate)
    {   
        if (waveMethodStatus)
        {
            executedSteps += _steps;

            if (_forceUpdate || this.currentTimeMillis() - lastUpdated >= UpdateFrequencyInMs)
            {
                waveMethodStatus = WHSWaveMethodStatus::makeProgress(waveMethodStatus.RecId, executedSteps);
                lastUpdated = this.currentTimeMillis();
                executedSteps = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWaveStepProgressToCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates wave method status to completed.
    /// </summary>
    public void updateWaveStepProgressToCompleted()
    {
        WHSWaveMethodStatus::createOrUpdateWaveMethodStatus(waveMethodStatus.WaveId,
                                                            waveMethodStatus.PostMethodName,
                                                            false,
                                                            waveMethodStatus.RefRecId,
                                                            waveMethodStatus.TotalSteps,
                                                            waveMethodStatus.TotalSteps);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWaveStepProgressToStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates wave method status with a started dateTime.
    /// </summary>
    public void updateWaveStepProgressToStarted()
    {
        waveMethodStatus = WHSWaveMethodStatus::createOrUpdateWaveMethodStatus(waveMethodStatus.WaveId,
                                                            waveMethodStatus.PostMethodName,
                                                            true,
                                                            waveMethodStatus.RefRecId,
                                                            0,
                                                            waveMethodStatus.TotalSteps,
                                                            DateTimeUtil::getSystemDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveMethodStatus</Name>
				<Source><![CDATA[
    public WHSWaveMethodStatus parmWaveMethodStatus(WHSWaveMethodStatus _waveMethodStatus = waveMethodStatus)
    {
        waveMethodStatus = _waveMethodStatus;

        return waveMethodStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveMethodStatusRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns RecId of wave method status record.
    /// </summary>
    /// <returns>
    /// The record Id of wave method status record.
    /// </returns>
    public RecId waveMethodStatusRecId()
    {
        return waveMethodStatus.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalSteps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates wave method status total steps with difference.
    /// </summary>
    /// <param name = "_diff">
    /// The value to add to total steps of wave method status.
    /// </param>
    public void addTotalSteps(int _diff)
    {
        if (waveMethodStatus)
        {
            waveMethodStatus = WHSWaveMethodStatus::createOrUpdateWaveMethodStatus(waveMethodStatus.WaveId,
                                                            waveMethodStatus.PostMethodName,
                                                            false,
                                                            waveMethodStatus.RefRecId,
                                                            waveMethodStatus.ExecutedSteps,
                                                            waveMethodStatus.TotalSteps + _diff);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalSteps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates wave method status total steps.
    /// </summary>
    /// <param name = "_totalSteps">
    /// The total steps to update.
    /// </param>
    public void setTotalSteps(int _totalSteps)
    {
        if (waveMethodStatus)
        {
            waveMethodStatus = WHSWaveMethodStatus::createOrUpdateWaveMethodStatus(waveMethodStatus.WaveId,
                                                            waveMethodStatus.PostMethodName,
                                                            false,
                                                            waveMethodStatus.RefRecId,
                                                            waveMethodStatus.ExecutedSteps,
                                                            _totalSteps);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentTimeMillis</Name>
				<Source><![CDATA[
    private int64 currentTimeMillis()
    {
        return WinAPIServer::getTickCount();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>