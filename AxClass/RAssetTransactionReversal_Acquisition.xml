<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransactionReversal_Acquisition</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetTransactionReversal_Acquisition extends RAssetTransactionReversal
{
    private InventUpd_Estimated estimated;
    private InventUpd_Financial financial;
    private boolean isInventTransSettled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret = super();

        if (ret
            && rAssetTable.VendInvoiceId)
        {
            PurchBookVATProcessLogTransOper_RU processLogTransOper;
            PurchBookVATProcessLogTrans_RU processLogTrans;

            if (rAssetTable.InventTransId)
            {
                select firstonly RecId from processLogTransOper
                    where processLogTransOper.Blocked == NoYes::No
                        && processLogTransOper.InventTransId == rAssetTable.InventTransId
                        && processLogTransOper.CanceledRefRecId == 0
                exists join processLogTrans
                    where processLogTrans.RecId == processLogTransOper.RefRecId
                        && processLogTrans.AccountName == rAssetTable.VendAccount
                        && processLogTrans.Reversed == NoYes::No;
            }
            else
            {
                VendTrans vendTrans;
                VendInvoiceJour vendInvoiceJour;

                select firstonly RecId from processLogTransOper
                    where processLogTransOper.Blocked == NoYes::No
                        && processLogTransOper.CanceledRefRecId == 0
                exists join processLogTrans
                    where processLogTrans.RecId == processLogTransOper.RefRecId
                        && processLogTrans.AccountName == rAssetTable.VendAccount
                        && processLogTrans.Reversed == NoYes::No
                exists join vendTrans
                    where vendTrans.RecId == processLogTrans.InvoiceRecIdRef
                        && vendTrans.Invoice == rAssetTable.VendInvoiceId
                exists join vendInvoiceJour
                    where vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
                        && vendInvoiceJour.InvoiceDate == vendTrans.TransDate
                        && vendInvoiceJour.InternalInvoiceId == rAssetTable.PurchInternalInvoiceId;
            }

            if (processLogTransOper.RecId)
            {
                ret = checkFailed("@GLS116992");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReversal</Name>
				<Source><![CDATA[
    protected void inventReversal()
    {
        if (rAssetStandards.AssetStandardId == rAssetParameters.StandardIdDefault)
        {
            if (this.needReverseAssembling())
            {
                this.reverseAssembling();
            }
            else
            {
                this.reversePurch();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needReverseAssembling</Name>
				<Source><![CDATA[
    private boolean needReverseAssembling()
    {
        RAssetScrap rAssetScrap;
        select firstonly RecId from rAssetScrap
            where rAssetScrap.AssetId == rAssetTrans.AccountNum
                && rAssetScrap.Voucher == rAssetTrans.Voucher
                && rAssetScrap.TransDate == rAssetTrans.TransDate
                && rAssetScrap.Assembling == NoYes::Yes;

        return rAssetScrap.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseAssembling</Name>
				<Source><![CDATA[
    private void reverseAssembling()
    {
        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;
        RAssetScrap rassetComponent;

        while select forupdate rassetComponent
            where rassetComponent.AssetId == rAssetTrans.AccountNum
                && rassetComponent.Assembling == NoYes::Yes
                && rassetComponent.Voucher == rAssetTrans.Voucher
                && rassetComponent.TransDate == rAssetTrans.TransDate
        join inventTransOrigin
            where inventTransOrigin.InventTransId == rassetComponent.InventTransId
        join inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                && inventTrans.StatusIssue == StatusIssue::Sold
                && inventTrans.StatusReceipt == StatusReceipt::None
        {
            RAssetScrap componentReverse;
            componentReverse.data(rassetComponent);
            componentReverse.TransDate = reversalDate;
            componentReverse.StornoRecId = rassetComponent.RecId;
            componentReverse.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
            componentReverse.Qty = -inventTrans.Qty;
            componentReverse.CostAmount = componentReverse.calcCostAmount(componentReverse.Qty);
    
            if (! isInventTransSettled)
            {
                isInventTransSettled = inventTrans.QtySettled ? true : false;
            }
    
            if (isInventTransSettled)
            {
                componentReverse.Qty = -componentReverse.Qty;
            }
            else
            {
                componentReverse.Assembling = NoYes::No;
            }
            componentReverse.insert();
    
            InventMov_Scrap_RU movement = InventMovement::construct(componentReverse);
            movement.cacheAccountOperations(rAssetTrans.OffsetLedgerDimension);
            estimated = InventUpd_Estimated::newInventMovement(movement);
            estimated.updateNow();
    
            if (isInventTransSettled)
            {
                financial = InventUpd_Financial::newPostAsset_RU(movement, ledgerVoucher, -inventTrans.costValue());
                financial.updateNow();
            }
            else
            {
                financial = InventUpd_Financial::newPostAsset_RU(movement, ledgerVoucher, -inventTrans.CostAmountPosted);
                financial.updateNow();
                InventTransOrigin::updateMarking(inventTransOrigin.RecId,
                    InventTransOriginRAssetScrap_RU::findInventTransOriginId(componentReverse.RecId),
                    inventTrans.Qty,
                    inventTrans.Voucher);

                InventTransOrigin::updateMarking(InventTransOriginRAssetScrap_RU::findInventTransOriginId(componentReverse.RecId),
                    inventTransOrigin.RecId,
                    -inventTrans.Qty,
                    inventTrans.Voucher);
            }
    
            movement  = null;
            financial = null;
    
            componentReverse.Qty = inventTrans.Qty;
            componentReverse.CostAmount = componentReverse.calcCostAmount(componentReverse.Qty);
            componentReverse.Assembling = NoYes::Yes;
            componentReverse.doUpdate();
    
            rassetComponent.StornoRecId = componentReverse.RecId;
            rassetComponent.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseLedgerVoucher</Name>
				<Source><![CDATA[
    protected void reverseLedgerVoucher()
    {
        if (isInventTransSettled)
        {
            LedgerUtils_RU::createLedgerTransStorno_RU(ledgerVoucherObject, rAssetTrans.getAccountingDate(), rAssetTrans.Voucher, null, LedgerPostingType::LedgerJournal);
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePurch</Name>
				<Source><![CDATA[
    private void reversePurch()
    {
        RAssetPurchTrans rAssetPurchTrans;
    
        select forupdate firstonly rAssetPurchTrans
            where rAssetPurchTrans.AssetId == rAssetTrans.AccountNum
                && rAssetPurchTrans.PurchTransType == RAssetPurchTransType::PurchaseLine
                && rAssetPurchTrans.TableTableId == tableNum(PurchLine)
                && rAssetPurchTrans.Acquisition == NoYes::Yes
                && rAssetPurchTrans.Posted == NoYes::Yes;
    
        if (rAssetPurchTrans.RecId)
        {
            InventMov_Asset_ru movement = InventMovement::construct(rAssetPurchTrans);
            movement.cacheAccountOperations(rAssetTrans.LedgerDimension);
            movement.transQty(1);
    
            if (rAssetTrans.OffsetLedgerDimension)
            {
                movement.cacheAccountBalanceSheet(rAssetTrans.OffsetLedgerDimension);
            }
    
            estimated = InventUpd_Estimated::newInventMovement(movement);
            estimated.updateNow();
    
            InventTransPosting inventTransPosting;
            select firstonly inventTransPosting
                where inventTransPosting.Voucher == rAssetTrans.Voucher
                    && inventTransPosting.TransDate == rAssetTrans.getAccountingDate()
                    && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial;
    
            financial = InventUpd_Financial::newPostAsset_RU(movement, ledgerVoucher, -inventTransPosting.postedValue());
            financial.updateNow();
    
            rAssetPurchTrans.Acquisition = NoYes::No;
            rAssetPurchTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    protected void updateStatus()
    {
        RAssetTrans rassetTransAcq;
        select firstonly RecId from rassetTransAcq
            order by TransDate desc
            where rassetTransAcq.AccountNum == rAssetTable.AccountNum
                && rassetTransAcq.AssetTransType == RAssetTransType::Acquisition
                && !rassetTransAcq.StornoRecId;

        if (!rassetTransAcq.RecId)
        {
            if (rAssetTable.VendInvoiceId)
            {
                rAssetTable.Status = RAssetStatus::PurchInvoice;
            }
            else
            {
                rAssetTable.Status = RAssetStatus::NoAcquisition;
            }
            rAssetTable.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypes</Name>
				<Source><![CDATA[
    protected container ledgerPostingTypes()
    {
        return isInventTransSettled ? [LedgerPostingType::LedgerJournal] : super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>