<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class TradeNonStockedConversionCheck
{
    TradeNonStockedConversion     tradeNonStockedConversion;
    TradeNonStockedConversionItem tradeNonStockedConversionItem;
    TradeNonStockedConversionLogWriter  tradeNonStockedConversionLogWriter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes all of the checks.
    /// </summary>
    /// <returns>
    ///    true if all of the checks pass; otherwise, false.
    /// </returns>
    abstract public boolean check()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReferenceCategoryToTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts an <c>InventTransType</c> element to a table ID.
    /// </summary>
    /// <param name="_referenceCategory">
    ///    An element in the <c>InventTransType</c> enumeration type.
    /// </param>
    /// <returns>
    ///    A table ID.
    /// </returns>
    protected RefTableId inventReferenceCategoryToTableId(InventTransType _referenceCategory)
    {
        switch (_referenceCategory)
        {
            case InventTransType::Blocking :
                return tablenum(InventBlocking);

            case InventTransType::Sales :
                return tablenum(SalesTable);

            case InventTransType::Purch :
                return tablenum(PurchTable);

            case InventTransType::ProdLine :
                return tablenum(ProdBOM);

            case InventTransType::Production :
                return tablenum(ProdTable);

            case InventTransType::QuarantineOrder :
                return tablenum(InventQuarantineOrder);

            case InventTransType::InventCounting :
                return tablenum(InventJournalTable);

            case InventTransType::InventLossProfit :
                return tablenum(InventJournalTable);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the issue type.
    /// </summary>
    /// <returns>
    ///    An element in the <c>TradeNonStockedConversionIssue</c> enumeration type.
    /// </returns>
    abstract protected TradeNonStockedConversionIssue issueType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversion</Name>
				<Source><![CDATA[
        public TradeNonStockedConversion parmTradeNonStockedConversion(TradeNonStockedConversion _tradeNonStockedConversion = tradeNonStockedConversion)
    {
        tradeNonStockedConversion = _tradeNonStockedConversion;
        return tradeNonStockedConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversionItem</Name>
				<Source><![CDATA[
        public TradeNonStockedConversionItem parmTradeNonStockedConversionItem(TradeNonStockedConversionItem _tradeNonStockedConversionItem = tradeNonStockedConversionItem)
    {
        tradeNonStockedConversionItem = _tradeNonStockedConversionItem;
        return tradeNonStockedConversionItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singleItemCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the check must be performed for all of the items or one item.
    /// </summary>
    /// <returns>
    ///    true if the check is performed for one item only; otherwise, false.
    /// </returns>
    protected boolean singleItemCheck()
    {
        return tradeNonStockedConversionItem.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a log record in the <c>TradeNonStockedConversionCheckLog</c> table.
    /// </summary>
    /// <param name="_tradeNonStockedConversionItem">
    ///   A <c>TradeNonStockedConversionItem</c> record.
    /// </param>
    /// <param name="_refTableId">
    ///   The ID of the related table.
    /// </param>
    /// <param name="_refFieldId">
    ///  The ID of the related field.
    /// </param>
    /// <param name="_identifyingAttributeValue">
    ///  The value of the related field.
    /// </param>
    /// <param name="_refParentTableId">
    ///  The ID of the related parent table; optional.
    /// </param>
    /// <param name="_parentIdentifyingAttributeValue">
    ///  The value of the related parent record; optional.
    /// </param>
    protected void writeLog(
        TradeNonStockedConversionItem               _tradeNonStockedConversionItem,
        RefTableId                                  _refTableId,
        fieldId                                     _refFieldId,
        TradeNonStockedIdentifyingAttributeValue    _identifyingAttributeValue,
        RefTableId                                  _refParentTableId = 0,
        TradeNonStockedIdentifyingAttributeValue    _parentIdentifyingAttributeValue = '')
    {
        if (!tradeNonStockedConversionLogWriter)
        {
            tradeNonStockedConversionLogWriter = TradeNonStockedConversionLogWriter::newLogWriter(_tradeNonStockedConversionItem);
        }
        else
        {
            tradeNonStockedConversionLogWriter.parmTradeNonStockedConversionItem(_tradeNonStockedConversionItem);
        }

        tradeNonStockedConversionLogWriter.writeCheckLog(this.issueType(),
                                                         _refTableId,
                                                         _refFieldId,
                                                         _identifyingAttributeValue,
                                                         _refParentTableId,
                                                         _parentIdentifyingAttributeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAll</Name>
				<Source><![CDATA[
        static boolean checkAll(
        TradeNonStockedConversion       _tradeNonStockedConversion,
        TradeNonStockedConversionItem   _tradeNonStockedConversionItem  = null)
    {
        boolean ok;

        ok = TradeNonStockedConversionCheckInvoiced::checkAll(_tradeNonStockedConversion, _tradeNonStockedConversionItem);
        ok = TradeNonStockedConversionCheckMarking::checkAll(_tradeNonStockedConversion, _tradeNonStockedConversionItem) && ok;
        ok = TradeNonStockedConversionCheckOpen::checkAll(_tradeNonStockedConversion, _tradeNonStockedConversionItem) && ok;
        ok = TradeNonStockedConversionCheckNotAllowed::checkAll(_tradeNonStockedConversion, _tradeNonStockedConversionItem) && ok;
        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>