<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayHRMPivotTableTemplateSave</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayHRMPivotTableTemplateSave extends RPayHRMPivotTableTemplateEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTemplateHeader</Name>
				<Source><![CDATA[
        private void createTemplateHeader()
    {
        ;
        pivotTableTemplate = RPayHRMPivotTableTemplate::find(pivotTemplateId, pivotTableType,true);

        if (! pivotTableTemplate)
        {
            pivotTableTemplate.clear();
            pivotTableTemplate.PivotTemplateId   = pivotTemplateId;
            pivotTableTemplate.PivotTemplateName = pivotTemplateName;
            pivotTableTemplate.PivotTableType    = pivotTableType;
            pivotTableTemplate.insert();
        }
        else
        {
            pivotTableTemplate.PivotTemplateName = pivotTemplateName;
            pivotTableTemplate.update();

            delete_from pivotTableTemplateItem
                where pivotTableTemplateItem.PivotTemplateId == pivotTemplateId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTemplateItem</Name>
				<Source><![CDATA[
        private void createTemplateItem(RPayHRMPivotItemNumber        _itemPositionNumber,
                                    RPayHRMPivotTableItemPosition _itemPosition,
                                    FieldName                     _itemName,
                                    boolean                       _subTotal = false,
                                    RPayHRMPivotItemTotalType     _itemTotalType = RPayHRMPivotItemTotalType::None,
                                    RPayHRMPivotItemExpression    _itemExpression = '')
    {
        ;
        pivotTableTemplateItem.clear();
        pivotTableTemplateItem.PivotTemplateId     = pivotTemplateId;
        pivotTableTemplateItem.PivotTableType      = pivotTableType;
        pivotTableTemplateItem.ItemPositionNumber  = _itemPositionNumber;
        pivotTableTemplateItem.ItemPosition        = _itemPosition;
        pivotTableTemplateItem.ItemName            = _itemName;
        pivotTableTemplateItem.SubTotal            = _subTotal;
        pivotTableTemplateItem.ItemTotalType       = _itemTotalType;
        pivotTableTemplateItem.PivotItemExpression = _itemExpression;
        pivotTableTemplateItem.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.caption("@SYS91539");

        dfPivotTemplateId   = dialog.addField(extendedTypeStr(RPayHRMPivotTemplateId));
        dfPivotTemplateName = dialog.addField(extendedTypeStr(RPayHRMPivotTemplateName));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            pivotTemplateId   = dfPivotTemplateId.value();
            pivotTemplateName = dfPivotTemplateName.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        ;
        super();

        ttsbegin;

        this.createTemplateHeader();
        this.saveRows();
        this.saveColumns();
        this.saveTotals();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveColumns</Name>
				<Source><![CDATA[
        private void saveColumns()
    {
        InteropPermission perm;
        int               lines = infologLine();

        COM               ptFieldSets;
        COM               ptFieldSet;
        int               itemCount;
        FieldName         itemName;
        int               i;
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            ptFieldSets = ptColAxis.fieldSets();
            itemCount = ptFieldSets.count();

            for (i=0; i < itemCount; i++)
            {
                ptFieldSet = ptFieldSets.item(i);
                itemName   = ptFieldSet.name();

                this.createTemplateItem(i+1,RPayHRMPivotTableItemPosition::Column,itemName);
            }
        }
        catch
        {
            infolog.clear(lines);
        }
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRows</Name>
				<Source><![CDATA[
        private void saveRows()
    {
        InteropPermission perm;
        int               lines = infologLine();

        COM               ptFieldSets;
        COM               ptFieldSet;
        int               itemCount;
        boolean           subTotal;
        FieldName         itemName;
        int               i;
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            ptFieldSets = ptRowAxis.fieldSets();
            itemCount   = ptFieldSets.count();

            for (i=0; i < itemCount ; i++)
            {
                ptFieldSet = ptFieldSets.item(i);
                itemName   = ptFieldSet.name();
                pivotTableFields = ptFieldSet.fields();
                pivotTableField  = pivotTableFields.item(itemName);
                subTotal = pivotTableField.subTotals(2);

                this.createTemplateItem(i+1,RPayHRMPivotTableItemPosition::Row,itemName,subTotal);
            }
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTotals</Name>
				<Source><![CDATA[
        private void saveTotals()
    {
        InteropPermission          perm;
        int                        lines = infologLine();

        RPayHRMPivotItemExpression itemExpression;
        RPayHRMPivotItemTotalType  itemTotalType;
        COM                        ptTotal;
        int                        itemCount;
        FieldName                  itemName;
        int                        i;
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            itemCount = ptTotals.count();

            for (i=0; i < itemCount; i++)
            {
                ptTotal = ptTotals.item(i);
                itemName = ptTotal.name();
                itemTotalType = ptTotal.type();
                itemExpression = ptTotal.expression();

                this.createTemplateItem(i+1,RPayHRMPivotTableItemPosition::Total,itemName,false,itemTotalType,itemExpression);
            }
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (RPayHRMPivotTableTemplate::find(pivotTemplateId, pivotTableType))
            {
                if (Box::okCancel("@RUP2882", DialogButton::Ok) != DialogButton::Ok)
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>