<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupResume</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimLPCleanupResume extends RunBaseBatch implements BatchRetryable
{
    private InventDimLPCleanupJob cleanupJob;
    private InventInstrumentationLogger logger;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        cleanupJob
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimLPCleanupJob</Name>
				<Source><![CDATA[
    public InventDimLPCleanupJob parmInventDimLPCleanupJob(InventDimLPCleanupJob _cleanupJob = cleanupJob)
    {
        cleanupJob = _cleanupJob;

        return cleanupJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        logger = InventInstrumentationLogger::createLogger(classStr(InventDimLPCleanupResume));
        using (var activityContext = logger.inventDimLPCleanup_Resume().logMeasure(funcName()))
        {
            if (InventDimLPCleanupService::existsAnotherInventDimLPCleanupJobRunning(this.parmCurrentBatch().RecId))
            {
                throw error("@SCM:InventDimLPCleanupAnotherJobNotFinished");
            }

            if (InventDimLPCleanupService::existsInventUnusedDimCleanUpJobRunning())
            {
                throw error("@SCM:InventUnusedDimCleanupJobNotFinished");
            }

            ttsbegin;
            cleanupJob = InventDimLPCleanupJob::findBySessionId(cleanupJob.SessionId, true);

            boolean resumeCleanup;
            if (cleanupJob.StopRunning == NoYes::Yes)
            {
                cleanupJob.StopRunning = NoYes::No;
                cleanupJob.update();
                resumeCleanup = true;
            }

            // Regenerate cleanup tasks in resuming stage if cleanup process failed to generate cleanup tasks
            // Do not need to reset the cleanup task status, as any errors occur will rollback the status changes.
            InventDimLPCleanupTask inventDimLPCleanupTask;
            select firstonly RecId from inventDimLPCleanupTask
                where inventDimLPCleanupTask.SessionId == cleanupJob.SessionId;

            if (inventDimLPCleanupTask.RecId == 0)
            {
                if (InventDimLPCleanupUIQureyRangeFlight::instance().isEnabled())
                {
                    InventDimLPCleanupService::prepareInventDimLPCleanupTask(cleanupJob.CleanupToDate, cleanupJob.SessionId, cleanupJob.InventSiteId, cleanupJob.InventLocationId);
                }
                else
                {
                    InventDimLPCleanupService::prepareInventDimLPCleanupTask(cleanupJob.CleanupToDate, cleanupJob.SessionId, '', '');
                }
            }
            ttscommit;

            if (resumeCleanup)
            {
                Batch batch = BatchHeader::getCurrentBatchTask();

                if (!batch)
                {
                    throw error("@DataExpTool:ErrMsg_BatchJobSelect_1");
                }

                BatchHeader batchHeader = BatchHeader::construct(batch.BatchJobId);

                if (!batchHeader)
                {
                    throw error("@DataExpTool:ErrMsg_BatchHeaderSelect_1");
                }

                logger.inventDimLPCleanup_Resume().logResumeSessionId(activityContext, cleanupJob.SessionId, batch.BatchJobId);
                InventDimLPCleanupService::createBatchTasks(batchHeader, batch, cleanupJob.SessionId);
            }
            else
            {
                error("@SYS18447");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventDimLPCleanupResume construct()
    {
        return new InventDimLPCleanupResume();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:ResumeInventDimLPCleanup";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (InventDimLPCleanupService::existsAnotherInventDimLPCleanupJobRunning())
        {
            throw error("@SCM:InventDimLPCleanupAnotherJobNotFinished");
        }

        if (args && args.dataset() == tableNum(InventDimLPCleanupJob))
        {
            InventDimLPCleanupResume inventDimLPCleanupResume = InventDimLPCleanupResume::construct();
            inventDimLPCleanupResume.getLast();
            inventDimLPCleanupResume.parmInventDimLPCleanupJob(args.record());

            if (inventDimLPCleanupResume.prompt())
            {
                inventDimLPCleanupResume.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCleanupJobRecord</Name>
				<Source><![CDATA[
    [SysObsolete("This method is not necessary and will obsolete.", false, 09\11\2023)]
    protected void updateCleanupJobRecord()
    {
        ttsbegin;
        cleanupJob = InventDimLPCleanupJob::findBySessionId(cleanupJob.SessionId, true);
        cleanupJob.StopRunning = NoYes::No;
        cleanupJob.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>