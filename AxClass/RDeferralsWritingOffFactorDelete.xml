<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsWritingOffFactorDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rDeferralsWritingOffFactorDelete extends RunBaseBatch implements BatchRetryable
{
    QueryRun                    queryRun;
    RDeferralsFactorCalculation factorCalculation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(RDeferralsWritingOffFactor _writingOffFactor)
    {
        Query                   query           = new Query();
        QueryBuildDataSource    queryDataSource = query.addDataSource(tablenum(RDeferralsWritingOffFactor));
        QueryBuildRange         qbr;

        factorCalculation = RDeferralsFactorCalculation::findRecId(_writingOffFactor.RefRecId, true);

        qbr = queryDataSource.addRange(fieldnum(RDeferralsWritingOffFactor, RefRecId));
        qbr.value(queryValue(_writingOffFactor.RefRecId));
        qbr.status(RangeStatus::Locked);

        queryDataSource.addSortField(fieldnum(RDeferralsWritingOffFactor, StartDate), SortOrder::Descending);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a dialog box from the <c>Dialog</c> class and waits for user input.
    /// </summary>
    /// <returns>
    /// true if the user clicks OK in the dialog; otherwise, false.
    /// </returns>
    public boolean prompt()
    {
        boolean ret;

        ret = super();

        if (RDeferralsFactorCalculation::findNextPeriod(factorCalculation.EndDate).RecId)
            ret = ret && checkFailed("@GLS107269");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        RDeferralsWritingOffFactor  writingOffFactor;
        Counter                     progressTotal;
        Counter                     progressCounter;

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@GLS107198", progressTotal, #AviFindFile);

        ttsbegin;

        while (queryRun.next())
        {
            select firstonly forupdate writingOffFactor
                where writingOffFactor.RecId == queryRun.get(tablenum(RDeferralsWritingOffFactor)).RecId;

            progressCounter++;
            progress.setCount(progressCounter);

            if (writingOffFactor.validateDelete())
                writingOffFactor.doDelete();
        }
        if (! (select firstonly RecId from rDeferralsWritingOffFactor
                   where rDeferralsWritingOffFactor.RefRecId == factorCalculation.RecId).RecId)
        {
            factorCalculation.Calculated = NoYes::No;
            factorCalculation.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// <c>true</c> if the batch job is run on the AOS server as the submitted user account; otherwise,
    /// false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a select button is added to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns <c>true</c>.
    /// </returns>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS107198";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RDeferralsWritingOffFactorDelete factorDelete = new RDeferralsWritingOffFactorDelete();
        FormDataSource                   formDataSource = FormDataUtil::getFormDataSource(_args.record());

        factorDelete.initValue(_args.record());
        if (factorDelete.prompt())
            factorDelete.runOperation();

        formDataSource.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>