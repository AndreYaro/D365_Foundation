<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRetransferToJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class LedgerRetransferToJournal
{
    LedgerJournalTrans  ledgerJournalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        LedgerJournalTrans      ledgerJournalFromTrans;
        LedgerJournalTrans      ledgerJournalDeleteTrans;

        LedgerTransferToJournal ledgerTransferToJournal;

        ttsbegin;

        select firstonly voucher, journalNum, transferredBy from ledgerJournalFromTrans
            index hint NumVoucherIdx
            where ledgerJournalFromTrans.journalNum         != ledgerJournalTrans.journalNum &&
                  ledgerJournalFromTrans.voucher            == ledgerJournalTrans.voucher    &&
                  ledgerJournalFromTrans.transferredTo      == ledgerJournalTrans.journalNum;

        ledgerTransferToJournal    = LedgerTransferToJournal::construct(ledgerJournalFromTrans.JournalNum);
        ledgerTransferToJournal.parmFromVoucher(ledgerJournalFromTrans.voucher);
        ledgerTransferToJournal.parmToVoucher(ledgerJournalFromTrans.voucher);
        ledgerTransferToJournal.parmFromJournalNum(ledgerJournalFromTrans.journalNum);
        ledgerTransferToJournal.parmToJournalNum(ledgerJournalTrans.journalNum);
        ledgerTransferToJournal.parmTransferredBy(ledgerJournalTrans.transferredBy);
        ledgerTransferToJournal.updateQueryRestore();

        while select forupdate recId from ledgerJournalDeleteTrans
            index hint NumVoucherIdx
            where ledgerJournalDeleteTrans.journalNum         == ledgerJournalTrans.journalNum &&
                  ledgerJournalDeleteTrans.voucher            == ledgerJournalTrans.voucher
        {
            ledgerJournalDeleteTrans.doDelete();
        }

        ledgerTransferToJournal.runOperation();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        LedgerRetransferToJournal     ledgerRetransferToJournal;

        switch (args.dataset())
        {
            case Tablenum(LedgerJournalTrans):
                ledgerRetransferToJournal = LedgerRetransferToJournal::newLedgerJournalTrans(args.record());
                break;
            default:
                throw error(Error::missingRecord(funcname()));
        }

        ledgerRetransferToJournal.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTrans</Name>
				<Source><![CDATA[
    static LedgerRetransferToJournal newLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerRetransferToJournal ledgerRetransferToJournal;

        ledgerRetransferToJournal = new LedgerRetransferToJournal();
        ledgerRetransferToJournal.parmLedgerJournalTrans(_ledgerJournalTrans);

        return ledgerRetransferToJournal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>