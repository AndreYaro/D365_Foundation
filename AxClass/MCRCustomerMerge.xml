<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustomerMerge</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCustomerMerg</c> class containing static
///     methods that are to be used with customer merge feature.
/// </summary>
class MCRCustomerMerge
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Applymerge</Name>
				<Source><![CDATA[
/// <summary>
    ///     Merges a customer and it's merged children into a new
    ///     merged root.
    /// </summary>
    /// <param name="_mergeFrom">
    ///     The account number of the customer to be merged to another customer.
    /// </param>
    /// <param name="_mergeTo">
    ///     The account number of the customer that is absorbing another customer.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Error describing the nature of the problem.
    /// </exception>
    public static void Applymerge(CustAccount _mergeFrom, CustAccount _mergeTo)
    {
        CustTable           custTableMergeFrom;
        CustTable           custTableMergeTo;
        CustTable           custTable;
        CustTable           custTableValidate;
        smmBusRelAccount    busRelAccountFrom;
        smmBusRelAccount    busRelAccountTo;

        if (!_mergeFrom || !_mergeTo)
        {
            throw error("@MCR27548");
        }

        custTableValidate = CustTable::find(_MergeTo);

        // Throw exception, if the customer account in 'custTableValidate' has 'MCRMergedRoot' equal to '_mergeFrom'
        // or if the 'RetailValidateMCRMergedParentPropertyForCustomerFlight' feature is enabled and the
        // 'MCRMergedParent' of the customer account in 'custTableValidate' is equal to '_mergeFrom'.
        if (custTableValidate.MCRMergedRoot == _mergeFrom || 
            (RetailValidateMCRMergedParentPropertyForCustomerFlight::instance().isEnabled() && custTableValidate.MCRMergedParent == _mergeFrom))
        {
            throw error(strfmt("@MCR34558", _mergeFrom, _mergeTo));
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            MCRCustomerMergeValidation_BR::ValidateCustomerMerge(_mergeFrom,  _mergeTo);
        }
        // </GBR>

        // First update the MergeFrom customer to be merged into the new parent.
        ttsBegin;
        custTableMergeFrom = CustTable::find(_mergeFrom, true);
        custTableMergeFrom.MCRMergedParent = _mergeTo;
        custTableMergeFrom.MCRMergedRoot   = _mergeTo;
        custTableMergeFrom.update();

        //Nneed the merge to record to see if it has a corresponding
        // BR so we know if we should merge the BR also.
        custTableMergeTo = CustTable::find(_mergeTo, true);

        busRelAccountFrom = smmBusRelTable::findByParty(custTableMergeFrom.Party).BusRelAccount;
        if (busRelAccountFrom)
        {
            busRelAccountTo = smmBusRelTable::findByParty(custTableMergeTo.Party).BusRelAccount;
        }

        // fix BusRel merging
        if (busRelAccountFrom && busRelAccountTo)
        {
            MCRBRCustomerMerge::applyMerge(busRelAccountFrom, busRelAccountTo);
        }

        // Clear stats for merged cust and flag stats for merged
        // to as dirty.
        MCRSalesStatsCustTable::salesStatsAffected(_mergeTo);
        MCRSalesStatsCustTable::deleteCustStats(_mergeFrom);
        ttsCommit;

        // Update the root node for any potential children that were merged into the
        // mergeFrom customer.
        ttsBegin;
        update_recordSet custTable
            setting
                MCRMergedRoot = _mergeTo
            where custTable.MCRMergedRoot == _mergeFrom;

        ttsCommit;

        // Also copy address book
        MCRCustomerMerge::copyCustAddresses(_mergeTo, _mergeFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustAddresses</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loops through the mergedFrom customers addresses and contact info and copies them to the survivor,
    ///     provided they don't already exist in the customer based upon simple checking in the
    ///     'existanceOfAddress' method.
    /// </summary>
    /// <param name="_mergeTo">
    ///     The account number of the customer that is absorbing another customer.
    /// </param>
    /// <param name="_mergeFrom">
    ///     The account number of the customer that is being absorbed by another customer.
    /// </param>
    private static void copyCustAddresses(CustAccount _mergeTo, CustAccount _mergeFrom)
    {
        DirPartyLocation        dirPartyLocation, dirPartyLocationNew;
        DirPartyLocationRole    dirPartyLocationRole, dirPartyLocationRoleNew;
        LogisticsLocation       logisticsLocation, logisticsLocationNew;
        LogisticsPostalAddress  logisticsPostalAddress, logisticsPostalAddressNew;
        CustTable               custTableMergedFrom;
        CustTable               custTableMergedTo;
        RecId                   logisticsLocationNewRecId, dirPartyLocationNewRecId;

        if (_mergeFrom && _mergeTo)
        {
            custTableMergedFrom = custTable::find(_mergeFrom);
            custTableMergedTo   = custTable::find(_mergeTo);
        }
        else
        {
            throw error("@MCR27548");
        }

        // Not all parts of the address will be copied here, but the main parts (address) will be.
        while select dirPartyLocation
            where dirPartyLocation.Party == custTableMergedFrom.Party
            join firstonly logisticsLocation
                where logisticsLocation.RecId == dirPartyLocation.Location
        {
            ttsBegin;
            dirPartyLocationNew = dirPartyLocation.data();
            dirPartyLocationNew.Party = custTableMergedTo.Party;
            dirPartyLocationNew.IsPrimary = false;

            logisticsLocationNew = logisticsLocation.data();
            logisticsLocationNew.LocationId = LogisticsLocation::getNewLocationId();
            if (logisticsLocationNew.validateWrite())
            {
                logisticsLocationNew.insert();
            }
            else
            {
                throw error("@SYS104318");
            }

            logisticsLocationNewRecId = logisticsLocationNew.RecId;

            insert_recordset logisticsPostalAddressNew (Address, Apartment_RU, Building_RU, BuildingCompliment, City, CityRecId,
                                                        CountryRegionId, District, DistrictName, FlatId_RU, HouseId_RU, IsPrivate,
                                                        Latitude, Longitude, PostBox, PrivateForParty, State, Street,
                                                        StreetId_RU, StreetNumber, TimeZone, ValidFrom, ValidTo,ZipCode, ZipCodeRecId,
                                                        Location)
                select Address, Apartment_RU, Building_RU, BuildingCompliment, City, CityRecId,
                                                        CountryRegionId, District, DistrictName, FlatId_RU, HouseId_RU, IsPrivate,
                                                        Latitude, Longitude, PostBox, PrivateForParty, State, Street,
                                                        StreetId_RU, StreetNumber, TimeZone, ValidFrom, ValidTo,ZipCode, ZipCodeRecId,
                                                        logisticsLocationNewRecId
                from logisticsPostalAddress where logisticsPostalAddress.location == logisticsLocation.recid;

            dirPartyLocationNew.Location = logisticsLocationNew.RecId;
            if (dirPartyLocationNew.validateWrite())
            {
                dirPartyLocationNew.insert();
            }
            else
            {
                throw error("@SYS104318");
            }

            dirPartyLocationNewRecId = dirPartyLocationNew.RecId;

            // Copy assoicated data for merge customer's dirPartyLocationRole.
            insert_recordset dirPartyLocationRoleNew (LocationRole , PartyLocation)
                select LocationRole, dirPartyLocationNewRecId
                from dirPartyLocationRole where dirPartyLocationRole.PartyLocation == dirPartyLocation.RecId;

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existanceOfLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if an address record exists in the mergeTo customer's addresses.
    ///     Simple check based upon zipcode, street1, and last name.
    /// </summary>
    /// <param name="_location">
    ///     The record ID of the address to check.
    /// </param>
    /// <param name="_mergeToParty">
    ///     The record ID of the party to check for addresses.
    /// </param>
    /// <returns>
    ///     true if an address record exists in the merge-To customer's address; otherwise, false.
    /// </returns>
    private static boolean existanceOfLocation(LogisticsLocationRecId _location, DirPartyRecId _mergeToParty)
    {
        DirPartyLocation dirPartyLocation;
        boolean ret = false;

        if (_location && _mergeToParty)
        {
            dirPartyLocation = DirPartyLocation::findByPartyLocation(_mergeToParty, _location);
        }
        else
        {
            throw error("@MCR27548");
        }

        if (dirPartyLocation)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmergeCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Unmergeds an account from its parent.  Also updates the root
    ///     of any potential children that were merged into the account that is
    ///     now being unmerged.
    /// </summary>
    /// <param name="_accountNum">
    ///     The account number for which this method unmerges.
    /// </param>
    public static void unmergeCustomer(CustAccount _accountNum)
    {
        CustTable       custTable;
        smmBusRelTable  smmBusRelTable;

        ttsBegin;
        if (_accountNum)
        {
            custTable = CustTable::find(_accountNum);
        }
        else
        {
            throw error("@MCR27548");
        }

        // Update current account to be unmerged.
        // Flag stats for merged root as dirty.
        MCRSalesStatsCustTable::salesStatsAffected(custTable.MCRMergedRoot);

        custTable = CustTable::find(_accountNum, true);
        custTable.MCRMergedParent = '';
        custTable.MCRMergedRoot   = '';
        if (custTable.validateWrite())
        {
            custTable.update();
        }
        else
        {
            throw error("@SYS104318");
        }

        // Unmerge BR
        if (custTable.Party)
        {
            // check for existence of smmbusreltable records.
            smmBusRelTable = smmBusRelTable::findByParty(custTable.Party);
            if (smmBusRelTable)
            {
                MCRBRCustomerMerge::unmergeBRCustomer(smmBusRelTable.BusRelAccount);
            }
        }

        ttsCommit;

        // recursive call to unmerge any children from the root node and make unmerged account new parent
        MCRCustomerMerge::updateMergedRootsForUnmerge(_accountNum, _accountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMergedRootsForUnmerge</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the root node of all child accounts
    ///     during an unmerge.
    /// </summary>
    /// <param name="_custAccountParent">
    ///     The account number for wich this method updates.
    /// </param>
    /// <param name="_newMergedRoot">
    ///     The account number pertaining to the new root of the merged customers.
    /// </param>
    private static void updateMergedRootsForUnmerge(CustAccount _custAccountParent, CustAccount _newMergedRoot)
    {
        CustTable custTableChild;

        if (!_custAccountParent || !_newMergedRoot)
        {
            throw error("@MCR27548");
        }

        ttsBegin;
        // Loop through all the immediate children
        while select forupdate MCRMergedParent, AccountNum from  custTableChild
            where custTableChild.MCRMergedParent == _custAccountParent
        {
            // Since this was a recursive call and the update
            // wont fail, no validation is needed.
            custTableChild.MCRMergedRoot = _newMergedRoot;
            custTableChild.update();

            // recursively check if there are any children.
            // When the child record is sent in, it becomes the parent, and its
            // children are found and given the same MCRMergedRoot value.
            MCRCustomerMerge::updateMergedRootsForUnmerge(custTableChild.AccountNum, _newMergedRoot);
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>