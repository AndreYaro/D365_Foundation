<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rLedgerSheetClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rLedgerSheetClient extends RLedgerSheetEngine implements BatchRetryable
{
    MainAccount                              mainAccount;
    DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;

    protected const str aviUpdate = '104.avi';
    protected const str aviTransfer = '107.avi';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAccountNumRange</Name>
				<Source><![CDATA[
    protected QueryBuildRange addAccountNumRange(QueryBuildDataSource _qBd, MainAccountNum _mainAccountNum)
    {
        QueryBuildRange         qBr;
        RangeStatus             rangeStatus = RangeStatus::Locked;
        DimensionAttributeValue dimensionAttributeValue;

        mainAccount = MainAccount::findByMainAccountId(_mainAccountNum);

        qBr = _qBd.findRange(fieldNum(MainAccount, MainAccountId));

        if (qBr)
        {
            rangeStatus = qBr.status();
        }

        while (_qBd.findRange(fieldNum(MainAccount, MainAccountId)))
        {
            _qBd.clearRange(fieldNum(MainAccount, MainAccountId));
        }

        if (mainAccount.Type == DimensionLedgerAccountType::Total)
        {
            while select TableId from dimensionAttributeValue
                where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                    && dimensionAttributeValue.EntityInstance     == mainAccount.RecId
            join InvertTotalSign, FromValue, ToValue from dimAttrValueTotCrit
                where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
            {
                qBr = _qBd.addRange(fieldNum(MainAccount, MainAccountId));
                qBr.value(SysQuery::range(dimAttrValueTotCrit.FromValue, dimAttrValueTotCrit.ToValue));
                qBr.status(rangeStatus);
            }
        }
        else
        {
            qBr = _qBd.addRange(fieldNum(MainAccount, MainAccountId));
            qBr.value(queryValue(_mainAccountNum));
            qBr.status(rangeStatus);
        }

        return qBr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOperationTax</Name>
				<Source><![CDATA[
    public boolean checkOperationTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRLedgerSheetServer</Name>
				<Source><![CDATA[
    protected void createRLedgerSheetServer()
    {
        rLedgerSheetServer =  RLedgerSheetServer::construct(this.parmRLedgerSheetType());
        rLedgerSheetServer.initParameters(this.queryRun(), this.getParmContainer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeRLedgerSheetServer</Name>
				<Source><![CDATA[
    protected void executeRLedgerSheetServer()
    {
        rLedgerSheetServer.run(this.initRunQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromServer</Name>
				<Source><![CDATA[
    protected void getDataFromServer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParmContainer</Name>
				<Source><![CDATA[
    public container getParmContainer()
    {
        return [ currencyType,
                 deleteZero,
                 showSumAccount,
                 dimensionCriteria,
                 fromDate,
                 toDate,
                 operationsTax,
                 currencyCode,
                 selectedFieldsOrder ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (! progress)
        {
            progress = RunbaseProgress::construct();
        }
        this.progressInit("@SYS60112", 5, aviUpdate);
        progress.setCount(0);

        this.progressInc("@SYS26577");
        this.initAccounts();

        this.progressInc("@SYS8577");
        this.createRLedgerSheetServer();
        this.executeRLedgerSheetServer();

        this.getDataFromServer();

        progress.setAnimation(aviTransfer);
        this.progressInc("@GLS111392");
        this.initListView();

        this.progressInc("@GLS111393");
        this.fetchNextRows();

        this.progressInc("@GLS111391");
        this.setItem();

        progress.kill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItem</Name>
				<Source><![CDATA[
    protected void setItem()
    {
        FormListItem item;
        item = listControl.getItem(0);
        if (item)
        {
            item.stateFocus(true);
            item.stateSelected(true);
            listControl.setItem(item);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shrinkColAccount</Name>
				<Source><![CDATA[
    protected container shrinkColAccount(MainAccount _mainAccount, container _visibleCol = conNull())
    {
        int                     i;
        MainAccountNum          offsetAccount;
        DimensionAttributeValue dimensionAttributeValue;

        listControl.lockWindowUpdate(true);

        while select TableId from dimensionAttributeValue
            where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                && dimensionAttributeValue.EntityInstance     == _mainAccount.RecId
        join InvertTotalSign, FromValue, ToValue from dimAttrValueTotCrit
            where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
        {
            for (i = 1; i <= listControl.getColumnCount() - 1; i++)
            {
                offsetAccount = listControl.getColumn(i).text();
                if (offsetAccount != _mainAccount.MainAccountId &&
                    offsetAccount >= dimAttrValueTotCrit.FromValue &&
                    offsetAccount <= dimAttrValueTotCrit.ToValue)
                {
                    this.deleteColumn(i);
                    i--;
                }
            }
        }

        listControl.lockWindowUpdate(false);

        return _visibleCol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shrinkRowAccount</Name>
				<Source><![CDATA[
    protected container shrinkRowAccount(MainAccount _mainAccount, container _visibleRow = conNull())
    {
        int                     i;
        MainAccountNum          offsetAccount;
        DimensionAttributeValue dimensionAttributeValue;

        listControl.lockWindowUpdate(true);

        while select TableId from dimensionAttributeValue
            where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                && dimensionAttributeValue.EntityInstance     == _mainAccount.RecId
        join InvertTotalSign, FromValue, ToValue from dimAttrValueTotCrit
            where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
        {
            for (i = 0; i <= listControl.getCount() - 1; i++)
            {
                offsetAccount = listControl.getItem(i).text();
                if (offsetAccount != _mainAccount.MainAccountId &&
                    offsetAccount >= dimAttrValueTotCrit.FromValue &&
                    offsetAccount <= dimAttrValueTotCrit.ToValue)
                {
                    this.deleteRow(i);
                    i--;
                }
            }
        }

        listControl.lockWindowUpdate(false);

        return _visibleRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>