<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSACustomerRetentionDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PSACustomerRetentionDP</c> report provides data for the <c>PSACustomerRetention</c>
/// SQL Server Reporting Services (SSRS) report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(PSACustomerRetention)),
    SRSReportParameterAttribute(classStr(PSACustomerRetentionContract))
]
class PSACustomerRetentionDP extends SRSReportDataProviderPreProcessTempDB
{
    PSACustomerRetentionTmp  tmpPSACustomerRetention;
    CustTable                custTable;
    ProjInvoiceTable         projInvoiceTable;
    ProjInvoiceJour          projInvoiceJour;
    PSAContractLineItems     contractLineItems;
    ProjTable                projTable;
    ProjRevenueTrans         projRevenueTrans;
    ProjInvoiceRevenue       projInvoiceRevenue;
    PSACustomerInvoiceRetain psaCustomerInvoiceRetain;
    HcmWorker                hcmworker;
    boolean                  isBillingRuleApplicable;
    boolean                  isReleased;
    TransDate                releaseInvoiceDate;

    CustAccount              custAccount;
    ProjInvoiceProjId        contract;
    ProjId                   projId;
    PSAContractLineNum       billingId;
    Set                      releaseInvoiceIds;
    ProjInvoiceId            releaseRelatedMainInvoiceId;
    boolean                  insertRecord;

    ProjId                   projIdUnique;
    PSAContractLineNum       billingIdUnique;

    Query                    query;
    PSACustomerRetentionContract rdpcontract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private void buildQuery()
    {
        QueryBuildDatasource qbdsJour;
        qbdsJour = query.dataSourceTable(tableNum(ProjInvoiceJour));

        if (custAccount)
        {
            SysQuery::findOrCreateRange(qbdsJour,fieldNum(ProjInvoiceJour,InvoiceAccount)).value(custAccount);
        }

        if (contract)
        {
            SysQuery::findOrCreateRange(qbdsJour,fieldNum(ProjInvoiceJour,ProjInvoiceProjId)).value(contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyConversion</Name>
				<Source><![CDATA[
        private Amount currencyConversion(TransDate _invoiceDate, AmountCur _invoiceAmount, CurrencyCode _currencyCode)
    {
        CurrencyExchangeHelper helper;
        Amount amount;

        if (!_currencyCode)
        {
            amount = _invoiceAmount;
        }
        else
        {
            helper = CurrencyExchangeHelper::newExchangeDate(
                                           Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                           _invoiceDate);

            amount = helper.calculateTransactionToAccounting(projInvoiceJour.CurrencyId, _invoiceAmount, true);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    private void getCustTable(ProjProposalId _proposalId)
    {
        ProjFundingSource   projFundingSource;

        projFundingSource = ProjFundingSource::find(ProjProposalJour::find(_proposalId).FundingSource);

        if (projFundingSource.FundingType == ProjFundingType::Customer)
        {
            custTable = CustTable::findByPartyRecId(projFundingSource.party);
        }

        else if (projFundingSource.FundingType ==ProjFundingType::Grant)
        {
            custTable = CustTable::find(projFundingSource.CustAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSACustomerInvoiceRetain</Name>
				<Source><![CDATA[
    private void getPSACustomerInvoiceRetain()
    {
        if (isBillingRuleApplicable)
        {
            select psaCustomerInvoiceRetain
                where psaCustomerInvoiceRetain.ContractLineNum == billingIdUnique
                && psaCustomerInvoiceRetain.ProjProposalId == projInvoiceJour.ProposalId;
        }
        else
        {
            select psaCustomerInvoiceRetain
                where psaCustomerInvoiceRetain.ProjId == projIdUnique
                && psaCustomerInvoiceRetain.ProjProposalId == projInvoiceJour.ProposalId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSACustomerRetentionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>PSACustomerRetentionTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PSACustomerRetentionTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSACustomerRetentionTmp))
    ]
    public PSACustomerRetentionTmp getPSACustomerRetentionTmp()
    {
        return tmpPSACustomerRetention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpPSACustomerRetention</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the specified record and inserts it in the temporary table.
    /// </summary>
    public void insertTmpPSACustomerRetention()
    {
        this.getPSACustomerInvoiceRetain();

        tmpPSACustomerRetention.InvoiceId           = projInvoiceJour.ProjInvoiceId;
        tmpPSACustomerRetention.AccountNum          = custTable.AccountNum;
        tmpPSACustomerRetention.Name                = custTable.name();
        tmpPSACustomerRetention.ContractId          = projInvoiceJour.ProjInvoiceProjId;
        tmpPSACustomerRetention.BillingRuleId       = contractLineItems.ContractLineNum;
        tmpPSACustomerRetention.BillingRuleName     = contractLineItems.LineDesc;
        tmpPSACustomerRetention.ProjectManager      = hcmworker.name();
        tmpPSACustomerRetention.InvoiceAccount      = projInvoiceJour.InvoiceAccount;
        tmpPSACustomerRetention.InvoiceDate         = projInvoiceJour.InvoiceDate;
        tmpPSACustomerRetention.CurrencyId          = projInvoiceJour.CurrencyId;
        tmpPSACustomerRetention.ProjId              = projTable.ProjId;
        tmpPSACustomerRetention.ProjName            = projTable.Name;
        tmpPSACustomerRetention.CompanyCurr         = Ledger::accountingCurrency(CompanyInfo::current());

        tmpPSACustomerRetention.LineAmount          = this.currencyConversion(projInvoiceJour.InvoiceDate, psaCustomerInvoiceRetain.RetainedAmount, projInvoiceJour.CurrencyId);
        tmpPSACustomerRetention.InvoiceAmount       = this.currencyConversion(projInvoiceJour.InvoiceDate, psaCustomerInvoiceRetain.InvoicedNow, projInvoiceJour.CurrencyId);

        tmpPSACustomerRetention.RetainedAmtReq      = this.currencyConversion(projInvoiceJour.InvoiceDate, psaCustomerInvoiceRetain.RetainedAmount, projInvoiceJour.CurrencyId);
        tmpPSACustomerRetention.RetainedAmtReqDate  = dateNull();

        tmpPSACustomerRetention.IsBillingRuleApplicable = isBillingRuleApplicable;

        tmpPSACustomerRetention.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReleased</Name>
				<Source><![CDATA[
    private boolean isReleased()
    {
        ProjInvoiceRevenue projInvRev;
        ProjInvoiceRevenueDetail projInvRevDetail;

        if (isBillingRuleApplicable)
        {
            select count(RecId) from projInvRevDetail
                    join  recId, ProjInvoiceId, InvoiceDate, IsReleased, PSAContractLineNum from projInvRev
                    where projInvRevDetail.InvoiceRefRecId == projInvRev.RecId
                       && projInvRev.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                       && projInvRev.InvoiceDate == projInvoiceJour.InvoiceDate
                       && projInvRev.IsReleased == NoYes::Yes
                       && projInvRev.PSAContractLineNum == billingIdUnique;
        }
        else
        {
            select count(RecId) from projInvRevDetail
                    join  recId, ProjInvoiceId, InvoiceDate, IsReleased, ProjId from projInvRev
                    where projInvRevDetail.InvoiceRefRecId == projInvRev.RecId
                       && projInvRev.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                       && projInvRev.InvoiceDate == projInvoiceJour.InvoiceDate
                       && projInvRev.IsReleased == NoYes::Yes
                       && projInvRev.ProjId == projIdUnique;
        }

        if (projInvRevDetail.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetained</Name>
				<Source><![CDATA[
    private boolean isRetained()
    {
        ProjInvoiceRevenue projInvRev;
        ProjInvoiceRevenueDetail projInvRevDetail;

        if (isBillingRuleApplicable)
        {
            select count(RecId) from projInvRevDetail
                    join  recId, ProjInvoiceId, InvoiceDate, IsRetained, PSAContractLineNum from projInvRev
                    where projInvRevDetail.InvoiceRefRecId == projInvRev.RecId
                       && projInvRev.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                       && projInvRev.InvoiceDate == projInvoiceJour.InvoiceDate
                       && projInvRev.IsRetained == NoYes::Yes
                       && projInvRev.PSAContractLineNum == billingIdUnique;
        }
        else
        {
            select count(RecId) from projInvRevDetail
                    join  recId, ProjInvoiceId, InvoiceDate, IsRetained, ProjId from projInvRev
                    where projInvRevDetail.InvoiceRefRecId == projInvRev.RecId
                       && projInvRev.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                       && projInvRev.InvoiceDate == projInvoiceJour.InvoiceDate
                       && projInvRev.IsRetained == NoYes::Yes
                       && projInvRev.ProjId == projIdUnique;
        }

        if (projInvRevDetail.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services (SSRS) report.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by SSRS at
    /// run time. The method should compute data and populate the data tables that will be returned to
    /// SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun        queryRun;
        Set             uniqueValues;
        Set             insertedInvoiceIds;
        ProjInvoiceId   invoiceIdUnique;
        boolean         isRetained;

        query = new Query(this.parmQuery());

        rdpcontract = this.parmDataContract() as PSACustomerRetentionContract;

        custAccount = rdpcontract.parmCustAccount();
        contract = rdpcontract.parmProjInvoiceProjId();
        projId = rdpcontract.parmProjId();
        billingId = rdpcontract.parmPSAContractLineNum();
        releaseInvoiceIds = new Set(Types::String);
        insertedInvoiceIds = new Set(Types::String);
        this.buildQuery();
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            billingIdUnique = '';
            projIdUnique = '';
            invoiceIdUnique = '';
            insertRecord = true;
            uniqueValues = new Set(Types::String);
            projInvoiceJour             = queryRun.get(tableNum(ProjInvoiceJour));
            projInvoiceRevenue          = queryRun.get(tableNum(ProjInvoiceRevenue));
            this.getCustTable(projInvoiceJour.ProposalId);

            isBillingRuleApplicable = PSAContractLineItems::hasBillingRules(projInvoiceJour.ProjInvoiceProjId);

            if (isBillingRuleApplicable)
            {
                contractLineItems = PSAContractLineItems::find(projInvoiceRevenue.PSAContractLineNum);
                billingIdUnique = contractLineItems.ContractLineNum;
            }

            projIdUnique = projInvoiceRevenue.ProjId;
            invoiceIdUnique = projInvoiceJour.ProjInvoiceId;

            if ((isBillingRuleApplicable && !uniqueValues.in(billingIdUnique)) || (!isBillingRuleApplicable && !uniqueValues.in(projIdUnique)))
            {
                if (isBillingRuleApplicable)
                {
                    uniqueValues.add(billingIdUnique);
                }
                else
                {
                    uniqueValues.add(projIdUnique);
                }

                isReleased = this.isReleased();
                isRetained = this.isRetained();

                projTable = ProjTable::find(projIdUnique);
                hcmworker = HcmWorker::find(projTable.WorkerResponsible);
                if (this.validateRecord(projTable.ProjId))
                {
                    if (isReleased)
                    {
                        this.updateForReleasedInvoice();
                        insertRecord = false;
                    }

                    if (isRetained && insertedInvoiceIds.in(billingIdUnique))
                    {
                        releaseInvoiceDate = dateNull();
                        this.updateTmpPSACustomerRetention();
                    }

                    if (insertRecord &&
                       ((!isBillingRuleApplicable && !insertedInvoiceIds.in(invoiceIdUnique)) ||
                       (isBillingRuleApplicable && !insertedInvoiceIds.in(billingIdUnique) || (insertedInvoiceIds.in(billingIdUnique) && !insertedInvoiceIds.in(invoiceIdUnique)))))
                    {
                        if (invoiceIdUnique)
                        {
                            insertedInvoiceIds.add(invoiceIdUnique);
                        }

                        if (isBillingRuleApplicable && billingIdUnique && !insertedInvoiceIds.in(billingIdUnique))
                        {
                            insertedInvoiceIds.add(billingIdUnique);
                        }

                        this.insertTmpPSACustomerRetention();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForReleasedInvoice</Name>
				<Source><![CDATA[
    private void updateForReleasedInvoice()
    {
        projInvoiceJour projInvoiceJourRelease;
        ProjRevenueTransSale projRevenueTransSale;
        ProjProposalRevenueDetail ProjProposalRevenueDetail;
        ProjProposalRevenue ProjProposalRevenue;
        ProjInvoiceRevenueDetail projInvoiceRevenueDetail;

        while select SaleRefRecId,ProposalRefRecId from projproposalRevenueDetail
            join RecId,PSARefRecId from projRevenueTransSale
                where projRevenueTransSale.RecId == projproposalRevenueDetail.SaleRefRecId
            join RecId,ProposalId from ProjProposalRevenue
                where projproposalRevenueDetail.ProposalRefRecId == projproposalRevenue.RecId
                    && ProjProposalRevenue.ProposalId == projInvoiceJour.ProposalId
                    && ProjProposalRevenue.PSAContractLineNum == psaCustomerInvoiceRetain.ContractLineNum
        {
            select ProjInvoiceId,InvoiceDate from projInvoiceJourRelease
                join projInvoiceRevenue
                    join projInvoiceRevenueDetail
                    where projInvoiceJourRelease.ProjInvoiceId == projInvoiceRevenue.ProjInvoiceId
                    && projInvoiceJourRelease.InvoiceDate == projInvoiceRevenue.InvoiceDate
                    && projInvoiceRevenue.RecId == projInvoiceRevenueDetail.InvoiceRefRecId
                    && projInvoiceRevenueDetail.SaleRefRecId == projRevenueTransSale.PSARefREcId;

            if (projInvoiceJourRelease)
            {
                releaseRelatedMainInvoiceId = projInvoiceJourRelease.ProjInvoiceId;
                releaseInvoiceDate = projInvoiceJour.InvoiceDate;
                this.updateTmpPSACustomerRetention();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTmpPSACustomerRetention</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the specified record and inserts it in the temporary table.
    /// </summary>
    public void updateTmpPSACustomerRetention()
    {
        if (isBillingRuleApplicable)
        {
            select forUpdate tmpPSACustomerRetention
                where tmpPSACustomerRetention.InvoiceId == releaseRelatedMainInvoiceId
                && tmpPSACustomerRetention.BillingRuleId == billingIdUnique;
        }
        else
        {
            select forUpdate tmpPSACustomerRetention
                where tmpPSACustomerRetention.InvoiceId == releaseRelatedMainInvoiceId
                && tmpPSACustomerRetention.ProjId == projIdUnique;
        }

        if (tmpPSACustomerRetention)
        {
            ttsbegin;
            tmpPSACustomerRetention.RetainedAmtReq      = 0.0;
            tmpPSACustomerRetention.RetainedAmtReqDate  = releaseInvoiceDate;
            tmpPSACustomerRetention.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetainReleaseAmount</Name>
				<Source><![CDATA[
    private AmountCur getRetainReleaseAmount()
    {
        projInvoiceRevenueDetail projInvoiceRevenueDetail;

        if (isBillingRuleApplicable)
        {
            select sum(LineAmount) from projInvoiceRevenueDetail
                join  projInvoiceRevenue
                where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                    && projInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    && projInvoiceRevenue.InvoiceDate == projInvoiceJour.InvoiceDate
                    && projInvoiceRevenue.IsReleased == isReleased
                    && projInvoiceRevenue.IsRetained == NoYes::No
                    && projInvoiceRevenue.PSAContractLineNum == billingIdUnique;
        }
        else
        {
            select sum(LineAmount) from projInvoiceRevenueDetail
                join  projInvoiceRevenue
                where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                    && projInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    && projInvoiceRevenue.InvoiceDate == projInvoiceJour.InvoiceDate
                    && projInvoiceRevenue.IsReleased == isReleased
                    && projInvoiceRevenue.IsRetained == NoYes::No
                    && projInvoiceRevenue.ProjId == projIdUnique;
        }

        return projInvoiceRevenueDetail.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecord</Name>
				<Source><![CDATA[
    private boolean validateRecord(ProjId _projId)
    {
        boolean ret = false;

        if (!_projId)
        {
            return ret;
        }

        projTable   =   ProjTable::find(projInvoiceRevenue.ProjId);

        if (!projTable)
        {
            return ret;
        }

        if (!projId && !billingId)
        {
            ret = true;
        }
        else if (projId && !billingId && projTable.ProjId == projId)
        {
            ret = true;
        }
        else if (!projId && billingId && projInvoiceRevenue.PSAContractLineNum == billingId)
        {
            ret = true;
        }
        else if (projId && billingId && projTable.ProjId == projId && projInvoiceRevenue.PSAContractLineNum == billingId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>