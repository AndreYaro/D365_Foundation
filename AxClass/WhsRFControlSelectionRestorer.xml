<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsRFControlSelectionRestorer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsRFControlSelectionRestorer</c> class restores multi-select options for controls based on the previous user session.
/// </summary>
final class WhsRFControlSelectionRestorer
{
    #WHSRF
    #WHSWorkExecuteControlElements

    container previousContainer;
    container con;
    WHSUserId userId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>restore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the options.
    /// </summary>
    /// <param name = "_con">The container with the controls.</param>
    /// <param name = "_userId">The ID of the current user.</param>
    /// <returns></returns>
    public static container restore(container _con, WHSUserId _userId)
    {
        var restorer = new WhsRFControlSelectionRestorer();
        restorer.userId = _userId;
        restorer.con = _con;
        
        restorer.run();

        return restorer.con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiOptionControl</Name>
				<Source><![CDATA[
    private boolean isMultiOptionControl(str _type)
    {
        switch (_type)
        {
            case #RFCombobox:
            case #RFListBox:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTextDataEntryControl</Name>
				<Source><![CDATA[
    private boolean isTextDataEntryControl(str _type)
    {
        switch (_type)
        {
            case #RFText:
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        int length = conLen(con);
        for (int i = #ControlsStart; i<=length; i++)
        {
            container element = conPeek(con, i);
            str type = conPeek(element, #controlType);

            if (this.isMultiOptionControl(type))
            {
                str name = conPeek(element, #name);
                str selectedValue = conPeek(element, #data);
                str options = this.getPreviousValueFromControl(name);
                if (options)
                {
                    element = conPoke(element, #data, options);
                    element = conPoke(element, #selected, selectedValue);
                    con = conPoke(con, i, element);
                }
            }
            else if (this.isTextDataEntryControl(type))
            {
                str name = conPeek(element, #name);
                str newValue = conPeek(element, #data);
                str previousValue = this.getPreviousValueFromControl(name);
                
                // If we found a text entry control which did not have a value before, clear the value
                // as this is what most probably caused the exception
                // We do this so that when barcode scanners are used, we can rescan the value upon invalid entry right away
                if (previousValue == '' && newValue != '')
                {
                    element = conPoke(element, #data, previousValue);
                    con = conPoke(con, i, element);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserSessionContainer</Name>
				<Source><![CDATA[
    private container getUserSessionContainer()
    {
        if (userId)
        {
            XML xml = WHSWorkUserSession::find(userId).sessionState().parmXml();
            if (xml)
            {
                return WHSWorkExecuteDisplay::readXML(xml);
            }
        }
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousValueFromControl</Name>
				<Source><![CDATA[
    private str getPreviousValueFromControl(str _controlName)
    {
        if (!previousContainer)
        {
            previousContainer = this.getUserSessionContainer();
        }

        int length = conLen(previousContainer);
        for (int i = #ControlsStart; i<=length; i++)
        {
            container element = conPeek(previousContainer, i);
            str name = conPeek(element, #name);
            
            if (name == _controlName)
            {
                return conPeek(element, #data);
            }
        }
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>