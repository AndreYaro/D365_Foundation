<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetDimensionFocusUpdateBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a derived class that is responsible for incrementally creating dimension reference records for budget source tracking and budget transaction data.
/// </summary>
public class BudgetDimensionFocusUpdateBalance extends DimensionFocusUpdateBalance implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    protected void postProcess()
    {
        BudgetDimensionFocusProcessBalance budgetDimensionFocusProcessBalance = BudgetDimensionFocusProcessBalance::construct(DimensionHierarchy::find(dimensionFocusRecId));
    
        super();
    
        budgetDimensionFocusProcessBalance.createBudgetDimensionReference();
    
        budgetDimensionFocusProcessBalance.createMissingLedgerDimensionReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        BudgetDimensionFocusUpdateBalance::runOnServer(this.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBudgetProcess</Name>
				<Source><![CDATA[
    protected void runBudgetProcess()
    {
        BudgetDimensionFocusProcessBalance budgetDimensionFocusProcessBalance = BudgetDimensionFocusProcessBalance::construct(DimensionHierarchy::find(dimensionFocusRecId));
    
        budgetDimensionFocusProcessBalance.createBudgetDimensionReference();
    
        budgetDimensionFocusProcessBalance.createMissingLedgerDimensionReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    protected void runServer()
    {
        // super() call is removed from below telemtry as it has telemtry of it's own and because of telemtry of super()
        // the below telemetry activity used to start but never completed
        super();

        BudgetInstrumentationLogger budgetInstrumentationLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetDimensionFocusUpdateBalance));
        using (SysInstrumentationActivityContext updateBalanceContext = budgetInstrumentationLogger.dimensionFocusBalance().updateBalanceContext(dimensionFocusRecId, this.parmCurrentBatch().BatchJobId, ledgerRecId))
        {
            // As telemtry is captured after super() call, it is being marked as postRunServer
            updateBalanceContext.addCustomProperty(BudgetInstrumentationConstants::PostRunServer, 'True');

            int startTimeForBudgetDimensionReferences = updateBalanceContext.getElapsedMilliseconds();
        
            this.runBudgetProcess(); 

            budgetInstrumentationLogger.logTimeDuration(updateBalanceContext, startTimeForBudgetDimensionReferences);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetDimensionFocusUpdateBalance construct(DimensionHierarchy _dimensionHierarchy)
    {
        BudgetDimensionFocusUpdateBalance updateBalance;
    
        updateBalance = new BudgetDimensionFocusUpdateBalance();
        updateBalance.setDimensionHierarchy(_dimensionHierarchy);
    
        return updateBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    private server static void runOnServer(container _packedClass)
    {
        BudgetDimensionFocusUpdateBalance serverBalance;
    
        serverBalance = BudgetDimensionFocusUpdateBalance::construct(null);
    
        serverBalance.unpack(_packedClass);
        serverBalance.runServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the dimension references associated with the <c>DimensionHierarchy</c> record.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The <c>DimensionHierarchy</c> record.
    /// </param>
    /// <param name="_showErrors">
    /// true if errors should be displayed; otherwise, false.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The dimension hierarchy is null or the type is not dimension set.
    /// </exception>
    public static void updateBudgetBalance(DimensionHierarchy _dimensionHierarchy, boolean _showErrors = false)
    {
        BudgetDimensionFocusUpdateBalance updateBalance;
    
        if (_dimensionHierarchy == null || _dimensionHierarchy.StructureType != DimensionHierarchyType::Focus && _showErrors)
        {
            throw error(Error::missingRecord(tableStr(DimensionHierarchy)));
        }
    
        updateBalance = BudgetDimensionFocusUpdateBalance::construct(_dimensionHierarchy);
        updateBalance.parmSuppressErrors(!_showErrors);
        updateBalance.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>