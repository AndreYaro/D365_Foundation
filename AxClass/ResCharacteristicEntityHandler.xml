<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCharacteristicEntityHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class associates <c>ResCharacteristicReqEntityType</c> with characteristics.
/// </summary>
class ResCharacteristicEntityHandler extends ResCharacteristicHandler
{
    ResCharacteristicReqEntityType  reqEntityType;
    RecId                           entity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>readData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the entity assigned characteristic by characteristic set.
    /// Called when the form is launched.
    /// </summary>
    /// <param name = "_searchChoices">Table buffer of selected characteristics.</param>
    public void readData(ResTmpCharacteristicSelected _searchChoices)
    {
        ResCharacteristicRequirementLine    characteristicRequirementLine;
        ResCharacteristicView               characteristic;

        ResCharacteristicRequirement characteristicRequirement = ResCharacteristicRequirement::findByEntity(reqEntityType, entity);
        if (characteristicRequirement)
        {
            ttsbegin;
            while select RecId from characteristicRequirement
                where characteristicRequirement.ReqEntityType == reqEntityType
                    && characteristicRequirement.ReqEntity == entity
                    join Characteristic, CharacteristicSet from characteristicRequirementLine
                        where characteristicRequirementLine.CharacteristicRequirement == characteristicRequirement.RecId
                            join Characteristic, CharacteristicSet, Name, Description, CharacteristicIdentifier from characteristic
                                where characteristic.Characteristic == characteristicRequirementLine.Characteristic
                                    && characteristic.CharacteristicSet == characteristicRequirementLine.CharacteristicSet
            {
                _searchChoices.Characteristic = characteristic.Characteristic;
                _searchChoices.CharacteristicId = characteristic.Name;
                _searchChoices.CharacteristicSet = characteristic.CharacteristicSet;
                _searchChoices.CharacteristicIdentifier = characteristic.CharacteristicIdentifier;
                _searchChoices.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the entity characteristic selection to <c>ResCharacteristicRequirement</c> and <c>ResCharacteristicRequirementLine</c> table.
    /// Called when the user clicks 'Ok' on the form.
    /// </summary>
    /// <param name = "_searchChoices">Table buffer of characteristics selected from ResCharacteristicForm.</param>
    /// <param name = "_matchCount">Number to match for the search (if it's a search from, defaults to 0).</param>
    public void writeData(ResTmpCharacteristicSelected _searchChoices, int _matchCount = 0)
    {
        ResCharacteristicRequirement        characteristicRequirement;
        ResCharacteristicRequirementLine    characteristicRequirementLine;
        ResCharacteristic                   characteristic;

        RefRecId existingCharacteristicReqRecId = ResCharacteristicRequirement::findByEntity(reqEntityType, entity).RecId;
        ttsbegin;
        if (existingCharacteristicReqRecId)
        {
            //Delete the existing entity characteristic reference
            delete_from characteristicRequirementLine
                exists join characteristicRequirement
                    where characteristicRequirement.ReqEntityType == reqEntityType
                        && characteristicRequirement.ReqEntity == entity
                        && characteristicRequirement.RecId == characteristicRequirementLine.CharacteristicRequirement;
        }

        select count(RecId) from _searchChoices;
        if (_searchChoices.RecId)
        {
            //Add an entity record to requirement master table if it doesn't exist and user has choosen characteristic
            if (!existingCharacteristicReqRecId)
            {
                characteristicRequirement.ReqEntityType = reqEntityType;
                characteristicRequirement.ReqEntity = entity;
                characteristicRequirement.insert();
            }
            //Add characteristic from temp table for the entity.
            while select _searchChoices group by Characteristic, CharacteristicSet
            {
                characteristicRequirementLine.CharacteristicRequirement =
                    existingCharacteristicReqRecId ? existingCharacteristicReqRecId : characteristicRequirement.RecId;
                characteristicRequirementLine.Characteristic = _searchChoices.Characteristic;
                characteristicRequirementLine.CharacteristicSet = _searchChoices.CharacteristicSet;
                characteristicRequirementLine.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSearchForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associating entity with characteristic does not require search functionality.
    /// </summary>
    /// <returns>False to indicate this is not a search form.</returns>
    public boolean isSearchForm()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRoles</Name>
				<Source><![CDATA[
    public boolean showRoles()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProjects</Name>
				<Source><![CDATA[
    public boolean showProjects()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor of <c>ResCharacteristicEntityHandler</c>.
    /// </summary>
    /// <param name = "_reqEntityType">Entity type.</param>
    /// <param name = "_entity">Entity.</param>
    /// <returns></returns>
    public static ResCharacteristicEntityHandler construct(ResCharacteristicReqEntityType _reqEntityType, RecId _entity)
    {
        ResCharacteristicEntityHandler handler = new ResCharacteristicEntityHandler(_reqEntityType, _entity);
        return handler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>ResCharacteristicEntityHandler</c>.
    /// </summary>
    /// <param name = "_reqEntityType">Entity type.</param>
    /// <param name = "_entity">Entity.</param>
    public void new(ResCharacteristicReqEntityType _reqEntityType, RecId _entity)
    {
        reqEntityType = _reqEntityType;
        entity = _entity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
