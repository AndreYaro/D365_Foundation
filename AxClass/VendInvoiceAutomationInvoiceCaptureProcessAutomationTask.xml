<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationInvoiceCaptureProcessAutomationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadata(classStr(ProcessAutomationTask), classStr(VendInvoiceAutomationInvoiceCaptureProcessAutomationTask))]
[Export(identifierStr('Microsoft.Dynamics.AX.Application.ProcessAutomationTask'))]
internal final class VendInvoiceAutomationInvoiceCaptureProcessAutomationTask extends ProcessAutomationTask implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isProcessAutomationEnabledForThisTask</Name>
				<Source><![CDATA[
    protected boolean isProcessAutomationEnabledForThisTask()
    {
        return InvoiceCaptureFeature::isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfWorkToBePerformed</Name>
				<Source><![CDATA[
    protected List getListOfWorkToBePerformed()
    {
        VendInvoiceAutomationInvoiceCaptureTask submissionTask = VendInvoiceAutomationInvoiceCaptureTask::construct();

        ProcessScheduleWorkItem executionWorkItem = this.parmProcessScheduleWorkItem();

        // Set the data contract on the submission task to the process work item generated by Process Automation
        ProcessScheduleWorkItem processScheduleWorkItemContract = submissionTask.getDataContractObject() as ProcessScheduleWorkItem;
        processScheduleWorkItemContract.initializeFromScheduleWorkItem(executionWorkItem);

        List taskWorkList = new List(Types::Class);
        taskWorkList.addEnd(submissionTask);

        return taskWorkList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobCaption</Name>
				<Source><![CDATA[
    protected BatchCaption batchJobCaption()
    {
        return "@AccountsPayable:VendInvoiceAutomationInvoiceCaptureBatchJobCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>