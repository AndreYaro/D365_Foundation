<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransViewerCompanyFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SpecTransViewerCompanyFilter</c> class maintains the multi-company select state for the <c>SpecTransViewer</c> form.
/// </summary>
internal final class SpecTransViewerCompanyFilter
{
    private const FieldId SpecTransFilterField = fieldNum(SpecTrans, RefCompany);
    private const FieldId LogFilterField = fieldNum(SpecTransViewerLog, Company);

    // Form controls
    private FormStringControl companyFilterStringControl;

    // Data sources
    private QueryBuildDataSource specTransQBDS;
    private QueryBuildDataSource logQBDS;

    // Lookup controls
    private SysLookupMultiSelectCtrl companyFilterMultiSelectCtrl;

    // Company restrictions
    private container availableCompanies;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>filterBySelectedCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the legal entity selection for the company filter control.
    /// The calling form is responsible for clearing any previous ranges
    /// and refreshing associated queries.
    /// </summary>
    internal void filterBySelectedCompanies()
    {
        container companyRecIds = companyFilterMultiSelectCtrl.get();
        container selectedCompanies = this.convertCompanyRecIdToDataArea(companyRecIds);

        this.applySelectedCompanyFilterToQueries(selectedCompanies);

        this.applySelectedCompaniesToLookupControls(companyRecIds, selectedCompanies);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCompanyRecIdToDataArea</Name>
				<Source><![CDATA[
    private container convertCompanyRecIdToDataArea(container _companyRecIds)
    {
        container companies;

        for (int i = 1; i <= conLen(_companyRecIds); i++)
        {
            DataAreaId company = CompanyInfo::findRecId(conPeek(_companyRecIds, i)).DataArea;

            if (company != '')
            {
                companies += company;
            }
        }

        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySelectedCompanyFilterToQueries</Name>
				<Source><![CDATA[
    private void applySelectedCompanyFilterToQueries(container _selectedCompanies)
    {
        for (Counter i = 1; i <= conLen(_selectedCompanies); i++)
        {
            DataAreaId currentCompany = conPeek(_selectedCompanies, i);

            if (currentCompany && xDataArea::exist(currentCompany))
            {
                specTransQBDS.addRange(SpecTransFilterField).value(currentCompany);
                logQBDS.addRange(LogFilterField).value(currentCompany);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySelectedCompaniesToLookupControls</Name>
				<Source><![CDATA[
    private void applySelectedCompaniesToLookupControls(container _companyRecIds, container _companyDataAreaIds)
    {
        container selected = [_companyRecIds, _companyDataAreaIds];

        companyFilterMultiSelectCtrl.set(selected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLookupControls</Name>
				<Source><![CDATA[
    private void initLookupControls(FormRun _formRun)
    {
        Query restrictedCompanyQuery = this.restrictToAvailableCompaniesQuery(availableCompanies);

        companyFilterMultiSelectCtrl = SysLookupMultiSelectCtrl::constructWithQuery(
            _formRun,
            companyFilterStringControl,
            restrictedCompanyQuery,
            true);

        container companyRecIds;

        for (int i = 1; i <= conLen(availableCompanies); i++)
        {
            companyRecIds += CompanyInfo::findDataArea(conPeek(availableCompanies, i)).RecId;
        }

        this.applySelectedCompaniesToLookupControls(companyRecIds, availableCompanies);
        this.applySelectedCompanyFilterToQueries(availableCompanies);
    }

]]></Source>
			</Method>
			<Method>
				<Name>restrictToAvailableCompaniesQuery</Name>
				<Source><![CDATA[
    private Query restrictToAvailableCompaniesQuery(container _userCompanies)
    {
        Query companyQuery = new Query();

        QueryBuildDataSource companyDataSource = companyQuery.addDataSource(tableNum(CompanyInfo));
        companyDataSource.addSelectionField(fieldNum(CompanyInfo, DataArea));
        companyDataSource.addSelectionField(fieldNum(CompanyInfo, Name));
        companyDataSource.addOrderByField(fieldNum(CompanyInfo, DataArea));

        for (int i = 1; i <= conLen(_userCompanies); i++)
        {
            companyDataSource.addRange(fieldNum(CompanyInfo, DataArea)).value(conPeek(_userCompanies, i));
        }

        return companyQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAvailableCompanies</Name>
				<Source><![CDATA[
    internal void setAvailableCompanies(Set _availableCompanies)
    {
        availableCompanies = conNull();

        if (_availableCompanies != null)
        {
            SetEnumerator availableCompaniesEnumerator = _availableCompanies.getEnumerator();

            while (availableCompaniesEnumerator.moveNext())
            {
                availableCompanies += availableCompaniesEnumerator.current();
            }
        }

        if (conLen(availableCompanies) == 0)
        {
            availableCompanies += curExt();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForForm</Name>
				<Source><![CDATA[
    internal static SpecTransViewerCompanyFilter newForForm(
        FormRun _formRun,
        Set _availableCompanies,
        FormStringControl _companyFilterStringControl,
        QueryBuildDataSource _specTransQBDS,
        QueryBuildDataSource _logQBDS)
    {
        SpecTransViewerCompanyFilter filter = new SpecTransViewerCompanyFilter();
        filter.companyFilterStringControl = _companyFilterStringControl;

        filter.specTransQBDS = _specTransQBDS;
        filter.logQBDS = _logQBDS;

        filter.setAvailableCompanies(_availableCompanies);
        filter.initLookupControls(_formRun);

        return filter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>