<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMixedLicensePlateInfoReturnItemReceivingCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSMixedLicensePlateInfoReturnItemReceivingCalculator extends WHSMixedLicensePlateInfoCalculator
{
    private WHSLicensePlateId mixedLicensePlateId;

    private Map itemInventoryUnits = new Map(Types::String, Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMixedLicensePlateId</Name>
				<Source><![CDATA[
    internal static WHSMixedLicensePlateInfoReturnItemReceivingCalculator newFromMixedLicensePlateId(WHSLicensePlateId _mixedLicensePlateId)
    {
        WHSMixedLicensePlateInfoReturnItemReceivingCalculator calculator = new WHSMixedLicensePlateInfoReturnItemReceivingCalculator();
        calculator.mixedLicensePlateId = _mixedLicensePlateId;

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLicensePlateInfo</Name>
				<Source><![CDATA[
    internal List calculateLicensePlateInfo()
    {
        List licensePlateInfo = new List(Types::String);

        WHSMixedLicensePlateReceipt mixedLicensePlateReceipt = WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(mixedLicensePlateId);
        WHSMixedLicensePlateReceiptLine mixedLPLine;
        WHSMixedLicensePlateReceiptPlannedLine mixedLPPlannedLine;

        while select LineNum, InventQty, InventDimId from mixedLPLine
            order by mixedLPLine.LineNum asc
            where mixedLPLine.MixedLPReceivingTable == mixedLicensePlateReceipt.RecId
            join AccountNum, ItemId from mixedLPPlannedLine
                where mixedLPPlannedLine.MixedLicensePlateReceiptLineRecId == mixedLPLine.RecId
        {
            str licensePlateLineInfo =
                strFmt('%1\n%2\n%3\n%4\n%5',
                strFmt("@WAX3192", "@SYS70473", mixedLPLine.LineNum),
                strFmt("@WAX3192", "@SYS1996", mixedLPPlannedLine.AccountNum),
                strFmt("@WAX3192", "@WAX1240", mixedLPPlannedLine.ItemId),
                strFmt("@WAX3192", "@WAX:LPQty", mixedLPLine.InventQty),
                strFmt("@WAX3192", "@SYS153282", this.itemInventoryUnit(mixedLPPlannedLine.ItemId)));

            licensePlateLineInfo = licensePlateLineInfo + this.calculateProductAndTrackingDimensionsInfo(mixedLPLine.InventDimId);

            licensePlateInfo.addEnd(licensePlateLineInfo);
        }

        return licensePlateInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemInventoryUnit</Name>
				<Source><![CDATA[
    private UnitOfMeasureSymbol itemInventoryUnit(ItemId _itemId)
    {
        if (!itemInventoryUnits.exists(_itemId))
        {
            UnitOfMeasureSymbol inventoryUnit = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;

            itemInventoryUnits.add(_itemId, inventoryUnit);

            return inventoryUnit;
        }

        return itemInventoryUnits.lookup(_itemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>