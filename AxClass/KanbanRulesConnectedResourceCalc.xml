<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanRulesConnectedResourceCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanRulesConnectedResourceCalc</c> class explores connected kanban rules that will be used
/// in resource calculation.
/// </summary>
/// <remarks>
/// At each level only one kanban rule is considered.
/// </remarks>
public class KanbanRulesConnectedResourceCalc extends KanbanRulesConnectedUpStreamSemi
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>connectedKanbanRulesAsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the connected kanban rules for a given kanban rule
    /// </summary>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> record to find the connected rules for.
    /// </param>
    /// <returns>
    /// A List of connected kanban rules; otherwise, null.
    /// </returns>
    protected List connectedKanbanRulesAsList(KanbanRule _kanbanRule)
    {
        KanbanRule      kanbanRuleWithdrawal;
        KanbanRule      kanbanRuleManufacturing;
        List            list          = null;
        List            listConnected = super(_kanbanRule);

        // find all connected rules
        if (   listConnected
            && listConnected.elements())
        {
            ListEnumerator le = listConnected.getEnumerator();

            // filter the list
            while (   le.moveNext()
                   && !kanbanRuleManufacturing)
            {
                KanbanRule kanbanRule = le.current();
                if (kanbanRule)
                {
                    if (   !kanbanRuleManufacturing
                        && kanbanRule.KanbanType == LeanKanbanType::Manufacturing)
                    {
                        kanbanRuleManufacturing = kanbanRule;
                    }
                    if (   !kanbanRuleWithdrawal
                        && kanbanRule.KanbanType == LeanKanbanType::Withdrawal)
                    {
                        kanbanRuleWithdrawal = kanbanRule;
                    }
                }
            }

            // the result should be a list with just one element:
            // prioritize any manufacturing rule
            list = new List(Types::Record);
            if (kanbanRuleManufacturing)
            {
                list.addEnd(kanbanRuleManufacturing);
            }
            else
            {
                if (kanbanRuleWithdrawal)
                {
                    list.addEnd(kanbanRuleWithdrawal);
                }
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a given kanban rule is included in additional exploration.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> record to check.
    /// </param>
    /// <returns>
    /// true if the kanban rule should be included; otherwise, false.
    /// </returns>
    protected boolean includeKanbanRule(KanbanRule _kanbanRule)
    {
        return _kanbanRule.RecId != 0
               && leanProductionFlowActivity
               && (leanProductionFlowActivity.PickUpSemiFinished
               ||  this.includeReceiveFinished(_kanbanRule));
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeReceiveFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether kanban rules that do receive finished items must be included in the search.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> record that is used to determine the result.
    /// </param>
    /// <returns>
    /// true if rules that do receive finished items must be included; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean includeReceiveFinished(KanbanRule _kanbanRule)
    {
        return    !leanProductionFlowActivity.PickUpSemiFinished
               && _kanbanRule.KanbanType == LeanKanbanType::Withdrawal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConnectionParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the connection parameters.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    The <c>KanbanRule</c> record that is used to set the connection parameters.
    /// </param>
    protected void setConnectionParameters(KanbanRule _kanbanRule)
    {
        if (kanbanFindRules)
        {
            super(_kanbanRule);
            kanbanFindRules.parmIncludeReceiveFinished(this.includeReceiveFinished(_kanbanRule));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanRulesConnectedResourceCalc construct()
    {
        return new KanbanRulesConnectedResourceCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>KanbanRulesConnectedResourceCalc</c> object.
    /// </summary>
    /// <param name="_kanbanRuleRoot">
    /// The <c>KanbanRule</c> record that serves as a root to find connected rules.
    /// </param>
    /// <param name="_itemId">
    /// The item ID to find connected rules for.
    /// </param>
    /// <param name="_inventDimId">
    /// The product dimensions to find connected rules for.
    /// </param>
    /// <param name="_dateTimeFrom">
    /// The start date and time at which the connected rules are active.
    /// </param>
    /// <param name="_dateTimeTo">
    /// The end date and time at which the connected rules are active; optional.
    /// </param>
    /// <param name="_inventQty">
    /// The inventory quantity to find connected rules for; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanRulesConnectedResourceCalc</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanRulesConnectedResourceCalc newStandard(
        KanbanRule    _kanbanRuleRoot,
        ItemId        _itemId,
        InventDimId   _inventDimId,
        TransDateTime _dateTimeFrom,
        TransDateTime _dateTimeTo = _dateTimeFrom,
        InventQty     _inventQty  = 0)
    {
        KanbanRulesConnectedResourceCalc  kanbanRulesConnectedResourceCalc = KanbanRulesConnectedResourceCalc::construct();

        kanbanRulesConnectedResourceCalc.parmKanbanRuleRoot(_kanbanRuleRoot);
        kanbanRulesConnectedResourceCalc.parmItemId(_itemId);
        kanbanRulesConnectedResourceCalc.parmInventDimId(_inventDimId);
        kanbanRulesConnectedResourceCalc.parmDateTimeFrom(_dateTimeFrom);
        kanbanRulesConnectedResourceCalc.parmDateTimeTo(_dateTimeTo);
        kanbanRulesConnectedResourceCalc.parmInventQty(_inventQty);

        return kanbanRulesConnectedResourceCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
