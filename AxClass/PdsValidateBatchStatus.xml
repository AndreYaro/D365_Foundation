<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsValidateBatchStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Validate the status of a given set of inventory batches
/// </summary>
/// <remarks>
/// The class will use an active inventBatch record
/// </remarks>
public class PdsValidateBatchStatus extends RunBaseBatch implements BatchRetryable
{
    QueryRun    queryRun;

    boolean     something;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        something
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// May the class run as part of a batch operation
    /// </summary>
    /// <returns>
    /// Returns true.
    /// </returns>
    /// <remarks>
    /// As the class my be run as a batch job, method returns true.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.newQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new query
    /// </summary>
    /// <param name="_batchId">
    /// InventBatchId for which to search
    /// </param>
    /// <param name="_itemId">
    /// ItemId for which to search
    /// </param>
    /// <remarks>
    /// The method will create a new query based on the provided batchId and
    /// or itemId
    /// </remarks>
    private void newQuery(InventBatchId _batchId = '', ItemId _itemId = '')
    {
        Query   query = new Query(querystr(PdsInventBatchQuery));

        query.dataSourceNo(1).update(true);

        if (_batchId)
        {
            query.dataSourceNo(1).addRange(
                fieldnum(InventBatch, InventBatchId)).value(_batchId);
        }

        if (_itemId)
        {
            query.dataSourceNo(1).addRange(
                fieldnum(InventBatch, ItemId)).value(_itemId);
        }

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Current QueryRun Object
    /// </summary>
    /// <returns>
    /// Method returns current QueryRun Object
    /// </returns>
    /// <remarks>
    /// The current queryRun object is return without any modifications
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate batch status
    /// </summary>
    /// <remarks>
    /// The method will updatee the batch which are found as part of the queryrun, to
    /// the ensure that the values do not violate any requirements.
    /// </remarks>
    public void run()
    {
        Counter             progressTotal;
        InventBatch         inventBatch;

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@PRO960", progressTotal, #AviUpdate);
        progress.setCount(0);

        ttsbegin;

        while (queryRun.next())
        {
            inventBatch = queryRun.getNo(1);
            progress.setText(strfmt("@PRO56", inventBatch.InventBatchId));
            inventBatch.update();
            progress.incCount();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define if query values should be displayed
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// The method will always return true as the values will be shown.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conpeek(_packedClass,1);
        container   packedQuery;
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version,#CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsValidateBatchStatus construct()
    {
        return new PdsValidateBatchStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@PRO952";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PdsValidateBatchStatus  pdsValidateBatchStatus;
        InventBatch             inventBatch;

        if (_args
            && _args.record()
            && _args.record().TableId == tablenum(InventBatch))
        {
            inventBatch = _args.record();
            pdsValidateBatchStatus = PdsValidateBatchStatus::newBuffer(
                                        inventBatch.InventBatchId,
                                        inventBatch.ItemId);
        }
        else
        {
            pdsValidateBatchStatus = PdsValidateBatchStatus::construct();
            pdsValidateBatchStatus.getLast();
        }

        if (!pdsValidateBatchStatus.prompt())
        {
            return;
        }

        pdsValidateBatchStatus.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of <c>pdsValidateBatchStatus</c> class
    /// </summary>
    /// <param name="_batchId">
    /// InventBatchId for which to retreive new buffer
    /// </param>
    /// <param name="_itemId">
    /// ItemId for which to retreive new buffer
    /// </param>
    /// <returns>
    /// New instance of <c>pdsValidateBatchStatus</c>
    /// </returns>
    /// <remarks>
    /// The new instance will based on the inventBatchId and itemid provided.
    /// </remarks>
    public static PdsValidateBatchStatus newBuffer(
        InventBatchId   _batchId,
        ItemId          _itemId)
    {
        PdsValidateBatchStatus  pdsValidateBatchStatus = PdsValidateBatchStatus::construct();

        pdsValidateBatchStatus.getLast();
        pdsValidateBatchStatus.newQuery(_batchId, _itemId);

        return pdsValidateBatchStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>