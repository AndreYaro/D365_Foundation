<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVatReportDetailedDP_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxVatReportDetailedDP_MX</c> class is the Report Data Provider class for the
///    <c>TaxVatDetailedReport_MX</c> SSRS report
/// </summary>
/// <remarks>
///    This class is the RDP class for the <c>TaxVatDetailedReport_MX</c> SSRS Report.
/// </remarks>
[SRSReportParameterAttribute(classStr(TaxVatReportDetailedContract_MX))]
class TaxVatReportDetailedDP_MX extends SrsReportDataProviderPreProcessTempDB
{
    TaxVatDetailedReportTmp_MX  taxVatDetailedReportTmp;
    CustTrans                   custTrans;

    // Macro contains 'defines' for parameter name
    #VATReports_SSRSParameters_MX

    TransDate                   fromDate;
    TransDate                   toDate;
    TaxVatReportCategoryCode_MX fromCategory;
    TaxVatReportCategoryCode_MX toCategory;
    TaxVatReportOption_MX       taxVatReportOption;
    SalesPurch                  salesPurch;
    TaxPeriod                   unrealizedTaxPeriod;
    TaxPeriod                   realizedTaxPeriod;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxVatDetailedReportTmp_MX</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data from the <c>TaxVatDetailedReportTmp_MX</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>TaxVatDetailedReportTmp_MX</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(#TaxVatDetailedReport)]
    public TaxVatDetailedReportTmp_MX getTaxVatDetailedReportTmp_MX()
    {
        select * from taxVatDetailedReportTmp;

        return taxVatDetailedReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchSalesTaxAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Insert sales and purchase tax amounts and data into the <c>TaxVatDetailedReportTmp_MX</c> table.
    /// </summary>
    private void insertPurchSalesTaxAmounts(TaxTrans _taxTrans, TaxTable _taxTable, TaxVatReportCategory_MX _taxVatReportCategoryTable)
    {
        var custVendTrans = this.findCustVendTrans(_taxTrans);
        BankAccountTrans    chequePaymentAccountTrans;
        CustSettlement      custSettlement;
        VendSettlement      vendSettlement;

        taxVatDetailedReportTmp.CategoryCode            = _taxVatReportCategoryTable.CategoryCode;
        taxVatDetailedReportTmp.DocumentDate            = _taxTrans.TransDate;
        taxVatDetailedReportTmp.Voucher                 = _taxTrans.Voucher;
        taxVatDetailedReportTmp.TaxCode                 = _taxTrans.TaxCode;
        taxVatDetailedReportTmp.TaxValue                = _taxTrans.TaxValue;
        
        if (_taxTrans.Source == TaxModuleType::Sales)
        {
            taxVatDetailedReportTmp.UnrealizedTax       = NoYes::Yes;

            if (_taxTrans.TaxAmountCur < 0               &&
                    fromDate <= _taxTrans.RealizedDate   &&
                    toDate   >= _taxTrans.RealizedDate)
            {
                taxVatDetailedReportTmp.UnrealizedTax   = NoYes::No;
            }
        }
        else if (_taxTrans.Source == TaxModuleType::Purch)
        {
            taxVatDetailedReportTmp.UnrealizedTax = NoYes::Yes;

            if ((_taxTrans.TaxAmountCur > 0              &&
                    fromDate <= _taxTrans.RealizedDate   &&
                    toDate   >= _taxTrans.RealizedDate))
            {
                taxVatDetailedReportTmp.UnrealizedTax   = NoYes::No;
            }
        }
        else
        {
            taxVatDetailedReportTmp.UnrealizedTax   = _taxTrans.UnrealizedTax;
        }

        taxVatDetailedReportTmp.ReferenceType           = _taxTrans.Source;
        taxVatDetailedReportTmp.TotalTransactionAmount  = 0;
        taxVatDetailedReportTmp.AccountNum              = "";
        taxVatDetailedReportTmp.PartyName               = "";
        taxVatDetailedReportTmp.RfcCurpTaxRegId         = "";

        taxVatDetailedReportTmp.AccountNum              = custVendTrans.AccountNum;

        if (_taxTrans.TaxDirection == TaxDirection::OutgoingTax || _taxTrans.TaxDirection == TaxDirection::OutgoingTax_W)
        {
            CustTable custTable = CustTable::find(custVendTrans.AccountNum);
            custTrans = CustTrans::findVoucherDate(_taxTrans.Voucher, _taxTrans.TransDate);

            taxVatDetailedReportTmp.RfcCurpTaxRegId         = custTable.Rfc_MX ? custTable.Rfc_MX : custTable.Curp_MX;
            taxVatDetailedReportTmp.PartyName               = custTable.name();
            taxVatDetailedReportTmp.TotalTransactionAmount  = custVendTrans.AmountMST;
       
            if (custTrans)
            {
                select sum(SettleAmountCur) from custSettlement
                   where custSettlement.OffsetRecid == custTrans.RecId
                        && custSettlement.TransDate <= toDate;
        
                if (custTrans.AmountCur == abs(custSettlement.SettleAmountCur) || custTrans.Prepayment)
                {
                    taxVatDetailedReportTmp.UnrealizedTax = NoYes::No;
                }
                else
                {
                    taxVatDetailedReportTmp.UnrealizedTax = NoYes::Yes;
                    
                }
            }
        }
        else if (_taxTrans.TaxDirection == TaxDirection::IncomingTax || _taxTrans.TaxDirection == TaxDirection::IncomingTax_W)
        {
            VendTable vendTable = VendTable::find(custVendTrans.AccountNum);

            taxVatDetailedReportTmp.RfcCurpTaxRegId = vendTable.Rfc_MX ? vendTable.Rfc_MX : vendTable.Curp_MX;

            if (!taxVatDetailedReportTmp.RfcCurpTaxRegId)
            {
                taxVatDetailedReportTmp.RfcCurpTaxRegId = vendTable.ForeignTaxRegistration_MX;
            }

            taxVatDetailedReportTmp.PartyName               = vendTable.name();
            taxVatDetailedReportTmp.TotalTransactionAmount  = abs(custVendTrans.AmountCur);

            select sum(SettleAmountCur) from VendSettlement
                where VendSettlement.OffsetRecid == custVendTrans.RecId
                    && VendSettlement.TransDate <= toDate;

            if (abs(custVendTrans.AmountCur) == vendSettlement.SettleAmountCur || custVendTrans.Prepayment)
            {
                taxVatDetailedReportTmp.UnrealizedTax = NoYes::No;
            }
            else
            {
                taxVatDetailedReportTmp.UnrealizedTax = NoYes::Yes;
            }
        }

        chequePaymentAccountTrans = custVendTrans.CustVendTrans::getBankAccountTransPaidWithCheque();
        
        if (!TaxParameters::find().ConditionalTax)
        {
            taxVatDetailedReportTmp.UnrealizedTax = _taxTrans.UnrealizedTax
                                                    && ((_taxTrans.RealizedDate == dateNull() || _taxTrans.RealizedDate >  toDate)
                                                            || custVendTrans.Closed == dateNull()
                                                            || (chequePaymentAccountTrans && !chequePaymentAccountTrans.Reconciled));
            
        }

        taxVatDetailedReportTmp.TaxAmount     = _taxTrans.TaxAmountCur * Tax::changeDisplaySign(_taxTrans.TaxDirection);
        taxVatDetailedReportTmp.TaxBaseAmount = _taxTrans.TaxBaseAmountCur * Tax::changeDisplaySign(_taxTrans.TaxDirection);

        if (_taxTrans.Source == TaxModuleType::Voucher)
        {
            taxVatDetailedReportTmp.TotalTransactionAmount = taxVatDetailedReportTmp.TaxAmount + taxVatDetailedReportTmp.TaxBaseAmount;
        }

        taxVatDetailedReportTmp.Total         = taxVatDetailedReportTmp.TaxBaseAmount + taxVatDetailedReportTmp.TaxAmount;
        taxVatDetailedReportTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. This method will be called by
    ///    SSRS at runtime and then it will compute the data and populate the data tables that will be
    ///    returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryBuildDataSource    taxVatReportCategory;
        QueryBuildDataSource    taxTableDS;
        QueryBuildDataSource    taxTransDS;
        QueryRun                queryRun;
        Query                   q   = new Query();

        boolean                 checkRfcAddress;

        this.setParameters();

        taxVatReportCategory = q.addDataSource(tableNum(TaxVatReportCategory_MX));
        taxVatReportCategory.addRange(fieldNum(TaxVatReportCategory_MX, CategoryCode)).value(queryRange(fromCategory, toCategory));
        taxVatReportCategory.addSortField(fieldNum(TaxVatReportCategory_MX, CategoryCode));
        taxVatReportCategory.orderMode(orderMode::OrderBy);

        taxTableDS = taxVatReportCategory.addDataSource(tableNum(TaxTable));
        taxTableDS.relations(true);

        taxTransDS = taxTableDS.addDataSource(tableNum(TaxTrans));
        taxTransDS.addRange(fieldNum(TaxTrans, TransDate)).value(queryRange(fromDate, toDate));
        taxTransDS.addRange(fieldNum(TaxTrans, TaxPeriod)).value(this.getTaxPeriodRange());
        taxTransDS.addSortField(fieldNum(TaxTrans, TransDate));
        taxTransDS.relations(true);

        if (salesPurch == SalesPurch::Purch)
        {
            taxTransDS.addRange(fieldNum(TaxTrans, TaxDirection)).value(queryValue(TaxDirection::IncomingTax));
            if (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled())
            {
                taxTransDS.addRange(fieldNum(TaxTrans, TaxDirection)).value(queryValue(TaxDirection::IncomingTax_W));
            }
        }
        else if (salesPurch == SalesPurch::Sales)
        {
            taxTransDS.addRange(fieldNum(TaxTrans, TaxDirection)).value(queryValue(TaxDirection::OutgoingTax));
            if (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled())
            {
                taxTransDS.addRange(fieldNum(TaxTrans, TaxDirection)).value(queryValue(TaxDirection::OutgoingTax_W));
            }
        }

        queryRun = new QueryRun(q);

        while (queryRun.next())
        {
            TaxTrans                taxTrans                    = queryRun.get(tableNum(TaxTrans));
            TaxTable                taxTable                    = queryRun.get(tableNum(TaxTable));
            TaxVatReportCategory_MX taxVatReportCategoryTable   = queryRun.get(tableNum(TaxVatReportCategory_MX));

            if (!checkRfcAddress)
            {
                var companyInfo = CompanyInfo::find();

                taxVatDetailedReportTmp.Address      = companyInfo.postalAddress().Address;
                taxVatDetailedReportTmp.CompanyRfc   = companyInfo.Rfc_MX;
                taxVatDetailedReportTmp.CurrencyCode = Ledger::accountingCurrency(companyInfo.RecId);
                checkRfcAddress = true;
            }

            this.insertPurchSalesTaxAmounts(taxTrans, taxTable, taxVatReportCategoryTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    private void setParameters()
    {
        TaxVatReportDetailedContract_MX taxVatReportDetailedContract = this.parmDataContract() as TaxVatReportDetailedContract_MX;

        fromDate            = taxVatReportDetailedContract.parmFromDate();
        fromCategory        = taxVatReportDetailedContract.parmFromCategory();
        toCategory          = taxVatReportDetailedContract.parmToCategory();
        toDate              = taxVatReportDetailedContract.parmToDate();
        taxVatReportOption  = taxVatReportDetailedContract.parmTaxVatReportOption();
        salesPurch          = taxVatReportDetailedContract.parmSalesPurch();
        unrealizedTaxPeriod = taxVatReportDetailedContract.parmUnrealizedTaxPeriod();
        realizedTaxPeriod   = taxVatReportDetailedContract.parmRealizedTaxPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendTrans</Name>
				<Source><![CDATA[
    private CustVendTrans findCustVendTrans(TaxTrans _taxTrans)
    {
        CustVendTrans       invoiceCustVendTrans;
        CustVendTrans       settlementCustVendTrans;
        CustVendSettlement  custVendSettlement;

        if (salesPurch == SalesPurch::Purch)
        {
            VendTrans       invoiceVendTrans;
            vendTrans       settlementVendTrans;
            VendSettlement  vendSettlement;

            invoiceCustVendTrans    = invoiceVendTrans;
            settlementCustVendTrans = settlementVendTrans;
            custVendSettlement      = vendSettlement;
        }
        else if (salesPurch == SalesPurch::Sales)
        {
            CustTrans       invoiceCustTrans;
            CustTrans       settlementCustTrans;
            CustSettlement  custSettlement;

            invoiceCustVendTrans    = invoiceCustTrans;
            settlementCustVendTrans = settlementCustTrans;
            custVendSettlement      = custSettlement;
        }

        if (_taxTrans.TaxOrigin == TaxOrigin::Tax)
        {
            select invoiceCustVendTrans
                where invoiceCustVendTrans.Voucher   == _taxTrans.Voucher
                   && invoiceCustVendTrans.TransDate == _taxTrans.TransDate;

            select custVendSettlement
                    where custVendSettlement.TransRecId == invoiceCustVendTrans.RecId;
        }
        else
        {
            select custVendSettlement
                join transDate from settlementCustVendTrans
                    where custVendSettlement.TransRecId == settlementCustVendTrans.RecId
                       && settlementCustVendTrans.RecId == _taxTrans.SourceRecId;

            if (!custVendSettlement)
            {
                select firstonly OffsetTransVoucher from custVendSettlement
                    exists join settlementCustVendTrans
                        where custVendSettlement.TransRecId     == settlementCustVendTrans.RecId
                           && settlementCustVendTrans.Voucher   == _taxTrans.Voucher
                           && settlementCustVendTrans.TransDate == _taxTrans.TransDate;
            }

            select invoiceCustVendTrans
                where invoiceCustVendTrans.Voucher == custVendSettlement.OffsetTransVoucher;
        }

        return invoiceCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxPeriodRange</Name>
				<Source><![CDATA[
    private str getTaxPeriodRange()
    {
        str taxPeriodRange = '';

        switch (taxVatReportOption)
        {
            case TaxVatReportOption_MX::Unrealized:
                taxPeriodRange = strFmt('(%1 == "%2")', fieldStr(TaxTrans, TaxPeriod), queryValue(unrealizedTaxPeriod));
                break;

            case TaxVatReportOption_MX::Realized:
                taxPeriodRange = strFmt('(%1 == "%2")', fieldStr(TaxTrans, TaxPeriod), queryValue(realizedTaxPeriod));
                break;

            case TaxVatReportOption_MX::Both:
                taxPeriodRange = strFmt('((%1 == "%2") || (%1 == "%3"))', fieldStr(TaxTrans, TaxPeriod),
                                                                queryValue(unrealizedTaxPeriod),
                                                                queryValue(realizedTaxPeriod));
                break;
        }

        return taxPeriodRange;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>