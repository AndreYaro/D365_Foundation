<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollBenefitRegisterController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PayrollBenefitRegisterController</c> class is the controller class for the <c>PayrollBenefitRegister</c> SSRS report.
/// </summary>
class PayrollBenefitRegisterController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the appropriate design name to open based on the contract parameters.
    /// </summary>
    /// <returns>
    /// Report's design name to show
    /// </returns>
    private str getReportName()
    {
        str reportNameLocal;
        PayrollBenefitRegisterContract contract = this.parmReportContract().parmRdpContract() as PayrollBenefitRegisterContract;

        if (contract.parmPrintSummaryOrDetail() == PayrollPrintSummaryorDetail::Detail)
        {
            if (contract.parmPrintSSN() || contract.parmPrintCaseNumber())
            {
                if (contract.parmPrintEarningBasisDetail())
                {
                    reportNameLocal = ssrsReportStr(PayrollBenefitRegister, DesignDetailWithEarningBasisAndSSNORCCN);
                }
                else
                {
                    reportNameLocal = ssrsReportStr(PayrollBenefitRegister, DesignDetailWithSSNOrCCN);
                }
            }
            else
            {
                if (contract.parmPrintEarningBasisDetail())
                {
                    reportNameLocal = ssrsReportStr(PayrollBenefitRegister, DesignDetailWithEarningBasisNoSSNNoCCN);
                }
                else
                {
                    reportNameLocal = ssrsReportStr(PayrollBenefitRegister, DesignDetailWithNoEarningBasisNoSSNNoCCN);
                }
            }
        }
        else if (contract.parmPrintSummaryOrDetail() == PayrollPrintSummaryorDetail::Summary)
        {
            if (contract.parmPrintEarningBasisDetail())
            {
                reportNameLocal = ssrsReportStr(PayrollBenefitRegister, DesignSummaryWithEarningBasis);
            }
            else
            {
                reportNameLocal = ssrsReportStr(PayrollBenefitRegister, DesignSummaryWithNoEarningBasis);
            }
        }

        return reportNameLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the report design that will show up on the report viewer based on the contract parameters.
    /// </summary>
    protected void preRunModifyContract()
    {
        this.parmReportContract().parmReportName(this.getReportName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PayrollBenefitRegisterController controller = new PayrollBenefitRegisterController();
        controller.parmReportName(ssrsReportStr(PayrollBenefitRegister, DesignDetailWithEarningBasisAndSSNORCCN));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>