<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRReturnOverride</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRReturnOverride</c> prompts users
/// for login information.
/// </summary>
abstract class MCRReturnOverride
{
    MCRReturnOverrideGroup      returnOverrideGroups;
    boolean                     suppressError;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isUserAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determins whether a user is allowed to perform a certain action.
    /// </summary>
    /// <param name="_userId">
    /// The user's ID for which this method grants or denies permission.
    /// </param>
    /// <param name="_salesTableReturn">
    /// The <c>SalesTableReturn</c> record for which the user is being
    /// authorized or not.
    /// </param>
    /// <returns>
    /// true if the user is permitted to perform the action; otherwise, false.
    /// </returns>
    public abstract boolean isUserAllowed(UserId _userId, SalesTable _salesTableReturn)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>suppressErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows or hides errors based on the passed boolean.
    /// </summary>
    /// <param name="_suppressError">
    /// A <c>boolean</c> that determines whether to show errors or not.
    /// </param>
    /// <returns>
    /// true if errors should be suppressed; otherwise, fasle.
    /// </returns>
    public boolean suppressErrors(boolean _suppressError)
    {
        suppressError = _suppressError;

        return suppressError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserLogInValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the user login.
    /// </summary>
    /// <param name="_networkAlias">
    /// The network alias of the user logging in.
    /// </param>
    /// <param name="_password">
    /// The password of the user logging in.
    /// </param>
    /// <returns>
    /// true if the user login is valid; otherwise, false.
    /// </returns>
    public static boolean isUserLogInValid(NetworkAlias _networkAlias, MCRPassword _password )
    {
        UserInfo        userInfo;

        str domain = 'LDAP://';
        System.DirectoryServices.DirectoryEntry dirEntry;

        select RecId, NetworkDomain from   userInfo
            where       userInfo.NetworkAlias == _networkAlias;

        if (!userInfo)
        {
          throw error ("@MCR20761");
        }
        domain          += userInfo.NetworkDomain;

        // Validate overriden user password
        dirEntry = new System.DirectoryServices.DirectoryEntry(domain,
                                                                _networkAlias,
                                                                _password);
        try
        {
            // The following line IS necessary as it coerces the exception on failure.
            dirEntry.get_Name();
        }
        catch (Exception::CLRError)
        {
            throw error ("@MCR10291");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchReturnOverrideLogin</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Launches a form to allow the user to enter a
    ///     user ID and password for overriding security controlled
    ///     parameters on a return.
    /// </summary>
    /// <param name="_salesTableReturn">
    /// The sales order return record being overriden.
    /// </param>
    /// <returns>
    /// The arguments of the form being launched.
    /// </returns>
    public static Args launchReturnOverrideLogin(SalesTable _salesTableReturn)
    {
        Args    args;
        FormRun FR;
        // Call user override form
        args = new Args(formStr(MCRReturnOverrideLogInDialog));
        args.record(_salesTableReturn);

        args.parm('');

        FR = classfactory.formRunClass(args);
        FR.init();
        FR.run();
        FR.wait();

        return args;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>