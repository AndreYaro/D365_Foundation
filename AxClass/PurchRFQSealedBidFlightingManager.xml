<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedBidFlightingManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchRFQSealedBidFlightingManager</c> class is used to manage sealed bid flighting.
/// </summary>
internal final class PurchRFQSealedBidFlightingManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validatePreviewIsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate Sealed bidding preview flight is enabled.
    /// </summary>
    [Hookable(false), Wrappable(false)]
    internal static void validatePreviewIsEnabled()
    {
        if(!PurchRFQSealedBidFlightingManager::isPreviewEnabled())
        {
            Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteApplicationDiagnostic(
                "@SCM:RFQSealedBidFlightNotEnabled",
                new System.Diagnostics.StackTrace().ToString());

            throw error("@SCM:RFQSealedBidFlightNotEnabled");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreviewEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the Sealed bidding preview flight is enabled.
    /// </summary>
    /// <returns>true if the the Sealed bidding preview flight is enabled; otherwise, false.</returns>
    [Hookable(false), Wrappable(false)]
    public static boolean isPreviewEnabled()
    {
        return RetailDeploymentUtility::getCurrentCloud() != RetailDeploymentUtility::AzureChina &&
               RetailDeploymentUtility::getCurrentCloud() != RetailDeploymentUtility::AzureUSGov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSealedBiddingSpecificControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevent displaying sealed bidding specific controls if flight is not enabled.
    /// </summary>
    /// <param name = "_formRun">The instance of the form.</param>
    [Hookable(false), Wrappable(false)]
    internal static void initSealedBiddingSpecificControl(FormRun _formRun)
    {
        if (PurchRFQSealedBidFlightingManager::isPreviewEnabled())
        {
            Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteApplicationDiagnostic(
                "Sealed bidding specific controls are enabled.",
                new System.Diagnostics.StackTrace().ToString());

            return;
        }

        switch (_formRun.form().name())
        {
            case formStr(PurchRFQSolicitationType):
                PurchRFQSealedBidFlightingManager::initPurchRFQSolicitationTypeForm(_formRun);

                break;

            case formStr(PurchRFQCaseTableListPage):
                _formRun.design().controlName(formControlStr(PurchRFQCaseTableListPage, UnsealBids)).visible(false);

                break;

            case formStr(PurchRFQCaseTable):
                PurchRFQSealedBidFlightingManager::initPurchRFQCaseTableForm(_formRun);

                break;

            case formStr(PurchRFQReplyTableListPage):
                _formRun.design().controlName(formControlStr(PurchRFQReplyTableListPage, PurchRFQReplyEncryptionAuditLog)).visible(false);

                break;

            case formStr(PurchRFQReplyTable):
                PurchRFQSealedBidFlightingManager::initPurchRFQReplyTable(_formRun);

                break;

            case formStr(PurchRFQVendReply):
                PurchRFQSealedBidFlightingManager::initPurchRFQVendReply(_formRun);

                break;

            case formStr(SrmParameters):
                PurchRFQSealedBidFlightingManager::initSrmParameters(_formRun);

                break;

            case formStr(KeyVaultParameters):
                PurchRFQSealedBidFlightingManager::initKeyVaultParameters(_formRun);

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchRFQSolicitationTypeForm</Name>
				<Source><![CDATA[
    private static void initPurchRFQSolicitationTypeForm(FormRun _formRun)
    {
        FormComboBoxControl purchRFQSolicitationType_DefaultBidType = _formRun.design()
                                                                              .controlName(formControlStr(PurchRFQSolicitationType, PurchRFQSolicitationType_DefaultBidType))
                                                                              as FormComboBoxControl;

        purchRFQSolicitationType_DefaultBidType.selection(PurchRFQBidType::Open);
        purchRFQSolicitationType_DefaultBidType.enabled(false);

    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchRFQCaseTableForm</Name>
				<Source><![CDATA[
    private static void initPurchRFQCaseTableForm(FormRun _formRun)
    {
        _formRun.design().controlName(formControlStr(PurchRFQCaseTable, UnsealBids)).visible(false);
        _formRun.design().controlName(formControlStr(PurchRFQCaseTable, SealedHeader)).visible(false);
        _formRun.design().controlName(formControlStr(PurchRFQCaseTable, IsSealedHeader)).visible(false);
        _formRun.design().controlName(formControlStr(PurchRFQCaseTable, PurchRFQCaseTable_UnsealedDateTimeHeader)).visible(false);


        FormComboBoxControl rFQInfo_BidTypeHeader = _formRun.design()
                                                            .controlName(formControlStr(PurchRFQCaseTable, RFQInfo_BidTypeHeader))
                                                            as FormComboBoxControl;

        rFQInfo_BidTypeHeader.selection(PurchRFQBidType::Open);
        rFQInfo_BidTypeHeader.enabled(false);

    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchRFQReplyTable</Name>
				<Source><![CDATA[
    private static void initPurchRFQReplyTable(FormRun _formRun)
    {
        _formRun.design().controlName(formControlStr(PurchRFQReplyTable, PurchRFQReplyEncryptionAuditLog)).visible(false);
        _formRun.design().controlName(formControlStr(PurchRFQReplyTable, RFQSealedMessageLineView)).visible(false);
        _formRun.design().controlName(formControlStr(PurchRFQReplyTable, PurchRFQCaseTable_IsSealed)).visible(false);
        _formRun.design().controlName(formControlStr(PurchRFQReplyTable, IsSealed)).visible(false);
        _formRun.design().controlName(formControlStr(PurchRFQReplyTable, RFQSealedMessageHeaderView)).visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchRFQVendReply</Name>
				<Source><![CDATA[
    private static void initPurchRFQVendReply(FormRun _formRun)
    {
        _formRun.design().controlName(formControlStr(PurchRFQVendReply, PurchRFQReplyEncryptionAuditLog)).visible(false);
        _formRun.design().controlName(formControlStr(PurchRFQVendReply, MainGrid_PurchRFQCaseTable_IsSealed)).visible(false);
        _formRun.design().controlName(formControlStr(PurchRFQVendReply, HeaderView_PurchRFQCaseTable_IsSealed)).visible(false);
        _formRun.design().controlName(formControlStr(PurchRFQVendReply, BiddingInstructionTabPage)).visible(false);
        _formRun.design().controlName(formControlStr(PurchRFQVendReply, BiddingInstructionText)).visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSrmParameters</Name>
				<Source><![CDATA[
    private static void initSrmParameters(FormRun _formRun)
    {
        FormComboBoxControl rfqPrameters_DefaultBidType = _formRun.design()
                                                                  .controlName(formControlStr(SrmParameters, PurchRFQParameters_DefaultBidType))
                                                                  as FormComboBoxControl;

        rfqPrameters_DefaultBidType.selection(PurchRFQBidType::Open);
        rfqPrameters_DefaultBidType.enabled(false);

        FormDataSource keyVaultParameters_ds = _formRun.dataSource(formDataSourceStr(SrmParameters, PurchRFQParameters)) as FormDataSource;
        keyVaultParameters_ds.object(fieldNum(PurchRFQParameters, SealedBidEncryptionKeyExpirationDayOffset)).visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initKeyVaultParameters</Name>
				<Source><![CDATA[
    private static void initKeyVaultParameters(FormRun _formRun)
    {
        FormDataSource keyVaultParameters_ds = _formRun.dataSource(formDataSourceStr(KeyVaultParameters, KeyVaultParameters)) as FormDataSource;
        keyVaultParameters_ds.object(fieldNum(KeyVaultParameters, EnabledForSealedBidding)).visible(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>