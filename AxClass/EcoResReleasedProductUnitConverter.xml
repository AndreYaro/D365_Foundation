<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResReleasedProductUnitConverter</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EcoResReleasedProductUnitConverter
{
    EcoResProductRecId      productCached;
    EcoResProductRecId      fallbackProductMaster;
    ItemId                  itemIdCached;
    InventDimId             inventDimIdCached;
    DataAreaId              dataAreaIdCached;
    PartitionKey            partitionCached;
    boolean                 canResolveVariantCached;
    UnknownNoYes            isVariantUnitConversionEnabledCached;
    UnitOfMeasureConverter  unitOfMeasureConverterCached;
    boolean                 skipProductMasterCheck;
    boolean                 skipException;
    
    // Static cache
    private static Map      unitRecIdByUnitSymbols = new Map(Types::String, Types::Int64);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeConvertedGivenUnitSymbols</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether one unit of measure can be converted to another unit of measure.
    /// </summary>
    /// <param name="_fromUnitOfMeasure">
    ///    A unit of measure ID from which to convert.
    /// </param>
    /// <param name="_toUnitOfMeasure">
    ///    A unit of measure ID to which to convert.
    /// </param>
    /// <param name="_itemId">
    ///    An Item ID value.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value which is used to resolve the proper product variant or distinct product reference.
    /// </param>
    /// <returns>
    ///    true if the unit of measure to convert from can be converted to the unit of measure to which to
    ///    convert; otherwise, false.
    /// </returns>
    public boolean canBeConvertedGivenUnitSymbols(
        UnitOfMeasureSymbol     _fromUnitOfMeasure,
        UnitOfMeasureSymbol     _toUnitOfMeasure,
        ItemId                  _itemId,
        InventDimId             _inventDimId)
    {
        return this.canBeConverted(
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_fromUnitOfMeasure),
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_toUnitOfMeasure),
            _itemId,
            _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeConverted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether one unit of measure can be converted to another unit of measure.
    /// </summary>
    /// <param name="_fromUnitOfMeasure">
    ///    A unit of measure ID from which to convert.
    /// </param>
    /// <param name="_toUnitOfMeasure">
    ///    A unit of measure ID to which to convert.
    /// </param>
    /// <param name="_itemId">
    ///    An Item ID value.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value which is used to resolve the proper product variant or distinct product reference.
    /// </param>
    /// <returns>
    ///    true if the unit of measure to convert from can be converted to the unit of measure to which to
    ///    convert; otherwise, false.
    /// </returns>
    public boolean canBeConverted(
        UnitOfMeasureFromRecId  _fromUnitOfMeasure,
        UnitOfMeasureToRecId    _toUnitOfMeasure,
        ItemId                  _itemId,
        InventDimId             _inventDimId)
    {
        if (UnitOfMeasureConverter::canBeConvertedWithoutLookup(_fromUnitOfMeasure, _toUnitOfMeasure))
        {
            return true;
        }

        this.initUnitConverter(_fromUnitOfMeasure, _toUnitOfMeasure, _itemId, _inventDimId);

        return unitOfMeasureConverterCached.canValueBeConverted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cachedConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>UnitOfMeasureConversionCache</c> object containing cached conversions.
    /// </summary>
    /// <returns>
    ///  The <c>UnitOfMeasureConversionCache</c> object.
    /// </returns>
    public UnitOfMeasureConversionCache cachedConversion()
    {
        if (unitOfMeasureConverterCached != null)
        {
            return unitOfMeasureConverterCached.cachedConversion();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canResolveProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether product variant can be resolved using the supplied data.
    /// </summary>
    /// <param name="_itemId">
    /// ID of the item to resolve.
    /// </param>
    /// <param name="_inventDim">
    /// Inventory dimensions to resolve.
    /// </param>
    /// <returns>
    /// True if product variant can be resolved; otherwise, false.
    /// </returns>
    public boolean canResolveProductVariant(ItemId _itemId, InventDim _inventDim)
    {
        if (!this.isEqualWithCachedVariables(_itemId, _inventDim.inventDimId))
        {
            this.setCachedVariables(_itemId, _inventDim);
        }

        return canResolveVariantCached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears cached values.
    /// </summary>
    /// <param name="_args"></param>
    [PostHandlerFor(classStr(SysTestCleanup), staticMethodStr(SysTestCleanup, ClearGlobalObjectCache))]
    public static void clearCache(XppPrePostArgs _args)
    {
        unitRecIdByUnitSymbols = new Map(Types::String, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnitRecIdBySymbol</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record id for a <c>UnitOfMeasure</c> record.
    /// </summary>
    /// <param name="_unitId">
    ///    An unit of measure symbol.
    /// </param>
    /// <returns>
    ///    The record id of the <c>UnitOfMeasure</c> record; otherwise, zero.
    /// </returns>
    public static UnitOfMeasureRecId findUnitRecIdBySymbol(UnitOfMeasureSymbol _unitId)
    {
        str key = appl.partitionKey()+';'+_unitId;
        UnitOfMeasureRecId unitRecId;

        if (unitRecIdByUnitSymbols.exists(key))
        {
            unitRecId = unitRecIdByUnitSymbols.lookup(key);
        }
        else
        {
            unitRecId = UnitOfMeasure::findBySymbol(_unitId).RecId;
            unitRecIdByUnitSymbols.insert(key, unitRecId);
        }

        return unitRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertGivenUnitSymbols</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a quantity of an item measured in one unit of measure to the quantity of the item measured in another unit of measure.
    /// </summary>
    /// <param name="_value">
    /// A real value measured in the unit of measure to convert from.
    /// </param>
    /// <param name="_fromUnitId">
    /// A unit of measure symbol to convert from.
    /// </param>
    /// <param name="_toUnitId">
    /// A unit of measure symbol to convert to.
    /// </param>
    /// <param name="_roundAbsoluteValue">
    /// A Boolean parameter that specifies if the absolute value should be rounded.
    /// </param>
    /// <param name="_itemId">
    /// An item ID value.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value which is used to resolve the proper product variant or distinct product reference.
    /// </param>
    /// <param name="_applyRounding">
    /// A Boolean parameter that specifies if rounding should be applied.
    /// </param>
    /// <returns>
    /// The quantity of the item measured in another unit of measure.
    /// </returns>
    public real convertGivenUnitSymbols(
        Qty                 _qty,
        UnitOfMeasureSymbol _fromUnitId,
        UnitOfMeasureSymbol _toUnitId,
        NoYes               _roundAbsoluteValue,
        ItemId              _itemId,
        InventDimId         _inventDimId = '',
        NoYes               _applyRounding = NoYes::Yes)
    {
        return this.convert(
            _qty,
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_fromUnitId),
            EcoResReleasedProductUnitConverter::findUnitRecIdBySymbol(_toUnitId),
            _roundAbsoluteValue,
            _itemId,
            _inventDimId,
            _applyRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a real value measured in one unit of measure to the real value measured in another unit of measure.
    /// </summary>
    /// <param name="_value">
    /// A real value measured in the unit of measure to convert from.
    /// </param>
    /// <param name="_fromUnitOfMeasure">
    /// A unit of measure ID to convert from.
    /// </param>
    /// <param name="_toUnitOfMeasure">
    /// A unit of measure ID to convert to.
    /// </param>
    /// <param name="_roundAbsoluteValue">
    /// A Boolean parameter that specifies if the absolute value should be rounded.
    /// </param>
    /// <param name="_itemId">
    /// An item ID value.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value which is used to resolve the proper product variant or distinct product reference.
    /// </param>
    /// <param name="_applyRounding">
    /// A Boolean parameter that specifies if rounding should be applied.
    /// </param>
    /// <returns>
    /// A real value measured in the unit of measure to convert to.
    /// </returns>
    public real convert(
        real                    _value,
        UnitOfMeasureFromRecId  _fromUnitOfMeasure,
        UnitOfMeasureToRecId    _toUnitOfMeasure,
        NoYes                   _roundAbsoluteValue,
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        NoYes                   _applyRounding = NoYes::Yes)
    {
        if (!UnitOfMeasureConverter::isConversionNeeded(_fromUnitOfMeasure, _toUnitOfMeasure, _applyRounding))
        {
            return _value;
        }

        this.initUnitConverter(_fromUnitOfMeasure, _toUnitOfMeasure, _itemId, _inventDimId, _roundAbsoluteValue, _applyRounding);

        return unitOfMeasureConverterCached.convertValue(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureUnitConverter</Name>
				<Source><![CDATA[
    private void ensureUnitConverter(
        UnitOfMeasureFromRecId  _fromUnitOfMeasure,
        UnitOfMeasureToRecId    _toUnitOfMeasure)
    {
        if (!unitOfMeasureConverterCached
            || unitOfMeasureConverterCached.parmFromUnitOfMeasure() != _fromUnitOfMeasure
            || unitOfMeasureConverterCached.parmToUnitOfMeasure() != _toUnitOfMeasure)
        {
            unitOfMeasureConverterCached = UnitOfMeasureConverter::newFromConversionParameters(
                _fromUnitOfMeasure,
                _toUnitOfMeasure,
                NoYes::No,
                productCached);

            if (this.isFallbackToProductMasterApplicable())
            {
                var unitOfMeasureConverter_Product = unitOfMeasureConverterCached as UnitOfMeasureConverter_Product;

                if (unitOfMeasureConverter_Product != null)
                {
                    unitOfMeasureConverter_Product.parmFallbackToProductMaster(fallbackProductMaster);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFallbackToProductMasterApplicable</Name>
				<Source><![CDATA[
    private boolean isFallbackToProductMasterApplicable()
    {
        return fallbackProductMaster != 0 && EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipProductMasterCheck</Name>
				<Source><![CDATA[
    public boolean parmSkipProductMasterCheck(boolean _skipProductMasterCheck = skipProductMasterCheck)
    {
        skipProductMasterCheck = _skipProductMasterCheck;

        return skipProductMasterCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipException</Name>
				<Source><![CDATA[
    /// <summary>
    /// When parameter <c>_skipException</c> is true then exceptions will not be generated when converting value.
    /// </summary>
    /// <param name = "_skipException">A Boolean parameter that specifies if exception should be skipped; optional.</param>
    /// <returns>true if the exception should be skipped; otherwise, false.</returns>
    public boolean parmSkipException(boolean _skipException = skipException)
    {
        skipException = _skipException;
        return skipException;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnitConverter</Name>
				<Source><![CDATA[
    private void initUnitConverter(
        UnitOfMeasureFromRecId  _fromUnitOfMeasure,
        UnitOfMeasureToRecId    _toUnitOfMeasure,
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        NoYes                   _roundAbsoluteValue = NoYes::No,
        NoYes                   _applyRounding = NoYes::Yes)
    {
        this.resolveProduct(_itemId, _inventDimId);

        if (!skipProductMasterCheck
            && (isVariantUnitConversionEnabledCached == UnknownNoYes::Unknown || !canResolveVariantCached)
            && !UnitOfMeasureConverter::canBeConvertedWithoutLookup(_fromUnitOfMeasure, _toUnitOfMeasure))
        {
            UnitOfMeasureProductMasterCheck::construct().validateWithException(productCached);
        }

        this.ensureUnitConverter(_fromUnitOfMeasure, _toUnitOfMeasure);

        unitOfMeasureConverterCached.parmRoundAbsoluteValue(_roundAbsoluteValue);
        unitOfMeasureConverterCached.parmApplyRounding(_applyRounding);

        unitOfMeasureConverterCached.parmSkipException_LV(skipException);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEqualWithCachedVariables</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the internally cached values are equal to the specified values.
    /// </summary>
    /// <param name="_itemId">
    ///    An Item ID value.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value which is used to resolve the proper product variant or distinct product reference.
    /// </param>
    /// <returns>
    ///    true if the internally cached values are equal to the specified values; otherwise, false.
    /// </returns>
    protected boolean isEqualWithCachedVariables(ItemId _itemId, InventDimId _inventDimId)
    {
        return itemIdCached == _itemId
            && inventDimIdCached == _inventDimId
            && dataAreaIdCached == curExt()
            && partitionCached == appl.partitionKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.updateCachedVariables('', '', false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveProduct</Name>
				<Source><![CDATA[
    protected EcoResProductRecId resolveProduct(ItemId _itemId, InventDimId _inventDimId)
    {
        if (!this.isEqualWithCachedVariables(_itemId, _inventDimId))
        {
            InventDim inventDim = InventDim::find(_inventDimId);
            this.setCachedVariables(_itemId, inventDim);
        }

        return productCached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCachedVariables</Name>
				<Source><![CDATA[
    private void setCachedVariables(ItemId _itemId, InventDim _inventDim)
    {      
        fallbackProductMaster   = 0;
        productCached           = 0;
        UnknownNoYes isProductVariantUnitConversionEnabled = UnknownNoYes::Unknown;
        InventTable inventTable = InventTable::find(_itemId);

        if (_inventDim.inventDimId != '' && _inventDim.inventDimId != InventDim::inventDimIdBlank())
        {
            isProductVariantUnitConversionEnabled = inventTable.isProductVariantUnitConversionEnabled() ? UnknownNoYes::Yes : UnknownNoYes::No;
            if (isProductVariantUnitConversionEnabled == UnknownNoYes::Yes)
            {
                productCached = InventDimCombination::findByInventDim(_itemId, _inventDim).DistinctProductVariant;
                this.updateCachedVariables(_itemId, _inventDim.inventDimId, productCached ? true : false);
                fallbackProductMaster = inventTable.Product;
            }
        }
        if (!productCached)
        {
            productCached = inventTable.Product;
            this.updateCachedVariables(_itemId, _inventDim.inventDimId, false);
        }

        isVariantUnitConversionEnabledCached = isProductVariantUnitConversionEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryConvert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to converts a real value measured in one unit of measure to the real value measured in another unit of measure.
    /// </summary>
    /// <param name="_value">
    /// A real value measured in the unit of measure to convert from.
    /// </param>
    /// <param name="_fromUnitOfMeasure">
    /// A unit of measure ID to convert from.
    /// </param>
    /// <param name="_toUnitOfMeasure">
    /// A unit of measure ID to convert to.
    /// </param>
    /// <param name="_roundAbsoluteValue">
    /// A Boolean parameter that specifies if the absolute value should be rounded.
    /// </param>
    /// <param name="_itemId">
    /// An item ID value.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value which is used to resolve the proper product variant or distinct product reference.
    /// </param>
    /// <param name="_applyRounding">
    /// A Boolean parameter that specifies if rounding should be applied.
    /// </param>
    /// <returns>
    /// A container that contains a Boolean result which indicates whether the conversion is possible
    /// and a real value measured in the unit of measure to convert to.
    /// </returns>
    public container tryConvert(
        real                    _value,
        UnitOfMeasureFromRecId  _fromUnitOfMeasure,
        UnitOfMeasureToRecId    _toUnitOfMeasure,
        NoYes                   _roundAbsoluteValue,
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        NoYes                   _applyRounding = NoYes::Yes)
    {
        if (!UnitOfMeasureConverter::isConversionNeeded(_fromUnitOfMeasure, _toUnitOfMeasure, _applyRounding))
        {
            return [true, _value];
        }

        this.initUnitConverter(_fromUnitOfMeasure, _toUnitOfMeasure, _itemId, _inventDimId, _roundAbsoluteValue, _applyRounding);

        if (unitOfMeasureConverterCached.canValueBeConverted())
        {
            return [true, unitOfMeasureConverterCached.convertValue(_value)];
        }

        return [false, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCachedVariables</Name>
				<Source><![CDATA[
    private void updateCachedVariables(ItemId _itemId, InventDimId _inventDimId, boolean _canResolveVariant)
    {
        itemIdCached                            = _itemId;
        inventDimIdCached                       = _inventDimId;
        canResolveVariantCached                 = _canResolveVariant;
        unitOfMeasureConverterCached            = null;
        isVariantUnitConversionEnabledCached    = UnknownNoYes::Unknown;
        dataAreaIdCached                        = curExt();
        partitionCached                         = appl.partitionKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResReleasedProductUnitConverter construct()
    {
        return new EcoResReleasedProductUnitConverter();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>