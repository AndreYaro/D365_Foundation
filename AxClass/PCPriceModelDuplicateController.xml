<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCPriceModelDuplicateController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A controller for service operation <c>PCPriceModelDuplicateService</c> class.
/// </summary>
class PCPriceModelDuplicateController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PCPriceModelDuplicateController</c> class.
    /// </summary>
    /// <param name="_args">
    /// The _args are passed on to the constructor of <c>PCPriceModelDuplicateController</c> class.
    /// </param>
    /// <returns>
    /// The new instance of the <c>PCPriceModelDuplicateController</c> class.
    /// </returns>
    public static SysOperationController construct(Args _args)
    {
        SysOperationController controller;

        controller = new PCPriceModelDuplicateController(
            classStr(PCPriceModelDuplicateService),
            methodStr(PCPriceModelDuplicateService, duplicatePriceModel),
            SysOperationExecutionMode::Synchronous);

        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args _args)
    {
        PCPriceModelDuplicateController priceModelDuplicateController;
        PCPriceModel                    priceModel;
        PCPriceModelName                newPriceModelName;
        FormDataSource                  formDataSourcePriceModel;
        PCPriceModelDuplicateContract   contract;

        if ((_args == null) || (_args.record() == null || !(_args.record() is PCPriceModel)))
        {
            throw error(Error::missingRecord(tableId2Name(tableNum(PCPriceModel))));
        }

        priceModel          = _args.record();
        newPriceModelName   = strFmt('%1%2', "@SYS127600", priceModel.Name);

        priceModelDuplicateController = PCPriceModelDuplicateController::construct(_args);

        contract = priceModelDuplicateController.getDataContractObject('_dataContract');
        contract.parmPriceModel(priceModel.RecId);
        contract.parmPriceModelName(newPriceModelName);

        priceModelDuplicateController.run();

        if (_args.caller() && FormDataUtil::getFormDataSource(_args.record()))
        {
            formDataSourcePriceModel = FormDataUtil::getFormDataSource(_args.record());
            formDataSourcePriceModel.research(false);
            formDataSourcePriceModel.setRecord(PCPriceModel::findByName(newPriceModelName, priceModel.ProductConfigurationModel));
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>