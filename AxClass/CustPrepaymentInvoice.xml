<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPrepaymentInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustPrepaymentInvoice</c> class is responsible for managing prepayment invoices in a sales system.
/// Additionally, it includes functionality for validating prepayment applications and populating the tmp table with prepayment invoices to be applied.
/// </summary>
internal final class CustPrepaymentInvoice
{
    private CustPrepaymentCustInvoice custPrepaymentCustInvoice;
    private SalesTable salesTable;
    private boolean isInvoicePosted;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CustPrepaymentInvoice construct(boolean _isPrepaymentApplication)
    {
        CustPrepaymentInvoice instance;

        if (_isPrepaymentApplication)
        {
            instance = new CustPrepaymentInvoice();
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to apply and remove prepayment to the orders
    /// </summary>
    /// <param name = "_standardInvoiceRecId">
    /// The record ID of the invoice on which prepayment is to be applied.
    /// </param>
    /// <param name = "_appliedPrepaymentInvoiceRecId">
    /// The record ID of the prepayment invoice to be applied.
    /// </param>
    /// <param name = "_updateTransMarked">
    /// The boolean value to update the transaction marked.
    /// </param>
    /// <param name = "_tableId">
    /// The table ID of the invoice.
    /// </param>
    /// <param name = "_settlementPostingDate">
    /// The settlement posting date of prepayment application; optional.
    /// </param>
    internal void updateTransMarked(RecId _standardInvoiceRecId, RecId _appliedPrepaymentInvoiceRecId, NoYes _updateTransMarked, RefTableId _tableId , TransDate _settlementPostingDate = dateNull())
    {
        if (_updateTransMarked == NoYes::No)
        {
            ttsbegin;

            this.deleteCustPrepaymentCustInvoice(_standardInvoiceRecId, _appliedPrepaymentInvoiceRecId, _tableId);

            ttscommit;
        }
        else
        {
            if (_standardInvoiceRecId && _appliedPrepaymentInvoiceRecId)
            {
                ttsbegin;

                this.insertCustPrepaymentCustInvoice(_standardInvoiceRecId, _appliedPrepaymentInvoiceRecId, _tableId, _settlementPostingDate);

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustPrepaymentCustInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts in the <c>CustPrepaymentCustInvoice</c> table.
    /// </summary>
    /// <param name="_standardInvoiceId">
    /// The record ID of the invoice on which advance is to be applied.
    /// </param>
    /// <param name="_prepaymentInvoiceId">
    /// The record ID of the prepayment invoice to which it is to be applied.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the invoice.
    /// </param>
    /// <param name="_settlementPostingDate">
    /// The settlement posting date of prepayment application; optional.
    /// </param>
    internal void insertCustPrepaymentCustInvoice(RecId _standardInvoiceId, RecId _prepaymentInvoiceId, RefTableId _tableId , TransDate _settlementPostingDate = dateNull())
    {
        CustPrepaymentCustInvoice::insertPrepaymentApplicationTrans(_standardInvoiceId, _prepaymentInvoiceId, _tableId , _settlementPostingDate, isInvoicePosted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustPrepaymentCustInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>CustPrepaymentCustInvoice</c> records that are unmarked
    /// </summary>
    /// <param name="_standardInvoiceId">
    /// The record ID of a invoice to which the prepayment invoice is to be applied.
    /// </param>
    /// <param name="_prepaymentInvoiceId">
    /// The record ID of the prepayment invoice to be applied.
    /// </param>
    /// <param name="_tableid">
    /// The table ID of the invoice.
    /// </param>
    internal void deleteCustPrepaymentCustInvoice(RecId _standardInvoiceId, RecId _prepaymentInvoiceId, RefTableId _tableid)
    {
        if (!isInvoicePosted)
        {
            CustPrepaymentCustInvoice::deleteRefEntry(_standardInvoiceId, _prepaymentInvoiceId, _tableid);
        }
        else
        {
            CustPrepaymentCustInvoice::deleteInvoiceRefEntry(_standardInvoiceId, _prepaymentInvoiceId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdvanceApplicationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates amount against a respective <c>CustPrepaymentCustInvoice</c> record.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The record ID of invoice on which advance is to be applied.
    /// </param>
    /// <param name="_appliedPrepaymentInvoice">
    /// The record ID of the prepayment to be applied.
    /// </param>
    /// <param name="_appliedAmount">
    /// The applied prepayment amount to be updated.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the invoice.
    /// </param>
    internal void updateAdvanceApplicationAmount(RecId _sourceRecId, RecId _appliedPrepaymentInvoice, AmountCur _appliedAmount, RefTableId _tableId)
    {
        ttsBegin;

        CustPrepaymentCustInvoice::updateAdvanceAppliedAmount(_appliedPrepaymentInvoice, _sourceRecId, _appliedAmount, _tableId, isInvoicePosted);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPosted</Name>
				<Source><![CDATA[
    internal boolean parmIsPosted(boolean _isInvoicePosted)
    {
        isInvoicePosted = _isInvoicePosted;
        return isInvoicePosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInvoicesForInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to post and settle applied prepayment invoices for invoice journal.
    /// </summary>
    internal void postInvoicesForInvoiceJour()
    {
        CustPrepaymentCustInvoice custPrepaymentCustInvoiceLoc;
        CustPrepaymentHandler prepaymentHandler;

        while select forupdate custPrepaymentCustInvoiceLoc where custPrepaymentCustInvoiceLoc.CustInvoiceJour > 0
        {
            CustInvoiceJour custInvoiceJour;
            select custInvoiceJour where custInvoiceJour.RecId == custPrepaymentCustInvoiceLoc.CustInvoiceJour;

            prepaymentHandler = new CustPrepaymentHandler(custInvoiceJour.InvoiceAccount);

            CustPrepaymentInvoiceTable custPrepaymentInvoiceTable;
            select forupdate custPrepaymentInvoiceTable where custPrepaymentInvoiceTable.RecId == custPrepaymentCustInvoiceLoc.CustPrepaymentInvoiceTable;

            try
            {
                prepaymentHandler.handlePostingPrepayment(custInvoiceJour, custPrepaymentInvoiceTable, custPrepaymentCustInvoiceLoc);
            }
            catch (Exception::Error)
            {
                warning(strFmt("@AccountsReceivable:PrepaymentApplicationFailed", custInvoiceJour.InvoiceId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesOrderApplicablePrepaymentInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the tmp table with prepayment invoices to be applied
    /// First find the prepayment invoice that are direct related to the sales order
    /// Then find the prepayment invoice that are related to the customer account with same currecny code
    /// whose sales order is already invoiced
    /// </summary>
    /// <param name = "_salesTable">
    /// The object of <c>SalesTable</c>
    /// </param>
    /// <param name = "_set">
    /// The boolean value to validate if the caller is from sales order or journal
    /// </param>
    /// <param name = "_custInvoiceJour">
    /// The object of <c>CustInvoiceJour</c>
    /// </param>
    /// <returns>tmpSalesPrepaymentInvoice</returns>
    internal tmpSalesPrepaymentInvoice populateSalesOrderApplicablePrepaymentInvoice(SalesTable _salesTable, boolean _set = false, CustInvoiceJour _custInvoiceJour = null)
    {
        tmpSalesPrepaymentInvoice tmpSalesPrepaymentInvoice;

        if (!_salesTable)
        {
            return tmpSalesPrepaymentInvoice;
        }

        if (_salesTable.SalesStatus == SalesStatus::Invoiced && !_set)
        {
            return tmpSalesPrepaymentInvoice;
        }

        CustPrepaymentInvoiceTable custPrepaymentInvoiceTable;
        CustPrepaymentInvoiceTable custPrepaymentInvoiceTableOpen;
        SalesTable salesTableLoc;

        while select custPrepaymentInvoiceTable where custPrepaymentInvoiceTable.Type == PrepaymentInvoiceType::Common
                                                && custPrepaymentInvoiceTable.SettleAmountCur > 0
                                                && custPrepaymentInvoiceTable.SettleAmountCur == custPrepaymentInvoiceTable.InvoiceAmount
                                                && custPrepaymentInvoiceTable.RemainAmountCur > 0
                                                && custPrepaymentInvoiceTable.Status == CustPrepaymentInvoiceStatus::Received
                                                && custPrepaymentInvoiceTable.SalesId == _salesTable.SalesId
        {
            this.initTmpSalesPrepaymentInvoice(_salesTable, _custInvoiceJour, custPrepaymentInvoiceTable, tmpSalesPrepaymentInvoice);
        }

        while select custPrepaymentInvoiceTableOpen where custPrepaymentInvoiceTableOpen.Type == PrepaymentInvoiceType::Common
                                            && custPrepaymentInvoiceTableOpen.SettleAmountCur > 0
                                            && custPrepaymentInvoiceTableOpen.SettleAmountCur == custPrepaymentInvoiceTableOpen.InvoiceAmount
                                            && custPrepaymentInvoiceTableOpen.RemainAmountCur > 0
                                            && custPrepaymentInvoiceTableOpen.InvoiceAccount == _salesTable.InvoiceAccount
                                            && custPrepaymentInvoiceTableOpen.Status == CustPrepaymentInvoiceStatus::Received
                                            && custPrepaymentInvoiceTableOpen.CurrencyCode == _salesTable.CurrencyCode
            join salesTableLoc
            where salesTableLoc.SalesId == custPrepaymentInvoiceTableOpen.SalesId
            && salesTableLoc.CustAccount == custPrepaymentInvoiceTableOpen.InvoiceAccount
            && salesTableLoc.SalesStatus == SalesStatus::Invoiced
           {
               if (custPrepaymentInvoiceTableOpen.SalesId != _salesTable.SalesId)
               {
                   this.initTmpSalesPrepaymentInvoice(_salesTable, _custInvoiceJour, custPrepaymentInvoiceTableOpen, tmpSalesPrepaymentInvoice);
               }
           }

        return tmpSalesPrepaymentInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrepaymentNotAlreadyApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to validate the prepayment is not already applied
    /// </summary>
    /// <param name = "_custPrepaymentInvoiceTable">
    /// The object of <c>CustPrepaymentInvoiceTable</c>
    /// </param>
    /// <returns>boolean</returns>
    internal boolean validatePrepaymentNotAlreadyApplied(CustPrepaymentInvoiceTable _custPrepaymentInvoiceTable)
    {
        return CustPrepaymentCustInvoice::findPrepaymentRelationExists(_custPrepaymentInvoiceTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateJournalApplicablePrepaymentInvoice</Name>
				<Source><![CDATA[
    internal tmpSalesPrepaymentInvoice populateJournalApplicablePrepaymentInvoice(CustInvoiceJour _custInvoiceJour)
    {
        tmpSalesPrepaymentInvoice tmpSalesPrepaymentInvoice;

        if (!_custInvoiceJour)
        {
            return tmpSalesPrepaymentInvoice;
        }

        SalesTable salesTableLoc = _custInvoiceJour.salesTable(); 

        return this.populateSalesOrderApplicablePrepaymentInvoice(salesTableLoc, true, _custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateGERReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to generate GER report for prepayment invoice.
    /// </summary>
    /// <param name = "_custPrepaymentInvoiceTable">Object of <c>CustPrepaymentInviceTable</c></param>
    internal static void generateGERReport(CustPrepaymentInvoiceTable _custPrepaymentInvoiceTable)
    {
        CustInvoiceJour custInvoiceJourLoc;
        ERModelDefinitionDatabaseContext context = new ERModelDefinitionDatabaseContext();

        select firstonly RecId from custInvoiceJourLoc where custInvoiceJourLoc.InvoiceId == _custPrepaymentInvoiceTable.InvoiceId
                && custInvoiceJourLoc.LedgerVoucher == _custPrepaymentInvoiceTable.Voucher;

        if (custInvoiceJourLoc.RecId)
        {
            context.addValue(tableNum(CustInvoiceJour), fieldNum(CustInvoiceJour, RecId), custInvoiceJourLoc.RecId);

            SalesParameters salesParameters = SalesParameters::find();

            ERObjectsFactory::createFormatMappingRunByFormatMappingId(salesParameters.ERFormatMappingPrepaymentInvoice)
                .withParameter(context)
                .run();
        }
        else
        {
            throw error("@AccountsReceivable:PrepaymentInvoicePrintError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpSalesPrepaymentInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method populates the tmp table with prepayment invoices to be applied
    /// Fetch the <c>CustPrepaymentCustInvoice</c> entry for the current selected record
    /// If there is no entry then validate the prepayment is not already applied
    /// Populate the tmp table with the prepayment invoice details
    /// </summary>
    /// <param name = "_salesTable">
    /// The object of SalesTable
    /// </param>
    /// <param name = "_custInvoiceJour">
    /// The object of CustInvoiceJour
    /// </param>
    /// <param name = "_custPrepaymentInvoice">
    /// The object of CustPrepaymentInvoiceTable
    /// </param>
    /// <param name = "_tmpSalesPrepaymentInvoice">
    /// The object of tmpSalesPrepaymentInvoice
    /// </param>
    internal void initTmpSalesPrepaymentInvoice(SalesTable _salesTable, CustInvoiceJour _custInvoiceJour, CustPrepaymentInvoiceTable _custPrepaymentInvoice, tmpSalesPrepaymentInvoice _tmpSalesPrepaymentInvoice)
    {
        CustPrepaymentCustInvoice custPrepaymentCustInvoiceLoc;
        tmpSalesPrepaymentInvoice tmpSalesPrepaymentInvoice;
        
        if (isInvoicePosted)
        {
            custPrepaymentCustInvoiceLoc = CustPrepaymentCustInvoice::findByInvoiceJourIdPrepaymentInvoiceId(_custInvoiceJour.RecId, _custPrepaymentInvoice.RecId);
        }
        else
        {
            custPrepaymentCustInvoiceLoc = CustPrepaymentCustInvoice::findByRecIdPrepaymentInvoiceId(_salesTable.RecId, _custPrepaymentInvoice.RecId, _salesTable.TableId);
        }

        if (!custPrepaymentCustInvoiceLoc && this.validatePrepaymentNotAlreadyApplied(_custPrepaymentInvoice))
        {
            return;
        }
        else
        {
            _tmpSalesPrepaymentInvoice.initPrepaymentInvoice(_custPrepaymentInvoice, custPrepaymentCustInvoiceLoc);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>