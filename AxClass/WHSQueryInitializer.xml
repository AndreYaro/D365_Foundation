<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSQueryInitializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSQueryInitializer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeDataSource</Name>
				<Source><![CDATA[
    internal static boolean initializeDataSource(QueryBuildDataSource _expectedQbds, QueryBuildDataSource _actualQbds)
    {
        if (_expectedQbds.table() != _actualQbds.table())
        {
            return checkFailed(strFmt("@WAX:WHSUnexpectedQueryStructure", tableId2Name(_actualQbds.table()), tableId2Name(_expectedQbds.table())));
        }

        WHSQueryInitializer::initializeDefaultRanges(_expectedQbds, _actualQbds);

        for (int i = 1; i <= _expectedQbds.childDataSourceCount(); i++)
        {
            TableId expectedTableId = _expectedQbds.childDataSourceNo(i).table();
            QueryBuildDataSource qbdsChild = WHSQueryInitializer::childDataSourceByName(_actualQbds, expectedTableId);

            if (!qbdsChild)
            {
                return checkFailed(strFmt("@WAX:WHSMandatoryChildDatasourceMissing", tableId2Name(_expectedQbds.table())));
            }

            if (!WHSQueryInitializer::initializeDataSource(_expectedQbds.childDataSourceNo(i), qbdsChild))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>childDataSourceByName</Name>
				<Source><![CDATA[
    private static QueryBuildDataSource childDataSourceByName(QueryBuildDataSource _qbds, TableId _expectedTableId)
    {
        for (int i = 1; i <= _qbds.childDataSourceCount(); i++)
        {
            QueryBuildDataSource qbds = _qbds.childDataSourceNo(i);
            
            if (_qbds.childDataSourceNo(i).table() == _expectedTableId)
            {
                return qbds;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDefaultRanges</Name>
				<Source><![CDATA[
    private static void initializeDefaultRanges(QueryBuildDataSource _expectedQbds, QueryBuildDataSource _actualQbds)
    {
        if (_expectedQbds.rangeCount() > 0)
        {
            for (int i = 1; i <= _expectedQbds.rangeCount(); i++)
            {
                QueryBuildRange _expectedQbr = _expectedQbds.range(i);
                FieldId fieldId = _expectedQbr.field();
                RangeStatus rangeStatus = _expectedQbr.status();

                if (rangeStatus != RangeStatus::Open)
                {
                    QueryBuildRange actualQbr = SysQuery::findOrCreateRange(_actualQbds, fieldId);
                    
                    actualQbr.status(rangeStatus);
                    actualQbr.value(_expectedQbr.value());
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>