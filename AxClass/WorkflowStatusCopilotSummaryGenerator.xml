<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkflowStatusCopilotSummaryGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Xrm.Sdk;

/// <summary>
/// The <c>WorkflowStatusCopilotSummaryGenerator</c> is to generate the workflow AI summary for reviewers.
/// </summary>
internal final class WorkflowStatusCopilotSummaryGenerator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isWorkflowCopilotSummaryEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the workflow copilot summary enabled.
    /// </summary>
    /// <returns>ture if enabled; otherwise, not enabled.</returns>
    internal static boolean isWorkflowCopilotSummaryEnabled()
    {
        return FeatureStateProvider::isFeatureEnabled(WorkflowStatusCopilotSummaryFeature::instance())
            && SysDataverseUtility::IsDataverseLinked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the summary by calling dataverse API.
    /// </summary>
    /// <param name = "_asyncParameterContainer">The Async parameter container.</param>
    /// <returns>The result container.</returns>
    internal static container determineSummary(container _asyncParameterContainer)
    {
        container results;
        str resultValue;

        RecId trackingStatusRecId = conPeek(_asyncParameterContainer, 1);
        guid uniqueCorrelationId = conPeek(_asyncParameterContainer, 2);
        RecId lastTrackingTableRecord = WorkflowStatusCopilotSummaryDataProvider::findlastWorkflowTrackingRecord(trackingStatusRecId);

        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(WorkflowStatusCopilotSummaryGenerator));
        using (var activityContext = logger.activityContext(staticMethodStr(WorkflowStatusCopilotSummaryGenerator, determineSummary), classStr(WorkflowStatusCopilotSummaryGenerator))
            .addCustomProperty('PrincipalObjectId', guid2Str(curUserGuid()))
            .addCustomProperty('ActivityId', guid2Str(getCurrentThreadActivityId()))
            .addCustomProperty('UniqueCorrelationId', guid2Str(uniqueCorrelationId)))
        {
            boolean isSuccessful;
            boolean noDataToSummarize;
            boolean isLanguageError;

            if (trackingStatusRecId)
            {
                if (AppCopilotDataverseUtility::canMakeAICall(WorkflowStatusCopilotSummaryConstants::WorkflowApproverSummaryApiName, WorkflowStatusCopilotSummaryConstants::FinanceAISolutionName))
                {
                    var resultsCollection = AppCopilotDataverseUtility::callAPIInternal(
                        WorkflowStatusCopilotSummaryConstants::FinanceAISolutionName,
                        WorkflowStatusCopilotSummaryConstants::WorkflowApproverSummaryApiName,
                        WorkflowStatusCopilotSummaryDataProvider::convertParameterContainerToParameterCollection(_asyncParameterContainer),
                        uniqueCorrelationId);

                    if (resultsCollection && resultsCollection.ContainsKey(WorkflowStatusCopilotSummaryConstants::AIResponseValue))
                    {
                        resultValue = resultsCollection.get_Item(WorkflowStatusCopilotSummaryConstants::AIResponseValue).ToString();

                        if (resultValue == WorkflowStatusCopilotSummaryConstants::LanguageNotSupported)
                        {
                            isLanguageError = true;
                        }
                        else if (resultValue != '')
                        {
                            isSuccessful = true;
                        }
                        else
                        {
                            logger.logError('Summary returned blank response');
                        }
                    }
                }
            }
            else
            {
                resultValue = WorkflowStatusCopilotSummaryConstants::NoDataToSummarize;
                noDataToSummarize = true;
            }

            activityContext.addCustomProperty('IsSuccessful', any2Str(isSuccessful));
            activityContext.addCustomProperty('NoDataToSummarize', any2Str(noDataToSummarize));
            activityContext.addCustomProperty('IsLanguageError', any2Str(isLanguageError));
        }

        WorkflowStatusCopilotSummaryResultContract workflowCopilotSummaryResult = WorkflowStatusCopilotSummaryResultContract::newFromResult(trackingStatusRecId, lastTrackingTableRecord, resultValue);
        return WorkflowStatusCopilotSummaryResultContract::pack(workflowCopilotSummaryResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSummaryResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the summary result to determine if the value can be used.
    /// </summary>
    /// <param name = "_cacheKey">The cache key.</param>
    /// <param name = "_summaryResult">The summary result from genert summary method.</param>
    /// <param name = "_isFromCache">true if the summary result from cache, otherwise, false, which is new generated summary.</param>
    /// <returns>true if the summary result is valid, otherwise, false.</returns>
    internal static boolean validateSummaryResult(container _cacheKey, container _summaryResult, boolean _isFromCache)
    {
        if (_summaryResult == conNull())
        {
            return false;
        }

        WorkflowStatusCopilotSummaryResultContract contract = WorkflowStatusCopilotSummaryResultContract::unpack(_summaryResult);
        if (!contract)
        {
            return false;
        }

        if (_isFromCache)
        {
            RecId lastTrackingTableIdInCache = contract.getLastTrackingTableRecordId();
            RecId currentLastTrackingTableId = WorkflowStatusCopilotSummaryDataProvider::findlastWorkflowTrackingRecord(conPeek(_cacheKey, 2));
            if (currentLastTrackingTableId != lastTrackingTableIdInCache)
            {
                return false;
            }
        }
        
        str AIResponse = contract.getWorkflowSummaryResult();
        if (AIResponse == ''
            || AIResponse == WorkflowStatusCopilotSummaryConstants::NoDataToSummarize
            || AIResponse == WorkflowStatusCopilotSummaryConstants::LanguageNotSupported)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>