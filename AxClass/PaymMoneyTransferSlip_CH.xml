<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymMoneyTransferSlip_CH</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PaymMoneyTransferSlip_CH extends PaymMoneyTransferSlip
{
    PaymentStub         paymentForm;

    AmountCur           invoiceAmount;
    CustCashDiscAmount  cashDiscAmount;

    BankAccount         bankAccountNum;
    CustAccount         custAccount;
    Voucher             voucher;

    str                 invoiceAmountMST;
    str                 invoiceAmountPenny;

    Num                 billId;

    str                 ocrLine;
    str                 ocrLine_PaymId;
    str                 ocr_GiroType;
    str                 ocr_Amount;

    str                 ocr_BlueCompanyId;
    str                 ocr_PaymentId;

    str                 ocr_AccountNo;

    str                 referenceNumber;
    str                 ocr_PaymentId2;
    str                 ocr_PaymentId3;

    str                 ocr_AccountNo1;
    str                 ocr_AccountNo2;
    str                 ocr_AccountNo3;

    str                 ocr_CheckDigit1;
    str                 ocr_CheckDigit2;
    str                 ocr_CheckDigit3;
    str                 ocr_CheckDigit4;
    str                 ocr_CheckDigit5;

    str                 ocr_layoutCode;

    str                 ocr_paymentRef1;
    str                 ocr_paymentRef2;

    boolean             isEUR;
    boolean             isCHF;

    // Macro definition start
    #define.LayoutCode_Bank('303')        // red slip, bank
    #define.LayoutCode_PTT ('105')        // red slip, post
    #define.LayoutCode_OrangeCHF('609')   // orange slip, CHf
    #define.LayoutCode_OrangeEUR('701')   // orange slip, EUr

    #define.PaymentSlipType_04('04')      // blue slip and orange slip, CHF (without amount = ESR+)
    #define.PaymentSlipType_01('01')      // blue slip and orange slip, CHF (with amount = ESR)
    #define.PaymentSlipType_31('31')      // orange slip, EUR (without amount = ESR+)
    #define.PaymentSlipType_21('21')      // orange slip, EUR (with amount = ESR)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankAccountNum</Name>
				<Source><![CDATA[
    public BankAccount bankAccountNum()
    {
        return bankAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountId</Name>
				<Source><![CDATA[
    public CompanyBankAccountId bankAccountId(CompanyBankAccountId _bankAccountId = bankAccountTable.AccountID)
    {
        this.initFromBankAccountTable(_bankAccountId);
        return bankAccountTable.AccountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountTable</Name>
				<Source><![CDATA[
    public BankAccountTable bankAccountTable()
    {
        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscAmount</Name>
				<Source><![CDATA[
    public CustCashDiscAmount cashDiscAmount(CustCashDiscAmount _cashDiscAmount = cashDiscAmount)
    {
        cashDiscAmount = _cashDiscAmount;
        return cashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrency</Name>
				<Source><![CDATA[
    public boolean checkCurrency()
    {
        boolean ret = false;

        if (isCHF || isEUR)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    public CustAccount custAccount(CustAccount _custAccount = custAccount)
    {
        custAccount     = _custAccount;
        ocr_paymentRef2 = _custAccount;

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPTTAccount</Name>
				<Source><![CDATA[
    private str formatPTTAccount(str _accountNo)
    {
        return      subStr(_accountNo,1,2)                                              +
                    '-'                                                                 +
                    num2str(str2num(subStr(_accountNo,3,strLen(_accountNo)-3)),0,0,0,0) +
                    '-'                                                                 +
                    subStr(_accountNo,strLen(_accountNo),1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>giroType_Orange</Name>
				<Source><![CDATA[
    public void giroType_Orange()
    {
        Bank_CH bank_CH = new Bank_CH();

        if (this.parmIsEUR())
        {
            ocr_GiroType = cashDiscAmount || invoiceAmount < 0
                           ? #PaymentSlipType_31
                           : #PaymentSlipType_21;
        }
        else
        {
            ocr_GiroType = cashDiscAmount || invoiceAmount < 0
                           ? #PaymentSlipType_04
                           : #PaymentSlipType_01;
        }

        if (ocr_GiroType == #PaymentSlipType_01 || ocr_GiroType == #PaymentSlipType_21)
        {
            ocr_Amount = num2str(invoiceAmount * 100,0,0,0,0);
            ocr_Amount = strRFix(ocr_Amount,strLen(bankAccountTable.GiroContractAccount) > 5 ? 10 : 9,'0');
        }
        else
        {
            ocr_Amount = '';
        }

        if (!bankAccountTable.isPTTBankAccount())
        {
            ocr_BlueCompanyId = bankAccountTable.GiroContract;

            if (strLen(custAccount) >= CustParameters::find().AccountPositions)
            {
                ocr_PaymentId = subStr(custAccount,1,CustParameters::find().AccountPositions);
            }
            else
            {
                ocr_PaymentId = strRFix(custAccount,CustParameters::find().AccountPositions,'0');
            }

            ocr_PaymentId = ocr_PaymentId + num2Str0(str2num(voucher), 20 - CustParameters::find().AccountPositions,0,0,0);
        }
        else
        {
            ocr_BlueCompanyId = '';

            if (strLen(custAccount) >= CustParameters::find().AccountPositions)
            {
                ocr_PaymentId = subStr(custAccount,1,CustParameters::find().AccountPositions);
            }
            else
            {
                ocr_PaymentId = ocr_PaymentId + strRFix(custAccount, CustParameters::find().AccountPositions, '0');
            }

            ocr_PaymentId = ocr_PaymentId + num2Str0(str2num(voucher),15 - CustParameters::find().AccountPositions,0,0,0);
        }

        ocr_AccountNo = bankAccountTable.GiroContractAccount;

        if (strLen(ocr_AccountNo) > 5)
        {
            ocr_AccountNo1 = this.formatPTTAccount(ocr_AccountNo);
            ocr_AccountNo3 = ocr_AccountNo;

            ocr_CheckDigit2= bank_CH.mod10(ocr_BlueCompanyId + ocr_PaymentId + 'x'); // Check ciffer calculated

            referenceNumber = ocr_BlueCompanyId + ocr_PaymentId + ocr_CheckDigit2;
        }
        else
        {
            ocr_AccountNo1 = ocr_AccountNo;
            ocr_AccountNo3 = ocr_AccountNo;
            referenceNumber = ocr_PaymentId;
        }

        ocr_PaymentId3 = subStr(referenceNumber,strLen(referenceNumber)-10,-5) + ' ' +
                         subStr(referenceNumber,strLen(referenceNumber)-5,-5)  + ' ' +
                         subStr(referenceNumber,strLen(referenceNumber),-5);

        ocr_PaymentId2 = strLen(referenceNumber) > 16 ?
                         subStr(referenceNumber,strLen(referenceNumber)-25,-2) + ' ' +
                         subStr(referenceNumber,strLen(referenceNumber)-20,-5) + ' ' +
                         subStr(referenceNumber,strLen(referenceNumber)-15,-5) : strLen(referenceNumber) > 15 ? subStr(referenceNumber,1,1) : '';

        //Different formats of OCRB for ESR account numbers with 5 or with 9 digits

        if (strLen(bankAccountTable.GiroContractAccount) > 5)
        {
            ocr_CheckDigit1 = bank_CH.mod10(ocr_GiroType + ocr_Amount + 'x'); // Check ciffer is calcaleted

            ocrLine_PaymId = ocr_BlueCompanyId + ocr_PaymentId + ocr_CheckDigit2;
            ocrLine = strFmt('%1%2%3>%4+ %5>', ocr_GiroType, ocr_Amount, ocr_CheckDigit1, ocrLine_PaymId, ocr_AccountNo3);
        }
        else
        {
            ocr_CheckDigit5 = bank_CH.mod11('00' + ocr_GiroType + ocr_Amount + ocr_PaymentId + CompanyInfo::find().Giro);
            ocr_CheckDigit1 = num2Str0(str2num(ocr_CheckDigit5),2,0,0,0);

            if (this.parmIsEUR())
            {
                ocrLine = (ocr_GiroType == #PaymentSlipType_21 ? '<' + ocr_CheckDigit1 + '00' + ocr_GiroType + ocr_Amount + '> ' : '') + ocr_PaymentId + '+ ' + ocr_AccountNo3 + '>';
            }
            else
            {
                ocrLine = (ocr_GiroType == #PaymentSlipType_01 ? '<' + ocr_CheckDigit1 + '00' + ocr_GiroType + ocr_Amount + '> ' : '') + ocr_PaymentId + '+ ' + ocr_AccountNo3 + '>';
            }

            ocrLine_PaymId = ocr_PaymentId;
        }

        if (this.parmIsEUR())
        {
            ocr_layoutCode = #LayoutCode_OrangeEUR;
        }
        else
        {
            ocr_layoutCode = #LayoutCode_OrangeCHF;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>giroType_RedAndGreen</Name>
				<Source><![CDATA[
    public void giroType_RedAndGreen()
    {
        Bank_CH bank_CH = new Bank_CH();

        ocr_GiroType      = '  ';
        ocr_Amount        = '  ';
        ocr_BlueCompanyId = '  ';
        ocr_PaymentId     = '  ';

        if (!bankAccountTable.isPTTBankAccount())
        {
            if (strLen(custAccount) >= 10)
            {
                ocr_PaymentId = subStr(custAccount,1,10);
            }
            else
            {
                ocr_PaymentId = strRFix(custAccount, 10, '0');
            }

            ocr_AccountNo3  = ocr_PaymentId;

            bankAccountNum = subStr(strKeep(bankAccountNum,'0123456789'),1,16);
            ocr_AccountNo3  += strRFix(bankAccountNum,16,'0');

            ocr_CheckDigit4 = bank_CH.mod10(ocr_AccountNo3 + 'x');

            referenceNumber  = ocr_AccountNo3 + ocr_CheckDigit4;

            ocr_AccountNo3  = referenceNumber + '+';

            ocr_AccountNo1  = strRFix(bankAccountTable.RegistrationNum,5,'0');
            ocr_CheckDigit2 = bank_CH.mod10(ocr_AccountNo1 + 'x');

            ocr_AccountNo1  = '07' + ocr_AccountNo1;
            ocr_CheckDigit3 = bank_CH.mod10(ocr_AccountNo1 + 'x');

            ocr_AccountNo3  = ocr_AccountNo3 + ' ' + ocr_AccountNo1 + ocr_CheckDigit2 + ocr_CheckDigit3;

            ocr_AccountNo2  = bankAccountTable.BankContractAccount;
            ocr_AccountNo1  = this.formatPTTAccount(ocr_AccountNo2);
        }
        else // PTt
        {
            ocr_AccountNo3 = bankAccountNum;
            ocr_AccountNo2 = ocr_AccountNo3;
            ocr_AccountNo1 = this.formatPTTAccount(ocr_AccountNo2);
        }

        ocrLine = ocr_AccountNo3 + '>';

        if (bankAccountTable.isPTTBankAccount())
        {
            ocr_layoutCode = #layoutCode_PTT;  // PTt
        }
        else
        {
            ocr_layoutCode = #layoutCode_Bank; // Bank
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmount2Str</Name>
				<Source><![CDATA[
    private void initAmount2Str()
    {
        invoiceAmountMST   = System.String::Format("{0:#}", trunc(invoiceAmount));
        invoiceAmountPenny = System.String::Format("{0:00}", frac(invoiceAmount)*100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBankAccountTable</Name>
				<Source><![CDATA[
    public void initFromBankAccountTable(CompanyBankAccountId _bankAccountId)
    {
        bankAccountTable = BankAccountTable::find(_bankAccountId);

        unchecked(Uncheck::TableSecurityPermission)
        {
            bankAccountNum = bankAccountTable.AccountNum;
        }

        if (subStr(bankAccountNum,1,4) == '0000')
        {
            bankAccountNum = subStr(bankAccountNum,5,5);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOCRLine_CH</Name>
				<Source><![CDATA[
    public void initOCRLine_CH(CustInvoiceJour custInvoiceJour, CompanyBankAccountId _bankAccountId = '')
    {
        this.parmPaymentForm(custInvoiceJour.GiroType);
        this.initOCRLineFromJournal_CH(custInvoiceJour, _bankAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOCRLineProj_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values for OCR line from project invoice.
    /// </summary>
    /// <param name = "_projInvoiceJour">Project invoice journal record.</param>
    /// <param name = "_bankAccountId">Bank account Id to be used during payment Id generation.</param>
    public void initOCRLineProj_CH(ProjInvoiceJour _projInvoiceJour, CompanyBankAccountId _bankAccountId = '')
    {
        this.parmPaymentForm(_projInvoiceJour.GiroType);
        this.initOCRLineFromJournal_CH(_projInvoiceJour, _bankAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOCRLineFromJournal_CH</Name>
				<Source><![CDATA[
    private void initOCRLineFromJournal_CH(CustVendInvoiceJour _invoiceJour, CompanyBankAccountId _bankAccountId = '')
    {
        this.custAccount(_invoiceJour.InvoiceAccount);
        this.parmVoucher(_invoiceJour.InvoiceId);
        this.invoiceAmount(_invoiceJour.InvoiceAmount);
        this.cashDiscAmount(_invoiceJour.CashDisc);

        if (_bankAccountId == '')
        {
            this.bankAccountId(_invoiceJour.paymentBankAccountId());
        }
        else
        {
            this.bankAccountId(_bankAccountId);
        }

        if (_invoiceJour.CurrencyCode == Currency::findCurrencyCodeISO('CHF').CurrencyCode)
        {
            this.parmIsCHF(true);
        }

        if (paymentForm == PaymentStub::ESR_orange && _invoiceJour.CurrencyCode == Currency::findCurrencyCodeISO('EUR').CurrencyCode)
        {
            this.parmIsEUR(true);
        }

        switch (paymentForm)
        {
            case PaymentStub::ESR_red_bank:
                this.giroType_RedAndGreen();        //Red giro money transfer slip
                break;

            case PaymentStub::ESR_orange:
                this.giroType_Orange();             //Orange giro money transfer slip
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOCRLineAccountStatement_CH</Name>
				<Source><![CDATA[
    public void initOCRLineAccountStatement_CH(CustTable   _custTable,
                                        PaymentStub _giroType,
                                        AmountCur   _amount)
    {
        this.parmPaymentForm(_giroType);
        this.custAccount(_custTable.AccountNum);
        this.parmVoucher('');
        this.invoiceAmount(_amount);
        this.bankAccountId(_custTable.BankAccount);

        if (_custTable.Currency == Currency::findCurrencyCodeISO('CHF').CurrencyCode)
        {
            this.parmIsCHF(true);
        }

        if (_giroType == PaymentStub::ESR_orange &&
            _custTable.Currency == Currency::findCurrencyCodeISO('EUR').CurrencyCode)
        {
            this.parmIsEUR(true);
        }

        switch (_giroType)
        {
            case PaymentStub::ESR_red_bank:
                this.giroType_RedAndGreen();        //Red giro money transfer slip
                break;

            case PaymentStub::ESR_orange:
                this.giroType_Orange();        //Orange giro money transfer slip
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOCRLineCollectionLetter_CH</Name>
				<Source><![CDATA[
    public void initOCRLineCollectionLetter_CH(CustCollectionLetterJour custCollectionLetterJour)
    {
        this.parmPaymentForm(custCollectionLetterJour.GiroType);
        this.custAccount(custCollectionLetterJour.AccountNum);
        this.invoiceAmount(custCollectionLetterJour.sumAmountFeeInclTax());
        this.bankAccountId(custCollectionLetterJour.paymentBankAccountId());

        if (custCollectionLetterJour.CurrencyCode == Currency::findCurrencyCodeISO('CHF').CurrencyCode)
        {
            this.parmIsCHF(true);
        }

        if (custCollectionLetterJour.GiroType == PaymentStub::ESR_orange &&
            custCollectionLetterJour.CurrencyCode == Currency::findCurrencyCodeISO('EUR').CurrencyCode)
        {
            this.parmIsEUR(true);
        }

        switch (custCollectionLetterJour.GiroType)
        {
            case PaymentStub::ESR_red_bank:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCH00007, funcName());
                this.giroType_RedAndGreen();        //Red giro money transfer slip
                break;

            case PaymentStub::ESR_orange:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCH00008, funcName());
                this.giroType_Orange();        //Orange giro money transfer slip
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOCRLineInterest_CH</Name>
				<Source><![CDATA[
    public void initOCRLineInterest_CH(CustInterestJour custInterestJour)
    {
        this.parmPaymentForm(custInterestJour.GiroType);
        this.custAccount(custInterestJour.AccountNum);
        this.parmVoucher(custInterestJour.InterestNote);
        this.invoiceAmount(custInterestJour.sumInterestAmountFee());
        this.bankAccountId(custInterestJour.paymentBankAccountId());

        if (custInterestJour.CurrencyCode == Currency::findCurrencyCodeISO('CHF').CurrencyCode)
        {
            this.parmIsCHF(true);
        }

        if (custInterestJour.GiroType == PaymentStub::ESR_orange &&
            custInterestJour.CurrencyCode == Currency::findCurrencyCodeISO('EUR').CurrencyCode)
        {
            this.parmIsEUR(true);
        }

        switch (custInterestJour.GiroType)
        {
            case PaymentStub::ESR_red_bank:
                this.giroType_RedAndGreen();        //Red giro money transfer slip
                break;

            case PaymentStub::ESR_orange:
                this.giroType_Orange();        //Orange giro money transfer slip
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOCRLineProjInvoice_CH</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the OCR line that is used in payment slips for project invoice line.
    /// </summary>
    /// <param name="projInvoiceJour">
    ///    The project invoice journal to use for OCR line initialization.
    /// </param>
    void initOCRLineProjInvoice_CH(ProjInvoiceJour projInvoiceJour)
    {
        this.parmPaymentForm(projInvoiceJour.GiroType);
        this.custAccount(projInvoiceJour.InvoiceAccount);
        this.parmVoucher(projInvoiceJour.ProjInvoiceId);
        this.invoiceAmount(projInvoiceJour.InvoiceAmount);
        this.cashDiscAmount(projInvoiceJour.CashDisc);
        this.bankAccountId(projInvoiceJour.paymentBankAccountId());

        if (projInvoiceJour.CurrencyId == Currency::findCurrencyCodeISO('CHF').CurrencyCode)
        {
            this.parmIsCHF(true);
        }

        if (projInvoiceJour.GiroType == PaymentStub::ESR_orange &&
            projInvoiceJour.CurrencyId == Currency::findCurrencyCodeISO('EUR').CurrencyCode)
        {
            this.parmIsEUR(true);
        }

        switch (projInvoiceJour.GiroType)
        {
            case PaymentStub::ESR_red_bank:
                this.giroType_RedAndGreen();        //Red giro money transfer slip
                break;

            case PaymentStub::ESR_orange:
                this.giroType_Orange();             //Orange giro money transfer slip
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmount</Name>
				<Source><![CDATA[
    public AmountCur invoiceAmount(AmountCur _invoiceAmount = invoiceAmount)
    {
        invoiceAmount = _invoiceAmount;
        this.initAmount2Str();
        return invoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountMST</Name>
				<Source><![CDATA[
    public str invoiceAmountMST()
    {
        return invoiceAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountPenny</Name>
				<Source><![CDATA[
    public str invoiceAmountPenny()
    {
        return invoiceAmountPenny;
    }

]]></Source>
			</Method>
			<Method>
				<Name>layoutCode</Name>
				<Source><![CDATA[
    public str layoutCode()
    {
        return ocr_layoutCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_AccountNo1</Name>
				<Source><![CDATA[
    public str ocr_AccountNo1()
    {
        return ocr_AccountNo1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_AccountNo2</Name>
				<Source><![CDATA[
    public str ocr_AccountNo2()
    {
        return ocr_AccountNo2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_PaymentId</Name>
				<Source><![CDATA[
    public str ocr_PaymentId()
    {
        return ocr_PaymentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_PaymentId2</Name>
				<Source><![CDATA[
    public str ocr_PaymentId2()
    {
        return ocr_PaymentId2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_PaymentId3</Name>
				<Source><![CDATA[
    public str ocr_PaymentId3()
    {
        return ocr_PaymentId3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_paymentRef1</Name>
				<Source><![CDATA[
    public str ocr_paymentRef1()
    {
        return ocr_paymentRef1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_paymentRef2</Name>
				<Source><![CDATA[
    public str ocr_paymentRef2()
    {
        return ocr_paymentRef2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrLine</Name>
				<Source><![CDATA[
    public str ocrLine()
    {
        return ocrLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrLinePaymId</Name>
				<Source><![CDATA[
    public str ocrLinePaymId()
    {
        return strReplace(strFmt('%1%2', this.ocr_PaymentId2(), this.ocr_PaymentId3()),' ','');
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCHF</Name>
				<Source><![CDATA[
    public boolean parmIsCHF(boolean _isCHF = isCHF)
    {
        isCHF = _isCHF;

        return isCHF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsEUR</Name>
				<Source><![CDATA[
    public boolean parmIsEUR(boolean _isEUR = isEUR)
    {
        isEUR = _isEUR;

        return isEUR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentForm</Name>
				<Source><![CDATA[
    public PaymentStub parmPaymentForm(PaymentStub _paymentStub = paymentForm)
    {
        paymentForm = _paymentStub;
        return paymentForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        ocr_paymentRef1 = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceNumber_Blue</Name>
				<Source><![CDATA[
    public void referenceNumber_Blue(str _referenceNumber)
    {
        int custAccountOffset;
        int custAccountLength = CustParameters::find().AccountPositions;
        int voucherOffset;
        int voucherLength;

        referenceNumber = _referenceNumber;

        if (strLen(referenceNumber)<27)
        {
            referenceNumber = strRFix(referenceNumber, 27, '0');
            this.custAccount(this.strltrim0(subStr(referenceNumber, 7, CustParameters::find().AccountPositions)));
            this.parmVoucher(this.strltrim0(subStr(referenceNumber,
                             7+CustParameters::find().AccountPositions,
                             26 - (7 + CustParameters::find().AccountPositions) + 1)));
        }
        else
        {
            referenceNumber = subStr(referenceNumber, strLen(referenceNumber), -27);
        }

        if (bankAccountTable.isPTTBankAccount())
        {
            if (strLen(bankAccountTable.GiroContractAccount) > 5)
            {
                referenceNumber = subStr(referenceNumber, 27, -16);
            }
            else
            {
                referenceNumber = subStr(referenceNumber, 27, -15);
            }

            custAccountOffset   = 1;
            voucherOffset       = custAccountOffset + custAccountLength;
            voucherLength       = 15 - voucherOffset + 1;
        }
        else
        {
            custAccountOffset   = 7;
            voucherOffset       = custAccountOffset + custAccountLength;
            voucherLength       = 26 - voucherOffset + 1;
        }

        this.custAccount(this.strltrim0(subStr(referenceNumber, custAccountOffset, custAccountLength)));
        this.parmVoucher(this.strltrim0(subStr(referenceNumber, voucherOffset, voucherLength)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>strltrim0</Name>
				<Source><![CDATA[
    public str strltrim0(str _txt)
    {
        str txt;
        str ret;
        int pos;

        txt = _txt;

        pos = strNFind(txt, '0', 1, strLen(txt));

        if (pos)
        {
            ret = subStr(txt, pos, strLen(txt)- pos + 1);
        }
        else
        {
            ret = '';
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>