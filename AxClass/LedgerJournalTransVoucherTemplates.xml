<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransVoucherTemplates</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalTransVoucherTemplates</c> class is used to control the saving of vouchers from
///    journals of type General Journal or Vendor Invoice as voucher templates and to control the copying
///    of voucher templates to create vouchers on journals of type General Journal or Vendor Invoice.
/// </summary>
public class LedgerJournalTransVoucherTemplates
{
    LedgerJournalId             templateJournalNum;
    Voucher                     templateVoucher,
                                newVoucher;
    Amount                      templateAmount;
    PercentAmount               voucherTemplateType;
    LedgerJournalEngine         ledgerJournalEngine;
    recId                       numOfCredits,
                                numOfDebits;
    AmountCurCredit             totalCreditAmount,
                                totalCredited;
    AmountCurDebit              totalDebitAmount,
                                totalDebited;
    LedgerJournalTrans          ledgerJournalTrans,
                                newLedgerJournalTrans;
    RefRecId                    numberSequenceId;
    LedgerJournalType           journalType;
    LedgerJournalId             journalNum;
    DialogField                 dialogVoucherTemplateType;

    // <GCN>
    Voucher_CN                      newVoucher_CN;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDebitCreditAmounts</Name>
				<Source><![CDATA[
    // </GCN>

    /// <summary>
    ///    Calculates the debit or credit amount for the <c>LedgerJournalTrans</c> table record that is being
    ///    created from a voucher template line.
    /// </summary>
    protected void calcDebitCreditAmounts()
    {
        AmountCur amount;

        if (voucherTemplateType == PercentAmount::Percent)
        {
            // calculate debit and credit amount based upon the originating lines percentage of the originating total voucher amount
            // if the originating line amounts were zero, the new line will also be zero
            if (newLedgerJournalTrans.AmountCurDebit == 0.0)
            {
                amount = 0.0;
            }
            else
            {
                numOfDebits --;

                if (!numOfDebits)
                {
                    // the last non-zero debit distribution receives the remaining debit amount
                    amount = templateAmount - totalDebited;
                }
                else
                {
                    // Check for divide by zero
                    if (totalDebitAmount == 0)
                    {
                        amount = 0;
                    }
                    else
                    {
                        amount = templateAmount * (newLedgerJournalTrans.AmountCurDebit / totalDebitAmount);
                    }
                }
            }

            newLedgerJournalTrans.AmountCurDebit = CurrencyExchangeHelper::amount(amount, newLedgerJournalTrans.CurrencyCode);
            totalDebited += newLedgerJournalTrans.AmountCurDebit;

            if (newLedgerJournalTrans.AmountCurCredit == 0.0)
            {
                amount = 0.0;
            }
            else
            {
                numOfCredits --;

                if (!numOfCredits)
                {
                    // the last non-zero credit distribution receives the remaining credit amount
                    amount = templateAmount - totalCredited;
                }
                else
                {
                    // Check for divide by zero
                    if (totalCreditAmount == 0)
                    {
                        amount = 0;
                    }
                    else
                    {
                        amount = templateAmount * (newLedgerJournalTrans.AmountCurCredit / totalCreditAmount);
                    }
                }
            }

            newLedgerJournalTrans.AmountCurCredit = CurrencyExchangeHelper::amount(amount, newLedgerJournalTrans.CurrencyCode);
            totalCredited += newLedgerJournalTrans.AmountCurCredit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLineFromTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>LedgerJournalTrans</c> table record from a voucher template line.
    /// </summary>
    /// <remarks>
    ///    This method will also create child records in the <c>LedgerJournalTrans_Asset</c> table and
    ///    <c>LedgerJournalTrans_Project</c> table if the voucher template line had child records in those
    ///    tables.
    /// </remarks>
    private void createJournalLineFromTemplate()
    {
        int offsetFactor;
        // <GIN>
        #ISOCountryRegionCodes
        LedgerJournalTransTaxExtensionIN   ledgerJournalTransTaxExtensionIN;
        // </GIN>

        newLedgerJournalTrans.data(ledgerJournalTrans.data());
        newLedgerJournalTrans.AcknowledgementDate = dateNull();
        newLedgerJournalTrans.Approved = NoYes::Yes;
        newLedgerJournalTrans.Approver = HcmWorker::userId2Worker(curUserId());
        newLedgerJournalTrans.Invoice = '';
        newLedgerJournalTrans.JournalNum = journalNum;
        newLedgerJournalTrans.LineNum = 0;
        newLedgerJournalTrans.RecId = 0;
        newLedgerJournalTrans.ReverseDate = dateNull();
        newLedgerJournalTrans.RevRecId = 0;
        newLedgerJournalTrans.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        newLedgerJournalTrans.Voucher = newVoucher;
        newLedgerJournalTrans.BankDepositNum = "";
        newLedgerJournalTrans.PoolRecId = 0;
        newLedgerJournalTrans.VendTransId = 0;
        newLedgerJournalTrans.CustTransId = 0;

        // <GCN>
        if (LedgerParameters::isChineseVoucher_CN())
        {
            newLedgerJournalTrans.Voucher_CN = newVoucher_CN;
        }
        // </GCN>

        this.calcDebitCreditAmounts();

        newLedgerJournalTrans.insert();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && newLedgerJournalTrans)
        {
            if (TaxGeneralJournalCopyAVAndTaxInfoFlight::instance().isEnabled())
            {
                // For percent template, assessable value should be recalculated based on credit/debit amount.
                // And tax information should be retrieved from template.
                if (voucherTemplateType == PercentAmount::Percent)
                {
                    ledgerJournalTransTaxExtensionIN = LedgerJournalTransTaxExtensionIN::copyLedgerJournalTransTaxExtensionIN(ledgerJournalTrans, newLedgerJournalTrans, false);
                }
                // For amount template, assessable value and tax information should be both retrieved from template.
                else
                {
                    ledgerJournalTransTaxExtensionIN = LedgerJournalTransTaxExtensionIN::copyLedgerJournalTransTaxExtensionIN(ledgerJournalTrans, newLedgerJournalTrans);
                }
            }
            else
            {
                ledgerJournalTransTaxExtensionIN.LedgerJournalTrans = newLedgerJournalTrans.RecId;
                ledgerJournalTransTaxExtensionIN.insert();
            }
        }
        // </GIN>

        if (newLedgerJournalTrans && TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(journalType))
        {
            LedgerJournalTransTaxExtension::copyLedgerJournalTransTaxExtension(ledgerJournalTrans, newLedgerJournalTrans, true);
        }

        if (ledgerJournalTrans.isFixedAssetsTransaction())
        {
            // create new child asset line from existing
            LedgerJournalTrans_Asset ledgerJournalTrans_Asset = LedgerJournalTrans_Asset::find(ledgerJournalTrans.RecId);

            if (ledgerJournalTrans_Asset)
            {
                LedgerJournalTrans_Asset newLedgerJournalTrans_Asset;
                newLedgerJournalTrans_Asset.data(ledgerJournalTrans_Asset.data());
                newLedgerJournalTrans_Asset.RecId = 0;
                newLedgerJournalTrans_Asset.RefRecId = newLedgerJournalTrans.RecId;
                newLedgerJournalTrans_Asset.insert();
            }
        }

        if (ledgerJournalTrans.isProjectTransaction())
        {
            // create new child project line from existing
            LedgerJournalTrans_Project ledgerJournalTrans_Project = LedgerJournalTrans_Project::find(ledgerJournalTrans.RecId);

            if (ledgerJournalTrans_Project)
            {
                LedgerJournalTrans_Project newLedgerJournalTrans_Project;
                newLedgerJournalTrans_Project.data(ledgerJournalTrans_Project.data());
                newLedgerJournalTrans_Project.RecId = 0;
                newLedgerJournalTrans_Project.RefRecId = newLedgerJournalTrans.RecId;
                newLedgerJournalTrans_Project.TransId  = ProjCostTrans::newTransId();

                if (newLedgerJournalTrans.AccountType != LedgerJournalACType::Project &&
                    (newLedgerJournalTrans.OffsetAccountType == LedgerJournalACType::Project &&
                     newLedgerJournalTrans.parmOffsetLedgerDimension()))
                {
                    offsetFactor = -1;
                }
                else
                {
                    offsetFactor = 1;
                }

                newLedgerJournalTrans_Project.Qty = 1;
                newLedgerJournalTrans_Project.CostPrice = CurrencyExchangeHelper::price(offsetFactor * newLedgerJournalTrans.amount() / newLedgerJournalTrans_Project.Qty);

                if (newLedgerJournalTrans_Project.CostPrice < 0)
                {
                    newLedgerJournalTrans_Project.CostPrice = - newLedgerJournalTrans_Project.CostPrice;
                    newLedgerJournalTrans_Project.Qty = - newLedgerJournalTrans_Project.Qty;
                }

                newLedgerJournalTrans_Project.insert();
            }
        }

        CustVendPaymJournalFee::copyFromVoucherTemplate(ledgerJournalTrans.RecId, newLedgerJournalTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherFromSelectedTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs processing to create a new voucher in the <c>LedgerJournalTrans</c> table, depending on a
    ///    specified <c>LedgerJournalTransVoucherTemplate</c> table record.
    /// </summary>
    protected void createVoucherFromSelectedTemplate()
    {
        // <GCN>
        RefRecId numberSequenceTableRecId;
        // </GCN>

        // verify that a record exists for the template values selected
        ledgerJournalTrans = LedgerJournalTrans::find(templateJournalNum, templateVoucher, false);

        if (ledgerJournalTrans)
        {
            // if Percent, compute total credit/debit amount and number of non-zero credits/debits
            // so any rounding difference can be allocated to the last credit & debit dists created
            if (voucherTemplateType == PercentAmount::Percent)
            {
                select sum(AmountCurCredit), count(RecId) from ledgerJournalTrans where
                    ledgerJournalTrans.JournalNum == templateJournalNum &&
                    ledgerJournalTrans.Voucher == templateVoucher &&
                    ledgerJournalTrans.AmountCurCredit != 0;

                numOfCredits = ledgerJournalTrans.RecId;
                totalCreditAmount = ledgerJournalTrans.AmountCurCredit;

                select sum(AmountCurDebit), count(RecId) from ledgerJournalTrans where
                    ledgerJournalTrans.JournalNum == templateJournalNum &&
                    ledgerJournalTrans.Voucher == templateVoucher &&
                    ledgerJournalTrans.AmountCurDebit != 0;

                numOfDebits = ledgerJournalTrans.RecId;
                totalDebitAmount = ledgerJournalTrans.AmountCurDebit;
            }

            ttsbegin;

            while select ledgerJournalTrans where
                ledgerJournalTrans.JournalNum == templateJournalNum &&
                ledgerJournalTrans.Voucher == templateVoucher &&
                ledgerJournalTrans.TransactionType != LedgerTransType::Fee
            {
                if (!newVoucher)
                {
                    NumberSeq numberSeq = NumberSeq::newGetVoucherFromId(numberSequenceId, true, true);
                    newVoucher = numberSeq.voucher();
                    numberSeq.used();
                }

                // <GCN>
                if (LedgerParameters::isChineseVoucher_CN()
                    && !newVoucher_CN)
                {
                    numberSequenceTableRecId = LedgerVoucherType_CN::find(ledgerJournalTrans.LedgerVoucherType_CN).NumberSequenceTable;
                    newVoucher_CN            = NumberSeq_Voucher_CN::newGetVoucherFromCode(numberSequenceTableRecId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).voucher();
                }
                // </GCN>

                this.createJournalLineFromTemplate();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a voucher template record in the <c>LedgerJournalTransVoucherTemplate</c> table, depending
    ///    on the current <c>LedgerJournalTrans</c> table record.
    /// </summary>
    protected void createVoucherTemplate()
    {
        LedgerJournalTransVoucherTemplate ledgerJournalTransVoucherTemplate;

        ttsbegin;

        select firstonly forupdate ledgerJournalTransVoucherTemplate where
            (ledgerJournalTransVoucherTemplate.JournalType == journalType &&
            ledgerJournalTransVoucherTemplate.JournalNum == ledgerJournalTrans.orig().JournalNum &&
            ledgerJournalTransVoucherTemplate.Voucher == ledgerJournalTrans.orig().Voucher);

        ledgerJournalTransVoucherTemplate = this.initVoucherTemplate(ledgerJournalTransVoucherTemplate);

        ledgerJournalTransVoucherTemplate.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVoucherTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the Voucher template record in the <c>LedgerJournalTransVoucherTemplate</c> table.
    /// </summary>
    /// <param name="_ledgerJournalTransVoucherTemplate">
    /// The <c>LedgerJournalTransVoucherTemplate</c> record.
    /// </param>
    /// <returns>
    /// The initialized Voucher template record.
    /// </returns>
    protected LedgerJournalTransVoucherTemplate initVoucherTemplate(LedgerJournalTransVoucherTemplate _ledgerJournalTransVoucherTemplate)
    {
        _ledgerJournalTransVoucherTemplate.JournalType           = journalType;
        _ledgerJournalTransVoucherTemplate.JournalNum            = ledgerJournalTrans.JournalNum;
        _ledgerJournalTransVoucherTemplate.Voucher               = ledgerJournalTrans.Voucher;
        _ledgerJournalTransVoucherTemplate.VoucherTemplateType   = voucherTemplateType;

        return _ledgerJournalTransVoucherTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerJournalTransVoucherTemplates</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerJournalTransVoucherTemplates</c> object.</returns>
    public static LedgerJournalTransVoucherTemplates construct()
    {
        return new LedgerJournalTransVoucherTemplates();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>journalNum</c> variable for the class.
    /// </summary>
    /// <param name="_journalNum">
    ///    The value to which to set the variable; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>journalNum</c> variable.
    /// </returns>
    public LedgerJournalId parmJournalNum(LedgerJournalId _journalNum = journalNum)
    {
        journalNum = _journalNum;

        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>journalType</c> variable for the class.
    /// </summary>
    /// <param name="_journalType">
    ///    The value to which to set the variable; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>journalType</c> variable.
    /// </returns>
    public LedgerJournalType parmJournalType(LedgerJournalType _journalType = journalType)
    {
        journalType = _journalType;

        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>ledgerJournalTrans</c> variable for the class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The value to which to set the variable; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>ledgerJournalTrans</c> variable.
    /// </returns>
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>newVoucher</c> variable for the class.
    /// </summary>
    /// <param name="_newVoucher">
    ///    The value to which to set the variable; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>newVoucher</c> variable.
    /// </returns>
    public Voucher parmNewVoucher(Voucher _newVoucher = newVoucher)
    {
        newVoucher = _newVoucher;

        return newVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSequenceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>numberSequenceId</c> variable for the class.
    /// </summary>
    /// <param name="_numberSequenceId">
    ///    The value to which to set the variable; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>numberSequenceId</c> variable.
    /// </returns>
    public RefRecId parmNumberSequenceId(RefRecId _numberSequenceId = numberSequenceId)
    {
        numberSequenceId = _numberSequenceId;

        return numberSequenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>templateAmount</c> variable for the class.
    /// </summary>
    /// <param name="_templateAmount">
    ///    The value to which to set the variable; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>templateAmount</c> variable.
    /// </returns>
    public Amount parmTemplateAmount(Amount _templateAmount = templateAmount)
    {
        templateAmount = _templateAmount;

        return templateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>templateJournalNum</c> variable for the class.
    /// </summary>
    /// <param name="_templateJournalNum">
    ///    The value to which to set the variable; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>templateJournalNum</c> variable.
    /// </returns>
    public LedgerJournalId parmTemplateJournalNum(LedgerJournalId _templateJournalNum = templateJournalNum)
    {
        templateJournalNum = _templateJournalNum;

        return templateJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>templateVoucher</c> variable for the class.
    /// </summary>
    /// <param name="_templateVoucher">
    ///    The value to which to set the variable; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>templateVoucher</c> variable.
    /// </returns>
    public Voucher parmTemplateVoucher(Voucher _templateVoucher = templateVoucher)
    {
        templateVoucher = _templateVoucher;

        return templateVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherTemplateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>voucherTemplateType</c> variable for the class.
    /// </summary>
    /// <param name="_voucherTemplateType">
    ///    The value to which to set the variable; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>voucherTemplateType</c> variable.
    /// </returns>
    public PercentAmount parmVoucherTemplateType(PercentAmount _voucherTemplateType = voucherTemplateType)
    {
        voucherTemplateType = _voucherTemplateType;

        return voucherTemplateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveVoucherTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the save voucher dialog box and performs processing as necessary to create a voucher template
    ///    record in the <c>LedgerJournalTransVoucherTemplate</c> table, depending on the current
    ///    <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <remarks>
    ///    This code initiates the save voucher Dialog box and waits for a response from the user before
    ///    initiating the processing.
    /// </remarks>
    protected void saveVoucherTemplate()
    {
        boolean success;

        Dialog saveVoucherDialog = this.initDialog();
        this.addDialogFields(saveVoucherDialog);

        success = saveVoucherDialog.run();

        if (success)
        {
            voucherTemplateType = dialogVoucherTemplateType.value();
            this.createVoucherTemplate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Dialog for the template.
    /// </summary>
    /// <returns>
    /// The initialized Dialog.
    /// </returns>
    protected Dialog initDialog()
    {
        return new Dialog("@SYS116163");
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDialogFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Dialog fields for the template.
    /// </summary>
    /// <param name="_saveVoucherDialog">
    /// The dialog.
    /// </param>
    protected void addDialogFields(Dialog _saveVoucherDialog)
    {
        dialogVoucherTemplateType = _saveVoucherDialog.addField(enumStr(PercentAmount), "@SYS116161", "@SYS116162"); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectVoucherTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the voucher templates form and initiates processing to create a new voucher in the
    ///    <c>LedgerJournalTrans</c> table, depending on the <c>LedgerJournalTransVoucherTemplate</c> table
    ///    record that is selected from the voucher templates form.
    /// </summary>
    /// <remarks>
    ///    This code opens the voucher templates form and waits for a response from the user before initiating
    ///    the processing.
    /// </remarks>
    protected void selectVoucherTemplate()
    {
        if (ledgerJournalTrans.RecId == 0 &&
            ledgerJournalTrans.Voucher != '')
        {
            ledgerJournalTrans.deleteVoucher(ledgerJournalTrans.Voucher);
        }

        Args args = new Args(formStr(LedgerJournalTransVoucherTemplate));

        args.caller(this);
        args.parmEnum(enum2int(journalType));
        FormRun tmpformRun = classfactory.formRunClass(args);

        LedgerIJournalTransVoucherTemplate ledgerIJournalTransVoucherTemplate = tmpformRun as LedgerIJournalTransVoucherTemplate;

        tmpformRun.init();
        tmpformRun.run();
        tmpformRun.wait();

        if (tmpformRun.closedOk() && ledgerIJournalTransVoucherTemplate)
        {
            templateJournalNum = ledgerIJournalTransVoucherTemplate.templateJournalNum();
            templateVoucher = ledgerIJournalTransVoucherTemplate.templateVoucher();
            templateAmount = ledgerIJournalTransVoucherTemplate.templateAmount();
            voucherTemplateType = ledgerIJournalTransVoucherTemplate.templateVoucherTemplateType();

            this.createVoucherFromSelectedTemplate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerJournalTransVoucherTemplates  ledgerJournalTransVoucherTemplates = new LedgerJournalTransVoucherTemplates();

        LedgerJournalEngine     ledgerJournalEngine;
        LedgerJournalTrans      localLedgerJournalTrans;

        ledgerJournalTransVoucherTemplates.parmLedgerJournalTrans(_args.record());
        ledgerJournalEngine = _args.object();
        ledgerJournalTransVoucherTemplates.parmJournalType(ledgerJournalEngine.ledgerJournalTable().JournalType);
        ledgerJournalTransVoucherTemplates.parmJournalNum(ledgerJournalEngine.ledgerJournalTable().JournalNum);
        ledgerJournalTransVoucherTemplates.parmNumberSequenceId(ledgerJournalEngine.ledgerJournalTable().NumberSequenceTable);

        if (_args.parmEnum() == LedgerJournalTransVoucherTemplateAction::Save)
        {
            ledgerJournalTransVoucherTemplates.saveVoucherTemplate();
        }
        else
        {
            if (ledgerJournalEngine.ledgerJournalTable().ledgerJournalName().NewVoucher == NewVoucher::OneVoucher)
            {
                select firstonly Voucher from localLedgerJournalTrans
                    where localLedgerJournalTrans.JournalNum == ledgerJournalEngine.ledgerJournalTable().JournalNum;

                if (localLedgerJournalTrans)
                {
                    ledgerJournalTransVoucherTemplates.parmNewVoucher(localLedgerJournalTrans.Voucher);
                }
            }

            ledgerJournalTransVoucherTemplates.selectVoucherTemplate();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>