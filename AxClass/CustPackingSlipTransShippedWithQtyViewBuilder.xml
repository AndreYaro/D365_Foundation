<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPackingSlipTransShippedWithQtyViewBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class CustPackingSlipTransShippedWithQtyViewBuilder extends ApplicationSQLObjects
{
    str     viewName;
    str     asPartition;
    str     asDataAreaId;
    str     asRecId;
    str     asInventTransId;
    str     asInitialQuantity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createViews</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>CustPackingSlipTransShippedWithQty</c> view.
    /// </summary>
    protected boolean createViews()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        {
            return this.dropView(viewName) && this.executeSqlStatement(this.createViewSqlStmt());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        var builder = CustPackingSlipTransShippedWithQtyViewBuilder::construct();
        builder.createSqlObjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createViewSqlStmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the SQL statement to create the <c>CostStatementViewBuilder</c> view.
    /// </summary>
    /// <remarks>
    /// CREATE VIEW CUSTPACKINGSLIPTRANSSHIPPEDWITHQTY AS
    ///   WITH cte (RECID,PARTITION,DATAAREAID,INVENTTRANSID,REMAIN,INITIALQUANTITY
    ///      ) AS (
    ///         SELECT CUSTPACKINGSLIPTRANS.RECID,CUSTPACKINGSLIPTRANS.PARTITION,
    ///                CUSTPACKINGSLIPTRANS.DATAAREAID,CUSTPACKINGSLIPTRANS.INVENTTRANSID,
    ///                CUSTPACKINGSLIPTRANS.REMAIN,
    ///                FIRST_VALUE(CUSTPACKINGSLIPTRANS.ORDERED) OVER (
    ///                    PARTITION BY CUSTPACKINGSLIPTRANS.PARTITION,CUSTPACKINGSLIPTRANS.DATAAREAID,CUSTPACKINGSLIPTRANS.INVENTTRANSID
    ///                    ORDER BY CUSTPACKINGSLIPTRANS.CREATEDDATETIME
    ///                )
    ///         FROM CUSTPACKINGSLIPTRANS
    ///      )
    /// SELECT cte.INVENTTRANSID,cte.INITIALQUANTITY,cte.RECID,cte.PARTITION,cte.DATAAREAID
    ///   FROM cte
    ///  WHERE cte.REMAIN = 0
    /// 
    /// </remarks>
    private str createViewSqlStmt()
    {
        str sqlStmt = 'CREATE VIEW ' + viewName + ' AS ' + this.createSQLStatement();

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSQLStatement</Name>
				<Source><![CDATA[
    private str createSQLStatement()
    {
        SysDictTable table = new SysDictTable(tableNum(CustPackingSlipTrans));
        str tableName = table.name(DbBackend::Sql);
        str tablePartition = table.fieldObject(fieldNum(CustPackingSlipTrans, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);
        str tableDataAreaId = table.fieldObject(fieldNum(CustPackingSlipTrans, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);
        str tableRecId = table.fieldObject(fieldNum(CustPackingSlipTrans, RecId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);
        str tableInventTransId = table.fieldObject(fieldNum(CustPackingSlipTrans, InventTransId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);
        str tableOrdered = table.fieldObject(fieldNum(CustPackingSlipTrans, Ordered)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);
        str tableRemain = table.fieldObject(fieldNum(CustPackingSlipTrans, Remain)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);
        str tableCreatedDateTime = table.fieldObject(fieldNum(CustPackingSlipTrans, CreatedDateTime)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);

        str asRemain = table.fieldObject(fieldNum(CustPackingSlipTrans, Remain)).name(DbBackend::Sql);

        const str cteName = 'cte';

        str sqlStmt = 'WITH ' + cteName + ' (' +
            asRecId + ',' +
            asPartition + ',' +
            asDataAreaId + ',' +
            asInventTransId + ',' +
            asRemain + ',' +
            asInitialQuantity +
            ') AS (' +
            'SELECT ' +
            tableRecId + ',' +
            tablePartition + ',' +
            tableDataAreaId + ',' +
            tableInventTransId + ',' +
            tableRemain + ',' +
            'FIRST_VALUE(' + tableOrdered + ') ' + 'OVER(PARTITION BY ' +
                tablePartition + ',' +
                tableDataAreaId + ',' +
                tableInventTransId + ' ' +
                'ORDER BY ' + tableCreatedDateTime + ')' +
            'FROM ' + tableName + ' ' +
            ') ' +
            'SELECT ' +
            cteName + '.' + asInventTransId + ',' +
            cteName + '.' + asInitialQuantity + ',' +
            cteName + '.' + asRecId + ',' +
            cteName + '.' + asPartition + ',' +
            cteName + '.' + asDataAreaId + ' ' +
            'FROM ' + cteName + ' WHERE ' +
            cteName + '.' + asRemain + ' = 0';

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>as</Name>
				<Source><![CDATA[
    private str as(str _fieldName, str _alias)
    {
        return _fieldName + ' AS ' + _alias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(boolean _runOnSeparateUserConnection = false)
    {
        super(_runOnSeparateUserConnection);

        SysDictView view    = new SysDictView(tableNum(CustPackingSlipTransShippedWithQty));
        viewName            = view.name(DbBackend::Sql);
        asPartition         = view.fieldObject(fieldNum(CustPackingSlipTransShippedWithQty, Partition)).name(DbBackend::Sql);
        asDataAreaId        = view.fieldObject(fieldNum(CustPackingSlipTransShippedWithQty, DataAreaId)).name(DbBackend::Sql);
        asRecId             = view.fieldObject(fieldNum(CustPackingSlipTransShippedWithQty, RecId)).name(DbBackend::Sql);
        asInventTransId     = view.fieldObject(fieldNum(CustPackingSlipTransShippedWithQty, InventTransId)).name(DbBackend::Sql);
        asInitialQuantity   = view.fieldObject(fieldNum(CustPackingSlipTransShippedWithQty, InitialQuantity)).name(DbBackend::Sql);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>CustPackingSlipTransShippedWithQtyViewBuilder</c> class.
    /// </summary>
    /// <returns>The new instance of the <c>CustPackingSlipTransShippedWithQtyViewBuilder</c> class.</returns>
    public static CustPackingSlipTransShippedWithQtyViewBuilder construct()
    {
        return new CustPackingSlipTransShippedWithQtyViewBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>