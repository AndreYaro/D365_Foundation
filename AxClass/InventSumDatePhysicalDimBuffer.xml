<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDatePhysicalDimBuffer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventSumDatePhysicalDimBuffer</c> class extends <c>InventSumDatePhysicalDim</c> class.
///    It calculates onhand quantity by a date that is used to compare with invent trans's invent date, an invent sum, and an invent dimension.
/// </summary>
class InventSumDatePhysicalDimBuffer extends InventSumDatePhysicalDim
{
    InventSum       inventSum;
    InventDim       inventDim;
    InventQty       onHandQty;
    PdsCWInventQty  cwOnHandQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCWOnHand</Name>
				<Source><![CDATA[
    private PdsCWOnHandQty calculateCWOnHand()
    {
        return this.pdsCWPostedQty()        +
                this.pdsCWReceivedQty()     -
                this.pdsCWDeductedQty()     -
                this.pdsCWPickedQty()       +
                this.pdsCWRegisteredQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOnHand</Name>
				<Source><![CDATA[
    private InventQty calculateOnHand()
    {
        return this.postedQty()     +
               this.receivedQty()   -
               this.deductedQty()   +
               this.registeredQty() -
               this.pickedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwOnHandQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the calculated on hand quantity and cw on hand quantity. This method is only used to get quantity for catch weight item.
    /// </summary>
    /// <returns>
    /// A container with onhand quantity in inventory and catch weight units
    /// </returns>
    public container cwOnHandQty()
    {
        return [onHandQty, cwOnHandQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnHandQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns calculated on hand quantity.
    /// </summary>
    /// <returns>
    /// Onhand quantity in inventory units
    /// </returns>
    public InventQty getOnHandQty()
    {
        return onHandQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSum</Name>
				<Source><![CDATA[
    public InventSum parmInventSum(InventSum _inventSum = inventSum)
    {
        inventSum = _inventSum;

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accumulately calculate posted quantity, received quantity and deducted quantity in the inventSum record.
    /// </summary>
    protected void selectInventSum()
    {
        this.addInventSum(inventSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates onhand quantity.
    /// </summary>
    protected void setValueQty()
    {
        super();

        onHandQty   = this.calculateOnHand();
        cwOnHandQty = this.calculateCWOnHand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Construct an <c>InventSumDatePhysicalDimBuffer</c> object by a date that is used to compare with invent trans's invent date, an invent sum, and an invent dimension.
    /// </summary>
    /// <param name="_perDate">
    ///     A date that is used to compare with invent trans's invent date.
    /// </param>
    /// <param name="_inventSum">
    ///     Invent sum.
    /// </param>
    /// <param name="_inventDim">
    ///     Invent dimension.
    /// </param>
    /// <returns>
    ///     Return an <c>InventSumDatePhysicalDimBuffer</c> object.
    /// </returns>
    public static InventSumDatePhysicalDimBuffer newParameters(
        TransDate       _perDate,
        InventSum       _inventSum,
        InventDim       _inventDim
        )
    {
        InventDimParm                  inventDimParm;

        inventDimParm.initFromInventDim(_inventDim);

        InventSumDatePhysicalDimBuffer ret = new InventSumDatePhysicalDimBuffer();
        ret.parmPerDate(_perDate);
        ret.parmItemId(_inventSum.ItemId);
        ret.parmInventSum(_inventSum);
        ret.parmInventDim(_inventDim);
        ret.parmInventDimParm(inventDimParm);
        ret.init();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParametersWithSelectedInventDimParm</Name>
				<Source><![CDATA[
    public static InventSumDatePhysicalDimBuffer newParametersWithSelectedInventDimParm(
        TransDate       _perDate,
        InventSum       _inventSum,
        InventDim       _inventDim,
        InventDimParm   _inventDimParm
        )
    {
        InventSumDatePhysicalDimBuffer ret = new InventSumDatePhysicalDimBuffer();
        ret.parmPerDate(_perDate);
        ret.parmItemId(_inventSum.ItemId);
        ret.parmInventSum(_inventSum);
        ret.parmInventDim(_inventDim);
        ret.parmInventDimParm(_inventDimParm);
        ret.init();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>