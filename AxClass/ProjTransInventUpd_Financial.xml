<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransInventUpd_Financial</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransInventUpd_Financial extends ProjTransItem
{
    boolean             canBeInvoiced;
    InventUpd_Financial financial;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return financial.movement().activityNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        ProjFundingSource   projFundingSource;
        boolean             ret = true;

        if (!ProjLineProperty::find(this.linePropertyId()).ToBeInvoiced)
        {
            ret = false;
        }

        if (ret == true)
        {
            projFundingSource = ProjFundingSource::find(this.fundingSource());
            if ((projFundingSource.FundingType == ProjFundingType::Organization) ||
                (projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource))
            {
                ret = false;
            }
        }

        if (ret)
        {
            ret = ProjInvoiceTable::isBillingRuleInvoiceable(this.projId(), this.categoryId(), this.psaContractLineNum(), this.transType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjCategoryId categoryId()
    {
        return financial.movement().projCategoryId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return financial.movement().projSalesCurrencyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return financial.movement().defaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    public InventTransId inventTransId()
    {
        return financial.movement().transId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction is invoiceable.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public boolean invoiceable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory item that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend the class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ItemId itemId()
    {
        return financial.movement().itemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction origin for this transaction.
    /// </summary>
    /// <returns>
    /// The <c>ProjItemType::Project</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to return a different transaction
    /// origin for the specific transaction.
    /// </remarks>
    public ProjTransactionOrigin itemType()
    {
        return financial.movement().projTransactionOrigin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    public SalesLineDisc lineDisc()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return financial.movement().projLinePropertyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether budgetary control is enabled.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method will be overridden by child classes to return true if budgetary control is required.
    /// </remarks>
    public boolean mustHandleBudget()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleForecast</Name>
				<Source><![CDATA[
    public boolean mustHandleForecast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _common)
    {
        super(_common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventUpd_Financial</Name>
				<Source><![CDATA[
    public InventUpd_Financial parmInventUpd_Financial(InventUpd_Financial _financial = financial)
    {
        financial = _financial;

        return financial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjId projId()
    {
        return financial.movement().projId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Qty qty()
    {
        Qty qty =  financial.updFinancialUnit();
        qty = CalcSalesPriceInUOMFlight::instance().isEnabled() ?
            financial.movement().projSalesQty(qty):qty;
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return financial.movement().buffer().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SalesPrice salesPrice()
    {
        return financial.movement().projSalesPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales unit for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public UnitOfMeasureSymbol salesUnit()
    {
        return financial.movement().transUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return financial.movement().buffer().TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return financial.movement().projTaxGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return financial.movement().projTaxItemGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public  Amount transCost()
    {
        InventTransOriginId markedInventTransOriginId;
        InventQty           qty;
        CostAmount          value;

        if (financial.movement().inventModelGroup().inventModelType().stdCostBased())
        {
            markedInventTransOriginId = InventTransOrigin::findMarkingRefInventTransOrigin(financial.movement().inventTransOriginId(), financial.movement().itemId(), true);
            return ProjTrans::postedOperationsValue(
                                InventTransOrigin::find(markedInventTransOriginId).InventTransId,
                                this.parmProjAdjustRefId());
        }

        if (financial.movement().inventModelGroup().InclPhysicalValueInCost)
        {
            markedInventTransOriginId = InventTransOrigin::findMarkingRefInventTransOrigin(financial.movement().inventTransOriginId(), financial.movement().itemId(), true);
            [qty, value] = InventTransOrigin::calcMarkedCostValue(financial.movement().inventTransOriginId(), financial.movement().itemId(), true, markedInventTransOriginId);

            if (qty > 0 && value >= 0)
            {
                return CurrencyExchangeHelper::amount((value / qty) * financial.parmFinancial());
            }
        }
        
        if (financial.movement().inventModelGroup().InventModel == InventModel::MovingAverage)
        {
            markedInventTransOriginId = InventTransOrigin::findMarkingRefInventTransOrigin(financial.movement().inventTransOriginId(), financial.movement().itemId(), true);
            InvoiceId invoiceId = financial.parmInvoiceId();
            PackingSlipId packingSlipId = financial.parmPackingSlipId();

            InventTrans inventTrans;
            select firstonly CostAmountPosted from inventTrans
                where inventTrans.InventTransOrigin == markedInventTransOriginId
                    && inventTrans.PackingSlipId == packingSlipId
                    && inventTrans.InvoiceId == invoiceId
                    && inventTrans.StatusIssue   == StatusIssue::Sold
                    && inventTrans.StatusReceipt == StatusReceipt::None;
            
            if (inventTrans)
            {
                return abs(inventTrans.CostAmountPosted);
            }
        }

        return financial.updCostAmountLedger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransDate transDate()
    {
        return financial.parmLedgerVoucher().lastTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return financial.movement().projTransId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransTxt txt()
    {
        return financial.movement().buffer().itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Voucher voucherInvoice()
    {
        Voucher ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjTransInventUpd_Financial</Name>
				<Source><![CDATA[
    public static ProjTransInventUpd_Financial newProjTransInventUpd_Financial(InventUpd_Financial _financial, ProjAdjustRefId _projAdjustRefId)
    {
        ProjTransInventUpd_Financial projTrans;

        projTrans = new ProjTransInventUpd_Financial(_financial.movement().buffer());
        projTrans.parmInventUpd_Financial(_financial);
        projTrans.parmProjAdjustRefId(_projAdjustRefId);

        return projTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the marked <c>InventTrans</c> ID.
    /// </summary>
    /// <returns>
    /// The marked <c>InventTrans</c> ID.
    /// </returns>
    public  InventTransId markedInventTransId()
    {
        InventTransOriginId markedInventTransOriginId;

        markedInventTransOriginId = InventTransOrigin::findMarkingRefInventTransOrigin(financial.movement().inventTransOriginId(), financial.movement().itemId(), true);
        return InventTransOrigin::find(markedInventTransOriginId).InventTransId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>