<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSFormHelper</c> class provides generic static methods for updating forms.
/// </summary>
final class WHSFormHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveRecordIntoSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves a record to a given sequence
    /// </summary>
    /// <param name = "_rowToMove">The row to move.</param>
    /// <param name = "_desiredSeqNum">The new sequence number.</param>
    /// <param name = "_nameOfSeqField">The field name of the sequence field.</param>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    public static void moveRecordIntoSequence(Common _rowToMove, anytype _desiredSeqNum, FieldName _nameOfSeqField)
    {
        FormDataSource datasource = FormDataUtil::getFormDataSource(_rowToMove) as FormDataSource;

        //Find the row that currently has the desired sequence number
        RecId rowWithDesiredSeqNum;
        for (Common curRow = datasource.getFirst(); curRow; curRow = datasource.getNext())
        {
            if (curRow.getFieldValue(_nameOfSeqField) == _desiredSeqNum)
            {
                rowWithDesiredSeqNum = curRow.RecId;
                break;
            }
        }

        //Update the two rows
        ttsbegin;
        WHSFormHelper::updateRow(_rowToMove.TableId, _rowToMove.RecId, _desiredSeqNum, _nameOfSeqField);
        WHSFormHelper::updateRow(_rowToMove.TableId, rowWithDesiredSeqNum, _rowToMove.getFieldValue(_nameOfSeqField), _nameOfSeqField);
        ttscommit;

        datasource.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a named field in a row with a given RecId.
    /// </summary>
    /// <param name = "_tableId">The table Id of the table to update.</param>
    /// <param name = "_recId">The record Id of the row to update.</param>
    /// <param name = "_newValue">The new value of the field to update.</param>
    /// <param name = "_nameOfField">The name of the field to update.</param>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    private static void updateRow(TableId _tableId, RecId _recId, anytype _newValue, FieldName _nameOfField)
    {
        DictTable dictTable = new DictTable(_tableId);
        Common common = dictTable.makeRecord();

        select forupdate firstonly common
            where common.RecId == _recId;

        if (common)
        {
            common.setFieldValue(_nameOfField, _newValue);
            common.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryRunForEditing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a query for editing.
    /// </summary>
    /// <param name = "_packedQuery">The packed query.</param>
    /// <param name = "_queryName">The name of the query.</param>
    /// <param name = "_defaultQueryRun">The default query, that will be applied, if the user clicks "Reset" in the SysQueryEdit dialog.</param>
    /// <returns>An initialized query.</returns>
    [Hookable(false)]
    public static SysQueryRun initializeQueryRunForEditing(container _packedQuery, QueryName _queryName, QueryRun _defaultQueryRun)
    {
        container packedDefaultQueryRun = _defaultQueryRun ? _defaultQueryRun.pack() : conNull();

        return WHSFormHelper::initializeQueryRunForEditingPackedDefaultQueryRun(_packedQuery, _queryName, packedDefaultQueryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryRunForEditingPackedDefaultQueryRun</Name>
				<Source><![CDATA[
    internal static SysQueryRun initializeQueryRunForEditingPackedDefaultQueryRun(container _packedQuery, QueryName _queryName, container _packedDefaultQueryRun)
    {
        SysQueryRun sysQueryRun;

        int lines = infologLine();

        try
        {
            if (_packedQuery)
            {
                sysQueryRun = new SysQueryRun(_packedQuery);
            }
        }
        catch
        {
            if (_packedDefaultQueryRun != conNull())
            {
                infolog.clear(lines);
            }
            else
            {
                throw Error(Error::wrongUseOfFunction(funcName()));
            }
        }

        if (!sysQueryRun)
        {
            sysQueryRun = new SysQueryRun(_packedDefaultQueryRun);
            info("@WAX2571");
        }

        if (_queryName)
        {
            sysQueryRun.name(_queryName);
        }

        if (_packedDefaultQueryRun != conNull())
        {
            sysQueryRun.origQueryPack(_packedDefaultQueryRun);
        }

        sysQueryRun.saveUserSetup(false);
        return sysQueryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>