<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkflowLimitHierarchyProviderAppSuiteEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WorkflowLimitHierarchyProviderAppSuiteEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNextNodeWithAutoDelegationDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowLimitHierarchyProvider), delegatestr(WorkflowLimitHierarchyProvider, getNextNodeWithAutoDelegationDelegate))]
    public static void getNextNodeWithAutoDelegationDelegate(anytype _nodeId,  WorkflowHierarchyLevel _level, WorkflowContext _workflowContext, WorkflowVersionTable _versionTable, EventHandlerResult _eventHandlerResult, ExpressionDataSource _dataSource)
    {
        WorkflowHierarchyProviderNode providerNode, delegateProviderNode;
        HcmPersonnelNumberId delegatePersonnelNumberId;
        HcmWorker hcmWorker;
        RecId hcmPositionRecId;
        UserId user;
        ExpressionDataSource delegateExpressionDataSource;

        // resolve the next hierarchy node
        WorkflowHierarchyProviderHelper helper = WorkflowHierarchyProviderHelper::construct();
        providerNode = helper.getNextNode(_nodeId, _level, _workflowContext, _dataSource);

        // retrieve possible auto-delegate
        user = SysWorkflowHelper::getDelegate(providerNode.getUserId(), _versionTable);

        WorkflowLimitHierarchyProvider limitHierarchyProvider = new WorkflowLimitHierarchyProvider();

        // auto-delegation has occurred, create a new hierarchy provider node populated with this delegate's signing limits
        if (user != providerNode.getUserId())
        {
            delegatePersonnelNumberId = limitHierarchyProvider.convertToNodeDataType(extendedTypeStr(UserId), user, _workflowContext);
    
            hcmWorker = HcmWorker::findByPersonnelNumber(delegatePersonnelNumberId);

            if (hcmWorker.RecId == 0)
            {
                throw error(strFmt("@HCM:WorkerNotFound", delegatePersonnelNumberId));
            }
    
            hcmPositionRecId = HcmWorkerHelper::getPrimaryPosition(hcmWorker.RecId);
    
            if (hcmPositionRecId == 0)
            {
                throw error(strFmt("@HCM:WorkflowWorkerWithNoPosition", delegatePersonnelNumberId));
            }
    
            // create a copy of the existing expression data source for the resolved user.  We will overwrite the signing limits values for the delegate
            delegateExpressionDataSource = ExpressionDataSource::create(providerNode.getDataSource().pack());
    
            helper.addDataSourceFields(delegateExpressionDataSource, _workflowContext, hcmWorker, hcmPositionRecId);

            delegateProviderNode = WorkflowLimitHierarchyProviderNode::newProviderNode(
                delegatePersonnelNumberId,
                user,
                providerNode.getLevel(),
                delegateExpressionDataSource);
        }
        else
        {
            delegateProviderNode = null;
        }

        _eventHandlerResult.result(WorkflowHierarchyProviderNodeWrapper::construct(providerNode, delegateProviderNode));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>