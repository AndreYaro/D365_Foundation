<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureOperationCodesUpdatePurchBook_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class for the facture operation code update procedure run for purchase book lines.
/// </summary>
class FactureOperationCodesUpdatePurchBook_RU extends FactureOperationCodesUpdate_RU
{
    SalesPurchBookRecId_RU  bookRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    protected boolean checkBuffer(Common _common)
    {
        return _common.TableId == tablenum(PurchBookTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFactureDate_External</Name>
				<Source><![CDATA[
    protected FieldId getFieldIdFactureDate_External(Common _common)
    {
        if (!this.checkBuffer(_common))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return fieldnum(PurchBookTrans_RU, FactureDate_External);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFactureExternalId</Name>
				<Source><![CDATA[
    protected FieldId getFieldIdFactureExternalId(Common _common)
    {
        if (!this.checkBuffer(_common))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return fieldnum(PurchBookTrans_RU, FactureExternalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdOperationTypeCodes</Name>
				<Source><![CDATA[
    protected FieldId getFieldIdOperationTypeCodes(Common _common = null)
    {
        if (_common && !this.checkBuffer(_common))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return fieldnum(PurchBookTrans_RU, OperationTypeCodes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    protected void initFromArgs(Args _args)
    {
        PurchBookTable_RU purchBookTable;

        super(_args);

        if (_args.dataset() != tablenum(PurchBookTable_RU))
        {
            throw error(Error::missingParameter(this));
        }

        purchBookTable = _args.record();
        bookRecId = purchBookTable.recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsBookTrans, qbdsFactureJour;

        super();

        qbdsBookTrans = query.addDataSource(tablenum(PurchBookTrans_RU));
        findOrCreateRange_W(qbdsBookTrans, fieldnum(PurchBookTrans_RU, PurchBookTable_RU), queryValue(bookRecId)).status(RangeStatus::Locked);
        qbdsBookTrans.addRange(fieldnum(PurchBookTrans_RU, OperationTypeCodes));
        qbdsBookTrans.addRange(fieldnum(PurchBookTrans_RU, FactureExternalId));
        qbdsBookTrans.addRange(fieldnum(PurchBookTrans_RU, TransType));

        qbdsFactureJour = qbdsBookTrans.addDataSource(tablenum(FactureJour_RU));
        qbdsFactureJour.relations(false);
        qbdsFactureJour.addLink(fieldnum(PurchBookTrans_RU, FactureId), fieldnum(FactureJour_RU, FactureId));
        qbdsFactureJour.joinMode(JoinMode::ExistsJoin);
        qbdsFactureJour.addRange(fieldnum(FactureJour_RU, InventProfileType)).value(queryValue(InventProfileType_RU::General));

        queryRun = new QueryRun(query);

        custVend = ModuleCustVend::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesForm</Name>
				<Source><![CDATA[
    protected str linesForm()
    {
        return formStr(PurchBookTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesFormBuffer</Name>
				<Source><![CDATA[
    protected Common linesFormBuffer()
    {
        return PurchBookTable_RU::find(bookRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packIL</Name>
				<Source><![CDATA[
    protected container packIL()
    {
        return [currentVersionIL, super(), bookRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;

        ret = super(_packedClass);

        if (ret && queryRun)
        {
            findOrCreateRange_W(
            queryRun.query().dataSourceTable(tablenum(PurchBookTrans_RU)),
            fieldnum(PurchBookTrans_RU, PurchBookTable_RU), queryValue(bookRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackIL</Name>
				<Source><![CDATA[
    protected boolean unpackIL(container _packedILClass)
    {
        Integer     version = RunBase::getVersion(_packedILClass);
        boolean     ret = true;
        container   superILPacked;

        switch (version)
        {
            case currentVersionIL:
                [version, superILPacked, bookRecId] = _packedILClass;

                ret = super(superILPacked);

                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>