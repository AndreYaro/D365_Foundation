<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_Contabil_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>FBSpedFileCreator_Contabil_BR</c> class has the logic to create the sped contabil file.
/// </summary>
class FBSpedFileCreator_Contabil_BR extends FBSpedFileCreatorBase_BR
{
    boolean                                 hasClosingTransactions;
    date                                    fromDate, toDate;
    DimensionAttributeRecId                 mainAccountDimAttrRecId, costCenterDimAttrRecId;
    FBSPEDContabilType_BR                   type;
    FBSPEDContabilLayoutVersion_BR          layoutVersion;
    BookNumber_BR                           bookNumber;
    FiscalEstablishment_BR                  fiscalEstablishment;
    FiscalOrganization_BR                   fiscalOrganization;
    Name                                    mainAccountCostCenterDimensionSet;
    Map                                     mainAccountCostCenterCache;
    FBSpedContabilSituationType_BR          situationType;
    FBSpedContabilOpeningPeriodSituation_BR openingPeriodSituation;
    int64                                   spedTotalRecords;
    FBSPEDContabilSetupParameters_BR        spedContabilSetupParameters;
    FBSPEDFileType_BR                       fileType;
    FBSpedContabilAddAccountingStatement_BR addAccountingStatement;
    FBSpedContabilAccStatementPeriod_BR     accStatementPeriod;
    FBSpedContabilFileHash_BR               fileHash;
    Filename                                replaceRTFFileName;
    str                                     replaceRTFFileContent;
    Description                             substDescription;
    Map                                     mainAccountCache;

    internal boolean useNatureCode = FeatureStateProvider::isFeatureEnabled(MainAccountUpdateNatureCodeFeature_BR::instance());
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addExplNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds explanatory note to the SPED record.
    /// </summary>
    /// <param name = "_spedRecord">
    /// The object representing a record in a SPED text file.
    /// </param>
    protected void addExplNote(FBSpedRecord_BR _spedRecord)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldIndRespLegal</Name>
				<Source><![CDATA[
    protected void addFieldIndRespLegal(FBSpedRecord_BR _spedRecord, LegalRepresentative_BR _legalRepresentative)
    {
        _spedRecord.addFieldString(_legalRepresentative.TaxAuthorityValidation ? 'S' : 'N', 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxSubstitutionIEs</Name>
				<Source><![CDATA[
    private int addTaxSubstitutionIEs(FBSpedRecord_BR _parentRecord, FiscalEstablishment_BR _fiscalEstablishment)
    {
        FBSpedRecord_BR                     spedRecord;
        FiscalEstablishmentIEPerState_BR    fEstablishmentIEPerState;
        int                                 recordCount;

        while select crossCompany fEstablishmentIEPerState
            where fEstablishmentIEPerState.FiscalEstablishment_BR   == _fiscalEstablishment.RecId
        {
            spedRecord  = FBSpedRecord_BR::constructEmpty('0007');

            spedRecord.addFieldString   (fEstablishmentIEPerState.StateId);     // COD_ENT_REF
            spedRecord.addFieldString   (fEstablishmentIEPerState.IENum_BR);    // COD_INSCR

            this.addChildRecord(_parentRecord, spedRecord);

            recordCount++;
        }

        return recordCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateClosingAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the closing amounts of a given period.
    /// </summary>
    /// <param name="_trialBalanceTmp">
    /// The trial balance.
    /// </param>
    /// <param name="_beginPeriod">
    /// The start date of the given period.
    /// </param>
    /// <param name="_endPeriod">
    /// The end date of the given period.
    /// </param>
    /// <returns>
    /// The debit, credit and closing amount of the given period.
    /// </returns>
    protected container calculateClosingAmounts(LedgerTrialBalanceTmp _trialBalanceTmp, date _beginPeriod, date _endPeriod)
    {
        container balanceResult;

        if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            return this.calculateClosingAmountsV2(_trialBalanceTmp, _beginPeriod, _endPeriod);
        }
        else
        {
            LedgerTransAccountTmp           ledgerTransAccountTmp;
            AmountMST                       debitAmount, creditAmount, closingBalance;
            GeneralJournalEntry             generalJournalEntry;
            GeneralJournalAccountEntry      generalJournalAccountEntry;
            GeneralJournalAccountEntry_W    generalJournalAccountEntryW;
            FiscalCalendarPeriod            fiscalCalendarPeriod;

            ledgerTransAccountTmp   = null;

            var createdTransactionId = LedgerTransAccountTmp::fillFromLedgerDimension(_trialBalanceTmp.LedgerDimension);

            while select RecId from generalJournalEntry
            where   generalJournalEntry.Ledger          == Ledger::current()
                &&  generalJournalEntry.PostingLayer    == CurrentOperationsTax::Current
                &&  generalJournalEntry.AccountingDate  >= _beginPeriod
                &&  generalJournalEntry.AccountingDate  <= _endPeriod
            join RecId, LedgerDimension, AccountingCurrencyAmount from generalJournalAccountEntry
                where   generalJournalAccountEntry.GeneralJournalEntry  == generalJournalEntry.RecId
            join RecId from generalJournalAccountEntryW
                where   generalJournalAccountEntryW.GeneralJournalAccountEntry  == generalJournalAccountEntry.RecId
                    &&  generalJournalAccountEntryW.IsAccountingClosing_BR      == NoYes::Yes
            exists join fiscalCalendarPeriod
                where   fiscalCalendarPeriod.RecId  == generalJournalEntry.FiscalCalendarPeriod
                    &&  fiscalCalendarPeriod.Type   == FiscalPeriodType::Closing
            exists join ledgerTransAccountTmp
                where   generalJournalAccountEntry.LedgerDimension == ledgerTransAccountTmp.LedgerDimension
                    &&  ledgerTransAccountTmp.CreatedTransactionId == createdTransactionId
            {
                if (this.getMainAccountCostCenter(_trialBalanceTmp.LedgerDimension) != this.getMainAccountCostCenter(generalJournalAccountEntry.LedgerDimension))
                {
                    continue;
                }

                if (generalJournalAccountEntry.AccountingCurrencyAmount > 0)
                {
                    debitAmount     += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
                }
                else
                {
                    creditAmount    += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
                }

                closingBalance  += generalJournalAccountEntry.AccountingCurrencyAmount;
            }

            LedgerTransAccountTmp::deleteForCreatedTransactionId(createdTransactionId);

            balanceResult = [debitAmount, creditAmount, closingBalance];
        }

        return balanceResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateClosingAmountsV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the closing amounts of a given period.
    /// </summary>
    /// <param name="_trialBalanceTmp">
    /// The trial balance.
    /// </param>
    /// <param name="_beginPeriod">
    /// The start date of the given period.
    /// </param>
    /// <param name="_endPeriod">
    /// The end date of the given period.
    /// </param>
    /// <returns>
    /// The debit, credit and closing amount of the given period.
    /// </returns>
    protected container calculateClosingAmountsV2(LedgerTrialBalanceTmp _trialBalanceTmp, date _beginPeriod, date _endPeriod)
    {
        AmountMST debitAmount, creditAmount, closingBalance;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalAccountEntry_W generalJournalAccountEntryW;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        GeneralLedgerBalanceReportingDimensionReference generalLedgerBalanceReportingDimensionReference;
        GeneralLedgerBalanceReportingDimension generalLedgerBalanceReportingDimension;
        DimensionHierarchy dimensionHierarchy = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, mainAccountCostCenterDimensionSet);

        while select RecId from generalJournalEntry
            where generalJournalEntry.Ledger == Ledger::current()
                && generalJournalEntry.PostingLayer == CurrentOperationsTax::Current
                && generalJournalEntry.AccountingDate >= _beginPeriod
                &&  generalJournalEntry.AccountingDate <= _endPeriod
            join LedgerDimension, AccountingCurrencyAmount from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join generalJournalAccountEntryW
                where generalJournalAccountEntryW.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntryW.IsAccountingClosing_BR == NoYes::Yes
            join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Closing
            join generalLedgerBalanceReportingDimensionReference
                where generalJournalAccountEntry.LedgerDimension == generalLedgerBalanceReportingDimensionReference.AccountEntryLedgerDimension
                    && generalLedgerBalanceReportingDimensionReference.FocusDimensionHierarchy == dimensionHierarchy.RecId
            join generalLedgerBalanceReportingDimension
                where generalLedgerBalanceReportingDimension.RecId == generalLedgerBalanceReportingDimensionReference.ReportingDimension
                    && generalLedgerBalanceReportingDimension.FocusDimensionHierarchy == dimensionHierarchy.RecId
                    && generalLedgerBalanceReportingDimension.RecId == _trialBalanceTmp.ReportingDimension
        {
            if (this.getMainAccountCostCenterV2(_trialBalanceTmp.ReportingDimension) != this.getMainAccountCostCenter(generalJournalAccountEntry.LedgerDimension))
            {
                continue;
            }

            if (generalJournalAccountEntry.AccountingCurrencyAmount > 0)
            {
                debitAmount += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
            }
            else
            {
                creditAmount += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
            }

            closingBalance += generalJournalAccountEntry.AccountingCurrencyAmount;
        }

        return [debitAmount, creditAmount, closingBalance];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlock0</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates block 0.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block 0 belongs to.
    /// </param>
    protected void createBlock0(FBSpedRecord_BR _parentRecord)
    {
        this.createRecord0001(_parentRecord);
        this.createRecord0990(_parentRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates block I.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block I belongs to.
    /// </param>
    protected void createBlockI(FBSpedRecord_BR _parentRecord)
    {
        this.createRecordI001(_parentRecord);
        this.createRecordI990(_parentRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlockJ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates block J.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J belongs to.
    /// </param>
    protected void createBlockJ(FBSpedRecord_BR _parentRecord)
    {
        this.createRecordJ001(_parentRecord);
        this.createrecordJ990(_parentRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0000</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block 0000 and its child blocks.
    /// </summary>
    protected void createRecord0000()
    {
        FBSpedRecord_BR         spedRecord;
        LogisticsPostalAddress  fiscalEstablishmentAddress = fiscalEstablishment.postalAddress();

        spedRecord  = FBSpedRecord_BR::constructEmpty('0000');

        spedRecord.addFieldString                   ('LECD');                                                   // LECD
        spedRecord.addFieldDate                     (fromDate);                                                 // DT_INI
        spedRecord.addFieldDate                     (toDate);                                                   // DT_FIN
        spedRecord.addFieldString                   (fiscalEstablishment.Name);                                 // NOME
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(fiscalEstablishment.CNPJCPFNum_BR), 14);  // CNPJ
        spedRecord.addFieldString                   (fiscalEstablishmentAddress.State);                         // UF
        spedRecord.addFieldString                   (this.keepAlphaAndNumbers(fiscalEstablishment.IENum_BR));   // IE
        spedRecord.addFieldNumericFilledWithZeros   (this.getCityCode(fiscalEstablishmentAddress), 7);          // COD_MUN
        spedRecord.addFieldString                   (this.keepAlphaAndNumbers(fiscalEstablishment.CCMNum_BR));  // IM
        if (situationType)
        {
            spedRecord.addFieldNumeric              (situationType);                                            // IND_SIT_ESP
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // IND_SIT_ESP
        }
        spedRecord.addFieldNumeric                  (openingPeriodSituation);                                   // IND_SIT_INI_PER
        spedRecord.addFieldNumeric                  (fiscalEstablishment.NIRE ? 1 : 0);                         // IND_NIRE
        spedRecord.addFieldNumeric                  (fileType);                                                 // IND_FIN_ESC
        if (fileType == FBSPEDFileType_BR::Substitute)
        {
            spedRecord.addFieldString               (fileHash);                                                 // COD_HASH_SUB
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // COD_HASH_SUB
        }
        spedRecord.addFieldEmpty                    ();                                                         // NIRE_SUBST
        spedRecord.addFieldNumeric                  (spedContabilSetupParameters.IsLargeCompany ? 1 : 0);       // EGP

        this.addRecord(spedRecord);

        this.createBlock0(spedRecord);
        this.createBlockI(spedRecord);
        this.createBlockJ(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0001</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block 0001 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block 0001 belongs to.
    /// </param>
    protected void createRecord0001(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord  = FBSpedRecord_BR::constructEmpty('0001');

        spedRecord.addFieldNumeric(0);  // IND_DAD

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecord0007(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0007</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block 0007 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block 0007 belongs to.
    /// </param>
    protected void createRecord0007(FBSpedRecord_BR _parentRecord)
    {
        FiscalEstablishment_BR              fEstablishment;
        FBSpedRecord_BR                     spedRecord;
        int                                 recordCount = 0;

        recordCount += this.addTaxSubstitutionIEs(_parentRecord, fiscalEstablishment);

        while select crossCompany fEstablishment where fEstablishment.FiscalOrganization_BR == fiscalOrganization.RecId
        {
            spedRecord  = FBSpedRecord_BR::constructEmpty('0007');

            spedRecord.addFieldString   (fEstablishment.postalAddress().State); // COD_ENT_REF
            spedRecord.addFieldString   (fEstablishment.IENum_BR);              // COD_INSCR

            this.addChildRecord(_parentRecord, spedRecord);

            recordCount++;

            recordCount += this.addTaxSubstitutionIEs(_parentRecord, fEstablishment);
        }

        if (!recordCount)
        {
            spedRecord  = FBSpedRecord_BR::constructEmpty('0007');

            spedRecord.addFieldString   ('00'); // COD_ENT_REF
            spedRecord.addFieldEmpty    ();     // COD_INSCR

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0220</Name>
				<Source><![CDATA[
    protected void createRecord0220(FBSpedRecord_BR _parentRecord, InventTable _inventTable)
    {
        throw Error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0990</Name>
				<Source><![CDATA[
    private void createRecord0990(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord  = FBSpedRecord_BR::constructEmpty('0990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('0') + 1);  // QTD_LIN_0

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord9900</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 9900 record.
    /// </summary>
    protected void createRecord9900()
    {
        SetEnumerator   se;
        Set             recordTypes = spedFile.recordTypes();
        str             recordType;
        FBSpedRecord_BR record9900;

        void createRecord9900ForRecordType(str _recordType, int64 _totalOfRecords)
        {
            record9900 = this.newRecord('9900');
            record9900.addFieldString(_recordType);
            record9900.addFieldNumeric(_totalOfRecords);
            this.addRecord(record9900);
        }

        se = recordTypes.getEnumerator();
        while (se.moveNext())
        {
            recordType = se.current();
            createRecord9900ForRecordType(recordType, spedFile.totalRecordsOfType(recordType));
        }

        createRecord9900ForRecordType('9001', 1);
        createRecord9900ForRecordType('9900', spedFile.totalRecordsOfType('9900') + 3);

        createRecord9900ForRecordType('9990', 1);
        createRecord9900ForRecordType('9999', 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord9999</Name>
				<Source><![CDATA[
    protected void createRecord9999()
    {
        FBSpedRecord_BR spedRecord;

        spedTotalRecords    = spedFile.totalRecords() + 2;

        spedRecord = this.newRecord('9999');
        spedRecord.addFieldNumeric(spedTotalRecords);

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI001</Name>
				<Source><![CDATA[
    private void createRecordI001(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord  = FBSpedRecord_BR::constructEmpty('I001');

        spedRecord.addFieldNumeric(0);  // IND_DAD

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecordI010(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI010</Name>
				<Source><![CDATA[
    private void createRecordI010(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord  = FBSpedRecord_BR::constructEmpty('I010');

        spedRecord.addFieldString   (enum2str(type));          // IND_ESC
        spedRecord.addFieldString   (enum2str(layoutVersion)); // COD_VER_LC

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecordI030(spedRecord);
        this.createRecordI050(spedRecord);
        this.createRecordI100(spedRecord);
        this.createRecordI150(spedRecord);
        this.createRecordI200(spedRecord);
        this.createRecordI350(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI030</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block I030 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block I030 belongs to.
    /// </param>
    protected void createRecordI030(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord  = FBSpedRecord_BR::constructEmpty('I030');

        spedRecord.addFieldString                   ('TERMO DE ABERTURA');                                      // DNRC_ABERT
        spedRecord.addFieldNumeric                  (bookNumber);                                               // NUM_ORD
        spedRecord.addFieldString                   ('DIÁRIO GERAL');                                           // NAT_LIVR
        spedRecord.addFieldString                   ('%QTD_LINHA%');                                            // QTD_LIN
        spedRecord.addFieldString                   (fiscalEstablishment.Name);                                 // NOME
        spedRecord.addFieldString                   (fiscalEstablishment.NIRE);                                 // NIRE
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(fiscalEstablishment.CNPJCPFNum_BR), 14);  // CNPJ

        if (fiscalOrganization.ConstitutionArchiveDate)
        {
            spedRecord.addFieldDate                 (fiscalOrganization.ConstitutionArchiveDate);               // DT_ARQ
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // DT_ARQ
        }

        if (fiscalOrganization.ConversionArchiveDate)
        {
            spedRecord.addFieldDate                 (fiscalOrganization.ConversionArchiveDate);                 // DT_ARQ_CONV
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // DT_ARQ_CONV
        }

        spedRecord.addFieldString                   (fiscalEstablishment.postalAddress().City);                 // DESC_MUN
        spedRecord.addFieldEmpty                    ();                                                         // DT_EX_SOCIAL
        spedRecord.addFieldString                   (spedContabilSetupParameters.AuditorName);                  // NOME_AUDITOR
        spedRecord.addFieldString                   (spedContabilSetupParameters.AuditorCVMNumber);             // NUM_CVM_AUDITOR

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI050</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block I050 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block I050 belongs to.
    /// </param>
    protected void createRecordI050(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR         spedRecord;
        MainAccount             mainAccount;
        DimensionAttributeValue dimensionAttributeValue;
        str                     accountAnalyticalSynthetic;

        while select mainAccount
            order by mainAccount.MainAccountId
            where   mainAccount.LedgerChartOfAccounts   == Ledger::chartOfAccounts(CompanyInfo::current())
                &&  mainAccount.Type                    != DimensionLedgerAccountType::Reporting
                &&  mainAccount.Type                    != DimensionLedgerAccountType::Common_CN
        {
            select firstonly * from dimensionAttributeValue
            where   dimensionAttributeValue.EntityInstance      == mainAccount.RecId
                &&  dimensionAttributeValue.DimensionAttribute  == mainAccountDimAttrRecId;

            accountAnalyticalSynthetic  = mainAccount.hasChildAccount() ? 'S': 'A';

            spedRecord  = FBSpedRecord_BR::constructEmpty('I050');

            spedRecord.addFieldDate     (dimensionAttributeValue.ActiveFrom ? dimensionAttributeValue.ActiveFrom : fromDate);   // DT_ALT
            spedRecord.addFieldString   (this.getAccountNatureCode(mainAccount.getType()));                                     // COD_NAT
            spedRecord.addFieldString   (accountAnalyticalSynthetic);                                                           // IND_CTA
            spedRecord.addFieldNumeric  (mainAccount.getAccountLevel());                                                        // NIVEL
            spedRecord.addFieldString   (mainAccount.MainAccountId);                                                            // COD_CTA

            if (mainAccount.ParentMainAccount)
            {
                spedRecord.addFieldString   (MainAccount::find(mainAccount.ParentMainAccount).MainAccountId);                // COD_CTA_SUP
            }
            else
            {
                spedRecord.addFieldEmpty    ();                                                                                 // COD_CTA_SUP
            }

            spedRecord.addFieldString       (mainAccount.Name);                                                                 // CTA

            this.addChildRecord(_parentRecord, spedRecord);

            if (accountAnalyticalSynthetic == 'A')
            {
                this.createRecordI052(spedRecord, mainAccount.MainAccountId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI052</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the I052 blocks for the specified SPED record and main account.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record of the created I052 blocks.
    /// </param>
    /// <param name="_mainAccountNum">
    /// The main account.
    /// </param>
    protected void createRecordI052(FBSpedRecord_BR _parentRecord, MainAccountNum _mainAccountNum)
    {
        FBSpedContabilAccountTree_BR    spedContabilAccountTree, spedContabilAccountTreeAux;
        FBSpedRecord_BR                 spedRecord;

        select firstOnly spedContabilAccountTree where spedContabilAccountTree.AccountCode == _mainAccountNum;

        if (spedContabilAccountTree)
        {
            while select AccountCode from spedContabilAccountTreeAux
                order by spedContabilAccountTreeAux.AccountLevel
                where   spedContabilAccountTreeAux.LeftValue    < spedContabilAccountTree.LeftValue
                    &&  spedContabilAccountTreeAux.RightValue   > spedContabilAccountTree.RightValue
            {
                spedRecord  = FBSpedRecord_BR::constructEmpty('I052');

                spedRecord.addFieldEmpty    ();                                                 // COD_CCUS
                spedRecord.addFieldString   (spedContabilAccountTreeAux.AccountCode);           // COD_AGL

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI100</Name>
				<Source><![CDATA[
    protected void createRecordI100(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR         spedRecord;
        DimensionAttributeValue costCenter;

        while select costCenter where costCenter.DimensionAttribute == costCenterDimAttrRecId
        {
            spedRecord  = FBSpedRecord_BR::constructEmpty('I100');

            spedRecord.addFieldDate     (costCenter.ActiveFrom ? costCenter.ActiveFrom : fromDate); // DT_ALT
            spedRecord.addFieldString   (costCenter.getValue());                                    // COD_CCUS
            spedRecord.addFieldString   (costCenter.getName());                                     // CCUS

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI150</Name>
				<Source><![CDATA[
    private void createRecordI150(FBSpedRecord_BR _parentRecord)
    {
        date                        beginPeriod, endPeriod;

        beginPeriod     = fromDate;

        while (endPeriod < toDate)
        {
            endPeriod = mthOfYr(toDate) == mthOfYr(beginPeriod) ? toDate : endmth(beginPeriod);

            LedgerTrialBalanceTmp trialBalanceTmp = this.calcTrialBalance(beginPeriod, endPeriod);

            this.getRunBaseProgress().setCaption(strFmt("@FBK89", beginPeriod, endPeriod));

            FBSpedRecord_BR spedRecord  = FBSpedRecord_BR::constructEmpty('I150');

            spedRecord.addFieldDate (beginPeriod);  // DT_INI
            spedRecord.addFieldDate (endPeriod);    // DT_FIN

            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecordI155(spedRecord, trialBalanceTmp, beginPeriod, endPeriod);

            beginPeriod = endPeriod + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI155</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record I155 for the specifed SPED record.
    /// </summary>
    /// <param name = "_parentRecord">
    /// The parent record that the block I155 belongs to.
    /// </param>
    /// <param name = "_trialBalanceTmp">
    /// Trial balance table.
    /// </param>
    /// <param name = "_beginPeriod">
    /// The begin date of period.
    /// </param>
    /// <param name = "_endPeriod">
    /// The end date of period.
    /// </param>
    [Hookable]
    protected void createRecordI155(
        FBSpedRecord_BR _parentRecord, 
        LedgerTrialBalanceTmp _trialBalanceTmp, 
        date _beginPeriod, 
        date _endPeriod)
    {
        AmountMST                           creditAmount, debitAmount;
        AmountMST                           closingBalance;
        FBSpedRecord_BR                     spedRecord;
        container                           mainAccountCostCenter;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        boolean                             includeClosing = false;
        container                           closingAmounts;

        void setDebitCreditAmounts()
        {
            debitAmount     = 0;
            creditAmount    = 0;

            debitAmount     = _trialBalanceTmp.AmountDebit;
            creditAmount    = _trialBalanceTmp.AmountCredit;
        }

        void setClosingDebitCreditAmounts()
        {
            closingAmounts  = this.calculateClosingAmounts(_trialBalanceTmp, _beginPeriod, _endPeriod);

            debitAmount     += conPeek(closingAmounts, 1);
            creditAmount    += conPeek(closingAmounts, 2);
            closingBalance  = conPeek(closingAmounts, 3);
        }

        select firstOnly fiscalCalendarPeriod
            where fiscalCalendarPeriod.Type == FiscalPeriodType::Closing
                &&  fiscalCalendarPeriod.EndDate    <= _endPeriod
                &&  fiscalCalendarPeriod.StartDate  >= _beginPeriod
                &&  fiscalCalendarPeriod.FiscalCalendarYear == FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), _endPeriod).RecId;

        if (fiscalCalendarPeriod)
        {
            includeClosing  = true;
        }

        select count(RecId) from _trialBalanceTmp;

        this.getRunBaseProgress().setCount(0);
        this.getRunBaseProgress().setTotal(_trialBalanceTmp.RecId);
        this.getRunBaseProgress().update(true);

        while select    * from _trialBalanceTmp
            order by    _trialBalanceTmp.PrimaryFocus
        {
            setDebitCreditAmounts();

            if (includeClosing)
            {
                setClosingDebitCreditAmounts();
            }

            if (_trialBalanceTmp.OpeningBalance == 0 && debitAmount == 0 && creditAmount == 0 && _trialBalanceTmp.EndingBalance == 0)
            {
                continue;
            }

            if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                mainAccountCostCenter = this.getMainAccountCostCenterV2(_trialBalanceTmp.ReportingDimension);
            }
            else
            {
                mainAccountCostCenter = this.getMainAccountCostCenter(_trialBalanceTmp.LedgerDimension);
            }

            spedRecord  = FBSpedRecord_BR::constructEmpty('I155');

            spedRecord.addFieldString   (conPeek(mainAccountCostCenter, 1));                                                                    // COD_CTA
            spedRecord.addFieldString   (conPeek(mainAccountCostCenter, 2));                                                                    // COD_CCUS
            spedRecord.addFieldNumeric  (abs(_trialBalanceTmp.OpeningBalance),  2);                                                             // VL_SLD_INI
            spedRecord.addFieldString   (_trialBalanceTmp.OpeningBalance >= 0 ? 'D' : 'C');                                                     // IND_DC_INI
            spedRecord.addFieldNumeric  (abs(debitAmount), 2);                                                                                  // VL_DEB
            spedRecord.addFieldNumeric  (abs(creditAmount), 2);                                                                                 // VL_CRED
            spedRecord.addFieldNumeric  (abs(_trialBalanceTmp.EndingBalance - (_trialBalanceTmp.ClosingAdjustments + _trialBalanceTmp.ClosingTransactions) + closingBalance), 2);            // VL_SLD_FIN
            spedRecord.addFieldString   (_trialBalanceTmp.EndingBalance - (_trialBalanceTmp.ClosingAdjustments + _trialBalanceTmp.ClosingTransactions) + closingBalance >= 0 ? 'D' : 'C');   // IND_DC_FIN

            this.addChildRecord(_parentRecord, spedRecord);

            this.getRunBaseProgress().incCount(1);
            this.getRunBaseProgress().setText(strFmt("@FBK90",
                                                     conPeek(mainAccountCostCenter, 1),
                                                     conPeek(mainAccountCostCenter, 2)));
            this.getRunBaseProgress().update(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI200</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block I200 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block I200 belongs to.
    /// </param>
    protected void createRecordI200(FBSpedRecord_BR _parentRecord)
    {
        const real SplitProgressBar = 20.00;
        
        List                            journalLines;
        FBSpedRecord_BR                 spedRecord;
        GeneralJournalEntry             generalJournalEntry;
        GeneralJournalAccountEntry      generalJournalAccountEntry;
        generalJournalAccountEntry_W    generalJournalAccountEntryW;
        FiscalCalendarPeriod            fiscalCalendarPeriod;
        FiscalCalendarYear              fiscalCalendarYear;
        GeneralJournalEntryRecId        generalJournalEntryRecId;
        Voucher                         voucher;
        date                            accountingDate;
        FiscalPeriodType                fiscalPeriodType;
        AmountMST                       amount;
        real                            progressBarIncrement;
        real                            gjeCount;
        real                            nextTargetValue;
        
        boolean journalChanged()
        {
            return generalJournalEntryRecId != generalJournalEntry.RecId;
        }
        
        void writeCurrentRecord()
        {
            if (generalJournalEntryRecId && journalLines.elements() > 0)
            {
                spedRecord  = FBSpedRecord_BR::constructEmpty('I200');
                
                spedRecord.addFieldString   (voucher);                                                      // NUM_LCTO
                spedRecord.addFieldDate     (accountingDate);                                               // DT_LCTO
                spedRecord.addFieldNumeric  (abs(amount), 2);                                               // VL_LCTO
                spedRecord.addFieldString   (fiscalPeriodType == FiscalPeriodType::Closing ? ' E' : 'N');   // IND_LCTO
                
                this.addChildRecord(_parentRecord, spedRecord);
                
                this.createRecordI250(spedRecord, journalLines);
                
                if (fiscalPeriodType == fiscalPeriodType::Closing)
                {
                    hasClosingTransactions  = true;
                }
            }
        }
        
        void reset()
        {
            generalJournalEntryRecId    = generalJournalEntry.RecId;
            journalLines                = new List(Types::Container);
            amount                      = 0;
        }
        
        void initJournalHeader()
        {
            voucher             = generalJournalEntry.SubledgerVoucher == '' ? generalJournalEntry.JournalNumber : generalJournalEntry.SubledgerVoucher;
            accountingDate      = generalJournalEntry.AccountingDate;
            fiscalPeriodType    = fiscalCalendarPeriod.Type;
            
            gjeCount += 1;
            
            if (gjeCount >= nextTargetValue)
            {
                this.getRunBaseProgress().incCount(1);
                this.getRunBaseProgress().setText(strFmt("@FBK71",
                                                         voucher,
                                                         accountingDate));
                this.getRunBaseProgress().update(true);
                
                nextTargetValue += progressBarIncrement;
            }
        }
        
        void addJournalLine()
        {
            container journalLine;
            
            journalLine = [generalJournalAccountEntry.LedgerDimension, generalJournalAccountEntry.AccountingCurrencyAmount, generalJournalAccountEntry.Text];
            
            journalLines.addEnd(journalLine);
            
            amount     += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        
        fiscalCalendarYear  = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), toDate);
        
        select count(RecId) from generalJournalEntry
                    where   generalJournalEntry.Ledger          == Ledger::current()
                        &&  generalJournalEntry.AccountingDate  >= fromDate
                        &&  generalJournalEntry.AccountingDate  <= toDate;
        
        progressBarIncrement    = generalJournalEntry.RecId < SplitProgressBar ? 1.00 : (generalJournalEntry.RecId / SplitProgressBar);
        nextTargetValue         = progressBarIncrement;
        
        this.getRunBaseProgress().setCount(0);
        this.getRunBaseProgress().setTotal(real2int(SplitProgressBar));
        this.getRunBaseProgress().setCaption("@FBK72");
        this.getRunBaseProgress().update(true);
        
        while select generalJournalEntry
            order by generalJournalEntry.JournalNumber, generalJournalEntry.FiscalCalendarYear, generalJournalEntry.Ledger, generalJournalAccountEntry.RecId
                where   generalJournalEntry.Ledger          == Ledger::current()
                    &&  generalJournalEntry.AccountingDate  >= fromDate
                    &&  generalJournalEntry.AccountingDate  <= toDate
            join fiscalCalendarPeriod
                where   generalJournalEntry.FiscalCalendarPeriod    == fiscalCalendarPeriod.RecId
                    &&  (
                            fiscalCalendarPeriod.Type               == FiscalPeriodType::Operating
                        ||  fiscalCalendarPeriod.Type               == FiscalPeriodType::Closing
                        )
            join generalJournalAccountEntry
                where   generalJournalAccountEntry.GeneralJournalEntry  == generalJournalEntry.RecId
            outer join generalJournalAccountEntryW
                where   generalJournalAccountEntryW.GeneralJournalAccountEntry  == generalJournalAccountEntry.RecId
        {
            if (journalChanged())
            {
                writeCurrentRecord();
                reset();
                initJournalHeader();
            }
            
            if (fiscalCalendarPeriod.Type == FiscalPeriodType::Closing && generalJournalAccountEntryW.IsAccountingClosing_BR == NoYes::No)
            {
                continue;
            }
            
            addJournalLine();
        }
        
        writeCurrentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountName</Name>
				<Source><![CDATA[
    private Name getAccountName(MainAccountNum _accountId)
    {
        return MainAccount::findByMainAccountId(_accountId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNameCached</Name>
				<Source><![CDATA[
    private Name getAccountNameCached(MainAccountNum _accountId)
    {
        if (mainAccountCache.exists(_accountId))
        {
            return mainAccountCache.lookup(_accountId);
        }
        Name ret = this.getAccountName(_accountId);
        mainAccountCache.insert(_accountId, ret);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI250</Name>
				<Source><![CDATA[
    protected void createRecordI250(FBSpedRecord_BR _parentRecord, List _journalLines)
    {
        FBSpedRecord_BR     spedRecord;
        ListEnumerator      journalLinesEnumerator;
        container           mainAccountCostCenter;
        RecId               ledgerDimension;
        AmountMST           accountingCurrencyAmount;
        str                 text;

        journalLinesEnumerator  = _journalLines.getEnumerator();

        while (journalLinesEnumerator.moveNext())
        {
            [ledgerDimension, accountingCurrencyAmount, text] = journalLinesEnumerator.current();

            spedRecord  = FBSpedRecord_BR::constructEmpty('I250');

            mainAccountCostCenter   = this.getMainAccountCostCenter(ledgerDimension);

            spedRecord.addFieldString       (conPeek(mainAccountCostCenter, 1));                                        // COD_CTA
            spedRecord.addFieldString       (conPeek(mainAccountCostCenter, 2));                                        // COD_CCUS
            spedRecord.addFieldNumeric      (abs(accountingCurrencyAmount), 2);                                         // VL_DC
            spedRecord.addFieldString       (accountingCurrencyAmount >= 0 ? 'D' : 'C');                                // IND_DC
            spedRecord.addFieldEmpty        ();                                                                         // NUM_ARQ
            spedRecord.addFieldEmpty        ();                                                                         // COD_HIST_PAD

            if (!text)
            {
                spedRecord.addFieldString   (this.getAccountNameCached(conPeek(mainAccountCostCenter, 1)));             // HIST
            }
            else
            {
                spedRecord.addFieldString   (text);                                                                     // HIST
            }

            spedRecord.addFieldEmpty        ();                                                                         // COD_PART

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI350</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the I350 record for the specified SPED record.
    /// </summary>
    /// <param name = "_parentRecord">
    /// The parent record that the record I350 belongs to.
    /// </param>
    internal void createRecordI350(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR         spedRecord;
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        FiscalCalendarYear      fiscalCalendarYear;

        fiscalCalendarYear  = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), toDate);

        select firstonly EndDate from fiscalCalendarPeriod
            where   fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                &&  fiscalCalendarPeriod.Type               == FiscalPeriodType::Closing;

        if (hasClosingTransactions)
        {
            spedRecord  = FBSpedRecord_BR::constructEmpty('I350');

            spedRecord.addFieldDate (fiscalCalendarPeriod.EndDate); // DT_RES

            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecordI355(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI355</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the I355 record for the specified SPED record.
    /// </summary>
    /// <param name = "_parentRecord">
    /// The parent record that the record I355 belongs to.
    /// </param>
    [Hookable]
    protected void createRecordI355(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR             spedRecord;
        container                   mainAccountCostCenter;
        MainAccount                 mainAccount;

        LedgerTrialBalanceTmp trialBalanceTmp = this.calcTrialBalance(toDate, toDate, true, false);

        while select    LedgerDimension, ReportingDimension, EndingBalance from trialBalanceTmp
            order by    trialBalanceTmp.PrimaryFocus
        {
            if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                mainAccountCostCenter = this.getMainAccountCostCenterV2(trialBalanceTmp.ReportingDimension);
            }
            else
            {
                mainAccountCostCenter = this.getMainAccountCostCenter(trialBalanceTmp.LedgerDimension);
            }

            mainAccount             = MainAccount::findByMainAccountId(conPeek(mainAccountCostCenter, 1));

            if (this.getAccountNatureCode(mainAccount.Type) == TotalAccounts)
            {
                spedRecord  = FBSpedRecord_BR::constructEmpty('I355');

                spedRecord.addFieldString   (mainAccount.MainAccountId);                        // COD_CTA
                spedRecord.addFieldString   (conPeek(mainAccountCostCenter, 2));                // COD_CCUS
                spedRecord.addFieldNumeric  (abs(trialBalanceTmp.EndingBalance), 2);            // VL_CTA
                spedRecord.addFieldString   (trialBalanceTmp.EndingBalance >= 0 ? 'D' : 'C');   // IND_DC

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI990</Name>
				<Source><![CDATA[
    private void createRecordI990(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('I990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('I') + 1);

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ001</Name>
				<Source><![CDATA[
    private void createRecordJ001(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('J001');

        spedRecord.addFieldNumeric  (0);    // IND_DAD

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecordJ005(spedRecord);
        this.createRecordJ801(spedRecord);
        this.createRecordJ900(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ005</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block J005 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J005 belongs to.
    /// </param>
    protected void createRecordJ005(FBSpedRecord_BR _parentRecord)
    {
        container                       mainAccountCostCenter;
        date                            beginPeriod, endPeriod;
        FBSpedContabilAccountTree_BR    spedContabilAccountTree;
        FBSpedRecord_BR                 spedRecord;
        FiscalCalendarPeriod            fiscalCalendarPeriod;
        LedgerTrialBalanceContract      trialBalanceContract;
        LedgerTrialBalanceDP            trialBalanceDP;
        MainAccountNum                  mainAccountNumber;
        SetEnumerator                   setOfPeriodsEnumerator;
        boolean                         includeClosing = false;
        str                             accountNatureCode;

        if (!addAccountingStatement)
        {
            return;
        }

        setOfPeriodsEnumerator  = this.getAccountingStatementPeriods().getEnumerator();

        while (setOfPeriodsEnumerator.moveNext())
        {
            this.resetBalance();

            [beginPeriod, endPeriod] = setOfPeriodsEnumerator.current();

            spedRecord  = FBSpedRecord_BR::constructEmpty('J005');

            spedRecord.addFieldDate     (beginPeriod);  // DT_INI
            spedRecord.addFieldDate     (endPeriod);    // DT_FIN
            spedRecord.addFieldNumeric  (1);            // ID_DEM
            spedRecord.addFieldEmpty    ();             // CAB_DEM

            this.addChildRecord(_parentRecord, spedRecord);

            LedgerTrialBalanceTmp trialBalanceTmp = this.calcTrialBalance(beginPeriod, endPeriod);

            select firstOnly fiscalCalendarPeriod
                where fiscalCalendarPeriod.Type == FiscalPeriodType::Closing
                    &&  fiscalCalendarPeriod.EndDate    <= endPeriod
                    &&  fiscalCalendarPeriod.StartDate  >= beginPeriod
                    &&  fiscalCalendarPeriod.FiscalCalendarYear == FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), endPeriod).RecId;

            if (fiscalCalendarPeriod)
            {
                includeClosing  = true;
            }
            else
            {
                includeClosing  = false;
            }

            while select    * from trialBalanceTmp
                order by    trialBalanceTmp.PrimaryFocus
            {
                if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
                {
                    mainAccountCostCenter = this.getMainAccountCostCenterV2(trialBalanceTmp.ReportingDimension);
                }
                else
                {
                    mainAccountCostCenter = this.getMainAccountCostCenter(trialBalanceTmp.LedgerDimension);
                }

                mainAccountNumber       = conPeek(mainAccountCostCenter, 1);

                ttsBegin;

                spedContabilAccountTree = FBSpedContabilAccountTree_BR::find(mainAccountNumber, true);

                if (spedContabilAccountTree)
                {
                    spedContabilAccountTree.OpeningBalance  += trialBalanceTmp.OpeningBalance;

                    if (useNatureCode)
                    {
                        accountNatureCode   = MainAccount::findByMainAccountId(mainAccountNumber).NatureCode_BR;
                    }
                    else
                    {
                        accountNatureCode   = this.getAccountNatureCode(MainAccount::findByMainAccountId(mainAccountNumber).getType());
                    }

                    if (accountNatureCode == Equity && includeClosing)
                    {
                        spedContabilAccountTree.EndingBalance   +=
                                trialBalanceTmp.EndingBalance
                            -   (trialBalanceTmp.ClosingAdjustments + trialBalanceTmp.ClosingTransactions)
                            +   conPeek(this.calculateClosingAmounts(trialBalanceTmp, beginPeriod, endPeriod), 3);
                    }
                    else
                    {
                        spedContabilAccountTree.EndingBalance   += trialBalanceTmp.EndingBalance - (trialBalanceTmp.ClosingAdjustments + trialBalanceTmp.ClosingTransactions);
                    }

                    spedContabilAccountTree.update();
                }

                ttsCommit;
            }

            this.createRecordJ100(spedRecord);
            this.createRecordJ150(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ100</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block J100 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J100 belongs to.
    /// </param>
    protected void createRecordJ100(FBSpedRecord_BR _parentRecord)
    {
        this.writeRecordJ100(_parentRecord, 1, 0, intMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ150</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block J150 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J150 belongs to.
    /// </param>
    protected void createRecordJ150(FBSpedRecord_BR _parentRecord)
    {
        this.writeRecordJ150(_parentRecord, 1, 0, intMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ801</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block J801.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J801 belongs to.
    /// </param>
    protected void createRecordJ801(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR         spedRecord;
        FBSpedFieldString_BR    spedFieldStr;
        str                     rtfData;

        if (fileType != FBSPEDFileType_BR::Original)
        {
            rtfData = strReplace(replaceRTFFileContent, '\n', '');
            rtfData = strReplace(rtfData, '\r', '');

            spedFieldStr = new FBSpedFieldString_BR(rtfData, 0, false);

            spedRecord  = FBSpedRecord_BR::constructEmpty('J801');

            spedRecord.addFieldString   (this.docTypeStr());        // TIPO_DOC
            spedRecord.addFieldString   (substDescription);         // DESC_RTF
            spedRecord.addFieldEmpty    ();                         // HASH_RTF
            //RTF content should not be distorted by formatting
            spedRecord.addField         (spedFieldStr, true);       // ARQ_RTF
            spedRecord.addFieldString   ('J801FIM');                // IND_FIM_RTF

            this.addChildRecord(_parentRecord, spedRecord);
        }

        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ900</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block J900 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J900 belongs to.
    /// </param>
    protected void createRecordJ900(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord = FBSpedRecord_BR::constructEmpty('J900');

        spedRecord.addFieldString   ('TERMO DE ENCERRAMENTO');  // DNRC_ENCER
        spedRecord.addFieldNumeric  (bookNumber);               // NUM_ORD
        spedRecord.addFieldString   ('DIÁRIO GERAL');           // NAT_LIVRO
        spedRecord.addFieldString   (fiscalEstablishment.Name); // NOME
        spedRecord.addFieldString   ('%QTD_LINHA%');            // QTD_LIN
        spedRecord.addFieldDate     (fromDate);                 // DT_INI_ESCR
        spedRecord.addFieldDate     (toDate);                   // DT_FIN_ESCR

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecordJ930(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ930</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block J930 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J930 belongs to.
    /// </param>
    protected void createRecordJ930(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR         spedRecord;
        LegalRepresentative_BR  legalRepresentative;

        while select legalRepresentative where legalRepresentative.FiscalOrganization   == fiscalOrganization.RecId
        {
            spedRecord  = FBSpedRecord_BR::constructEmpty('J930');

            spedRecord.addFieldString                   (legalRepresentative.Name);                                                                                 // IDENT_NOM
            spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(legalRepresentative.CPFNum), 11);                                                         // IDENT_CPF
            spedRecord.addFieldString                   (this.retrieveSignatoryIdentification(legalRepresentative.Type));                                           // IDENT_QUALIF
            spedRecord.addFieldString                   (this.retrieveSignatoryCode(legalRepresentative.Type));                                                     // COD_ASSIN
            spedRecord.addFieldString                   (this.keepAlphaWithoutAccents(legalRepresentative.CRCNum));                                                 // IND_CRC
            spedRecord.addFieldString                   (legalRepresentative.electronicAddress(LogisticsElectronicAddressMethodType::Email).Locator);               // EMAIL
            spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(legalRepresentative.electronicAddress(LogisticsElectronicAddressMethodType::Phone).Locator), 10); // FONE
            spedRecord.addFieldString                   (legalRepresentative.CRCStateId);                                                                           // UF_CRC
            spedRecord.addFieldString                   (strFmt("%1/%2/%3", legalRepresentative.CRCStateId, year(toDate), '001'));                                  // NUM_SEQ_CRC
            spedRecord.addFieldDate                     (legalRepresentative.CRCExpirationDate);                                                                    // DT_CRC
            this.addFieldIndRespLegal(spedRecord, legalRepresentative);                                                                                             // IND_RESP_LEGAL

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ990</Name>
				<Source><![CDATA[
    private void createRecordJ990(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord  = FBSpedRecord_BR::constructEmpty('J990');

        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('J') + 1);  // QTD_LIN_J

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportFile</Name>
				<Source><![CDATA[
    public void exportFile()
    {
        super();

        fbFile.replace('%QTD_LINHA%', strFmt('%1', spedTotalRecords));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingStatementPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting statement periods given a date range.
    /// </summary>
    /// <returns>
    /// The accounting statement periods.
    /// </returns>
    protected Set getAccountingStatementPeriods()
    {
        date                    calendarStartDate, calendarEndDate, periodStartDate, periodEndDate;
        FiscalCalendarYear      fiscalCalendarYear;
        Set                     periods;
        int                     periodMonths;

        switch (accStatementPeriod)
        {
            case FBSpedContabilAccStatementPeriod_BR::Monthly:
                periodMonths = 1;
                break;
            case FBSpedContabilAccStatementPeriod_BR::Quarterly:
                periodMonths = 3;
                break;
            case FBSpedContabilAccStatementPeriod_BR::HalfYearly:
                periodMonths = 6;
                break;
            case FBSpedContabilAccStatementPeriod_BR::Yearly:
                periodMonths = 12;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        periods = new Set(Types::Container);

        fiscalCalendarYear  = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), fromDate);

        calendarStartDate   = fiscalCalendarYear.StartDate;
        calendarEndDate     = fiscalCalendarYear.EndDate;

        periodStartDate     = calendarStartDate;

        while (periodEndDate <= calendarEndDate)
        {
            periodEndDate  = dateMthFwd(endmth(periodStartDate), periodMonths - 1);

            if (periodStartDate >= fromDate && periodEndDate <= toDate)
            {
                periods.add([periodStartDate, periodEndDate]);
            }
            else if (fromDate > periodStartDate && fromDate < periodEndDate && toDate > periodStartDate && toDate < periodEndDate)
            {
                periods.add([fromDate, toDate]);
            }
            else if (fromDate > periodStartDate && fromDate < periodEndDate)
            {
                periods.add([fromDate, periodEndDate]);
            }
            else if (toDate > periodStartDate && toDate < periodEndDate)
            {
                periods.add([periodStartDate, toDate]);
            }

            periodStartDate  = periodEndDate + 1;
        }

        return periods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountCostCenter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account and the cost center values of a given dimension.
    /// </summary>
    /// <param name="_dimensionAttributeValueCombinationRecId">
    /// The dimension.
    /// </param>
    /// <returns>
    /// The main account and the cost center values of a given dimension.
    /// </returns>
    protected container getMainAccountCostCenter(RecId _dimensionAttributeValueCombinationRecId)
    {
        DimensionAttributeRecId             dimensionAttributeRecId;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        DimensionStorageSegment             dimensionStorageSegment;
        DimensionStorage                    dimensionStorage;
        int                                 i = 1;
        str                                 mainAccountValue, costCenterValue;

        if (!mainAccountCostCenterCache.exists(_dimensionAttributeValueCombinationRecId))
        {
            dimensionAttributeValueCombination  = DimensionAttributeValueCombination::find(_dimensionAttributeValueCombinationRecId);
            dimensionStorage                    = DimensionStorage::findById(dimensionAttributeValueCombination.RecId);

            for (i = 1; i <= dimensionStorage.segmentCount(); i++)
            {
                dimensionStorageSegment = dimensionStorage.getSegment(i);

                dimensionAttributeRecId = DimensionAttributeValue::find(dimensionStorageSegment.parmDimensionAttributeValueId()).DimensionAttribute;

                if (dimensionAttributeRecId == mainAccountDimAttrRecId)
                {
                    mainAccountValue    = dimensionStorageSegment.parmDisplayValue();
                }

                if (dimensionAttributeRecId == costCenterDimAttrRecId)
                {
                    costCenterValue     = dimensionStorageSegment.parmDisplayValue();
                }
            }

            mainAccountCostCenterCache.insert(_dimensionAttributeValueCombinationRecId, [mainAccountValue, costCenterValue]);
        }

        return mainAccountCostCenterCache.lookup(_dimensionAttributeValueCombinationRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountCostCenterV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account and the cost center values of a given <c>GeneralLedgerBalanceReportingDimension</c> table record.
    /// </summary>
    /// <param name="_reportingDimensionRecId">
    /// The <c>GeneralLedgerBalanceReportingDimension</c> table record id.
    /// </param>
    /// <returns>
    /// The main account and the cost center values of a given dimension.
    /// </returns>
    protected container getMainAccountCostCenterV2(RecId _reportingDimensionRecId)
    {
        if (!mainAccountCostCenterCache.exists(_reportingDimensionRecId))
        {
            GeneralLedgerBalanceReportingDimension reportingDimension = GeneralLedgerBalanceReportingDimension::find(_reportingDimensionRecId);

            DimensionValue mainAccountValue = GeneralLedgerBalanceReportingDimensionDataSource::getDimensionValueForDimensionAttribute(mainAccountDimAttrRecId, reportingDimension);
            DimensionValue costCenterValue = GeneralLedgerBalanceReportingDimensionDataSource::getDimensionValueForDimensionAttribute(costCenterDimAttrRecId, reportingDimension);

            mainAccountCostCenterCache.insert(_reportingDimensionRecId, [mainAccountValue, costCenterValue]);
        }

        return mainAccountCostCenterCache.lookup(_reportingDimensionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>docTypeStr</Name>
				<Source><![CDATA[
    protected str docTypeStr()
    {
        return '001';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FBSPEDContabilProcessorContract_BR _contract, FBFile_BR _fbFile)
    {
        super();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10013, funcName());

        fiscalOrganization                  = FiscalOrganization_BR::find(_contract.parmFiscalOrganization());
        costCenterDimAttrRecId              = BrazilParameters::find().CostCenterDimensionAttribute;
        spedContabilSetupParameters         = FBSPEDContabilSetupParameters_BR::find(fiscalOrganization.RecId);
        bookNumber                          = _contract.parmBookNumber();
        fbFile                              = _fbFile;
        fileType                            = _contract.parmFileTypeSimple();
        fiscalEstablishment                 = fiscalOrganization.fiscalEstablishment();
        fromDate                            = _contract.parmFromDate();
        hasClosingTransactions              = false;
        layoutVersion                       = _contract.parmLayoutVersion();
        mainAccountCostCenterCache          = new Map(Types::Int64, Types::Container);
        mainAccountCostCenterDimensionSet   = spedContabilSetupParameters.DimensionSetName;
        mainAccountDimAttrRecId             = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
        openingPeriodSituation              = _contract.parmOpeningPeriodSituation();
        situationType                       = _contract.parmSituationType();
        spedFile                            = new FBSpedFile_BR();
        toDate                              = _contract.parmToDate();
        type                                = _contract.parmType();
        addAccountingStatement              = _contract.parmAddAccountingStatements();
        accStatementPeriod                  = _contract.parmAccStatementPeriod();
        fileHash                            = _contract.parmFileHash();
        replaceRTFFileName                  = _contract.parmReplaceRTFFileName();
        replaceRTFFileContent               = _contract.parmReplaceRTFFileContent();
        substDescription                    = _contract.parmSubstDescription();
        mainAccountCache                    = new Map(Types::String,Types::String);

        this.populateAccountTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAccountTree</Name>
				<Source><![CDATA[
    private void populateAccountTree()
    {
        FBSpedContabilAccountTree_BR::populate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFileContent</Name>
				<Source><![CDATA[
    protected void populateFileContent()
    {

        this.createRecord0000();
        this.createRecord9900();
        this.createRecord9990();
        this.createRecord9999();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the balances of FBSpedContabilAccountTree_BR table records.
    /// </summary>
    protected void resetBalance()
    {
        FBSpedContabilAccountTree_BR    spedContabilAccountTree;

        ttsBegin;

        update_recordSet spedContabilAccountTree
            setting
                OpeningBalance = 0,
                EndingBalance = 0,
                PreviousEndingBalance = 0;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSignatoryCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the signatory code.
    /// </summary>
    /// <param name="_legalRepresentativeType">
    /// The legal representative type.
    /// </param>
    /// <returns>
    /// The signatory code.
    /// </returns>
    protected str retrieveSignatoryCode(LegalRepresentativeType_BR _legalRepresentativeType)
    {
        switch (_legalRepresentativeType)
        {
            case LegalRepresentativeType_BR::Director:
                return '203';
            case LegalRepresentativeType_BR::MemberOfBoard:
                return '204';
            case LegalRepresentativeType_BR::Administrator:
                return '205';
            case LegalRepresentativeType_BR::GroupAdministrator:
                return '206';
            case LegalRepresentativeType_BR::AdministratorAffiliated:
                return '207';
            case LegalRepresentativeType_BR::JudicialAdministratorLegalPerson:
                return '220';
            case LegalRepresentativeType_BR::JudicialAdministratorLegalEntity:
                return '222';
            case LegalRepresentativeType_BR::JudicialAdministrator:
                return '223';
            case LegalRepresentativeType_BR::JudicialManager:
                return '226';
            case LegalRepresentativeType_BR::Attorney:
                return '309';
            case LegalRepresentativeType_BR::Executor:
                return '312';
            case LegalRepresentativeType_BR::Receiver:
                return '313';
            case LegalRepresentativeType_BR::Intervenor:
                return '315';
            case LegalRepresentativeType_BR::Businessman:
                return '801';
            case LegalRepresentativeType_BR::Accountant:
                return '900';
            case LegalRepresentativeType_BR::Accounting:
                return '900';
            case LegalRepresentativeType_BR::AccountantRepResponsible:
                return '910';
            case LegalRepresentativeType_BR::AuditorRepResponsible:
                return '920';
            case LegalRepresentativeType_BR::Others:
                return '999';
            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSignatoryIdentification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the signatory identification.
    /// </summary>
    /// <param name="_legalRepresentativeType">
    /// The legal representative type.
    /// </param>
    /// <returns>
    /// The signatory identification.
    /// </returns>
    protected str retrieveSignatoryIdentification(LegalRepresentativeType_BR _legalRepresentativeType)
    {
        switch (_legalRepresentativeType)
        {
            case LegalRepresentativeType_BR::Director:
                return 'DIRETOR';
            case LegalRepresentativeType_BR::MemberOfBoard:
                return 'CONSELHEIRO DE ADMINISTRAÇÃO';
            case LegalRepresentativeType_BR::Administrator:
                return 'ADMINISTRADOR';
            case LegalRepresentativeType_BR::GroupAdministrator:
                return 'ADMINISTRADOR DO GRUPO';
            case LegalRepresentativeType_BR::AdministratorAffiliated:
                return 'ADMINISTRADOR DE SOCIEDADE FILIADA';
            case LegalRepresentativeType_BR::JudicialAdministratorLegalPerson:
                return 'ADMINISTRADOR JUDICIAL - PESSOA FÍSICA';
            case LegalRepresentativeType_BR::JudicialAdministratorLegalEntity:
                return 'ADMINISTRADOR JUDICIAL - PESSOA JURÍDICA - PROFISSIONAL RESPONSÁVEL';
            case LegalRepresentativeType_BR::JudicialAdministrator:
                return 'ADMINISTRADOR JUDICIAL/GESTOR';
            case LegalRepresentativeType_BR::JudicialManager:
                return 'GESTOR JUDICIAL';
            case LegalRepresentativeType_BR::Attorney:
                return 'PROCURADOR';
            case LegalRepresentativeType_BR::Executor:
                return 'INVENTARIANTE';
            case LegalRepresentativeType_BR::Receiver:
                return 'LIQUIDANTE';
            case LegalRepresentativeType_BR::Intervenor:
                return 'INTERVENTOR';
            case LegalRepresentativeType_BR::Businessman:
                return 'EMPRESÁRIO';
            case LegalRepresentativeType_BR::Accountant:
                return 'CONTADOR';
            case LegalRepresentativeType_BR::Accounting:
                return 'CONTABILISTA';
            case LegalRepresentativeType_BR::AccountantRepResponsible:
                return 'CONTADOR RESPONSÁVEL PELO TERMO DE VERIFICAÇÃO PARA FINS DE SUBSTITUIÇÃO DA ECD';
            case LegalRepresentativeType_BR::AuditorRepResponsible:
                return 'AUDITOR INDEPENDENTE RESPONSÁVEL PELO TERMO DE VERIFICAÇÃO PARA FINS DE SUBSTITUIÇÃO DA ECD';
            case LegalRepresentativeType_BR::Others:
                return 'OUTROS';
            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordJ100</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record J100.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the record J100 belongs to.
    /// </param>
    /// <param name="_level">
    /// The FBSpedContabilAccountTree_BR level.
    /// </param>
    /// <param name="_left">
    /// The left branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    /// <param name="_right">
    /// The right branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    protected void writeRecordJ100(FBSpedRecord_BR _parentRecord, int _level, int _left, int _right)
    {
        const str Asset ='1';
        const str LiabilityEquity = '2';

        FBSpedContabilAccountTree_BR    spedContabilAccountTree, spedContabilAccountTreeAux;
        FBSpedRecord_BR                 spedRecord;
        str                             indGrpBal;

        while select spedContabilAccountTree
            where   spedContabilAccountTree.LeftValue               > _left
                &&  spedContabilAccountTree.RightValue              < _right
                &&  spedContabilAccountTree.AccountLevel            == _level
                &&  spedContabilAccountTree.IsAgglutinationAccount  == NoYes::Yes
        {
            if (this.getAccountNatureCode(spedContabilAccountTree.AccountType) != TotalAccounts)
            {
                select sum(OpeningBalance), sum(EndingBalance) from spedContabilAccountTreeAux
                    where   spedContabilAccountTreeAux.LeftValue    > spedContabilAccountTree.LeftValue
                        &&  spedContabilAccountTreeAux.RightValue   < spedContabilAccountTree.RightValue;

                switch (spedContabilAccountTree.AccountType)
                {
                    case DimensionLedgerAccountType::Asset:
                        indGrpBal   = Asset;
                        break;

                    case DimensionLedgerAccountType::BalanceSheet:
                        if (spedContabilAccountTreeAux.EndingBalance > 0)
                        {
                            indGrpBal   = LiabilityEquity;
                        }
                        else
                        {
                            indGrpBal   = Asset;
                        }
                        break;
                    default:
                        indGrpBal   = LiabilityEquity;
                        break;
                }

                spedRecord  = FBSpedRecord_BR::constructEmpty('J100');

                spedRecord.addFieldString   (spedContabilAccountTree.AccountCode);                          // COD_AGL
                spedRecord.addFieldNumeric  (spedContabilAccountTree.AccountLevel);                         // NIVEL_AGL
                spedRecord.addFieldString   (indGrpBal);                                                    // IND_GRP_BAL
                spedRecord.addFieldString   (spedContabilAccountTree.AccountDescription);                   // DESCR_COD_AGL
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.EndingBalance), 2);             // VL_CTA
                spedRecord.addFieldString   (spedContabilAccountTreeAux.EndingBalance > 0 ? 'D' : 'C');     // IND_DC_BAL
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.OpeningBalance), 2);            // VL_CTA_INI
                spedRecord.addFieldString   (spedContabilAccountTreeAux.OpeningBalance > 0 ? 'D' : 'C');    // IND_DC_BAL_INI
                this.addExplNote(spedRecord);

                this.addChildRecord(_parentRecord, spedRecord);
            }

            this.writeRecordJ100(_parentRecord, _level + 1, spedContabilAccountTree.LeftValue, spedContabilAccountTree.RightValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordJ150</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record J150.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the record J150 belongs to.
    /// </param>
    /// <param name="_level">
    /// The FBSpedContabilAccountTree_BR level.
    /// </param>
    /// <param name="_left">
    /// The left branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    /// <param name="_right">
    /// The right branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    protected void writeRecordJ150(FBSpedRecord_BR _parentRecord, int _level, int _left, int _right)
    {
        FBSpedContabilAccountTree_BR    spedContabilAccountTree, spedContabilAccountTreeAux;
        FBSpedRecord_BR                 spedRecord;

        while select spedContabilAccountTree
            where   spedContabilAccountTree.LeftValue               > _left
                &&  spedContabilAccountTree.RightValue              < _right
                &&  spedContabilAccountTree.AccountLevel            == _level
                &&  spedContabilAccountTree.IsAgglutinationAccount  == NoYes::Yes
        {
            if (this.getAccountNatureCode(spedContabilAccountTree.AccountType) == TotalAccounts)
            {
                select sum(OpeningBalance), sum(EndingBalance) from spedContabilAccountTreeAux
                    where   spedContabilAccountTreeAux.LeftValue    > spedContabilAccountTree.LeftValue
                        &&  spedContabilAccountTreeAux.RightValue   < spedContabilAccountTree.RightValue;

                spedRecord  = FBSpedRecord_BR::constructEmpty('J150');

                spedRecord.addFieldString   (spedContabilAccountTree.AccountCode);                                                          // COD_AGL
                spedRecord.addFieldNumeric  (spedContabilAccountTree.AccountLevel);                                                         // NIVEL_AGL
                spedRecord.addFieldString   (spedContabilAccountTree.AccountDescription);                                                   // DESCR_COD_AGL
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.EndingBalance), 2);                                             // VL_CTA
                spedRecord.addFieldString   (spedContabilAccountTreeAux.EndingBalance > 0 ? 'N' : 'P');                                     // IND_DC_BAL

                this.addChildRecord(_parentRecord, spedRecord);
            }

            this.writeRecordJ150(_parentRecord, _level + 1, spedContabilAccountTree.LeftValue, spedContabilAccountTree.RightValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrialBalanceContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data contract for running Trial Balance GL report for the period.
    /// </summary>
    /// <param name = "_beginPeriod">
    /// Start date of the period.
    /// </param>
    /// <param name = "_endPeriod">
    /// End date of the period.
    /// </param>
    /// <param name = "_includeOpening">
    /// If true - tell data contract to include transactions from opening periods in the trial balance calculation.
    /// </param>
    /// <param name = "_includeClosing">
    /// If true - tell data contract to include transactions from closing periods in the trial balance calculation.
    /// </param>
    /// <returns>
    /// An instance of <c>LedgerTrialBalanceContract</c> data contract class which is initialized in a proper way.
    /// </returns>
    [Hookable(false)]
    protected LedgerTrialBalanceContract createTrialBalanceContract(
        date _beginPeriod,
        date _endPeriod,
        boolean _includeOpening,
        boolean _includeClosing)
    {
        LedgerTrialBalanceContract trialBalanceContract = new LedgerTrialBalanceContract();
        trialBalanceContract.parmFromDate(_beginPeriod);
        trialBalanceContract.parmToDate(_endPeriod);
        trialBalanceContract.parmIncludeOpening(_includeOpening);
        trialBalanceContract.parmIncludeClosing(_includeClosing);
        trialBalanceContract.parmPostingLayers(con2List([CurrentOperationsTax::Current]));
        trialBalanceContract.parmPrimaryDimensionFocus(mainAccountCostCenterDimensionSet);

        return trialBalanceContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTrialBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs data provider class of GL "Trial balance" report with given data contract.
    /// </summary>
    /// <param name = "_trialBalanceContract">
    /// An instance of <c>LedgerTrialBalanceContract</c> data provider class with a settings to run the data provider class routine.
    /// </param>
    /// <returns>
    /// A <c>LedgerTrialBalanceTmp</c> temporary table recordset which holds the trial balace data from reports data provider.
    /// </returns>
    [Hookable(false)]
    protected LedgerTrialBalanceTmp runTrialBalance(LedgerTrialBalanceContract _trialBalanceContract)
    {
        if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            return this.runTrialBalanceV2(_trialBalanceContract);
        }
        else
        {
            LedgerTrialBalanceDP trialBalanceDP = new LedgerTrialBalanceDP();
            trialBalanceDP.parmDataContract(_trialBalanceContract);
            trialBalanceDP.processReport();

            return trialBalanceDP.getLedgerTrialBalanceTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTrialBalanceV2</Name>
				<Source><![CDATA[
    private LedgerTrialBalanceTmp runTrialBalanceV2(LedgerTrialBalanceContract _trialBalanceContract)
    {
        LedgerTrialBalanceDPV2 trialBalanceDP = new LedgerTrialBalanceDPV2();
        trialBalanceDP.parmDataContract(_trialBalanceContract);
        trialBalanceDP.processReport();

        return trialBalanceDP.getLedgerTrialBalanceTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTrialBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the trial balance for the period.
    /// </summary>
    /// <param name = "_beginPeriod">
    /// Start date of the period.
    /// </param>
    /// <param name = "_endPeriod">
    /// End date of the period.
    /// </param>
    /// <param name = "_includeOpening">
    /// If true - includes transactions from opening periods in the trial balance calculation. Is false by default.
    /// </param>
    /// <param name = "_includeClosing">
    /// If true - includes transactions from closing periods in the trial balance calculation. Is true by default.
    /// </param>
    /// <param name = "_updateDimensionSetBalancesAtFirst">
    /// If true - updates balances for dimension set MA+CC ("Main Account + Cost Center") before calculating the trial balance. Is true by default.
    /// </param>
    /// <returns>
    /// A <c>LedgerTrialBalanceTmp</c> temporary table recordset which holds calculated trial balance data for the period.
    /// </returns>
    [Hookable(false)]
    protected LedgerTrialBalanceTmp calcTrialBalance(
        date _beginPeriod,
        date _endPeriod,
        boolean _includeOpening = false,
        boolean _includeClosing = true,
        boolean _updateDimensionSetBalancesAtFirst = true)
    {
        if (_updateDimensionSetBalancesAtFirst)
        {
            if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                GeneralLedgerBalanceProvider::getBalanceStatus(Ledger::current());
            }
            else
            {
                DimensionFocusUpdateBalance::updateBalance(
                    DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, mainAccountCostCenterDimensionSet));
            }
        }

        LedgerTrialBalanceTmp trialBalanceTmp = this.runTrialBalance(this.createTrialBalanceContract(_beginPeriod, _endPeriod, _includeOpening, _includeClosing));

        return trialBalanceTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>