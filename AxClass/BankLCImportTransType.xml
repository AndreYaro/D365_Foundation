<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportTransType</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class BankLCImportTransType extends Object
{
    BankLCRefRecId              bankLCImportRecId;
    LedgerJournalTrans          ledgerJournalTrans;
    LedgerJournalTransBankLC    ledgerJournalTransBankLC;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the transaction.
    /// </summary>
    /// <returns>
    ///    The amount of the transaction.
    /// </returns>
    protected AmountCur getAmount()
    {
        LedgerJournalTrans ledgerJournalTransLocal;

        select sum(AmountCurDebit) from ledgerJournalTransLocal
            where ledgerJournalTransLocal.Voucher == ledgerJournalTrans.Voucher
                && ledgerJournalTransLocal.JournalNum == ledgerJournalTrans.JournalNum;

        if (ledgerJournalTransLocal.AmountCurDebit != 0)
        {
            return ledgerJournalTransLocal.AmountCurDebit;
        }

        select sum(AmountCurCredit) from ledgerJournalTransLocal
            where ledgerJournalTransLocal.Voucher == ledgerJournalTrans.Voucher
                && ledgerJournalTransLocal.JournalNum == ledgerJournalTrans.JournalNum;

        if (ledgerJournalTransLocal.AmountCurCredit != 0)
        {
            return -ledgerJournalTransLocal.AmountCurCredit;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfShipmentsToAllocate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of shipments to be allocated.
    /// </summary>
    /// <returns>
    ///    The number of shipment lines to be allocated.
    /// </returns>
    protected BankLCNumberOfShipmentLines getNumberOfShipmentsToAllocate()
    {
        return BankLCImportLine::countUnInvoicedBankLCImportLines(bankLCImportRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllocateTransactionAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a bank letter of credit import line is allowed to allocate transactions.
    /// </summary>
    /// <param name="_bankLCImportLine">
    ///    The bank letter of credit import line record.
    /// </param>
    /// <returns>
    ///    true if the bank letter of credit import line is allowed to allocate transactions, otherwise false.
    /// </returns>
    protected boolean isAllocateTransactionAllowed(BankLCImportLine _bankLCImportLine)
    {
        return !_bankLCImportLine.isInvoiced()
            && _bankLCImportLine.ImportShipmentStatus != BankLCImportShipmentStatusType::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCImportRecId</Name>
				<Source><![CDATA[
    public BankLCRefRecId parmBankLCImportRecId(BankLCRefRecId _bankLCImportRecId = bankLCImportRecId)
    {
        bankLCImportRecId = _bankLCImportRecId;
        return bankLCImportRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _lederJournalTrans = ledgerJournalTrans)
    {
        if (_lederJournalTrans.RecId
            && _lederJournalTrans.RecId != ledgerJournalTrans.RecId)
        {
            _lederJournalTrans.copyTo(ledgerJournalTrans);
        }
        ledgerJournalTransBankLC = ledgerJournalTrans.getLedgerJournalTransBankLC();
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the actions after the journal has been posted.
    /// </summary>
    public abstract void postedActions()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the transaction can be posted.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be posted; otherwise, false.
    /// </returns>
    public abstract boolean validateLedgerPosting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BankLCImportTransType</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record that represents the transaction.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>BankLCImportTransType</c> class.
    /// </returns>
    public static BankLCImportTransType construct(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankLCImportTransType transactionType;

        switch (_ledgerJournalTrans.getLedgerJournalTransBankLC().TransType)
        {
            case BankLCLedgerJournalTransType::Blank :
                return null;
            case BankLCLedgerJournalTransType::Margin :
                transactionType = BankLCImportMarginTransType::construct();
                break;
            case BankLCLedgerJournalTransType::MiscCharge_SA :
                transactionType = BankLCImportChargeTransType_SA::construct();
                break;
        }
        transactionType.parmLedgerJournalTrans(_ledgerJournalTrans);
        return transactionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountLedgerDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>LedgerDimensionAccount</c> object of the bank that is related to a <c>BankLCImport</c>
    ///    record.
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    ///    The given record ID of the <c>BankLCImport</c> object.
    /// </param>
    /// <returns>
    ///    The <c>LedgerDimensionAccount</c>
    /// </returns>
    public static LedgerDimensionAccount getBankAccountLedgerDim(BankLCRefRecId _bankLCImportRefRecId)
    {
        return LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(BankLCImport::find(_bankLCImportRefRecId).getBankAccount(), LedgerJournalACType::Bank);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets posting profile of the <c>BankLCImport</c> record.
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    ///    The given record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    ///    The posting profile of the <c>BankLCImport</c> record.
    /// </returns>
    public static BankDocumentPosting getBankDocumentPosting(BankLCRefRecId _bankLCImportRefRecId)
    {
        BankDocumentPosting bankDocumentPosting;

        if (_bankLCImportRefRecId)
        {
            bankDocumentPosting = BankDocumentPosting::findByFacilityType(
                BankLCImport::find(_bankLCImportRefRecId).getBankDocumentFacilityTypeRefRecId());
        }

        return bankDocumentPosting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>