<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InfAdjPost_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c> InfAdjPost_MX </c> class handles the posting of inflation adjustment transactions.
/// </summary>
public class InfAdjPost_MX
{
    ToDate                  postingDate;
    TransTxt                transTxt;
    CurrentOperationsTax    postingLayer;
    Notes                   notes;

    LedgerVoucher           ledgerVoucher;
    Voucher                 infAdjVoucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a voucher for the inflation adjustment transactions.
    /// </summary>
    /// <param name="_postingDate">
    ///    The posting date of the inflation adjustment transaction.
    /// </param>
    /// <param name="_repomoTmp">
    ///    The <c>RepomoReportTmp_MX</c> temporary table buffer.
    /// </param>
    /// <param name="_capitalTmp">
    ///    The <c>CapitalAdjReportTmp_MX</c> temporary table buffer.
    /// </param>
    /// <param name="_inventoryTmp">
    ///    The <c>InvAdjustmentReportTmp_MX</c> temporary table buffer.
    /// </param>
    /// <param name="_transTxt">
    ///    The transaction text to use in the voucher lines.
    /// </param>
    /// <param name="_notes">
    ///    User entered notes to update in the <c>InflationAdjJournal_MX</c> table.
    /// </param>
    /// <param name="_inflationAdjJournal">
    ///    The <c>InflationAdjJournal_MX</c> table buffer.
    /// </param>
    /// <param name="_postingLayer">
    ///    The posting layer to use in the voucher.
    /// </param>
    public void post(
        ToDate                      _postingDate,
        RepomoReportTmp_MX          _repomoTmp,
        CapitalAdjReportTmp_MX      _capitalTmp,
        InvAdjustmentReportTmp_MX   _inventoryTmp,
        TransTxt                    _transTxt,
        Notes                       _notes,
        InflationAdjJournal_MX      _inflationAdjJournal,
        CurrentOperationsTax        _postingLayer = CurrentOperationsTax::Current)
    {
        TransactionTxt   transactionTxt;
        NumberSeq        numberSeq;

        postingLayer    = _postingLayer;
        notes           = _notes;
        postingDate     = _postingDate;

        numberSeq       = NumberSeq::newGetVoucher(LedgerParameters::numRefInflationVoucher_MX(),false);
        infAdjVoucher   = numberSeq.voucher();

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::InfAdj_MX);
        transactionTxt.setVoucher(infAdjVoucher);

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     SysModule::Ledger,
                                                     numberSeq.parmVoucherSequenceCode());

        ledgerVoucher.addVoucher(
            LedgerVoucherObject::newVoucher(infAdjVoucher,
                                            _postingDate,
                                            SysModule::Ledger,
                                            LedgerTransType::InflationAdjustment_MX,
                                            NoYes::No,
                                            _postingLayer));

        ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transactionTxt.txt(_transTxt));

        this.postInflationPL(_repomoTmp);
        this.postInflationCapital(_capitalTmp);
        this.postInflationInventory(_inventoryTmp);

        ttsbegin;
        ledgerVoucher.end();
        this.updateInflationAdjJournal(_inflationAdjJournal);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInflationCapital</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the values in the <c>CapialAdjReportTmp_MX</c> temporary table and creates the voucher.
    /// </summary>
    /// <param name="_capitalTmp">
    ///    The <c>CapitalAdjReportTmp_MX</c> temporary table buffer with the inflation adjustment values for
    ///    transaction date adjustment method.
    /// </param>
    private void postInflationCapital(CapitalAdjReportTmp_MX      _capitalTmp)
    {
        CapitalAdjReportTmp_MX  capitalReportTmp;
        CurrencyExchangeHelper  currencyExchangeHelper;
        Amount originalAmount;
        Amount roundedAmount;
        Amount sumOfOriginal;
        Amount sumOfRounded;
        Amount roundedTotal;
        Amount pennyDifference;
        recId maxOriginalAmountRecId;

        capitalReportTmp.setTmpData(_capitalTmp);

        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), postingDate);

        // adjust penny difference and put it in the largest amount
        select firstOnly capitalReportTmp order by adjustedAmount desc, recId desc;
        maxOriginalAmountRecId = capitalReportTmp.RecId;

        sumOfRounded=0;
        sumOfOriginal=0;
        while select forUpdate capitalReportTmp
        {
            originalAmount = capitalReportTmp.AdjustedAmount;
            roundedAmount = CurrencyExchange::roundWithRuleType(originalAmount, Ledger::accountingCurrency(), currencyExchangeHelper.parmRoundingRuleType());
            sumOfRounded += roundedAmount;
            sumOfOriginal += originalAmount;

            capitalReportTmp.AdjustedAmount = roundedAmount;
            capitalReportTmp.update();
        }

        roundedTotal = CurrencyExchange::roundWithRuleType(sumOfOriginal, Ledger::accountingCurrency(), currencyExchangeHelper.parmRoundingRuleType());
        pennyDifference = roundedTotal - sumOfRounded;
        if (pennyDifference)
        {
            select firstOnly forUpdate capitalReportTmp where capitalReportTmp.RecId == maxOriginalAmountRecId;
            capitalReportTmp.AdjustedAmount+= pennyDifference;
            capitalReportTmp.update();
        }

        //Post capital
        while select LedgerDimension, AdjustedAmount from capitalReportTmp
        {
            ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucher.findLedgerVoucherObject(),
                    LedgerPostingType::InflationAdjustment_MX,
                    capitalReportTmp.LedgerDimension,
                    Ledger::accountingCurrency(),
                    capitalReportTmp.AdjustedAmount,
                    currencyExchangeHelper));
        }

        //Post offset
        this.postInflationOffset(-roundedTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInflationInventory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the values in the <c>InvAdjustmentReportTmp_MX</c> temporary table and creates the
    ///    voucher.
    /// </summary>
    /// <param name="_inventoryTmp">
    ///    The <c>InvAdjustmentReportTmp_MX</c> temporary table buffer with the inflation adjustment values
    ///    for the balance adjustment method.
    /// </param>
    private void postInflationInventory(InvAdjustmentReportTmp_MX   _inventoryTmp)
    {
        InvAdjustmentReportTmp_MX   inventAdjTmp;
        CurrencyExchangeHelper      currencyExchangeHelper;
        Amount originalAmount;
        Amount roundedAmount;
        Amount sumOfOriginal;
        Amount sumOfRounded;
        Amount roundedTotal;
        Amount pennyDifference;
        recId maxOriginalAmountRecId;

        inventAdjTmp.setTmpData(_inventoryTmp);
        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), postingDate);

          // adjust penny difference and put it in the largest amount
        select firstOnly inventadjtmp order by balanceadjusted desc, recId desc;
        maxOriginalAmountRecId = inventAdjTmp.RecId;

        sumOfRounded=0;
        sumOfOriginal=0;
        while select forUpdate inventAdjTmp
        {
            originalAmount = inventAdjTmp.BalanceAdjusted;
            roundedAmount = CurrencyExchange::roundWithRuleType(originalAmount, Ledger::accountingCurrency(), currencyExchangeHelper.parmRoundingRuleType());
            sumOfRounded += roundedAmount;
            sumOfOriginal += originalAmount;

            inventAdjTmp.BalanceAdjusted = roundedAmount;
            inventAdjTmp.update();
        }

        roundedTotal = CurrencyExchange::roundWithRuleType(sumOfOriginal, Ledger::accountingCurrency(), currencyExchangeHelper.parmRoundingRuleType());
        pennyDifference = roundedTotal - sumOfRounded;
        if (pennyDifference)
        {
            select firstOnly forUpdate inventAdjTmp where inventAdjTmp.RecId == maxOriginalAmountRecId;
            inventAdjTmp.BalanceAdjusted+= pennyDifference;
        }

        //Post inventory
        while select inventAdjTmp
        {
            ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucher.findLedgerVoucherObject(),
                    LedgerPostingType::InflationAdjustment_MX,
                    inventAdjTmp.LedgerDimension,
                    Ledger::accountingCurrency(),
                    CurrencyExchange::round(inventAdjTmp.BalanceAdjusted, CompanyInfoHelper::standardCurrency()),
                    currencyExchangeHelper));
        }

        //Post offset
        this.postInflationOffset(-roundedTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInflationOffset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the offset transaction.
    /// </summary>
    /// <param name="_offsetAmount">
    ///    The amount to use for the offset transaction.
    /// </param>
    private void postInflationOffset(Amount _offsetAmount)
    {
        LedgerDimensionDefaultAccount   inflationOffsetAccount;
        CurrencyExchangeHelper          currencyExchangeHelper;

        inflationOffsetAccount = LedgerParameters::find().ReExpressionMainAccount_MX;
        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), postingDate);

        if (!inflationOffsetAccount)
        {
            throw error("@SYS312852");
        }

        //Post offset for P&L

        ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                LedgerPostingType::InflationAdjustment_MX,
                LedgerDimensionFacade::serviceCreateLedgerDimension(inflationOffsetAccount),
                Ledger::accountingCurrency(),
                _offsetAmount,
                currencyExchangeHelper));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInflationPL</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the values in the <c>RepomoReportTmp_MX</c> temporary table and creates the voucher.
    /// </summary>
    /// <param name="_repomoTmp">
    ///    The <c>RepomoReportTmp_MX</c> temporary table buffer with the inflation adjustment values for the
    ///    monthly balance adjustment method.
    /// </param>
    private void postInflationPL(RepomoReportTmp_MX          _repomoTmp)
    {
        RepomoReportTmp_MX      repomoTmpPLAdjust;
        RepomoReportTmp_MX      repomoTmpPL;
        MainAccountNum          repomoMainAccountId;
        CurrencyExchangeHelper  currencyExchangeHelper;
        Amount originalAmount;
        Amount roundedAmount;
        Amount sumOfOriginal;
        Amount sumOfRounded;
        Amount roundedTotal;
        Amount pennyDifference;
        recId maxOriginalAmountRecId;
        #InflationAdjustment_MX

        repomoMainAccountId = LedgerDimensionFacade::getMainAccountFromLedgerDimension(LedgerParameters::find().RepomoMainAccount_MX).MainAccountId;

        if (!repomoMainAccountId)
        {
            throw error("@SYS312852");
        }

        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), postingDate);

        repomoTmpPL.setTmpData(_repomoTmp);

        // copy the values to a new buffer to add the balances without modifying the original table
        while select repomoTmpPL
        order by recId asc
        where repomoTmpPL.ReportType == #PLAdjust
        {
            repomoTmpPLAdjust.BalanceMonthTotal = repomoTmpPL.BalanceMonthTotal;
            repomoTmpPLAdjust.ReportType = repomoTmpPL.ReportType;
            repomoTmpPLAdjust.DisplayValue = repomoTmpPL.DisplayValue;
            repomoTmpPLAdjust.LedgerDimension = repomoTmpPL.LedgerDimension;
            repomoTmpPLAdjust.insert();
        }

        //Post Repomo as sum of Opening balance and monthly balance
        select firstonly
            repomoTmpPL
            where repomoTmpPL.ReportType == #PL
               && repomoTmpPL.DisplayValue == repomoMainAccountId;

        select firstOnly forUpdate
            repomoTmpPLAdjust
            where repomoTmpPLAdjust.ReportType == #PLAdjust
               && repomoTmpPLAdjust.DisplayValue == repomoMainAccountId;

        if (repomoTmpPLAdjust && repomoTmpPL)
        {
            repomoTmpPLAdjust.BalanceMonthTotal+= repomoTmpPL.BalanceMonthTotal;
            repomoTmpPLAdjust.update();
        }

        // adjust penny difference and put it in the largest amount
        select firstOnly repomoTmpPLAdjust
        order by BalanceMonthTotal desc, recId desc
        where repomoTmpPLAdjust.ReportType == #PLAdjust;

        maxOriginalAmountRecId = repomoTmpPLAdjust.RecId;

        sumOfRounded=0;
        sumOfOriginal=0;
        while select forUpdate repomoTmpPLAdjust
        where repomoTmpPLAdjust.ReportType == #PLAdjust
        && repomoTmpPLAdjust.BalanceMonthTotal
        {
            originalAmount = repomoTmpPLAdjust.BalanceMonthTotal;
            roundedAmount = CurrencyExchange::roundWithRuleType(originalAmount, Ledger::accountingCurrency(), currencyExchangeHelper.parmRoundingRuleType());
            sumOfRounded += roundedAmount;
            sumOfOriginal += originalAmount;

            repomoTmpPLAdjust.BalanceMonthTotal = roundedAmount;
            repomoTmpPLAdjust.update();
        }

        roundedTotal = CurrencyExchange::roundWithRuleType(sumOfOriginal, Ledger::accountingCurrency(), currencyExchangeHelper.parmRoundingRuleType());
        pennyDifference = roundedTotal - sumOfRounded;
        if (pennyDifference)
        {
            select firstOnly forUpdate repomoTmpPLAdjust where repomoTmpPLAdjust.RecId == maxOriginalAmountRecId;
            repomoTmpPLAdjust.BalanceMonthTotal+= pennyDifference;
            repomoTmpPLAdjust.update();
        }

        //Post P&L
        while select repomoTmpPLAdjust
            where repomoTmpPLAdjust.ReportType == #PLAdjust
               && repomoTmpPLAdjust.BalanceMonthTotal
        {
            if (repomoTmpPLAdjust.DisplayValue == repomoMainAccountId)
            {
                ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucher.findLedgerVoucherObject(),
                    LedgerPostingType::InflationAdjustment_MX,
                    LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerParameters::find().RepomoMainAccount_MX),
                    Ledger::accountingCurrency(),
                    repomoTmpPLAdjust.BalanceMonthTotal,
                    currencyExchangeHelper));
            }
            else
            {
                    ledgerVoucher.addTrans(
                    LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucher.findLedgerVoucherObject(),
                    LedgerPostingType::InflationAdjustment_MX,
                    repomoTmpPLAdjust.LedgerDimension,
                    Ledger::accountingCurrency(),
                    repomoTmpPLAdjust.BalanceMonthTotal,
                    currencyExchangeHelper));
            }
        }

        //Post offset
        this.postInflationOffset(-roundedTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInflationAdjJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>InflationAdjJournal_MX</c> table with the voucher number to which inflation
    ///    adjustment transactions are posted.
    /// </summary>
    /// <param name="_inflationAdjJournal">
    ///    The <c>InflationAdjJournal_MX</c> table buffer for which to update the values after the inflation
    ///    adjustment is processed.
    /// </param>
    private void updateInflationAdjJournal(InflationAdjJournal_MX _inflationAdjJournal)
    {
        InflationAdjJournal_MX  inflationAdjustmentJournal;

        inflationAdjustmentJournal = InflationAdjJournal_MX::find(_inflationAdjJournal.RecId, true);

        if (inflationAdjustmentJournal)
        {
            inflationAdjustmentJournal.Status       = InflationAdjJournalStatus_MX::Posted;
            inflationAdjustmentJournal.Notes        = notes;
            inflationAdjustmentJournal.PostingLayer = postingLayer;
            inflationAdjustmentJournal.Voucher      = GeneralLedgerExtension::findByReferenceNumber(infAdjVoucher).RecId;
            inflationAdjustmentJournal.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>