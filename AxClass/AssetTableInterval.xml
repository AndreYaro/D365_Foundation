<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableInterval</Name>
	<SourceCode>
		<Declaration><![CDATA[
///  <summary>
///     AssetTableInterval
/// </summary>
/// <remarks>
///      AssetTableInterval
/// </remarks>
public abstract class AssetTableInterval
{
    AssetAccrual assetAccrual;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetDepreciationTime</Name>
				<Source><![CDATA[
    public AssetDepreciationTime assetDepreciationTime(AssetTransDate _assetTransDate)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>closingPeriodDate</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the closing fiscal period date for a supplied date.
    public TransDate closingPeriodDate(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToMonth</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the current month for a supplied date.
    public int dateToMonth(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToPeriod</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the starting fiscal period date for a supplied date.
    public int dateToPeriod(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of the day in the fiscal period for the specified asset transaction date.
    /// </summary>
    /// <param name="_assetTransDate">
    /// Asset transaction date.
    /// </param>
    /// <returns>
    /// Number of day in the fiscal period.
    /// </returns>
    public int dayOfPeriod(AssetTransDate _assetTransDate)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>depInterval2Days</Name>
				<Source><![CDATA[
    public Days depInterval2Days(AssetLifeTime  _intervals,
                          AssetTransDate _startDate)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>endingPeriodDate</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the ending date of a fiscal period for a supplied date.
    public TransDate endingPeriodDate(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPeriod</Name>
				<Source><![CDATA[
    public abstract AssetTransDate endPeriod(AssetTransDate _assetTransDate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentQuarter</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the current quarter for a supplied date.
    public int findCurrentQuarter(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfMonth</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the first date of a fiscal month for a supplied date.
    public TransDate findFirstDayOfMonth(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first date of a fiscal period or a calendar month for a supplied date.
    /// </summary>
    /// <param name="_date">
    /// The date for which to find the first date of the period.
    /// </param>
    /// <returns>
    /// Throws an exception as this method is designed for <c>AssetTableInterval_Calendar</c>,
    /// <c>AssetTableInterval_AssetCalendar</c> or <c>AssetTableInterval_Fiscal</c> class.
    /// </returns>
    public TransDate findFirstDayOfPeriod(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first date of a quarter for a supplied date.
    /// </summary>
    /// <param name="_date">
    /// The date for which to find the first date of the quarter.
    /// </param>
    /// <returns>
    /// Throws an exception as this method is designed for <c>AssetTableInterval_Calendar</c>,
    /// <c>AssetTableInterval_AssetCalendar</c> or <c>AssetTableInterval_Fiscal</c> class.
    /// </returns>
    public TransDate findFirstDayOfQuarter(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first date of a fiscal year for a specified date.
    /// </summary>
    /// <param name="_date">
    /// The date for which to find the first date of the year.
    /// </param>
    /// <returns>
    /// Throws an exception as this method is designed for <c>AssetTableInterval_Calendar</c>,
    /// <c>AssetTableInterval_AssetCalendar</c> or <c>AssetTableInterval_Fiscal</c> class.
    /// </returns>
    public TransDate findFirstDayOfYear(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfMonth</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the last date of a fiscal month for a supplied date.
    public TransDate findLastDayOfMonth(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last date of a fiscal period or a calendar month for a supplied date.
    /// </summary>
    /// <param name="_date">
    /// The date for which to find the last date of the period.
    /// </param>
    /// <returns>
    /// Throws an exception as this method is designed for <c>AssetTableInterval_Calendar</c>,
    /// <c>AssetTableInterval_AssetCalendar</c> or <c>AssetTableInterval_Fiscal</c> class.
    /// </returns>
    public TransDate findLastDayOfPeriod(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last date of a quarter for a supplied date.
    /// </summary>
    /// <param name="_date">
    /// The date for which to find the last date of the quarter.
    /// </param>
    /// <returns>
    /// Throws an exception as this method is designed for <c>AssetTableInterval_Calendar</c>,
    /// <c>AssetTableInterval_AssetCalendar</c> or <c>AssetTableInterval_Fiscal</c> class.
    /// </returns>
    public TransDate findLastDayOfQuarter(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last date of a fiscal year for a specified date.
    /// </summary>
    /// <param name="_date">
    /// The date for which to find the last date of the year.
    /// </param>
    /// <returns>
    /// The last date of the fiscal year.
    /// </returns>
    /// <remarks>
    /// Throws an exception as this method is designed for <c>AssetTableInterval_Calendar</c>,
    /// <c>AssetTableInterval_AssetCalendar</c> or <c>AssetTableInterval_Fiscal</c> class.
    /// </remarks>
    public TransDate findLastDayOfYear(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMiddleOfMonth</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the middle date of a fiscal month for a supplied date.
    public TransDate findMiddleOfMonth(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMiddleOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the middle date of a fiscal period or a calendar month for a supplied date.
    /// </summary>
    /// <param name="_date">
    /// The date for which to find the middle date of the period.
    /// </param>
    /// <returns>
    /// Throws an exception as this method is designed for <c>AssetTableInterval_Calendar</c>,
    /// <c>AssetTableInterval_AssetCalendar</c> or <c>AssetTableInterval_Fiscal</c> class.
    /// </returns>
    public TransDate findMiddleOfPeriod(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMiddleOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the middle date of a fiscal year for a specified date.
    /// </summary>
    /// <param name="_date">
    /// The date for which to find the middle date of the year.
    /// </param>
    /// <returns>
    /// Throws an exception as this method is designed for <c>AssetTableInterval_Calendar</c>,
    /// <c>AssetTableInterval_AssetCalendar</c> or <c>AssetTableInterval_Fiscal</c> class.
    /// </returns>
    public TransDate findMiddleOfYear(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasYearChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if two dates are in a different fiscal or calendar year.
    /// </summary>
    /// <param name="_oldDate">
    /// The first date for which to check is done.
    /// </param>
    /// <param name="_newDate">
    /// The second date for which to check is done.
    /// </param>
    /// <returns>
    /// Throws an exception as this method is designed for <c>AssetTableInterval_Calendar</c>,
    /// <c>AssetTableInterval_AssetCalendar</c> or <c>AssetTableInterval_Fiscal</c> class.
    /// </returns>
    public boolean hasYearChanged(AssetTransDate _oldDate, AssetTransDate _newDate)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>indexofPeriod</Name>
				<Source><![CDATA[
    //  This method is designed for the "Fiscal" and "Calendar" child class.
    //  It returns the index of periods from a supplied date to the
    //  start of the fiscal year for that date.
    public int indexofPeriod(AssetTransDate _assetTransDate)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>interval</Name>
				<Source><![CDATA[
    public AssetLifeTime interval( AssetTransDate   depStart,
                            AssetTransDate   runDate)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfPeriodsInYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of periods in a year.
    /// </summary>
    /// <param name="_date">
    /// The date specified to determine the date in the year.
    /// </param>
    /// <returns>
    /// The number of the periods in a year.
    /// </returns>
    public int numberOfPeriodsInYear(AssetTransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriods</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the number of periods for a supplied date range.
    public int numOfPeriods(TransDate _fromDate, TransDate _toDate)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriodsLeftInYear</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the number of periods from a supplied date to the
    //  end of the fiscal year for that date.
    public int numOfPeriodsLeftInYear(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriodsPerYear</Name>
				<Source><![CDATA[
    public abstract int numOfPeriodsPerYear()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingPeriodDate</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the opening fiscal period date for a supplied date.
    public TransDate openingPeriodDate(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of the fiscal period in a year for a given asset transaction date.
    /// </summary>
    /// <param name="_assetTransDate">
    /// Asset transaction date.
    /// </param>
    /// <returns>
    /// Number of the fiscal period.
    /// </returns>
    public int periodOfYear(AssetTransDate _assetTransDate)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodToYear</Name>
				<Source><![CDATA[
    public AssetServiceLife periodToYear(AssetLifeTime _assetLifeTime)
    {
        AssetServiceLife assetServiceLife;
        ;
        if (_assetLifeTime)
        {
            assetServiceLife = _assetLifeTime / this.numOfPeriodsPerYear();
            round(assetServiceLife, 2);
        }
        return assetServiceLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDatePeriodFwd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the given number of fiscal periods to the given date.
    /// </summary>
    /// <param name = "_date">The given date.</param>
    /// <param name = "_periodsToMove">Number of fiscal periods by which the given date is moved.</param>
    /// <returns>Date after adding the number of periods to the given date.</returns>
    public TransDate startDatePeriodFwd(TransDate _date, int _periodsToMove)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDateYearFwd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the given number of years to the given date.
    /// </summary>
    /// <param name = "_date">The given date.</param>
    /// <param name = "_yearsToMove">Number of years to move</param>
    /// <returns>Date after adding the number of years to the given date.</returns>
    public TransDate startDateYearFwd(TransDate _date, real _yearsToMove)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>startingPeriodDate</Name>
				<Source><![CDATA[
    //  This method is designed for the "AssetCalendar" child class.
    //  It returns the starting date of a fiscal quarter for a supplied date.
    public TransDate startingPeriodDate(TransDate _date)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOfPeriod</Name>
				<Source><![CDATA[
    public abstract AssetTransDate startOfPeriod(AssetTransDate _startDate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearRatio_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// The ratio of current year (consider the calendar change and the specified start date) compare to the full year defined in calendar.
    /// </summary>
    /// <param name="_dateInYear">
    /// The data used to identify the year.
    /// </param>
    /// <param name="_startDate">
    /// The start date of current year to calculate the ratio. Optional.
    /// </param>
    /// <returns>
    /// The ratio of current year compare to the full year defined in calendar.
    /// </returns>
    public real yearRatio_JP(
        TransDate   _dateInYear,
        TransDate   _startDate = dateNull())
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearToPeriod</Name>
				<Source><![CDATA[
    public AssetLifeTime yearToPeriod(AssetServiceLife _assetServiceLife,
                                      AssetTransDate   _depreciationStartDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        AssetLifeTime assetLifeTime;
        real          temp;

        if (_assetServiceLife)
        {
            temp = _assetServiceLife * this.numOfPeriodsPerYear();
            assetLifeTime = real2int(round(temp, 0));
        }
        return assetLifeTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTableIntervalCreating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the new <c>AssetTableInterval</c> instance.
    /// </summary>
    /// <param name = "_assetDepreciationMethod">
    /// A <c>AssetDepreciationMethod</c> enumeration value.
    /// </param>
    /// <param name="_assetDepreciationProfile">
    /// The depreciation profile to use for creating the interval.
    /// </param>
    /// <param name="_calendarRecId">
    /// The record ID of the calendar to use when creating the interval.
    /// </param>
    /// <param name="_isCacheTable">
    /// If true, cache fiscal calendar tables to avoid multiple database call.
    /// </param>
    /// <param name = "_result">
    /// An <c>EventHandlerResult</c> instance, where subscribers can provide the new <c>AssetTableInterval</c> instance.
    /// </param>
    static delegate void assetTableIntervalCreating(
        AssetDepreciationMethod _assetDepreciationMethod, 
        AssetDepreciationProfile _assetDepreciationProfile, 
        RecId _calendarRecId, 
        boolean _isCacheTable, 
        EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a subclass of the <c>AssetTableInterval</c> class.
    /// </summary>
    /// <param name="_assetDepreciationProfile">
    /// The depreciation profile to use for creating the interval.
    /// </param>
    /// <param name="_calendarRecId">
    /// The record ID of the calendar to use when creating the interval; optional.
    /// </param>
    /// <param name="_isCacheTable">
    /// If true, cache fiscal calendar tables to avoid multiple database call; optional.
    /// </param>
    /// <returns>
    /// The new instance of an <c>AssetTableInterval</c> subclass.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The depreciation profile does not exist.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The depreciation profile is using an unknown depreciation year.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The depreciation profile is using an unknown depreciation interval.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The depreciation profile is using an unknown depreciation method.
    /// </exception>
    public static AssetTableInterval construct(AssetDepreciationProfile _assetDepreciationProfile, RecId _calendarRecId = 0
        , boolean _isCacheTable = false
    )
    {
        if (_assetDepreciationProfile.RecId == 0)
        {
            throw error("@SYS122751");
        }
        switch (_assetDepreciationProfile.Method)
        {
            // <GEEHU>
            case AssetDepreciationMethod::MultiplicationFactor_HU:
            // </GEEHU>
            case AssetDepreciationMethod::ReducingBalance:
            case AssetDepreciationMethod::ReducingBalance125:
            case AssetDepreciationMethod::ReducingBalance150:
            case AssetDepreciationMethod::ReducingBalance175:
            case AssetDepreciationMethod::ReducingBalance200:
            // <GEEPL>
            case AssetDepreciationMethod::ReducingBalance_PL:
            // </GEEPL>
            // <GEEHU>
            case AssetDepreciationMethod::ReducingBalance_HU:
            // </GEEHU>
            case AssetDepreciationMethod::StraightLine:
            case AssetDepreciationMethod::StraightLineLifeRemaining:
            case AssetDepreciationMethod::LowValuePool:
            case AssetDepreciationMethod::RBSL:
            // <GEEPL>
            case AssetDepreciationMethod::StraightLine_PL:
            case AssetDepreciationMethod::StraightLinePercentage_PL:
            // </GEEPL>
            // <GCN>
            case AssetDepreciationMethod::DoubleReduceBalance_CN:
            case AssetDepreciationMethod::SumYearDigits_CN:
            // </GCN>
            //<GEECZ>
            case AssetDepreciationMethod::Regular_CZ:
            case AssetDepreciationMethod::Accelerated_CZ:
            //</GEECZ>
            // <GEEHU>
            case AssetDepreciationMethod::StraightLine_HU:
            // </GEEHU>
            // <GJP>
            case AssetDepreciationMethod::OldStraightLine_JP:
            case AssetDepreciationMethod::NewStraightLine_JP:
            case AssetDepreciationMethod::OldDecliningBalance_JP:
            case AssetDepreciationMethod::NewDecliningBalance250_JP:
            case AssetDepreciationMethod::NewDecliningBalance200_JP:
            case AssetDepreciationMethod::EquallyDivided_JP:
            case AssetDepreciationMethod::Accelerated_JP:
            case AssetDepreciationMethod::SpecialDepreciation_JP:
            case AssetDepreciationMethod::AdditionalDepreciation_JP:
            case AssetDepreciationMethod::ElectronicDepreciation_JP:
            // </GJP>
            // <GIN>
            case AssetDepreciationMethod::StraightLinePercentage_IN:
                if ((_assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLinePercentage_IN) && (!AssetParameters::find().DepreciationCompaniesAct_IN))
                {
                    break;
                }
            // </GIN>
                switch (_assetDepreciationProfile.DepreciationYear)
                {
                    case AssetDepreciationYear::Calendar: return new AssetTableInterval_Calendar(_assetDepreciationProfile.Accrual);
                    case AssetDepreciationYear::Fiscal  : return AssetTableInterval_Fiscal::newFiscalCalendar(_assetDepreciationProfile.Accrual, _calendarRecId
                    // <GJP>
                    , _isCacheTable
                    // </GJP>
                    );
                }
                throw error(strFmt("@SYS98698", _assetDepreciationProfile.Profile));

            case AssetDepreciationMethod::Manual:
                if (_assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
                {
                    switch (_assetDepreciationProfile.Accrual)
                    {
                        case AssetAccrual::Monthly    : return new AssetTableInterval_Month();
                        case AssetAccrual::Quarterly  : return new AssetTableInterval_Quart();
                        case AssetAccrual::HalfYearly : return new AssetTableInterval_Half();
                        case AssetAccrual::Yearly     : return new AssetTableInterval_Year();
                    }
                }
                else
                {
                    if (_assetDepreciationProfile.Accrual == AssetAccrual::FiscalPeriod )
                    {
                        return  AssetTableInterval_FiscalPeriods::newFiscalCalendar(_calendarRecId);
                    }
                    else
                    {
                        return AssetTableInterval_Fiscal::newFiscalCalendar(_assetDepreciationProfile.Accrual, _calendarRecId
                        // <GJP>
                        , _isCacheTable
                        // </GJP>
                        );
                    }
                }
            case AssetDepreciationMethod::Factor:
            // <GEEHU>
            case AssetDepreciationMethod::Factor_HU:
            // </GEEHU>
                switch (_assetDepreciationProfile.Interval)
                {
                    case AssetDepreciationInterval::Monthly    : return new AssetTableInterval_Month();
                    case AssetDepreciationInterval::Quarterly  : return new AssetTableInterval_Quart();
                    case AssetDepreciationInterval::HalfYearly : return new AssetTableInterval_Half();
                    case AssetDepreciationInterval::Yearly     : return new AssetTableInterval_Year();
                }
                throw error(strFmt("@SYS98699", _assetDepreciationProfile.Profile));

            case AssetDepreciationMethod::Consumption:
                return new AssetTableInterval_Consumption();
        }

        var eventHandlerResult = new EventHandlerResult();
        AssetTableInterval::assetTableIntervalCreating(_assetDepreciationProfile.Method, _assetDepreciationProfile, _calendarRecId, _isCacheTable, eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            return eventHandlerResult.result();
        }
        else
        {
            throw error(strFmt("@SYS98700", _assetDepreciationProfile.Profile));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAssetLifeTimeInDays</Name>
				<Source><![CDATA[
    protected internal AssetLifeTime calcAssetLifeTimeInDays(date _startDate, int _serviceLifeInMonths)
    {
        AssetTransDate assetTransDate = _startDate;
        AssetLifeTime assetLifeTimeInDays;
    
        //Considering transDate to be 28th Feb in case if asset is acquired on
        //29th Feb (leap year, which is a special case) to add an extra period.
        if (mthOfYr(assetTransDate) == 2 && dayOfMth(assetTransDate) == 29)
        {
            assetTransDate = mkDate(28, mthOfYr(assetTransDate), year(assetTransDate));
        }
    
        assetLifeTimeInDays = dateMthFwd(assetTransDate, _serviceLifeInMonths) - assetTransDate;
    
        return assetLifeTimeInDays;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>