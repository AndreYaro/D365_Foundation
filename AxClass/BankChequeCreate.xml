<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankChequeCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class BankChequeCreate extends BankNegInstCreate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDocument</Name>
				<Source><![CDATA[
    public void createDocument(BankNegInstNum _chequeNum,
                               CompanyBankAccountId _accountID)
    {
        BankChequeTable::createCheque(_chequeNum, _accountID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogFromNegInstNum = dialog.addFieldValue(extendedTypeStr(BankChequeStartNum), fromNegInstNum, "@SYS4083");
        dialogFromNegInstNum.lookupButton(0);

        dialogNumOfNegInst = dialog.addFieldValue(extendedTypeStr(BankChequeQty), numOfNegInst, "@SYS14578");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDocsAreCreated</Name>
				<Source><![CDATA[
    protected str txtDocsAreCreated()
    {
        return "@SYS73993";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        if (BankChequeLayout::find(accountID).ChequeNumMethod != ChequeNumMethod::Fixed)
        {
            ret = checkFailed(strFmt("@SYS24599", ChequeNumMethod::Fixed));
        }
        if (!fromNegInstNum)
        {
            ret = checkFailed("@SYS24069");
        }
        if (!numOfNegInst)
        {
            ret = checkFailed("@SYS24140");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS22540";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        BankChequeCreate    chequeCreate;

        switch (args.dataset())
        {
            case tableNum(BankAccountTable):
                chequeCreate = BankNegInstCreate::newBankAccountTable(BankNegInst::Check, args.record());
                chequeCreate.setAccountIdInactive();
                break;

            case tableNum(BankChequeTable):
                BankChequeTable bankChequeTable = args.record();
                chequeCreate = BankNegInstCreate::newBankAccountTable(BankNegInst::Check, BankAccountTable::find(bankChequeTable.AccountID));
                break;

            default:
                throw error(Error::wrongUseOfFunction(BankChequeCreate::description()));
        }

        if (chequeCreate.prompt())
        {
            chequeCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>