<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjLedgerPostingLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjLedgerPostingLine
{
    LedgerPostingType                   ledgerPostingType;
    LedgerDimensionDefaultAccount       ledgerAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>filter</Name>
				<Source><![CDATA[
        public void filter(boolean _postPL = false, boolean _postWIP = false, boolean _postPayroll = false)
    {
        switch (this.parmLedgerPostingType())
        {
            case LedgerPostingType::ProjNoLedger :
            case LedgerPostingType::ProjCost :
            case LedgerPostingType::ProjOffsetAccountItem :
            case LedgerPostingType::ProjAccruedCost :
            case LedgerPostingType::ProjTurnover :
            case LedgerPostingType::ProjOnAccount :
            case LedgerPostingType::ProjAccruedRevenueOnAccount :
            case LedgerPostingType::ProjSalesvalue :
            case LedgerPostingType::ProjAccruedTurnoverProd :
            case LedgerPostingType::ProJAccruedTurnoverProfit :
                if (!_postPL)
                {
                    this.parmLedgerPostingType(LedgerPostingType::None);
                    break;
                }
                break;
            case LedgerPostingType::ProjWIPCostvalue :
            case LedgerPostingType::ProjStatusAccountItem :
            case LedgerPostingType::ProjWIPInvoicedOnAccount :
            case LedgerPostingType::ProjWIPCost :
            case LedgerPostingType::ProjSalesvalueOffset :
            case LedgerPostingType::ProjWIPProduction :
            case LedgerPostingType::ProjWIPProfit :
                if (!_postWIP)
                {
                    this.parmLedgerPostingType(LedgerPostingType::None);
                    break;
                }
                break;
            case LedgerPostingType::ProjPayrollAllocation :
                if (!_postPayroll)
                {
                    this.parmLedgerPostingType(LedgerPostingType::None);
                    break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerAccount</Name>
				<Source><![CDATA[
        public LedgerDimensionDefaultAccount parmLedgerAccount(LedgerDimensionDefaultAccount _ledgerAccount = ledgerAccount)
    {
        ledgerAccount = _ledgerAccount;
        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
        public LedgerPostingType parmLedgerPostingType(LedgerPostingType _ledgerPostingType = ledgerPostingType)
    {
        ledgerPostingType = _ledgerPostingType;
        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ProjLedgerPostingLine construct(LedgerPostingType _ledgerPostingType = LedgerPostingType::None)
    {
        ProjLedgerPostingLine   ret = new ProjLedgerPostingLine();
        ret.parmLedgerPostingType(_ledgerPostingType);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>