<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DeliveryCalcTax_Parm_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class intialize the DeliveryCalcTax_Parm_BR for calculating delivery slip taxes.
/// </summary>
class       DeliveryCalcTax_Parm_BR
extends     DeliverySlipCalcTax__DeliverySlip_BR
{
    SalesParmTable  salesParmTable;
    SalesParmLine   salesParmLine;

    ParmId          parmId;
    AccountOrder    sumBy;
    SalesId         sumSalesId;
    DocumentStatus  documentStatus;

    QueryRun        querySalesTableMarkup;
    boolean         firstMarkup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use sales tax adjustment type.
    /// </summary>
    /// <returns>
    ///  true if sales tax adjustment type should be used; otherwise, false.
    /// </returns>
    public boolean allowSingleLineAdjustment()
    {
        return this.useDetailsSalesTaxAdjustmentType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines exchange rate date based on type of exchange rate date in sales record.
    /// </summary>
    /// <param name="_date">
    /// Default return date.
    /// </param>
    /// <returns>
    /// Exchange rate date.
    /// </returns>
    public CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return super(salesParmTable.getExchRateDate(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines exchange rate date based on type of exchange rate date in sales record.
    /// </summary>
    /// <param name="_date">
    /// Default return date.
    /// </param>
    /// <returns>
    /// Exchange rate date.
    /// </returns>
    public ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return super(salesParmTable.getExchRateDate(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// The description of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailDescription getTaxAdjustmentDetailDescription(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailDescription  taxAdjustmentDetailDescription;
        SalesLine                       localSalesLine;
        InventTable                     localInventTable;
        EcoResCategoryTranslation       localEcoResCategoryTranslation;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(SalesLine):
                    localSalesLine = SalesLine::findRecId(_sourceRecId);

                    if (localSalesLine && localSalesLine.ItemId)
                    {
                        localInventTable = InventTable::find(localSalesLine.ItemId);

                        if (localInventTable)
                        {
                            taxAdjustmentDetailDescription = localInventTable.itemDescriptionOrName();
                        }
                    }
                    else if (localSalesLine && localSalesLine.SalesCategory)
                    {
                        localEcoResCategoryTranslation = EcoResCategoryTranslation::find(localSalesLine.SalesCategory, CompanyInfo::languageId());

                        if (localEcoResCategoryTranslation)
                        {
                            taxAdjustmentDetailDescription = localEcoResCategoryTranslation.Description;
                        }
                    }

                    break;

                default:
                    break;
            }
        }

        return taxAdjustmentDetailDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// The reference of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailReference getTaxAdjustmentDetailReference(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailReference    taxAdjustmentDetailReference;
        SalesLine                       localSalesLine;
        EcoResCategory                  localEcoResCategory;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(SalesLine):
                    localSalesLine = SalesLine::findRecId(_sourceRecId);

                    if (localSalesLine && localSalesLine.ItemId)
                    {
                        taxAdjustmentDetailReference = localSalesLine.ItemId;
                    }
                    else if (localSalesLine && localSalesLine.SalesCategory)
                    {
                        localEcoResCategory = EcoResCategory::find(localSalesLine.SalesCategory);

                        if (localEcoResCategory)
                        {
                            taxAdjustmentDetailReference = localEcoResCategory.Name;
                        }
                    }

                    break;

                default:
                    break;
            }
        }

        return taxAdjustmentDetailReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// The type of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailType getTaxAdjustmentDetailType(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailType taxAdjustmentDetailType;
        SalesLine               localSalesLine;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(SalesLine):
                    localSalesLine = SalesLine::findRecId(_sourceRecId);

                    if (localSalesLine && localSalesLine.ItemId)
                    {
                        taxAdjustmentDetailType = TaxAdjustmentDetailType::Item;
                    }
                    else if (localSalesLine && localSalesLine.SalesCategory)
                    {
                         taxAdjustmentDetailType = TaxAdjustmentDetailType::Category;
                    }
                    break;

                default:
                    break;
            }
        }

        return taxAdjustmentDetailType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>Transdate</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>Transdate</c> field of the current order line.
    /// </returns>
    TransDate  invoiceDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the line is new for the sales document.
    /// </summary>
    /// <returns>
    /// true if the line is new for the sales document.
    /// </returns>
    public boolean isNewLine()
    {
        boolean isNewLine;
        if (!prevSalesLine.RecId || prevSalesLine.RecId != salesLine.RecId)
            isNewLine = true;

        return isNewLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the query for current order line.
    /// </summary>
    /// <param name="_lineQueryRun">
    /// TradeTotalsIQueryRun is set.
    /// </param>
    /// <returns>
    /// The query for current order line.
    /// </returns>
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        SalesLine querySalesLine;

        salesParmLine = super(_lineQueryRun);

        if (salesParmLine)
        {
            querySalesLine = salesParmLine.salesLine();

            querySalesLine.SalesDeliverNow  = salesParmLine.DeliverNow;
            querySalesLine.QtyOrdered       = salesParmLine.InventNow;
            querySalesLine.LineAmount       = salesParmLine.effectiveLineAmount();
        }

        return querySalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intialize the instance of <c>DeliveryCalcTaxs_Parm_BR</c> object based on table id.
    /// </summary>
    /// <param name="_source">
    /// Common is set.
    /// </param>
    /// <param name="_specQty">
    /// SalesUpdate quantity is set
    /// </param>
    /// <param name="_sumBy">
    /// AccountOrder value is set.
    /// </param>
    /// <param name="_parmId">
    /// ParmId is set.
    /// </param>
    /// <param name="_sumSalesId">
    /// SalesId is set.
    /// </param>
    /// <param name="_documentStatus">
    /// DocumentStatus is set.
    /// </param>
    /// <remarks>
    /// Sets the records based on source.
    /// </remarks>>
    void new(Common         _source,
             SalesUpdate    _specQty,
             AccountOrder   _sumBy,
             ParmId         _parmId,
             SalesId        _sumSalesId,
             DocumentStatus _documentStatus)
    {
        sumBy           = _sumBy;
        parmId          = _parmId;
        sumSalesId      = _sumSalesId;
        documentStatus  = _documentStatus;

        switch (_source.TableId)
        {
            case tableNum(SalesTable)       : salesTable       = _source;
                                              salesParmTable   = SalesParmTable::findSalesId(salesTable.SalesId, parmId);
                                              break;

            case tableNum(SalesParmTable)   : salesParmTable   = _source;
                                              salesTable       = salesParmTable.salesTable();
                                              break;

            default                         : throw error(Error::wrongUseOfFunction(funcName()));
        }

        super(salesTable, _specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SalesTotalsParmTransContract</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>SalesTotalsParmTransContract</c> class.
    /// </returns>
    protected TradeTotalsIContract  parmContract()
    {
        return SalesTotalsParmTransContract::newFromSalesParmTable(salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query object that iterates related sales order records.
    /// </summary>
    /// <returns>
    /// A query object that iterates related sales order records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public QueryRun queryBuildSalesTable()
    {
        return new QueryRun(salesParmTable.querySalesTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query object that iterates related sales order records.
    /// </summary>
    /// <param name="_queryRun">
    /// A query run object to get the related sales order records.
    /// </param>
    /// <returns>
    /// A query object that iterates related sales order records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SalesTable queryGetSalesTable(QueryRun _queryRun)
    {
        SalesTable          querySalesTable;

        querySalesTable = null;

        if (_queryRun.changed(tableNum(SalesTable)))
        {
            querySalesTable = _queryRun.get(tableNum(SalesTable));
        }

        return querySalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>LineAmount</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>LineAmount</c> field of the current order line.
    /// </returns>
    AmountCur  transLineAmount()
    {
        AmountCur   transLineAmount;

        transLineAmount = salesParmLine.effectiveLineAmount();

        return transLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>LineAmount</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>LineAmount</c> field of the current order line.
    /// </returns>
    AmountCur  transLineAmountInclTax()
    {
        return salesParmLine.effectiveLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>DeliverNow</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>DeliverNow</c> field of the current order line.
    /// </returns>
    SalesQty    transQty()
    {
        return salesParmLine.DeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDetailsSalesTaxAdjustmentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use sales tax adjustment type.
    /// </summary>
    /// <returns>
    ///  true if sales tax adjustment type should be used; otherwise, false.
    /// </returns>
    public boolean useDetailsSalesTaxAdjustmentType()
    {
        boolean useDetailSalesTaxAdjustmentType;

        // Detailed level sales tax adjustments only applies when the tax calculation uses sales tax adjustments.
        Debug::assert(this.useSalesTaxAdjustments());

        if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
        {
            if (documentStatus == DocumentStatus::Invoice)
            {
                useDetailSalesTaxAdjustmentType = true;
            }
        }

        return useDetailSalesTaxAdjustmentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use sales tax adjustments.
    /// </summary>
    /// <returns>
    ///  true if sales tax adjustments should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Returns always true.
    /// </remarks>
    public boolean useSalesTaxAdjustments()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>