<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCalcSettledAmounts_Vend_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendCalcSettledAmounts_Vend_RU extends CustVendCalcSettledAmounts_RU
{
    Amount totalAmountMSTInclVAT, totalAmountCurInclVAT, totalAmountReportingInclVAT;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAmounts</Name>
				<Source><![CDATA[
    private void addAmounts(
        Map                          _mapTransAmounts,
        container                    _key,
        BookStructSmallVATAmounts_RU _transAmounts)
    {
        if (_mapTransAmounts.exists(_key))
        {
            _transAmounts.addAmounts2(BookStructSmallVATAmounts_RU::create(_mapTransAmounts.lookup(_key)));
        }

        _mapTransAmounts.insert(_key, _transAmounts.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceJour</Name>
				<Source><![CDATA[
    public void initFromInvoiceJour(CustVendInvoiceJour _custVendInvoiceJour)
    {
        mainTrans = new DictTable(tableNum(VendTrans)).makeRecord();
        super(_custVendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapTransAmounts</Name>
				<Source><![CDATA[
    protected container initMapTransAmounts()
    {
        VendInvoiceJour              vendInvoiceJour;
        VendInvoiceTrans             vendInvoiceTrans;
        AmountMST                    amountAccounting;
        AmountMSTSecondary           amountReporting;
        BookStructSmallVATAmounts_RU transAmounts;

        totalAmountMSTInclVAT       = 0;
        totalAmountCurInclVAT       = 0;
        totalAmountReportingInclVAT = 0;

        vendInvoiceJour = VendInvoiceJour::findFromVendTrans(
            mainTrans.Invoice,
            mainTrans.TransDate,
            mainTrans.AccountNum,
            false,
            mainTrans.Voucher);

        if (! vendInvoiceJour)
        {
            return [0.0, 0.0, 0.0];
        }

        this.processMarkup(vendInvoiceJour.TableId, vendInvoiceJour.RecId, vendInvoiceJour.DefaultDimension);

        while select RecId, DefaultDimension, InventTransId, TaxGroup, TaxItemGroup, LineAmount, SourceDocumentLine from vendInvoiceTrans
            where vendInvoiceTrans.PurchID             == vendInvoiceJour.PurchId
               && vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId
               && vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate
               && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
        {
            this.processMarkup(vendInvoiceTrans.TableId, vendInvoiceTrans.RecId, vendInvoiceTrans.DefaultDimension, vendInvoiceTrans.InventTransId);

            if (! TaxTable::vatCode_RU(vendInvoiceTrans.TaxGroup, vendInvoiceTrans.TaxItemGroup))
            {
                transAmounts = new BookStructSmallVATAmounts_RU();
                transAmounts.addAmounts(-vendInvoiceTrans.LineAmount, -vendInvoiceTrans.LineAmount, 0);
                totalAmountCurInclVAT -= vendInvoiceTrans.LineAmount;
                this.addAmounts(mapTransAmountsCur, ['', vendInvoiceTrans.DefaultDimension, useParentSourceDocumentLine ? int642str(vendInvoiceTrans.SourceDocumentLine) : vendInvoiceTrans.InventTransId, 0, 0, ''], transAmounts);

                transAmounts = new BookStructSmallVATAmounts_RU();
                amountAccounting = CurrencyExchangeHelper::amount(vendInvoiceTrans.LineAmount * exchRate);
                transAmounts.addAmounts(-amountAccounting, -amountAccounting, 0);
                totalAmountMSTInclVAT -= amountAccounting;
                this.addAmounts(mapTransAmountsMST, ['', vendInvoiceTrans.DefaultDimension, useParentSourceDocumentLine ? int642str(vendInvoiceTrans.SourceDocumentLine) : vendInvoiceTrans.InventTransId, 0, 0, ''], transAmounts);

                transAmounts = new BookStructSmallVATAmounts_RU();
                amountReporting = CurrencyExchangeHelper::amount(amountAccounting * exchRateReporting, reportingCurrencyCode);
                transAmounts.addAmounts(-amountReporting, -amountReporting, 0);
                totalAmountReportingInclVAT -= amountReporting;
                this.addAmounts(mapTransAmountsReporting, ['', vendInvoiceTrans.DefaultDimension, useParentSourceDocumentLine ? int642str(vendInvoiceTrans.SourceDocumentLine) : vendInvoiceTrans.InventTransId, 0, 0, ''], transAmounts);
            }
        }

        return [totalAmountCurInclVAT, totalAmountMSTInclVAT, totalAmountReportingInclVAT];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMarkup</Name>
				<Source><![CDATA[
    private void processMarkup(TableId          _tableId,
                               RecId            _recId,
                               DimensionDefault _defaultDimension,
                               InventTransId    _inventTransId = "")
    {
        MarkupTrans                  markupTrans;
        BookStructSmallVATAmounts_RU transAmounts;
        AmountMST                    amountAccounting;
        AmountMSTSecondary           amountReporting;

        while select CustVendPosted_RU from markupTrans
            where  markupTrans.TransTableId == _tableId
              &&   markupTrans.TransRecId   == _recId
              &&   markupTrans.CustVendPosted_RU
              &&  !markupTrans.TaxVATType_RU
        {
            transAmounts = new BookStructSmallVATAmounts_RU();
            transAmounts.addAmounts(-markupTrans.CustVendPosted_RU, -markupTrans.CustVendPosted_RU, 0);
            totalAmountCurInclVAT -= markupTrans.CustVendPosted_RU;
            this.addAmounts(mapTransAmountsCur, ['', _defaultDimension, _inventTransId, 0, 0, ''], transAmounts);

            transAmounts = new BookStructSmallVATAmounts_RU();
            amountAccounting = CurrencyExchangeHelper::amount(markupTrans.CustVendPosted_RU * exchRate);
            transAmounts.addAmounts(-amountAccounting, -amountAccounting, 0);
            totalAmountMSTInclVAT -= amountAccounting;
            this.addAmounts(mapTransAmountsMST, ['', _defaultDimension, _inventTransId, 0, 0, ''], transAmounts);

            transAmounts = new BookStructSmallVATAmounts_RU();
            amountReporting = CurrencyExchangeHelper::amount(amountAccounting * exchRateReporting, reportingCurrencyCode);
            transAmounts.addAmounts(-amountReporting, -amountReporting, 0);
            totalAmountReportingInclVAT -= amountReporting;
            this.addAmounts(mapTransAmountsReporting, [ "", _defaultDimension, _inventTransId, 0, 0, "" ], transAmounts);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    protected Query query()
    {
        Query                   q = new Query();
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        qbds = q.addDataSource(tableNum(VendSettlement));

        qbds.addSortField(fieldNum(VendSettlement, RecId));
        qbr  = qbds.addRange(fieldNum(VendSettlement, TransRecId));
        qbr.value(SysQuery::value(mainTrans.RecId));
        qbr  = qbds.addRange(fieldNum(VendSettlement, CanBeReversed));
        qbr.value('((' + fieldStr(VendSettlement, CanBeReversed) + ')||(' +
                         fieldStr(VendSettlement, ReversedRecId_RU)+'))');

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTransAmounts</Name>
				<Source><![CDATA[
    protected Query queryTransAmounts(NoYes _useSourceRecId)
    {
        Query                query = super(_useSourceRecId);
        QueryBuildDataSource qBd;

        qBd = query.dataSourceTable(tableNum(TaxTrans));

        qBd.addSortField(fieldNum(TaxTrans, SourceRecId));

        qBd.addSortField(fieldNum(TaxTrans, InventTransId));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
