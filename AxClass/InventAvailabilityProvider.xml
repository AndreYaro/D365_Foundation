<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAvailabilityProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The availability provider is a service that provides inventory on hand availability information.
/// </summary>
/// <remarks>
/// Availability for different types of items can be calculated differently.
/// Use the availability provider to make sure correct availability is fetched regardless of the item type.
/// </remarks>
public class InventAvailabilityProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doFind</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds availability based on the specified search parameters.
    /// </summary>
    /// <param name="_search">
    /// The parameters of the search.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    protected InventAvailabilityByUnit doFind(InventAvailabilitySearch _search)
    {
        InventAvailabilityByUnit    result;

        if (_search.isItemWHSEnabled())
        {
            WHSInventReserveQty whsInventReserveQty = WHSInventReserveQty::newFromParms(_search.inventTable(), _search.inventDimCriteria(), _search.inventDimCriteriaParm(), _search.inventSum());
            result = InventAvailabilityByUnit::newFromParms(whsInventReserveQty, whsInventReserveQty);
        }
        else if (_search.isInventSumSet())
        {
            InventSumAvailability inventSumAvailability = InventSumAvailability::newFromInventSum(_search.inventSum());
            result = InventAvailabilityByUnit::newFromParms(inventSumAvailability, inventSumAvailability);
        }
        else
        {
            InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(_search.itemId(), _search.inventDimCriteria(), _search.inventDimCriteriaParm());
            result = InventAvailabilityByUnit::newFromParms(inventOnHandQty, inventOnHandQty);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds availability based on the specified search parameters.
    /// </summary>
    /// <param name="_search">
    /// The parameters of the search.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>_search</c> is null.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>_search</c> is not valid.
    /// </exception>
    public InventAvailabilityByUnit find(InventAvailabilitySearch _search)
    {
        if (!_search || !_search.isValid())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventAvailabilityByUnit res = this.doFind(_search);

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventAvailabilityProvider construct()
    {
        return new InventAvailabilityProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDimWithAutoReservationCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets availability for a batch tracked item, taking
    /// into consideration appropriate conditions that block the availablity of batches for automatic reservation.
    /// </summary>
    /// <param name="_inventMovement">
    /// The <c>InventMovement</c> object for which the automatic reservation is attempted.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The criteria to limit the inventory search to.
    /// </param>
    /// <param name="_inventDimParm">
    /// The flags for the inventory dimension criteria values; optional.
    /// </param>
    /// <param name="_forceBatchAttributes">
    /// A boolean value indicating whether the batch attributes criteria should be always applied.
    /// </param>
    /// <param name="_ignoreBatchAttributes">
    /// A boolean value indicating whether the batch attributes criteria should be always ignored.
    /// </param>
    /// <returns>
    /// An <c>InventAvailabilityByUnit</c> object for the available inventory.
    /// </returns>
    public static InventAvailabilityByUnit findByDimWithAutoReservationCriteria(
        InventMovement  _inventMovement,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm = _inventDimCriteria.toDimParm(),
        boolean         _forceBatchAttributes = false,
        boolean         _ignoreBatchAttributes = false)
    {
        container packedAvailability = InventAvailabilityProvider::findByDimWithAutoReservCritPackedServer(_inventMovement.buffer(),
                                                                                                           _inventDimCriteria,
                                                                                                           _inventDimParm,
                                                                                                           _forceBatchAttributes,
                                                                                                           _ignoreBatchAttributes);

        return InventAvailabilityByUnit::create(packedAvailability);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDimWithAutoReservCritPackedServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets packed availability on the server for a batch tracked item, taking
    /// into consideration appropriate conditions that block the availablity of batches for auto reservation.
    /// </summary>
    /// <param name="_inventMovementBuffer">
    /// The record that is used as the inventory movement buffer. E.g. <c>SalesLine</c>.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The criteria to limit the inventory search to.
    /// </param>
    /// <param name="_inventDimParm">
    /// The flags for the inventory dimension criteria values.
    /// </param>
    /// <param name="_forceBatchAttributes">
    /// A boolean value indicating whether the batch attributes criteria should be always applied.
    /// </param>
    /// <param name="_ignoreBatchAttributes">
    /// A boolean value indicating whether the batch attributes criteria should be always ignored.
    /// </param>
    /// <returns>
    /// A container containing a packed <c>InventAvailabilityByUnit</c> object for the available inventory.
    /// </returns>
    private static container findByDimWithAutoReservCritPackedServer(
        Common          _inventMovementBuffer,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm,
        boolean         _forceBatchAttributes,
        boolean         _ignoreBatchAttributes)
    {
        InventMovement movement = InventMovement::construct(_inventMovementBuffer);
        movement.initForAutoReservation();

        InventReservationCriteriaBuilder criteriaBuilder = InventReservationCriteriaBuilder::newMovement(movement);
        criteriaBuilder.parmAlwaysApplyBatchAttributes(_forceBatchAttributes);
        criteriaBuilder.parmIgnoreBatchAttributes(_ignoreBatchAttributes);

        InventOnHandQty onHandQty = InventOnHandQty::newParameters(movement.itemId(), _inventDimCriteria, _inventDimParm);
        onHandQty.parmAdvancedCriteria(criteriaBuilder.buildCriteria());

        return InventAvailabilityByUnit::newFromParms(onHandQty, onHandQty).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds availability based on the specified item and dimension criteria.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimension criteria.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    /// <remarks>
    /// Non-empty dimension values from the dimension criteria will be used to filter the availability.
    /// Empty dimensions will be ignored.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>_inventTable</c> record is not specified.
    /// </exception>
    public static InventAvailabilityByUnit findByItemDim(InventTable _inventTable, InventDim _inventDimCriteria)
    {
        InventAvailabilityProvider provider = InventAvailabilityProvider::construct();
        InventAvailabilitySearch search = InventAvailabilitySearch::newFromItemDim(_inventTable, _inventDimCriteria);

        return provider.find(search);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemIdDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds availability based on the specified item ID and dimension criteria.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimension criteria.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    /// <remarks>
    /// Non-empty dimension values from the dimension criteria will be used to filter the availability.
    /// Empty dimensions will be ignored.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>_itemId</c> is blank.
    /// </exception>
    public static InventAvailabilityByUnit findByItemIdDim(ItemId _itemId, InventDim _inventDimCriteria)
    {
        InventAvailabilityProvider provider = InventAvailabilityProvider::construct();
        InventAvailabilitySearch search = InventAvailabilitySearch::newFromItemIdDim(_itemId, _inventDimCriteria);

        return provider.find(search);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemSumDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds availability based on the specified item, the specified <c>InventSum</c> and
    /// the dimensions that were used as a filter to find this record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> record that contains on hand information for the specified dimension criteria.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimension criteria.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    /// <remarks>
    /// Non-empty dimension values from the dimension criteria will be used to filter the availability.
    /// Empty dimensions will be ignored.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if the <c>_inventTable</c> record is not specified.
    /// </exception>
    public static InventAvailabilityByUnit findByItemSumDim(
        InventTable _inventTable,
        InventSum   _inventSum,
        InventDim   _inventDimCriteria)
    {
        InventAvailabilityProvider provider = InventAvailabilityProvider::construct();
        InventAvailabilitySearch search = InventAvailabilitySearch::newFromItemSumDim(_inventTable, _inventSum, _inventDimCriteria);

        return provider.find(search);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds availability based on the specified <c>InventSum</c>.
    /// </summary>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> record that contains on hand information
    /// for the specified dimension criteria.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>InventSum.InventDimId</c> is blank.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>InventSum.ItemId</c> is blank.
    /// </exception>
    public static InventAvailabilityByUnit findBySum(InventSum _inventSum)
    {
        InventAvailabilityProvider provider = InventAvailabilityProvider::construct();
        InventAvailabilitySearch search = InventAvailabilitySearch::newFromSum(_inventSum);

        return provider.find(search);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySumDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds availability based on the specified <c>InventSum</c> and
    /// the dimensions that were used as a filter to find this record.
    /// </summary>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> record that contains on hand information
    /// for the specified dimension criteria.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimensions of the <c>InventSum</c> record.
    /// </param>
    /// <returns>
    /// The <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    /// <remarks>
    /// Non-empty dimension values from the dimension criteria will be used to filter the availability.
    /// Empty dimensions will be ignored.
    /// Note that it is the responsibility of the user of the API to provide the correct dimensions that were used
    /// to find the specified <c>InventSum</c>.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>InventSum.ItemId</c> is blank.
    /// </exception>
    public static InventAvailabilityByUnit findBySumDim(InventSum _inventSum, InventDim _inventDimCriteria)
    {
        InventAvailabilityProvider provider = InventAvailabilityProvider::construct();
        InventAvailabilitySearch search = InventAvailabilitySearch::newFromSumDim(_inventSum, _inventDimCriteria);

        return provider.find(search);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSameBatchFirstOrLargest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an <c>InventAvailabilityByUnitWithDim</c> object for the same batch inventory that is first that meets
    /// the requirements or largest available for automatic reservation, depending on parameter settings.
    /// </summary>
    /// <param name="_inventMovement">
    /// The <c>InventMovement</c> object for which the automatic reservation is attempted.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The criteria to limit the batch search to.
    /// </param>
    /// <param name="_inventDimParm">
    /// The flags for the inventory dimension criteria values.
    /// </param>
    /// <param name="_requestedQty">
    /// The required minimum inventory quantity that a batch must have; optional. If specified this method will
    /// search for a batch that has at least this inventory quantity available.
    /// </param>
    /// <param name="_cwRequestedQty">
    /// The required minimum catch weight quantity that a batch must have; optional. If specified this method will
    /// search for a batch that has at least this catch weight quantity available.
    /// </param>
    /// <returns>
    /// An <c>InventAvailabilityByUnitWithDim</c> object found by the search. If
    /// there is no batch found with available inventory for reservation that is enough for the required quantity, then
    /// the largest available will be returned. If there is no inventory found matching the item and dimension criteria
    /// then the two record buffers will be empty.
    /// </returns>
    /// <remarks>
    /// The selection of the actual batch depends on the reservation settings in the inventory model group
    /// (ReserveByDate and FEFO). If either of these are set, meaning date dependent reservation is selected; and
    /// if <paramref name="_requestedQty"/> or <paramref name="_cwRequestedQty"/> are either non-zero, then the first batch that
    /// matches that requirement is returned. Otherwise, this will find the batch with the largest available
    /// inventory available for reservation that matches the given item and dimension selection parameters.
    /// </remarks>
    public static InventAvailabilityByUnitWithDim findSameBatchFirstOrLargest(
        InventMovement      _inventMovement,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm = _inventDimCriteria.toDimParm(),
        InventQty           _requestedQty = 0,
        PdsCWInventQty      _cwRequestedQty = 0)
    {
        container packedResult = InventAvailabilityProvider::findSameBatchFirstOrLargestPackedServer(_inventMovement.buffer(),
                                                                                                     _inventDimCriteria,
                                                                                                     _inventDimParm,
                                                                                                     _requestedQty,
                                                                                                     _requestedQty);

        return InventAvailabilityByUnitWithDim::create(packedResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSameBatchFirstOrLargestPackedServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a packed <c>InventAvailabilityByUnitWithDim</c> on the server
    /// for the same batch inventory that is first that meets
    /// the requirements or largest available for reservation, depending on parameter settings.
    /// </summary>
    /// <param name="_inventMovementBuffer">
    /// The record that is used as the inventory movement buffer. E.g. <c>SalesLine</c>.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The criteria to limit the batch search to.
    /// </param>
    /// <param name="_inventDimParm">
    /// The flags for the inventory dimension criteria values.
    /// </param>
    /// <param name="_requestedQty">
    /// The required minimum inventory quantity that a batch must have; optional. If specified this method will
    /// search for a batch that has at least this inventory quantity available.
    /// </param>
    /// <param name="_cwRequestedQty">
    /// The required minimum catch weight quantity that a batch must have; optional. If specified this method will
    /// search for a batch that has at least this catch weight quantity available.
    /// </param>
    /// <returns>
    /// A container containing a packed <c>InventAvailabilityByUnitWithDim</c> found by the search. If
    /// there is no batch found with available inventory for reservation that is enough for the required quantity, then
    /// the largest available will be returned. If there is no inventory found matching the item and dimension criteria
    /// then the two record buffers will be empty.
    /// </returns>
    /// <remarks>
    /// The selection of the actual batch depends on the reservation settings in the inventory model group
    /// (ReserveByDate and FEFO). If either of these are set, meaning date dependent reservation is selected; and
    /// if <paramref name="_requestedQty"/> or <paramref name="_cwRequestedQty"/> are either non-zero, then the first batch that
    /// matches that requirement is returned. Otherwise, this will find the batch with the largest available
    /// inventory available for reservation that matches the given item and dimension selection parameters.
    /// </remarks>
    private static container findSameBatchFirstOrLargestPackedServer(
        Common              _inventMovementBuffer,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParm,
        InventQty           _requestedQty,
        PdsCWInventQty      _cwRequestedQty)
    {
        InventDim                   resultInventDim;

        InventMovement movement = InventMovement::construct(_inventMovementBuffer);
        movement.initForAutoReservation();
        InventTable inventTable = movement.inventTable();
        boolean cwItem = movement.pdsCWItem();
        PmfQtyDataCarrier requestedQtyByUnit = PmfQtyDataCarrier::newStandard(_requestedQty, _cwRequestedQty);
        InventOnHandCriteria criteria = InventReservationCriteriaBuilder::newMovement(movement).buildCriteria();

        boolean findFirst = requestedQtyByUnit.qty(cwItem) && (inventTable.pdsCheck() || inventTable.modelGroup().ReserveByDate);

        QueryRun queryRun = InventAvailabilityProvider::getSameBatchFirstOrLargestQueryRun(movement, _inventDimCriteria, _inventDimParm, criteria);

        InventAvailabilityByUnit resultAvailability = InventAvailabilityByUnit::zero();
        while (queryRun.next())
        {
            InventDim inventDim = queryRun.get(tableNum(InventDim));

            if (inventDim.inventBatchId)
            {
                InventSum inventSum = queryRun.get(tableNum(InventSum));
                InventAvailabilityByUnit availability = InventAvailabilityProvider::findByItemSumDim(inventTable, inventSum, inventDim);

                if (availability.availReservation().qty(cwItem) > resultAvailability.availReservation().qty(cwItem)
                    && criteria.isMatchedByInventDim(inventDim))
                {
                    resultAvailability = availability.clone();
                    resultInventDim.data(inventDim);

                    if (findFirst
                        && resultAvailability.availReservation().qty(cwItem) >= requestedQtyByUnit.qty(cwItem))
                    {
                        break;
                    }
                }
            }
        }

        return InventAvailabilityByUnitWithDim::newStandard(resultAvailability, resultInventDim).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSameBatchFirstOrLargestQueryRun</Name>
				<Source><![CDATA[
    private static QueryRun getSameBatchFirstOrLargestQueryRun(
        InventMovement          _movement,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm,
        InventOnHandCriteria    _advancedReservationCriteria)
    {
        InventDimParm               localInventDimParm;
        InventDimParm               inventDimParmGroupBy;

        localInventDimParm.data(_inventDimParm);
        localInventDimParm.ItemIdFlag = NoYes::Yes;

        inventDimParmGroupBy.data(localInventDimParm);
        inventDimParmGroupBy.InventBatchIdFlag = NoYes::Yes;

        Query query = InventSum::pdsSameLotQuery(_movement.itemId(), _inventDimCriteria, localInventDimParm, inventDimParmGroupBy);

        _advancedReservationCriteria.applyToOnHand(query);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>