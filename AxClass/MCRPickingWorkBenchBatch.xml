<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPickingWorkBenchBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRPickingWorkBenchBatch</c> runs
/// the picking workbench functionality in batch.
/// </summary>
class MCRPickingWorkBenchBatch extends RunBaseBatch implements BatchRetryable
{
    DialogField     dialogMaxOrders;
    DialogField     dialogMaxLinesPerOrder;
    DialogField     dialogPaymMode;
    DialogField     dialogPaymModes;
    DialogField     dialogCustGroupId;
    DialogField     dialogSOAllocHighPriority;
    DialogField     dialogSOAllocLowPriority;
    DialogField     dialogOnlySingleLineOrders;
    DialogField     dialogDlvMode;
    DialogField     dialogDlvDate;
    DialogField     dialogWarehouse;
    DialogField     dialogMCRExpedite;
    DialogField     dialogInventSiteId;    
    DialogField     dialogItemId;

    FormStringControl   tempItemIDQueryCtrl;
    FormStringControl   tempPickingAreaIDQueryCtrl;
    FormStringControl   tempDimensionQueryCtrl;

    Integer                 maxOrders;
    Integer                 maxLinesPerOrder;
    RetailStoreTenderTypeId tenderTypeId;
    CustGroupId             custGroupId;
    MCRSOAllocPriority      mcrSOAllocLowPriority;
    MCRSOAllocPriority      mcrSOAllocHighPriority;
    NoYesId                 noYesId;
    CustDlvModeId           custDlvModeId;
    DlvDate                 dlvDate;
    InventLocationId        inventLocationId;
    MCRDivisionDimension    dimension;
    MCRExpedite             expedite;
    InventSiteId            inventSiteId;    
    ItemId                  itemId;

    MCRPickingWorkbenchSession  mcrPickingWorkbenchSessionInit;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        maxOrders,
        maxLinesPerOrder,
        tenderTypeId,
        custGroupId,
        mcrSOAllocLowPriority,
        mcrSOAllocHighPriority,
        noYesId,
        custDlvModeId,
        dlvDate,
        inventLocationId,
        dimension,
        expedite,
        inventSiteId,        
        itemId
    #ENDMACRO

    #LOCALMACRO.Version1List
        maxOrders,
        maxLinesPerOrder,
        tenderTypeId,
        custGroupId,
        mcrSOAllocLowPriority,
        mcrSOAllocHighPriority,
        noYesId,
        custDlvModeId,
        dlvDate,
        inventLocationId,
        dimension,
        expedite,
        inventSiteId,
        wmsPickingAreaId,
        itemId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a dialog to create a picking workbench session in batch form.
    /// </summary>
    /// <returns>
    /// A dialog object used to create a picking workbench session in batch form.
    /// </returns>
    public Object dialog()

    {
        DialogGroup                 dialogGroupCriteria;
        DialogGroup                 dialogGroupOrderCriteria;
        DialogGroup                 dialogGroupLineCriteria;
        DialogRunbase               dialogRunbase;
        str                         fieldName;
        MCROrderParameters          mcrOrderParameters = MCROrderParameters::find();

        dialogRunbase = new DialogRunbase("@MCR34008", this);
        dialogGroupCriteria = dialogRunbase.addGroup("@SYS1046");
        dialogGroupCriteria.frameType(FormFrameType::Auto);
        dialogGroupCriteria.columns(2);

        dialogGroupOrderCriteria = dialogRunbase.addGroup("@SYS5348", dialogGroupCriteria);
        dialogGroupOrderCriteria.frameType(FormFrameType::Auto);

        dialogMaxOrders = dialogRunbase.addField(extendedTypeStr(Integer), "@SYS67077", "@MCR11304");
        dialogMaxOrders.value(0);

        dialogMaxLinesPerOrder = dialogRunbase.addField(extendedTypeStr(Integer), "@SYS15451", "@MCR35374");
        dialogMaxLinesPerOrder.value(0);

        dialogGroupOrderCriteria = dialogRunbase.addGroup("@MCR11322", dialogGroupCriteria);
        dialogGroupOrderCriteria.frameType(FormFrameType::Auto);

        dialogPaymMode              = dialogRunbase.addField(extendedTypeStr(MCRPickingWorkbenchTenderTypeId));
        dialogCustGroupId           = dialogRunbase.addField(extendedTypeStr(CustGroupId));
        dialogOnlySingleLineOrders  = dialogRunbase.addFieldValue(extendedTypeStr(NoYesId), NoYes::No, "@MCR33952", "@MCR33953");
        dialogSOAllocHighPriority   = dialogRunbase.addFieldValue(enumStr(MCRSOAllocPriority), MCRSOAllocPriority::AllocationPriority1, "@MCR33451");
        dialogSOAllocLowPriority    = dialogRunbase.addFieldValue(enumStr(MCRSOAllocPriority), MCRSOAllocPriority::AllocationPriority10, "@MCR33452");

        dialogGroupLineCriteria = dialogRunbase.addGroup("@MCR21613", dialogGroupCriteria);
        dialogGroupLineCriteria.frameType(FormFrameType::Auto);

        dialogDlvMode           = dialogRunbase.addField(extendedTypeStr(CustDlvModeId));
        dialogDlvDate           = dialogRunbase.addField(extendedTypeStr(DlvDate), "@MCR10405", "@MCR11709");
        dialogMCRExpedite       = dialogRunbase.addField(extendedTypeStr(MCRExpedite));
        dialogInventSiteId      = dialogRunbase.addField(extendedTypeStr(InventSiteId));
        dialogWarehouse         = dialogRunbase.addField(extendedTypeStr(InventLocationId), "@SYS6437");
        dialogItemId            = dialogRunbase.addField(extendedTypeStr(MCRItemIDQuery));

        // Position of itemid important for the lookup to work
        dialogItemId.lookupButton(FormLookupButton::Always);
        dialogItemId.mcrReplaceOnLookup(false);

        // Check for item ID lookup.
        fieldName = dialogItemId.fieldname();
        fieldName = fieldName + '_lookup';
        if (!MCRPickingWorkBenchBatch::classHasMethod(this.name(), fieldName))
        {
            throw error(strFmt("@MCR32922", fieldName, this.name()));
        }

        if (mcrPickingWorkbenchSessionInit)
        {
            dialogMaxOrders.value(mcrPickingWorkbenchSessionInit.MaxOrders);
            dialogMaxLinesPerOrder.value(mcrPickingWorkbenchSessionInit.MaxLinesPerOrder);
            dialogPaymMode.value(mcrPickingWorkbenchSessionInit.TenderTypeId);
            dialogCustGroupId.value(mcrPickingWorkbenchSessionInit.CustGroupId);
            dialogSOAllocHighPriority.value(mcrPickingWorkbenchSessionInit.soAllocHighPriority);
            dialogSOAllocLowPriority.value(mcrPickingWorkbenchSessionInit.soAllocLowPriority);
            dialogOnlySingleLineOrders.value(mcrPickingWorkbenchSessionInit.OnlySingleLineOrders);
            dialogDlvMode.value(mcrPickingWorkbenchSessionInit.DlvMode);
            dialogDlvDate.value(mcrPickingWorkbenchSessionInit.DlvDate);
            dialogWarehouse.value(mcrPickingWorkbenchSessionInit.Warehouse);
            dialogMCRExpedite.value(mcrPickingWorkbenchSessionInit.MCRExpedite);
            dialogInventSiteId.value(mcrPickingWorkbenchSessionInit.InventSiteId);
            dialogItemId.value(mcrPickingWorkbenchSessionInit.ItemIdQuery);
        }
        else
        {
            dialogMaxOrders.value(maxOrders);
            dialogMaxLinesPerOrder.value(maxLinesPerOrder);
            dialogPaymMode.value(tenderTypeId);
            dialogCustGroupId.value(custGroupId);
            dialogSOAllocHighPriority.value(MCRSOAllocPriority::AllocationPriority1);
            dialogSOAllocLowPriority.value(MCRSOAllocPriority::AllocationPriority10);
            dialogOnlySingleLineOrders.value(noYesId);
            dialogDlvMode.value(custDlvModeId);
            dialogDlvDate.value(dlvDate);
            dialogWarehouse.value(inventLocationId);
            dialogMCRExpedite.value(expedite);
            dialogInventSiteId.value(inventSiteId);            
            dialogItemId.value(itemId);
        }

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the dialog posting logic.
    /// </summary>
    /// <param name="_dialog">
    /// The <c>DialogRunbase</c> object to be run.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        FormRun formRun = _dialog.formRun();

        super(_dialog);

        formRun.controlMethodOverload(true);
        formRun.controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld13_1_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides lookup functionality for the wms picking area ID field on the dialog.
    /// </summary>
    /// <remarks>
    /// If the dialog field is moved on form, this method name needs to be modified.
    /// </remarks>
    [SysObsolete('Functionality related to Warehouse Management II is not supported', false, 7\11\2016)]
    void fld13_1_lookup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld14_1_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides lookup functionality for the item ID field on the dialog.
    /// </summary>
    /// <remarks>
    /// If the dialog field is moved on form, this method name needs to be modified.
    /// </remarks>
    void fld14_1_lookup()
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    qbdsInventTable = query.addDataSource(tableNum(InventTable));

        tempItemIDQueryCtrl = dialogItemId.control();
        sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), tempItemIDQueryCtrl);

        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        sysTableLookup.addLookupfield(fieldNum(InventTable, Product));
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemName));
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemGroupId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        maxOrders              = dialogMaxOrders.value();
        maxLinesPerOrder       = dialogMaxLinesPerOrder.value();
        tenderTypeId           = dialogPaymMode.value();
        custGroupId            = dialogCustGroupId.value();
        mcrSOAllocLowPriority  = dialogSOAllocLowPriority.value();
        mcrSOAllocHighPriority = dialogSOAllocHighPriority.value();
        noYesId                = dialogOnlySingleLineOrders.value();
        custDlvModeId          = dialogDlvMode.value();
        dlvDate                = dialogDlvDate.value();
        inventLocationId       = dialogWarehouse.value();
        expedite               = dialogMCRExpedite.value();
        inventSiteId           = dialogInventSiteId.value();
        itemId                 = dialogItemId.value();
        noYesId                = dialogOnlySingleLineOrders.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.initMCRPickingWorkbenchSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMCRPickingWorkbenchSessionValue</Name>
				<Source><![CDATA[
    public void initMCRPickingWorkbenchSessionValue(MCRPickingWorkbenchSession _mcrPickingWorkbenchSession)
    {
        _mcrPickingWorkbenchSession.initValue();
        _mcrPickingWorkbenchSession.Prompt                = MCRPickingPrompt::ByCriteria;
        _mcrPickingWorkbenchSession.MaxOrders             = maxOrders;
        _mcrPickingWorkbenchSession.TenderTypeId          = tenderTypeId;
        _mcrPickingWorkbenchSession.MaxLinesPerOrder      = maxLinesPerOrder;
        _mcrPickingWorkbenchSession.CustGroupId           = custGroupId;
        _mcrPickingWorkbenchSession.SOAllocHighPriority   = mcrSOAllocHighPriority;
        _mcrPickingWorkbenchSession.SOAllocLowPriority    = mcrSOAllocLowPriority;
        _mcrPickingWorkbenchSession.OnlySingleLineOrders  = noYesId;
        _mcrPickingWorkbenchSession.DlvMode               = custDlvModeId;
        _mcrPickingWorkbenchSession.DlvDate               = dlvDate;
        _mcrPickingWorkbenchSession.Warehouse             = inventLocationId;
        _mcrPickingWorkbenchSession.MCRExpedite           = expedite;
        _mcrPickingWorkbenchSession.InventSiteId          = inventSiteId;
        _mcrPickingWorkbenchSession.ItemIdQuery           = itemId;
        _mcrPickingWorkbenchSession.CreatedFromBatch      = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMCRPickingWorkbenchSession</Name>
				<Source><![CDATA[
    protected void initMCRPickingWorkbenchSession()
    {
        MCRPickingWorkbenchSession mcrPickingWorkbenchSession;
        #AviFiles

        try
        {
            ttsBegin;
            this.initMCRPickingWorkbenchSessionValue(mcrPickingWorkbenchSession);
            if (mcrPickingWorkbenchSession.validateWrite())
            {
                mcrPickingWorkbenchSession.insert();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttsCommit;

            MCRPickingWorkBench::mcrGenerateWavesLogic(mcrPickingWorkbenchSession);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPickingWorkbenchSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>MCRPickingWorkbenchSession</c> buffer.
    /// </summary>
    /// <param name="_mcrPickingWorkbenchSession">
    /// The buffer used to set the <c>MCRPickingWorkbenchSession</c> buffer.
    /// </param>
    public void setPickingWorkbenchSession(MCRPickingWorkbenchSession _mcrPickingWorkbenchSession)
    {
        mcrPickingWorkbenchSessionInit = _mcrPickingWorkbenchSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        str wmsPickingAreaId;

        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            case 1:
                [version, #Version1List] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>classHasMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whethor the passed class has the passed method.
    /// </summary>
    /// <param name="_classname">
    /// The class to search for the passed method.
    /// </param>
    /// <param name="_methodName">
    /// The method to search for on the passed class.
    /// </param>
    /// <returns>
    /// true if the class and method exist; otherwise, false.
    /// </returns>
    public static boolean classHasMethod(str _classname, str _methodName)
    {
        ClassNode classNode;
        #aot
        TreeNode treeNode;
        MemberFunction method;
        boolean ret;
        treeNode = TreeNode::findNode(#ClassesPath);
        classNode = treeNode.AOTfindChild(_classname);
        if (classNode)
        {
            method = classNode.AOTfindChild(_methodName);
            if (method)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@MCR11316";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        MCRPickingWorkBenchBatch mcrPickingWorkBenchBatch = new MCRPickingWorkBenchBatch();

        if (_args && _args.record() && _args.dataset() == tableNum(MCRPickingWorkbenchSession))
        {
            mcrPickingWorkBenchBatch.setPickingWorkbenchSession(_args.record());
        }

        if (!mcrPickingWorkBenchBatch.prompt())
        {
            return;
        }

        mcrPickingWorkBenchBatch.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>