<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesShippingBillJournalCreate_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesShippingBillJournalCreate_IN</c> class is used to create the sales shipping bill journal.
/// </summary>
[DocumentStatusFactoryAttribute(DocumentStatus::ShippingBill_IN)]
class SalesShippingBillJournalCreate_IN extends FormletterJournalCreate
{
    CustomsShippingBillJour_IN      customsShippingBillJour;
    CustomsShippingBillTrans_IN     customsShippingBillTrans;

    EximShippingBillTrans_IN        eximShippingBillTrans;
    CustomsExportOrderTable_IN  customsExportOrderTable;
    SalesTable                  salesTable;
    SalesParmTable              salesParmTable;
    SalesParmUpdate             salesParmUpdate;
    SalesLine                   salesLine;

    SalesTotals                 salesTotals;
    RecordSortedList            recordListSalesParmLine;
    Num                         internalNumber;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    protected NumberSeq allocateNumAndVoucher()
    {
        return NumberSeq::newGetNum(SalesParameters::numRefShippingBillVoucher_IN());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    protected void createJournalHeader()
    {
        customsShippingBillJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _salesParmLine)
    {
        SalesParmLine salesParmLine = _salesParmLine as SalesParmLine;
        CustInvoiceTrans         custInvoiceTrans;
        EximCustInvoiceTrans_IN  eximCustInvoiceTrans;

        salesLine = salesParmLine.salesLine();

        CustomsQty_IN invoiceQty = CustInvoiceTrans::getReceive_IN(customsShippingBillJour.SalesId, customsShippingBillJour.InvoiceId, salesLine.InventTransId);
        CustomsQty_IN shippingBillQty = CustomsShippingBillTrans_IN::getShipBillQtyExhausted(customsShippingBillJour.SalesId, customsShippingBillJour.InvoiceId, salesLine.InventTransId);
        customsShippingBillTrans.clear();
        customsShippingBillTrans.initValue();
        customsShippingBillTrans.initFromSalesLine(salesLine);
        customsShippingBillTrans.SalesId            = customsShippingBillJour.SalesId;
        customsShippingBillTrans.InvoiceId          = customsShippingBillJour.InvoiceId;
        customsShippingBillTrans.ShippingBillDate   = customsShippingBillJour.ShippingBillDate;
        customsShippingBillTrans.ShippingBillQty    = salesParmLine.DeliverNow;
        customsShippingBillTrans.InvoiceDate        = customsShippingBillJour.InvoiceDate;
        customsShippingBillTrans.LedgerVoucher      = customsShippingBillJour.LedgerVoucher;
        customsShippingBillTrans.CurrencyCode		= customsShippingBillJour.CurrencyCode;
        //For partial shipping bill update, the receive quantity field is the previous Shipping bill's remaining quantity.
        customsShippingBillTrans.ReceiveQty         = abs(invoiceQty) - abs(shippingBillQty);

        customsShippingBillTrans.CustomsShippingBillNumberTable = salesParmUpdate.CustomsShippingBillNumberTable_IN ?
                                                                        salesParmUpdate.CustomsShippingBillNumberTable_IN :
                                                                        salesParmTable.CustomsShippingBillNumberTable_IN;
        customsShippingBillTrans.write();

        if (TaxParameters::isCustomsEnable_IN())
        {
            select firstonly CurrencyCode, RecId from custInvoiceTrans
                where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
                   && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
                   && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate
                join firstonly EximIncentiveSchemeGroup
                    from eximCustInvoiceTrans
                        where eximCustInvoiceTrans.CustInvoiceTransRecId == custInvoiceTrans.RecId;

            EximSalesParmLine_IN eximSalesParmLine = EximSalesParmLine_IN::findBySalesParmLineRecId(salesParmLine.RecId);

            eximShippingBillTrans.EximPorts                 = eximSalesParmLine.EximPorts;
            eximShippingBillTrans.EximProductGroupTable     = eximSalesParmLine.EximProductGroupTable;
            eximShippingBillTrans.AssessableValue           = salesParmLine.salesParmLine_IN().AssessableValueTransactionCurrency;
            eximShippingBillTrans.CurrencyCode              = custInvoiceTrans.CurrencyCode;

            if (TaxParameters::isEximIncentiveSchemEnable_IN())
            {
                eximShippingBillTrans.EximIncentiveSchemeGroup  = eximCustInvoiceTrans.EximIncentiveSchemeGroup;
                eximShippingBillTrans.CustomsTariffCodeTable    = eximSalesParmLine.CustomsTariffCodeTable;

                if (EximParameters_IN::find().ActivateDEPB)
                {
                    eximShippingBillTrans.ApplyDEPB          = eximSalesParmLine.ApplyDEPB;
                    eximShippingBillTrans.MarketValue        = eximSalesParmLine.MarketValue;
                    eximShippingBillTrans.MarketValuePct     = eximSalesParmLine.MarketValuePct;
                    eximShippingBillTrans.AllowedMarketValue = eximSalesParmLine.AllowedMarketValue;
                }
                if (EximParameters_IN::find().ActivateDutyDrawback)
                {
                    eximShippingBillTrans.dbkCenvatStatus = eximSalesParmLine.dbkCenvatStatus;
                    eximShippingBillTrans.dbkRateType     = eximSalesParmLine.dbkRateType;
                    eximShippingBillTrans.dbkPercent      = eximSalesParmLine.dbkPercent;
                }
            }
            eximShippingBillTrans.ShippingBillTransRecId = customsShippingBillTrans.RecId;
            eximShippingBillTrans.insert();
        }

        if (EximParameters_IN::checkParameters())
        {
            this.updateEximExportsDetails();
        }
        if (EximParameters_IN::checkEPCGParameters())
        {
            this.updateEximEPCGExportsDetails();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common _salesParmLine)
    {
        SalesParmLine salesParmLine = _salesParmLine as SalesParmLine;
        CustomsShippingBillSalesLink_IN    customsShippingBillSalesLink;

        customsShippingBillSalesLink.initFromSalesParmLine      (salesParmLine);
        customsShippingBillSalesLink.initFromSalesTable         (SalesTable::find(salesParmLine.OrigSalesId));
        customsShippingBillSalesLink.initFromCustomsShippingBillJour    (customsShippingBillJour);
        this.insertJournalLink(customsShippingBillSalesLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    public Common getJournal()
    {
        return customsShippingBillJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    protected container getNumAndVoucher()
    {
        #define.blank('')

        numberSeq     = this.allocateNumAndVoucher();

        if (numberSeq)
        {
            journalNumber = #blank;
            voucher       = numberSeq.num();
        }

        return [journalNumber, voucher];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterProvider</Name>
				<Source><![CDATA[
    protected void initFormletterProvider()
    {
        formletterProvider = FormletterProvider::newFormletterType(this.formletterType(), salesTable);
        formletterProvider.parmParmUpdate(this.parmParmUpdate());
        formletterProvider.parmTotals(this.totals());
        formletterProvider.parmParmTable(this.parmParmTable());
        formletterProvider.parmDocumentStatus(this.parmDocumentStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    protected void initJournalHeader()
    {
        customsShippingBillJour.clear();
        customsShippingBillJour.LedgerVoucher = this.getVoucher();
        customsShippingBillJour.InvoiceId = salesParmTable.CustomsExportInvoiceId_IN;
        if (!voucher  &&  !salesParmUpdate.Proforma)
        {
            throw error("@SYS71652");
        }
        customsShippingBillJour.ParmId              = salesParmUpdate.ParmId;
        customsShippingBillJour.CustomsShippingBillNumberTable = salesParmUpdate.CustomsShippingBillNumberTable_IN != 0 ?
                                                                      salesParmUpdate.CustomsShippingBillNumberTable_IN :
                                                                      salesParmTable.CustomsShippingBillNumberTable_IN;
        customsShippingBillJour.ShippingBillDate    = this.updateDate();
        customsShippingBillJour.initFromSalesTable(SalesTable::find(salesParmTable.SalesId));
        customsShippingBillJour.initFromSalesParmTable(salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    protected void initSourceTable()
    {
        salesTable = salesParmTable.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    protected void initTotals()
    {
        salesTotals = SalesTotals::construct(salesParmTable, salesParmUpdate.SpecQty, salesParmUpdate.SumBy, salesParmUpdate.ParmId, salesParmUpdate.SumSalesId, documentStatus);
        salesTotals.prepareTotalAmountCalculation();
        salesTotals.prepareQuantitiesCalculation();
        salesTotals.fillRecordSortedListLine();
        recordListSalesParmLine    = salesTotals.recordSortedListLine();

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            ITaxableDocument taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(salesParmTable));
            ITaxDocument taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected tableId journalLineTableId()
    {
        return tablenum(CustomsShippingBillTrans_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    protected tableId linksTableId()
    {
        return tablenum(CustomsShippingBillSalesLink_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = salesParmUpdate)
    {
        salesParmUpdate = _parmUpdate as SalesParmUpdate;
        return salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordListParmLine()
    {
        return salesTotals.recordSortedListLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return customsExportOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected Object totals()
    {
        return salesTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    protected Common typeParmLine()
    {
        SalesParmLine   salesParmLine;
        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the date of the transaction.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TransDate</c> class.
    /// </returns>
    protected TransDate  updateDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEximEPCGExportsDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the exim EPCG export details information.
    /// </summary>
    void updateEximEPCGExportsDetails()
    {
        EximIncentiveSchemeData_IN          incentiveSchemeData;
        EximEPCGSchemeTable_IN              epcgSchemeTable;
        EximEPCGExportObligationPeriod_IN   epcgExportObligationPeriod;
        EximEPCGExportObligationDetails_IN  epcgExportObligationDetails;
        EximEPCGSchemeApprove_IN            epcgSchemeApproval;
        EximEPCGExportTrans_IN              epcgExportTrans;
        CustInvoiceTrans                    custInvoiceTrans;

        TransDateTime shippingBillDate = DateTimeUtil::newDateTime(customsShippingBillTrans.ShippingBillDate, 0, DateTimeUtil::getUserPreferredTimeZone());

        eximShippingBillTrans = EximShippingBillTrans_IN::findByShippingBillTransRecId(customsShippingBillTrans.RecId);

        ttsbegin;
        if (eximShippingBillTrans.EximIncentiveSchemeGroup)
        {
            while select AuthorizationId from incentiveSchemeData
                   where incentiveSchemeData.EximIncentiveSchemeGroup == eximShippingBillTrans.EximIncentiveSchemeGroup
                join RecId from epcgSchemeTable
                   where epcgSchemeTable.SchemeId == incentiveSchemeData.AuthorizationId
                      && epcgSchemeTable.IssueDateTime <= shippingBillDate
                      && !epcgSchemeTable.Closed
                join RecId from epcgSchemeApproval
                   where epcgSchemeApproval.SchemeTableRecId == epcgSchemeTable.RecId
                join RecId from epcgExportObligationPeriod
                   where epcgExportObligationPeriod.SchemeApproveRecId == epcgSchemeApproval.RecId
                join forupdate RecId from epcgExportObligationDetails
                   where epcgExportObligationDetails.ExportObligationPeriodRecId == epcgExportObligationPeriod.RecId
                      && epcgExportObligationDetails.FromDateTime <= shippingBillDate
                      && epcgExportObligationDetails.ToDateTime   >= shippingBillDate
            {
                select firstonly CurrencyCode from custInvoiceTrans
                    where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
                       && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
                       && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate;

                epcgExportTrans.LedgerVoucher                  = customsShippingBillTrans.LedgerVoucher;
                epcgExportTrans.ShippingBillDate               = customsShippingBillTrans.ShippingBillDate;
                epcgExportTrans.CustomsShippingBillTransRecId  = customsShippingBillTrans.RecId;
                epcgExportTrans.SchemeTableRecId               = epcgSchemeTable.RecId;
                epcgExportTrans.ExportValue                    = CurrencyHelper_IN::customsMSTAmount_IN(
                                                                       eximShippingBillTrans.AssessableValue,
                                                                       custInvoiceTrans.CurrencyCode,
                                                                       Direction_IN::Export,
                                                                       customsShippingBillTrans.ShippingBillDate);

                epcgExportTrans.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEximExportsDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates exim export details.
    /// </summary>
    public void updateEximExportsDetails()
    {
        EximIncentiveSchemeData_IN       incentiveSchemeData;
        EximIncentiveSchemeGroup_IN      incentiveSchemeGroup;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        EximAuthorizationSchemesLine_IN  authorizationSchemesLine;
        EximExportTrans_IN               exportTrans;
        CustInvoiceTrans                 custInvoiceTrans;

        if (eximShippingBillTrans.EximIncentiveSchemeGroup
            && (select inventItemSetupSupplyType
                where inventItemSetupSupplyType.ItemId           == salesLine.ItemId
                   && inventItemSetupSupplyType.ItemDataAreaId   == salesLine.DataAreaId
                   && inventItemSetupSupplyType.DefaultOrderType == ReqPOType::Production).RecId)

        {
            // for an item of type BOM find all authorizations applicable (AA / DFIA)
            // validate that the authorization is not expired
            // insert data into export details and export trans tables

            while select IncentiveScheme, AuthorizationId, EximIncentiveSchemeGroup, EximProductGroupTable
                from incentiveSchemeData
                     where incentiveSchemeData.EximIncentiveSchemeGroup    == eximShippingBillTrans.EximIncentiveSchemeGroup
                     && incentiveSchemeData.EximProductGroupTable          == eximShippingBillTrans.EximProductGroupTable
                join firstonly IncentiveSchemeGroup, EximPortId
                    from incentiveSchemeGroup
                        where incentiveSchemeGroup.RecId        == incentiveSchemeData.EximIncentiveSchemeGroup
                           && incentiveSchemeGroup.EximPortId   == eximShippingBillTrans.EximPorts
                    join firstonly RecId, AuthorizationType
                        from authorizationSchemesTable
                            where authorizationSchemesTable.AuthorizationType  == incentiveSchemeData.IncentiveScheme
                               && authorizationSchemesTable.AuthorizationId    == incentiveSchemeData.AuthorizationId
                               && authorizationSchemesTable.AuthorizationBasis != EximAuthorizationBasis_IN::Purchase
                               &&  authorizationSchemesTable.IssueDate         <= customsShippingBillTrans.ShippingBillDate
                               && !authorizationSchemesTable.Closed
            {
                if (SalesShippingBillJournalCreate_IN::canUpdateExportObligation(authorizationSchemesTable.AuthorizationType))
                {
                    // check for the maximum export expiry rate.  Cannot join max of clause in the above query.
                    select maxof(ExportExpiryDate)
                        from authorizationSchemesLine
                        where authorizationSchemesLine.AuthorizationSchemesTableRecId == authorizationSchemesTable.RecId
                           && authorizationSchemesLine.LicenseStatus                  != EximLicenseStatus_IN::Sold;

                    if (authorizationSchemesLine.ExportExpiryDate >= customsShippingBillTrans.ShippingBillDate)
                    {
                        EximExportDetails_IN::insertExportDetails(authorizationSchemesTable.RecId, customsShippingBillTrans.ItemId);

                        EximExportDetails_IN exportDetails = EximExportDetails_IN::findBySchemeRecIdItemId(authorizationSchemesTable.RecId, customsShippingBillTrans.ItemId);

                        select firstonly CurrencyCode from custInvoiceTrans
                            where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
                               && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
                               && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate;

                        exportTrans.clear();
                        exportTrans.ExportDetailsRecId             = exportDetails.RecId;
                        exportTrans.CustomsShippingBillTransRecId  = customsShippingBillTrans.RecId;
                        exportTrans.AuthorizationSchemesTableRecId = authorizationSchemesTable.RecId;
                        exportTrans.AssessableValue                = CurrencyHelper_IN::customsMSTAmount_IN(
                                                                               eximShippingBillTrans.AssessableValue,
                                                                               custInvoiceTrans.CurrencyCode,
                                                                               Direction_IN::Export,
                                                                               customsShippingBillTrans.ShippingBillDate);
                        exportTrans.insert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateExportObligation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the update export obligation.
    /// </summary>
    /// <param name="_eximAuthorizationType">
    /// The exim authorization type.
    /// </param>
    /// <returns>
    /// If 'True', the export obligation can be updated.
    /// </returns>
    public static boolean canUpdateExportObligation(EximAuthorizationType_IN _eximAuthorizationType)
    {
        boolean ret;

        if (_eximAuthorizationType == EximAuthorizationType_IN::AA)
        {
            ret = EximParameters_IN::checkAAParameters();
        }
        else if (_eximAuthorizationType == EximAuthorizationType_IN::DFIA)
        {
            ret = EximParameters_IN::checkDFIAParameters();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            throw error(strFmt("@SYS19306", funcName()));
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesShippingBillJournalCreate_IN construct()
    {
        return new SalesShippingBillJournalCreate_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCreate</Name>
				<Source><![CDATA[
    protected void endCreate()
    {
        super();
        
        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.transitDocument();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxBusinessService::transferTaxDocument(salesParmTable, customsShippingBillJour);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    // <GTE>
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(customsShippingBillJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    // </GTE>

    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        TransitDocumentManager_IN transitDocManager = TransitDocumentManager_IN::newManager();
        transitDocManager.transit(salesParmTable, customsShippingBillJour);

        CustomsShippingBillTrans_IN customsShippingBillTransLoc;
        SalesParmLine               salesParmLineLoc;

        while select customsShippingBillTransLoc
            where customsShippingBillTransLoc.SalesId                           == customsShippingBillJour.SalesId
                && customsShippingBillTransLoc.CustomsShippingBillNumberTable   == customsShippingBillJour.CustomsShippingBillNumberTable
                && customsShippingBillTransLoc.InvoiceId                        == customsShippingBillJour.InvoiceId
                && customsShippingBillTransLoc.InvoiceDate                      == customsShippingBillJour.InvoiceDate
                && customsShippingBillTransLoc.LedgerVoucher                    == customsShippingBillJour.LedgerVoucher
                && customsShippingBillTransLoc.ShippingBillDate                 == customsShippingBillJour.ShippingBillDate
            join salesParmLineLoc
                where salesParmLineLoc.InventTransId    == customsShippingBillTransLoc.InventTransId
                && salesParmLineLoc.ParmId              == salesParmTable.ParmId
                && salesParmLineLoc.TableRefId          == salesParmTable.TableRefId
        {
            transitDocManager.transit(salesParmLineLoc, customsShippingBillTransLoc, customsShippingBillJour);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>