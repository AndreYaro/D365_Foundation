<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmEmployeeEmploy</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmEmployeeEmploy extends RHRMEmploymentBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    public void cancel(RPayHistory _rPayHistory)
    {
        RPayHistory    rPayHistoryLast = RPayHistory::findLastOperation(_rPayHistory.Number,
                                                                        RHRMJournalType::Dismiss);

        if (rPayHistoryLast)
        {
            emplTable.PayResignedDate         = rPayHistoryLast.StartDate;
            rPayHistoryLast                   = RPayHistory::findLastOperation(_rPayHistory.Number,
                                                                               RHRMJournalType::Receive,
                                                                               _rPayHistory.StartDate);

            emplTable.PayEmploymentDate       = rPayHistoryLast.StartDate;
            emplTable.HcmTitle                = RPayHistory::findLastSignOnMove(_rPayHistory.Number,
                                                                                _rPayHistory.StartDate - 1).HcmTitle;
            emplTable.PayHRMOrganizationId    = RPayHistory::findLastSignOnMove(_rPayHistory.Number,
                                                                                _rPayHistory.StartDate - 1).HrmOrganizationId;
        }
        else
        {
            emplTable.HcmTitle                = 0;
            emplTable.PayHRMOrganizationId    = "";
            emplTable.PayEmploymentDate       = dateNull();
        }

        if (emplTable.validateWrite())
        {
            emplTable.update();
        }

        if (updateTbl)
        {
            this.updateTimesheetEmploy(_rPayHistory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMenuItemName</Name>
				<Source><![CDATA[
    protected IdentifierName formMenuItemName()
    {
        return menuitemDisplayStr(RHRMVirtualNetworkEmploy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationType</Name>
				<Source><![CDATA[
    public RHRMJournalType operationType()
    {
        return RHRMJournalType::Receive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    protected boolean prompt()
    {
        RPayHistory                  rPayHistory;
        Object                       formRun;
        IdentifierName               menuItemName;

        rPayHistory = RPayHistory::findLastOperation(emplTable.EmployeeId, RHRMJournalType::Dismiss);

        if (emplTable.PayEmploymentDate && ! emplTable.PayResignedDate)
            return checkFailed(strFmt("@RUP1616", emplTable.EmployeeId, emplTable.name()));

        if (isConfigurationkeyEnabled(configurationKeyNum(RHRM)))
        {
            menuItemName = this.formMenuItemName();
        }
        else
        {
            menuItemName = menuitemDisplayStr(RPayEmployMoveDismiss);
        }

        formRun = this.createForm(menuItemName, rPayHistory);

        return formRun.okPressed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(RPayHistory _rPayHistory)
    {
        emplTable.PayEmploymentDate       = _rPayHistory.StartDate;
        emplTable.PayResignedDate         = dateNull();
        emplTable.HcmTitle                = _rPayHistory.HcmTitle;
        emplTable.PayHRMOrganizationId    = _rPayHistory.HrmOrganizationId;

        if (emplTable.validateWrite())
        {
            emplTable.update();
        }

        if (updateTbl)
        {
            this.updateTimesheetEmploy(_rPayHistory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetEmploy</Name>
				<Source><![CDATA[
    private void updateTimesheetEmploy(RPayHistory _rPayHistory)
    {
        ReportPeriod_RU lastTimesheetDate;

        if (updateTbl)
        {
            lastTimesheetDate = RPayTblTrans::lastTimesheetPeriod(_rPayHistory.emplId(), _rPayHistory.StartDate);
            this.updateTimesheet(_rPayHistory.StartDate,
                                 max(dateEndMth(_rPayHistory.StartDate), lastTimesheetDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(RPayHistory _rPayHistory)
    {
        if (emplTable.PayEmploymentDate && ! emplTable.PayResignedDate)
            return checkFailed(strFmt("@RUP1616", emplTable.EmployeeId, emplTable.name()));

        return super(_rPayHistory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FormDataSource      formDataSource;
        RHRMEmployeeEmploy  rhrmEmployeeEmploy;
        int                 dataSourceNo;
        FormRun             fr;

        if (! _args)
            throw error("@RUP1336");

        if (! _args.record())
            throw error("@RUP1336");

        formDataSource      = FormDataUtil::getFormDataSource(_args.record());

        rhrmEmployeeEmploy   = new RHRMEmployeeEmploy(_args.record());
        if (rhrmEmployeeEmploy.prompt())
        {
            if (FormDataUtil::isFormDataSource(_args.record()))
            {
                fr = _args.caller();
                for (dataSourceNo = 1; dataSourceNo <= fr.dataSourceCount(); dataSourceNo++)
                {
                    formDataSource = fr.dataSource(dataSourceNo);
                    formDataSource.reread();
                    formDataSource.refresh();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>