<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkPeriodTemplateSimulate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WorkPeriodTemplateSimulate</c> class is used to simulate a period template by creating the periods as records in the temporary table <c>WorkPeriodTemplateTmpLine</c>.
/// </summary>
public class WorkPeriodTemplateSimulate implements WorkPeriodTemplateCalculable
{
    WorkPeriodTemplateTmpLine   workPeriodTemplateTmpLine;

    TransDate                   todayDate;
    WorkPeriodTemplate          workPeriodTemplate;
    ForwardBackward             direction;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a single temporary <c>WorkPeriodTemplateTmpLine</c> record which corresponds to one time
    ///    period.
    /// </summary>
    /// <param name="_fromDate">
    ///    A from date.
    /// </param>
    /// <param name="_toDate">
    ///    A to date.
    /// </param>
    /// <param name="_periodDescription">
    ///    A string that contains the description of the period.
    /// </param>
    /// <param name="_workDays">
    ///    An integer that contains the number of working days between the from date and the to date, both
    ///    days are inclusive.
    /// </param>
    public void addPeriod(
        TransDate                   _fromDate,
        TransDate                   _toDate,
        PeriodTemplateDescription   _periodDescription,
        PeriodTemplateOpenDays      _workDays)
    {
        workPeriodTemplateTmpLine.FromDate      = _fromDate;
        workPeriodTemplateTmpLine.ToDate        = _toDate;
        workPeriodTemplateTmpLine.Description   = _periodDescription;
        workPeriodTemplateTmpLine.OpenDays      = _workDays;

        workPeriodTemplateTmpLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates all periods defined by the period template.
    /// </summary>
    public void createPeriods()
    {
        WorkPeriodTemplateCalculate  workPeriodTemplateCalculate;

        workPeriodTemplateCalculate = WorkPeriodTemplateCalculate::newStandard(workPeriodTemplate.RecId,todayDate,direction);
        workPeriodTemplateCalculate.calcPeriods(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDirection</Name>
				<Source><![CDATA[
        public ForwardBackward parmDirection(ForwardBackward _direction = direction)
    {
        direction = _direction;
        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTodayDate</Name>
				<Source><![CDATA[
        public TransDate parmTodayDate(TransDate _todayDate = todayDate)
    {
        todayDate = _todayDate;
        return todayDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkPeriodTemplate</Name>
				<Source><![CDATA[
        public WorkPeriodTemplate parmWorkPeriodTemplate(WorkPeriodTemplate _workPeriodTemplate = workPeriodTemplate)
    {
        workPeriodTemplate = _workPeriodTemplate;
        return workPeriodTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workPeriodTemplateTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>workPeriodTemplateTmpLine</c> object which contains the created periods.
    /// </summary>
    /// <returns>
    ///    The handle to the <c>WorkPeriodTemplateTmpLine</c> table buffer which contains all created periods.
    /// </returns>
    public WorkPeriodTemplateTmpLine workPeriodTemplateTmpLine()
    {
        return workPeriodTemplateTmpLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWorkPeriodTemplateTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calulates the periods on the server and returns the result as temporary records.
    /// </summary>
    /// <param name="_workPeriodTemplateRecId">
    ///    An integer that contains the period template record ID.
    /// </param>
    /// <param name="_todayDate">
    ///    A date that contains today's date.
    /// </param>
    /// <param name="_direction">
    ///    A <c>ForwardBackward</c> enum value that defines the direction in which to calculate periods.
    /// </param>
    /// <returns>
    ///    The handle to the table buffer of type <c>WorkPeriodTemplateTmpLine</c> which contains all created
    ///    periods.
    /// </returns>
    public static WorkPeriodTemplateTmpLine calcWorkPeriodTemplateTmpLine(
        WorkPeriodTemplateRecId _workPeriodTemplateRecId,
        TransDate               _todayDate,
        ForwardBackward         _direction)
    {
        WorkPeriodTemplateSimulate  workPeriodTemplateSimulate;

        workPeriodTemplateSimulate = WorkPeriodTemplateSimulate::newStandard(_workPeriodTemplateRecId,_todayDate,_direction);
        workPeriodTemplateSimulate.createPeriods();

        return workPeriodTemplateSimulate.workPeriodTemplateTmpLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
        private static WorkPeriodTemplateSimulate contruct()
    {
        return new WorkPeriodTemplateSimulate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates an object of type <c>WorkPeriodTemplateSimulate</c>.
    /// </summary>
    /// <param name="_workPeriodTemplateRecId">
    ///    An integer that contains the period template record ID.
    /// </param>
    /// <param name="_todayDate">
    ///    A date that contains today's date.
    /// </param>
    /// <param name="_direction">
    ///    A <c>ForwardBackward</c> enum value that defines the direction in which to calculate periods.
    /// </param>
    /// <returns>
    ///    A <c>WorkPeriodTemplateSimulate</c> object.
    /// </returns>
    public static WorkPeriodTemplateSimulate newStandard(
        recId               _workPeriodTemplateRecId,
        TransDate           _todayDate,
        ForwardBackward     _direction)
    {
        WorkPeriodTemplateSimulate  workPeriodTemplateSimulate;

        workPeriodTemplateSimulate = WorkPeriodTemplateSimulate::contruct();
        workPeriodTemplateSimulate.parmTodayDate(_todayDate);
        workPeriodTemplateSimulate.parmWorkPeriodTemplate(WorkPeriodTemplate::find(_workPeriodTemplateRecId));
        workPeriodTemplateSimulate.parmDirection(_direction);

        return workPeriodTemplateSimulate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>