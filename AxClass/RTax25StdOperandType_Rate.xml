<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25StdOperandType_Rate</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25StdOperandType_Rate extends RTax25StdOperandType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupFrom</Name>
				<Source><![CDATA[
        public void lookupFrom()
    {
    //    controlRefIdFrom.performTypeLookup(extendedTypeNum(RTax25StdRateId));

        //QueryBuildDataSource    qbds;
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(RTax25StdRateTable), controlRefIdFrom);
        Query                   query          = new Query();

        query.addDataSource(tableNum(RTax25StdRateTable));

        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(RTax25StdRateTable, RateId));
        sysTableLookup.addLookupfield(fieldNum(RTax25StdRateTable, Description));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operand</Name>
				<Source><![CDATA[
        public AmountMST operand()
    {
        RTax25StdExpressionLine prevLine;

        select firstonly LineNum from prevLine
            order by LineNum desc
            where prevLine.SeqNum            == expressionLine.SeqNum
               && prevLine.rTax25ProfitTable == expressionLine.rTax25ProfitTable
               && prevLine.LineNum           <  expressionLine.LineNum;

        return RTax25StdRateTable::findValue(RTax25StdRateTable::findByRateId(expressionLine.RefIdFrom).RecId,
                                             dateTo,
                                             expression.result(prevLine.LineNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resultBased</Name>
				<Source><![CDATA[
        public boolean resultBased()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
        public void updateDesign()
    {
        controlRefIdFrom.enabled(true);
        controlRefIdTo.enabled(false);

        controlRefIdFrom.lookupButton(FormLookupButton::Always);
        controlRefIdTo.lookupButton(FormLookupButton::Never);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret = super();

        ret = RTax25StdRateTable::checkExist(RTax25StdRateTable::findByRateId(expressionLine.RefIdFrom).RecId) && ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>