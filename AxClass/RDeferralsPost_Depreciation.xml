<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsPost_Depreciation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rDeferralsPost_Depreciation extends RDeferralsPost
{
    RDeferralsTransDate lastDeferralsDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    public RDeferralsTrans initFromLedgerJournalTrans()
    {
        RDeferralsTrans rDeferralsTrans;

        rDeferralsTrans = super();
        rDeferralsTrans.Amount          = ledgerJournalTrans.amount();
        rDeferralsTrans.DeferralsPeriod = ledgerJournalTrans_RDeferrals.Period;
        rDeferralsTrans.StornoRecId     = ledgerJournalTrans_RDeferrals.ToFromRecId;

        return rDeferralsTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        RDeferralsTrans correctTrans,
                        correctedTrans;

        if (! ledgerJournalTrans_RDeferrals.ToFromRecId)
        {
            lastDeferralsDate = ledgerJournalTrans_RDeferrals.Period;
            return;
        }

        select firstonly correctTrans
            where correctTrans.StornoRecId == ledgerJournalTrans_RDeferrals.ToFromRecId;

        select firstonly forupdate correctedTrans
            where correctedTrans.RecId == ledgerJournalTrans_RDeferrals.ToFromRecId;

        correctedTrans.StornoRecId = correctTrans.RecId;
        correctedTrans.doUpdate();

        select firstonly correctTrans
            order by DeferralsPeriod desc
            where correctTrans.DeferralsId     == correctedTrans.DeferralsId     &&
                  correctTrans.DeferralsBookId == correctedTrans.DeferralsBookId &&
                  correctTrans.DeferralsPeriod <= correctedTrans.DeferralsPeriod &&
                  ! correctTrans.StornoRecId;

        lastDeferralsDate = correctTrans.DeferralsPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        RDeferralsAmount  netBookValue;
        RDeferralsSumCalc deferralsSumTrans;

        if (! rDeferralsBook)
        {
            rDeferralsBook = RDeferralsBook::find(ledgerJournalTrans_RDeferrals.DeferralsId, ledgerJournalTrans_RDeferrals.BookId, true);
        }

        rDeferralsBook.LastDeferralsDate  = lastDeferralsDate;

        deferralsSumTrans = RDeferralsSumCalc_Trans::newDeferralsPeriod(rDeferralsBook.DeferralsId,
                                                                        rDeferralsBook.DeferralsBookId,
                                                                        transDate);
        netBookValue     = deferralsSumTrans.netBookValue();

        if (netBookValue <= RDeferralsProfile::find(rDeferralsBook.DeferralsProfile).RoundOffOperation)
        {
            rDeferralsBook.Status = RDeferralsStatus::Closed;
        }
        else
        {
            rDeferralsBook.Status = RDeferralsStatus::Open;
        }

        rDeferralsBook.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    protected void createTransLink(RDeferralsTrans _rDeferralsTrans)
    {
        if (correct || _rDeferralsTrans.StornoRecId)
        {
            correct = true;

            super(_rDeferralsTrans);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>