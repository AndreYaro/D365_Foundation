<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_TransferScrap</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_TransferScrap</c> class is used together with the inventory transfer orders to
///    create or update the scrap transactions.
/// </summary>
class InventMov_TransferScrap extends InventMovement
{
    InventTransferLine          inventTransferLine;

    InventDimId                 inventDimId;
    InventQty                   transQty;
    PdsCWInventQty              cwTransQty;
    PdsCWInventQty              cwRemainPhysical;
    TransDate                   transDate;
    DimensionDefault            dimension;
    LedgerDimensionDefaultAccount               accountBalanceSheet;
    LedgerDimensionDefaultAccount               accountOperations;
    LedgerPostingType           postingOperations;
    LedgerPostingType           postingBalanceSheet;
    InventQty                   remainPhysical;
    UnknownNoYes                correctionSwapOnItem;
    boolean                     matchScrapDimFully;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        return this.parmAccountBalanceSheet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        return this.parmAccountOperations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    public void  addRemainPhysical(InventQty  _inventQty)
    {
        remainPhysical += _inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionSwapOnItem_RU</Name>
				<Source><![CDATA[
    protected boolean correctionSwapOnItem_RU(Amount _amount)
    {
        switch (correctionSwapOnItem)
        {
            case UnknownNoYes::Yes:
                return true;
            case UnknownNoYes::No:
                return false;
        }

        return super(_amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && inventTransferLine.RecId)
        {
            InventTransOriginTransferScrap::writeOriginOwnerRelationship(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return dimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (inventTransferLine.RecId)
        {
            InventTransOriginTransferScrap::deleteOwnerRelationship(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialUpdateReceiptQty_IN</Name>
				<Source><![CDATA[
    public container financialUpdateReceiptQty_IN(InventTrans _inventTrans)
    {
        InventQty               qty;
        InventQty               cwQty;
        InventTransferParmLine  inventTransferParmLine;
        InventTransferParmTable inventTransferParmTable;

        if (inventTransferLine.checkForUnitID_IN())
        {
            select firstonly ParmId, QtyShipNow, QtyReceiveNow, PdsCWQtyShipNow, PdsCWQtyReceiveNow
                from inventTransferParmLine
                where inventTransferParmLine.ParmId == this.parmInventParmID_IN()
                join UpdateType from inventTransferParmTable
                    where inventTransferParmTable.ParmId == inventTransferParmLine.ParmId;

            qty = inventTransferParmLine.qtyNowByUpdateType(inventTransferParmTable.UpdateType);
            cwQty = inventTransferParmLine.pdsCWQtyNowByUpdateType(inventTransferParmTable.UpdateType);
        }
        else
        {
            return super(_inventTrans);
        }

        return [qty, cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return this.parmInventDimId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginTransferScrap::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId itemId()
    {
        return inventTransferLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the physical inventory is to be posted to the ledger
    /// </summary>
    /// <returns>
    ///    true if posting the physical inventory to the ledger; otherwise, false
    /// </returns>
    public boolean  mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBePicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transactions for transfer scrapping cannot be picked, so don't require this.
    /// </summary>
    /// <returns>
    ///    false.
    /// </returns>

    public boolean mustBePicked()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_TransferScrap</c> class.
    /// </summary>
    /// <param name="_inventTransferLine">
    ///    The inventory transfer order line that the movement should be created for.
    /// </param>
    protected void new(InventTransferLine _inventTransferLine)
    {
        inventTransferLine = _inventTransferLine;

        super(_inventTransferLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a null value because no original movement can be created for transfer order scrap
    ///    transactions.
    /// </summary>
    /// <returns>
    ///    A null value.
    /// </returns>
    public InventMovement newMovement_Orig()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmAccountBalanceSheet(LedgerDimensionDefaultAccount _accountBalanceSheet = accountBalanceSheet)
    {
        accountBalanceSheet = _accountBalanceSheet;
        return accountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmAccountOperations(LedgerDimensionDefaultAccount _accountOperations = accountOperations)
    {
        accountOperations = _accountOperations;
        return accountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionSwapOnItem_RU</Name>
				<Source><![CDATA[
    public UnknownNoYes parmCorrectionSwapOnItem_RU(UnknownNoYes _correctionSwapOnItem = correctionSwapOnItem)
    {
        correctionSwapOnItem = _correctionSwapOnItem;
        return correctionSwapOnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault parmDefaultDimension(DimensionDefault _dimension = dimension)
    {
        dimension = _dimension;
        return dimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType parmPostingBalanceSheet(LedgerPostingType _postingBalanceSheet = postingBalanceSheet)
    {
        postingBalanceSheet = _postingBalanceSheet;
        return postingBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType parmPostingOperations(LedgerPostingType _postingOperations = postingOperations)
    {
        postingOperations = _postingOperations;
        return postingOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransQty</Name>
				<Source><![CDATA[
    public InventQty parmTransQty(InventQty _transQty = transQty)
    {
        transQty = _transQty;
        return transQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a catch weight quantity value to the catch weight remain physical.
    /// </summary>
    /// <param name="_qty">
    /// The catch weight quantity to add.
    /// </param>
    public void pdsCWAddRemainPhysical(PdsCWInventQty _qty)
    {
        cwRemainPhysical += _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight remain physical that is associated with the movement.
    /// </summary>
    /// <returns>
    /// The catch weight remain physical quantity.
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        return cwRemainPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catch weight remain physical quantity for the movement.
    /// </summary>
    /// <param name="_qty">
    /// The catch weight quantity to set.
    /// </param>
    public void pdsCWSetRemainPhysical(PdsCWInventQty _qty)
    {
        cwRemainPhysical = _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transaction catch weight quantity.
    /// </summary>
    /// <param name="_pdsCWQtyInvent">
    /// The catch weight quantity to set.
    /// </param>
    public void pdsCWSetTransQty(PdsCWInventQty _pdsCWQtyInvent)
    {
         cwTransQty  = _pdsCWQtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction catch weight quantity.
    /// </summary>
    /// <returns>
    /// The catch weight transaction quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        return cwTransQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the catch weight unit.
    /// </summary>
    /// <returns>
    /// A unit of measure symbol.
    /// </returns>
    public PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(inventTransferLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalUpdateIssueRemainQty_IN</Name>
				<Source><![CDATA[
    public container physicalUpdateIssueRemainQty_IN(InventTrans _inventTrans)
    {
        InventQty               qty;
        InventQty               cwQty;
        InventTransferParmLine  inventTransferParmLine;
        InventTransferParmTable inventTransferParmTable;

        if (inventTransferLine.checkForUnitID_IN())
        {
            select firstonly ParmId, QtyShipNow, QtyReceiveNow, PdsCWQtyShipNow, PdsCWQtyReceiveNow
                from inventTransferParmLine
                where inventTransferParmLine.ParmId == this.parmInventParmID_IN()
                join UpdateType from inventTransferParmTable
                    where inventTransferParmTable.ParmId == inventTransferParmLine.ParmId;

            qty = inventTransferParmLine.qtyNowByUpdateType(inventTransferParmTable.UpdateType);
            cwQty = inventTransferParmLine.pdsCWQtyNowByUpdateType(inventTransferParmTable.UpdateType);
        }
        else
        {
            return super(_inventTrans);
        }

        return [qty, cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalUpdateReceiptRemainQty_IN</Name>
				<Source><![CDATA[
    public container physicalUpdateReceiptRemainQty_IN(InventTrans _inventTrans)
    {
        InventQty               qty;
        InventQty               cwQty;
        InventTransferParmLine  inventTransferParmLine;
        InventTransferParmTable inventTransferParmTable;

        if (inventTransferLine.checkForUnitID_IN())
        {
            select firstonly ParmId, QtyShipNow, QtyReceiveNow, PdsCWQtyShipNow, PdsCWQtyReceiveNow
                from inventTransferParmLine
                where inventTransferParmLine.ParmId == this.parmInventParmID_IN()
                join UpdateType from inventTransferParmTable
                    where inventTransferParmTable.ParmId == inventTransferParmLine.ParmId;

            qty = inventTransferParmLine.qtyNowByUpdateType(inventTransferParmTable.UpdateType);
            cwQty = inventTransferParmLine.pdsCWQtyNowByUpdateType(inventTransferParmTable.UpdateType);

            if (inventTransferParmTable.UpdateType == InventTransferUpdateType::Receive)
            {
                qty = -qty;
                cwQty = -cwQty;
            }
        }
        else
        {
            return super(_inventTrans);
        }

        return [qty, cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType postingBalanceSheet()
    {
        return this.parmPostingBalanceSheet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        return this.parmPostingOperations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty   remainPhysical()
    {
        return remainPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnedSpecialCheckUpdate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the special check is required for returned inventory item.
    /// </summary>
    /// <param name="_returnedSpecialCheckUpdate">
    ///     The special check value.
    /// </param>
    /// <returns>
    ///     An enumeration value that specifies whether the special check is required for returned inventory item.
    /// </returns>
    public UnknownNoYes returnedSpecialCheckUpdate_RU(UnknownNoYes _returnedSpecialCheckUpdate = returnedSpecialCheckUpdate)
    {
        returnedSpecialCheckUpdate = _returnedSpecialCheckUpdate;
        return returnedSpecialCheckUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        this.parmInventDimId(_dimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
    public void setRemainPhysical(InventQty  _inventQty)
    {
        remainPhysical = _inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty  _qtyInvent)
    {
        this.parmTransQty(_qtyInvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return this.parmTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return inventTransferLine.InventTransIdScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty  transQty()
    {
        return this.parmTransQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    public InventTransRefId transRefId()
    {
        return inventTransferLine.TransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::TransferOrderScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_TransferScrap</c> class.
    /// </summary>
    /// <param name="_inventTransferLine">
    ///    The inventory transfer order line that the movement should be created for.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>InventMov_TransferScrap</c> class.
    /// </returns>
    public static InventMov_TransferScrap construct(InventTransferLine      _inventTransferLine)
    {
        return new InventMov_TransferScrap(_inventTransferLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_TransferScrap</c> class.
    /// </summary>
    /// <param name="_inventTransferLine">
    ///    The inventory transfer order line that the movement should be created for.
    /// </param>
    /// <param name="_inventTransReceipt">
    ///    The related receipt inventory transaction.
    /// </param>
    /// <param name="_inventTransferParmTable">
    ///    The updated parameters of the inventory transfer order.
    ///</param>
    ///<param name="_isReturn">
    /// True if return.
    ///</param>
    ///<param name="_isStorno">
    /// True if storno.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>InventMov_TransferScrap</c> class.
    /// </returns>
    public static InventMov_TransferScrap newParameters(
        InventTransferLine          _inventTransferLine,
        InventTrans                 _inventTransReceipt,
        InventTransferParmTable     _inventTransferParmTable,
        boolean                     _isReturn = false,
        boolean                     _isStorno = false)
    {
        // <GEERU>
        InventMov_Transfer          movement_transferFrom;
        // </GEERU>
        InventMov_TransferScrap     movement_transferScrap = InventMov_TransferScrap::construct(_inventTransferLine);

        movement_transferScrap.pdsCWSetTransQty(-_inventTransReceipt.PdsCWQty);
        movement_transferScrap.parmTransQty(-_inventTransReceipt.Qty);
        movement_transferScrap.parmTransDate(_inventTransferParmTable.TransDate);
        movement_transferScrap.parmInventDimId(_inventTransReceipt.InventDimId);
        // InventDim of transfer scrap comes from receipt transaction, marking should keep consistent for all dimensions.
        movement_transferScrap.parmMatchScrapDimFully(_inventTransReceipt.RecId != 0);

        if (InventTransferLine::enableDefaultDimensionControl())
        {
            if (_isReturn)
            {
                movement_transferScrap.parmDefaultDimension(_inventTransferLine.DimensionDefaultShipFrom);
            }
            else
            {
                movement_transferScrap.parmDefaultDimension(_inventTransferLine.DimensionDefaultShipTo);
            }
        }
        else
        {
            movement_transferScrap.parmDefaultDimension(InventSite::changeDimension(
                InventTable::find(_inventTransferLine.ItemId).DefaultDimension, _inventTransReceipt.inventDim().InventSiteId));
        }

        // <GEERU> return
        if (!_isReturn || _isStorno)
        {
            movement_transferFrom = InventMovement::construct(_inventTransferLine);
        }
        else
        {
            movement_transferFrom = InventMovement::construct(_inventTransferLine, InventMovSubType::TransferOrderTo);
        }
        // </GEERU>
        movement_transferScrap.parmAccountBalanceSheet(movement_transferFrom.accountBalanceSheet());
        movement_transferScrap.parmPostingBalanceSheet(movement_transferFrom.postingBalanceSheet());
        // <GEERU> return
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            if (_isReturn)
            {
                movement_transferScrap.returnedSpecialCheckUpdate_RU(UnknownNoYes::Yes);
                movement_transferScrap.parmCorrectionSwapOnItem_RU(UnknownNoYes::No);
                movement_transferScrap.parmStorno_RU(_isStorno);

                if (_isStorno) //storno
                {
                    movement_transferScrap.parmAccountOperations(
                        InventPosting::itemLedgerDimensionFromParameter(movement_transferScrap.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss)));
                    movement_transferScrap.parmPostingOperations(LedgerPostingType::InventLoss);
                }
                else
                {
                    movement_transferScrap.parmAccountOperations(
                        InventPosting::itemLedgerDimensionFromParameter(movement_transferScrap.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventProfit)));
                    movement_transferScrap.parmPostingOperations(LedgerPostingType::InventProfit);
                }
            }
            else
            {
                movement_transferScrap.parmAccountOperations(
                    InventPosting::itemLedgerDimensionFromParameter(movement_transferScrap.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss)));
                movement_transferScrap.parmPostingOperations(LedgerPostingType::InventLoss);
            }
        }
        else
        {
        // </GEERU>
            movement_transferScrap.parmAccountOperations(
                InventPosting::itemLedgerDimensionFromParameter(movement_transferScrap.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss)));
            movement_transferScrap.parmPostingOperations(LedgerPostingType::InventLoss);
        // <GEERU>
        }
        // </GEERU>

        return movement_transferScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    ///    zero if the whole movement is not marked; otherwise, the ID of the transaction origin.
    /// </returns>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        return InventTransOrigin::findByInventTransId(inventTransferLine.InventTransIdReceive).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchScrapDimFully</Name>
				<Source><![CDATA[
    public boolean parmMatchScrapDimFully(boolean _matchScrapDimFully = matchScrapDimFully)
    {
        matchScrapDimFully = _matchScrapDimFully;
        return matchScrapDimFully;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingPreferPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///  A flag to identify if the marking prefers physical updated transactions.
    /// </summary>
    /// <returns>
    ///  true because transfer scrap should be against received transactions.
    /// </returns>
    public boolean markingPreferPhysical()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingInventDimParmFixed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills an <c>InventDimParm</c> buffer with values that specify which dimensions are fixed when
    /// marking is applied.
    /// </summary>
    /// <returns>
    /// The <c>InventDimParm</c> buffer.
    /// </returns>
    public InventDimParm markingInventDimParmFixed()
    {
        InventDimParm   inventDimParmMovement;

        if (!markingInventDimParmFixedCached)
        {
            if (matchScrapDimFully)
            {
                markingInventDimParmFixed.initFromInventDim(this.inventdim());
            }
            else
            {
                markingInventDimParmFixed = super();
            }

            markingInventDimParmFixedCached = true;
        }

        return markingInventDimParmFixed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>