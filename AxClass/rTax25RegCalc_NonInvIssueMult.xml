<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_NonInvIssueMult</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_NonInvIssueMult extends RTax25RegCalc_LedgerMultiply implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBody</Name>
				<Source><![CDATA[
    protected void createBody()
    {
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_RAsset   ledgerJournalTrans_RAsset;
        AmountMST                   advanceAdjAmount;
        AmountMST                   markupAdjAmount;
    
        RAssetTransReportingView    rAssetTransStorno;
        RTax25PeriodIterator        periodIterator = rTax25PeriodIterator.clone();
    
    
        if (stdDocuments.amount())
        {
            if (stdDocuments.tableId() == tableNum(LedgerJournalTrans))
            {
                ledgerJournalTrans        = LedgerJournalTrans::findRecId(stdDocuments.recId(), false);
                ledgerJournalTrans_RAsset = LedgerJournalTrans_RAsset::find(ledgerJournalTrans.RecId);
    
                if (ledgerJournalTrans.AccountType == LedgerJournalACType::FixedAssets_RU &&
                    ! ledgerJournalTrans_RAsset.CanDisposal)
                    return;
    
                if (ledgerJournalTrans.TransDate >= dateFrom &&
                    ledgerJournalTrans.TransDate <= dateTo)
                {
                    select firstonly AccountingDate, ReportingDate, RecId from rAssetTransStorno
                        where rAssetTransStorno.RecId == ledgerJournalTrans_RAsset.StornoRecId;
    
                    if (rAssetTransStorno.RecId)
                    {
                        periodIterator.first();
    
                        do
                        {
                            if (rAssetTransStorno.ReportingDate  >= periodIterator.fromDateReporting()  &&
                                rAssetTransStorno.ReportingDate  <= periodIterator.toDateReporting()    &&
                                rAssetTransStorno.AccountingDate >= periodIterator.fromDateAccounting() &&
                                rAssetTransStorno.AccountingDate <= periodIterator.toDateAccounting())
                            {
                                return;
                            }
                        }
                        while (periodIterator.next());
    
                    }
    
                    return;
                }
            }
    
            [advanceAdjAmount, markupAdjAmount] = this.getAdvanceAdjAmount();
    
            regQuery.addBodyRecord(stdDocuments.profitTableRecId(),
                                   [(stdDocuments.transDate() < dateFrom && ledgerJournalTrans_RAsset.StornoRecId) ?
                                    RAssetTrans::find(ledgerJournalTrans_RAsset.StornoRecId).TransDate : stdDocuments.transDate(),
                                    stdDocuments.paymModeName() ? stdDocuments.paymModeName() : stdDocuments.paymMode(),
                                    RTax25ProfitTable::find(stdDocuments.profitTableRecId()).Description,
                                    stdDocuments.docName() ? stdDocuments.docName() : stdDocuments.txt(),
                                    stdDocuments.assetId() ? stdDocuments.assetId() :
                                    (stdDocuments.itemName() ? stdDocuments.itemName()  : stdDocuments.txt()),
                                    stdDocuments.transDate() < dateFrom ? -stdDocuments.qty() : stdDocuments.qty(),
                                    stdDocuments.transDate() < dateFrom ? -(stdDocuments.amount() + advanceAdjAmount) : (stdDocuments.amount() + advanceAdjAmount),
                                    stdDocuments.assetId(),
                                    stdDocuments.markupAmount() - markupAdjAmount],
                                   stdDocuments.tableId(),
                                   stdDocuments.recId(),
                                   RTax25RegisterProfit::find(registerId, stdDocuments.profitTableRecId()).PaymentCondition,
                                   -startCount);
            startCount++;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>footerContainer</Name>
				<Source><![CDATA[
    protected container footerContainer()
    {
        return [dateNull(),"","","","", lastProfitTableRecId ? profitQty : totalQty, lastProfitTableRecId ? profitAmount : totalAmount,"",0.0];
    }
]]></Source>
			</Method>
			<Method>
				<Name>initRunItem</Name>
				<Source><![CDATA[
    protected boolean initRunItem()
    {
        boolean ret;
    
        ret      = super();
        linesSet = new Set(Types::Container);
    
        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected void totals(RTax25RegisterTransMap _trans)
    {
        RTax25RegisterTrans_NonInventIssue trans = _trans;
        totalAmount     +=  trans.Amount;
        profitAmount    +=  trans.Amount;
        totalQty        +=  trans.Quantity;
        profitQty       +=  trans.Quantity;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>