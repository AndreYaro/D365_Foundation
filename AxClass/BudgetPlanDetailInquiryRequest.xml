<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanDetailInquiryRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Gathers information required to display budget plan record details.
/// </summary>
public class BudgetPlanDetailInquiryRequest extends BudgetPlanInquiryRequest
{
    DimensionFocusNameTmp   dimensionFocusNameValueTmp;
    DimensionFocusNameTmp   dimensionFocusNameDescriptionTmp;
    Name                    dimensionFocusName;
    Name                    selectedDimensionFocusName;
    FormControl             previouslyEnabledFormControl;
    BudgetClass             budgetClass;
    boolean                 isCalledByAmountControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDimensionFocusName</Name>
				<Source><![CDATA[
    public Name parmDimensionFocusName(Name _dimensionFocusName = dimensionFocusName)
    {
        dimensionFocusName = _dimensionFocusName;

        return dimensionFocusName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetClass</Name>
				<Source><![CDATA[
    public BudgetClass parmBudgetClass(BudgetClass _budgetClass = budgetClass)
    {
        budgetClass = _budgetClass;

        return budgetClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCalledByAmountControl</Name>
				<Source><![CDATA[
    public boolean parmIsCalledByAmountControl(boolean _isCalledByAmountControl = isCalledByAmountControl)
    {
        isCalledByAmountControl = _isCalledByAmountControl;

        return isCalledByAmountControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showGroupByControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the grid control and hides previously visible control, based on the selection of "Group by" control in form.
    /// </summary>
    /// <param name="_formControl">
    /// The object of the form control.
    /// </param>
    public void showGroupByControl(FormControl _formControl)
    {
        if (_formControl)
        {
            _formControl.visible(true);
        }

        if (previouslyEnabledFormControl && _formControl != previouslyEnabledFormControl)
        {
            previouslyEnabledFormControl.visible(false);
        }

        previouslyEnabledFormControl = _formControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validateParameters()
    {
        boolean isValid = true;

        if (!this.parmDimensionFocusName())
        {
            // Dimension focus was not entered.
            isValid = checkFailed(strfmt("@SYS110217", "@SYS83218"));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupByToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the group by fields in the query.
    /// </summary>
    /// <param name="_query">
    /// The query for which to add the group by clause.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The group by field value was not expected.
    /// </exception>
    public void addGroupByToQuery(Query _query)
    {
        QueryBuildDataSource budgetPlanLineViewDataSource;
        QueryBuildDataSource budgetPlanHeaderDataSource;
        QueryBuildDataSource dimensionFocusNameTmpDataSource;
        QueryBuildDataSource dimensionFocusNameDescTmpDataSource;
        QueryBuildDataSource budgetPlanProposedAssetDataSource;
        QueryBuildDataSource budgetPlanProposedProjectDataSource;
        QueryBuildDataSource hcmPositionForecastDataSource;
        QueryBuildDataSource budgetPlanScenarioDataSource;

        _query.clearGroupBy();

        budgetPlanHeaderDataSource          = _query.dataSourceTable(tableNum(BudgetPlanHeader));
        budgetPlanLineViewDataSource        = _query.dataSourceTable(tableNum(BudgetPlanLineView));
        budgetPlanScenarioDataSource        = _query.dataSourceTable(tableNum(BudgetPlanScenario));
        dimensionFocusNameTmpDataSource     = _query.dataSourceTable(tableNum(DimensionFocusNameTmp), 1);
        dimensionFocusNameDescTmpDataSource = _query.dataSourceTable(tableNum(DimensionFocusNameTmp), 2);
        budgetPlanProposedAssetDataSource   = _query.dataSourceTable(tableNum(BudgetPlanProposedAsset));
        budgetPlanProposedProjectDataSource = _query.dataSourceTable(tableNum(BudgetPlanProposedProject));
        hcmPositionForecastDataSource       = _query.dataSourceTable(tableNum(HcmPositionForecast));

        budgetPlanHeaderDataSource.addGroupByField(fieldName2Id(tableNum(BudgetPlanHeader), fieldStr(BudgetPlanHeader, BudgetPlanningProcess)));
        budgetPlanLineViewDataSource.addGroupByField(fieldName2Id(tableNum(BudgetPlanLineView), fieldStr(BudgetPlanLineView, TransactionCurrencyCode)));
        budgetPlanScenarioDataSource.addGroupByField(fieldName2Id(tableNum(BudgetPlanScenario), fieldStr(BudgetPlanScenario, Name)));
        budgetPlanScenarioDataSource.addGroupByField(fieldName2Id(tableNum(BudgetPlanScenario), fieldStr(BudgetPlanScenario, RecId)));
        dimensionFocusNameTmpDataSource.addGroupByField(fieldName2Id(tableNum(DimensionFocusNameTmp), fieldStr(DimensionFocusNameTmp, FocusValue)));
        dimensionFocusNameDescTmpDataSource.addGroupByField(fieldName2Id(tableNum(DimensionFocusNameTmp), fieldStr(DimensionFocusNameTmp, FocusValue)));

        if (this.parmGroupByFieldName())
        {
            switch (this.parmGroupByFieldName())
            {
                case fieldStr(BudgetPlanLineView, ProposedAsset):
                    budgetPlanProposedAssetDataSource.addGroupByField(fieldName2Id(tableNum(BudgetPlanProposedAsset), fieldStr(BudgetPlanProposedAsset, Name)));
                    break;

                case fieldStr(BudgetPlanLineView, ProposedProject):
                    budgetPlanProposedProjectDataSource.addGroupByField(fieldName2Id(tableNum(BudgetPlanProposedProject), fieldStr(BudgetPlanProposedProject, Name)));
                    break;

                case fieldStr(BudgetPlanLineView, ForecastModelId):
                    budgetPlanLineViewDataSource.addGroupByField(fieldName2Id(tableNum(BudgetPlanLineView), fieldStr(BudgetPlanLineView, ForecastModelId)));
                    break;

                case fieldStr(BudgetPlanLineView, Position):
                    hcmPositionForecastDataSource.addGroupByField(fieldName2Id(tableNum(HcmPositionForecast), fieldStr(HcmPositionForecast, Position)));
                    break;

                case fieldStr(BudgetPlanLineView, Comment):
                case fieldStr(BudgetPlanLineView, AssetId):
                case fieldStr(BudgetPlanLineView, ProjectId):
                    budgetPlanLineViewDataSource.addGroupByField(fieldName2Id(tableNum(BudgetPlanLineView), this.parmGroupByFieldName()));
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>BudgetPlanLineView</c> record date query range to the specified query.
    /// </summary>
    /// <param name="_query">
    /// The query for which to add the range.
    /// </param>
    public void addLineRanges(Query _query)
    {
        QueryBuildDataSource budgetPlanLineViewDataSource, budgetPlanScenarioDataSource;

        budgetPlanLineViewDataSource = _query.dataSourceTable(tableNum(BudgetPlanLineView));

        if (budgetPlanLineViewDataSource)
        {
            budgetPlanLineViewDataSource.clearRange(fieldNum(BudgetPlanLineView, EffectiveDate));
            QueryBuildRange effectiveDateRange =  SysQuery::findOrCreateRange(budgetPlanLineViewDataSource, fieldNum(BudgetPlanLineView, EffectiveDate));
            effectiveDateRange.status(RangeStatus::Locked);

            if (this.parmStartDate() || this.parmEndDate())
            {
                effectiveDateRange.value(SysQuery::range(this.parmStartDate(), this.parmEndDate()));
            }
            else
            {
                effectiveDateRange.value(BudgetPlanningConstants::emptyString);
            }

            budgetPlanScenarioDataSource = _query.dataSourceTable(tableNum(BudgetPlanScenario));

            QueryBuildRange budgetPlanScenarioRange = SysQuery::findOrCreateRange(budgetPlanScenarioDataSource, fieldNum(BudgetPlanScenario, Name));
            budgetPlanScenarioRange.status(RangeStatus::Locked);

            if (this.parmBudgetPlanScenarioRecId())
            {
                budgetPlanScenarioRange.value(BudgetPlanScenario::find(this.parmBudgetPlanScenarioRecId()).Name);
            }
            else
            {
                budgetPlanScenarioRange.value(BudgetPlanningConstants::emptyString);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetClassRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the amount range based on the budget class to the specified query.
    /// </summary>
    /// <param name="_query">
    /// The query for which to add the range.
    /// </param>
    public void addBudgetClassRange(Query _query)
    {
        QueryBuildDataSource budgetPlanLineViewDataSource;

        budgetPlanLineViewDataSource = _query.dataSourceTable(tableNum(BudgetPlanLineView));

        if (budgetPlanLineViewDataSource)
        {
            QueryBuildRange transactionCurrencyAmountRange;

            if (this.parmBudgetClass() == budgetClass::Expense)
            {
                transactionCurrencyAmountRange = budgetPlanLineViewDataSource.addRange(fieldNum(BudgetPlanLineView, TransactionCurrencyExpenseAmount));
            }
            else
            {
                transactionCurrencyAmountRange = budgetPlanLineViewDataSource.addRange(fieldNum(BudgetPlanLineView, TransactionCurrencyRevenueAmount));
            }

            transactionCurrencyAmountRange.status(RangeStatus::Locked);
            transactionCurrencyAmountRange.value(strfmt("%1 0", BudgetPlanningConstants::notEqual));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQuantityRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the quantity range to the specified query.
    /// </summary>
    /// <param name="_query">
    /// The query for which to add the range.
    /// </param>
    public void addQuantityRange(Query _query)
    {
        QueryBuildDataSource budgetPlanLineViewDataSource;

        budgetPlanLineViewDataSource = _query.dataSourceTable(tableNum(BudgetPlanLineView));

        if (budgetPlanLineViewDataSource)
        {
            QueryBuildRange quantityRange;

            quantityRange = budgetPlanLineViewDataSource.addRange(fieldNum(BudgetPlanLineView, Quantity));

            quantityRange.value(strfmt("%1 0", BudgetPlanningConstants::notEqual));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesForPreviewPane</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the ranges to the specified query when the caller is preview pane.
    /// </summary>
    /// <param name="_query">
    /// The query for which to add the range.
    /// </param>
    public void addRangesForPreviewPane(Query _query)
    {
        if (this.parmIsCalledByAmountControl())
        {
            this.addBudgetClassRange(_query);
        }
        else
        {
            this.addQuantityRange(_query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensionFocusNameTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>DimensionFocusNameTmp</c> table with ledger dimension values from budget plan line entries.
    /// </summary>
    /// <returns>
    /// An instance of <c>DimensionFocusNameTmp</c> table.
    /// </returns>
    public DimensionFocusNameTmp populateDimensionFocusNameTmp()
    {
        boolean          isBudgetPlanHeaderSet;
        boolean          isBudgetPlanningProcessSet;
        boolean          isBudgetingOrganizationSet;
        boolean          isBudgetPlanScenarionSet;
        boolean          isStartDateSet;
        boolean          isEndDateSet;
        boolean          isFocusTempTableEmpty;
        TransDate        startDateValue;
        TransDate        endDateValue;

        if (selectedDimensionFocusName != this.parmDimensionFocusName())
        {
            // Clear the dimensionFocusNameTmp tables when dimension focus value is changed.
            delete_from dimensionFocusNameValueTmp;
            delete_from dimensionFocusNameDescriptionTmp;

            // Reset the selectedDimensionFocusName value.
            selectedDimensionFocusName = this.parmDimensionFocusName();
            isFocusTempTableEmpty = true;
        }

        if (this.parmStartDate())
        {
            isStartDateSet = true;

            startDateValue = this.parmStartDate();
        }

        if (this.parmEndDate())
        {
            isEndDateSet = true;

            endDateValue = this.parmEndDate();
        }

        if (this.parmBudgetPlanningProcessRecId())
        {
            isBudgetPlanningProcessSet = true;
        }

        if (this.parmBudgetingOrganizationRecId())
        {
            isBudgetingOrganizationSet = true;
        }

        if (this.parmBudgetPlanHeaderRecId())
        {
            isBudgetPlanHeaderSet = true;
        }

        if (this.parmBudgetPlanScenarioRecId())
        {
            isBudgetPlanScenarionSet = true;
        }

        Query budgetPlanQuery = new Query();

        QueryBuildDataSource budgetPlanHeaderDS = SysQuery::findOrCreateDataSource(budgetPlanQuery, tableNum(BudgetPlanHeader));

        if (isBudgetPlanningProcessSet)
        {
            SysQuery::findOrCreateRange(budgetPlanHeaderDS, fieldNum(BudgetPlanHeader, BudgetPlanningProcess)).value(SysQuery::value(this.parmBudgetPlanningProcessRecId()));
        }

        if (isBudgetingOrganizationSet)
        {
            SysQuery::findOrCreateRange(budgetPlanHeaderDS, fieldNum(BudgetPlanHeader, BudgetingOrganization)).value(SysQuery::value(this.parmBudgetingOrganizationRecId()));
        }

        if (isBudgetPlanHeaderSet)
        {
            SysQuery::findOrCreateRange(budgetPlanHeaderDS, fieldNum(BudgetPlanHeader, RecId)).value(SysQuery::value(this.parmBudgetPlanHeaderRecId()));
        }

        QueryBuildDataSource budgetPlanLineDS = SysQuery::findOrCreateDataSource(budgetPlanQuery, tableNum(BudgetPlanLine), tableNum(BudgetPlanHeader));
        budgetPlanLineDS.addLink(fieldNum(BudgetPlanHeader, RecId), fieldNum(BudgetPlanLine, BudgetPlanHeader));

        if (isStartDateSet || isEndDateSet)
        {
            SysQuery::findOrCreateRange(budgetPlanLineDS, fieldNum(BudgetPlanLine, EffectiveDate)).value(SysQuery::range(startDateValue, endDateValue));
        }

        if (isBudgetPlanScenarionSet)
        {
            SysQuery::findOrCreateRange(budgetPlanLineDS, fieldNum(BudgetPlanLine, BudgetPlanScenario)).value(SysQuery::range(null, this.parmBudgetPlanScenarioRecId()));
        }

        QueryBuildDataSource davcDS = SysQuery::findOrCreateDataSource(budgetPlanQuery, tableNum(DimensionAttributeValueCombination), tableNum(BudgetPlanLine));
        davcDS.addLink(fieldNum(BudgetPlanLine, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
        davcDS.fetchMode(QueryFetchMode::One2One);

        if (!isFocusTempTableEmpty)
        {
            QueryBuildDataSource focusNameTmpDS = SysQuery::findOrCreateDataSource(budgetPlanQuery, tableNum(DimensionFocusNameTmp), tableNum(BudgetPlanLine));
            focusNameTmpDS.joinMode(JoinMode::NoExistsJoin);
            focusNameTmpDS.fetchMode(QueryFetchMode::One2One);
            focusNameTmpDS.addLink(fieldNum(BudgetPlanLine, LedgerDimension), fieldNum(DimensionFocusNameTmp, LedgerDimension));

            // Associate the dimensionFocusNameValueTmp data source with the DimensionFocusNameTmp data source in budgetPlanQuery.
            // Note that this association is stored in the query, and not the QueryRun, so this impacts the
            // Query::insert_recordset call inside DimensionFocusNameTmp::generateFocusNames.
            QueryRun budgetPlanQueryRun = new QueryRun(budgetPlanQuery);
            budgetPlanQueryRun.setRecord(dimensionFocusNameValueTmp);
            budgetPlanQuery = budgetPlanQueryRun.query();
        }

        // Generate the FocusValues for the new LedgerDimensions into a new temp table instance.
        DimensionFocusNameTmp dimensionFocusNameTmpLocal;
        DimensionFocusNameTmp::generateFocusNames(dimensionFocusNameTmpLocal, budgetPlanQuery, this.parmDimensionFocusName());

        // Merge the new values into the original list of focus display values.
        // Insert the values using a new linked instance of the DimensionFocusNameTmp table
        // to prevent the data source association that would otherwise revert the operation to row-by-row.
        DimensionFocusNameTmp dimensionFocusNameValueTmpLocal;
        dimensionFocusNameValueTmpLocal.linkPhysicalTableInstance(dimensionFocusNameValueTmp);
        insert_recordset dimensionFocusNameValueTmpLocal
                  (LedgerDimension, FocusValue, DimValue1, DimValue2, DimValue3, DimValue4, DimValue5, DimValue6, DimValue7, DimValue8, DimValue9, DimValue10, DimValue11)
            select LedgerDimension, FocusValue, DimValue1, DimValue2, DimValue3, DimValue4, DimValue5, DimValue6, DimValue7, DimValue8, DimValue9, DimValue10, DimValue11
            from dimensionFocusNameTmpLocal;

        // Generate the description FocusValues for the new LedgerDimensions.
        DimensionFocusNameTmp::generateFocusDescriptions(
            dimensionFocusNameTmpLocal, this.parmDimensionFocusName(), new Connection());

        // Merge the new values into the original list of description focus display values.
        // Insert the values using a new linked instance of the DimensionFocusNameTmp table
        // to prevent the data source association that would otherwise revert the operation to row-by-row.
        DimensionFocusNameTmp dimensionFocusNameDescriptionTmpLocal;
        dimensionFocusNameDescriptionTmpLocal.linkPhysicalTableInstance(dimensionFocusNameDescriptionTmp);
        insert_recordset dimensionFocusNameDescriptionTmpLocal (LedgerDimension, FocusValue)
            select LedgerDimension, FocusValue
            from dimensionFocusNameTmpLocal;

        return dimensionFocusNameValueTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for reference field name.
    /// </summary>
    /// <param name="_formControl">
    /// The form control tied to the lookup.
    /// </param>
    /// <returns>
    /// The buffer of the <c>SysTableFieldLookup</c> table.
    /// </returns>
    public static SysTableFieldLookup lookupReferenceFieldName(FormControl _formControl)
    {
        SysTableFieldLookup sysTableFieldLookup;

        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(TmpSysTableField));
        queryBuildDataSource.addSortField(fieldNum(TmpSysTableField, FieldLabel));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TmpSysTableField), _formControl);
        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(TmpSysTableField, FieldLabel));
        sysTableLookup.addSelectionField(fieldNum(TmpSysTableField, FieldLabel));

        sysTableLookup.parmTmpBuffer(BudgetPlanDetailInquiryRequest::initFieldLookup());
        sysTableLookup.performFormLookup();

        return sysTableFieldLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values that will be used for the field reference lookup.
    /// </summary>
    /// <returns>
    /// A <c>TmpSysTableField</c> buffer holding the valid values that can be used in the lookup.
    /// </returns>
    static TmpSysTableField initFieldLookup()
    {
        TmpSysTableField tmpSysTableField;
        TableId          budgetPlanLineId = tableNum(BudgetPlanLine);

        // Inserting empty field in the table to give an option to user to clear the group by field.
        tmpSysTableField.FieldId = 0;
        tmpSysTableField.insert();

        tmpSysTableField.FieldId    = fieldNum(BudgetPlanLine, Comment);
        tmpSysTableField.FieldName  = fieldId2name(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.FieldLabel = fieldId2pname(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.insert();

        tmpSysTableField.FieldId    = fieldNum(BudgetPlanLine, AssetId);
        tmpSysTableField.FieldName  = fieldId2name(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.FieldLabel = fieldId2pname(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.insert();

        tmpSysTableField.FieldId    = fieldNum(BudgetPlanLine, ProjectId);
        tmpSysTableField.FieldName  = fieldId2name(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.FieldLabel = fieldId2pname(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.insert();

        tmpSysTableField.FieldId    = fieldNum(BudgetPlanLine, ProposedAsset);
        tmpSysTableField.FieldName  = fieldId2name(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.FieldLabel = fieldId2pname(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.insert();

        tmpSysTableField.FieldId    = fieldNum(BudgetPlanLine, ProposedProject);
        tmpSysTableField.FieldName  = fieldId2name(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.FieldLabel = fieldId2pname(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.insert();

        tmpSysTableField.FieldId    = fieldNum(BudgetPlanLine, Position);
        tmpSysTableField.FieldName  = fieldId2name(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.FieldLabel = fieldId2pname(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.insert();

        tmpSysTableField.FieldId    = fieldNum(BudgetPlanLine, ForecastModelId);
        tmpSysTableField.FieldName  = fieldId2name(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.FieldLabel = fieldId2pname(budgetPlanLineId, tmpSysTableField.FieldId);
        tmpSysTableField.insert();

        return tmpSysTableField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLabel2Name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the field name based on a field label for the <c>BudgetPlanLine</c> table fields.
    /// </summary>
    /// <param name='_fieldLabel'>
    /// The <c>FieldLabel</c> label of the field to find.
    /// </param>
    /// <returns>
    /// The <c>FieldName</c> of the field; otherwise, an empty string.
    /// </returns>
    public static FieldName fieldLabel2Name(FieldLabel _fieldLabel)
    {
        SysDictTable  dictTable;
        SetEnumerator fieldSetEnumerator;
        FieldName     fieldName;
        SysDictField  sysDictField;

        if (_fieldLabel)
        {
            dictTable = new SysDictTable(tableNum(BudgetPlanLine));

            fieldSetEnumerator = dictTable.fields().getEnumerator();

            while (fieldSetEnumerator.moveNext())
            {
                sysDictField = fieldSetEnumerator.current();

                if (sysDictField.label() == _fieldLabel)
                {
                    fieldName = sysDictField.name();
                    break;
                }
            }
        }

        return fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBudgetPlanLineHierarchyViewSummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields of the <c>BudgetPlanDetailInquiryRequest</c> instance using the <c>BudgetPlanLineHierarchyViewSummaryTmp</c> buffer.
    /// </summary>
    /// <param name="_budgetPlanLineHierarchyViewSummaryTmp">
    /// The buffer of the <c>BudgetPlanLineHierarchyViewSummaryTmp</c> table.
    /// </param>
    public void initFromBudgetPlanLineHierarchyViewSummaryTmp(BudgetPlanLineHierarchyViewSummaryTmp _budgetPlanLineHierarchyViewSummaryTmp)
    {
        BudgetPlanHeader   budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanLineHierarchyViewSummaryTmp.BudgetPlanHeader);
        BudgetPlanLayout   budgetPlanLayout;
        DimensionHierarchy dimensionHierarchy;

        select firstOnly Name from dimensionHierarchy
            exists join budgetPlanLayout
            where budgetPlanLayout.DimensionHierarchy == dimensionHierarchy.RecId
                && budgetPlanLayout.RecId == budgetPlanHeader.Layout;

        this.parmBudgetClass(_budgetPlanLineHierarchyViewSummaryTmp.BudgetClass);
        this.parmDimensionFocusName(dimensionHierarchy.Name);
        this.parmBudgetPlanScenarioRecId(_budgetPlanLineHierarchyViewSummaryTmp.BudgetPlanScenario);
        this.parmBudgetPlanHeaderRecId(budgetPlanHeader.RecId);
        this.parmBudgetingOrganizationRecId(budgetPlanHeader.BudgetingOrganization);
        this.parmBudgetPlanningProcessRecId(budgetPlanHeader.BudgetPlanningProcess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBudgetPlanOrganizationHierarchySummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields of the <c>BudgetPlanDetailInquiryRequest</c> instance using the <c>BudgetPlanOrganizationHierarchySummaryTmp</c> buffer.
    /// </summary>
    /// <param name="_budgetPlanOrganizationHierarchySummaryTmp">
    /// The buffer of the <c>BudgetPlanOrganizationHierarchySummaryTmp</c> table.
    /// </param>
    public void initFromBudgetPlanOrganizationHierarchySummaryTmp(BudgetPlanOrganizationHierarchySummaryTmp _budgetPlanOrganizationHierarchySummaryTmp)
    {
        this.parmBudgetClass(_budgetPlanOrganizationHierarchySummaryTmp.BudgetClass);
        this.parmBudgetPlanScenarioRecId(_budgetPlanOrganizationHierarchySummaryTmp.Scenario);

        DimensionHierarchy          dimensionHierarchy;
        BudgetPlanningConfiguration budgetPlanningConfiguration;

        select firstOnly Name from dimensionHierarchy
            exists join budgetPlanningConfiguration
            where budgetPlanningConfiguration.DimensionHierarchy == dimensionHierarchy.RecId;

        this.parmDimensionFocusName(dimensionHierarchy.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFocusNameDescriptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the populated <c>DimensionFocusNameTmp</c> table with ledger dimension names from budget transaction line entries.
    /// </summary>
    /// <returns>
    /// An instance of <c>DimensionFocusNameTmp</c> table.
    /// </returns>
    public DimensionFocusNameTmp getDimensionFocusNameDescriptionTmp()
    {
        return dimensionFocusNameDescriptionTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>