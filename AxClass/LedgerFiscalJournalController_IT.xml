<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFiscalJournalController_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>LedgerFiscalJournalController_IT</c> class is the controller class for <c>LedgerFiscalJournal_IT</c> SSRS report.
/// </summary>
class LedgerFiscalJournalController_IT extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoIT, GlobalizationConstants::FeatureReferenceIT00031] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the data from the last report and shows it in the dialog (page, line, debit and credit)
    /// </summary>
    public void prePromptModifyContract()
    {
        LedgerFiscalJournalContract_IT  contract = this.parmReportContract().parmRdpContract() as LedgerFiscalJournalContract_IT;
        container                       lastReportValuesCon;
        ;
        super();

        lastReportValuesCon = LedgerFiscalJournalController_IT::getLastReportValues(contract.parmFromDate());

        contract.parmLastPage(conPeek(lastReportValuesCon, 1));
        contract.parmLastsequenceNumber(conPeek(lastReportValuesCon, 2));
        contract.parmLastAmountCurDebit(conPeek(lastReportValuesCon, 3));
        contract.parmLastAmountCurCredit(conPeek(lastReportValuesCon, 4));

        contract.parmChangePageNumber(false);
        contract.parmChangeSequenceNumber(false);
        contract.parmChangeAmountCurDebit(false);
        contract.parmChangeAmountCurCredit(false);

        contract.parmChangelastPage(0);
        contract.parmChangeLastSequenceNumber(0);
        contract.parmChangeLastAmountCurDebit(0);
        contract.parmChangeLastAmountCurCredit(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContractReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the name for the report design to use. The logic is as follows:
    /// If the <c>LedgerFiscalJournalPerformanceImprovementFeature_IT is enabled, use the ReportV3, else if just page numbering, ReportV2</c>
    /// </summary>
    /// <returns>The report name to use </returns>
    protected SRSCatalogItemName getContractReportName()
    {
        var contractReportName = "";

        if (FeatureStateProvider::isFeatureEnabled(LedgerFiscalJournalNewPerformantDesignFeature_IT::instance()))
        {
            contractReportName = ssrsReportStr(LedgerFiscalJournal_IT, ReportV3);
        }
        else
        {
            contractReportName = ssrsReportStr(LedgerFiscalJournal_IT, ReportV2);
        }

        return contractReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        this.renderingCompleted += eventhandler(LedgerFiscalJournalController_IT::renderingComplete);
        this.parmReportContract().parmReportName(this.getContractReportName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runToScreen</Name>
				<Source><![CDATA[
    protected void runToScreen()
    {
        this.parmShowDialog(false);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastReportValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the saved values for Page, Seq, SumDebit, SumCredit from the last printed report.
    /// </summary>
    /// <param name="_fromDate">
    ///     Start date of the period of the report.
    /// </param>
    /// <returns>
    ///    A container with all found values for Page, Seq, SumDebit, SumCredit.
    /// </returns>
    static container getLastReportValues(FromDate   _fromDate)
    {
        LedgerReportJournal_IT  ledgerReportJournal_IT;
        date                    prevDate;
        RecId                   calendarRecId;
        FromDate                periodFromDate;
        FromDate                periodOpeningDate;

        calendarRecId       = CompanyInfoHelper::fiscalCalendarRecId();
        periodFromDate      = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId,_fromDate);
        periodOpeningDate   = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,periodFromDate);

        if (_fromDate == periodOpeningDate)
        {
            return [0,0,0,0];
        }
        else
        {
            ledgerReportJournal_IT = LedgerReportJournal_IT::findByPrintDate(_fromDate-1);

            if (!ledgerReportJournal_IT)
            {
                select maxof(PrintDate) from ledgerReportJournal_IT where
                    ledgerReportJournal_IT.PrintDate < (_fromDate - 1);

                prevDate = ledgerReportJournal_IT.PrintDate;

                if ((prevDate) &&
                    (FiscalCalendars::findLastDayofYear(CompanyInfoHelper::fiscalCalendarRecId(), _fromDate) == FiscalCalendars::findLastDayofYear(CompanyInfoHelper::fiscalCalendarRecId(), prevDate)))
                {
                    ledgerReportJournal_IT = LedgerReportJournal_IT::findByPrintDate(prevDate);
                }
            }

            return [ledgerReportJournal_IT.Page,
                    ledgerReportJournal_IT.SeqNum,
                    ledgerReportJournal_IT.SumDebit,
                    ledgerReportJournal_IT.SumCredit];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoIT, GlobalizationConstants::FeatureReferenceIT00011] ],
            funcName()
        );

        LedgerFiscalJournalController_IT    controller = new LedgerFiscalJournalController_IT();

        controller.parmReportName(ssrsReportStr(LedgerFiscalJournal_IT, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the report rendering complete event.
    /// </summary>
    /// <param name="_sender">
    /// The controller that raises the event.
    /// </param>
    /// <param name="_eventArgs">
    /// Arguments that provide details on the report rendered.
    /// </param>
    /// <remarks>
    /// Should be registered in <c>preRunModifyContract</c> method.
    /// </remarks>
    public static void renderingComplete(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        SRSReportExecutionInfo              executionInfo = _eventArgs.parmReportExecutionInfo();
        LedgerFiscalJournalContract_IT      contract;
        LedgerFiscalJournalController_IT    controller = _sender;
        LedgerReportJournal_IT              ledgerReportJournal, ledgerReportJournalPrev;

        if (executionInfo && executionInfo.parmIsSuccessful())
        {
            contract = controller.parmReportContract().parmRdpContract();

            ledgerReportJournal = LedgerReportJournal_IT::findByPrintDate(contract.parmToDate());

            if (ledgerReportJournal)
            {
                select firstonly Page, PrintDate from ledgerReportJournalPrev
                    order by PrintDate desc
                    where ledgerReportJournalPrev.PrintDate < ledgerReportJournal.PrintDate;

                if (FiscalCalendars::findLastDayofYear(CompanyInfoHelper::fiscalCalendarRecId(), ledgerReportJournal.PrintDate) ==
                    FiscalCalendars::findLastDayofYear(CompanyInfoHelper::fiscalCalendarRecId(), ledgerReportJournalPrev.PrintDate))
                {
                    ttsbegin;
                    ledgerReportJournal.selectForUpdate(true);
                    ledgerReportJournal.Page += ledgerReportJournalPrev.Page;
                    ledgerReportJournal.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        LedgerFiscalJournalContract_IT contract = this.getReportContract().parmRdpContract() as LedgerFiscalJournalContract_IT;

        using (LedgerFiscalJournalContext_IT context = new LedgerFiscalJournalContext_IT())
        {
            context.toDate = contract.parmToDate();
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>