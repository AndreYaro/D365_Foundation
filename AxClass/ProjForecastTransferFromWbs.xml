<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastTransferFromWbs</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjForecastTransferFromWbs</c> transfers WBS estimates to Project forecast.
/// </summary>
public class ProjForecastTransferFromWbs
{
    PSAActivityEstimates psaActivityEstimates;
    ProjForecastModelId  modelId;
    ProjId               projId;
    ProjTable            projTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteExistingForecastLines</Name>
				<Source><![CDATA[
    protected void deleteExistingForecastLines(PSAActivityEstimates _psaActivityEstimates)
    {
        ProjForecastEmpl     hourForecastTable;
        ProjForecastCost     costForecastTable;
        ProjForecastRevenue  revForecastTable;
        ForecastSales        forecastSales;

        switch (_psaActivityEstimates.ProjTransType)
        {
            case QuotationProjTransType::Hour:
                ttsbegin;
                delete_from hourForecastTable where
                    hourForecastTable.ActivityNumber == _psaActivityEstimates.ActivityNumber
                    && hourForecastTable.ModelId     == modelId;
                ttscommit;
                break;
            case QuotationProjTransType::Expense:
                ttsbegin;
                delete_from costForecastTable where
                    costForecastTable.ActivityNumber == _psaActivityEstimates.ActivityNumber
                    && costForecastTable.ModelId     == modelId;
                ttscommit;
                break;
            case QuotationProjTransType::Fee:
                ttsbegin;
                delete_from revForecastTable where
                    revForecastTable.ActivityNumber == _psaActivityEstimates.ActivityNumber
                    && revForecastTable.ModelId     == modelId;
                ttscommit;
                break;
            case QuotationProjTransType::Item:
                // Item forecast is using a different table that is not Project-specific
                ttsbegin;
                delete_from forecastSales where
                    forecastSales.ActivityNumber == _psaActivityEstimates.ActivityNumber
                    && forecastSales.ModelId     == modelId;
                ttscommit;
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ProjForecastTransferFromWbs</c> class and initializes several internal
    ///    variables.
    /// </summary>
    /// <param name="_buffer">
    ///     A record buffer that contains the <c>PSAActivityEstimates</c> table.
    /// </param>
    /// <param name="_projId">
    ///     The project ID to set.
    /// </param>
    /// <param name="_modelId">
    ///     The project forecast model ID.
    /// </param>
    public void new(PSAActivityEstimates _buffer, ProjId _projId, ProjForecastModelId _modelId)
    {
        psaActivityEstimates = _buffer;
        modelId = _modelId;
        projId = _projId;
        projTable = ProjTable::find(projId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Transfer selected WBS estimates to Project forecast tables
    /// </summary>
    public void transfer()
    {
        setPrefix(classStr(ProjForecastTransferFromWbs) + '-' +  methodStr(ProjForecastTransferFromWbs, transfer));

        try
        {
            ttsbegin;
            
            while select psaActivityEstimates
            {
                this.deleteExistingForecastLines(psaActivityEstimates);
            }

            while select psaActivityEstimates
            {
                this.transferToForecast(psaActivityEstimates);
            }

            ttscommit;
        }
        catch(Exception::Error)
        {
            ttsabort;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFromPsaActivityEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates an item (sales) forecast from a project item estimate.
    /// </summary>
    /// <param name = "_psaActivityEstimates">A <c>PSAActivityEstimates</c> record.</param>
    /// <returns>A <c>ForecastSales</c> record.</returns>
    protected ForecastSales populateFromPsaActivityEstimates(PSAActivityEstimates _psaActivityEstimates)
    {
        ForecastSales forecastSales;

        forecastSales.clear();
        forecastSales.initValue();

        forecastSales.ProjId             = projId;
        forecastSales.initFromProjTable(projTable);
        forecastSales.Active             = NoYes::Yes;
        if (_psaActivityEstimates.ItemId)
        {
            forecastSales.ItemId             = _psaActivityEstimates.ItemId;
            forecastSales.initFromInventTable();
        }
        else
        {
            forecastSales.ItemAllocateId     = ProjParameters::find().DefaultForecastItemAllocation;
            if (!forecastSales.ItemAllocateId)
            {
                throw error ("@SYS334837");
            }
        }

        PSAActivitySetup psaActivitySetup = PSAActivitySetup::findActivityNumber(_psaActivityEstimates.ActivityNumber);
        if (psaActivitySetup.PSASchedStart)
        {
            forecastSales.StartDate = psaActivitySetup.PSASchedStart;
        }

        if (_psaActivityEstimates.InventDimId)
        {
            forecastSales.setInventDimId(_psaActivityEstimates.InventDimId);
        }
        else
        {
            // Replicating the behavior to the way missing item dim is handled while creating forecast directly.
            forecastSales.setInventDimId(InventDim::findOrCreate(null).InventDimId);
        }
        
        forecastSales.ProjCategoryId     = _psaActivityEstimates.ProjCategoryId;
        forecastSales.ProjLinePropertyId = _psaActivityEstimates.LinePropertyId;

        forecastSales.InventQty          = _psaActivityEstimates.Quantity;
        forecastSales.SalesQty           = _psaActivityEstimates.Quantity;

        forecastSales.CostPrice          = _psaActivityEstimates.UnitCostPrice;

        forecastSales.Currency           = forecastSales.Currency ? forecastSales.Currency : _psaActivityEstimates.currencyCode();

        forecastSales.initFromTransDate();
        forecastSales.SalesPrice         = _psaActivityEstimates.UnitSalesPrice;
        forecastSales.Amount             = _psaActivityEstimates.TotalSalesPrice;

        forecastSales.ModelId = modelId;
        forecastSales.ActivityNumber = _psaActivityEstimates.ActivityNumber;
        forecastSales.Description    = _psaActivityEstimates.Description;

        return forecastSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferItemToForecast</Name>
				<Source><![CDATA[
    protected void transferItemToForecast(PSAActivityEstimates _psaActivityEstimates)
    {
        ForecastSales forecastSales = this.populateFromPsaActivityEstimates(_psaActivityEstimates);

        if (forecastSales.validateWrite())
        {
            forecastSales.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDictTableForQuotationProjTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>DictTable</c> instance associated with the specified <c>QuotationProjTransType</c> enumeration value.
    /// </summary>
    /// <param name = "_quotationProjTransType">
    /// A <c>QuotationProjTransType</c> enumeration value.
    /// </param>
    /// <returns>
    /// A <c>DictTable</c> instance.
    /// </returns>
    protected DictTable getDictTableForQuotationProjTransType(QuotationProjTransType _quotationProjTransType)
    {
        DictTable dictTable;

        switch (_quotationProjTransType)
        {
            case QuotationProjTransType::Hour:
                dictTable = new DictTable(tableNum(ProjForecastEmpl));
                break;
            case QuotationProjTransType::Expense:
                dictTable = new DictTable(tableNum(ProjForecastCost));
                break;
        }

        return dictTable; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToForecast</Name>
				<Source><![CDATA[
    protected void transferToForecast(PSAActivityEstimates _psaActivityEstimates)
    {
        DictTable               dictTable;

        if (!ProjBudgetCategoryToTransTypeValidation::validate(_psaActivityEstimates.ProjCategoryId, _psaActivityEstimates.ProjTransType))
        {
            throw Error(strFmt("@Proj:ProjCategoryMappingError",psaActivityEstimates.ProjCategoryId, psaActivityEstimates.ProjTransType));
        }
        
        switch (_psaActivityEstimates.ProjTransType)
        {
            // Item forecast is using a different table that is not Project-specific
            case QuotationProjTransType::Item:
                this.transferItemToForecast(_psaActivityEstimates);
                return;                
            case QuotationProjTransType::None:
                return;
            case QuotationProjTransType::Fee:
                if (ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Revenue))
                {
                    return;
                }
                dictTable = new DictTable(tableNum(ProjForecastRevenue));
                break;
            default:
                dictTable = this.getDictTableForQuotationProjTransType(_psaActivityEstimates.ProjTransType);
                break;
        }        

        Common common = this.initProjForecast(dictTable, _psaActivityEstimates);        

        if (common.validateWrite())
        {
            common.insert();
        }
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a <c>Common</c> buffer using the given <c>DictTable</c> instance.
    /// </summary>
    /// <param name = "_dictTable">
    /// The <c>DictTable</c> instance, which holds the appropriate table type to be instantiated.
    /// </param>
    /// <param>
    /// The <c>PSAActivityEstimates</c> buffer.
    /// </param>
    /// <returns>An initialized <c>Common</c> buffer based on the given <c>DictTable</c> instance.</returns>
    protected Common initProjForecast(DictTable _dictTable, PSAActivityEstimates _psaActivityEstimates)
    {
		ExecutePermission executePermission = new ExecutePermission();
        
		Common common = null;
		common = _dictTable.makeRecord();

		common.(fieldName2id(common.TableId, identifierStr(ModelId))) = modelId;

		common.(fieldName2id(common.TableId, identifierStr(ProjId))) = projId;

		executePermission.assert();
		_dictTable.callObject(identifierStr(initFromProjTable), common, projTable);
 
		common.(fieldName2id(common.TableId, identifierStr(CurrencyId))) = _psaActivityEstimates.currencyCode(projId);
      
		common.initValue();
        
        if (_psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour)
        {
            common.(fieldName2id(common.TableId, identifierStr(ResourceValidationSkipped))) = NoYes::Yes;
        }

		PSAActivitySetup psaActivitySetup = PSAActivitySetup::findActivityNumber(_psaActivityEstimates.ActivityNumber);
		if (psaActivitySetup.PSASchedStart)
		{
			if (_psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour)
			{
				common.(fieldName2id(common.TableId, identifierStr(SchedFromDate))) = psaActivitySetup.PSASchedStart;
			}
			else
			{
				common.(fieldName2id(common.TableId, identifierStr(StartDate))) = psaActivitySetup.PSASchedStart;
			}
		}

		_dictTable.callObject(identifierStr(initFromEstimate), common, _psaActivityEstimates);

        if (!_psaActivityEstimates.Resource || !_psaActivityEstimates.ResourceCategory)
        {
            ActivityRecId activity = ProjPlanVersion::getActivityRecId(_psaActivityEstimates.ProjPlanHierarchyId, _psaActivityEstimates.ProjPlanHierarchyTaskId);
            ProjPlanVersion projPlanVersion = ProjPlanVersion::findByHierarchyAndTaskId(_psaActivityEstimates.ProjPlanHierarchyId, _psaActivityEstimates.ProjPlanHierarchyTaskId);

            PSAProjSchedRole psaProjSchedRole;
            ResAssignment resAssignment;
            int resourceCount;
            ResourceRecId resource;

            while select Resource from psaProjSchedRole group by Resource
                exists join resAssignment
                    where resAssignment.Activity == activity &&
                        resAssignment.ActivityResource == psaProjSchedRole.RecId
            {
                resourceCount++;

                if (resourceCount == 1)
                {
                    resource = psaProjSchedRole.Resource;
                }
                else
                {
                    break;
                }                
            }

            if (resourceCount > 1)
            {
                warning(strFmt("@Proj:TransferWBSMultipleResourcesWarning", projPlanVersion.PathId, projPlanVersion.TaskName));
            }
            else
            {
                common.(fieldName2id(common.TableId, identifierStr(Resource))) = resource;
                common.(fieldName2id(common.TableId, identifierStr(ResourceCategory))) = _psaActivityEstimates.ResourceCategory;
            }
        }

		return common;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>