<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineManualReallocatorBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineManualReallocator</c> class is responsible for manually reallocating a work line.
/// </summary>
public abstract class WHSWorkLineManualReallocatorBase extends WHSWorkLineReallocatorBase
{
    private str warningLabel = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSWorkLineManualReallocator</c> instance with the specified parameters.
    /// </summary>
    /// <param name = "_workLineReallocationParams">The parameters object to retrieve the information for the work line reallocation from</param>
    /// <returns>A new instance of the <c>WHSWorkLineManualReallocator</c> class</returns>
    public static WHSWorkLineManualReallocatorBase newFromParams(WHSWorkLineReallocationParams _workLineReallocationParams)
    {
        WHSWorkLine  shortPickedWorkLine = _workLineReallocationParams.getShortPickedWorkLine();
        WHSWorkTable workLineToReallocateWorkTable = WHSWorkTable::find(shortPickedWorkLine.WorkId);

        WHSWorkLineManualReallocatorBase workLineReallocator = WHSWorkLineManualReallocatorBase::singletonFromWorkTransType(workLineToReallocateWorkTable.WorkTransType);

        if (!workLineReallocator)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
  
        workLineReallocator.parmWorkLineToReallocate(shortPickedWorkLine);
        workLineReallocator.parmWorkException(_workLineReallocationParams.getWorkException());
        if (workLineReallocator.parmIsReallocateCWItem())
        {
            workLineReallocator.parmInitialWorkLineInventHandlingQty(_workLineReallocationParams.getInitialWorkLineInventHandlingQty());
        }
        else
        {
            workLineReallocator.parmInitialWorkLineInventQty(_workLineReallocationParams.getInitialWorkLineInventHandlingQty());
        }
        workLineReallocator.parmUserId(_workLineReallocationParams.getWorkUser().UserId);
        workLineReallocator.parmWorkTable(workLineToReallocateWorkTable);
        if (workLineReallocator.parmIsReallocateCWItem())
        {
            workLineReallocator.parmShortPickInventHandlingQty(_workLineReallocationParams.getShortPickInventHandlingQty());
        }
		else
        {
            workLineReallocator.parmShortPickInventQty(_workLineReallocationParams.getShortPickInventHandlingQty());
        }

        return workLineReallocator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkTransTypeSupported</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isWorkTransTypeSupported(WHSWorkTransType _workTransType)
    {
        return WHSWorkLineManualReallocatorBase::singletonFromWorkTransType(_workTransType) != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singletonFromWorkTransType</Name>
				<Source><![CDATA[
    private static WHSWorkLineManualReallocatorBase singletonFromWorkTransType(WHSWorkTransType _workTransType)
    {
        WHSWorkLineReallocatorAttribute reallocatorAttribute = new WHSWorkLineReallocatorAttribute(_workTransType);
        WHSWorkLineManualReallocatorBase workLineReallocator = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWorkLineManualReallocatorBase), reallocatorAttribute);
        return workLineReallocator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reallocates the work line based on the manually selected location without taking into account the location directive setup.
    /// </summary>
    /// <param name = "_locationId">The specified location ID to reallocate the item from</param>
    /// <param name = "_inventQtyToReallocate">The total inventory quantity needed to be reallocated for the item</param>
    /// <returns>The inventory quantity that was reallocated from the specified location</returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the reallocateWorkLineHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty reallocateWorkLine(WMSLocationId _locationId = '', InventQty _inventQtyToReallocate = 0)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());
        
        return this.reallocateWorkLineHandlingQuantity(_locationId, _inventQtyToReallocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLineHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reallocates the work line based on the manually selected location without taking into account the location directive setup.
    /// </summary>
    /// <param name = "_locationId">The specified location ID to reallocate the item from</param>
    /// <param name = "_inventHandlingQtyToReallocate">The total inventory quantity needed to be reallocated for the item</param>
    /// <returns>The inventory quantity that was reallocated from the specified location</returns>
    [Hookable(false)]
    public InventHandlingQty reallocateWorkLineHandlingQty(WMSLocationId _locationId = '', InventHandlingQty _inventHandlingQtyToReallocate = 0)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            return this.reallocateWorkLineHandlingQuantity(_locationId, _inventHandlingQtyToReallocate);
        }

        return this.reallocateWorkLine(_locationId, _inventHandlingQtyToReallocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLineHandlingQuantity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected InventHandlingQty reallocateWorkLineHandlingQuantity(WMSLocationId _locationId, InventHandlingQty _inventHandlingQtyToReallocate)
    {
        WHSWorkLineReallocationValidator reallocationValidator = this.getWorkLineReallocationValidator();
        reallocationValidator.parmInventQtyToReallocate(_inventHandlingQtyToReallocate);
        if (!reallocationValidator.validate())
        {
            WHSWorkCreateHistory::createWorkHistoryLine(
                                        workTable.WorkBuildId,
                                        strFmt("@WAX:ReallocationNotExecuted", workLineToReallocate.LineNum),
                                        false);

            return 0;
        }

        ttsbegin;

        reallocatedInventHandlingQty = this.calculateInventHandlingQtyToReallocateFromLocation(_locationId, _inventHandlingQtyToReallocate);

        this.adjustLoadLineHandlingQuantities(workLineToReallocate, reallocatedInventHandlingQty, workException.AutoDecrementShipment);

        if (reallocatedInventHandlingQty > 0)
        {
            this.createReallocatedWorkLines(reallocatedInventHandlingQty, _locationId);
        }
        else
        {
            warningLabel = "@WAX:CannotReallocateQty";
        }

        ttscommit;

        return reallocatedInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventHandlingQtyToReallocateFromLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventory handling quantity that can be reallocated from the specified location.
    /// </summary>
    /// <param name = "_locationId">The location ID</param>
    /// <param name = "_requestedHandlingQtyToReallocate">The requested for reallocation inventory handling quantity</param>
    /// <returns>The inventory handling quantity that can be reallocated from the location</returns>
    /// <remarks>The reserved quantity of the initial order line can be less than the available quantity
    /// for work creation in the location, because of other orders that reserved in the middle of the reallocation process. In this
    /// case, only the reserved quantity can be reallocated.
    /// </remarks>
    [Hookable(false)]
    final internal protected InventHandlingQty calculateInventHandlingQtyToReallocateFromLocation(WMSLocationId _locationId, InventHandlingQty _requestedHandlingQtyToReallocate)
    {
        return this.calculateInventHandlingQuantitiesToReallocateFromLocation(_locationId, _requestedHandlingQtyToReallocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventHandlingQuantitiesToReallocateFromLocation</Name>
				<Source><![CDATA[
    private InventHandlingQty calculateInventHandlingQuantitiesToReallocateFromLocation(WMSLocationId _locationId, InventHandlingQty _requestedHandlingQtyToReallocate)
    {
        InventHandlingQty availQtyOnAboveLocDims = this.calculateHandlingQtyAvailForWorkCreationAboveLocationDims();
        InventHandlingQty inventQtyAvailToReallocateFromLocation = min(availQtyOnAboveLocDims, _requestedHandlingQtyToReallocate);

        if (inventQtyAvailToReallocateFromLocation > 0)
        {
            InventDim inventDimWithLoc = workLineToReallocate.InventDim();
            inventDimWithLoc.wMSLocationId = _locationId;
            inventDimWithLoc = InventDim::findOrCreate(inventDimWithLoc);

            InventHandlingQty availQtyOnLoc;

            if (workLineToReallocate.OrderCommittedInventDimId)
            {
                InventDimId mandatoryInventDimId = WHSOrderCommittedReservationFacade::extractMandatoryInventoryDimensions(
                    workLineToReallocate.ItemId,
                    workLineToReallocate.OrderCommittedInventDimId);

                inventDimWithLoc = InventDim::find(mandatoryInventDimId);
                inventDimWithLoc.wMSLocationId = _locationId;

                Map newLocationQuantityMap = WHSOrderCommittedReservationFacade::createNewLocationQuantityMapWithOrderCommittedIncluded(
                    workLineToReallocate.InventTransId,
                    workLineToReallocate.ItemId,
                    inventDimWithLoc.inventDimId,
                    inventQtyAvailToReallocateFromLocation,
                    inventDimWithLoc.wMSLocationId,
                    false);

                MapEnumerator newLocationQuantityMapEnumerator = newLocationQuantityMap.getEnumerator();

                while (newLocationQuantityMapEnumerator.moveNext())
                {
                    availQtyOnLoc += newLocationQuantityMapEnumerator.currentValue();
                }
            }
            else
            {
                availQtyOnLoc = whsInventOnHand::getWorkPhysicalAvailHandlingQtyByInventDim(workLineToReallocate.ItemId,
                                                                                            inventDimWithLoc,
                                                                                            true);
            }

            inventQtyAvailToReallocateFromLocation = min(inventQtyAvailToReallocateFromLocation, availQtyOnLoc);
        }

        return inventQtyAvailToReallocateFromLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkLineReallocationValidator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WHSWorkLineManualReallocationValidator</c> instance.
    /// </summary>
    /// <returns>A new instance of the validator for reallocating manually a work line</returns>
    protected WHSWorkLineReallocationValidator getWorkLineReallocationValidator()
    {
        return WHSWorkLineManualReallocationValidator::newFromWorkLine(
                                                        workLineToReallocate,
                                                        initialWorkLineInventHandlingQty,
                                                        inventHandlingQtyToReallocate,
                                                        workException,
                                                        userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runManualWorkLineReallocationPostUpdates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs several updates that are required to occur after the manual reallocation selection is completed.
    /// </summary>
    /// <param name = "_reallocatedInventQty">The inventory quantity that was manually reallocated</param>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the runManualWorkLineReallocationPostUpdatesHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public void runManualWorkLineReallocationPostUpdates(InventQty _reallocatedInventQty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());

        this.runManualWorkLineReallocationPostUpdatesAll(_reallocatedInventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runManualWorkLineReallocationPostUpdatesHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs several updates that are required to occur after the manual reallocation selection is completed.
    /// </summary>
    /// <param name = "_reallocatedHandlingInventQty">The inventory handling quantity that was manually reallocated</param>
    [Hookable(false)]
    final public void runManualWorkLineReallocationPostUpdatesHandlingQty(InventHandlingQty _reallocatedHandlingInventQty)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            this.runManualWorkLineReallocationPostUpdatesAll(_reallocatedHandlingInventQty);
        }
        else
        {
            this.runManualWorkLineReallocationPostUpdates(_reallocatedHandlingInventQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runManualWorkLineReallocationPostUpdatesAll</Name>
				<Source><![CDATA[
    private void runManualWorkLineReallocationPostUpdatesAll(InventHandlingQty _reallocatedHandlingInventQty)
    {
        ttsbegin;

        if (_reallocatedHandlingInventQty > 0)
        {
            this.cancelAndRecreateRemainingLinesHandlingQty(_reallocatedHandlingInventQty);

            this.adjustContainerLinesHandlingQuantitiesOfReallocatedWorkLine(_reallocatedHandlingInventQty);
            this.adjustPrintAndCustomLinesHandlingQuantities(_reallocatedHandlingInventQty);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runShortPickConfirmationPostUpdates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs several updates that are required to occur after the initial short picking is completed
    /// and the quantity from the first selected location has been reallocated.
    /// </summary>
    /// <param name = "_notReallocatedInventQty">The quantity that was not reallocated</param>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the runShortPickConfirmationPostUpdatesHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public void runShortPickConfirmationPostUpdates(InventQty _notReallocatedInventQty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());
        
        this.runShortPickConfirmationPostUpdatesHandlingQuantity(_notReallocatedInventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runShortPickConfirmationPostUpdatesHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs several updates that are required to occur after the initial short picking is completed
    /// and the handling quantity from the first selected location has been reallocated.
    /// </summary>
    /// <param name = "_notReallocatedInventHandlingQty">The handling quantity that was not reallocated</param>
    public void runShortPickConfirmationPostUpdatesHandlingQty(InventHandlingQty _notReallocatedInventHandlingQty)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            this.runShortPickConfirmationPostUpdatesHandlingQuantity(_notReallocatedInventHandlingQty);
        }
        else
        {
            this.runShortPickConfirmationPostUpdates(_notReallocatedInventHandlingQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runShortPickConfirmationPostUpdatesHandlingQuantity</Name>
				<Source><![CDATA[
    private void runShortPickConfirmationPostUpdatesHandlingQuantity(InventHandlingQty _notReallocatedInventHandlingQty)
    {
        ttsbegin;

        this.adjustHandlingQuantitiesPostShortPickConfirmation(reallocatedInventHandlingQty, _notReallocatedInventHandlingQty);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReallocatedWorkLines</Name>
				<Source><![CDATA[
    private void createReallocatedWorkLines(InventHandlingQty _reallocatedInventQty, WMSLocationId _locationId)
    {
        if (workLineToReallocate.OrderCommittedInventDimId)
        {
            Map newLocationQuantityMap = WHSOrderCommittedReservationFacade::createNewLocationQuantityMapWithOrderCommittedIncluded(
                workLineToReallocate.InventTransId,
				workLineToReallocate.ItemId,
                workLineToReallocate.OrderCommittedInventDimId,
                _reallocatedInventQty,
                _locationId);

            // Here we have a map with InventDimId -> qty to use from there. At this point we know we have enough on-hand.
            MapEnumerator newLocationQuantityMapEnumerator = newLocationQuantityMap.getEnumerator();

            while (newLocationQuantityMapEnumerator.moveNext())
            {
                InventDimId reallocatedInventDimId = newLocationQuantityMapEnumerator.currentKey();
                InventQty   reallocatedWorkLineQty = newLocationQuantityMapEnumerator.currentValue();

                this.createReallocatedWorkLine(reallocatedWorkLineQty, _locationId, reallocatedInventDimId);
            }
        }
        else
        {
            this.createReallocatedWorkLine(_reallocatedInventQty, _locationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReallocatedWorkLine</Name>
				<Source><![CDATA[
    private void createReallocatedWorkLine(InventHandlingQty _reallocatedInventQty, WMSLocationId _locationId, InventDimId _orderCommittedInventDimId = '')
    {
        WHSWorkLine reallocatedWorkLine = this.initReallocatedWorkLine();

        if (_reallocatedInventQty <= 0)
        {
            warningLabel = "@WAX:CannotReallocateQty";
            return;
        }

        reallocatedWorkLine.LineNum                = WHSWorkLine::lastLineNum(workLineToReallocate.WorkId) + 1;
        reallocatedWorkLine.wmsLocationId          = _locationId;
        reallocatedWorkLine.InventDimId            = workLineToReallocate.InventDimId;
        reallocatedWorkLine.InventQtyWork          = _reallocatedInventQty;
        reallocatedWorkLine.InventQtyRemain        = reallocatedWorkLine.InventQtyWork;

        [   reallocatedWorkLine.QtyWork,
            reallocatedWorkLine.QtyRemain,
            reallocatedWorkLine.UnitId]            = WHSInventTable::getHighestCommonUnitQtyByUOMSeqGroup(reallocatedWorkLine.ItemId,
                                                                        reallocatedWorkLine.InventQtyWork,
                                                                        reallocatedWorkLine.InventQtyRemain,
                                                                        WHSCatchWeightHelper::inventHandlingUnitId(reallocatedWorkLine.ItemId),
                                                                        reallocatedWorkLine.InventDimId);

        reallocatedWorkLine.InventTransId          = workLineToReallocate.InventTransId;
        reallocatedWorkLine.ContainerId            = workLineToReallocate.ContainerId;

        if (_orderCommittedInventDimId)
        {
            reallocatedWorkLine.OrderCommittedInventDimId = _orderCommittedInventDimId;
        }

        reallocatedWorkLine.insert();

        this.createWorkInventTransForReallocatedLine(reallocatedWorkLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarningLabel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public str parmWarningLabel()
    {
        return warningLabel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>