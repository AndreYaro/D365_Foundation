<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStatusBlockingQualityOrderHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>InventStatusBlockingQualityOrderHelper</c> class handles inventory status blocking
///     synchronization for quality orders.
/// </summary>
class InventStatusBlockingQualityOrderHelper extends InventStatusBlockingHelper
{
    InventQualityOrderTable qualityOrder;
    InventQualityOrderTable origQualityOrder;
    InventQty               updateQty;
    PdsCWQty                updateCWQty;

    UnknownNoYes needsInventoryUpdate;
    UnknownNoYes supportsInventBlocking;
    UnknownNoYes statusBlockingDimChanged;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromMovement</Name>
				<Source><![CDATA[
        protected void initFromMovement(InventMovement _movement)
    {
        if (_movement.buffer().TableId != tableNum(InventQualityOrderTable))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super(_movement);

        qualityOrder        = _movement.buffer();
        origQualityOrder    = qualityOrder.orig();
        updateQty           = qualityOrder.Qty - origQualityOrder.Qty;
        updateCWQty         = qualityOrder.PdsCWQty - origQualityOrder.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsInventoryUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if inventory update is required.
    /// </summary>
    /// <returns>
    ///     true if inventory update is required; otherwise, false.
    /// </returns>
    private boolean needsInventoryUpdate()
    {
        if (needsInventoryUpdate == UnknownNoYes::Unknown)
        {
            boolean needsUpdate = qualityOrder.TestDestructive   != origQualityOrder.TestDestructive
                          || qualityOrder.Qty            != origQualityOrder.Qty
                          || qualityOrder.PdsCWQty       != origQualityOrder.PdsCWQty
                          || qualityOrder.InventDimId    != origQualityOrder.InventDimId;

            needsInventoryUpdate = needsUpdate ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return needsInventoryUpdate == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDelete</Name>
				<Source><![CDATA[
        public void postDelete()
    {
        if (qualityOrder.TestDestructive)
        {
            this.increaseInventoryStatusBlocking(qualityOrder.Qty, qualityOrder.PdsCWQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
        public void postUpdate()
    {
        if (!this.needsInventoryUpdate())
        {
            return;
        }

        // If status blocking dimensions are the same and testDestructive has been set all the time
        // then we only need to increase status blocking qty if we decreased QO qty
        if (!this.statusBlockingDimChanged()
            && qualityOrder.TestDestructive
            && origQualityOrder.TestDestructive
            && updateQty < 0)
        {
            this.increaseInventoryStatusBlocking(-updateQty, -updateCWQty);
        }
        // Otherwise, we need to recreate status blocking for the whole original QO qty
        else if (this.statusBlockingDimChanged()
                 || (origQualityOrder.TestDestructive
                     && !qualityOrder.TestDestructive))
        {
            this.increaseInventoryStatusBlocking(origQualityOrder.Qty, origQualityOrder.PdsCWQty, InventMovement::construct(origQualityOrder));
        }

        // Synchronize inventory blocking only if blocking exists for both updated and orig QO
        if (this.supportsInventBlocking()
            && qualityOrder.BlockingQty != 0
            && origQualityOrder.BlockingQty != 0)
        {
            // Synchronize inventory blocking. This action will recreate inventory status blocking...
            InventBlockingQualityOrderSync::construct().onQualityOrderBlockingQtyIncrease(qualityOrder);

            // If test destructive got set we need to reduce status blocking for the whole qty
            if (!origQualityOrder.TestDestructive && qualityOrder.TestDestructive)
            {
                this.reduceInventoryStatusBlocking(qualityOrder.Qty, qualityOrder.PdsCWQty);
            }
            // Else we need to reduce it only if QO qty increased
            else if (qualityOrder.TestDestructive
                     && updateQty > 0)
            {
                this.reduceInventoryStatusBlocking(updateQty, updateCWQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preInsert</Name>
				<Source><![CDATA[
        public void preInsert()
    {
        if (qualityOrder.TestDestructive)
        {
            this.reduceInventoryStatusBlocking(qualityOrder.Qty, qualityOrder.PdsCWQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdate</Name>
				<Source><![CDATA[
        public void preUpdate()
    {
        if (!this.needsInventoryUpdate())
        {
            return;
        }

        // If status blocking dimensions are the same and testDestructive has been set all the time
        // then we only need to reduce status blocking qty if we increase QO qty
        if (!this.statusBlockingDimChanged()
            && origQualityOrder.TestDestructive
            && qualityOrder.TestDestructive
            && updateQty > 0)
        {
            this.reduceInventoryStatusBlocking(updateQty, updateCWQty);
        }
        // Otherwise we need to reduce status blocking qty by the whole QO qty
        else if (this.statusBlockingDimChanged()
                 || (!origQualityOrder.TestDestructive
                     && qualityOrder.TestDestructive))
        {
            this.reduceInventoryStatusBlocking(qualityOrder.Qty, qualityOrder.PdsCWQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusBlockingDimChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the change in dimensions impacts inventory status blocking.
    /// </summary>
    /// <returns>
    ///     true if the change impacts inventory status blocking; otherwise, false.
    /// </returns>
    private boolean statusBlockingDimChanged()
    {
        boolean         dimChanged;

        if (statusBlockingDimChanged == UnknownNoYes::Unknown)
        {
            if (qualityOrder.InventDimId == origQualityOrder.InventDimId)
            {
                dimChanged = false;
            }
            else
            {
                InventDim inventDim = qualityOrder.inventDim();
                inventDim.clearBelowStatusDim(qualityOrder.ItemId);
                inventDim = InventDim::findOrCreate(inventDim);

                InventDim origInventDim = origQualityOrder.inventDim();
                origInventDim.clearBelowStatusDim(origQualityOrder.ItemId);
                origInventDim = InventDim::findOrCreate(origInventDim);

                dimChanged = inventDim.InventDimId != origInventDim.InventDimId;
            }

            statusBlockingDimChanged = dimChanged ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return statusBlockingDimChanged == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsInventBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the quality order supports inventory blocking.
    /// </summary>
    /// <returns>
    ///     true if the quality order supports inventory blocking; otherwise, false.
    /// </returns>
    private boolean supportsInventBlocking()
    {
        if (supportsInventBlocking == UnknownNoYes::Unknown)
        {
            boolean supportsBlocking = InventQualityReferenceType::newFromQualityOrder(qualityOrder).supportsInventoryBlocking();

            supportsInventBlocking = supportsBlocking ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return supportsInventBlocking == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventStatusBlockingQualityOrderHelper</c> class for the specified destructive quality order movement.
    /// </summary>
    /// <param name="_movement">
    /// A destructive quality order movement.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventStatusBlockingQualityOrderHelper</c>.
    /// </returns>
    public static InventStatusBlockingQualityOrderHelper construct(InventMov_QualityOrder _movement)
    {
        InventStatusBlockingQualityOrderHelper ret = new InventStatusBlockingQualityOrderHelper();

        ret.initFromMovement(_movement);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>