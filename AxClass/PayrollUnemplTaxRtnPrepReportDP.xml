<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollUnemplTaxRtnPrepReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used as the data provider for the <c>PayrollUnemplTaxRtnPrepReport</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(PayrollUnemplTaxRtnPrepReportContract)),
    SRSReportQueryAttribute(queryStr(PayrollUnemplTaxRtnPrepReport))
]
public class PayrollUnemplTaxRtnPrepReportDP extends SRSReportDataProviderBase
{
    #PayrollConstants
    PayrollUnemploymentTaxRtnPrepReportTmp payrollUnemploymentTaxRtnPrepReportTmp;
    PayrollUnemplTaxRtnPrepReportContract  contract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPrlUnemploymentTaxRtnPrepReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects all of the records from the temporary table and returns them to the report.
    /// </summary>
    /// <returns>
    /// The content of the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PayrollUnemploymentTaxRtnPrepReportTmp))
    ]
    public PayrollUnemploymentTaxRtnPrepReportTmp getPrlUnemploymentTaxRtnPrepReportTmp()
    {
        select payrollUnemploymentTaxRtnPrepReportTmp;

        return payrollUnemploymentTaxRtnPrepReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportData</Name>
				<Source><![CDATA[
    private void prepareReportData()
    {
        #ISOCountryRegionCodes
        Query                             query;
        QueryRun                          queryRun;
        Amount                            paymToAllEmployees;
        Amount                            sumOfSubjectWages;
        Amount                            paymExemptFromFutaTax;
        Amount                            totalPaymExcessOfSevenThousand;
        Amount                            quarter1Liability;
        Amount                            quarter2Liability;
        Amount                            quarter3Liability;
        Amount                            quarter4Liability;
        Amount                            totalTaxLiabilityForYear;
        QuarterOfYear                     quarterOfYear;
        PayrollTaxCodeId                  payrollTaxCodeId;
        PayrollTaxCodeRecId               payrollTaxCodeRecId;
        AddressCountryRegionId            addressCountryRegionId;
        PayrollTaxTransactionHistoryUnion payrollTaxTransactionHistoryUnion;
        FromDate                          fromDate;
        ToDate                            toDate;
        PayrollPayStatement               PayrollPayStatement;

        fromDate = mkDate(1, 1, contract.parmWageandTaxYear());
        toDate   = mkDate(31, 12, contract.parmWageandTaxYear());

        query = this.parmQuery();

        payrollTaxCodeId       = #EMPLOYERFUTACODE;
        addressCountryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;
        PayrollTaxCodeRecId    = PayrollTaxCode::findByCodeCountryRegion(payrollTaxCodeId, addressCountryRegionId).RecId;

        query.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion)).addRange(fieldNum(PayrollTaxTransactionHistoryUnion, TaxCode)).value(SysQuery::value(PayrollTaxCodeRecId));
        query.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion)).addRange(fieldNum(PayrollTaxTransactionHistoryUnion, TransDate)).value(SysQuery::range(fromDate, toDate));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            payrollTaxTransactionHistoryUnion = queryRun.get(tableNum(PayrollTaxTransactionHistoryUnion));
            PayrollPayStatement               = queryRun.get(tableNum(PayrollPayStatement));

            if (payrollTaxTransactionHistoryUnion.PayStatement == 0
                || PayrollPayStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued)
            {
                paymToAllEmployees                = paymToAllEmployees + payrollTaxTransactionHistoryUnion.GrossWages;

                sumOfSubjectWages                 = sumOfSubjectWages + payrollTaxTransactionHistoryUnion.GrossSubjectWages;

                totalPaymExcessOfSevenThousand    = totalPaymExcessOfSevenThousand + payrollTaxTransactionHistoryUnion.ExcessWages;

                // Identify the quarter of the year from the date
                quarterOfYear = date2Qtr(payrollTaxTransactionHistoryUnion.TransDate);

                switch (quarterOfYear)
                {
                    case QuarterOfYear::Q1:
                        quarter1Liability = quarter1Liability + payrollTaxTransactionHistoryUnion.TaxLineAmount;
                        break;

                    case QuarterOfYear::Q2:
                        quarter2Liability = quarter2Liability + payrollTaxTransactionHistoryUnion.TaxLineAmount;
                        break;

                    case QuarterOfYear::Q3:
                        quarter3Liability = quarter3Liability + payrollTaxTransactionHistoryUnion.TaxLineAmount;
                        break;

                    case QuarterOfYear::Q4:
                        quarter4Liability = quarter4Liability + payrollTaxTransactionHistoryUnion.TaxLineAmount;
                        break;
                }
            }
        }

        // Generate payment exempt from FUTA tax by subtracting sum of subject wages from sum of gross wages(Payment made to all employees).
        paymExemptFromFutaTax = paymToAllEmployees - sumOfSubjectWages;

        // The total liability of the year can be obtained by sum of liabilities of each quarter in a year.
        totalTaxLiabilityForYear = quarter1Liability + quarter2Liability + quarter3Liability + quarter4Liability;

        // Insert the record into the TmpTable
        payrollUnemploymentTaxRtnPrepReportTmp.TotalPaymentToAllEmployees        = paymToAllEmployees;
        payrollUnemploymentTaxRtnPrepReportTmp.PaymentExemptFromFUTATax          = paymExemptFromFutaTax;
        payrollUnemploymentTaxRtnPrepReportTmp.TotalPaymentToEmployeesExcessOf7K = totalPaymExcessOfSevenThousand;
        payrollUnemploymentTaxRtnPrepReportTmp.Quarter1Liability                 = quarter1Liability;
        payrollUnemploymentTaxRtnPrepReportTmp.Quarter2Liability                 = quarter2Liability;
        payrollUnemploymentTaxRtnPrepReportTmp.Quarter3Liability                 = quarter3Liability;
        payrollUnemploymentTaxRtnPrepReportTmp.Quarter4Liability                 = quarter4Liability;
        payrollUnemploymentTaxRtnPrepReportTmp.TotalTaxLiabilityOfYear           = totalTaxLiabilityForYear;

        ttsBegin;
        payrollUnemploymentTaxRtnPrepReportTmp.insert();
        ttsCommit;

        payrollUnemploymentTaxRtnPrepReportTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Process PayrollUnemploymentTaxReturnPrepReport data.
    /// </summary>
    public void processReport()
    {
        contract = this.parmDataContract() as PayrollUnemplTaxRtnPrepReportContract;

        if (contract)
        {
            this.prepareReportData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PayrollUnemplTaxRtnPrepReportDP construct()
    {
        return new PayrollUnemplTaxRtnPrepReportDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>