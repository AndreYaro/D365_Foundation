<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationFlight</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;

/// <summary>
/// The <c>TaxIntegrationFlight</c> class exposes whether <c>TaxIntegration</c>-classes are enabled.
/// </summary>
[Export(identifierstr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[TaxFlighting(TaxFlightingGroup::TaxIntegration)]
internal final class TaxIntegrationFlight implements IFeatureRuntimeToggle, IFeatureMetadata, IFeatureLifecycle
{
    private static TaxIntegrationFlight instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new TaxIntegrationFlight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the feature is enabled.
    /// </summary>
    /// <returns>
    /// true if the feature is enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean isEnabled()
    {
        return this.isEnabledForLegalEntity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledForLegalEntity</Name>
				<Source><![CDATA[
    private boolean isEnabledForLegalEntity()
    {
        SelectableDataArea dataArea = curext();

        if (TaxIntegrationSupportedCountryRegion::isSupportedCountryRegion(dataArea))
        {
            return true;
        }

        const str methodName = identifierStr(isSupportedCountryRegion);
        SysDictClass dictClass = new SysDictClass(classNum(TaxIntegrationSupportedCountryRegion));
        List descriptorClasses = dictClass.extendedBy(true);

        ListEnumerator le = descriptorClasses.getEnumerator();
        while (le.moveNext())
        {
            ClassId curClassId = le.current();
            SysDictClass derivedClass = new SysDictClass(curClassId);

            if (derivedClass.hasStaticMethod(methodName) && derivedClass.callStatic(methodName, dataArea))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>TaxIntegrationFlight</c> class.
    /// </summary>
    /// <returns>
    /// The created instance.
    /// </returns>
    [Hookable(false)]
    internal static TaxIntegrationFlight instance()
    {
        return TaxIntegrationFlight::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@TaxIntegration:TaxCalculationServiceLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@TaxIntegration:TaxCalculationServiceSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2165793';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>