<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrSchedulerLockManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WrkCtrSchedulerLockManager</c> class is responsible for acquiring scheduling locks.
/// </summary>
public class WrkCtrSchedulerLockManager
{
    private UserConnection userConnection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertingNewLockRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>insertingNewLockRecord</c> event is raised if the <c>WrkCtrSchedulerLock</c> record
    /// did not exist and a new record must be inserted.
    /// </summary>
    delegate void insertingNewLockRecord() {}

]]></Source>
			</Method>
			<Method>
				<Name>takingPessimisticLockAfterInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>takingPessimisticLockAfterInsert</c> event is raised if the <c>WrkCtrSchedulerLock</c> record
    /// did not exist and a new record was inserted and the lock manager is trying to take a pessimistic lock 
    /// on the newly created record.
    /// </summary>
    delegate void takingPessimisticLockAfterInsert() {}

]]></Source>
			</Method>
			<Method>
				<Name>acquiredLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>acquiredLock</c> event is raised once a pessimistic lock has been acquired
    /// on the <c>WrkCtrSchedulerLock</c> record.
    /// </summary>
    delegate void acquiredLock() {}

]]></Source>
			</Method>
			<Method>
				<Name>acquireLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acquires a scheduling lock.
    /// </summary>
    /// <returns>The timestamp of the acquired lock.</returns>
    public WrkCtrCapResTimestamp acquireLock()
    {
        WrkCtrSchedulerLock wrkCtrSchedulerLock;

        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        if (!isConfigurationkeyEnabled(configurationKeyNum(WrkCtr)))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (userConnection)
        {
            wrkCtrSchedulerLock.setConnection(userConnection);
        }

        select firstonly pessimisticlock wrkCtrSchedulerLock;

        if (!wrkCtrSchedulerLock)
        {
            this.insertingNewLockRecord();

            try
            {
                wrkCtrSchedulerLock.insert();
            }
            catch (Exception::DuplicateKeyException)
            {
                // continue as the scheduler lock record now exists
            }

            this.takingPessimisticLockAfterInsert();
            select firstonly pessimisticlock wrkCtrSchedulerLock;
        }

        this.acquiredLock();

        wrkCtrSchedulerLock.Timestamp = wrkCtrSchedulerLock.Timestamp + 1;
        wrkCtrSchedulerLock.update();

        return wrkCtrSchedulerLock.Timestamp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentTimestamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current lock time stamp.
    /// </summary>
    /// <returns>The current lock time stamp.</returns>
    /// <remarks>This function should only be used for writing capacity reservations as a result of scheduling with infinite capacity.</remarks>
    public static WrkCtrCapResTimestamp currentTimestamp()
    {
        WrkCtrSchedulerLock wrkCtrSchedulerLock;

        select firstonly wrkCtrSchedulerLock;
        if (wrkCtrSchedulerLock)
        {
            return wrkCtrSchedulerLock.TimeStamp;
        }
        else
        {
            return WrkCtrSchedulerLockManager::construct().acquireLock();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WrkCtrSchedulerLockManager</c> class.
    /// </summary>
    /// <returns>A new instance of the <c>WrkCtrSchedulerLockManager</c> class.</returns>
    public static WrkCtrSchedulerLockManager construct()
    {
        return new WrkCtrSchedulerLockManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    internal UserConnection parmUserConnection(UserConnection _connection = userConnection)
    {
        userConnection = _connection;
        return userConnection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>