<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetReasonCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetReasonCode extends RunBase
{
    ReasonCode              reasonCode;
    ReasonComment           reasonComment;
    str                     dialogCaption;

    AssetFieldChangesMap    assetFieldChangesMap;
    List                    modifiedFields;

    public const int CurrentVersion = 1;
    #LOCALMACRO.CurrentList
        reasonCode,
        reasonComment,
        dialogCaption
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the Sale value, Scrap value, Service life or Depreciation periods fields have
    ///    been modified.
    /// </summary>
    /// <param name="_assetFieldChangesMap">
    ///    The value model or depreciation book to check for modified fields.
    /// </param>
    /// <returns>
    ///    true if there is a change in the value of any one of the Sale value, Scrap value, Service life or
    ///    Depreciation periods fields; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method also sets the caption to list the fields that have been modified.
    /// </remarks>
    public boolean checkFields(AssetFieldChangesMap _assetFieldChangesMap)
    {
        TextBuffer caption = new TextBuffer();
        boolean ret = true;
        SysDictTable    dictTable;
        SysDictField    dictField;
        container modifiedInfo;

        const str Comma = ', ';
        const str Period = '.';
        const str Space = ' ';

        //set record for use here and in insertChanges record
        this.parmAssetFieldChangesMap(_assetFieldChangesMap);
        //Need to clear this list before we add new info
        modifiedFields = new List(Types::Container);

        dictTable = new SysDictTable(tablenum(AssetFieldChangesMap));
        caption.appendText("@SYS118048" + Space);

        if (assetFieldChangesMap.orig().AssetSaleValue!=assetFieldChangesMap.AssetSaleValue)
        {
            dictField = dictTable.fieldObject(fieldnum(AssetFieldChangesMap, AssetSaleValue));
            modifiedInfo=[dictField.label(),assetFieldChangesMap.orig().AssetSaleValue,assetFieldChangesMap.AssetSaleValue, ''];
            modifiedFields.addEnd(modifiedInfo);
            caption.appendText(dictField.label() + Comma);
        }

        if (assetFieldChangesMap.orig().AssetScrapValue != assetFieldChangesMap.AssetScrapValue)
        {
            dictField = dictTable.fieldObject(fieldnum(AssetFieldChangesMap, AssetScrapValue));
            modifiedInfo=[dictField.label(),assetFieldChangesMap.orig().AssetScrapValue,assetFieldChangesMap.AssetScrapValue, ''];
            modifiedFields.addEnd(modifiedInfo);
            caption.appendText(dictField.label() + Comma);
        }

        if (assetFieldChangesMap.orig().AssetServiceLife  !=assetFieldChangesMap.AssetServiceLife)
        {
            dictField = dictTable.fieldObject(fieldnum(AssetFieldChangesMap, AssetServiceLife));
            modifiedInfo=[dictField.label(),assetFieldChangesMap.orig().AssetServiceLife,assetFieldChangesMap.AssetServiceLife, ''];
            modifiedFields.addEnd(modifiedInfo);
            caption.appendText(dictField.label() + Comma);
        }

        if (assetFieldChangesMap.orig().AssetLifeTime  !=assetFieldChangesMap.AssetLifeTime)
        {
            dictField = dictTable.fieldObject(fieldnum(AssetFieldChangesMap, AssetLifeTime));
            modifiedInfo=[dictField.label(),assetFieldChangesMap.orig().AssetLifeTime,assetFieldChangesMap.AssetLifeTime, ''];
            modifiedFields.addEnd(modifiedInfo);
            caption.appendText(dictField.label()+ Comma);
        }

        dialogCaption = caption.subStr(0, caption.size() - 2) + Period;

        if (modifiedFields.empty())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>AssetReasonCodeDialog</c> form.
    /// </summary>
    /// <returns>
    ///    A generic object that contains an instance of the dialog box.
    /// </returns>
    /// <remarks>
    ///    This method is used to initialize the dialog box.
    /// </remarks>
    public Object dialog()
    {
        FormRun     dialogForm;
        Args        args = new Args(formstr(AssetReasonCodeDialog));

        args.caller(this);
        dialogForm = classfactory.formRunClass(args);
        dialogForm.init();
        return dialogForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    /// If no record can be found or the <see cref="M:RunBase.unpack" /> method returns false, then the
    /// <see cref="M:RunBase.initParmDefault" /> method will be called. Normally, this method should not be
    /// overridden.
    /// </remarks>
    public void getLast()
    {
        //Prompt should always open empty, so do not call super()
        //    super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetChangesHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record into the asset changes history.
    /// </summary>
    /// <param name="_oldValue">
    ///    The old value of the asset attribute.
    /// </param>
    /// <param name="_newValue">
    ///    The new value of the asset attribute.
    /// </param>
    /// <param name="_reasonRefRecId">
    ///    The ID of the reason code record for these changes.
    /// </param>
    /// <param name="_caption">
    ///    The name of the modified asset attribute; optional.
    /// </param>
    /// <param name="_depreciationProfile">
    ///    The depreciation profile of the modified asset attribute; optional.
    /// </param>
    /// <remarks>
    ///    This method inserts a new record into the <c>AssetChangesHistory</c> table with the name of the
    ///    modified asset attribute together with its old and new values.
    /// </remarks>
    private void insertAssetChangesHistory(AssetOldValue _oldValue , AssetNewValue _newValue, ReasonRefRecId _reasonRefRecId, str _caption='', str _depreciationProfile = '')
    {
        AssetChangesHistory assetChangesHistory;

        ttsbegin;
        assetChangesHistory.FieldChanged = _caption;
        assetChangesHistory.ChangeDateTime = DateTimeUtil::getSystemDateTime();
        assetChangesHistory.ChangedBy = curuserid();
        assetChangesHistory.NewValue = _newValue;
        assetChangesHistory.OldValue = _oldValue;
        assetChangesHistory.Assetid = assetFieldChangesMap.AssetId;
        assetChangesHistory.ReasonRefRecId = _reasonRefRecId;
        assetChangesHistory.Bookid = assetFieldChangesMap.AssetBookId;
        assetChangesHistory.DepreciationProfile = _depreciationProfile;

        assetChangesHistory.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a container of modified asset attributes and inserts the information into the database.
    /// </summary>
    private void insertChanges()
    {
        ListEnumerator  listEnumerator;
        AssetNewValue   assetNewValue;
        AssetOldValue   assetOldValue;
        str             caption;
        str             depreciationProfile;
        ReasonRefRecId  reasonRefRecId;
        List            localModifiedFields;
        #OCCRetryCount

        localModifiedFields = this.parmModifiedFields();

        //Don't try to get enumerator on null object or not fields have been modified, just return
        if (localModifiedFields == null || localModifiedFields.empty())
        {
            return;
        }
        else
        {
            listEnumerator = localModifiedFields.getEnumerator();
        }

        try
        {
            reasonRefRecId = ReasonTableRef::createReasonTableRef(this.parmReason(), this.parmReasonComment());
            while (listEnumerator.moveNext())
            {
                [caption,assetOldValue,assetNewValue, depreciationProfile] = listEnumerator.current();
                this.insertAssetChangesHistory(assetOldValue,assetNewValue,reasonRefRecId,caption,depreciationProfile);
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                listEnumerator.reset();
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    listEnumerator.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetFieldChangesMap</Name>
				<Source><![CDATA[
    public AssetFieldChangesMap parmAssetFieldChangesMap(AssetFieldChangesMap _assetFieldChangesMap = assetFieldChangesMap)
    {
        assetFieldChangesMap = _assetFieldChangesMap;

        return assetFieldChangesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmdialogCaption</Name>
				<Source><![CDATA[
    public str parmdialogCaption(str _dialogCaption = dialogCaption)
    {
        dialogCaption = _dialogCaption;

        return dialogCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModifiedFields</Name>
				<Source><![CDATA[
    public List parmModifiedFields(List _modifiedFields = modifiedFields)
    {
        modifiedFields = _modifiedFields;

        return modifiedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReason</Name>
				<Source><![CDATA[
    public  ReasonCode parmReason(ReasonCode _reasonCode = reasonCode)
    {
        reasonCode = _reasonCode;

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonComment</Name>
				<Source><![CDATA[
    public ReasonComment parmReasonComment(ReasonComment _reasonComment = reasonComment)
    {
        reasonComment = _reasonComment;

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prompts the reason code dialog box.
    /// </summary>
    /// <returns>
    ///    A Boolean value that indicates whether the OK button was pressed and validates that a valid reason
    ///    code is entered.
    /// </returns>
    public boolean prompt()
    {
        boolean ret;

        //Clear reason code and comment each time before showing dialog
        this.parmReason("");
        this.parmReasonComment("");

        ret = super();

        ret = ret && this.validate();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the required logic when the OK button is pressed.
    /// </summary>
    /// <remarks>
    ///    This method calls the <c>insertion</c> method to add records in asset changes history.
    /// </remarks>
    public void run()
    {
        super();
        this.insertChanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the last choice by using the <see cref="M:RunBase.pack" /> method.
    /// </summary>
    /// <remarks>
    /// This method should not typically be overridden.
    /// </remarks>
    public void saveLast()
    {
        //Prompt should always open empty, so do not call super()
        //    super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the reason code that was entered by the user.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object or form that calls this method. Default value is null.
    /// </param>
    /// <returns>
    /// A boolean indicating whether validation passed or not.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean isValid = true;

        if (!reasonCode)
        //No reason code entered
        {
            isValid = checkFailed(strfmt("@SYS116347", "@SYS111246"));
        }
        else
        {
            //Reason Code entered
            if (!ReasonTable::exist(reasonCode))
            //Reason code does not exist in table
            {
                isValid = checkFailed(strfmt("@SYS118047", reasonCode));
            }
            else
            {
                //Reason code exists
                isValid = (ReasonTable::find(this.parmReason()).Asset);

                if (!isValid)
                //Reason code not valid for Asset
                {
                    isValid = checkFailed("@SYS115522");
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates the <c>AssetReasonCode</c> class using the map parameter.
    /// </summary>
    /// <returns>
    ///    An instance of <c>AssetReasonCode</c> class.
    /// </returns>
    public static AssetReasonCode construct()
    {
        return new AssetReasonCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS117504";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>