<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostMarkupProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostMarkupProvider</c> class provides the markup cost for an <c>CostInventoryEvent</c>.
/// </summary>
public class CostMarkupProvider
{
    InventTransOriginId     inventTransOriginId;
    Voucher                 voucher;
    TransDate               transDate;

    Map                     remainingQuantityMap;
    Map                     remainingAmountMap;

    protected InventTransId inventTransId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyExchangeHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an initialized instance of the <c>CurrencyExchangeHelper</c> class for a source documentline implementation.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// The source document implementation.
    /// </param>
    /// <returns>
    /// An instance of the <c>CurrencyExchangeHelper</c> class.
    /// </returns>
    protected CurrencyExchangeHelper currencyExchangeHelper(Common _sourceDocumentLineImplementation)
    {
        SourceDocumentLineItem sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(_sourceDocumentLineImplementation);
        Ledger ledger = Ledger::findByLegalEntity(sourceDocumentLineItem.parmLegalEntityRecId());

        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(ledger.RecId, sourceDocumentLineItem.parmSourceDocumentLine().ExchangeRateDate);
        currencyExchangeHelper.parmExchangeRate1(sourceDocumentLineItem.parmExchangeRate1());
        currencyExchangeHelper.parmExchangeRate2(sourceDocumentLineItem.parmExchangeRate2());

        return currencyExchangeHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount to distribute to the quantity.
    /// </summary>
    /// <param name="_source">
    ///    The source of the amount.
    /// </param>
    /// <param name="_quantity">
    ///    The quantity.
    /// </param>
    /// <returns>
    ///    The amount to distribute to the quantity.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The quantity is larger than the remaining quantity.
    /// </exception>
    public CostAmount getAmount(CostEntrySource _source, InventQty _quantity)
    {
        CostAmount      amount;
        InventQty       remainingQuantity = this.getRemaningQuantity(_source);
        CostAmount      remainingAmount = this.getRemaningAmount(_source);

        if (Debug::debugMode())
        {
            Debug::assert(sign(remainingQuantity) == sign(_quantity));
        }

        if (_quantity == remainingQuantity)
        {
            amount = remainingAmount;
        }
        else if (abs(_quantity) < abs(remainingQuantity))
        {
            amount = CurrencyExchangeHelper::amount(remainingAmount / remainingQuantity * _quantity);
        }
        else
        {
            throw error(strFmt("@SCM:CurrentQtyLargerThanRemainingQty", _quantity, remainingQuantity));
        }

        remainingQuantity -= _quantity;
        remainingAmount -= amount;

        remainingQuantityMap.insert(_source, remainingQuantity);
        remainingAmountMap.insert(_source, remainingAmount);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemaningAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining amount for a <c>CostEntrySource</c>.
    /// </summary>
    /// <param name="_source">
    /// The instance of the <c>CostEntrySource</c>.
    /// </param>
    /// <returns>
    /// The remaining amount for a <c>CostEntrySource</c>.
    /// </returns>
    private InventQty getRemaningAmount(CostEntrySource _source)
    {
        CostAmount   amount;

        if (remainingAmountMap.exists(_source))
        {
            amount = remainingAmountMap.lookup(_source);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemaningQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining quantity for a <c>CostEntrySource</c>.
    /// </summary>
    /// <param name="_source">
    /// The instance of the <c>CostEntrySource</c>.
    /// </param>
    /// <returns>
    /// The remaining quantity for a <c>CostEntrySource</c>.
    /// </returns>
    private InventQty getRemaningQuantity(CostEntrySource _source)
    {
        InventQty   quantity;

        if (remainingQuantityMap.exists(_source))
        {
            quantity = remainingQuantityMap.lookup(_source);
        }

        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get an <c>Enumerator</c> with instances of the <c>CostEntrySource</c> class for the markup.
    /// </summary>
    /// <returns>
    /// An <c>Enumerator</c> with instances of the <c>CostEntrySource</c> class for the markup.
    /// </returns>
    public Enumerator getSourceEnumerator()
    {
        return remainingQuantityMap.keySet().getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalRemainingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining amount for all cost sources.
    /// </summary>
    /// <returns>
    /// The remaining amount for all cost sources.
    /// </returns>
    public CostAmount getTotalRemainingAmount()
    {
        CostAmount      amount;

        MapEnumerator enumerator = remainingAmountMap.getEnumerator();
        while (enumerator.moveNext())
        {
            amount += enumerator.currentValue();
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMaps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the maps.
    /// </summary>
    protected void initMaps()
    {
        remainingQuantityMap = new Map(Types::Class, Types::Real);
        remainingAmountMap = new Map(Types::Class, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the markup amount for a <c>MarkupTrans</c> buffer in accounting currency.
    /// </summary>
    /// <param name="_currencyExchangeHelper">
    /// An instance of the <c>CurrencyExchangeHelper</c> class.
    /// </param>
    /// <param name="_markupTrans">
    /// The <c>MarkupTrans</c> buffer.
    /// </param>
    /// <returns>
    /// The markup amount in accounting currency.
    /// </returns>
    protected CostAmount markupAmount(CurrencyExchangeHelper _currencyExchangeHelper, MarkupTrans _markupTrans)
    {
        CostAmount                  amount;

        MarkupTable markupTable = _markupTrans.markupTable();

        if (markupTable.CustType == MarkupType::Item ||
            markupTable.VendType == MarkupType::CustVend)
        {
            amount = _markupTrans.CalculatedAmount;
        }
        else
        {
            amount = -_markupTrans.CalculatedAmount;
        }

        return _currencyExchangeHelper.calculateTransactionToAccounting(_markupTrans.CurrencyCode, amount, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOriginId</Name>
				<Source><![CDATA[
    protected InventTransOriginId parmInventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        inventTransOriginId = _inventTransOriginId;

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;

        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    protected TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    protected Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>