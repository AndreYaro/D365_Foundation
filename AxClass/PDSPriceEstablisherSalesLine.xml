<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSPriceEstablisherSalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Establishes an adjusted unit price for sales order lines.
/// </summary>
class PDSPriceEstablisherSalesLine extends PDSPriceEstablisher
{
    SalesLine salesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>direction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the direction of calculation whether it is Sales or Purchase.
    /// </summary>
    /// <returns>
    ///     The direction of calculation.
    /// </returns>
    protected SalesPurch direction()
    {
        return SalesPurch::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the inventory transaction ID.
    /// </summary>
    /// <returns>
    ///     The inventory transaction ID.
    /// </returns>
    protected InventTransId inventTransId()
    {
        return salesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the lot ID of the item that is being returned.
    /// </summary>
    /// <returns>
    ///     The lot ID of the item being returned. If there is no return, then an empty string.
    /// </returns>
    protected InventTransIdReturn inventTransIdReturn()
    {
        return salesLine.InventTransIdReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the item ID.
    /// </summary>
    /// <returns>
    ///     The item ID.
    /// </returns>
    protected ItemId itemId()
    {
        return salesLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBaseBuffer</Name>
				<Source><![CDATA[
        public Common parmBaseBuffer(Common _baseBuffer = null)
    {
        if (!prmisDefault(_baseBuffer))
        {
            salesLine = _baseBuffer as SalesLine;
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pricingPrecision</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the pricing precision.
    /// </summary>
    /// <returns>
    ///     The pricing precision.
    /// </returns>
    protected PDSPricingPrecision pricingPrecision()
    {
        return salesLine.inventTable().inventTableModuleSales().PDSPricingPrecision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quantity.
    /// </summary>
    /// <returns>
    ///     The quantity.
    /// </returns>
    protected Qty qty()
    {
        InventTransIdSum    inventTransIdSum    = InventTransIdSum::newTransOriginId(InventTrans::findTransId(salesLine.InventTransId).InventTransOrigin);
        Qty qty;

        if (salesLine.SalesQty > 0)
        {
            qty = -inventTransIdSum.picked();

            if (!qty)
            {
                qty = -inventTransIdSum.deducted();
            }
        }
        else
        {
            qty = inventTransIdSum.registered();

            if (!qty)
            {
                qty = inventTransIdSum.received();
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInternalBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the internal buffer according to the specififed record ID
    /// </summary>
    /// <param name="_baseRecId">
    ///     The base record ID.
    /// </param>
    protected void setInternalBuffer(PDSCalculableOrderLineRecId _baseRecId)
    {
        salesLine = salesLine::findRecId(_baseRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the unit price.
    /// </summary>
    /// <returns>
    ///     The unit price.
    /// </returns>
    protected PriceCur unitPrice()
    {
        return salesLine.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PDSPriceEstablisherSalesLine construct()
    {
        return new PDSPriceEstablisherSalesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalculableOrderMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a <c>PDSPriceEstablisherSalesLine</c> object.
    /// </summary>
    /// <param name="_calculableOrderMap">
    ///     Table map representing one of the pricing calculation extension tables.
    /// </param>
    /// <returns>
    ///     A <c>PDSPriceEstablisherSalesLine</c> object.
    /// </returns>
    public static PDSPriceEstablisher newCalculableOrderMap(PDSCalculableOrderMap _calculableOrderMap)
    {
        PDSPriceEstablisher priceEstablisher = PDSPriceEstablisherSalesLine::construct();

        priceEstablisher.parmCalculableOrderMap(_calculableOrderMap);

        return priceEstablisher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>