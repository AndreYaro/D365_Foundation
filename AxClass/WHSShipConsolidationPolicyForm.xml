<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationPolicyForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConsolidationPolicyForm</c> class contains the business logic of the <c>WHSShipConsolidationPolicy</c> form.
/// </summary>
public class WHSShipConsolidationPolicyForm
{
    internal const WHSShipConsolidationPolicyName CrossOrderPolicyName = 'CrossOrder';
    internal const WHSShipConsolidationPolicyName DefaultPolicyName    = 'Default';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>WHSShipConsolidationPolicyForm</c>.
    /// </summary>
    /// <returns>
    /// An instance of <c>WHSShipConsolidationPolicyForm</c>.
    /// </returns>
    internal static WHSShipConsolidationPolicyForm construct()
    {
        return new WHSShipConsolidationPolicyForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonCopy_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies a shipment consolidation policy when Copy button is clicked.
    /// </summary>
    /// <param name="_shipConsolidationPolicy">
    /// The shipment consolidation policy record to be copied.
    /// </param>
    /// <returns>
    /// The copied shipment consolidation policy.
    /// </returns>
    internal WHSShipConsolidationPolicy buttonCopy_clicked(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        WHSShipConsolidationPolicy     ret;
        WHSShipConsolidationPolicyName newPolicyName;

        Dialog dlg = new Dialog(strFmt("@WAX:ShipmentConsolidationPolicyCopyDialogLabel", _shipConsolidationPolicy.ShipConsolidationPolicyName));
        dlg.formBuildDesign().dialogSize(DialogSize::Small);

        DialogField dlgField = dlg.addField(extendedTypeStr(WHSLocDirName), "@WAX:ShipmentConsolidationNewPolicyName");

        if (dlg.run())
        {
            newPolicyName = dlgField.value();
        }

        if (newPolicyName && !WHSShipConsolidationPolicy::exist(newPolicyName, _shipConsolidationPolicy.ShipConsolidationPolicyType))
        {
            ret = WHSShipConsolidationPolicy::copyShipConsolidationPolicy(
                _shipConsolidationPolicy.ShipConsolidationPolicyType,
                _shipConsolidationPolicy.ShipConsolidationPolicyName,
                newPolicyName);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorderPolicySequenceNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reorders the shipment consolidation policy sequence numbers so there are no gaps when consolidation policies are deleted.
    /// </summary>
    /// <param name="_policyType">A shipment consolidation policy type used to filter select to find shipment consolidation policies for the same type.</param>
    internal static void reorderPolicySequenceNumbers(WHSShipConsolidationPolicyType _policyType)
    {
        WHSShipConsolidationPolicy         shipConsolidationPolicy;
        WHSShipConsolidationPolicySeqNum   shipConsolidationPolicySeqNum;

        ttsbegin;

        while select forupdate shipConsolidationPolicy
            order by shipConsolidationPolicy.ShipConsolidationPolicySeqNum
            where shipConsolidationPolicy.ShipConsolidationPolicyType == _policyType
        {
            shipConsolidationPolicySeqNum++;

            if (shipConsolidationPolicy.ShipConsolidationPolicySeqNum != shipConsolidationPolicySeqNum)
            {
                shipConsolidationPolicy.ShipConsolidationPolicySeqNum = shipConsolidationPolicySeqNum;
                shipConsolidationPolicy.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpShipConsolidationPolicyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates Policy field table with fields with selected type.
    /// </summary>
    /// <param name="_whsShipConsolidationPolicy">
    /// Policy record.
    /// </param>
    /// <param name="_policyType">A shipment consolidation policy type.</param>
    /// <returns>
    /// Temporary <c>WHSPostMethod</c> record used to populate.
    /// </returns>
    internal WHSShipConsolidationPolicyField insertTmpShipConsolidationPolicyField(WHSShipConsolidationPolicy _whsShipConsolidationPolicy, WHSShipConsolidationPolicyType _policyType)
    {
        WHSShipConsolidationPolicyField tmpShipConsolidationPolicyField;

        tmpShipConsolidationPolicyField.setTmp();

        if (!_whsShipConsolidationPolicy.isNewRecord())
        {
            WHSShipConsolidationPolicyField shipConsolidationPolicyField;
            RecordInsertList                tmpShipConsolidationPolicyFieldInsertList = new RecordInsertList(tmpShipConsolidationPolicyField.TableId, true, true, true, true, true, tmpShipConsolidationPolicyField);
            Query                           query = WHSShipConsolidationPolicyProvider::buildProcessQueryFromPolicyType(_policyType);
            Query                           criteriaQuery = WHSShipConsolidationPolicyProvider::buildCriteriaQueryFromPolicyType(_policyType);

            ttsbegin;

            select nofetch shipConsolidationPolicyField
                where shipConsolidationPolicyField.ShipConsolidationPolicyName == _whsShipConsolidationPolicy.ShipConsolidationPolicyName
                &&    shipConsolidationPolicyField.ShipConsolidationPolicyType == _whsShipConsolidationPolicy.ShipConsolidationPolicyType;

            RecordViewCache shipConsolidationPolicyFieldViewCache = new RecordViewCache(shipConsolidationPolicyField);

            for (int dsNo = query.dataSourceCount(); dsNo>0; dsNo--)
            {
                QueryBuildDataSource qbDS = query.dataSourceNo(dsNo);

                if (qbDS.table() != tableNum(WHSShipmentTable))
                {
                    QueryBuildDataSource criteriaQBDS = criteriaQuery.dataSourceTable(qbDS.table());

                    if (!criteriaQBDS || criteriaQBDS.joinMode() == JoinMode::ExistsJoin || criteriaQBDS.joinMode() == JoinMode::NoExistsJoin)
                    {
                        continue;
                    }
                }

                tmpShipConsolidationPolicyField.clear();
                tmpShipConsolidationPolicyField.initValue();

                tmpShipConsolidationPolicyField.SourceTableName = tableId2Name(qbDS.table());
            
                DictTable dictTable = new DictTable(qbDS.table());
                FieldId fieldId = dictTable.fieldNext(0, TableScope::IncludeBaseTables);

                while (fieldId && ! isSysId(fieldId))
                {
                    tmpShipConsolidationPolicyField.clear();
                    tmpShipConsolidationPolicyField.initValue();

                    tmpShipConsolidationPolicyField.SourceTableName             = tableId2Name(qbDS.table());
                    tmpShipConsolidationPolicyField.SourceFieldName             = fieldId2Name(qbDS.table(), fieldId);
                    tmpShipConsolidationPolicyField.ShipConsolidationPolicyName = _whsShipConsolidationPolicy.ShipConsolidationPolicyName;
                    tmpShipConsolidationPolicyField.ShipConsolidationPolicyType = _whsShipConsolidationPolicy.ShipConsolidationPolicyType;

                    if (! tmpShipConsolidationPolicyField.isForbiddenShipConsolidationField(_whsShipConsolidationPolicy) && ! WHSShipConsolidationPolicyField::exist(tmpShipConsolidationPolicyField.ShipConsolidationPolicyName, tmpShipConsolidationPolicyField.ShipConsolidationPolicyType, tmpShipConsolidationPolicyField.SourceTableName, tmpShipConsolidationPolicyField.SourceFieldName))
                    {
                        tmpShipConsolidationPolicyFieldInsertList.add(tmpShipConsolidationPolicyField);
                    }

                    fieldId = dictTable.fieldNext(fieldId, TableScope::IncludeBaseTables);
                }
            }

            tmpShipConsolidationPolicyFieldInsertList.insertDatabase();

            ttscommit;
        }

        return tmpShipConsolidationPolicyField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefaultShipConsolidationPolicyFields</Name>
				<Source><![CDATA[
    internal void insertDefaultShipConsolidationPolicyFields(WHSShipConsolidationPolicy _whsShipConsolidationPolicy)
    {
        WHSShipConsolidationPolicyField shipConsolidationPolicyField;
        TableId                         tableId;
        FieldId                         fieldId;
        SetEnumerator                   fieldEnumerator = WHSShipConsolidationPolicyTypeProvider::singletonFromType(_whsShipConsolidationPolicy.ShipConsolidationPolicyType).defaultShipConsolidationPolicyFields(_whsShipConsolidationPolicy).getEnumerator();
        RecordInsertList                shipConsolidationPolicyFieldInsertList = new RecordInsertList(shipConsolidationPolicyField.TableId);

        ttsbegin;

        while (fieldEnumerator.moveNext())
        {
            [tableId, fieldId] = fieldEnumerator.current();

            shipConsolidationPolicyField.clear();
            shipConsolidationPolicyField.initValue();

            shipConsolidationPolicyField.SourceTableName             = tableId2Name(tableId);
            shipConsolidationPolicyField.SourceFieldName             = fieldId2Name(tableId, fieldId);
            shipConsolidationPolicyField.ShipConsolidationPolicyName = _whsShipConsolidationPolicy.ShipConsolidationPolicyName;
            shipConsolidationPolicyField.ShipConsolidationPolicyType = _whsShipConsolidationPolicy.ShipConsolidationPolicyType;

            shipConsolidationPolicyFieldInsertList.add(shipConsolidationPolicyField);
        }

        shipConsolidationPolicyFieldInsertList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDefaultPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates default policy.
    /// </summary>
    /// <param name = "_shipConsolidationPolicy">The shipment consolidation policies record.</param>
    /// <param name = "_fields">The shipment consolidation policy field list.</param>
    internal static void generateDefaultPolicy(WHSShipConsolidationPolicy _shipConsolidationPolicy, container _fields)
    {
        WHSShipConsolidationPolicyField shipConsolidationPolicyField;

        ttsbegin;

        _shipConsolidationPolicy.validatePolicy();

        if (!_shipConsolidationPolicy.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSShipConsolidationPolicy)));
        }
        else
        {
            _shipConsolidationPolicy.insert();

            for (int i = conLen(_fields); i>0; i--)
            {
                container tableField = conPeek(_fields, i);

                shipConsolidationPolicyField.clear();
                shipConsolidationPolicyField.initValue();
                shipConsolidationPolicyField.ShipConsolidationPolicyName = _shipConsolidationPolicy.ShipConsolidationPolicyName;
                shipConsolidationPolicyField.ShipConsolidationPolicyType = _shipConsolidationPolicy.ShipConsolidationPolicyType;
                shipConsolidationPolicyField.SourceTableName             = conPeek(tableField, 1);
                shipConsolidationPolicyField.SourceFieldName             = conPeek(tableField, 2);
                shipConsolidationPolicyField.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDefaultPolicyV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates default policy.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    [Hookable(false)]
    internal static void generateDefaultPolicyV2(WHSShipConsolidationPolicyData _shipConsolidationPolicyData)
    {
        if (!_shipConsolidationPolicyData)
        {
            return;
        }

        WHSShipConsolidationPolicy shipConsolidationPolicy = _shipConsolidationPolicyData.parmShipConsolidationPolicy();

        ttsbegin;

        shipConsolidationPolicy.validatePolicy();

        if (!shipConsolidationPolicy.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSShipConsolidationPolicy)));
        }
        else
        {
            shipConsolidationPolicy.insert();

            ListEnumerator listEnumerator = _shipConsolidationPolicyData.shipConsolidationPolicyFields().getEnumerator();

            while (listEnumerator.moveNext())
            {
                WHSShipConsolidationPolicyFieldData shipConsolidationPolicyFieldData = listEnumerator.current();
                WHSShipConsolidationPolicyField     shipConsolidationPolicyField = shipConsolidationPolicyFieldData.getShipConsolidationPolicyField();

                shipConsolidationPolicyField.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDefaultPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates default policies.
    /// </summary>
    [Wrappable(true)]
    internal static void generateDefaultPolicies()
    {
        WHSShipConsolidationPolicyCreator shipConsolidationPolicyCreator = WHSShipConsolidationPolicyCreator::newFromPolicyCreateDefaultType(WHSShipConsolidationPolicyCreateApproach::UIButton);

        WHSShipConsolidationPolicyForm::generateDefaultPolicyV2(shipConsolidationPolicyCreator.createPolicyData(CrossOrderPolicyName, WHSShipConsolidationPolicyType::Sales,         "@WAX:DefaultCrossSalesOrderPolicy",    true));
        WHSShipConsolidationPolicyForm::generateDefaultPolicyV2(shipConsolidationPolicyCreator.createPolicyData(DefaultPolicyName,    WHSShipConsolidationPolicyType::Sales,         "@WAX:DefaultPolicy",                   false));
        WHSShipConsolidationPolicyForm::generateDefaultPolicyV2(shipConsolidationPolicyCreator.createPolicyData(CrossOrderPolicyName, WHSShipConsolidationPolicyType::TransferIssue, "@WAX:DefaultCrossTransferOrderPolicy", true));
        WHSShipConsolidationPolicyForm::generateDefaultPolicyV2(shipConsolidationPolicyCreator.createPolicyData(DefaultPolicyName,    WHSShipConsolidationPolicyType::TransferIssue, "@WAX:DefaultPolicy",                   false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultPolicy</Name>
				<Source><![CDATA[
    private static void createDefaultPolicy(str _policyName, WHSShipConsolidationPolicyType _policyType, str _policyDescription, boolean _isCrossOrder)
    {
        if (WHSShipConsolidationPolicy::exist(_policyName, _policyType))
        {
            warning (strFmt("@WAX:ShipmentConsolidationDefaultCreationFailed", _policyName, _policyType));
            return;
        }
        
        WHSShipConsolidationPolicy shipConsolidationPolicy;
        WHSShipConsolidationPolicyForm::initPolicy(shipConsolidationPolicy, _policyName, _policyType, _policyDescription);

        if (!_isCrossOrder)
        {
            WHSShipConsolidationPolicyForm::generateDefaultPolicy(shipConsolidationPolicy,
                                                                WHSShipConsolidationPolicyForm::defaultFieldsForPolicy(_policyType, _isCrossOrder));
        }
        else
        {
            SysQueryRun queryRun = new SysQueryRun(shipConsolidationPolicy.ShipConsolidationPolicyQuery);
            QueryBuildRange inventLocationRange = WHSShipConsolidationPolicyForm::generateShipConsolidationPolicyQuery(queryRun);

            if (inventLocationRange && inventLocationRange.value())
            {
                shipConsolidationPolicy.ShipConsolidationPolicyQuery = queryRun.pack();

                WHSShipConsolidationPolicyForm::generateDefaultPolicy(shipConsolidationPolicy,
                                                                    WHSShipConsolidationPolicyForm::defaultFieldsForPolicy(_policyType, _isCrossOrder));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPolicy</Name>
				<Source><![CDATA[
    private static void initPolicy(WHSShipConsolidationPolicy _policy, str _policyName, WHSShipConsolidationPolicyType _policyType, str _policyDescription)
    {
        _policy.clear();
        _policy.initValue();
        _policy.initFromPolicyType(_policyType);
        _policy.ShipConsolidationPolicyName = _policyName;
        _policy.ShipConsolidationPolicyDesc = _policyDescription;
        _policy.ConsolidateWithExistingShipments = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFieldsForPolicy</Name>
				<Source><![CDATA[
    private static container defaultFieldsForPolicy(WHSShipConsolidationPolicyType _policyType, boolean _isCrossOrder)
    {
        container fields;

        switch(_policyType)
        {
            case WHSShipConsolidationPolicyType::Sales:
                fields = [[tableStr(WHSShipmentTable), fieldStr(WHSShipmentTable, AccountNum)],
                          [tableStr(WHSShipmentTable), fieldStr(WHSShipmentTable, DeliveryName)],
                          [tableStr(WHSShipmentTable), fieldStr(WHSShipmentTable, DeliveryPostalAddress)],
                          [tableStr(WHSShipmentTable), fieldStr(WHSShipmentTable, InventLocationId)],
                          [tableStr(WHSShipmentTable), fieldStr(WHSShipmentTable, ModeCode)]];
                if (!_isCrossOrder)
                {
                    fields += [[tableStr(WHSShipmentTable), fieldStr(WHSShipmentTable, OrderNum)]];
                }
                break;

            case WHSShipConsolidationPolicyType::TransferIssue:
                fields = [[tableStr(InventTransferTable), fieldStr(InventTransferTable, InventLocationIdFrom)],
                          [tableStr(InventTransferTable), fieldStr(InventTransferTable, InventLocationIdTo)]];
                if (!_isCrossOrder)
                {
                    fields += [[tableStr(InventTransferTable), fieldStr(InventTransferTable, TransferId)]];
                }
                break;
        }
        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateShipConsolidationPolicyQuery</Name>
				<Source><![CDATA[
    private static QueryBuildRange generateShipConsolidationPolicyQuery(SysQueryRun _queryRun)
    {
        QueryBuildDataSource inventLocationDS = _queryRun.query().dataSourceTable(tableNum(InventDim));
        inventLocationDS.clearRange((fieldNum(InventDim, InventLocationId)));

        InventLocation inventLocation;

        while select InventLocationId from inventLocation
                where inventLocation.ConsolidateShipAtRTW
        {
            inventLocationDS.addRange(fieldNum(InventDim, InventLocationId)).value(SysQuery::value(inventLocation.InventLocationId));
        }

        return inventLocationDS.findRange(fieldNum(InventDim, InventLocationId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>