<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ResCalendarCapacitySynchronizationTask</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// Synchronizes capacity for specific calendar and resources that use that calendar.
/// </summary>
class ResCalendarCapacitySynchronizationTask extends ResCapacitySynchronizationTask implements BatchRetryable
{
    #OCCRetryCount

    CalendarId calendarId;
    DataAreaId calendarDataAreaId;
    DialogField dialogCalendarId;
    
    const Integer CurrentVersion = 2;

    #LOCALMACRO.CurrentList
        calendarId,
        fromDate,
        toDate,
        periodCode,
        calendarDataAreaId
    #ENDMACRO

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>readFromDialog</Name>
        <Source><![CDATA[
    protected void readFromDialog()
    {
        super();

        calendarId = dialogCalendarId.value();
    }

]]></Source>
      </Method>
      <Method>
        <Name>addControlsToDialog</Name>
        <Source><![CDATA[
    protected void addControlsToDialog(DialogRunbase _dialog)
    {
        dialogCalendarId = _dialog.addFieldValue(extendedTypeStr(CalendarId), calendarId, "@Res:CalendarId");
        super(_dialog);
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmCalendarId</Name>
        <Source><![CDATA[
    public CalendarId parmCalendarId(calendarId _calendarId = calendarId)
    {
        calendarId = _calendarId;
        return calendarId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmCalendarDataAreaId</Name>
        <Source><![CDATA[
    public DataAreaId parmCalendarDataAreaId(DataAreaId _dataAreaIdCalendar = calendarDataAreaId)
    {
        calendarDataAreaId = _dataAreaIdCalendar;
        return calendarDataAreaId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>pack</Name>
        <Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
      </Method>
      <Method>
        <Name>unpack</Name>
        <Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conPeek(packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>construct</Name>
        <Source><![CDATA[
    public static ResCalendarCapacitySynchronizationTask construct()
    {
        return new ResCalendarCapacitySynchronizationTask();
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    public void run()
    {
        ResICalendarInfoResolver resolver = ResCalendarInfoCache::initializeNew();

        calendarDataAreaId = calendarDataAreaId ? calendarDataAreaId : curExt();

        changecompany(calendarDataAreaId)
        {
            ResCalendarInfo calendarObject = resolver.getCalendarInfoByCalendarId(calendarId);

            if (calendarObject)
            {
                this.initDates(false);

                boolean calendarSynchronized = this.tryCopyCalendarCapacity(calendarObject, resolver);

                if (calendarSynchronized)
                {
                    DataAreaId calendarDataArea = WorkCalendarTable::findByRecId(calendarObject.parmCalendarRecId()).DataAreaId;
                    info(strfmt("@Res:CalendarCapacitySynchronizationComplete", calendarId, strUpr(calendarDataArea)));
                }
            }
            else
            {
                warning(strfmt("@Res:CalendarIdNotFound", calendarId));
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>tryCopyCalendarCapacity</Name>
        <Source><![CDATA[
    private boolean tryCopyCalendarCapacity(ResCalendarInfo calendarObject, ResICalendarInfoResolver _resolver)
    {
        boolean synchronized = false;

        try
        {
            ttsBegin;

            ResCalendarCapacityHourSliceGateway::construct().deleteCapacitySlicesForDates(calendarObject.parmCalendarRecId(), fromDate, toDate);

            ResCalendarCapacityCopier calendarCapacityCopier = ResCalendarCapacityCopier::newFromParameters(_resolver, ResCalendarDateCapacityWriter::construct(true));
            calendarCapacityCopier.copyCalendarCapacity(calendarObject, fromDate, toDate);

            ttsCommit;

            synchronized = true;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch(Exception::Error)
        {
            throw Exception::Error;
        }

        return synchronized;
    }

]]></Source>
      </Method>
      <Method>
        <Name>description</Name>
        <Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Res:CalendarCapacitySynchronization";
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args _args)
    {
        var task = ResCalendarCapacitySynchronizationTask::construct();

        if (task.prompt())
        {
            task.runOperation();
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>canRunInNewSession</Name>
        <Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>