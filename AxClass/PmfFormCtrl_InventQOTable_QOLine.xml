<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_InventQOTable_QOLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>InventQualityOrderLine</c> datasource
/// of the <c>InventQualityOrderTable</c> form
/// </summary>
public class PmfFormCtrl_InventQOTable_QOLine extends PmfFormCtrl
{
    InventQualityOrderLine inventQualityOrderLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the lookup for the fields on the <c>InventQualityOrderLine</c> record
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field to handle the lookup for
    /// </param>
    /// <param name="_formControl">
    /// The formcontrol initiating the lookup
    /// </param>
    /// <param name="_filterStr">
    /// Additional filter for the lookup
    /// </param>
    public void fieldLookup(fieldId _fieldId, FormControl _formControl, str _filterStr)
    {
        super(_fieldId, _formControl, _filterStr);

        switch (_fieldId)
        {
            case fieldnum(InventQualityOrderLine, PdsBatchAttribId):
                InventQualityOrderLine::pdsLookupBatchAttribValue(
                    _formControl,
                    inventQualityOrderLine.PdsBatchAttribId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the modification of fields for the <c>InventQualityOrderLine</c> datasource
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field that has changed
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(InventQualityOrderLine, PdsBatchAttribId):
            case fieldnum(InventQualityOrderLine, PdsBatchAttribOverride):
                this.updateDesign();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do some additional field validations for fields on the
    /// <c>InventQualityOrderLine</c> record
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field to validate
    /// </param>
    /// <returns>
    /// true, if the validation succeeds
    /// </returns>
    public boolean fieldValidate(fieldId _fieldId)
    {
        boolean                 ret;
        InventQualityOrderLine  oldOrderLine;

        ret = super(_fieldId);

        if (ret)
        {
            switch (_fieldId)
            {
                case fieldnum(InventQualityOrderLine, PdsBatchAttribId):
                    if (inventQualityOrderLine.PdsAttribValue)
                    {
                        select firstonly PdsBatchAttribId
                            from oldOrderLine
                            where oldOrderLine.RecId
                                == inventQualityOrderLine.RecId;

                        if (oldOrderLine.PdsBatchAttribId
                            && Box::yesNo(
                                strfmt(
                                    "@PDS1038",
                                    oldOrderLine.PdsBatchAttribId,
                                    inventQualityOrderLine.PdsBatchAttribId),
                                DialogButton::No,"@PRO1666") == DialogButton::No)
                        {
                            ret = false;
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(InventQualityOrderLine))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        inventQualityOrderLine = _datasources1;

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    public void updateDesign()
    {
        InventTestGroupMember   inventTestGroupMember;
        PdsBatchAttrib          pdsBatchAttrib;
        FormLookupButton        attributeValueLookupButton = FormLookupButton::Hidden;
        FormStringControl       pdsQualityLineAttributes_PdsAttribValueControl;
        FormStringControl       inventQualityOrderLineAttributesGroup_PdsAttribValueControl;

        if (#PdsBatchAttribEnabled)
        {
            if (inventQualityOrderLine.QualityOrderId)
            {
                inventTestGroupMember
                    = InventTestGroupMember::findCurrentActiveTest(
                        inventQualityOrderLine.inventQualityOrderTable().TestGroupId,
                        inventQualityOrderLine.TestId);
            }

            this.enableDSField(
                fieldnum(InventQualityOrderLine, PdsBatchAttribOverride),
                inventTestGroupMember.TestId != '');

            this.enableDSField(
                fieldnum(InventQualityOrderLine, PdsBatchAttribId),
                inventTestGroupMember.TestId != '');

            if (inventQualityOrderLine.PdsBatchAttribId)
            {
                // If batch attribute is of type enumeration then lookup button on the attribute value can be shown;
                // otherwise, it should be hidden.
                pdsBatchAttrib  = PdsBatchAttrib::find(inventQualityOrderLine.PdsBatchAttribId);
                if (pdsBatchAttrib.PdsBatchAttribType == PdsBatchAttribType::Enumerate)
                {
                    attributeValueLookupButton  = FormLookupButton::Auto;
                }
            }

            pdsQualityLineAttributes_PdsAttribValueControl  = this.parmFormRun()
                .design()
                .controlName(formControlStr(InventQualityOrderTable,PdsQualityLineAttributes_PdsBatchAttribValue)) as FormStringControl;
            pdsQualityLineAttributes_PdsAttribValueControl.enabled(inventTestGroupMember.TestId != '');
            pdsQualityLineAttributes_PdsAttribValueControl.lookupButton(attributeValueLookupButton);

            inventQualityOrderLineAttributesGroup_PdsAttribValueControl = this.parmFormRun()
                .design()
                .controlName(formControlStr(InventQualityOrderTable,InventQualityOrderLineAttributesGroup_PdsBatchAttribValue)) as FormStringControl;
            inventQualityOrderLineAttributesGroup_PdsAttribValueControl.enabled(inventTestGroupMember.TestId != '');
            inventQualityOrderLineAttributesGroup_PdsAttribValueControl.lookupButton(attributeValueLookupButton);

            //
            // enable/disable the two orderline result controls
            //
            this.parmFormRun()
                .design()
                .controlName(formControlStr(InventQualityOrderTable,PdsQualityLineAttributes_PdsSetOrderLineResult))
                .enabled(inventTestGroupMember.TestId
                        && inventQualityOrderLine.PdsBatchAttribOverride
                        && inventTestGroupMember.PdsTestResultValueDerivation
                            == PdsTestResultValueDerivation::Manual);
            this.parmFormRun()
                .design()
                .controlName(formControlStr(InventQualityOrderTable,InventQualityOrderLineAttributesGroup_PdsSetOrderLineResult))
                .enabled(inventTestGroupMember.TestId
                        && inventQualityOrderLine.PdsBatchAttribOverride
                        && inventTestGroupMember.PdsTestResultValueDerivation
                            == PdsTestResultValueDerivation::Manual);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PmfFormCtrl_InventQOTable_QOLine construct()
    {
        return new PmfFormCtrl_InventQOTable_QOLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_InventQOTable_QOLine newFromForm(
        FormRun _fr)
    {
        PmfFormCtrl_InventQOTable_QOLine frmCtrl;

        frmCtrl = PmfFormCtrl_InventQOTable_QOLine::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>