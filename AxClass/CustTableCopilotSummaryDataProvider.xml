<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTableCopilotSummaryDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Xrm.Sdk;
using System.Globalization;

/// <summary>
/// Data provider for feature 'Customer page summary' (CustTableCopilotSummaryFeature).
/// </summary>
internal final class CustTableCopilotSummaryDataProvider
{
    private CustTable custTable;
    private str apiCalled;

    private static date today = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    private static date todayOfPrevYr = prevYr(today);
    private static utcdatetime startTimePrevYr = DateTimeUtil::newDateTime(todayOfPrevYr, 0);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromCustTableAndAPICalled</Name>
				<Source><![CDATA[
    internal static CustTableCopilotSummaryDataProvider newFromCustTableAndAPICalled(CustAccount _custAccount, str _apiCalled)
    {
        CustTableCopilotSummaryDataProvider dataProvider;

        if (_custAccount == '' || _apiCalled == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        dataProvider = new CustTableCopilotSummaryDataProvider();
        dataProvider.custTable = CustTable::find(_custAccount);
        dataProvider.apiCalled = _apiCalled;

        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildParameterCollection</Name>
				<Source><![CDATA[
    internal ParameterCollection buildParameterCollection()
    {
        ParameterCollection parameterCollection = new ParameterCollection();
        parameterCollection.Add(CustTableCopilotSummaryConstants::Language, currentUserLanguage());

        Entity entity;

        if (apiCalled == CustTableCopilotSummaryConstants::CustomerStatusSummaryWebAPIName)
        {
            entity = this.buildCustomerInfoEntityForStatus();
        }
        else if (apiCalled == CustTableCopilotSummaryConstants::CustomerInsightsSummaryWebAPIName)
        {
            entity = this.buildCustomerInfoEntityForInsights();
        }

        parameterCollection.Add(CustTableCopilotSummaryConstants::CustomerInfoEntity, entity);

        return parameterCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCustomerInfoEntityForStatus</Name>
				<Source><![CDATA[
    public Entity buildCustomerInfoEntityForStatus()
    {
        Entity entity = new Entity();
        AttributeCollection attributeCollection = entity.Attributes;

        boolean hasCustTransPermission = hasMenuItemAccess(menuItemDisplayStr(CustTrans), MenuItemType::Display);
        boolean hasSalesTablePermission = hasMenuItemAccess(menuItemDisplayStr(SalesTable), MenuItemType::Display);
        boolean hasSalesAgreementPermission = hasMenuItemAccess(menuItemDisplayStr(SalesAgreementListPage), MenuItemType::Display);
        boolean hasPdsRebateAgreementPermission = hasMenuItemAccess(menuItemDisplayStr(PDSRebateAgreements), MenuItemType::Display);

        if (CustTableCopilotSummaryDataProvider::isCustomerOnhold(custTable))
        {
            attributeCollection.Add(CustTableCopilotSummaryConstants::CustomerStatus, SysLabel::labelId2String(literalstr("@SYS103075")));
        }

        attributeCollection.Add(CustTableCopilotSummaryConstants::DataRange, CustTableCopilotSummaryConstants::LastOneYear);

        if (hasCustTransPermission)
        {
            attributeCollection = this.addCustTransInfoAttributeForStatus(attributeCollection);
        }

        if (hasSalesTablePermission)
        {
            attributeCollection = this.addSalesOrderInfoAttributeForStatus(attributeCollection);
        }
        
        if (hasSalesAgreementPermission)
        {
            attributeCollection = this.addSalesAgreementInfoAttributeForStatus(attributeCollection);
        }

        if (hasPdsRebateAgreementPermission)
        {
            attributeCollection = this.addRebateAgreementInfoAttributeForStatus(attributeCollection);
        }

        return entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCustomerInfoEntityForInsights</Name>
				<Source><![CDATA[
    public Entity buildCustomerInfoEntityForInsights()
    {
        Entity entity = new Entity();
        AttributeCollection attributeCollection = entity.Attributes;

        boolean hasCustTransPermission = hasMenuItemAccess(menuItemDisplayStr(CustTrans), MenuItemType::Display);
        boolean hasSalesTablePermission = hasMenuItemAccess(menuItemDisplayStr(SalesTable), MenuItemType::Display);
        
        attributeCollection.Add(CustTableCopilotSummaryConstants::DataRange, CustTableCopilotSummaryConstants::LastOneYear);

        if (hasCustTransPermission)
        {
            attributeCollection = this.addCustTransInfoAttributeForInsights(attributeCollection);
        }

        if (hasSalesTablePermission)
        {
            attributeCollection = this.addSalesOrderInfoAttributeForInsights(attributeCollection);
        }

        return entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustTransInfoAttributeForStatus</Name>
				<Source><![CDATA[
    private AttributeCollection addCustTransInfoAttributeForStatus(AttributeCollection _attributeCollection)
    {
        AttributeCollection attributeCollection = _attributeCollection;

        // 1. Invoices info
        container invoicesInfo = this.getInvoicesInfo();
        attributeCollection.Add(CustTableCopilotSummaryConstants::InvoicesCount, any2Int(conPeek(invoicesInfo, 1)));
        attributeCollection.Add(CustTableCopilotSummaryConstants::InvoicesAmountMST, this.amountMSTString(conPeek(invoicesInfo, 2)));
        attributeCollection.Add(CustTableCopilotSummaryConstants::OutstandingBalanceMST, this.amountMSTString(conPeek(invoicesInfo, 3)));

        // 2. Payments info
        container paymentsInfo = this.getPaymentsInfo();
        attributeCollection.Add(CustTableCopilotSummaryConstants::PaymentsCount, any2Int(conPeek(paymentsInfo, 1)));
        attributeCollection.Add(CustTableCopilotSummaryConstants::PaymentsAmountMST, this.amountMSTString(conPeek(paymentsInfo, 2)));
        attributeCollection.Add(CustTableCopilotSummaryConstants::UnsettledAmountMST, this.amountMSTString(conPeek(paymentsInfo, 3)));

        return attributeCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustTransInfoAttributeForInsights</Name>
				<Source><![CDATA[
    private AttributeCollection addCustTransInfoAttributeForInsights(AttributeCollection _attributeCollection)
    {
        AttributeCollection attributeCollection = _attributeCollection;

        // OverDue invoices info
        container overdueInvoicesInfo = this.getOverdueInvoicesInfo();
        attributeCollection.Add(CustTableCopilotSummaryConstants::OverdueInvoicesCount, any2Int(conPeek(overdueInvoicesInfo, 1)));
        attributeCollection.Add(CustTableCopilotSummaryConstants::OverdueInvoicesAmountMST, this.amountMSTString(conPeek(overdueInvoicesInfo, 2)));
        attributeCollection.Add(CustTableCopilotSummaryConstants::OverdueMaxDays, any2Int(conPeek(overdueInvoicesInfo, 3)));
        attributeCollection.Add(CustTableCopilotSummaryConstants::OverdueMaxDaysInvoiceNum, any2Str(conPeek(overdueInvoicesInfo, 4)));
        attributeCollection.Add(CustTableCopilotSummaryConstants::OverdueMaxAmountMST, this.amountMSTString(conPeek(overdueInvoicesInfo, 5)));
        attributeCollection.Add(CustTableCopilotSummaryConstants::OverdueMaxAmountMSTInvoiceNum, any2Str(conPeek(overdueInvoicesInfo, 6)));

        return attributeCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesOrderInfoAttributeForStatus</Name>
				<Source><![CDATA[
    private AttributeCollection addSalesOrderInfoAttributeForStatus(AttributeCollection _attributeCollection)
    {
        AttributeCollection attributeCollection = _attributeCollection;

        // 1. Invoiced sales order
        container salesOrderInvoicedInfo = this.getSalesOrderInvoicedInfo();
        attributeCollection.Add(CustTableCopilotSummaryConstants::SOInvoicedCount, any2Int(conPeek(salesOrderInvoicedInfo, 1)));
        attributeCollection.Add(CustTableCopilotSummaryConstants::SOInvoicedAmountMST, this.amountMSTString(conPeek(salesOrderInvoicedInfo, 2)));

        // 2. Delivered sales order
        attributeCollection.Add(CustTableCopilotSummaryConstants::SODeliveredCount, this.getSalesOrderDeliveredCount());

        // 3. Open sales order
        attributeCollection.Add(CustTableCopilotSummaryConstants::SOOpenCount, this.getSalesOrderOpenCount());

        return attributeCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesOrderInfoAttributeForInsights</Name>
				<Source><![CDATA[
    private AttributeCollection addSalesOrderInfoAttributeForInsights(AttributeCollection _attributeCollection)
    {
        AttributeCollection attributeCollection = _attributeCollection;

        // 1. Delayed order lines count
        attributeCollection.Add(CustTableCopilotSummaryConstants::SODelayedLinesCount, this.getDelayedOrderLinesCount());

        // 2. Sales order invoiced but not confirmed
        attributeCollection.Add(CustTableCopilotSummaryConstants::SalesOrderNotConfirmedButInvoicedCount, this.getSalesOrderNotConfirmedButInvoicedCount());

        return attributeCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesAgreementInfoAttributeForStatus</Name>
				<Source><![CDATA[
    private AttributeCollection addSalesAgreementInfoAttributeForStatus(AttributeCollection _attributeCollection)
    {
        AttributeCollection attributeCollection = _attributeCollection;

        container salesAgreementInfo = this.getSalesAgreementInfo();
        attributeCollection.Add(CustTableCopilotSummaryConstants::SalesAgreementOnHoldCount, any2Int(conPeek(salesAgreementInfo, 1)));
        attributeCollection.Add(CustTableCopilotSummaryConstants::SalesAgreementEffectiveCount, any2Int(conPeek(salesAgreementInfo, 2)));

        return attributeCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRebateAgreementInfoAttributeForStatus</Name>
				<Source><![CDATA[
    private AttributeCollection addRebateAgreementInfoAttributeForStatus(AttributeCollection _attributeCollection)
    {
        AttributeCollection attributeCollection = _attributeCollection;

        attributeCollection.Add(CustTableCopilotSummaryConstants::RebateAgreementActiveCount, this.getPdsRebateAgreementActiveCount());
        
        return attributeCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAnyCustomerDataBeAnalyzed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the customer has data to make customer copilot summary data analyse.
    /// </summary>
    /// <param name = "_custTable">
    /// The customer record.
    /// </param>
    /// <returns>
    /// true if the customer has data to make customer copilot summary data analyse, otherwise, false.
    /// </returns>
    public static boolean canAnyCustomerDataBeAnalyzed(CustTable _custTable)
    {
        return CustTableCopilotSummaryDataProvider::canSalesTableDataBeAnalyzed(_custTable)
            || CustTableCopilotSummaryDataProvider::canCustTransDataBeAnalyzed(_custTable)
            || CustTableCopilotSummaryDataProvider::canSalesAgreementDataBeAnalyzed(_custTable)
            || CustTableCopilotSummaryDataProvider::canPDSRebateAgreementsDataBeAnalyzed(_custTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCustTransDataBeAnalyzed</Name>
				<Source><![CDATA[
    private static boolean canCustTransDataBeAnalyzed(CustTable _custTable)
    {
        boolean ret = false;

        if (hasMenuItemAccess(menuItemDisplayStr(CustTrans), MenuItemType::Display))
        {
            CustTrans custTrans;

            select firstonly1 RecId from custTrans
                where custTrans.AccountNum == _custTable.AccountNum
                    && custTrans.TransDate >= todayOfPrevYr
                    && custTrans.TransDate <= today;

            if (custTrans.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSalesTableDataBeAnalyzed</Name>
				<Source><![CDATA[
    private static boolean canSalesTableDataBeAnalyzed(CustTable _custTable)
    {
        boolean ret = false;

        if (hasMenuItemAccess(menuItemDisplayStr(SalesTable), MenuItemType::Display))
        {
            SalesTable salesTable;

            select firstonly1 RecId from salesTable
                where salesTable.CustAccount == _custTable.AccountNum
                    && salesTable.CreatedDateTime >= startTimePrevYr;

            if (salesTable.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSalesAgreementDataBeAnalyzed</Name>
				<Source><![CDATA[
    private static boolean canSalesAgreementDataBeAnalyzed(CustTable _custTable)
    {
        boolean ret = false;

        if (hasMenuItemAccess(menuItemDisplayStr(SalesAgreementListPage), MenuItemType::Display))
        {
            SalesAgreementHeader salesAgreementHeader;

            select firstonly1 RecId from salesAgreementHeader
                where salesAgreementHeader.CustAccount == _custTable.AccountNum
                    && salesAgreementHeader.CustomerDataAreaId == _custTable.DataAreaId;

            if (salesAgreementHeader.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPDSRebateAgreementsDataBeAnalyzed</Name>
				<Source><![CDATA[
    private static boolean canPDSRebateAgreementsDataBeAnalyzed(CustTable _custTable)
    {
        boolean ret = false;

        if (hasMenuItemAccess(menuItemDisplayStr(PDSRebateAgreements), MenuItemType::Display))
        {
            PdsRebateAgreement pdsRebateAgreement;
 
            select firstonly1 RecId from pdsRebateAgreement
                where (pdsRebateAgreement.PdsCustRebateCode == TableGroupAll::All
                    || (_custTable.PdsCustRebateGroupId && pdsRebateAgreement.PdsCustRebateCode == TableGroupAll::GroupId && pdsRebateAgreement.PdsCustRebateRelation == _custTable.PdsCustRebateGroupId)
                    || (pdsRebateAgreement.PdsCustRebateCode == TableGroupAll::Table && pdsRebateAgreement.PdsCustRebateRelation == _custTable.AccountNum));
 
            if (pdsRebateAgreement.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicesInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customer invoices information invoiced in the past year.
    /// </summary>
    /// <returns>
    /// A container object :
    ///     1. Total invoiced transactions count,
    ///     2. Total invoiced amount in accounting currency,
    ///     3. Total outstanding balance amount in accounting currency.
    /// </returns>
    private container getInvoicesInfo()
    {
        CustTrans custTrans;
        CustInvoiceJour custInvoiceJour;
        ProjInvoiceJour projInvoiceJour;

        select count(RecId), sum(AmountMST), sum(ExchAdjustment), sum(SettleAmountMST) from custTrans
            where custTrans.AccountNum == custTable.AccountNum
                && custTrans.TransDate >= todayOfPrevYr
                && custTrans.TransDate <= today
            join RecId from custInvoiceJour
                where custInvoiceJour.InvoiceId == custTrans.Invoice
                    && custInvoiceJour.InvoiceDate == custTrans.TransDate
                    && custInvoiceJour.InvoiceAccount == custTrans.AccountNum
                    && custInvoiceJour.LedgerVoucher == custTrans.Voucher;

        Counter invoiceCount = any2int(custTrans.RecId);
        AmountMST invoiceAmtMST= custTrans.AmountMST;
        AmountMST outstandingBalanceMST= custTrans.AmountMST + custTrans.ExchAdjustment - custTrans.SettleAmountMST; // Follow CustTrans.remainAmountMST() method.

        custTrans.clear();

        select count(RecId), sum(AmountMST), sum(ExchAdjustment), sum(SettleAmountMST) from custTrans
            where custTrans.AccountNum == custTable.AccountNum
                && custTrans.TransDate >= todayOfPrevYr
                && custTrans.TransDate <= today
            join RecId from projInvoiceJour
                where projInvoiceJour.InvoiceAccount == custTrans.AccountNum
                    && projInvoiceJour.InvoiceDate == custTrans.TransDate
                    && projInvoiceJour.ProjInvoiceId == custTrans.Invoice
                    && projInvoiceJour.LedgerVoucher == custTrans.Voucher;

        invoiceCount += any2int(custTrans.RecId);
        invoiceAmtMST += custTrans.AmountMST;
        outstandingBalanceMST += (custTrans.AmountMST + custTrans.ExchAdjustment - custTrans.SettleAmountMST);

        return [invoiceCount, invoiceAmtMST, outstandingBalanceMST];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentsInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customer payments information paid in the past year.
    /// </summary>
    /// <returns>
    /// A container object :
    ///     1. Total payment transactions count,
    ///     2. Total payment amount in accounting currency,
    ///     3. Total unsettled amount in accounting currency.
    /// </returns>
    private container getPaymentsInfo()
    {
        CustTrans custTrans;

        select count(RecId), sum(AmountMST), sum(ExchAdjustment), sum(SettleAmountMST) from custTrans
            where custTrans.AccountNum == custTable.AccountNum
                && custTrans.TransType == LedgerTransType::Payment
                && custTrans.TransDate >= todayOfPrevYr
                && custTrans.TransDate <= today;

        int64 paymentCount = custTrans.RecId;
        AmountMST paymAmtMST = custTrans.AmountMST * -1;
        AmountMST unsettledAmtMST = (custTrans.AmountMST + custTrans.ExchAdjustment - custTrans.SettleAmountMST) * -1;

        return [paymentCount, paymAmtMST, unsettledAmtMST];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverdueInvoicesInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets overdue amount for the customer for transactions posted in the past year.
    /// </summary>
    /// <returns>
    /// A container object :
    ///     1. Total overdue transactions count,
    ///     2. Total overdue trasnactions amount,
    ///     3. Maximum number of overdue transaction days,
    ///     4. Invoice ID of the maximum overdue transaction,
    ///     5. Maximum amount of overdue transaction days,
    ///     6. Invoice ID of the maximum overdue amount transaction.
    /// </returns>
    private container getOverdueInvoicesInfo()
    {
        CustTransOpen custTransOpen;
        CustTrans custTrans;

        // Get the total amount due and record count for the customer
        select count(RecId), sum(AmountMST) from custTransOpen
            where custTransOpen.AccountNum == custTable.AccountNum
                && custTransOpen.DueDate < today
                join RecId, Invoice from custTrans
                where custTrans.AccountNum == custTable.AccountNum
                    && custTrans.RecId == custTransOpen.RefRecId
                    && custTrans.Invoice != ''
                    && custTrans.TransDate >= todayOfPrevYr;

        AmountMST overDueTotalAmountMST = custTransOpen.AmountMST;
        int64 recordCount = custTransOpen.RecId;

        int64 overDueDateMax = 0;
        InvoiceId overDueDateMaxInvoiceId;

        AmountMST overDueMaxAmountMST = 0;
        InvoiceId overDueMaxAmountInvoiceId;

        if (recordCount)
        {
            // Get maximum overdue date
            custTransOpen.clear();
            custTrans.clear();

            select firstonly DueDate, AmountMST from custTransOpen
                order by custTransOpen.DueDate asc
                where custTransOpen.AccountNum == custTable.AccountNum
                    && custTransOpen.DueDate < today
                join RecId, Invoice from custTrans
                    where custTrans.AccountNum == custTable.AccountNum
                        && custTrans.RecId == custTransOpen.RefRecId
                        && custTrans.Invoice != ''
                        && custTrans.TransDate >= todayOfPrevYr;

            overDueDateMax = today - custTransOpen.DueDate;
            overDueDateMaxInvoiceId = custTrans.Invoice;

            // Get maximum overdue amount
            custTransOpen.clear();
            custTrans.clear();

            select firstonly DueDate, AmountMST from custTransOpen
                order by custTransOpen.AmountMST desc
                where custTransOpen.AccountNum == custTable.AccountNum
                    && custTransOpen.DueDate < today
                join RecId, Invoice from custTrans
                    where custTrans.AccountNum == custTable.AccountNum
                        && custTrans.RecId == custTransOpen.RefRecId
                        && custTrans.Invoice != ''
                        && custTrans.TransDate >= todayOfPrevYr;

            overDueMaxAmountMST = custTransOpen.AmountMST;
            overDueMaxAmountInvoiceId = custTrans.Invoice;
        }

        return [recordCount, overDueTotalAmountMST, overDueDateMax, overDueDateMaxInvoiceId, overDueMaxAmountMST, overDueMaxAmountInvoiceId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDelayedOrderLinesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total number of sales order lines delivery delayed for open sales order created in the past year.
    /// </summary>
    /// <returns>
    /// Total delayed sales order lines count.
    /// </returns>
    internal int64 getDelayedOrderLinesCount()
    {
        SalesLine salesLine;
 
        select count (RecId) from salesLine
            where salesLine.CustAccount == custTable.AccountNum
                && salesLine.SalesStatus == SalesStatus::Backorder
                && salesLine.RemainSalesPhysical > 0
                && salesLine.ReceiptDateRequested <= today
                && salesLine.CreatedDateTime >= startTimePrevYr;

        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderInvoicedInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoiced sales orders information created in the past year.
    /// </summary>
    /// <returns>
    /// A container object :
    ///     1. Total invoiced sales order count,
    ///     2. Total invoiced sales amount in accounting currrency.
    /// </returns>
    private container getSalesOrderInvoicedInfo()
    {
        SalesTable salesTable;

        select count(RecId) from salesTable
            where salesTable.CustAccount == custTable.AccountNum
                && salesTable.SalesStatus == SalesStatus::Invoiced
                && salesTable.CreatedDateTime >= startTimePrevYr;

        int64 totalInvoicedSOCount = salesTable.RecId;
        AmountCur totalInvoicedAmountMST;

        if (totalInvoicedSOCount)
        {
            salesTable.clear();

            // Follow SalesTable.amountInvoiced()
            CustInvoiceJour custInvoiceJour;
            select sum(InvoiceAmountMST) from custInvoiceJour
                join salesTable
                    where custInvoiceJour.RefNum  == RefNum::SalesOrder
                        && salesTable.SalesId == custInvoiceJour.SalesId
                        && salesTable.CustAccount == custTable.AccountNum
                        && salesTable.SalesStatus == SalesStatus::Invoiced
                        && salesTable.CreatedDateTime >= startTimePrevYr;

            totalInvoicedAmountMST = custInvoiceJour.InvoiceAmountMST;
        }

        return [totalInvoicedSOCount, totalInvoicedAmountMST];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderDeliveredCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total number of delivered sales orders created in the past year.
    /// </summary>
    /// <returns>
    /// Total delivered sales order count.
    /// </returns>
    private int64 getSalesOrderDeliveredCount()
    {
        SalesTable salesTable;

        select count(RecId) from salesTable
            where salesTable.CustAccount == custTable.AccountNum
                && salesTable.SalesStatus == SalesStatus::Delivered
                && salesTable.CreatedDateTime >= startTimePrevYr;

        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderOpenCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total number of open sales orders created in the past year.
    /// </summary>
    /// <returns>
    /// Total open sales orders count.
    /// </returns>
    private int64 getSalesOrderOpenCount()
    {
        SalesTable salesTable;

        select count(RecId) from salesTable
            where salesTable.CustAccount == custTable.AccountNum
                && salesTable.SalesStatus == SalesStatus::Backorder
                && salesTable.CreatedDateTime >= startTimePrevYr;

        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderNotConfirmedButInvoicedCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total number of sales orders not confirmed but invoiced created in the past year.
    /// </summary>
    /// <returns>
    /// Total sales orders not confirmed but invoiced count.
    /// </returns>
    private int64 getSalesOrderNotConfirmedButInvoicedCount()
    {
        SalesTable salesTable;
        CustInvoiceJour custInvoiceJour;
        CustConfirmJour custConfirmJour;
 
        select count(RecId) from salesTable
            where salesTable.CustAccount == custTable.AccountNum
                && salesTable.CreatedDateTime >= startTimePrevYr
            exists join custInvoiceJour
                where custInvoiceJour.InvoiceAccount == custTable.AccountNum
                    && custInvoiceJour.SalesId == salesTable.SalesId
            notexists join custConfirmJour
                where custConfirmJour.InvoiceAccount == custTable.AccountNum
                    && custConfirmJour.SalesId == salesTable.SalesId;
 
        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesAgreementInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sales agreement info.
    /// </summary>
    /// <returns>
    /// A container object :
    ///     1. Sales agreement on hold count,
    ///     2. sales agreement effective count.
    /// </returns>
    private container getSalesAgreementInfo()
    {
        SalesAgreementHeader salesAgreementHeader;
 
        select count(RecId) from salesAgreementHeader
            where salesAgreementHeader.CustAccount == custTable.AccountNum
                && salesAgreementHeader.CustomerDataAreaId == custTable.DataAreaId
                && salesAgreementHeader.AgreementState == AgreementState::OnHold;

        int64 onholdCount = salesAgreementHeader.RecId;

        salesAgreementHeader.clear();

        select count(RecId) from salesAgreementHeader
            where salesAgreementHeader.CustAccount == custTable.AccountNum
                && salesAgreementHeader.CustomerDataAreaId == custTable.DataAreaId
                && salesAgreementHeader.AgreementState == AgreementState::Effective
                && (salesAgreementHeader.DefaultAgreementLineEffectiveDate <= today || !salesAgreementHeader.DefaultAgreementLineEffectiveDate)
                && (salesAgreementHeader.DefaultAgreementLineExpirationDate >= today || !salesAgreementHeader.DefaultAgreementLineExpirationDate);

        int64 effectiveCount = salesAgreementHeader.RecId;

        return [onholdCount, effectiveCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdsRebateAgreementActiveCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total number of active rebate agreements.
    /// </summary>
    /// <returns>
    /// The total number of active rebate agreements.
    /// </returns>
    private int64 getPdsRebateAgreementActiveCount()
    {
        PdsRebateAgreement pdsRebateAgreement;
 
        select count(RecId) from pdsRebateAgreement
            where (pdsRebateAgreement.PdsCustRebateCode == TableGroupAll::All
                    || (custTable.PdsCustRebateGroupId && pdsRebateAgreement.PdsCustRebateCode == TableGroupAll::GroupId && pdsRebateAgreement.PdsCustRebateRelation == custTable.PdsCustRebateGroupId)
                    || (pdsRebateAgreement.PdsCustRebateCode == TableGroupAll::Table && pdsRebateAgreement.PdsCustRebateRelation == custTable.AccountNum))
                && pdsRebateAgreement.Validated
                && pdsRebateAgreement.Verifier
                && (pdsRebateAgreement.ValidFrom <= today || !pdsRebateAgreement.ValidFrom)
                && (pdsRebateAgreement.ValidTo >= today || !pdsRebateAgreement.ValidTo);
 
        return pdsRebateAgreement.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPermissions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether current user has permission to get the customer copilot summary information.
    /// </summary>
    /// <returns>
    /// true if current user has permission to get the customer copilot summary information; else, false.
    /// </returns>
    public static boolean hasPermissions()
    {
        return hasMenuItemAccess(menuItemDisplayStr(CustTrans), MenuItemType::Display)
            || hasMenuItemAccess(menuItemDisplayStr(SalesTable), MenuItemType::Display)
            || hasMenuItemAccess(menuItemDisplayStr(SalesAgreementListPage), MenuItemType::Display)
            || hasMenuItemAccess(menuItemDisplayStr(PDSRebateAgreements), MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPermissionsForStatusTopic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether current user has permission to get the customer status topic information.
    /// </summary>
    /// <returns>
    /// true if current user has permission to get the customer status topic information; else, false.
    /// </returns>
    public static boolean hasPermissionsForStatusTopic()
    {
        return hasMenuItemAccess(menuItemDisplayStr(CustTrans), MenuItemType::Display)
            || hasMenuItemAccess(menuItemDisplayStr(SalesTable), MenuItemType::Display)
            || hasMenuItemAccess(menuItemDisplayStr(SalesAgreementListPage), MenuItemType::Display)
            || hasMenuItemAccess(menuItemDisplayStr(PDSRebateAgreements), MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPermissionsForInsightsTopic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether current user has permission to get the customer insights topic information.
    /// </summary>
    /// <returns>
    /// true if current user has permission to get the customer insights topic information; else, false.
    /// </returns>
    internal static boolean hasPermissionsForInsightsTopic()
    {
        return hasMenuItemAccess(menuItemDisplayStr(CustTrans), MenuItemType::Display)
            || hasMenuItemAccess(menuItemDisplayStr(SalesTable), MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomerOnhold</Name>
				<Source><![CDATA[
    internal static boolean isCustomerOnhold(CustTable _custTable)
    {
        return _custTable.Blocked != CustVendorBlocked::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    internal CustTable getCustTable()
    {
        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartTimePrevYr</Name>
				<Source><![CDATA[
    internal static utcdatetime getStartTimePrevYr()
    {
        return startTimePrevYr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTString</Name>
				<Source><![CDATA[
    private str amountMSTString(AmountCur _amountMST)
    {
        return any2Str(_amountMST) + CustTableCopilotSummaryConstants::Space + Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>