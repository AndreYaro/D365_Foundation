<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLinePartialDeliveryProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesLinePartialDeliveryProvider
{
    private SalesLine originalLine;
    private SalesLine simulatedLine;
    private SalesLinePartialDeliveryActions partialDeliveryActions;
    private Set modifieldDimensionSet;
    private boolean valid = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        partialDeliveryActions = SalesLinePartialDeliveryActions::NoAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLines</Name>
				<Source><![CDATA[
    public static SalesLinePartialDeliveryProvider newFromLines(SalesLine _originalLine, SalesLine _simulatedLine, Set _modifieldDimensionSet)
    {
        SalesLinePartialDeliveryProvider partialDeliveryProvider = new SalesLinePartialDeliveryProvider();

        partialDeliveryProvider.setOriginalLine(_originalLine);
        partialDeliveryProvider.setSimulatedLine(_simulatedLine);
        partialDeliveryProvider.setModifieldDimensionSet(_modifieldDimensionSet);
        partialDeliveryProvider.validate();

        return partialDeliveryProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        if (!(originalLine.DeliveryDateControlType == SalesDeliveryDateControlType::ATP) &&
            !(originalLine.DeliveryDateControlType == SalesDeliveryDateControlType::ATPPlusIssueMargin))
        {
            this.valid = false;
            return false;
        }

        this.valid = true;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartialDeliveryActions</Name>
				<Source><![CDATA[
    public SalesLinePartialDeliveryActions getPartialDeliveryActions()
    {
        return partialDeliveryActions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOriginalLine</Name>
				<Source><![CDATA[
    private void setOriginalLine(SalesLine _originalLine)
    {
        this.originalLine = _originalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSimulatedLine</Name>
				<Source><![CDATA[
    private void setSimulatedLine(SalesLine _simulatedLine)
    {
        this.simulatedLine = _simulatedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setModifieldDimensionSet</Name>
				<Source><![CDATA[
    private void setModifieldDimensionSet(Set _modifieldDimensionSet)
    {
        this.modifieldDimensionSet = _modifieldDimensionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfValidAndThrowError</Name>
				<Source><![CDATA[
    private void checkIfValidAndThrowError()
    {
        if (!valid)
        {
            throw error("@SCM:SalesDeliveryDetailsPartialNotAllowed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProductDimChanged</Name>
				<Source><![CDATA[
    private boolean hasProductDimChanged()
    {
        boolean productDimensionChanged = false;

        SetEnumerator dimSetEnumerator = modifieldDimensionSet.getEnumerator();

        while (dimSetEnumerator.moveNext())
        {
            var dimFieldId = dimSetEnumerator.current();

            if (InventDim::isFieldIdProductDimension(dimFieldId))
            {
                productDimensionChanged = true;

                break;
            }
        }

        return productDimensionChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeliverySchedule</Name>
				<Source><![CDATA[
    private void createDeliverySchedule()
    {
        SalesLine deliverySalesLine;

        List deliveryLinesList = new List(Types::Container);
        deliverySalesLine.data(originalLine);
        deliverySalesLine.SalesQty = simulatedLine.SalesQty;
        deliverySalesLine.QtyOrdered = simulatedLine.QtyOrdered;
        deliverySalesLine.initFromOrderLineWithMultipleDeliveries(originalLine, true);
        deliverySalesLine.RemainInventPhysical = simulatedLine.RemainInventPhysical;
        deliverySalesLine.ReceiptDateRequested = simulatedLine.ReceiptDateRequested;
        deliverySalesLine.ShippingDateRequested = simulatedLine.ShippingDateRequested;
        deliverySalesLine.DlvMode = simulatedLine.DlvMode;
        deliverySalesLine.InventDimId = simulatedLine.InventDimId;
        deliverySalesLine.LineDeliveryType = LineDeliveryType::DeliveryLine;
        InventMovement::bufferSetRemainQty(deliverySalesLine);
        deliveryLinesList.AddEnd([deliverySalesLine]);

        deliverySalesLine.clear();
        deliverySalesLine.SalesQty = originalLine.SalesQty - simulatedLine.SalesQty;
        deliverySalesLine.initFromOrderLineWithMultipleDeliveries(originalLine);
        InventMovement::bufferSetRemainQty(deliverySalesLine);
        deliverySalesLine.LineNum = originalLine.LineNum + 1; //LineNum will be updated by SalesTableForm_DeliverySchedule class
        this.recalculateDeliveryScheduleDate(deliverySalesLine, !modifieldDimensionSet.empty());
        deliveryLinesList.AddEnd([deliverySalesLine]);

        SalesTableForm_DeliverySchedule::closeOkServer(originalLine, deliveryLinesList.pack(), DlvScheduleMarkupConversionMode::Copy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLineReducingQty</Name>
				<Source><![CDATA[
    private void copyLineReducingQty()
    {
        TmpFrmVirtual linesToCopy;
        linesToCopy.RecordNo = originalLine.RecId;
        linesToCopy.TableNum = tableNum(SalesLine);
        linesToCopy.Qty = originalLine.SalesQty - simulatedLine.SalesQty;
        linesToCopy.insert();

        SalesOrderCopyingContract contract = SalesOrderCopyingContract::construct();
        contract.parmSalesPurchCopy(SalesPurchCopy::CopyAllLines);
        contract.parmCallingTableSalesId(originalLine.SalesId);
        contract.parmTmpFrmVirtualLines(linesToCopy);
        contract.parmQtyFactor(1);
        contract.parmRecalculateAmount(NoYes::Yes);
        contract.parmReverseSign(NoYes::No);
        contract.parmCopyMarkup(NoYes::Yes);
        contract.parmDeleteLines(NoYes::No);
        contract.parmCopyPrecisely(NoYes::Yes);

        SalesCopying::copyServer(contract.pack(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateDeliveryScheduleDate</Name>
				<Source><![CDATA[
    private void recalculateDeliveryScheduleDate(SalesLine _deliverySalesLine, boolean _scheduleWithDifferentInventDims)
    {
        SalesLine calcLine;

        calcLine.setTmp();
        calcLine.data(originalLine);

        if (_scheduleWithDifferentInventDims)
        {
            calcLine.SalesQty = _deliverySalesLine.SalesQty;
            calcLine.QtyOrdered = _deliverySalesLine.QtyOrdered;
            calcLine.RemainInventPhysical = _deliverySalesLine.RemainInventPhysical;
        }

        calcLine.ReceiptDateRequested = dateNull();
        SalesCalcAvailableDlvDates::initDateFields(calcLine);

        _deliverySalesLine.ShippingDateRequested = calcLine.ShippingDateRequested;
        _deliverySalesLine.ReceiptDateRequested = calcLine.ReceiptDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForDecision</Name>
				<Source><![CDATA[
    public void promptForDecision()
    {
        this.checkIfValidAndThrowError();

        // If product Dim changed prompt for new line
        if (this.hasProductDimChanged())
        {
            DialogButton selection = Box::okCancel("@SCM:SalesDeliveryDetailsNewSalesLineWithPartQty", DialogButton::Ok);

            if (selection == DialogButton::Ok)
            {
                partialDeliveryActions = SalesLinePartialDeliveryActions::NewCommercialLine;
            }

            return;
        }

        // If product dim didnt change ask how the delivery schedule should be created

        // Order Line : First Delivery schedule line
        if (originalLine.LineDeliveryType == LineDeliveryType::OrderLine)
        {
            DialogButton selection;

            // If storage dimension changed - assuming only storage and product dim changes can be created by this feature
            if (!modifieldDimensionSet.empty())
            {
                selection = Box::yesNoCancel("@SCM:SalesDeliveryDetailsDeliveryScheduleWithDimChanges", DialogButton::No);
            }
            else
            {
                selection = Box::okCancel("@SCM:SalesDeliveryDetailsDeliveryScheduleWithoutDimChanges", DialogButton::Ok);
            }

            switch (selection)
            {
                case DialogButton::Yes:
                    {
                        partialDeliveryActions = SalesLinePartialDeliveryActions::DeliveryScheduleChangeCommercialLine;
                        break;
                    }

                case DialogButton::No, DialogButton::Ok:
                    {
                        partialDeliveryActions = SalesLinePartialDeliveryActions::DeliveryScheduleKeepCommericalLine;
                        break;
                    }

                default:
                    {
                        partialDeliveryActions = SalesLinePartialDeliveryActions::NoAction;
                        break;
                    }
            }

            return;
        }

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginalLine</Name>
				<Source><![CDATA[
    private void updateOriginalLine(boolean _partOfDeliverySchedule)
    {
        if (simulatedLine.DlvMode != originalLine.DlvMode)
        {
            originalLine.DlvMode = simulatedLine.DlvMode;
            originalLine.modifiedField(fieldNum(SalesTable, DlvMode));
        }

        if (!modifieldDimensionSet.empty())
        {
            originalLine.modifyInventDimSet(simulatedLine.inventDim(), modifieldDimensionSet);

            if (simulatedLine.DeliveryDateControlType != originalLine.DeliveryDateControlType)
            {
                DialogButton selection = Box::yesNo(strFmt("@SCM:DeliveryDateControlTypeChangeMessage", originalLine.DeliveryDateControlType), DialogButton::Yes);
                if (selection == DialogButton::No)
                {
                    return;
                }
            }
        }

        if (!_partOfDeliverySchedule)
        {
            originalLine.SalesQty              = simulatedLine.SalesQty;
            originalLine.QtyOrdered            = simulatedLine.QtyOrdered;
            originalLine.RemainInventPhysical  = simulatedLine.RemainInventPhysical;
            originalLine.ReceiptDateRequested  = simulatedLine.ReceiptDateRequested;
            originalLine.ShippingDateRequested = simulatedLine.ShippingDateRequested;
        }

        ttsbegin;
        originalLine.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public void execute()
    {
        this.checkIfValidAndThrowError();

        switch (partialDeliveryActions)
        {
            case SalesLinePartialDeliveryActions::DeliveryScheduleChangeCommercialLine:
                {
                    this.updateOriginalLine(true);
                    this.createDeliverySchedule();
                    break;
                }
            case SalesLinePartialDeliveryActions::DeliveryScheduleKeepCommericalLine:
                {
                    this.createDeliverySchedule();
                    break;
                }
            case SalesLinePartialDeliveryActions::NewCommercialLine:
                {
                    this.copyLineReducingQty();
                    this.updateOriginalLine(false);
                    break;
                }
            default:
                {
                    break;
                }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>