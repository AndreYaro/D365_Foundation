<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ReqTransDerived</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a FormCtrl for ReqTrans derived
/// </summary>
public class PmfFormCtrl_ReqTransDerived
    extends PmfFormCtrl
{
    boolean calledFromFormula;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// called after the datasource init method
    /// </summary>
    /// <param name="_buffer">common record buffer</param>
    public void dataSourceInitPost(Common _buffer)
    {
        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update form datasource after 'linkActive' call for datasource
    /// </summary>
    public void dataSourceLinkActivePre()
    {
        ReqTrans reqTransCaller;

        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (formRun.args().caller() && formRun.args().dataset())
        {
            this.setCaller(formRun.args().record());

            if (#PmfEnabled && formRun.args().dataset() == tablenum(ReqTrans))
            {
                if (formRun.args().menuItemName() == menuitemDisplayStr(PmfCoByReqTransDerived))
                {
                    formDS.query().dataSourceTable(tablenum(ReqTrans)).rangeField(fieldnum(ReqTrans, RefType)).value(SysQuery::value(ReqRefType::PmfCoProduct));
                }
                else
                {
                    reqTransCaller = formRun.args().record();

                    if (reqTransCaller.RefType == ReqRefType::PmfPlannedProdBatch)
                    {
                        formDS.query().dataSourceTable(tablenum(ReqTrans)).rangeField(
                            fieldnum(ReqTrans,RefType)).value(
                                SysQuery::value(ReqRefType::PmfFormulaLine));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called before the form has been initialized
    /// </summary>
    public void initPre()
    {
        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (formRun.args().caller() && formRun.args().dataset())
        {
            this.setCaller(formRun.args().record());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The object is created
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the caller buffer.
    /// </summary>
    /// <param name="_buffer">
    /// A common record buffer.
    /// </param>
    public void setCaller(Common _buffer)
    {
        ReqTrans callerReqTrans;

        calledFromFormula = false;

        switch (_buffer.TableId)
        {
            case tablenum(ReqTrans):
                callerReqTrans = _buffer;
                calledFromFormula = InventTable::find(callerReqTrans.ItemId).isFormulaAllowed();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ReqTrans))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>returns instance</returns>
    public static PmfFormCtrl_ReqTransDerived construct()
    {
        return new PmfFormCtrl_ReqTransDerived();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PmfFormCtrl_ReqTransDerived</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>returns instance</returns>
    public static PmfFormCtrl_ReqTransDerived newFromForm(
        FormRun _fr)
    {
        PmfFormCtrl_ReqTransDerived frmCtrl;

        frmCtrl = PmfFormCtrl_ReqTransDerived::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>