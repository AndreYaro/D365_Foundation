<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingExchRateCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class CustVendNettingExchRateCalculator
{
    private const int ExchangeRateMultiplier = 100;
    private CurrencyCode accountingCurrency;
    private CurrencyCode reportingCurrency;
    private CurrencyCode transCurrency;
    private TransDate nettingDate;
    private CompanyId transCompany;
    private ExchRate exchRate;
    private ExchrateSecondary exchRateSecondary;
    private ExchRate exchRateReporting;
    private ExchrateSecondary exchRateSecondaryReporting;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(CurrencyCode _transCurrency, TransDate _nettingDate, CompanyId _company = curExt())
    {
        transCompany = _company;
        transCurrency = _transCurrency;
        this.updateNettingDate(_nettingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CustVendNettingExchRateCalculator construct(CompanyId _company, CurrencyCode _transCurrency, TransDate _nettingDate)
    {
        return new CustVendNettingExchRateCalculator(_transCurrency, _nettingDate, _company);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNettingDate</Name>
				<Source><![CDATA[
    internal void updateNettingDate(TransDate _nettingDate)
    {
        _nettingDate = _nettingDate == dateNull() ? DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) : _nettingDate;
        if (_nettingDate != nettingDate)
        {
            nettingDate = _nettingDate;
            this.setupExchRate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRate</Name>
				<Source><![CDATA[
    internal ExchRate getExchRate()
    {
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRateSecondary</Name>
				<Source><![CDATA[
    internal ExchrateSecondary getExchRateSecondary()
    {
        return exchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRateReporting</Name>
				<Source><![CDATA[
    internal ExchRate getExchRateReporting()
    {
        return exchRateReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRateSecondaryReporting</Name>
				<Source><![CDATA[
    internal ExchrateSecondary getExchRateSecondaryReporting()
    {
        return exchRateSecondaryReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurToMST</Name>
				<Source><![CDATA[
    internal AmountMST amountCurToMST(AmountCur _amountCur)
    {
        return CurrencyExchange::round(_amountCur * (exchRate / ExchangeRateMultiplier), accountingCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurToReporting</Name>
				<Source><![CDATA[
    internal AmountMSTSecondary amountCurToReporting(AmountCur _amountCur)
    {
        return CurrencyExchange::round(_amountCur * (exchRateReporting / ExchangeRateMultiplier), reportingCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupExchRate</Name>
				<Source><![CDATA[
    private void setupExchRate()
    {
        changecompany(transCompany)
        {
            LedgerRecId ledgerRecId = Ledger::current();
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(ledgerRecId, transCurrency, nettingDate);
            exchRate = exchangeRateHelper.getExchangeRate1();
            exchRateSecondary = exchangeRateHelper.getExchangeRate2();
            accountingCurrency = Ledger::accountingCurrency();

            if (Ledger::reportingCurrency())
            {
                reportingCurrency = Ledger::reportingCurrency();
                ExchangeRateCalculation exchangeRateCalculation = ExchangeRateCalculation::newExchangeDate(
                    Ledger::reportingCurrencyExchangeRateType(),
                    transCurrency,
                    reportingCurrency,
                    nettingDate);
                exchRateReporting = exchangeRateCalculation.getExchangeRate1();
                exchRateSecondaryReporting = exchangeRateCalculation.getExchangeRate2();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>