<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymBalanceXML</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>BankPaymBalanceXML</c> class is responsible for exports file for BLWI declaration.
/// </summary>
public class BankPaymBalanceXML extends RunBase
{
    private Email email;
    private ERFileName fileName;
    private PaymBalanceSurveyCodeRecId surveyCodeRecId;
    private TransDate transDate, fromDate, toDate;
    private ERIFileDestination fileDestination;

    private DialogField dialogSurveyCode,
        fieldFileName,
        fieldEmail,
        fieldTransDate;

    private TradeBLWIParameters tradeBLWIParameters = TradeBLWIParameters::find();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmEmail</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Email parmEmail(Email _email = email)
    {
        email = _email;
        return email;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Filename parmFileName(Filename _fileName = fileName)
    {
        fileName = _fileName;
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSurveyCodeRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PaymBalanceSurveyCodeRecId parmSurveyCodeRecId(PaymBalanceSurveyCodeRecId _surveyCodeRecId = surveyCodeRecId)
    {
        surveyCodeRecId = _surveyCodeRecId;
        return surveyCodeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileDestination</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERIFileDestination parmFileDestination(ERIFileDestination _fileDestination = fileDestination)
    {
        fileDestination = _fileDestination;
        return fileDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        fileDestination = ERObjectsFactory::createFileDestinationBrowser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs export via ER solution.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runER()
    {
        const str erParmEmail = 'model/parameters.Email';
        const str erParmFromDate = 'model/parameters.FromDate';
        const str erParmToDate = 'model/parameters.ToDate';
        const str erParmSurveyCode = 'model/parameters.SurveyCode';

        ERModelDefinitionInputParametersAction modelDefinitionInputParametersAction = new ERModelDefinitionInputParametersAction();

        modelDefinitionInputParametersAction.addParameter(erParmEmail, email)
            .addParameter(erParmFromDate, fromDate)
            .addParameter(erParmToDate, toDate)
            .addParameter(erParmSurveyCode, BankPaymBalanceSurvey::find(surveyCodeRecId).SurveyCode);

        ERObjectsFactory::createFormatMappingRunByFormatMappingId(tradeBLWIParameters.ERFormatMappingID, fileName)
            .withFileDestination(fileDestination)
            .withParameter(modelDefinitionInputParametersAction)
            .run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a dialog box where the user is asked to fill in the file name, e-mail address, the contact
    /// person name, the period date, and the survey code.
    /// </summary>
    /// <param name="_dialog">
    /// The basic dialog that is necessary to create the dialog box.
    /// </param>
    /// <param name="_forceOnClient">
    /// A Boolean value that indicates whether the dialog box is forced on the client or not.
    /// </param>
    /// <returns>
    /// The created dialog box.
    /// </returns>
    /// <remarks>
    /// The <paramref name="_forceOnClient" /> parameter is not used here, but it is needed because it is a
    /// parameter on the base method, <c>Runbase.dialog</c>.
    /// </remarks>
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        DialogRunbase dialog = new DialogRunbase("@SYS114646", this);

        dialogSurveyCode = dialog.addFieldValue(extendedtypestr(PaymBalanceSurveyCodeRecId), surveyCodeRecId);
        fieldFileName = dialog.addFieldValue(extendedtypestr(ERFileName), fileName);
        fieldEmail = dialog.addFieldValue(extendedtypestr(Email), tradeBLWIParameters.NBBMail);
        fieldTransDate = dialog.addFieldValue(extendedtypestr(TransDate), mkdate(1, mthofyr(transDate), year(transDate)));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Puts all dialog box field values into variables.
    /// </summary>
    /// <returns>
    /// true if the dialog box field values are put into variables; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        fileName = fieldFileName.value();
        email = fieldEmail.value();
        surveyCodeRecId = dialogSurveyCode.value();
        transDate = fieldTransDate.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        BankPaymBalanceSurvey bankPaymBalanceSurvey = BankPaymBalanceSurvey::find(surveyCodeRecId);
        [fromDate, toDate] = bankPaymBalanceSurvey.calcDateRange(transDate);

        this.runER();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all the necessary conditions.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (!email)
        {
            ret = checkFailed(strfmt("@SYS50104", "@SYS5845"));
        }

        if (!surveyCodeRecId)
        {
            ret = checkFailed(strfmt("@SYS50104", "@SYS114635"));
        }

        if (!transDate)
        {
            ret = checkFailed(strfmt("@SYS50104", "@SYS7402"));
        }

        if (!CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, transdate))
        {
            ret = checkFailed(strfmt("@SYS50104", "@SYS77429"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BankPaymBalanceXML bankPaymBalanceXML = new BankPaymBalanceXML();

        if (bankPaymBalanceXML.prompt())
        {
            bankPaymBalanceXML.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>