<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProtectedData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides methods to encrypt and decrypt data.
/// </summary>
class ProtectedData
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Protect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts the data.
    /// </summary>
    /// <param name = "_unEncryptedDataBlob">The text to be encrypted.</param>
    /// <returns>The encrypted data.</returns>
    /// <remarks>
    /// use conversion functions to convert data to be encrypted to a CryptoBlob container
    /// like: Protect(str2cryptoblob("Text to be encrypted")));
    /// </remarks>
    public static CryptoBlob Protect(CryptoBlob _unEncryptedDataBlob)
    {
        if (_unEncryptedDataBlob == connull())
            return connull();

        int             arrayOfByteLength   = conlen(_unEncryptedDataBlob);
        System.Type     typeOfByte          = System.Type::GetType('System.Byte');
        System.Array    arrayOfByteInput    = System.Array::CreateInstance(typeOfByte, arrayOfByteLength);
        System.Array    optionalEntropy     = System.Array::CreateInstance(typeOfByte, 0);

        for (int i = 0; i < arrayOfByteLength; i++)
        {
            //invalid cryptoblob structure
            if (conpeek(_unEncryptedDataBlob, i+ 1) > 255)
                return connull();

            arrayOfByteInput.SetValue(System.Convert::ToByte(conpeek(_unEncryptedDataBlob, i+1)), i);
        }

        System.Array arrayOfByteOutput = System.Security.Cryptography.ProtectedData::Protect(arrayOfByteInput, optionalEntropy, System.Security.Cryptography.DataProtectionScope::CurrentUser);

        arrayOfByteLength = arrayOfByteOutput.get_Length();

        container encryptedDataBlob;

        for (int i = 0; i < arrayOfByteLength; i++)
        {
            System.Byte byteObject     = arrayOfByteOutput.GetValue(i);
            int intValue        = System.Convert::ToInt32(byteObject);
            encryptedDataBlob   += [intValue];
        }

        return encryptedDataBlob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Unprotect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrypts the data.
    /// </summary>
    /// <param name = "_encryptedDataBlob">The encrypted data to be decrypted.</param>
    /// <returns>The decrypted data.</returns>
    /// <remarks>
    /// use conversion functions to convert the decrypted data from the CryptoBlob container format
    /// to the desired one, like: strDecryptedText = cryptoblob2str(Unprotect(encryptedData))
    /// </remarks>
    public static CryptoBlob Unprotect(CryptoBlob _encryptedDataBlob)
    {
        if (_encryptedDataBlob == connull())
            return connull();

        int             arrayOfByteLength   = conlen(_encryptedDataBlob);
        System.Type     typeOfByte          = System.Type::GetType('System.Byte');
        System.Array    arrayOfByteInput    = System.Array::CreateInstance(typeOfByte, arrayOfByteLength);
        System.Array    optionalEntropy     = System.Array::CreateInstance(typeOfByte, 0);

        for (int i = 0; i < arrayOfByteLength; i++)
        {
            //invalid cryptoblob structure
            if (conpeek(_encryptedDataBlob, i+ 1) > 255)
                return connull();

            arrayOfByteInput.SetValue(System.Convert::ToByte(conpeek(_encryptedDataBlob, i+1)), i);
        }

        System.Array arrayOfByteOutput = System.Security.Cryptography.ProtectedData::Unprotect(arrayOfByteInput, optionalEntropy, System.Security.Cryptography.DataProtectionScope::CurrentUser);

        arrayOfByteLength = arrayOfByteOutput.get_Length();

        container unEncryptedDataBlob;

        for (int i = 0; i < arrayOfByteLength; i++)
        {
            System.Byte byteObject  = arrayOfByteOutput.GetValue(i);
            int     intValue    = System.Convert::ToInt32(byteObject);
            unEncryptedDataBlob += [intValue];
        }

        return unEncryptedDataBlob;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>