<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmOpportunityStatusUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmOpportunityStatusUpdate
{
    smmQuotationReasonId        reasonId;
    smmOpportunityStatus        oppStatus;

    TmpSalesQuotationMassUpdate tmpSalesQuotationMassUpdate;
    smmOpportunityTable         smmOpportunityTable;
    SalesQuotationTable         salesQuotationTable;

    boolean                     removeOpenActivities;

    smmProcessInstance          smmProcessInstance;
    CustAccount                 custAccountNo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the quotation can be canceled.
    /// </summary>
    /// <param name="_salesQuotationTable">
    /// A   <c>SalesQuotationTable</c> record.
    /// </param>
    /// <returns>
    /// true if the specified <c>SalesQuotationTable</c> record can be confirmed; otherwise, false.
    /// </returns>
    public boolean canBeCancelled(SalesQuotationTable _salesQuotationTable)
    {
        boolean ok;

        switch (_salesQuotationTable.QuotationType)
        {
            case QuotationType::Sales:
                if (_salesQuotationTable.canQuotationBeCanceled())
                {
                    ok = true;
                }
                else
                {
                    // Quotation status should either be created or sent before it can be cancelled.
                    ok = checkFailed("@SYS105493");
                }
                break;

            case QuotationType::Project:
                if (_salesQuotationTable.canQuotationBeCanceled())
                {
                    ok = true;
                }
                else
                {
                    // Quotation status should either be created,sent pr revised before it can be cancelled.
                    ok = checkFailed("@SYS4010145");
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the quotation can be confirmed.
    /// </summary>
    /// <param name="_salesQuotationTable">
    /// A <c>SalesQuotationTable</c> record.
    /// </param>
    /// <returns>
    /// true if the specified <c>SalesQuotationTable</c> record can be confirmed; otherwise, false.
    /// </returns>
    public boolean canBeConfirmed(SalesQuotationTable _salesQuotationTable)
    {
        boolean ok = true;

        if (_salesQuotationTable.isTemplate())
        {
            // Cannot confirm template quotation %1.
            ok = checkFailed(strFmt("@SYS105494",_salesQuotationTable.QuotationId));
        }

        if ((_salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent     ||
             _salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created  ||
            (_salesQuotationTable.QuotationType == QuotationType::Project && _salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised)) &&
            !SalesQuotationLine::exist(_salesQuotationTable.QuotationId))
        {
            // There are no line items for quotation %1.
            ok = checkFailed(strFmt("@SYS105495",_salesQuotationTable.QuotationId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeLost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the quotation can be lost
    /// </summary>
    /// <param name="_salesQuotationTable">
    /// A <c>SalesQuotationTable</c> record.
    /// </param>
    /// <returns>
    /// true if the specified <c>SalesQuotationTable</c> record can be lost; otherwise, false.
    /// </returns>
    public boolean canBeLost(SalesQuotationTable _salesQuotationTable)
    {
        boolean ok;

        switch (_salesQuotationTable.QuotationType)
        {
            case QuotationType::Sales :
                if (_salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent    ||
                    _salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created)
                {
                    ok = true;
                }
                else
                {
                    // Quotation status should either be created or sent before it can be lost.
                    ok = checkFailed("@SYS105496");
                }
                break;

            case QuotationType::Project :
                if (_salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent    ||
                    _salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised ||
                    _salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created)
                {
                    ok = true;
                }
                else
                {
                    // Quotation status should either be created, sent, revised before it can be lost.
                    ok = checkFailed("@SYS4010146");
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConfirmedExistIfWin</Name>
				<Source><![CDATA[
    public boolean checkConfirmedExistIfWin()
    {
        select firstonly tmpSalesQuotationMassUpdate where tmpSalesQuotationMassUpdate.StatusTo == SalesQuotationStatusNew::Confirmed;

        return (tmpSalesQuotationMassUpdate.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustomerBeforeConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is a customer, and indicates whether to create one without a confirmed quote.
    /// </summary>
    void createCustomerBeforeConfirm()
    {
        smmBusRelTable              smmBusRelTable;
        NoYes                       createSuccessful;

        if (!this.isCustomer())
        {
            smmBusRelTable = smmBusRelTable::findByParty(smmOpportunityTable.Party);
            createSuccessful = smmBusRelTable::convert2Customer(smmBusRelTable);

            if (!createSuccessful)
            {
                throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpTable</Name>
				<Source><![CDATA[
    // Create temp table based on created/sent quotations assigned to the opportunity
    // Do not change quotation status when postponed
    void createTmpTable()
    {
        container               conQuoteType;

        if (oppStatus != smmOpportunityStatus::Postponed)
        {
            conQuoteType = SalesQuotationTableType::setAllowedTypes();

            if (conQuoteType != conNull())
            {
                tmpSalesQuotationMassUpdate.skipDataMethods(true);

                if (conFind(conQuoteType, QuotationType::Sales))
                {
                    insert_recordset tmpSalesQuotationMassUpdate (OpportunityId, QuotationId, StatusFrom, QuotationType)
                        select OpportunityId, QuotationId, QuotationStatus, QuotationType
                            from salesQuotationTable
                            where salesQuotationTable.OpportunityId == smmOpportunityTable.OpportunityId &&
                                 (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created ||
                                  salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent) &&
                                  !salesQuotationTable.TemplateGroupId &&
                                  !salesQuotationTable.TemplateName &&
                                  salesQuotationTable.QuotationType == QuotationType::Sales;
                }

                if (conFind(conQuoteType, QuotationType::Project))
                {
                    insert_recordset tmpSalesQuotationMassUpdate (OpportunityId, QuotationId, StatusFrom, QuotationType)
                        select OpportunityId, QuotationId, QuotationStatus, QuotationType
                            from salesQuotationTable
                            where salesQuotationTable.OpportunityId == smmOpportunityTable.OpportunityId &&
                                 (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created ||
                                  salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent    ||
                                  salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised) &&
                                  !salesQuotationTable.TemplateGroupId &&
                                  !salesQuotationTable.TemplateName &&
                                  salesQuotationTable.QuotationType == QuotationType::Project;
                }

                update_recordset tmpSalesQuotationMassUpdate
                    setting StatusTo = this.opportunityStatus2QuoteStatus(oppStatus);

                // If the opportunity's new status is Won, set its 'Created'
                // quotations to 'Cancelled' instead of 'Confirmed'
                if (oppStatus == smmOpportunityStatus::Won)
                {
                    update_recordset tmpSalesQuotationMassUpdate
                        setting StatusTo = SalesQuotationStatusNew::Cancelled
                        where   tmpSalesQuotationMassUpdate.StatusFrom == SalesQuotationStatus::Created;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether a specified party for the opportunity is a customer
    /// </summary>
    /// <returns>
    /// true if the party for the opportunity is a customer; otherwise, false.
    /// </returns>
    private boolean isCustomer()
    {
        return DirPartyTableHelper::isCustomer(smmOpportunityTable.Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityStatus2QuoteStatus</Name>
				<Source><![CDATA[
    // Returns the valid quoation status based on the opportunity status
    public SalesQuotationStatusNew opportunityStatus2QuoteStatus(smmOpportunityStatus   _newOpportunityStatus)
    {
        SalesQuotationStatusNew newQuoteStatus;

        switch (_newOpportunityStatus)
        {
            case smmOpportunityStatus::Cancelled :
                newQuoteStatus = SalesQuotationStatusNew::Cancelled;
                break;
            case smmOpportunityStatus::Lost :
                newQuoteStatus = SalesQuotationStatusNew::Lost;
                break;
            case smmOpportunityStatus::Won :
                newQuoteStatus = SalesQuotationStatusNew::Confirmed;
                break;
            default :
                newQuoteStatus = SalesQuotationStatusNew::None;
                break;
        }

        return newQuoteStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramCustAccountNo</Name>
				<Source><![CDATA[
    public CustAccount paramCustAccountNo(CustAccount _custAccountNo)
    {
        custAccountNo = _custAccountNo;
        return custAccountNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpportunityStatus</Name>
				<Source><![CDATA[
    public smmOpportunityStatus parmOpportunityStatus(smmOpportunityStatus _oppStatus = oppStatus)
    {
        oppStatus = _oppStatus;

        return oppStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpportunityTable</Name>
				<Source><![CDATA[
    public smmOpportunityTable parmOpportunityTable(smmOpportunityTable _smmOpportunityTable = smmOpportunityTable)
    {
        smmOpportunityTable = _smmOpportunityTable;

        return smmOpportunityTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonId</Name>
				<Source><![CDATA[
    public smmQuotationReasonId parmReasonId(smmQuotationReasonId _reasonId = reasonId)
    {
        reasonId = _reasonId;

        return reasonId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemoveOpenActivities</Name>
				<Source><![CDATA[
    public boolean parmRemoveOpenActivities(boolean _removeOpenActivities = removeOpenActivities)
    {
        removeOpenActivities = _removeOpenActivities;

        return removeOpenActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpTable</Name>
				<Source><![CDATA[
    public TmpSalesQuotationMassUpdate parmTmpTable(TmpSalesQuotationMassUpdate _tmpSalesQuotationMassUpdate = tmpSalesQuotationMassUpdate)
    {
        tmpSalesQuotationMassUpdate = _tmpSalesQuotationMassUpdate;

        if (!tmpSalesQuotationMassUpdate)
        {
            select firstonly tmpSalesQuotationMassUpdate;
        }

        return tmpSalesQuotationMassUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQuotes</Name>
				<Source><![CDATA[
    //  This will bulk update valid quotations to either cancelled or lost
    void processQuotes(SalesQuotationStatus _salesQuotationStatus)
    {
        void processQuotesPerType(QuotationType _quotationType)
        {
            SalesQuotationUpdate    salesQuotationUpdate;

            select firstonly tmpSalesQuotationMassUpdate
                where tmpSalesQuotationMassUpdate.OpportunityId == smmOpportunityTable.OpportunityId &&
                      tmpSalesQuotationMassUpdate.StatusTo == enum2int(_salesQuotationStatus) &&
                      tmpSalesQuotationMassUpdate.QuotationType == _quotationType;

            if (tmpSalesQuotationMassUpdate)
            {
                salesQuotationUpdate = SalesQuotationUpdate::constructFromOpportunity(tmpSalesQuotationMassUpdate, _salesQuotationStatus);
                salesQuotationUpdate.parmReasonId(reasonId);
                salesQuotationUpdate.runOperation();
            }
        }

        processQuotesPerType(QuotationType::Sales);
        processQuotesPerType(QuotationType::Project);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    // Try to update the opportunity with corresponding quotes
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.updateOpportunity();

            ttscommit;
        }
        catch (Exception::Error)
        {
            throw error("@SYS21628"); //Update has been canceled because of an error.
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOpportunity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main process to update the opportunity to the new status
    /// </summary>
    public void updateOpportunity()
    {
        switch (oppStatus)
        {
            case smmOpportunityStatus::Cancelled :
            case smmOpportunityStatus::Lost :
                // Use bulk process for cancelled/lost status
                this.processQuotes(oppStatus == smmOpportunityStatus::Cancelled ? SalesQuotationStatus::Cancelled : SalesQuotationStatus::Lost);

                // Update process activities
                if (smmOpportunityTable.ProcessName)
                {
                    if (!smmProcessInstance)
                    {
                        smmProcessInstance = smmProcessInstance::construct(smmOpportunityTable);
                    }
                    // Remove activities depending on parm
                    smmProcessInstance.parmRemoveActivitiesOnly(true);
                    smmProcessInstance.parmRemoveOpenActivities(this.parmRemoveOpenActivities());
                    smmProcessInstance.delete();
                }
                break;
            case smmOpportunityStatus::Won :
                // Changing to Won status may contain different quotation status
                while select tmpSalesQuotationMassUpdate order by StatusTo,QuotationId
                    where tmpSalesQuotationMassUpdate.OpportunityId == smmOpportunityTable.OpportunityId
                {
                    smmQuotationReasonId tmpReasonId = (tmpSalesQuotationMassUpdate.ReasonId != '' ? tmpSalesQuotationMassUpdate.ReasonId : reasonId);

                    salesQuotationTable = SalesQuotationTable::find(tmpSalesQuotationMassUpdate.QuotationId);
                    
                    SalesQuotationUpdate salesQuotationUpdate;
                    switch (tmpSalesQuotationMassUpdate.StatusTo)
                    {
                        case SalesQuotationStatusNew::Confirmed :
                            if (salesQuotationTable.mayConfirmationBeUpdated())
                            {
                                SalesQuotationEditLinesForm salesQuotationEditLinesForm = this.instantiateSalesQuotationEditLinesForm();
                                salesQuotationEditLinesForm.update(salesQuotationTable,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), NoYes::No, tmpSalesQuotationMassUpdate.PrintConfirmation, tmpReasonId);
                            }
                            else
                            {
                                throw Exception::Error;
                            }

                            break;

                        case SalesQuotationStatusNew::Lost :
                            salesQuotationUpdate = SalesQuotationUpdate::constructFromSalesQuotationTable(salesQuotationTable,SalesQuotationStatus::Lost, true);
                            salesQuotationUpdate.parmCalledFromOpportunity(true);
                            if (salesQuotationUpdate.mayQuotationBePosted(salesQuotationTable))
                            {
                                salesQuotationUpdate.parmReasonId(tmpReasonId);
                                salesQuotationUpdate.runOperation();
                            }
                            else
                            {
                                throw Exception::Error;
                            }

                            break;

                        case SalesQuotationStatusNew::Cancelled :
                            salesQuotationUpdate = SalesQuotationUpdate::constructFromSalesQuotationTable(salesQuotationTable,SalesQuotationStatus::Cancelled, true);
                            salesQuotationUpdate.parmCalledFromOpportunity(true);
                            if (salesQuotationUpdate.mayQuotationBePosted(salesQuotationTable))
                            {
                                salesQuotationUpdate.parmReasonId(tmpReasonId);
                                salesQuotationUpdate.runOperation();
                            }
                            else
                            {
                                throw Exception::Error;
                            }

                            break;

                        default :
                            if (this.mustThrowUpdateErrorAsDefault())
                            {
                                throw Exception::Error;
                            }
                    }
                }
        }

        // Update the Opportunity
        if (oppStatus == smmOpportunityStatus::Active)
        {
            smmOpportunityTable.Reason = '';
            smmOpportunityTable.ClosedByWorker = 0;
            smmOpportunityTable.ClosedDate = dateNull();
        }
        else
        {
            smmOpportunityTable.Reason = reasonId;
            smmOpportunityTable.ClosedByWorker = smmUtility::getCurrentContactWorker();
            smmOpportunityTable.ClosedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        smmOpportunityTable.Status = oppStatus;
        if (smmOpportunityTable.validateWrite(true))
        {
            smmOpportunityTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustThrowUpdateErrorAsDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Must throw error for default.
    /// </summary>
    /// <returns>True or false.</returns>
    protected boolean mustThrowUpdateErrorAsDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateSalesQuotationEditLinesForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>SalesQuotationEditLinesForm</c>.
    /// </summary>
    /// <returns>The instantiated <c>SalesQuotationEditLinesForm</c>.</returns>
    protected SalesQuotationEditLinesForm instantiateSalesQuotationEditLinesForm()
    {
        const str Sales = 'Sales';
        const str Project = 'Project';

        return SalesQuotationEditLinesForm::construct(DocumentStatus::Confirmation, salesQuotationTable.QuotationType == QuotationType::Project ? Project : Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    // Validate window entries before process
    public boolean validate()
    {
        boolean ret = true;

        if (!reasonId && oppStatus != smmOpportunityStatus::Active)
        {
            return checkFailed("@SYS84633"); // Reason must be specified
        }

        while select tmpSalesQuotationMassUpdate
            where tmpSalesQuotationMassUpdate.OpportunityId == smmOpportunityTable.OpportunityId
        {
            ret = this.validateQuotes(tmpSalesQuotationMassUpdate);

            if (!ret)
            {
                // One or more error appears in the quotation. Cannot continue.
                ret = checkFailed("@SYS105489");
                break;
            }
        }

        if (ret)
        {
            // Validate process
            ret = this.validateProcessCompleted();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcessCompleted</Name>
				<Source><![CDATA[
    private boolean validateProcessCompleted()
    {
        boolean             ret = true;

        if (smmOpportunityTable.ProcessName)
        {
            switch (oppStatus)
            {
                case smmOpportunityStatus::Won :
                    smmProcessInstance = smmProcessInstance::construct(smmOpportunityTable);
                    // Make sure all exit criteria has been validated
                    ret = smmProcessInstance.changeStage(smmProcessInstance.getLastStage().ElementNumber, true);
                    break;
                default :
                    ret = this.validateDefaultOpportunityStatus();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDefaultOpportunityStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate Default opportunity status.
    /// </summary>
    /// <returns>True or false.</returns>
    protected boolean validateDefaultOpportunityStatus()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuotes</Name>
				<Source><![CDATA[
    // Check that the quote can be updated to the new status
    public boolean validateQuotes(TmpSalesQuotationMassUpdate _tmpSalesQuotationMassUpdate, boolean _showInfoLog = false)
    {
        SysInfologLevel     origInfologLevel = infolog.infologLevel();
        boolean             ok;

        if (!_showInfoLog)
        {
            infolog.setInfoLogLevel(SysInfologLevel::None);
        }

        salesQuotationTable = SalesQuotationTable::find(_tmpSalesQuotationMassUpdate.QuotationId);

        switch (_tmpSalesQuotationMassUpdate.StatusTo)
        {
            case SalesQuotationStatusNew::Cancelled :
                ok = this.canBeCancelled(salesQuotationTable);
                break;
            case SalesQuotationStatusNew::Lost :
                ok = this.canBeLost(salesQuotationTable);
                break;
            case SalesQuotationStatusNew::Confirmed :
                ok = this.canBeConfirmed(salesQuotationTable);
                break;
        }

        infolog.setInfoLogLevel(origInfologLevel);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>winOpportunity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes from the EP when winning an opportunity that has quotations related to it.
    /// </summary>
    /// <returns>
    /// true if the update succeeds; otherwise; false.
    /// </returns>
    public boolean winOpportunity()
    {
         smmBusRelTable         smmBusRelTable;
         NoYes                  createSuccessful;

         // creating customer before confirming
        if (!this.isCustomer())
        {
            smmBusRelTable = smmBusRelTable::findByParty(smmOpportunityTable.Party);
            createSuccessful = smmBusRelTable::convert2Customer(smmBusRelTable,custAccountNo,false);
            if (!createSuccessful)
            {
                throw Exception::Error;
            }
        }
        smmOpportunityTable.selectForUpdate(true);
        this.run();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areQuotationsAssigned</Name>
				<Source><![CDATA[
    public static boolean areQuotationsAssigned(smmOpportunityId _smmOpportunityId)
    {
        container   conQuoteType;
        SalesQuotationTable         salesQuotationTable;

        conQuoteType = SalesQuotationTableType::setAllowedTypes();
        if (conQuoteType != conNull())
        {
            if (conFind(conQuoteType, QuotationType::Sales))
            {
                select count(RecId) from salesQuotationTable
                where salesQuotationTable.OpportunityId == _smmOpportunityId &&
                    (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created ||
                     salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent) &&
                    !salesQuotationTable.TemplateGroupId &&
                    !salesQuotationTable.TemplateName &&
                    salesQuotationTable.QuotationType == QuotationType::Sales;
                if (salesQuotationTable.RecId  > 0 )
                {
                    return true;
                }
            }
            if (conFind(conQuoteType, QuotationType::Project))
            {
                select count(RecId) from salesQuotationTable
                where salesQuotationTable.OpportunityId == _smmOpportunityId &&
                     (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created ||
                      salesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised ||
                      salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent) &&
                      !salesQuotationTable.TemplateGroupId &&
                      !salesQuotationTable.TemplateName &&
                      salesQuotationTable.QuotationType == QuotationType::Project;
                if (salesQuotationTable.RecId  > 0 )
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes from the EP to check whether the customer account was entered when the number sequence is
    /// manual.
    /// </summary>
    /// <param name="custAccountNo">
    /// A customer account number to validate.
    /// </param>
    /// <returns>
    /// true is the account number is valid; otherwise, false.
    /// </returns>
    public static boolean checkCustomerAccount(str custAccountNo)
    {
        CustTable custTable;
        NumberSequenceTable numberSequenceTable;

        numberSequenceTable = smmParameters::findNumberSequence(extendedTypeNum(CustAccount));

        // Make sure limits are OK, and also the format is right
        if (!NumberSeq::numCheckFormat(custAccountNo, numberSequenceTable))
        {
            return false;
        }
        else
        {
            custTable = CustTable::find(custAccountNo);
            if (custTable)
            {
                // The account number is already used
                error(strFmt("@SYS59639", custAccountNo));
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    // Called by SmmOpportunityStatusUpdate form to initialize the class and generate temp table
    public static SmmOpportunityStatusUpdate construct(smmOpportunityTable _smmOpportunityTable, smmOpportunityStatus _oppStatus,boolean createTmpTable = true)
    {
        SmmOpportunityStatusUpdate  smmOpportunityStatusUpdate = new SmmOpportunityStatusUpdate();

        smmOpportunityStatusUpdate.parmOpportunityTable(_smmOpportunityTable);
        smmOpportunityStatusUpdate.parmOpportunityStatus(_oppStatus);

        if (_smmOpportunityTable.RecId && createTmpTable)
        {
            smmOpportunityStatusUpdate.createTmpTable();
        }

        return smmOpportunityStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomerNumberSeqManual</Name>
				<Source><![CDATA[
    //Called only from EP to check whether the number sequence for the Customer account is manual or not.
    public static boolean isCustomerNumberSeqManual()
    {
        return NumberSequenceTable::find(NumberSeqReference::findReference(extendedTypeNum(CustAccount)).NumberSequenceId).Manual == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    // Called from Ep
    static void main(Args args)
    {
        smmOpportunityTable         smmOpportunityTable = args.record();
        SmmOpportunityStatusUpdate  smmOpportunityStatusUpdate;
        smmOpportunityStatus        newStatus;
        FormDataSource              dataSource;
        container                   parms;

        if (!args)
        {
            // Update must be called with parameters.
            throw error("@SYS25407");
        }

        if (smmOpportunityTable)
        {
            smmOpportunityTable.selectForUpdate(true);
        }
        else
        {
            // Incorrect parameter for the function %1
            throw error(strFmt("@SYS54195",funcName()));
        }

        newStatus = args.parmEnum();
        smmOpportunityStatusUpdate =  SmmOpportunityStatusUpdate::construct(smmOpportunityTable, newStatus);

        // Get value of ReasonId and CustAccount # from args.parm()
        parms = str2con(args.parm(), ";");

        if (conLen(parms) != 2)
        {
            throw error(strFmt("@SYS54195",funcName()));
        }

        smmOpportunityStatusUpdate.parmReasonId(conPeek(parms, 1));
        smmOpportunityStatusUpdate.paramCustAccountNo(conPeek(parms, 2));
        smmOpportunityStatusUpdate.parmRemoveOpenActivities(args.refField());

        if (smmOpportunityStatusUpdate.validate())
        {
            // If
            if (newStatus == smmOpportunityStatus::Won)
            {
                smmOpportunityStatusUpdate.winOpportunity();
            }
            else
            {
                smmOpportunityStatusUpdate.run();
            }

            //The following lines of code is used to trigger the refresh on the c# side
            //to let the datasource and the other consumer controls on the page refresh
            //after the record update
            dataSource = FormDataUtil::getFormDataSource(smmOpportunityTable);
            if (dataSource)
            {
                dataSource.setCurrent();
                dataSource.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openForm</Name>
				<Source><![CDATA[
    // This will open the SmmOpportunityStatusUpdate form as a modal window
    static void openForm(smmOpportunityTable _smmOpportunityTable, smmOpportunityStatus _status)
    {
        Args    args = new Args(formStr(smmOpportunityStatusUpdate));
        FormRun updateForm;

        args.parmEnum(_status);
        args.record(_smmOpportunityTable);
        updateForm = classfactory.formRunClass(args);
        updateForm.init();
        updateForm.run();
        // check if the form is closed
        if (!updateForm.closed())
            updateForm.wait(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpdateButtons</Name>
				<Source><![CDATA[
    // Enable/disable update buttons depending on the current status
    static void setUpdateButtons(smmOpportunityTable _smmOpportunityTable,
                                        FormButtonControl   buttonReactivate,
                                        FormButtonControl   buttonPostpone,
                                        FormButtonControl   buttonWin,
                                        FormButtonControl   buttonCancel,
                                        FormButtonControl   buttonLose)
    {
        SalesQuotationTable salesQuotationTable;
        boolean             confirmedQuoteExist;

        buttonReactivate.enabled(false);
        buttonPostpone.enabled(false);
        buttonWin.enabled(false);
        buttonCancel.enabled(false);
        buttonLose.enabled(false);

        confirmedQuoteExist = (select firstonly salesQuotationTable
                                    where salesQuotationTable.OpportunityId == _smmOpportunityTable.OpportunityId &&
                                          salesQuotationTable.QuotationStatus == SalesQuotationStatus::Confirmed).RecId != 0;

        if (_smmOpportunityTable.RecId != 0)
        {
            switch (_smmOpportunityTable.Status)
            {
                case smmOpportunityStatus::Active :
                    buttonWin.enabled(true);
                    buttonPostpone.enabled(!confirmedQuoteExist);
                    buttonCancel.enabled(!confirmedQuoteExist);
                    buttonLose.enabled(!confirmedQuoteExist);
                    break;
                case smmOpportunityStatus::Postponed :
                    buttonReactivate.enabled(true);
                    buttonCancel.enabled(!confirmedQuoteExist);
                    buttonLose.enabled(!confirmedQuoteExist);
                    break;
                case smmOpportunityStatus::Won :
                    break;
                case smmOpportunityStatus::Cancelled :
                    buttonReactivate.enabled(true);
                    buttonPostpone.enabled(!confirmedQuoteExist);
                    break;
                case smmOpportunityStatus::Lost :
                    buttonReactivate.enabled(true);
                    break;
                default :
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromQuote</Name>
				<Source><![CDATA[
    public static boolean updateFromQuote(FormDataSource _quoteDatasource, smmOpportunityStatus _opportunityStatus)
    {
        boolean                 ret = false;
        SalesQuotationTable     salesQuotationTable;
        QuotationIdBase         quotationId;
        SalesQuotationStatus    quotationStatus;

        // If CRM is registered and only one record has been selected
        if (smmLicense::crm() && !_quoteDatasource.anyMarked())
        {
            salesQuotationTable = _quoteDatasource.cursor();
            if (SmmOpportunityStatusUpdate::mustUpdateFormQuote(salesQuotationTable))
            {
                quotationId = salesQuotationTable.QuotationId;
                quotationStatus = salesQuotationTable.QuotationStatus;

                SmmOpportunityStatusUpdate::openForm(smmOpportunityTable::find(salesQuotationTable.OpportunityId, true), _opportunityStatus);

                // Check if update was successful
                salesQuotationTable = SalesQuotationTable::find(quotationId);
                if (salesQuotationTable.QuotationStatus != quotationStatus)
                {
                    // Execute query since there maybe more than one quote that is attached to the opportunity
                    _quoteDatasource.executeQuery();
                    _quoteDatasource.positionToRecordByValue(fieldNum(SalesQuotationTable, QuotationId), quotationId);
                }

                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateFormQuote</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether to update a sales quotation.
    /// manual.
    /// </summary>
    /// <param name="_salesQuotationTable">
    ///     An instance of a sales quotation record.
    /// </param>
    /// <returns>
    ///     true if the sales quotation should be updated; otherwise, false.
    /// </returns>
    protected static boolean mustUpdateFormQuote(SalesQuotationTable _salesQuotationTable)
    {
        return (_salesQuotationTable.OpportunityId && smmParameters::updateOpportunityForQuote(_salesQuotationTable.QuotationType));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>