<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureTransCreateMarkup_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureTransCreateMarkup_RU extends FactureTransCreate_RU
{
    MarkupTrans             markupTrans;
    CustVendInvoiceJour     custVendInvoiceJour;
    CustVendInvoiceTrans    custVendInvoiceTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    protected boolean calcAmounts(Qty _qty)
    {
        VATType_RU      vatType;
        FactureTrans_RU tmpTrans;
        AmountCur       markupAmount = markupTrans.CalculatedAmount;

        int             sign = markupAmount >= 0 ? 1 : -1;

        if (markupTrans.FacturedAmount_RU == markupAmount)
        {
            return false;
        }

        factor          = _qty / markupAmount;

        vatType = markupTrans.TaxVATType_RU;

        select sum(Qty),
               sum(LineAmount),
               sum(vat),
               sum(Excise),
               sum(TaxAmount),
               sum(LineAmountMST),
               sum(vatAmountMST),
               sum(ExciseAmountMST),
               sum(TaxAmountMST)
            from  tmpTrans
            where tmpTrans.MarkupRefRecId  == markupTrans.RecId &&
                  tmpTrans.FactureLineType == FactureLineType_RU::Markup;

        if (abs(markupTrans.FacturedAmount_RU + _qty) >= abs(markupAmount))
        {
            factureTrans.LineAmount      = markupAmount;
            factureTrans.TaxAmount       = abs(markupTrans.TaxAmount)             * sign - tmpTrans.TaxAmount;
            factureTrans.vat             = abs(markupTrans.TaxAmountVAT_RU)       * sign - tmpTrans.vat;
            factureTrans.Excise          = abs(markupTrans.TaxAmountExcise_RU)    * sign - tmpTrans.Excise;

            factureTrans.LineAmountMST   = markupTrans.CalculatedAmountMST_W;
            factureTrans.TaxAmountMST    = abs(markupTrans.TaxAmountMST_W)        * sign - tmpTrans.TaxAmountMST;
            factureTrans.vatAmountMST    = abs(markupTrans.TaxAmountVATMST_RU)    * sign - tmpTrans.vat;
            factureTrans.ExciseAmountMST = abs(markupTrans.TaxAmountExciseMST_RU) * sign - tmpTrans.Excise;
        }
        else
        {
            factureTrans.LineAmount      = _qty;
            factureTrans.TaxAmount       = abs((markupTrans.TaxAmount)           * factor) * sign;
            factureTrans.vat             = abs(markupTrans.TaxAmountVAT_RU       * factor) * sign;
            factureTrans.Excise          = abs(markupTrans.TaxAmountExcise_RU    * factor) * sign;

            factureTrans.LineAmountMST   = CurrencyExchangeHelper::amountCur2MST(_qty, custVendInvoiceJour.CurrencyCode, custVendInvoiceJour.ExchRate, custVendInvoiceJour.InvoiceDate, custVendInvoiceJour.ExchRateSecondary, custVendInvoiceJour.Triangulation);
            factureTrans.TaxAmountMST    = abs((markupTrans.TaxAmountMST_W)      * factor) * sign;
            factureTrans.vatAmountMST    = abs(markupTrans.TaxAmountVATMST_RU    * factor) * sign;
            factureTrans.ExciseAmountMST = abs(markupTrans.TaxAmountExciseMST_RU * factor) * sign;
        }

        factureTrans.TaxGroup     = markupTrans.TaxGroup;
        factureTrans.TaxItemGroup = markupTrans.TaxItemGroup;
        factureTrans.TaxCode      = facture.vatCode(markupTrans.TaxGroup, markupTrans.TaxItemGroup);

        factureTrans.vatType     = vatType;
        factureTrans.vatValue    = markupTrans.TaxValueVAT_RU;
        factureTrans.ExciseValue = 0.0;

        if (! factureTrans.isTmp())
        {
            markupTrans.FacturedAmount_RU  += factureTrans.LineAmount;
            markupTrans.doUpdate();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans()
    {
        boolean ret;
        boolean isProforma;

        ret = super();

        if (facture)
        {
            isProforma = facture.isProforma();
        }

        if (custVendInvoiceJour || !isProforma)
        {
            if (custVendInvoiceJour.InvoiceDate > factureJour.FactureDate)
            {
                ret = checkFailed("@GLS104572");
            }

            if (custVendInvoiceJour.TableId == tableNum(CustInvoiceJour))
            {
                if (CustParameters::taxation_RU(custVendInvoiceJour.InvoiceDate) == CustTaxation_RU::OnPayment &&
                    CustParameters::taxation_RU(factureJour.FactureDate) == CustTaxation_RU::OnDelivery)
                {
                    ret = checkFailed(strFmt("@GLS110905",
                                             CustTaxation_RU::OnPayment));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInvoiceJour</Name>
				<Source><![CDATA[
    private CustVendInvoiceJour custVendInvoiceJour(CustVendInvoiceTrans _custVendInvoiceTrans)
    {
        CustVendInvoiceJour ret;

        if (_custVendInvoiceTrans)
        {
            switch (_custVendInvoiceTrans.TableId)
            {
                case tableNum(CustInvoiceTrans) :
                    ret = CustInvoiceJour::findFromCustInvoiceTrans(_custVendInvoiceTrans.SalesPurchId_RU,
                                                                    _custVendInvoiceTrans.InvoiceNum,
                                                                    _custVendInvoiceTrans.InvoiceDate,
                                                                    _custVendInvoiceTrans.NumberSequenceGroupId_RU);
                    break;
                case tableNum(VendInvoiceTrans) :

                    ret = VendInvoiceJour::findFromVendInvoiceTrans(_custVendInvoiceTrans.SalesPurchId_RU,
                                                                    _custVendInvoiceTrans.InvoiceNum,
                                                                    _custVendInvoiceTrans.InvoiceDate,
                                                                    _custVendInvoiceTrans.NumberSequenceGroupId_RU,
                                                                    _custVendInvoiceTrans.PurchInternalInvoiceId_RU);
                    break;
            }
        }

        if (! ret)
        {
            switch (markupTrans.TransTableId)
            {
                case tableNum(CustInvoiceJour) :
                    ret = CustInvoiceJour::findRecId(markupTrans.TransRecId);
                    break;
                case tableNum(VendInvoiceJour) :
                    ret = VendInvoiceJour::findRecId(markupTrans.TransRecId);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInvoiceTrans</Name>
				<Source><![CDATA[
    private CustVendInvoiceTrans custVendInvoiceTrans()
    {
        CustVendInvoiceTrans    ret;

        switch (markupTrans.TransTableId)
        {
            case tableNum(CustInvoiceTrans) :
                ret = CustInvoiceTrans::findRecId(markupTrans.TransRecId);
                break;
            case tableNum(VendInvoiceTrans) :
                ret = VendInvoiceTrans::findRecId(markupTrans.TransRecId);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    protected void initTrans()
    {
        ;
        custVendInvoiceTrans = this.custVendInvoiceTrans();
        custVendInvoiceJour  = this.custVendInvoiceJour(custVendInvoiceTrans);

        super();

        factureTrans.InvoiceId           = custVendInvoiceJour.InvoiceNum;
        factureTrans.FactureLineType     = FactureLineType_RU::Markup;
        factureTrans.InvoiceLineNum      = 0;
        factureTrans.InvoiceDate         = custVendInvoiceJour.InvoiceDate;
        factureTrans.Unit                = "";
        factureTrans.DefaultDimension    = custVendInvoiceTrans.RecId ?
                                           custVendInvoiceTrans.DefaultDimension_RU :
                                           custVendInvoiceJour.DefaultDimension;
        factureTrans.InventGTDId         = "";
        factureTrans.CountryRegionName   = "";
        factureTrans.InventDimId         = "";
        factureTrans.ItemId              = "";
        factureTrans.Category            = 0;
        factureTrans.ItemName            = markupTrans.Txt;
        factureTrans.MarkupRefRecId      = markupTrans.RecId;
        factureTrans.MarkupRefTableId    = markupTrans.TableId;
        factureTrans.Qty                 = 0.0;
        factureTrans.Price               = 0.0;
        factureTrans.ExchRate            = custVendInvoiceJour.ExchRate;
        factureTrans.SalesPurchId        = custVendInvoiceJour.Num;
        factureTrans.NumberSequenceGroup = custVendInvoiceJour.NumberSequenceGroupId;

        if (custVendInvoiceJour.TableId == tableNum(VendInvoiceJour) ||
           custVendInvoiceJour.TableId == tableNum(CustInvoiceJour))
        {
            if (custVendInvoiceJour.TableId == tableNum(VendInvoiceJour))
            {
                factureTrans.InternalInvoiceId = custVendInvoiceJour.PurchInternalInvoiceId_RU;
            }
            factureTrans.InventTransId     = custVendInvoiceTrans.RecId         ?
                                             custVendInvoiceTrans.InventTransId :
                                             "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU _facture,
                    RecId                _recId,
                    Qty                  _qty,
                    NoYes                _recalcTaxes)
    {
        super(_facture, _recId, _qty, _recalcTaxes);

        markupTrans.selectForUpdate(! _facture.getFactureJour().isTmp());

        select firstonly markupTrans
            where markupTrans.RecId == _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(RecId _recId, Qty _qty, NoYes _recalcTaxes)
    {
        super(_recId, _qty, _recalcTaxes);
        markupTrans.selectForUpdate(! facture.getFactureJour().isTmp());

        select firstonly markupTrans
            where markupTrans.RecId == _recId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>