<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqSavedViewFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation;

/// <summary>
/// The <c>ProdSavedViewFeature</c> class publishes saved views for the Reqcution area.
/// </summary>
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class ReqSavedViewFeature implements IFeatureMetadata, IFeatureLifecycle, IFeatureDependencies, IFeatureMetadataEnablementNotifiable
{
    static private ReqSavedViewFeature singleton;

    internal const Name SimplifiedReqTransPoViewName             = 'Simplified';
    internal const Name SimplifiedReqTransPoDetailsViewName      = 'Simplified';
    internal const Name SimplifiedReqTransPoViewOldName2         = 'Processing';
    internal const Name SimplifiedReqTransPoDetailsViewOldName2  = 'Processing';
    internal const Name SimplifiedReqTransPoViewOldName          = 'Simplified planned order view';
    internal const Name SimplifiedReqTransPoDetailsViewOldName   = 'Simplified planned order details view';

    private static container resources =
       [resourceStr(ReqTransPoSimplifiedView),
        resourceStr(ReqTransPoSimplifiedDetailsView)];

    private static container viewGuids =
       [new System.Guid('414af37e-596d-46ba-b3b4-885b0a09c053'),
        new System.Guid('dc019ec0-7e66-4d6f-815e-aeebfd46db4c')];

    private static container viewNameLabels =
       ['@SCM:ReqTransPoSimplifiedViewName',
        '@SCM:ReqTransPoSimplifiedDetailsViewName'];

    private static container viewDescriptionLabels =
       ['@SCM:ReqTransPoSimplifiedViewDescr',
        '@SCM:ReqTransPoSimplifiedDetailsViewDescr'];

    private static container formsToApplyViews =
       [formStr(ReqTransPo),
        formStr(ReqTransPo)];

    private static container formNamesToApplyViews =
       [SimplifiedReqTransPoViewName,
        SimplifiedReqTransPoDetailsViewName];

    private static container oldFormNamesForAppliedViews =
       [SimplifiedReqTransPoViewOldName,
        SimplifiedReqTransPoDetailsViewOldName];

    private static container oldFormNamesForAppliedViews2 =
       [SimplifiedReqTransPoViewOldName2,
        SimplifiedReqTransPoDetailsViewOldName2];

    private static container formViewOptionTypesToApplyViews =
       [FormRunConfigurationFormViewOptionType::Default,
        FormRunConfigurationFormViewOptionType::Details];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>ReqSavedViewFeature</c> class.
    /// </summary>
    /// <returns>
    /// The created instance.
    /// </returns>
    static internal ReqSavedViewFeature instance()
    {
        if (!singleton)
        {
            singleton = new ReqSavedViewFeature();
        }

        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the feature is enabled.
    /// </summary>
    /// <returns>
    /// true if the feature is enabled; otherwise, false.
    /// </returns>
    public boolean isEnabled()
    {
        return Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    public LabelId label()
    {
        return literalStr("@SCM:ReqSaveViewFeatureLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    public int module()
    {
        return FeatureModuleV0::MasterPlanning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    public LabelId summary()
    {
        return literalStr("@SCM:ReqSaveViewFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2141800';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    public boolean canDisable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        for (int i = 1; i <= conlen(resources); i++)
        {
            const str orgShortName = "MSFT";

            FormRunConfigurationPublishManager::publishTemplateConfiguration(
                conPeek(SysResource::getResourceNodeData(SysResource::getResourceNode(conPeek(resources, i))), 1),
                NoYes::Yes,
                conPeek(viewGuids, i),
                orgShortName,
                conPeek(viewNameLabels, i),
                conPeek(viewDescriptionLabels, i),
                FormRunConfigurationScope::MicrosoftPublished);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        for (int i = 1; i <= conlen(formsToApplyViews); i++)
        {
            FormRunConfiguration formRunConfiguration;

            // Since the Name of FormRunConfiguration records exists only in xml file
            // and we are not able to get it because the necessary class is internal (FormRunConfigurationSerializers class)
            // was made a decision to select and delete by hardcoded values.
            while select formRunConfiguration
                where formRunConfiguration.Owner                == conpeek(formsToApplyViews, i)
                   && formRunConfiguration.Scope                == FormRunConfigurationScope::MicrosoftPublished
                   && (formRunConfiguration.Name                == conpeek(formNamesToApplyViews, i)
                       || formRunConfiguration.Name             == conpeek(oldFormNamesForAppliedViews, i)
                       || formRunConfiguration.Name             == conpeek(oldFormNamesForAppliedViews2, i)
                       || formRunConfiguration.Name              == conPeek(viewNameLabels, i))
                   && formRunConfiguration.User                 == ''
                   && formRunConfiguration.FormViewOptionType   == conpeek(formViewOptionTypesToApplyViews, i)
            {
                FormRunConfigurationPublishManager::deleteConfiguration(formRunConfiguration);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAllFeatures</Name>
				<Source><![CDATA[
    public IFeature[] dependsOnAllFeatures()
    {
        var result = new IFeature[1]();
        result.SetValue(CLISavedViewsEnableFeature::instance(), 0);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAnyFeature</Name>
				<Source><![CDATA[
    public IFeature[] dependsOnAnyFeature()
    {
        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>