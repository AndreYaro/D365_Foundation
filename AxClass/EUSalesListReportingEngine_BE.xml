<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListReportingEngine_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EUSalesListReportingEngine_BE</c> class extends the functionality of the
/// <c>EUSalesListReportingEngine</c> class in order to support requirements that are specific to
/// Belgium.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoBE)]
class EuSalesListReportingEngine_BE extends EUSalesListReportingEngine implements BatchRetryable
{
    NoYes                       officialDeclaration;
    Correct                     correction;
    TaxIntervatDeclarationRef   replacementDeclarationRef;

    DialogField     dialogOfficialDeclaration;
    DialogField     dialogCorrection;
    DialogField     dialogReplacementDeclarationRef;

    NumberSeq       numberSeq;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        officialDeclaration,
        correction,
        replacementDeclarationRef
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record into the <c>EUSalesListReportingGroup</c> table.
    /// </summary>
    /// <param name="_euSalesListReportingHeaderRecId">
    /// The reference to the header record to which the group belongs.
    /// </param>
    /// <returns>
    /// A <c>EUSalesListReportingGroup</c> table buffer.
    /// </returns>
    protected EUSalesListReportingGroup addGroup(RefRecId _euSalesListReportingHeaderRecId)
    {
        EUSalesListReportingGroup  euSalesListReportingGroup;
        EUSalesListReportingHeader euSalesListReportingHeader;

        euSalesListReportingHeader = EUSalesListReportingHeader::find(_euSalesListReportingHeaderRecId, true);

        euSalesListReportingGroup = super(_euSalesListReportingHeaderRecId);

        euSalesListReportingGroup.PeriodType  = euSalesListReportingHeader.ReportingPeriodType;
        euSalesListReportingGroup.PeriodValue = this.getPeriod(euSalesListReportingHeader.FromDate, euSalesListReportingHeader.ReportingPeriodType);
        euSalesListReportingGroup.PeriodYear  = year(euSalesListReportingHeader.FromDate);
        euSalesListReportingGroup.update();

        return euSalesListReportingGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record into the <c>EUSalesListReportingHeader</c> table.
    /// </summary>
    /// <returns>
    /// A <c>EUSalesListReportingHeader</c> table buffer.
    /// </returns>
    protected EUSalesListReportingHeader addHeader()
    {
        EUSalesListReportingHeader euSalesListReportingHeader;
        Num                        number;

        #define.Numerals        ('0123456789')
        #define.NumberLength    (4)

        euSalesListReportingHeader = super();

        numberSeq = NumberSeq::newGetNum(IntrastatParameters::numRefEUSalesListXML_BE(), true);

        number = strKeep(numberSeq.num(), #Numerals);
        number = subStr(number, strLen(number), - #NumberLength);
        number = strRep('0', #NumberLength - strLen(number)) + number;

        euSalesListReportingHeader.OfficialDeclaration_BE       = officialDeclaration;
        euSalesListReportingHeader.Correction                   = correction;
        euSalesListReportingHeader.ControlRef_BE                = number;
        euSalesListReportingHeader.ReplacementDeclarationRef    = replacementDeclarationRef;
        euSalesListReportingHeader.update();

        return euSalesListReportingHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    public RefRecId calculate()
    {
        RefRecId euSalesListReportingHeaderRecIdLocal;

        euSalesListReportingHeaderRecIdLocal = super();

        if (euSalesListReportingHeaderRecIdLocal && correction)
        {
            this.processCorrections(euSalesListReportingHeaderRecIdLocal);
            this.calculateGrandTotals(EUSalesListReportingHeader::find(euSalesListReportingHeaderRecIdLocal));
        }

        if (officialDeclaration)
        {
            numberSeq.used();
        }
        else
        {
            numberSeq.abort();
        }

        return euSalesListReportingHeaderRecIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.curFormGroup(dialogGroupExportOptions.formGroup());

        dialogOfficialDeclaration       = dialog.addFieldValue(extendedTypeStr(NoYesId), officialDeclaration, "@SYS92271");
        dialogCorrection                = dialog.addFieldValue(extendedTypeStr(Correct), correction, "@SYS13069", "@SYS334906");
        dialogReplacementDeclarationRef = dialog.addFieldValue(extendedTypeStr(TaxIntervatDeclarationRef), replacementDeclarationRef, "@SYS4081507", "@SYS4081508");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a record in the <c>EUSalesListReportingGroup</c> table.
    /// </summary>
    /// <param name="_euSalesListReportingHeaderRecId">
    ///    The reference to the header record to which the group belongs.
    /// </param>
    /// <param name="_periodType">
    ///    The reporting period type.
    /// </param>
    /// <param name="_periodValue">
    ///    The reporting period value.
    /// </param>
    /// <param name="_periodYear">
    ///    The reporting period year.
    /// </param>
    /// <param name="_corrected">
    ///    true if the transaction is a correction transaction.
    /// </param>
    /// <returns>
    ///    The <c>EUSalesListReportingGroup</c> table buffer.
    /// </returns>
    protected EUSalesListReportingGroup findOrCreateGroup(RefRecId                       _euSalesListReportingHeaderRecId,
                                                          EUSalesListReportingPeriodType _periodType,
                                                          Integer                        _periodValue,
                                                          Integer                        _periodYear,
                                                          Correct                        _corrected)
    {
        EUSalesListReportingGroup  euSalesListReportingGroup;

        select firstonly euSalesListReportingGroup
            where euSalesListReportingGroup.euSalesListReportingHeader == _euSalesListReportingHeaderRecId &&
                  euSalesListReportingGroup.PeriodType                 == _periodType                      &&
                  euSalesListReportingGroup.PeriodValue                == _periodValue                     &&
                  euSalesListReportingGroup.PeriodYear                 == _periodYear                      &&
                  euSalesListReportingGroup.Corrected                  == _corrected;

        if (! euSalesListReportingGroup)
        {
            euSalesListReportingGroup.euSalesListReportingHeader = _euSalesListReportingHeaderRecId;
            euSalesListReportingGroup.PeriodType                 = _periodType;
            euSalesListReportingGroup.PeriodValue                = _periodValue;
            euSalesListReportingGroup.PeriodYear                 = _periodYear;
            euSalesListReportingGroup.Corrected                  = _corrected;
            euSalesListReportingGroup.insert();
        }

        return euSalesListReportingGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            correction                  = dialogCorrection.value();
            officialDeclaration         = dialogOfficialDeclaration.value();
            replacementDeclarationRef   = dialogReplacementDeclarationRef.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the tax period value.
    /// </summary>
    /// <param name="_transDate">
    ///    The start date of reporting.
    /// </param>
    /// <param name="_periodType">
    ///    The reporting period type.
    /// </param>
    /// <returns>
    ///    The tax period value.
    /// </returns>
    private Integer getPeriod(TransDate _transDate, EUSalesListReportingPeriodType _periodType)
    {
        Integer periodValue;

        switch (_periodType)
        {
            case EUSalesListReportingPeriodType::Monthly :
                periodValue = mthOfYr(_transDate);
                break;

            case EUSalesListReportingPeriodType::Quarterly :
                periodValue = date2Qtr(_transDate);
                break;

            case EUSalesListReportingPeriodType::Yearly :
                periodValue = year(_transDate);
                break;

            default:
                break;
        }

        return periodValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates values of one enumeration value to values of another enumeration value.
    /// </summary>
    /// <param name="_correctionPeriodType">
    ///    The value of the <c>MonthQuarter</c> enumeration type.
    /// </param>
    /// <returns>
    ///    The value in the <c>EUSalesListReportingPeriodType</c> enumeration type.
    /// </returns>
    protected EUSalesListReportingPeriodType getPeriodType(MonthQuarter _correctionPeriodType)
    {
        EUSalesListReportingPeriodType ret;

        switch (_correctionPeriodType)
        {
            case MonthQuarter::Quarter :
                ret = EUSalesListReportingPeriodType::Quarterly;
                break;

            default :
                ret = EUSalesListReportingPeriodType::Monthly;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOfficialDeclaration</Name>
				<Source><![CDATA[
    public NoYes parmOfficialDeclaration(NoYes _officialDeclaration = officialDeclaration)
    {
        officialDeclaration = _officialDeclaration;
        return officialDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrection</Name>
				<Source><![CDATA[
    public Correct parmCorrection(Correct _correction = correction)
    {
        correction = _correction;
        return correction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplacementDeclarationRef</Name>
				<Source><![CDATA[
    public TaxIntervatDeclarationRef parmReplacementDeclarationRef(TaxIntervatDeclarationRef _replacementDeclarationRef = replacementDeclarationRef)
    {
        replacementDeclarationRef = _replacementDeclarationRef;
        return replacementDeclarationRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies runtime filters on the query for data selection.
    /// </summary>
    protected void prepareQuery()
    {
        super();

        SysQuery::findOrCreateRange(queryRun.query().dataSourceTable(tableNum(EUSalesList)), fieldNum(EUSalesList, Corrected)).value(queryValue(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCorrectionLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes correction lines in the <c>EUSalesList</c> table.
    /// </summary>
    /// <param name="_euSalesListReportingGroupRecId">
    ///    The reference to the group record to which the line belongs.
    /// </param>
    /// <param name="_accountNum">
    ///    The customer account number.
    /// </param>
    /// <param name="_vatNum">
    ///    The customer VAT number.
    /// </param>
    private void processCorrectionLine(RefRecId _euSalesListReportingGroupRecId, CustVendAC _accountNum, VATNum _vatNum)
    {
        EUSalesListReportingLine    euSalesListReportingLine;

        select firstonly forupdate euSalesListReportingLine
            where euSalesListReportingLine.AccountNum                == _accountNum &&
                  euSalesListReportingLine.euSalesListReportingGroup == _euSalesListReportingGroupRecId &&
                  euSalesListReportingLine.StrippedVATNum            == _vatNum;

        if (euSalesListReportingLine)
        {
            totalAmountItems       -= euSalesListReportingLine.ItemAmountMST;
            totalAmountTriangular  -= euSalesListReportingLine.TriangularAmountMST;
            totalAmountServices    -= euSalesListReportingLine.ServiceAmountMST;

            this.updateLineAmounts(euSalesListReportingLine);
        }
        else
        {
            lineCount ++;
            euSalesListReportingLine = this.addLine(_euSalesListReportingGroupRecId);
            this.updateLineAmounts(euSalesListReportingLine);
        }
        this.saveLastLineAmounts(euSalesListReportingLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCorrections</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes correction lines in the <c>EUSalesList</c> table.
    /// </summary>
    /// <param name="_euSalesListReportingHeaderRecId">
    ///    The reference to the header record to which the group belongs.
    /// </param>
    private void processCorrections(RefRecId _euSalesListReportingHeaderRecId)
    {
        EUSalesListReportingGroup   euSalesListReportingGroup;
        EUSalesList                 euSalesList;

        SysQuery::findOrCreateRange(queryRun.query().dataSourceTable(tableNum(EUSalesList)), fieldNum(EUSalesList, TransDate)).value(SysQuery::valueUnlimited());
        SysQuery::findOrCreateRange(queryRun.query().dataSourceTable(tableNum(EUSalesList)), fieldNum(EUSalesList, Corrected)).value(queryValue(NoYes::Yes));
        SysQuery::findOrCreateRange(queryRun.query().dataSourceTable(tableNum(EUSalesList)), fieldNum(EUSalesList, Status)).value(queryValue(ListStatus::Include));

        queryRun.reset();

        while (queryRun.next())
        {
            euSalesList = queryRun.get(tableNum(EUSalesList));

            euSalesListReportingGroup = this.findOrCreateGroup(_euSalesListReportingHeaderRecId,
                                                               this.getPeriodType(euSalesList.CorrectionDeclarationType_BE),
                                                               this.getPeriod(euSalesList.TransDate, this.getPeriodType(euSalesList.CorrectionDeclarationType_BE)),
                                                               year(euSalesList.TransDate),
                                                               euSalesList.Corrected);

            this.processCorrectionLine(euSalesListReportingGroup.RecId,
                                       euSalesList.AccountNum,
                                       TaxVATNumTable::stripVATNum(euSalesList.vatNum, TaxCountryRegionParameters::find(euSalesList.CountryRegionId).SalesTaxCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;

        #define.Version1(1)
        #localmacro.listVersion1
            officialDeclaration,
            correction
        #endmacro

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;

            case #Version1:
                [version, #listVersion1, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>