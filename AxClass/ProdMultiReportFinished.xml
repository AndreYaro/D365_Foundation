<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiReportFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdMultiReportFinished</c> shows the user dialog box to report a production order as
/// finished.
/// </summary>
/// <remarks>
/// Several production orders can be selected in the user dialog box. Each production order will be
/// reported as finished by using the <c>ProdUpdReportFinished</c> class.
/// </remarks>
class ProdMultiReportFinished extends ProdMulti implements BatchRetryable
{
    ProdParmReportFinished   standardParmReportFinished;

    ProdTable                pmfProdTable;

    #DEFINE.CurrentVersion(7)

    #LOCALMACRO.CurrentList
        standardParmReportFinished
        ,
        pmfProdTable
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decides whether the class is shown in the list of batch journal types.
    /// </summary>
    /// <returns>
    ///    true if the class is set to be shown in the list of batch journal types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class for which the same parameters can repeatedly
    ///    be used. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <see cref="M:RunBaseBatch.canGoBatch" /> is false,
    ///    this method will have no effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    public boolean checkBuffer(Common _prodTable)
    {
        ProdTable prodTable = _prodTable as ProdTable;
        Common anyBuffer;

        return !ProdParmReportFinished::exist(parmId, prodTable.ProdId) && prodTable.status().runReportFinished(anyBuffer,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSignDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the document needs digital signing.
    /// </summary>
    /// <remarks>
    /// Calling this method might result in showing a dialog.
    /// </remarks>
    protected void checkSignDocument()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(SIG)))
        {
            SIGReportFinishedProcedure procedure = SIGReportFinishedProcedure::construct();
            if (procedure.signatureRequired()
                && JmgProdParametersDim::isSignatureSupportedForReportAsFinished())
            {
                procedure.initProdParmReportFinished(this.setSignProduction());
                if (!procedure.sign())
                {
                    throw Exception::Error;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables you to perform any clean up that is required after a dialog box has been canceled.
    /// </summary>
    /// <remarks>
    ///    Override this method if any clean up is necessary after a dialog box has been canceled.
    /// </remarks>
    void cleanupDialog()
    {
        ProdParmReportFinished::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        ProdParmReportFinished  prodParmReportFinished;

        return prodParmReportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the form that is provided with a user interface for specifying parameters for
    ///    update of production.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    formName formName()
    {
        return formStr(ProdParmReportFinished);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are any lines with quantity.
    /// </summary>
    /// <returns>
    /// true if there is at least one line with quantity; otherwise, false.
    /// </returns>
    public boolean hasQty()
    {
        ProdParmReportFinished parmBuffer = this.defaultParmBuffer();

        if (this.parmId())
        {
            select firstonly RecId from parmBuffer
                where parmBuffer.ParmId == this.parmId()
                   && (parmBuffer.QtyGood || parmBuffer.QtyError);
        }

        return (parmBuffer.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer _prodParmReportFinished)
    {
        ProdParmReportFinished prodParmReportFinished = _prodParmReportFinished;
        ProdParmReportFinished saveProdParmReportFinished;
        saveProdParmReportFinished.data(prodParmReportFinished);
        prodParmReportFinished.data(standardParmReportFinished);

        prodParmReportFinished.ParmId           = saveProdParmReportFinished.ParmId;
        prodParmReportFinished.RecId            = saveProdParmReportFinished.RecId;
        prodParmReportFinished.LineNum          = saveProdParmReportFinished.LineNum;
        prodParmReportFinished.ProdId           = saveProdParmReportFinished.ProdId;
        prodParmReportFinished.JobStatus        = saveProdParmReportFinished.JobStatus;
        prodParmReportFinished.ExecutedDateTime = saveProdParmReportFinished.ExecutedDateTime;
        prodParmReportFinished.ItemId           = saveProdParmReportFinished.ItemId;

        prodParmReportFinished.ErrorCause       = saveProdParmReportFinished.ErrorCause;
        prodParmReportFinished.PmfProductType   = saveProdParmReportFinished.PmfProductType;

        prodParmReportFinished.QtyError         = saveProdParmReportFinished.QtyError;
        prodParmReportFinished.QtyGood          = saveProdParmReportFinished.QtyGood;

        prodParmReportFinished.PdsCWBatchGood   = saveProdParmReportFinished.PdsCWBatchGood;
        prodParmReportFinished.PdsCWBatchErr    = saveProdParmReportFinished.PdsCWBatchErr;

        prodParmReportFinished.InventDimId      = saveProdParmReportFinished.InventDimId;
        prodParmReportFinished.InventTransId    = saveProdParmReportFinished.InventTransId;
        prodParmReportFinished.ReportFinishProd = saveProdParmReportFinished.ReportFinishProd;

        prodParmReportFinished.AutoUpdate       = autoUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(Common  _common, ParmBuffer  _prodParmReportFinished)
    {
        ProdParmReportFinished  prodParmReportFinished = _prodParmReportFinished;
        ProdTable               prodTable;

        switch (_common.TableId)
        {
            case tableNum(ProdTable):
                prodTable                   = _common;
                break;

            case tableNum(ProdBOM):
                prodBOM prodBOM             = _common;
                prodTable = ProdTable::find(prodBOM.ProdId);
                break;

            case tableNum(ProdRoute):
                ProdRoute prodRoute         = _common;
                prodTable = ProdTable::find(prodRoute.ProdId);
                break;

            case tableNum(ProdRouteJob):
                ProdRouteJob prodRouteJob   = _common;
                prodTable = ProdTable::find(prodRouteJob.ProdId);
                break;

            case tableNum(PmfProdCoBy):
                PmfProdCoBy prodCoBy        = _common;
                prodTable = ProdTable::find(prodCoBy.ProdId);
                break;

            default:
                break;
        }

        if (usedInitParmDefault)
        {
            standardParmReportFinished.initFromProdParametersDim(prodTable.prodParametersDim());
            usedInitParmDefault = false;
        }

        super(_common, prodParmReportFinished);

        this.initializeProdParmReportFinish(prodParmReportFinished, _common, prodTable);

        if (this.mustInsertProdParmReportFinished(prodParmReportFinished))
        {
            prodParmReportFinished.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProdParmReportFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>ProdParmReportFinished</c> record from source record.
    /// </summary>
    /// <param name = "_prodParmReportFinished">A report as finished pararameter record.</param>
    /// <param name = "_common">A source record.</param>
    /// <param name = "_prodTable">A production order record associated with the source record.</param>
    protected void initializeProdParmReportFinish(ProdParmReportFinished _prodParmReportFinished, Common _common, ProdTable _prodTable)
    {
        void initFromProdTable()
        {
            _prodParmReportFinished.initFromProdTable(_prodTable);
            _prodParmReportFinished.QtyGood          = 0;
            _prodParmReportFinished.QtyError         = 0;
            _prodParmReportFinished.ErrorCause       = ProdErrorCause::None;
            _prodParmReportFinished.ReportFinishProd = NoYes::Yes;
        }
        
        switch (_common.TableId)
        {
            case tableNum(ProdTable):
                initFromProdTable();

                if (!#PmfEnabled
                    || _prodTable.inventTable().PmfProductType != PmfProductType::MainItem)
                {
                    _prodParmReportFinished.QtyGood            = ProdUpdReportFinished::proposalQtyGood(_prodTable.ProdId);
                    _prodParmReportFinished.QtyError           = ProdUpdReportFinished::proposalQtyError(_prodTable.ProdId);
                    if (PdsGlobal::pdsIsCWItem(_prodTable.ItemId))
                    {
                        _prodParmReportFinished.PdsCWBatchGood = ProdUpdReportFinished::pdsCWProposalQtyGood(_prodTable.ProdId);
                        _prodParmReportFinished.PdsCWBatchErr  = ProdUpdReportFinished::pdsCWProposalQtyError(_prodTable.ProdId);
                    }
                }
                else
                {
                    _prodParmReportFinished.QtyGood         = 0;
                    _prodParmReportFinished.QtyError        = 0;
                    _prodParmReportFinished.PdsCWBatchGood  = 0;
                    _prodParmReportFinished.PdsCWBatchErr   = 0;
                }

                break;

            case tableNum(ProdBOM):
                prodBOM prodBOM = _common;

                initFromProdTable();

                ProdRoute prodBOMRoute = prodBOM.prodRoute();
                if (prodBOM.RemainBOMPhysical != 0)
                {
                    if (prodBOMRoute.RecId)
                    {
                        _prodParmReportFinished.QtyGood  = ProdUpdReportFinished::proposalQtyGoodRoute(prodBOMRoute);
                    }
                    else
                    {
                        _prodParmReportFinished.QtyGood  = ProdUpdReportFinished::proposalQtyGood(_prodTable.ProdId);
                        _prodParmReportFinished.QtyError = ProdUpdReportFinished::proposalQtyError(_prodTable.ProdId);
                    }
                }
                _prodParmReportFinished.FromOprNum  = prodBOMRoute.OprNum;
                _prodParmReportFinished.ToOprNum    = _prodParmReportFinished.FromOprNum;

                break;

            case tableNum(ProdRoute):
                ProdRoute prodRoute = _common;

                initFromProdTable();

                if (!prodRoute.OprFinished)
                {
                    _prodParmReportFinished.QtyGood             = ProdUpdReportFinished::proposalQtyGoodRoute(prodRoute);

                    if (PdsGlobal::pdsIsCWItem(_prodTable.ItemId))
                    {
                        _prodParmReportFinished.PdsCWBatchGood  = ProdUpdReportFinished::pdsCWProposalQtyGoodRoute(prodRoute);
                    }
                }

                _prodParmReportFinished.FromOprNum  = prodRoute.OprNum;
                _prodParmReportFinished.ToOprNum    = _prodParmReportFinished.FromOprNum;

                break;

            case tableNum(ProdRouteJob):
                ProdRouteJob prodRouteJob = _common;

                initFromProdTable();

                if (prodRouteJob.JobType == RouteJobType::Process && !prodRouteJob.JobFinished)
                {
                    _prodParmReportFinished.QtyGood = ProdUpdReportFinished::proposalQtyGoodRoute(prodRouteJob.prodRoute());
                }

                _prodParmReportFinished.FromOprNum  = prodRouteJob.OprNum;
                _prodParmReportFinished.ToOprNum    = _prodParmReportFinished.FromOprNum;

                break;

            case tableNum(PmfProdCoBy):
                PmfProdCoBy prodCoBy = _common;

                _prodParmReportFinished.pmfInitFromProdCoBy(prodCoBy);
                _prodParmReportFinished.ErrorCause       = ProdErrorCause::None;
                _prodParmReportFinished.ReportFinishProd = NoYes::No;
                break;

            default:
                break;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertProdParmReportFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>ProdParmReportFinished</c> record must be inserted.
    /// </summary>
    /// <param name = "_prodParmReportFinished">The record to validate.</param>
    /// <returns>true if the record must be inserted; otherwise, false.</returns>
    protected boolean mustInsertProdParmReportFinished(ProdParmReportFinished  _prodParmReportFinished)
    {
        return InventTable::find(_prodParmReportFinished.ItemId).PmfProductType != PmfProductType::MainItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return ProdParmReportFinished::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>ProdMultiReportFinished</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>ProdMultiReportFinished</c> class.
    /// </returns>
    /// <remarks>
    ///    All variables that are required to re-initialize the class after construction must be packed.
    ///    Typically, a macro in the class declaration is used to list the variables to pack. Another macro
    ///    holds a version number that refers to the version of the variable list. When a new variable is
    ///    introduced, follow these steps:
    ///    <list type="number">
    ///       <item>
    ///          <description>Increment the version number in the version macro.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Copy the current list to the <c>unpack</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the new variable to the bottom of the list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Recompile the class.</description>
    ///       </item>
    ///    </list>
    ///     When the
    ///    <c>
    ///       isSwappingPrompt
    ///    </c>
    ///     method returns a value of true, you may have to pack some prompt-related variables.
    /// </remarks>
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer _standard = standardParmReportFinished)
    {
        standardParmReportFinished = _standard;

        return standardParmReportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfInsertPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Classes post production/batch insert actions.
    /// </summary>
    /// <param name="_common">Current record.</param>
    /// <param name="_prodParmReportFinished">Current parm record.</param>
    /// <param name="_initFromParmBuffer">Indicates if the co/by product buffer should be initialized from the main buffer; optional</param>
    public void pmfInsertPost(
        Common      _common,
        ParmBuffer  _prodParmReportFinished,
        boolean     _initFromParmBuffer = false
        )
    {
        ProdParmReportFinished  coByParmBuffer = this.defaultParmBuffer();
        ProdParmReportFinished  prodParmReportFinished = _prodParmReportFinished;

        super(_common, _prodParmReportFinished);

        switch (_common.TableId)
        {
            case tableNum(ProdTable):
                pmfProdTable = _common;
                break;
            default:
                pmfProdTable = ProdTable::find(prodParmReportFinished.ProdId);
                break;
        }

        if (pmfProdTable 
            && (prodParmReportFinished.PmfProductType == PmfProductType::Formula
             || prodParmReportFinished.PmfProductType == PmfProductType::MainItem))
        {
            coByParmBuffer.LineNum = this.lastLineNum();

            this.insertCoByProduct(coByParmBuffer, prodParmReportFinished, _initFromParmBuffer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCoByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes records for co/by products and inserts them into <c>ProdParmReportFinished</c> table.
    /// </summary>
    /// <param name = "_coByParmBuffer">Current parm record for a co/by item.</param>
    /// <param name = "_prodParmReportFinished">Current parm record for a main item.</param>
    /// <param name = "_initFromParmBuffer">Indicates if the co/by product buffer should be initialized from the main buffer.</param>
    protected void insertCoByProduct(ProdParmReportFinished  _coByParmBuffer,  ProdParmReportFinished  _prodParmReportFinished, boolean _initFromParmBuffer)
    {
        PmfProdCoBy             prodCoBy;

        while select prodCoBy
                where prodCoBy.ProdId == pmfProdTable.ProdId
        {
            _coByParmBuffer.LineNum++;

            this.insert(prodCoBy, _coByParmBuffer);

            if (_initFromParmBuffer && _coByParmBuffer)
            {
                _coByParmBuffer.EndJob = _prodParmReportFinished.EndJob;
                _coByParmBuffer.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current production or batch order.
    /// </summary>
    /// <returns>
    /// The current production or batch order.
    /// </returns>
    public ProdTable pmfProdTable()
    {
        return pmfProdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfRunPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles posting before the run event.
    /// </summary>
    public void pmfRunPre()
    {
        ProdParmReportFinished  prodParmCoBy, prodParmEndItem, newProdParmProd;

        ttsbegin;

        //Dummy prodTable parm for when reporting only coBys
        while select prodParmCoBy
            group by ProdId
            where prodParmCoBy.ParmId == this.parmId()
                && (prodParmCoBy.PmfProductType == PmfProductType::Co_Product
                    || prodParmCoBy.PmfProductType == PmfProductType::By_Product)
            notexists join prodParmEndItem
                where prodParmEndItem.ParmId == prodParmCoBy.ParmId
                    && prodParmEndItem.ProdId == prodParmCoBy.ProdId
                    && prodParmEndItem.ReportFinishProd == NoYes::Yes
                    && (prodParmEndItem.PmfProductType == PmfProductType::None
                        || prodParmEndItem.PmfProductType == PmfProductType::BOM
                        || prodParmEndItem.PmfProductType == PmfProductType::Formula
                        || prodParmEndItem.PmfProductType == PmfProductType::MainItem)
        {
            newProdParmProd = ProdParmReportFinished::find(this.parmId(), prodParmCoBy.ProdId);
            newProdParmProd.LineNum = this.lastLineNum() +1;
            newProdParmProd.initFromProdTable(ProdTable::find(prodParmCoBy.ProdId));
            newProdParmProd.QtyGood = 0;
            newProdParmProd.QtyError = 0;
            newProdParmProd.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        return new QueryRun(queryStr(ProdMultiSelectReportFinished)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        using (var m =  ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::MultiReportFinished))
        {
            #OCCRetryCount

            this.pmfRunPre();

            super();

            this.pmfRunPre();

            ProdParmReportFinished prodParmReportFinished = this.setProduction();

            this.checkSignDocument();

            while (prodParmReportFinished)
            {
                try
                {
                    this.reportFinishedProductionOrder(prodParmReportFinished);
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            SIGBaseDocument::clearAllFromCache(); //SIG
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        SIGBaseDocument::clearAllFromCache(); //SIG
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    SIGBaseDocument::clearAllFromCache(); //SIG
                    exceptionTextFallThrough();
                }
                next prodParmReportFinished;
            }
            if (#PmfEnabled)
            {
                this.pmfUpdateConsOrders();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFinishedProductionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs reports a single production order as finished.
    /// </summary>
    /// <param name = "_prodParmReportFinished">Report as finished parameters.</param>
    [Replaceable]
    protected void reportFinishedProductionOrder(ProdParmReportFinished _prodParmReportFinished)
    {
        // Only run when the Prod Order is not Stopped.
        if (WHSProdTable::find(_prodParmReportFinished.ProdId).Stopped)
        {
            error(strFmt("@WAX1701", _prodParmReportFinished.ProdId));
        }

        this.initProdTable(_prodParmReportFinished.ProdId).status().runReportFinished(_prodParmReportFinished, false, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of records that are related to a production order.
    /// </summary>
    /// <returns>
    /// The <c>ProdParmReportFinished</c> records.
    /// </returns>
    public ParmBuffer setProduction()
    {
        ProdParmReportFinished parmBuffer = this.defaultParmBuffer();

        if (this.parmId())
        {
            select parmBuffer
                order by LineNum
                where parmBuffer.ParmId == this.parmId()
                    && (!#PmfEnabled
                        || parmBuffer.PmfProductType == PmfProductType::BOM
                        || parmBuffer.PmfProductType == PmfProductType::Formula
                        || parmBuffer.PmfProductType == PmfProductType::None
                        || parmBuffer.PmfProductType == PmfProductType::MainItem);
        }
        return parmBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSignProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the list of records that will be signed by using an e-signature.
    /// </summary>
    /// <returns>
    /// The <c>ProdParmReportFInished</c> records that must be signed.
    /// </returns>
    public ParmBuffer setSignProduction()
    {
        ProdParmReportFinished parmBuffer = this.defaultParmBuffer();

        if (this.parmId())
        {
            select parmBuffer
                order by LineNum
                where parmBuffer.ParmId == this.parmId()
                    && (!#PmfEnabled
                        || parmBuffer.PmfProductType == PmfProductType::BOM
                        || parmBuffer.PmfProductType == PmfProductType::Formula
                        || parmBuffer.PmfProductType == PmfProductType::None
                        || parmBuffer.PmfProductType == PmfProductType::MainItem
                        || parmBuffer.PmfProductType == PmfProductType::By_Product
                        || parmBuffer.PmfProductType == PmfProductType::Co_Product);
        }
        return parmBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter value to an instance of the
    ///    <c>ProdMultiReportFinished</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, you may have to unpack some
    ///    prompt-related variables.
    /// </remarks>
    boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conPeek(_packedClass,1);
        container   base;
        boolean     dummy;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                standardParmReportFinished.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                ret = super(base);
                break;
            case 5:
                [version,
                 parmId,
                 dummy,
                 standardParmReportFinished.PostNow,
                 standardParmReportFinished.AcceptError,
                 standardParmReportFinished.bomAutoConsump,
                 standardParmReportFinished.RouteAutoConsump,
                 standardParmReportFinished.bomJournalNameId,
                 standardParmReportFinished.RouteJournalNameId,
                 standardParmReportFinished.ProdJournalNameId,
                 standardParmReportFinished.EndJob,
                 standardParmReportFinished.EndPicklist,
                 standardParmReportFinished.EndRouteCard] = _packedClass;
                ret = true;
                break;
            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdMultiReportFinished construct(Args _args)
    {
        ProdMultiReportFinished prodMultiReportFinished = new ProdMultiReportFinished();

        return prodMultiReportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@SYS13194";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.parmEnum() == RunChoose::Run)
        {
            ProdMultiReportFinished prodMultiReportFinished = ProdMultiReportFinished::construct(_args);
            RunBaseMultiParm::initFromForm(prodMultiReportFinished,_args);

            if (! prodMultiReportFinished.prompt())
            {
                return;
            }

            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(prodMultiReportFinished.formName(), _args.menuItemName()))
            {
                prodMultiReportFinished.runOnServer();
            }

            if (_args && _args.caller())
            {
                prodMultiReportFinished.refreshOrRereadCaller(_args);
            }
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>