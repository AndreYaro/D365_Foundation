<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetsRefIdentitiesProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TimesheetReportRefIdentitiesProvider</c> class loads timesheet reference identities
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProjectTimesheets), SourceDocument_ProjectTimesheets::Timesheets)]
class TSTimesheetsRefIdentitiesProvider extends SourceDocReferenceIdentitiesProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        typeEnumName = enumStr(SourceDocument_ProjectTimesheets);
        typeEnumValue = SourceDocument_ProjectTimesheets::Timesheets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocAccEventRefIdentities</Name>
				<Source><![CDATA[
    private void insertSourceDocAccEventRefIdentities()
    {
        SubledgerJournalEntryIdentityInProcess      subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity    sourceDocumentAcctEventReferenceIdentity; 
        SourceDocumentAcctEventReferenceIdentity    sourceDocumentAcctEventReferenceIdentityNotExists;
        AccountingEvent                             accountingEvent;
        SubledgerJournalTransferId                  refIdentityTransferId;
        ResourceWorkerView                          resourceWorkerView;
        TSTimesheetTable                            tsTimesheetTable;

        refIdentityTransferId = this.parmReferenceIdentityTransferId();

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentAcctEventReferenceIdentity.skipDataMethods(true);
            sourceDocumentAcctEventReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentAcctEventReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentAcctEventReferenceIdentity(
            DocumentNumber,
            DocumentDate,
            SourceDocumentHeader,
            AccountingEvent)
        select
            TimesheetNbr,
            PeriodFrom,
            SourceDocumentHeader from tsTimesheetTable
        join RecId from accountingEvent
            where accountingEvent.SourceDocumentHeader == tsTimesheetTable.SourceDocumentHeader
        exists join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == accountingEvent.RecId
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        notExists join sourceDocumentAcctEventReferenceIdentityNotExists
            where sourceDocumentAcctEventReferenceIdentityNotExists.SourceDocumentHeader == tsTimesheetTable.SourceDocumentHeader
               && sourceDocumentAcctEventReferenceIdentityNotExists.AccountingEvent == accountingEvent.RecId;

        update_recordset sourceDocumentAcctEventReferenceIdentity setting
            PartyNumber = resourceWorkerView.PersonnelNumber,
            PartyName = resourceWorkerView.Name
            where sourceDocumentAcctEventReferenceIdentity.PartyNumber == ''
               || sourceDocumentAcctEventReferenceIdentity.PartyName == ''
        join tsTimesheetTable
            where tsTimesheetTable.SourceDocumentHeader == sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader
        join RecId from accountingEvent
            where accountingEvent.SourceDocumentHeader == tsTimesheetTable.SourceDocumentHeader
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == accountingEvent.RecId
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        join PersonnelNumber, Name from resourceWorkerView
                where resourceWorkerView.RecId == tsTimesheetTable.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocLineRefIdentities</Name>
				<Source><![CDATA[
    private void insertSourceDocLineRefIdentities()
    {
        SourceDocumentReferenceIdentityEnumTmp      sourceDocumentReferenceIdentityEnumMeasureClassTmp;
        SourceDocumentReferenceIdentityEnumTmp      sourceDocumentReferenceIdentityEnumMeasureSymbolTmp;
        SubledgerJournalEntryIdentityInProcess      subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity    sourceDocumentAcctEventReferenceIdentity;
        SourceDocumentLineReferenceIdentity         sourceDocumentLineReferenceIdentity;
        SourceDocumentLineReferenceIdentity         sourceDocumentLineReferenceIdentityNotExists;
        AccountingEvent                             accountingEvent;
        AccountingDistribution                      accountingDistribution;
        SourceDocumentHeader                        sourceDocumentHeader;
        SourceDocumentLine                          sourceDocumentLine;

        TSTimesheetTrans                            tsTimesheetTrans;
        TSTimesheetLine                             tsTimesheetLine;
        TSTimesheetLineWeek                         tsTimesheetLineWeek;
        SubledgerJournalTransferId                  refIdentityTransferId;

        refIdentityTransferId = this.parmReferenceIdentityTransferId();

        sourceDocumentReferenceIdentityEnumMeasureClassTmp = this.populateEnums(enumId2Name(enumNum(UnitOfMeasureClass)));
        sourceDocumentReferenceIdentityEnumMeasureSymbolTmp = this.populateEnums(enumId2Name(enumNum(UnitOfMeasureCodeSymbol)));

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentLineReferenceIdentity.skipDataMethods(true);
            sourceDocumentLineReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentLineReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentLineReferenceIdentity(
            Quantity,
            LineDate,
            LineNumber,
            LineDescription,
            LineText,
            SourceDocumentLine,
            ProductNumber,
            Unit,
            SourceDocumentAcctEventReferenceIdentity)
        select
            Hours,
            TransDate,
            LineNum,
            IntComment,
            ExtComment,
            SourceDocumentLine from tsTimesheetTrans
            group by
                sourceDocumentLine.RecId,
                accountingEvent.RecId,
                tsTimesheetTrans.Hours,
                tsTimesheetTrans.TransDate,
                tsTimesheetTrans.LineNum,
                tsTimesheetTrans.IntComment,
                tsTimesheetTrans.ExtComment,
                tsTimesheetTrans.SourceDocumentLine,
                sourceDocumentReferenceIdentityEnumMeasureClassTmp.EnumString,
                sourceDocumentReferenceIdentityEnumMeasureSymbolTmp.EnumString,
                sourceDocumentAcctEventReferenceIdentity.RecId
        join EnumString from sourceDocumentReferenceIdentityEnumMeasureClassTmp
            where sourceDocumentReferenceIdentityEnumMeasureClassTmp.EnumId == any2Int(enumNum(UnitOfMeasureClass))
               && sourceDocumentReferenceIdentityEnumMeasureClassTmp.EnumValue == enum2int(UnitOfMeasureClass::Time)
        join EnumString from sourceDocumentReferenceIdentityEnumMeasureSymbolTmp
            where sourceDocumentReferenceIdentityEnumMeasureSymbolTmp.EnumId == any2Int(enumNum(UnitOfMeasureCodeSymbol))
               && sourceDocumentReferenceIdentityEnumMeasureSymbolTmp.EnumValue == enum2int(UnitOfMeasureCodeSymbol::Hours)
        join sourceDocumentLine
            where sourceDocumentLine.RecId == tsTimesheetTrans.SourceDocumentLine
        join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
        join accountingDistribution
            where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
               && accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
               && accountingDistribution.AccountingEvent == accountingEvent.RecId
        join RecId from sourceDocumentAcctEventReferenceIdentity
            where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
               && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        notExists join sourceDocumentLineReferenceIdentityNotExists
            where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == tsTimesheetTrans.SourceDocumentLine
               && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReferenceIdentities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into <c>SourceDocumentAcctEventReferenceIdentity</c> and <c>SourceDocumentLineReferenceIdentity</c> tables with timesheet reference identities.
    /// </summary>
    protected void populateReferenceIdentities()
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
            SourceDocumentInstrumentationConstants::SourceDocReferenceIdentitiesProvider,
            classStr(TSTimesheetsRefIdentitiesProvider),
            SourceDocumentInstrumentationConstants::TSTimesheetsRefIdentitiesProvider))
        {
            int64 startTime, curTime = 0;

            startTime = activityContext.getElapsedMilliseconds();
            // Process the main source document reference identities for the header and lines
            this.insertSourceDocAccEventRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertAcctEventRefIdentities,
                int642str(curTime - startTime));
            
            startTime = activityContext.getElapsedMilliseconds();
            // Process the related line reference identities
            this.insertSourceDocLineRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertLineRefIdentities,
                int642str(curTime - startTime));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>