<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099ReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>Tax1099ReportDP</c> class is a report data provider (RDP) class for the associated
/// <c>Tax1099Report</c> reports.
/// </summary>
[SRSReportQueryAttribute(queryStr(Tax1099Report)), SRSReportParameterAttribute(classStr(Tax1099ReportContract))]
class Tax1099ReportDP extends SrsReportDataProviderPreProcessTempDB
{
    str vendAccountFilter;
    str dateFilter;
    StartDate fromDate;
    EndDate toDate;
    NoYes assignNumber;
    Yr year1099;
    Tax1099State onlyStateToPrint;
    Tax1099Type tax1099Type;
    str tax1099Str;
    BankRegNum payersRTN;
    Tax1099IRSPayerRec tax1099IRSPayerRec;
    Tax1099IRSPayerRec tax1099IRSPayerRecTmp;
    boolean report1099;
    VendTable vendTable;
    Tax1099Summary tax1099Summary;
    Tax1099Fields tax1099Fields;

    // variables for printing
    Tax1099Amount stateTaxWithheld1;
    Tax1099Amount stateTaxWithheld2;
    Tax1099StateTaxID stateTaxId1;
    Tax1099StateTaxID stateTaxId2;
    Tax1099Amount stateIncome1;
    Tax1099Amount stateIncome2;
    str stateAndTaxId1;
    str stateAndTaxId2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNum</Name>
				<Source><![CDATA[
    private NumberSeq allocateNum()
    {
        return NumberSeq::newGetNum(VendParameters::numRefTax1099Num());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTax1099ReportsRecords</Name>
				<Source><![CDATA[
    void createTax1099ReportsRecords()
    {
        date systemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        Tax1099Reports tax1099Reports;

        delete_from tax1099Reports;

        select forupdate tax1099Reports;

        while select tax1099IRSPayerRec
        {
            tax1099Reports.clear();
            tax1099Reports.Tax1099Num = tax1099IRSPayerRec.Tax1099Num;
            tax1099Reports.Tax1099Date = systemDate;
            tax1099Reports.VendAccount = tax1099IRSPayerRec.AcctNumForPayee;
            tax1099Reports.Tax1099Year = year1099;
            tax1099Reports.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    private void getFromDialog()
    {
        Tax1099ReportContract contract = this.parmDataContract() as Tax1099ReportContract;

        year1099 = contract.parmYear1099();
        tax1099Type = contract.parmTax1099Type();
        assignNumber = contract.parmAssignNumber();
        onlyStateToPrint = contract.parmOnlyStateToPrint();
        vendAccountFilter = contract.parmVendorRange();
        dateFilter = contract.parmDateRange();
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099IRSPayerRecDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from <c>Tax1099IRSPayerRec</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>Tax1099IRSPayerRec</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(Tax1099IRSPayerRec))]
    public Tax1099IRSPayerRec getTax1099IRSPayerRecDS()
    {
        select tax1099IRSPayerRecTmp;

        return tax1099IRSPayerRecTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query, based on user input and information passed from the caller object, and then
    /// adds the criteria to the ranges of the <c>Tax1099Report</c> based on the user input.
    /// </summary>
    private void initQuery()
    {
        CompanyBankAccountId companyBankAccountId = CompanyInfo::find().BankAcctUsedFor1099;
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange queryBuildRange;

        if (companyBankAccountId)
        {
            payersRTN = BankAccountTable::find(companyBankAccountId).RegistrationNum;
        }

        queryBuildDataSource = this.parmQuery().dataSourceTable(tableNum(Tax1099Summary));
        queryBuildDataSource.clearRanges();
        queryBuildDataSource.addOrderByField(fieldNum(Tax1099Summary, Tax1099TaxYear));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(Tax1099Summary, VendAccount));
        queryBuildRange.value(vendAccountFilter);
        queryBuildRange.status(RangeStatus::Locked);

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(Tax1099Summary, TransDate));
        queryBuildRange.value(dateFilter);
        queryBuildRange.status(RangeStatus::Locked);

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(Tax1099Summary, Tax1099Fields));
        queryBuildRange.status(RangeStatus::Hidden);

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(Tax1099Summary, Tax1099State));
        queryBuildRange.status(RangeStatus::Hidden);

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(Tax1099Summary, IRSReportable));
        queryBuildRange.value(queryValue(NoYes::Yes));

        queryBuildDataSource = this.parmQuery().dataSourceTable(tableNum(VendTable));
        queryBuildDataSource.clearRanges();

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(VendTable, AccountNum));
        queryBuildRange.status(RangeStatus::Hidden);

        queryBuildDataSource = this.parmQuery().dataSourceTable(tableNum(Tax1099Fields));
        queryBuildDataSource.clearRanges();

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(Tax1099Fields, Tax1099Type));
        queryBuildRange.value(queryValue(tax1099Type));
        queryBuildRange.status(RangeStatus::Hidden);

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(Tax1099Fields, Tax1099Box));

        queryBuildRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic.This method will be called by SSRS at
    /// runtime.The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun qr;
        NumberSeq numberSeq;
        VendAccount lastVendAccount;
        Vend1099OIDDetail vend1099OIDDetail;
        LogisticsPostalAddress vendLogisticsPostalAddress;
        Tax1099IForm tax1099Form;

        this.getFromDialog();
        this.initQuery();
        tax1099Form = Tax1099Base::createTax1099IForm(tax1099Type);
        qr = new QueryRun(this.parmQuery());

        if (assignNumber == NoYes::Yes)
        {
            numberSeq = this.allocateNum();
        }

        ttsbegin;
        select forupdate tax1099IRSPayerRec;

        while (qr.next()) // This has the Tax1099Summary data
        {
            tax1099Summary = qr.get(tableNum(Tax1099Summary));
            vendTable = qr.get(tableNum(VendTable));
            tax1099Fields = qr.get(tableNum(Tax1099Fields));

            if (tax1099Summary.VendAccount != lastVendAccount
                || tax1099Type == Tax1099Type::F1099S
                || tax1099Type == Tax1099Type::F1099G)
            {
                lastVendAccount = tax1099Summary.VendAccount;
                tax1099IRSPayerRec.clear();
                report1099 = false;

                if (vendTable.dba != '' && vendTable.Tax1099NameChoice == Tax1099NameChoice::DBA)
                {
                    tax1099IRSPayerRec.PayeeNameLine = vendTable.dba;
                }
                else
                {
                    tax1099IRSPayerRec.PayeeNameLine = vendTable.name();
                }

                vendLogisticsPostalAddress = vendTable.postalAddress();
                tax1099IRSPayerRec.MailingAddress = vendLogisticsPostalAddress.Street;
                tax1099IRSPayerRec.City = vendLogisticsPostalAddress.City;
                tax1099IRSPayerRec.CountyId = vendLogisticsPostalAddress.County;
                tax1099IRSPayerRec.State = vendLogisticsPostalAddress.State;
                tax1099IRSPayerRec.ZipCode = vendLogisticsPostalAddress.ZipCode;

                if (vendTable.ForeignEntityIndicator)
                {
                    tax1099IRSPayerRec.ForeignCountryRegionName = vendTable.countryRegionName();
                    tax1099IRSPayerRec.CountyId = vendTable.postalAddress().County;
                }

                tax1099IRSPayerRec.AcctNumForPayee = vendTable.AccountNum;
                tax1099IRSPayerRec.Tax1099RegNum = vendTable.Tax1099RegNum;
                tax1099IRSPayerRec.SecondTIN = vendTable.SecondTIN == NoYes::Yes ? 'X' : ' ';
                tax1099IRSPayerRec.Tax1099Type = tax1099Fields.Tax1099Type;
                tax1099IRSPayerRec.VendAccount = vendTable.AccountNum;
                tax1099IRSPayerRec.FATCAFilingRequirementInd = vendTable.FATCAFilingRequirement == NoYes::Yes ? 'X' : ' ';
                tax1099IRSPayerRec.Reportable = NoYes::No;

                if (assignNumber == NoYes::Yes)
                {
                    tax1099IRSPayerRec.Tax1099Num = numberSeq.num();
                }
                else
                {
                    tax1099IRSPayerRec.Tax1099Num = '0';
                }

                if (tax1099Type == Tax1099Type::F1099OID)
                {
                    tax1099IRSPayerRec.Tax1099TaxYear = year1099;

                    select firstonly cusip, cusipId, cusipDetails
                        from vend1099OIDDetail
                        where vend1099OIDDetail.VendTable == vendTable.AccountNum;

                    tax1099IRSPayerRec.cusipDetails = vend1099OIDDetail.cusip ? vend1099OIDDetail.cusipId : vend1099OIDDetail.cusipDetails;
                }

                // Update the foreign indicator of the vendor
                tax1099IRSPayerRec.Tax1099ForeignIndicator = vendTable.ForeignEntityIndicator;

                tax1099IRSPayerRec.insert();
            }

            if (tax1099Form.getTax1099Type() == Tax1099G::federalIncomeTaxWithheld().tax1099Type)
            {
                Tax1099G tax1099G = tax1099Form as Tax1099G;
                if (tax1099G)
                {
                    tax1099G.set1099OnPayerRec(tax1099Summary, tax1099IRSPayerRec, year1099, fromDate, toDate);
                }
            }
            else
            {
                tax1099Form.set1099OnPayerRec(tax1099Summary, tax1099IRSPayerRec);
            }

            if (report1099 == false)
            {
                report1099 = tax1099Summary.irsReportable;

                if (report1099)
                {
                    tax1099IRSPayerRec.Reportable = NoYes::Yes;
                }
            }

            tax1099IRSPayerRec.update();
        }

        ttscommit;

        this.removeNonReportableRecords();
        tax1099Form.sendTax1099ToOutputTable(tax1099IRSPayerRec, tax1099IRSPayerRecTmp, payersRTN, onlyStateToPrint, fromDate, toDate);

        // update Tax1099Reports and VendInvoiceTax1099
        this.createTax1099ReportsRecords();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNonReportableRecords</Name>
				<Source><![CDATA[
    private void removeNonReportableRecords()
    {
        ttsBegin;

        delete_from tax1099IRSPayerRec
            where tax1099IRSPayerRec.Reportable == NoYes::No;

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>