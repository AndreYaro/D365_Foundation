<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmCustRevenue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmCustRevenue
{
    InvoiceOrderAccount invoiceOrderAccount;
    TmpAccountSum       tmpAccountSumRecord;
    QueryRun            queryRun;
    AmountMST           revenue;
    MarkupSumSales      sumMarkup;
    CustInvoiceJour     custInvoiceJour;
    ProjInvoiceJour     projInvoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInvoiceOrderAccount</Name>
				<Source><![CDATA[
    public InvoiceOrderAccount parmInvoiceOrderAccount(InvoiceOrderAccount _invoiceOrderAccount = invoiceOrderAccount)
    {
        invoiceOrderAccount = _invoiceOrderAccount;

        return invoiceOrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmQueryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpAccountSumRecord</Name>
				<Source><![CDATA[
    Common parmTmpAccountSumRecord()
    {
        return tmpAccountSumRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The run method for the form.
    /// </summary>
    void  run()
    {
        boolean             firstCustomer   = true;
        boolean             journalFound    = false;
        CustTable           custTableTmp;

        Query                   qCustTable, qJournals;
        QueryRun                qRunCustTable;
        QueryBuildRange         qBuildRange;
        QueryRun                localQueryRun;
        AccountNum              rangeValue;

        qCustTable = new Query(querystr(smmCustRevenue));
        qJournals  = new Query(querystr(smmCustRevenue));

        qCustTable.recordLevelSecurity(true);
        qJournals.recordLevelSecurity(true);

        if (invoiceOrderAccount == InvoiceOrderAccount::InvoiceAccount)
        {
            qJournals.dataSourceTable(tablenum(CustInvoiceJour)).addLink(fieldnum(CustTable, AccountNum),fieldnum(CustInvoiceJour, InvoiceAccount));
            qJournals.dataSourceTable(tablenum(ProjInvoiceJour)).addLink(fieldnum(CustTable, AccountNum),fieldnum(ProjInvoiceJour, InvoiceAccount));
        }
        else
        {
            qJournals.dataSourceTable(tablenum(CustInvoiceJour)).addLink(fieldnum(CustTable, AccountNum),fieldnum(CustInvoiceJour, OrderAccount));
            qJournals.dataSourceTable(tablenum(ProjInvoiceJour)).addLink(fieldnum(CustTable, AccountNum),fieldnum(ProjInvoiceJour, InvoiceAccount));
        }

        qBuildRange = SysQuery::findOrCreateRange(qJournals.dataSourceTable(tablenum(CustTable)),fieldnum(CustTable, AccountNum));

        if (!qBuildRange.value())
        {
            qBuildRange.status(RangeStatus::Hidden);
        }
        else
        {
            rangeValue = qBuildRange.value();
        }

        qRunCustTable = new QueryRun(qCustTable);

        while (qRunCustTable.next())
        {
            if (SysReportRun::changed(qRunCustTable,tablenum(CustTable)))
            {
                custTableTmp = qRunCustTable.get(tablenum(CustTable));
                journalFound = false;
                revenue      = 0;
                sumMarkup    = 0;

                qBuildRange.value(queryValue(custTableTmp.AccountNum));

                localQueryRun = new QueryRun(qJournals);

                localQueryRun.recordLevelSecurity(true);
                while (localQueryRun.next())
                {
                    if (SysReportRun::changed(localQueryRun,tablenum(CustInvoiceJour)))
                    {
                        custInvoiceJour = localQueryRun.get(tablenum(CustInvoiceJour));
                        if (custInvoiceJour)
                        {
                            revenue += CurrencyExchangeHelper::mstAmount(custInvoiceJour.SalesBalance - custInvoiceJour.EndDisc, custInvoiceJour.CurrencyCode, custInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(custInvoiceJour.Triangulation), custInvoiceJour.ExchRate, custInvoiceJour.ExchRateSecondary);

                            sumMarkup += CurrencyExchangeHelper::mstAmount(custInvoiceJour.SumMarkup, custInvoiceJour.CurrencyCode, custInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(custInvoiceJour.Triangulation), custInvoiceJour.ExchRate, custInvoiceJour.ExchRateSecondary);

                            journalFound = true;
                        }
                    }

                    if (SysReportRun::changed(localQueryRun,tablenum(ProjInvoiceJour)))
                    {
                        projInvoiceJour = localQueryRun.get(tablenum(ProjInvoiceJour));
                        if (projInvoiceJour)
                        {
                            revenue += CurrencyExchangeHelper::mstAmount(projInvoiceJour.SalesOrderbalance - projInvoiceJour.EndDisc, projInvoiceJour.CurrencyId, projInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(projInvoiceJour.Triangulation), projInvoiceJour.ExchRate, projInvoiceJour.ExchrateSecondary);

                            sumMarkup += CurrencyExchangeHelper::mstAmount(projInvoiceJour.SumMarkup, projInvoiceJour.CurrencyId, projInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(projInvoiceJour.Triangulation), projInvoiceJour.ExchRate, projInvoiceJour.ExchrateSecondary);

                            journalFound = true;
                        }
                    }
                }
                if (journalFound)
                {
                    qBuildRange.value(rangeValue);
                    this.writeTmpRecord(custTableTmp.AccountNum);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a temporary cust account number
    /// </summary>
    /// <param name="custAccount">
    /// A cust account record.
    /// </param>
    void  writeTmpRecord(CustAccount custAccount)
    {
        tmpAccountSumRecord.AccountNum      = custAccount;
        tmpAccountSumRecord.Balance01       = sumMarkup;
        tmpAccountSumRecord.Balance02       = revenue;
        tmpAccountSumRecord.insert();

        sumMarkup                   = 0;
        revenue                     = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// The parameter method for the currency code.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    public static CurrencyCode parmCurrencyCode()
    {
        return infolog.isoCurrencyCode() ? infolog.isoCurrencyCode() : Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
