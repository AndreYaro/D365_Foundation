<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BoMmultiReportFinish_Journal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BoMmultiReportFinish_Journal extends BOMmultiReportFinish implements BatchRetryable
{
    InventJournalTrans      inventJournalTrans;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        inventJournalTrans
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class in which the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Not all classes can be run two
    ///    times with the same parameters. If the <c>canGoBatch</c> method returns false, this method will not
    ///    have any effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCallerRecord</Name>
				<Source><![CDATA[
    protected void findCallerRecord()
    {
        InventJournalTrans  inventJournalTransLocal;

        select firstonly inventJournalTransLocal
            where inventJournalTransLocal.JournalId == inventJournalTrans.JournalId &&
                  inventJournalTransLocal.LineNum   == inventJournalTrans.LineNum;

        this.addUpdateRec(inventJournalTransLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalId</Name>
				<Source><![CDATA[
    void initJournalId(BOMParmReportFinish _bomParmReportFinish)
    {
        _bomParmReportFinish.JournalId = inventJournalTrans.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the related inventory journal.
    /// </summary>
    /// <returns>
    ///    The ID of the related inventory journal.
    /// </returns>
    public JournalId journalId()
    {
        return inventJournalTrans.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventJournalTrans</Name>
				<Source><![CDATA[
    public InventJournalTrans parmInventJournalTrans(InventJournalTrans _inventJournalTrans = inventJournalTrans)
    {
        inventJournalTrans = _inventJournalTrans;

        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postjournalPerBOMParm</Name>
				<Source><![CDATA[
    boolean postjournalPerBOMParm()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        JournalCheckPost    journalCheckPost;
        BOMParmReportFinish bomParmReportFinish;

        super();

        select minof(PostNow) from bomParmReportFinish
            index ParmLineNumIdx
            where bomParmReportFinish.ParmId  == parmId;

        if (   bomParmReportFinish.PostNow == NoYes::Yes
            && inventJournalTrans.JournalId) //all lines must have postnow = yes for posting the journal
        {
            try
            {
                ttsbegin;
                journalCheckPost = InventJournalCheckPost::newJournalCheckPost(JournalCheckPostType::Post, inventJournalTrans.inventJournalTable());
                journalCheckPost.runOperation();
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventJournalTrans</Name>
				<Source><![CDATA[
    public static BOMmultiReportFinish_Journal newInventJournalTrans(Args _args)
    {
        BOMmultiReportFinish_Journal    boMmultiReportFinish;
        InventJournalTrans              inventJournalTrans = _args.record();
        Object                          callerForm;

        boMmultiReportFinish        = BOMmultiReportFinish::construct(_args);

        if (   !inventJournalTrans.JournalId
            &&  _args.caller()
            &&  _args.caller().name() == formstr(InventJournalBOM))
        {
            callerForm = _args.caller();
            inventJournalTrans.JournalId = callerForm.journalId();
        }
        boMmultiReportFinish.getLast();
        boMmultiReportFinish.initParmId();
        boMmultiReportFinish.parmInventJournalTrans(inventJournalTrans);

        return boMmultiReportFinish;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>