<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCreate_Payroll_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates salary journal.
/// </summary>
class LedgerJournalCreate_Payroll_RU extends LedgerJournalCreate_RU
{
    ReportPeriod_RU     payPeriod;
    LineNum             lineNum;
    TransactionTxt      transactionTxt;
    RPayTrans           tmpRpayTrans;
    KeySum              fundPennyDiff;

    boolean             isCreateTransReverse;
    ReportPeriod_RU     correctedPeriodOrig;
    RPayLevelRoll       rPayLevelRollOrig;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determinates if journal can be created.
    /// </summary>
    /// <param name="_showMessage">
    /// Should message be shown.
    /// </param>
    /// <returns>
    /// true if journal can be created, otherwise false.
    /// </returns>
    protected boolean canCreateJournal(boolean _showMessage = true)
    {
        return RPayController::canCreateJournal(_showMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateReverseJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determinates if reverse journal can be created.
    /// </summary>
    /// <param name="_showMessage">
    /// Should message be shown.
    /// </param>
    /// <returns>
    /// true if reverse journal can be created, otherwise false.
    /// </returns>
    protected boolean canCreateReverseJournal(boolean _showMessage = true)
    {
        return RPayController::canCreateReverseJournal(_showMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCorrectedFundTrans</Name>
				<Source><![CDATA[
    private void createCorrectedFundTrans()
    {
        RPayFundEmplSum     rPayFundEmplSum;
        RPayFundMember      rPayFundMember;
        RPayTrans           payTrans;
        RHRMEmplTable       emplTable;
        RHRMPersonTable     personTable;
        RPayTable           rPayTable;

        RPayFundCtypeSplitSum   rPayFundCtypeSplitSum;

        Amount  totalAmount;

        while select rPayFundEmplSum
            order by EmplId, RpayCounterUnit, CorrectedPeriod
            where rPayFundEmplSum.PayPeriod       == payPeriod &&
                  rPayFundEmplSum.CorrectedPeriod <  payPeriod

        {
            if (rPayFundEmplSum.FundAmount)
            {
                totalAmount = RPayTrans::calculateFundTotalCorrectedPeriod(rPayFundEmplSum.RpayCounterUnit,
                                                                           payPeriod,
                                                                           rPayFundEmplSum.CorrectedPeriod,
                                                                           rPayFundEmplSum.EmplId);

                if (totalAmount && totalAmount == rPayFundEmplSum.RpayFundTotalAmount)
                {
                    fundPennyDiff = KeySum::construct(1, 2);

                    while select payTrans
                        where payTrans.CorrectedPeriod == rPayFundEmplSum.CorrectedPeriod &&
                              payTrans.PayPeriod       == payPeriod
                    exists join rPayFundMember
                        where rPayFundMember.CounterUnit == rPayFundEmplSum.RpayCounterUnit &&
                              rPayFundMember.PayCostType == payTrans.PayCtype
                    exists join emplTable
                        where emplTable.EmployeeId       == payTrans.Emplid
                    exists join personTable
                        where personTable.RecId             == emplTable.rhrmPersonTable &&
                              (personTable.PayMainEmplId    == rPayFundEmplSum.EmplId ||
                               emplTable.EmployeeId         == rPayFundEmplSum.EmplId)
                    exists join PayChargeType from rPayTable
                        where rPayTable.PayCtype == rPayFundMember.PayCostType
                    {
                        rPayFundCtypeSplitSum = new RPayFundCtypeSplitSum(rPayFundEmplSum.RpayCounterUnit, payTrans);
                        rPayFundCtypeSplitSum.calc(fundPennyDiff);

                        if (rPayFundCtypeSplitSum.getFundAmount())
                        {
                            tmpRpayTrans.data(payTrans);
                            this.initFundLedgerProfile(tmpRpayTrans, rPayFundEmplSum.RpayCounterUnit);
                            tmpRpayTrans.Amount = rPayFundCtypeSplitSum.getFundAmount();
                            tmpRpayTrans.Correct = this.cType2debitCredit(rPayTable.PayChargeType);
                            tmpRpayTrans.doInsert();
                        }
                    }
                }
                else
                {
                    tmpRpayTrans.clear();
                    tmpRpayTrans.Emplid             = rPayFundEmplSum.EmplId;
                    tmpRpayTrans.PayPeriod          = payPeriod;
                    tmpRpayTrans.CorrectedPeriod    = rPayFundEmplSum.CorrectedPeriod;
                    tmpRpayTrans.Amount             = rPayFundEmplSum.FundAmount;
                    this.initFundLedgerProfile(tmpRpayTrans, rPayFundEmplSum.RpayCounterUnit, true);
                    tmpRpayTrans.doInsert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFundTransaction</Name>
				<Source><![CDATA[
    private void createFundTransaction()
    {
        RPayCounterTable            rPayCounterTable;
        RPayFundMember              rPayFundMember;
        RPayFundCtypeSplitSum       rPayFundCtypeSplitSum;
        RPayTrans                   rPayTrans;
        RPayTable                   rPayTable;

        rPayTrans.data(tmpRpayTrans);

        ttsbegin;

        while select CounterUnit from rPayFundMember order by CounterUnit
            where rPayFundMember.PayCostType   == tmpRpayTrans.PayCtype
        join CounterUnit from rPayCounterTable
            where rPayCounterTable.CounterUnit == rPayFundMember.CounterUnit   &&
                  rPayCounterTable.CounterType == RPayCounterType::Fund        &&
                  rPayCounterTable.LineType    == RPayCtypeType::BudgetFund
        join PayChargeType from rPayTable
            where rPayTable.PayCtype == rPayFundMember.PayCostType
        {
            rPayFundCtypeSplitSum = new RPayFundCtypeSplitSum(rPayFundMember.CounterUnit, rPayTrans);
            rPayFundCtypeSplitSum.calc(fundPennyDiff);

            if (rPayFundCtypeSplitSum.getFundAmount())
            {
                tmpRpayTrans.data(rPayTrans);
                this.initFundLedgerProfile(tmpRpayTrans, rPayFundMember.CounterUnit);
                tmpRpayTrans.Amount = rPayFundCtypeSplitSum.getFundAmount();
                tmpRpayTrans.Correct = this.cType2debitCredit(rPayTable.PayChargeType);
                tmpRpayTrans.doInsert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    private void createJournalLine(JournalId _journalNum)
    {
        LedgerJournalTrans      ledgerJournalTrans;
        RPayLevelRoll           payLevelRoll;
        boolean                 branchTaxCodeIsEmpty;

        if (tmpRpayTrans.Amount == 0)
        {
            return;
        }

        ttsbegin;

        ledgerJournalTrans.clear();
        ledgerJournalTrans.LineNum                  = lineNum;
        ledgerJournalTrans.JournalNum               = _journalNum;
        ledgerJournalTrans.Voucher                  = voucher;
        ledgerJournalTrans.CurrencyCode             = CompanyInfoHelper::standardCurrency();
        ledgerJournalTrans.TransactionType          = LedgerTransType::Payroll;
        ledgerJournalTrans.TransDate                = payPeriod;
        ledgerJournalTrans.ExchRate                 = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.LedgerDimension          = tmpRpayTrans.LedgerDimension;
        ledgerJournalTrans.DefaultDimension         = tmpRpayTrans.DefaultDimension;
        ledgerJournalTrans.AccountType              = tmpRpayTrans.AccountType;
        ledgerJournalTrans.OffsetLedgerDimension    = tmpRpayTrans.OffsetLedgerDimension;
        ledgerJournalTrans.OffsetAccountType        = tmpRpayTrans.OffsetAccountType;
        ledgerJournalTrans.OffsetDefaultDimension   = tmpRpayTrans.OffsetDefaultDimension;

        if (tmpRpayTrans.BranchId != '')
        {
            ledgerJournalTrans.TaxCode      = tmpRpayTrans.getTaxCodeFromBranch();

            if (ledgerJournalTrans.TaxCode == '')
            {
                branchTaxCodeIsEmpty = true;
            }
        }

        if (tmpRpayTrans.BranchId == '' || (tmpRpayTrans.BranchId != '' && ledgerJournalTrans.TaxCode == ''))
        {
            ledgerJournalTrans.TaxCode      = RPayTaxIncomeGroupTable::findCode(tmpRpayTrans.TaxIncomeGroupCode).TaxCode;

            if (branchTaxCodeIsEmpty)
            {
                warning(strfmt("@RUP3480",
                    tmpRpayTrans.BranchId,
                    Branches_RU::find(tmpRpayTrans.BranchId).vendTableName(),
                    ledgerJournalTrans.TaxCode));
            }
        }

        if (tmpRpayTrans.Correct)
        {
            ledgerJournalTrans.AmountCurDebit   = CurrencyExchangeHelper::amount(tmpRpayTrans.Amount, ledgerJournalTrans.CurrencyCode);
        }
        else
        {
            ledgerJournalTrans.AmountCurCredit = -CurrencyExchangeHelper::amount(tmpRpayTrans.Amount, ledgerJournalTrans.CurrencyCode);
        }

        payLevelRoll = (isCreateTransReverse && correctedPeriodOrig) ? rPayLevelRollOrig : RPayParameters::find().PayLevelRoll;

        switch (payLevelRoll)
        {
            case RPayLevelRoll::SeparateAll:
                transactionTxt.setVoucher(voucher);
                transactionTxt.setKey1(tmpRpayTrans.Emplid);
                transactionTxt.setKey2(tmpRpayTrans.PayCtype);
                ledgerJournalTrans.Txt = transactionTxt.txt();
                break;

            case RPayLevelRoll::RollAll:
                ledgerJournalTrans.Txt = "@GLS105838";
                break;

            case RPayLevelRoll::SeparateEmplId:
                transactionTxt.setVoucher(voucher);
                transactionTxt.setKey1(tmpRpayTrans.Emplid);
                ledgerJournalTrans.Txt = transactionTxt.txt();
                break;
        }

        ledgerJournalTrans.insert();

        if (isCreateTransReverse)
        {
            this.createTransLink(ledgerJournalTrans);
        }

        ttscommit;

        lineNum ++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>LedgerJournalTable</c> record.
    /// </summary>
    protected void createLedgerJournalTable()
    {
        LedgerJournalTable_W    table_W;

        ttsbegin;

        ledgerJournalTable.clear();
        ledgerJournalTable.initFromLedgerJournalName((select firstonly JournalName from ledgerJournalName
                                                          where ledgerJournalName.JournalType == journalType).JournalName);
        table_W = ledgerJournalTable.ledgerJournalTable_W();
        table_W.ReportPeriod_RU  = RPayParameters::payPeriod();

        if (reverseType == JournalReverseType_RU::Reversed)
        {
            table_W.ReverseType_RU = JournalReverseType_RU::Reversed;
        }

        ledgerJournalTable.packLedgerJournalTable_W(table_W);
        ledgerJournalTable.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create reveverse transactions.
    /// </summary>
    protected void createReverseTrans()
    {
        LedgerJournalTrans      ledgerJournalTransReverse;
        LedgerJournalTrans      ledgerJournalTransMain;
        LedgerJournalTable      ledgerJournalTableMain;
        LedgerJournalTable      ledgerJournalTableReverse;
        LedgerJournalTable_W    ledgerJournalTableReverse_W;
        LedgerJournalCheckPost  ledgerJournalCheckPost;

        try
        {
            ttsbegin;

            ledgerJournalTableMain = this.getMainJournal(LedgerJournalType::Payroll_RU, payPeriod, true);
            ledgerJournalTableReverse = ledgerJournalTable;
            this.createVoucher(ledgerJournalTableReverse.JournalNum);

            while select ledgerJournalTransMain
                where ledgerJournalTransMain.JournalNum ==  ledgerJournalTableMain.JournalNum
            {
                ledgerJournalTransReverse.data(ledgerJournalTransMain);
                ledgerJournalTransReverse.JournalNum = ledgerJournalTableReverse.JournalNum;
                ledgerJournalTransReverse.Voucher    = voucher;
                ledgerJournalTransReverse.AmountCurDebit  = - ledgerJournalTransMain.AmountCurDebit;
                ledgerJournalTransReverse.AmountCurCredit = - ledgerJournalTransMain.AmountCurCredit;
                ledgerJournalTransReverse.Txt = "@RUP662";
                ledgerJournalTransReverse.insert();
            }

            ledgerJournalTableReverse_W = ledgerJournalTableReverse.ledgerJournalTable_W();
            ledgerJournalTableReverse_W.ReverseType_RU = JournalReverseType_RU::Reversed;
            ledgerJournalTableReverse.packLedgerJournalTable_W(ledgerJournalTableReverse_W);
            ledgerJournalTableReverse.update();

            ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTableReverse, NoYes::Yes, NoYes::No);
            LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

            ledgerJournalTableReverse_W = ledgerJournalTableMain.ledgerJournalTable_W();
            ledgerJournalTableReverse_W.Reverse_RU = NoYes::Yes;
            ledgerJournalTableMain.packLedgerJournalTable_W(ledgerJournalTableReverse_W);
            ledgerJournalTableMain.update();

            ttscommit;
        }

        catch(Exception::Error)
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates salary journal transactions.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    #define.Value4(4)
    #define.Value2(2)
    #define.Value123(123)
    #AviFiles
    protected void createTrans(JournalId _journalNum)
    {
        RPayTrans            rPayTrans;
        SysOperationProgress operationProgress;
        RHRMEmplId           currentEmplId;
        int                  totalEmpl;
        RecId                currentRecId;
        RPayLevelRoll        payLevelRoll;
        RPayTable            rPayTable;

        tmpRpayTrans.setTmp();

        this.createVoucher(_journalNum);

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption(strFmt("@RUP602", date2str(payPeriod, #Value123, #Value2, #Value4, #Value2, #Value4, #Value4, DateFlags::None)));
        operationProgress.setAnimation(#AviUpdate);

        select count(RecId) from rPayTrans
            where rPayTrans.PayPeriod == payPeriod &&
                  ((!isCreateTransReverse && rPayTrans.CorrectedPeriod == rPayTrans.PayPeriod) ||
                   (isCreateTransReverse &&
                    rPayTrans.CorrectedPeriod != rPayTrans.PayPeriod &&
                    rPayTrans.CorrectedPeriod == correctedPeriodOrig));

        operationProgress.setTotal(rPayTrans.RecId);

        ttsbegin;

        while select rPayTrans
            order by Emplid
            where rPayTrans.PayPeriod == payPeriod &&
                  ((!isCreateTransReverse && rPayTrans.CorrectedPeriod == rPayTrans.PayPeriod) ||
                   (isCreateTransReverse &&
                    rPayTrans.CorrectedPeriod != rPayTrans.PayPeriod &&
                    rPayTrans.CorrectedPeriod == correctedPeriodOrig))
            join PayChargeType from rPayTable
                where rPayTable.PayCtype == rPayTrans.PayCtype
        {
            tmpRpayTrans.data(rPayTrans);
            //Yes - Dt, No - Ct
            tmpRpayTrans.Correct = this.cType2debitCredit(rPayTable.PayChargeType);
            tmpRpayTrans.doInsert();
            currentRecId = tmpRpayTrans.RecId;
            operationProgress.incCount();

            if (tmpRpayTrans.CorrectedPeriod == tmpRpayTrans.PayPeriod)
            {
                if (currentEmplId != rPayTrans.Emplid)
                {
                    fundPennyDiff = KeySum::construct(1, 2);
                }

                this.createFundTransaction();
                currentEmplId = rPayTrans.Emplid;
            }

            if (RPayTable::find(rPayTrans.PayCtype).Post == NoYes::Yes)
            {
                select forupdate firstonly tmpRpayTrans
                    where tmpRpayTrans.RecId == currentRecId;

                tmpRpayTrans.doDelete();
            }
        }

        if (!isCreateTransReverse)
        {
            this.createCorrectedFundTrans();
        }

        operationProgress.finalize();
        operationProgress = new SysOperationProgress();
        operationProgress.setCaption(strFmt("@RUP638", date2str(payPeriod, #Value123, #Value2, #Value4, #Value2, #Value4, #Value4, DateFlags::None)));
        operationProgress.setAnimation(#AviUpdate);

        payLevelRoll = (isCreateTransReverse && correctedPeriodOrig) ? rPayLevelRollOrig : RPayParameters::find().PayLevelRoll;

        switch (payLevelRoll)
        {
            case RPayLevelRoll::SeparateAll:
                select count(RecId) from tmpRpayTrans;
                operationProgress.setTotal(tmpRpayTrans.RecId);

                while select tmpRpayTrans
                {
                    operationProgress.setText(strFmt("@RUP639",
                                              tmpRpayTrans.Emplid,
                                              tmpRpayTrans.PayCtype));
                    operationProgress.incCount();
                    this.createJournalLine(_journalNum);
                }
                break;

            case RPayLevelRoll::RollAll:
                while select tmpRpayTrans
                    group by LedgerDimension, AccountType,
                             OffsetLedgerDimension, OffsetAccountType,
                             DefaultDimension, OffsetDefaultDimension,
                             Correct, TaxIncomeGroupCode, BranchId
                {
                    totalEmpl++;
                }

                operationProgress.setTotal(totalEmpl);

                while select sum(Amount) from tmpRpayTrans
                    group by LedgerDimension, AccountType,
                             OffsetLedgerDimension, OffsetAccountType,
                             DefaultDimension, OffsetDefaultDimension,
                             Correct, TaxIncomeGroupCode, BranchId
                {
                    operationProgress.incCount();
                    this.createJournalLine(_journalNum);
                }

                break;

            case RPayLevelRoll::SeparateEmplId:
                while select tmpRpayTrans
                    group by LedgerDimension, AccountType,
                             OffsetLedgerDimension, OffsetAccountType,
                             DefaultDimension, OffsetDefaultDimension,
                             Emplid, Correct, TaxIncomeGroupCode, BranchId
                {
                    totalEmpl++;
                }

                operationProgress.setTotal(totalEmpl);

                while select sum(Amount) from tmpRpayTrans
                    group by LedgerDimension, AccountType,
                             OffsetLedgerDimension, OffsetAccountType,
                             DefaultDimension, OffsetDefaultDimension,
                             Emplid, Correct, TaxIncomeGroupCode, BranchId
                {
                    operationProgress.setText(strFmt("@RUP639",tmpRpayTrans.Emplid));
                    operationProgress.incCount();
                    this.createJournalLine(_journalNum);
                }

                break;
        }

        if (!isCreateTransReverse)
        {
            this.createTransReverse(_journalNum);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    private void createTransLink(LedgerJournalTrans _ledgerJournalTransReverse)
    {
        LedgerJournalTrans  ledgerJournalTransOrig;

        select firstonly forupdate ledgerJournalTransOrig
            where ledgerJournalTransOrig.TransDate              == correctedPeriodOrig
               && ledgerJournalTransOrig.LedgerDimension        == _ledgerJournalTransReverse.LedgerDimension
               && ledgerJournalTransOrig.AccountType            == _ledgerJournalTransReverse.AccountType
               && ledgerJournalTransOrig.OffsetLedgerDimension  == _ledgerJournalTransReverse.OffsetLedgerDimension
               && ledgerJournalTransOrig.OffsetAccountType      == _ledgerJournalTransReverse.OffsetAccountType
               && ledgerJournalTransOrig.DefaultDimension       == _ledgerJournalTransReverse.DefaultDimension
               && ledgerJournalTransOrig.OffsetDefaultDimension == _ledgerJournalTransReverse.OffsetDefaultDimension
               && ledgerJournalTransOrig.Txt                    == _ledgerJournalTransReverse.Txt;

        if (ledgerJournalTransOrig)
        {
            TransLink_RU::create(ledgerJournalTransOrig.TableId, ledgerJournalTransOrig.RecId, ledgerJournalTransOrig.RecId);

            if (abs(ledgerJournalTransOrig.amount()) - abs(_ledgerJournalTransReverse.amount()))
            {
                TransLink_RU::create(ledgerJournalTransOrig.TableId, ledgerJournalTransOrig.RecId, _ledgerJournalTransReverse.RecId, TransLinkType_RU::Correction);
            }
            else
            {
                TransLink_RU::createReversal(ledgerJournalTransOrig.TableId, ledgerJournalTransOrig.RecId, _ledgerJournalTransReverse.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransReverse</Name>
				<Source><![CDATA[
    private void createTransReverse(JournalId _journalNum)
    {
        RPayLevelRollHistory rPayLevelRollHistory;
        RPayTrans            rPayTrans;
        Map                  payPeriodReverseMap;
        MapEnumerator        mapEnumerator;

        payPeriodReverseMap = new Map(Types::Date, typeOf(rPayLevelRollOrig));

        if (!isCreateTransReverse)
        {
            while select rPayTrans group by CorrectedPeriod
                where rPayTrans.PayPeriod       == payPeriod &&
                      rPayTrans.CorrectedPeriod != rPayTrans.PayPeriod
            {
                rPayLevelRollHistory = RPayLevelRollHistory::find(rPayTrans.CorrectedPeriod);

                if (rPayLevelRollHistory)
                {
                    rPayLevelRollOrig = rPayLevelRollHistory.PayLevelRoll;
                }
                else
                {
                    rPayLevelRollOrig = RPayParameters::find().PayLevelRoll;
                }

                payPeriodReverseMap.insert(rPayTrans.CorrectedPeriod, rPayLevelRollOrig);
            }

            isCreateTransReverse = true;

            mapEnumerator = payPeriodReverseMap.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                correctedPeriodOrig = mapEnumerator.currentKey();
                rPayLevelRollOrig   = mapEnumerator.currentValue();
                tmpRpayTrans = null;
                this.createTrans(_journalNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cType2debitCredit</Name>
				<Source><![CDATA[
    private NoYes cType2debitCredit(RPayChargeType _chargeType)
    {
        return _chargeType == RPayChargeType::AddSum ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFundLedgerProfile</Name>
				<Source><![CDATA[
    private void initFundLedgerProfile(
        RPayTrans       _rPayTrans,
        RPayCounterUnit _counterUnit,
        boolean         _useDeviationAccount = false)
    {
        RPayCounterTable            rPayCounterTable = RPayCounterTable::find(_counterUnit);
        RPayFundCostAccountTable    fundCostAccount;

        _rPayTrans.setOffsetLedgerDimension(rPayCounterTable.OffsetAccountType,
                                            rPayCounterTable.OffsetLedgerDimension,
                                            rPayCounterTable.OffsetDefaultDimension,
                                            _rPayTrans.Emplid);

        if (_useDeviationAccount && rPayCounterTable.DeviationLedgerDimension)
        {
            _rPayTrans.setLedgerDimension(rPayCounterTable.DeviationAccountType,
                                          rPayCounterTable.DeviationLedgerDimension,
                                          rPayCounterTable.DeviationDefaultDimension,
                                          _rPayTrans.Emplid);
            return;
        }

        fundCostAccount = RPayFundCostAccountTable::getFundCostAccount(
            _counterUnit,
            LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_rPayTrans.LedgerDimension));

        if (fundCostAccount)
        {
            _rPayTrans.setLedgerDimension(LedgerJournalACType::Ledger,
                                          LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountRecId(fundCostAccount.FundCostMainAccount),
                                          fundCostAccount.DefaultDimension,
                                          _rPayTrans.Emplid);
        }
        else if (rPayCounterTable.LedgerDimension)
        {
            _rPayTrans.setLedgerDimension(rPayCounterTable.AccountType,
                                          rPayCounterTable.LedgerDimension,
                                          rPayCounterTable.DefaultDimension,
                                          _rPayTrans.Emplid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        payPeriod      = RPayParameters::payPeriod();
        transactionTxt = TransactionTxt::construct(LedgerTransTxt::PayrollUpdateLedger);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>