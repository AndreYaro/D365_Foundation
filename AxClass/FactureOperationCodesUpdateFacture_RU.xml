<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureOperationCodesUpdateFacture_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class for the facture operation code update procedure run for facture journals.
/// </summary>
class FactureOperationCodesUpdateFacture_RU extends FactureOperationCodesUpdate_RU
{
    FactureJour_RU  factureJour;
    str             factureModuleRangeValue;
    FormDataSource  factureJourDS;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    protected boolean checkBuffer(Common _common)
    {
        return _common.TableId == tablenum(FactureJour_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFactureDate_External</Name>
				<Source><![CDATA[
    protected FieldId getFieldIdFactureDate_External(Common _common)
    {
        if (!this.checkBuffer(_common))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return fieldnum(FactureJour_RU, FactureDate_External);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFactureExternalId</Name>
				<Source><![CDATA[
    protected FieldId getFieldIdFactureExternalId(Common _common)
    {
        if (!this.checkBuffer(_common))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return fieldnum(FactureJour_RU, FactureExternalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdOperationTypeCodes</Name>
				<Source><![CDATA[
    protected FieldId getFieldIdOperationTypeCodes(Common _common = null)
    {
        if (_common && !this.checkBuffer(_common))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return fieldnum(FactureJour_RU, OperationTypeCodes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    protected void initFromArgs(Args _args)
    {
        FormRun                 caller;
        QueryBuildDataSource    qbds;

        super(_args);

        if (_args.dataset() != tablenum(FactureJour_RU)
            || !_args.caller()
            || _args.caller().name() != formStr(FactureJournal_RU))
        {
            throw error(Error::missingParameter(this));
        }

        factureJour = _args.record();

        caller = _args.caller();
        factureJourDS = caller.dataSource();

        qbds = factureJourDS.queryRun().query().dataSourceTable(tablenum(FactureJour_RU));
        factureModuleRangeValue = qbds.findRange(fieldnum(FactureJour_RU, Module)).value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsFactureJour;

        super();
        qbdsFactureJour = query.addDataSource(tablenum(FactureJour_RU));
        qbdsFactureJour.addRange(fieldnum(FactureJour_RU, OperationTypeCodes));
        qbdsFactureJour.addRange(fieldnum(FactureJour_RU, FactureExternalId));
        qbdsFactureJour.addRange(fieldnum(FactureJour_RU, InventProfileType)).value(queryValue(InventProfileType_RU::General));

        if (factureModuleRangeValue)
        {
            qbdsFactureJour.addRange(fieldnum(FactureJour_RU, Module)).value(factureModuleRangeValue);
        }

        queryRun = new QueryRun(query);

        switch(factureJour.Module)
        {
            case FactureModule_RU::Cust:
            case FactureModule_RU::TaxCorrectionSales:
            case FactureModule_RU::TaxCorrectionPurch_Cust:
                custVend = ModuleCustVend::Cust;
                break;
            case FactureModule_RU::Vend:
            case FactureModule_RU::TaxCorrectionPurch:
            case FactureModule_RU::TaxCorrectionSales_Vend:
            case FactureModule_RU::Empl:
                custVend = ModuleCustVend::Vend;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesForm</Name>
				<Source><![CDATA[
    protected str linesForm()
    {
        return formStr(FactureJournal_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesFormBuffer</Name>
				<Source><![CDATA[
    protected Common linesFormBuffer()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packIL</Name>
				<Source><![CDATA[
    protected container packIL()
    {
        return [currentVersionIL, super(), factureModuleRangeValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDS</Name>
				<Source><![CDATA[
    protected void refreshDS()
    {
        factureJourDS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret = true;

        ret = super(_packedClass);

        if (ret)
        {
            findOrCreateRange_W(queryRun.query().dataSourceTable(tablenum(FactureJour_RU)),
            fieldnum(FactureJour_RU, Module),
            factureModuleRangeValue ? factureModuleRangeValue : SysQuery::valueUnlimited());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackIL</Name>
				<Source><![CDATA[
    protected boolean unpackIL(container _packedILClass)
    {
        Integer     version = RunBase::getVersion(_packedILClass);
        boolean     ret = true;
        container   superILPacked;

        switch (version)
        {
            case currentVersionIL:
                [version, superILPacked, factureModuleRangeValue] = _packedILClass;

                ret = super(superILPacked);

                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFactureModuleRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates facture module range based on selected parameters.
    /// </summary>
    protected void updateFactureModuleRange()
    {
        const str comma = ',';
        Query query = queryRun.query();
        QueryBuildRange qbrModule = findOrCreateRange_W(query.dataSourceTable(tablenum(FactureJour_RU)), fieldnum(FactureJour_RU, Module));
        container values;
        container deleteInappropriateValues(container _values)
        {
            DictEnum dictEnum = new DictEnum(enumNum(FactureModule_RU));
            int i;
            container newValues;
            for (i = 1; i <= conlen(_values); i++)
            {
                switch(conpeek(_values, i))
                {
                    case dictEnum.value2Label(FactureModule_RU::Cust):
                    case dictEnum.value2Label(FactureModule_RU::TaxCorrectionSales):
                    case dictEnum.value2Label(FactureModule_RU::TaxCorrectionPurch_Cust):

                    if (custVend == ModuleCustVend::Cust)
                        {
                            newValues += conpeek(_values, i);
                        }

                        break;

                    case dictEnum.value2Label(FactureModule_RU::Vend):
                    case dictEnum.value2Label(FactureModule_RU::TaxCorrectionPurch):
                    case dictEnum.value2Label(FactureModule_RU::TaxCorrectionSales_Vend):
                    case dictEnum.value2Label(FactureModule_RU::Empl):

                    if (custVend == ModuleCustVend::Vend)
                        {
                            newValues += conpeek(_values, i);
                        }

                        break;
                }
            }

            return newValues;
        }
        str getInitModuleRange()
        {
            str range;

            if (custVend == ModuleCustVend::Cust)
            {
                range = con2str([FactureModule_RU::Cust,
                FactureModule_RU::TaxCorrectionSales,
                FactureModule_RU::TaxCorrectionPurch_Cust], comma);
            }
            else
            {
                range = con2str([FactureModule_RU::Vend,
                FactureModule_RU::TaxCorrectionPurch,
                FactureModule_RU::TaxCorrectionSales_Vend,
                FactureModule_RU::Empl], comma);
            }

            return range;
        }

        if (qbrModule.value())
        {
            values = str2con(qbrModule.value(), comma);

            values = deleteInappropriateValues(values);
            qbrModule.value(con2str(values, comma));
        }
        else
        {
            qbrModule.value(getInitModuleRange());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRun</Name>
				<Source><![CDATA[
    protected void updateQueryRun()
    {
        super();

        this.updateFactureModuleRange();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>