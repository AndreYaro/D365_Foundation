<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjJournalCheckPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjJournalCheckPost extends JournalCheckPostLedger implements BatchRetryable
{
    PSAContractLineNum      psaContractLineNum;
    ProjFundingSourceRefId  fundingSource;
    boolean                 isRetainage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the ELR for reversing entries and project budget for the project journal.
    /// </summary>
    /// <param name="_journalTransList">
    ///    The instance of the <c>JournalTransList</c> class that holds a list of the project journal lines.
    /// </param>
    /// <returns>
    ///    true the if journal is valid; otherwise, false.
    /// </returns>
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean ret;

        ret = this.validateReversingEntriesForResourceRate(_journalTransList);
        ret = ProjPost::validateBudget(journalTableData.journalTable()) && ret;
        ret = super(_journalTransList) && ret;

        ret = this.checkFeeJournalDimensions(journalTableData) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFeeJournalDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the journal and gives warning if validation is failed.
    /// </summary>
    /// <param name="_journalTableData">
    ///    A list of journal table lines.
    /// </param>
    /// <returns>
    ///    true if the journal is valid; otherwise, false.
    /// </returns>
    public boolean checkFeeJournalDimensions(JournalTableData _journalTableData)
    {
        boolean checkFeeJournalDimensionsResult = this.checkFeeJournalDimensionAttributeValue(journalTableData);
        
        if (!checkFeeJournalDimensionsResult)
        {
            checkFailed("@SYS69030");
        }

        return checkFeeJournalDimensionsResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFeeJournalDimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the journal dimensions.
    /// </summary>
    /// <param name="_journalTableData">
    ///    A list of journal table lines.
    /// </param>
    /// <returns>
    ///    true if the journal is valid; otherwise, false.
    /// </returns>
    protected boolean checkFeeJournalDimensionAttributeValue(JournalTableData _journalTableData)
    {
        boolean				ret = true;
        ProjJournalTable	projJournalTable = ProjJournalTable::find(_journalTableData.journalTable().JournalId);

        JournalTransList	journalTransList = _journalTableData.journalStatic().newJournalTransList(_journalTableData);

        if ((projJournalTable.JournalType == ProjJournalType::Revenue) && (!this.hasTransError(journalTransList.item())))
        {
            ProjJournalTrans                        projJournalTrans;
            DimensionAttributeValueset              dimensionAttributeValueset;
            DimensionAttributeValueSetItem          dimensionAttributeValueSetItem;
            DimensionAttributeValue                 dimensionAttributeValue;
            DimensionAttribute                      dimensionAttribute;
            AccountingDistributionTemplateDetail    accountingDistributionTemplateDetail;

            while select journalId,defaultDimension, LineNum from projJournalTrans
                join RecId from dimensionAttributeValueset
                    where dimensionAttributeValueset.RecId == projJournalTrans.DefaultDimension
                join DimensionAttributeValueSet, DisplayValue from dimensionAttributeValueSetItem
                    where dimensionAttributeValueSetItem.DimensionAttributeValueSet == dimensionAttributeValueset.RecId
                join RecId,DimensionAttribute,IsSuspended from dimensionAttributeValue
                    where dimensionAttributeValue.RecId == dimensionAttributeValueSetItem.DimensionAttributeValue
                join RecId from dimensionAttribute
                    where dimensionAttribute.RecId == dimensionAttributeValue.DimensionAttribute
                        && projJournalTrans.JournalId == projJournalTable.JournalId
            {

                setPrefix(fieldLabelValue(tableNum(ProjJournalTrans), fieldNum(ProjJournalTrans,LineNum), projJournalTrans.LineNum));
                if (dimensionAttributeValue.IsSuspended && !accountingDistributionTemplateDetail.validateDimensionAttributeValue(dimensionAttributeValue.RecId))
                {
                    ret = false;
                }

                if (DimensionAttrValueLedgerOverride::findByDimensionAttrValueLedgerOverride(dimensionAttributeValue.RecId, Ledger::current()).IsSuspended)
                {
                    warning(strFmt("@SYS135694", dimensionAttributeValueSetItem.DisplayValue));
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReversalEntriesExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if reversal entries exist in the ProjJournalTrans table the current journal Id.
    /// </summary>
    /// <returns>
    /// True if reversal Entries exist, false otherwise
    /// </returns>
    /// <remarks>
    /// This function is used to check whether the reversal entries are created for the given journal header.
    /// One such place we use this is to refresh the form after the journal is posted.
    /// </remarks>
    protected boolean checkReversalEntriesExist()
    {
        ProjJournalTrans projJournalTrans;

        select firstonly RecId from projJournalTrans
        where projJournalTrans.JournalId == journalId
            && projJournalTrans.RevRecId != 0;

        if (projJournalTrans)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(JournalTransData  _journalTransData)
    {
        return ProjPost::newCheckTrans(_journalTransData.journalTrans()).checkTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversalEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a reversal entry record in the <c>ProjJournalTrans</c> table for the current journal
    /// </summary>
    /// <remarks>
    /// For the current journal being posted, each <c>ProjJournalTrans</c> record that has a
    /// <c>ReverseEntry</c> field value of true and has a <c>ReverseDate</c> field value that is not empty
    /// will have a reversal entry created for it in the <c>ProjJournalTrans</c> table.
    /// Vouchers are grouped by transaction date, resource for the same journal id
    /// </remarks>
    protected void createReversalEntries()
    {
        ProjJournalTrans    projJournalTrans;
        ProjJournalTrans    projReverseJournalTrans;
        Voucher             reverseEntryVoucher;
        ProjJournalTrans    projJournalTransRE;

        while select forupdate projJournalTrans where
            projJournalTrans.JournalId == journalId &&
            projJournalTrans.ReverseEntry
        {
            select firstonly Voucher from projReverseJournalTrans
                where projReverseJournalTrans.JournalId    == projJournalTrans.JournalId &&
                      projReverseJournalTrans.TransDate    == projJournalTrans.ReverseDate &&
                      projReverseJournalTrans.Resource     == projJournalTrans.Resource  &&
                      projReverseJournalTrans.Voucher;

            if (projReverseJournalTrans)
            {
                reverseEntryVoucher = projReverseJournalTrans.Voucher;
            }
            else
            {
                reverseEntryVoucher = journalTableData.journalVoucherNum().getNew(true);
                journalTableData.journalVoucherNum().used(reverseEntryVoucher);
            }
            projJournalTransRE = this.createReversalEntryJournalLine(projJournalTrans, reverseEntryVoucher);
            journalTableData.journalTransList().add(projJournalTransRE);
            journalTableData.initTotal();

            // Using doUpdate() instead of update() since the only value being
            // changed is the link to the reversing entry and the voucher id.
            projJournalTrans.RevRecId = projJournalTransRE.RecId;
            projJournalTrans.doUpdate();
            // Update the buffer with the updated record with revrecid and recversion
            journalTableData.journalTransList().update(projJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversalEntryJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates Reversal Entry hour journal line for a given hour journal line that is marked as reverse with future date
    /// </summary>
    /// <param name="_projJournalTrans">
    /// Original hour journal line.
    /// </param>
    /// <param name="_voucher">
    /// Voucher to be used while creating the reversal entry
    /// </param>
    /// <returns>
    /// Reversal Entry that was created
    /// </returns>
    /// <remarks>
    /// New reversal entry will have the reversing date of original transaction as the transaction date.
    /// </remarks>
    protected ProjJournalTrans createReversalEntryJournalLine(
    ProjJournalTrans _projJournalTrans,
    Voucher          _voucher)
    {
        ProjJournalTrans          projJournalTransRE;
        projJournalTransRE.createReverseEntryFromProjJournalTrans(_projJournalTrans);
        projJournalTransRE.Voucher = _voucher;
        projJournalTransRE.insert();
        _projJournalTrans.RevRecId = projJournalTransRE.RecId;

        return projJournalTransRE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSysModule</Name>
				<Source><![CDATA[
    public SysModule ledgerSysModule()
    {
        return SysModule::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxtType</Name>
				<Source><![CDATA[
    public LedgerTransTxt ledgerTransTxtType()
    {
        return LedgerTransTxt::ProjectPostingLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    public LedgerTransType ledgerTransType()
    {
        return LedgerTransType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRetainage</Name>
				<Source><![CDATA[
    public boolean parmIsRetainage(boolean retainage = isRetainage)
    {
        isRetainage = retainage;

        return isRetainage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFundingSourceId</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmFundingSourceId(ProjFundingSourceRefId _fundingSource = fundingSource)
    {
        fundingSource = _fundingSource;

        return fundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPsaContractLineNum</Name>
				<Source><![CDATA[
    public PSAContractLineNum parmPsaContractLineNum(PSAContractLineNum _psaContractLineNum = psaContractLineNum)
    {
        psaContractLineNum = _psaContractLineNum;

        return psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the passed in journal transactions.
    /// </summary>
    /// <param name="_journalTransList">
    /// The transactions to post
    /// </param>

    protected void postJournal(JournalTransList _journalTransList)
    {
        JournalTransMap     journalTransMap;
        ProjJournalTrans    projJournalTrans;
        JournalTransData    journalTransData;
        JournalTransList    journalTransListNew = journalTableData.journalStatic().newJournalTransList(journalTableData);

        ProjJournalTrans    tmpProjJournalTrans;
        Map                 trans2tmpTrans = new Map(Types::Int64, Types::Int64);
        RecId               tmpRecId;

        tmpProjJournalTrans.setTmp();

        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjJournalCheckPost));        
    
        using (var activityContext = logger.projOpsFinActivity().postProjectJournalContext())
        {
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::JournalNameProperty, journalTableData.journalTable().JournalNameId);
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::JournalIdProperty, journalTableData.journalTable().JournalId);
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::JournalListCountProperty, int2Str(_journalTransList.count()));
            
            //Calculate hours used per period per worker
            //Update cost price on journal line
            //adjust existing transactions
            if (_journalTransList.first())
            {
                do
                {
                    if  (! this.hasTransError(_journalTransList.item()))
                    {
                        journalTransMap = _journalTransList.item();
                        projJournalTrans = journalTransMap;
                        if (projJournalTrans)
                        {
                            tmpProjJournalTrans.data(projJournalTrans);
                            tmpProjJournalTrans.doInsert();
                            trans2tmpTrans.insert(projJournalTrans.RecId, tmpProjJournalTrans.RecId);
                        }
                    }
                }
                while (_journalTransList.next());
            }

            ProjJournalCheckPost::processHourJournalResourceRateCost(tmpProjJournalTrans);

            _journalTransList.reset();
            if (_journalTransList.first())
            {
                do
                {
                    journalTransData    = _journalTransList.journalTransData();
                    projJournalTrans    = journalTransData.journalTrans();

                    if (projJournalTrans)
                    {
                        if (!this.hasTransError(_journalTransList.item()))
                        {
                            tmpRecId = trans2tmpTrans.lookup(projJournalTrans.RecId);
                            select tmpProjJournalTrans where tmpProjJournalTrans.RecId == tmpRecId;
                            if (tmpProjJournalTrans && projJournalTrans.CostPrice != tmpProjJournalTrans.CostPrice)
                            {
                                projJournalTrans.CostPrice = tmpProjJournalTrans.CostPrice;
                                if (projJournalTrans.SalesPrice != tmpProjJournalTrans.SalesPrice)
                                {
                                    projJournalTrans.SalesPrice = tmpProjJournalTrans.SalesPrice;
                                }
                                projJournalTrans.doUpdate();
                            }
                        }

                        // add the updated record to the new list
                        journalTransListNew.add(projJournalTrans);

                        logger.logInformation(strFmt(ProjOpsFinancialsInstrumentationActivites::JournalPostingLogMessageFmt,
                            journalTableData.journalTable().JournalNameId, projJournalTrans.JournalId, projJournalTrans.LineNum,
                            projJournalTrans.ProjId, projJournalTrans.TransId, projJournalTrans.Voucher));
                    }
                }
                while  (_journalTransList.next());

                //Update the list with the new cust prices
                journalTableData.journalTransList(journalTransListNew);
            }

            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::JournalNewListCountProperty, int2Str(journalTransListNew.count()));

            super(journalTransListNew);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTransLedger</Name>
				<Source><![CDATA[
    public void postTransLedger(JournalTransData    _journalTransData,
                            LedgerVoucher   _ledgerVoucher)
    {
        ProjJournalTrans    projJournalTrans;
        ProjPost            psaProjPostEmplIndirectJournal;
        ProjPost            projPostEmplJournal;
        ProjPost            psaARRetiontionPost;

        ProjOpsFinancialsInstrumentationActivites activities = ProjOpsFinancialsLogger::createLogger(classStr(ProjJournalCheckPost)).projOpsFinActivity();
    
        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            using (var activityContextNotProject = activities.postTransLedgerNotProject())
            {
                ProjPost::newCreateProjTransAndLedger(_journalTransData.journalTrans(), _ledgerVoucher).postTrans();
            }
        }
        else
        {
            if (this.parmIsRetainage())
            {
                using (var activityContextRetainage = activities.postTransLedgerRetainage())
                {
                    psaARRetiontionPost = ProjPost::psaNewRetainagePost(_journalTransData.journalTrans(), _ledgerVoucher);
                    projJournalTrans = _journalTransData.journalTrans();
                    psaARRetiontionPost.setFundingSource(this.parmFundingSourceId(), projJournalTrans.SalesPrice);
                    psaARRetiontionPost.postTrans();
                }
            }
            else
            {
                using (var activityContext = activities.postTransLedger())
                {
                    projPostEmplJournal=ProjPost::newCreateProjTransAndLedger(_journalTransData.journalTrans(),
                                                                            _ledgerVoucher,
                                                                            true,
                                                                            false,
                                                                            ProjOrigin::None,
                                                                            this.parmPsaContractLineNum());

                    projPostEmplJournal.postTrans();

                    if (_journalTransData.journalTrans().TableId == tableNum(ProjJournalTrans))
                    {
                        projJournalTrans = _journalTransData.journalTrans();
                    }

                    if (projJournalTrans                             &&
                    projJournalTrans.psaIndirectComponentGroup  &&
                    isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        psaProjPostEmplIndirectJournal=ProjPost::psaNewCreateProjIndirectCostAndRevenue(projJournalTrans, _ledgerVoucher);

                        //use this funding source to split indirect costs
                        psaProjPostEmplIndirectJournal.parmFundingSourceList(projPostEmplJournal.parmFundingSourceList());

                        psaProjPostEmplIndirectJournal.postTrans();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reversal entries for the current hour journal and posts the journal
    /// </summary>
    /// <returns>
    /// Integer macro value for postend operation
    /// </returns>
    protected Integer runPost()
    {
        Integer ret;

        // Create Reverse Entries for hour journal when post action is called
        this.createReversalEntries();

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTablePosted</Name>
				<Source><![CDATA[
    protected void updateJournalTablePosted(JournalTableMap _journalTable)
    {
        super(_journalTable);

        this.PSAUpdatePDSAssignment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaUpdatePDSAssignment</Name>
				<Source><![CDATA[
    private void psaUpdatePDSAssignment()
    {
        ProjJournalTable tJournalTable;
        PSAUpdatePDSAssignment oUpdate;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (journalTableData.journalTable().TableId != tableNum(ProjJournalTable))
            {
                return;
            }

            tJournalTable = journalTableData.journalTable();
            if (tJournalTable.JournalType != ProjJournalType::Hour)
            {
                return;
            }

            oUpdate = PSAUpdatePDSAssignment::construct(journalTableData.journalTransList());
            oUpdate.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    TransactionLogType transactionLogType()
    {
        return TransactionLogType::ProjJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReversingEntriesForResourceRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disallow reversing entries when the worker in the journal line is ELR enabled
    /// </summary>
    /// <param name="_journalTransList">
    /// List of journal Lines
    /// </param>
    /// <returns>
    /// true if journal line does not contain reversing entries or worker is not enabled for ELR, false otherwise
    /// </returns>
    public boolean validateReversingEntriesForResourceRate(JournalTransList _journalTransList)
    {
        JournalTransMap     journalTransMap;
        ProjJournalTrans    projJournalTrans;
        boolean             ret;

        ret = true;
        _journalTransList.reset();

        while (ret && _journalTransList.next())
        {
            if (!this.hasTransError(_journalTransList.item()))
            {
                journalTransMap = _journalTransList.item();
                projJournalTrans = journalTransMap;
                if (projJournalTrans)
                {
                    ret = projJournalTrans.allowReverseEntry();
                }
            }
        }
        _journalTransList.reset();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        ProjJournalCheckPost   journalCheckPost;
        JournalForm            journalForm;
        str                    tableId;
        JournalFormTrans       journalFormTrans;

        journalForm      = JournalForm::fromArgs(_args);

        tableId = int2str(journalForm.journalTableData().journalTable().TableId);

        journalCheckPost = ProjJournalCheckPost::newFromForm(_args,journalForm);

        journalForm.runbaseMainStart();

        if (!journalCheckPost.prompt())
        {
            if (! journalCheckPost.batchInfo().parmBatchExecute())
            {
                journalForm.runbaseMainCancel(journalCheckPost.parmJournalId());
            }
            return;
        }

        try
        {
            journalCheckPost.runOperation();
            journalForm.runbaseMainEnd(journalCheckPost,false);
            // Refresh the form only when reverse entries exist.
            if (journalCheckPost.checkReversalEntriesExist() && journalForm is JournalFormTrans)
            {
                journalFormTrans = journalForm;
                journalFormTrans.journalTrans_DS().research(true);
                journalFormTrans.journalTrans_DS().refresh();
            }
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(journalCheckPost,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    static ProjJournalCheckPost newFromForm(Args _args,JournalForm _journalForm)
    {
        ProjJournalCheckPost    journalCheckPost;
        JournalTransData        journalTransData;
        ProjJournalTable        journalTable = _journalForm.journalTableData().journalTable();

        journalCheckPost = ProjJournalCheckPost::newJournalCheckPost(false,true,_args.parmEnum(),journalTable.TableId,journalTable.JournalId);

        journalTransData = _journalForm.journalTransData();
        if (journalTransData)
        {
            journalCheckPost.parmVoucher(journalTransData.journalTrans().Voucher);
        }

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPost</Name>
				<Source><![CDATA[
    static ProjJournalCheckPost newJournalCheckPost(boolean              _parmAutoBlock,
                                                       boolean              _parmShowInfoResult,
                                                       JournalCheckPostType _checkPostType,
                                                       TableId              _tableId,
                                                       JournalId            _journalId)
    {
        ProjJournalCheckPost        journalCheckPost = new ProjJournalCheckPost();

        journalCheckPost.getLast();
        journalCheckPost.parmAutoBlock(_parmAutoBlock);
        journalCheckPost.parmShowInfoResult(_parmShowInfoResult);
        journalCheckPost.parmJournalCheckPostType(_checkPostType);
        journalCheckPost.parmJournalTableId(_tableId);
        journalCheckPost.parmJournalId(_journalId);
        journalCheckPost.parmThrowCheckFailed(false);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processHourJournalResourceRateCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies cost based on resource rate.
    /// </summary>
    /// <param name="_tmpProjJournalTrans">
    /// A temp <c>ProjJournalTrans</c> buffer.
    /// </param>
    public static void processHourJournalResourceRateCost(ProjJournalTrans _tmpProjJournalTrans)
    {
        TmpProjHourJournalWorkerPeriod  journalResourcePeriod;
        boolean                         useResourceRate;
        AmountCur                       newCostPerHour;

        CurrencyCode                    currencyCode = CompanyInfoHelper::standardCurrency();
        // Find hours per resource per week
        while select sum(Qty), Resource from _tmpProjJournalTrans group by Resource, TransDate
        {
            AmountCur elrCostPerHourSetup = ProjHourCostPrice::findResourceRate(_tmpProjJournalTrans.Resource, _tmpProjJournalTrans.TransDate).CostPrice;

            if (elrCostPerHourSetup)
            {               
                PeriodRecId period = ResourceSetup::find(_tmpProjJournalTrans.Resource).Period;
                TransDate periodFrom = PeriodFacade::startDate(period, _tmpProjJournalTrans.TransDate);
                TransDate periodTo = PeriodFacade::endDate(period, _tmpProjJournalTrans.TransDate);

                select journalResourcePeriod where
                journalResourcePeriod.Resource    == _tmpProjJournalTrans.Resource  &&
                journalResourcePeriod.PeriodFrom  == periodFrom &&
                journalResourcePeriod.PeriodTo    == periodTo;

                journalResourcePeriod.Resource    = _tmpProjJournalTrans.Resource;
                journalResourcePeriod.Hours       += _tmpProjJournalTrans.Qty;
                journalResourcePeriod.PeriodFrom  = periodFrom;
                journalResourcePeriod.PeriodTo    = periodTo;
                journalResourcePeriod.write();
            }
        }

        // adjust hours per resource per week
        while select journalResourcePeriod
        {
            newCostPerHour = ProjElr::newCostPerHour(journalResourcePeriod.PeriodFrom, journalResourcePeriod.PeriodTo, journalResourcePeriod.Resource, journalResourcePeriod.Hours);

            if (newCostPerHour == 0)
            {
                continue;
            }

            while select forupdate _tmpProjJournalTrans where
                _tmpProjJournalTrans.Resource == journalResourcePeriod.Resource &&
                _tmpProjJournalTrans.TransDate >= journalResourcePeriod.PeriodFrom &&
                _tmpProjJournalTrans.TransDate <= journalResourcePeriod.PeriodTo
            {
                _tmpProjJournalTrans.CostPrice = newCostPerHour;

                if (_tmpProjJournalTrans.LinePropertyId)
                {
                    _tmpProjJournalTrans.CostPrice = CurrencyExchangeHelper::price(_tmpProjJournalTrans.CostPrice * (1 + ProjLineProperty::find(_tmpProjJournalTrans.LinePropertyId).CostMarkup / 100));
                }

                ProjJournalCheckPost::updateSalesPrice(_tmpProjJournalTrans);

                _tmpProjJournalTrans.update();
            }

            // Adjust existing rows in the system based on new cost
            ProjElr::adjustHourTrans(journalResourcePeriod.PeriodFrom, journalResourcePeriod.PeriodTo, journalResourcePeriod.Resource, newCostPerHour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales price on the specified <c>ProjJournalTrans</c> table buffer.
    /// </summary>
    /// <param name = "_tmpProjJournalTrans">
    /// The <c>ProjJournalTrans</c> table buffer.
    /// </param>
    protected static void updateSalesPrice(ProjJournalTrans _tmpProjJournalTrans)
    {
        boolean priceFound;
        AmountCur newSalesPrice;

        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
			_tmpProjJournalTrans.ProjId,
			_tmpProjJournalTrans.Resource,
			_tmpProjJournalTrans.CategoryId,
			_tmpProjJournalTrans.LinePropertyId,
			_tmpProjJournalTrans.CostPrice,
			_tmpProjJournalTrans.CurrencyId,
			_tmpProjJournalTrans.ProjTransDate,
			'',
			'',
			'',
			_tmpProjJournalTrans.ResourceCategory);
        [newSalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, false);

        if (priceFound)
        {
            _tmpProjJournalTrans.SalesPrice = newSalesPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to validate for Empty tax registration numbers for a journal
    /// </summary>
    /// <param name="_journalTransList">
    /// JournalTransList
    /// </param>
    /// <param name="_journalTableData">
    /// journalTableData
    /// </param>
    /// <returns>
    /// boolean value.
    /// </returns>
    [Replaceable]
    public static boolean validate_IN(JournalTransList  _journalTransList,
                                JournalTableData    _journalTableData)
    {
        JournalTransData                   journalTransData = _journalTransList.journalTransData();
        ProjJournalTrans                   projJournalTransLoc;
        container                          taxTypes;
        Counter                            taxTypesCount;
        TransTaxInformation                transTaxInformation;
        ProjJournalTransTaxExtensionIN     projJournalTransTaxExtensionIN;
        boolean                            canContinue = true;
        TaxItemGroupHeading                taxItemGroup;

        projJournalTransLoc = _journalTransList.journalTransData().journalTrans();

        projJournalTransTaxExtensionIN = ProjJournalTransTaxExtensionIN::findByProjJournalTrans(projJournalTransLoc.RecId);
        transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(projJournalTransLoc);
        
        if (projJournalTransLoc.TaxGroupId && projJournalTransLoc.TaxItemGroupId)
        {
            taxItemGroup    = TaxItemGroupHeading::find(projJournalTransLoc.TaxItemGroupId);
            taxTypes        = FormulaDesigner_IN::getTaxTypes_IN(projJournalTransLoc.TaxGroupId, projJournalTransLoc.TaxItemGroupId);

            for (taxTypesCount = 1; taxTypesCount <= conLen(taxTypes); taxTypesCount++)
            {
                switch (conPeek(taxTypes, taxTypesCount))
                {
                    case TaxType_IN::ServiceTax:
                        if (!transTaxInformation.ServiceTaxRegistrationNumber)
                        {
                            canContinue = checkFailed(strFmt("@SYS26332", "@GLS5098"));
                        }
                        if (canContinue && taxItemGroup.ReverseChargePercentage_IN)
                        {
                            canContinue = checkFailed("@SYS4002408");
                        }
                        break;

                    case TaxType_IN::SalesTax:
                        if (!transTaxInformation.SalesTaxRegistrationNumber)
                        {
                            canContinue= checkFailed(strFmt("@SYS26332", "@SYS59571"));
                        }
                        break;

                    case TaxType_IN::VAT:
                        if (!transTaxInformation.VATTIN)
                        {
                            canContinue= checkFailed(strFmt("@SYS26332", "@GLS5096"));
                        }
                        break;
                }
            }
            canContinue = canContinue && projJournalTransLoc.checkValidTaxCodes_IN();
        }

        return canContinue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerVoucher</Name>
				<Source><![CDATA[
    protected LedgerVoucher newLedgerVoucher(
        JournalTransMap     _journalTrans,
        boolean             _checkMode)
    {
        LedgerVoucher   ledgerVoucher = super(_journalTrans, _checkMode);

        if (ProjParameters::find().IsAccountingDateUpdateAllowed)
        {
            LedgerVoucherObject ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

            AccountingDate updateAccountingDate = ProjPost::findNextAvailableAccountingDate(ledgerVoucherObject.parmAccountingDate());

            ledgerVoucherObject.parmAccountingDate(updateAccountingDate);
        }

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>