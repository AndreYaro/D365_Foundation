<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransOpenDP_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CustTransOpenDP_ES</c> class is the report data provider class for the <c>CustTransOpen_ES</c> report.
/// </summary>
[
    SRSReportQuery(queryStr(CustTransOpen_ES)),
    SRSReportParameterAttribute(classStr(CustTransOpenContract_ES))
]
public class CustTransOpenDP_ES extends SRSReportDataProviderBase
{
    private const str FeatureReference = 'ES-00020';

    CustTransOpen               custTransOpen;
    CustTrans                   custTrans;
    CompanyBankAccountId        displayBank;
    CompanyBankAccountId        bank;
    BankDiscNoticeDeadline      fromBankDeadLine;
    BankDiscNoticeDeadline      toBankDeadline;
    CustAccount                 fromCustAccount;
    CustAccount                 toCustAccount;
    DueDate                     fromDueDate;
    DueDate                     toDueDate;
    CustPostingProfile          postingProfile;
    PaymMode                    paymMode;
    PaymMode                    paymMode2;
    PaymMode                    paymMode3;
    PaymMode                    paymMode4;
    PaymMode                    totalPaymMode;
    PaymMode                    paymModeUpdate;
    PaymMode                    paymModeLast;
    CustBillOfExchangeID        billOfExchangeId;
    TransDate                   fromTransDate;
    TransDate                   toTransDate;
    Voucher                     voucher;
    InvoiceId                   invoiceId;
    AmountMST                   fromAmount;
    AmountMST                   toAmount;
    AmountMST                   totalAmount;
    CustBillOfExchangeStatus    status;
    NoYesId                     checkBox;
    CustTransOpenReport_ES      custTransOpenReport_ES;
    CustReport_TransOpen_ES     custReport_TransOpen_ES;
    CustTransOpenTmp_ES         custTransOpenTmp_ES;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTransOpenTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the temporary table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>CustTransOpen_ESTmp</c> table.
    /// </returns>
    [
        SRSReportDataSet(tableStr(CustTransOpenTmp_ES))
    ]
    public CustTransOpenTmp_ES getCustTransOpenTmp_ES()
    {
        select custTransOpenTmp_ES;
        return custTransOpenTmp_ES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTmpTableWhenGroupByCustomerOrDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data and inserts it into the temporary table for the customer and due date.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object.
    /// </param>
    public void generateTmpTableWhenGroupByCustomerOrDueDate(QueryRun _queryRun)
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;

        while (_queryRun.next())
        {
            custTrans = _queryRun.get(tablenum(CustTrans));
            custTransOpen = _queryRun.get(tablenum(CustTransOpen));
            custBillOfExchangeTrans = custReport_TransOpen_ES.custBillOfExchangeTrans(custTrans);
            displayBank = custBillOfExchangeTrans.RemittedToBankAccountId;

            if (!bank || (custBillOfExchangeTrans.CustAccount && bank == custBillOfExchangeTrans.RemittedToBankAccountId))
            {
                this.insertCustTransOpenTmp_ES();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTmpTableWhenGroupByPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data and inserts it into the temporary table for the <c>paymMode</c> value.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object.
    /// </param>
    public void generateTmpTableWhenGroupByPaymMode(QueryRun _queryRun)
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        boolean firstTime = true;

        while (_queryRun.next())
        {
            custTrans = _queryRun.get(tablenum(CustTrans));
            custTransOpen = _queryRun.get(tablenum(CustTransOpen));

            custBillOfExchangeTrans = custReport_TransOpen_ES.custBillOfExchangeTrans(custTrans);
            displayBank = custBillOfExchangeTrans.RemittedToBankAccountId;
            totalPaymMode = custTrans.PaymMode;

            if (bank && displayBank != bank)
            {
                continue;
            }

            if (custBillOfExchangeTrans.CustAccount)
            {
                if (!paymModeUpdate && firstTime)
                {
                    this.insertCustTransOpenTmp_ES();
                }
                else
                {
                    paymModeUpdate = custTrans.PaymMode;
                    this.insertCustTransOpenTmp_ES();

                    if (paymModeLast != paymModeUpdate)
                    {
                        paymModeLast = paymModeUpdate;
                    }
                }

                totalAmount += custTransOpen.AmountMST;
            }
            else
            {
                if (!paymModeUpdate && firstTime)
                {
                    this.insertCustTransOpenTmp_ES();
                    firstTime = false;
                    paymModeUpdate = custTrans.PaymMode;
                    paymModeLast = paymModeUpdate;
                }
                else
                {
                    paymModeUpdate = custTrans.PaymMode;
                    this.insertCustTransOpenTmp_ES();
                    paymModeLast = paymModeUpdate;
                }

                totalAmount += custTransOpen.AmountMST;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the query and required objects.
    /// </summary>
    /// <param name="_query">
    ///    A query to initialize.
    /// </param>
    /// <returns>
    ///    An initialized query.
    /// </returns>
    public Query initQuery(Query _query)
    {
        QueryBuildDataSource custTransOpenDS;
        QueryBuildDataSource custTransDS;

        switch (custTransOpenReport_ES)
        {
            case CustTransOpenReport_ES::Cust:
                custTransDS = _query.addDataSource(tablenum(CustTrans));
                custTransOpenDS = custTransDS.addDataSource(tablenum(CustTransOpen));
                custTransOpenDS.addLink(fieldnum(CustTrans, RecId), fieldnum(CustTransOpen, RefRecId));
                custTransOpenDS.addLink(fieldnum(CustTrans, AccountNum), fieldnum(CustTransOpen, AccountNum));
                custTransOpenDS.addSortField(fieldnum(CustTransOpen, AccountNum));
                custTransOpenDS.addSortField(fieldnum(CustTransOpen, DueDate));
                break;

            case CustTransOpenReport_ES::DueDate:
                custTransDS = _query.addDataSource (tablenum(CustTrans));
                custTransOpenDS = custTransDS.addDataSource(tablenum(CustTransOpen));
                custTransOpenDS.addLink(fieldnum(CustTrans, RecId), fieldnum(CustTransOpen, RefRecId));
                custTransOpenDS.addLink(fieldnum(CustTrans, AccountNum), fieldnum(CustTransOpen, AccountNum));
                custTransOpenDS.clearSortIndex();
                custTransOpenDS.addSortField(fieldnum(CustTransOpen, DueDate));
                custTransOpenDS.addSortField(fieldnum(CustTransOpen, AccountNum));
                break;

            case CustTransOpenReport_ES::Payment:
                custTransOpenDS = _query.addDataSource(tablenum(CustTransOpen));
                custTransDS = custTransOpenDS.addDataSource(tablenum(CustTrans));
                custTransDS.addLink(fieldnum(CustTransOpen, RefRecId), fieldnum(CustTrans, RecId));
                custTransDS.addSortField(fieldnum(CustTrans, PaymMode));
                break;

            default:
                break;
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustTransOpenTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Insert the data into the <c>VendPromissoryNoteOpenTransTmp_ES</c> table.
    /// </summary>
    public void insertCustTransOpenTmp_ES()
    {
        custTransOpenTmp_ES.Total_1                 = totalAmount;
        totalAmount                                 = 0;
        custTransOpenTmp_ES.PaymMode_1              = totalPaymMode;
        custTransOpenTmp_ES.CompanyName             = CompanyInfo::find().name();
        custTransOpenTmp_ES.Bank                    = displayBank;
        custTransOpenTmp_ES.AccountNum              = custTransOpen.AccountNum;
        custTransOpenTmp_ES.Voucher                 = custTrans.Voucher;
        custTransOpenTmp_ES.Invoice                 = custTrans.Invoice;
        custTransOpenTmp_ES.Txt                     = custTrans.Txt;
        custTransOpenTmp_ES.TransDate               = custTransOpen.TransDate;
        custTransOpenTmp_ES.DueDate                 = custTransOpen.DueDate;
        custTransOpenTmp_ES.BankDiscNoticeDeadline  = custTransOpen.BankDiscNoticeDeadline;
        custTransOpenTmp_ES.AmountMST               = custTransOpen.AmountMST;
        custTransOpenTmp_ES.PaymMode                = custTrans.PaymMode;
        custTransOpenTmp_ES.PostingProfile          = custTrans.PostingProfile;
        custTransOpenTmp_ES.BillOfExchangeStatus    = custTrans.BillOfExchangeStatus;
        custTransOpenTmp_ES.BillOfExchangeSeqNum    = custTrans.BillOfExchangeSeqNum;
        custTransOpenTmp_ES.BillOfExchangeID        = custTrans.BillOfExchangeID;

        if (paymMode)
        {
            custTransOpenTmp_ES.PaymMode1_1         = paymMode;
            custTransOpenTmp_ES.TotalPaymMode1_1    = custReport_TransOpen_ES.totalPaymMode(paymMode);
        }
        else
        {
            custTransOpenTmp_ES.PaymMode1_1         = "@SYS92715";
        }

        if (paymMode2)
        {
            custTransOpenTmp_ES.PaymMode2_1         = paymMode2;
            custTransOpenTmp_ES.TotalPaymMode2_1    = custReport_TransOpen_ES.totalPaymMode(paymMode2);
        }
        else
        {
            custTransOpenTmp_ES.PaymMode2_1         = "@SYS92715";
        }

        if (paymMode3)
        {
            custTransOpenTmp_ES.PaymMode3_1         = paymMode3;
            custTransOpenTmp_ES.TotalPaymMode3_1    = custReport_TransOpen_ES.totalPaymMode(paymMode3);
        }
        else
        {
            custTransOpenTmp_ES.PaymMode3_1         = "@SYS92715";
        }

        if (paymMode4)
        {
            custTransOpenTmp_ES.PaymMode4_1         = paymMode4;
            custTransOpenTmp_ES.TotalPaymMode4_1    = custReport_TransOpen_ES.totalPaymMode(paymMode4);
        }
        else
        {
            custTransOpenTmp_ES.PaymMode4_1         = "@SYS92715";
        }

        custTransOpenTmp_ES.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///     This method provides the ability to write the report business logic. It will be called by SQL
    ///     Server Reporting Services (SSRS) at run time. This method should compute data and populate the
    ///     data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        CustTransOpenContract_ES custTransOpenContract_ES = this.parmDataContract();

        bank                    = custTransOpenContract_ES.parmBank();
        custTransOpenReport_ES  = custTransOpenContract_ES.parmGroupingBy();
        fromCustAccount         = custTransOpenContract_ES.parmFromCustomer();
        toCustAccount           = custTransOpenContract_ES.parmToCustomer();
        toDueDate               = custTransOpenContract_ES.parmToDueDate();
        fromDuedate             = custTransOpenContract_ES.parmFromDuedate();
        toBankDeadline          = custTransOpenContract_ES.parmToRiskDate();
        fromBankDeadLine        = custTransOpenContract_ES.parmFromRiskDate();
        fromTransDate           = custTransOpenContract_ES.parmFromPostingDate();
        toTransDate             = custTransOpenContract_ES.parmToPostingDate();
        checkBox                = custTransOpenContract_ES.parmEnableStatus();
        status                  = custTransOpenContract_ES.parmStatus();
        paymMode                = custTransOpenContract_ES.parmEnableStatus1();
        paymMode2               = custTransOpenContract_ES.parmEnableStatus2();
        paymMode3               = custTransOpenContract_ES.parmEnableStatus3();
        paymMode4               = custTransOpenContract_ES.parmEnableStatus4();
        postingProfile          = custTransOpenContract_ES.parmPostingProfile();
        billOfExchangeId        = custTransOpenContract_ES.parmNoteId();
        invoiceId               = custTransOpenContract_ES.parmInvoice();
        voucher                 = custTransOpenContract_ES.parmVoucher();
        fromAmount              = custTransOpenContract_ES.parmFromAmount();
        toAmount                = custTransOpenContract_ES.parmToAmount();

        custReport_TransOpen_ES = new CustReport_TransOpen_ES();

        Query query = new Query();
        query = this.initQuery(query);
        query = this.queryRanges(query);

        QueryRun queryRun = new QueryRun(query);

        switch (custTransOpenReport_ES)
        {
            case CustTransOpenReport_ES::Cust:
            case CustTransOpenReport_ES::DueDate:
                this.generateTmpTableWhenGroupByCustomerOrDueDate(queryRun);
                break;

            case CustTransOpenReport_ES::Payment:
                this.generateTmpTableWhenGroupByPaymMode(queryRun);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds ranges to the query depending on the selected parameter.
    /// </summary>
    /// <param name="_newQuery">
    ///    The main data source of the report.
    /// </param>
    /// <returns>
    ///    The query with the ranges.
    /// </returns>
    public Query queryRanges(Query _newQuery)
    {
        if (fromCustAccount || toCustAccount)
        {
            _newQuery.dataSourceTable(tableNum(CustTransOpen)).addRange(fieldnum(CustTransOpen, AccountNum)).value(queryRange(fromCustAccount, toCustAccount));
        }

        if (fromDueDate || toDueDate)
        {
            _newQuery.dataSourceTable(tableNum(CustTransOpen)).addRange(fieldnum(CustTransOpen, DueDate)).value(queryRange(fromDueDate, toDueDate));
        }

        if (fromBankDeadLine || toBankDeadline)
        {
            _newQuery.dataSourceTable(tableNum(CustTransOpen)).addRange(fieldnum(CustTransOpen, BankDiscNoticeDeadline)).value(queryRange(fromBankDeadLine, toBankDeadline));
        }

        if (fromTransDate || toTransDate)
        {
            _newQuery.dataSourceTable(tableNum(CustTransOpen)).addRange(fieldnum(CustTransOpen, TransDate)).value(queryRange(fromTransDate, toTransDate));
        }

        if (postingProfile)
        {
            _newQuery.dataSourceTable(tableNum(CustTrans)).addRange(fieldnum(CustTrans, PostingProfile)).value(postingProfile);
        }

        _newQuery.dataSourceTable(tableNum(CustTrans)).addRange(fieldnum(CustTrans, PaymMode)).value(paymMode);
        _newQuery.dataSourceTable(tableNum(CustTrans)).addRange(fieldnum(CustTrans, PaymMode)).value(paymMode2);
        _newQuery.dataSourceTable(tableNum(CustTrans)).addRange(fieldnum(CustTrans, PaymMode)).value(paymMode3);
        _newQuery.dataSourceTable(tableNum(CustTrans)).addRange(fieldnum(CustTrans, PaymMode)).value(paymMode4);

        if (billOfExchangeId)
        {
            _newQuery.dataSourceTable(tableNum(CustTrans)).addRange(fieldnum(CustTrans, BillOfExchangeID)).value(billOfExchangeId);
        }

        if (voucher)
        {
            _newQuery.dataSourceTable(tableNum(CustTrans)).addRange(fieldnum(CustTrans, Voucher)).value(voucher);
        }

        if (invoiceId)
        {
            _newQuery.dataSourceTable(tableNum(CustTrans)).addRange(fieldnum(CustTrans, Invoice)).value(invoiceId);
        }

        if (fromAmount || toAmount)
        {
            _newQuery.dataSourceTable(tableNum(CustTransOpen)).addRange(fieldnum(CustTransOpen, AmountMST)).value(queryRange(fromAmount, toAmount));
        }

        if (checkBox == NoYes::Yes)
        {
            _newQuery.dataSourceTable(tableNum(CustTrans)).addRange(fieldnum(CustTrans, BillOfExchangeStatus)).value(enum2str(status));
        }

        return _newQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>