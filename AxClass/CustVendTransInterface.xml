<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// Base class providing an interface to common functionality applicable for tables mapped to the <c>CustVendTrans</c> table map.
/// </summary>
[ExportInterfaceAttribute()]
public abstract class CustVendTransInterface
{
    protected CustVendTrans custVendTransMap;
    private CustVendTransInterface origInstance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeCustVendTrans</Name>
				<Source><![CDATA[
    private void initializeCustVendTrans(CustVendTrans _custVendTransMap)
    {
        custVendTransMap = _custVendTransMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the local instance of the <c>CustVendTrans</c> map.
    /// </summary>
    /// <returns>The local instance of the <c>CustVendTrans</c> map.</returns>
    public final CustVendTrans parmCustVendTrans()
    {
        return custVendTransMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creaets a <c>CustVendTransInterface</c> object based on the provided <c>CustVendTrans</c> record.
    /// </summary>
    /// <param name = "_custVendTrans">A <c>CustVendTrans</c> recrod from which to create a <c>CustVendTransInterface</c> instance.</param>
    /// <returns>The instantiated <c>CustVendTransInterface</c> object.</returns>
    public static CustVendTransInterface createInstance(CustVendTrans _custVendTrans)
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();

        metadataCollection.SetManagedValue(classStr(CustVendTransInterface), tableId2Name(_custVendTrans.tableId));
        CustVendTransInterface instance = SysPluginFactory::Instance(identifierStr(Dynamics.AX.Application), classStr(CustVendTransInterface), metadataCollection);

        if (!instance)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        instance.initializeCustVendTrans(_custVendTrans);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CustVendTransInterface</c> object based on the <c>CustVendTrans</c> orig-record.
    /// </summary>
    /// <returns>The instantiated <c>CustVendTransInterface</c> object.</returns>
    public final CustVendTransInterface origInstance()
    {
        if (!origInstance)
        {
            origInstance = CustVendTransInterface::createInstance(this.parmCustVendTrans().orig());
        }

        return origInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMultiTransByVoucherDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether multiple <c>CustTrans</c> records exist with the same voucher and date.
    /// </summary>
    /// <returns>
    ///  false if multiple transactions exist with the same voucher and date; otherwise, true.
    /// </returns>
    public boolean checkMultiTransByVoucherDate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentScheduleApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a payment schedule has been applied to the transaction.
    /// </summary>
    /// <returns>true if a payment schedule has been applied; otherwise, false.</returns>
    public boolean checkPaymentScheduleApplied()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLastSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the last settlement of the current record.
    /// </summary>
    /// <param name="_settleAmountCur">
    /// The settlement amount to be removed from the current record.
    /// </param>
    /// <param name="_settleAmountMst">
    /// The calculated settlement amount for a particular monetary standard (MST)
    /// to be removed from the current record.
    /// </param>
    /// <param name="_settleAmountReporting">
    /// The calculated settlement amount for a particular reporting currency.
    /// to be removed from the current record.
    /// </param>
    /// <remarks>
    /// A record with no last settlement is not the same as a record with no settlements.
    /// </remarks>
    public void clearLastSettlement(AmountCur _settleAmountCur = 0, AmountMST _settleAmountMst = 0, AmountMSTSecondary _settleAmountReporting = 0)
    {
        custVendTransMap.SettleAmountCur -= _settleAmountCur;
        custVendTransMap.SettleAmountMST -= _settleAmountMst;
        custVendTransMap.SettleAmountReporting -= _settleAmountReporting;

        custVendTransMap.LastSettleDate = dateNull();
        custVendTransMap.LastSettleVoucher = '';
        custVendTransMap.LastSettleAccountNum = '';
        custVendTransMap.LastSettleCompany = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateCurToMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the exchange rate from the transaction currency to the monetary standard (MST) currency.
    /// </summary>
    /// <returns>
    ///    The exchange rate for the transaction.
    /// </returns>
    /// <remarks>
    ///    The method returns the <c>ExchRate</c> field if there is no triangulation. If there is
    ///    triangulation this returns the <c>ExchRateSecond</c> field divided by the <c>ExchRate</c> field.
    /// </remarks>
    public ExchRate exchRateCurToMst()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the <c>CustVendTrans</c> with the given RecId.
    /// </summary>
    /// <param name = "_module">
    ///     The module the <c>CustVendTrans</c> record is in.
    /// </param>
    /// <param name = "_recId">
    ///     The RecId to find.
    /// </param>
    /// <param name = "_forupdate">
    ///     If true, marks the returned <c>CustVendTrans</c> for update (optional).
    /// </param>
    /// <returns>
    ///     The <c>CustVendTrans</c> record with the given RecId.
    /// </returns>
    public static CustVendTrans findByModule(ModuleCustVend _module, RecId _recId, boolean _forupdate = false)
    {
        CustVendTrans custVendTrans;

        switch (_module)
        {
            case ModuleCustVend::Cust:
                custVendTrans = CustTrans::find(_recId, _forupdate);
                break;

            case ModuleCustVend::Vend:
                custVendTrans = VendTrans::find(_recId, _forupdate);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRelatedCustVendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>CustVendTrans</c> that is associated with a given <c>CustVendTransOpen</c>.
    /// </summary>
    /// <param name="_custVendTransOpen">
    ///     The <c>CustVendTransOpen</c> to find a related <c>CustVendTrans</c> for.
    /// </param>
    /// <param name="_forUpdate">
    ///     If true, marks the returned <c>CustVendTrans</c> for update (optional).
    /// </param>
    /// <returns>
    ///    The associated <c>CustVendTrans</c>.
    /// </returns>
    public static CustVendTrans findByRelatedCustVendTransOpen(
        CustVendTransOpen _custVendTransOpen,
        boolean _forUpdate = false)
    {
        CustVendTrans custVendTrans;

        switch (_custVendTransOpen.TableId)
        {
            case tableNum(CustTransOpen):
                custVendTrans = CustTrans::findByCompany(
                    _custVendTransOpen.company(),
                    _custVendTransOpen.RefRecId,
                    _forUpdate);
                break;

            case tableNum(VendTransOpen):
                custVendTrans = VendTrans::findByCompany(
                    _custVendTransOpen.company(),
                    _custVendTransOpen.RefRecId,
                    _forUpdate);
                break;

            default:
                throw error(Error::missingRecord(funcName()));
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountTransPaidWithCheque</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transaction has been paid using cheques.
    /// </summary>
    /// <returns>
    /// The <c>BankAccountTrans</c> record in case it was paid using cheques; empty buffer otherwise.
    /// </returns>
    public BankAccountTrans getBankAccountTransPaidWithCheque()
    {
        BankAccountTrans bankAccountTrans;
        BankChequePaymTrans bankChequePaymTrans;

        BankChequeRecipientType bankChequeRecipientType = this.getBankChequeRecipientType();

        select firstOnly bankAccountTrans
            exists join bankChequePaymTrans
                where bankChequePaymTrans.AccountId == bankAccountTrans.AccountId
                    && bankChequePaymTrans.ChequeNum == bankAccountTrans.ChequeNum
                    && bankChequePaymTrans.InvoiceTransDate == custVendTransMap.TransDate
                    && bankChequePaymTrans.InvoiceVoucher == custVendTransMap.Voucher
                    && bankChequePaymTrans.InvoiceCompany == custVendTransMap.dataAreaId
                    && bankChequePaymTrans.RecipientType == bankChequeRecipientType;

        return bankAccountTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankChequeRecipientType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BankChequeRecipientType</c> enum value used to query the <c>BankChequePaymTrans</c>
    /// table.
    /// </summary>
    /// <returns>The <c>BankChequeRecipientType</c> enum value.</returns>
    protected BankChequeRecipientType getBankChequeRecipientType()
    {
        return BankChequeRecipientType::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsId_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the consolidation ID.
    /// </summary>
    /// <returns>
    /// The consolidation ID.
    /// </returns>
    public CustVendConsId_JP getConsId_JP()
    {
        CustVendConsId_JP consId;

        return consId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the child extension table from the parent table.
    /// </summary>
    /// <returns>
    /// The child map containing the country specific fields.
    /// </returns>
    public CustVendTrans_W getCustVendTrans_W()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetEPPaymentType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines value to <c>EPPaymentType_BR</c> and <c>EPPaymentWay_BR</c> fields based on id received in parameters
    /// </summary>
    /// <param name="_tableId">
    ///     Id of one of mapped tables.
    /// </param>
    /// <param name="_recId">
    ///     Record Id to search original record.
    /// </param>
    /// <returns>
    ///     An instance of vendTransPayment_BR.
    /// </returns>
    /// <remarks>
    ///     <c>EPPaymentType_BR</c> and <c>EPPaymentWay_BR</c> can receive values from CustTransPayment_BR
    ///     although vendTransPayment_BR instance is returned.
    /// </remarks>
    public VendTransPayment_BR GetEPPaymentType_BR(TableId _tableId, RecId _recId)
    {
        VendTransPayment_BR vendTransPayment_BR;
        CustTransPayment_BR custTransPayment_BR;

        switch (_tableId)
        {
            case tableNum(CustTrans):
                custTransPayment_BR = CustTransPayment_BR::find(_recId, true);
                custVendTransMap.EPPaymentType_BR = custTransPayment_BR.EPPaymentType_BR;
                custVendTransMap.EPPaymentWay_BR = custTransPayment_BR.EPPaymentWay_BR;
                break;

            case tableNum(VendTrans):
                vendTransPayment_BR = vendTransPayment_BR::find(_recId, true);
                custVendTransMap.EPPaymentType_BR = vendTransPayment_BR.EPPaymentType_BR;
                custVendTransMap.EPPaymentWay_BR = vendTransPayment_BR.EPPaymentWay_BR;
                break;
        }

        return VendTransPayment_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the retrieved table buffer from the query for the concrete table represented by the map.
    /// </summary>
    /// <param name="_queryRun">
    ///    The query that contains the concrete table.
    /// </param>
    /// <returns>
    ///    The retrieved table buffer from the query for the concrete table represented by the map.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public CustVendTrans getFromQuery(QueryRun _queryRun)
    {
        throw error(Error::missingRecord(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedInQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the concrete table represented by the map has changed in the query.
    /// </summary>
    /// <param name="_queryRun">
    ///    The query that contains the concrete table.
    /// </param>
    /// <returns>
    ///    true if the concrete table represented by the map has changed in the query; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public boolean hasChangedInQuery(QueryRun _queryRun)
    {
        throw error(Error::missingRecord(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConsInvoice_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the value for field <c>ConsInvoice_JP</c> with the record Id of last confirmed consolidated invoice.
    /// </summary>
    /// <remarks>
    /// Field is set only when TransType is LedgerTransType::Payment or LedgerTransType::CashDiscount.
    /// </remarks>
    public void initConsInvoice_JP()
    {
        // Not implemented for default map behaviour.
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkedForSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemines if the current record is marked.
    /// </summary>
    /// <returns>
    /// True if the current records is marked in the <c>SpecTrans</c> table.
    /// </returns>
    public boolean isMarkedForSettlement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustVendTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs any change made to the child table to the parent table.
    /// </summary>
    /// <param name="_custVendTrans_W">
    /// The map containing the country specific fields.
    /// </param>
    public void packCustVendTrans_W(CustVendTrans_W _custVendTrans_W)
    {
        // Not implemented for default map behaviour.
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccount</Name>
				<Source><![CDATA[
    public LedgerJournalAC parmAccount(LedgerJournalAC _account = custVendTransMap.AccountNum)
    {
        custVendTransMap.AccountNum = _account;

        return _account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleAmountMSTModified_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of related consolidted invoice when settle amount is modified.
    /// </summary>
    /// <remarks>
    /// It is called from table method "update".
    /// </remarks>
    public void settleAmountMSTModified_JP()
    {
        CustVendTrans_W custVendTrans_W = custVendTransMap.CustVendTrans::getCustVendTrans_W();

        if (custVendTrans_W.ConsInvoice_JP != 0
            && (custVendTransMap.TransType == LedgerTransType::Sales
                || custVendTransMap.TransType == LedgerTransType::Purch 
                || (TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(true)
                    && custVendTransMap.TransType == LedgerTransType::GeneralJournal)))
        {
            CustVendConsInvoice_JP custVendConsInvoice = this.getCustVendConsInvoice_JP(custVendTrans_W, true);

            if (custVendConsInvoice && custVendConsInvoice.Status != CustVendConsInvoiceStatus_JP::Unconfirmed)
            {
                ttsbegin;
                custVendConsInvoice.CustVendConsInvoice_JP::setInvoiceStatus();
                custVendConsInvoice.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendConsInvoice_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustVendConsInvoice_JP</c> record from the <c>CustVendTrans_W</c> record.
    /// </summary>
    /// <param name = "_custVendTrans_W">The <c>CustVendTrans_W</c> record.</param>
    /// <param name = "_forUpdate">Select the reocrd for update.</param>
    /// <returns>The <c>CustVendConsInvoice_JP</c> record.</returns>
    protected CustVendConsInvoice_JP getCustVendConsInvoice_JP(CustVendTrans_W _custVendTrans_W, boolean _forUpdate)
    {
        CustConsInvoice_JP consInvoice;
        return consInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionPerDate</Name>
				<Source><![CDATA[
    public void transactionPerDate(TransDate _transDate)
    {
        CustVendSettlement custVendSettlement;

        select sum(SettleAmountCur),sum (SettleAmountMST), sum(ExchAdjustment) from custVendSettlement
            where custVendSettlement.TransRecId == custVendTransMap.RecId
                && custVendSettlement.TransDate > _transDate;

        custVendTransMap.SettleAmountCur -= custVendSettlement.SettleAmountCur;
        custVendTransMap.SettleAmountMST -= custVendSettlement.SettleAmountMST;
        custVendTransMap.ExchAdjustment -= custVendSettlement.ExchAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDueDate_RU</Name>
				<Source><![CDATA[
    public static DueDate getDueDate_RU(CustVendTrans _custVendTrans)
    {
        CustVendTransDetails transDetails = new CustVendTransDetails(_custVendTrans);
        return transDetails.firstDueDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an empty table buffer for the concrete table represented by the map.
    /// </summary>
    /// <param name="_moduleCustVend">
    ///    The module consuming the map.
    /// </param>
    /// <returns>
    ///    An empty table buffer for the concrete table represented by the map.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public static CustVendTrans getEmptyTableBuffer(ModuleCustVend _moduleCustVend)
    {
        CustVendTrans custVendTrans;
        
        if (_moduleCustVend == ModuleCustVend::Cust)
        {
            CustTrans custTrans;
            custVendTrans = custTrans.data();
        }
        else
        {
            VendTrans vendTrans;
            custVendTrans = vendTrans.data();
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForCompensation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the selected records can participate in compensation.
    /// </summary>
    /// <param name="_formDS">
    /// The selected records are marked in the data source.
    /// </param>
    /// <exception cref="Exception::Error">
    /// One of the selected transactions is closed.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The selected transactions have a mixture of currency codes.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// One of the selected transactions is marked for settlement.
    /// </exception>
    public static void validateForCompensation(FormDataSource _formDS)
    {
        CurrencyCode currency;
        CustVendTrans trans;
        boolean first = true;

        for (trans = getFirstSelection(_formDS); trans; trans = _formDS.getNext())
        {
            if (trans.Closed)
            {
                throw error("@GLS109867");
            }

            if (first)
            {
                currency = trans.CurrencyCode;
                first = false;
            }
            else if (trans.CurrencyCode != currency)
            {
                throw error("@GLS109868");
            }

            if (trans.CustVendTrans::isMarkedForSettlement())
            {
                throw error("@GLS109869");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets related <c>BankLCCustVendTrans</c>.
    /// </summary>
    /// <returns>
    /// The <c>BankLCCustVendTrans</c> record.
    /// </returns>
    public BankLCCustVendTrans getBankLCCustVendTrans()
    {
        TableId tableId = custVendTransMap.TableId == tableNum(CustTrans) ? tableNum(BankLCCustTrans) : tableNum(BankLCVendTrans);
        BankLCCustVendTrans bankLCCustVendTrans = new DictTable(tableId).makeRecord();
        
        if (custVendTransMap.BankLCLine)
        {
            select firstonly bankLCCustVendTrans
                where bankLCCustVendTrans.BankLCLine == custVendTransMap.BankLCLine;
        }

        return bankLCCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCombinedExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate getReportingCombinedExchangeRate()
    {
        ReportingCurrencyExchRate combinedReportingRate;

        if (custVendTransMap.ReportingCurrencyExchRate != 0)
        {
            combinedReportingRate = ExchangeRateCalculation::calculateCrossRate(
                custVendTransMap.ReportingCurrencyExchRate,
                custVendTransMap.ReportingCurrencyExchRateSecondary);
        }
        else
        {
            // The ReportingCurrencyCrossRate is a historical field predating the move to dual currency support.
            // For historical data where the ReportingCurrencyExchRate fields are not set,
            // We revert to the cross rate. This field should not be used as the basis for reporting currency exchange rates in new development.
            combinedReportingRate = custVendTransMap.ReportingCurrencyCrossRate;
        }

        return combinedReportingRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingExchangeRate1</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate getReportingExchangeRate1()
    {
        ReportingCurrencyExchRate reportingCurrencyExchRate1;

        if (custVendTransMap.ReportingCurrencyExchRate != 0)
        {
            reportingCurrencyExchRate1 = custVendTransMap.ReportingCurrencyExchRate;
        }
        else
        {
            // The ReportingCurrencyCrossRate is a historical field predating the move to dual currency support.
            // For historical data where the ReportingCurrencyExchRate fields are not set,
            // We revert to the cross rate. This field should not be used as the basis for reporting currency exchange rates in new development.
            reportingCurrencyExchRate1 = custVendTransMap.ReportingCurrencyCrossRate;
        }

        return reportingCurrencyExchRate1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingExchangeRate2</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate getReportingExchangeRate2()
    {
        ReportingCurrencyExchRate reportingCurrencyExchRate2;

        // If no reporting currency exchange rates are provided, assume that the cross rate was used for exchange rate 1.
        if (custVendTransMap.ReportingCurrencyExchRate != 0
            || custVendTransMap.ReportingCurrencyExchRateSecondary != 0)
        {
            reportingCurrencyExchRate2 = custVendTransMap.ReportingCurrencyExchRateSecondary;
        }

        return reportingCurrencyExchRate2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExchangeHelperReportingExchRate</Name>
				<Source><![CDATA[
    internal void setExchangeHelperReportingExchRate(CurrencyExchangeHelper _currencyHelper)
    {
        if (_currencyHelper)
        {
            _currencyHelper.parmReportingExchangeRate1(this.getReportingExchangeRate1());
            _currencyHelper.parmReportingExchangeRate2(this.getReportingExchangeRate2());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>