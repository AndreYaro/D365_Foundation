<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchRuleViewModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationMatchRuleViewModel</c> is the view model for bank reconciliation matching rule form.
/// </summary>
class BankReconciliationMatchRuleViewModel
{
    private boolean isBankModernReconciliationFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance());

    // Form view
    BankReconciliationMatchRuleFormView matchRuleFormView;

    // Data sources
    FormDataSource dsMatchRule;
    FormDataSource dsMatchRuleLineStatement;
    FormDataSource dsMatchRuleLineDocument;
    FormDataSource dsMatchRuleLineOrigStatement;
    private FormDataSource dsGroupRuleLineStatement;
    private FormDataSource dsGroupRuleLineDocument;

    // Value lookup for the SysLookUp
    TmpSysQuery lookupRange;
    Query lookupQuery;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dsMatchRuleActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the Active event of <c>BankReconciliationMatchRule</c>.
    /// </summary>
    /// <param name="_matchRule">
    /// Given <c>BankReconciliationMatchRule</c> buffer.
    /// </param>
    public void dsMatchRuleActivePost(BankReconciliationMatchRule _matchRule)
    {
        boolean isLocked = _matchRule && _matchRule.isActivated();
        dsMatchRule.allowEdit(!isLocked);
        dsGroupRuleLineStatement.allowEdit(!isLocked);
        dsGroupRuleLineStatement.allowCreate(!isLocked);
        dsGroupRuleLineStatement.allowDelete(!isLocked);
        dsGroupRuleLineDocument.allowEdit(!isLocked);
        dsGroupRuleLineDocument.allowCreate(!isLocked);
        dsGroupRuleLineDocument.allowDelete(!isLocked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsMatchRuleLineLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the linkActive event of <c>BankReconciliationMatchRuleLine</c>.
    /// </summary>
    /// <param name="_dsMatchRuleLine">
    /// Form data source for matching rule line.
    /// </param>
    public void dsMatchRuleLineLinkActivePre(FormDataSource _dsMatchRuleLine)
    {
        BankReconciliationMatchRule matchRuleLocal = dsMatchRule.cursor();

        boolean isEditable = matchRuleLocal && !matchRuleLocal.isActivated();

        _dsMatchRuleLine.allowCreate(isEditable);
        _dsMatchRuleLine.allowDelete(isEditable);
        _dsMatchRuleLine.allowEdit(isEditable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsMatchRuleDeletePost</Name>
				<Source><![CDATA[
    internal void dsMatchRuleDeletePost()
    {
        BankReconciliationMatchRule matchRuleLocal = dsMatchRule.cursor();
        if (!matchRuleLocal)
        {
            dsGroupRuleLineStatement.allowEdit(false);
            dsGroupRuleLineStatement.allowCreate(false);
            dsGroupRuleLineStatement.allowDelete(false);
            dsGroupRuleLineStatement.executeQuery();
            dsGroupRuleLineDocument.allowEdit(false);
            dsGroupRuleLineDocument.allowCreate(false);
            dsGroupRuleLineDocument.allowDelete(false);
            dsGroupRuleLineDocument.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsRuleLineDocumentInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the initValue event of <c>BankReconciliationMatchRuleLine</c> for finding bank documents.
    /// </summary>
    /// <param name="_matchRuleLineDocument">
    /// The <c>BankReconciliationMatchRuleLine</c> buffer for finding bank documents.
    /// </param>
    public void dsRuleLineDocumentInitValuePost(BankReconciliationMatchRuleLine _matchRuleLineDocument)
    {
        _matchRuleLineDocument.initializeLineType(BankReconciliationMatchRuleLineType::Document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsRuleLineOrigStatementInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the initValue event of <c>BankReconciliationMatchRuleLine</c> for finding original statement lines.
    /// </summary>
    /// <param name="_matchRuleLineOrigStatement">
    /// The <c>BankReconciliationMatchRuleLine</c> buffer for finding original statement lines.
    /// </param>
    public void dsRuleLineOrigStatementInitValuePost(BankReconciliationMatchRuleLine _matchRuleLineOrigStatement)
    {
        _matchRuleLineOrigStatement.initializeLineType(BankReconciliationMatchRuleLineType::OrigStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsRuleLineStatementInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the initValue event of <c>BankReconciliationMatchRuleLine</c> for finding statement lines.
    /// </summary>
    /// <param name="_matchRuleLineStatement">
    /// The <c>BankReconciliationMatchRuleLine</c> buffer for finding statement lines.
    /// </param>
    public void dsRuleLineStatementInitValuePost(BankReconciliationMatchRuleLine _matchRuleLineStatement)
    {
        if (isBankModernReconciliationFeatureEnabled)
        {
            _matchRuleLineStatement.initializeLineType(this.getLineTypeOfDataSourceRuleLineStatement());
        }
        else
        {
            _matchRuleLineStatement.initializeLineType(BankReconciliationMatchRuleLineType::Statement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsRuleLineOrigDocumentInitValuePost</Name>
				<Source><![CDATA[
    internal void dsRuleLineOrigDocumentInitValuePost(BankReconciliationMatchRuleLine _matchRuleLineOrigDocument)
    {
        _matchRuleLineOrigDocument.initializeLineType(BankReconciliationMatchRuleLineType::OrigDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsRuleLineCustInvoiceInitValuePost</Name>
				<Source><![CDATA[
    internal void dsRuleLineCustInvoiceInitValuePost(BankReconciliationMatchRuleLine _matchRuleLineSettleCustInvoice)
    {
        BankReconciliationMatchRule rule = BankReconciliationMatchRule::find(_matchRuleLineSettleCustInvoice.BankReconciliationMatchRule);
        _matchRuleLineSettleCustInvoice.initializeLineType(BankReconciliationMatchRuleViewModel::getLineTypeOfRuleLineMatchInvoice(rule.MatchActionType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineTypeOfDataSourceRuleLineStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line type of the form data source <c>BankReconciliationMatchRuleLineStatement</c>.
    /// </summary>
    /// <returns>The line type.</returns>
    internal BankReconciliationMatchRuleLineType getLineTypeOfDataSourceRuleLineStatement()
    {
        BankReconciliationMatchRuleLineType lineType = BankReconciliationMatchRuleLineType::Statement;
        BankReconciliationMatchRule matchRuleLocal = dsMatchRule.cursor();
        switch (matchRuleLocal.getMatchActionType())
        {
            case BankReconciliationMatchActionType::CustPaym:
                lineType = BankReconciliationMatchRuleLineType::GenerateCustPaym;
                break;

            case BankReconciliationMatchActionType::SettleCustInv:
                lineType = BankReconciliationMatchRuleLineType::SettleStatement;
                break;

            case BankReconciliationMatchActionType::VendPaym:
                lineType = BankReconciliationMatchRuleLineType::GenerateVendPaym;
                break;

            case BankReconciliationMatchActionType::Voucher:
                lineType = BankReconciliationMatchRuleLineType::GenerateVoucher;
                break;

            default:
                lineType = BankReconciliationMatchRuleLineType::Statement;
                break;
        }

        return lineType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineTypeOfRuleLineMatchInvoice</Name>
				<Source><![CDATA[
    internal static BankReconciliationMatchRuleLineType getLineTypeOfRuleLineMatchInvoice(BankReconciliationMatchActionType _matchAction)
    {
        BankReconciliationMatchRuleLineType matchRuleLineType;

        switch (_matchAction)
        {
            case BankReconciliationMatchActionType::CustPaym:
                matchRuleLineType = BankReconciliationMatchRuleLineType::MatchOpenClosedCustInvoice;
                break;

            case BankReconciliationMatchActionType::SettleCustInv:
                matchRuleLineType = BankReconciliationMatchRuleLineType::SettleCustInvoice;
                break;

            default:
                break;
        }

        return matchRuleLineType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryOfLookupValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for look up.
    /// </summary>
    /// <returns>
    /// The query for look up.
    /// </returns>
    /// <remarks>
    /// The query will be used by the SysLookup API.
    /// </remarks>
    public Query getQueryOfLookupValue()
    {
        return lookupQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeOfLookupValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the range for the value field look up.
    /// </summary>
    /// <returns>
    /// The range for the value field look up.
    /// </returns>
    /// <remarks>
    /// The TmpSysQuery stores the current range definition. It will be used by the SysLookup API.
    /// </remarks>
    public TmpSysQuery getRangeOfLookupValue()
    {
        return lookupRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank reconciliation matching rule view model.
    /// </summary>
    public void initialize()
    {
        dsMatchRule = matchRuleFormView.parmDSMatchRule();
        dsMatchRuleLineStatement = matchRuleFormView.parmDSMatchRuleLineStatement();
        dsMatchRuleLineDocument = matchRuleFormView.parmDSMatchRuleLineDocument();
        dsMatchRuleLineOrigStatement = matchRuleFormView.parmDSMatchRuleLineOrigStatement();
        dsGroupRuleLineStatement = matchRuleFormView.parmDSGroupRuleLineStatement();
        dsGroupRuleLineDocument = matchRuleFormView.parmDSGroupRuleLineDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLookUpValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize lookup query and range for the control to input value.
    /// </summary>
    /// <param name="_valueControl">
    /// The control to input value.
    /// </param>
    /// <remarks>
    /// The lookup query and range will be used by the SysLookup API.
    /// </remarks>
    public void initializeLookUpValue(FormStringControl _valueControl)
    {
        FormDataSource valueControlDataSource = _valueControl.dataSourceObject();
        BankReconciliationMatchRuleLine matchRuleLine;
        TableId sourceTableId;
        TmpSysQuery lookupRangeLocal;

        // Reset lookup query.
        lookupQuery = null;
        lookupRange = lookupRangeLocal;

        if (valueControlDataSource
            && valueControlDataSource.table() == tableNum(BankReconciliationMatchRuleLine))
        {
            matchRuleLine = valueControlDataSource.cursor();
            sourceTableId = matchRuleLine.getSourceTableId();

            if (sourceTableId
                && matchRuleLine.FieldId
                && (!isBankModernReconciliationFeatureEnabled || this.lookupValueAllowed(sourceTableId, matchRuleLine.FieldId)))
            {
                // Create lookup query.
                lookupQuery = new Query();
                lookupQuery.addDataSource(sourceTableId);

                // Create lookup range.
                lookupRange.Table_Id = sourceTableId;
                lookupRange.Field_Id = matchRuleLine.FieldId;
                lookupRange.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupValueAllowed</Name>
				<Source><![CDATA[
    private boolean lookupValueAllowed(TableId _tableId, FieldId _fieldId)
    {
        boolean ret = true;

        if ((_tableId == tableNum(BankReconciliationStatementOpenView) && _fieldId == fieldNum(BankReconciliationStatementOpenView, BankCurrencyAmount))
            || (_tableId == tableNum(CustInvoiceForBankReconciliationView) && _fieldId == fieldNum(CustInvoiceForBankReconciliationView, CurrencyCode)))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchRuleFormView</Name>
				<Source><![CDATA[
    public BankReconciliationMatchRuleFormView parmMatchRuleFormView(BankReconciliationMatchRuleFormView _matchRuleFormView = matchRuleFormView)
    {
        matchRuleFormView = _matchRuleFormView;

        return matchRuleFormView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankReconciliationMatchRuleViewModel</c> class.
    /// </summary>
    /// <returns>
    /// The <c>BankReconciliationMatchRuleViewModel</c> instance.
    /// </returns>
    protected static BankReconciliationMatchRuleViewModel construct()
    {
        return new BankReconciliationMatchRuleViewModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMatchRuleView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankReconciliationMatchRuleViewModel</c> class.
    /// </summary>
    /// <param name="_matchRuleFormView">
    /// The instance of <c>BankReconciliationMatchRuleFormView</c> class.
    /// </param>
    /// <returns>
    /// The instance of <c>BankReconciliationMatchRuleViewModel</c> class.
    /// </returns>
    public static BankReconciliationMatchRuleViewModel newFromMatchRuleView(BankReconciliationMatchRuleFormView _matchRuleFormView)
    {
        Debug::assert(_matchRuleFormView != null);

        BankReconciliationMatchRuleViewModel matchRuleViewModel = BankReconciliationMatchRuleViewModel::construct();
        matchRuleViewModel.parmMatchRuleFormView(_matchRuleFormView);

        matchRuleViewModel.initialize();

        return matchRuleViewModel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>