<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxOverdueVATCancel_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>TaxOverdueVATCancel_W</c> used for posting of cancellation of tax reversal on overdue debt.
/// </summary>
class TaxOverdueVATCancel_W extends Tax
{
    OverdueJournalTable_W   overdueJournalTable;
    Map                     taxWorkTransTaxTransMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAndInsertTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects records from <c>TaxTrans</c> which must be reversed.
    /// </summary>
    /// <returns>
    /// Amount of tax which must be reversed.
    /// </returns>
    protected TaxAmount calcAndInsertTaxes()
    {
        TaxAmount           taxAmount;
        TaxTrans            taxTrans;
        TaxTrans_W          taxTrans_W;

        while select * from taxTrans
            where taxTrans.Voucher    == overdueJournalTable.LedgerVoucher   &&
                  taxTrans.TransDate  == overdueJournalTable.TransDate
            join taxTrans_W
                where taxTrans_W.TaxTrans                == taxTrans.RecId &&
                      taxTrans_W.ReversedTaxTransRecId_W != 0
        {
            taxAmount += this.insertTaxWorkTrans(taxTrans, taxTrans_W);
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax amounts and creates transaction.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// <c>LedgerPostingController</c> used for posting.
    /// </param>
    /// <param name="_overdueJournalTable">
    /// <c>OverdueJournalTable_W</c> record tax on which must be reversed.
    /// </param>
    /// <returns>
    /// Posted sales tax amount.
    /// </returns>
    AmountCur calcAndPost(LedgerPostingController _ledgerPostingController, OverdueJournalTable_W _overdueJournalTable)
    {
        AmountCur   amountCur;
        ;
        voucher         = _ledgerPostingController.getReference().parmVoucher();
        taxDate         = _ledgerPostingController.getReference().parmTransDate();

        overdueJournalTable = _overdueJournalTable;

        amountCur = this.calcAndInsertTaxes();
        this.saveAndPost(_ledgerPostingController);

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWorkTransLedgerDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ledger dimensions for the <c>TaxWorkTrans</c> record.
    /// </summary>
    /// <param name="_taxTrans">
    ///    The tax transaction for reversal.
    /// </param>
    public void initTaxWorkTransLedgerDimensions(TaxTrans _taxTrans)
    {
        taxWorkTrans.LedgerDimension                = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(_taxTrans.RecId);
        taxWorkTrans.TaxOffsetUseTaxLedgerDimension = TaxTransGeneralJournalAccountEntry::getLedgerDimensionForTaxTrans(_taxTrans.RecId, TaxTransRelationshipType::UseTaxPayable);
        taxWorkTrans.OperationLedgerDimension       = TaxTransGeneralJournalAccountEntry::getLedgerDimensionForTaxTrans(_taxTrans.RecId, TaxTransRelationshipType::TransactionLineAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates single record in <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    /// <param name="_taxTrans">
    /// <c>TaxTrans</c> record based on which data created.
    /// </param>
    /// <param name="_taxTrans_W">
    /// <c>TaxTrans_W</c> record based on which data created.
    /// </param>
    /// <returns>
    /// Amount of tax contained in created <c>TmpTaxWorkTrans</c> record.
    /// </returns>
    private TaxAmount insertTaxWorkTrans(TaxTrans _taxTrans, TaxTrans_W _taxTrans_W)
    {
        TaxAmount   taxAmount;

        sourceCurrencyCode = _taxTrans.SourceCurrencyCode;
        triangulation = _taxTrans.euroTriangulation;

        taxWorkTrans.clear();
        taxWorkTrans.HeadingRecId = headingRecId;

        taxWorkTrans.SourceTableId              = this.sourceTableId();
        taxWorkTrans.SourceRecId                = this.sourceRecId();
        taxWorkTrans.TaxCode                    = _taxTrans.TaxCode;
        taxWorkTrans.TaxGroup                   = _taxTrans.TaxGroup;
        taxWorkTrans.TaxItemGroup               = _taxTrans.TaxItemGroup;
        taxWorkTrans.Source                     = _taxTrans.Source;
        taxWorkTrans.Voucher                    = voucher;
        taxWorkTrans.TransDate                  = taxDate;
        taxWorkTrans.CalculationDate            = taxDate;
        taxWorkTrans.TaxDirection               = _taxTrans.TaxDirection;
        taxWorkTrans.CurrencyCode               = _taxTrans.CurrencyCode;
        taxWorkTrans.SourceCurrencyCode         = sourceCurrencyCode;
        taxWorkTrans.TaxAutogenerated           = _taxTrans.TaxAutogenerated;
        taxWorkTrans.euroTriangulation          = _taxTrans.euroTriangulation;

        taxWorkTrans.TaxReports                 = NoYes::Yes;
        taxWorkTrans.ExemptTax                  = _taxTrans.ExemptTax;
        taxWorkTrans.TaxAutogenerated           = _taxTrans.TaxAutogenerated;
        taxWorkTrans.TaxOrigin                  = TaxOrigin::Tax;

        if (this.headingTableId())
        {
            taxWorkTrans.HeadingTableId             = this.headingTableId();
        }
        else
        {
            taxWorkTrans.HeadingTableId             = _taxTrans.HeadingTableId;
        }

        taxWorkTrans.SourceDocumentLine         = _taxTrans.SourceDocumentLine;

        this.initTaxWorkTransLedgerDimensions(_taxTrans);

        taxWorkTrans.TaxBaseAmount     = - _taxTrans.TaxBaseAmount;
        taxWorkTrans.TaxAmount         = - _taxTrans.TaxAmount;
        taxWorkTrans.TaxInCostPriceMST = - _taxTrans.TaxInCostPriceMST;

        taxWorkTrans.TaxBaseAmountCur  = - _taxTrans.TaxBaseAmountCur;
        taxWorkTrans.TaxAmountCur      = - _taxTrans.TaxAmountCur;
        taxWorkTrans.TaxInCostPriceCur = - _taxTrans.TaxInCostPriceCur;

        taxWorkTrans.TaxBaseAmountRep  = - _taxTrans.TaxBaseAmountRep;
        taxWorkTrans.TaxAmountRep      = - _taxTrans.TaxAmountRep;
        taxWorkTrans.TaxInCostPriceRep = - _taxTrans.TaxInCostPriceRep;

        taxWorkTrans.TaxBaseQty              = - _taxTrans.TaxBaseQty;

        taxWorkTrans.TaxInCostPrice          = - _taxTrans.TaxInCostPrice;
        taxWorkTrans.TaxInCostPriceRegulated = - _taxTrans.TaxInCostPriceRegulated;
        taxWorkTrans.SourceTaxAmountCur      = - _taxTrans.SourceTaxAmountCur;
        taxWorkTrans.SourceBaseAmountCur     = - _taxTrans.SourceBaseAmountCur;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            taxWorkTrans.VatDueDate_W    = _taxTrans_W.VatDueDate_W;
            taxWorkTrans.Addressing_PL   = _taxTrans_W.Addressing_PL;
            taxWorkTrans.DocumentDate_PL = _taxTrans_W.DocumentDate_PL;
            taxWorkTrans.CustVendName_PL = _taxTrans_W.CustVendName_PL;
            taxWorkTrans.VATNum_PL       = _taxTrans_W.VATNum_PL;
        }

        taxWorkTrans.insert();
        taxAmount += this.taxAmount(taxWorkTrans);

        taxWorkTransTaxTransMap.insert(taxWorkTrans.RecId, [_taxTrans.RecId, _taxTrans_W.ReversedTaxTransRecId_W]);

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();

        taxWorkTransTaxTransMap = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used for reversal of general ledger entries.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// <c>LedgerPostingController</c> used for posting.
    /// </param>
    /// <param name="_exchRateHelper">
    /// <c>CurrencyExchangeHelper</c> class.
    /// </param>
    /// <param name="_canceledCurrentTaxTransMap">
    /// <c>Map</c> object where key is rec id of reversed <c>TaxTrans</c>, and value is rec id of reversal <c>TaxTrans</c> record.
    /// </param>
    /// <param name="_ledgerDetailLevel">
    /// <c>LedgerDetailLevel</c> value; Optional.
    /// </param>
    /// <remarks>
    /// Standard posting of tax transactions cannot be used in this case, because relations between <c>TaxTrans</c> and <c>GeneralJournalAccountEntry</c> is many to many.
    /// </remarks>
    protected void postLedger(
        LedgerPostingController _ledgerPostingController,
        CurrencyExchangeHelper _exchRateHelper,
        Map _canceledCurrentTaxTransMap,
        LedgerDetailLevel _ledgerDetailLevel  = LedgerDetailLevel::AsDefault)

    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subLedgerVoucherGeneralJournalAccountEntry;

        DataAreaId voucherDataAreaId;

       if (SysDictField::isFieldMapped(
           tableStr(OverdueJournalTable_W),
           tableId2name(overdueJournalTable.TableId),
           fieldStr(OverdueJournalTable_W, JournalDataAreaId)))
       {
           voucherDataAreaId = overdueJournalTable.JournalDataAreaId;
       }

        // selecting all GeneralJournalAccountEntries related to TaxTranses,
        // cannot use posting in tmpTaxWorkTrans cycle because of many to many relation between taxTrans and GeneralJournalAccountEntry
        while select LedgerDimension, TransactionCurrencyAmount, AccountingCurrencyAmount, ReportingCurrencyAmount, TransactionCurrencyCode, RecId from generalJournalAccountEntry
            exists join subLedgerVoucherGeneralJournalAccountEntry
            where subLedgerVoucherGeneralJournalAccountEntry.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry
                && subLedgerVoucherGeneralJournalAccountEntry.AccountingDate == overdueJournalTable.TransDate
                && subLedgerVoucherGeneralJournalAccountEntry.Voucher == overdueJournalTable.LedgerVoucher
                && (!voucherDataAreaId || subLedgerVoucherGeneralJournalAccountEntry.VoucherDataAreaId == voucherDataAreaId)
        {
            LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                _ledgerPostingController.getReference(),
                LedgerPostingType::Tax,
                generalJournalAccountEntry.LedgerDimension,
                generalJournalAccountEntry.TransactionCurrencyCode,
                -generalJournalAccountEntry.TransactionCurrencyAmount,
                _exchRateHelper);

            ledgerVoucherTransObject.parmAmountMST(-generalJournalAccountEntry.AccountingCurrencyAmount);
            ledgerVoucherTransObject.parmReportingCurrencyAmount(-generalJournalAccountEntry.ReportingCurrencyAmount);

            TaxTransGeneralJournalAccountEntry taxLink;

            while select TaxTrans, TaxTransRelationship, AccountingCurrencyAmount, TransactionCurrencyAmount from taxLink
                where taxLink.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
            {
                if (TaxOverdueVendorVATJournalFlight::instance().isEnabled())
                {
                    ledgerVoucherTransObject.addTaxTransRelationship(
                        _canceledCurrentTaxTransMap.lookup(taxLink.TaxTrans),
                        taxLink.TaxTransRelationship,
                        curext(),
                        -taxLink.AccountingCurrencyAmount,
                        -taxLink.TransactionCurrencyAmount);
                }
                else
                {
                    ledgerVoucherTransObject.addTaxTransRelationship(
                        _canceledCurrentTaxTransMap.lookup(taxLink.TaxTrans),
                        TaxTransRelationshipType::Tax);
                }
            }

            ledgerVoucherTransObject.parmLedgerDetailLevel(_ledgerDetailLevel);
            ledgerVoucherTransObject.parmSkipDimensionValidation(true);

            _ledgerPostingController.addTrans(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts calculated tax to <c>TaxTrans</c> and general ledger.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// <c>LedgerPostingController</c> object used for posting.
    /// </param>
    public void saveAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxTrans                taxTrans;
        TaxAmountCur            taxAmountCur;
        TaxAmountCur            taxInCostPrice;
        CurrencyExchangeHelper  exchangeRateHelper;
        RecordInsertList        insertList;
        TaxTable                taxTable;
        TaxTrans_W              taxTrans_W;
        TaxTransRecId           originalTaxTransRecId;
        List                    codesList = new List(Types::String);
        Map                     canceledCurrentTaxTransMap = new Map(Types::Int64, Types::Int64);

        insertList = new RecordInsertList(taxSourceLineSummaryTmp.TableId, false, false, false, false, true, taxSourceLineSummaryTmp);

        this.validateForPost();

        exchangeRateHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));
        exchangeRateHelper.parmExchangeRate1(this.exchRate());
        exchangeRateHelper.parmExchangeRate2(this.exchRateSecondary());

        ttsbegin;

        while select *
        from taxworkTrans
        order by taxWorkTrans.SourceRecId
        where taxworkTrans.HeadingRecId  == this.headingRecId() &&
                (taxworkTrans.TaxOrigin     != TaxOrigin::TaxReversed ||
                this.allowPostingOfReversals()) &&
                taxworkTrans.IsDeleted      == NoYes::No
        {
            if (taxworkTrans.TaxCode)
            {
                this.validateWarningsForPost(taxworkTrans.Warning, taxworkTrans.TaxCode, false);

                if (taxSourceLineSummaryTmp.SourceRecId != taxWorkTrans.SourceRecId)
                {
                    taxSourceLineSummaryTmp.PrintCode = strList2str(codesList, ', ');
                    if (taxSourceLineSummaryTmp.PrintCode)
                    {
                        insertList.add(taxSourceLineSummaryTmp);
                    }

                    taxSourceLineSummaryTmp.SourceRecId = taxWorkTrans.SourceRecId;
                    taxSourceLineSummaryTmp.SourceTableId = taxWorkTrans.SourceTableId;
                    taxSourceLineSummaryTmp.ActualTransactionTaxAmount = 0;

                    codesList = new List(Types::String);
                }

                taxTable = taxTable::find(taxWorkTrans.TaxCode);
                if (taxTable.PrintCode)
                {
                    codesList.addEnd(taxTable.PrintCode);
                }

                taxSourceLineSummaryTmp.ActualTransactionTaxAmount += taxWorkTrans.SourceRegulateAmountCur;

                taxTrans.clear();
                this.initFromTaxWorkTrans(taxTrans, taxworkTrans, this.taxOrigin(taxworkTrans.TaxOrigin));

                taxTrans.euroTriangulation = triangulation;
                taxTrans.Voucher           = voucher;
                taxTrans.JournalNum        = this.journalNum();

                taxAmountCur           = taxTrans.SourceTaxAmountCur;
                taxInCostPrice         = taxTrans.TaxInCostPrice;

                taxTrans_W = taxTrans.taxTrans_W();
                [originalTaxTransRecId, taxTrans_W.ReversedTaxTransRecId_W] = taxWorkTransTaxTransMap.lookup(taxWorkTrans.RecId);
                taxTrans.packTaxTrans_W(taxTrans_W);

                taxTrans.insert();

                canceledCurrentTaxTransMap.insert(originalTaxTransRecId, taxTrans.RecId);
            }
        }

        this.postLedger(_ledgerPostingController, exchangeRateHelper, canceledCurrentTaxTransMap);

        if (taxSourceLineSummaryTmp.SourceRecId && taxSourceLineSummaryTmp.SourceTableId)
        {
            taxSourceLineSummaryTmp.PrintCode = strList2str(codesList, ', ');
            if (taxSourceLineSummaryTmp.PrintCode)
            {
                insertList.add(taxSourceLineSummaryTmp);
            }
        }

        insertList.insertDatabase();

        TaxCalculationAdjustment::deleteTaxRegulation(this);

        ttscommit;

        if (MultipleTaxIdReportingHelper::isLegalEntityOrTaxCodeInCountryRegion(
            taxTrans.TaxCode, [#isoIT], MultipleTaxIdScope::VATDeclaration))
        {
            info(strFmt("@SYS75076", taxTrans.Voucher));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax amount which is contained in <c>TmpTaxWorkTrans</c> record.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// Tax amount.
    /// </returns>
    protected TaxAmount taxAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.SourceTaxAmountCur - _tmpTaxWorkTrans.TaxInCostPrice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>