<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPOMarkApprove</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqTransPOMarkApprove extends ReqTransPoMark implements BatchRetryable
{
    DialogField     dialogReqPoStatus;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        this.dialogAddDefaultFields(dialog,true,false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelDialogMarkedElements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a label to be used in the dialog for showing how many marked records were marked.
    /// </summary>
    /// <param name="_countMarkedElements">
    ///    The number of marked records.
    /// </param>
    /// <returns>
    ///    A label.
    /// </returns>
    protected str labelDialogMarkedElements(int _countMarkedElements)
    {
        str text;

        switch (_countMarkedElements)
        {
            case 0:
                text = "@SYS345110";
                break;
            case 1:
                text = "@SYS119142";
                break;
            default:
                text = strFmt("@SYS119143",_countMarkedElements);
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRefreshOnlyActiveRecord</Name>
				<Source><![CDATA[
    private boolean shouldRefreshOnlyActiveRecord()
    {
        ReqPlannedOrderFormCallDetailsContext context = ReqPlannedOrderFormCallDetailsContext::current();

        return context &&
               mapReqPoUpdated.elements() == 1 && 
               mapReqPoUpdated.exists(context.getPlannedOrderRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerActiveRecord</Name>
				<Source><![CDATA[
    private void refreshCallerActiveRecord()
    {
        FormDataSource ds = FormDataUtil::getFormDataSource(this.callerDataSourceRecord);

        if (ds)
        {
            ds.reread();
            ds.refresh();
            ds.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes caller form data source.
    /// </summary>
    protected void refreshCaller()
    {
        ReqTransPoMarkOverrideRefreshCallerContext overrideRefreshContext;

        if (ReqTransPoRereadActiveRowForDetailsModeFlight::instance().isEnabled()
            && this.shouldRefreshOnlyActiveRecord())
        {
            this.refreshCallerActiveRecord();
            overrideRefreshContext = ReqTransPoMarkOverrideRefreshCallerContext::construct();
        }

        try
        {
            super();
        }
        finally
        {
            if (overrideRefreshContext)
            {
                overrideRefreshContext.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        setPrefix(ReqTransPoMarkChangeStatus::description());       

        using(var activityContext = ReqInstrumentationLogger::createLogger(classStr(ReqTransPOMarkApprove)).transPO().approve())
        {
            super();

            try
            {
                ttsBegin;

                if (!this.validate())
                {
                    throw error("@SYS18447");
                }
                this.updateStatus();

                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    protected void updateStatus()
    {
        MapEnumerator       me;
        ReqTrans            reqTransMark;
        ReqPO               reqPO;

        this.mapReqTransMark();

        if (   mapReqTransMark
            && mapReqTransMark.elements())
        {
            me = mapReqTransMark.getEnumerator();

            while (me.moveNext())
            {
                reqTransMark = me.currentValue();

                reqPO = reqTransMark.reqPo(true);

                setPrefix(#prefixField(reqPo,refId));

                if (!reqPO.RecId)
                {
                    throw error(strFmt("@SYS24774",reqTransMark.RefId));
                }

                if (!ReqTrans::refTypeIsPlannedOrder(reqPO.RefType))
                {
                    throw error("@SYS69936");
                }

                reqPO.ReqPOStatus = ReqPOStatus::Approved;
                reqPO.update();

                mapReqPoUpdated.insert(reqPO.RecId,reqPO);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqTransPOMarkApprove construct()
    {
        return new ReqTransPOMarkApprove();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS119136";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqTransPOMarkApprove       reqTransPOMarkApprove;

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            reqTransPOMarkApprove = ReqTransPOMarkApprove::newForm(_args);
            reqTransPOMarkApprove.executeAction();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static ReqTransPOMarkApprove newForm(Args _args)
    {
        ReqTransPOMarkApprove   reqTransPOMarkApprove = ReqTransPOMarkApprove::construct();

        reqTransPOMarkApprove.getLast();
        reqTransPOMarkApprove.initFromArgs(_args);

        return reqTransPOMarkApprove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>