<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsgTransport_WebService_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.ElectronicFiscalDocument;

/// <summary>
/// This class is reponsible for the communication with the government web services.
/// </summary>
class EFDocMsgTransport_WebService_BR implements IEFDocMsgTransport
{
    private const str SubjectNameV5 = "CN=Autoridade Certificadora Raiz Brasileira v5, OU=Instituto Nacional de Tecnologia da Informacao - ITI, O=ICP-Brasil, C=BR";
    private const str SubjectNameV10 = "CN=Autoridade Certificadora Raiz Brasileira v10 OU=Instituto Nacional de Tecnologia da Informacao - ITI O=ICP-Brasil C=BR";
    private const str SecondLevelDomainName = "gov.br";

    #FiscalDocumentModels_BR
    #define.ServiceModelChannelsBinding('System.ServiceModel.Channels.Binding, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    #define.ServiceModelEndpointAddress('System.ServiceModel.EndpointAddress, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')

    EFDocMsgStringStream_BR     sendStream;
    EFiscalDocVersion_BR        fiscalDocVersion;
    EFDocWebService_BR          webService;
    EFDocEnvironment_BR         environment;
    EFDocFormatVersion_BR       formatVersion;
    URL                         wsURL;
    CityIBGECode_BR             issuingStateCode;
    EFDocWebServiceData_BR      webServiceData;
    EFDocAuthority_BR           authority;
    private EFDocEncoderType            encoderType;
    private EFDocSoapVersion            soapVersion;

    DigitalCertificateSubject   digitalCertificateSubject;
    KeyVaultCertificateRef      keyVaultCertificateRef;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAuthority</Name>
				<Source><![CDATA[
    public EFDocAuthority_BR parmAuthority(EFDocAuthority_BR _authority = authority)
    {
        authority = _authority;
        return authority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomServerCertificateValidator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds custom certificate validator to NF-e sending process.
    /// </summary>
    protected void addCustomServerCertificateValidator()
    {
        System.String[] subjects = new System.String[2]();
        subjects.SetValue(SubjectNameV5, 0);
        subjects.SetValue(SubjectNameV10, 1);
        Validators.CustomServerCertificateValidator customServerCertificateValidator = Validators.CustomServerCertificateValidator::Instance;
        customServerCertificateValidator.SetContextForCertificates(
            SecondLevelDomainName,
            subjects,
            FeatureStateProvider::isFeatureEnabled(EFDocCertificateValidationFeature_BR::instance()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the digital certificate to a given WCF client object.
    /// </summary>
    /// <param name="_wcfClient">
    /// WCF client to add the certificate to.
    /// </param>
    protected void addCertificate(System.Object _wcfClient)
    {
        #define.ClientCredentials('ClientCredentials')

        System.Type                                                             type;
        System.Object[]                                                         credentialsArgs;
        System.Reflection.PropertyInfo                                          method = null;
        System.ServiceModel.Description.ClientCredentials                       clientCredentials;
        System.ServiceModel.Security.X509CertificateInitiatorClientCredential   clientCertificate;
        System.Security.Cryptography.X509Certificates.X509Certificate2          certificate;

        if (!this.isHttps())
            return;

        credentialsArgs = new System.Object[0]();

        type = _wcfClient.GetType();
        method = type.GetProperty(#ClientCredentials);
        clientCredentials = method.GetValue(_wcfClient, credentialsArgs);

        clientCertificate = clientCredentials.get_ClientCertificate();

        certificate = CertificateHelper_BR::getDigitalCertificate(keyVaultCertificateRef, digitalCertificateSubject);

        clientCertificate.set_Certificate(certificate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>callWcfClientMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls a remote method.
    /// </summary>
    /// <param name="_assembly">
    /// The assembly with the service reference to be called.
    /// </param>
    /// <param name="_wcfClient">
    /// WCF client to be called.
    /// </param>
    /// <param name="_webServiceData">
    /// <c>EFDocWebServiceData_BR</c> with information about the method to be called.
    /// </param>
    /// <param name="_messageData">
    /// The message to be sent.
    /// </param>
    /// <returns>
    /// The returned XML from the method.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The provided web service data doesn't match with the webservice.
    /// </exception>
    protected System.Xml.XmlDocument callWcfClientMethod(
        System.Reflection.Assembly _assembly,
        System.Object _wcfClient,
        EFDocWebServiceData_BR _webServiceData,
        str _messageData)
    {
        System.Reflection.MethodInfo        method = null;
        System.Object                       nfeCabecMsg;
        System.Object[]                     methodArgs;
        System.Type                         type;
        System.Xml.XmlDocument              xmlDoc;
        System.Xml.XmlElement               returnedElement;

        type = _wcfClient.GetType();
        method = type.GetMethod(_webServiceData.webServiceMethod());

        if (!method)
        {
            throw Error(strfmt("@GLS62920", _webServiceData.webServiceMethod()));
        }

        xmlDoc = new System.Xml.XmlDocument();
        xmlDoc.LoadXml(_messageData);

        if (fiscalDocVersion == EFiscalDocVersion_BR::V40)
        {
            methodArgs = new System.Object[1]();
            methodArgs.SetValue(xmlDoc, 0);
        }
        else
        {
            nfeCabecMsg = this.createMessageHeader(_assembly, _webServiceData);

            methodArgs = new System.Object[2]();
            methodArgs.SetValue(nfeCabecMsg, 0);
            methodArgs.SetValue(xmlDoc, 1);
        }

        System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();

        returnedElement = method.Invoke(_wcfClient, methodArgs);

        stopwatch.Stop();
        GlobalizationInstrumentationHelper::featureRunWithPerformance(
            GlobalizationConstants::FeatureReferenceBR00053,
            funcName(),
            GlobalizationInstrumentationHelper::DefaultFeatureVersion,
            SysCountryRegionCode::countryInfo(),
            stopwatch.ElapsedMilliseconds,
            false,
            returnedElement != null);

        xmlDoc.LoadXml(returnedElement.get_OuterXml());

        return xmlDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callWebService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the web service sending the given message data.
    /// </summary>
    /// <param name="_messageData">
    /// Message to be sent.
    /// </param>
    /// <returns>
    /// Returned message from the service.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error occurred when calling whe web service.
    /// </exception>

    protected str callWebService(str _messageData)
    {
        System.Reflection.Assembly          assembly = null;
        str                                 returnData;
        System.Object                       wcfClient;
        System.Reflection.MethodInfo        method = null;
        System.Xml.XmlDocument              xmlDoc;

        try
        {
            new InteropPermission(InteropKind::ClrInterop).assert();

            if (fiscalDocVersion == EFiscalDocVersion_BR::V40)
            {
                EFDocProtocolHelper::SetProtocolTLS12();
            }
            else
            {
                EFDocProtocolHelper::RestoreDefaultProtocol();
            }
            
            assembly = this.loadAssembly();

            wcfClient = this.createWcfClient(assembly, wsURL);

            this.AddCertificate(wcfClient);
            this.addCustomServerCertificateValidator();

            xmlDoc = this.callWcfClientMethod(assembly, wcfClient, webServiceData, _messageData);
            returnData = xmlDoc.get_OuterXml();

            CodeAccessPermission::revertAssert();

            return returnData;
        }
        catch(Exception::CLRError)
        {
            //Unable to load assembly
            throw error(AifUtil::getClrErrorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBinding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the binding to call the web service.
    /// </summary>
    /// <returns>
    /// The proper binding element.
    /// </returns>
    protected System.ServiceModel.Channels.Binding createBinding()
    {
        System.ServiceModel.Channels.Binding                                        binding;
        System.ServiceModel.Channels.BindingElement[]                               bindingElementArray;
        System.ServiceModel.Channels.HttpsTransportBindingElement                   transportBinding;

        if (this.isHttps())
        {
            bindingElementArray = new System.ServiceModel.Channels.BindingElement[2]();
            
            transportBinding = new System.ServiceModel.Channels.HttpsTransportBindingElement();
            transportBinding.set_RequireClientCertificate(true);

            bindingElementArray = this.setMessageEncoderToBindingArray(this.encoderType, this.getMessageVersionFromEFDocSoapVersion(), bindingElementArray);
            
            bindingElementArray.SetValue(transportBinding, 1);
        }
        else
        {
            CustomEncoder.CustomTextMessageBindingElement customTextMessageEncoder = new CustomEncoder.CustomTextMessageBindingElement('utf-8', 'text/xml', System.ServiceModel.Channels.MessageVersion::get_Soap11());
            bindingElementArray = new System.ServiceModel.Channels.BindingElement[2]();
            bindingElementArray.SetValue(customTextMessageEncoder, 0);
            bindingElementArray.SetValue(new System.ServiceModel.Channels.HttpTransportBindingElement(), 1);
        }

        binding = new System.ServiceModel.Channels.CustomBinding(bindingElementArray);
        return binding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMessageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the message header that will be sent to the web server.
    /// </summary>
    /// <param name="_assembly">
    /// The assembly with the service reference to be called.
    /// </param>
    /// <param name="_webServiceData">
    /// <c>EFDocWebServiceData_BR</c> with information about the method to be called.
    /// </param>
    /// <returns>
    /// A <c>System.Object</c> with the message header.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The message header could not be created.
    /// </exception>
    protected System.Object createMessageHeader(System.Reflection.Assembly _assembly, EFDocWebServiceData_BR _webServiceData)
    {
        #define.ibgeCode    ('cUF')
        #define.version     ('versaoDados')

        System.Type                         type;
        System.Type[]                       arguments;
        System.Reflection.ConstructorInfo   ctor = null;
        System.Object[]                     ctorArgs;
        System.Object                       messageHeader;

        void setPropertyValue(str _attributeName, str _value)
        {
            System.Reflection.PropertyInfo property = null;
            System.Object[]                methodArgs;
            System.Object[]                methodArgsIndex;
            ;
            property = type.GetProperty(_attributeName);

            if (!property)
            {
                throw Error(strfmt("@GLS62920", #ibgeCode));
            }
            methodArgsIndex = new System.Object[0]();

            methodArgs = new System.String[1]();
            methodArgs.SetValue(_value,0);
            property.SetValue(messageHeader, _value, methodArgsIndex);
        }

        type = this.loadType(_assembly, _webServiceData.messageHeaderQualifiedName());

        arguments = new System.Type[0]();
        ctor = type.GetConstructor(arguments);

        if (!ctor)
        {
            throw Error("@GLS62919");
        }

        ctorArgs = new System.Type[0]();
        messageHeader = ctor.Invoke(ctorArgs);

        setPropertyValue(#ibgeCode, this.parmIssuingStateCode());
        setPropertyValue(#version, formatVersion);

        return messageHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWcfClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the WCF client.
    /// </summary>
    /// <param name="_assembly">
    /// The assembly with the service reference to be called.
    /// </param>
    /// <param name="_url">
    /// The URL of the web service to be called.
    /// </param>
    /// <returns>
    /// The WCF client to be called.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The required type was not found on the given assembly.
    /// </exception>
    protected System.Object createWcfClient(System.Reflection.Assembly _assembly, url _url)
    {
        System.Type                         type;
        System.Type[]                       arguments;
        System.Reflection.ConstructorInfo   ctor = null;
        System.Object[]                     ctorArgs;
        System.Object                       wcflClient;

        System.ServiceModel.Channels.Binding binding;
        System.ServiceModel.EndpointAddress  endpointAddress;

        type = this.loadType(_assembly, webServiceData.assemblyClassQualifiedName());

        arguments = new System.Type[2]();
        arguments.SetValue(System.Type::GetType(#ServiceModelChannelsBinding), 0);
        arguments.SetValue(System.Type::GetType(#ServiceModelEndpointAddress), 1);
        ctor = type.GetConstructor(arguments);

        if (!ctor)
        {
            throw Error("@GLS62919");
        }

        binding = this.createBinding();
        endpointAddress = new System.ServiceModel.EndpointAddress(_url);

        ctorArgs = new System.Object[2]();
        ctorArgs.SetValue(binding           ,0);
        ctorArgs.SetValue(endpointAddress   ,1);
        wcflClient = ctor.Invoke(ctorArgs);

        return wcflClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of <c>IEFDocMsgStream_BR</c>
    /// to send the messages with.
    /// </summary>
    /// <returns>
    /// An instance of <c>IEFDocMsgStream_BR</c>
    /// to send the messages with.
    /// </returns>
    public IEFDocMsgStream_BR getSendStream()
    {
        return sendStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHttps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the callee webservice is secure.
    /// </summary>
    /// <returns>
    /// true if the webservice is secure; false otherwise.
    /// </returns>
    protected boolean isHttps()
    {
        return strscan(wsURL, 'https', 0, strlen(wsURL));
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAssembly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the assembly with the service reference to be called.
    /// </summary>
    /// <returns>
    /// A <c>System.Reflection.Assembly</c> object of the assembly.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The required assembly was not found.
    /// </exception>
    protected System.Reflection.Assembly loadAssembly()
    {
        System.Reflection.Assembly          assembly = null;
        assembly = System.Reflection.Assembly::Load(webServiceData.assemblyName());
        if (assembly == null)
        {
            //Unable to load assembly
            throw error(strfmt("@GLS62917", webServiceData.assemblyName()));
        }

        return assembly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads an specified type from the given assembly.
    /// </summary>
    /// <param name="_assembly">
    /// <c>System.Reflection.Assembly</c> to retrieve the type from.
    /// </param>
    /// <param name="qualifiedTypeName">
    /// The name of the type to be retrieved.
    /// </param>
    /// <returns>
    /// <c>System.Type</c> of the requested type.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The requested type was not found on the given assembly.
    /// </exception>

    protected System.Type loadType(System.Reflection.Assembly _assembly, str qualifiedTypeName)
    {
        System.Type                         objectType;

        objectType = _assembly.GetType(qualifiedTypeName);
        if (objectType == null)
        {
            throw error(strfmt("@GLS62918", qualifiedTypeName));
        }

        return objectType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        sendStream = new EFDocMsgStringStream_BR();
        encoderType = EFDocEncoderType::CustomEncorder;
        soapVersion = EFDocSoapVersion::Soap12;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificateSubject</Name>
				<Source><![CDATA[
    public DigitalCertificateSubject parmCertificateSubject(DigitalCertificateSubject _digitalCertificateSubject = digitalCertificateSubject)
    {
        digitalCertificateSubject = _digitalCertificateSubject;

        return digitalCertificateSubject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyVaultCertificateRef</Name>
				<Source><![CDATA[
    public KeyVaultCertificateRef parmKeyVaultCertificateRef(KeyVaultCertificateRef _keyVaultCertificateRef = keyVaultCertificateRef)
    {
        keyVaultCertificateRef = _keyVaultCertificateRef;

        return keyVaultCertificateRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnvironment</Name>
				<Source><![CDATA[
    public EFDocEnvironment_BR parmEnvironment(EFDocEnvironment_BR _environment = environment)
    {
        environment = _environment;
        return environment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocVersion</Name>
				<Source><![CDATA[
    public EFiscalDocVersion_BR parmFiscalDocVersion(EFiscalDocVersion_BR _fiscalDocVersion = fiscalDocVersion)
    {
        fiscalDocVersion = _fiscalDocVersion;
        return fiscalDocVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormatVersion</Name>
				<Source><![CDATA[
    public EFDocFormatVersion_BR parmFormatVersion(EFDocFormatVersion_BR _formatVersion = formatVersion)
    {
        formatVersion = _formatVersion;
        return formatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIssuingStateCode</Name>
				<Source><![CDATA[
    public CityIBGECode_BR parmIssuingStateCode(CityIBGECode_BR _stateCode = issuingStateCode)
    {
        issuingStateCode = _stateCode;
        return issuingStateCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSoapVersion</Name>
				<Source><![CDATA[
    public EFDocSoapVersion parmSoapVersion(EFDocSoapVersion _soapVersion = soapVersion)
    {
        soapVersion = _soapVersion;
        return soapVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmURL</Name>
				<Source><![CDATA[
    public URL parmURL(URL _url = wsURL)
    {
        wsURL = _url;
        return wsURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWebService</Name>
				<Source><![CDATA[
    protected EFDocWebService_BR parmWebService(EFDocWebService_BR _webService = webService)
    {
        webService = _webService;
        return webService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEncoderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or set the Encoder type of the event web service.
    /// </summary>
    /// <param name="_encoderType">
    /// <c>EFDocEncoderType</c> encoder type.
    /// </param>
    /// <returns>
    /// The web service Encoder type.
    /// </returns>
    public EFDocEncoderType parmEncoderType(EFDocEncoderType _encoderType = encoderType)
    {
        encoderType = _encoderType;
        return encoderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    public IEFDocMsgStream_BR send(str _accessKey = '')
    {
        EFDocMsgStringStream_BR     returnStream;
        str                         content;

        webServiceData = EFDocWebServiceData_BR::construct(fiscalDocVersion, environment, webService, this.parmIssuingStateCode(), this.parmAuthority());

        content = this.callWebService(sendStream.toString());

        returnStream = new EFDocMsgStringStream_BR();
        returnStream.write(content);

        sendStream = new EFDocMsgStringStream_BR();

        return returnStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>EFDocMsgTransport_WebService_BR</c>.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The <c>FiscalEstablishment_BR</c> that will send the messages.
    /// </param>
    /// <param name="_version">
    /// The version of the web service that will be called.
    /// </param>
    /// <param name="_webServiceUrl">
    /// The web service <c>Url</c> that will be called.
    /// </param>
    /// <returns>
    /// A new instance of <c>EFDocMsgTransport_WebService_BR</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// A valid web service configuration was not found for the given fiscal establishment.
    /// </exception>
    public static IEFDocMsgTransport newFromEvent(FiscalEstablishment_BR _fiscalEstablishment, EFDocFormatVersion_BR _version, Url _webServiceUrl)
    {
        EFDocMsgTransport_WebService_BR transport = new EFDocMsgTransport_WebService_BR();
        LogisticsAddressCity issuingCity;

        Debug::assert(strLen(_fiscalEstablishment.EFDocAuthority) > 0 );

        transport.parmCertificateSubject(_fiscalEstablishment.EFDocDigitalCertificateSubject);
        transport.parmKeyVaultCertificateRef( _fiscalEstablishment.EFDocKeyVaultCertificateRef);

        transport.parmWebService(EFDocWebService_BR::Events);
        transport.parmEnvironment(_fiscalEstablishment.EFDocEnvironment);
        transport.parmFiscalDocVersion(_fiscalEstablishment.EFDocVersion);
        transport.parmFormatVersion(_version);
        transport.parmURL(_webServiceUrl);

        issuingCity = LogisticsAddressCity::findLogisticsAddressMap(_fiscalEstablishment.postalAddress());
        transport.parmIssuingStateCode(substr(issuingCity.IBGECode_BR, 1, 2));

        if (!DocuType::validateURL(transport.parmURL()))
        {
            throw error(strFmt("@GLS222571", _fiscalEstablishment.efDocAuthority, enum2str(EFDocWebService_BR::Events)));
        }

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromServiceInquire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>EFDocMsgTransport_WebService_BR</c>.
    /// </summary>
    /// <param name="_eFDocServiceInquireParams">
    /// The <c>EFDocServiceInquireParams_BR</c> contains information to send the message.
    /// </param>
    /// <returns>
    /// A new instance of <c>EFDocMsgTransport_WebService_BR</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// A valid web service configuration was not found for the given fiscal establishment.
    /// </exception>
    public static IEFDocMsgTransport newFromServiceInquire(EFDocServiceInquireParams_BR _eFDocServiceInquireParams)
    {
        EFDocMsgTransport_WebService_BR transport = new EFDocMsgTransport_WebService_BR();
        EFDocWebServiceConfigurator_BR configurator;

        configurator = new EFDocWebServiceConfigurator_BR(_eFDocServiceInquireParams.parmEFDocEnvironment(),
                                                      _eFDocServiceInquireParams.parmEFDocVersion(),
                                                      _eFDocServiceInquireParams.parmAuthorityId(),
                                                      EFDocWebService_BR::ServiceInquire);

        transport.parmCertificateSubject(_eFDocServiceInquireParams.parmCertificateSubject());
        transport.parmKeyVaultCertificateRef(_eFDocServiceInquireParams.parmKeyVaultCertificateRef());

        transport.parmWebService(EFDocWebService_BR::ServiceInquire);
        transport.parmEnvironment(_eFDocServiceInquireParams.parmEFDocEnvironment());
        transport.parmFiscalDocVersion(_eFDocServiceInquireParams.parmEFDocVersion());
        transport.parmFormatVersion(configurator.getFormatVersion());
        transport.parmURL(configurator.getURL());
        transport.parmIssuingStateCode(_eFDocServiceInquireParams.parmCUF());
        transport.parmAuthority(EFDocAuthority_BR::findById(_eFDocServiceInquireParams.parmAuthorityId()));
        transport.parmEncoderType(configurator.getEncoderType());
        transport.parmSoapVersion(configurator.getSoapVersion());

        if (!DocuType::validateURL(transport.parmURL()))
        {
            throw error(strFmt("@GLS222571", _eFDocServiceInquireParams.parmAuthorityId(), enum2str(EFDocWebService_BR::ServiceInquire)));
        }

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWebService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>EFDocMsgTransport_WebService_BR</c>.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// <c>FiscalEstablishment_BR</c> that will send the messages.
    /// </param>
    /// <param name="_webService">
    /// The <c>EFDocWebService_BR</c> that will be called.
    /// </param>
    /// <param name="_authorityId">
    /// The Id of the authority that will be used to create the transport.
    /// </param>
    /// <param name="_fiscalDocumentModel">
    /// The fiscal document model that will be used to create the transport
    /// </param>
    /// <returns>
    /// A new instance of <c>EFDocMsgTransport_WebService_BR</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// A valid web service configuration was not found for the given fiscal establishment.
    /// </exception>

    public static IEFDocMsgTransport newFromWebService(FiscalEstablishment_BR _fiscalEstablishment, EFDocWebService_BR _webService, EFDocAuthorityId_BR _authorityId, FiscalDocumentModel_BR _fiscalDocumentModel = #FiscalDocModel_55)
    {
        EFDocMsgTransport_WebService_BR transport = new EFDocMsgTransport_WebService_BR();
        EFDocWebServiceConfigurator_BR configurator;
        LogisticsAddressCity issuingCity;
        EFiscalDocVersion_BR eFiscalDocVersion;
        EFDocEnvironment_BR eFDocEnvironment;
       
        transport.parmCertificateSubject(_fiscalEstablishment.EFDocDigitalCertificateSubject);
        transport.parmKeyVaultCertificateRef(_fiscalEstablishment.EFDocKeyVaultCertificateRef);

        transport.parmWebService(_webService);

        issuingCity = LogisticsAddressCity::findLogisticsAddressMap(_fiscalEstablishment.postalAddress());
        transport.parmIssuingStateCode(substr(issuingCity.IBGECode_BR, 1, 2));

        if (_fiscalDocumentModel == #FiscalDocModel_65)
        {
            eFiscalDocVersion = _fiscalEstablishment.ConsumerEFDocVersion;
            eFDocEnvironment = _fiscalEstablishment.ConsumerEFDocEnvironment;
        }
        else
        {
            eFiscalDocVersion = _fiscalEstablishment.EFDocVersion;
            eFDocEnvironment = _fiscalEstablishment.EFDocEnvironment;
        }

        transport.parmEnvironment(eFDocEnvironment);
        transport.parmFiscalDocVersion(eFiscalDocVersion);

        configurator = new EFDocWebServiceConfigurator_BR(eFDocEnvironment,
                                                          eFiscalDocVersion,
                                                          _authorityId,
                                                          _webService);

        if (!configurator.configurationFound())
        {
            throw error(strFmt("@GLS222570", enum2str(_webService), _authorityId));
        }

        transport.parmFormatVersion(configurator.getFormatVersion());
        if (!DocuType::validateURL(configurator.getURL()))
        {
            throw error(strFmt("@GLS222571", _authorityId, enum2str(_webService)));
        }

        transport.parmURL(configurator.getURL());

        transport.parmAuthority(EFDocAuthority_BR::findById(_authorityId));

        transport.parmEncoderType(configurator.getEncoderType());
        transport.parmSoapVersion(configurator.getSoapVersion());

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMessageEncoderToBindingArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set message encoder into bidning array.
    /// </summary>
    /// <param name="_encoderType">
    /// <c>EFDocEncoderType</c> encoder type.
    /// </param>
    /// <param name="_messageVersion">
    /// <c>System.ServiceModel.Channels.MessageVersion</c> message version for encoder.
    /// </param>
    /// <param name="_bindingElementArray">
    /// <c>System.ServiceModel.Channels.BindingElement[]</c> binding array.
    /// </param>
    /// <param name="_arrayIndex">
    /// Index of binding array.
    /// </param>
    /// <returns>
    /// Binding array.
    /// </returns>
    protected System.ServiceModel.Channels.BindingElement[] setMessageEncoderToBindingArray(EFDocEncoderType _encoderType,
        System.ServiceModel.Channels.MessageVersion _messageVersion,
        System.ServiceModel.Channels.BindingElement[] _bindingElementArray, 
        int _arrayIndex = 0)
    {
        switch (_encoderType)
        {
            case EFDocEncoderType::CustomEncorder:
                CustomEncoder.CustomTextMessageBindingElement customTextMessageEncoder = new CustomEncoder.CustomTextMessageBindingElement('utf-8', 'application/soap+xml', _messageVersion);
                _bindingElementArray.SetValue(customTextMessageEncoder, _arrayIndex);
                break;
            
            case EFDocEncoderType::TextEncorder:
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textMessageEncodingBinding = new System.ServiceModel.Channels.TextMessageEncodingBindingElement(_messageVersion, System.Text.Encoding::get_UTF8());
                _bindingElementArray.SetValue(textMessageEncodingBinding, _arrayIndex);
                break;

            default:
                break;
        }

        return _bindingElementArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageVersionFromEFDocSoapVersion</Name>
				<Source><![CDATA[
    private System.ServiceModel.Channels.MessageVersion getMessageVersionFromEFDocSoapVersion()
    {
        System.ServiceModel.Channels.MessageVersion messageVersion;

        switch (this.soapVersion)
        {
            case EFDocSoapVersion::Soap11:
                messageVersion = System.ServiceModel.Channels.MessageVersion::get_Soap11();
                break;

            default:
                messageVersion = System.ServiceModel.Channels.MessageVersion::get_Soap12();
        }

        return messageVersion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>