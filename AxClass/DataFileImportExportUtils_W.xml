<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DataFileImportExportUtils_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains utility methods for data file import export.
/// </summary>
class DataFileImportExportUtils_W
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getUnzippedFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extract files from zip file and upload.
    /// </summary>
    /// <param name = "_uploadFileURL">DownLoad of the zip file.</param>
    /// <param name = "_fileSuffixes>List of file suffixes which serves as filter.</param>
    /// <param name="_fileUploadStrategyClassName">The name of the class strategy to upload the file to storage.</param>
    /// <returns>List of file IDs of the unzipped files which meet filter in file suffix list; returns all files if the filter is empty.</returns>
    public static List getUnzippedFiles(SharedServiceUnitURL _uploadFileURL, container _fileSuffixes, ClassName _fileUploadStrategyClassName = classStr(FileUploadTemporaryStorageStrategy))
    {
        #File

        System.IO.Compression.ZipArchive zipArchive =
            new System.IO.Compression.ZipArchive(File::UseFileFromURL(_uploadFileURL), System.IO.Compression.ZipArchiveMode::Read);

        CLRObject archiveEntries =  zipArchive.get_Entries();
        int length = archiveEntries.get_Count();

        List uploadUrlList = new List(types::Container);
        container consUnzippedFile;
        int i;

        for (i = 0; i < length; i++)
        {
            System.IO.Compression.ZipArchiveEntry item = archiveEntries.get_Item(i);
            List fileNameComponents = strSplit(item.Name, #FileExtensionDelimiter);
            ListIterator iterator = new ListIterator(fileNameComponents);
            str fileSuffix;
            while (iterator.more())
            {
                fileSuffix = iterator.value();
                iterator.next();
            }

            if (conLen(_fileSuffixes) == 0 || conFind(_fileSuffixes, fileSuffix) > 0)
            {
                using(System.IO.MemoryStream stream = new System.IO.MemoryStream())
                {
                    item.Open().CopyTo(stream);
                    str fileID = DataFileImportExportUtils_W::sendFileToTempStore(stream, item.Name, _fileUploadStrategyClassName).getFileId();
                    consUnzippedFile = [fileID, item.Name];
                    uploadUrlList.addEnd(consUnzippedFile);
                }
            }
        }

        return uploadUrlList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFileToTempStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uploads a file and returns the file upload result.
    /// </summary>
    /// <param name="stream">
    /// The stream of the file.
    /// </param>
    /// <param name="fileName">
    /// The file name of the stream.
    /// </param>
    /// <param name="fileUploadStrategyClassName">
    /// The name of the class strategy to upload the file to storage.
    /// </param>
    /// <param name="_downloadOnly">
    ///     A boolean value indicating whether the file should be downloaded only; defaults to false.
    /// </param>
    /// <returns>
    /// File upload result.
    /// </returns>
    public static FileUploadTemporaryStorageResult sendFileToTempStore(System.IO.Stream stream, str fileName, classname fileUploadStrategyClassName = classstr(FileUploadTemporaryStorageStrategy), boolean _downloadOnly = false)
    {
        SysDictClass uploadStrategyDicClass;
        FileUploadTemporaryStorageStrategy fileUploadStrategy;
        FileUploadTemporaryStorageResult fileUploadResult;
        str downloadUrl = "";

        try
        {
            uploadStrategyDicClass = new SysDictClass(className2Id(fileUploadStrategyClassName));
            fileUploadStrategy = uploadStrategyDicClass.makeObject() as FileUploadTemporaryStorageStrategy;

            if (fileUploadStrategy == null)
            {
                warning("@ApplicationPlatform:FileUploadFailedInStrategy");
                throw Exception::Error;
            }

            if (stream == null)
            {
                throw error(Error::missingParameter(null));
            }

            fileUploadResult = fileUploadStrategy.uploadFile(stream, fileName);

            if (fileUploadResult == null || !fileUploadResult.getUploadStatus())
            {
                warning("@ApplicationPlatform:FileUploadFailed");
            }
            else
            {
                downloadUrl = fileUploadResult.getDownloadUrl(_downloadOnly);
                if (downloadUrl == "")
                {
                    throw Exception::Error;
                }
            }
        }
        catch(Exception::Error)
        {
            warning("@ApplicationPlatform:FileUploadFailed");
        }
        return fileUploadResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importDataFromFileToAX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import data from file to AX for specified entity.
    /// </summary>
    /// <param name = "_fileID">The shared service unit file id</param>
    /// <param name = "_definitionGroupName">The name of definition group which will be used for this import.</param>
    /// <param name = "_entityName">Entity name.</param>
    /// <param name = "_firstRowHeader">If the first row is header.</param>
    public static void importDataFromFileToAX(
        SharedServiceUnitFileID _fileID,
        DMFDefinitionGroupName _definitionGroupName,
        str _entityName,
        boolean _firstRowHeader = NoYes::Yes)
    {
        DMFDefinitionGroupEntity definitionGroupEntity;

        DMFEntity dmfEntity;

        select firstonly RecId, Entity from definitionGroupEntity exists join dmfEntity
            where definitionGroupEntity.DefinitionGroup == _definitionGroupName &&
                dmfEntity.EntityName == definitionGroupEntity.Entity &&
                dmfEntity.TargetEntity == _entityName;

        if (!definitionGroupEntity.RecId)
        {
            throw error(strFmt("@DMF:DMFNoEntityExists", _definitionGroupName));
        }

        DMFExecutionId executionId = DMFUtil::setupNewExecution(_definitionGroupName);

        // Find execution
        DMFDefinitionGroupExecution execution =
            DMFDefinitionGroupExecution::find(
                _definitionGroupName, definitionGroupEntity.Entity, executionId, true);
        execution.FilePath = _fileID;
        execution.FileFirstRowHeader = _firstRowHeader;
        execution.update();

        DMFQuickImportExport::doPGImport(_definitionGroupName, executionId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpDefinitionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides lookup to DIXF definition group.
    /// </summary>
    /// <param name = "_formControl">Form control with the lookup.</param>
    /// <param name = "_entityName">Entity name.</param>
    public static void lookUpDefinitionGroup(FormStringControl _formControl, str _entityName)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(DMFDefinitionGroup), _formControl);
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(DMFDefinitionGroup));

        QueryBuildDataSource qbds = queryBuildDataSource.addDataSource(tableNum(DMFDefinitionGroupEntity));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.relations(false);
        qbds.addLink(fieldNum(DMFDefinitionGroup, DefinitionGroupName), fieldnum(DMFDefinitionGroupEntity, DefinitionGroup));

        qbds = qbds.addDataSource(tableNum(DMFEntity));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.relations(false);

        qbds.addRange(fieldNum(DMFEntity, TargetEntity)).value(_entityName);
        qbds.addLink(fieldNum(DMFDefinitionGroupEntity, Entity), fieldnum(DMFEntity, EntityName));

        sysTableLookup.addLookupfield(fieldNum(DMFDefinitionGroup, DefinitionGroupName));
        sysTableLookup.addLookupfield(fieldNum(DMFDefinitionGroup, Description));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>