<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_SL_Percent_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class AssetTableMethod_SL_Percent_PL extends AssetTableMethod
{
    private AssetAmount periodAmount;
    private AssetAmount periodAmountNotCost;
    private AssetRevaluationAmount revaluationAmount;
    private boolean theEnd;
    private AssetTransDate previousDepreciationDate;
    private AssetAmount extraordinaryDepAmount;

    private AssetAmount periodAmountCost;
    private AssetAmount tmpAmountToDepreciate;
    private AssetAmount tmpPrevDepAmount;
    private AssetAmount tmpPrevDepAmountCost;
    private TransDate depStartDate;
    private real costFactorSaved;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountToDepreciate_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the amount for depreciation of the given value model.
    /// </summary>
    /// <returns>
    ///     The amount for depreciation of the given value model.
    ///     For Polish Straight Line Percentage method, the previous year deprecation is not included
    ///     for the amount to depreciate.
    /// </returns>
    public AssetAmount amountToDepreciate_PL()
    {
        return amountToDepreciate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount to depreciate for Straight Line Percent Poland for the given interval.
    /// </summary>
    /// <returns>
    /// The amount to depreciate.
    /// </returns>
    public AssetAmount calc()
    {
        AmountMST                   periodAmountTmp;
        AssetDepreciationPercentage factor;

        AssetAmount                 prvDepreciationAmountCost;
        boolean                     adjustLast = false;
        AssetAmount                 deprPrevPeriods = this.getAmountInCurrency(assetBook.DeprPrevPeriods_PL);
        AssetAmount                 deprPrevPeriodsNonCost = this.getAmountInCurrency(assetBook.DeprPrevPeriodsNonCost_PL);
        boolean                     costPart = deprPrevPeriods || deprPrevPeriodsNonCost;
        AssetAmount                 deprPrevCostAmount = costPart ? (deprPrevPeriods - deprPrevPeriodsNonCost) : 0;
        AssetAmount                 periodAmountOrginal;
        AssetAmount                 yearDepreciation;
        TransDate                   previousPeriodEndDate = deprInterval.startOfPeriod(periodEnd) - 1;

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();

            prvDepreciationAmountCost = this.prvDepreciationAmountCost_PL();

            this.setAmountToDepreciate(this.oneTimeDepreciation_PL() ? periodEnd : previousPeriodEndDate);

            if (isReportingCurrencyDepreciation)
            {
                extraordinaryDepAmount = - AssetTrans::amountReportingCurrencyPerDateTranstype(
                    assetBook.AssetId,
                    periodEnd,
                    assetBook.BookId,
                    AssetTransType::ExtraordinaryDepreciation);
            }
            else
            {
                extraordinaryDepAmount = - AssetTrans::amountMSTPerDateTranstype(
                    assetBook.AssetId,
                    periodEnd,
                    assetBook.BookId,
                    AssetTransType::ExtraordinaryDepreciation);
            }

            AssetDepreciationRate_W assetRate = AssetDepreciationGroup_W::findRate(assetBook.DepreciationGroupId_W, this.depDate());
            AssetAmount costLimit = this.getAmountInCurrency(assetRate.CostLimit_PL);

            if ((amountToDepreciate > prevDepAmount + prevDepAmountNotCost_PL + prevDepAmountExternal + extraordinaryDepAmount))
            {
                container yearTransTypesCon =  [AssetTransType::DepThisYear, AssetTransType::DepPriorYears, AssetTransType::AccDepreciationPriorYears_PL, AssetTransType::AccDepreciationThisYear_PL];
                
                if (isReportingCurrencyDepreciation)
                {
                    yearDepreciation = AssetTrans::amountReportingCurrencyPerDateTransTypes(
                        assetBook.AssetId,
                        assetBook.BookId,
                        yearTransTypesCon,
                        deprInterval.startOfPeriod(depStartDate),
                        this.oneTimeDepreciation_PL() ? periodEnd : previousPeriodEndDate);
                }
                else
                {
                    yearDepreciation = AssetTrans::amountMSTPerDateTransTypes(
                        assetBook.AssetId,
                        assetBook.BookId,
                        yearTransTypesCon,
                        deprInterval.startOfPeriod(depStartDate),
                        this.oneTimeDepreciation_PL() ? periodEnd : previousPeriodEndDate);
                }

                periodAmountOrginal = assetBook.roundDepreciationAmount(((amountToDepreciate - yearDepreciation) * this.percentage() / 100) /
                                                                        deprInterval.assetDepreciationTime(depreciationDate), isReportingCurrencyDepreciation);
                periodAmount = periodAmountOrginal;

                if (periodAmount > 0)
                {
                    theEnd = false;
                }

                if (costLimit)
                {
                    if (!costFactorSaved)
                    {
                        if (amountToDepreciate - deprPrevPeriods)
                        {
                            costFactorSaved = (costLimit - deprPrevCostAmount) / (amountToDepreciate - deprPrevPeriods);
                        }
                    }
                    if (tmpAmountToDepreciate != amountToDepreciate)
                    {
                        if (tmpAmountToDepreciate)
                        {
                            if (amountToDepreciate - prevDepAmount - prevDepAmountNotCost_PL - prevDepAmountExternal - extraordinaryDepAmount)
                            {
                                costFactorSaved = (costLimit - prevDepAmountCost_PL - prvDepreciationAmountCost - deprPrevCostAmount)
                                               / (amountToDepreciate - prevDepAmount - prevDepAmountNotCost_PL - prevDepAmountExternal - extraordinaryDepAmount);
                            }
                        }
                        tmpAmountToDepreciate = amountToDepreciate;
                    }

                    periodAmountCost = assetBook.roundDepreciationAmount(periodAmountOrginal * costFactorSaved, isReportingCurrencyDepreciation);

                    if (periodAmountCost < 0)
                    {
                        periodAmountCost = 0;
                    }

                    periodAmountNotCost = periodAmount - periodAmountCost;

                    if (periodAmountNotCost < 0)
                    {
                        periodAmountNotCost = 0;
                    }
                    periodAmount -= periodAmountNotCost;

                    if (assetBook.AcquisitionPrice)
                    {
                        periodAmountTmp = (prevDepAmount - initDepreciationAmount_PL + periodAmount) +
                                      assetBook.roundDepreciationAmount(deprPrevPeriods * (costLimit/assetBook.AcquisitionPrice), isReportingCurrencyDepreciation) -
                                      this.getDepreciationAmount() - costLimit;
                    }

                    if (periodAmountTmp > 0)
                    {
                        periodAmountTmp = assetBook.roundDepreciationAmount(periodAmountTmp, isReportingCurrencyDepreciation);
                        periodAmount -= periodAmountTmp;
                        periodAmountNotCost += periodAmountTmp;
                    }
                }
            }
            else
            {
                periodAmount        = 0;
                periodAmountNotCost = 0;
                if (! dualDepreciation)
                {
                    theEnd = true;
                }
            }

            // If the straight method is used as an alternative method, a user is able to specify the multiplication factor that
            // needs to be used for the primary and alternative depreciation method.
            // Additionally, factor cannot be used with the non-cost functionality.
            if (!costLimit)
            {
                if (useFactor_PL)
                {
                    factor = assetRate.FactorAlt ? assetRate.FactorAlt : 1;
                }
                else
                {
                    factor = assetRate.Factor ? assetRate.Factor : 1;
                }

                periodAmount = assetBook.roundDepreciationAmount(periodAmount * factor, isReportingCurrencyDepreciation);
            }

            revaluationAmount = assetBook.roundDepreciationAmount(periodAmount * this.revaluationFactor(), isReportingCurrencyDepreciation) - periodAmount;
            periodAmount += revaluationAmount;

            periodEnd++;

            periodstart = periodEnd;
            periodEnd   = deprInterval.endPeriod(periodstart);

            previousDepreciationDate = depreciationDate;

            if (amountToDepreciate < prevDepAmount + prevDepAmountNotCost_PL + prevDepAmountExternal + extraordinaryDepAmount + periodAmount + periodAmountNotCost)
            {
                periodAmount = amountToDepreciate - (prevDepAmount + prevDepAmountNotCost_PL + prevDepAmountExternal + extraordinaryDepAmount);

                if (costLimit)
                {
                    periodAmountCost = costLimit - prevDepAmountCost_PL - prvDepreciationAmountCost - (deprPrevPeriods - deprPrevPeriodsNonCost);

                    if (periodAmountCost < 0)
                    {
                        periodAmountCost = 0;
                    }

                    periodAmountNotCost = periodAmount - periodAmountCost;

                    if (periodAmountNotCost < 0)
                    {
                        periodAmountNotCost = 0;
                    }
                    periodAmount -= periodAmountNotCost;

                    if (assetBook.AcquisitionPrice)
                    {
                        periodAmountTmp = (prevDepAmount - initDepreciationAmount_PL + periodAmount) +
                                      assetBook.roundDepreciationAmount((deprPrevPeriods - deprPrevPeriodsNonCost) * (costLimit/assetBook.AcquisitionPrice), isReportingCurrencyDepreciation) -
                                      this.getDepreciationAmount() - costLimit;
                    }

                    if (periodAmountTmp > 0)
                    {
                        periodAmountTmp = assetBook.roundDepreciationAmount(periodAmountTmp, isReportingCurrencyDepreciation);
                        periodAmount -= periodAmountTmp;
                        periodAmountNotCost += periodAmountTmp;
                    }
                }
            }

            periodAmount        = assetBook.roundDepreciationAmount(periodAmount, isReportingCurrencyDepreciation);
            periodAmountNotCost = assetBook.roundDepreciationAmount(periodAmountNotCost, isReportingCurrencyDepreciation);

            prevDepAmount           += periodAmount;
            prevDepAmountNotCost_PL += periodAmountNotCost;

            prevDepAmountCost_PL    += periodAmountCost;

            if (amountToDepreciate <= prevDepAmount + prevDepAmountNotCost_PL + prevDepAmountExternal + extraordinaryDepAmount)
            {
                theEnd = true;

                if (costLimit)
                {
                    adjustLast = (prevDepAmountCost_PL + deprPrevCostAmount) != costLimit;

                    if (adjustLast)
                    {
                        periodAmountCost    = costLimit - prevDepAmountCost_PL - prvDepreciationAmountCost + periodAmountCost - deprPrevCostAmount;
                        periodAmount       += periodAmountNotCost;
                        periodAmountNotCost = periodAmount - periodAmountCost;

                        if (periodAmountNotCost < 0)
                        {
                            periodAmountNotCost = 0;
                        }

                        periodAmount -= periodAmountNotCost;
                    }
                }
            }
            else
            {
                theEnd = false;
            }
        }
        else
        {
            periodAmount = 0;
        }

        return periodAmount + periodAmountNotCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationAmount</Name>
				<Source><![CDATA[
    private AssetAmount getDepreciationAmount()
    {
        AssetAmount depreciationAmount;

        if (isReportingCurrencyDepreciation)
        {
            depreciationAmount = AssetTrans::amountReportingCurrencyPerDateTransType(
                assetBook.AssetId,
                maxDate(),
                assetBook.BookId,
                AssetTransType::Depreciation);
        }
        else
        {
            depreciationAmount = AssetTrans::amountMSTPerDateTransType(
                assetBook.AssetId,
                maxDate(),
                assetBook.BookId,
                AssetTransType::Depreciation);
        }

        return depreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if (this.oneTimeDepreciation_PL())
        {
            periodEnd        = max(endmth(periodstart),
                                   endmth(AssetTrans::lastTransDate_PL(assetBook.AssetId, assetBook.BookId)));
            depreciationDate = periodEnd;
        }

        depStartDate = depreciationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToDepriciateByTransDate</Name>
				<Source><![CDATA[
    private AssetAmount amountToDepriciateByTransDate(TransDate _transDate)
    {
        AssetAmount amountToDepriciate;

        if (isReportingCurrencyDepreciation)
        {
            AssetTrans::amountToDepriciateInReportingCurrency(assetBook.AssetId, _transDate, assetBook.BookId);
        }
        else
        {
            AssetTrans::amountToDepriciate(assetBook.AssetId, _transDate, assetBook.BookId);
        }

        return amountToDepriciate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
        if (this.amountToDepriciateByTransDate(maxDate()) -
            this.amountToDepriciateByTransDate( depreciationDate ? prevMth(depreciationDate): depreciationDate) > 0
            && !this.oneTimeDepreciation_PL())
        {
            theEnd = false;
        }

        if (theEnd)
        {
            return false;
        }

        if (parmRunDate <= baseDate)
        {
            return false;
        }

        this.setDepDate();

    //
    //  This prevents depreciations with invalid dates from
    //  being handled.
    //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>oneTimeDepreciation_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the given value model is used as one time depreciation.
    /// </summary>
    /// <returns>
    ///     Returns true if the conditions for one time depreciation are met, otherwise false.
    /// </returns>
    public boolean oneTimeDepreciation_PL()
    {
        return deprInterval.assetDepreciationTime(periodEnd) == 1 &&
               this.percentage() == 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodAmountCost_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the taxable amount of the depreciation.
    /// </summary>
    /// <returns>
    ///     The taxable amount of the depreciation.
    /// </returns>
    public AssetAmount periodAmountCost_PL()
    {
        return periodAmountCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodAmountNotCost_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the non-taxable amount of the depreciation.
    /// </summary>
    /// <returns>
    ///     The non-taxable amount of the depreciation.
    /// </returns>
    public AssetAmount periodAmountNotCost_PL()
    {
        return periodAmountNotCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmountCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the taxable amount of the depreciation until the end of the prior year.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The transaction date for which prior year will be determined.
    /// </param>
    /// <param name="_useDate">
    /// If this option is used, the end date will be set to the specified transaction date.
    /// </param>
    /// <returns>
    /// The taxable amount of the depreciation.
    /// </returns>
    public AssetAmount prvDepreciationAmountCost(AssetTransDate _assetTransDate, boolean _useDate = false)
    {
        AssetTransDate  depYearStart;
        RecId           calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        if (!_useDate)
        {
            if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
            {
                depYearStart = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate);
            }
            else
            {
                depYearStart = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, _assetTransDate);
            }
        }
        else
        {
            depYearStart = _assetTransDate + 1;
        }

        return this.prvDepreciationAmountCostByTransDate(depYearStart - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmountCostByTransDate</Name>
				<Source><![CDATA[
    private AssetAmount prvDepreciationAmountCostByTransDate(TransDate _transDate)
    {
        AssetAmount ret;
        container depreciationTypesCon = [
            AssetTransType::Depreciation,
            AssetTransType::DepreciationAdj,
            AssetTransType::DepPriorYears,
            AssetTransType::DepThisYear,
            AssetTransType::AccDepreciationPriorYears_PL,
            AssetTransType::AccDepreciationThisYear_PL];

        if (isReportingCurrencyDepreciation)
        {
            ret = -AssetTrans::amountReportingCurrencyPerDateTransTypes(
                assetBook.AssetId,
                assetBook.BookId,
                depreciationTypesCon,
                dateNull(),
                _transDate);
        }
        else
        {
            ret = -AssetTrans::amountMSTPerDateTransTypes(
                assetBook.AssetId,
                assetBook.BookId,
                depreciationTypesCon,
                dateNull(),
                _transDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmountCost_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the taxable amount of the depreciation until the last depreciation.
    /// </summary>
    /// <returns>
    ///     The taxable amount of the depreciation.
    /// </returns>
    public AssetAmount prvDepreciationAmountCost_PL()
    {
        return this.prvDepreciationAmountCostByTransDate(assetBook.LastDepreciationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the revaluation amount of the given value model.
    /// </summary>
    /// <returns>
    ///     The revaluation amount of the given value model.
    /// </returns>
    public AssetRevaluationAmount revaluationAmount()
    {
        return revaluationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountToDepreciate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the <c>setAmountToDepreciate</c> method to eliminate the sale/scrap amounts for the current periods,
    /// as the sale/scrap amounts need to affect depreciation calculations in the next period.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The date of the asset transaction.
    /// </param>
    protected void setAmountToDepreciate(AssetTransDate _assetTransDate = periodEnd)
    {
        super(_assetTransDate);

        if (isReportingCurrencyDepreciation)
        {
            amountToDepreciate -= AssetTrans::getSalesScrapValueReportingCurrency(assetBook.AssetId, assetBook.BookId, deprInterval.startOfPeriod(depStartDate), _assetTransDate);
        }
        else
        {
            amountToDepreciate -= AssetTrans::getSalesScrapValue(assetBook.AssetId, assetBook.BookId, deprInterval.startOfPeriod(depStartDate), _assetTransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepDate</Name>
				<Source><![CDATA[
    public void setDepDate()
    {
        super();

        if (this.oneTimeDepreciation_PL())
        {
            depreciationDate = max(endmth(periodstart),
                                   endmth(AssetTrans::lastTransDate_PL(assetBook.AssetId, assetBook.BookId)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>