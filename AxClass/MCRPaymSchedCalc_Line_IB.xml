<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPaymSchedCalc_Line_IB</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRPaymSchedCalc_Line_IB</c> creates payment
/// schedules lines for installment billing.
/// </summary>
class MCRPaymSchedCalc_Line_IB extends PaymSchedCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPaymSchedTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks that the total amount of the payment schedule match the total amount of
    ///     the invoice.
    /// </summary>
    private void checkPaymSchedTotalAmount()
    {
        PaymSchedLine   paymSchedLineLocal;

        select sum(value) from paymSchedLineLocal
            where paymSchedLineLocal.name == paymSched.name;
        if (invoiceAmount != paymSchedLineLocal.Value )
        {
            throw error(strfmt("@SYS93433", paymSchedLineLocal.Value, invoiceAmount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a payment transaction for the installment billing payment.
    /// </summary>
    /// <param name="_custVendPaymentSchedLine">
    /// The buffer used to create the transaction.
    /// </param>
    public void createTransaction(CustVendPaymentSchedLine _custVendPaymentSchedLine)
    {
        Boolean                         first = true;
        boolean                         notChecked = true;
        AmountCur                       amountCur;
        AmountCur                       dueAmount;
        CustVendPaymentSchedLine        newCustVendPaymSchedLine;
        CustPaymSchedLine               custPaymSchedLineLocal;
        CashDiscAmount                  appliedCashDiscAmount;

        CustPaymSchedLine     custPaymSchedLine_MaxLineNum;

        newCustVendPaymSchedLine  = _custVendPaymentSchedLine.data();

        amountCur                 = invoiceAmount;
        paymentAmountCur          = invoiceAmount;

        if (custVendPaymSched.TaxDistribution != PaymSchedTaxDistribution::Proportional)
        {
            paymentAmountCur = paymentAmountCur - invoiceTaxAmount;
        }

        if (custVendPaymSched.MCRMiscChargeDist != MCRPaymSchedMiscChargeDist::Proportional)
        {
            paymentAmountCur = paymentAmountCur - invoiceMarkUpAmount;
        }

        ttsBegin;

        CustVendPaymSched::deletePaymSchedLines(custVendPaymSched, custVendPaymSchedLine);

        if (installmentPlanInvoice)
        {
            select firstOnly DueDate from custPaymSchedLineLocal
                where custPaymSchedLineLocal.ParentRecID == custPaymSchedLineLocal.RecId;
        }
        else
        {
            this.setDueDate();
        }

        while select paymSchedLine
            order by qty
            where paymSchedLine.name == paymSched.name
        {
            newCustVendPaymSchedLine.initFromPaymSchedLine(paymSchedLine);
            newCustVendPaymSchedLine.parentRecID    = custVendPaymSched.RecId;
            newCustVendPaymSchedLine.dueDate        = dueDate;
            newCustVendPaymSchedLine.discDate       = cashDiscDate;

            switch (paymSchedLine.percentAmount)
            {
                case PercentAmount::Percent:
                    dueAmount  = CurrencyExchangeHelper::amount(paymentAmountCur * paymSchedLine.value / 100, currencyCode);
                    if (first)
                    {
                        if (custVendPaymSched.TaxDistribution == PaymSchedTaxDistribution::FirstRate)
                        {
                            dueAmount = dueAmount + invoiceTaxAmount;
                        }

                        if (custVendPaymSched.MCRMiscChargeDist == MCRPaymSchedMiscChargeDist::FirstRate)
                        {
                            dueAmount = dueAmount + invoiceMarkUpAmount;
                        }
                        first = false;
                    }
                    dueAmount = CurrencyExchangeHelper::amount(dueAmount, currencyCode);

                    // Check the currency round off that is set for sales and round the amounts before
                    // inserting it to the table.
                    newCustVendPaymSchedLine.dueAmount = CurrencyExchange::roundWithRuleType(dueAmount, currencyCode, CurrencyRoundingRuleType::SalesOrder);
                    newCustVendPaymSchedLine.discAmount     = CurrencyExchangeHelper::amount(cashDiscAmount * paymSchedLine.value / 100, currencyCode);

                    appliedCashDiscAmount += newCustVendPaymSchedLine.discAmount;

                    break;
                case PercentAmount::Amount:
                    if (notChecked)
                    {
                        this.checkPaymSchedTotalAmount();
                        notChecked = false;
                    }
                    newCustVendPaymSchedLine.dueAmount      = paymSchedLine.value * (invoiceAmount < 0 ? -1: 1);
                    newCustVendPaymSchedLine.discAmount     = 0;
                    break;

                default:
                    throw error(strFmt("@SYS23951", paymSched.name, invoiceId));
            }

            amountCur -= newCustVendPaymSchedLine.dueAmount;

            if (abs(amountCur) <= paymSched.lowestAmount)
            {
                newCustVendPaymSchedLine.dueAmount += amountCur;
                amountCur = 0;
            }

            if (installmentPlanInvoice)
            {
                newCustVendPaymSchedLine.dueDate = custPaymSchedLineLocal.DueDate;
            }
            else
            {
                newCustVendPaymSchedLine.dueDate = this.nextDueDate();
            }

            newCustVendPaymSchedLine.discDate = this.nextDiscDate(newCustVendPaymSchedLine.dueDate);

            select maxof(linenum) from custPaymSchedLine_MaxLineNum
                where custPaymSchedLine_MaxLineNum.ParentRecID == custVendPaymSched.RecId;

            newCustVendPaymSchedLine.LineNum = custPaymSchedLine_MaxLineNum.LineNum + 1;

            newCustVendPaymSchedLine.insert();

            if (installmentPlanInvoice)
            {
                next custPaymSchedLineLocal;
            }
        }

        // At this point the system is on the last record
        if (newCustVendPaymSchedLine)
        {
            if (custVendPaymSched.TaxDistribution  == PaymSchedTaxDistribution::LastRate  ||
               custVendPaymSched.MCRMiscChargeDist == MCRPaymSchedMiscChargeDist::LastRate ||
               appliedCashDiscAmount != cashDiscAmount)
            {
                if (abs(amountCur) <= paymSched.lowestAmount || appliedCashDiscAmount != cashDiscAmount)
                {
                    newCustVendPaymSchedLine.DiscAmount += (cashDiscAmount - appliedCashDiscAmount);
                    newCustVendPaymSchedLine.dueAmount += amountCur;
                    newCustVendPaymSchedLine.update();
                    amountCur = 0;
                }
            }
        }

        if (!newCustVendPaymSchedLine)
        {
            throw error(strFmt("@SYS28948", custVendPaymSched.paymBy));
        }

        if (amountCur)
        {
            this.remainAmountCur(newCustVendPaymSchedLine, amountCur);
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the due date for the next installment line.
    /// </summary>
    /// <returns>
    ///     The due date for the next installment line.
    /// </returns>
    TransDate nextDueDate()
    {
        futures = Futures::construct(dueDate,
                              paymSchedLine.qty,
                              paymSched.periodUnit);

        return futures.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the last schedule line for any amount that has not been
    ///     allocated to the previous installments.
    /// </summary>
    /// <param name="_custVendPaymentSchedLine">
    ///     The <c>CustVendPaymentSchedLine</c> to be updated.
    /// </param>
    /// <param name="amountCur">
    ///     The amount to be updated.
    /// </param>
    public void remainAmountCur(CustVendPaymentSchedLine   _custVendPaymentSchedLine,
                         AmountCur                  amountCur)
    {
        _custVendPaymentSchedLine.dueAmount += amountCur;
        _custVendPaymentSchedLine.discAmount = invoiceAmount > 0 ?
            min(_custVendPaymentSchedLine.dueAmount, _custVendPaymentSchedLine.discAmount):
            max(_custVendPaymentSchedLine.dueAmount, _custVendPaymentSchedLine.discAmount);
        _custVendPaymentSchedLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the payment amount based on the invoice amount.
    /// </summary>
    public void setAmount()
    {
        paymentAmountCur = invoiceAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
