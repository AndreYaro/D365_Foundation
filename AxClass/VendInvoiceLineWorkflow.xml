<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceLineWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceLineWorkflow extends VendInvoiceWorkflow implements IValidateWorkflowWorkItemAction
{
    VendInvoiceInfoLine vendInvoiceInfoLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the Vendor Invoice Info Line record.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    /// The VendInvoiceInfoLine record to set.
    /// </param>
    /// <returns>
    /// The current VendInvoiceInfoLine record.
    /// </returns>
    public VendInvoiceInfoLine parmVendInvoiceInfoLine(VendInvoiceInfoLine _vendInvoiceInfoLine = vendInvoiceInfoLine)
    {
        vendInvoiceInfoLine = _vendInvoiceInfoLine;
        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reactivates vendor invoice header workflow.
    /// </summary>
    /// <remarks>
    /// This method continues the workflow by calling the <c>dispatchWorkItemAction</c> method on the
    /// <c>WorkflowWorkItemActionManager</c> class that has information about the current work item.
    /// </remarks>
    public void reSubmit()
    {
        WorkflowWorkItemActionDialog workflowWorkItemActionDialog;
        WorkflowWorkItemTable workItem = args.caller().getActiveWorkflowWorkItem();

        if (workItem.RecId)
        {
            vendInvoiceInfoLine.checkBudgetReservationBalance();

            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(workItem,
                                                                                    WorkflowWorkItemActionType::Resubmit,
                                                                                    new MenuFunction(args.menuItemName(),
                                                                                    args.menuItemType()));

            if (this.actionDialog(workflowWorkItemActionDialog))
            {
                WorkflowWorkItemActionManager::dispatchWorkItemAction(workItem,
                                                                        workflowWorkItemActionDialog.parmWorkflowComment(),
                                                                        workflowWorkItemActionDialog.parmTargetUser(),
                                                                        WorkflowWorkItemActionType::Resubmit,
                                                                        args.menuItemName());
            }

            VendInvoiceInfoLine::setRequestStatus(vendInvoiceInfoLine.RecId, VendInvoiceRequestStatus::InReview);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates vendor invoice line workflow.
    /// </summary>
    /// <remarks>
    /// This method starts the workflow configuration by calling the <c>activateFromWorkflowType</c> method
    /// on the <c>Workflow</c> class that has information about the vendor invoice line record.
    /// </remarks>
    public void submit()
    {
        WorkflowSubmitDialog workflowSubmitDialog;

        // If the caller context is EP, this will be null.
        if (args && args.caller())
        {
            vendInvoiceInfoLine.checkBudgetReservationBalance();

            workflowSubmitDialog = WorkflowSubmitDialog::construct(args.caller().getActiveWorkflowConfiguration());

            if (this.submitDialog(workflowSubmitDialog))
            {
                this.submitToWorkflow(workFlowTypeStr(VendProcessInvoiceLine), vendInvoiceInfoLine.RecId, workflowSubmitDialog.parmWorkflowComment());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a budget check for the invoice when the workflow dialog run event occurs.
    /// </summary>
    protected void preWorkflowDialogRun()
    {
        super();

        if (Ledger::isLedgerBudgetControlEnabled())
        {
            // Submit to source document processor to perform GL budget check before confirming the comment dialog.
            SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(vendInvoiceInfoLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the vendor invoice line workflow.
    /// </summary>
    /// <param name="_workflowTypeName">
    /// The AOT name of the workflow type to which the vendor invoice line will be submitted.
    /// </param>
    /// <param name="_workflowRecId">
    /// The vendor invoice line record to which to submit.
    /// </param>
    /// <param name="_workflowComment">
    /// A submission comment.
    /// </param>
    /// <remarks>
    /// This method starts the workflow configuration by calling the <c>ActivateWorkflowTemplate</c> method
    /// on the <c>Workflow</c> class that has information about the vendor invoice line record.
    /// </remarks>
    private void submitToWorkflow(workflowTypeName _workflowTypeName,
                                    recId _workflowRecId,
                                    WorkflowComment _workflowComment)
    {
        ttsbegin;

        Workflow::activateFromWorkflowType(_workflowTypeName,
                                           _workflowRecId,
                                           _workflowComment,
                                           false,
                                           curUserId());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendInvoiceWorkflow construct()
    {
        return new VendInvoiceLineWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Submits a vendor invoice line document and starts corresponding workflow.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> value from the caller.
    /// </param>
    public static void main(Args _args)
    {
        VendInvoiceLineWorkflow vendInvoiceLineWorkflow;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        str callerMenuItem;
        FormRun caller;
        WorkflowWorkItemTable workItem;

        if (_args)
        {
            callerMenuItem = _args.menuItemName();
            caller = _args.caller();
        }
        else
        {
            throw error("@SYS25407");
        }

        if (callerMenuItem == menuitemActionStr(VendInvoiceLineApprovalApprove))
        {
            workItem = caller.getActiveWorkflowWorkItem();
            vendInvoiceInfoLine = workItem.getRecord();
        }
        else
        {
            vendInvoiceLineWorkflow = VendInvoiceWorkflow::newVendInvoiceWorkflow(_args);
            vendInvoiceInfoLine = _args.record();

            vendInvoiceLineWorkflow.parmVendInvoiceInfoLine(vendInvoiceInfoLine);
        }

        switch (callerMenuItem)
        {
            case menuitemActionStr(VendInvoiceLineWorkflowSubmit):
                vendInvoiceLineWorkflow.submit();
                break;
            case menuitemActionStr(VendInvoiceLineWorkflowReSubmit):
                vendInvoiceLineWorkflow.reSubmit();
                break;
            case menuitemActionStr(VendInvoiceLineApprovalApprove):
                vendInvoiceInfoLine.checkBudgetReservationBalance();

                VendInvoiceInfoTable vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable(true);
                
                if (!FeatureStateProvider::isFeatureEnabled(VendInvoicePostingDateAutoAdjustmentFeature::instance()))
                {
                    vendInvoiceInfoTable.updatePostingDate();
                }

                VendInvoiceLineWorkflowWorkItemActionManager::main(_args);
                break;
            default:
                throw(error(strFmt("@SYS23264", funcName())));
        }

        if (caller)
        {
            caller.updateWorkFlowControls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the workflow document prior to approval.
    /// </summary>
    /// <param name = "_context">
    /// An instance of WorkflowWorkItemActionValidationContext containing data used for validation of workflow item.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise; false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// When context is not provided or the work item reference table id is invalid.
    /// </exception>
    public boolean validate(WorkflowWorkItemActionValidationContext _context)
    {
        WorkflowWorkItemTable workItem;

        if(!_context)
        {
            throw error("@AccountsPayable:ValidationContextNotProvided");
        }

        workItem = _context.parmWorkItem();

        switch (workItem.RefTableId)
        {
            case tableNum(VendInvoiceInfoLine):
                this.vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(workItem.RefRecId);
                break;

            default:
                throw error(strFmt("@AccountsPayable:InvalidRefTableId", workItem.RefTableId, tableStr(VendInvoiceInfoLine), tableNum(VendInvoiceInfoLine)));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>