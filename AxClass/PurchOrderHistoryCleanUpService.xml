<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchOrderHistoryCleanUpService</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchOrderHistoryCleanUpService extends SysOperationServiceController
{
    private TransDate cleanUpDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCleanUpDate</Name>
				<Source><![CDATA[
    public TransDate parmCleanUpDate(TransDate _cleanUpDate = cleanUpDate)
    {
        cleanUpDate = _cleanUpDate;

        return cleanUpDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOperations</Name>
				<Source><![CDATA[
    public void processOperations(PurchOrderHistoryCleanUpContract _contract)
    {
        cleanUpDate = _contract.parmCleanUpDate();

        this.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        #OCCRetryCount

        try
        {
            if (this.validate())
            {
                this.deleteTables();
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS107340");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret = true;

        if (!cleanupDate)
        {
            ret = checkFailed("@SYS24455");
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTables</Name>
				<Source><![CDATA[
    public void deleteTables()
    {
        Connection connection = new Connection();
        Statement statement = connection.createStatement();
        str sqlScript = this.getSqlScript(cleanUpDate);
        statement.executeUpdate(sqlScript);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSqlScript</Name>
				<Source><![CDATA[
    private str getSqlScript(TransDate _cleanUpDate)
    {
        utcdatetime cleanUpDateTime = datetoendUtcDateTime(_cleanUpDate, DateTimeUtil::getUserPreferredTimeZone());
        str cleanUpDateTimeStr;

        if (PurchOrderHistoryCleanUpFormatDateFlight::instance().isEnabled())
        {
            cleanUpDateTimeStr = DateTimeUtil::toFormattedStr(
                cleanUpDateTime,
                DateFormat::MDY, 
                DateDay::Digits2, 
                DateSeparator::Slash, 
                DateMonth::Digits2, 
                DateSeparator::Slash, 
                DateYear::Digits4, 
                TimeSeparator::Colon, 
                TimeSeparator::Colon, 
                DateFlags::None);
        }
        else
        {
            cleanUpDateTimeStr = datetime2Str(cleanUpDateTime);
        }

        str scriptText = @"declare @invoicedate datetime;
        set @invoicedate = '"+ cleanUpDateTimeStr;

        if (PurchOrderHistoryCleanUpServiceFlight::instance().isEnabled())
        {
            scriptText += @"';
            declare @invoicedPOBeforeSpecifiedDate table (PURCHID nvarchar(MAX), PARTITION nvarchar(20), MAX_INVOICEDATE datetime, DATAAREAID nvarchar(4));
            insert into @invoicedPOBeforeSpecifiedDate
            select t3.ORIGPURCHID AS PURCHID, t1.PARTITION, max(t2.INVOICEDATE) as MAX_INVOICEDATE, t1.DATAAREAID
            from purchtable t1 inner join vendinvoicejour t2
                on t1.dataareaid = t2.dataareaid
                and t1.purchid = t2.purchid
                and t1.PARTITION = t2.PARTITION
            inner join VENDINVOICETRANS t3
                on t2.DATAAREAID = t3.DATAAREAID
                and t2.PURCHID = t3.PURCHID
                and t2.INVOICEDATE = t3.INVOICEDATE
                and t2.NUMBERSEQUENCEGROUP = t3.NUMBERSEQUENCEGROUP
                and t2.INTERNALINVOICEID = t3.INTERNALINVOICEID
                and t2.PARTITION = t3.PARTITION
            where t1.PURCHSTATUS = 3
            group by t3.ORIGPURCHID, t1.DATAAREAID, t1.PARTITION
            having max(t2.INVOICEDATE) < @invoicedate;";
        }
        else
        {
            scriptText += @"';
            declare @invoicedPOBeforeSpecifiedDate table (PURCHID nvarchar(MAX), PARTITION nvarchar(20), MAX_INVOICEDATE datetime, DATAAREAID nvarchar(4));
            insert into @invoicedPOBeforeSpecifiedDate
            select t1.PURCHID, t1.PARTITION, max(t2.INVOICEDATE) as MAX_INVOICEDATE, t1.DATAAREAID
            from purchtable t1 inner join vendinvoicejour t2
                on t1.dataareaid = t2.dataareaid
                and t1.purchid = t2.purchid
                and t1.PARTITION = t2.PARTITION
            where t1.PURCHSTATUS = 3
            group by t1.PURCHID, t1.DATAAREAID, t1.PARTITION
            having max(t2.INVOICEDATE) < @invoicedate;";
        }

        scriptText += @"
        --backup purchlinehistory
        IF OBJECT_ID('purchlinehistory_cleanup_backup') IS NOT NULL DROP TABLE purchlinehistory_cleanup_backup;
        select t1.* into purchlinehistory_cleanup_backup
        from PURCHLINEHISTORY t1 inner join @invoicedPOBeforeSpecifiedDate t2
            on t1.PURCHID = t2.PURCHID
            and t1.DATAAREAID = t2.DATAAREAID
            and t1.partition = t2.partition;

        --backup purchtablehistory
        IF OBJECT_ID('purchtablehistory_cleanup_backup') IS NOT NULL DROP TABLE purchtablehistory_cleanup_backup;
        select t1.* into purchtablehistory_cleanup_backup
        from PURCHTABLEHISTORY t1 inner join @invoicedPOBeforeSpecifiedDate t2
            on t1.PURCHID = t2.PURCHID
            and t1.DATAAREAID = t2.DATAAREAID
            and t1.partition = t2.partition;

        --backup purchtableversion
        IF OBJECT_ID('purchtableversion_cleanup_backup') IS NOT NULL DROP TABLE purchtableversion_cleanup_backup;
        select t1.* into purchtableversion_cleanup_backup
        from PURCHTABLEVERSION t1 inner join @invoicedPOBeforeSpecifiedDate t2
            on t1.PURCHID = t2.PURCHID
            and t1.PURCHIDDATAAREAID = t2.DATAAREAID
            and t1.partition = t2.partition;

        delete from PURCHLINEHISTORY where RECID in (select RECID from purchlinehistory_cleanup_backup);
        delete from PURCHTABLEHISTORY where RECID in (select RECID from purchtablehistory_cleanup_backup);
        delete from PURCHTABLEVERSION where RECID in (select RECID from purchtableversion_cleanup_backup);";

        return scriptText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>