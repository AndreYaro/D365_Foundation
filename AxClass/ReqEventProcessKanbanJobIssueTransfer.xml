<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessKanbanJobIssueTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqEventProcessKanbanKanbanJobIssueTransfer</c> class processes kanban job transfer issue events.
/// </summary>
public class ReqEventProcessKanbanJobIssueTransfer extends ReqEventProcessKanbanJobIssue implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowReserveAvailableOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines if this class should try to physically reserve on hand quantity on behalf of the event movement.
    /// </summary>
    /// <returns>
    ///    true if the reservation is allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Unlike sales or production BOM lines, kanban transfer issues do not have a 'reservation' setting.
    ///    Instead the use of existing on hand inventory is controlled by the kanban rule.
    /// </remarks>
    protected boolean allowReserveAvailableOnHand()
    {
        return this.canReduceInventQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variables.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    public boolean init()
    {
        Kanban  kanban;
        boolean result;

        //create event kanban only for transfer jobs and only if the job is the first one for the kanban in question
        //jobs in the middle or at the end of a kanban flow should never create event kanbans.
        result =    kanbanJob.Type == LeanKanbanJobType::Transfer
                 && !kanbanJob.existPreviousJob();

        if (result)
        {
            kanbanJobIssue = kanbanJob.kanbanJobIssue();
            kanban         = kanbanJob.kanban();
            result         =    super()
                             && kanbanJobIssue
                             && kanban
                             && kanban.KanbanRule != kanbanRule.RecId;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the event quantity to process.
    /// </summary>
    protected void initInventQty()
    {
        if (this.inventMovement())
        {
            super();
        }
        else
        {
            if (!initInventQty)
            {
                inventQty     = kanbanJob.QuantityOrdered;
                inventQty     = inventQty < kanbanRuleEvent.MinimumEventQuantity ? 0 : inventQty;
                initInventQty = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQtyKanbanRuleLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the quantity that is used to look up a kanban rule.
    /// </summary>
    protected void initInventQtyKanbanRuleLookup()
    {
        if (this.inventMovement())
        {
            super();
        }
        else
        {
            if (!initInventQtyKanbanRuleLookup)
            {
                inventQtyKanbanRuleLookup     = kanbanJob.QuantityOrdered;
                initInventQtyKanbanRuleLookup = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the inventory dimension for which the event is processed.
    /// </summary>
    /// <returns>
    /// A <c>InventDimId</c> string value.
    /// </returns>
    protected InventDimId inventDimId()
    {
        return kanbanJob.IssueInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction originator of the kanban job issue.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>InventTransOrigin</c> table.
    /// </returns>
    protected InventTransOriginId inventTransOriginId()
    {
        return kanbanJob.issueInventTransOriginId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static ReqEventProcessKanbanJobIssueTransfer construct()
    {
        return new ReqEventProcessKanbanJobIssueTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of a <c>ReqEventProcessKanbanJobIssueTransfer</c> object.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> table buffer to use to create the object.
    /// </param>
    /// <param name="_interactive">
    ///    A Boolean value that specifies whether the processing is performed interactively.
    /// </param>
    /// <param name="_leanProductionFlowActivity">
    ///    The <c>LeanProductionFlowActivity</c> record related to the given kanban job; optional.
    /// </param>
    /// <returns>
    ///    A <c>ReqEventProcessKanbanJobIssueTransfer</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessKanbanJobIssueTransfer newStandard(
        KanbanJob                  _kanbanJob,
        boolean                    _interactive = false,
        LeanProductionFlowActivity _leanProductionFlowActivity = null)
    {
        ReqEventProcessKanbanJobIssueTransfer reqEventProcess = ReqEventProcessKanbanJobIssueTransfer::construct();
        LeanProductionFlowActivity            leanProductionFlowActivity;

        leanProductionFlowActivity = _leanProductionFlowActivity ? _leanProductionFlowActivity : _kanbanJob.leanProductionFlowActivity();

        reqEventProcess.parmKanbanJob(_kanbanJob);
        reqEventProcess.parmInteractive(_interactive);
        reqEventProcess.parmMustBeAutoReserved(true);
        reqEventProcess.parmAcceptReceiveSemiFinishedKanbanRule(false);
        reqEventProcess.parmAcceptReceiveFinishedKanbanRule(true);
        reqEventProcess.parmExcludeKanbanRuleRefRecId(_kanbanJob.kanbanRule().RecId);
        reqEventProcess.parmLimitToPlanActivityDownStreamRecId(leanProductionFlowActivity.PlanActivity);

        return reqEventProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>