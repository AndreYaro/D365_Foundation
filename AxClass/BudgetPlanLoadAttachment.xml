<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLoadAttachment</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.Office;
/// <summary>
/// The <c>BudgetPlanLoadAttachment</c> class finds and starts the attachment on a
/// <c>BudgetPlanHeader</c> document that the user clicked.
/// </summary>
public class BudgetPlanLoadAttachment
{
    BudgetPlanHeader            planHeader;
    BudgetPlanTemplateType      planTemplateType;
    DocuTemplate                template;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the filters to be added to the template stream.
    /// </summary>
    /// <returns>
    /// A map of filters.
    /// </returns>
    protected Map getDocumentFilters()
    {
        ExportToExcelFilterTreeBuilder  headerFilterBuilder = new ExportToExcelFilterTreeBuilder(tableStr(BudgetPlanHeaderEntity));
        Map filtersToApply = new Map(Types::String, Types::Class);

        // Build filter and apply to template stream
        switch (this.parmBudgetPlanTemplateType())
        {
            case BudgetPlanTemplateType::Worksheet:
                ExportToExcelFilterTreeBuilder  worksheetFilterBuilder  = new ExportToExcelFilterTreeBuilder(tableStr(BudgetPlanWorksheetEntity));

                FilterBinaryNode documentNumberFilter     = worksheetFilterBuilder.areEqual(fieldStr(BudgetPlanWorksheetEntity, DocumentNumber), planHeader.DocumentNumber);
                FilterBinaryNode layoutFilter             = worksheetFilterBuilder.areEqual(fieldStr(BudgetPlanWorksheetEntity, Layout), BudgetPlanLayout::find(planHeader.Layout).Name);
                FilterCollectionNode worksheetFilters     = worksheetFilterBuilder.and(documentNumberFilter, layoutFilter);

                filtersToApply.insert(tableStr(BudgetPlanHeaderEntity), headerFilterBuilder.areEqual(fieldStr(BudgetPlanHeaderEntity, DocumentNumber), planHeader.DocumentNumber));
                filtersToApply.insert(tableStr(BudgetPlanWorksheetEntity), worksheetFilters);

                break;

            case BudgetPlanTemplateType::Justification:
                ExportToExcelFilterTreeBuilder  headerJustificationFilterBuilder = new ExportToExcelFilterTreeBuilder(tableStr(BudgetPlanJustificationEntity));

                using (var document = Microsoft.Dynamics.Platform.Integration.Office.Word.DocumentSettingsManager::OpenWordprocessingDocument(template.getTemplateStream(), false))
                {
                    var settingsManager = new Microsoft.Dynamics.Platform.Integration.Office.Word.DocumentSettingsManager(document);
                    var documentEntities = settingsManager.GetEntities(false);
                    boolean filterApplied;

                    for (int i = 0; i < documentEntities.Count; i++)
                    {
                        Microsoft.Dynamics.Platform.Integration.Office.MetadataCache.EntityMetadata entityMetadata = ExportToExcelMetadataCache::getEntityByPublicName(documentEntities.get_Item(i));
                        switch (entityMetadata.Name)
                        {
                            case tableStr(BudgetPlanHeaderEntity):
                                filtersToApply.insert(tableStr(BudgetPlanHeaderEntity), headerFilterBuilder.areEqual(fieldStr(BudgetPlanHeaderEntity, DocumentNumber), planHeader.DocumentNumber));
                                filterApplied = true;
                                break;
                            case tableStr(BudgetPlanJustificationEntity):
                                filtersToApply.insert(tableStr(BudgetPlanJustificationEntity), headerJustificationFilterBuilder.areEqual(fieldStr(BudgetPlanJustificationEntity, DocumentNumber), planHeader.DocumentNumber));
                                filterApplied = true;
                                break;
                        }
                    }

                    if (!filterApplied)
                    {
                        throw error("@Budget:BudgetPlan_Validation_InvalidEntities");
                    }
                }

                break;

            default:
                throw error("@Budget:BudgetPlan_Validation_InvalidTemplateType");
        }

        return filtersToApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemplateStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the template stream after applying the filters.
    /// </summary>
    /// <returns> The template stream with the filters applied. </returns>
    protected System.IO.Stream getTemplateStream()
    {
        DocuTemplateRender      renderer = new DocuTemplateRender();
        System.IO.MemoryStream  attachmentStream = new System.IO.MemoryStream();

        if (this.parmBudgetPlanTemplateType() == BudgetPlanTemplateType::Worksheet)
        {
            renderer.templateSettingsChanged += eventhandler(this.onTemplateSettingsChanged);
        }

        renderer.renderTemplateToStream(template, this.getDocumentFilters(), attachmentStream);

        attachmentStream.Seek(0, System.IO.SeekOrigin::Begin);

        return attachmentStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTemplateSettingsChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the templateSettingsChanged event of a <see cref="DocuTemplateRender"/> class.
    /// </summary>
    /// <param name = "_template">The template being generated from.</param>
    /// <param name = "_settingsManager">The SettingsManager being used to change the settings.</param>
    /// <param name = "_context">The context object, if one was provided; otherwise, null.</param>
    protected void onTemplateSettingsChanged(DocuTemplate _template, Microsoft.Dynamics.Platform.Integration.Office.SettingsManager _settingsManager, object _context)
    {
        Excel.WorkbookSettingsManager workbookSettingsManager = _settingsManager as Excel.WorkbookSettingsManager;
        var dataConnectorSettings = workbookSettingsManager.DataConnectorSettings;
        var dataOptions = dataConnectorSettings.DataOptions;

        dataOptions.RefreshOnOpen = true;

        workbookSettingsManager.DataConnectorSettings = dataConnectorSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>launch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches an application to open the file.
    /// </summary>
    public void launch()
    {
        str openInString;
        str filename;
        str extension;

        switch (this.parmBudgetPlanTemplateType())
        {
            case BudgetPlanTemplateType::Justification:
                openInString = "@Budget:BudgetPlanning_OpenInWord";
                filename = strFmt("%1_%2", planHeader.DocumentNumber, template.DisplayName);
                extension = template.getFileExtension() ? template.getFileExtension() : BudgetPlanningConstants::WordExtension;

                break;

            case BudgetPlanTemplateType::Worksheet:
                openInString = "@Budget:BudgetPlanningOpenInExcel";
                filename = planHeader.DocumentNumber;
                extension = template.getFileExtension() ? template.getFileExtension() : BudgetPlanningConstants::ExcelExtension;

                break;

            default:
                throw error("@Budget:BudgetPlan_Validation_InvalidTemplateType");
        }

        DocuFileSaveResult saveResult = DocuFileSave::promptForSaveLocation(filename, extension, openInString, "@Budget:BudgetPlanningCaption");
        if (saveResult.parmAction() != DocuFileSaveAction::Cancel)
        {
            using (System.IO.Stream attachmentStream = this.getTemplateStream())
            {
                DocuFileSave::processSaveResult(attachmentStream, saveResult);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the attachment for the budget plan document.
    /// </summary>
    protected void load()
    {
        switch (this.parmBudgetPlanTemplateType())
        {
            case BudgetPlanTemplateType::Justification:
                BudgetPlanTemplateRecId templateRecId = BudgetPlanningProcess::find(planHeader.BudgetPlanningProcess).BudgetPlanJustificationTemplate;
                RecId docuTemplateRecId = BudgetPlanTemplate::find(templateRecId).DocuTemplate;

                select firstOnly template
                    where template.RecId == docuTemplateRecId;

                if (!template)
                {
                    throw error("@Budget:BudgetPlan_Validation_JustificationLoadError");
                }

                break;

            case BudgetPlanTemplateType::Worksheet:
                BudgetPlanLayout budgetPlanLayout = BudgetPlanLayout::find(planHeader.Layout);

                template = DocuTemplate::findExactTemplateWithRegion(
                    OfficeAppApplicationType::Excel,
                    budgetPlanLayout.Name,
                    BudgetPlanningConstants::emptyString,
                    BudgetPlanningConstants::emptyString,
                    BudgetPlanningConstants::emptyString);

                if (!template)
                {
                    throw error("@Budget:GenerateTemplateBeforeAttemptingLaunch");
                }

                break;

            default:
                throw error("@Budget:BudgetPlan_Validation_InvalidTemplateType");
        }

        this.launch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanHeader</Name>
				<Source><![CDATA[
    public BudgetPlanHeader parmBudgetPlanHeader(BudgetPlanHeader _planHeader = planHeader)
    {
        planHeader = _planHeader;

        return planHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanTemplateType</Name>
				<Source><![CDATA[
    public BudgetPlanTemplateType parmBudgetPlanTemplateType(BudgetPlanTemplateType _planTemplateType = planTemplateType)
    {
        planTemplateType = _planTemplateType;

        return planTemplateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplate</Name>
				<Source><![CDATA[
    public DocuTemplate parmTemplate(DocuTemplate _template = template)
    {
        template = _template;

        return template;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetPlanningConfigurationModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes additional processing when the <c>BudgetPlanningConfiguration</c> table is updated.
    /// </summary>
    /// <param name="_budgetPlanningConfiguration">
    /// A <c>BudgetPlanningConfiguration</c> record.
    /// </param>
    public static void budgetPlanningConfigurationModified(BudgetPlanningConfiguration _budgetPlanningConfiguration)
    {
        BudgetPlanAttachment        budgetPlanAttachment;
        BudgetPlanHeader            budgetPlanHeader;
        BudgetPlanningProcess       budgetPlanningProcess;
        Ledger                      ledger;
        CompanyInfo                 companyInfo;

        // update attachment status for all worksheet attachments associated with the modified configuration
        update_recordSet budgetPlanAttachment
            setting
                UpdateStatus = budgetPlanAttachmentUpdateStatus::FilterAndFields
                where budgetPlanAttachment.Type == BudgetPlanTemplateType::Worksheet
            join RecId from budgetPlanHeader
                where budgetPlanHeader.RecId == budgetPlanAttachment.BudgetPlanHeader
            join RecId from budgetPlanningProcess
                where budgetPlanningProcess.RecId == budgetPlanHeader.BudgetPlanningProcess
            join PrimaryForLegalEntity from ledger
                where ledger.RecId == budgetPlanningProcess.Ledger
            join DataArea from companyInfo
                where companyInfo.RecId == ledger.PrimaryForLegalEntity
                    && companyInfo.DataArea == _budgetPlanningConfiguration.dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanLoadAttachment construct()
    {
        return new BudgetPlanLoadAttachment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        // Verify that the necessary parameters have been specified
        if (!_args
            || _args.menuItemName() == BudgetPlanningConstants::emptyString)
        {
            throw error(Error::missingParameter(_args));
        }
        if (!_args.record())
        {
            throw error(Error::missingRecord(tableStr(BudgetPlanHeader)));
        }
        if (!(_args.record() is BudgetPlanHeader))
        {
            throw error(strFmt("@Budget:RecordBufferTypeNotSupported", tableId2Name(_args.record().TableId)));
        }

        BudgetPlanLoadAttachment budgetPlanLoadAttachment = BudgetPlanLoadAttachment::construct();

        // Set the appropriate template type
        switch (_args.menuItemName())
        {
            case menuitemActionStr(BudgetPlanWorksheet):
                budgetPlanLoadAttachment.parmBudgetPlanTemplateType(BudgetPlanTemplateType::Worksheet);
                break;

            case menuitemActionStr(BudgetPlanJustification):
                budgetPlanLoadAttachment.parmBudgetPlanTemplateType(BudgetPlanTemplateType::Justification);
                break;

            default:
                throw error("@Budget:TemplateActionNotSupported");
        }

        // Set the caller record
        budgetPlanLoadAttachment.parmBudgetPlanHeader(_args.record());

        // Load the attached document
        budgetPlanLoadAttachment.load();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentBudgetPlanHeaderModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes additional processing needed when the <c>ParentBudgetPlanHeader</c> field of a <c>BudgetPlanHeader</c> record is modified.
    /// </summary>
    /// <param name="_budgetPlanHeader">
    /// The <c>BudgetPlanHeader</c> record which had a modified <c>ParentBudgetPlanHeader</c> field.
    /// </param>
    public static void parentBudgetPlanHeaderModified(BudgetPlanHeader _budgetPlanHeader)
    {
        BudgetPlanHeaderRecId origParentBudgetPlanHeader    = _budgetPlanHeader.orig().ParentBudgetPlanHeader;
        BudgetPlanHeaderRecId currentParentBudgetPlanHeader = _budgetPlanHeader.ParentBudgetPlanHeader;

        ttsBegin;

        if (origParentBudgetPlanHeader != currentParentBudgetPlanHeader)
        {
            if (origParentBudgetPlanHeader)
            {
                BudgetPlanLoadAttachment::updateParentBudgetPlanAttachmentStatus(origParentBudgetPlanHeader, BudgetPlanAttachmentUpdateStatus::FilterAndFields);
            }

            if (_budgetPlanHeader.ParentBudgetPlanHeader)
            {
                BudgetPlanLoadAttachment::updateParentBudgetPlanAttachmentStatus(currentParentBudgetPlanHeader, BudgetPlanAttachmentUpdateStatus::FilterAndFields);
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentBudgetPlanAttachmentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the status of the <c>BudgetPlanLoadAttachment</c> records associated with the specified <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <param name="_parentBudgetPlanRedId">
    /// The record id of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_budgetPlanAttachmentUpdateStatus">
    /// The new <c>BudgetPlanAttachmentUpdateStatus</c> value.
    /// </param>
    /// <remarks>
    /// This process will update the <c>BudgetPlanAttachment</c> record associated with the specified <c>BudgetPlanHeader</c> record.
    /// It will then recursively do the same for all budget plans in the parent hierarchy above the specified the specified <c>BudgetPlanHeader</c> record.
    /// </remarks>
    public static void updateParentBudgetPlanAttachmentStatus(BudgetPlanHeaderRecId _parentBudgetPlanRedId,
                                                                    BudgetPlanAttachmentUpdateStatus _budgetPlanAttachmentUpdateStatus)
    {
        BudgetPlanHeader      budgetPlanHeader = BudgetPlanHeader::find(_parentBudgetPlanRedId);
        BudgetPlanAttachment  budgetPlanAttachment;

        if (budgetPlanHeader)
        {
            budgetPlanAttachment = BudgetPlanAttachment::findByHeaderStageType(budgetPlanHeader.RecId,
                                                                                budgetPlanHeader.BudgetPlanningStage,
                                                                                BudgetPlanTemplateType::Worksheet,
                                                                                true);

            if (budgetPlanAttachment)
            {
                budgetPlanAttachment.UpdateStatus = _budgetPlanAttachmentUpdateStatus;
                budgetPlanAttachment.update();
            }

            if (budgetPlanHeader.ParentBudgetPlanHeader)
            {
                BudgetPlanLoadAttachment::updateParentBudgetPlanAttachmentStatus(budgetPlanHeader.ParentBudgetPlanHeader, _budgetPlanAttachmentUpdateStatus);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>