<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RegistrationIDSearchPresenter</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class RegistrationIDSearchPresenter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static RegistrationIDSearchPresenter construct()
    {
        RegistrationIDSearchPresenter presenter = new RegistrationIDSearchPresenter();
        return presenter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxVATNumTable</Name>
				<Source><![CDATA[
    internal void insertTmpTaxVATNumTable(TmpTaxVATNumTable _tmpTaxVATNumTable, boolean isCustomer, Common custVendCaller)
    {
        delete_from _tmpTaxVATNumTable;
        this.insertTaxExemptNumber(_tmpTaxVATNumTable, isCustomer);
        this.insertVATIDRegistration(_tmpTaxVATNumTable, isCustomer, custVendCaller);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxExemptNumber</Name>
				<Source><![CDATA[
    private void insertTaxExemptNumber(TmpTaxVATNumTable _tmpTaxVATNumTable, boolean isCustomer)
    {
        TaxVATNumTable taxVATNumTableLocal;
        DirPartyTable dirPartyTableLocal;
        
        ttsbegin;
        RecordInsertList insertList = new RecordInsertList(tableNum(tmpTaxVATNumTable), true, true, true, true, true, _tmpTaxVATNumTable);
        if (isCustomer)
        {
            CustTable custTableLocal;

            while select crosscompany DataAreaId, AccountNum, RecId from custTableLocal
                order by custTableLocal.DataAreaId
                join VATNum from taxVATNumTableLocal
                where custTableLocal.VATNum == taxVATNumTableLocal.VATNum && custTableLocal.DataAreaId == taxVATNumTableLocal.DataAreaId
                join Name from dirPartyTableLocal
                where custTableLocal.Party == dirPartyTableLocal.RecId
            {
                _tmpTaxVATNumTable.clear();
                _tmpTaxVATNumTable.VATNum = taxVATNumTableLocal.VATNum;
                _tmpTaxVATNumTable.DataArea = custTableLocal.DataAreaId;
                _tmpTaxVATNumTable.AccountNum = custTableLocal.AccountNum;
                _tmpTaxVATNumTable.Name = dirPartyTableLocal.Name;
                _tmpTaxVATNumTable.TaxIDType = TaxIDSourceType::TaxExemptNumber;
                _tmpTaxVATNumTable.SourceTableId = custTableLocal.TableId;
                _tmpTaxVATNumTable.SourceRecId = custTableLocal.RecId;
                insertList.add(_tmpTaxVATNumTable);
            }
        }
        else
        {
            VendTable vendTableLocal;

            while select crosscompany DataAreaId, AccountNum, RecId from vendTableLocal
                order by vendTableLocal.DataAreaId
                join VATNum from taxVATNumTableLocal
                where vendTableLocal.VATNum == taxVATNumTableLocal.VATNum && vendTableLocal.DataAreaId == taxVATNumTableLocal.DataAreaId
                join Name from dirPartyTableLocal
                where vendTableLocal.Party == dirPartyTableLocal.RecId
            {
                _tmpTaxVATNumTable.clear();
                _tmpTaxVATNumTable.VATNum = taxVATNumTableLocal.VATNum;
                _tmpTaxVATNumTable.DataArea = vendTableLocal.DataAreaId;
                _tmpTaxVATNumTable.AccountNum = vendTableLocal.AccountNum;
                _tmpTaxVATNumTable.Name = dirPartyTableLocal.Name;
                _tmpTaxVATNumTable.TaxIDType = TaxIDSourceType::TaxExemptNumber;
                _tmpTaxVATNumTable.SourceTableId = vendTableLocal.TableId;
                _tmpTaxVATNumTable.SourceRecId = vendTableLocal.RecId;
                insertList.add(_tmpTaxVATNumTable);
            }
        }

        insertList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVATIDRegistration</Name>
				<Source><![CDATA[
    private void insertVATIDRegistration(TmpTaxVATNumTable _tmpTaxVATNumTable, boolean isCustomer, Common custVendCaller)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsDirPartyTable = query.addDataSource(tableNum(DirPartyTable));

        QueryBuildDataSource qbdsDirPartyView = qbdsDirPartyTable.addDataSource(tableNum(DirPartyView));
        qbdsDirPartyView.addLink(fieldNum(DirPartyTable, RecId), fieldNum(DirPartyView, Party), qbdsDirPartyTable.name());
        qbdsDirPartyView.joinMode(JoinMode::InnerJoin);
        qbdsDirPartyView.addRange(fieldNum(DirPartyView, RoleType)).value(queryValue(isCustomer ? DirPartyRoleType::Customer : DirPartyRoleType::Vendor));

        QueryBuildDataSource qbdsDirPartyLocation = qbdsDirPartyView.addDataSource(tableNum(DirPartyLocation));
        qbdsDirPartyLocation.joinMode(JoinMode::InnerJoin);
        qbdsDirPartyLocation.addLink(fieldNum(DirPartyView, Party), fieldNum(DirPartyLocation, Party));

        QueryBuildDataSource qbdsTaxRegistration = qbdsDirPartyLocation.addDataSource(tableNum(TaxRegistration));
        qbdsTaxRegistration.addLink(fieldNum(DirPartyLocation, RecId), fieldNum(TaxRegistration, DirPartyLocation));
        qbdsTaxRegistration.joinMode(JoinMode::InnerJoin);

        QueryBuildDataSource qbdsApplicabilityRule = qbdsTaxRegistration.addDataSource(tableNum(TaxRegistrationTypeApplicabilityRule));
        qbdsApplicabilityRule.relations(true);
        qbdsApplicabilityRule.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource qbdsLegislationTypes = qbdsApplicabilityRule.addDataSource(tableNum(TaxRegistrationLegislationTypes));
        qbdsLegislationTypes.relations(true);
        qbdsLegislationTypes.joinMode(JoinMode::ExistsJoin);
        qbdsLegislationTypes.addRange(fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypesList)).value(queryValue(TaxRegistrationTypesList::TAXID));

        ttsbegin;
        RecordInsertList insertList = new RecordInsertList(tableNum(tmpTaxVATNumTable), true, true, true, true, true, _tmpTaxVATNumTable);
        QueryRun qr = new QueryRun(query);
        while (qr.next())
        {
            DirPartyView view = qr.get(tableNum(DirPartyView));
            DirPartyTable party = qr.get(tableNum(DirPartyTable));
            TaxRegistration registration = qr.get(tableNum(TaxRegistration));

            if (isCustomer)
            {
                CustTable custTable = CustTable::findByCompany(view.DataArea, view.Accountnum);
                if (custTable.VATNum != registration.RegistrationNumber)
                {
                    continue;
                }
            }
            else
            {
                VendTable vendTable = VendTable::findByCompany(view.DataArea, view.Accountnum);
                if (vendTable.VATNum != registration.RegistrationNumber)
                {
                    continue;
                }
            }

            _tmpTaxVATNumTable.clear();
            _tmpTaxVATNumTable.DataArea = view.DataArea;
            _tmpTaxVATNumTable.AccountNum = view.Accountnum;
            _tmpTaxVATNumTable.Name = party.Name;
            _tmpTaxVATNumTable.TaxIDType = TaxIDSourceType::VATIDRegistration;
            _tmpTaxVATNumTable.SourceTableId = isCustomer ? tablenum(CustTable) : tablenum(VendTable);
            _tmpTaxVATNumTable.SourceRecId = custVendCaller.RecId;
            _tmpTaxVATNumTable.VATNum = registration.RegistrationNumber;
            insertList.add(_tmpTaxVATNumTable);
        }

        insertList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>