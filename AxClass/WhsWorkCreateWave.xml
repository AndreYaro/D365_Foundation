<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkCreateWave</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkCreateWave</c> class creates warehouse work for wave.
/// </summary>
abstract class WhsWorkCreateWave extends WHSWorkCreate
{
    WHSWorkCreateId     workCreateId;
    WHSWaveTable        waveTable;
    WhsPostEngine       postEngine;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    abstract void createTempTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostEngine</Name>
				<Source><![CDATA[
    public WHSPostEngine parmPostEngine(WHSPostEngine _postEngine = postEngine)
    {
        postEngine = _postEngine;

        return postEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveTable</Name>
				<Source><![CDATA[
    public WHSWaveTable parmWaveTable(WHSWaveTable _waveTable = waveTable)
    {
        waveTable = _waveTable;

        return waveTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;

        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocatedLoadLines</Name>
				<Source><![CDATA[
	/// <summary>
    /// Gets the number of allocated load lines.
    /// </summary>
    /// <returns>The number of allocated load lines.</returns>
	internal int allocatedLoadLines()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
	/// <summary>
	/// Constructor method for the class instances.
	/// </summary>
	/// <param name="_common">
	/// Common record to be used to construct instance.
	/// </param>
	/// <param name="_workCreateId">
	/// Work creation id to be used to construct instance.
	/// </param>
	/// <returns>
	/// The <c>WHSWorkCreateWave</c> instance.
	/// </returns>
    static WHSWorkCreateWave construct(
        Common          _common,
        WHSWorkCreateId _workCreateId = '')
    {
        WHSWorkCreateWave workCreateWave = WHSWorkCreateWave::constructNoThrow(_common as WHSWaveTable, _workCreateId);

        if (!workCreateWave)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return workCreateWave;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>WHSWorkCreateWave</c> object.
    /// </summary>
    /// <param name="_whsWaveTable">
    /// A wave table record.
    /// </param>
    /// <param name="_workCreateId">
    /// The work creation id.
    /// </param>
    /// <returns>The instantiated object; otherwise, null.</returns>
    [Hookable(false)]
    public static WHSWorkCreateWave constructNoThrow(
        WHSWaveTable        _whsWaveTable,
        WHSWorkCreateId     _workCreateId)
    {
        WHSWaveTemplateTypeFactoryAttribute attribute       = new WHSWaveTemplateTypeFactoryAttribute(_whsWaveTable.waveTemplate().WaveTemplateType);
        SysExtensionGenericInstantiation    instantiation   = new SysExtensionGenericInstantiation(_whsWaveTable, _workCreateId);
        WHSWorkCreateWave                   instance        = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(WHSWorkCreateWave), attribute, instantiation) as WHSWorkCreateWave;

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>