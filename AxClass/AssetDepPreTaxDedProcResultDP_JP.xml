<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepPreTaxDedProcResultDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetDepPreTaxDedProcResultDP_JP</c> class is the Report Data provider class for the
///    <c>AssetDepPreTaxDedProcResult_JP</c> report.
/// </summary>
/// <remarks>
///    This class provides methods to fetch the data which is used by the <c>ConvInventPriceIsZero</c>
///    report.
/// </remarks>
[
    SRSReportParameterAttribute(classstr(AssetDepPreTaxDedProcResultContract_JP))
]
class AssetDepPreTaxDedProcResultDP_JP extends SrsReportDataProviderPreProcessTempDB
{
    AssetDepPreTaxDedProcResultTmp_JP   assetDepPreTaxDedProcResultTmp;

    RecId                               assetDepPreTaxDedProcessRecId;

    #define.DetailTrans(1)
    #define.SettlementProcess(0)
    #define.Space(' ')
    #define.Colon(':')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amount2OverAmount</Name>
				<Source><![CDATA[
    private AmountMST amount2OverAmount(AmountMST _amount)
    {
        return max(_amount, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amount2UnderAmount</Name>
				<Source><![CDATA[
    private AmountMST amount2UnderAmount(AmountMST _amount)
    {
        return max(-_amount, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepPreTaxDedSettlementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>AssetDepPreTaxDedProcResultTmp_JP</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The required report data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetDepPreTaxDedProcResultTmp_JP))
    ]
    public AssetDepPreTaxDedProcResultTmp_JP getAssetDepPreTaxDedSettlementTmp()
    {
        select assetDepPreTaxDedProcResultTmp;
        return assetDepPreTaxDedProcResultTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDetailsTransactionData</Name>
				<Source><![CDATA[
    private void initDetailsTransactionData(
        AssetId                         _assetId,
        AssetBookId                     _bookId,
        AssetDepPreTaxDedProcessDate_JP _processDate)
    {
        AssetTrans              assetTrans;
        AssetDocumentTrans_JP   assetDocumentTrans;
        AssetDocumentEntry_JP   assetDocumentEntry;
        AssetDocumentTable_JP   assetDocumentTable;
        FromDate                fromDate;
        ToDate                  toDate;

        // Get the date range based on the process date
        fromDate = LedgerFiscalCalendar::findFirstDayOfYear(Ledger::fiscalCalendar(), _processDate);
        toDate   = _processDate;

        while select AssetId, TransDate, TransType, AmountMST from assetTrans
            order by AssetId, TransDate
            where assetTrans.AssetId    == _assetId
                && assetTrans.BookId    == _bookId
                && assetTrans.TransDate >= fromDate
                && assetTrans.TransDate <= toDate
            outer join AssetDocumentEntry_JP from assetDocumentTrans
                where assetDocumentTrans.RefRecId       == assetTrans.RecId
                    && assetDocumentTrans.RefTableId    == assetTrans.TableId
            outer join AssetDocumentTable_JP from assetDocumentEntry
                where assetDocumentEntry.RecId == assetDocumentTrans.AssetDocumentEntry_JP
            outer join Type from assetDocumentTable
                where assetDocumentTable.RecId == assetDocumentEntry.AssetDocumentTable_JP

        {
            assetDepPreTaxDedProcResultTmp.AssetId              = assetTrans.AssetId;
            assetDepPreTaxDedProcResultTmp.AssetName            = AssetTable::find(assetTrans.AssetId).Name;
            assetDepPreTaxDedProcResultTmp.TransDate            = assetTrans.TransDate;
            assetDepPreTaxDedProcResultTmp.TransType            = assetTrans.TransType;
            assetDepPreTaxDedProcResultTmp.AssetDocumentType    = assetDocumentTable.Type;
            assetDepPreTaxDedProcResultTmp.AmountMST            = assetTrans.AmountMST;

            assetDepPreTaxDedProcResultTmp.Flag                 = #DetailTrans;

            assetDepPreTaxDedProcResultTmp.doInsert();
            assetDepPreTaxDedProcResultTmp.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAssetDepPreTaxDedProcResultTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>AssetDepPreTaxDedProcResultTmp_JP</c> temporary table.
    /// </summary>
    private void populateAssetDepPreTaxDedProcResultTmp()
    {
        AssetDepPreTaxDedProcess_JP         assetDepPreTaxDedProcess;
        AssetDepPreTaxDedProcessContext_JP  assetDepPreTaxDedProcessContext;

        AssetId                             currentAssetId;
        str                                 carryForwardRuleStr;
        str                                 offsetRuleStr;

        while select assetDepPreTaxDedProcessContext
            order by AssetId
            where assetDepPreTaxDedProcessContext.AssetDepPreTaxDedProcess_JP == assetDepPreTaxDedProcessRecId
            join ProcessDate from assetDepPreTaxDedProcess
                where assetDepPreTaxDedProcess.RecId == assetDepPreTaxDedProcessContext.AssetDepPreTaxDedProcess_JP
        {
            if (assetDepPreTaxDedProcessContext.AssetId != currentAssetId)
            {
                if (currentAssetId)
                {
                    // Insert the settlement process record of last asset.
                    assetDepPreTaxDedProcResultTmp.Flag                 = #SettlementProcess;

                    assetDepPreTaxDedProcResultTmp.doInsert();
                    assetDepPreTaxDedProcResultTmp.clear();
                }

                // Insert the detail transactions

                this.initDetailsTransactionData(assetDepPreTaxDedProcessContext.AssetId,
                    assetDepPreTaxDedProcessContext.BookId,
                    assetDepPreTaxDedProcess.ProcessDate);

                currentAssetId = assetDepPreTaxDedProcessContext.AssetId;
            }

            [carryForwardRuleStr, offsetRuleStr] = this.retrieveRuleList(assetDepPreTaxDedProcessContext.RecId);

            // Insert the record for settlement process
            assetDepPreTaxDedProcResultTmp.AssetId      = assetDepPreTaxDedProcessContext.AssetId;
            assetDepPreTaxDedProcResultTmp.AssetName    = AssetTable::find(assetDepPreTaxDedProcessContext.AssetId).Name;
            assetDepPreTaxDedProcResultTmp.TransDate    = assetDepPreTaxDedProcess.ProcessDate;

            switch (assetDepPreTaxDedProcessContext.DepType)
            {
                case AssetDepType_JP::OrdinaryDepreciation:
                    assetDepPreTaxDedProcResultTmp.AllowableLimitOrdinary           = assetDepPreTaxDedProcessContext.CurrentTermAllowableLimit;
                    assetDepPreTaxDedProcResultTmp.CurrentLayerPostedAmountOrdinary = assetDepPreTaxDedProcessContext.CurrentTermCurrentLayerPostedAmount;
                    assetDepPreTaxDedProcResultTmp.OverDepOrdinary                  = this.amount2OverAmount(assetDepPreTaxDedProcessContext.CurrentTermOverUnderAmount);
                    assetDepPreTaxDedProcResultTmp.UnderDepOrdinary                 = this.amount2UnderAmount(assetDepPreTaxDedProcessContext.CurrentTermOverUnderAmount);
                    assetDepPreTaxDedProcResultTmp.OverDepOrdinaryBroughtForward    = this.amount2OverAmount(assetDepPreTaxDedProcessContext.editBroughtFwdOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.UnderDepOrdinaryBroughtForward   = this.amount2UnderAmount(assetDepPreTaxDedProcessContext.editBroughtFwdOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.OffetRuleOrdinary                = offsetRuleStr;
                    assetDepPreTaxDedProcResultTmp.OverDepOrdinaryRemain            = this.amount2OverAmount(assetDepPreTaxDedProcessContext.editRemainingOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.UnderDepOrdinaryRemain           = this.amount2UnderAmount(assetDepPreTaxDedProcessContext.editRemainingOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.CarryForwardRuleOrdinary         = carryForwardRuleStr;
                    assetDepPreTaxDedProcResultTmp.OverDepOrdinaryCarryForward      = this.amount2OverAmount(assetDepPreTaxDedProcessContext.editCarryFwdOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.UnderDepOrdinaryCarryForward     = this.amount2UnderAmount(assetDepPreTaxDedProcessContext.editCarryFwdOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.ReserveAllocationAmountOrdinary  = assetDepPreTaxDedProcessContext.ReserveAllocationAmount;
                    assetDepPreTaxDedProcResultTmp.InclusionInDeductibleOrdinary    = assetDepPreTaxDedProcessContext.CurrentTermPreTaxDedAmount;
                    assetDepPreTaxDedProcResultTmp.TaxLayerPostedAmountOrdinary     = assetDepPreTaxDedProcessContext.CurrentTermTaxLayerPostedAmount;
                    assetDepPreTaxDedProcResultTmp.TaxLayerNewAmountOrdinary        = assetDepPreTaxDedProcessContext.CurrentTermTaxLayerNewAmountToPost;
                    break;

                case AssetDepType_JP::SpecialDepreciationWithDirectOff:
                case AssetDepType_JP::SpecialDepreciationWithReserve:
                case AssetDepType_JP::AdditionalDepreciationWithDirectOff:
                case AssetDepType_JP::AdditionalDepreciationWithReserve:
                    assetDepPreTaxDedProcResultTmp.SpecialDepType                   = assetDepPreTaxDedProcessContext.DepType;
                    assetDepPreTaxDedProcResultTmp.CurrentLayerPostedAmountSpecial  = assetDepPreTaxDedProcessContext.CurrentTermCurrentLayerPostedAmount;
                    assetDepPreTaxDedProcResultTmp.AllowableLimitSpecial            = assetDepPreTaxDedProcessContext.CurrentTermAllowableLimit;
                    assetDepPreTaxDedProcResultTmp.OverDepSpecial                   = this.amount2OverAmount(assetDepPreTaxDedProcessContext.CurrentTermOverUnderAmount);
                    assetDepPreTaxDedProcResultTmp.UnderDepSpecial                  = this.amount2UnderAmount(assetDepPreTaxDedProcessContext.CurrentTermOverUnderAmount);
                    assetDepPreTaxDedProcResultTmp.OverDepSpecialBroughtForward     = this.amount2OverAmount(assetDepPreTaxDedProcessContext.editBroughtFwdOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.UnderDepSpecialBroughtForward    = this.amount2UnderAmount(assetDepPreTaxDedProcessContext.editBroughtFwdOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.OffetRuleSpecial                 = offsetRuleStr;
                    assetDepPreTaxDedProcResultTmp.OverDepSpecialRemain             = this.amount2OverAmount(assetDepPreTaxDedProcessContext.editRemainingOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.UnderDepSpecialRemain            = this.amount2UnderAmount(assetDepPreTaxDedProcessContext.editRemainingOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.CarryForwardRuleSpecial          = carryForwardRuleStr;
                    assetDepPreTaxDedProcResultTmp.OverDepSpecialCarryForward       = this.amount2OverAmount(assetDepPreTaxDedProcessContext.editCarryFwdOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.UnderDepSpecialCarryForward      = this.amount2UnderAmount(assetDepPreTaxDedProcessContext.editCarryFwdOverUnderAmount());
                    assetDepPreTaxDedProcResultTmp.ReserveAllocationAmountSpecial   = assetDepPreTaxDedProcessContext.ReserveAllocationAmount;
                    assetDepPreTaxDedProcResultTmp.InclusionInDeductibleSpecial     = assetDepPreTaxDedProcessContext.CurrentTermPreTaxDedAmount;
                    assetDepPreTaxDedProcResultTmp.TaxLayerPostedAmountSpecial      = assetDepPreTaxDedProcessContext.CurrentTermTaxLayerPostedAmount;
                    assetDepPreTaxDedProcResultTmp.TaxLayerNewAmountSpecial         = assetDepPreTaxDedProcessContext.CurrentTermTaxLayerNewAmountToPost;break;
            }
        }

        // Insert the last settlement process record
        assetDepPreTaxDedProcResultTmp.Flag                 = #SettlementProcess;

        assetDepPreTaxDedProcResultTmp.doInsert();
        assetDepPreTaxDedProcResultTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        AssetDepPreTaxDedProcResultContract_JP  contract = this.parmDataContract() as AssetDepPreTaxDedProcResultContract_JP;

        assetDepPreTaxDedProcessRecId = contract.parmAssetDepPreTaxDedProcessRecId();

        this.populateAssetDepPreTaxDedProcResultTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveRuleList</Name>
				<Source><![CDATA[
    private container retrieveRuleList(RecId _processContextRecId)
    {
        AssetDepPreTaxDedProcessLog_JP      assetDepPreTaxDedProcessLog;
        AssetAdvancedRule_JP                assetAdvancedRule;
        AssetAdvancedRuleGroup_JP           assetAdvancedRuleGroup;

        str                                 carryForwardRuleStr;
        str                                 offsetRuleStr;

        while select AssetAdvancedRule_JP from assetDepPreTaxDedProcessLog
            order by CreatedDateTime
            where assetDepPreTaxDedProcessLog.AssetDepPreTaxDedProcessContext_JP == _processContextRecId
            join Priority from assetAdvancedRule
                where assetAdvancedRule.RecId == assetDepPreTaxDedProcessLog.AssetAdvancedRule_JP
            join Type from assetAdvancedRuleGroup
                where assetAdvancedRuleGroup.RecId  == assetAdvancedRule.AssetAdvancedRuleGroup_JP
        {
            switch (assetAdvancedRuleGroup.Type)
            {
                case AssetAdvancedRuleGroupType_JP::AssetDepPreTaxDeductionCarryForward:
                    carryForwardRuleStr = int2str(assetAdvancedRule.Priority);
                    break;

                case AssetAdvancedRuleGroupType_JP::AssetDepPreTaxDeductionSettlement:
                    offsetRuleStr += #Space + int2str(assetAdvancedRule.Priority);
                    break;
            }
        }

        carryForwardRuleStr = carryForwardRuleStr ? SysLabel::labelId2String(literalstr("@SYS4003829")) + #Colon + carryForwardRuleStr : SysLabel::labelId2String(literalstr("@SYS4003840"));
        offsetRuleStr = offsetRuleStr ? SysLabel::labelId2String(literalstr("@SYS4003829")) + #Colon + offsetRuleStr : SysLabel::labelId2String(literalstr("@SYS4003840"));

        return [carryForwardRuleStr, offsetRuleStr];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>