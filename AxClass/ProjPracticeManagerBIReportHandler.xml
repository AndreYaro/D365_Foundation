<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPracticeManagerBIReportHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles drillthrough events from the Project Manager PowerBI report and launches appropriate forms with filtering based on drillthrough data.
/// </summary>
class ProjPracticeManagerBIReportHandler
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildReportDrillThru</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribe to drillthrough events on specific sections and handle launching filtered forms.
    /// </summary>
    /// <param name = "_data">An object representing drillthrough data passed form the report</param>
    [SubscribesTo(classstr(PowerBIReportControl), delegatestr(PowerBIReportControl, buildReportDrillThru))]
    public static void buildReportDrillThru(PBIReportSelectedData _data)
    {
        if (!_data)
        {
            return;
        }

        var reportDisplayName = _data.report().displayName();

        switch (reportDisplayName)
        {
            case 'PracticeManager':
                ProjPracticeManagerBIReportHandler handler = new ProjPracticeManagerBIReportHandler();
                handler.currentPage(_data);
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPage</Name>
				<Source><![CDATA[
    private void currentPage(PBIReportSelectedData _data)
    {
        var pageDisplayName = _data.page().displayName();
        switch (pageDisplayName)
        {
            case 'Projects overview':
                this.projectsOverview(_data);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectsOverview</Name>
				<Source><![CDATA[
    private void projectsOverview(PBIReportSelectedData _data)
    {
        switch (_data.visual().title())
        {
            case 'Number of projects by stage':
                this.drillProjectsByStage(_data);
                break;
            case 'Actual revenue by customer':
                this.drillProjectsByCustomer(_data);
                break;
            case 'Budget gross margin by project':
                this.drillProjectsByName(_data);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>drillProjectsByStage</Name>
				<Source><![CDATA[
    private void drillProjectsByStage(PBIReportSelectedData _data)
    {
        str stageName = this.getIdentityListValue(_data);

        if (stageName)
        {
            ProjProjectsListPageFilterApplier filterApplier = new ProjProjectsListPageFilterApplier();
            filterApplier.parmClearFormsBuiltInStageFilter(true);
            filterApplier.parmStageName(stageName);

            this.runMenuFunction(menuItemDisplayStr(ProjProjectsListPage), filterApplier);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>drillProjectsByCustomer</Name>
				<Source><![CDATA[
    private void drillProjectsByCustomer(PBIReportSelectedData _data)
    {
        str customerName = this.getIdentityListValue(_data);

        if (customerName)
        {
            ProjProjectsListPageFilterApplier filterApplier = new ProjProjectsListPageFilterApplier();
            filterApplier.parmClearFormsBuiltInStageFilter(true);
            filterApplier.parmCustomerName(customerName);

            this.runMenuFunction(menuItemDisplayStr(ProjProjectsListPage), filterApplier);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>drillProjectsByName</Name>
				<Source><![CDATA[
    private void drillProjectsByName(PBIReportSelectedData _data)
    {
        str projectName = this.getIdentityListValue(_data);

        if (projectName)
        {
            ProjProjectsListPageFilterApplier filterApplier = new ProjProjectsListPageFilterApplier();
            filterApplier.parmClearFormsBuiltInStageFilter(true);
            filterApplier.parmProjectName(projectName);

            this.runMenuFunction(menuItemDisplayStr(ProjProjectsListPage), filterApplier);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMenuFunction</Name>
				<Source><![CDATA[
    private void runMenuFunction(str _menuItem, Object _object = null)
    {
        Args args = new Args();
        if (_object)
        {
            args.parmObject(_object);
            args.menuItemName(_menuItem);
        }
        new MenuFunction(_menuItem, MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIdentityListValue</Name>
				<Source><![CDATA[
    private str getIdentityListValue(PBIReportSelectedData _data)
    {
        ListIterator iterator = new ListIterator(_data.dataPoints());
        List identitiesList = iterator.value().identities();
        ListEnumerator enum = identitiesList.getEnumerator();
        enum.moveNext();

        return enum.current().identityEquals();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>