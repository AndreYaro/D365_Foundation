<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningComparePurchOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VersioningComparePurchOrder</c> class extends the generic functionality in the <c>VersioningCompare</c> class and implements common analysis for a Purchase Order and lines.
/// </summary>
/// <remarks>
/// The main contribution by this class is to define the specific data structure used to save a Purchase Order or line.
/// </remarks>
abstract class VersioningComparePurchOrder extends VersioningCompare
{
    PurchId     purchId;

    PurchTable  purchTable;
    recId       purchTableNodeRecId;
    boolean     isOldVersionArchived;
    boolean     isNewVersionArchived;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extracts the purchase ID from the calling record and initializes the comparison based on the
    /// records.
    /// </summary>
    /// <param name="_changeVersion">
    /// A record from a table that is mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <param name="_alternateNewVersion">
    /// A second record from a table that is mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <remarks>
    /// If the record originates from an instance of the <c>FormDataSource</c> class the correct selection
    /// will be used. If the first argument does not contain a multi selection and the second optional
    /// parameter is not specified; the comparison will be against the current version.
    /// </remarks>
    protected void initCallerRecord(VersioningVersionMap _changeVersion, VersioningVersionMap _alternateNewVersion = null)
    {
        PurchTableAllVersions versionOld, versionNew;

        super(_changeVersion, _alternateNewVersion);

        versionOld  = changeVersionOld;
        purchId     = versionOld.PurchId;
        isOldVersionArchived = versionOld.IsArchived;

        if (changeVersionNew)
        {
            versionNew = changeVersionNew;
            isNewVersionArchived = versionNew.IsArchived;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAgreementLineReleasedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>AgreementLineReleasedLine</c> records that are related to the specified
    /// <c>PurchLine</c> record and saves the result in the <c>VersioningTmpTrans</c> table.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> record that owns the <c>AgreementLineReleasedLine</c> transaction records.
    /// </param>
    /// <param name="_purchLineNodeRecId">
    /// The record ID field of the record in the temporary table that holds the <c>PurchLine</c> record.
    /// </param>
    protected void loadAgreementLineReleasedLine(PurchLine _purchLine, recId _purchLineNodeRecId)
    {
        AgreementLineReleasedLine               agreementLineReleasedLine;
        AgreementLineReleasedLineMap            agreementLineReleasedLineOld;
        AgreementLineReleasedLineMap            agreementLineReleasedLineNew;

        boolean                                 foundOld;
        boolean                                 foundNew;

        while select agreementLineReleasedLine
            where agreementLineReleasedLine.PurchLineInventTransId == _purchLine.InventTransId
               && agreementLineReleasedLine.PurchLineDataAreaId    == _purchLine.DataAreaId
        {
            if (isOldVersionArchived)
            {
                agreementLineReleasedLineOld = AgreementLineReleasedLineHistory::find(agreementLineReleasedLine, oldDateTime);
                foundOld = (agreementLineReleasedLineOld.RecId != 0);
            }
            else
            {
                agreementLineReleasedLineOld = agreementLineReleasedLine;
                foundOld = !agreementLineReleasedLine.IsDeleted;
            }

            if (isNewVersionArchived)
            {
                agreementLineReleasedLineNew = AgreementLineReleasedLineHistory::find(agreementLineReleasedLine, newDateTime);
                foundNew = (agreementLineReleasedLineNew.RecId != 0);
            }
            else
            {
                agreementLineReleasedLineNew = agreementLineReleasedLine;
                foundNew = !agreementLineReleasedLine.IsDeleted;
            }

            this.insertVersioningTmpTrans(agreementLineReleasedLine, foundOld, foundNew, agreementLineReleasedLineOld, agreementLineReleasedLineNew, _purchLineNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>InventDim</c> records related to the specified <c>PurchLine</c> record and saves
    /// the result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> record that owns the <c>InventDim</c> record.
    /// </param>
    /// <param name="_purchLineNodeRecId">
    /// The ID field of the record in the temporary table that holds the <c>PurchLine</c> record.
    /// </param>
    protected void loadInventDim(PurchLine _purchLine, recId _purchLineNodeRecId)
    {
        InventDim   inventDim;
        InventDim   inventDimOld;
        InventDim   inventDimNew;

        boolean     foundOld;
        boolean     foundNew;

        inventDim = _purchLine.inventDim();
        if (inventDim)
        {
            if (isOldVersionArchived)
            {
                inventDimOld = PurchLineHistory::find(_purchLine, oldDateTime).inventDim();
                foundOld = (inventDimOld.RecId != 0);
            }
            else
            {
                inventDimOld = _purchLine.InventDim();
                foundOld = !_purchLine.IsDeleted;
            }

            if (isNewVersionArchived)
            {
                inventDimNew = PurchLineHistory::find(_purchLine, newDateTime).inventDim();
                foundNew = (inventDimNew.RecId != 0);
            }
            else
            {
                inventDimNew = _purchLine.InventDim();
                foundNew = !_purchLine.IsDeleted;
            }

            this.insertVersioningTmpTrans(inventDim, foundOld, foundNew, inventDimOld, inventDimNew, _purchLineNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>MarkupTrans</c> records that are related to the specified record and saves the
    /// result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_common">
    /// The record that contains the <c>MarkupTrans</c> transactions.
    /// </param>
    /// <param name="_parentNodeRecId">
    /// The record ID of the record in the temporary table that holds the parent to the <c>MarkupTrans</c>
    /// records.
    /// </param>
    protected void loadMarkup(Common _common, RecId _parentNodeRecId)
    {
        MarkupTrans                     markupTrans;
        MarkupTransMap                  markupTransOld;
        MarkupTransMap                  markupTransNew;
        RecId                           markupTransNodeRecId;

        boolean                         foundNew;
        boolean                         foundOld;

        while select markupTrans
            where markupTrans.TransTableId == _common.TableId
            &&    markupTrans.TransRecId   == _common.RecId
        {
            if (isOldVersionArchived)
            {
                markupTransOld  = MarkupTransHistory::find(markupTrans, oldDateTime);
                foundOld        = (markupTransOld.RecId != 0);
            }
            else
            {
                markupTransOld = markupTrans;
                foundOld = !markupTrans.IsDeleted;
            }

            if (isNewVersionArchived)
            {
                markupTransNew  = MarkupTransHistory::find(markupTrans, newDateTime);
                foundNew        = (markupTransNew.RecId != 0);
            }
            else
            {
                markupTransNew = markupTrans;
                foundNew = !markupTrans.IsDeleted;
            }

            markupTransNodeRecId = this.insertVersioningTmpTrans(markupTrans, foundOld, foundNew, markupTransOld, markupTransNew, _parentNodeRecId);

            this.loadAccountingDistribution(markupTrans.SourceDocumentLine, markupTransNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>PurchLine</c> records that are related to the specified <c>PurchTable</c> record
    /// and saves the result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchTable</c> record.
    /// </param>
    /// <param name="_purchTableNodeRecId">
    /// The record ID field of the record in the temporary table that holds the <c>PurchTable</c> record.
    /// </param>
    /// <remarks>
    ///  The method also analyzes the differences in the following tables:
    ///  <list type="bullet">
    ///   <item>
    ///    <description>
    ///    The <c>PurchLineForeignTradeCategory</c> table.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>AgreementLineReleasedLine</c> table.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>TaxUncommited</c> table.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>Markup</c> table.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void loadPurchLine(PurchLine _purchLine, recId _purchTableNodeRecId)
    {
        PurchLineMap                            purchLineOld;
        PurchLineMap                            purchLineNew;
        recId                                   purchLineNodeRecId;

        boolean                                 foundOld;
        boolean                                 foundNew;

        if (isOldVersionArchived)
        {
            purchLineOld = PurchLineHistory::find(_purchLine, oldDateTime);
            foundOld = (purchLineOld.RecId != 0);
        }
        else
        {
            purchLineOld = _purchLine;
            foundOld = !_purchLine.IsDeleted;
        }

        if (isNewVersionArchived)
        {
            purchLineNew = PurchLineHistory::find(_purchLine, newDateTime);
            foundNew = (purchLineNew.RecId != 0);
        }
        else
        {
            purchLineNew = _purchLine;
            foundNew = !_purchLine.IsDeleted;
        }

        purchLineNodeRecId = this.insertVersioningTmpTrans(_purchLine, foundOld, foundNew, purchLineOld, purchLineNew, _purchTableNodeRecId);

        this.loadPurchLineForeignTradeCategory( _purchLine, purchLineNodeRecId);
        this.loadAgreementLineReleasedLine(     _purchLine, purchLineNodeRecId);
        this.loadAccountingDistribution(        _purchLine.SourceDocumentLine, purchLineNodeRecId);
        this.loadMarkup(                        _purchLine, purchLineNodeRecId);
        this.loadInventDim(                     _purchLine, purchLineNodeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchLineForeignTradeCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>PurchLineForeignTradeCategory</c> record that is related to the specified
    /// <c>PurchLine</c> record and saves the result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> record that contains the <c>PurchLineForeignTradeCategory</c> transactions.
    /// </param>
    /// <param name="_purchLineNodeRecId">
    /// The record ID of the record in the temporary table that holds the <c>PurchLine</c> record.
    /// </param>
    protected void loadPurchLineForeignTradeCategory(PurchLine _purchLine, recId _purchLineNodeRecId)
    {
        PurchLineForeignTradeCategory           purchLineForeignTradeCategory;
        PurchLineForeignTradeCategoryMap        purchLineForeignTradeCategoryOld;
        PurchLineForeignTradeCategoryMap        purchLineForeignTradeCategoryNew;

        boolean                                 foundOld;
        boolean                                 foundNew;

        while select purchLineForeignTradeCategory
            where purchLineForeignTradeCategory.PurchLineDataAreaId     == _purchLine.DataAreaId
            &&    purchLineForeignTradeCategory.PurchLineInventTransId  == _purchLine.InventTransId
        {
            if (isOldVersionArchived)
            {
                purchLineForeignTradeCategoryOld = PurchLineForeignTradeCategoryHistory::find(purchLineForeignTradeCategory, oldDateTime);
                foundOld = (purchLineForeignTradeCategoryOld.RecId != 0);
            }
            else
            {
                purchLineForeignTradeCategoryOld = purchLineForeignTradeCategory;
                foundOld = !purchLineForeignTradeCategory.IsDeleted;
            }

            if (isNewVersionArchived)
            {
                purchLineForeignTradeCategoryNew = PurchLineForeignTradeCategoryHistory::find(purchLineForeignTradeCategory, newDateTime);
                foundNew = (purchLineForeignTradeCategoryNew.RecId != 0);
            }
            else
            {
                purchLineForeignTradeCategoryNew = purchLineForeignTradeCategory;
                foundNew = !purchLineForeignTradeCategory.IsDeleted;
            }

            this.insertVersioningTmpTrans(purchLineForeignTradeCategory, foundOld, foundNew, purchLineForeignTradeCategoryOld, purchLineForeignTradeCategoryNew, _purchLineNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>PurchTable</c> records and saves the result in the <c>VersioningTmpTrans</c>
    /// temporary table.
    /// </summary>
    /// <remarks>
    ///  The method also analyzes the differences in the following tables:
    ///  <list type="bullet">
    ///   <item>
    ///    <description>
    ///    The <c>Markup</c> table.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>VendPaymSched</c> table.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>PurchLine</c> table.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void loadPurchTable()
    {
        PurchTableMap                           purchTableOld;
        PurchTableMap                           purchTableNew;

        boolean                                 foundOld;
        boolean                                 foundNew;

        purchTable = PurchTable::find(purchId);

        if (isOldVersionArchived)
        {
            purchTableOld = PurchTableHistory::find(purchTable.PurchId, oldDateTime);
        }
        else
        {
            purchTableOld = purchTable;
        }
        foundOld = (purchTableOld.RecId != 0);

        if (isNewVersionArchived)
        {
            purchTableNew = PurchTableHistory::find(purchTable.PurchId, newDateTime);
        }
        else
        {
            purchTableNew = purchTable;
        }
        foundNew = (purchTableNew.RecId != 0);

        purchTableNodeRecId = this.insertVersioningTmpTrans(purchTable, foundOld, foundNew, purchTableOld, purchTableNew, 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>