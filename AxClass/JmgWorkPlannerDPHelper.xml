<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgWorkPlannerDPHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgWorkPlannerDPHelper</c> class fetches records for the <c>JmgWorkPlanner_Employee</c> and
/// <c>JmgWorkPlanner_Profile</c> reports.
/// </summary>
class JmgWorkPlannerDPHelper
{
    RecordSortedList                    profileCalendar;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the profile for the specified worker at the specified date.
    /// </summary>
    /// <param name="_personnelNumber">
    ///    The personnel number of the worker.
    /// </param>
    /// <param name="_jmgProfileGroupId">
    ///    The profile group to which the worker is assigned.
    /// </param>
    /// <param name="_profileDate">
    ///    The profile date for which to retrieve the profile.
    /// </param>
    /// <returns>
    ///    The ID of the profile to which the worker is assigned at the specified date.
    /// </returns>
    public str getProfile(HcmPersonnelNumberId _personnelNumber, str _jmgProfileGroupId, date _profileDate)
    {
        JmgProfileCalendar jmgProfileCalendar;
        jmgProfileCalendar.Date             = _profileDate;

        // Try employee
        jmgProfileCalendar.ProfileCalendarType  = JmgProfileCalendarType::Employee;
        jmgProfileCalendar.RelationNumber       = _personnelNumber;
        if (profileCalendar.find(jmgProfileCalendar) && jmgProfileCalendar.ProfileId)
        {
            return jmgProfileCalendar.ProfileId;
        }

        // Try profile group
        jmgProfileCalendar.ProfileCalendarType  = JmgProfileCalendarType::ProfileGroup;
        jmgProfileCalendar.RelationNumber       = _jmgProfileGroupId;
        if (profileCalendar.find(jmgProfileCalendar) && jmgProfileCalendar.ProfileId)
        {
            return jmgProfileCalendar.ProfileId;
        }

        // Try all
        jmgProfileCalendar.ProfileCalendarType  = JmgProfileCalendarType::All;
        jmgProfileCalendar.RelationNumber       = '';
        if (profileCalendar.find(jmgProfileCalendar) && jmgProfileCalendar.ProfileId)
        {
            return jmgProfileCalendar.ProfileId;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProfileGroups</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the list of profile group assignments from the profile calendar in the specified date
    ///    interval.
    /// </summary>
    /// <param name="_dateFrom">
    ///    The date from which to load profile calendar entries.
    /// </param>
    /// <param name="_dateTo">
    ///    The date to which to load profile calendar entries.
    /// </param>
    public void loadProfileGroups(date _dateFrom, date _dateTo)
    {
        JmgProfileCalendar  jmgProfileCalendar;

        profileCalendar = new RecordSortedList(tablenum(JmgProfileCalendar));
        profileCalendar.sortOrder(fieldnum(JmgProfileCalendar, Date),
                      fieldnum(JmgProfileCalendar, ProfileCalendarType),
                      fieldnum(JmgProfileCalendar, RelationNumber));
        while select jmgProfileCalendar
            where jmgProfileCalendar.Date           >= _dateFrom     &&
                  jmgProfileCalendar.Date           <= _dateTo
        {
            profileCalendar.ins(jmgProfileCalendar);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProfileGroups</Name>
				<Source><![CDATA[
    public RecordSortedList parmProfileGroups(RecordSortedList _profileCalendar = profileCalendar)
    {
        profileCalendar = _profileCalendar;
        return profileCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWeekHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the week header for the specified date.
    /// </summary>
    /// <param name="_date">
    ///    The date for which to retrieve the week header.
    /// </param>
    /// <returns>
    ///    The week header for the specified date.
    /// </returns>
    public static str generateWeekHeader(date _date)
    {
        //@SYS39682 is 'Week %1 (%2 - %3)'
        return strfmt("@SYS39682", wkofyr(_date), date2StrUsr(_date, DateFlags::FormatAll), date2StrUsr(_date + 6, DateFlags::FormatAll));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDayOfTheWeek</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the first day of the week to which the specified date belongs.
    /// </summary>
    /// <param name="_date">
    ///    The date for which to retrieve the week start date.
    /// </param>
    /// <returns>
    ///    The date of the first day of the week to which the specified date belongs.
    /// </returns>
    public static date getFirstDayOfTheWeek(date _date)
    {
        return _date - dayofwk(_date) + 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>