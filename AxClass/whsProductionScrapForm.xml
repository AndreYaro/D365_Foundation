<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsProductionScrapForm</Name>
	<SourceCode>
		<Declaration><![CDATA[/// <summary>
/// The <c>whsProductionScrapForm</c> class contains the business logic of the <c>whsProductionScrap</c> form.
/// </summary>
public class whsProductionScrapForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buttonOk_clicked</Name>
				<Source><![CDATA[
    void buttonOk_clicked(WHSTmpProductionScrap _whsTmpProductionScrap)
    {
        DialogButton            dialogButton;
        str                     strMessage;
        ProdBOM                 prodBOM;
        ProdTable               prodTable;
        WHSTmpProductionScrap   whsTmpProductionScrap;

        strMessage = "@WAX2269";

        dialogButton = Box::yesNo(strMessage, DialogButton::No, "@WAX2260");

        whsTmpProductionScrap.setTmpData(_whsTmpProductionScrap);

        if (dialogButton == DialogButton::Yes)
        {
            try
            {
                ttsbegin;

                while select forupdate whsTmpProductionScrap
                    where whsTmpProductionScrap.QtyToScrap
                {
                    WHSProductionScrapHistory::createProdPickingListJournal(whsTmpProductionScrap.ProdId, whsTmpProductionScrap.ItemId, whsTmpProductionScrap.QtyToScrap, whsTmpProductionScrap.UnitId);

                    whsTmpProductionScrap.populateProdBOM(whsTmpProductionScrap.ProdId, whsTmpProductionScrap.ItemId, whsTmpProductionScrap.InventTransId);
                    whsTmpProductionScrap.QtyToScrap = 0;
                    whsTmpProductionScrap.UnitId = '';
                    whsTmpProductionScrap.update();
                }

                ttscommit;
            }
            catch
            {
                whsTmpProductionScrap.clear();

                delete_from whsTmpProductionScrap;

                while select InventTransId,ItemId,ProdId from prodBOM
                {
                    prodTable = ProdTable::find(prodBOM.ProdId);

                    if (prodTable.QtyStUp > 0 && prodTable.ProdStatus != ProdStatus::Completed)
                    {
                        whsTmpProductionScrap.populateProdBOM(prodBOM.ProdId, prodBOM.ItemId, prodBOM.InventTransId);
                        whsTmpProductionScrap.insert();
                    }
                }
            }
        }

        whsTmpProductionScrap.clear();

        delete_from whsTmpProductionScrap;

        while select InventTransId,ItemId,ProdId from prodBOM
        {
            prodTable = ProdTable::find(prodBOM.ProdId);

            if (prodTable.QtyStUp > 0 && prodTable.ProdStatus != ProdStatus::Completed)
            {
                whsTmpProductionScrap.populateProdBOM(prodBOM.ProdId, prodBOM.ItemId, prodBOM.InventTransId);
                whsTmpProductionScrap.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpTable</Name>
				<Source><![CDATA[
    WHSTmpProductionScrap populateTmpTable(WHSTmpProductionScrap _whsTmpProductionScrap)
    {
        ProdBOM     prodBOM;
        ProdTable   prodTable;

        ttsbegin;

        while select InventTransId,ItemId,ProdId from prodBOM
        {
            prodTable = ProdTable::find(prodBOM.ProdId);

            if (prodTable.QtyStUp > 0 && prodTable.ProdStatus != ProdStatus::Completed)
            {
                _whsTmpProductionScrap.clear();
                _whsTmpProductionScrap.populateProdBOM(prodBOM.ProdId, prodBOM.ItemId, prodBOM.InventTransId);
                _whsTmpProductionScrap.insert();
            }
        }

        ttscommit;

        return _whsTmpProductionScrap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>