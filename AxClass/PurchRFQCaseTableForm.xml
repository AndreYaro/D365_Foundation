<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCaseTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchRFQCaseTableForm</c> class controls the behavior of the <c>PurchRFQCaseTable</c> form.
/// </summary>
class PurchRFQCaseTableForm implements SysSaveable
{
    PurchRFQCaseTable   purchRFQCaseTable;
    PurchRFQCaseLine    newlyCreatedPurchRFQCaseLine;

    PurchRFQType                        purchRFQType;
    PurchRFQType                        defaultPurchRFQType;
    PurchRFQCaseId                      rfqCaseId;
    PurchRFQCaseId                      newRFQCaseId;
    VendAccount                         vendAccount;
    boolean                             advancedStartup;
    ProjId                              projId;

    Object                              formRun;
    TradeLineNumberManager              lineNumberManager;
    private const str                   ProjectModule = 'Project';
    private const int                   CurrentVersion = 1;

    #localmacro.CurrentList
        advancedStartup
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches <c>PurchCreateOrder</c> form in order to create a new purchase order.
    /// </summary>
    /// <param name="_callerForm">
    /// An instance of the parent form.
    /// </param>
    /// <returns>
    /// Returns <c>true</c> when ok button in the <c>PurchCreateOrder</c> form is clicked.
    /// </returns>
    boolean  create(FormRun _callerForm = null)
    {
        Args            args = new Args();
        FormRun         purchCreateRFQCase;

        //caller form is set to formRun to access selected vendor account numbers
        formRun = _callerForm;

        args.name(this.createForm());
        args.caller(this);
        purchCreateRFQCase = classfactory.formRunClass(args);
        purchCreateRFQCase.init();
        purchCreateRFQCase.run();
        purchCreateRFQCase.wait();

        if (purchCreateRFQCase.closedOk())
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForm</Name>
				<Source><![CDATA[
    str createForm()
    {
        return formStr(PurchCreateRFQCase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchaseType</Name>
				<Source><![CDATA[
    PurchRFQType  defaultPurchaseType()
    {
        return PurchRFQParameters::find().PurchRFQType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAmendmentAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the amendment is editable in the <see cref="T:PurchRFQCaseTableForm" />.
    /// </summary>
    /// <param name="_purchRFQCaseTable">
    /// The <c>PurchRFQCaseTable</c> record.
    /// </param>
    /// <returns>
    /// true if amendment is editable; otherwise, false.
    /// </returns>
    boolean editAmendmentAllowed(PurchRFQCaseTable _purchRFQCaseTable)
    {
        return _purchRFQCaseTable.editAmendmentAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProjId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the project ID is editable in the <see cref="T:PurchCreateRFQCaseForm" />.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This is overridden by the <see cref="T:PurchRFQCaseTableForm_Project" />.
    /// </remarks>
    public boolean editProjId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProjSalesCurrencyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the currency code can be edited.
    /// </summary>
    /// <param name="_projId">
    ///    The ID of the project to check.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Child classes may override this method they have to.
    /// </remarks>
    public boolean editProjSalesCurrencyId(ProjId   _projId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPurchaseType</Name>
				<Source><![CDATA[
    boolean  editPurchaseType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePurchRFQReplyButton</Name>
				<Source><![CDATA[
    void enablePurchRFQReplyButton(PurchRFQCaseTable         _purchRFQCaseTable,
                                   FormFunctionButtonControl _buttonUpdateRFQ)
    {
        _buttonUpdateRFQ.enabled(_purchRFQCaseTable.StatusHigh > PurchRFQStatus::Created);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUpdateJournalButtons</Name>
				<Source><![CDATA[
    void enableUpdateJournalButtons(PurchRFQCaseTable           _purchRFQCaseTable,
                                    FormFunctionButtonControl   _buttonUpdateRFQSend)
    {
        FormDataSource          purchRFQCaseTable_ds;
        PurchRFQCaseTable       localPurchRFQCaseTable;
        PurchRFQCaseTableType   purchRFQCaseTableType;
        boolean                 enableSendButton = _buttonUpdateRFQSend ? false : true;

        purchRFQCaseTable_ds   = FormDataUtil::getFormDataSource(_purchRFQCaseTable);
        localPurchRFQCaseTable = purchRFQCaseTable_ds.getFirst(true);
        if (localPurchRFQCaseTable)
        {
            while (localPurchRFQCaseTable)
            {
                if (enableSendButton  == true)
                {
                    break;
                }

                purchRFQCaseTableType = localPurchRFQCaseTable.type();

                enableSendButton   = purchRFQCaseTableType.mayRFQBeSent();

                localPurchRFQCaseTable = purchRFQCaseTable_ds.getNext();
            }
        }
        else
        {
            purchRFQCaseTableType = _purchRFQCaseTable.type();
            enableSendButton   = purchRFQCaseTableType.mayRFQBeSent();
        }
        if (_buttonUpdateRFQSend)
            _buttonUpdateRFQSend.enabled(enableSendButton);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallerSelectedVendorAccountNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the selected vendor account number from the vendor search results form.
    /// </summary>
    /// <returns>
    /// A list of vendor account numbers.
    /// </returns>
    public List getCallerSelectedVendorAccountNumbers()
    {
        List        vendAccountNum;

        vendAccountNum = new List(Types::String);
        if (formRun != null)
        {
            vendAccountNum = formRun.getSelectedVendorAccountNumbersList();
        }
        return vendAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    void initValues()
    {
        PurchRFQParameters params = PurchRFQParameters::find();
        this.purchRFQType(params.PurchRFQType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRFQSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the RFQ is sent.
    /// </summary>
    /// <param name="_purchRFQCaseTable">
    /// The <c>PurchRFQCaseTable</c> record.
    /// </param>
    /// <returns>
    /// true if the value of <c>StatusHigh</c> field is created; otherwise, false.
    /// </returns>
    public boolean isRFQSent(PurchRFQCaseTable _purchRFQCaseTable)
    {
        boolean isRFQSent = false;

        if (_purchRFQCaseTable)
        {
            isRFQSent = _purchRFQCaseTable.StatusHigh != PurchRFQStatus::Created;
        }

        return isRFQSent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    // Template method, mustn't be named lastValueElementName
    public IdentifierName lastValueElementName()
    {
        return formStr(PurchRFQCaseTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    // Template method, mustn't be named lastValueType
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    // Template method, mustn't be named lastValueUserId
    public UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActive</Name>
				<Source><![CDATA[
    public boolean linkActive()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _source)
    {
        switch (_source.TableId)
        {
            case tablenum(PurchRFQTable):
                PurchRFQTable purchRFQTable = _source as PurchRFQTable;
                purchRFQCaseTable = PurchRFQCaseTable::find(purchRFQTable.RFQCaseID);
                break;
            case tablenum(PurchRFQLine):
                PurchRFQLine purchRFQLine = _source as PurchRFQLine;
                purchRFQCaseTable = purchRFQLine.purchRFQCaseLine().purchRFQCaseTable();
                break;
            case tablenum(PurchRFQCaseTable):
                purchRFQCaseTable = _source;
                break;
        }

        lineNumberManager = TradeLineNumberManager::construct();

        xSysLastValue::getLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRFQCaseId</Name>
				<Source><![CDATA[
    PurchId  newRFQCaseId(PurchRFQCaseId  _newRFQCaseId = newRFQCaseId)
    {
        newRFQCaseId = _newRFQCaseId;
        return newRFQCaseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>project</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns whether the class is an instance of a project.
    /// </summary>
    /// <returns>
    ///    Always false.
    /// </returns>
    /// <remarks>
    ///    This is overridden by the <see cref="T:PurchRFQCaseTableForm_Project" />.
    /// </remarks>
    public boolean project()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project ID of the request for quote transaction.
    /// </summary>
    /// <param name="_projId">
    ///    The project ID of the request for quote transaction; optional.
    /// </param>
    /// <returns>
    ///    The project ID of the request for quote transaction.
    /// </returns>
    ProjId projId(ProjId _projId = projId)
    {
        projId = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQCaseLine_Create</Name>
				<Source><![CDATA[
    public void purchRFQCaseLine_Create(PurchRFQCaseLine _purchRFQCaseLine)
    {
        this.setNewlyCreatedPurchRFQCaseLine(_purchRFQCaseLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQCaseLine_PreSuperCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the line numbers in <c>TradeLineNumberManager</c> associated with this class.
    /// </summary>
    /// <param name="_purchRFQCaseLine">
    /// A <c>PurchRFQCaseLine</c> record buffer.
    /// </param>
    public void purchRFQCaseLine_PreSuperCreate(PurchRFQCaseLine _purchRFQCaseLine)
    {
        lineNumberManager.setLine(_purchRFQCaseLine);
        lineNumberManager.setPreviousLineNumber(_purchRFQCaseLine.LineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQCaseLine_PreSuperWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the line numbers in <c>TradeLineNumberManager</c> associated with this class.
    /// </summary>
    /// <param name="_purchRFQCaseLine">
    /// A <c>PurchRFQCaseLine</c> record buffer.
    /// </param>
    public void purchRFQCaseLine_PreSuperWrite(PurchRFQCaseLine _purchRFQCaseLine)
    {
        lineNumberManager.setLine(_purchRFQCaseLine);
        lineNumberManager.preUpdateLineNumber(false, FormDataUtil::getFormDataSource(_purchRFQCaseLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQCaseTable</Name>
				<Source><![CDATA[
    PurchRFQCaseTable  purchRFQCaseTable(PurchRFQCaseTable  _purchRFQCaseTable = purchRFQCaseTable)
    {
        purchRFQCaseTable = _purchRFQCaseTable;
        lineNumberManager = TradeLineNumberManager::construct();
        return purchRFQCaseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQType</Name>
				<Source><![CDATA[
    PurchRFQType  purchRFQType(PurchRFQType  _purchRFQType = purchRFQType)
    {
        purchRFQType = _purchRFQType;
        return purchRFQType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryPurchRFQCaseLine</Name>
				<Source><![CDATA[
    Query queryPurchRFQCaseLine(Query queryPurchRFQCaseLine)
    {
        return queryPurchRFQCaseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryPurchRFQCaseTable</Name>
				<Source><![CDATA[
    Query queryPurchRFQCaseTable(Query queryPurchRFQCaseTable)
    {
        return queryPurchRFQCaseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRange</Name>
				<Source><![CDATA[
    str  queryRange()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPurchLine</Name>
				<Source><![CDATA[
    public void resetPurchLine(PurchRFQCaseLine _purchRFQCaseLine,
                               ItemId _itemId = newlyCreatedPurchRFQCaseLine.ItemId,
                               TradeLineNumber _lineNumber = newlyCreatedPurchRFQCaseLine.LineNumber)
    {
        newlyCreatedPurchRFQCaseLine.ItemId     = _itemId;
        newlyCreatedPurchRFQCaseLine.LineNumber = _lineNumber;
        _purchRFQCaseLine.data(newlyCreatedPurchRFQCaseLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewlyCreatedPurchRFQCaseLine</Name>
				<Source><![CDATA[
    protected void setNewlyCreatedPurchRFQCaseLine(PurchRFQCaseLine _newlyCreatedPurchRFQCaseLine)
    {
        newlyCreatedPurchRFQCaseLine.data(_newlyCreatedPurchRFQCaseLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProjId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the project ID in <see cref="T:PurchCreateRFQCaseForm" /> is visible or not.
    /// </summary>
    /// <returns>
    ///    Always false.
    /// </returns>
    /// <remarks>
    ///    This is overridden by <see cref="T:PurchRFQCaseTableForm_Project" />.
    /// </remarks>
    public boolean showProjId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  packedClass)
    {
        boolean         ret;
        Integer         version;

        if (typeOf(conPeek(packedClass,1)) != Types::Integer)
        {
            advancedStartup = conPeek(packedClass,1);
            ret = true;
        }
        else
        {
            version = conPeek(packedClass,1);

            switch (version)
            {
                case CurrentVersion:
                    [version, #CurrentList] = packedClass;
                    ret = true;
                    break;
                default:
                    ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    VendAccount  vendAccount(VendAccount  _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;
        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use PurchRFQCaseTableForm::newFromCommon() instead.', false, 31\05\2017)]
    public static PurchRFQCaseTableForm construct(Common                _source,
                                                  PurchRFQType          _purchRFQType = PurchRFQType::Purch,
                                                  str                   _integratingModule = '')
    {
        return PurchRFQCaseTableForm::newFromCommon(_source, _integratingModule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PurchRFQCaseTableForm</c> class.
    /// </summary>
    /// <param name = "_source">The source to create the instance from.</param>
    /// <param name = "_integratingModule">A module, to determine the subtype; optional.</param>
    /// <returns>A new instance of the <c>PurchRFQCaseTableForm</c> class.</returns>
    public static PurchRFQCaseTableForm newFromCommon(
        Common                _source,                                                  
        str                   _integratingModule = '')
    {
        switch (_integratingModule)
        {
            case ProjectModule:
                return new PurchRFQCaseTableForm_Project(_source);
        }

        return new PurchRFQCaseTableForm(_source);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDocHandling</Name>
				<Source><![CDATA[
    public static void openDocHandling(Common _common, Object _element)
    {
        FormRun     formRun;
        Args        args = new Args();

        // Open the document handling form
        args.name(formStr(DocuView));
        args.caller(_element);
        args.record(_common);
        formRun = classfactory.formRunClass(args);

        if (formRun)
        {
            formRun.init();
            formRun.run();
            formRun.detach();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openRFQCaseDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the RFQ case detail form.
    /// </summary>
    /// <param name="_purchRFQCaseTable">
    /// The <c>PurchRFQCaseTable</c> record.
    /// </param>
    /// <param name="_element">
    /// The object of caller.
    /// </param>
    public static void openRFQCaseDetail(PurchRFQCaseTable _purchRFQCaseTable, Object _element)
    {
        Args    args = new Args();

        // Open the RFQ case detail form
        args.name(formStr(PurchRFQCaseTable));
        args.caller(_element);
        args.record(_purchRFQCaseTable);

        new MenuFunction(
            menuitemDisplayStr(PurchRFQCaseTableForEdit),
            MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishRFQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publishes the RFQ if vendor exists or RFQ has status higher than received.
    /// </summary>
    /// <param name="_purchRFQCaseTable">
    /// The <c>PurchRFQCaseTable</c> record.
    /// </param>
    public static void publishRFQ(PurchRFQCaseTable _purchRFQCaseTable, Object _element)
    {
        if (_purchRFQCaseTable
            && ((_purchRFQCaseTable.rfqVendNum == PurchRFQVendNum::None 
                    && Box::yesNo("@PublicSector:PublishRequestForQuotationNoVendorMessage", DialogButton::Yes, strFmt("@PublicSector:PublishRequestForQuotation", _purchRFQCaseTable.RFQCaseId)) == DialogButton::Yes)
                || (_purchRFQCaseTable.rfqVendNum != PurchRFQVendNum::None 
					&& !_purchRFQCaseTable.type().mayRFQBeSent() 
                    && Box::yesNo("@PublicSector:PublishRequestForQuotationMessage", DialogButton::Yes, strFmt("@PublicSector:PublishRequestForQuotation", _purchRFQCaseTable.RFQCaseId)) == DialogButton::Yes)))
        {
            PurchRFQCasePublish_PSN::startPublish(_purchRFQCaseTable, _element);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSendVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the "Send" menu button is visible.
	/// </summary>
    /// <returns>
    /// true if the request for quotation case needs to have the "Send" button; otherwise, false.
	/// </returns>
    public static boolean isSendVisible()
    {	
		//
        // Make the visibility of "Send" button and "Send and publish" button mutually exclusive
		// when the configuration key is ON, the "Send and publish" button is visible, and "Send" button will be invisible.
        // when the configuration key is OFF, the "Send and publish" button is invisible, and "Send" button will be visible.
		//
        return !isConfigurationkeyEnabled(configurationKeyNum(VendorCollaboration_PSN));
	}

]]></Source>
			</Method>
			<Method>
				<Name>isSendAndPublishEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the "Send and publish" menu button is enabled.
    /// </summary>
    /// <param name = "_purchRFQCaseTable">
    /// The curent record buffer of the <c>PurchRFQCaseTable</c> table.
    /// </param>
    /// <returns>
    /// true if the "Send and publish" button should be enabled; otherwise, false.
    /// </returns>
    public static boolean isSendAndPublishEnabled(PurchRFQCaseTable _purchRFQCaseTable)
    {
        // Check RFQ case status, amended and configuration key first.
        boolean enableSendAndPublish = _purchRFQCaseTable.StatusLow < PurchRFQStatus::Received
            && !_purchRFQCaseTable.isAmended
            && isConfigurationkeyEnabled(configurationKeyNum(VendorCollaboration_PSN));

        if (enableSendAndPublish)
        {
            // Make sure RFQ case have the detail line.
            enableSendAndPublish = PurchRFQCaseLine::hasAnyLineByRFQCaseID(_purchRFQCaseTable.RFQCaseId);
        }

        return enableSendAndPublish;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPublishDateTimeVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the publish date time stamp is visible on the form.
    /// </summary>
    /// <returns>
    /// true if the publish date time is visiable for the request for quotation case; otherwise, false.
    /// </returns>
    public static boolean isPublishDateTimeVisible()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(VendorCollaboration_PSN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSendEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the "Send" menu button is enabled on the form.
    /// </summary>
    /// <param name = "_isSendNeeded">
    /// The flag for the "Send" button needed on the form.
    /// <returns>
    /// true if the "Send" button should be enabled; otherwise, false.
    /// </returns>
    public static boolean isSendEnabled(boolean _isSendNeeded)
    {
        boolean enableSend = _isSendNeeded
            && !isConfigurationkeyEnabled(configurationKeyNum(VendorCollaboration_PSN));

        return enableSend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleAmendmentControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of action pane buttons.
    /// </summary>
    /// <param name="_createButton">
    /// The object of create action pane button.
    /// </param>
    /// <param name="_cancelButton">
    /// The object of cancel action pane button.
    /// </param>
    /// <param name="_finalizeButton">
    /// The object of finalize action pane button.
    /// </param>
    /// <param name="_isCreateClicked">
    /// A boolean value that indicates if create button has been clicked.
    /// </param>
    public static void toggleAmendmentControls(
        FormFunctionButtonControl _createButton,
        FormFunctionButtonControl _cancelButton,
        FormFunctionButtonControl _finalizeButton,
        boolean                   _isCreateClicked)
    {
        _createButton.visible(!_isCreateClicked);
        _cancelButton.visible(_isCreateClicked);
        _finalizeButton.enabled(_isCreateClicked);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>