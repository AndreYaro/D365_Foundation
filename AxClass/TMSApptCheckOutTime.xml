<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSApptCheckOutTime</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSApptCheckOutTime</c> class is used to retrieve appointment checkout time from user.
/// </summary>
public class TMSApptCheckOutTime extends RunBase
{
    DialogField             nameField;
    DialogField             licenseField;
    DialogField             locationField;
    DialogField             outDateFieldUserTimeZone;
    DialogField             outDateFieldSiteTimeZone;
    DialogField             inTimeField;
    DialogField             inDateFieldUserTimeZone;
    DialogField             inDateFieldSiteTimeZone;
    DialogField             tractorField;
    DialogField             trailerField;
    DialogField             containerField;
    DialogText              timeLeftField;
    TMSDriverLog            tmsDriverLog;
    TMSAppointment          appointment;
    TMSDriverName           name;
    TMSDriverLicense        license;
    WMSLocationId           locationId;
    TMSActualEndUTCDateTime outDateTime;
    TMSTractorNumber        tractor;
    WHSTrailerNumber        trailer;
    WHSShippingContainerId  shippingContainerId;
    TMSApptId               apptId;

    const int currentVersion = 1;
    #LOCALMACRO.CurrentList
        name,
        license,
        locationId,
        outDateTime,
        tractor,
        trailer,
        shippingContainerId,
        apptId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunBase dialog;

        appointment = TMSAppointment::find(this.parmApptId());
        tmsDriverLog = tmsDriverLog::find(this.parmApptId());

        dialog              = super();
        nameField           = dialog.addFieldValue(extendedTypeStr(TMSDriverName), tmsDriverLog.DriverName);
        licenseField        = dialog.addFieldValue(extendedTypeStr(TMSDriverLicense), tmsDriverLog.DriverLicense);
        locationField       = dialog.addFieldValue(extendedTypeStr(WMSLocationId), appointment.WMSLocationId);
        tractorField        = dialog.addFieldValue(extendedTypeStr(TMSTractorNumber), appointment.TractorNumber);
        trailerField        = dialog.addFieldValue(extendedTypeStr(WHSTrailerNumber), appointment.TrailerNumber);
        containerField      = dialog.addFieldValue(extendedTypeStr(WHSShippingContainerId), appointment.WHSShippingContainerId);

        this.initDateTimeFields(dialog, appointment);

        timeLeftField    = dialog.addText(strFmt("@TRX629", tmsDriverLog.displayTimeLeft()));

        locationField.registerOverrideMethod(
            methodstr(FormStringControl, lookup),
            methodstr(TMSApptCheckOutTime, lookupWMSLocation),
            this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDateTimeFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds and initializes the date time fields of the dialog on both site and user time zone
    /// and registers the customized methods to be called when the related fields are modified.
    /// </summary>
    /// <param name = "_dialog">The current dialog</param>
    /// <param name = "_appointment">The current appointment record</param>
    private void initDateTimeFields(DialogRunBase _dialog ,TMSAppointment _appointment)
    {
        TMSDateTimeConverter apptDateTimeConverter = TMSDateTimeConverterFactory::newConverterFromBuffer(_appointment);

        inDateFieldSiteTimeZone = this.createDateTimeFieldInCustomTimeZone(
                                                                    _dialog,
                                                                    apptDateTimeConverter,
                                                                    extendedTypeStr(TMSApptToUTCDateTime),
                                                                    _appointment.ApptToUTCDateTime,
                                                                    false,
                                                                    "@TRX:PlannedEndDateTimeAtLocation",
                                                                    '');

        inDateFieldUserTimeZone = this.createDateTimeFieldInUserTimeZone(
                                                                _dialog,
                                                                apptDateTimeConverter,
                                                                extendedTypeStr(TMSApptToUTCDateTime),
                                                                _appointment.ApptToUTCDateTime,
                                                                false,
                                                                '',
                                                                '');

        outDateFieldSiteTimeZone = this.createDateTimeFieldInCustomTimeZone(
                                                            _dialog,
                                                            apptDateTimeConverter,
                                                            extendedTypeStr(TMSActualEndUTCDateTime),
                                                            DateTimeUtil::getSystemDateTime(),
                                                            true,
                                                            "@TRX:ActualEndDateTimeAtLocation",
                                                            methodStr(TMSApptCheckOutTime, modifiedDriverCheckOutTimeSiteTimeZone));

        outDateFieldUserTimeZone = this.createDateTimeFieldInUserTimeZone(
                                                                _dialog,
                                                                apptDateTimeConverter,
                                                                extendedTypeStr(TMSActualEndUTCDateTime),
                                                                DateTimeUtil::getSystemDateTime(),
                                                                true,
                                                                '',
                                                                methodStr(TMSApptCheckOutTime, modifiedDriverCheckOutTimeUserTimeZone));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDateTimeFieldInUserTimeZone</Name>
				<Source><![CDATA[
    private DialogField createDateTimeFieldInUserTimeZone(
                                DialogRunBase           _dialog,
                                TMSDateTimeConverter    _dateTimeConverter,
                                IdentifierName          _edtName,
                                TransDateTime           _dateTimeFieldValue,
                                boolean                 _controlEnabled,
                                FieldLabel              _controlLabel,
                                str                     _modifiedMethodStrToRegister)
    {
        DialogField dialogField = _dialog.addFieldValue(_edtName, _dateTimeConverter.utcToUserTimeZoneDateTime(_dateTimeFieldValue));

        return this.initDateTimeField(
                                _dialog,
                                dialogField,
                                _controlEnabled,
                                _controlLabel,
                                _modifiedMethodStrToRegister);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDateTimeFieldInCustomTimeZone</Name>
				<Source><![CDATA[
    private DialogField createDateTimeFieldInCustomTimeZone(
                                        DialogRunBase           _dialog,
                                        TMSDateTimeConverter    _dateTimeConverter,
                                        IdentifierName          _edtName,
                                        TransDateTime           _dateTimeFieldValue,
                                        boolean                 _controlEnabled,
                                        FieldLabel              _controlLabel,
                                        str                     _modifiedMethodStrToRegister)
    {
        DialogField dialogField = _dialog.addFieldValue(_edtName, _dateTimeConverter.utcToCustomDateTime(_dateTimeFieldValue));

        return this.initDateTimeField(
                                _dialog,
                                dialogField,
                                _controlEnabled,
                                _controlLabel,
                                _modifiedMethodStrToRegister);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDateTimeField</Name>
				<Source><![CDATA[
    private DialogField initDateTimeField(
                                DialogRunBase           _dialog,
                                DialogField             _dialogField,
                                boolean                 _controlEnabled,
                                FieldLabel              _controlLabel,
                                str                     _modifiedMethodStrToRegister)
    {
        _dialogField.enabled(_controlEnabled);

        if (_controlLabel)
        {
            _dialogField.label(_controlLabel);
        }

        if (_modifiedMethodStrToRegister)
        {
            _dialogField.registerOverrideMethod(methodStr(FormDateTimeControl, modified),
                                                       _modifiedMethodStrToRegister,
                                                       this);
        }

        return _dialogField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWMSLocation</Name>
				<Source><![CDATA[
    private void lookupWMSLocation(FormStringControl _control)
    {
        appointment.lookupWMSLocationId(_control, TMSCalendarType::find(appointment.CalendarTypeId).LocProfileId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (!appointment)
        {
            appointment = TMSAppointment::find(this.parmApptId());
        }

        TMSDateTimeConverter apptDateTimeConverter = TMSDateTimeConverterFactory::newConverterFromBuffer(appointment);

        outDateTime = apptDateTimeConverter.customToUTCDateTime(outDateFieldSiteTimeZone.value());
        name        = nameField.value();
        license     = licenseField.value();
        locationId  = locationField.value();
        tractor     = tractorField.value();
        trailer     = trailerField.value();
        shippingContainerId = containerField.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (this.inGetSaveLast())
        {
            return [0]; // Pack an empty container in sysLastValue
        }

        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApptId</Name>
				<Source><![CDATA[
    public TMSApptId parmApptId(TMSApptId _apptId = apptId)
    {
        apptId = _apptId;

        return apptId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        ttsBegin;

        tmsDriverLog = tmsDriverLog::find(this.parmApptId(), true);
        tmsDriverLog.ActualEndUTCDateTime   = outDateTime;
        tmsDriverLog.DriverName             = name;
        tmsDriverLog.DriverLicense          = license;
        tmsDriverLog.updateDates();
        tmsDriverLog.update();

        appointment = TMSAppointment::find(this.parmApptId(), true);
        appointment.wmsLocationId           = locationId;
        appointment.TractorNumber           = tractor;
        appointment.TrailerNumber           = trailer;
        appointment.WHSShippingContainerId  = shippingContainerId;
        appointment.update();
        appointment.createHistory(enum2str(TMSApptStatus::Completed));

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@TRX76";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TMSApptCheckOutTime tmsApptCheckOutTime = new TMSApptCheckOutTime();

        if (!_args.parm())
        {
            throw error("@WAX1921");
        }

        tmsApptCheckOutTime.getLast();
        tmsApptCheckOutTime.parmApptId(_args.parm());

        if (tmsApptCheckOutTime.prompt())
        {
            tmsApptCheckOutTime.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the driver check-out time is valid.
    /// </summary>
    /// <param name = "calledFrom">The form that calls this method.</param>
    /// <returns>True if the driver check-out time is valid; otherwise, false.</returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean result = super(calledFrom);

        if (result)
        {
            result = this.validateDriverCheckOutTimeSiteTimeZone(outDateFieldSiteTimeZone.control());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDriverCheckOutTimeSiteTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the driver check-out time is not before the driver check-in time.
    /// </summary>
    /// <param name="_control">The control containing the date and time.</param>
    /// <returns>True if the driver check-out time is after the driver check-in time; otherwise, false.</returns>
    protected boolean validateDriverCheckOutTimeSiteTimeZone(FormDateTimeControl _control)
    {
        TMSDateTimeConverter    apptDateTimeConverter = TMSDateTimeConverterFactory::newConverterFromBuffer(appointment);
        TMSActualEndUTCDateTime outDateTimeLocal = apptDateTimeConverter.customToUTCDateTime(_control.dateTimeValue());
        boolean                 result           = true;

        if ((tmsDriverLog.ActualStartUTCDateTime > outDateTimeLocal) && outDateTimeLocal != utcDateTimeNull())
        {
            result = checkFailed("@TRX207");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDriverCheckOutTimeSiteTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the date time control on the user time zone to be in sync
    /// with the value entered in the control on the site time zone.
    /// </summary>
    /// <param name = "_control">The modified control.</param>
    /// <returns>true.</returns>
    protected boolean modifiedDriverCheckOutTimeSiteTimeZone(FormDateTimeControl _control)
    {
        TMSDateTimeConverter apptDateTimeConverter = TMSDateTimeConverterFactory::newConverterFromBuffer(appointment);
        utcdatetime          controlUTCDateTime    = apptDateTimeConverter.customToUTCDateTime(_control.dateTimeValue());

        outDateFieldUserTimeZone.value(apptDateTimeConverter.utcToUserTimeZoneDateTime(controlUTCDateTime));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDriverCheckOutTimeUserTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the date time control on the site time zone to be in sync
    /// with the value entered in the control on the user time zone.
    /// </summary>
    /// <param name = "_control">The modified control.</param>
    /// <returns>true.</returns>
    protected boolean modifiedDriverCheckOutTimeUserTimeZone(FormDateTimeControl _control)
    {
        TMSDateTimeConverter apptDateTimeConverter = TMSDateTimeConverterFactory::newConverterFromBuffer(appointment);
        utcdatetime          controlUTCDateTime    = apptDateTimeConverter.userTimeZoneToUTCDateTime(_control.dateTimeValue());

        outDateFieldSiteTimeZone.value(apptDateTimeConverter.utcToCustomDateTime(controlUTCDateTime));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>