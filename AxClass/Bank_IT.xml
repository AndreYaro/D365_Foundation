<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Bank_IT extends Bank
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies an Italian bank account.
    /// </summary>
    /// <param name="_bankAccountMap">
    ///    A <c>BankAccountMap</c> representing the bank account to verify.
    /// </param>
    /// <returns>
    ///    true if the bank account is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the IBAN field is blank, the user must specify the BBAN (routing number, account number and CIN
    ///    value).The routing (registration) number field must contain 10 digits.The account number must
    ///    contain 12 characters.The account number can contain only digits and capital letters.Both the CIN
    ///    value and the IBAN value must conform to requirements.
    /// </remarks>
    public boolean checkBankAccount(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;

        ret = this.checkBankAccountNum(_bankAccountMap.AccountNum);
        if (ret)
        {
            ret = this.checkRegistrationNum(_bankAccountMap.RegistrationNum);
        }

        if (ret)
        {
            ret = this.checkCIN(_bankAccountMap);
        }

        if (ret)
        {
            ret = this.checkIBAN(_bankAccountMap);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    public boolean checkBankAccountNum(BankAccount _bankAccount)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00014, funcName());

        const int accountNumLen = 12;

        boolean ret = true;

        if (!_bankAccount)
        {
            // Bank account number must be specified.
            return checkFailed("@SYS97563");
        }
        else
        {
            if (RemoveItalianBankAccountNumLengthValidationFlight::instance().isEnabled())
            {
                if (strCmp(_bankAccount, strAlpha(strUpr(_bankAccount))))
                {
                    // The Bank account number must contain only digits and capital letters.
                    return checkFailed("@SYS97566");
                }
            }
            else
            {
                if (strLen(_bankAccount) != accountNumLen)
                {
                    // Bank account number must be %1 characters
                    return checkFailed(strFmt("@SYS97565", accountNumLen));
                }

                if (strCmp(_bankAccount, strAlpha(strUpr(_bankAccount))))
                {
                    // The Bank account number must contain only digits and capital letters.
                    return checkFailed("@SYS97566");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCIN</Name>
				<Source><![CDATA[
    protected boolean checkCIN(BankAccountMap _bankAccountMap)
    {
        const int bankCINNumLen = 1,
            modFormula = 26,
            numLen = 22,
            oddEven = 2;

        int total;

        if (!_bankAccountMap.BankCIN)
        {
            // CIN must be specified.
            return checkFailed("@SYS126846");
        }
        else
        {
            // Bank CIN number must be a single capital letter.
            if (strLen(_bankAccountMap.BankCIN) != bankCINNumLen)
            {
                return checkFailed(strFmt("@SYS126847", bankCINNumLen));
            }
            else
            {
                if ((char2num(_bankAccountMap.BankCIN, 1) > char2num('Z', 1))
                    || (char2num(_bankAccountMap.BankCIN, 1) < char2num('A', 1)))
                {
                    return checkFailed("@SYS126848");
                }
            }
        }

        str 22 s = _bankAccountMap.RegistrationNum + _bankAccountMap.BankAccountMap::normalizedAccountNum();

        for (Counter i = 1; i <= numLen; i++)
        {
            if (i mod oddEven)
            {
                total += this.getOdd(subStr(s, i, 1));
            }
            else
            {
                total += this.getEven(subStr(s, i, 1));
            }
        }

        if (_bankAccountMap.BankCIN != this.getRemainder(total mod modFormula))
        {
            // The CIN does not comply to the calculated value.
            return checkFailed("@SYS97567");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIBAN</Name>
				<Source><![CDATA[
    // Validate the IBAN field, if provided
    //
    // The IBAN must be in the following format:
    //      Position        Value/Meaning
    //       1 - 2          ISO Country Code    ("IT")
    //       3 - 4          Check Digits
    //       5              CIN                 (If the CIN field is non-empty, it must match this value)
    //       6 - 15         Routing Number      (Must contain same value as 'RegistrationNum' (Routing Number) field)
    //      16 - 27         Bank Account Number (Must contain same value as 'AccountNum' field)
    //
    //  Only Alpha-Numeric characters are allowed, so blanks
    //  and special characters must be rejected.
    //
    //  The following ECBS European community for banking standards apply given the following example:
    //          IT47D0350001605000000013333
    //
    //      1. The first four characters of the IBAN are moved to the end of the value:
    //          result: D0350001605000000013333IT47
    //
    //      2. Convert the letters to numbers in accordance with the conversion table:
    //          result: 130350001605000000013333182947
    //
    //      3. Using the result from step #2, perform a Mod 97 operation*, remainder must equal 1.
    //          * Note that if the result in step 2 is too long for the calculation, the result may be split up into
    //            consecutive remainder calculations (as is done below):
    //              a. Calculate Mod 97 of the first 9 digits:
    //                  result: (130350001 Mod 97) = 43
    //              b. Construct the next 9 digit value by taking the remainder from step a) and the next 7/8 digits from the IBAN number.
    //                  result: 436050000
    //              c. Calculate Mod 97 of resulting value from step b)
    //                  result: (436050000 Mod 97) = 80
    //              d. Repeat steps b) and c) until end of IBAN number.
    //
    private boolean checkIBAN(BankAccountMap _bankAccountMap)
    {
        const int modVal = 97,
            strLen = 99,
            subStrIdx = 9,
            nextStr = 7,
            secondFour = 5,
            lenFour = 4;

        const str IT = 'IT',
            zeroToNine = '0123456789';

        BankIBAN bankIBAN = _bankAccountMap.BankIBAN;
        str 99 text;

        if (!_bankAccountMap.BankIBAN)
        {
            return checkFailed("@SYS126845");
        }

        // Check the positions 1 and 2 must be "IT" in IBAN fields.
        if (strCmp(subStr(_bankAccountMap.BankIBAN, 1, 2), IT))
        {
            return checkFailed("@SYS126850");
        }

        // Check positions 3 and 4 must be numeric in IBAN fields
        if (strNFind(_bankAccountMap.BankIBAN, zeroToNine, 3, 2))
        {
            return checkFailed("@SYS126849");
        }

        // If the user has entered the IBAN and BBAN fields (Account Number, Routing Number and CIN), verify that the fields are equivalent:
        if (_bankAccountMap.RegistrationNum)
        {
            // Registration number must be the same as characters 6 - 15 of the IBAN number:
            if (_bankAccountMap.RegistrationNum != subStr(_bankAccountMap.BankIBAN, 6, 10))
            {
                // The routing number must match the routing number portion of the IBAN.
                return checkFailed("@SYS98588");
            }
        }

        if (!RemoveItalianBankAccountNumLengthValidationFlight::instance().isEnabled())
        {
            if (_bankAccountMap.AccountNum)
            {
                if (_bankAccountMap.AccountNum != subStr(_bankAccountMap.BankIBAN, 16, 12))
                {
                    // The account number must match the account number portion of the IBAN.
                    return checkFailed("@SYS98589");
                }
            }
        }

        if (_bankAccountMap.BankCIN && _bankAccountMap.BankCIN != subStr(_bankAccountMap.BankIBAN, 5, 1))
        {
                // The CIN must match the CIN portion of the IBAN if CIN is filled
                return checkFailed("@SYS98590");
        }

        // Move the first four characters to the end of the string...
        bankIBAN = subStr(bankIBAN, secondFour, strLen(bankIBAN)) + subStr(bankIBAN, 1, lenFour);

        // Convert IBAN to all digits...
        for (int i = 1; i <= strLen(bankIBAN); i ++)
        {
            text += this.getDigits(subStr(bankIBAN, i, 1));
        }

        str modulo = num2str(str2int(subStr(text, 1, subStrIdx)) mod modVal, 0, 0, 0, 0);

        int a = subStrIdx;

        while (a <= strLen(text))
        {
            modulo = num2str(str2int(modulo + subStr(text, a + 1, nextStr)) mod modVal, 0, 0, 0, 0);
            a += nextStr;
        }

        if (str2num(modulo) != 1)
        {
            // The IBAN has an incorrect check digit.
            return checkFailed("@SYS97568");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegistrationNum</Name>
				<Source><![CDATA[
    protected boolean checkRegistrationNum(BankRegNum _bankRegNum)
    {
        const int routingNumLen = 10;
        const str digits = '0123456789';

        boolean ret = true;

        if (!_bankRegNum)
        {
            // Routing number must be specified.
            return checkFailed("@SYS97562");
        }
        else
        {
            if ((strLen(_bankRegNum) != routingNumLen || strRem(_bankRegNum, digits)))
            {
                // Number of digits in routing number must be: 10
                return checkFailed(strFmt("@SYS82462", routingNumLen));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDigits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A helper function for the <c>validateIBAN</c> function; it converts alphabetic characters to
    ///    numeric values.
    /// </summary>
    /// <param name="_character">
    ///    A character to convert to a numeral.
    /// </param>
    /// <returns>
    ///    A 2-digit string that represents a numeral.
    /// </returns>
    /// <remarks>
    /// This is a helper function for the validateIBAN method.
    ///
    ///      When validating the IBAN, each alphabetic character needs to
    ///      be converted to a numeric value, this function handles that conversion.
    ///
    ///      a/A = "10"
    ///      b/B = "11"
    ///       ...
    ///      z/Z = "35"
    ///</remarks>
    private str 2 getDigits(str 1 _character)
    {
        const int offset = 9,
            ASCII0 = 48,
            ASCII9 = 57;

        str 2 digitValue;

        int digitAsASCII = char2Num(_character, 1);
        if (digitAsASCII < ASCII0 || digitAsASCII > ASCII9)
        {
            int charOffset = this.resolveOffset(_character, false);
            if (charOffset > 0)
            {
                charOffset += offset;
                digitValue = int2Str(charOffset);
            }
        }
        else
        {
            digitValue = _character;
        }

        return digitValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEven</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the Even Numeric value based on the conversion table.
    /// </summary>
    /// <param name="_character">
    ///    The character for which to retrieve the Even Numeric value.
    /// </param>
    /// <returns>
    ///    The Even Numeric value.
    /// </returns>
    /// <remarks>
    ///    This function is a helper function for the <c>validateCIN</c> function.The following information is
    ///    the conversion table used for determining the Even Numeric value:		(Code Example Removed)
    /// </remarks>
    // Return the 'Even Numeric Value' for validating the Control Internal Number (CIN)
    // based on the following conversion table:
    //
    //Character   Value  |  Character  Value  |  Character   Value
    //  a/A/0       0           k/K      10           u/U      20
    //  b/B/1       1           l/L      11           v/V      21
    //  c/C/2       2           m/M      12           w/W      22
    //  d/D/3       3           n/N      13           x/X      23
    //  e/E/4       4           o/O      14           y/Y      24
    //  f/F/5       5           p/P      15           z/Z      25
    //  g/G/6       6           q/Q      16
    //  h/H/7       7           r/R      17
    //  i/I/8       8           s/S      18
    //  j/J/9       9           t/T      19
    private int getEven(str 1 _character)
    {
        int evenValue = 0;

        int evenOffset = this.resolveOffset(_character, true);
        if (evenOffset > 0)
        {
            evenValue = evenOffset - 1;
        }

        return evenValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOdd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the Odd Numeric value based on the conversion table. This function is a helper function for
    ///    the <c>validateCIN</c> function.
    /// </summary>
    /// <param name="_character">
    ///    The character for which the Odd Numeric value is returned.
    /// </param>
    /// <returns>
    ///    The Odd Numeric value of the character.
    /// </returns>
    /// <remarks>
    ///    The following information is the conversion table used for determining Odd Numeric value:		(Code
    ///    Example Removed)
    /// </remarks>
    // Return the 'Odd Numeric Value' for validating the Control Internal Number (CIN)
    // based on the following conversion table:
    //
    //Character   Value  |  Character  Value  |  Character   Value
    //  a/A/0       1           k/K       2           u/U      16
    //  b/B/1       0           l/L       4           v/V      10
    //  c/C/2       5           m/M      18           w/W      22
    //  d/D/3       7           n/N      20           x/X      25
    //  e/E/4       9           o/O      11           y/Y      24
    //  f/F/5      13           p/P       3           z/Z      23
    //  g/G/6      15           q/Q       6
    //  h/H/7      17           r/R       8
    //  i/I/8      19           s/S      12
    //  j/J/9      21           t/T      14
    private int getOdd(str 1 _character)
    {
        const container oddValues = [1, 0, 5, 7, 9, 13, 15, 17, 19, 21, 2, 4, 18, 20, 11, 3, 6, 8, 12, 14, 16, 10, 22, 25, 24, 23];

        int oddValue = 0;

        int oddOffset = this.resolveOffset(_character, true);
        if (oddOffset > 0)
        {
            oddValue =  conPeek(oddValues, oddOffset);
        }

        return oddValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts an integer value to its alphabetic equivalent.
    /// </summary>
    /// <param name="_digit">
    ///    An integer value to convert to its alphabetic equivalent.
    /// </param>
    /// <returns>
    ///    A string containing the alphabetic equivalent of the integer value.
    /// </returns>
    // Given an integer value, return the Alphabetic equivalent:
    //
    //      0  = "a"
    //      1  = "b"
    //        ...
    //      25 = "z"
    private str 1 getRemainder(int _digit)
    {
        const int ASCIIA = 97,
            validChars = 25;

        str 1 alphaValue;

        // If the number provided is valid...
        if ((_digit >= 0) && (_digit <= validChars))
        {
            // Return the alphabetic representation...
            // Note: "a" has an ASCII value of 97, adding 97
            //       corresponds to the correct ASCII character.
            alphaValue = num2Char(_digit + ASCIIA);
        }

        return alphaValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveOffset</Name>
				<Source><![CDATA[
    // Given a character, this function will resolve it's offset that will be
    // used to retrieve it's corresponding value from the appropriate container.
    //
    //Character  Offset  |  Character  Offset  |  Character  Offset
    //  a/A/0       1           k/K      11           u/U      21
    //  b/B/1       2           l/L      12           v/V      22
    //  c/C/2       3           m/M      13           w/W      23
    //  d/D/3       4           n/N      14           x/X      24
    //  e/E/4       5           o/O      15           y/Y      25
    //  f/F/5       6           p/P      16           z/Z      26
    //  g/G/6       7           q/Q      17
    //  h/H/7       8           r/R      18
    //  i/I/8       9           s/S      19
    //  j/J/9      10           t/T      20
    private int resolveOffset(str 1 _character, boolean _allowNumeric)
    {
        const int ASCII0 = 48,
            ASCII9 = 57,
            ASCIIA = 65,
            ASCIIZ = 90,
            ASCII_a = 97,
            ASCII_z = 122,
            offsetNum = 47,
            offsetUpper = 64,
            offsetLower = 96;

        int offsetValue;

        // Convert the digit to it's ASCII value
        int digitAsASCII = char2Num(_character, 1);

        if (_allowNumeric)
        {
            // If the character is Numeric (0 - 9)
            if (digitAsASCII >= ASCII0 && digitAsASCII <=ASCII9)
            {
                offsetValue = digitAsASCII - offsetNum;
            }
        }

        // If the character is an Upper-Case character (A - Z)
        if (digitAsASCII >= ASCIIA && digitAsASCII <= ASCIIZ)
        {
            offsetValue = digitAsASCII - offsetUpper;
        }

        // If the character is a Lower-Case character (a - z)
        else if (digitAsASCII >= ASCII_a && digitAsASCII <= ASCII_z)
        {
            offsetValue = digitAsASCII - offsetLower;
        }

        return offsetValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        boolean ret = true,
            accountNumValid = true,
            registrationNumValid = true,
            cinValid = true,
            ibanValid = true;

        //AccountNum
        if (_bankAccountMap.AccountNum && _bankAccountMap.fieldAccessRight(fieldStr(BankAccountMap, AccountNum)) != AccessRight::NoAccess)
        {
            accountNumValid = this.checkBankAccountNum(_bankAccountMap.AccountNum);
        }

        //RegistrationNum
        if (_bankAccountMap.RegistrationNum)
        {
            registrationNumValid = this.checkRegistrationNum(_bankAccountMap.RegistrationNum);
        }

        //BankCIN
        if (accountNumValid && registrationNumValid)
        {
            if (_bankAccountMap.BankCIN && _bankAccountMap.BankCIN != _bankAccountMap.orig().BankCIN)
            {
                //The user must have bank account number access
                cinValid = this.checkCIN(_bankAccountMap);
            }
        }

        //BankIBAN
        if (accountNumValid && registrationNumValid && cinValid)
        {
            if (this.getBankIBANAccessRight(_bankAccountMap) != AccessRight::NoAccess)
            {
                if ((!_bankAccountMap.BankIBAN) || (_bankAccountMap.BankIBAN && _bankAccountMap.BankIBAN != _bankAccountMap.orig().BankIBAN))
                {
                    //The user must have bank account number access
                    ibanValid = this.checkIBAN(_bankAccountMap);
                }
            }
        }

        if (accountNumValid == false
            || registrationNumValid == false
            || cinValid == false
            || ibanValid == false)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Bank_IT construct()
    {
        return new Bank_IT();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>