<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdTable_InventDim</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>InventDim</c> datasource of the <c>ProdTable</c> form
/// </summary>
/// <remarks>
/// See <c>PmfFormCtrl_ProdTable_ProdTable</c> for the form control handler
/// for the <c>ProdTable</c> datasource
/// </remarks>
public class PmfFormCtrl_ProdTable_InventDim
    extends PmfFormCtrl
{
    boolean   calledFromProdProcessBatch;

    ProdTable prodTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute additional validations for the fields of the <c>InventDim</c> datasource
    /// </summary>
    /// <param name="_fieldId">
    /// The field id to validate
    /// </param>
    /// <returns>
    /// true, if the validations succeed
    /// </returns>
    public boolean fieldValidate(fieldId _fieldId)
    {
        boolean ret;
        InventDim inventDim = buffer;

        ret = super(_fieldId);

        if (ret)
        {
            switch (_fieldId)
            {
                case fieldnum(InventDim, InventBatchId):
                    if (#PdsShelfEnabled)
                    {
                        ret = InventBatch::pdsCheckExpiryDate(
                                                inventDim.InventBatchId,
                                                prodTable.ItemId,
                                                prodTable.DlvDate);
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class form control caller variables prior to form initialization.
    /// </summary>
    /// <remarks>
    /// Determines if the form should be adjusted to be used with a production batch order.
    /// </remarks>
    public void initPre()
    {
        FormRun     prodTableForm = this.parmFormRun();
        SalesLine   salesLine;

        if (prodTableForm.args().menuItemName() == menuitemdisplaystr(PmfProdProcessBatch) ||
            prodTableForm.args().menuItemName() == menuitemdisplaystr(CostPmfProdTableDetailsList))
        {
            calledFromProdProcessBatch = true;

            switch (prodTableForm.args().dataset())
            {
                case tablenum(SalesLine) :

                    salesLine = prodTableForm.args().record();

                    if (salesLine.inventTable().isFormulaAllowed())
                    {
                        calledFromProdProcessBatch = true
                            && PmfBatchOrderReferences
                                    ::hasSalesLineBatchOrders(salesLine);
                    }

                    break;
            }
        }

        calledFromProdProcessBatch = calledFromProdProcessBatch
            || this.menuItemName() == menuitemdisplaystr(PmfProdProcessBatch)
            || (this.caller()
                && this.caller().name() == formstr(ProdTableOverview)
                && this.caller().pmfIsEnabled());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId != tablenum(ProdTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        prodTable = _datasources2;

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_ProdTable_InventDim construct()
    {
        return new PmfFormCtrl_ProdTable_InventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_ProdTable_InventDim newFromForm(
        FormRun _fr)
    {
        PmfFormCtrl_ProdTable_InventDim frmCtrl;

        frmCtrl = PmfFormCtrl_ProdTable_InventDim::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>