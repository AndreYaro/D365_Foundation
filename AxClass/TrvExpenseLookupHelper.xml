<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseLookupHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for expense report related lookups.
/// </summary>
public static class TrvExpenseLookupHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryCompanyLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query of the <c>CompanyInfo</c> table with the <c>InterCompany</c> value enabled.
    /// </summary>
    /// <returns>
    /// A query that returns a list of companies with intercompany enabled
    /// </returns>
    public static Query buildQueryCompanyLookup()
    {
        LedgerInterCompany          ledgerInterCompany;
        Query                       query;
        QueryBuildDataSource        queryBuildDataSource;

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(CompanyInfo));
        queryBuildDataSource.addOrderByField(fieldNum(CompanyInfo, DataArea), SortOrder::Ascending);
        queryBuildDataSource.addRange(fieldNum(CompanyInfo, DataArea)).value(curext());

        while select DestinationCompany from ledgerInterCompany
            where ledgerInterCompany.OriginatingCompany == curExt()
        {
            queryBuildDataSource.addRange(fieldNum(CompanyInfo, DataArea)).value(ledgerInterCompany.DestinationCompany);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInterCompanyLegalEntityLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Attaches a custom lookup for inter company legal entity field to the calling control.
    /// </summary>
    /// <param name="_formControl">
    ///     The calling form control.
    /// </param>
    public static void createInterCompanyLegalEntityLookup(FormControl _formControl)
    {
        Query query;
        SysTableLookup sysTableLookup;

        query = TrvExpenseLookupHelper::buildQueryCompanyLookup();

        sysTableLookup = SysTableLookup::newParameters(tableNum(CompanyInfo), _formControl);

        sysTableLookup.addLookupField(fieldNum(CompanyInfo, DataArea), true);
        sysTableLookup.addLookupField(fieldNum(CompanyInfo, Name));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpensePurposeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the expense line purpose lookup given the cost type.
    /// </summary>
    /// <param name = "_formControl">
    ///     The caller form control.
    /// </param>
    /// <param name = "_costType">
    ///     The cost type to filter from purpose setup.
    /// </param>
    public static void createExpensePurposeLookup(FormControl _formControl, TrvCostTypeEDT _costType)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        TrvCostType             trvCostType = TrvCostType::find(_costType);

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TrvLinePurpose), _formControl);

        sysTableLookup.addLookupField(fieldNum(TrvLinePurpose, BusinessPurpose));

        queryBuildDataSource = query.addDataSource(tableNum(TrvLinePurpose));
        queryBuildDataSource.addRange(fieldNum(TrvLinePurpose, ExpenseType)).value(queryValue(trvCostType.ExpType));
        queryBuildDataSource.addRange(fieldNum(TrvLinePurpose, ExpenseType)).value(queryValue(TrvExpType::Empty));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpenseReportPurposeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the expense report purpose lookup.
    /// </summary>
    /// <param name = "_formControl">
    ///     The caller form control.
    /// </param>
    public static void createExpenseReportPurposeLookup(FormControl _formControl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(TrvTravelTxt), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tablenum(TrvTravelTxt));

        sysTableLookup.addLookupfield(fieldnum(TrvTravelTxt, Txt), true);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpenseReportVehicleTypeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the expense report vehicle type lookup, showing all vehicle types setup for a specific Mileage
    ///     expense category.
    /// </summary>
    /// <param name = "_formControl">
    ///     The caller form control.
    /// </param>
    /// <param name = "_costType">
    ///     The cost type to filter from vehicle type.
    /// </param>
    public static void createExpenseReportVehicleTypeLookup(FormControl _formControl, TrvCostTypeEDT _costType)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(TrvCostTypeRates), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tablenum(TrvCostTypeRates));

        queryBuildDataSource.addRange(fieldNum(TrvCostTypeRates, CostType)).value(queryValue(_costType));
        queryBuildDataSource.addGroupByField(fieldnum(TrvCostTypeRates, VehicleType));

        sysTableLookup.addLookupField(fieldnum(TrvCostTypeRates, VehicleType), true);
        sysTableLookup.addSelectionField(fieldnum(TrvCostTypeRates, VehicleType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.parmUseLookupValue(false);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpenseReportLocationLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the expense report location lookup.
    /// </summary>
    /// <param name = "_formControl">
    ///     The caller form control.
    /// </param>
    public static void createExpenseReportLocationLookup(FormControl _formControl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(TrvDestinations), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tablenum(TrvDestinations));

        sysTableLookup.addLookupfield(fieldnum(TrvDestinations, Destination), true);
        sysTableLookup.addLookupfield(fieldnum(TrvDestinations, Description));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentMethodLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a query for the payment method lookup for the specified category.
    /// </summary>
    /// <param name="_costType">
    /// The category ID.
    /// </param>
    /// <param name = "_excludeImportOnly">
    /// Specify whether Payment methods of type Import only are excluded.
    /// </param>
    /// <returns>
    /// A query for the payment method lookup for the specified category.
    /// </returns>
    public static Query paymentMethodLookupQuery(TrvCostTypeEDT _costType, boolean _excludeImportOnly=false)
    {
        Query                   query;
        QueryBuildDataSource    qbPayMethod, qbValidatePayment;
        TrvCostType             trvCostType;

        trvCostType = TrvCostType::find(_costType);

        query = new Query();

        qbPayMethod = query.addDataSource(tableNum(TrvPayMethod));

        if (trvCostType)
        {
            query.queryType(QueryType::Join);

            qbValidatePayment = qbPayMethod.addDataSource(tableNum(TrvValidatePayment));
            qbValidatePayment.addLink(fieldNum(TrvPayMethod,PayMethod),fieldNum(TrvValidatePayment,PayMethod));
            qbValidatePayment.joinMode(JoinMode::ExistsJoin);

            qbValidatePayment.addRange(fieldNum(TrvValidatePayment, CostType)).value(SysQuery::value(trvCostType.CostType));
        }

        if (_excludeImportOnly)
        {
            QueryBuildRange qbr = qbPayMethod.addRange(fieldNum(TrvPayMethod, AutomaticPayment));
            qbr.value(queryValue(NoYes::No));
            qbr.Status(RangeStatus::Hidden);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentMethodLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the expense payment method lookup given the cost type.
    /// </summary>
    /// <param name = "_formControl">
    ///     The caller form control.
    /// </param>
    /// <param name = "_costType">
    ///     The cost type to filter from payment method.
    /// </param>
    /// <param name = "_excludeImportOnly">
    ///     Specify whether Payment methods of type Import only are excluded.
    /// </param>
    public static void createPaymentMethodLookup(FormControl _formControl, TrvCostTypeEDT _costType, boolean _excludeImportOnly=false)
    {
        Query           query = TrvExpenseLookupHelper::paymentMethodLookupQuery(_costType, _excludeImportOnly);
        SysTableLookup  sysTableLookup = SysTableLookup::newParameters(tableNum(TrvPayMethod), _formControl);

        sysTableLookup.addLookupField(fieldNum(TrvPayMethod, PayMethod), true);
        sysTableLookup.addLookupField(fieldNum(TrvPayMethod, PostMethod));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the value entered for the expense payment method.
    /// </summary>
    /// <param name = "_value">
    ///     The payment method to validate.
    /// </param>
    /// <param name = "_costType">
    ///     The cost type to filter from payment method.
    /// </param>
    /// <param name = "_excludeImportOnly">
    ///     Specify whether Payment methods of type Import only are excluded.
    /// </param>
    /// <returns>
    ///     The result of the validation: true or false.
    /// </returns>
    public static boolean validatePaymentMethod(TrvPayMethodEDT _value, TrvCostTypeEDT _costType, boolean _excludeImportOnly)
    {
        boolean ret;
        Query query = TrvExpenseLookupHelper::paymentMethodLookupQuery(_costType, _excludeImportOnly);

        if (_value)
        {
            QueryBuildRange qbr = query.dataSourceTable(tableNum(TrvPayMethod)).addRange(fieldNum(TrvPayMethod, PayMethod));
            qbr.value(queryValue(_value));

            QueryRun qr = new QueryRun(query);
            if (qr.next())
            {
                ret=true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStateLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the expense line State lookup.
    /// </summary>
    /// <param name = "_formControl">
    ///     The caller form control.
    /// </param>
    /// <param name = "_countryRegion">
    ///     The country region where the State lookup should show.
    /// </param>
    public static void createStateLookup(FormControl _formControl, LogisticsAddressCountryRegionId _countryRegion)
    {
        Query                           query = new Query();
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;
        LogisticsAddressCountryRegion   countryRegion = LogisticsAddressCountryRegion::find(_countryRegion);

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(LogisticsAddressState), _formControl);

        sysTableLookup.addLookupField(fieldNum(LogisticsAddressState, CountryRegionId));
        sysTableLookup.addLookupField(fieldNum(LogisticsAddressState, StateId), true);
        sysTableLookup.addLookupField(fieldNum(LogisticsAddressState, Name));

        queryBuildDataSource = query.addDataSource(tableNum(LogisticsAddressState));
        if (countryRegion.RecId)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(LogisticsAddressState, CountryRegionId));
            queryBuildRange.value(queryValue(countryRegion.CountryRegionId));
            queryBuildRange.status(RangeStatus::Hidden);

            queryBuildDataSource.addSortField(fieldNum(LogisticsAddressState, StateId));
        }

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpenseSubCategoryLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the expense sub category given the cost type.
    /// </summary>
    /// <param name = "_formControl">
    ///     The caller form control.
    /// </param>
    /// <param name = "_costType">
    ///     The cost type to filter from purpose setup.
    /// </param>
    /// <returns>
    ///     Sys lookup table reference.
    /// </returns>
    public static Common createExpenseSubCategoryLookup(FormControl _formControl, TrvCostTypeEDT _costType)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsSubCategory;
        TrvCostType             trvCostType = TrvCostType::find(_costType);

        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(TrvExpSubCategory), _formControl);

        qbdsSubCategory = query.addDataSource(tableNum(TrvExpSubCategory));
        qbdsSubCategory.addRange(fieldNum(TrvExpSubCategory, CostType)).value(queryValue(trvCostType.CostType));
        qbdsSubCategory.addRange(fieldNum(TrvExpSubCategory, IsInactive)).value(queryValue(NoYes::No));
        qbdsSubCategory.addOrderByField(fieldNum(TrvExpSubCategory, DisplayOrder), SortOrder::Ascending);

        sysTableLookup.addLookupField(fieldNum(TrvExpSubCategory, TrvSharedSubCategory));
        sysTableLookup.parmQuery(query);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCityLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the expense line city lookup.
    /// </summary>
    /// <param name = "_formControl">
    ///     The caller form control.
    /// </param>
    /// <param name = "_countryRegion">
    ///     The country region where the city lookup should show.
    /// </param>
    public static void createCityLookup(FormControl _formControl, LogisticsAddressCountryRegionId _countryRegion)
    {
        Query                           query = new Query();
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;
        LogisticsAddressCountryRegion   countryRegion = LogisticsAddressCountryRegion::find(_countryRegion);

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(LogisticsAddressCity), _formControl);

        sysTableLookup.addLookupField(fieldNum(LogisticsAddressCity, Name));
        sysTableLookup.addLookupField(fieldNum(LogisticsAddressCity, CityKey));
        sysTableLookup.addLookupField(fieldNum(LogisticsAddressCity, Description));
        sysTableLookup.addLookupField(fieldNum(LogisticsAddressCity, StateId));
        sysTableLookup.addLookupField(fieldNum(LogisticsAddressCity, CountryRegionId));

        queryBuildDataSource = query.addDataSource(tableNum(LogisticsAddressCity));
        if (countryRegion.RecId)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(LogisticsAddressCity, CountryRegionId));
            queryBuildRange.value(queryValue(countryRegion.CountryRegionId));
            queryBuildRange.status(RangeStatus::Hidden);

            queryBuildDataSource.addSortField(fieldNum(LogisticsAddressCity, CountryRegionId));
        }

        queryBuildDataSource.addSortField(fieldNum(LogisticsAddressCity, Name));
        queryBuildDataSource.addSortField(fieldNum(LogisticsAddressCity, StateId));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createZipcodeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the expense line zip code lookup.
    /// </summary>
    /// <param name = "_formControl">
    ///     The caller form control.
    /// </param>
    /// <param name = "_countryRegion">
    ///     The country region where the zip code lookup should show.
    /// </param>
    public static void createZipcodeLookup(FormControl _formControl, LogisticsAddressCountryRegionId _countryRegion)
    {
        Query                           query = new Query();
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;
        LogisticsAddressCountryRegion   countryRegion = LogisticsAddressCountryRegion::find(_countryRegion);

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(LogisticsAddressZipCode), _formControl);

        sysTableLookup.addLookupField(fieldNum(LogisticsAddressZipCode, ZipCode), true);
        sysTableLookup.addLookupField(fieldNum(LogisticsAddressZipCode, City));

        queryBuildDataSource = query.addDataSource(tableNum(LogisticsAddressZipCode));
        if (countryRegion.RecId)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(LogisticsAddressZipCode, CountryRegionId));
            queryBuildRange.value(queryValue(countryRegion.CountryRegionId));
            queryBuildRange.status(RangeStatus::Hidden);

            queryBuildDataSource.addSortField(fieldNum(LogisticsAddressZipCode, ZipCode));
            queryBuildDataSource.addSortField(fieldNum(LogisticsAddressZipCode, City));
        }

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpenseCategoryLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for expense categories.
    /// </summary>
    /// <param name = "_formControl">The control on which the lookup is to be performed.</param>
    /// <param name = "_lookupType">The <c>TrvLookupType</c> corresponding to the lookup query to build.</param>
    public static void createExpenseCategoryLookup(FormControl _formControl, TrvCategoryLookupType _lookupType)
    {
        Query query;
        SysTableLookup  sysTableLookup = SysTableLookup::newParameters(tableNum(TrvCostType), _formControl);
        sysTableLookup.addLookupField(fieldNum(TrvCostType, CostType));
        sysTableLookup.addLookupField(fieldNum(TrvCostType, CostTxt));
        
        //cursor can be null, when called from bulk edit screen.
        ProjId projId;
        if (_formControl.dataSourceObject())
        {
            FormDataSource control_ds = _formControl.dataSourceObject();
            TrvExpTrans trvExpTrans = control_ds.cursor() as TrvExpTrans;
            projId = trvExpTrans.ProjId ? trvExpTrans.ProjId : TrvExpTable::findRecId(trvExpTrans.TrvExpTable).ProjId;
        }

        //if validation group setup is present then filters should be added based on the setup.
        if (projId && ProjTable::find(projId).ValidateProjCategory)
        {
            query = TrvExpenseLookupHelper::buildResourceCategoryLookupQuery(_lookupType);
        }
        else
        {
            query = TrvExpenseLookupHelper::buildExpenseCategoryLookup(_lookupType);
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpenseReportLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for all expense reports in the current company.
    /// </summary>
    /// <param name = "_formControl">The control on which the lookup is to be performed.</param>
    /// <param name = "_legalEntity">The company for which all the expense reports are to be shown. Defaulted to current legal entity.</param>
    /// <remarks>This lookup will show the expense number, expense purpose, creating worker name and approval status in that order.</remarks>
    public static void createExpenseReportLookup(FormControl _formControl, LegalEntity _legalEntity = CompanyInfo::current())
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds_trvExpTable, qbds_hcmWorker;
        QueryBuildRange         queryBuildRange;

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TrvExpTable), _formControl);
        sysTableLookup.addLookupField(fieldNum(TrvExpTable, ExpNumber), true);
        sysTableLookup.addLookupField(fieldNum(TrvExpTable, Txt2));
        sysTableLookup.addLookupField(fieldNum(HcmWorker, PersonnelNumber));
        sysTableLookup.addLookupField(fieldNum(TrvExpTable, ApprovalStatus));

        qbds_trvExpTable = query.addDataSource(tableNum(TrvExpTable));
        qbds_trvExpTable.addRange(fieldnum(TrvExpTable, LegalEntity)).value(SysQuery::value(_legalEntity));
        qbds_trvExpTable.addOrderByField(fieldNum(TrvExpTable, ExpNumber), SortOrder::Descending);

        qbds_hcmWorker = qbds_trvExpTable.addDataSource(tableNum(HcmWorker));
        qbds_hcmWorker.addLink(fieldNum(TrvExpTable,CreatingWorker), fieldNum(HcmWorker,RecId));
        qbds_hcmWorker.joinMode(JoinMode::InnerJoin);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpenseReportLookupForWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for all editable expense reports for a given worker and company
    /// </summary>
    /// <param name = "_formControl">The control on which the lookup is to be performed.</param>
    /// <param name = "_workerRecId">The worker for the expense reports to be shown.</param>
    /// <param name = "_legalEntity">The company for which the expense reports are to be shown. Defaulted to current legal entity.</param>
    /// <remarks>This lookup will show the expense number, expense purpose, creating worker name and approval status in that order.</remarks>
    public static void createExpenseReportLookupForWorker(FormControl _formControl, HcmWorkerRecId _workerRecId, LegalEntity _legalEntity = CompanyInfo::current())
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TrvExpTable), _formControl);
        
        sysTableLookup.addLookupField(fieldNum(TrvExpTable, ExpNumber), true);
        sysTableLookup.addLookupField(fieldNum(TrvExpTable, Txt2));
        sysTableLookup.addLookupField(fieldNum(HcmWorker, PersonnelNumber));
        sysTableLookup.addLookupField(fieldNum(TrvExpTable, ApprovalStatus));

        Query query = TrvExpenseLookupHelper::buildQueryExpenseReportLookupForWorker(_workerRecId,_legalEntity);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveExpenseReportLookupForWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether expense report selected matches a record provided by the lookup
    /// </summary>
    /// <param name = "_expNumber">The expense report number selected</param>
    /// <param name = "_workerRecId">The worker for the expense repor.</param>
    //  <param name = "_legalEntity">The company for  the expense report. Defaulted to current legal entity.</param>
    /// <param name = "_isEditable">Whether the method should validate that selected expense report is editable.</param>
    /// <returns>True if selected expense report is valid; otherwise, false.</returns>
    public static boolean resolveExpenseReportLookupForWorker(TrvExpNumber _expNumber, HcmWorkerRecId _workerRecId, LegalEntity _legalEntity = CompanyInfo::current(), boolean _checkEditable = true)
    {
        TrvExpTrans localExpTrans;
        localExpTrans.ExpNumber = _expNumber;
        localExpTrans.CreatingWorker = _workerRecId;
        localExpTrans.LegalEntity = _legalEntity;
        return localExpTrans.validateExpNumber(_checkEditable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryExpenseReportLookupForWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query with <c>TrvExpTable</c> table and <c>HcmWorker</c> table
    /// with inner join on <c>CreatingWorker</c> field from <c>TrvExpTable</c> and <c>RecId</c> from <c>HcmWorker</c>
    /// </summary>
    /// <param name = "_workerRecId">The worker record identifier for the expense report.</param>
    //  <param name = "_legalEntity">The company for  the expense report.</param>
    /// <returns>
    /// A query that returns a list of the expense reports which by the specified worker record identifier and the legal entity.
    /// </returns>
    public static Query buildQueryExpenseReportLookupForWorker(HcmWorkerRecId _workerRecId, LegalEntity _legalEntity)
    {
        Query   query = new Query();
        
        QueryBuildDataSource qbds_trvExpTable = query.addDataSource(tableNum(TrvExpTable));
        qbds_trvExpTable.addOrderByField(fieldNum(TrvExpTable, ExpNumber), SortOrder::Descending);

        qbds_trvExpTable.addRange(fieldnum(TrvExpTable, LegalEntity)).value(SysQuery::value(_legalEntity));
        qbds_trvExpTable.addRange(fieldnum(TrvExpTable, CreatingWorker)).value(SysQuery::value(_workerRecId));
        qbds_trvExpTable.addRange(fieldnum(TrvExpTable, ApprovalStatus)).value(SysQuery::value(TrvAppStatus::Create));

        QueryBuildDataSource qbds_hcmWorker = qbds_trvExpTable.addDataSource(tableNum(HcmWorker));
        qbds_hcmWorker.addLink(fieldNum(TrvExpTable, CreatingWorker), fieldNum(HcmWorker,RecId));
        qbds_hcmWorker.joinMode(JoinMode::InnerJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpenseCategoryLookupPerWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for expense categories for given worker record identifier.
    /// </summary>
    /// <param name = "_formControl">The control on which the lookup is to be performed.</param>
    /// <param name = "_lookupType">The <c>TrvLookupType</c> corresponding to the lookup query to build.</param>
    /// <param name = "_workerRecId">The record identier for the worker.</param>
    public static void createExpenseCategoryLookupPerWorker(FormControl _formControl, TrvCategoryLookupType _lookupType, HcmWorkerRecId _workerRecId = 0)
    {
        Query query;
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TrvCostType), _formControl);
        sysTableLookup.addLookupField(fieldNum(TrvCostType, CostType));
        sysTableLookup.addLookupField(fieldNum(TrvCostType, CostTxt));

        FormDataSource control_ds = _formControl.dataSourceObject();
        TrvExpTrans trvExpTrans = control_ds.cursor() as TrvExpTrans;
        ProjId projId = trvExpTrans.ProjId ? trvExpTrans.ProjId : TrvExpTable::findRecId(trvExpTrans.TrvExpTable).ProjId;

        //if validation group setup is present then filters should be added based on the setup.
        if (projId && ProjTable::find(projId).ValidateProjCategory)
        {
            //Build query based on current legal entity.
            query = TrvExpenseLookupHelper::buildResourceCategoryLookupQuery(_lookupType, _workerRecId);
        }
        else
        {
            query = TrvExpenseLookupHelper::buildExpenseCategoryLookup(_lookupType);
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildResourceCategoryLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query based on resource/category setup, which would provide list of valid categories for a resource.
    /// </summary>
    /// <param name = "_lookupType">The <c>TrvLookupType</c> corresponding to the lookup query to build.</param>
    /// <param name = "_workerRecId">Worker record identifier.</param>
    /// <param name = "_legalEntityRecId">Legal entity record identifier.</param>
    /// <returns>A query which can be used to retrieve valid categories for a resource based on resource category setup.</returns>
    public static Query buildResourceCategoryLookupQuery(TrvCategoryLookupType _lookupType, HcmWorkerRecId _workerRecId = 0, LegalEntityRecId _legalEntityRecId = 0)
    {
        Query query = TrvExpenseLookupHelper::buildExpenseCategoryLookup(_lookupType);
        QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(TrvCostType));

        // Show categories in the lookup based on resource/category validation groups setup
        ProjParameters projParameter = ProjParameters::find();

        // If worker record identifier has no value, assign it to current user.
        if (prmIsDefault(_workerRecId))
        {
            _workerRecId = HcmWorker::userId2Worker(curUserId());
        }
        // If legal entity record identifier has no value, assign it to current legal entity.
        if (prmIsDefault(_legalEntityRecId))
        {
            _legalEntityRecId = CompanyInfo::current();
        }

        if (_workerRecId &&
            (projParameter.ValidationEmplCategory == ProjValParameter::Mandatory ||
             projParameter.ValidationEmplCategory == ProjValParameter::Lookup))
        {
            ResourceRecId resourceRecId = ResourceFacade::findByWorker(_workerRecId, _legalEntityRecId);
            ProjValEmplCategorySetUp projValEmplCategorySetUp, projValEmplCategorySetUpRef;

            
            if(TrvExpenseLookupImprovementFlight::instance().isEnabled())
            {
                // This query is written to remove the redundant records that the below query would fetch as there is
                // an n*m join due to the lack of this join condition `projValEmplCategorySetUpRef.Resource == projValEmplCategorySetUp.Resource`
                // Also, a join is not necessary as we are anyway concerned with the distinct expense categories for the mentioned resourceId. 
                // Written as a fix for this bug - https://msdyneng.visualstudio.com/FinOps/_workitems/edit/819838
                while select CategoryId from projValEmplCategorySetUp where projValEmplCategorySetUp.Resource == resourceRecId
                {
                    queryBuildDataSource.addRange(fieldnum(TrvCostType, CostType)).value(queryValue(projValEmplCategorySetUp.CategoryId));
                }
            }
            else
            {
                while select CategoryId from projValEmplCategorySetUp
                    join projValEmplCategorySetUpRef
                    where projValEmplCategorySetUpRef.Resource == resourceRecId
                    && (projValEmplCategorySetUp.GroupId == projValEmplCategorySetUpRef.GroupId
                    && projValEmplCategorySetUp.CategoryId)
                {
                    queryBuildDataSource.addRange(fieldnum(TrvCostType, CostType)).value(queryValue(projValEmplCategorySetUp.CategoryId));
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectCategoryLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs an expense lookup based on Project ID.
    /// </summary>
    /// <param name = "_formControl">The control on which the lookup is to be performed.</param>
    /// <param name = "_workerRecId">Worker record identifier.</param>
    /// <param name = "_projId">The record identier for the Project ID.</param>
 public static void createProjectCategoryLookup(FormControl _formControl, HcmWorkerRecId _workerRecId = 0, ProjId _projId = '')
    {
        Query query;
        SysTableLookup  sysTableLookup = SysTableLookup::newParameters(tableNum(TrvCostType), _formControl);
        sysTableLookup.addLookupField(fieldNum(TrvCostType, CostType));
        sysTableLookup.addLookupField(fieldNum(TrvCostType, CostTxt));

        TrvLegalEntity interCompanyLE = curExt();
        FormDataSource control_ds = _formControl.dataSourceObject();
        if (control_ds && control_ds.table() == tableNum(TrvExpTrans))
        {
            TrvExpTrans trvExpTrans = control_ds.cursor() as TrvExpTrans;
            TrvExpTable trvExpTable = TrvExpTable::findRecId(trvExpTrans.TrvExpTable);
            interCompanyLE = trvExpTrans.InterCompanyLE;
        }

        changecompany (interCompanyLE)
        {
            //if validation group setup is present then filters should be added based on the setup.
            ResourceRecId resourceRecId = ResourceFacade::findByWorker(_workerRecId, CompanyInfo::current());

            if (_projId && (ProjTable::getIfCategoryValidationReq(_projId) || ResourceSetup::find(resourceRecId).ValidateResourceCategory))
            {
                query = TrvExpenseLookupHelper::buildExpenseCategoryLookup(TrvCategoryLookupType::RegularExpense);
                ProjParameters projParameter = ProjParameters::find();

                if (projParameter.ValidationProjCategory != ProjValParameter::None)
                {
                    QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(TrvCostType));
                    ProjValProjCategorySetUp projValProjCategorySetUp, projValProjCategorySetUpRef;

                    while select RecId, CategoryId, GroupId from projValProjCategorySetUpRef
                        where projValProjCategorySetUpRef.ProjId == _projId
                    {
                        if (projValProjCategorySetUpRef.RecId)
                        {
                            if (!projValProjCategorySetUpRef.GroupId)
                            {
                                if (resourceRecId && ProjCategory::createResourceConnection(resourceRecId, interCompanyLE != curExt()))
                                {
                                    TrvExpenseLookupHelper::addProjectValidationQueryRanges(queryBuildDataSource, resourceRecId, _projId);
                                }
                                else
                                {
                                    if (!resourceRecId && projParameter.ValidationEmplCategory != ProjValParameter::None)
                                    {
                                        var logger = SysInstrumentationLoggerFactory::createLogger(classStr(TrvExpenseLookupHelper));
                                        logger.logInformation("@Expense:ExpenseLookUpValidation");
                                    }

                                    //Adding expense category from category assignments setup.
                                    queryBuildDataSource.addRange(fieldnum(TrvCostType, CostType)).value(queryValue(projValProjCategorySetUpRef.CategoryId));
                                }
                            }
                            else
                            {
                                if (resourceRecId && ProjCategory::createResourceConnection(resourceRecId, interCompanyLE != curExt()))
                                {
                                    TrvExpenseLookupHelper::addProjectValidationQueryRanges(queryBuildDataSource, resourceRecId);
                                }
                                else
                                {
                                    if (!resourceRecId && projParameter.ValidationEmplCategory != ProjValParameter::None)
                                    {
                                        var logger = SysInstrumentationLoggerFactory::createLogger(classStr(TrvExpenseLookupHelper));
                                        logger.logInformation("@Expense:ExpenseLookUpValidation");
                                    }

                                    //Adding expense category from group assignments setup.
                                    while select GroupId from projValProjCategorySetUpRef
                                        where projValProjCategorySetUpRef.ProjId == _projId
                                        join CategoryId from projValProjCategorySetUp
                                           where projValProjCategorySetUp.GroupId == projValProjCategorySetUpRef.GroupId
                                           && projValProjCategorySetUp.ProjId == ''
                                    {
                                        queryBuildDataSource.addRange(fieldnum(TrvCostType, CostType)).value(queryValue(projValProjCategorySetUp.CategoryId));
                                    }
                                }
                            }
                        }
                    }
                }
                else if (resourceRecId && ProjCategory::createResourceConnection(resourceRecId, interCompanyLE != curExt()))
                {
                    ProjValEmplCategorySetUp projValEmplCategorySetUp, projValEmplCategorySetUpRef;
                    QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(TrvCostType));

                    while select projValEmplCategorySetUp
                        where projValEmplCategorySetUp.Resource == resourceRecId
                    {
                        if (!ProjValEmplCategorySetUp.GroupId)
                        {
                            queryBuildDataSource.addRange(fieldnum(TrvCostType, CostType)).value(queryValue(projValEmplCategorySetUp.CategoryId));
                        }
                        else
                        {
                            while select GroupId from projValEmplCategorySetUpRef
                                where projValEmplCategorySetUpRef.Resource == resourceRecId
                                    join CategoryId from projValEmplCategorySetUp
                                        where projValEmplCategorySetUp.GroupId == projValEmplCategorySetUpRef.GroupId
                                           && projValEmplCategorySetUp.Resource == 0
                            {
                                queryBuildDataSource.addRange(fieldnum(TrvCostType, CostType)).value(queryValue(projValEmplCategorySetUp.CategoryId));
                            }
                        }
                    }
                }
            }
            else
            {
                query = TrvExpenseLookupHelper::buildExpenseCategoryLookup(TrvCategoryLookupType::RegularExpense);
            }
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjectValidationQueryRanges</Name>
				<Source><![CDATA[
    public static void addProjectValidationQueryRanges(QueryBuildDataSource _queryBuildDataSource, ResourceRecId _resourceRecId, ProjId _projId = '')
    {
        ProjValProjCategorySetUp projValProjCategorySetUpRef;
        ProjValEmplCategorySetUp projValEmplCategorySetUp, projValEmplCategorySetUpRef;

        if (_projId)
        {
            while select CategoryId from projValProjCategorySetUpRef
                where projValProjCategorySetUpRef.ProjId == _projId
                exists join projValEmplCategorySetUp
                    join projValEmplCategorySetUpRef
                    where projValEmplCategorySetUpRef.Resource == _resourceRecId
                    && (projValEmplCategorySetUp.GroupId == projValEmplCategorySetUpRef.GroupId
                    && projValEmplCategorySetUp.CategoryId)
                    && projValEmplCategorySetUp.CategoryId == projValProjCategorySetUpRef.CategoryId
            {
                _queryBuildDataSource.addRange(fieldnum(TrvCostType, CostType)).value(queryValue(projValProjCategorySetUpRef.CategoryId));
            }
        }
        else
        {
            while select CategoryId from projValProjCategorySetUpRef
                where projValProjCategorySetUpRef.GroupId != ''
                exists join projValEmplCategorySetUp
                    join projValEmplCategorySetUpRef
                    where projValEmplCategorySetUpRef.Resource == _resourceRecId
                    && (projValEmplCategorySetUp.GroupId == projValEmplCategorySetUpRef.GroupId
                    && projValEmplCategorySetUp.CategoryId)
                    && projValEmplCategorySetUp.CategoryId == projValProjCategorySetUpRef.CategoryId
            {
                _queryBuildDataSource.addRange(fieldnum(TrvCostType, CostType)).value(queryValue(projValProjCategorySetUpRef.CategoryId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxItemGroupLookup</Name>
				<Source><![CDATA[
    public static void createTaxItemGroupLookup(FormControl _formControl, TrvLegalEntity _taxCompany)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TaxItemGroupHeading), _formControl);

        sysTableLookup.addLookupfield(fieldNum(TaxItemGroupHeading, TaxItemGroup));
        sysTableLookup.addLookupfield(fieldNum(TaxItemGroupHeading, Name));

        Query query = TrvExpenseLookupHelper::buildTaxItemGroupLookupQuery(_taxCompany);

        sysTableLookup.addSelectionField(fieldNum(TaxItemGroupHeading, TaxItemGroup));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTaxItemGroupLookupQuery</Name>
				<Source><![CDATA[
    public static Query buildTaxItemGroupLookupQuery(TrvLegalEntity _taxCompany)
    {
        Query                   query;
        QueryBuildDataSource    taxGroupHeadingQbds;

        query = new Query();
        taxGroupHeadingQbds = query.addDataSource(tableNum(TaxItemGroupHeading));

        query.allowCrossCompany(true);
        query.addCompanyRange(SysQuery::value(_taxCompany));
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxGroupLookup</Name>
				<Source><![CDATA[
    public static void createTaxGroupLookup(FormControl _formControl, TrvLegalEntity _taxCompany)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TaxGroupHeading), _formControl);

        sysTableLookup.addLookupfield(fieldNum(TaxGroupHeading, TaxGroup));
        sysTableLookup.addLookupfield(fieldNum(TaxGroupHeading, TaxGroupName));

        Query query = TrvExpenseLookupHelper::buildTaxGroupLookupQuery(_taxCompany);

        sysTableLookup.addSelectionField(fieldNum(TaxGroupHeading, TaxGroup));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTaxGroupLookupQuery</Name>
				<Source><![CDATA[
    public static Query buildTaxGroupLookupQuery(TrvLegalEntity _taxCompany)
    {
        Query                   query;
        QueryBuildDataSource    taxGroupHeadingQbds;

        query = new Query();
        taxGroupHeadingQbds = query.addDataSource(tableNum(TaxGroupHeading));

        query.allowCrossCompany(true);
        query.addCompanyRange(SysQuery::value(_taxCompany));
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildExpenseCategoryLookup</Name>
				<Source><![CDATA[
    /// <summary>    
    /// Performs an expense lookup based on whether the expense is a credit card, mobile or regular expense.
    /// </summary>
    /// <param name = "_lookupType">The <c>TrvLookupType</c> corresponding to the lookup query to build</param>
    /// <returns>A query which can be used to retrieve valid categories</returns>
    protected static query buildExpenseCategoryLookup(TrvCategoryLookupType _lookupType)
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(TrvCostType));
        
        switch (_lookupType)
        {
            case TrvCategoryLookupType::CreditCardExpense:
            case TrvCategoryLookupType::MobileExpense:
                List categoryList = TrvUnreconciledExpenseHelper::getSupportedCategoryList(_lookupType == TrvCategoryLookupType::CreditCardExpense);
                ListEnumerator listEnumerator;
                TrvExpType categoryType;

                if (!categoryList.empty())
                {
                    listEnumerator = categoryList.getEnumerator();
                    listEnumerator.reset();

                    // Filter out the unsupported unreconciled expense category.
                    while (listEnumerator.moveNext())
                    {
                        categoryType = listEnumerator.current();
                        queryBuildDataSource.addRange(fieldnum(TrvCostType, ExpType)).value(SysQuery::value(categoryType));
                    }
                }
                break;
            default: queryBuildDataSource.addRange(fieldnum(TrvCostType, ExpType)).value(SysQuery::valueNot(TrvExpType::Personal));
                break;
        }

        // No import only or inactive categories should be shown in the lookup.
        queryBuildDataSource.addRange(fieldnum(TrvCostType, IsImportOnly)).value(queryValue(NoYes::No));
        queryBuildDataSource.addRange(fieldnum(TrvCostType, IsInactive)).value(queryValue(NoYes::No));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>