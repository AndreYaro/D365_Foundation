<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceJournalPostBatchTaskManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class InventInventoryDataServiceJournalPostBatchTaskManager
{
    BatchHeader batchHeader;
    Batch       currentBatch;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventInventoryDataServiceJournalPostBatchTaskManager construct()
    {
        return new InventInventoryDataServiceJournalPostBatchTaskManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalPostBatchTasks</Name>
				<Source><![CDATA[
    public void createJournalPostBatchTasks()
    {
        currentBatch = BatchHeader::getCurrentBatchTask();

        if (!currentBatch)
        {
            throw error("@DataExpTool:ErrMsg_BatchJobSelect_1");
        }

        batchHeader = BatchHeader::construct(currentBatch.BatchJobId);

        if (!batchHeader)
        {
            throw error("@DataExpTool:ErrMsg_BatchHeaderSelect_1");
        }

        InventJournalTable inventJournalTable;
        InventJournalTrans inventJournalTrans;
        inventJournalTable.skipDataMethods(true);
        inventJournalTable.skipDatabaseLog(true);
        inventJournalTable.skipEvents(true);

        Array taskParas = new Array(Types::Container);
        while select crosscompany DataAreaId, JournalId from inventJournalTable
            where inventJournalTable.Posted == 0
                && inventJournalTable.InventoryServiceJournalExpectedStatus == InventoryServiceJournalExpectedStatus::Posted
                && inventJournalTable.SystemBlocked == NoYes::No
        {
            // Exclude in-process import journals
            InventoryServiceAdjustmentJournalHeaderStaging headerStaging;
            DMFDefinitionGroupExecution definitionGroupExecution;

            // Different company can have same journalId.
            select ExecutionId from headerStaging
                where headerStaging.JournalNumber == inventJournalTable.JournalId
                exists join definitionGroupExecution
                where headerStaging.ExecutionId == definitionGroupExecution.ExecutionId
                && definitionGroupExecution.Company == inventJournalTable.DataAreaId;

            if (headerStaging.ExecutionId)
            {
                DMFExecutionSummaryStatus executionStatus = DMFExecutionStatusHelper::GetExecutionSummaryStatus(headerStaging.ExecutionId);
                if (executionStatus <= DMFExecutionSummaryStatus::Executing)
                {
                    info(strFmt("@SCM:InventoryServiceTransactionPostJournalImportInProcess", inventJournalTable.JournalId));
                    continue;
                }
            }

            taskParas.value(taskParas.lastIndex() + 1, [inventJournalTable.DataAreaId, inventJournalTable.JournalId]);
        }

        int arrayCount = taskParas.lastIndex();
        int maxTaskCount = 1000;

        ttsbegin;

        for (int taskCounter = 1; taskCounter <= arrayCount && taskCounter <= maxTaskCount; taskCounter++)
        {
            container taskPara;

            int arrayIndex = taskCounter;
            while (arrayIndex <= arrayCount)
            {
                taskPara = conIns(taskPara, conLen(taskPara)+1, taskParas.value(arrayIndex));
                arrayIndex = arrayIndex + maxTaskCount;
            }

            RunBaseBatch runBaseBatchTask = InventInventoryDataServiceJournalPostTask::newFromParameters(taskPara);
            this.addTask(currentBatch, null, runBaseBatchTask);
        }

        batchHeader.save();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTask</Name>
				<Source><![CDATA[
    private void addTask(
        Batch                   _currentBatch,
        List                    _dependentTaskList,
        Batchable               _runBaseBatchtask,
        BatchDependencyStatus   _batchDependencyStatus = BatchDependencyStatus::Finished)
    {
        RunBaseBatch   dependentTask;
        ListEnumerator depTaskEnumerator;

        _runBaseBatchtask.batchInfo().parmGroupId(_currentBatch.GroupId);

        batchHeader.addRuntimeTask(_runBaseBatchtask, _currentBatch.BatchJobId);

        if (_dependentTaskList)
        {
            depTaskEnumerator = _dependentTaskList.getEnumerator();

            while (depTaskEnumerator.moveNext())
            {
                dependentTask = depTaskEnumerator.current();
                batchHeader.addDependency(_runBaseBatchtask, dependentTask, _batchDependencyStatus);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>