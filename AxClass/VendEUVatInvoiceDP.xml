<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendEUVatInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendEUVatInvoiceDP</c> class retrieves records for the <c>VendEUVatInvoice</c> SSRS
/// report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(VendEUVatInvoiceContract))
]
class VendEUVatInvoiceDP  extends SRSReportDataProviderBase
{
    VendEUVatInvoiceTmp vendEUVatInvoiceTmp;
    VendInvoiceJour vendInvoiceJour;
    VendTable vendTableInvoiceAccount;
    TaxTrans taxTrans;
    CompanyInfo companyInfo;
    VendFormletterParameters vendFormletterParameters;
    VendParameters vendParameters;
    FormletterProformaPrint formletterProformaPrint;
    TaxSpec taxSpec;
    NoYes copy;
    boolean showIntracom;
    recId formletterProformaPrintRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>companyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address of a company.
    /// </summary>
    /// <returns>
    /// The postal address of the company.
    /// </returns>
    private  Addressing  companyAddress()
    {
        LogisticsPostalAddress address;
        address = LogisticsLocationEntity::findPostalAddress(companyInfo, LogisticsLocationRoleType::Invoice);

        if (address)
        {
            return address.Address;
        }
        return companyInfo.postalAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company name.
    /// </summary>
    /// <returns>
    /// The company name.
    /// </returns>
    private Name companyName()
    {
        LogisticsLocationEntity location;
        location = LogisticsLocationEntity::findLocation(companyInfo,
                                                        LogisticsLocationRoleType::Invoice,
                                                        DateTimeUtil::getSystemDateTime(),
                                                        false);

        if (location && location.parmLocationRecId())
        {
            return location.parmLocationDescription();
        }

        return companyInfo.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendEUVatInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the <c>VendEUVatInvoiceTmp</c> table from the report.
    /// </summary>
    /// <returns>
    /// The <c>VendEUVatInvoiceTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(VendEUVatInvoiceTmp))
    ]
    public VendEUVatInvoiceTmp getVendEUVatInvoiceTmp()
    {
        select vendEUVatInvoiceTmp;
        return vendEUVatInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendEUVatInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records in the <c>VendEUVatInvoiceTmp</c> table.
    /// </summary>
    public void insertVendEUVatInvoiceTmp()
    {
        vendEUVatInvoiceTmp.CompanyName = this.companyName();
        vendEUVatInvoiceTmp.CompanyAddress = this.companyAddress();
        vendEUVatInvoiceTmp.CompanyCoRegNum = companyInfo.CoRegNum;
        vendEUVatInvoiceTmp.CompanyEnterpriseNumber = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, vendInvoiceJour.InvoiceDate);
        vendEUVatInvoiceTmp.VendName = vendTableInvoiceAccount.name();
        vendEUVatInvoiceTmp.VendAddress = vendTableInvoiceAccount.postalAddress().Address;
        vendEUVatInvoiceTmp.VendVATNum = vendInvoiceJour.vatNum;
        vendEUVatInvoiceTmp.InvoiceText = this.invoiceTxt();
        vendEUVatInvoiceTmp.InvoiceDate = vendInvoiceJour.InvoiceDate;
        vendEUVatInvoiceTmp.InternalInvoiceId = vendInvoiceJour.InternalInvoiceId;
        vendEUVatInvoiceTmp.InvoiceNum = vendInvoiceJour.InvoiceId;
        vendEUVatInvoiceTmp.InvoiceAmount = vendInvoiceJour.InvoiceAmount;
        vendEUVatInvoiceTmp.TaxBaseAmount = taxTrans.TaxBaseAmount;
        vendEUVatInvoiceTmp.TaxAmount = taxTrans.TaxAmount;
        vendEUVatInvoiceTmp.TaxAmountMST = taxSpec.taxAmountMST() ;
        vendEUVatInvoiceTmp.TaxBaseAmountMST = taxSpec.taxBaseAmountMST();
        vendEUVatInvoiceTmp.CurrencyCode = vendInvoiceJour.CurrencyCode;
        vendEUVatInvoiceTmp.TransactionDescription = "@SYS62784";
        vendEUVatInvoiceTmp.VatPercent = taxSpec.taxBaseAmount() ? (taxSpec.taxAmount() / taxSpec.taxBaseAmount()) : 0 ;
        vendEUVatInvoiceTmp.IntracomInvoiceAmount = (vendInvoiceJour.InvoiceAmount - vendInvoiceJour.SumTax) +
                                                    taxSpec.taxInvoiceAmount();
        vendEUVatInvoiceTmp.ShowExchRate = vendInvoiceJour.showExchRate();
        vendEUVatInvoiceTmp.EnterpriseNumber = vendInvoiceJour.EnterpriseNumber;
        vendEUVatInvoiceTmp.ShowIntracom =  showIntracom;
        vendEUVatInvoiceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>invoiceTxt</c> field.
    /// </summary>
    /// <returns>
    /// The value of the <c>invoiceTxt</c> field.
    /// </returns>
    private str  invoiceTxt()
    {
        str invoiceTxt;
        if (copy)
        {
            invoiceTxt = vendInvoiceJour.isProforma() ? "@SYS70798" : "@SYS70799" ;
        }
        else
        {
            invoiceTxt = vendInvoiceJour.isProforma() ? "@SYS70797" : "@SYS55115" ;
        }
        return invoiceTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic for the report and inserts data in the <c>VendInvoiceDocumentTmp</c>
    /// table.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the business logic for the report. This method will be
    /// called by SSRS at runtime. The method computes data and populates the data tables that will be
    /// returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        recId recId;

        VendEUVatInvoiceContract contract = this.parmDataContract() as VendEUVatInvoiceContract;
        companyInfo = CompanyInfo::find();
        vendFormletterParameters = VendFormletterParameters::find();
        vendParameters = VendParameters::find();
        showIntracom = false;

        recId = contract.parmRecordId();
        copy = contract.parmCopy();

        vendInvoiceJour = VendInvoiceJour::findRecId(recId);
        vendTableInvoiceAccount = vendInvoiceJour.vendTable_InvoiceAccount();

        this.unpackFormletterProformaPrint();

        if (vendInvoiceJour.isProforma())
        {
            taxSpec = TaxSpec::construct('', naDate(), vendInvoiceJour.RecId);
            taxSpec.setTmpTaxWorkTrans(this.tmpTaxWorkTrans());
        }
        else
        {
            taxSpec = TaxSpec::construct(vendInvoiceJour.LedgerVoucher,
                                            vendInvoiceJour.InvoiceDate,
                                            vendInvoiceJour.RecId);
        }

        if (VendParameters::find().IntracomVAT)
        {
            taxSpec.setIntracomVATInvoice(NoYes::Yes);
            showIntracom = true;
        }

        while (taxSpec.parmTaxSpec())
        {
            this.insertVendEUVatInvoiceTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    /// <returns>
    /// The <c>TmpTaxWorkTrans</c> table.
    /// </returns>
    private TmpTaxWorkTrans tmpTaxWorkTrans()
    {
        if (vendInvoiceJour.isProforma())
        {
            if (formletterProformaPrint)
            {
                return formletterProformaPrint.tmpTaxWorkTrans(vendInvoiceJour.RecId);
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackFormletterProformaPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Packed class and unpacks it.
    /// </summary>
    private void unpackFormletterProformaPrint()
    {
        SRSTmpDataStore         srsTmpDataStore;

        if (formletterProformaPrintRecId)
        {
            ttsbegin;
            select forupdate firstonly Value from srsTmpDataStore
            where srsTmpDataStore.RecId == formletterProformaPrintRecId;

            if (srsTmpDataStore.RecId)
            {
                formletterProformaPrint.unpack(srsTmpDataStore.Value);
                srsTmpDataStore.delete();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>