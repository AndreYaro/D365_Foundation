<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanStagingTableBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanStagingTableBuilder</c> class is responsible for populating the staging table
///     with historical data.
/// </summary>
class ReqDemPlanStagingTableBuilder
{
    ReqDemPlanAllocationKeyFilterTmp    allocationKeyFilterTable;
    ReqDemPlanDataProcessingHelper      dataHelper;
    ReqDemPlanExtensibilityHelper       extensibilityHelper;
    ReqDemPlanTaskLoggerInterface       logger;

    boolean                             preAggregateData;

    #ReqDemPlanTask
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeFillers</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs all registered staging table filler classes to fill the staging table.
    /// </summary>
    /// <param name="_stagingTable">
    ///     The staging table buffer.
    /// </param>
    /// <param name="_dataContract">
    ///     The data contract.
    /// </param>
    /// <param name="_forecastVersion">
    ///     The forecast version.
    /// </param>
    /// <param name="_allocationKeyFilters">
    ///     The table buffer that contains current item allocation key filters.
    /// </param>
    /// <returns>
    ///     The total number of processed records.
    /// </returns>
    protected ReqDemPlanTaskProcessedRecordCount executeFillers(
        ReqDemPlanCubeStagingTable              _stagingTable,
        ReqDemPlanExportBaseDataContract        _dataContract,
        RefRecId                                _forecastVersion,
        ReqDemPlanAllocationKeyFilterTmp        _allocationKeyFilters)
    {
        List                                processorList;
        ListEnumerator                      processorListEnumerator;
        ReqDemPlanStagingTableFiller        processor;
        ReqDemPlanDataSourceRecId           processorDataSourceId;
        ReqDemPlanTaskProcessedRecordCount  recordsProcessed;
        ReqDemPlanTaskProcessedRecordCount  totalRecordsProcessed;

        processorList = extensibilityHelper.getInstancesWithAttribute(classStr(ReqDemPlanStagingTableFiller), new ReqDemPlanStagingTableFillerAttribute());
        processorListEnumerator = processorList.getEnumerator();

        while (processorListEnumerator.moveNext())
        {
            processor = processorListEnumerator.current();

            logger.startMonitoredTask(
                ReqDemPlanTaskCodes::FillStagingTable + processor.GetType().Name,
                strFmt("@DMP1085", processor.description()));

            processorDataSourceId = ReqDemPlanDataSource::registerDataSourceForInstance(processor);

            if (processorDataSourceId != 0)
            {
                recordsProcessed = processor.execute(_stagingTable, _dataContract, _forecastVersion, processorDataSourceId, _allocationKeyFilters);
                totalRecordsProcessed += recordsProcessed;

                logger.incrementTaskRecordsProcessed(recordsProcessed);
                logger.finishTask();
            }
            else
            {
                logger.taskFailed();
            }
        }

        return totalRecordsProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeProcessors</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs all registered data processing classes to update staging table.
    /// </summary>
    /// <param name="_stagingTable">
    ///     The staging table buffer.
    /// </param>
    /// <param name="_dataContract">
    ///     The data contract.
    /// </param>
    /// <param name="_forecastVersion">
    ///     The forecast version.
    /// </param>
    /// <returns>
    ///     The total number of processed records.
    /// </returns>
    protected ReqDemPlanTaskProcessedRecordCount executeProcessors(
        ReqDemPlanCubeStagingTable              _stagingTable,
        ReqDemPlanExportBaseDataContract        _dataContract,
        RefRecId                                _forecastVersion)
    {
        List                                processorList;
        ListEnumerator                      processorListEnumerator;
        ReqDemPlanStagingTableProcessor     processor;
        ReqDemPlanTaskProcessedRecordCount  recordsProcessed;
        ReqDemPlanTaskProcessedRecordCount  totalRecordsProcessed;

        processorList = extensibilityHelper.getInstancesWithAttribute(classStr(ReqDemPlanStagingTableProcessor), new ReqDemPlanStagingTableProcessorAttribute());
        processorListEnumerator = processorList.getEnumerator();

        while (processorListEnumerator.moveNext())
        {
            processor = processorListEnumerator.current();

            logger.startMonitoredTask(
                ReqDemPlanTaskCodes::PostProcessStagingTable + processor.GetType().Name,
                strFmt("@DMP1450", processor.description()), _stagingTable.company());

            recordsProcessed = processor.execute(_stagingTable, _dataContract, _forecastVersion);
            totalRecordsProcessed += recordsProcessed;

            logger.incrementTaskRecordsProcessed(recordsProcessed);
            logger.finishTask();
        }

        return totalRecordsProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fill</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the staging table with data.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract with runtime parameters.
    /// </param>
    /// <param name="_version">
    ///     The version of the historical data collection.
    /// </param>
    /// <returns>
    ///     The number of processed records.
    /// </returns>
    private ReqDemPlanTaskProcessedRecordCount fill(ReqDemPlanExportBaseDataContract _dataContract, RefRecId _version = ReqDemPlanForecastVersion::Forecasted)
    {
        ReqDemPlanCubeStagingTable              stagingTable;
        ReqDemPlanTaskProcessedRecordCount      processedRecordsCount;

        #ReqDemPlan

        dataHelper.skipAll(stagingTable);

        // set current company on the temp table buffer, otherwise it uses the one that's last set on it
        // which is different than the current company
        allocationKeyFilterTable.company(curExt2dataareaid(tableNum(ReqDemPlanAllocationKeyFilterTmp)));

        processedRecordsCount = this.executeFillers(stagingTable, _dataContract, _version, allocationKeyFilterTable);

        this.removeOutliers(stagingTable);

        this.executeProcessors(stagingTable, _dataContract, _version);

        return processedRecordsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationKeyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the allocation key filter table buffer.
    /// </summary>
    /// <returns>
    ///     The allocation key filter table buffer;
    /// </returns>
    public ReqDemPlanAllocationKeyFilterTmp getAllocationKeyFilter()
    {
        return allocationKeyFilterTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // initialize logger instance
        this.parmLogger(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDataProcessingHelper</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the ReqDemPlanDataProcessingHelper type.
    /// </summary>
    /// <returns>
    ///     A new instance of the ReqDemPlanDataProcessingHelper type.
    /// </returns>
    protected ReqDemPlanDataProcessingHelper newDataProcessingHelper()
    {
        ReqDemPlanDataProcessingHelper helper;

        helper = new ReqDemPlanDataProcessingHelper();
        helper.parmLogger(logger);

        return helper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExtensibilityHelper</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instrance of the ReqDemPlanExtensibilityHelper class.
    /// </summary>
    /// <returns>
    ///     A new instrance of the ReqDemPlanExtensibilityHelper class.
    /// </returns>
    protected ReqDemPlanExtensibilityHelper newExtensibilityHelper()
    {
        return ReqDemPlanExtensibilityHelper::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLogger</Name>
				<Source><![CDATA[
    public ReqDemPlanTaskLoggerInterface parmLogger(ReqDemPlanTaskLoggerInterface _logger = logger)
    {
        if (!prmisDefault(_logger))
        {
            logger = _logger;

            if (logger == null)
            {
                // ensure logger instance is never null
                logger = ReqDemPlanDummyTaskLogger::construct();
            }
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreAggregateData</Name>
				<Source><![CDATA[
    public boolean parmPreAggregateData(boolean _preAggregateData = preAggregateData)
    {
        preAggregateData = _preAggregateData;

        return preAggregateData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refill</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Recreates the data in the staging table.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract with runtime parameters.
    /// </param>
    /// <param name="_parameters">
    ///     The table buffer with master parameters.
    /// </param>
    /// <param name="_version">
    ///     The version of the historical data collection.
    /// </param>
    /// <returns>
    ///     The total number of created records.
    /// </returns>
    public ReqDemPlanTaskProcessedRecordCount refill(ReqDemPlanExportBaseDataContract _dataContract, ReqDemPlanForecastParameters _parameters = ReqDemPlanForecastParameters::find(), RefRecId _version = ReqDemPlanForecastVersion::Forecasted)
    {
        SetEnumerator                       setEnumerator;
        SelectableDataArea                  currCompany;
        ReqDemPlanDataAggregator            dataAggregator;
        ReqDemPlanTaskProcessedRecordCount  filledRecordsCount;
        boolean reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled = ReqDemPlanCreateForecastService::isTransientSqlConnectionErrorRetryEnabled();

        dataAggregator = ReqDemPlanDataAggregator::newStandard(logger, int642int(_version), _dataContract.parmDateGranularity());
        
        int infologLineTry = infologLine();

        try
        {
            filledRecordsCount = 0;

            ReqDemPlanCubeStagingTable::cleanVersion(_version);

            extensibilityHelper = this.newExtensibilityHelper();

            dataHelper = this.newDataProcessingHelper();
            setEnumerator = dataHelper.prepareAllocationKeyFilter(_dataContract.getFilterQuery(), allocationKeyFilterTable).getEnumerator();

            dataHelper.cleanItemUomConversionCache();

            while (setEnumerator.moveNext())
            {
                currCompany = setEnumerator.current();
                changecompany(currCompany)
                {
                    dataHelper.verifyItemUomConversionsAndInitCache(_parameters, allocationKeyFilterTable);
                    filledRecordsCount += this.fill(_dataContract, _version);

                    if (preAggregateData)
                    {
                        dataAggregator.aggregate(tableNum(ReqDemPlanCubeStagingTable));
                    }
                }
            }
        }
        #ReqDemPlanCatchRetryTransientSqlConnectionError(reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled, _dataContract, allocationKeyFilterTable, logger, infologLineTry)

        return filledRecordsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeOutliers</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes outlier transactions from the staging table.
    /// </summary>
    /// <param name="_stagingTable">
    ///     The staging table buffer.
    /// </param>
    private void removeOutliers(ReqDemPlanCubeStagingTable _stagingTable)
    {
        ReqDemPlanOutlierQuery outlierQuery;
        SysQuery               query;
        SysQueryRun            queryRun;
        InventTrans            inventTrans;
        int64                  recordsDeleted;
        QueryBuildDataSource   dataSource;
        int                    i;

        while select outlierQuery
            where outlierQuery.Active
                && outlierQuery.Company == _stagingTable.company()
        {
            recordsDeleted = 0;

            logger.startMonitoredTask(
                ReqDemPlanTaskCodes::RemoveOutliers + int642Str(outlierQuery.RecId),
                strFmt("@DMP1476", outlierQuery.Name), outlierQuery.Company);

            query = new SysQuery(outlierQuery.PackedQuery);
            for (i = 1; i <= query.dataSourceCount(); ++i)
            {
                dataSource = query.dataSourceNo(i);
                if (dataSource.table() != tableNum(InventTrans))
                {
                    dataSource.joinMode(JoinMode::ExistsJoin);
                }
            }
            query.dataSourceTable(tableNum(InventTrans)).addSelectionField(fieldNum(InventTrans, RecId));

            queryRun = new SysQueryRun(query.pack());
            while (queryRun.next())
            {
                inventTrans = queryRun.get(tableNum(InventTrans));

                delete_from _stagingTable
                    where _stagingTable.InventTransRecId == inventTrans.RecId;

                recordsDeleted += _stagingTable.RowCount();
                logger.incrementTaskRecordsProcessed();
            }

            logger.finishTask(strFmt("@DMP1477", recordsDeleted));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqDemPlanStagingTableBuilder construct()
    {
        return new ReqDemPlanStagingTableBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>