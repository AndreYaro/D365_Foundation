<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTableForm_DlvSchedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesQuotationTableForm_DlvSchedule</c> class is used to manage delivery schedules.
/// </summary>
/// <remarks>
///    This class is used by the <c>SalesQuotationDeliverySchedule</c> form.
/// </remarks>
class   SalesQuotationTableForm_DlvSchedule
extends SalesQuotationTableForm_Sales
{
    SalesQuotationLine              callerSalesQuotationLine;
    SalesQuotationLine              orderLine;

    List                            scheduleLines;
    DlvScheduleMarkupConversionMode dlvScheduleMarkupConversionMode;
    LineNum                         minLineNum;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        dlvScheduleMarkupConversionMode
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the business logic triggered by pressing the OK button on the delivery schedule form.
    /// </summary>
    /// <param name="_formDataSource">
    ///     The datasource of the delivery schedule form.
    /// </param>
    /// <remarks>
    /// This method is called from the client. It just packs and passes all the data to a server method.
    /// </remarks>
    void closeOk(FormDataSource _formDataSource)
    {
        List                newScheduleLines = new List(Types::Container);
        SalesQuotationLine  salesQuotationLine;

        salesQuotationLine.setTmp();
        salesQuotationLine.setTmpData(_formDataSource.cursor());

        while select salesQuotationLine
        {
            newScheduleLines.addEnd([salesQuotationLine]);
        }

        SalesQuotationTableForm_DlvSchedule::closeOkServer(callerSalesQuotationLine,
            newScheduleLines.pack(),
            dlvScheduleMarkupConversionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a new quotation line can be created.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///     The currently selected sales quotation line.
    /// </param>
    /// <returns>
    ///     true when quotation lines can be edited; otherwise, false.
    /// </returns>
    public boolean createLineAllowed(SalesQuotationLine _salesQuotationLine)
    {
        return this.editLineAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLineAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified quotation line can be deleted.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    The quotation line to check for deletion.
    /// </param>
    /// <returns>
    ///    true when the line can be deleted; otherwise, false.
    /// </returns>
    boolean deleteLineAllowed(SalesQuotationLine _salesQuotationLine)
    {
        return this.editLineAllowed() && _salesQuotationLine.checkDelete(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the committed total quantity of the delivery schedule.
    /// </summary>
    /// <returns>
    /// The quantity on the order line captured at the time of opening the form.
    /// </returns>
    public SalesQty getOrderLineQty()
    {
        return orderLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public identifierName lastValueElementName()
    {
        return formstr(SalesQuotationDeliverySchedule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>SalesQuotationTableForm_DlvSchedule</c> object.
    /// </summary>
    /// <param name="_source">
    /// The line for which the form was opened.
    /// </param>
    void new(Common _source)
    {
        callerSalesQuotationLine = _source;
        scheduleLines       = new List(Types::Container);

        switch (callerSalesQuotationLine.LineDeliveryType)
        {
            case LineDeliveryType::OrderLineWithMultipleDeliveries:
                orderLine.data(callerSalesQuotationLine);
                break;
            case LineDeliveryType::DeliveryLine:
                orderLine = SalesQuotationDeliverySchedule::findOrderLineForDeliveryLine(callerSalesQuotationLine.InventTransId);
                if (!orderLine)
                {
                    // The order line of the selected delivery line was deleted.
                    throw error("@SYS131419");
                }
                break;
            default:
                // called for an order line without delivery lines
                orderLine.data(callerSalesQuotationLine);
        }

        super (callerSalesQuotationLine.salesQuotationTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupConversionMode</Name>
				<Source><![CDATA[
    DlvScheduleMarkupConversionMode parmMarkupConversionMode(DlvScheduleMarkupConversionMode _dlvScheduleMarkupConversionMode = dlvScheduleMarkupConversionMode)
    {
        dlvScheduleMarkupConversionMode = _dlvScheduleMarkupConversionMode;
        return dlvScheduleMarkupConversionMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduleLines</Name>
				<Source><![CDATA[
    public List parmScheduleLines(List _scheduleLines = scheduleLines)
    {
        scheduleLines = _scheduleLines;

        return scheduleLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextCreationSequenceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the next unique LineCreationSequenceNumber per QuotationId.
    /// </summary>
    /// <param name = "_line">Sales quotation line buffer to get the next LineCreationSequenceNumber from.</param>
    /// <param name = "_quotationId">QuotationId of the SalesQuotation.</param>
    /// <returns>Next unique LineCreationSequenceNumber for the given QuotationId.</returns>
    public int nextCreationSequenceNumber(SalesQuotationLine _line, QuotationId _quotationId)
    {
        select maxof(LineCreationSequenceNumber)
            from _line
            where _line.QuotationId == _quotationId;

        return _line.LineCreationSequenceNumber + 1;

    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTotalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total catch weight quantity of the delivery schedule.
    /// </summary>
    /// <returns>
    /// The sum of catch weight quantities of all the lines in the delivery schedule.
    /// </returns>
    protected PdsCWInventQty pdsCWTotalQty()
    {
        PdsCWInventQty      qty;
        ListEnumerator      scheduleLinesEnumerator = scheduleLines.getEnumerator();

        scheduleLinesEnumerator.reset();
        while (scheduleLinesEnumerator.moveNext())
        {
            SalesQuotationLine salesQuotationLine = scheduleLinesEnumerator.current();
            qty += salesQuotationLine.PdsCWQty;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsGetCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the committed total catch weight quantity of the delivery schedule.
    /// </summary>
    /// <returns>
    /// The catch weight quantity on the order line captured at the time of opening the form.
    /// </returns>
    public PdsCWInventQty pdsGetCWQty()
    {
        return orderLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationLine_Init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the datasource of the form.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///     The cursor of the data source to be initialized.
    /// </param>
    /// <remarks>
    ///     It sets the datasource table buffer to temporary mode and then populates it with the delivery lines of the schedule the form was called for
    ///     or with the line it was called for in case it was an order line without delivery lines.
    /// </remarks>
    public void salesQuotationLine_Init(SalesQuotationLine _salesQuotationLine)
    {
        SalesQuotationLine               localSalesQuotationLine;
        SalesQuotationDeliverySchedule   salesQuotationDeliverySchedule;
        SalesLineCreationSequenceNumber  creationSequenceNumber;
        boolean                          isMinLineNumSet = false;

        _salesQuotationLine.setTmp();
        delete_from _salesQuotationLine;

        if (callerSalesQuotationLine.LineDeliveryType != LineDeliveryType::OrderLine)
        {
            while select localSalesQuotationLine
                exists join salesQuotationDeliverySchedule
                    where salesQuotationDeliverySchedule.OrderLine    == orderLine.InventTransId
                       && salesQuotationDeliverySchedule.DeliveryLine == localSalesQuotationLine.InventTransId
            {
                creationSequenceNumber = this.nextCreationSequenceNumber(_salesQuotationLine, localSalesQuotationLine.QuotationId);
                _salesQuotationLine.data(localSalesQuotationLine);
                _salesQuotationLine.LineCreationSequenceNumber = creationSequenceNumber;
                _salesQuotationLine.doInsert();

                if (!isMinLineNumSet || _salesQuotationLine.LineNum < minLineNum)
                {
                    minLineNum = _salesQuotationLine.LineNum;
                    isMinLineNumSet = true;
                }
            }
            if (!isMinLineNumSet)
            {
                minLineNum = orderLine.LineNum + 1;
            }
        }
        else
        {
            creationSequenceNumber = this.nextCreationSequenceNumber(_salesQuotationLine, callerSalesQuotationLine.QuotationId);
            _salesQuotationLine.data(callerSalesQuotationLine);
            _salesQuotationLine.LineDeliveryType = LineDeliveryType::DeliveryLine;
            _salesQuotationLine.LineCreationSequenceNumber = creationSequenceNumber;
            _salesQuotationLine.doInsert();
            minLineNum = _salesQuotationLine.LineNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationLine_InitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new delivery line.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The line to initialize.
    /// </param>
    void salesQuotationLine_InitValue(SalesQuotationLine _salesQuotationLine)
    {
        if (_salesQuotationLine.LineNum < minLineNum)
        {
            _salesQuotationLine.LineNum = minLineNum;
        }

        _salesQuotationLine.initFromOrderLineWithMultipleDeliveries(orderLine);

        InventMovement::bufferSetTransQtyUnit(_salesQuotationLine);
        InventMovement::bufferSetRemainQty(_salesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total quantity of the delivery schedule.
    /// </summary>
    /// <returns>
    ///     The sum of quantity of all the lines in the delivery schedule.
    /// </returns>
    protected SalesQty totalQty()
    {
        SalesQty            qty;
        ListEnumerator      scheduleLinesEnumerator = scheduleLines.getEnumerator();

        scheduleLinesEnumerator.reset();
        while (scheduleLinesEnumerator.moveNext())
        {
            SalesQuotationLine salesQuotationLine = scheduleLinesEnumerator.current();
            qty += salesQuotationLine.SalesQty;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Integer version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                    ret = true;
                    break;
                default:
                    ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers an accepted delivery schedule from the temporary form data source to the
    /// <c>SalesQuotationLine</c> table in the database.
    /// </summary>
    /// <remarks>
    /// If the form was opened for an order line without delivery lines it is first converted to a delivery
    /// schedule.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The delivery schedule update failed.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The delivery schedule update violates the referenced agreement constraints.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The insertion of the delivery line failed.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The deletion of the delivery line failed.
    /// </exception>
    void updateSalesQuotationLineTable()
    {
        #OCCRetryCount

        SalesQuotationLine                  tmpSalesQuotationLine;
        SalesQuotationLine                  dbSalesQuotationLine;
        SalesQuotationDeliverySchedule      salesQuotationDeliverySchedule;
        Set                                 inventTransIds = new Set(Types::String);
        boolean                             initialConversion = false;
        ListEnumerator                      scheduleLinesEnumerator = scheduleLines.getEnumerator();
        
        try
        {
            ttsbegin;

            if (callerSalesQuotationLine.LineDeliveryType == LineDeliveryType::OrderLine)
            {
                orderLine = callerSalesQuotationLine.convertToDeliverySchedule();
                initialConversion = true;
                Markup::delete(callerSalesQuotationLine);
                orderLine.SalesQty = this.totalQty(); // set totalQty for misc charges allocation purposes
            }

            LineNum lastScheduleLineNum = SalesQuotationLine::lastDeliveryScheduleLineNum(orderLine.InventTransId);

            scheduleLinesEnumerator.reset();
            while (scheduleLinesEnumerator.moveNext())
            {
                [tmpSalesQuotationLine] = scheduleLinesEnumerator.current();
                dbSalesQuotationLine = this.writeDeliveryLine(tmpSalesQuotationLine, initialConversion, lastScheduleLineNum);
                inventTransIds.add(dbSalesQuotationLine.InventTransId);
            }

            while select forupdate dbSalesQuotationLine
                join salesQuotationDeliverySchedule
                    where salesQuotationDeliverySchedule.OrderLine    == orderLine.InventTransId
                       && salesQuotationDeliverySchedule.DeliveryLine == dbSalesQuotationLine.InventTransId
            {
                if (!inventTransIds.in(dbSalesQuotationLine.InventTransId))
                {
                    if (dbSalesQuotationLine.validateDelete())
                    {
                        dbSalesQuotationLine.deleteWithoutUpdatingDeliveryScheduleLines();
                    }
                    else
                    {
                        // The deletion of the delivery line failed.
                        throw error("@SYS131423");
                    }
                }
            }

            orderLine = SalesQuotationLine::findRecId(orderLine.RecId, true);

            if (initialConversion)
            {
                Markup::delete(orderLine);
                orderLine.SalesMarkup = 0;
            }

            this.salesQuotationLine_Write(orderLine);
            orderLine.recalculateDeliveryScheduleOrderLine();
            orderLine.updateWithoutUpdatingDeliveryScheduleLines();

            this.setTouched(salesQuotationTable);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }

        this.deliveryLinesSync(orderLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDeliveryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates or creates the delivery line.
    /// </summary>
    /// <param name = "_tmpSalesQuotationLine">The <c>SalesQuotationLine</c> record to initialize from.</param>
    /// <param name = "_initialConversion">A boolean value that indicates whether it is an initial conversion.</param>
    /// <param name = "_lastScheduleLineNum">The line number of the last scheduled order line.</param>
    /// <returns>The delivery line.</returns>
    protected SalesQuotationLine writeDeliveryLine(SalesQuotationLine _tmpSalesQuotationLine, boolean _initialConversion, LineNum _lastScheduleLineNum)
    {
        SalesQuotationLine                      dbSalesQuotationLine;
        SalesQuotationLine                      firstLineAfterSchedule;
        SalesQty                                totalQty;
        SalesQty                                allocateQtyRemain;
        SalesMarkup                             salesMarkupAllocateRemain;
        SalesMarkup                             salesMarkupAllocateHere;
        SalesLineAmount                         lineAmountAllocateRemain;
        SalesLineAmount                         lineAmountAllocateHere;
        Map                                     fixedMarkupRemainMap;
        SalesQuotationDeliverySchedule          salesQuotationDeliverySchedule;
        SalesQuotationLineForeignTradeCategory  salesQuotationLineForeignTradeCategory;

        if (callerSalesQuotationLine.LineDeliveryType == LineDeliveryType::OrderLine)
        {
            totalQty = this.totalQty();
            allocateQtyRemain = totalQty;
            salesMarkupAllocateRemain = orderLine.SalesMarkup;
            lineAmountAllocateRemain = callerSalesQuotationLine.LineAmount;
            fixedMarkupRemainMap = new Map(Types::Int64, Types::Container);
        }
                
        select firstonly LineNum from firstLineAfterSchedule
                order by LineNum
                where firstLineAfterSchedule.QuotationId == orderLine.QuotationId
                   && firstLineAfterSchedule.LineNum     >  _lastScheduleLineNum;


        if (_initialConversion)
        {
            // for split markup allocation calculate the markup for the current line.
            if (dlvScheduleMarkupConversionMode == DlvScheduleMarkupConversionMode::Split)
            {
                if (_tmpSalesQuotationLine.SalesQty >= allocateQtyRemain)
                {
                    salesMarkupAllocateHere = CurrencyExchangeHelper::amount(salesMarkupAllocateRemain, _tmpSalesQuotationLine.CurrencyCode);
                }
                else
                {
                    salesMarkupAllocateHere = CurrencyExchangeHelper::amount(orderLine.SalesMarkup * _tmpSalesQuotationLine.SalesQty / totalQty, _tmpSalesQuotationLine.CurrencyCode);
                }
                salesMarkupAllocateRemain -= salesMarkupAllocateHere;
            }

            // when converting a line without unit price allocate the LineAmount according to quantity
            if (!callerSalesQuotationLine.SalesPrice && callerSalesQuotationLine.LineAmount)
            {
                if (_tmpSalesQuotationLine.SalesQty >= allocateQtyRemain)
                {
                    lineAmountAllocateHere = CurrencyExchangeHelper::amount(lineAmountAllocateRemain, _tmpSalesQuotationLine.CurrencyCode);
                }
                else
                {
                    lineAmountAllocateHere = CurrencyExchangeHelper::amount(callerSalesQuotationLine.LineAmount * _tmpSalesQuotationLine.SalesQty / totalQty, _tmpSalesQuotationLine.CurrencyCode);
                }
                lineAmountAllocateRemain -= lineAmountAllocateHere;
            }

            allocateQtyRemain -= _tmpSalesQuotationLine.SalesQty;
        }

        dbSalesQuotationLine = SalesQuotationLine::findInventTransId(_tmpSalesQuotationLine.InventTransId,true);

        if (dbSalesQuotationLine)
        {
            dbSalesQuotationLine.initFromSalesQuotationLine(_tmpSalesQuotationLine, true, true, true);
            dbSalesQuotationLine.DeliveryDateControlType  = _tmpSalesQuotationLine.DeliveryDateControlType;
            dbSalesQuotationLine.ReceiptDateRequested     = _tmpSalesQuotationLine.ReceiptDateRequested;
            dbSalesQuotationLine.ShippingDateRequested    = _tmpSalesQuotationLine.ShippingDateRequested;
            dbSalesQuotationLine.ConfirmedDlv             = _tmpSalesQuotationLine.ConfirmedDlv;

            if (_initialConversion && dlvScheduleMarkupConversionMode == DlvScheduleMarkupConversionMode::Split)
            {
                dbSalesQuotationLine.SalesMarkup = salesMarkupAllocateHere;
                dbSalesQuotationLine.LineAmount  = dbSalesQuotationLine.calcLineAmountForced();
            }

            if (_initialConversion && !callerSalesQuotationLine.SalesPrice && callerSalesQuotationLine.LineAmount)
            {
                dbSalesQuotationLine.LineAmount = lineAmountAllocateHere;
            }

            this.salesQuotationLine_Write(dbSalesQuotationLine);

            if (dbSalesQuotationLine.validateWrite())
            {
                dbSalesQuotationLine.updateWithoutUpdatingDeliveryScheduleLines();
            }
            else
            {
                // Delivery Schedule update failed.
                throw error("@SYS131420");
            }
        }
        else
        {
            dbSalesQuotationLine.data(_tmpSalesQuotationLine.data());
            dbSalesQuotationLine.LineCreationSequenceNumber = 0;
            dbSalesQuotationLine.RecId = 0;

            if (_initialConversion && dlvScheduleMarkupConversionMode == DlvScheduleMarkupConversionMode::Split)
            {
                dbSalesQuotationLine.SalesMarkup = salesMarkupAllocateHere;
                dbSalesQuotationLine.LineAmount = dbSalesQuotationLine.calcLineAmountForced();
            }

            if (_initialConversion && !callerSalesQuotationLine.SalesPrice && callerSalesQuotationLine.LineAmount)
            {
                dbSalesQuotationLine.LineAmount = lineAmountAllocateHere;
            }

            // adjust line number if it would mix delivery lines with order lines following the schedule.
            if (dbSalesQuotationLine.LineNum > _lastScheduleLineNum && firstLineAfterSchedule)
            {
                dbSalesQuotationLine.LineNum = (_lastScheduleLineNum  + firstLineAfterSchedule.LineNum) / 2;
            }
            _lastScheduleLineNum  = max(_lastScheduleLineNum, dbSalesQuotationLine.LineNum);

            this.salesQuotationLine_Write(dbSalesQuotationLine);

            if (dbSalesQuotationLine.validateWrite())
            {
                dbSalesQuotationLine.insert(false, false);
            }
            else
            {
                // The insertion of the delivery line failed.
                throw error("@SYS131422");
            }

            salesQuotationDeliverySchedule.OrderLine    = orderLine.InventTransId;
            salesQuotationDeliverySchedule.DeliveryLine = dbSalesQuotationLine.InventTransId;
            salesQuotationDeliverySchedule.insert();

            if (dbSalesQuotationLine.isCategoryBased())
            {
                salesQuotationLineForeignTradeCategory.initFromSalesQuotationLine(dbSalesQuotationLine);
                salesQuotationLineForeignTradeCategory.insert();
            }
        }

        if (_initialConversion)
        {
            Markup::copyFromOrderLineWithMultipleDeliveries(orderLine, dbSalesQuotationLine, dlvScheduleMarkupConversionMode, fixedMarkupRemainMap);
        }

        return dbSalesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAlternativeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the item in question should be replaced with the alternative item set up in the
    /// Item Details form.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// New delivery lines should never use Alternative Items.
    /// </remarks>
    public boolean useAlternativeItem()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOkServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the business logic that is triggered by pressing the OK button on the delivery schedule
    /// form.
    /// </summary>
    /// <param name="_callerSalesQuotationLine">
    /// The line for which the form was opened.
    /// </param>
    /// <param name="_scheduleLines">
    /// A list of lines from the data source of the form.
    /// </param>
    /// <param name="_dlvScheduleMarkupConversionMode">
    /// The mode of converting markup from order line to delivery lines.
    /// </param>
    /// <remarks>
    /// This method creates the object of the class on the server based on the serialized data passed by
    /// the client and then calls the <c>updateSalesQuotationLineTable</c> method.
    /// </remarks>
    static void closeOkServer(
        SalesQuotationLine _callerSalesQuotationLine,
        container _scheduleLines,
        DlvScheduleMarkupConversionMode _dlvScheduleMarkupConversionMode)
    {
        SalesQuotationTableForm_DlvSchedule salesQuotationTableForm_DlvSchedule = new SalesQuotationTableForm_DlvSchedule(_callerSalesQuotationLine);
        salesQuotationTableForm_DlvSchedule.parmScheduleLines(List::create(_scheduleLines));
        salesQuotationTableForm_DlvSchedule.parmMarkupConversionMode(_dlvScheduleMarkupConversionMode);

        salesQuotationTableForm_DlvSchedule.updateSalesQuotationLineTable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>