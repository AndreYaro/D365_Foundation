<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTrialBalanceReportDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider <c>LedgerTrialBalanceReportDP_CN</c> class for <c>LedgerTrialBalanceReport_CN</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(LedgerTrialBalanceReport_CN)),
    SRSReportParameterAttribute(classstr(LedgerTrialBalanceReportContract_CN))
]
public class LedgerTrialBalanceReportDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    #MacroLib.File
    LedgerTrialBalanceReportContract_CN contract;
    LedgerChartOfAccountsTreeLevel_CN ledgerChartOfAccountsTreeLevel;

    TmpGeneralLedger_CN     tmpGeneralLedger;
    Counter                 maxLines;
    Counter                 pageBreakCounter;
    TransDate               accountingDate;
    LedgerParameters        ledgerParameters;
    QueryRun                queryRun;
    SetIterator             accountIt;
    Set                     accountSet;
    Set                     voucherTypeSet;
    LedgerSeparator_CN      ledgerSeparator;
    TempStr                 ledgerSeparatorChar;
    LedgerAccountUtility_CN accountUtility;
    Level                   levelMin;
    boolean                 isTreeStructureEnabled;
    NoYes                   summaryExistTrans;
    CurrencyCode            companyCurrencyCode;
    Counter                 numOfLines;
    container               curCode;
    Amount                  amountDebit[];
    Amount                  amountCredit[];
    Amount                  amountDebitMST[];
    Amount                  amountCreditMST[];
    recId                   ledgerChartOfAccountsRecId;
    Query                   query;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPeriodBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create period balance for all general journal lines.
    /// </summary>
    public void createPeriodBalances()
    {
        MainAccount                mainAccount;
        GeneralJournalEntry        generalJournalEntry;
        GeneralJournalEntry_W      generalJournalEntryW;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        RefRecId                   oldRecId;
        Query                      queryAccount;
        QueryBuildRange            rangeAccount;
        QueryBuildDataSource       dsAccount;
        NoYes                      hasTrans;
        NoYes                      displayFinalSum;
        Integer                    accountTypeNum;
        AmountMST                  totalSummaryDR;
        AmountMST                  totalSummaryCR;
        AmountMST                  totalTotalDR;
        AmountMST                  totalTotalCR;
        MainAccountNum             tempMainAccountNum;
        Level                      accountLevel;

        accountIt       = new SetIterator(accountSet);
        queryAccount    = queryRun.query();
        dsAccount       = queryAccount.dataSourceTable(tablenum(MainAccount));

        dsAccount.addRange(fieldnum(MainAccount, LedgerChartOfAccounts)).value(queryValue(LedgerChartOfAccounts::current()));
        rangeAccount    = dsAccount.addRange(fieldnum(MainAccount, MainAccountId));
        displayFinalSum = NoYes::No;

        while (accountIt.more())
        {
            mainAccount = MainAccount::findByMainAccountId(accountIt.value());

            if (mainAccount.RecId)
            {
                tempMainAccountNum = this.removeSeparatorChar(mainAccount.MainAccountId);
                accountLevel       = accountUtility.getAccountLevelbyAccountNum(
                    tempMainAccountNum,
                    LedgerChartOfAccounts::current());

                if (levelMin
                    && accountLevel != levelMin)
                {
                    accountIt.next();
                    continue;
                }

                if (isTreeStructureEnabled)
                {
                    this.insertSumary(accountTypeNum, totalSummaryDR, totalSummaryCR, mainAccount);
                    if (accountTypeNum != 0
                        && accountTypeNum != str2int(substr(mainAccount.MainAccountId, 1, 1)))
                    {
                        totalSummaryDR = 0;
                        totalSummaryCR = 0;
                        summaryExistTrans = NoYes::No;
                    }
                }
                tmpGeneralLedger.clear();

                tmpGeneralLedger.AccountNum      = mainAccount.MainAccountId;
                tmpGeneralLedger.AccountName     = mainAccount.localizedName();
                tmpGeneralLedger.CurrencyCode    = companyCurrencyCode;
                tmpGeneralLedger.ExchRate        = 100;
                tmpGeneralLedger.IsPrimary       = NoYes::Yes;

                amountDebit[0]     = 0;
                amountCredit[0]    = 0;
                amountDebitMST[0]  = 0;
                amountCreditMST[0] = 0;
                curCode            = connull();

                rangeAccount.value(mainAccount.MainAccountId + #AllFilesName);
                queryRun.reset();
                oldRecId = 0;
                hasTrans = NoYes::No;

                while (queryRun.next())
                {
                    if (queryRun.changed(tablenum(generalJournalAccountEntry)))
                    {
                        generalJournalAccountEntry   = queryRun.get(tablenum(generalJournalAccountEntry));
                        generalJournalEntry = GeneralJournalEntry::findByGeneralJournalAccountEntry(generalJournalAccountEntry.RecId);
                        generalJournalEntryW = GeneralJournalEntry_W::findByGeneralJournalEntry(generalJournalAccountEntry.GeneralJournalEntry);

                        if (generalJournalAccountEntry.RecId
                            && oldRecId != generalJournalAccountEntry.RecId
                            && FiscalCalendarPeriod::find(generalJournalEntry.FiscalCalendarPeriod).Type == FiscalPeriodType::Operating)
                        {
                            oldRecId = generalJournalAccountEntry.RecId;
                            if (voucherTypeSet.elements() == 0
                                || voucherTypeSet.in(generalJournalEntryW.LedgerVoucherType_CN))
                            {
                                if (confind(curCode, generalJournalAccountEntry.TransactionCurrencyCode) == 0)
                                {
                                    curCode += generalJournalAccountEntry.TransactionCurrencyCode;
                                }
                                tmpGeneralLedger.AmountMSTDebit  += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
                                tmpGeneralLedger.AmountMSTCredit += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.AccountingCurrencyAmount : 0;
                                amountDebitMST[confind(curCode, generalJournalAccountEntry.TransactionCurrencyCode)]  += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
                                amountCreditMST[confind(curCode, generalJournalAccountEntry.TransactionCurrencyCode)] += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.AccountingCurrencyAmount : 0;
                                amountDebit[confind(curCode, generalJournalAccountEntry.TransactionCurrencyCode)]     += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.TransactionCurrencyAmount;
                                amountCredit[confind(curCode, generalJournalAccountEntry.TransactionCurrencyCode)]    += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.TransactionCurrencyAmount : 0;
                                hasTrans        = NoYes::Yes;
                                displayFinalSum = NoYes::Yes;
                            }
                        }

                        if (!generalJournalAccountEntry.RecId)
                        {
                            break;
                        }
                    }
                }

                if (isTreeStructureEnabled)
                {
                    if (hasTrans == NoYes::Yes
                        && accountTypeNum == str2int(substr(mainAccount.MainAccountId, 1, 1)))
                    {
                        summaryExistTrans = NoYes::Yes;
                    }

                    tempMainAccountNum = this.removeSeparatorChar(mainAccount.MainAccountId);

                    if (accountUtility.getAccountLevelbyAccountNum(
                        tempMainAccountNum, mainAccount.LedgerChartOfAccounts) >= levelMin)
                    {
                        totalSummaryDR += tmpGeneralLedger.AmountMSTDebit;
                        totalSummaryCR += tmpGeneralLedger.AmountMSTCredit;
                        totalTotalDR   += tmpGeneralLedger.AmountMSTDebit;
                        totalTotalCR   += tmpGeneralLedger.AmountMSTCredit;
                    }
                    accountTypeNum =  str2int(substr(mainAccount.MainAccountId, 1, 1));
                }

                if (ledgerParameters.ExcludeUnusedAccounts_CN == NoYes::No
                    || hasTrans == NoYes::Yes)
                {
                    tmpGeneralLedger.insert();
                    numOfLines += 1;

                    this.pageBreak();
                    this.insertTmpGeneralLedger();
                }
            }
            accountIt.next();
        }

        if (!accountIt.more())
        {
            mainAccount = MainAccount::findByMainAccountId('');
        }

        if ((displayFinalSum == NoYes::Yes
                || ledgerParameters.ExcludeUnusedAccounts_CN == NoYes::No)
            && isTreeStructureEnabled)
        {
            this.insertSumary(
                accountTypeNum,
                totalSummaryDR,
                totalSummaryCR,
                mainAccount);

            this.insertSumary(
                accountTypeNum,
                totalTotalDR,
                totalTotalCR,
                mainAccount,
                NoYes::Yes);
        }
        rangeAccount.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// Returns temporary table <c>TmpGeneralLedger_CN</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpGeneralLedger_CN))
    ]
    public TmpGeneralLedger_CN getTmpGeneralLedger()
    {
        return tmpGeneralLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSumary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts amountMST of DR and CR to tmpGeneralLedger table according to account type.
    /// </summary>
    /// <param name="_accountTypeNum">
    /// Account number.
    /// </param>
    /// <param name="_totalDR">
    /// Total debit amount.
    /// </param>
    /// <param name="_totalCR">
    /// Total credit amount.
    /// </param>
    /// <param name="_mainAccount">
    /// Main account record.
    /// </param>
    /// <param name="_isTotal">
    /// It is total.
    /// </param>
    public void insertSumary(
        Counter     _accountTypeNum,
        AmountMST   _totalDR,
        AmountMST   _totalCR,
        MainAccount _mainAccount,
        NoYes       _isTotal = NoYes::No)
    {
        MainAccount mainAccount;

        if ((summaryExistTrans == NoYes::Yes
                || ledgerParameters.ExcludeUnusedAccounts_CN == NoYes::No)
            && (levelMin != 0
                && _accountTypeNum != 0
                && _accountTypeNum != str2int(substr(_mainAccount.MainAccountId, 1, 1))))
        {
            tmpGeneralLedger.clear();
            tmpGeneralLedger.IsPrimary = NoYes::Yes;
            if (_isTotal)
            {
                // Total
                tmpGeneralLedger.AccountName = "@SYS809";
            }
            else
            {
                SysDaQueryObject queryObject = this.getMainAccountType(mainAccount, _accountTypeNum);

                SysDaFindStatement findStatement = new SysDaFindStatement();
                findStatement.find(new SysDaFindObject(queryObject));

                boolean isSummary = this.getSummary(mainAccount);

                if (!isSummary)
                {
                    // Summary
                    tmpGeneralLedger.AccountName = "@SYS15560";
                }
            }

            tmpGeneralLedger.AmountMSTDebit = _totalDR;
            tmpGeneralLedger.AmountMSTCredit = _totalCR;
            tmpGeneralLedger.insert();
            numOfLines += 1;
            this.pageBreak();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account type.
    /// </summary>
    /// <param name = "_mainAccount">
    /// The <c>MainAccount</c> record.
    /// </param>
    /// <param name = "_accountTypeNum">
    /// The account number.
    /// </param>
    /// <returns>
    /// The query to select records.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaQueryObject getMainAccountType(MainAccount _mainAccount, Counter _accountTypeNum)
    {
        MainAccountNum mainAccountId = int2str(_accountTypeNum) + #AllFilesName;

        SysDaQueryObject queryObject = new SysDaQueryObject(_mainAccount);

        queryObject.projection().add(fieldStr(MainAccount, Type));
        queryObject.firstOnlyHint = true;

        queryObject.whereClause(new SysDaAndExpression(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, LedgerChartOfAccounts)), new SysDaValueExpression(LedgerChartOfAccounts::current())),
            new SysDaLikeExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, MainAccountId)), new SysDaValueExpression(mainAccountId)))
            .and(new SysDaOrExpression(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Liability))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Asset)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::BalanceSheet)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Expense)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Revenue)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::ProfitAndLoss))),
                new SysDaEqualsExpression(new SysDaFieldExpression(_mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::BalanceSheet)))));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and gets the summary based on account type.
    /// </summary>
    /// <param name = "_mainAccount">
    /// The <c>MainAccount</c> record.
    /// </param>
    /// <returns>
    /// true if the summary has been set; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean getSummary(MainAccount _mainAccount)
    {
        boolean isSummary = true;

        switch (_mainAccount.Type)
        {
            case DimensionLedgerAccountType::Asset:
                // Summary of asset
                tmpGeneralLedger.AccountName = "@GLS54650";
                break;
            case DimensionLedgerAccountType::Expense:
                // Summary of cost
                tmpGeneralLedger.AccountName = "@GLS54651";
                break;
            case DimensionLedgerAccountType::Liability:
                // Summary of liability
                tmpGeneralLedger.AccountName = "@GLS54654";
                break;
            case DimensionLedgerAccountType::ProfitAndLoss:
                // Summary of profit & loss
                tmpGeneralLedger.AccountName = "@GLS54658";
                break;

            case DimensionLedgerAccountType::BalanceSheet:
                if (LedgerParameters::find().CommonAccountType_CN)
                {
                    // Summary of common accounts
                    tmpGeneralLedger.AccountName = "@GLS60462";
                }
                else
                {
                    // Parameter “Enable common account type” must be checked in order to use common account type.
                    throw error("@GLS60505");
                }
                break;

            case DimensionLedgerAccountType::Equity:
                // Summary of owner's equity
                tmpGeneralLedger.AccountName = "@GLS54657";
                break;
            default:
                isSummary = false;
        }

        return isSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create genearal ledger by currency code.
    /// </summary>
    public void insertTmpGeneralLedger()
    {
        Counter            i;
        ExchangeRateHelper exchRateHelper;

        if (conlen(curCode) >= 1)
        {
            if (conlen(curCode) == 1
                && confind(curCode, companyCurrencyCode) == 1)
            {
                return;
            }
            for (i = 1; i <= conlen(curCode); i++)
            {
                if (i == confind(curCode, companyCurrencyCode))
                {
                    continue;
                }
                tmpGeneralLedger.CurrencyCode    = conpeek(curCode, i);
                tmpGeneralLedger.IsPrimary       = NoYes::No;
                tmpGeneralLedger.AmountCurDebit  = amountDebit[i];
                tmpGeneralLedger.AmountCurCredit = amountCredit[i];
                tmpGeneralLedger.AmountMSTDebit  = amountDebitMST[i];
                tmpGeneralLedger.AmountMSTCredit = amountCreditMST[i];
                if (tmpGeneralLedger.AmountCurDebit != 0)
                {
                    tmpGeneralLedger.ExchRate = (tmpGeneralLedger.AmountMSTDebit / tmpGeneralLedger.AmountCurDebit) * 100;
                }
                else if (tmpGeneralLedger.AmountCurCredit != 0)
                {
                    tmpGeneralLedger.ExchRate = (tmpGeneralLedger.AmountMSTCredit / tmpGeneralLedger.AmountCurCredit) * 100;
                }
                else
                {
                    exchRateHelper = ExchangeRateHelper::newExchangeDate(
                        Ledger::primaryLedger(CompanyInfo::current()),
                        tmpGeneralLedger.CurrencyCode,
                        accountingDate);

                    tmpGeneralLedger.ExchRate = exchRateHelper.getExchangeRate1();
                }
                tmpGeneralLedger.insert();
                numOfLines += 1;
                this.pageBreak();
            }
            if (confind(curCode, companyCurrencyCode) > 0)
            {
                tmpGeneralLedger.CurrencyCode    = companyCurrencyCode;
                tmpGeneralLedger.ExchRate        = 100;
                tmpGeneralLedger.IsPrimary       = NoYes::No;
                tmpGeneralLedger.AmountCurDebit  = amountDebit[confind(curCode, companyCurrencyCode)];
                tmpGeneralLedger.AmountCurCredit = amountCredit[confind(curCode, companyCurrencyCode)];
                tmpGeneralLedger.AmountMSTDebit  = amountDebitMST[confind(curCode, companyCurrencyCode)];
                tmpGeneralLedger.AmountMSTCredit = amountCreditMST[confind(curCode, companyCurrencyCode)];
                tmpGeneralLedger.insert();
                numOfLines += 1;
                this.pageBreak();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();

        accountSet                 = new Set(Types::String);
        voucherTypeSet             = new Set(Types::Int64);
        companyCurrencyCode        = Ledger::accountingCurrency();
        ledgerParameters           = LedgerParameters::find();
        isTreeStructureEnabled     = LedgerChartOfAccounts::isTreeStructureEnabled_CN();
        ledgerChartOfAccountsRecId = LedgerChartOfAccounts::current();
        accountUtility             = new LedgerAccountUtility_CN();
        ledgerSeparator            = LedgerAccountUtility_CN::findSeparator(ledgerChartOfAccountsRecId);
        ledgerSeparatorChar        = LedgerAccountUtility_CN::findSeparatorChar(ledgerSeparator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageBreak</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value for PageBreakCounter
    /// </summary>
    public void pageBreak()
    {
        #define.InitNumOfLineForNextPage(3)

        if (maxLines < numOfLines)
        {
            pageBreakCounter += 1;
            numOfLines = #InitNumOfLineForNextPage;
        }

        ttsbegin;

        tmpGeneralLedger.PageBreakCounter = pageBreakCounter;
        tmpGeneralLedger.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        MainAccount          mainAccount;
        MainAccountNum       tempMainAccount;
        Level                tempLevel;
        LedgerVoucherType_CN localvoucherType;

        #define.StartingLen(1)

        Integer accountMinLen = accountUtility.getAccountLengthByLevel(
            #StartingLen, ledgerChartOfAccountsRecId);

        contract   = this.parmDataContract() as LedgerTrialBalanceReportContract_CN;
        maxLines   = contract.parmMaxLines();
        levelMin   = contract.parmLevel();
        query      = this.parmQuery();
        queryRun   = new QueryRun(query);
        numOfLines = #StartingLen;

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(MainAccount)))
            {
                mainAccount = queryRun.get(tablenum(MainAccount));

                if (mainAccount.RecId)
                {
                    tempMainAccount = this.removeSeparatorChar(mainAccount.MainAccountId);
                    tempLevel       = accountUtility.getAccountLevelbyAccountNum(
                        tempMainAccount,
                        LedgerChartOfAccounts::current());

                    while (levelMin
                        && tempLevel >= levelMin
                        && isTreeStructureEnabled)
                    {
                        Integer accountLen = accountUtility.getAccountLengthByLevel(
                            tempLevel,
                            ledgerChartOfAccountsRecId);
                        tempMainAccount = substr(mainAccount.MainAccountId, 1, accountLen);
                        accountSet.add(tempMainAccount);
                        tempLevel--;
                    }
                    accountSet.add(mainAccount.MainAccountId);
                }
            }

            if (ledgerParameters.ChineseVoucher_CN == NoYes::Yes)
            {
                localvoucherType = queryRun.get(tablenum(LedgerVoucherType_CN));

                if (localvoucherType.RecId)
                {
                    voucherTypeSet.add(localvoucherType.RecId);
                }
            }
        }

        this.createPeriodBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSeparatorChar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes Separator from <c>MainAccountNum</c> value
    /// </summary>
    /// <param name="_accountNum">
    /// value passes for the <c>MainAccountNum</c>
    /// </param>
    /// <returns>
    /// returns <c>MainAccountNum</c>
    /// </returns>
    private MainAccountNum removeSeparatorChar(MainAccountNum _accountNum)
    {
        MainAccountNum tempMainAccountNum;

        if (ledgerSeparator != LedgerSeparator_CN::None)
        {
            tempMainAccountNum = strrem(_accountNum, ledgerSeparatorChar);
        }
        else
        {
            tempMainAccountNum = _accountNum;
        }

        return tempMainAccountNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>