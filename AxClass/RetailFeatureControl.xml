<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFeatureControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailFeatureControl</c> class is used to control retail feature flags.
/// </summary>
internal class RetailFeatureControl
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isFeatureFlightKeySet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the given feature flag flight key is enabled.
    /// </summary>
    /// <param name = "_flightKey">The flight key to check.</param>
    /// <param name = "_functionName">The name of the calling function, for logging purposes.</param>
    /// <param name = "_enabledByDefault">True if the flighting feature is enabled by default; otherwise, false.</param>
    /// <returns>True when the config parameter exists and is set to 1 or when it doesn't exist and it is enabled by default; otherwise, false.</returns>
    internal static boolean isFeatureFlightKeySet(str _flightKey, str _functionName, boolean _enabledByDefault = true)
    {
        RetailConfigurationParameters configParameters = RetailConfigurationParameters::findByName(_flightKey);

        if (!configParameters.RecId)
        {
            eventSource.EventWriteFeatureControlEnabledByDefault(_flightKey, _functionName, _enabledByDefault, false);

            return _enabledByDefault;
        }

        eventSource.EventWriteFeatureControlRead(_flightKey, _functionName, _enabledByDefault, false, configParameters.Value);

        boolean key = str2Int(configParameters.Value);

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSystemMaintainedFeatureFlightKeySet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the given system maintained feature flag flight key is enabled.
    /// </summary>
    /// <param name = "_flightKey">The flight key to check.</param>
    /// <param name = "_functionName">The name of the calling function, for logging purposes.</param>
    /// <param name = "_enabledByDefault">True if the flighting feature is enabled by default; otherwise, false.</param>
    /// <returns>True when the system maintained config parameter exists and is set to 1 or when it doesn't exist and it is enabled by default; otherwise, false.</returns>
    internal static boolean isSystemMaintainedFeatureFlightKeySet(str _flightKey, str _functionName, boolean _enabledByDefault = true)
    {
        RetailConfigurationParameters configParameters = RetailConfigurationParameters::findByName(_flightKey);

        if (!configParameters.RecId || configParameters.MaintainedBySystem == NoYes::No)
        {
            eventSource.EventWriteFeatureControlEnabledByDefault(_flightKey, _functionName, _enabledByDefault, false);

            return _enabledByDefault;
        }

        eventSource.EventWriteFeatureControlRead(_flightKey, _functionName, _enabledByDefault, false, configParameters.Value);

        boolean key = str2Int(configParameters.Value);

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureFlightKeyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the given feature flag flight key is enabled and returns the value if it is enabled.
    /// </summary>
    /// <param name = "_flightKey">The flight key to check.</param>
    /// <param name = "_functionName">The name of the calling function, for logging purposes.</param>
    /// <returns>Value of the config parameter when the config parameter exists or when it doesn't exist and it is enabled by default; otherwise, empty string.</returns>
    internal static str getFeatureFlightKeyValue(str _flightKey, str _functionName)
    {
        RetailConfigurationParameters configParameters = RetailConfigurationParameters::findByName(_flightKey);

        if (!configParameters.RecId)
        {
            return '';
        }

        eventSource.EventWriteFeatureControlRead(_flightKey, _functionName, false, false, configParameters.Value);

        return configParameters.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureControlList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of shared configuration parameters.
    /// </summary>
    /// <param name = "_filter">The filter.</param>
    /// <returns>The filtered list of shared configuration parameters.</returns>
    internal static List getFeatureControlList(str _filter)
    {
        List featureControlList = new List(Types::Class);

        if (_filter == '')
        {
            return featureControlList;
        }
        
        RetailSharedConfigurationParameters sharedConfigurationParameters;

        while select sharedConfigurationParameters where sharedConfigurationParameters.Name like _filter
        {
            featureControlList.addEnd(new RetailCDXFeatureControlParameter(sharedConfigurationParameters.Name, sharedConfigurationParameters.Value));
        }

        return featureControlList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureManagementList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of feature management data.
    /// </summary>
    /// <param name = "_filter">The filter.</param>
    /// <returns>The filtered list of feature management data.</returns>
    internal static List getFeatureManagementList(str _filter)
    {
        List featureManagementList = new List(Types::Class);

        if (_filter == '')
        {
            return featureManagementList;
        }

        FeatureManagementState featureManagementState;
        FeatureManagementMetadata featureManagementMetadata;

        while select Name, IsEnabled from featureManagementState
            join EnableDate from featureManagementMetadata
            where featureManagementState.RecId == featureManagementMetadata.FeatureState
                && featureManagementState.Name like _filter
        {
            featureManagementList.addEnd(new RetailFeatureManagementParameter(featureManagementState.Name, featureManagementState.isEnabled, featureManagementMetadata.EnableDate));
        }

        return featureManagementList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureFlightList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of feature flights.
    /// </summary>
    /// <param name = "_filter">The filter.</param>
    /// <param name = "_serviceFilter">The service filter.</param>
    /// <returns>The filtered list of feature flights.</returns>
    internal static List getFeatureFlightList(str _filter, str _serviceFilter)
    {
        List featureFlightList = new List(Types::Class);

        if (_filter == '')
        {
            return featureFlightList;
        }

        SysFlighting sysFlighting;

        if (_serviceFilter != '' && strKeep(_serviceFilter, '0123456789') == _serviceFilter)
        {
            int serviceId = str2Int(_serviceFilter);
        
            while select FlightName, Enabled, FlightServiceID from sysFlighting
                where sysFlighting.FlightName like _filter && sysFlighting.FlightServiceID == serviceId
            {
                featureFlightList.addEnd(new RetailFeatureFlightParameter(sysFlighting.FlightName, sysFlighting.Enabled, sysFlighting.FlightServiceID));
            }
        }
        else
        {
            while select FlightName, Enabled, FlightServiceID from sysFlighting
                where sysFlighting.FlightName like _filter
            {
                featureFlightList.addEnd(new RetailFeatureFlightParameter(sysFlighting.FlightName, sysFlighting.Enabled, sysFlighting.FlightServiceID));
            }
        }

        return featureFlightList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSharedFeatureFlightKeySet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the given shared feature flag flight key is enabled.
    /// </summary>
    /// <param name = "_flightKey">The flight key to check.</param>
    /// <param name = "_functionName">The name of the calling fuction, for logging purposes.</param>
    /// <param name = "_enabledByDefault">True if the flighting shared feature is enabled by default; otherwise, false.</param>
    /// <returns>True when the shared config parameter exists and is set to 1 or when it doesn't exist and it is enabled by default; otherwise, false.</returns>
    internal static boolean isSharedFeatureFlightKeySet(str _flightKey, str _functionName, boolean _enabledByDefault = true)
    {
        const str enabled = 'true';
        RetailSharedConfigurationParameters configParameters = RetailSharedConfigurationParameters::findByName(_flightKey);

        if (!configParameters.RecId)
        {
            if (_enabledByDefault)
            {
                eventSource.EventWriteFeatureControlEnabledByDefault(_flightKey, _functionName, _enabledByDefault, true);
            }

            return _enabledByDefault;
        }

        boolean key = (configParameters.Value == enabled) ? true : str2Int(configParameters.Value);

        eventSource.EventWriteFeatureControlRead(_flightKey, _functionName, _enabledByDefault, true, any2Str(key));

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSharedFeatureFlightKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the given shared feature flag flight key. If shared feature flag doesn't exist it is created then set.
    /// </summary>
    /// <param name = "_flightKey">The flight key to set.</param>
    /// <param name = "_functionName">The name of the calling fuction, for logging purposes.</param>
    /// <param name = "_value">The value to be set for the configuration.</param>
    /// <param name = "_description">The description to set.</param>
    internal static void setSharedFeatureFlightKey(str _flightKey, str _functionName, str _value, str _description = null)
    {
        ttsbegin;

        RetailSharedConfigurationParameters configParameters = RetailSharedConfigurationParameters::findByName(_flightKey, true);

        if (!configParameters.RecId)
        {
            configParameters.initValue();
            configParameters.Name = _flightKey;
            configParameters.MaintainedBySystem = true;
            configParameters.Description = _description ? _description : _flightKey;
            eventSource.EventWriteFeatureControlCreate(_flightKey, _functionName, true);
        }

        configParameters.Value = _value;
        eventSource.EventWriteFeatureControlSet(_flightKey, _functionName, configParameters.Value, true);

        configParameters.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharedFeatureFlightKeyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the given feature flag flight key.
    /// </summary>
    /// <param name = "_flightKey">The feature flight key.</param>
    /// <returns>Value of the given feature flag flight key from the shared configuration parameters; otherwise returns empty string.</returns>
    internal static str getSharedFeatureFlightKeyValue(str _flightKey)
    {
        RetailSharedConfigurationParameters configParameters = RetailSharedConfigurationParameters::findByName(_flightKey);

        return configParameters.Value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>