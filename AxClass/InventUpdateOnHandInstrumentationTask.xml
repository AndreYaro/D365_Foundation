<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpdateOnhandInstrumentationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using RunTimeEventSource = Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource;

/// <summary>
/// The <c>InventUpdateOnhandInstrumentationTask</c> class is responsible for instrumenting the <c>InventUpdateOnhand</c> class.
/// </summary>
public class InventUpdateOnhandInstrumentationTask implements System.IDisposable
{
    private   TradeInstrumentationStopwatch totalTimeStopwatch, 
                                            subProcessStopWatch;
    private   str                           context;
    protected System.Text.StringBuilder     measureBuilder;

    private InventInstrumentationLogger         instrumentationLogger;
    private SysInstrumentationActivityContext   instrumentationActivityContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of inventory update instrumentation task and logs a start event.
    /// </summary>
    /// <param name = "_context">A method name representing the event measure context.</param>
    public void new(str _context)
    {
        context = _context;

        RunTimeEventSource::EventWriteInfoLogMark(Exception::Info,
                    strFmt('TaskName: InventUpdateOnhand, OpcodeName: Start, Context: %1, Duration: %2', context, 0));

        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        measureBuilder = new System.Text.StringBuilder();
        instrumentationLogger = InventInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        instrumentationActivityContext = instrumentationLogger.updateActivities().onhand(context);

        totalTimeStopwatch = TradeInstrumentationStopwatch::newStopwatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startMeasureTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts measuring time for a subprocess.
    /// </summary>
    public void startMeasureTime()
    {
        if (!subProcessStopWatch)
        {
            subProcessStopWatch = TradeInstrumentationStopwatch::newStopwatch();
        }
        else
        {
            subProcessStopwatch.restart();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopMeasureTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stops measuring time for a subprocess, and logs the elapsed time.
    /// </summary>
    /// <param name = "_context">A context for which to take the measure.</param>
    public void stopMeasureTime(str _context)
    {
        measureBuilder.Append(strFmt('%1: %2, ', _context, subProcessStopWatch.elapsedMilliseconds()));

        instrumentationActivityContext.addCustomProperty(_context, int642Str(subProcessStopWatch.elapsedMilliseconds()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEventCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the count of a measure specified by the context.
    /// </summary>
    /// <param name = "_context">A context of the event.</param>
    /// <param name = "_count">A count for the event statistics.</param>
    public void addEventCount(str _context, int64 _count)
    {        
        measureBuilder.Append(strFmt('%1: %2, ', _context, _count));

        instrumentationActivityContext.addCustomProperty(_context, int642Str(_count));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the event parameter.
    /// </summary>
    /// <param name = "_context">A context of the event.</param>
    /// <param name = "_contextValue">A context value for the context.</param>
    public void addEvent(str _context, str _contextValue)
    {
        measureBuilder.Append(strFmt('%1: %2, ', _context, _contextValue));

        instrumentationActivityContext.addCustomProperty(_context, _contextValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes of the inventory update on hand instrumentation task and logs a stop event.
    /// </summary>
    public void dispose()
    {
        RunTimeEventSource::EventWriteInfoLogMark(Exception::Info,
                    strFmt('TaskName: InventUpdateOnhand, OpcodeName: Stop, Context: %1, Duration: %2, %3', context, totalTimeStopwatch.elapsedMilliseconds(), this.getMeasures()));

        instrumentationActivityContext.dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMeasures</Name>
				<Source><![CDATA[
    private System.String getMeasures()
    {
        this.removeTrailingSeparator();
        return measureBuilder.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTrailingSeparator</Name>
				<Source><![CDATA[
    private void removeTrailingSeparator()
    {
        if (measureBuilder.Length > 2)
        {
            measureBuilder.Length = measureBuilder.Length - 2;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>