<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetEncumbranceSummaryForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the form runner class for the <c>BudgetEncumbranceReconciliationSummary</c> form.
/// </summary>
internal class BudgetEncumbranceSummaryForm
{
    private FormRun formRun;

    private BudgetEncumbranceInquiryProcessor budgetEncumbranceInquiryProcessor;
    private BudgetEncumbranceInquiryParameter encumbranceInquiryParameter;
    private BudgetAnalysisRequest analysisRequest;
    private LedgerTrialBalanceListPageBalanceParms trialBalanceParameters;

    private FormCheckBoxControl ctrlDisplayAllDimensionAccounts;
    private FormCheckBoxControl ctrlDisplaySeparateDimensions;
    private FormCheckBoxControl ctrlDisplayDimensionName;
    private FormCheckBoxControl ctrlDisplayVarianceEntryOnly;
    private FormCheckBoxControl ctrlIsClosingIncluded;
    private FormControl ctrlLedgerDimensionCombineDisplayValue;
    private FormDateControl ctrlFromDate;
    private FormDateControl ctrlToDate;
    private FormComboBoxControl ctrlPostingLayer;
    private FormStringControl ctrlDimensionSet;
    private FormStringControl ctrlFocusValue;
    private FormStringControl ctrlDateInterval;

    private FormGridControl ctrlSummaryGrid;
    private QuickFilterControl quickFilterControl;

    private boolean isLedgerBalanceFeatureEnabled = FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance());

    #Dimensions

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetEncumbranceSummaryForm construct(FormRun _formRun)
    {
        BudgetEncumbranceSummaryForm budgetEncumbranceInquiryForm = new BudgetEncumbranceSummaryForm();

        budgetEncumbranceInquiryForm.setFormRun(_formRun);
        budgetEncumbranceInquiryForm.initControls();

        return budgetEncumbranceInquiryForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(BudgetEncumbranceReconciliation), MenuItemType::Display);

        menuFunction.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetEncumbranceInquiryProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the instance of the <C>BudgetEncumbranceInquiryProcessor</C>.
    /// </summary>
    /// <returns></returns>
    internal BudgetEncumbranceInquiryProcessor getBudgetEncumbranceInquiryProcessor()
    {
        return budgetEncumbranceInquiryProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBalanceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the balance amounts based on parameters when the calculate balance button is clicked.
    /// </summary>
    /// <param name = "_budgetTrialBalanceSummaryTemp">The reference of <c>BudgetTrialEncumbranceInquirySummaryTmp</c> table.</param>
    /// <param name = "_budgetAnalysisDimensionTransTemp">The reference of <c>BudgetAnalysisDimensionSummaryTmp</c> table for all transactions.</param>
    /// <param name = "_budgetAnalysisDimensionSummaryTemp">The reference of <c>BudgetAnalysisDimensionSummaryTmp</c> table for total transactions.</param>
    /// <param name = "_dimensionFocusNameTmp">The reference of <c>DimensionFocusNameTmp</c> table.</param>
    internal void generateBalanceAmount(
        BudgetTrialEncumbranceInquirySummaryTmp _budgetTrialBalanceSummaryTemp,
        BudgetAnalysisDimensionSummaryTmp _budgetAnalysisDimensionTransTemp,
        BudgetAnalysisDimensionSummaryTmp _budgetAnalysisDimensionSummaryTemp,
        DimensionFocusNameTmp _dimensionFocusNameTmp,
        BudgetTrialEncumbranceInquirySummaryTmp _budgetTrialBalanceTotalTmp)
    {
        this.initializeProcessParameters(
            _budgetAnalysisDimensionTransTemp,
            _budgetAnalysisDimensionSummaryTemp,
            _dimensionFocusNameTmp);

        budgetEncumbranceInquiryProcessor = BudgetEncumbranceInquiryProcessor::construct(encumbranceInquiryParameter);

        budgetEncumbranceInquiryProcessor.calculateBalance(_budgetTrialBalanceSummaryTemp, _budgetTrialBalanceTotalTmp);

        this.refreshForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBalanceDimensionDescriptionsTmp</Name>
				<Source><![CDATA[
    internal void setBalanceDimensionDescriptionsTmp(GeneralLedgerBalanceDimensionDescriptionsTmp _balanceDimensionDescriptionsTmp)
    {
        analysisRequest.parmBalanceDimensionDescriptionsTmp(_balanceDimensionDescriptionsTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionAttributeValueColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form controls for the dimension attribute columns based on the financial dimension set selected.
    /// </summary>
    /// <param name="_dimensionHierarchyId">
    /// The dimension hierarchy ID to be used to show or hide the dimension columns.
    /// </param>
    internal void updateDimensionAttributeValueColumns(DimensionHierarchyId _dimensionHierarchyId)
    {
        FormStringControl dimensionFormControl;

        if (ctrlDisplaySeparateDimensions.value())
        {
            // Hide Ledger Account column and display individual segments for the selected financial dimension set
            ctrlLedgerDimensionCombineDisplayValue.visible(false);

            if (_dimensionHierarchyId)
            {
                DimensionSetSegmentName dimensionSetSegmentNames = DimensionHierarchyLevel::getDimensionHierarchyLevelNames(_dimensionHierarchyId);

                int dimensionHierarchyLevelCount = DimensionHierarchy::getLevelCount(_dimensionHierarchyId);

                for (int levelIndex = 1; levelIndex <= #MaxDimensionHierarchyLevelsInStructure; levelIndex++)
                {
                    if (levelIndex <= dimensionHierarchyLevelCount)
                    {
                        dimensionFormControl = this.getDimensionAttributeControl(levelIndex);

                        dimensionFormControl.label(dimensionSetSegmentNames[levelIndex]);
                        dimensionFormControl.visible(true);
                    }
                    else
                    {
                        dimensionFormControl = this.getDimensionAttributeControl(levelIndex);
                        dimensionFormControl.visible(false);
                    }
                }
            }
        }
        else
        {
            // Show Ledger Account column and hide individual segments for the selected financial dimension set
            ctrlLedgerDimensionCombineDisplayValue.visible(true);

            for (int levelIndex = 1; levelIndex <= #MaxDimensionHierarchyLevelsInStructure; levelIndex++)
            {
                dimensionFormControl = this.getDimensionAttributeControl(levelIndex);
                dimensionFormControl.visible(false);
            }
        }

        this.updateQuickFilterControlList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the parameters are valid for the balance calculation process.
    /// </summary>
    /// <returns>
    /// true if all the parameters are valid; otherwise, false.
    /// </returns>
    internal boolean isValidParameter()
    {
        boolean isValid = true;
        DimensionHierarchy dimensionHierarchy = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, ctrlDimensionSet.text());

        if (dimensionHierarchy == null)
        {
            isValid = checkFailed(strFmt("@SYS333565", ctrlDimensionSet.text()));
        }

        if (isValid && ctrlPostingLayer.selection() < 0)
        {
            isValid = checkFailed("@GeneralLedger:TrialBalancePostingLayerRequired");
        }

        if (isValid)
        {
            // Make sure date range is valid and dates are in the same fiscal year
            LedgerTrialBalanceListPageBalanceParms parameters = LedgerTrialBalanceListPageBalanceParms::construct();

            isValid = parameters.validateDates(ctrlFromDate.dateValue(), ctrlToDate.dateValue());
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reloads the form with new parameters and data set.
    /// </summary>
    internal void refreshForm()
    {
        this.saveFormParameters();

        ctrlFocusValue.visible(ctrlDisplayDimensionName.value());

        this.updateDimensionAttributeValueColumns(analysisRequest.parmDimensionHierarchyId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMainAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the encumbrance main accounts are setup.
    /// </summary>
    /// <returns>
    /// true if the main accounts are setup; otherwise, false.
    /// </returns>
    internal boolean hasMainAccounts()
    {
        BudgetEncumbranceInquiryMainAccount budgetEncumbranceInquiryMainAccount;

        select count(RecId) from budgetEncumbranceInquiryMainAccount;

        return budgetEncumbranceInquiryMainAccount.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>BudgetEncumbranceReconciliationDetail</c> form.
    /// </summary>
    /// <param name="_focusLedgerDimension">
    /// The ledger dimension to filter the detail records.
    /// </param>
    internal void showDetails(LedgerDimensionAccount _focusLedgerDimension)
    {
        budgetEncumbranceInquiryProcessor.setCurrentDetailParameter(_focusLedgerDimension);

        Args formArgs = new Args();

        formArgs.parmObject(budgetEncumbranceInquiryProcessor);

        new MenuFunction(menuitemDisplayStr(BudgetEncumbranceReconciliationDetail), MenuItemType::Display).run(formArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingLayers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the posting layer parameter.
    /// </summary>
    /// <returns>The posting layers.</returns>
    private List getPostingLayers()
    {
        List selected = new List(Types::Enum);

        if (ctrlPostingLayer.selection())
        {
            selected.addEnd(ctrlPostingLayer.selection()); 
        }
        else
        {
            selected.addEnd(CurrentOperationsTax::Current);
        }

        return selected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSavedFormParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all the saved parameters
    /// </summary>
    private void getSavedFormParameters()
    {
        analysisRequest = BudgetAnalysisRequest::construct();

        Container savedParameters = xSysLastValue::getValue(curExt(),
            curUserId(),
            UtilElementType::Form,
            formRun.name());

        if (savedParameters != conNull())
        {
            analysisRequest.parmDimensionHierarchyId(conPeek(savedParameters, 1));
            analysisRequest.parmDateCode(conPeek(savedParameters, 2));
            analysisRequest.parmFromDate(conPeek(savedParameters, 3));
            analysisRequest.parmToDate(conPeek(savedParameters, 4));
            analysisRequest.parmPostingLayer(conPeek(savedParameters, 5));
            analysisRequest.parmIncludeClosingEntries(conPeek(savedParameters, 6));

            ctrlDisplayAllDimensionAccounts.value(conPeek(savedParameters, 7));
            ctrlDisplaySeparateDimensions.value(conPeek(savedParameters, 8));
            ctrlDisplayDimensionName.value(conPeek(savedParameters, 9));
            ctrlDisplayVarianceEntryOnly.value(conPeek(savedParameters, 10));
        }

        ctrlPostingLayer.selection(analysisRequest.parmPostingLayer());
        ctrlDimensionSet.text(DimensionHierarchy::find(analysisRequest.parmDimensionHierarchyId()).Name);
        ctrlIsClosingIncluded.value(analysisRequest.parmIncludeClosingEntries());
        ctrlDateInterval.text(analysisRequest.parmDateCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFormParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the form parameters.
    /// </summary>
    private void saveFormParameters()
    {
        Container savedParameters = [
            analysisRequest.parmDimensionHierarchyId(),
            analysisRequest.parmDateCode(),
            analysisRequest.parmFromDate(),
            analysisRequest.parmToDate(),
            analysisRequest.parmPostingLayer(),
            analysisRequest.parmIncludeClosingEntries(),
            ctrlDisplayAllDimensionAccounts.value(),
            ctrlDisplaySeparateDimensions.value(),
            ctrlDisplayDimensionName.value(),
            ctrlDisplayVarianceEntryOnly.value()];

        xSysLastValue::putValue(savedParameters,
            curExt(),
            curUserId(),
            UtilElementType::Form,
            formRun.name());    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuickFilterControlList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the quick filter control list.
    /// </summary>
    private void updateQuickFilterControlList()
    {
        List quickFilterList = new List(Types::String);
        List quickFilterLabels = new List(Types::String);

        for (int controlIndex = 1; controlIndex <= ctrlSummaryGrid.controlCount(); controlIndex++)
        {
            FormControl ctrlSummaryGridColumn = ctrlSummaryGrid.controlNum(controlIndex);

            if (ctrlSummaryGridColumn.visible())
            {
                quickFilterList.addEnd(ctrlSummaryGridColumn.name());
                quickFilterLabels.addEnd(ctrlSummaryGridColumn.labelText());
            }
        }

        quickFilterControl.parmFieldList(quickFilterList);
        quickFilterControl.parmFieldLabels(quickFilterLabels);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the dimension attribute control.
    /// </summary>
    /// <param name = "_dimHierLevel">Dimension hierarchy level.</param>
    /// <returns>Form string control.</returns>
    private FormStringControl getDimensionAttributeControl(int _dimHierLevel)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            if (_dimHierLevel <= 9)
            {
                return formRun.design().controlName(strFmt('DimensionValue0%1', _dimHierLevel));
            }
            else
            {
                return formRun.design().controlName(strFmt('DimensionValue%1', _dimHierLevel));
            }
        }
        else
        {
            if (_dimHierLevel <= 9)
            {
                return formRun.design().controlName(strFmt('DimensionAttributeValue0%1', _dimHierLevel));
            }
            else
            {
                return formRun.design().controlName(strFmt('DimensionAttributeValue%1', _dimHierLevel));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize all the controls in the form.
    /// </summary>
    private void initControls()
    {
        ctrlDisplayAllDimensionAccounts = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, DisplayLedgerAccounts)));
        ctrlDisplaySeparateDimensions = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, DisplaySeparateDimensionValues)));
        ctrlDisplayDimensionName = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, DisplayDimensionNameColumn)));
        ctrlDisplayVarianceEntryOnly = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, DisplayVarianceEntryOnly)));
        ctrlFromDate = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, ctrlFromDate)));
        ctrlToDate = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, ctrlToDate)));
        ctrlDimensionSet = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, ctrlDimensionSet)));
        ctrlPostingLayer = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, ctrlPostingLayer)));
        ctrlIsClosingIncluded = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, ctrlIsClosingIncluded)));
        ctrlDateInterval = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, ctrlDateInterval)));
        ctrlSummaryGrid = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, ctrlSummaryGrid)));
        quickFilterControl = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, QuickFilterControl)));

        if (isLedgerBalanceFeatureEnabled)
        {
            ctrlFocusValue = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, DimensionValue_Description)));
            ctrlLedgerDimensionCombineDisplayValue = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, DimensionValue_DisplayValue)));
        }
        else
        {
            ctrlFocusValue = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, DimensionFocusNameTmp_FocusValue)));
            ctrlLedgerDimensionCombineDisplayValue = formRun.control(formRun.controlId(formControlStr(BudgetEncumbranceReconciliationSummary, DimensionAttributeValueCombination_DisplayValue)));
        }

        this.initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the value for form control.
    /// </summary>
    private void initValue()
    {
        this.getSavedFormParameters();

        this.setDefaultDateRange();

        this.updateDimensionAttributeValueColumns(analysisRequest.parmDimensionHierarchyId());

        ctrlFocusValue.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the default date range.
    /// </summary>
    private void setDefaultDateRange()
    {
        TransDate nullDate;

        if (analysisRequest.parmFromDate() == nullDate)
        {
            FiscalCalendarRecId calendarRecId = Ledger::fiscalCalendar();
            FiscalCalendarYear fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(calendarRecId, DateTimeUtil::getToday(0));

            ctrlFromDate.dateValue(fiscalCalendarYear.StartDate);
            ctrlToDate.dateValue(fiscalCalendarYear.EndDate);
        }
        else
        {
            ctrlFromDate.dateValue(analysisRequest.parmFromDate());
            ctrlToDate.dateValue(analysisRequest.parmToDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormRun</Name>
				<Source><![CDATA[
    private void setFormRun(FormRun _formRun)
    {
        formRun = _formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProcessParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize all the form parameter.
    /// </summary>
    /// <param name = "_budgetAnalysisDimensionTransTmp"><C>BudgetAnalysisDimensionSummaryTmp</C> transaction buffer.</param>
    /// <param name = "_budgetAnalysisDimensionSummaryTmp"><C>BudgetAnalysisDimensionSummaryTmp</C> summary buffer.</param>
    /// <param name = "_dimensionFocusNameTmp"><C>DimensionFocusNameTmp</C> buffer.</param>
    private void initializeProcessParameters(
        BudgetAnalysisDimensionSummaryTmp _budgetAnalysisDimensionTransTmp,
        BudgetAnalysisDimensionSummaryTmp _budgetAnalysisDimensionSummaryTmp,
        DimensionFocusNameTmp _dimensionFocusNameTmp)
    {
        this.initializeBudgetBalanceParameters();
        this.initializeTrialBalanceParameters();

        encumbranceInquiryParameter = BudgetEncumbranceInquiryParameter::construct();

        encumbranceInquiryParameter.parmTrialBalanceParameter(trialBalanceParameters);
        encumbranceInquiryParameter.parmAnalysisRequest(analysisRequest);
        encumbranceInquiryParameter.parmAnalysisRequest().parmSummaryTempTable(_budgetAnalysisDimensionTransTmp);
        encumbranceInquiryParameter.parmAnalysisRequest().parmDimensionFocusNameTmp(_dimensionFocusNameTmp);
        encumbranceInquiryParameter.parmAnalysisRequest().parmTotalsTempTable(_budgetAnalysisDimensionSummaryTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTrialBalanceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize trial balance parameter.
    /// </summary>
    private void initializeTrialBalanceParameters()
    {
        trialBalanceParameters = LedgerTrialBalanceListPageBalanceParms::construct();

        trialBalanceParameters.parmDimensionSetHierarchy(DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, ctrlDimensionSet.valueStr()));
        trialBalanceParameters.parmDateCode(ctrlDateInterval.valueStr());
        trialBalanceParameters.parmStartDate(ctrlFromDate.dateValue());
        trialBalanceParameters.parmEndDate(ctrlToDate.dateValue());
        trialBalanceParameters.parmPostingLayers(this.getPostingLayers());
        trialBalanceParameters.parmDisplaySeparateDimensionValues(ctrlDisplaySeparateDimensions.value());
        trialBalanceParameters.parmIncludeClosingTransactions(ctrlIsClosingIncluded.value());

        trialBalanceParameters.parmFiscalCalendarYearName();
        trialBalanceParameters.parmIncludeClosingAdjustments(false);
        trialBalanceParameters.parmIncludeOpeningPeriods(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBudgetBalanceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize budget balance parameter.
    /// </summary>
    private void initializeBudgetBalanceParameters()
    {
        DimensionHierarchyId dimensionHierarchyId = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, ctrlDimensionSet.valueStr()).RecId;

        analysisRequest.parmDateCode(ctrlDateInterval.valueStr());     
        analysisRequest.parmFromDate(ctrlFromDate.dateValue());
        analysisRequest.parmToDate(ctrlToDate.dateValue());
        analysisRequest.parmDimensionHierarchyId(dimensionHierarchyId);
        analysisRequest.parmPostingLayer(ctrlPostingLayer.selection());

        analysisRequest.parmDisplayDimensionInSeparateColumns(ctrlDisplaySeparateDimensions.value());
        analysisRequest.parmDisplayAccountNameColumn(ctrlDisplayDimensionName.value());
        analysisRequest.parmIncludeClosingEntries(ctrlIsClosingIncluded.value());
        analysisRequest.parmColumnSet(BudgetAnalysisColumnSet::ExpenseBudget);
        analysisRequest.parmRequestType(BudgetAnalysisRequestType::Summary);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>