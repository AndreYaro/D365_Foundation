<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExchAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustVendExchAdj extends RunBaseBatch
{
    TransDate postingDate;
    TransDate exchRateDate;
    NoneTableTrans dimSpec;
    TransactionSelect postingSpec;
    PostingProfile postingProfile;
    CustVendExchPrinciples exchPrinciples;
    TransTxt transExchAdjTxt;
    Notes notes;
    NoYes printExchAdj;
    QueryRun queryRun;

    // variables that do not need to be packed/unpacked
    DialogField dialogExchPrinciple;
    DialogField dialogExchRateDate;
    DialogField dialogPostingDate;
    DialogField dialogPrint;
    DialogField dialogDimSpec;
    DialogField dialogPostingSpec;
    DialogField dialogPostingProfile;
    DialogField dialogTransExchAdjTxt;
    DialogField dialogNotes;
    DimensionDefault defaultDimension;
    DialogRunbase dialogRunbase;

    // <GEERU>
    CustVendTransSettlement custVendSettlementCurDeal_RU;
    TransDate previousUnrealizedDate;
    #isoCountryRegionCodes
    // </GEERU>

    private const int BundleSize = 1000;
    protected const Version CurrentVersion = 8;

    protected boolean hasBatchBeenSplit = false;
    protected CustVendAC fromCustVendAccountNum;
    protected CustVendAC toCustVendAccountNum;
    private boolean hidden;
    private guid executionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustTransactions</Name>
				<Source><![CDATA[
    protected CreatedTransactionId adjustTransactions()
    {
        CustVendExchAdjTrans custVendExchAdjTrans = CustVendExchAdjTrans::construct(this.module(), this);
        return custVendExchAdjTrans.update(queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension(DimensionDefault _defaultDimension = defaultDimension)
    {
        defaultDimension = _defaultDimension;
        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimSpec</Name>
				<Source><![CDATA[
    public NoneTableTrans dimSpec(NoneTableTrans _dimSpec = dimSpec)
    {
        dimSpec = _dimSpec;
        return dimSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHidden</Name>
				<Source><![CDATA[
    internal boolean parmHidden(boolean _hidden = hidden)
    {
        hidden = _hidden;
        return hidden;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecutionId</Name>
				<Source><![CDATA[
    internal guid parmExecutionId(guid _executionId = executionId)
    {
        executionId = _executionId;
        return executionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBatch</Name>
				<Source><![CDATA[
    protected void doBatch()
    {
        if (this.batchInfo().parmBatchExecute())
        {
            // When foreign currency revaluation runs in batch, you cannot print report because
            // there is no print destination selected, so supress the printing option.
            this.printExchAdj(false);
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesAccountStructureEnforceDimensions</Name>
				<Source><![CDATA[
    private boolean doesAccountStructureEnforceDimensions()
    {
        DimensionHierarchyLevel dimHierarchyLevel;
        DimensionConstraintTree dimConstraintTree;
        DimensionConstraintNode dimConstraintNode;
        DimensionAttribute dimAttribute;
        LedgerRecId ledgerRecId = Ledger::current();
        LedgerStructure ledgerStructure;

        select firstOnly RecId from dimConstraintNode
            where dimConstraintNode.IsOptional == NoYes::No
            exists join dimConstraintTree
                where dimConstraintTree.RecId == dimConstraintNode.DimensionConstraintTree
            exists join dimHierarchyLevel
                where dimHierarchyLevel.RecId == dimConstraintNode.DimensionHierarchyLevel
                    && dimHierarchyLevel.DimensionHierarchy == dimConstraintTree.DimensionHierarchy
            exists join dimAttribute
                where dimAttribute.RecId == dimHierarchyLevel.DimensionAttribute
                    && dimAttribute.Type != DimensionAttributeType::MainAccount
            exists join ledgerStructure
                where ledgerStructure.DimensionHierarchy == dimHierarchyLevel.DimensionHierarchy
                    && ledgerStructure.DimensionHierarchy == dimConstraintTree.DimensionHierarchy
                    && ledgerStructure.Ledger == ledgerRecId;

        return dimConstraintNode.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchPrinciples</Name>
				<Source><![CDATA[
    public CustVendExchPrinciples exchPrinciples(CustVendExchPrinciples _exchPrinciples = exchPrinciples)
    {
        exchPrinciples = _exchPrinciples;
        return exchPrinciples;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateDate</Name>
				<Source><![CDATA[
    public TransDate exchRateDate(TransDate _exchRateDate = exchRateDate)
    {
        exchRateDate = _exchRateDate;
        return exchRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        exchPrinciples = dialogExchPrinciple.value();
        postingDate = dialogPostingDate.value();
        exchRateDate = dialogExchRateDate.value();

        if (!exchRateDate)
        {
            exchRateDate = postingDate;
        }

        dimSpec = dialogDimSpec.value();
        postingSpec = dialogPostingSpec.value();
        postingProfile = dialogPostingProfile.value();
        printExchAdj = dialogPrint.value();
        transExchAdjTxt = dialogTransExchAdjTxt.value();
        notes = dialogNotes.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    abstract SysModule module()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>notes</Name>
				<Source><![CDATA[
    public Notes notes(Notes _notes = notes)
    {
        notes = _notes;
        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    protected abstract void outputReport(CreatedTransactionId _transactionId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        container packed = [CurrentVersion, dimSpec, printExchAdj, postingSpec, postingProfile, postingDate, exchRateDate, exchPrinciples, transExchAdjTxt, notes, hasBatchBeenSplit, fromCustVendAccountNum, toCustVendAccountNum, queryRun.pack()];
        if (FeatureStateProvider::isFeatureEnabled(CustVendExchAdjTopPickingFeature::instance()))
        {
            packed = SysPackExtensions::appendVariableToPack(packed, this.name(), varStr(hidden), hidden);
            packed = SysPackExtensions::appendVariableToPack(packed, this.name(), varStr(executionId), executionId);
        }
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTransSettlementCurDeal_RU</Name>
				<Source><![CDATA[
    public CustVendTransSettlement parmCustVendTransSettlementCurDeal_RU(CustVendTransSettlement _custVendTransSettlement = custVendSettlementCurDeal_RU)
    {
        custVendSettlementCurDeal_RU = _custVendTransSettlement;

        return custVendSettlementCurDeal_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviousUnrealizedDate_RU</Name>
				<Source><![CDATA[
    public TransDate parmPreviousUnrealizedDate_RU(TransDate _previousUnrealizedDate = previousUnrealizedDate)
    {
        previousUnrealizedDate = _previousUnrealizedDate;

        return previousUnrealizedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingDate</Name>
				<Source><![CDATA[
    public TransDate postingDate(TransDate _postingDate = postingDate)
    {
        postingDate = _postingDate;
        return postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile</Name>
				<Source><![CDATA[
    public TransStatusCode postingProfile(TransStatusCode _postingProfile = postingProfile)
    {
        postingProfile = _postingProfile;
        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingSpec</Name>
				<Source><![CDATA[
    public Integer postingSpec(Integer _postingSpec = postingSpec)
    {
        postingSpec = _postingSpec;
        return postingSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printExchAdj</Name>
				<Source><![CDATA[
    public NoYes printExchAdj(NoYes _printExchAdj = printExchAdj)
    {
        printExchAdj = _printExchAdj;
        return printExchAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([[#isoCZ, GlobalizationConstants::FeatureReferenceCZ00003]], funcName());

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00053, funcName());
        }

        if (this.isInBatch() && FeatureStateProvider::isFeatureEnabled(CustVendExchAdjTopPickingFeature::instance()))
        {
            this.runTopPicking();
        }
        else if (this.isInBatch() && FeatureStateProvider::isFeatureEnabled(CustVendExchAdjBatchSplitFeature::instance()))
        {
            this.runBatchSplit();
        }
        else
        {
            CreatedTransactionId transactionId;
            container inputParameters = [this.module(), this.pack()];

            [transactionId] = SysOperationSandbox::callStaticMethod(classNum(CustVendExchAdj), staticMethodStr(CustVendExchAdj, adjustTransactionsStatic), inputParameters, this.caption());

            if (this.printExchAdj())
            {
                this.outputReport(transactionId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTopPicking</Name>
				<Source><![CDATA[
    private void runTopPicking()
    {
        executionId = newGuid();
        container inputParameters = [this.module(), this.pack()];
        CustVendExchAdjTopPickingRun runner = new CustVendExchAdjTopPickingRun(inputParameters, classIdGet(this), this.pack());
        CustVendGeneralTopPickingSubmitFacade::submitToTPPool(classIdGet(runner), inputParameters, runner.pack(), this.constructParentJobInfo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructParentJobInfo</Name>
				<Source><![CDATA[
    private CustVendGeneralTopPickingBatchInfo constructParentJobInfo()
    {
        BatchHeader header = BatchHeader::getCurrentBatchHeader();
        return CustVendGeneralTopPickingBatchInfo::construct(header, this.parmCurrentBatch().BatchJobId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBatchSplit</Name>
				<Source><![CDATA[
    private void runBatchSplit()
    {
        ttsbegin;

        if (!hasBatchBeenSplit)
        {
            BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            if (batchHeader == null)
            {
                batchHeader = BatchHeader::construct();
            }

            this.splitBatch(batchHeader);

            batchHeader.save();
        }
        else
        {
            this.updateQuerySplitBatch();
            this.adjustTransactions();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitBatch</Name>
				<Source><![CDATA[
    private void splitBatch(BatchHeader _batchHeader)
    {
        List batchTasks = this.splitBatchToList();
        ListEnumerator listEnum = batchTasks.getEnumerator();

        while (listEnum.moveNext())
        {
            CustVendExchAdj curTask = listEnum.current() as CustVendExchAdj;
            _batchHeader.addRuntimeTask(curTask, this.parmCurrentBatch().RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitBatchToList</Name>
				<Source><![CDATA[
    private List splitBatchToList()
    {
        List batchTasks = new List(Types::Class);

        int64 currentSize;
        AccountNum lastAccountNum;

        Query query = this.initSplitBatchQuery();
        QueryRun queryRunTmp = new QueryRun(query);
        while (queryRunTmp.next())
        {
            CustVendTrans custVendTrans = queryRunTmp.get(this.getCustVendTransTableId());
            CustVendTransOpen custVendTransOpen = queryRunTmp.get(this.getCustVendTransOpenTableId());

            AccountNum accountNum = custVendTrans.AccountNum;

            if (this.fromCustVendAccountNum == null)
            {
                this.fromCustVendAccountNum = accountNum;
            }

            currentSize += custVendTransOpen.RecId;
            if (currentSize >= BundleSize)
            {
                this.toCustVendAccountNum = accountNum;
                batchTasks.addEnd(this.getSplitBatchTask());

                currentSize = 0;
                this.fromCustVendAccountNum = null;
                this.toCustVendAccountNum = null;
            }

            lastAccountNum = accountNum;
        }

        if (this.fromCustVendAccountNum != null)
        {
            this.toCustVendAccountNum = lastAccountNum;

            batchTasks.addEnd(this.getSplitBatchTask());
        }

        return batchTasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSplitBatchQuery</Name>
				<Source><![CDATA[
    private Query initSplitBatchQuery()
    {
        Query query = new Query(queryRun.query());

        QueryBuildDataSource custVendTransDs = query.dataSourceTable(this.getCustVendTransTableId());
        custVendTransDs.addRange(this.getCustVendTransDate()).value(queryRange(dateNull(), postingDate));

        QueryBuildDataSource custVendTransOpenDs = query.dataSourceTable(this.getCustVendTransWTableId()).addDataSource(this.getCustVendTransOpenTableId());
        custVendTransOpenDs.addLink(this.getCustVendTransRecId(), this.getCustVendTransOpenRefRecId(), custVendTransDs.name());
        custVendTransOpenDs.joinMode(JoinMode::OuterJoin);

        FieldId accountNum = this.getCustVendTransAccountNum();
        custVendTransOpenDs.addSelectionField(this.getCustVendTransOpenRecId(), SelectionField::Count);
        custVendTransDs.sortClear();
        custVendTransDs.addSelectionField(accountNum);
        custVendTransDs.addGroupByField(accountNum);
        custVendTransDs.addOrderByField(accountNum, SortOrder::Ascending);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitBatchTask</Name>
				<Source><![CDATA[
    private CustVendExchAdj getSplitBatchTask()
    {
        ClassId classId = classIdGet(this);
        DictClass dictClass = new DictClass(classId);
        CustVendExchAdj custVendExchAdj = dictClass.makeObject();
    
        custVendExchAdj.unpack(this.pack());
        custVendExchAdj.parmHasBatchBeenSplit(true);

        batchInfo = custVendExchAdj.batchInfo();
        batchInfo.parmCaption(strFmt('%1 Range: %2 .. %3', this.caption(), this.fromCustVendAccountNum, this.toCustVendAccountNum));
        batchInfo.parmGroupId(this.parmCurrentBatch().GroupId);

        return custVendExchAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransListFromQuery</Name>
				<Source><![CDATA[
    private List getTransListFromQuery(Query _query)
    {
        QueryRun queryRunLocal = new QueryRun(_query);
        List transList = new List(Types::Int64);

        TableId custVendTransTableId = this.getCustVendTransTableId();

        while (queryRunLocal.next())
        {
            transList.addEnd(queryRunLocal.get(custVendTransTableId).RecId);
        }
        return transList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeSortOrderedLists</Name>
				<Source><![CDATA[
    private List mergeSortOrderedLists(List _list1, List _list2)
    {
        List res = new List(Types::Int64);
        RecId currentRecId;
        _list1.addEnd(0);
        _list2.addEnd(0);
        ListEnumerator cursor1 = _list1.getEnumerator();
        ListEnumerator cursor2 = _list2.getEnumerator();
        cursor1.moveNext();
        cursor2.moveNext();

        while (cursor1.current() || cursor2.current())
        {
            ListEnumerator cursor;
            if (!cursor1.current() || (cursor2.current() && cursor1.current() > cursor2.current()))
            {
                cursor = cursor2;
            }
            else
            {
                cursor = cursor1;
            }

            if (cursor.current() > currentRecId)
            {
                res.addEnd(cursor.current());
                currentRecId = cursor.current();
            }
            cursor.moveNext();
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTopPickingSubTaskList</Name>
				<Source><![CDATA[
    internal List generateTopPickingSubTaskList(int _bundleSize = 0)
    {
        List rangeList = this.generateTopPickingRangeList(_bundleSize);
        ListEnumerator rangeListEnumerator = rangeList.getEnumerator();

        ClassId classId = classIdGet(this);
        DictClass dictClass = new DictClass(classId);

        List res = new List(Types::Container);
        int cnt;

        while (rangeListEnumerator.moveNext())
        {
            CustVendExchAdj custVendExchAdj = dictClass.makeObject();
            custVendExchAdj.unpack(this.pack());
            custVendExchAdj.parmHasBatchBeenSplit(true);
            custVendExchAdj.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);

            RecId start = conPeek(rangeListEnumerator.current(), 1);
            RecId end = conPeek(rangeListEnumerator.current(), 2);
            custVendExchAdj.updateQueryWithTransRecId(start, end);

            if (cnt > 0)
            {
                custVendExchAdj.parmHidden(true);
            }
            
            res.addEnd([this.module(), custVendExchAdj.pack()]);
            cnt ++;
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTopPickingRangeList</Name>
				<Source><![CDATA[
    private List generateTopPickingRangeList(int _bundleSize = 0)
    {
        List payload = this.getTopPickingPayload();

        int counter;
        RecId start, end;
        List subTaskList = new List(Types::container);
        ListEnumerator transIdEnumerator = payload.getEnumerator();

        int runningBundleSize = _bundleSize ? _bundleSize : BundleSize;

        while (transIdEnumerator.moveNext())
        {
            if (!start)
            {
                start = transIdEnumerator.current();
                end = transIdEnumerator.current();
                counter ++;
            }
            else if (counter < runningBundleSize)
            {
                counter ++;
                end = transIdEnumerator.current();
            }
            else if (counter == runningBundleSize)
            {
                subTaskList.addEnd([start, end]);
                start = transIdEnumerator.current();
                end = transIdEnumerator.current();
                counter = 1;
            }
        }

        subTaskList.addEnd([start, end]);

        return subTaskList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTopPickingPayload</Name>
				<Source><![CDATA[
    private List getTopPickingPayload()
    {
        Query openTransQuery = this.getPayloadOpenTrans();
        Query settleTransQuery = this.getPayloadSettleTrans();

        List openTransList = this.getTransListFromQuery(openTransQuery);
        List settleTransList = this.getTransListFromQuery(settleTransQuery);

        return this.mergeSortOrderedLists(openTransList, settleTransList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryWithTransRecId</Name>
				<Source><![CDATA[
    internal void updateQueryWithTransRecId(RecId _start, RecId _end)
    {
        Query query = queryRun.query();
        QueryBuildDataSource qbds = query.dataSourceTable(this.getCustVendTransTableId());
        qbds.addRange(this.getCustVendTransRecId()).value(SysQuery::range(_start, _end));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayloadOpenTrans</Name>
				<Source><![CDATA[
    internal protected Query getPayloadOpenTrans()
    {
        return new Query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayloadSettleTrans</Name>
				<Source><![CDATA[
    internal protected Query getPayloadSettleTrans()
    {
        return new Query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransTableId</Name>
				<Source><![CDATA[
    protected TableId getCustVendTransTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenTableId</Name>
				<Source><![CDATA[
    protected TableId getCustVendTransOpenTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransWTableId</Name>
				<Source><![CDATA[
    protected TableId getCustVendTransWTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransAccountNum</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransAccountNum()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenRecId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransOpenRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransRecId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransDate</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransDate()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenRefRecId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransOpenRefRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasBatchBeenSplit</Name>
				<Source><![CDATA[
    protected boolean parmHasBatchBeenSplit(boolean _hasBatchBeenSplit = hasBatchBeenSplit)
    {
        hasBatchBeenSplit = _hasBatchBeenSplit;
        return hasBatchBeenSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transExchAdjTxt</Name>
				<Source><![CDATA[
    public TransTxt transExchAdjTxt(TransTxt _transExchAdjTxt = transExchAdjTxt)
    {
        transExchAdjTxt = _transExchAdjTxt;
        return transExchAdjTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container packedQuery;

        switch (version)
        {
            case CurrentVersion:
                [version, dimSpec, printExchAdj, postingSpec, postingProfile, postingDate, exchRateDate, exchPrinciples, transExchAdjTxt, notes, hasBatchBeenSplit, fromCustVendAccountNum, toCustVendAccountNum, packedQuery] = _packedClass;
                break;

            case 7:
                [version, dimSpec, printExchAdj, postingSpec, postingProfile, postingDate, exchRateDate, exchPrinciples, transExchAdjTxt, notes, packedQuery] = _packedClass;
                break;

            default:
                return false;
        }

        if (packedQuery)
        {
            queryRun = new QueryRun(packedQuery);
        }

        if (FeatureStateProvider::isFeatureEnabled(CustVendExchAdjTopPickingFeature::instance()))
        {
            hidden = SysPackExtensions::extractPackedVariable(_packedClass, this.name(), varStr(hidden));
            executionId = SysPackExtensions::extractPackedVariable(_packedClass, this.name(), varStr(executionId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        recId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        // <GEERU>
        boolean ret = LedgerFiscalCalendar::checkLedgerPeriodDateModule(calendarRecId, postingDate, SysModule::Ledger);

        if (LedgerParameters::find().ExchRateDiffCalcType_W != ExchRateDiffCalcType_W::Standard
            && exchPrinciples == CustVendExchPrinciples::MinMaxPrinciple)
        {
            ret = checkFailed(strfmt("@GLS112083", CustVendExchPrinciples::MinMaxPrinciple));
        }

        if (ret && dimSpec == NoneTableTrans::None)
        {
            if (!this.doesAccountStructureEnforceDimensions())
            {
                ret = (Box::yesNo("@SYS4009611", DialogButton::Yes, "@SYS138674", "@SYS95678") == DialogButton::Yes);
            }
        }

        return ret;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    public Object dialog()
    {
        DialogGroup groupParameters;

        dialogRunbase = super();

        groupParameters = dialogRunbase.addGroup("@SYS7764");
        groupParameters.columns(2);

        dialogRunbase.addGroup("@SYS7764", groupParameters).frameType(FormFrameType::None);
        dialogExchPrinciple = dialogRunbase.addFieldValue(enumstr(CustVendExchPrinciples), exchPrinciples, "@SYS15097", "@SYS95474");
        dialogPostingDate = dialogRunbase.addFieldValue(extendedtypestr(TransDate), postingDate, "@SYS95471", "@SYS95470");
        dialogExchRateDate = dialogRunbase.addFieldValue(extendedtypestr(TransDate), exchRateDate, "@SYS8879", "@SYS95473");

        dialogRunbase.addGroup("@SYS7764", groupParameters).frameType(FormFrameType::None);

        dialogPostingSpec = dialogRunbase.addFieldValue(enumstr(TransactionSelect), postingSpec, "@SYS26617", "@SYS95477");
        dialogPostingProfile = this.addPostingProfileControlToDialog();
        dialogDimSpec = dialogRunbase.addFieldValue(enumstr(NoneTableTrans), dimSpec, "@SYS14926", "@SYS95475");

        dialogPrint = dialogRunbase.addFieldValue(enumstr(NoYes), printExchAdj, "@SYS920", "@SYS55791");

        dialogRunbase.addGroup("@SYS2595");
        dialogTransExchAdjTxt= dialogRunbase.addFieldValue(extendedtypestr(TransTxt), transExchAdjTxt, "@SYS13566", "");
        dialogNotes = dialogRunbase.addFieldValue(extendedtypestr(Notes), notes, "@SYS70989", "@SYS95478");

        dialogExchPrinciple.control().registerOverrideMethod(
            methodStr(FormComboBoxControl, modified),
            methodStr(CustVendExchAdj, dialogExchPrincipleModified),
            this);

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPostingProfileControlToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a control for the posting profile to the dialog.
    /// </summary>
    /// <returns><c>DialogField</c> for the posting profile control.</returns>
    protected abstract DialogField addPostingProfileControlToDialog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogExchPrincipleModified</Name>
				<Source><![CDATA[
    private boolean dialogExchPrincipleModified(FormComboBoxControl _formControl)
    {
        boolean wasValueModified = _formControl.modified();

        dialogExchRateDate.enabled(wasValueModified && _formControl.selection() != CustVendExchPrinciples::InvDatePrinciple);

        return wasValueModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>CustVendExchAdj</c> class.
    /// </summary>
    /// <param name="_module">
    /// The module that specifies the class to initialize.
    /// </param>
    /// <returns>
    /// An instance of the <c>CustVendExchAdj</c> class.
    /// </returns>
    public static CustVendExchAdj construct(SysModule _module)
    {
        CustVendExchAdj custVendExchAdj;

        if (_module == SysModule::Cust)
        {
            custVendExchAdj = new CustExchAdj();
        }
        else
        {
            custVendExchAdj = new VendExchAdj();
        }

        return custVendExchAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAdjustTransaction</Name>
				<Source><![CDATA[
    internal static container doAdjustTransaction(container _pack)
    {
        return CustVendExchAdj::adjustTransactionsStatic(_pack);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTransactionsStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the specified packed instance of the <c>CustVendExchAdj</c> class.
    /// </summary>
    /// <param name="_pack">
    /// A container of <c>SysModule</c> and packed <c>CustVendExchAdj</c> values.
    /// </param>
    /// <returns>
    /// The transaction ID of the created currency revaluation.
    /// </returns>
    /// <remarks>
    /// This method should only be called internally.
    /// </remarks>
    protected static container adjustTransactionsStatic(container _pack)
    {
        SysModule module;
        container packedCustVendExchAdj;
        CustVendExchAdj custVendExchAdj;

        [module, packedCustVendExchAdj] = _pack;

        custVendExchAdj = CustVendExchAdj::construct(module);
        custVendExchAdj.unpack(packedCustVendExchAdj);

        return [custVendExchAdj.adjustTransactions()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuerySplitBatch</Name>
				<Source><![CDATA[
    private void updateQuerySplitBatch()
    {
        if (this.fromCustVendAccountNum && this.toCustVendAccountNum)
        {
            Query query = queryRun.query();
            QueryBuildDataSource qbds = query.dataSourceTable(this.getCustVendTransTableId());
            qbds.addRange(this.getCustVendTransAccountNum()).value(this.fromCustVendAccountNum + '..' + this.toCustVendAccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>putToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables setting the fields that were just added in the <see cref="M:RunBase.dialog" />. This method
    /// is called from the <see cref="M:RunBase.promptPrim" /> directly following the <see cref="M:RunBase.dialogMake" />.
    /// </summary>
    public void putToDialog()
    {
        super();

        FormBuildComboBoxControl exchPrincipleControl = dialogExchPrinciple.control();
        dialogExchRateDate.enabled(exchPrincipleControl.selection() != CustVendExchPrinciples::InvDatePrinciple);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPost</Name>
				<Source><![CDATA[
    protected void dialogPost(Object _dialog)
    {
        super(_dialog);

        if (CustVendExchAdjDisableBatchRecurrenceFlight::instance().isEnabled())
        {
            dialogRunbase = _dialog as dialogRunbase;

            if (dialogRunbase != null)
            {
                dialogRunbase.disableRecurrenceButton();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>