<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetInitDepreciationProfile</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>AssetInitDepreciationProfile</c> contains logic to calculate depreciation amounts forecast.
/// </summary>
public class AssetInitDepreciationProfile
{
    #ISOCountryRegionCodes

    protected AssetBook book;
    protected TransDate maxPlanDate;
    protected System.Threading.CancellationToken cancellationToken;

    protected boolean calculateOnlyDepreciation;
    protected boolean isBookAcquired;
    private int acquisitionAmountSign;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromBookDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates an instance of <c>AssetInitDepreciationProfile</c> by the given book and max date.
    /// </summary>
    /// <param name = "_book">A record of an asset book.</param>
    /// <param name = "_maxPlanDate">Maximum date for which the calculation will be done.</param>
    /// <param name = "_cancellationToken">The cancellation token for asynchronous run.</param>
    /// <returns>The instance of <c>AssetInitDepreciationProfile</c>.</returns>
    protected internal static AssetInitDepreciationProfile newFromBookDate(
        AssetBook _book,
        TransDate _maxPlanDate = maxDate(),
        System.Threading.CancellationToken _cancellationToken = System.Threading.CancellationToken::None)
    {
        return AssetInitDepreciationProfile::construct(_book, _maxPlanDate, _cancellationToken);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static AssetInitDepreciationProfile construct(
        AssetBook _book,
        TransDate _maxPlanDate = maxDate(),
        System.Threading.CancellationToken _cancellationToken = System.Threading.CancellationToken::None)
    {
        AssetInitDepreciationProfile ret;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            ret = new AssetInitDepreciationProfile_PL();
        }
        else
        {
            ret = new AssetInitDepreciationProfile();
        }
        ret.init(_book, _maxPlanDate, _cancellationToken);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculateOnlyDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Avoids the depreciation calculations for the reporting currency.
    /// </summary>
    /// <param name = "_calculateOnlyDepreciation">Avoids the depreciation calculations for the reporting currency, if true.</param>
    /// <returns>The parameter value.</returns>
    /// <remarks>
    ///    This parameter is introduced to avoid the excessive depreciation calculations for the reporting currency, which are not used in some cases (e.g. in <c>AssetYearDepreciationPlan</c> report).
    /// </remarks>
    internal boolean parmCalculateOnlyDepreciation(boolean _calculateOnlyDepreciation = calculateOnlyDepreciation)
    {
        calculateOnlyDepreciation = _calculateOnlyDepreciation;
        return calculateOnlyDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the class variable of <c>AssetInitDepreciationProfile</c>.
    /// </summary>
    /// <param name = "_book">A record of an asset book.</param>
    /// <param name = "_maxPlanDate">Maximum date for which the calculation will be done.</param>
    /// <param name = "_cancellationToken">The cancellation token for asynchronous run.</param>
    protected void init(
        AssetBook _book,
        TransDate _maxPlanDate = maxDate(),
        System.Threading.CancellationToken _cancellationToken = System.Threading.CancellationToken::None)
    {
        book = _book;
        maxPlanDate = _maxPlanDate;
        cancellationToken = _cancellationToken;
        isBookAcquired = AssetStatusType::construct(book.Status).isAcquired();
        acquisitionAmountSign = book.getAcquisitionAmountSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates depreciation amounts forecast.
    /// </summary>
    /// <returns>Temporary table buffer that contains the depreciation amounts.</returns>
    public TmpDateSum calcDepreciationProfile()
    {
        TmpDateSum tmpDateSum;
        AssetTableMethod assetTableMethodPrimary;
        AssetTableMethod assetTableMethodSecondary;
        AssetTableMethod assetTableMethodPrimaryReportingCurrency;
        AssetTableMethod assetTableMethodSecondaryReportingCurrency;
        AssetTableInterval assetTableInterval;
        AssetTransDate transDate;
        AssetTransDate acquisitionDate;

        AssetAmountReportingCurrency depreciationReportingCurrency;
        AssetAmountReportingCurrency depreciationAccReportingCurrency;
        AssetAmount remainingDepreciableNetBookValue;
        AssetAmountReportingCurrency remainingDepreciableNetBookValueReportingCurrency;

        TransDate depreciationStartPostDate;
        boolean leaveNetBookValueReached;
        boolean leaveNetBookValueReachedReportingCurrency;
        AssetAmount currentYearDepreciation;
        AssetAmountReportingCurrency currentYearDepreciationReportingCurrency;
        boolean isDepreciationDone;
        AssetAmount ordinaryDepreciationAcc_JP;
        AssetDepreciationProfile depreciationProfile;
        AssetDepTableMethodInterface_JP assetDepTableMethodInterface_JP;
        AssetDocumentDepHelperForProfile_JP aroDepHelperForProfile_JP;
        AssetAmount curARODepAmount_JP;
        AssetTableMethod_JP acceleratedAssetTableMethod_JP;
        boolean hasAcceleratedDep_JP;
        AssetTransDate depStartDate_JP;
        AssetTransDate acceleratedDepStartDate_JP;
        AssetAmount acceleratedDepreciationAcc_JP;
        AssetAmount acceleratedDepreciationAccForProfile_JP;
        boolean hasSpecialDep_JP;
        AssetAmount specialDepreciationAcc_JP;
        AssetAmount specialDepreciationAccForProfile_JP;
        AssetTableMethod_JP specialAssetTableMethod_JP;
        AssetTransDate specialDepStartDate_JP;
        AssetAmount extraDepreciationAccForPrevYear_JP;
        AssetAmount specialDepreciationAccForPrevYear_JP;
        AssetTransDate specialLastPeriodDate_JP;
        boolean isIdlePeriodActive_JP;
        int numOfIdlePeriods_JP;
        boolean isIsoJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
        boolean isAssetDocumentEnabled_JP = isIsoJP && AssetDocumentUtility_JP::isAssetDocumentEnabled();
        boolean isRemainDepValueExist_JP = true;

        AssetBookTable assetBookTable = AssetBookTable::find(book.BookId);
        boolean firstRecord = true;

        AssetCacheManager::removeCacheAssetTrans(book.AssetId, book.BookId);

        if (this.showEmptyProfile())
        {
            return tmpDateSum;
        }

        tmpDateSum.ttsbegin();

        if (isIsoJP && AssetParameters::isManuallyChangeDepProfileEnable_JP())
        {
            depreciationProfile = book.AssetDepBookMap_JP::depreciationProfileOnDate(book.LastDepreciationDate + 1);
        }
        else
        {
            depreciationProfile = book.depreciationProfile();
        }

        if (isIsoJP && AssetDepreciationProfile::isDepMethodAllowChangeCalendar_JP(book.depreciationProfile().Method))
        {
            assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
                depreciationProfile,
                assetBookTable.TableId,
                assetBookTable.RecId);
        }
        else
        {
            assetTableInterval = AssetTableInterval::construct(depreciationProfile, assetBookTable.FiscalCalendar);
        }

        if (isIsoJP && book.Status == AssetStatus::Open)
        {
            isRemainDepValueExist_JP = this.isRemainDepValueExist_JP(assetBookTable.NetBookValueRest);
        }

        if (isIsoJP && isRemainDepValueExist_JP && book.depreciationAcceleratedProfile_JP().Profile)
        {
            hasAcceleratedDep_JP = true;
        }
        if (isIsoJP
            && isRemainDepValueExist_JP
            && book.DepreciationExtProfile
            && book.depreciationExtProfile().SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
        {
            hasSpecialDep_JP = true;
        }

        if (book.IsTrueUpDepreciation
            || book.AcquisitionDate > book.UsedFromDate
            || book.DepreciationConvention == AssetDepreciationConvention::HalfYearNext
            || book.DepreciationConvention == AssetDepreciationConvention::HalfYearStart)
        {
            // In order to figure out the starting date of the depreciation Half year start and half year next,
            // the acquisition and the place in service need to be considered.
            if (!book.IsTrueUpDepreciation
                && (book.DepreciationConvention == AssetDepreciationConvention::HalfYearNext
                || book.DepreciationConvention == AssetDepreciationConvention::HalfYearStart))
            {
                depreciationStartPostDate = AssetTableDepConv::getHalfYearDepreciationFirstPostDate(book, assetTableInterval);
            }
            else
            {
                acquisitionDate = AssetTransTmp::getFirstTransactionDateByType(book.AssetId, book.BookId, AssetTransType::Acquisition);
                depreciationStartPostDate = acquisitionDate ? acquisitionDate : book.AcquisitionDate;
            }
        }

        boolean hasSameAccountingAndReportingCurrency = Ledger::reportingCurrency() == Ledger::accountingCurrency();
        boolean executeReportingCurrencyLogic;

        if (!hasSameAccountingAndReportingCurrency)
        {
            executeReportingCurrencyLogic = !calculateOnlyDepreciation && Ledger::reportingCurrency() != '';
        }

        if (book.depreciationAltProfile())
        {
            assetTableMethodPrimary = AssetTableMethod::construct(book, dateMax(),'',true);
            assetTableMethodSecondary = AssetTableMethod::construct(book, dateMax(),'',true,true);

            if (executeReportingCurrencyLogic)
            {
                assetTableMethodPrimaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(book, dateMax(),'',true);
                assetTableMethodSecondaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(book, dateMax(),'',true,true);
            }
        }
        else
        {
            assetTableMethodPrimary = AssetTableMethod::construct(book, dateMax());

            if (executeReportingCurrencyLogic)
            {
                assetTableMethodPrimaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(book, dateMax());
            }
        }

        if (isIsoJP)
        {
            if (assetTableMethodPrimary is AssetDepTableMethodInterface_JP)
            {
                assetDepTableMethodInterface_JP = assetTableMethodPrimary as Object;
            }

            if (isAssetDocumentEnabled_JP)
            {
                aroDepHelperForProfile_JP = AssetDocumentDepHelperForProfile_JP::construct(
                    [AssetDocumentType_JP::AssetRetirementObligation],
                    book);
                aroDepHelperForProfile_JP.parmRunDate(dateMax());
                aroDepHelperForProfile_JP.init();
            }
        }
        
        // If there value model has been acquired, verify that the true-up depreciation values.
        if (acquisitionDate && book.IsTrueUpDepreciation && book.isTrueUpDepreciationRequired())
        {
            container priorYearAmount = AssetBook::calculateCatchupDepreciationPerCurrency(book, assetTableMethodPrimary.parmPeriodEnd());
            assetTableMethodPrimary.parmDepAmountPriorYears([conPeek(priorYearAmount, 3), conPeek(priorYearAmount, 4)]);
            if (assetTableMethodSecondary)
            {
                assetTableMethodSecondary.parmDepAmountPriorYears([conPeek(priorYearAmount, 3), conPeek(priorYearAmount, 4)]);
            }

            if (executeReportingCurrencyLogic)
            {
                container priorYearAmountReportingCurrency = AssetBook::calculateCatchupDepreciationPerCurrency(book, assetTableMethodPrimary.parmPeriodEnd(), true);
                assetTableMethodPrimaryReportingCurrency.parmDepAmountPriorYears([conPeek(priorYearAmountReportingCurrency, 3), conPeek(priorYearAmountReportingCurrency, 4)]);
                if (assetTableMethodSecondaryReportingCurrency)
                {
                    assetTableMethodSecondaryReportingCurrency.parmDepAmountPriorYears([conPeek(priorYearAmountReportingCurrency, 3), conPeek(priorYearAmountReportingCurrency, 4)]);
                }
            }
        }

        if (book.depreciationProfile().Method == AssetDepreciationMethod::RBSL)
        {
            tmpDateSum.TransDate   = endmth(prevMth(max(book.DepreciationStartDate, book.LastDepreciationDate + 1))) + 1;
        }
        else
        {
            if (hasAcceleratedDep_JP || hasSpecialDep_JP)
            {
                depStartDate_JP = max(book.DepreciationStartDate - 1, book.LastDepreciationDate) + 1;

                if (hasAcceleratedDep_JP)
                {
                    var acceleratedEntryContainer = AssetDocumentAcceleratedDep_JP::getAcceleratedDocumentEntryList(
                        book.AssetId,
                        book.BookId,
                        acceleratedDepStartDate_JP);
                    container firstAcceleratedEntry = conPeek(acceleratedEntryContainer, 1);
                    acceleratedDepStartDate_JP = max(book.DepreciationStartDate - 1, book.LastDepreciationDateAccelerated_JP) + 1;
                    acceleratedDepStartDate_JP = max(acceleratedDepStartDate_JP, conPeek(firstAcceleratedEntry, 1));

                    acceleratedAssetTableMethod_JP = AssetTableMethod::construct(book, dateMax(), '', false, false, false, true);
                    acceleratedAssetTableMethod_JP.parmAcceleratedEntryContainer_JP(acceleratedEntryContainer);
                    tmpDateSum.TransDate    = assetTableInterval.endPeriod(min(depStartDate_JP, acceleratedDepStartDate_JP)) - 1;
                }
                if (hasSpecialDep_JP)
                {
                    specialDepStartDate_JP = max(book.SpecialDepStartDate_JP ? book.SpecialDepStartDate_JP - 1 :
                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - 1, book.LastDepreciationDateExtraOrd) + 1;
                    if (hasAcceleratedDep_JP)
                    {
                        tmpDateSum.TransDate = assetTableInterval.endPeriod(min(depStartDate_JP, specialDepStartDate_JP, tmpDateSum.TransDate)) - 1;
                    }
                    else
                    {
                        tmpDateSum.TransDate = assetTableInterval.endPeriod(min(depStartDate_JP, specialDepStartDate_JP)) - 1;
                    }
                    specialAssetTableMethod_JP = AssetTableMethod::construct(book, dateMax(), '', false, false, true);
                }
            }
            else
            {
                tmpDateSum.TransDate = assetTableInterval.endPeriod(max(book.DepreciationStartDate - 1, book.LastDepreciationDate) + 1) - 1;
            }
        }
        tmpDateSum.TmpNumerals01 = 0;

        if (executeReportingCurrencyLogic || hasSameAccountingAndReportingCurrency)
        {
            tmpDateSum.TmpNumeralsReportingCurrency01 = 0;
        }

        AssetAmount depreciationAcc = -(AssetTrans::amountMSTPerDateTransTypes(book.AssetId, book.BookId, this.getAssetTransTypes(), dateNull(), tmpDateSum.TransDate));
        if (hasAcceleratedDep_JP || hasSpecialDep_JP)
        {
            if (hasAcceleratedDep_JP)
            {
                acceleratedDepreciationAcc_JP = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(book, dateNull(), tmpDateSum.TransDate);
                depreciationAcc += acceleratedDepreciationAcc_JP;
            }
            if (hasSpecialDep_JP)
            {
                specialDepreciationAcc_JP  = AssetDepTransMap_JP::calcAccumulatedExtraDepAmtMst(book, dateNull(), tmpDateSum.TransDate, 0, true);
                depreciationAcc += specialDepreciationAcc_JP;
            }
        }
        else
        {
            if (executeReportingCurrencyLogic)
            {
                depreciationAccReportingCurrency = -(AssetTrans::amountReportingCurrencyPerDateTransTypes(
                                                         book.AssetId,
                                                         book.BookId,
                                                         this.getAssetTransTypes(),
                                                         dateNull(),
                                                         tmpDateSum.TransDate));
            }
        }

        if (isAssetDocumentEnabled_JP)
        {
            ordinaryDepreciationAcc_JP = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(book, dateNull(), tmpDateSum.TransDate);
        }
        AssetAmount amountToDepreciate = this.getAmountToDepreciate(tmpDateSum.TransDate, hasAcceleratedDep_JP, hasSpecialDep_JP);
        tmpDateSum.TmpNumerals02 = amountToDepreciate;
        if (executeReportingCurrencyLogic)
        {
            tmpDateSum.TmpNumeralsReportingCurrency02 = this.getAmountToDepreciateInReportingCurrency(tmpDateSum.TransDate);
        }
        else if (hasSameAccountingAndReportingCurrency)
        {
            tmpDateSum.TmpNumeralsReportingCurrency02 = amountToDepreciate;
        }
        tmpDateSum.insert();

        boolean isCurrentPeriodAdjustment = book.IsTrueUpDepreciation;

        if ((book.Status == AssetStatus::NoAcquisition
            || book.Status == AssetStatus::Open
            || book.Status == AssetStatus::Acquired_CZ)
            && amountToDepreciate)
        {
            if (!book.depreciationAltProfile())
            {
                // Create records only for accelerated depreciation and special depreciation if last run date for accelerated depreciation or special depreciation is ealier than ordinary depreciation
                if (hasAcceleratedDep_JP || hasSpecialDep_JP)
                {
                    [depreciationAcc,
                     acceleratedDepreciationAcc_JP,
                     specialDepreciationAcc_JP,
                     acceleratedDepreciationAccForProfile_JP,
                     specialDepreciationAccForProfile_JP,
                     firstRecord] = this.extraOrdinaryDepCalcBeforeOrdinary_JP(assetTableInterval,
                                                                               acceleratedAssetTableMethod_JP,
                                                                               specialAssetTableMethod_JP,
                                                                               acceleratedDepStartDate_JP,
                                                                               specialDepStartDate_JP,
                                                                               depStartDate_JP,
                                                                               tmpDateSum,
                                                                               depreciationStartPostDate,
                                                                               depreciationAcc,
                                                                               acceleratedDepreciationAcc_JP,
                                                                               specialDepreciationAcc_JP,
                                                                               firstRecord,
                                                                               hasAcceleratedDep_JP,
                                                                               hasSpecialDep_JP);

                    extraDepreciationAccForPrevYear_JP   = acceleratedDepreciationAccForProfile_JP + specialDepreciationAccForProfile_JP;
                    specialDepreciationAccForPrevYear_JP = specialDepreciationAccForProfile_JP;

                    // Calculated accelerated and special depreciation amount should be add to the part of extraordinay depreciation amount of ordinary depreciation
                    if (assetDepTableMethodInterface_JP)
                    {
                        assetDepTableMethodInterface_JP.addExtraDepAmount(acceleratedDepreciationAccForProfile_JP + specialDepreciationAccForProfile_JP);

                        //Passing this to reducein the depreciation calculation for next year.
                        assetDepTableMethodInterface_JP.parmUnpostedExtraDepAmount(acceleratedDepreciationAccForProfile_JP + specialDepreciationAccForProfile_JP);
                    }
                    // Calculated special depreciation amount should be add to the part of extraordinay depreciation amount of accelerated depreciation
                    if (acceleratedAssetTableMethod_JP)
                    {
                        acceleratedAssetTableMethod_JP.addExtraDepAmount(specialDepreciationAccForProfile_JP);

                        //Passing this to reducein the depreciation calculation for next year.
                        acceleratedAssetTableMethod_JP.parmUnpostedExtraDepAmount(extraDepreciationAccForPrevYear_JP);
                    }
                    // Calculated special depreciation amount should be add to the part of extraordinay depreciation amount of accelerated depreciation
                    if (specialAssetTableMethod_JP)
                    {
                        //Passing this to reducein the depreciation calculation for next year.
                        specialAssetTableMethod_JP.parmUnpostedExtraDepAmount(extraDepreciationAccForPrevYear_JP);
                    }
                }

                boolean isIdlePeriodActiveAny_JP;
                while (!cancellationToken.IsCancellationRequested &&
                       transDate <= maxPlanDate &&
                       assetTableMethodPrimary.next())
                {
                    if (isIsoJP && AssetParameters::isManuallyChangeDepProfileEnable_JP())
                    {
                        assetTableInterval = book.AssetDepBookMap_JP::assetTableInterval(assetTableMethodPrimary.depDate());
                    }
                   
                    transDate = assetTableInterval.endPeriod(assetTableMethodPrimary.depDate());

                    if (isIsoJP)
                    {
                        isIdlePeriodActive_JP = AssetIdlePeriodTable_JP::exists(book.AssetId, book.BookId, transDate);
                        numOfIdlePeriods_JP = AssetIdlePeriodAssign_JP::findNumOfIdlePeriods(book.AssetId, book.BookId, assetTableInterval, transDate);

                        if (isIdlePeriodActive_JP)
                        {
                            isIdlePeriodActiveAny_JP = true;
                        }

                        if (assetDepTableMethodInterface_JP)
                        {
                            assetDepTableMethodInterface_JP.parmAssetIdlePeriods(numOfIdlePeriods_JP);
                            assetDepTableMethodInterface_JP.parmIsAssetIdlePeriodActive(isIdlePeriodActive_JP);
                        }
                    }

                    AssetAmount depreciation = assetTableMethodPrimary.calc();
                    [remainingDepreciableNetBookValue, depreciation, leaveNetBookValueReached, isDepreciationDone] = this.regulateDepreciation(depreciation, tmpDateSum, depreciationAcc, assetBookTable);

                    depreciation = assetBookTable.getRoundedDepreciationAmountForLastPeriod(
                        depreciation,
                        remainingDepreciableNetBookValue,
                        acquisitionAmountSign);

                    if (executeReportingCurrencyLogic && assetTableMethodPrimaryReportingCurrency.next())
                    {
                        depreciationReportingCurrency = assetTableMethodPrimaryReportingCurrency.calc();

                        if (!leaveNetBookValueReachedReportingCurrency
                            && (depreciationAcc + depreciation == tmpDateSum.TmpNumerals02 - book.getNetBookValueRest(assetBookTable)
                            || assetTableMethodPrimary.parmIsEndOfAccountingDepreciation()))
                        {
                            while (transDate <= maxPlanDate &&
                                assetTableMethodPrimaryReportingCurrency.next())
                            {
                                depreciationReportingCurrency += assetTableMethodPrimaryReportingCurrency.calc();
                            }
                        }

                        if (depreciationReportingCurrency)
                        {
                            remainingDepreciableNetBookValueReportingCurrency = 
                                tmpDateSum.TmpNumeralsReportingCurrency02 
                                - depreciationAccReportingCurrency 
                                - book.getNetBookValueRestReporting(assetBookTable);

                            if (depreciationReportingCurrency * acquisitionAmountSign > remainingDepreciableNetBookValueReportingCurrency * acquisitionAmountSign)
                            {
                                depreciationReportingCurrency = remainingDepreciableNetBookValueReportingCurrency;
                                leaveNetBookValueReachedReportingCurrency = true;
                            }
                        }

                        depreciationReportingCurrency = assetBookTable.getRoundedDepreciationAmountForLastPeriodReporting(
                            depreciationReportingCurrency,
                            remainingDepreciableNetBookValueReportingCurrency,
                            acquisitionAmountSign);

                    }
                    else
                    {
                        depreciationReportingCurrency = 0;
                    }
                    curARODepAmount_JP = 0;
                    if (depreciation && isAssetDocumentEnabled_JP)
                    {
                        if (assetDepTableMethodInterface_JP)
                        {
                            isDepreciationDone = isDepreciationDone || assetDepTableMethodInterface_JP.getIsDepreciationDone();
                        }
                        // for Japan nomal depreciation and non Japan depreciation method
                        isDepreciationDone = isDepreciationDone || depreciation + ordinaryDepreciationAcc_JP >= assetTableMethodPrimary.parmAmountToDepreciate();
                        aroDepHelperForProfile_JP.applyNormalDepreciationAmount(depreciation + ordinaryDepreciationAcc_JP);
                        aroDepHelperForProfile_JP.applyNormalDepreciationInfo(assetTableMethodPrimary.parmAmountToDepreciate(), transDate, isDepreciationDone);
                        curARODepAmount_JP = aroDepHelperForProfile_JP.calcTotal(transDate);
                        if ((hasAcceleratedDep_JP || hasSpecialDep_JP) && !specialLastPeriodDate_JP)
                        {
                            specialLastPeriodDate_JP = transDate;
                        }
                    }

                    AssetAmount curAcceleratedDepAmount = 0;
                    if (acceleratedAssetTableMethod_JP)
                    {
                        acceleratedAssetTableMethod_JP.parmAssetIdlePeriods(numOfIdlePeriods_JP);
                        acceleratedAssetTableMethod_JP.parmIsAssetIdlePeriodActive(isIdlePeriodActive_JP);
                    }

                    while (hasAcceleratedDep_JP
                        && acceleratedAssetTableMethod_JP.parmPeriodEnd() <= transDate
                        && acceleratedAssetTableMethod_JP.next())
                    {
                        if (acceleratedAssetTableMethod_JP.parmPeriodEnd() == transDate)
                        {
                            curAcceleratedDepAmount = acceleratedAssetTableMethod_JP.calc();
                        }
                        else
                        {
                            acceleratedAssetTableMethod_JP.calc();
                        }
                        if (curAcceleratedDepAmount > (remainingDepreciableNetBookValue - depreciation))
                        {
                            curAcceleratedDepAmount = (remainingDepreciableNetBookValue - depreciation);
                        }
                    }

                    AssetAmount curSpecialDepAmount;
                    if (specialAssetTableMethod_JP)
                    {
                        specialAssetTableMethod_JP.parmAssetIdlePeriods(numOfIdlePeriods_JP);
                        specialAssetTableMethod_JP.parmIsAssetIdlePeriodActive(isIdlePeriodActive_JP);
                    }

                    while (hasSpecialDep_JP
                        && specialAssetTableMethod_JP.parmPeriodEnd() <= transDate
                        && specialAssetTableMethod_JP.next())
                    {
                        if (specialAssetTableMethod_JP.parmPeriodEnd() == transDate)
                        {
                            curSpecialDepAmount = specialAssetTableMethod_JP.calc();
                        }
                        else
                        {
                            specialAssetTableMethod_JP.calc();
                        }
                        if (curSpecialDepAmount > (remainingDepreciableNetBookValue - depreciation - curAcceleratedDepAmount))
                        {
                            curSpecialDepAmount = (remainingDepreciableNetBookValue - depreciation - curAcceleratedDepAmount);
                        }
                    }

                    if (tmpDateSum.TransDate != transDate)
                    {
                        if (tmpDateSum.TransDate && tmpDateSum.TransDate >= depreciationStartPostDate)
                        {
                            firstRecord = false;
                            tmpDateSum.Total = depreciationAcc;
                            tmpDateSum.TmpNumerals02 -= depreciationAcc;
                            
                            if (executeReportingCurrencyLogic)
                            {
                                tmpDateSum.TotalReportingCurrency = depreciationAccReportingCurrency;
                                tmpDateSum.TmpNumeralsReportingCurrency02 -= depreciationAccReportingCurrency;
                            }
                            else if (hasSameAccountingAndReportingCurrency)
                            {
                                tmpDateSum.TotalReportingCurrency = tmpDateSum.Total;
                                tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                            }
                            
                            tmpDateSum.write();
                            tmpDateSum.clear();
                        }

                        tmpDateSum.TransDate = transDate;
                        tmpDateSum.TmpNumerals02 = this.getAmountToDepreciate(tmpDateSum.TransDate, hasAcceleratedDep_JP, hasSpecialDep_JP);
                        
                        if (executeReportingCurrencyLogic)
                        {
                            tmpDateSum.TmpNumeralsReportingCurrency02 = this.getAmountToDepreciateInReportingCurrency(tmpDateSum.TransDate);
                        }
                        else if (hasSameAccountingAndReportingCurrency)
                        {
                            tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                        }
                    }

                    if (firstRecord)
                    {
                        var endPeriodOfDeprStartPostDate = assetTableInterval.endPeriod(depreciationStartPostDate);
                        if (assetTableInterval.endPeriod(book.DepreciationStartDate) <= endPeriodOfDeprStartPostDate)
                        {
                            tmpDateSum.TransDate = endPeriodOfDeprStartPostDate - 1;
                            tmpDateSum.write();
                            tmpDateSum.clear();
                            tmpDateSum.TmpNumerals02 = book.AcquisitionPrice;
                        
                            if (executeReportingCurrencyLogic)
                            {
                                tmpDateSum.TmpNumeralsReportingCurrency02 = book.AcquisitionPriceReportingCurrency;
                            }
                            else if (hasSameAccountingAndReportingCurrency)
                            {
                                tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                            }
                        
                            firstRecord = false;
                        }
                    }

                    depreciationAcc += depreciation;
                    ordinaryDepreciationAcc_JP += depreciation;

                    tmpDateSum.TransDate = transDate;
                    tmpDateSum.TmpNumerals01 += depreciation;
                    
                    if (executeReportingCurrencyLogic)
                    {
                        depreciationAccReportingCurrency += depreciationReportingCurrency;
                        tmpDateSum.TmpNumeralsReportingCurrency01 += depreciationReportingCurrency;
                    }
                    else if (hasSameAccountingAndReportingCurrency)
                    {
                        tmpDateSum.TmpNumeralsReportingCurrency01 = tmpDateSum.TmpNumerals01;
                    }
                    if (isIsoJP)
                    {
                        if (assetDepTableMethodInterface_JP)
                        {
                            tmpDateSum.BeginningBalOfAccumulatedDep_JP = assetDepTableMethodInterface_JP.calcYearBeginningBalanceOfAccumulatedDep();
                            tmpDateSum.ytdAccumulatedDep_JP = assetDepTableMethodInterface_JP.calcAllowableLimitForSumOfDepYTD();

                            if (acceleratedAssetTableMethod_JP)
                            {
                                var yearBeginningBalanceOfAccumulatedDep = acceleratedAssetTableMethod_JP.calcYearBeginningBalanceOfAccumulatedDep();
                                tmpDateSum.BeginningBalOfAccumulatedDep_JP += (yearBeginningBalanceOfAccumulatedDep != 0 ?
                                    yearBeginningBalanceOfAccumulatedDep : AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(book, dateNull(), TransDate));
                                tmpDateSum.ytdAccumulatedDep_JP += acceleratedAssetTableMethod_JP.calcAllowableLimitForSumOfDepYTD();
                            }
                            if (specialAssetTableMethod_JP)
                            {
                                if (curSpecialDepAmount != 0 || (specialAssetTableMethod_JP.calcAllowableLimitForSumOfDepYTD() && !specialAssetTableMethod_JP.getIsDepreciationDone()))
                                {
                                    var yearBeginningBalanceOfAccumulatedDep = specialAssetTableMethod_JP.calcYearBeginningBalanceOfAccumulatedDep();
                                    tmpDateSum.BeginningBalOfAccumulatedDep_JP += (yearBeginningBalanceOfAccumulatedDep != 0 ?
                                        yearBeginningBalanceOfAccumulatedDep : AssetDepTransMap_JP::calcAccumulatedExtraDepAmtMst(book, dateNull(), TransDate, 0, true));
                                    tmpDateSum.ytdAccumulatedDep_JP += specialAssetTableMethod_JP.calcAllowableLimitForSumOfDepYTD();
                                }
                                else
                                {
                                    int yearTransDate, yearDepDate;
                                    if (curSpecialDepAmount == 0)
                                    {
                                        yearDepDate = year(assetTableInterval.findLastDayOfYear(specialAssetTableMethod_JP.depDate()));
                                        yearTransDate = year(assetTableInterval.findLastDayOfYear(transDate));
                                    }
                                    if (curSpecialDepAmount == 0 && yearDepDate < yearTransDate)
                                    {
                                        tmpDateSum.BeginningBalOfAccumulatedDep_JP += specialDepreciationAccForPrevYear_JP + AssetDepTransMap_JP::calcAccumulatedExtraDepAmtMst(book, dateNull(), TransDate, 0, true);
                                    }
                                    else
                                    {
                                        var yearBeginningBalanceOfAccumulatedDep = specialAssetTableMethod_JP.calcYearBeginningBalanceOfAccumulatedDep();
                                        tmpDateSum.BeginningBalOfAccumulatedDep_JP += (yearBeginningBalanceOfAccumulatedDep != 0 ?
                                            yearBeginningBalanceOfAccumulatedDep : AssetDepTransMap_JP::calcAccumulatedExtraDepAmtMst(book, dateNull(), TransDate, 0, true));
                                    }

                                    // If trans date is not the first period of the year. Then add the previous periods YTD value for the year.
                                    if (curSpecialDepAmount == 0 && yearDepDate == yearTransDate)
                                    {
                                        tmpDateSum.ytdAccumulatedDep_JP += specialAssetTableMethod_JP.calcAllowableLimitForSumOfDepYTD();
                                    }
                                }
                            }
                        }

                        if (isAssetDocumentEnabled_JP)
                        {
                            tmpDateSum.RetirementObligationDepAmount_JP =  curARODepAmount_JP;
                            depreciationAcc +=  curARODepAmount_JP;
                        }

                        if (hasAcceleratedDep_JP || hasSpecialDep_JP)
                        {
                            tmpDateSum.AcceleratedDepAmount_JP = curAcceleratedDepAmount;
                            depreciationAcc += curAcceleratedDepAmount + curSpecialDepAmount;
                            acceleratedDepreciationAcc_JP += curAcceleratedDepAmount;
                            acceleratedDepreciationAccForProfile_JP += curAcceleratedDepAmount;
                            specialDepreciationAcc_JP += curSpecialDepAmount;
                            specialDepreciationAccForProfile_JP += curSpecialDepAmount;

                            tmpDateSum.AdditionalDepAmount_JP = curSpecialDepAmount;

                            //Add values only for last period of year.
                            if (depreciation > 0 && assetTableInterval.findLastDayOfYear(specialLastPeriodDate_JP) == transDate)
                            {
                                //Store the previous year accumulated Special depreciation.
                                specialLastPeriodDate_JP = transDate + 1;
                                extraDepreciationAccForPrevYear_JP = acceleratedDepreciationAccForProfile_JP + specialDepreciationAccForProfile_JP;
                                specialDepreciationAccForPrevYear_JP = specialDepreciationAccForProfile_JP;
                            }

                            // Calculated accelerated depreciation amount should be add to the part of extraordinay depreciation amount of ordinary depreciation
                            if (assetDepTableMethodInterface_JP)
                            {
                                assetDepTableMethodInterface_JP.addExtraDepAmount(curAcceleratedDepAmount + curSpecialDepAmount);
                                // This method sets the unposted extra depreciation amount to reduce in the new and old declining balance methods.
                                if (depreciation > 0 || isIdlePeriodActive_JP)
                                {
                                    assetDepTableMethodInterface_JP.parmUnpostedExtraDepAmount(extraDepreciationAccForPrevYear_JP);
                                }
                                else
                                {
                                    extraDepreciationAccForPrevYear_JP = 0;
                                    assetDepTableMethodInterface_JP.parmUnpostedExtraDepAmount(0);
                                }
                            }
                            // Calculated accelerated and special depreciation amount should be add to the part of extraordinay depreciation amount of accelerated depreciation
                            if (acceleratedAssetTableMethod_JP)
                            {
                                acceleratedAssetTableMethod_JP.addExtraDepAmount(curSpecialDepAmount);
                                // Store the accumulated special depreciation amount. addExtraDepAmount method stores posted depreciation also along with special depreciation.
                                acceleratedAssetTableMethod_JP.parmUnpostedSpecialDepAmount(specialDepreciationAccForProfile_JP);
                                if (depreciation > 0 || isIdlePeriodActive_JP)
                                {
                                    acceleratedAssetTableMethod_JP.parmUnpostedExtraDepAmount(extraDepreciationAccForPrevYear_JP);
                                }
                                else
                                {
                                    extraDepreciationAccForPrevYear_JP = 0;
                                    acceleratedAssetTableMethod_JP.parmUnpostedExtraDepAmount(0);
                                }
                            }
                            if (specialAssetTableMethod_JP)
                            {
                                specialAssetTableMethod_JP.parmUnpostedExtraDepAmount(extraDepreciationAccForPrevYear_JP);
                            }
                        }

                        if (book.IsTrueUpDepreciation
                            && assetTableMethodPrimary.parmPrevDepAmount()
                            && transDate == assetTableInterval.findLastDayOfMonth(book.LastDepreciationDate + 1)
                            && depreciationAcc != tmpDateSum.BeginningBalOfAccumulatedDep_JP + tmpDateSum.YTDAccumulatedDep_JP)
                        {
                            depreciationAcc = tmpDateSum.BeginningBalOfAccumulatedDep_JP + tmpDateSum.YTDAccumulatedDep_JP;
                        }
                    }

                    if (leaveNetBookValueReached)
                    {
                        break;
                    }
                }

                if (isIdlePeriodActiveAny_JP)
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00031, funcName());
                }
            }
            else
            {
                AssetAmountReportingCurrency depreciationPrimaryReportingCurrency;
                AssetAmountReportingCurrency depreciationSecondaryReportingCurrency;
                boolean isPrimaryMethodReducingBalance = AssetDepreciationProfile::isReducingBalanceDepreciationMethod(book.depreciationProfile().Method);
                boolean isSecondaryMethodReducingBalance = AssetDepreciationProfile::isReducingBalanceDepreciationMethod(book.depreciationAltProfile().Method);
    
                while (!cancellationToken.IsCancellationRequested &&
                       transDate <= maxPlanDate &&
                       assetTableMethodPrimary.next() && assetTableMethodSecondary.next())
                {
                    if (isIsoJP && AssetParameters::isManuallyChangeDepProfileEnable_JP())
                    {
                        assetTableInterval = book.AssetDepBookMap_JP::assetTableInterval(assetTableMethodPrimary.depDate());
                    }

                    AssetAmount depreciationPrimary = assetTableMethodPrimary.calc();
                    AssetAmount depreciationSecondary = assetTableMethodSecondary.calc();

                    // Ensure depreciation does not go over the "leave net book value" setting or more than allowed amount to depreciate.
                    if (depreciationPrimary || depreciationSecondary)
                    {
                        remainingDepreciableNetBookValue = 
                            tmpDateSum.TmpNumerals02 
                            - depreciationAcc 
                            - book.getNetBookValueRest(assetBookTable);

                        if (depreciationPrimary * acquisitionAmountSign > remainingDepreciableNetBookValue * acquisitionAmountSign)
                        {
                            depreciationPrimary = remainingDepreciableNetBookValue;
                            leaveNetBookValueReached = true;
                            isDepreciationDone = true;
                        }

                        depreciationPrimary = assetBookTable.getRoundedDepreciationAmountForLastPeriod(
                            depreciationPrimary,
                            remainingDepreciableNetBookValue,
                            acquisitionAmountSign);

                        if (depreciationSecondary * acquisitionAmountSign > remainingDepreciableNetBookValue * acquisitionAmountSign)
                        {
                            depreciationSecondary = remainingDepreciableNetBookValue;
                            leaveNetBookValueReached = true;
                            isDepreciationDone = true;
                        }

                        depreciationSecondary = assetBookTable.getRoundedDepreciationAmountForLastPeriod(
                            depreciationSecondary,
                            remainingDepreciableNetBookValue,
                            acquisitionAmountSign);
                    }

                    AssetAmount depreciation;
                    if (abs(depreciationPrimary) > abs(depreciationSecondary))
                    {
                        if (isPrimaryMethodReducingBalance)
                        {
                            currentYearDepreciation += depreciationPrimary - depreciationSecondary;

                            if (assetTableMethodPrimary.depDate() == assetTableInterval.findLastDayOfYear(assetTableMethodPrimary.depDate()))
                            {
                                assetTableMethodSecondary.addPrevDepAmountExternal(currentYearDepreciation);
                                currentYearDepreciation = 0;
                            }
                        }
                        else
                        {
                            assetTableMethodSecondary.addPrevDepAmountExternal(depreciationPrimary - depreciationSecondary);
                        }
                        depreciation = depreciationPrimary;
                    }
                    else
                    {
                        if (isSecondaryMethodReducingBalance)
                        {
                            currentYearDepreciation += depreciationSecondary - depreciationPrimary;

                            if (assetTableMethodSecondary.depDate() == assetTableInterval.findLastDayOfYear(assetTableMethodSecondary.depDate()))
                            {
                                assetTableMethodPrimary.addPrevDepAmountExternal(currentYearDepreciation);
                                currentYearDepreciation = 0;
                            }
                        }
                        else
                        {
                            assetTableMethodPrimary.addPrevDepAmountExternal(depreciationSecondary - depreciationPrimary);
                        }
                        depreciation = depreciationSecondary;
                    }

                    if (executeReportingCurrencyLogic && assetTableMethodPrimaryReportingCurrency.next() && assetTableMethodSecondaryReportingCurrency.next())
                    {
                        depreciationPrimaryReportingCurrency = assetTableMethodPrimaryReportingCurrency.calc();
                        depreciationSecondaryReportingCurrency = assetTableMethodSecondaryReportingCurrency.calc();
                        
                        if (!leaveNetBookValueReachedReportingCurrency
                            && ((depreciationAcc + depreciation == tmpDateSum.TmpNumerals02 - book.getNetBookValueRest(assetBookTable))
                            || (assetTableMethodPrimary.parmIsEndOfAccountingDepreciation() || assetTableMethodSecondary.parmIsEndOfAccountingDepreciation())))
                        {
                            while (transDate <= maxPlanDate &&
                                   assetTableMethodPrimaryReportingCurrency.next() &&
                                   assetTableMethodSecondaryReportingCurrency.next())
                            {
                                depreciationPrimaryReportingCurrency += assetTableMethodPrimaryReportingCurrency.calc();
                                depreciationSecondaryReportingCurrency += assetTableMethodSecondaryReportingCurrency.calc();
                            }
                        }
                        
                        if (depreciationPrimaryReportingCurrency || depreciationSecondaryReportingCurrency)
                        {
                            remainingDepreciableNetBookValueReportingCurrency = 
                                tmpDateSum.TmpNumeralsReportingCurrency02 
                                - depreciationAccReportingCurrency
                                - book.getNetBookValueRestReporting(assetBookTable);
                            if (depreciationPrimaryReportingCurrency * acquisitionAmountSign 
                                > remainingDepreciableNetBookValueReportingCurrency * acquisitionAmountSign)
                            {
                                depreciationPrimaryReportingCurrency = remainingDepreciableNetBookValueReportingCurrency;
                                leaveNetBookValueReachedReportingCurrency = true;
                            }
           
                            depreciationPrimaryReportingCurrency = assetBookTable.getRoundedDepreciationAmountForLastPeriodReporting(
                                depreciationPrimaryReportingCurrency,
                                remainingDepreciableNetBookValueReportingCurrency,
                                acquisitionAmountSign);
                      
                            if (depreciationSecondaryReportingCurrency * acquisitionAmountSign 
                                > remainingDepreciableNetBookValueReportingCurrency * acquisitionAmountSign)
                            {
                                depreciationSecondaryReportingCurrency = remainingDepreciableNetBookValueReportingCurrency;
                                leaveNetBookValueReachedReportingCurrency = true;
                            }

                            depreciationSecondaryReportingCurrency = assetBookTable.getRoundedDepreciationAmountForLastPeriodReporting(
                                depreciationSecondaryReportingCurrency,
                                remainingDepreciableNetBookValueReportingCurrency,
                                acquisitionAmountSign);
                        }

                        if (abs(depreciationPrimaryReportingCurrency) > abs(depreciationSecondaryReportingCurrency))
                        {
                            if (isPrimaryMethodReducingBalance)
                            {
                                currentYearDepreciationReportingCurrency += depreciationPrimaryReportingCurrency - depreciationSecondaryReportingCurrency;

                                if (assetTableMethodPrimary.depDate() == assetTableInterval.findLastDayOfYear(assetTableMethodPrimary.depDate()))
                                {
                                    assetTableMethodSecondaryReportingCurrency.addPrevDepAmountExternal(currentYearDepreciationReportingCurrency);
                                    currentYearDepreciationReportingCurrency = 0;
                                }
                            }
                            else
                            {
                                assetTableMethodSecondaryReportingCurrency.addPrevDepAmountExternal(depreciationPrimaryReportingCurrency - depreciationSecondaryReportingCurrency);
                            }
                            depreciationReportingCurrency = depreciationPrimaryReportingCurrency;
                        }
                        else
                        {
                            if (isSecondaryMethodReducingBalance)
                            {
                                currentYearDepreciationReportingCurrency += depreciationSecondaryReportingCurrency - depreciationPrimaryReportingCurrency;

                                if (assetTableMethodSecondary.depDate() == assetTableInterval.findLastDayOfYear(assetTableMethodSecondary.depDate()))
                                {
                                    assetTableMethodPrimaryReportingCurrency.addPrevDepAmountExternal(currentYearDepreciationReportingCurrency);
                                    currentYearDepreciationReportingCurrency = 0;
                                }
                            }
                            else
                            {
                                assetTableMethodPrimaryReportingCurrency.addPrevDepAmountExternal(depreciationSecondaryReportingCurrency - depreciationPrimaryReportingCurrency);
                            }
                            depreciationReportingCurrency = depreciationSecondaryReportingCurrency;
                        }
                    }
                    else
                    {
                        depreciationReportingCurrency = 0;
                    }

                    transDate = assetTableInterval.endPeriod(assetTableMethodPrimary.depDate());

                    if (tmpDateSum.TransDate != transDate)
                    {
                        if (tmpDateSum.TransDate && tmpDateSum.TransDate >= depreciationStartPostDate)
                        {
                            firstRecord = false;
                            tmpDateSum.Total = depreciationAcc;
                            tmpDateSum.TmpNumerals02 -= depreciationAcc;
                            
                            if (executeReportingCurrencyLogic)
                            {
                                tmpDateSum.TotalReportingCurrency = depreciationAccReportingCurrency;
                                tmpDateSum.TmpNumeralsReportingCurrency02 -= depreciationAccReportingCurrency;
                            }
                            else if (hasSameAccountingAndReportingCurrency)
                            {
                                tmpDateSum.TotalReportingCurrency = tmpDateSum.Total;
                                tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                            }
                            
                            tmpDateSum.write();
                            tmpDateSum.clear();
                        }

                        tmpDateSum.TransDate = transDate;

                        tmpDateSum.TmpNumerals02 = this.getAmountToDepreciate(tmpDateSum.TransDate, hasAcceleratedDep_JP, hasSpecialDep_JP);
                        
                        if (executeReportingCurrencyLogic)
                        {
                            tmpDateSum.TmpNumeralsReportingCurrency02 = this.getAmountToDepreciateInReportingCurrency(tmpDateSum.TransDate);
                        }
                        else if (hasSameAccountingAndReportingCurrency)
                        {
                            tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                        }
                    }

                    if (firstRecord)
                    {
                        var endPeriodOfDeprStartPostDate = assetTableInterval.endPeriod(depreciationStartPostDate);
                        if (assetTableInterval.endPeriod(book.DepreciationStartDate) <= endPeriodOfDeprStartPostDate)
                        {
                            tmpDateSum.TransDate = endPeriodOfDeprStartPostDate - 1;
                            tmpDateSum.write();
                            tmpDateSum.clear();
                            tmpDateSum.TmpNumerals02 = book.AcquisitionPrice;
                        
                            if (executeReportingCurrencyLogic)
                            {
                                tmpDateSum.TmpNumeralsReportingCurrency02 = book.AcquisitionPriceReportingCurrency;
                            }
                            else if (hasSameAccountingAndReportingCurrency)
                            {
                                tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                            }

                            firstRecord = false;
                        }
                    }

                    depreciationAcc += depreciation;
                    ordinaryDepreciationAcc_JP += depreciation;

                    tmpDateSum.TransDate = transDate;
                    tmpDateSum.TmpNumerals01 += depreciation;
                    tmpDateSum.TmpNumerals03 += depreciationPrimary;
                    tmpDateSum.TmpNumerals04 += depreciationSecondary;

                    if (executeReportingCurrencyLogic)
                    {
                        depreciationAccReportingCurrency += depreciationReportingCurrency;
                        tmpDateSum.TmpNumeralsReportingCurrency01 += depreciationReportingCurrency;
                        tmpDateSum.TmpNumeralsReportingCurrency03 += depreciationPrimaryReportingCurrency;
                        tmpDateSum.TmpNumeralsReportingCurrency04 += depreciationSecondaryReportingCurrency;
                    }
                    else if (hasSameAccountingAndReportingCurrency)
                    {
                        tmpDateSum.TmpNumeralsReportingCurrency01 = tmpDateSum.TmpNumerals01;
                        tmpDateSum.TmpNumeralsReportingCurrency03 = tmpDateSum.TmpNumerals03;
                        tmpDateSum.TmpNumeralsReportingCurrency04 = tmpDateSum.TmpNumerals04;
                    }
                    if (isIsoJP)
                    {
                        if (assetDepTableMethodInterface_JP)
                        {
                            tmpDateSum.BeginningBalOfAccumulatedDep_JP = assetDepTableMethodInterface_JP.calcYearBeginningBalanceOfAccumulatedDep();
                            tmpDateSum.ytdAccumulatedDep_JP = assetDepTableMethodInterface_JP.calcAllowableLimitForSumOfDepYTD();
                        }
                        curARODepAmount_JP = 0;
                        if (depreciation && isAssetDocumentEnabled_JP)
                        {
                            isDepreciationDone = isDepreciationDone || ordinaryDepreciationAcc_JP >= assetTableMethodPrimary.parmAmountToDepreciate();
                            aroDepHelperForProfile_JP.applyNormalDepreciationAmount(ordinaryDepreciationAcc_JP);
                            aroDepHelperForProfile_JP.applyNormalDepreciationInfo(assetTableMethodPrimary.parmAmountToDepreciate(), transDate, isDepreciationDone);
                            curARODepAmount_JP = aroDepHelperForProfile_JP.calcTotal(transDate);
                            tmpDateSum.RetirementObligationDepAmount_JP = curARODepAmount_JP;
                            depreciationAcc += curARODepAmount_JP;
                        }
                    }
                    if (leaveNetBookValueReached)
                    {
                        break;
                    }
                }
            }

            // Only write record if date exists and is for non-zero amount
            if (tmpDateSum.TransDate && tmpDateSum.TmpNumerals01)
            {
                tmpDateSum.Total = depreciationAcc;
                tmpDateSum.TmpNumerals02 -= depreciationAcc;
                
                if (executeReportingCurrencyLogic)
                {
                    tmpDateSum.TotalReportingCurrency = depreciationAccReportingCurrency;
                    tmpDateSum.TmpNumeralsReportingCurrency02 -= depreciationAccReportingCurrency;
                }
                else if (hasSameAccountingAndReportingCurrency)
                {
                    tmpDateSum.TotalReportingCurrency = tmpDateSum.Total;
                    tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                }

                tmpDateSum.write();
            }
        }

        if (cancellationToken.IsCancellationRequested)
        {
            tmpDateSum.ttsabort();
        }
        else
        {
            tmpDateSum.ttscommit();
        }
        return tmpDateSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTransTypes</Name>
				<Source><![CDATA[
    public container getAssetTransTypes()
    {
        return [AssetTransType::Depreciation, AssetTransType::DepreciationAdj];
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEmptyProfile</Name>
				<Source><![CDATA[
    private boolean showEmptyProfile()
    {
	    return book.Status == AssetStatus::Sold
            || book.Status == AssetStatus::Closed
            || book.Status == AssetStatus::Scrapped
            || book.Status == AssetStatus::Suspended
            || (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]) && book.IsPositiveDepreciation == NoYes::Yes && book.AcquisitionPrice > 0)
            || (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]) && book.IsPositiveDepreciation == NoYes::No && book.AcquisitionPrice < 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountToDepreciate</Name>
				<Source><![CDATA[
    private AssetAmount getAmountToDepreciate(AssetTransDate _transDate, boolean _hasAcceleratedDep_JP, boolean _hasSpecialDep_JP)
    {
        AssetAmount returnAmount;

        if (book.AcquisitionDate <= _transDate && AssetStatusType::construct(book.Status).isAcquired())
        {
            returnAmount = AssetTrans::amountToDepriciate(book.AssetId, _transDate, book.BookId)
                + AssetTrans::amountMSTPerDateTranstype(book.AssetId, _transDate, book.BookId, AssetTransType::BonusDepreciation);

            if (!_hasSpecialDep_JP)
            {
                if (_hasAcceleratedDep_JP)
                {
                    returnAmount += AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(book, dateNull(), _transDate, AssetTransType::ExtraordinaryDepreciation, 0, true);
                }
                else
                {
                    returnAmount += AssetTrans::amountMSTPerDateTranstype(book.AssetId, _transDate, book.BookId, AssetTransType::ExtraordinaryDepreciation);
                }
            }
        }
        else
        {
            returnAmount = book.AcquisitionPrice;
        }

        return returnAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountToDepreciateInReportingCurrency</Name>
				<Source><![CDATA[
    private AssetAmountReportingCurrency getAmountToDepreciateInReportingCurrency(AssetTransDate _transDate)
    {
        AssetAmountReportingCurrency ret;

        if (book.AcquisitionDate <= _transDate && isBookAcquired)
        {
            ret = AssetTrans::amountToDepriciateInReportingCurrency(book.AssetId, _transDate, book.BookId)
                + AssetTrans::amountReportingCurrencyPerDateTranstype(book.AssetId, _transDate, book.BookId, AssetTransType::BonusDepreciation);
        }
        else
        {
            ret = book.AcquisitionPriceReportingCurrency;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extraOrdinaryDepCalcBeforeOrdinary_JP</Name>
				<Source><![CDATA[
    private container extraOrdinaryDepCalcBeforeOrdinary_JP(
        AssetTableInterval _assetTableInterval,
        AssetTableMethod_JP _acceleratedAssetTableMethod,
        AssetTableMethod_JP  _specialAssetTableMethod,
        AssetTransDate _acceleratedDepStartDate,
        AssetTransDate _specialDepStartDate,
        AssetTransDate _depStartDate,
        TmpDateSum _tmpDateSum,
        TransDate _depreciationStartPostDate,
        AssetAmount _depreciationAcc,
        AssetAmount _acceleratedDepreciationAcc,
        AssetAmount _specialDepreciationAcc,
        boolean _firstRecord,
        boolean _hasAcceleratedDep,
        boolean _hasSpecialDep)
    {
        AssetTransDate acceleratedDepDate;
        AssetTransDate specialDepDate;
        AssetAmount curAcceleratedDepAmount;
        AssetAmount curSpecialDepAmount;
        TransDate startDate;
        TransDate curTransDate;
        TransDate depStartDatePeriodEnd;
        TransDate specialDepStartDatePeriodEnd;
        TransDate acceleratedDepStartDatePeriodEnd;
        AssetAmount acceleratedDepreciationAccForProfile;
        AssetAmount specialDepreciationAccForProfile;
        AssetAmount depreciationAcc = _depreciationAcc;
        AssetAmount acceleratedDepreciationAcc = _acceleratedDepreciationAcc;
        AssetAmount specialDepreciationAcc = _specialDepreciationAcc;

        if (_acceleratedDepStartDate != dateNull() && _specialDepStartDate != dateNull())
        {
            startDate = min(_acceleratedDepStartDate, _specialDepStartDate, _depStartDate);
        }
        else if (_acceleratedDepStartDate != dateNull())
        {
            startDate = min(_acceleratedDepStartDate, _depStartDate);
        }
        else if (_specialDepStartDate != dateNull())
        {
            startDate = min(_specialDepStartDate, _depStartDate);
        }

        curTransDate = _assetTableInterval.endPeriod(startDate);
        depStartDatePeriodEnd = _assetTableInterval.endPeriod(_depStartDate);
        specialDepStartDatePeriodEnd = _assetTableInterval.endPeriod(_specialDepStartDate);
        acceleratedDepStartDatePeriodEnd = _assetTableInterval.endPeriod(_acceleratedDepStartDate);

        while (curTransDate < depStartDatePeriodEnd)
        {
            if (_hasSpecialDep && curTransDate >= specialDepStartDatePeriodEnd)
            {
                // additional depreciation
                if (_specialAssetTableMethod.parmPeriodEnd() == curTransDate
                    && _specialAssetTableMethod.next())
                {
                    specialDepDate = _specialAssetTableMethod.parmPeriodEnd();
                    curSpecialDepAmount = _specialAssetTableMethod.calc();
                }
                else
                {
                    specialDepDate = dateNull();
                    curSpecialDepAmount = 0;
                }
            }
            if (_hasAcceleratedDep && curTransDate >= acceleratedDepStartDatePeriodEnd)
            {
                // accelerated depreciation
                if (_acceleratedAssetTableMethod.parmPeriodEnd() == curTransDate
                    && _acceleratedAssetTableMethod.next())
                {
                    acceleratedDepDate = _acceleratedAssetTableMethod.parmPeriodEnd();
                    curAcceleratedDepAmount = _acceleratedAssetTableMethod.calc();
                }
                else
                {
                    acceleratedDepDate = dateNull();
                    curAcceleratedDepAmount = 0;
                }
            }

            if (_tmpDateSum.TransDate && _tmpDateSum.TransDate >= _depreciationStartPostDate)
            {
                _firstRecord = false;
                _tmpDateSum.Total = depreciationAcc;
                _tmpDateSum.TmpNumerals02 -= depreciationAcc;
                _tmpDateSum.write();
                _tmpDateSum.clear();
            }
            _tmpDateSum.AcceleratedDepAmount_JP = curAcceleratedDepAmount;
            acceleratedDepreciationAcc += curAcceleratedDepAmount;
            acceleratedDepreciationAccForProfile += curAcceleratedDepAmount;

            _tmpDateSum.AdditionalDepAmount_JP = curSpecialDepAmount;
            specialDepreciationAcc += curSpecialDepAmount;
            specialDepreciationAccForProfile += curSpecialDepAmount;

            _tmpDateSum.TransDate = curTransDate;

            depreciationAcc = -(AssetTrans::amountMSTPerDateTransTypes(book.AssetId, book.BookId, this.getAssetTransTypes(), dateNull(), curTransDate));

            // Only if current trans date is earlier than accelerated depreciation start date and there is accelerated depreciation, we need to add accelerated depreciation trans amount.
            if (_hasAcceleratedDep && curTransDate < acceleratedDepStartDatePeriodEnd)
            {
                depreciationAcc += specialDepreciationAcc + AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(book, dateNull(), curTransDate);
            }
            // Only if current trans date is earlier than special depreciation start date and there is special depreciation, we need to add special depreciation trans amount.
            else if (_hasSpecialDep && curTransDate < specialDepStartDatePeriodEnd)
            {
                depreciationAcc += acceleratedDepreciationAcc + AssetDepTransMap_JP::calcAccumulatedExtraDepAmtMst(book, dateNull(), curTransDate, 0, true);
            }
            else
            {
                depreciationAcc += acceleratedDepreciationAcc + specialDepreciationAcc;
            }

            _tmpDateSum.TmpNumerals02 = this.getAmountToDepreciate(_tmpDateSum.TransDate, _hasAcceleratedDep, _hasSpecialDep);
            curTransDate = _assetTableInterval.endPeriod(curTransDate + 1);
        }

        return [depreciationAcc, acceleratedDepreciationAcc, specialDepreciationAcc, acceleratedDepreciationAccForProfile, specialDepreciationAccForProfile, _firstRecord];
    }

]]></Source>
			</Method>
			<Method>
				<Name>regulateDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensure Depreciation does not go over the "leave net book value" setting or more than allowed amount to depreciate.
    /// </summary>
    /// <param name = "_depreciationAmount">The Depreciation value.</param>
    /// <param name = "_tmpDateSum">The <c>TmpDateSum</c> buffer.</param>
    /// <param name = "_depreciationAcc">The Depreciation value in accounting currency.</param>
    /// <param name = "_assetBookTable">The <c>AssetBookTable</c> buffer.</param>
    /// <returns>Returns a container with calculated values of depreciation.</returns>
    [Wrappable(true)]
    protected container regulateDepreciation(
        AssetAmount _depreciationAmount,
        TmpDateSum _tmpDateSum,
        AssetAmount _depreciationAcc,
        AssetBookTable _assetBookTable)
    {
        AssetAmount remainingDepreciableNetBookValue;
        boolean leaveNetBookValueReached;
        boolean isDepreciationDone;
        AssetAmount depreciation = _depreciationAmount;

        // Ensure Depreciation does not go over the "leave net book value" setting or more than allowed amount to depreciate.
        if (_depreciationAmount)
        {
            remainingDepreciableNetBookValue = 
                _tmpDateSum.TmpNumerals02 
                - _depreciationAcc 
                - book.getNetBookValueRest(_assetBookTable);

            if (_depreciationAmount * acquisitionAmountSign > remainingDepreciableNetBookValue * acquisitionAmountSign)
            {
                depreciation = remainingDepreciableNetBookValue;
                leaveNetBookValueReached = true;
                isDepreciationDone = true;
            }
        }
        return [remainingDepreciableNetBookValue, depreciation, leaveNetBookValueReached, isDepreciationDone];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRemainDepValueExist_JP</Name>
				<Source><![CDATA[
    private boolean isRemainDepValueExist_JP(AmountMST _netBookValueRest)
    {
        AssetSumCalc_Trans assetSumCalc_Trans = AssetSumCalc_Trans::newAssetId(book.AssetId, book.BookId, dateNull(), dateMax());
        AmountMST netBookValue = assetSumCalc_Trans.netBookValue();

        return (netBookValue > max(_netBookValueRest, book.ScrapValue));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>