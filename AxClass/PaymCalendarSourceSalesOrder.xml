<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarSourceSalesOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PaymCalendarSourceSalesOrder</c> class provides an interface that is used to find payment
/// calendars when the source is the <c>SalesTable</c> table.
/// </summary>
public class PaymCalendarSourceSalesOrder implements PaymCalendarIDerivationSource, PaymCalendarIBankAddress
{
    private SalesTable salesTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the bank account.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getBankPostalAddress()
    {
        CustBankAccount custBankAccount;
        CustTable custTable;
        LogisticsPostalAddress postalAddress;

        custTable = CustTable::findByCompany(salesTable.DataAreaId, salesTable.InvoiceAccount);

        custBankAccount = CustBankAccount::find(custTable.AccountNum, custTable.BankAccount);

        postalAddress = LogisticsLocationEntity::location2PostalAddress(custBankAccount.Location);

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the third-party entity.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getPrimaryPostalAddress()
    {
        CustTable custTable;
        LogisticsPostalAddress localPostalTable;

        custTable = CustTable::findByCompany(salesTable.DataAreaId, salesTable.InvoiceAccount);

        localPostalTable = custTable.postalAddress();

        return localPostalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the payment calendar derivation source instance for the specified record.
    /// </summary>
    /// <param name="_salesTable">
    /// A populated <c>SalesTable</c> table buffer that specifies the initialization data.
    /// </param>
    public void initialize(SalesTable _salesTable)
    {
        salesTable = _salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public PaymCalendarModuleType parmModuleType()
    {
        PaymCalendarModuleType paymCalendarModuleType;

        paymCalendarModuleType = PaymCalendarModuleType::Customer;

        return paymCalendarModuleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode()
    {
        CustPaymMode paymMode;

        paymMode = salesTable.PaymMode;

        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmPaymTermDataAreaId()
    {
        return salesTable.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermId</Name>
				<Source><![CDATA[
    public PaymTermId parmPaymTermId()
    {
        return salesTable.Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceSalesOrder</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>PaymCalendarSourceSalesOrder</c> class.
    /// </returns>
    private static PaymCalendarSourceSalesOrder construct()
    {
        return new PaymCalendarSourceSalesOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> class that contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    /// <remarks>
    /// If no adjustment is needed, the original date is returned. An empty record ID is returned for the
    /// payment calendar and calendar rule whenever a calendar is not found.
    /// </remarks>
    public static PaymCalendarAdjustedDate getAdjustedDate(SalesTable _salesTable)
    {
        return PaymCalendarSourceSalesOrder::getAdjustedDatePrivate(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDatePrivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <returns>
    /// An instance of <c>PaymCalendarAdjustedDate</c> that contains the adjusted due date together with
    /// the calendar and rule that was applied when adjusting the date.
    /// </returns>
    private static PaymCalendarAdjustedDate getAdjustedDatePrivate(SalesTable _salesTable)
    {
        PaymTerm paymTerm;
        PaymCalendarSourceSalesOrder calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymCalendarAdjustedDate paymCalendarAdjustedDate;

        paymTerm = PaymTerm::find(_salesTable.Payment);

        if (paymTerm.CustomerUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
        {
            calendarSource = PaymCalendarSourceSalesOrder::newCalendarSource(_salesTable);
            paymCalendarProcessor = PaymCalendarProcessor::construct();
            paymCalendarAdjustedDate = paymCalendarProcessor.getAdjustedDate(_salesTable.FixedDueDate, paymTerm.CustomerUpdateDueDate, calendarSource);
        }
        else
        {
            paymCalendarAdjustedDate = PaymCalendarAdjustedDate::construct(_salesTable.FixedDueDate);
        }

        return paymCalendarAdjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalendarSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceSalesOrder</c> class.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record to load.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PaymCalendarSourceSalesOrder</c> class.
    /// </returns>
    public static PaymCalendarSourceSalesOrder newCalendarSource(SalesTable _salesTable)
    {
        PaymCalendarSourceSalesOrder paymCalendarSourceSalesOrder;

        paymCalendarSourceSalesOrder = PaymCalendarSourceSalesOrder::construct();
        paymCalendarSourceSalesOrder.initialize(_salesTable);

        return paymCalendarSourceSalesOrder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>