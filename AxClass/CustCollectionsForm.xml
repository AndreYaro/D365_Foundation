<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustCollectionsForm</c> class handles logic related to the <c>CustCollections</c> form.
/// </summary>
public class CustCollectionsForm
{
    Common lookupRecord;
    CustCollectionsPoolId poolId;
    CustVendReportName agingPeriodDefinition;
    AccountNum selectedCustAccountNum;
    boolean fromLinkActive;
    boolean fromCustTrans;
    boolean fromCaseListPage;
    boolean fromActivities;
    boolean isClosedCustTrans;
    boolean isCaseNotInProcess;
    boolean isActivityClosed;
    CustTrans custTrans;
    CaseDetailBase caseDetailBase;
    smmActivities smmActivities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>CustCollectionsForm</c> class.
    /// </summary>
    /// <param name = "_lookupRecord">The table buffer to use to get to the customer from which to display aging information.</param>
    /// <param name = "_agingPeriodDefinition">The aging period definition used to display the aging information.</param>
    /// <param name = "_poolId">The ID of the pool query that can be used to filter the information displayed on the form.</param>
    /// <returns>A new instance of the <c>CustCollectionsForm</c> class.</returns>
    public static CustCollectionsForm construct(
        Common _lookupRecord,
        CustCollectionsPoolId _poolId = '',
        CustVendReportName _agingPeriodDefinition = '')
    {
        CustCollectionsForm custCollectionsForm = new CustCollectionsForm();
        custCollectionsForm.parmLookupRecord(_lookupRecord);
        custCollectionsForm.parmPoolId(_poolId);

        if (!prmIsDefault(_agingPeriodDefinition))
        {
            custCollectionsForm.parmAgingPeriodDefinition(_agingPeriodDefinition);
        }

        return custCollectionsForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a newly instantiated <c>CustCollectionsForm</c> class instance.
    /// </summary>
    public void init()
    {
        selectedCustAccountNum = this.getDefaultCustAccountNum();

        if (!this.agingPeriodDefinition)
        {
            this.agingPeriodDefinition = CustCollectionsListPageHelper::getDefaultAgingPeriodByPool(poolId);
            
            if (!this.agingPeriodDefinition)
            {
                this.agingPeriodDefinition = CustCollectionsListPageHelper::getFirstValidAgingPeriod();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLookupRecord</Name>
				<Source><![CDATA[
    public Common parmLookupRecord(Common _lookupRecord = lookupRecord)
    {
        lookupRecord = _lookupRecord;
        return lookupRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPoolId</Name>
				<Source><![CDATA[
    public CustCollectionsPoolId parmPoolId(CustCollectionsPoolId _poolId = poolId)
    {
        poolId = _poolId;
        return poolId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgingPeriodDefinition</Name>
				<Source><![CDATA[
    public CustVendReportName parmAgingPeriodDefinition(CustVendReportName _agingPeriodDefinition = agingPeriodDefinition)
    {
        agingPeriodDefinition = _agingPeriodDefinition;
        return agingPeriodDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivities</Name>
				<Source><![CDATA[
    public smmActivities parmActivities(smmActivities _smmActivities = smmActivities)
    {
        smmActivities = _smmActivities;
        return smmActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromActivities</Name>
				<Source><![CDATA[
    public boolean parmFromActivities(boolean _fromActivities = fromActivities)
    {
        fromActivities = _fromActivities;
        return fromActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaseDetailBase</Name>
				<Source><![CDATA[
    public CaseDetailBase parmCaseDetailBase(CaseDetailBase _caseDetailBase = caseDetailBase)
    {
        caseDetailBase = _caseDetailBase;
        return caseDetailBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromCaseListPage</Name>
				<Source><![CDATA[
    public boolean parmFromCaseListPage(boolean _fromCaseListPage = fromCaseListPage)
    {
        fromCaseListPage = _fromCaseListPage;
        return fromCaseListPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTrans</Name>
				<Source><![CDATA[
    public CustTrans parmCustTrans(CustTrans _custTrans = custTrans)
    {
        custTrans = _custTrans;
        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromCustTrans</Name>
				<Source><![CDATA[
    public boolean parmFromCustTrans(boolean _fromCustTrans = fromCustTrans)
    {
        fromCustTrans = _fromCustTrans;
        return fromCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsActivityClosed</Name>
				<Source><![CDATA[
    public boolean parmIsActivityClosed(boolean _isActivityClosed = isActivityClosed)
    {
        isActivityClosed = _isActivityClosed;
        return isActivityClosed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCaseNotInProcess</Name>
				<Source><![CDATA[
    public boolean parmIsCaseNotInProcess(boolean _isCaseNotInProcess = isCaseNotInProcess)
    {
        isCaseNotInProcess = _isCaseNotInProcess;
        return isCaseNotInProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsClosedCustTrans</Name>
				<Source><![CDATA[
    public boolean parmIsClosedCustTrans(boolean _isClosedCustTrans = isClosedCustTrans)
    {
        isClosedCustTrans = _isClosedCustTrans;
        return isClosedCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromLinkActive</Name>
				<Source><![CDATA[
    public boolean parmFromLinkActive(boolean _fromLinkActive = fromLinkActive)
    {
        fromLinkActive = _fromLinkActive;
        return fromLinkActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedCustAccountNum</Name>
				<Source><![CDATA[
    public AccountNum parmSelectedCustAccountNum(AccountNum _selectedCustAccountNum = selectedCustAccountNum)
    {
        selectedCustAccountNum = _selectedCustAccountNum;
        return selectedCustAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPoolAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first customer account from the given pool query.
    /// </summary>
    /// <param name = "_poolQuery">The pool query from which to select the first customer.</param>
    /// <returns>The account number of the first customer in the pool query.</returns>
    public AccountNum firstPoolAccountNum(Query _poolQuery = this.getPoolQuery())
    {
        var queryRun = new QueryRun(_poolQuery);

        if (queryRun.next())
        {
            return queryRun.get(tableNum(CustTable)).(fieldNum(CustTable, AccountNum));
        }
        else
        {
            return (select firstonly AccountNum from CustTable order by AccountNum).AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPoolQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>Query</c> instance associated with the given Pool ID.
    /// </summary>
    /// <param name = "_poolId">The Pool ID used to retreive the pool query.</param>
    /// <returns>The <c>Query</c> instance associated with the given Pool ID.</returns>
    public Query getPoolQuery(CustCollectionsPoolId _poolId = poolId)
    {
        CustCollectionsPool custCollectionsPool;

        return _poolId ? new Query((select custCollectionsPool where custCollectionsPool.Name == _poolId).QueryPacked) : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCustAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default customer account number from the lookup record and pool query combination.
    /// </summary>
    /// <param name = "_record">The lookup record from which to find the customer account.</param>
    /// <param name = "_poolQuery">The pool query from which to find the customer account.</param>
    /// <returns>The default customer account based on the combination of lookup record and pool query.</returns>
    public CustAccount getDefaultCustAccountNum(Common _record = lookupRecord, Query _poolQuery = null)
    {
        CustTable custTable;
        var defaultAccountNum = this.getDefaultCustAccountNumFromCase(_record);

        if (!defaultAccountNum)
        {
            defaultAccountNum = this.getDefaultCustAccountFromCustTrans(_record);
        }

        if (!defaultAccountNum)
        {
            defaultAccountNum = this.getDefaultCustAccountNumFromActivity(_record);
        }

        if (!defaultAccountNum)
        {
            defaultAccountNum = this.getDefaultCustAccountNumFromCust(_record);
        }

        if (!defaultAccountNum && _poolQuery)
        {
            return this.firstPoolAccountNum(_poolQuery);
        }

        selectedCustAccountNum = defaultAccountNum ? defaultAccountNum : (select firstonly AccountNum from custTable order by AccountNum).AccountNum;

        return selectedCustAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCustAccountNumFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default customer account number based on a given <c>CustTable</c> record.
    /// </summary>
    /// <param name = "_record">The record from which to find the customer account.</param>
    /// <returns>The customer account based on the given record.</returns>
    protected CustAccount getDefaultCustAccountNumFromCust(Common _record)
    {
        if (_record && _record.TableId == tableNum(CustTable))
        {
            fromLinkActive = true;
            return _record.(fieldNum(CustTable, AccountNum));
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCustAccountFromCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default customer account number based on a given <c>CustTrans</c> record.
    /// </summary>
    /// <param name = "_record">The record from which to find the customer account.</param>
    /// <returns>The customer account based on the given record.</returns>
    protected CustAccount getDefaultCustAccountFromCustTrans(Common _record)
    {
        if (_record && _record.TableId == tableNum(CustTrans))
        {
            fromLinkActive = true;
            fromCustTrans = true;

            var selectedRecId = _record.(fieldNum(CustTrans, RecId));

            select firstonly custTrans where custTrans.RecId == selectedRecId;

            isClosedCustTrans = custTrans.Closed != dateNull();

            lookupRecord = CustTable::findByCompany(custTrans.company(), custTrans.AccountNum);

            return _record.(fieldNum(CustTable, AccountNum));
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCustAccountNumFromCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default customer account number based on a given <c>CustCollectionsCaseDetail</c> record.
    /// </summary>
    /// <param name = "_record">The record from which to find the customer account.</param>
    /// <returns>The customer account based on the given record.</returns>
    protected CustAccount getDefaultCustAccountNumFromCase(Common _record)
    {
        if (_record && _record.TableId == tableNum(CustCollectionsCaseDetail))
        {
            fromLinkActive = true;
            fromCaseListPage = true;

            var selectedCaseRecId = _record.(fieldNum(CustCollectionsCaseDetail, RecId));

            select firstonly caseDetailBase where caseDetailBase.RecId == selectedCaseRecId;

            isCaseNotInProcess = caseDetailBase.Status != CaseStatus::InProcess;

            return (select AccountNum from CustTable where CustTable.Party == _record.(fieldNum(CustCollectionsCaseDetail, Party))).AccountNum;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCustAccountNumFromActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default customer account number based on a given <c>smmActivities</c> record.
    /// </summary>
    /// <param name = "_record">The record from which to find the customer account.</param>
    /// <returns>The customer account based on the given record.</returns>
    protected CustAccount getDefaultCustAccountNumFromActivity(Common _record)
    {
        if (_record && _record.TableId == tableNum(smmActivities))
        {
            fromLinkActive = true;
            fromActivities = true;

            var selectedActivityId = _record.(fieldNum(smmActivities, RecId));

            select firstonly smmActivities where smmActivities.RecId == selectedActivityId;

            isActivityClosed = smmActivities.Closed;

            smmActivityParentLinkTable localLinkTable;
            CustTable custTableLocal;

            select AccountNum from custTableLocal
                exists join localLinkTable
                    where localLinkTable.ParentType == smmActivityParentType::Customer &&
                          localLinkTable.ActivityNumber == smmActivities.ActivityNumber &&
                          custTableLocal.RecId == localLinkTable.RefRecId &&
                          localLinkTable.RefTableId == custTableLocal.TableId;

            return custTableLocal.AccountNum;
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>