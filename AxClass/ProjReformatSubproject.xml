<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjReformatSubproject</Name>
	<SourceCode>
		<Declaration><![CDATA[
using xpp = Microsoft.Dynamics.Ax.Xpp;
using model = Microsoft.Dynamics.AX.Metadata.MetaModel;
using core = Microsoft.Dynamics.AX.Metadata.Core.MetaModel;

/// <summary>
/// The <c>ProjReformatSubproject</c> class allows for the updating of Subproject formats.
/// </summary>
public class ProjReformatSubproject extends RunBaseBatch implements BatchRetryable
{
    private NumberSequenceFormat newNumberFormat;
    private NumberSequenceFormat currentNumberFormat;
    private DialogField newNumberFormatField;
    private ProjInvalidSubProjectTmp projInvalidSubProjectTmp;
    private Map oldToNewProjectMap = new Map(Types::String, Types::String);
    private Set newProjectIdList = new Set(Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {

        ProjReformatSubprojectTmp projectChanges = this.calculateNewSubprojects();
        ttsbegin;
        this.updateProjectParameters();
        this.updateTables(projectChanges);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectParameters</Name>
				<Source><![CDATA[
    private void updateProjectParameters()
    {
        ProjParameters parameters = ProjParameters::find(true);
        parameters.DisplayFormat = newNumberFormat;
        parameters.update();

        ProjTable projTable;

        if (ProjSkipErrorForModifySubProjectIdInBatchFlight::instance().isEnabled())
        {
            update_recordset projTable
                setting Format = newNumberFormat
            notexists join ProjId from projInvalidSubProjectTmp
                where projInvalidSubProjectTmp.ProjId == projTable.ProjId;
        }
        else
        {
            update_recordset projTable setting Format = newNumberFormat;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNewSubprojects</Name>
				<Source><![CDATA[
    private ProjReformatSubprojectTmp calculateNewSubprojects()
    {
        ProjTable projTable;
        while select projTable
            order by projTable.ProjId
        where projTable.ParentId != ''
        {
            if (ProjSkipErrorForModifySubProjectIdInBatchFlight::instance().isEnabled())
            {
                try
                {
                    this.processSubProjectId(projTable);
                }
                catch(Exception::Error)
                {
                    this.addInvalidProject(projTable);

                    continue;
                }
            }
            else
            {
                this.processSubProjectId(projTable);
            }

        }

        ProjReformatSubprojectTmp projectsToUpdate;
        RecordInsertList projectsList = new RecordInsertList(tableNum(ProjReformatSubprojectTmp), true, true, true, false, false, projectsToUpdate);

        MapEnumerator projects = oldToNewProjectMap.getEnumerator();
        while (projects.moveNext())
        {
            projectsToUpdate.PreviousProjectId = projects.currentKey();
            projectsToUpdate.NewProjectId = projects.currentValue();
            projectsList.add(projectsToUpdate);
        }

        projectslist.insertDatabase();
        return projectsToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvalidProject</Name>
				<Source><![CDATA[
    private void addInvalidProject(ProjTable _projTable)
    {
        projInvalidSubProjectTmp.ProjId = _projTable.ProjId;
        projInvalidSubProjectTmp.insert();

        if (_projTable.ParentId && !projInvalidSubProjectTmp::exist(_projTable.ParentId))
        {
            projInvalidSubProjectTmp.ProjId = _projTable.ParentId;
            projInvalidSubProjectTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTables</Name>
				<Source><![CDATA[
    private void updateTables(ProjReformatSubprojectTmp _projectChanges)
    {
        Set tablesAndFieldsToUpdate = this.getListOfTablesAndFieldsToUpdate();

        SetEnumerator setEnumerator = tablesAndFieldsToUpdate.getEnumerator();
        while (setEnumerator.moveNext())
        {
            TableName table;
            FieldName field;

            [table, field] = setEnumerator.current();

            this.update(table, field, _projectChanges);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    private void update(TableName _table, FieldName _field, ProjReformatSubprojectTmp _subprojectTmp)
    {
        // USE DIRECT SQL TO UPDATE THE TABLES SINCE UPDATE_RECORDSET CAN'T HANDLE DYNAMIC TABLES AND FIELDS

        TableId sqlTableId = tableName2Id(_table);
        FieldId sqlFieldId = fieldName2Id(sqlTableId, _field);

        DictTable sqlTable = new DictTable(sqlTableId);
        str sqlTableName = sqlTable.name(DbBackend::Sql);

        DictTable tempTable = new DictTable(tableNum(ProjReformatSubprojectTmp));

        FieldId tempPreviousFieldId = fieldNum(ProjReformatSubprojectTmp, PreviousProjectId);
        FieldId tempNewFieldId = fieldNum(ProjReformatSubprojectTmp, NewProjectId);

        // UPDATE TABLE SET COLUMN = NEWVALUES.NEWPROJECTID
        // FROM TABLE INNER JOIN tempTable AS NEWVALUES
        // ON TABLE.COLUMN = NEWVALUES.OLDPROJECTID
        // WHERE TABLE.PARTITION = CURRENT_PARTITION
        //   AND TABLE.DATAAREAID = CURRENT_DATAAREAID

        str sqlUpdate = strFmt(
            'UPDATE %1 SET %2 = NEWVALUES.%3 ',
            sqlTableName,
            sqlTable.fieldName(sqlFieldId, DbBackend::Sql),
            tempTable.fieldName(tempNewFieldId, DbBackend::Sql));

        sqlUpdate += strFmt(' FROM %1 INNER JOIN %2 AS NEWVALUES ',
            sqlTableName,
            _subprojectTmp.getPhysicalTableName());

        sqlUpdate += strFmt(' ON %1.%2 = NEWVALUES.%3 ',
            sqlTableName,
            sqlTable.fieldName(sqlFieldId, DbBackend::Sql),
            tempTable.fieldName(tempPreviousFieldId, DbBackend::Sql));

        str whereClause;

        if (sqlTable.dataPerPartition())
        {
            whereClause = strFmt(' %1.%2 = %3 ',
                sqlTableName,
                sqlTable.fieldName(fieldName2Id(sqlTableId, fieldStr(Common, Partition)), DbBackend::Sql),
                getCurrentPartitionRecId());
        }

        if (sqlTable.dataPrCompany())
        {
            if (whereClause != '')
            {
                whereClause += ' AND ';
            }

            whereClause += strFmt(' %1.%2 = \'%3\' ',
                sqlTableName,
                sqlTable.fieldName(fieldName2Id(sqlTableId, fieldStr(Common, DataAreaId)), DbBackend::Sql),
                curExt());
        }

        if (whereClause != '')
        {
            sqlUpdate += ' WHERE ' + whereClause;
        }

        new SqlStatementExecutePermission(sqlUpdate).assert();
        Statement statement = new Connection().createStatement();
        statement.executeUpdateWithParameters(sqlUpdate, SqlParams::create());
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtendedTypesThatExtend</Name>
				<Source><![CDATA[
    private void getExtendedTypesThatExtend(ExtendedDataTypeName _edt, Set _typesThatExtend)
    {
        _typesThatExtend.add(_edt);

        var allEdts = xpp.MetadataSupport::EdtNames();
        while (allEdts.MoveNext())
        {
            model.AxEdt edt = xpp.MetadataSupport::GetEdt(allEdts.Current);
            if (edt.Extends == _edt)
            {
                this.getExtendedTypesThatExtend(edt.Name, _typesThatExtend);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfTablesAndFieldsToUpdate</Name>
				<Source><![CDATA[
    private Set getListOfTablesAndFieldsToUpdate()
    {
        Set typesThatExtendProjId = new Set(Types::String);
        this.getExtendedTypesThatExtend(extendedTypeStr(ProjIdBase), typesThatExtendProjId);

        Set tablesAndFieldsToUpdate = new Set(Types::Container);

        var listOfTables = xpp.MetadataSupport::GetAllTables().GetEnumerator();
        while (listOfTables.MoveNext())
        {
            model.AxTable currentTable = listOfTables.Current;
            TableName currentTableName = currentTable.Name;

            if (currentTable.TableType == core.TableType::Regular
                && isConfigurationkeyEnabled(configurationKeyName2Id(currentTable.ConfigurationKey)))
            {
                // Find fields that use the EDT
                var fields = currentTable.Fields.GetEnumerator();
                while (fields.MoveNext())
                {
                    model.AxTableField field = fields.Current;
                    if (typesThatExtendProjId.in(field.ExtendedDataType)
                        && isConfigurationkeyEnabled(configurationKeyName2Id(field.ConfigurationKey)))
                    {
                        FieldName currentFieldName = field.Name;
                        tablesAndFieldsToUpdate.add([currentTableName, currentFieldName]);
                    }
                }

                // Find relations back to ProjTable
                var relations = currentTable.Relations.GetEnumerator();
                while (relations.MoveNext())
                {
                    model.AxTableRelation relation = relations.Current;
                    if (relation.RelatedTable == tableStr(ProjTable))
                    {
                        var constraints = relation.Constraints.GetEnumerator();
                        while (constraints.MoveNext())
                        {
                            if (constraints.Current is model.AxTableRelationConstraintField)
                            {
                                model.AxTableRelationConstraintField constraint = constraints.Current;
                                if (constraint.RelatedField == fieldStr(ProjTable, ProjId))
                                {
                                    model.AxTableField constraintField = xpp.MetadataSupport::GetTableField(currentTableName, constraint.Field);
                                    if (isConfigurationkeyEnabled(configurationKeyName2Id(constraintField.ConfigurationKey)))
                                    {
                                        tablesAndFieldsToUpdate.add([currentTableName, constraintField.Name]);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return tablesAndFieldsToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [newNumberFormat];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        newNumberFormat = conPeek(_packed, 1);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        currentNumberFormat = ProjParameters::find().DisplayFormat;
        
        newNumberFormatField = dialog.addFieldValue(extendedTypeStr(NumberSequenceFormat), currentNumberFormat, "@Proj:ReformatSubprojectNewFormat");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        newNumberFormat = newNumberFormatField.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (currentNumberFormat == newNumberFormat)
        {
            ret = checkFailed("@Proj:ReformatSubprojectNeedNewFormat");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProjReformatSubproject reformatSubproject = ProjReformatSubproject::construct();

        if (reformatSubproject.prompt())
        {
            reformatSubproject.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewNumberFormat</Name>
				<Source><![CDATA[
    public NumberSequenceFormat parmNewNumberFormat(NumberSequenceFormat _newNumberFormat = newNumberFormat)
    {
        if (!prmIsDefault(_newNumberFormat))
        {
            newNumberFormat = _newNumberFormat;
        }

        return newNumberFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjReformatSubproject construct()
    {
        return new ProjReformatSubproject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@Proj:ReformatSubprojectCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSubProjectId</Name>
				<Source><![CDATA[
    private void processSubProjectId(ProjTable _projTable)
    {
        ProjId projFormat = subStr(_projTable.ProjId,
                    strLen(_projTable.ParentId) + 1,
                    (strLen(_projTable.ProjId) - strLen(_projTable.ParentId) + 1));

        int subprojectNumber =  NumberSeq::numRemoveFormat(projFormat, _projTable.Format);

        ProjId parent = _projTable.ParentId;
        if (oldToNewProjectMap.exists(parent))
        {
            parent = oldToNewProjectMap.lookup(parent);
        }

        ProjId newSubprojectNumber = parent + NumberSeq::numInsertFormat(subprojectNumber, newNumberFormat);

        // Skip projects with same newly calculated subproject number to avoid error during update
        if (newProjectIdList.in(newSubprojectNumber))
        {
            this.addInvalidProject(_projTable);
            
            // Display a yelllow infobar warning for project skipped. This will be logged in the infolog only as we cannot block the entire process.
            // Project %1 was not updated, as the new Project ID %2 was already taken by another record.
            str warningMsg = strFmt("@Proj:NewProjIdTaken", _projTable.ProjId, newSubprojectNumber);
            warning(warningMsg);
        }
        else
        {
            oldToNewProjectMap.insert(_projTable.ProjId, newSubprojectNumber);
            newProjectIdList.add(newSubprojectNumber);

            _projTable.ProjId = newSubprojectNumber;

            // Both methods must be called even though there is no super() being wrapped in order to get all telemetry and update the records
            DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(_projTable, _projTable.orig());
            rename.syncRenamedValuePreSuper();
            rename.syncRenamedValuePostSuper();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>