<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubLedgerJournalTransferUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubLedgerJournalTransferUIBuilder</c> class builds the user interface required by the
/// <c>SubLedgerJournalTransferController</c> class.
/// </summary>
public class SubLedgerJournalTransferUIBuilder extends SysOperationAutomaticUIBuilder
{
    FormBuildStringControl              fiscalYearNameControl;
    FormBuildStringControl              fiscalPeriodNameControl;
    FormBuildStringControl              sourceDocumentTypeControl;
    SourceDocumentTmpTypeInformation    sourceDocumentTmpTypeInformation;

    #define.FiscalYearControlName('Fld2_1')
    #define.FiscalPeriodControlName('Fld3_1')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the UI for a related controller class.
    /// </summary>
    public void build()
    {
        DialogField                     dialogField;
        SubledgerJournalTransferRequest dataContract;
        container                       fiscalPeriod;
        #define.lookupAlways(2)

        dialog = this.dialog();
        dataContract = this.dataContractObject();
        fiscalPeriod = dataContract.getFiscalCalendarYearPeriod();

        sourceDocumentTmpTypeInformation = SourceDocumentType::getSourceDocumentTypeInformation(classId2Name(classIdGet(this)));

        // add row for "All" source document types
        sourceDocumentTmpTypeInformation.SourceRelationType = 0;
        sourceDocumentTmpTypeInformation.EnumId = 0;
        sourceDocumentTmpTypeInformation.EnumTranslatedName = "@SYS324817";
        sourceDocumentTmpTypeInformation.ClassId = classNum(SourceDocument);
        sourceDocumentTmpTypeInformation.insert();

        // Add source document type control
        dialogField = dialog.addField(extendedtypestr(enumName),"@SourceDocumentation:SourceDocumentType","@SYS317488");
        sourceDocumentTypeControl = dialogField.fieldControl();
        sourceDocumentTypeControl.lookupButton(#lookupAlways);

        // Add fiscal year name control
        dialogField = dialog.addField(extendedtypestr(FiscalYearName),"@SYS127885","@SYS317506");
        fiscalYearNameControl = dialogField.fieldControl();
        fiscalYearNameControl.lookupButton(#lookupAlways);
        fiscalYearNameControl.text(conpeek(fiscalPeriod,1));

        // Add fiscal period name control
        dialogField = dialog.addField(extendedtypestr(PeriodName),"@SYS127887","@SYS317507");
        fiscalPeriodNameControl = dialogField.fieldControl();
        fiscalPeriodNameControl.lookupButton(#lookupAlways);
        fiscalPeriodNameControl.text(conpeek(fiscalPeriod,2));
        fiscalPeriodNameControl.allowEdit(conpeek(fiscalPeriod,1) != '' ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalPeriodNameControlLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the lookup for the fiscal period name.
    /// </summary>
    /// <param name="_periodNameControl">
    /// The control behind the dialog field that is looked up.
    /// </param>
    public void  fiscalPeriodNameControlLookup(FormStringControl _periodNameControl)
    {
        FormStringControl           periodNameControl;
        FormStringControl           yearNameControl;
        SysOperationDialog          dlg;
        FormRun                     formRun;

        SysTableLookup              tableLookup;
        QueryBuildDataSource        qbd;
        Query                       query = new Query();

        periodNameControl = _periodNameControl;
        dlg = this.dialog();
        formRun = dlg.formRun();
        yearNameControl = dlg.dialogForm().runControl(#FiscalYearControlName);

        tableLookup = SysTableLookup::newParameters(tablenum(FiscalCalendarPeriod),periodNameControl);
        tableLookup.addLookupfield(fieldnum(FiscalCalendarPeriod,Name),true);
        tableLookup.addLookupfield(fieldnum(FiscalCalendarPeriod,EndDate));

        qbd = query.addDataSource(tablenum(FiscalCalendarPeriod));
        qbd = qbd.addDataSource(tablenum(FiscalCalendarYear));
        qbd.addRange(fieldnum(FiscalCalendarYear,Name)).value(yearNameControl.valueStr());
        qbd.relations(true);
        qbd.joinMode(JoinMode::InnerJoin);

        qbd = qbd.addDataSource(tablenum(Ledger));
        qbd.addRange(fieldnum(Ledger,RecId)).value(queryValue(Ledger::current()));
        qbd.addLink(fieldnum(FiscalCalendarYear,FiscalCalendar),fieldnum(Ledger,FiscalCalendar));
        qbd.joinMode(JoinMode::InnerJoin);

        tableLookup.parmQuery(query);
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalPeriodNameControlValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the fiscal period name.
    /// </summary>
    /// <param name="_periodNameControl">
    /// The control behind the dialog field that is changed.
    /// </param>
    /// <returns>
    /// true if the fiscal period name is correct; otherwise, false.
    /// </returns>
    public boolean fiscalPeriodNameControlValidate(FormStringControl _periodNameControl)
    {
        boolean                     isValid;
        FiscalCalendarYear          fyear;
        FiscalCalendarPeriod        fperiod;
        Ledger                      ledger;
        CompanyInfo                 companyInfo;
        FormStringControl           periodNameControl;
        FormStringControl           yearNameControl;
        SysOperationDialog          dlg;
        FormRun                     formRun;

        periodNameControl =  _periodNameControl;
        isValid = periodNameControl.validate();
        if (isValid && periodNameControl.text())
        {
            dlg = this.dialog();
            formRun = dlg.formRun();

            yearNameControl = dlg.dialogForm().runControl(#FiscalYearControlName);
            select DataArea,RecId from companyInfo
                    where companyInfo.DataArea == curext()
                join FiscalCalendar,PrimaryForLegalEntity from ledger
                    where ledger.PrimaryForLegalEntity == companyInfo.RecId
                join RecId,FiscalCalendar,Name from fyear
                    where fyear.FiscalCalendar == ledger.FiscalCalendar &&
                          fyear.Name == yearNameControl.text()
                join FiscalCalendarYear,Name,RecId from fperiod
                    where fperiod.FiscalCalendarYear == fyear.RecId &&
                          fperiod.Name == periodNameControl.text();

            // The value '%1' in field '%2' is not found in relating table '%3'.
            isValid = fperiod.RecId ? true : checkFailed(strfmt("@SYS112224",periodNameControl.text(),periodNameControl.label(),tablepname(FiscalCalendarPeriod)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalYearNameControlLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the lookup for the fiscal year name.
    /// </summary>
    /// <param name="_yearNameControl">
    /// The control behind the dialog field that is looked up.
    /// </param>
    public void  fiscalYearNameControlLookup(FormStringControl _yearNameControl)
    {
        FormStringControl       yearNameControl;
        SysTableLookup          tableLookup;
        QueryBuildDataSource    qbd;
        Query                   query = new Query();

        yearNameControl = _yearNameControl;
        tableLookup = SysTableLookup::newParameters(tablenum(FiscalCalendarYear),yearNameControl);
        tableLookup.addLookupfield(fieldnum(FiscalCalendarYear,Name),true);
        tableLookup.addLookupfield(fieldnum(FiscalCalendarYear,EndDate));

        qbd = query.addDataSource(tablenum(FiscalCalendarYear));
        qbd = qbd.addDataSource(tablenum(FiscalCalendar));
        qbd.relations(true);
        qbd.joinMode(JoinMode::ExistsJoin);
        qbd = qbd.addDataSource(tablenum(Ledger));
        qbd.addRange(fieldnum(Ledger,RecId)).value(int642str(Ledger::current()));
        qbd.relations(true);
        qbd.joinMode(JoinMode::ExistsJoin);
        tableLookup.parmQuery(query);
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalYearNameControlModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the fiscal year name modified event executes correctly.
    /// </summary>
    /// <param name="_yearNameControl">
    /// The control behind the dialog field that is changed.
    /// </param>
    /// <returns>
    /// true if the fiscal year name modified event executed correctly; otherwise, false.
    /// </returns>
    public boolean fiscalYearNameControlModified(FormStringControl _yearNameControl)
    {
        FormStringControl   yearNameControl;
        FormStringControl   periodNameControl;
        SysOperationDialog  dlg;
        FormRun             formRun;
        boolean             isValid;

        yearNameControl = _yearNameControl;

        isValid = yearNameControl.modified();

        if (isValid)
        {
            dlg = this.dialog();
            formRun = dlg.formRun();

            periodNameControl = dlg.dialogForm().runControl(#FiscalPeriodControlName);
            periodNameControl.allowEdit(yearNameControl.valueStr() ? true : false);
            periodNameControl.text('');
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalYearNameControlValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the fiscal year name.
    /// </summary>
    /// <param name="_yearNameControl">
    /// The control behind the dialog field that is changed.
    /// </param>
    /// <returns>
    /// true if the fiscal year name is correct; otherwise, false.
    /// </returns>
    public boolean fiscalYearNameControlValidate(FormStringControl _yearNameControl)
    {
        boolean                     isValid;
        FormStringControl           yearNameControl;
        FiscalCalendarYear          fyear;
        Ledger                      ledger;
        CompanyInfo                 companyInfo;

        yearNameControl = _yearNameControl;
        isValid = yearNameControl.validate();
        if (isValid && yearNameControl.text())
        {
            select DataArea,RecId from companyInfo
                    where companyInfo.DataArea == curext()
                join PrimaryForLegalEntity,FiscalCalendar from ledger
                    where ledger.PrimaryForLegalEntity == companyInfo.RecId
                join FiscalCalendar,Name,RecId from fyear
                    where fyear.FiscalCalendar == ledger.FiscalCalendar &&
                          fyear.Name == yearNameControl.text();

            // The value '%1' in field '%2' is not found in relating table '%3'.
            isValid = fyear.RecId ? true : checkFailed(strfmt("@SYS112224",yearNameControl.text(),yearNameControl.label(),tablepname(FiscalCalendarYear)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to capture dialog events.
    /// </summary>
    public void postRun()
    {
        super();

        dialog.dialogForm().formRun().controlMethodOverload(false);

        fiscalYearNameControl.registerOverrideMethod(methodstr(FormStringControl, modified), methodstr(SubLedgerJournalTransferUIBuilder, fiscalYearNameControlModified), this);
        fiscalYearNameControl.registerOverrideMethod(methodstr(FormStringControl, validate), methodstr(SubLedgerJournalTransferUIBuilder, fiscalYearNameControlValidate), this);
        fiscalYearNameControl.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(SubLedgerJournalTransferUIBuilder, fiscalYearNameControlLookup), this);
        fiscalPeriodNameControl.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(SubLedgerJournalTransferUIBuilder, fiscalPeriodNameControlLookup), this);
        fiscalPeriodNameControl.registerOverrideMethod(methodstr(FormStringControl, validate), methodstr(SubLedgerJournalTransferUIBuilder, fiscalPeriodNameControlValidate), this);
        sourceDocumentTypeControl.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(SubLedgerJournalTransferUIBuilder, sourceDocumentTypeControlLookup), this);
        sourceDocumentTypeControl.registerOverrideMethod(methodstr(FormStringControl, validate), methodstr(SubLedgerJournalTransferUIBuilder, sourceDocumentTypeControlValidate), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentTypeControlLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a lookup for the source document type.
    /// </summary>
    /// <param name="_sourceDocumentTypeControl">
    /// The control that is behind the looked up dialog field.
    /// </param>
    public void  sourceDocumentTypeControlLookup(FormStringControl _sourceDocumentTypeControl)
    {
        FormStringControl       sourceDocumentType;
        SysTableLookup          tableLookup;
        Query                   query;

        // create query to order by SourceRelationType so that "All" record appears first in lookup list
        query = new query();
        query.addDataSource(tableNum(SourceDocumentTmpTypeInformation));
        query.dataSourceTable(tableNum(SourceDocumentTmpTypeInformation)).addOrderByField(fieldnum(SourceDocumentTmpTypeInformation, SourceRelationType), SortOrder::Ascending);

        sourceDocumentType = _sourceDocumentTypeControl;
        tableLookup = SysTableLookup::newParameters(tablenum(SourceDocumentTmpTypeInformation), sourceDocumentType);
        tableLookup.addLookupfield(fieldnum(SourceDocumentTmpTypeInformation, EnumTranslatedName),true);
        tableLookup.parmTmpBuffer(sourceDocumentTmpTypeInformation);
        tableLookup.parmQuery(query);
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentTypeControlValidate</Name>
				<Source><![CDATA[
    public boolean  sourceDocumentTypeControlValidate(FormStringControl _sourceDocumentTypeControl)
    {
        SourceDocumentTmpTypeInformation    localSourceDocumentTmpTypeInformation;
        boolean                             isValid;
        str                                 sourceDocumentTypeEnumText;

        isValid = true;

        sourceDocumentTypeEnumText = _sourceDocumentTypeControl.text();

        if (isValid && sourceDocumentTypeEnumText && sourceDocumentTypeEnumText != "@SYS324817")
        {
            localSourceDocumentTmpTypeInformation = SourceDocumentType::getSourceDocumentTypeInformation(classId2Name(classIdGet(this)));

            select RecId from localSourceDocumentTmpTypeInformation
                    where localSourceDocumentTmpTypeInformation.EnumTranslatedName == _sourceDocumentTypeControl.text();

            isValid = localSourceDocumentTmpTypeInformation.RecId ? true : checkFailed("@SYS344782");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>