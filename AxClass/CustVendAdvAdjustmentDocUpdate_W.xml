<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAdvAdjustmentDocUpdate_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The class <c>CustVendAdvAdjustmentDocUpdate_W</c> is used to update document(invoice, facture) when processing advance adjustments.
/// </summary>
class CustVendAdvAdjustmentDocUpdate_W
{
    Map             factureJourMap;
    Map             itemMarkupMap;
    Map             reversedAmountsMap;
    TransDate       transDate;
    Set             reversedFactureJourSet;
    CustVendTrans   exchRateTrans;
    TransDate       reversedSettlementDate;
    Voucher         reversedVoucher;
    Set             deletedFactureTransSet;  //list of facture lines deleted when reversing settlement.
    boolean         isReversal;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFactureJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates part of advance adjustment facture related to <c>FactureTrans_RU</c> record(invoice line) being processed.
    /// </summary>
    /// <param name="_exchRateTrans">
    ///   The customer or vendor transaction related to exchange rate adjustment.
    /// </param>
    /// <param name="_transRecId">
    ///   Invoice transaction record id.
    /// </param>
    /// <param name="_offsetRecId">
    ///   Payment transaction record id.
    /// </param>
    /// <param name="_factureTrans">
    ///   <c>FactureTrans_RU</c> record being processed.
    /// </param>
    /// <param name="_lineAmountMST">
    ///   Amount at which line must be created.
    /// </param>
    /// <param name="_taxAmountMST">
    ///   Tax amount at which line must be created.
    /// </param>
    /// <param name="_exchRate">
    ///   Exchange rate.
    /// </param>
    /// <remarks>
    ///   Customer transaction has related invoice. This invoice is being processed line by line. The reason for this is that invoice lines may belong to several factures and each of them must be processed.
    /// When transactions settled, new revision facture created which references original invoice facture and its number stored at map, so when another line from the same original facture processed lines added to this facture.
    /// When transaction settlement reversed(it can be determined by the fact that reversedFactureJourSet object initialized), first it checks that facture has not been marked as reversed. If this was done - processing ends,
    /// otherwise it treated like that invoice facture already contains advance adjustment, so it must be reversed by creating revision on it.
    /// In case of settlement reversal when the date of settlement equal to reversal date and no further revisions exists, the system tries to delete facture. If that was successful, references to original facture from deleted facture stored at
    /// deletedFactureTransSet. If line present there, it means that adjustment facture has already been deleted when processing previous line from it.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///  In case when prepayment and invoice being settled at the same tax report period, error is displayed. Invoice facture must be manually deleted, then settlement done, and new invoice facture be manually generated.
    /// </exception>
    private void createFactureJour(CustVendTrans   _exchRateTrans,
                                   RefRecId        _transRecId,
                                   RefRecId        _offsetRecId,
                                   FactureTrans_RU _factureTrans,
                                   AmountMST       _lineAmountMST,
                                   AmountMST       _taxAmountMST,
                                   ExchRate        _exchRate)
    {
        FactureJourCreateAdvAdjCor_RU  factureJourCreate;
        FactureTransCreateAdvAdjCor_RU factureTransCreate;
        FactureJour_RU                 factureJour;
        TransDate                      bookPeriodStart, bookPeriodStartFacture;
        FactureTrans_RU                factureTransAdvAdjustment;
        SetEnumerator                  reversedFactureJourSetEnumerator;
        FactureId_RU                   factureId;
        FactureModule_RU               factureModule;

        factureJour = FactureJour_RU::find(_factureTrans.FactureId, _factureTrans.Module);

        if (! factureJour)
        {
            return;
        }

        if (reversedFactureJourSet) //if reversal
        {
            //Code kept only for VATAdjustment factures
            reversedFactureJourSetEnumerator = reversedFactureJourSet.getEnumerator();
            while (reversedFactureJourSetEnumerator.moveNext())
            {
                [factureId, factureModule] = reversedFactureJourSetEnumerator.current();

                select firstonly FactureId, Module from factureTransAdvAdjustment
                    where factureTransAdvAdjustment.InvoiceLineNum      == _factureTrans.InvoiceLineNum      &&
                          factureTransAdvAdjustment.InternalInvoiceId   == _factureTrans.InternalInvoiceId   &&
                          factureTransAdvAdjustment.InvoiceDate         == _factureTrans.InvoiceDate         &&
                          factureTransAdvAdjustment.InvoiceId           == _factureTrans.InvoiceId           &&
                          factureTransAdvAdjustment.SalesPurchId        == _factureTrans.SalesPurchId        &&
                          factureTransAdvAdjustment.NumberSequenceGroup == _factureTrans.NumberSequenceGroup &&
                          factureTransAdvAdjustment.FactureId           == factureId                         &&
                          factureTransAdvAdjustment.Module              == factureModule                     &&
                          factureTransAdvAdjustment.FactureLineType     == FactureLineType_RU::AdvanceAdjustment;
                if (factureTransAdvAdjustment)
                {
                    return;
                }
            }

            //if facture has already been deleted when processing previous line
            if (deletedFactureTransSet &&
                deletedFactureTransSet.in(_factureTrans.RecId))
            {
                return;
            }

            this.deleteAdvAdjFactures(factureJour.RecId);

            //if facture has been deleted when processing current line
            if (deletedFactureTransSet.in(_factureTrans.RecId))
            {
                return;
            }
        }

        if (! factureJourMap.exists(factureJour.RecId))
        {
            [bookPeriodStartFacture] = TaxReportPeriod::datePeriodPurchSalesBook_RU(factureJour.FactureDate);
            [bookPeriodStart]        = TaxReportPeriod::datePeriodPurchSalesBook_RU(transDate);

            if (bookPeriodStartFacture != bookPeriodStart)
            {
                if (factureJour.VATOnPayment)
                {
                    return;
                }

                factureJourCreate = FactureJourCreateAdvAdjCor_RU::construct(_exchRateTrans, _factureTrans, _transRecId, _offsetRecId);
                factureJourCreate.initParameters(NoYes::Yes,
                                                 NoYes::No,
                                                 Printout::After,
                                                 NoYes::Yes,
                                                 factureJour.FactureExternalId,
                                                 _exchRateTrans.TransDate,
                                                 factureJour.CustVendInvoiceAccount,
                                                 factureJour.CurrencyCode,
                                                 FactureType_RU::AdvanceAdjustment);
                factureJourCreate.parmIsReversal(isReversal);
                factureJourCreate.parmReversedVoucher(reversedVoucher);
                factureJourCreate.runOperation();

                factureJourMap.insert(factureJour.RecId, factureJourCreate);
            }
            else
            {
                throw error("@GLS112749");
            }
        }

        factureJourCreate = factureJourMap.lookup(factureJour.RecId);

        factureTransCreate = FactureTransCreateAdvAdjCor_RU::construct(factureJourCreate,
                                                                       _factureTrans,
                                                                       _lineAmountMST,
                                                                       _taxAmountMST,
                                                                       _exchRate);
        factureTransCreate.createTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        itemMarkupMap      = new Map(typeName2Type(extendedtypestr(recId)), Types::Container);
        factureJourMap     = new Map(typeName2Type(extendedtypestr(recId)), Types::Class);
        reversedAmountsMap = new Map(typeName2Type(extendedtypestr(recId)), Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRateTrans</Name>
				<Source><![CDATA[
    public CustVendTrans parmExchRateTrans(CustVendTrans _exchRateTrans = exchRateTrans)
    {
        exchRateTrans = _exchRateTrans;
        return exchRateTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversedFactureJourSet</Name>
				<Source><![CDATA[
    public Set parmReversedFactureJourSet(Set _reversedFactureJourSet = reversedFactureJourSet)
    {
        reversedFactureJourSet = _reversedFactureJourSet;
        return reversedFactureJourSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendInvoiceJour</Name>
				<Source><![CDATA[
    public void updateCustVendInvoiceJour(CustVendInvoiceJour _custVendInvoiceJour,
                                          ExchRate            _exchRate,
                                          AmountMST           _totalAmountMST    = 0,
                                          AmountMST           _totalTaxAmountMST = 0)
    {
        if (_custVendInvoiceJour.TableId == tablenum(CustInvoiceJour))
        {
            CustInvoiceTrans custInvoiceTrans;
            CustInvoiceJour  custInvoiceJour = CustInvoiceJour::findRecId(_custVendInvoiceJour.RecId, true);

            select firstonly custInvoiceTrans
                where custInvoiceTrans.SalesId == custInvoiceJour.SalesId
                && custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId
                && custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate
                && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;

            if (!custInvoiceTrans.isExportTrans_RU())
            {
                custInvoiceJour.InvoiceAmountMST   -= _totalAmountMST;
                custInvoiceJour.SumTaxMST          -= _totalTaxAmountMST;
                custInvoiceJour.SalesBalanceMST    = custInvoiceJour.InvoiceAmountMST - custInvoiceJour.SumTaxMST;
                custInvoiceJour.ExchRate           = _exchRate;
                custInvoiceJour.InvoiceRoundOffMST = CurrencyExchangeHelper::amountCur2MST(custInvoiceJour.InvoiceRoundOff, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate);
                custInvoiceJour.SumMarkupMST       = CurrencyExchangeHelper::amountCur2MST(custInvoiceJour.SumMarkup, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate);
                custInvoiceJour.SumLineDiscMST     = CurrencyExchangeHelper::amountCur2MST(custInvoiceJour.SumLineDisc, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate);
                custInvoiceJour.EndDiscMST         = CurrencyExchangeHelper::amountCur2MST(custInvoiceJour.EndDisc, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate);
                custInvoiceJour.doUpdate();
            }
        }

        if (_custVendInvoiceJour.TableId == tablenum(VendInvoiceJour))
        {
            VendInvoiceJour  vendInvoiceJour = VendInvoiceJour::findRecId(_custVendInvoiceJour.RecId, true);

            vendInvoiceJour.ExchRate = _exchRate;

            vendInvoiceJour.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendInvoiceJourReverse</Name>
				<Source><![CDATA[
    public void updateCustVendInvoiceJourReverse(ModuleCustVend _moduleCustVend,
                                                 RefRecId       _invoiceTransRecId,
                                                 RefRecId       _transRecId,
                                                 RefRecId       _offsetRecId,
                                                 AmountMST      _totalInvoiceAmount,
                                                 AmountMST      _totalTaxAmount)
    {
        CustInvoiceJour         custInvoiceJour;
        VendInvoiceJour         vendInvoiceJour;
        CustInvoiceTrans        custInvoiceTrans;
        CustInvoiceTrans_RU     custInvoiceTrans_RU;
        VendInvoiceTrans        vendInvoiceTrans;
        AmountMST               lineAmountMST, taxAmountMST;
        FactureTrans_RU         factureTrans;
        container               amounts;
        
        const int lineAmountPosition = 1;
        const int taxAmountPosition = 2;

        void updateMarkup(RefTableId _tableId, RefRecId _recId, ExchRate _exchRate)
        {
            MarkupTrans markupTrans;
            int         sign = _moduleCustVend == ModuleCustVend::Cust ? 1 : -1;

            while select forupdate markupTrans
                where markupTrans.TransTableId == _tableId &&
                      markupTrans.TransRecId   == _recId
            {
                if (! reversedAmountsMap.exists(markupTrans.RecId))
                    continue;

                [lineAmountMST, taxAmountMST] = reversedAmountsMap.lookup(markupTrans.RecId);

                markupTrans.CalculatedAmountMST_W -= lineAmountMST * sign;
                markupTrans.TaxAmountMST_W        -= taxAmountMST  * sign;
                markupTrans.TaxAmountVATMST_RU    -= taxAmountMST  * sign;
                markupTrans.TaxAmountExciseMST_RU =  CurrencyExchangeHelper::amountCur2MST(markupTrans.TaxAmountExcise_RU, markupTrans.CurrencyCode, _exchRate);
                markupTrans.doUpdate();

                select firstonly factureTrans
                    where factureTrans.MarkupRefRecId  == markupTrans.RecId &&
                          factureTrans.FactureLineType == FactureLineType_RU::Markup;
                if (factureTrans)
                {
                    this.createFactureJour(exchRateTrans, _transRecId, _offsetRecId, factureTrans, - lineAmountMST * sign, - taxAmountMST * sign, _exchRate);
                }
                else if (markupTrans.ModuleType == MarkupModuleType::Vend)
                {
                    // if there is no factureTrans line for markupTrans this means,
                    // that this markupTrans has been factured to the same line as invoice line
                    itemMarkupMap.insert(markupTrans.TransRecId, [lineAmountMST, taxAmountMST]);
                }
            }
        }

        if (_moduleCustVend == ModuleCustVend::Cust)
        {
            custInvoiceTrans = CustInvoiceTrans::findRecId(_invoiceTransRecId, true);

            custInvoiceJour  = CustInvoiceJour::findFromCustInvoiceTrans(custInvoiceTrans.SalesId,
                                                                         custInvoiceTrans.InvoiceId,
                                                                         custInvoiceTrans.InvoiceDate,
                                                                         custInvoiceTrans.NumberSequenceGroup,
                                                                         true);

            custInvoiceJour.InvoiceAmountMST  += _totalInvoiceAmount + _totalTaxAmount;
            custInvoiceJour.SumTaxMST         += _totalTaxAmount;
            custInvoiceJour.SalesBalanceMST    = custInvoiceJour.InvoiceAmountMST - custInvoiceJour.SumTaxMST;
            custInvoiceJour.ExchRate           = custInvoiceJour.InvoiceAmount                                          ?
                                                 custInvoiceJour.InvoiceAmountMST / custInvoiceJour.InvoiceAmount * 100 :
                                                 100;
            custInvoiceJour.InvoiceRoundOffMST = CurrencyExchangeHelper::amountCur2MST(custInvoiceJour.InvoiceRoundOff, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate);
            custInvoiceJour.SumMarkupMST       = CurrencyExchangeHelper::amountCur2MST(custInvoiceJour.SumMarkup, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate);
            custInvoiceJour.SumLineDiscMST     = CurrencyExchangeHelper::amountCur2MST(custInvoiceJour.SumLineDisc, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate);
            custInvoiceJour.EndDiscMST         = CurrencyExchangeHelper::amountCur2MST(custInvoiceJour.EndDisc, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate);
            custInvoiceJour.doUpdate();

            updateMarkup(custInvoiceJour.TableId, custInvoiceJour.RecId, custInvoiceJour.ExchRate);

            while select forupdate custInvoiceTrans
                where custInvoiceTrans.SalesId             == custInvoiceJour.SalesId             &&
                      custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId           &&
                      custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate         &&
                      custInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup
            {
                if (! reversedAmountsMap.exists(custInvoiceTrans.RecId))
                    continue;

                updateMarkup(custInvoiceTrans.TableId, custInvoiceTrans.RecId, custInvoiceJour.ExchRate);

                [lineAmountMST, taxAmountMST] = reversedAmountsMap.lookup(custInvoiceTrans.RecId);

                custInvoiceTrans.LineAmountMST     += lineAmountMST;
                custInvoiceTrans.TaxAmountMST      += taxAmountMST;

                custInvoiceTrans.LineAmountTaxMST   = CurrencyExchangeHelper::amountCur2MST(custInvoiceTrans.LineAmountTax, custInvoiceTrans.CurrencyCode, custInvoiceJour.ExchRate);
                custInvoiceTrans.CommissAmountMST   = CurrencyExchangeHelper::amountCur2MST(custInvoiceTrans.CommissAmountCur, custInvoiceTrans.CurrencyCode, custInvoiceJour.ExchRate);
                custInvoiceTrans.SumLineDiscMST     = CurrencyExchangeHelper::amountCur2MST(custInvoiceTrans.SumLineDisc, custInvoiceTrans.CurrencyCode, custInvoiceJour.ExchRate);
                custInvoiceTrans_RU = custInvoiceTrans.custInvoiceTrans_RU();
                custInvoiceTrans_RU.vatAmountMST_RU   += taxAmountMST;
                custInvoiceTrans_RU.ExciseAmountMST_RU = CurrencyExchangeHelper::amountCur2MST(custInvoiceTrans_RU.ExciseAmount_RU, custInvoiceTrans.CurrencyCode, custInvoiceJour.ExchRate);
                custInvoiceTrans.packCustInvoiceTrans_RU(custInvoiceTrans_RU);
                custInvoiceTrans.update();

                select firstonly factureTrans
                    where factureTrans.InvoiceLineNum      == custInvoiceTrans.LineNum             &&
                          factureTrans.InvoiceDate         == custInvoiceTrans.InvoiceDate         &&
                          factureTrans.InvoiceId           == custInvoiceTrans.InvoiceId           &&
                          factureTrans.SalesPurchId        == custInvoiceTrans.SalesId             &&
                          factureTrans.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup &&
                          factureTrans.FactureLineType     == FactureLineType_RU::InvoiceLine;

                this.createFactureJour(exchRateTrans, _transRecId, _offsetRecId, factureTrans, - lineAmountMST, - taxAmountMST, custInvoiceJour.ExchRate);
            }
        }
        else
        {
            vendInvoiceTrans = VendInvoiceTrans::findRecId(_invoiceTransRecId, true);

            vendInvoiceJour  = VendInvoiceJour::findFromVendInvoiceTrans(vendInvoiceTrans.PurchID,
                                                                         vendInvoiceTrans.InvoiceId,
                                                                         vendInvoiceTrans.InvoiceDate,
                                                                         vendInvoiceTrans.NumberSequenceGroup,
                                                                         vendInvoiceTrans.InternalInvoiceId,
                                                                         true);

            vendInvoiceJour.ExchRate -= vendInvoiceJour.InvoiceAmount ?
                                        (_totalInvoiceAmount + _totalTaxAmount) / vendInvoiceJour.InvoiceAmount * 100 : 0;
            vendInvoiceJour.doUpdate();

            updateMarkup(vendInvoiceJour.TableId, vendInvoiceJour.RecId, vendInvoiceJour.ExchRate);

            while select forupdate vendInvoiceTrans
                where vendInvoiceTrans.PurchID             == vendInvoiceJour.PurchId             &&
                      vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId           &&
                      vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate         &&
                      vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup &&
                      vendInvoiceTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId
            {
                updateMarkup(vendInvoiceTrans.TableId, vendInvoiceTrans.RecId, vendInvoiceJour.ExchRate);

                [lineAmountMST, taxAmountMST] = reversedAmountsMap.lookup(vendInvoiceTrans.RecId);

                vendInvoiceTrans.LineAmountMST_W += lineAmountMST;
                vendInvoiceTrans.TaxAmountMST_W  += taxAmountMST;
                vendInvoiceTrans.vatAmountMST_RU += taxAmountMST;

                vendInvoiceTrans.ExciseAmountMST_RU = CurrencyExchangeHelper::amountCur2MST(vendInvoiceTrans.ExciseAmount_RU, vendInvoiceTrans.CurrencyCode, vendInvoiceJour.ExchRate);
                vendInvoiceTrans.doUpdate();

                select firstonly factureTrans
                    where factureTrans.InvoiceLineNum      == vendInvoiceTrans.LineNum             &&
                          factureTrans.InternalInvoiceId   == vendInvoiceTrans.InternalInvoiceId   &&
                          factureTrans.InvoiceDate         == vendInvoiceTrans.InvoiceDate         &&
                          factureTrans.InvoiceId           == vendInvoiceTrans.InvoiceId           &&
                          factureTrans.SalesPurchId        == vendInvoiceTrans.PurchID             &&
                          factureTrans.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup &&
                          factureTrans.FactureLineType     == FactureLineType_RU::InvoiceLine;

                if (itemMarkupMap.exists(vendInvoiceTrans.RecId))
                {
                    amounts       =  itemMarkupMap.lookup(vendInvoiceTrans.RecId);
                    lineAmountMST += conpeek(amounts, lineAmountPosition);
                    taxAmountMST  += conpeek(amounts, taxAmountPosition);
                }
                this.createFactureJour(exchRateTrans, _transRecId, _offsetRecId, factureTrans, lineAmountMST, taxAmountMST, vendInvoiceJour.ExchRate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendInvoiceTrans</Name>
				<Source><![CDATA[
    public void updateCustVendInvoiceTrans(CustVendTrans        _exchRateTrans,
                                           RefRecId             _transRecId,
                                           RefRecId             _offsetRecId,
                                           CustVendInvoiceTrans _custVendInvoiceTrans,
                                           ExchRate             _exchRate,
                                           AmountMST            _lineAmountMST = 0,
                                           AmountMST            _taxAmountMST  = 0)
    {
        FactureTrans_RU                 factureTrans;
        AmountMST                       finalLineAmountMST = _lineAmountMST,
                                        finalTaxAmountMST  = _taxAmountMST;

        const int lineAmountPosition = 1;
        const int taxAmountPosition = 2;

        if (_custVendInvoiceTrans.TableId == tablenum(CustInvoiceTrans))
        {
            CustInvoiceTrans custInvoiceTrans = _custVendInvoiceTrans;

            if (!custInvoiceTrans.isExportTrans_RU())
            {
                custInvoiceTrans.LineAmountMST      -= _lineAmountMST;
                custInvoiceTrans.TaxAmountMST       -= _taxAmountMST;

                custInvoiceTrans.LineAmountTaxMST   = CurrencyExchangeHelper::amountCur2MST(custInvoiceTrans.LineAmountTax, custInvoiceTrans.CurrencyCode, _exchRate);
                custInvoiceTrans.CommissAmountMST   = CurrencyExchangeHelper::amountCur2MST(custInvoiceTrans.CommissAmountCur, custInvoiceTrans.CurrencyCode, _exchRate);
                custInvoiceTrans.SumLineDiscMST     = CurrencyExchangeHelper::amountCur2MST(custInvoiceTrans.SumLineDisc, custInvoiceTrans.CurrencyCode, _exchRate);

                CustInvoiceTrans_RU custInvoiceTrans_RU = custInvoiceTrans.custInvoiceTrans_RU();

                custInvoiceTrans_RU.vatAmountMST_RU    -= _taxAmountMST;
                custInvoiceTrans_RU.ExciseAmountMST_RU = CurrencyExchangeHelper::amountCur2MST(custInvoiceTrans_RU.ExciseAmount_RU, custInvoiceTrans.CurrencyCode, _exchRate);
                custInvoiceTrans.packCustInvoiceTrans_RU(custInvoiceTrans_RU);
                custInvoiceTrans.update();

                select firstonly factureTrans
                    where factureTrans.InvoiceLineNum      == custInvoiceTrans.LineNum             &&
                          factureTrans.InvoiceDate         == custInvoiceTrans.InvoiceDate         &&
                          factureTrans.InvoiceId           == custInvoiceTrans.InvoiceId           &&
                          factureTrans.SalesPurchId        == custInvoiceTrans.SalesId             &&
                          factureTrans.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup &&
                          factureTrans.FactureLineType     == FactureLineType_RU::InvoiceLine;
            }
        }

        if (_custVendInvoiceTrans.TableId == tablenum(VendInvoiceTrans))
        {
            VendInvoiceTrans vendInvoiceTrans = _custVendInvoiceTrans;

            vendInvoiceTrans.LineAmountMST_W    += _lineAmountMST;
            vendInvoiceTrans.TaxAmountMST_W     += _taxAmountMST;
            vendInvoiceTrans.vatAmountMST_RU    += _taxAmountMST;
            vendInvoiceTrans.ExciseAmountMST_RU = CurrencyExchangeHelper::amountCur2MST(vendInvoiceTrans.ExciseAmount_RU, vendInvoiceTrans.CurrencyCode, _exchRate);
            vendInvoiceTrans.doUpdate();

            select firstonly factureTrans
                where factureTrans.InvoiceLineNum      == vendInvoiceTrans.LineNum             &&
                      factureTrans.InternalInvoiceId   == vendInvoiceTrans.InternalInvoiceId   &&
                      factureTrans.InvoiceDate         == vendInvoiceTrans.InvoiceDate         &&
                      factureTrans.InvoiceId           == vendInvoiceTrans.InvoiceId           &&
                      factureTrans.SalesPurchId        == vendInvoiceTrans.PurchID             &&
                      factureTrans.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup &&
                      factureTrans.FactureLineType     == FactureLineType_RU::InvoiceLine;

            if (itemMarkupMap.exists(vendInvoiceTrans.RecId))
            {
                container amounts = itemMarkupMap.lookup(vendInvoiceTrans.RecId);

                finalLineAmountMST += conpeek(amounts, lineAmountPosition);
                finalTaxAmountMST  += conpeek(amounts, taxAmountPosition);
            }
        }

        this.createFactureJour(_exchRateTrans, _transRecId, _offsetRecId, factureTrans, finalLineAmountMST, finalTaxAmountMST, _exchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFactureJour</Name>
				<Source><![CDATA[
    public void updateFactureJour(RefRecId _transRecId,
                                  RefRecId _offsetRecId)
    {
        CustVendTransPostingLog_RU postingLog;
        FactureJour_RU             factureJour;
        MapEnumerator              factureJourMapEnumerator = factureJourMap.getEnumerator();
        FactureJourCreate_RU       factureJourCreate;

        while (factureJourMapEnumerator.moveNext())
        {
            factureJourCreate = factureJourMapEnumerator.currentValue();

            factureJour = factureJourCreate.getFactureJour();

            if (! factureJour.PostingLogRecId)
            {
                select firstonly RecId from postingLog
                    where  postingLog.TransDate       == factureJour.FactureDate &&
                           postingLog.Reversed        == NoYes::No               &&
                          ((postingLog.TransRecId     == _transRecId             &&
                            postingLog.OffSetRecId    == _offsetRecId)           ||
                           (postingLog.TransRecId     == _transRecId             &&
                            postingLog.OffSetRecId    == _offsetRecId))          &&
                            postingLog.PostingLogType == CustVendTransPostingLogType_RU::AdvanceAdjustment;

                factureJour.PostingLogRecId = postingLog.RecId;
                factureJour.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkupTrans</Name>
				<Source><![CDATA[
    public void updateMarkupTrans(CustVendTrans _exchRateTrans,
                                  RefRecId      _transRecId,
                                  RefRecId      _offsetRecId,
                                  MarkupTrans   _markupTrans,
                                  ExchRate      _exchRate,
                                  AmountMST     _lineAmountMST = 0,
                                  AmountMST     _taxAmountMST  = 0)
    {
        FactureTrans_RU factureTrans;
        int             sign = _markupTrans.ModuleType == MarkupModuleType::Cust ? 1 : -1;

        _markupTrans.CalculatedAmountMST_W -= _lineAmountMST * sign;
        _markupTrans.TaxAmountMST_W        -= _taxAmountMST  * sign;
        _markupTrans.TaxAmountVATMST_RU    -= _taxAmountMST  * sign;
        _markupTrans.TaxAmountExciseMST_RU = CurrencyExchangeHelper::amountCur2MST(_markupTrans.TaxAmountExcise_RU, _markupTrans.CurrencyCode, _exchRate);
        _markupTrans.doUpdate();

        select firstonly factureTrans
            where factureTrans.MarkupRefRecId  == _markupTrans.RecId &&
                  factureTrans.FactureLineType == FactureLineType_RU::Markup;

        if (factureTrans)
        {
            this.createFactureJour(_exchRateTrans, _transRecId, _offsetRecId, factureTrans, _lineAmountMST, _taxAmountMST, _exchRate);
        }
        else if (_markupTrans.ModuleType == MarkupModuleType::Vend)
        {
            // if there is no factureTrans line for markupTrans this means,
            // that this markupTrans has been factured to the same line as invoice line
            itemMarkupMap.insert(_markupTrans.TransRecId, [_lineAmountMST, _taxAmountMST]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReversedAmountsMap</Name>
				<Source><![CDATA[
    public AmountMST updateReversedAmountsMap(ModuleCustVend             _moduleCustVend,
                                              CustVendTransPostingLog_RU _custVendTransPostingLog,
                                              Amount                     _taxAmountMST)
    {
        AmountMST            postingLogTaxAmount;
        int                  sign = _moduleCustVend == ModuleCustVend::Cust ? 1 : - 1;
        AmountMST            lineAmountMST, taxAmountMST;

        if (reversedAmountsMap.exists(_custVendTransPostingLog.InvoiceTransRecId))
        {
            [lineAmountMST, taxAmountMST] = reversedAmountsMap.lookup(_custVendTransPostingLog.InvoiceTransRecId);
        }

        if (! _custVendTransPostingLog.IsTaxed)
        {
            lineAmountMST += _custVendTransPostingLog.AmountMST * sign;
        }
        else if (_custVendTransPostingLog.IsTaxed && ! _custVendTransPostingLog.AmountMST && ! _custVendTransPostingLog.AmountCur)
        {
            postingLogTaxAmount =  - _taxAmountMST * sign;
            lineAmountMST       -= _taxAmountMST * sign;
        }
        else
        {
            postingLogTaxAmount = 0;
        }

        taxAmountMST += _taxAmountMST * sign;

        reversedAmountsMap.insert(_custVendTransPostingLog.InvoiceTransRecId, [lineAmountMST, taxAmountMST]);

        return _custVendTransPostingLog.IsTaxed ? postingLogTaxAmount : _custVendTransPostingLog.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendAdvAdjustmentDocUpdate_W construct()
    {
        return new CustVendAdvAdjustmentDocUpdate_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReverseSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates new instance of <c>CustVendAdvAdjustmentDocUpdate_W</c> object when reversing settlement and advance adjustment must be processed.
    /// </summary>
    /// <param name="_transDate">
    ///   Reversal date.
    /// </param>
    /// <param name="_reversedFactureJourSet">
    ///   <c>Set</c> object containg list of factures marked as reversed.
    /// </param>
    /// <param name="_exchRateTrans">
    ///   Transaction related to exchange rate adjustment.
    /// </param>
    /// <param name="_reversedSettlementDate">
    ///   Date of settlement being reversed.
    /// </param>
    /// <param name="_reversedVoucher">
    ///   Voucher of settlement being reversed.
    /// </param>
    /// <returns>
    ///   <c>CustVendAdvAdjustmentDocUpdate_W</c> object.
    /// </returns>
    public static CustVendAdvAdjustmentDocUpdate_W newFromReverseSettlement(TransDate     _transDate,
                                                                            Set           _reversedFactureJourSet,
                                                                            CustVendTrans _exchRateTrans,
                                                                            TransDate     _reversedSettlementDate = dateNull(),
                                                                            Voucher       _reversedVoucher = '')

    {
        CustVendAdvAdjustmentDocUpdate_W custVendAdvAdjustmentDocUpdate = CustVendAdvAdjustmentDocUpdate_W::construct();

        custVendAdvAdjustmentDocUpdate.parmTransDate(_transDate);
        custVendAdvAdjustmentDocUpdate.parmReversedFactureJourSet(_reversedFactureJourSet);
        custVendAdvAdjustmentDocUpdate.parmExchRateTrans(_exchRateTrans);
        custVendAdvAdjustmentDocUpdate.parmReversedSettlementDate(_reversedSettlementDate);
        custVendAdvAdjustmentDocUpdate.parmReversedVoucher(_reversedVoucher);
        custVendAdvAdjustmentDocUpdate.parmIsReversal(true);

        return custVendAdvAdjustmentDocUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSettlement</Name>
				<Source><![CDATA[
    public static CustVendAdvAdjustmentDocUpdate_W newFromSettlement(TransDate _transDate)
    {
        CustVendAdvAdjustmentDocUpdate_W custVendAdvAdjustmentDocUpdate = CustVendAdvAdjustmentDocUpdate_W::construct();

        custVendAdvAdjustmentDocUpdate.parmTransDate(_transDate);

        return custVendAdvAdjustmentDocUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAdvAdjFactures</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Deletes advance adjustment factures when reversing settlement.
    /// </summary>
    /// <param name="_factureJourRecId">
    ///   The record id of original facture being processed.
    /// </param>
    /// <remarks>
    ///  The deletion can only be done if settlment reversed on the same date it was done and no revisions has been made.
    /// </remarks>
    private void deleteAdvAdjFactures(RefRecId _factureJourRecId)
    {
        FactureJour_RU  factureJour;
        FactureTrans_RU factureTrans;
        FactureJourCreate_RU factureJourCreate;
        RefRecId        factureRecIdCreated;

        if (!deletedFactureTransSet)
        {
            deletedFactureTransSet = new Set(Types::Int64);
        }

        if (TaxReportPeriod::datePeriodPurchSalesBook_RU(transDate) == TaxReportPeriod::datePeriodPurchSalesBook_RU(reversedSettlementDate))
        {
            if (factureJourMap && factureJourMap.exists(_factureJourRecId))
            {
                factureJourCreate = factureJourMap.lookup(_factureJourRecId);
                factureRecIdCreated = factureJourCreate.getFactureJour().RecId;
            }

            while select forUpdate factureJour
                where factureJour.Voucher      == reversedVoucher
                    && factureJour.FactureDate  == reversedSettlementDate
                    && factureJour.Reversed     == NoYes::No
                    && factureJour.Revised      == NoYes::No
                    && factureJour.FactureType  == FactureType_RU::AdvanceAdjustment
                    && (!factureRecIdCreated || factureJour.RecId != factureRecIdCreated)
            {
                while select RefCorrectedFactureTrans from factureTrans
                    where factureTrans.FactureId == factureJour.FactureId
                        && factureTrans.Module   == factureJour.Module
                {
                    deletedFactureTransSet.add(factureTrans.RefCorrectedFactureTrans);
                }

                FactureDelete_RU::construct(factureJour).runOperation();
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReversal</Name>
				<Source><![CDATA[
    public boolean parmIsReversal(boolean _isReversal = isReversal)
    {
        isReversal = _isReversal;
        return isReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversedSettlementDate</Name>
				<Source><![CDATA[
    public TransDate parmReversedSettlementDate(TransDate _reversedSettlementDate = reversedSettlementDate)
    {
        reversedSettlementDate = _reversedSettlementDate;
        return reversedSettlementDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversedVoucher</Name>
				<Source><![CDATA[
    public Voucher parmReversedVoucher(Voucher _reversedVoucher = reversedVoucher)
    {
        reversedVoucher = _reversedVoucher;
        return reversedVoucher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>