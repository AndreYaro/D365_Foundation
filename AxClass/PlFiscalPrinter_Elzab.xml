<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlFiscalPrinter_Elzab</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class PlFiscalPrinter_Elzab extends PlFiscalPrinterHandling
{
    DLL printer;

    DLLFunction     errMessage;

    DLLFunction     communicationInit;
    DLLFunction     communicationEnd;

    DLLFunction     receiptBegin;
    DLLFunction     receiptItem;
    DLLFunction     receiptEnd;
    DLLFunction     receiptCancel;
    int             lastErrNo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelTransaction</Name>
				<Source><![CDATA[
    public boolean cancelTransaction(container _p1 = [''])
    {
        lastErrNo = this.receiptCancel();
        return !lastErrNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>communicationEnd</Name>
				<Source><![CDATA[

    private int communicationEnd()
    {
        return communicationEnd.call();
    }

]]></Source>
			</Method>
			<Method>
				<Name>communicationInit</Name>
				<Source><![CDATA[

    #define.SpeedBps(9600)
    #define.TimeOut(5)
    private int communicationInit(PlFiscalPortNo portNo, int speed = #SpeedBps, int timeOut = #TimeOut)
    {
        return communicationInit.call(portNo, speed, timeOut);
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmation</Name>
				<Source><![CDATA[

    public boolean confirmation(container _p1 = [''])
    {
        lastErrNo = this.receiptEnd(conpeek(_p1,1));
        if (lastErrNo)
            this.errMesssage();
        return !lastErrNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>connect</Name>
				<Source><![CDATA[

    public boolean connect(container _p1 = [''])
    {
        lastErrNo = this.communicationInit(conpeek(_p1,1));
        if (lastErrNo)
            this.errMesssage();
        return !lastErrNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertWin2Maz</Name>
				<Source><![CDATA[

    public str convertWin2Maz(str name)
    {
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disconect</Name>
				<Source><![CDATA[

    public boolean disconect(container _p1 = [''])
    {
        lastErrNo = this.communicationEnd();
        if (lastErrNo)
            this.errMesssage();
        return !lastErrNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentHeader</Name>
				<Source><![CDATA[

    public boolean documentHeader(container _p1 = [''])
    {
        lastErrNo = this.receiptBegin();
        if (lastErrNo)
            this.errMesssage();
        return !lastErrNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentLine</Name>
				<Source><![CDATA[

    #define.ConPos2(2)
    #define.ConPos3(3)
    #define.ConPos4(4)
    #define.ConPos5(5)
    #define.10(10)
    public boolean documentLine(
        container             _p1,
        PlFiscalDocumentTrans _trans)
    {
        ;
        if (_trans.qty_W())
        {
            lastErrNo = this.receiptItem(_trans.qty_W() < 0 ? 0 : 1,
                                         conpeek(_p1, #ConPos2),
                                         this.taxNum(conpeek(_p1, #ConPos4)),
                                         0,
                                         real2int(abs(str2num(conpeek(_p1, #ConPos3)) * power(#10, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(_trans.unit_W()))))),
                                         UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(_trans.unit_W())),
                                         _trans.unit_W(),
                                         conpeek(_p1, #ConPos5) * 100,
                                         0);
            if (lastErrNo)
            {
                this.errMesssage();
            }

            return !lastErrNo;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errMesssage</Name>
				<Source><![CDATA[

    #define.BufferSize(255)
    private str errMesssage(int errNo = lastErrNo)
    {
        Binary mess = new Binary(#BufferSize);
        ;
        if (!errMessage.call(errNo, mess))
        {
            if (mess.string(0))
            {
                this.communicationEnd();
                throw error(mess.string(0));
            }
            return mess.string(0);
        }
        else
            return "@SYS57892";
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorTxt</Name>
				<Source><![CDATA[

    public str errorTxt(container _p1 = [''])
    {
        return this.errMesssage(conpeek(_p1,1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalize</Name>
				<Source><![CDATA[

    public void finalize()
    {
        printer.finalize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isError</Name>
				<Source><![CDATA[

    public boolean isError()
    {
        return lastErrNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>libraryOk</Name>
				<Source><![CDATA[

    public boolean libraryOk()
    {
        if (!printer)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[

    #define.DLLPrinter("elzabdr")
    #define.DLLFunctionErrorMsg("pErrMessage")
    #define.DLLFunctionCommunicationInit("CommunicationInit")
    #define.DLLFunctionCommunicationEnd("CommunicationEnd")
    #define.DLLFunctionReceiptBegin("ReceiptBegin")
    #define.DLLFunctionReceiptItem("pReceiptItem")
    #define.DLLFunctionReceiptEnd("ReceiptEnd")
    #define.DLLFunctionReceiptCancel("ReceiptCancel")
    public void new()
    {
        super();
        try
        {
            printer = new DLL(#DLLPrinter);
        }
        catch(Exception::Internal)
        {
            infolog.clear(0);
            return;
        }

        errMessage          = new DLLFunction(printer, #DLLFunctionErrorMsg);
        errMessage.arg(ExtTypes::DWord,
                       ExtTypes::Pointer);

        communicationInit   = new DLLFunction(printer, #DLLFunctionCommunicationInit);
        communicationInit.arg(ExtTypes::DWord,
                              ExtTypes::DWord,
                              ExtTypes::DWord);
        communicationInit.returns(ExtTypes::DWord);

        communicationEnd    = new DLLFunction(printer,#DLLFunctionCommunicationEnd);
        communicationEnd.returns(ExtTypes::DWord);

        receiptBegin        = new DLLFunction(printer, #DLLFunctionReceiptBegin);
        receiptBegin.returns(ExtTypes::DWord);

        receiptItem         = new DLLFunction(printer, #DLLFunctionReceiptItem);
        receiptItem.arg(ExtTypes::DWord,
                        ExtTypes::Pointer,
                        ExtTypes::DWord,
                        ExtTypes::DWord,
                        ExtTypes::DWord,
                        ExtTypes::DWord,
                        ExtTypes::Pointer,
                        ExtTypes::DWord,
                        ExtTypes::Pointer);
        receiptItem.returns(ExtTypes::DWord);

        receiptEnd          = new DLLFunction(printer, #DLLFunctionReceiptEnd);
        receiptEnd.arg(ExtTypes::DWord);
        receiptEnd.returns(ExtTypes::DWord);

        receiptCancel       = new DLLFunction(printer, #DLLFunctionReceiptCancel);
        receiptCancel.returns(ExtTypes::DWord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptBegin</Name>
				<Source><![CDATA[

    private int receiptBegin()
    {
        return receiptBegin.call();
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptCancel</Name>
				<Source><![CDATA[

    private int receiptCancel()
    {
        return receiptCancel.call();
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptEnd</Name>
				<Source><![CDATA[

    private int receiptEnd(int  disc)
    {
        return receiptEnd.call(disc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptItem</Name>
				<Source><![CDATA[

    #define.NameLength(28)
    #define.UnitLength(4)
    private int receiptItem(int     _sales,
                            str #NameLength  _name,
                            int     _taxCode,
                            int     _message,
                            int     _qty,
                            int     _precision,
                            str #UnitLength   _unit,
                            int     _price,
                            int     _lineAmount)
    {
        str #NameLength name = _name;
        Binary b1;
        Binary b2;
        Binary b3 = new Binary(#UnitLength);
        ;
        name +=strrep("@GLS102908",#NameLength);
        name = substr(name,1,#NameLength);
        b1 = new Binary(strlen(name)+1);
        b2 = new Binary(strlen(_unit)+1);
        b1.string(0,name);
        b2.string(0,_unit);
        b3.dWord(0,_lineAmount);

        return receiptItem.call(_sales, b1, _taxCode, _message, _qty, _precision, b2, _price, b3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxNum</Name>
				<Source><![CDATA[

    #Characters
    #define.1(1)
    #define.2(2)
    #define.3(3)
    #define.4(4)
    #define.5(5)
    #define.6(6)
    #define.7(7)
    #define.8(8)
    #define.9(9)
    #define.10(10)
    private int taxNum(str 1 _ftc)
    {
        switch (_ftc)
        {
            case #capitalA : return #1;
            case #capitalB : return #2;
            case #capitalC : return #3;
            case #capitalD : return #4;
            case #capitalE : return #5;
            case #capitalF : return #6;
            case #capitalG : return #7;
            case #capitalH : return #8;
            case #capitalI : return #9;
            case #capitalJ : return #10;
        }
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>