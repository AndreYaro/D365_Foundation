<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadLineUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLoadLineUpdater</c> class is used to update <c>WHSLoadLine</c> lines.
/// </summary>
class WHSLoadLineUpdater
{
    InventTransId       inventTransId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSplitLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new load lines based on the inventory transaction dimensions and quantities, and delete
    /// the old load line.
    /// </summary>
    /// <param name="_oldInventDimId">
    /// The old inventory dimension value of the load line being split.
    /// </param>
    /// <param name="_mapInventTransDimIdAndQty">
    /// A map containing the <c>InventDimId</c> and quantity values of the new load lines.
    /// </param>
    /// <param name="_loadId">
    /// The load Id, used to search a specific load.
    /// </param>
    public void createSplitLoadLines(
        InventDimId _oldInventDimId,
        Map         _mapInventTransDimIdAndQty,
        WHSLoadId   _loadId = '')
    {
        WHSLoadLine             curLoadLine;
        WHSLoadLine             newLoadLine;
        MapEnumerator           meInventTrans = _mapInventTransDimIdAndQty.getEnumerator();

        ttsBegin;

        // Should be updating a single load line.
        select firstOnly forUpdate curLoadLine
            where curLoadLine.InventTransId == inventTransId
                && curLoadLine.InventDimId  == _oldInventDimId
                && (!_loadId
                ||  curLoadLine.LoadId      == _loadId);

        InventTable inventTable = InventTable::find(curLoadLine.ItemId);
        InventHandlingUnitId inventHandlingUnit = WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId);

        if (curLoadLine)
        {
            Common sourceOrder = curLoadLine.sourceOrder(true);
            WHSLoadId loadId = curLoadLine.InventTransType == InventTransType::TransferOrderShip ? _loadId : '';
            while (meInventTrans.moveNext())
            {
                newLoadLine.clear();
                newLoadLine.initFromSourceOrder(sourceOrder);
                this.createLoadLine(newLoadLine, curLoadLine, meInventTrans.currentKey(), meInventTrans.currentValue(), inventHandlingUnit, loadId);
            }
            curLoadLine.doDelete();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates load line.
    /// </summary>
    /// <param name = "_newLoadLine">
    /// New load line.
    /// </param>
    /// <param name = "_currentLoadLine">
    /// Current load line.
    /// </param>
    /// <param name = "_inventDimId">
    /// Inventory dimension item Id.
    /// </param>
    /// <param name = "_inventQty">
    /// Inventory quantity.
    /// </param>
    /// <param name = "_inventUnitId">
    /// Inventory handling unit Id.
    /// </param>
    /// <param name = "_loadId">
    /// Id of the load.
    /// </param>
    protected void createLoadLine(
        WHSLoadLine _newLoadLine,
        WHSLoadLine _currentLoadLine,
        InventDimId _inventDimId,
        Qty         _inventQty,
        WHSUOM      _inventUnitId,
        WHSLoadId   _loadId = '')
    {
        _newLoadLine = this.initializeLoadLine(_newLoadLine, _currentLoadLine, _inventDimId, _inventQty, _inventUnitId);

        if (_newLoadLine.InventDimId == _currentLoadLine.InventDimId)
        {
            _newLoadLine.WorkCreatedQty = _currentLoadLine.WorkCreatedQty;
            _newLoadLine.doInsert();

            this.updateWorkLineWithNewLoadLineReference(_currentLoadLine.RecId, _newLoadLine.RecId);
        }
        else
        {
            if (_loadId)
            {
                // Look for existing load line with the same dimension, to add the qty to.
                WHSLoadLine loadLine;

                select firstonly forupdate loadLine
                    where loadLine.LoadId        == _loadId
                    &&    loadLine.InventTransId == _currentLoadLine.InventTransId
                    &&    loadLine.inventDimId   == _inventDimId;

                if (loadLine.RecId)
                {
                    Qty addedQty = _newLoadLine.Qty;

                    loadLine.InventQty          += _inventQty;
                    loadLine.Qty                += addedQty;
                    loadLine.QtyLeftToStructure += addedQty;
                    loadLine.doUpdate();
                }
                else
                {
                    _newLoadLine.doInsert();
                }
            }
            else
            {
                _newLoadLine.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkLineWithNewLoadLineReference</Name>
				<Source><![CDATA[
    private void updateWorkLineWithNewLoadLineReference(WHSLoadLineRefRecId _currentLoadLineRecId, WHSLoadLineRefRecId _newLoadLineRecId)
    {
        WHSWorkLine whsWorkLine;

        whsWorkLine.skipDataMethods(true);
        update_recordset whsWorkLine
            setting LoadLineRefRecId = _newLoadLineRecId
            where whsWorkLine.LoadLineRefRecId  == _currentLoadLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finish populating a new load line record after it has been initialized using source line data.
    /// </summary>
    /// <param name="_newLoadLine">
    /// A <c>WHSLoadLine</c> buffer that was initialized using source line data.
    /// </param>
    /// <param name="_currentLoadLine">
    /// The current load line.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension combination for the new load line.
    /// </param>
    /// <param name="_inventQty">
    /// The quantity on the load line based on the inventory unit of measure.
    /// </param>
    /// <param name="_inventUnitId">
    /// The inventory unit of measure.
    /// </param>
    /// <returns>
    /// A <c>WHSLoadLine</c> buffer with all fields populated.
    /// </returns>
    protected WHSLoadLine initializeLoadLine(
        WHSLoadLine   _newLoadLine,
        WHSLoadLine   _currentLoadLine,        
        InventDimId   _inventDimId,
        Qty           _inventQty,
        WHSUOM        _inventUnitId)
    {
        EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        WHSLoadLine loadLine = _newLoadLine;

        loadLine.InventQty = _inventQty;
        loadLine.Qty = releasedProductUnitConverter.convert(_inventQty,
                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(_inventUnitId),
                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(loadLine.UOM),
                                                            NoYes::No,
                                                            loadLine.ItemId,
                                                            loadLine.InventDimId);
        loadLine.QtyLeftToStructure = loadLine.Qty;
        loadLine.InventDimId = _inventDimId;
        loadLine.setPackingQty();
        loadLine.LoadId      = _currentLoadLine.loadId;
        loadLine.ShipmentId  = _currentLoadLine.shipmentId;

        return loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;

        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLinesInventoryDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>WHSLoadLine</c> lines with a new inventory dimensions.
    /// </summary>
    /// <param name="_newInventDimId">
    /// The new <c>InventDimId</c> ID.
    /// </param>
    public void updateLoadLinesInventoryDimension(InventDimId _newInventDimId)
    {
        WHSLoadLine whsLoadLine;
        ttsBegin;
        whsLoadLine.skipDataMethods(true);
        update_recordSet whsLoadLine
            setting InventDimId = _newInventDimId
            where whsLoadLine.inventTransId    == inventTransId
            &&    whsLoadLine.InventDimId      != _newInventDimId
            &&     whsLoadLine.WorkCreatedQty   == 0;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLoadLineByDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Split the load line for new dimension.
    /// </summary>
    /// <param name = "_loadLineRecId">The current load line record ID.</param>
    /// <param name = "_newInventDimId">New dimension ID for the load line.</param>
    /// <param name = "_qtyToSplit">The quantity amount to split from the load line.</param>
    /// <returns>The new or updated load line.</returns>
    [Hookable(false)]
    internal final WHSLoadLine splitLoadLineByDimension(
        WHSLoadLineRefRecId _loadLineRecId,
        InventDimId			_newInventDimId,
        InventHandlingQty	_qtyToSplit)
    {
        if (!_loadLineRecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        ttsbegin;
    
        WHSLoadLine loadLine = WHSLoadLine::findbyRecId(_loadLineRecId);
        WHSLoadLine newLoadLine;
    
		// Method was created for planned cross docking so currently does not handle catch weight items.
        if (PdsGlobal::pdsIsCWItem(loadLine.ItemId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_qtyToSplit > loadLine.InventQty)
        {
            throw error("@WAX:LoadLineSplitErrorForOverQuantity");
        }
    
        if (_qtyToSplit == loadLine.InventQty)
        {
            loadLine.InventDimId = _newInventDimId;
            loadLine.doUpdate();
        }
        else if (_qtyToSplit < loadLine.InventQty)
        {
            var inventUnitRecId     = UnitOfMeasure::findBySymbol(InventTableModule::find(loadLine.ItemId, ModuleInventPurchSales::Invent).UnitId).RecId;
            var loadLineUnitRecId   = UnitOfMeasure::findBySymbol(loadLine.UOM).RecId;
    
            // Reduce the qty of the exsting loadLine.
            loadLine.InventQty -= _qtyToSplit;
            
            loadLine.Qty = EcoResProductUnitConverter::convertForReleasedProduct(loadLine.ItemId,
                                                                                 loadLine.InventDimId,
                                                                                 loadLine.InventQty,
                                                                                 inventUnitRecId,
                                                                                 loadLineUnitRecId);
            loadLine.doUpdate();
    
            // Determine if there is an existing loadLine that matchs all criteria so that we can just update the qty.
            WHSLoadLine     existingLoadLine;

            select firstOnly forUpdate existingLoadLine
                where existingLoadLine.InventTransId    == loadLine.InventTransId
                &&    existingLoadLine.InventDimId      == _newInventDimId
                &&    existingLoadLine.PackingQty       == loadLine.PackingQty
                &&    existingLoadLine.LoadId           == loadLine.LoadId
                &&    existingLoadLine.ShipmentId       == loadLine.ShipmentId;
    
            if (existingLoadLine.RecId)
            {
                existingLoadLine.InventQty += _qtyToSplit;
                existingLoadLine.Qty = EcoResProductUnitConverter::convertForReleasedProduct(loadLine.ItemId,
                                                                                             existingLoadLine.InventDimId,
                                                                                             existingLoadLine.InventQty,
                                                                                             inventUnitRecId,
                                                                                             UnitOfMeasure::findBySymbol(existingLoadLine.UOM).RecId);
                existingLoadLine.doUpdate();
    
                newLoadLine = existingLoadLine;
            }
            else
            {
                // Create the new loadLine for the quantity being split off.
                newLoadLine.data(loadLine);
                newLoadLine.RecId = 0;
                newLoadLine.InventDimId = _newInventDimId;
                newLoadLine.InventQty = _qtyToSplit;
                newLoadLine.Qty = EcoResProductUnitConverter::convertForReleasedProduct(newLoadLine.ItemId,
                                                                                        newLoadLine.InventDimId,
                                                                                        newLoadLine.InventQty,
                                                                                        inventUnitRecId,
                                                                                        loadLineUnitRecId);
                newLoadLine.doInsert();
            }
        }
    
        ttscommit;
    
        return newLoadLine.RecId ? newLoadLine : loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSLoadLineUpdater construct()
    {
        return new WHSLoadLineUpdater();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the class based on the parameters.
    /// </summary>
    /// <param name="_inventTransId">
    /// An <c>InventTransId</c> ID.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSLoadLineUpdater</c> class.
    /// </returns>
    public static WHSLoadLineUpdater newFromTransId(inventTransId _inventTransId)
    {
        WHSLoadLineUpdater whsLoadLineUpdater = WHSLoadLineUpdater::construct();
        whsLoadLineUpdater.parmInventTransId(_inventTransId);

        return whsLoadLineUpdater;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>