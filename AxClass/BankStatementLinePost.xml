<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementLinePost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementLinePost</c>class performs posting of bank statement line by <c>BankStatementLinePostTable</c>.
/// </summary>
internal class BankStatementLinePost
{
    private BankStmtISOReportEntry statementLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>BankStatementLinePost</c>.
    /// </summary>
    /// <param name="_statementLine">The statement line to post.</param>
    /// <returns>A new instance of <c>BankStatementLinePost</c>.</returns>
    internal static BankStatementLinePost construct(BankStmtISOReportEntry _statementLine)
    {
        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            BankStatementLinePost post = new BankStatementLinePost();
            post.statementLine = _statementLine;
            return post;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the statement line, updates the statement header and line post table and matches for generated voucher.
    /// </summary>
    /// <param name = "_isAutomation">Whether the posting is an automatic processing or manual processing.</param>
    /// <param name = "_matchRuleRefRecid">The match rule record id if it is an automatic processing.</param>
    internal void post(
        boolean _isAutomation = false,
        BankReconciliationMatchRuleRefRecId _matchRuleRefRecid = 0)
    {
        ttsbegin;
        BankStatementLinePost::validateStatementLineForPosting(statementLine);
        this.processStatementLine(statementLine);
        this.processStatementHeaderAndLinePostTableForLine(statementLine);
        BankReconciliationMatchingMatchProcessor::processMatchForGeneratedVoucher(statementLine, _isAutomation, _matchRuleRefRecid);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStatementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the posting for statement line.
    /// </summary>
    /// <param name="_statementLine">The statement line.</param>
    private void processStatementLine(BankStmtISOReportEntry _statementLine)
    {
        Voucher lineVoucher = this.getVoucherOfPostingStatement();
        this.updateStatementLineVoucher(_statementLine, lineVoucher);
        LedgerTransVoucherLink::findOrCreateParentVoucherLink(lineVoucher, _statementLine.AccountingDate);
        if (_statementLine.hasTax())
        {
            this.processLineTax(_statementLine, lineVoucher);
            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(_statementLine.SourceDocumentLine);
            boolean updateDistribution = !sourceDocumentLine.StateContainer
                || sourceDocumentLine.StateContainer != SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine).parmCurrentStateContainer();
            if (updateDistribution)
            {
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(_statementLine);
            }
        }

        SourceDocumentLineImplementationList sourceDocumentLineImplementationList = SourceDocumentLineImplementationList::construct();
        sourceDocumentLineImplementationList.addEnd(_statementLine);

        BankStatementLinePostTable lineTablePosting = BankStatementLinePostTable::find(_statementLine.BankStatementLinePostTable);
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(
            lineTablePosting,
            false,
            SourceDocumentAccountingStatus::Completed,
            null,
            curUserId(),
            true,
            sourceDocumentLineImplementationList);

        this.processLineBankTransaction(_statementLine, lineVoucher);
        TransactionLog::create(TransactionLogType::BankReconciliation, strFmt("@CashManagement:BankStatementVoucherPost", lineVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLineBankTransaction</Name>
				<Source><![CDATA[
    private void processLineBankTransaction(BankStmtISOReportEntry _statementLine, Voucher _voucherLine)
    {
        NumberSequenceCode voucherSeriesCode;

        LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Ledger, voucherSeriesCode);

        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(_voucherLine, _statementLine.AccountingDate, SysModule::Bank, LedgerTransType::Bank);

        ledgerVoucher.addVoucher(ledgerVoucherObject);

        BankStmtISOReportEntry bankStatementLine;
        AccountingDistribution accountingDistribution;
        BankStatementLineBankDocumentInformation bankStatementLineBankDocumentInformation;

        while select AllocationFactor, LedgerDimension, MonetaryAmount, SourceDocumentLine from accountingDistribution
            where accountingDistribution.MonetaryAmount == MonetaryAmount::StatementAmount
            join bankStatementLine
                where bankStatementLine.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                    && bankStatementLine.RecId == _statementLine.RecId
            join TransactionTxt, BankTransType, BankStmtISOReportEntry from bankStatementLineBankDocumentInformation
                where bankStatementLineBankDocumentInformation.BankStmtISOReportEntry == bankStatementLine.RecId
        {
            BankStmtISOAccountStatement statementLoc = bankStatementLine.getStatement();
            DimensionDefault defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(accountingDistribution.LedgerDimension);
            LedgerDimensionAccount bankLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(statementLoc.getBankAccountTable().LedgerDimension, defaultDimension);
            LedgerDimensionAccount fixedLedgerDimension = LedgerDimensionFacade::serviceApplyFixedDimensions(bankLedgerDimension);

            if (bankLedgerDimension != fixedLedgerDimension)
            {
                defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(fixedLedgerDimension);
            }

            BankVoucher bankVoucher = BankVoucher::newBankVoucher(
                bankStatementLine.getBankCurrencyAmount() * accountingDistribution.AllocationFactor,
                statementLoc.AccountCurrency,
                statementLoc.getBankAccountTable().AccountID,
                '',
                '',
                '',
                bankStatementLineBankDocumentInformation.TransactionTxt,
                LedgerPostingType::Bank,
                defaultDimension,
                LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(statementLoc.getBankAccountTable().LedgerDimension),
                bankStatementLineBankDocumentInformation.BankTransType);

            bankVoucher.parmTransDate(_statementLine.AccountingDate);
            bankVoucher.parmJournalType(LedgerJournalType::Daily);
            bankVoucher.parmReconcile(NoYes::Yes);
            bankVoucher.parmReconcileFromStatement(NoYes::Yes);
            bankVoucher.parmSourceTableId(_statementLine.TableId);
            bankVoucher.parmSourceRecId(_statementLine.RecId);

            bankVoucher.post(ledgerVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherOfPostingStatement</Name>
				<Source><![CDATA[
    private Voucher getVoucherOfPostingStatement()
    {
        Voucher voucher;
        NumberSequenceReference numberSeqReference;

        numberSeqReference = NumberSeqReference::findReference(extendedtypenum(BankReconcileVoucher));
        if (numberSeqReference)
        {
            voucher = NumberSeq::newGetVoucherFromId(numberSeqReference.numberSequenceTable().RecId).voucher();
        }
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStatementHeaderAndLinePostTableForLine</Name>
				<Source><![CDATA[
    private void processStatementHeaderAndLinePostTableForLine(BankStmtISOReportEntry _statementLine)
    {
        ttsbegin;
        BankStmtISOAccountStatement statement = _statementLine.getStatement();
        this.processStatement(statement);
        BankStatementLinePostTable lineTablePost = _statementLine.getStatementLinePostTable();
        this.processStatementLinePostTable(lineTablePost);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatementLineVoucher</Name>
				<Source><![CDATA[
    private void updateStatementLineVoucher(BankStmtISOReportEntry _statementLine, Voucher _voucherLine)
    {
        if (_statementLine && !_statementLine.Voucher)
        {
            _statementLine.selectForUpdate(true);
            _statementLine.Voucher = _voucherLine;
            _statementLine.update();
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the statement, statement could be updated multiple times in one posting tts.
    /// </summary>
    /// <param name="_statement">The statement.</param>
    private void processStatement(BankStmtISOAccountStatement _statement)
    {
        if (_statement && _statement.Posted == NoYes::No)
        {
            ttsbegin;
            _statement.selectForUpdate(true);
            _statement.Posted = true;
            _statement.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStatementLinePostTable</Name>
				<Source><![CDATA[
    private void processStatementLinePostTable(BankStatementLinePostTable _lineTablePost)
    {
        if (_lineTablePost && _lineTablePost.PostingStatus == BankStatementLinePostStatus::Draft)
        {
            ttsbegin;
            _lineTablePost.selectForUpdate(true);
            _lineTablePost.PostingStatus = BankStatementLinePostStatus::Posted;
            _lineTablePost.update();
            ttscommit;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLineTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the line tax.
    /// </summary>
    /// <param name="_statementLine">The statement line.</param>
    /// <param name="_voucherLine">The voucher line.</param>
    private void processLineTax(BankStmtISOReportEntry _statementLine, Voucher _voucherLine)
    {
        NumberSequenceCode voucherSeriesCode;
        LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Ledger, voucherSeriesCode);
        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(_voucherLine, _statementLine.getBookingDate(), SysModule::Ledger);
        ledgerVoucher.addVoucher(ledgerVoucherObject);
        BankStatementLinePostTaxDocumentPost bankStatementLinePostTaxDocumentPost = BankStatementLinePostTaxDocumentPost::construct(_statementLine);
        bankStatementLinePostTaxDocumentPost.post(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatementLineForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates bank statement line post table, statement header, bank account, statement line and line posting info before posting.
    /// </summary>
    /// <param name="_statementLine">The record of bank statement line to post.</param>
    internal static void validateStatementLineForPosting(BankStmtISOReportEntry _statementLine)
    {
        if (_statementLine.RecId)
        {
            // Validates statement line
            if (_statementLine.IsNewBankDocument == NoYes::No
                || _statementLine.isPosted()
                || _statementLine.BankStatementLinePostTable == 0
                || _statementLine.SourceDocumentLine == 0)
            {
                throw error(strFmt("@Bank:DataCorruptionErrorWhenPosting", tableId2Name(tableNum(BankStmtISOReportEntry))));
            }
            if (_statementLine.AccountingDate == dateNull())
            {
                throw error("@Bank:StatementLineAccountingDateNotFound");
            }

            // Validates statement line posting info
            BankStatementLineBankDocumentInformation postInfo = BankStatementLineBankDocumentInformation::findByReportEntry(_statementLine.RecId);
            if (postInfo.RecId == 0)
            {
                throw error(strFmt("@Bank:DataCorruptionErrorWhenPosting", tableId2Name(tableNum(BankStatementLineBankDocumentInformation))));
            }
            if (postInfo.OffsetLedgerDimension == 0)
            {
                throw error("@Bank:LineInfoOffsetLedgerDimensionNotFound");
            }

            // Validates statement header and bank account
            BankStmtISOAccountStatement statement = BankStmtISOAccountStatement::find(_statementLine.BankStmtISOAccountStatement);
            if (statement.RecId == 0)
            {
                throw error(strFmt("@Bank:DataCorruptionErrorWhenPosting", tableId2Name(tableNum(BankStmtISOAccountStatement))));
            }
            if (!statement.isStatementCanPostLineTable())
            {
                throw error(strFmt("@Bank:StatementHeaderHasBeenPostedError", statement.Identification));
            }

            // Validates line post table
            BankStatementLinePostTable lineTablePost = _statementLine.getStatementLinePostTable();
            if (lineTablePost.RecId == 0 || lineTablePost.SourceDocumentHeader == 0 || lineTablePost.PostingStatus != BankStatementLinePostStatus::Draft)
            {
                throw error(strFmt("@Bank:DataCorruptionErrorWhenPosting", tableId2Name(tableNum(BankStatementLinePostTable))));
            }
        }
        else
        {
            throw error(strFmt("@Bank:DataCorruptionErrorWhenPosting", tableId2Name(tableNum(BankStmtISOReportEntry))));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>