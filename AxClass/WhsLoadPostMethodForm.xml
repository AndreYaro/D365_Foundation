<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLoadPostMethodForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WhsLoadPostMethodForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WhsLoadPostMethodForm construct()
    {
        return new WhsLoadPostMethodForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMissingMethodsFromBaseClass</Name>
				<Source><![CDATA[
    private int addMissingMethodsFromBaseClass(WHSPostMethodPos _startPos)
    {        
        SysDictClass sysDictClass = SysDictClass::newName(classStr(WHSLoadPostEngineBase));
        const boolean IncludeInstanceMethods = true;
        const boolean IncludeStaticMethods = false;
        const boolean IncludeDerivedMethods = false;

        var baseMethods = sysDictClass.methods(IncludeInstanceMethods, IncludeStaticMethods, IncludeDerivedMethods).getEnumerator();

        int methodsAdded;
        while (baseMethods.moveNext())
        {
            SysDictMethod method = baseMethods.current();

            SysAnyType enumValueOut = new SysAnyType(0);
            if (tryParseEnumValue(enumNum(WHSLoadPostMethodsBase), method.name(), enumValueOut) &&
                !WHSLoadPostMethod::existMethodName(method.name()))
            {
                if (this.addNewPostMethod(method.name(), _startPos + methodsAdded))
                {
                    methodsAdded++;
                }
            }
        }

        return methodsAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMissingMethodsFromCustomClass</Name>
				<Source><![CDATA[
    private void addMissingMethodsFromCustomClass(WHSPostMethodPos _startPos)
    {
        SysDictClass sysDictClass = SysDictClass::newName(classStr(WHSLoadPostCustomMethod));
        Enumerator customClasses = sysDictClass.extendedBy().getEnumerator();
        
        int methodsAdded;
        while (customClasses.moveNext())
        {
            SysDictClass subClass = new SysDictClass(customClasses.current());

            if (!subClass.isAbstract())
            {
                WHSLoadPostCustomMethod instance = subClass.makeObject();
                if (instance &&
                    !WHSLoadPostMethod::existMethodName(instance.name()))
                {
                    if (this.addNewPostMethod(instance.name(), _startPos + methodsAdded))
                    {
                        methodsAdded++;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNew_clicked</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds the custom methods that are defined in the <c>WHSLoadPostEngineBase</c> and <c>WHSLoadPostEngineCustom</c> classes and adds them into database if they are not added before.
	/// </summary>
    public void addNew_clicked()
    {        
        WHSLoadPostMethod whsLoadPostMethod;

        select count(RecId) from whsLoadPostMethod;
        WHSPostMethodPos position = int642int(whsLoadPostMethod.RecId) + 1;

        position += this.addMissingMethodsFromBaseClass(position);
        this.addMissingMethodsFromCustomClass(position);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewPostMethod</Name>
				<Source><![CDATA[
    /// <summary>
	/// Inserts a new <c>WHSLoadPostMethod</c> record into database.
	/// </summary>
	/// <param name="_name">
	/// Load posting method name of the record.
	/// </param>
	/// <param name="_counter">
	/// Load posting method position of the record.
	/// </param>
    /// <returns>true if the method was added; otherwise, false.</returns>
    private boolean addNewPostMethod(WHSPostMethodName _name, int _counter)
    {
        if (WHSLoadPostMethod::canEnableMethod(_name))
        {
            WHSLoadPostMethod loadPostMethod;

            loadPostMethod.PostMethodPos    = _counter;
            loadPostMethod.PostMethodName   = _name;
            loadPostMethod.insert();

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPostMethod_active</Name>
				<Source><![CDATA[
    /// <summary>
	/// Determines whether to disable move up/move down buttons when a load posting method is selected from form.
	/// </summary>
	/// <param name="_whsLoadPostMethod">
	/// The selected load posting method record.
	/// </param>
	/// <param name="_whsLoadPostMethodDS">
	/// Form data source for the records.
	/// </param>
	/// <returns>
	/// A container with two boolean values, indicating to disable Move up button and to disable Move down button respectively.
	/// </returns>
    public container loadPostMethod_active(WHSLoadPostMethod   _whsLoadPostMethod,
                                    FormDataSource      _whsLoadPostMethodDS)
    {
        boolean         disableFirst;
        boolean         disableLast;
        boolean         baseMethod;

        baseMethod = _whsLoadPostMethod.isBaseMethod(_whsLoadPostMethod.PostMethodName);

        if (_whsLoadPostMethodDS.getPosition() == 1 || baseMethod)
        {
            disableFirst = true;
        }

        if (_whsLoadPostMethodDS.getPosition() == _whsLoadPostMethodDS.numberOfRowsLoaded() || baseMethod)
        {
            disableLast = true;
        }

        return [disableFirst, disableLast];
    }

]]></Source>
			</Method>
			<Method>
				<Name>regenerate</Name>
				<Source><![CDATA[
    public void regenerate(WHSLoadPostMethod _whsLoadPostMethod)
    {
        this.regenerate_clicked(_whsLoadPostMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>regenerate_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recreates the <c>WHSLoadPostMethod</c> records when Regenerate button is clicked.
	/// </summary>
	/// <param name="_whsLoadPostMethod">
	/// The active <c>WHSLoadPostMethod</c> record.
	/// </param>
	/// <param name="_whsLoadPostMethodDS">
	/// Form data source.
	/// </param>
    public void regenerate_clicked(WHSLoadPostMethod _whsLoadPostMethod)
    {
        ttsbegin;

        delete_from _whsLoadPostMethod;
        this.addMethodsFromBaseClassOrderedByEnum();   
        this.addNew_clicked();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMethodsFromBaseClassOrderedByEnum</Name>
				<Source><![CDATA[
    private void addMethodsFromBaseClassOrderedByEnum()
    {
        DictEnum dictEnum = new DictEnum(enumNum(WHSLoadPostMethodsBase));
        for (int i = 0; i < dictEnum.values(); i++)
        {
            this.addNewPostMethod(dictEnum.index2Symbol(i), i+1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumDown</Name>
				<Source><![CDATA[
    /// <summary>
	/// Swaps the record with the one down.
	/// </summary>
	/// <param name="_whsLoadPostMethod">
	/// The record that is being swapped one down.
	/// </param>
    public void setNumDown(WHSLoadPostMethod   _whsLoadPostMethod)
    {
        WHSPostMethodPos    curPos;
        WHSPostMethodPos    newPos;
        WHSPostMethodName   curName;
        WHSPostMethodName   newName;

        curPos = _whsLoadPostMethod.PostMethodPos;
        curName = _whsLoadPostMethod.PostMethodName;

        FormDataUtil::getFormDataSource(_whsLoadPostMethod).next();

        newPos = _whsLoadPostMethod.PostMethodPos;
        newName = _whsLoadPostMethod.PostMethodName;

        ttsbegin;
        _whsLoadPostMethod.selectForUpdate();

        _whsLoadPostMethod.PostMethodPos = newPos;
        _whsLoadPostMethod.PostMethodName = curName;

        FormDataUtil::getFormDataSource(_whsLoadPostMethod).prev();

        _whsLoadPostMethod.PostMethodPos = curPos;
        _whsLoadPostMethod.PostMethodName = newName;

        _whsLoadPostMethod.write();
        ttscommit;

        FormDataUtil::getFormDataSource(_whsLoadPostMethod).next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumUp</Name>
				<Source><![CDATA[
    /// <summary>
	/// Swaps the record with the one up.
	/// </summary>
	/// <param name="_whsLoadPostMethod">
	/// The record that is being swapped one up.
	/// </param>
    public void setNumUp(WHSLoadPostMethod   _whsLoadPostMethod)
    {
        WHSPostMethodPos    curPos;
        WHSPostMethodPos    newPos;
        WHSPostMethodName   curName;
        WHSPostMethodName   newName;

        curPos = _whsLoadPostMethod.PostMethodPos;
        curName = _whsLoadPostMethod.PostMethodName;

        FormDataUtil::getFormDataSource(_whsLoadPostMethod).prev();

        newPos = _whsLoadPostMethod.PostMethodPos;
        newName = _whsLoadPostMethod.PostMethodName;

        ttsbegin;
        _whsLoadPostMethod.selectForUpdate();

        _whsLoadPostMethod.PostMethodPos = newPos;
        _whsLoadPostMethod.PostMethodName = curName;

        FormDataUtil::getFormDataSource(_whsLoadPostMethod).next();

        _whsLoadPostMethod.PostMethodPos = curPos;
        _whsLoadPostMethod.PostMethodName = newName;

        _whsLoadPostMethod.write();
        ttscommit;

        FormDataUtil::getFormDataSource(_whsLoadPostMethod).prev();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>