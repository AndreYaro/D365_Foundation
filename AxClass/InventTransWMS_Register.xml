<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransWMS_Register</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransWMS_Register</c> class is used by the simple registration form.
/// </summary>
public class InventTransWMS_Register extends InventTransWMS
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdateTmpSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the serial numbers can be assigned to the pending registration record.
    /// </summary>
    /// <param name="_tmp">
    /// A <c>TmpInventTransWMS</c> record for the pending registration.
    /// </param>
    /// <param name="_movement">
    /// The <c>InventMovement</c> object for which the registration is made.
    /// </param>
    /// <param name="_errorText">
    /// A Boolean value that indicates whether an error message should be shown in the infolog; optional.
    /// </param>
    /// <param name="_fromCreate">
    /// A Boolean value that indicates whether this method is being called from a record creation scenario;
    /// optional.
    /// </param>
    /// <returns>
    /// true if the validation succeeded; otherwise, false .
    /// </returns>
    public boolean canUpdateTmpSerialId(
        TmpInventTransWMS       _tmp,
        InventMovement          _movement,
        boolean                 _errorText  = false,
        boolean                 _fromCreate = false)
    {
        if (!_movement.inventDimGroupSetup().isDimensionActive(fieldNum(InventDim,InventSerialId)))
        {
            return _errorText ? checkFailed("@SYS54764") : false;
        }

        if (!_fromCreate && !_tmp.RecId)
        {
            return _errorText ? checkFailed("@SYS54765") : false;
        }

        if (   PdsGlobal::pdsIsCWItem(_movement.itemId())
            && _tmp.PdsCWQty <= 0)
        {
            return _errorText ? checkFailed("@SYS50502") : false;
        }

        if (_tmp.InventQty <= 0)
        {
            return _errorText ? checkFailed("@SYS50502") : false;
        }

        if (InventDim::find(_tmp.InventDimId).InventSerialId)
        {
            return _errorText ? checkFailed("@SYS54763") : false;
        }

        if (_errorText && _movement.inventTable().SerialNumGroupId)
        {
            InventNumGroup inventNumGroupSerial = InventNumGroup::find(_movement.inventTable().SerialNumGroupId);
            if (inventNumGroupSerial                            &&
                inventNumGroupSerial.OnlyInventTransaction      &&
                inventNumGroupSerial.isTransTypeActivated(_movement.transType()))
            {
                info(strFmt("@SYS62371", _movement.itemId()));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateTransSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the serial numbers can be assigned to the specified <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    /// A <c>InventTrans</c> record to validate.
    /// </param>
    /// <param name="_movement">
    /// The <c>InventMovement</c> object for which the registration is made.
    /// </param>
    /// <param name="_inventTransOrigin">
    /// The <c>InventTransOrigin</c> record that is referenced by the <paramref name="_inventTrans" />
    /// parameter; optional.
    /// </param>
    /// <param name="_errorText">
    /// A Boolean value that indicates whether an error message should be shown in the infolog; optional.
    /// </param>
    /// <returns>
    /// true if the validation succeeded; otherwise, false .
    /// </returns>
    public boolean canUpdateTransSerialId(
        InventTrans             _inventTrans,
        InventMovement          _movement,
        InventTransOrigin       _inventTransOrigin = _inventTrans.inventTransOrigin(),
        boolean                 _errorText = false)
    {
        if (!_movement.inventDimGroupSetup().isDimensionActive(fieldNum(InventDim,InventSerialId)))
        {
            return _errorText ? checkFailed("@SYS54764") : false;
        }

        if (   PdsGlobal::pdsIsCWItem(_movement.itemId())
            && _inventTrans.PdsCWQty <= 0)
        {
            return _errorText ? checkFailed("@SYS50502") : false;
        }

        if (_inventTrans.Qty <= 0)
        {
            return _errorText ? checkFailed("@SYS50502") : false;
        }

        if (!_inventTrans.isUpdatedEstimatedReceipt())
        {
            return _errorText ? checkFailed(strFmt("@SYS54762",StatusReceipt::Ordered,StatusReceipt::Arrived)) : false;
        }

        if (InventDim::find(_inventTrans.InventDimId).InventSerialId)
        {
            return _errorText ? checkFailed("@SYS54763") : false;
        }

        if (_errorText && _movement.inventTable().SerialNumGroupId)
        {
            InventNumGroup inventNumGroupSerial = InventNumGroup::find(_movement.inventTable().SerialNumGroupId);
            if (inventNumGroupSerial                            &&
                inventNumGroupSerial.OnlyInventTransaction      &&
                inventNumGroupSerial.isTransTypeActivated(_inventTransOrigin.ReferenceCategory))
            {
                info(strFmt("@SYS62371", _inventTrans.ItemId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in the pending records table that is based on an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    /// A <c>InventTrans</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that is related to the inventory transaction.
    /// </param>
    /// <returns>
    /// true if the record was created successfully; otherwise, false.
    /// </returns>
    public boolean createFromInventTrans(
        InventTrans _inventTrans,
        InventDim   _inventDim)
    {
        TmpInventTransWMS   tmpInventTransWMSLocal;
        boolean             result;

        if (!this.isInventTransSelected(_inventTrans.RecId))
        {
            result = this.createFromInventTransCW(_inventTrans, _inventDim);
            if (!result)
            {
                tmpInventTransWMSLocal.initFromInventTrans(_inventTrans);

                InventDim inventDim = InventDim::find(tmpInventTransWMSLocal.InventDimId);
                inventDim = this.initInventDimQuarantine(_inventTrans, inventDim);
                tmpInventTransWMSLocal.InventDimId = inventDim.InventDimId;

                tmpInventTransWMSLocal.initFromInventTransOrigin(_inventTrans.inventTransOrigin());

                result = this.writeTmpInventTransWMS(tmpInventTransWMSLocal,_inventTrans, inventDim);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromInventTransCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the new <c>InventTransWMS</c> records for full visibility catch weight items.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record related to the inventory transaction.
    /// </param>
    /// <returns>
    /// true if the records were created successfully; otherwise, false .
    /// </returns>
    protected boolean createFromInventTransCW(
        InventTrans _inventTrans,
        InventDim   _inventDim)
    {
        boolean                                 result = true;
        int                                     i;
        TmpInventTransWMS                       tmpInventTransWMSLocal;

        if (_inventTrans.PdsCWQty == 0 || !PdsGlobal::pdsIsCWFullVisItem(_inventTrans.ItemId))
        {
            return false;
        }

        UnitOfMeasureDecimalPrecision decimalPrecision = UnitOfMeasure::findBySymbol(InventTableModule::find(
            _inventTrans.ItemId,
            ModuleInventPurchSales::Invent).UnitId).DecimalPrecision;

        PdsCWInventQty cwInventQty = _inventTrans.PdsCWQty;
        InventQty inventQty = decRound(
            _inventTrans.Qty / _inventTrans.PdsCWQty,
            decimalPrecision);

        InventDim inventDim = this.initInventDimQuarantine(_inventTrans, _inventDim);
        if (InventDimGroupSetup::newInventTable(_inventTrans.inventTable()).isDimensionActive(fieldNum(InventDim, InventBatchId)))
        {
            InventBatch inventBatch = this.findOrCreateInventBatch(_inventTrans, _inventDim);
            inventDim.InventBatchId = inventBatch.InventBatchId;
        }

        for (i = 1; result && i <= cwInventQty; i++)
        {
            InventSerial inventSerial = this.findOrCreateInventSerial(_inventTrans, _inventDim);
            inventDim.InventSerialId = inventSerial.InventSerialId;
            inventDim = InventDim::findOrCreate(inventDim);

            tmpInventTransWMSLocal.clear();
            tmpInventTransWMSLocal.initFromInventTrans(_inventTrans);
            tmpInventTransWMSLocal.initInventQty(inventQty, _inventTrans.StatusReceipt, _inventTrans.StatusIssue);
            tmpInventTransWMSLocal.initPdsCWQty(1,_inventTrans.StatusReceipt,_inventTrans.StatusIssue);
            tmpInventTransWMSLocal.initFromInventTransOrigin(_inventTrans.inventTransOrigin());
            tmpInventTransWMSLocal.InventDimId = inventDim.InventDimId;

            result = result && this.writeTmpInventTransWMS(tmpInventTransWMSLocal,_inventTrans,inventDim);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBoxText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the appropriate text to show in the dialog box.
    /// </summary>
    /// <returns>
    ///    The text to be provided.
    /// </returns>
    protected str deleteBoxText()
    {
        return "@SYS53772";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateInventBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a new <c>InventBatch</c> record for the <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> record for which to create the batch number.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record for which to create the batch number.
    /// </param>
    /// <returns>
    /// The existing <c>InventBatch</c> record if found; otherwise, the created <c>InventBatch</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The batch ID cannot be created for the inventory batch.
    /// </exception>
    protected InventBatch findOrCreateInventBatch(InventTrans _inventTrans, InventDim _inventDim)
    {
        InventBatch     inventBatch;
        InventDim       inventDim = _inventTrans.inventDim().data();
        InventTrans     inventTrans;
        NumberSeq       numSeq;

        if (_inventTrans.inventBatchId() == ''
            && _inventDim.InventBatchId == '')
        {
            select firstonly inventBatch
                where  inventBatch.ItemId       == _inventTrans.ItemId
                    && inventBatch.ProdDate     == _inventTrans.DateExpected
                notexists join inventDim
                where  inventDim.InventBatchId  == inventBatch.InventBatchId
                join RecId from inventTrans
                where  inventTrans.ItemId       == _inventTrans.ItemId
                    && inventTrans.InventDimId  == inventDim.InventDimId
                    && inventTrans.RecId        != _inventTrans.RecId;
        }
        else
        {
            inventBatch = InventBatch::find(
                            inventDim.InventBatchId ?
                                inventDim.InventBatchId :
                                _inventTrans.inventBatchId(),
                            _inventTrans.ItemId);
        }

        if (!inventBatch)
        {
            inventBatch.clear();
            InventNumGroup inventNumGroup = InventNumGroup::find(_inventTrans.inventTable().BatchNumGroupId);

            if (inventNumGroup && !inventNumGroup.ManualAllocation)
            {
                inventBatch.InventBatchId = inventNumGroup.buildNumber(_inventTrans.inventMovement(), extendedTypeNum(InventBatchId));

                if (!inventBatch.InventBatchId)
                {
                    throw error(strFmt("@PDS1252",inventNumGroup.NumGroupId));
                }
            }

            if (inventBatch.InventBatchId)
            {
                inventBatch.initValue();
                inventBatch.initFromInventTrans(_inventTrans);
                inventBatch.insert();

                if (numSeq)
                {
                    numSeq.used();
                }
            }
        }

        return inventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateInventSerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a new <c>InventSerial</c> record for the <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> record for which to create the serial number.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record for which to create the serial number.
    /// </param>
    /// <returns>
    /// The existing <c>InventSerial</c> record if found; otherwise, the created <c>InventSerial</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The serial number cannot be generated.
    /// </exception>
    protected InventSerial findOrCreateInventSerial(
        InventTrans _inventTrans,
        InventDim   _inventDim)
    {
        InventSerial    inventSerial;
        NumberSeq       numSeq;

        if (_inventTrans.inventSerialId())
        {
            inventSerial = InventSerial::find(_inventTrans.inventSerialId(), _inventTrans.ItemId);
        }
        else
        {
            InventNumGroup inventNumGroup = InventNumGroup::find(_inventTrans.inventTable().SerialNumGroupId);

            if (inventNumGroup && !inventNumGroup.ManualAllocation)
            {
                inventSerial.InventSerialId = inventNumGroup.buildNumber(_inventTrans.inventMovement(), extendedTypeNum(InventSerialId));

                if (!inventSerial.InventSerialId)
                {
                    throw error(strFmt("@PDS1252",inventNumGroup.NumGroupId));
                }
            }

            if (inventSerial.InventSerialId)
            {
                inventSerial.initValue();
                inventSerial.initFromInventMovement(_inventTrans.inventMovement());
                inventSerial.insert();

                if (numSeq)
                {
                    numSeq.used();
                }
            }
        }
        return inventSerial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>TmpInventTransWMS</c> record by using values from <c>InventTrans</c> and
    /// <c>InventTransOrigin</c> records.
    /// </summary>
    /// <param name="_tmpInventTransWMS">
    /// The <c>TmpInventTransWMS</c> record to initialize.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record from which to initialize the record.
    /// </param>
    /// <param name="_inventTransOrigin">
    /// The <c>InventTransOrigin</c> record from which to initialize the record.
    /// </param>
    public void initFromInventTransInventTransOrigin(
        TmpInventTransWMS _tmpInventTransWMS,
        InventTrans       _inventTrans,
        InventTransOrigin _inventTransOrigin)
    {
        if (   _inventTrans
            && _inventTransOrigin)
        {
            _tmpInventTransWMS.initFromInventTrans(_inventTrans);
            _tmpInventTransWMS.initFromInventTransOrigin(_inventTransOrigin);
            _tmpInventTransWMS.InventTransOrigin = 0;

            if (mapQtyByInventTrans.exists(_inventTrans.RecId))
            {
                InventQty adjustedQty = _tmpInventTransWMS.InventQty - conPeek(mapQtyByInventTrans.lookup(_inventTrans.RecId),#inventQtyIdx);
                PdsCWInventQty adjustedQtyCW = _tmpInventTransWMS.PdsCWQty - conPeek(mapQtyByInventTrans.lookup(_inventTrans.RecId),#inventQtyCWIdx);

                if (adjustedQtyCW * _tmpInventTransWMS.PdsCWQty < 0)
                {
                    _tmpInventTransWMS.PdsCWQty = 0;
                }
                else
                {
                    _tmpInventTransWMS.PdsCWQty = adjustedQtyCW;
                }

                if (adjustedQty * _tmpInventTransWMS.InventQty < 0)
                {
                    _tmpInventTransWMS.InventQty = 0;
                }
                else
                {
                    _tmpInventTransWMS.InventQty = adjustedQty;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimQuarantine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Changes warehouse to quarantine warehouse if needed.
    /// </summary>
    /// <param name="_inventTrans">
    ///     The inventory transaction to initialize from.
    /// </param>
    /// <param name="_inventDim">
    ///     The inventory dimensions to initialize from.
    /// </param>
    /// <returns>
    ///     The new set of inventory dimensions.
    /// </returns>
    protected InventDim initInventDimQuarantine(
        InventTrans     _inventTrans,
        InventDim       _inventDim)
    {
        InventDim           inventDim;

        inventDim.data(_inventDim);
        // See if warehouse must be changed to quarantine warehouse
        if (_inventTrans.StatusReceipt == StatusReceipt::Ordered)
        { // Not when removing registration
            InventLocation inventLocation = inventDim.inventLocation();
            if (inventLocation.InventLocationType == InventLocationType::Standard && inventLocation.InventLocationIdQuarantine)
            {
                InventMovement inventMovement = this.movement(_inventTrans);
                if (inventMovement.mustBeQuarantineControlled())
                {
                    inventDim.InventLocationId = inventLocation.InventLocationIdQuarantine;
                    if (inventDim.wmsLocationId && !WMSLocation::exist(inventDim.wmsLocationId, inventDim.InventLocationId))
                    {
                        inventDim.wmsLocationId = '';
                    }
                    inventDim = InventDim::findOrCreate(inventDim);
                }
            }
        }
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory movement for the specified record.
    /// </summary>
    /// <param name="_common">
    ///    A <c>Common</c> record buffer.
    /// </param>
    /// <returns>
    ///    An <c>InventMovement</c> object.
    /// </returns>
    protected InventMovement movement(Common _common)
    {
        return InventTransWMS_Register::inventMovement(_common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMapQtyByTmpInventTransWMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the map mapQtyByTmpInventTransWMS after <c>TmpInventTransWMS</c> is split.
    /// </summary>
    /// <param name="_inventTransRecId">
    /// The <c>InventTrans</c> RecId of the split <c>TmpInventTransWMS</c>
    /// </param>
    /// <param name="_tmpTransWMS">
    /// Instance of <c>TmpInventTransWMS</c>
    /// </param>
    private void refreshMapQtyByTmpInventTransWMS(InventTransRefRecId _inventTransRecId, TmpInventTransWMS _tmpTransWMS)
    {
        TmpInventTransWMS           tmpTransWMS;

        tmpTransWMS.setTmpData(_tmpTransWMS);
        while select tmpTransWMS
            where tmpTransWMS.InventTrans == _inventTransRecId
        {
            Map map = this.mapQtyByTmpInventTransWMSInventTrans(tmpTransWMS.RecId);
            if (!map)
            {
                map = new Map(Types::Int64,Types::Container);
            }
            map.insert(tmpTransWMS.InventTrans, [tmpTransWMS.InventQty, tmpTransWMS.PdsCWQty]);
            mapQtyByTmpInventTransWMS.insert(tmpTransWMS.RecId, map);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates how much has already been registered by the specified movement for the specified
    ///    dimensions.
    /// </summary>
    /// <param name="_movement">
    ///    The movement that is being registered.
    /// </param>
    /// <param name="_tmpInventTransWMS">
    ///    A record in the pending records table.
    /// </param>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    protected InventQtyRegistered registeredQty(
        InventMovement    _movement,
        TmpInventTransWMS _tmpInventTransWMS)
    {
        InventDimParm           inventDimParm;
        InventQtyRegistered     inventQtyRegistered;

        if (_movement)
        {
            _movement.inventDimGroupSetup().inventDimParmActive(inventDimParm);
            inventQtyRegistered = InventTransSum::newChildTypeInventDim().originRegistered(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), InventDim::find(_tmpInventTransWMS.InventDimId), inventDimParm);
        }

        return inventQtyRegistered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredQtyCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has already been registered by the specified movement for the
    /// specified dimensions.
    /// </summary>
    /// <param name="_movement">
    /// The <c>InventMovement</c> object being registered.
    /// </param>
    /// <param name="_tmpInventTransWMS">
    /// An <c>TmpInventTransWMS</c> record in the pending records table.
    /// </param>
    /// <returns>
    /// A <c>PdsCWInventQty</c> value.
    /// </returns>
    protected PdsCWRegistered registeredQtyCW(
        InventMovement    _movement,
        TmpInventTransWMS _tmpInventTransWMS)
    {
        InventDimParm           inventDimParm;
        PdsCWInventQty          inventQtyRegisteredCW;

        if (_movement)
        {
            _movement.inventDimGroupSetup().inventDimParmActive(inventDimParm);
            inventQtyRegisteredCW = InventTransSum::newChildTypeInventDim().pdsCWidRegistered(_movement.inventTransOriginId(), _movement.transChildType(), _movement.transChildRefId(), InventDim::find(_tmpInventTransWMS.InventDimId), inventDimParm);
        }

        return inventQtyRegisteredCW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerRemain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity that is not yet registered.
    /// </summary>
    /// <param name="_movement">
    ///    The inventory movement that is to be registered.
    /// </param>
    /// <param name="_inventTransOriginId">
    ///    The inventory origin.
    /// </param>
    /// <returns>
    ///    A quantity in the inventory unit of measure.
    /// </returns>
    public InventQtyRegisterRemain registerRemain(
        InventMovement      _movement,
        InventTransOriginId _inventTransOriginId = 0)
    {
        InventTransOriginId inventTransOriginId = _inventTransOriginId;

        if (!_movement)
        {
            return 0;
        }

        if (!inventTransOriginId)
        {
            inventTransOriginId = _movement.inventTransOriginId();
        }

        return _movement.transIdSum().ordered() - this.getSelectedQty(inventTransOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerRemainCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that is not yet registered.
    /// </summary>
    /// <param name="_movement">
    /// The <c>InventMovement</c> object to be registered.
    /// </param>
    /// <param name="_inventTransOriginId">
    /// The <c>InventTransOriginId</c> value that specifies the inventory origin; optional.
    /// </param>
    /// <returns>
    /// A <c>PdsCWInventQty</c> value in the inventory unit of measure.
    /// </returns>
    public PdsCWInventQty registerRemainCW(
        InventMovement      _movement,
        InventTransOriginId _inventTransOriginId = _movement.inventTransOriginId())
    {
        if (!_movement)
        {
            return 0;
        }

        return _movement.transIdSum().pdsCWOrdered() - this.getSelectedQtyCW(_inventTransOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the proposed changes into real inventory updates.
    /// </summary>
    /// <param name="_movementRecord">
    ///    The record that is used when it calls the registration form.
    /// </param>
    /// <returns>
    ///    true if the update succeeded; otherwise, false.
    /// </returns>
    public boolean updateInvent(Common _movementRecord)
    {
        boolean result = InventTransWMS_Register::updateInventOnServer(_movementRecord,
                                                                       tmpInventTransWMS,
                                                                       mapQtyByTmpInventTransWMS.pack(),
                                                                       mapInventTransInventTransOrigin.pack());

        this.initSelectedQty();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls a server bound method to convert the proposed changes into real inventory updates for a given
    ///    inventory movement.
    /// </summary>
    /// <param name="_movement">
    ///    The inventory movement for which items are being registered.
    /// </param>
    /// <returns>
    ///    true if the update succeeded; otherwise, false.
    /// </returns>
    public boolean updateInventFromMovement(InventMovement _movement)
    {
        boolean result = InventTransWMS_Register::updateInventOnServer(_movement.buffer(),
                                                                       tmpInventTransWMS,
                                                                       mapQtyByTmpInventTransWMS.pack(),
                                                                       mapInventTransInventTransOrigin.pack());

        this.initSelectedQty();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTmpSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the serial numbers to the pending registration record.
    /// </summary>
    /// <param name="_tmp">
    ///    The pending registration record.
    /// </param>
    /// <param name="_movement">
    ///    The inventory movement for which the registration is made.
    /// </param>
    /// <returns>
    ///    true if the serial numbers were assigned; otherwise, false.
    /// </returns>
    public boolean updateTmpSerialId(
        TmpInventTransWMS           _tmp,
        InventMovement              _movement)
    {
        SerialNumberFormat          serialNumberFormat;
        SerialNumberIntervalStart   serialNumberIntervalStart;
        SerialNumberIntervalEnd     serialNumberIntervalEnd;
        boolean                     dialogResult;
        InventTransRefRecId         inventTransRecId = _tmp.InventTrans;

        if (!this.canUpdateTmpSerialId(_tmp, _movement, true, false))
        {
            return false;
        }

        [dialogResult, serialNumberFormat, serialNumberIntervalStart, serialNumberIntervalEnd] = InventTransWMS_Register::showSerialIdCreateForm(_tmp);
        if (!dialogResult)
        {
            return false;
        }

        InventTransWMS_Register::updateTmpSerialIdServer(_tmp, serialNumberFormat, serialNumberIntervalStart, serialNumberIntervalEnd);
        if (FormDataUtil::isFormDataSource(_tmp))
        {
            FormDataUtil::getFormDataSource(_tmp).research();
        }

        this.refreshMapQtyByTmpInventTransWMS(inventTransRecId, _tmp);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the serial numbers to the <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record to have the serial numbers assigned
    /// </param>
    /// <param name="_movement">
    ///    The inventory movement for which the registration is made.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The <c>InventTransOrigin</c> record that is referenced by the <c>_inventTrans</c> record.
    /// </param>
    /// <returns>
    ///    true if serial numbers were assigned; otherwise, false.
    /// </returns>
    public boolean updateTransSerialId(
        InventTrans                 _inventTrans,
        InventMovement              _movement,
        InventTransOrigin           _inventTransOrigin)
    {
        SerialNumberFormat          serialNumberFormat;
        SerialNumberIntervalStart   serialNumberIntervalStart;
        SerialNumberIntervalEnd     serialNumberIntervalEnd;
        boolean                     dialogResult;

        if (!this.canUpdateTransSerialId(_inventTrans, _movement, _inventTransOrigin, true))
        {
            return false;
        }

        [dialogResult, serialNumberFormat, serialNumberIntervalStart, serialNumberIntervalEnd] = InventTransWMS_Register::showSerialIdCreateForm(_inventTrans);
        if (!dialogResult)
        {
            return false;
        }

        InventTransWMS_Register::updateTransSerialIdServer(_inventTrans, serialNumberFormat, serialNumberIntervalStart, serialNumberIntervalEnd);
        if (FormDataUtil::isFormDataSource(_inventTrans))
        {
            FormDataUtil::getFormDataSource(_inventTrans).research();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatingTmpEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the proposed change to a pending record is valid.
    /// </summary>
    /// <param name="_inventTransWMS_Register">
    /// The <c>InventTransWMS_Register</c> class providing the values to validate.
    /// </param>
    /// <param name="_inventQty">
    /// The pending <c>InventQty</c> quantity value.
    /// </param>
    /// <param name="_inventQtyOrig">
    /// The original pending <c>InventQty</c> quantity value.
    /// </param>
    /// <param name="_tmpInventTransWMS">
    /// The pending <c>TmpInventTransWMS</c> record.
    /// </param>
    /// <param name="_movement">
    /// The <c>InventMovement</c> object that is related to the pending record.
    /// </param>
    /// <param name="_inventTransOriginId">
    /// The <c>InventTransOriginId</c> value that is related to the movement.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that is related to the pending record.
    /// </param>
    /// <param name="_inventQtyCW">
    /// The pending catch weight quantity.
    /// </param>
    /// <param name="_inventQtyOrigCW">
    /// The original pending catch weight quantity.
    /// </param>
    /// <param name="_eventHandlerResult">
    /// A <c>EventHandlerRejectResult</c> class enabling event handlers to provide the validation.
    /// </param>
    [SubscribesTo(classStr(InventTransWMS_Register), delegateStr(InventTransWMS_Register, validatingTmp))]
    public static void validatingTmpEventHandler(InventTransWMS_Register _inventTransWMS_Register, InventQty _inventQty, InventQty _inventQtyOrig, TmpInventTransWMS _tmpInventTransWMS, InventMovement _movement, InventTransOriginId _inventTransOriginId, InventDim _inventDim, PdsCWInventQty _inventQtyCW, PdsCWInventQty _inventQtyOrigCW, EventHandlerRejectResult _eventHandlerResult)
    {
        if (PdsGlobal::pdsIsCWItem(_movement.itemId()))
        {
            if (_inventQtyCW * _inventQtyOrigCW < 0)
            {
                _eventHandlerResult.checkFailed(strfmt("@SYS324605", _inventQtyOrigCW));
                return;
            }

            PdsCWInventQty addQtyCW = _inventQtyCW - _inventQtyOrigCW;

            if (!_movement.overDeliveryPct())
            {
                if (addQtyCW > _inventTransWMS_Register.registerRemainCW(_movement,_inventTransOriginId))
                {
                    _eventHandlerResult.checkFailed(strfmt("@SYS53743", _inventQtyOrigCW + _inventTransWMS_Register.registerRemainCW(_movement,_inventTransOriginId)));
                    return;
                }
            }

            if (addQtyCW < 0)
            {
                if (_inventTransWMS_Register.getSelectedQtyCW(_inventTransOriginId) + addQtyCW < -_movement.transIdSum().pdsCWRegistered())
                {
                    _eventHandlerResult.checkFailed(strfmt("@SYS53751", _movement.transIdSum().pdsCWregistered()));
                    return;
                }
            }

            if (_inventQtyCW < 0)
            {
                if (_inventTransWMS_Register.registeredQtyCW(_movement,_tmpInventTransWMS) + _inventQtyCW < 0)
                {
                    _eventHandlerResult.checkFailed(strfmt("@SYS53746", _inventTransWMS_Register.registeredQtyCW(_movement,_tmpInventTransWMS),-_inventQtyCW));
                    return;
                }
            }

            if (   addQtyCW > 0
                && !PdsCatchWeightItem::pdsCWIsValidQty(_movement.itemId(),_inventQty, _inventQtyCW))
            {
                _eventHandlerResult.checkFailed(PdsCatchWeightItem::pdsCWErrorMsg(_movement.itemId(), _inventQtyCW));
                return;
            }
        }
        else
        {
            if (_inventQty * _inventQtyOrig < 0)
            {
                _eventHandlerResult.checkFailed(strfmt("@SYS324605",_inventQtyOrig));
                return;
            }

            InventQty addQty = _inventQty - _inventQtyOrig;

            if (!_movement.overDeliveryPct())
            {
                if (addQty > _inventTransWMS_Register.registerRemain(_movement,_inventTransOriginId))
                {
                    _eventHandlerResult.checkFailed(strfmt("@SYS53743", _inventQtyOrig + _inventTransWMS_Register.registerRemain(_movement,_inventTransOriginId)));
                    return;
                }
            }

            if (addQty < 0)
            {
                if (_inventTransWMS_Register.getSelectedQty(_inventTransOriginId) + addQty < -_movement.transIdSum().registered())
                {
                    _eventHandlerResult.checkFailed(strfmt("@SYS53751", _movement.transIdSum().registered()));
                    return;
                }
            }

            if (_inventQty < 0)
            {
                if (_inventTransWMS_Register.registeredQty(_movement,_tmpInventTransWMS) + _inventQty < 0)
                {
                    _eventHandlerResult.checkFailed(strfmt("@SYS53746", _inventTransWMS_Register.registeredQty(_movement,_tmpInventTransWMS),-_inventQty));
                    return;
                }
            }
        }

        if (_movement.transType() == InventTransType::QuarantineOrder)
        {
            InventQuarantineOrder inventQuarantineOrder = _movement.buffer();
            switch (inventQuarantineOrder.Status)
            {
                case InventQuarantineStatus::Created:
                    if (_inventDim.InventLocationId != InventDim::find(inventQuarantineOrder.InventDimIdQuarantine).InventLocationId)
                    {
                        _eventHandlerResult.checkFailed(strFmt("@SYS54084", InventDim::find(inventQuarantineOrder.InventDimIdQuarantine).InventLocationId));
                        return;
                    }
                    break;
                default:
                    if (_inventDim.InventLocationId != InventDim::find(inventQuarantineOrder.InventDimId).InventLocationId)
                    {
                        _eventHandlerResult.checkFailed(strFmt("@SYS54084", InventDim::find(inventQuarantineOrder.InventDimId).InventLocationId));
                        return;
                    }
                    break;
            }
        }
        else if (_movement.transType() == InventTransType::TransferOrderReceive)
        {
            InventTransferLine inventTransferLine = _movement.buffer();
            InventLocationId inventLocationId = inventTransferLine.inventTransferTable().InventLocationIdTo;
            if (_inventDim.InventLocationId != inventLocationId)
            {
                _eventHandlerResult.checkFailed(strFmt("@SYS54084", inventLocationId));
                return;
            }
        }

        if (_movement.mustBeQuarantineControlled() && _inventQty > 0)
        {
            if (InventLocation::find(_inventDim.InventLocationId).InventLocationType != InventLocationType::Quarantine)
            {
                _eventHandlerResult.checkFailed("@SYS58490");
                return;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for determining whether the proposed change to a pending record is valid.
    /// </summary>
    /// <param name="_inventTransWMS_Register">
    /// The <c>InventTransWMS_Register</c> class providing the values to validate.
    /// </param>
    /// <param name="_inventQty">
    /// The pending <c>InventQty</c> quantity value.
    /// </param>
    /// <param name="_inventQtyOrig">
    /// The original pending <c>InventQty</c> quantity value.
    /// </param>
    /// <param name="_tmpInventTransWMS">
    /// The pending <c>TmpInventTransWMS</c> record.
    /// </param>
    /// <param name="_movement">
    /// The <c>InventMovement</c> object that is related to the pending record.
    /// </param>
    /// <param name="_inventTransOriginId">
    /// The <c>InventTransOriginId</c> value that is related to the movement.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that is related to the pending record.
    /// </param>
    /// <param name="_inventQtyCW">
    /// The pending catch weight quantity.
    /// </param>
    /// <param name="_inventQtyOrigCW">
    /// The original pending catch weight quantity.
    /// </param>
    /// <param name="_eventHandlerResult">
    /// A <c>EventHandlerRejectResult</c> class enabling event handlers to provide the validation.
    /// </param>
    delegate void validatingTmp(
        InventTransWMS_Register  _inventTransWMS_Register,
        InventQty                _inventQty,
        InventQty                _inventQtyOrig,
        TmpInventTransWMS        _tmpInventTransWMS,
        InventMovement           _movement,
        InventTransOriginId      _inventTransOriginId,
        InventDim                _inventDim,
        PdsCWInventQty           _inventQtyCW,
        PdsCWInventQty           _inventQtyOrigCW,
        EventHandlerRejectResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the proposed change to a pending record is valid.
    /// </summary>
    /// <param name="_inventQty">
    /// The pending <c>InventQty</c> quantity value.
    /// </param>
    /// <param name="_inventQtyOrig">
    /// The original pending <c>InventQty</c> quantity value.
    /// </param>
    /// <param name="_tmpInventTransWMS">
    /// The pending <c>TmpInventTransWMS</c> record.
    /// </param>
    /// <param name="_movement">
    /// The <c>InventMovement</c> object that is related to the pending record.
    /// </param>
    /// <param name="_inventTransOriginId">
    /// The <c>InventTransOriginId</c> value that is related to the movement; optional.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that is related to the pending record; optional.
    /// </param>
    /// <param name="_inventQtyCW">
    /// The pending catch weight quantity; optional.
    /// </param>
    /// <param name="_inventQtyOrigCW">
    /// The original pending catch weight quantity; optional.
    /// </param>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    protected boolean validateTmp(
        InventQty               _inventQty,
        InventQty               _inventQtyOrig,
        TmpInventTransWMS       _tmpInventTransWMS,
        InventMovement          _movement,
        InventTransOriginId     _inventTransOriginId = _movement.inventTransOriginId(),
        InventDim               _inventDim           = null,
        PdsCWInventQty          _inventQtyCW     = 0,
        PdsCWInventQty          _inventQtyOrigCW = 0
        )
    {
        EventHandlerRejectResult result = EventHandlerRejectResult::newDefault();

        this.validatingTmp(
            this,
            _inventQty,
            _inventQtyOrig,
            _tmpInventTransWMS,
            _movement,
            _inventTransOriginId,
            _inventDim,
            _inventQtyCW,
            _inventQtyOrigCW,
            result);

        return !result.isRejected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpInventTransWMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes a record to the pending records table.
    /// </summary>
    /// <param name="_tmpInventTransWMS">
    /// A <c>TmpInventTransWMS</c> record.
    /// </param>
    /// <param name="_inventTrans">
    /// A <c>InventTrans</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record related to the inventory transaction.
    /// </param>
    /// <returns>
    /// true if the record was written successfully; otherwise, false.
    /// </returns>
    public boolean writeTmpInventTransWMS(
        TmpInventTransWMS _tmpInventTransWMS,
        InventTrans       _inventTrans,
        InventDim         _inventDim)
    {
        InventTrans     inventTrans;

        if (   _tmpInventTransWMS.RecId
            && _tmpInventTransWMS.InventTrans != _inventTrans.RecId)
        {
            inventTrans = InventTrans::findRecId(_tmpInventTransWMS.InventTrans);
        }
        else
        {
            inventTrans = _inventTrans;
        }

        boolean result = this.setSelectedQty(_tmpInventTransWMS,inventTrans,_inventDim,_tmpInventTransWMS.InventQty,false,_tmpInventTransWMS.PdsCWQty);

        if (result)
        {
            this.writeTmp(_tmpInventTransWMS);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventTransWMS_Register construct()
    {
        return new InventTransWMS_Register();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the inventory movement that is currently to be registered.
    /// </summary>
    /// <param name="_movementRecord">
    ///    The record that is used when the registration form is called.
    /// </param>
    /// <returns>
    ///    An inventory movement.
    /// </returns>
    public static InventMovement inventMovement(Common _movementRecord)
    {
        InventMovement          movement;

        if (_movementRecord is InventQuarantineOrder)
        {
            InventQuarantineOrder inventQuarantineOrder = _movementRecord as InventQuarantineOrder;
            movement = InventMovement::construct(inventQuarantineOrder,inventQuarantineOrder.getInventMovSubType(InventDirection::Receipt));
        }

        if (!movement)
        {
            movement = InventMovement::construct(_movementRecord);
        }

        if (movement.newMovement_TransferReceipt())
        {
            movement = movement.newMovement_TransferReceipt();
            movement = movement.newMovement_TransferIssueReceive() ? movement.newMovement_TransferIssueReceive() : movement;
            movement = movement.newMovement_TransferReceipt() ? movement.newMovement_TransferReceipt() : movement;
        }

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a new <c>InventTransWMS_Register</c> object.
    /// </summary>
    /// <param name="_tmpInventTransWMS">
    ///    A handle for the temporary table that holds pending records.
    /// </param>
    /// <returns>
    ///    A <c>InventTransWMS_Register</c> object.
    /// </returns>
    public static InventTransWMS_Register newStandard(TmpInventTransWMS _tmpInventTransWMS)
    {
        InventTransWMS_Register inventTransWMS_Register = InventTransWMS_Register::construct();

        inventTransWMS_Register.parmTmpInventTransWMS(_tmpInventTransWMS);
        inventTransWMS_Register.init();

        return inventTransWMS_Register;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSerialIdCreateForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Presents the dialog box for serial number creation and retrieves the user input.
    /// </summary>
    /// <param name="_sourceRecord">
    ///    The record from which serial number creation is requested.
    /// </param>
    /// <returns>
    ///    A container with the result and values from the dialog box.
    /// </returns>
    /// <remarks>
    ///    This method must execute on the client as it has a <c>formrun</c> object.
    /// </remarks>
    protected static container showSerialIdCreateForm(Common _sourceRecord)
    {
        SerialNumberFormat                          serialNumberFormat;
        SerialNumberIntervalStart                   serialNumberIntervalStart;
        SerialNumberIntervalEnd                     serialNumberIntervalEnd;

        Args args = new Args();
        args.name(formStr(InventTransSerialNumberCreate));
        args.record(_sourceRecord);

        FormRun formSpecifyValues = classfactory.formRunClass(args);
        formSpecifyValues.init();
        formSpecifyValues.run();
        formSpecifyValues.wait();

        if (!formSpecifyValues.closedOk())
        {
            return [false, serialNumberFormat, serialNumberIntervalStart, serialNumberIntervalEnd];
        }

        InventTransSerialNumberCreateInterface formObject = formSpecifyValues as InventTransSerialNumberCreateInterface;

        serialNumberFormat          = formObject.serialNumberFormat(false, "");
        serialNumberIntervalStart   = formObject.serialNumberIntervalStart(false, 0);
        serialNumberIntervalEnd     = formObject.serialNumberIntervalEnd(false, 0);

        return [true, serialNumberFormat, serialNumberIntervalStart, serialNumberIntervalEnd];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventFromMovementServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the proposed changes into real inventory updates for a specified inventory movement.
    /// </summary>
    /// <param name="_movement">
    /// An <c>InventMovement</c> object for which items are being registered.
    /// </param>
    /// <param name="_tmpInventTransWMS">
    /// The pending changes <c>TmpInventTransWMS</c> temporary table.
    /// </param>
    /// <param name="_mapQtyByTmpInventTransWMSPacked">
    /// A packed map that contains the detail information to pending records mapping.
    /// </param>
    /// <param name="_mapInventTransInventTransOriginPacked">
    /// A packed map that contains the inventory transaction to origin mapping.
    /// </param>
    /// <param name="_inventTransWMSRegistrationObserver">
    /// An <c>InventTransWMSRegistrationObserver</c> object.
    /// </param>
    /// <param name="_dateInvent">
    /// The date that is used to update date of inventory transaction
    /// </param>
    /// <returns>
    /// true if the update is successful; otherwise, false .
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The requested quantity cannot be updated because of missing <c>InventTrans</c> records with the
    /// correct status.
    /// </exception>
    protected static boolean updateInventFromMovementServer(
        InventMovement                      _movement,
        TmpInventTransWMS                   _tmpInventTransWMS,
        container                           _mapQtyByTmpInventTransWMSPacked,
        container                           _mapInventTransInventTransOriginPacked,
        InventTransWMSRegistrationObserver  _inventTransWMSRegistrationObserver,
        TransDate                           _dateInvent = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TmpInventTransWMS               tmpInventTransWMS;
        InventMovement                  movement;
        InventDim                       inventDim;
        InventDimParm                   inventDimParm;
        boolean                         ret = false;
        InventQty                       inventQtySum;
        InventReceiptForTestRegistrator inventReceiptForTestRegistrator;
        
        PdsCWInventQty                  inventQtySumCW;

        InventTrans                     shipInventTrans;
        InventTransOrigin               shipInventTransOrgin;

        Qty                             receiveQtySum;
        try
        {
            tmpInventTransWMS.setTmpData(_tmpInventTransWMS);

            ttsbegin;
            tmpInventTransWMS.ttsbegin();
            if (InventTransWMS::prepareUpdateInvent(_tmpInventTransWMS,_mapQtyByTmpInventTransWMSPacked,_mapInventTransInventTransOriginPacked,true))
            {
                if (_movement.childBuffer())
                {
                    movement = InventMovement::construct(_movement.childBuffer(),_movement.inventMovSubType());
                }
                else
                {
                    if (_movement.buffer().TableId == tableNum(PurchLine))
                    {
                        movement = InventMovement::construct(PurchLine::findRecId(_movement.buffer().RecId, true),_movement.inventMovSubType());
                    }
                    else
                    {
                        movement = InventMovement::construct(_movement.buffer(),_movement.inventMovSubType());
                    }
                }

                if (movement.transType() == InventTransType::TransferOrderReceive)
                {
                    while select sum(InventQty), sum(PdsCWQty) from tmpInventTransWMS
                        group by InventDimId
                        where tmpInventTransWMS.InventTransOrigin != 0
                    {
                        inventDim = InventDim::find(tmpInventTransWMS.InventDimId);

                        if (!BrazilParameters::isEnabled() || InventTransferTable::find(InventTransferLine::findTransIdReceive(movement.transId()).TransferId).TransferStatus == InventTransferStatus::Received)
                        {
                            receiveQtySum = InventTransferLine::inventTransSumDimReceived(movement.transId(),inventDim);
                        }
                        if (abs(InventTransferLine::inventTransSumDimShipped(movement.transId(),inventDim)) < (tmpInventTransWMS.InventQty + receiveQtySum)
                            || (PdsGlobal::pdsIsCWItem(movement.itemId())
                                && abs(InventTransferLine::pdsCWInventTransSumDimShipped(movement.transId(),inventDim)) < (tmpInventTransWMS.PdsCWQty + InventTransferLine::pdsCWinventTransSumDimReceived(movement.transId(),inventDim)))
                            )
                        {
                            throw error(strFmt("@SYS90627", movement.itemId()));
                        }
                    }
                }

                InventTransOriginId inventTransOriginId = movement.inventTransOriginId();

                inventQtySum = 0;
                inventQtySumCW = 0;

                while select forupdate tmpInventTransWMS
                    order by InventQty
                    where tmpInventTransWMS.InventTransOrigin == inventTransOriginId
                {
                    inventDim = InventDim::find(tmpInventTransWMS.InventDimId);

                    if (movement.mustBeQuarantineControlled() && inventDim.inventLocation().InventLocationType == InventLocationType::Quarantine)
                    {
                        inventDim = InventQuarantineOrder::inventDimArriveOrRegistration(inventDim,movement.inventdim(),movement.itemId());
                    }

                    movement.inventDimGroupSetup().inventDimParmActive(inventDimParm);
                    movement.initializeFromTmpInventTransWMS(tmpInventTransWMS);

                    // If we shipped out with no LP then lp isn't mergeable.
                    if (WHSInventEnabled::exist(movement.itemId()) &&
                        movement.transType() == InventTransType::TransferOrderReceive)
                    {
                        select firstonly shipInventTrans
                            join InventTransId, RecId from shipInventTransOrgin
                            where shipInventTrans.InventTransOrigin     == shipInventTransOrgin.RecId                                       &&
                                  shipInventTransOrgin.InventTransId    == _movement.buffer().(fieldNum(InventTransferLine, InventTransId)) &&
                                  shipInventTrans.StatusIssue           == StatusIssue::Sold;

                        if (shipInventTrans.RecId && !shipInventTrans.inventDim().wmsLocation().whsLocationIsLPControlled())
                        {
                            inventDimParm.LicensePlateFlag = NoYes::No;
                        }
                    }

                    setPrefix(inventDim.preFix());

                    movement.parmPDSBaseValue(tmpInventTransWMS.pdsBaseValue);

                    InventUpd_Registered registered = InventTransWMS_Register::updateInventoryTransactionsRegistration(tmpInventTransWMS, movement, InventDim, inventDimParm, _dateInvent);

                    if (inventReceiptForTestRegistrator)
                    {
                        inventReceiptForTestRegistrator.merge(registered.parmInventReceiptForTestRegistrator());
                    }
                    else
                    {
                        inventReceiptForTestRegistrator = registered.parmInventReceiptForTestRegistrator();
                    }

                    if (inventDimParm.InventBatchIdFlag && !inventDim.inventBatchId)
                    {
                        inventDim = InventTrans::findRecId(tmpInventTransWMS.InventTrans).inventDim();
                    }
                    
                    InventTransWMS_Register::updateInventoryBatch(tmpInventTransWMS, inventDim);

                    inventQtySumCW += tmpInventTransWMS.PdsCWQty;

                    inventQtySum += tmpInventTransWMS.InventQty;
                }
                if (inventQtySum > 0)
                {
                    movement.pdsSumUpTransDistributeCwQtyZero();
                }
                if (inventReceiptForTestRegistrator)
                {
                    inventReceiptForTestRegistrator.parmCreateQualityItemSamplingWork(false);
                    boolean markingFlightEnabled = InventQualityOrderQueryTransFromDimensionMapFlight::instance().isEnabled();
                    using (InventQualityOrderMapMarkingDimensionContext markingDimContext = markingFlightEnabled ? InventQualityOrderMapMarkingDimensionContext::construct() : null)
                    {
                        if (markingDimContext && inventReceiptForTestRegistrator.parmUpdatedQuantitiesPerDimMap())
                        {
                            markingDimContext.initInventDimIdSetFromUpdatedQuantitiesPerDimMap(inventReceiptForTestRegistrator.parmUpdatedQuantitiesPerDimMap());
                        }
                        InventQualityManagementCreateHandler::createInventoryRegistration(
                            inventTransOriginId,
                            inventReceiptForTestRegistrator);
                    }
                }
            }

            if (_inventTransWMSRegistrationObserver
                && inventQtySum)
            {
                _inventTransWMSRegistrationObserver.notifyArrivalRegistered(inventQtySum, inventQtySumCW, inventDim);
            }

            tmpInventTransWMS.ttscommit();
            ttscommit;

            TmpInventTransWMS::makeTableEmpty(tmpInventTransWMS);
            ret = true;
        }
        catch (Exception::Error)
        {
            tmpInventTransWMS.ttsabort();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryTransactionsRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory transaction for the specified inventory movement.
    /// </summary>
    /// <param name="_tmpInventTransWMS">The pending changes <c>TmpInventTransWMS</c> temporary table.</param>
    /// <param name="_movement">An <c>InventMovement</c> object for which items are being registered.</param>
    /// <param name = "_inventDim">The <c>InventDim</c> buffer for the pending inventory changes.</param>
    /// <param name = "_inventDimParm">An <c>InventDimParm</c> buffer which contains the parameters for the <c>InventDim</c>.</param>
    /// <param name="_dateInvent">The date that is used as an update date for the inventory transaction.</param>
    /// <returns>The <c>InventUpd_Registered</c> instance used for the update.</returns>
    protected static InventUpd_Registered updateInventoryTransactionsRegistration(
        TmpInventTransWMS   _tmpInventTransWMS,
        InventMovement      _movement,
        InventDim           _inventDim,
        InventDimParm       _inventDimParm,
        TransDate           _dateInvent
    )
    {
        InventUpd_Registered registered = InventTransWMS_Register::newInventUpd_Registered(_tmpInventTransWMS, _movement, _inventDim, _inventDimParm, _dateInvent);

        registered.updateNow();

        return registered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventUpd_Registered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventUpd_Registered</c> class which is used to update the inventory for the specified inventory movement.
    /// </summary>
    /// <param name="_tmpInventTransWMS">The pending changes <c>TmpInventTransWMS</c> temporary table.</param>
    /// <param name="_movement">An <c>InventMovement</c> object for which items are being registered.</param>
    /// <param name = "_inventDim">The <c>InventDim</c> buffer for the pending inventory changes.</param>
    /// <param name = "_inventDimParm">An <c>InventDimParm</c> buffer which contains the parameters for the <c>InventDim</c>.</param>
    /// <param name="_dateInvent">The date that is used as an update date for the inventory transaction.</param>
    /// <returns>The created <c>InventUpd_Registered</c> instance.</returns>
    protected static InventUpd_Registered newInventUpd_Registered(
        TmpInventTransWMS   _tmpInventTransWMS,
        InventMovement      _movement,
        InventDim           _inventDim,
        InventDimParm       _inventDimParm,
        TransDate           _dateInvent
    )
    {
        InventUpd_Registered registered = InventUpd_Registered::newParameters(_movement,_inventDim,_inventDimParm,_inventDim,_inventDimParm,_tmpInventTransWMS.InventQty, _tmpInventTransWMS.PdsCWQty, _dateInvent);
        registered.parmSkipQualityOrderCreation(true);  // We handle quality order creation later in this method
        registered.parmSkipSumUpTransDistributeCwQtyZero(true);

        if (_tmpInventTransWMS.InventTrans)
        {
            InventTrans inventTransPrefered = InventTrans::findRecId(_tmpInventTransWMS.InventTrans);
            if (inventTransPrefered.RecId)
            {
                // Only use if sign/direction matches specified quantity.
                if ((_tmpInventTransWMS.InventQty > 0 && inventTransPrefered.StatusReceipt == StatusReceipt::Ordered)
                             || (_tmpInventTransWMS.InventQty < 0 && inventTransPrefered.StatusReceipt == StatusReceipt::Registered))
                {
                    registered.parmPreferedInventTransRecId(_tmpInventTransWMS.InventTrans);
                }
            }
        }

        if (_inventDim.InventBatchId)
        {
            registered.pdsSetBatchAttributeValue(_inventDim.InventBatchId);
        }

        return registered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls a server bound method to convert the proposed changes into real inventory updates for a given
    ///    buffer.
    /// </summary>
    /// <param name="_movementRecord">
    ///    A buffer for which items are being registered.
    /// </param>
    /// <param name="_tmpInventTransWMS">
    ///    The <c>TmpInventTransWMS</c> table.
    /// </param>
    /// <param name="_mapQtyByTmpInventTransWMSPacked">
    ///    A packed map that contains detail information to the pending records.
    /// </param>
    /// <param name="_mapInventTransInventTransOriginPacked">
    ///    A packed map that contains inventory transaction to origin mapping.
    /// </param>
    /// <returns>
    ///    true if the update succeeded; otherwise, false.
    /// </returns>
    protected static boolean updateInventOnServer(
        Common                  _movementRecord,
        TmpInventTransWMS       _tmpInventTransWMS,
        container               _mapQtyByTmpInventTransWMSPacked,
        container               _mapInventTransInventTransOriginPacked)
    {
        TransDate dateInvent = InventTransWMS_Register::getdateInvent(_movementRecord);

        InventMovement movement = InventTransWMS_Register::inventMovement(_movementRecord);

        InventTransWMSRegistrationObserver inventTransWMSRegistrationObserver = InventTransWMSRegistrationObsFactory::newfromBuffer(movement.buffer());

        boolean result = InventTransWMS_Register::updateInventFromMovementServer(movement,
                                                                                 _tmpInventTransWMS,
                                                                                 _mapQtyByTmpInventTransWMSPacked,
                                                                                 _mapInventTransInventTransOriginPacked,
                                                                                 inventTransWMSRegistrationObserver,
                                                                                 dateInvent);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory batch.
    /// </summary>
    /// <param name = "_tmpInventTransWMS">A temporary registration/picking record buffer.</param>
    /// <param name = "_inventDim">The inventory dimension record buffer.</param>
    protected static void updateInventoryBatch(TmpInventTransWMS _tmpInventTransWMS, InventDim _inventDim)
    {
        if (_inventDim.InventBatchId)
        {
            InventBatch inventBatch = InventBatch::find(_inventDim.InventBatchId, _tmpInventTransWMS.ItemId, true);
            inventBatch.pdsInitFromVendBatchDetails(_tmpInventTransWMS.bufferPdsVendBatchInfo());
            inventBatch.initializeFromTmpInventTransWMS(_tmpInventTransWMS);
            inventBatch.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTmpSerialIdServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns serial numbers to the pending registration record.
    /// </summary>
    /// <param name="_tmp">
    /// The pending <c>TmpInventTransWMS</c> registration record.
    /// </param>
    /// <param name="_serialNumberFormat">
    /// The formatting code that was provided by the user.
    /// </param>
    /// <param name="_serialNumberIntervalStart">
    /// The initial serial number that was provided by the user.
    /// </param>
    /// <param name="_serialNumberIntervalEnd">
    /// The ending serial number that was provided by the user.
    /// </param>
    protected static void updateTmpSerialIdServer(
        TmpInventTransWMS           _tmp,
        SerialNumberFormat          _serialNumberFormat,
        SerialNumberIntervalStart   _serialNumberIntervalStart,
        SerialNumberIntervalEnd     _serialNumberIntervalEnd)
    {
        TmpInventTransWMS           tmpUpd;
        InventDim                   inventDim;

        void findTmpUpd()
        {
            select forupdate tmpUpd
                where tmpUpd.RecId == _tmp.RecId;
        }

        void updateInventSerialId(Integer _serialId)
        {
            inventDim.InventSerialId = (_serialNumberIntervalStart == 0 && _serialNumberIntervalEnd == 0)  ?
                                        _serialNumberFormat                                               :
                                        NumberSeq::numInsertFormat(_serialId,_serialNumberFormat);
            tmpUpd.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
        }

        ttsbegin;

        tmpUpd.setTmpData(_tmp);

        findTmpUpd();
        inventDim = InventDim::find(tmpUpd.InventDimId);
        updateInventSerialId(_serialNumberIntervalStart);
        tmpUpd.update();

        Integer serialCount = _serialNumberIntervalStart;
        LineNum lineNum = tmpUpd.lastLineNum();

        if (PdsGlobal::pdsIsCWItem(_tmp.ItemId))
        {
            int decimalPrecision = UnitOfMeasure::findBySymbol(_tmp.UnitId).DecimalPrecision;
            while (tmpUpd.PdsCWQty > 1)
            {
                InventQty inventQty = decRound(abs(1/tmpUpd.PdsCWQty) * tmpUpd.InventQty,decimalPrecision);
                tmpUpd.InventQty -= inventQty;
                tmpUpd.PdsCWQty  -= 1;
                tmpUpd.update();

                serialCount++;

                tmpUpd.InventQty = inventQty;
                tmpUpd.PdsCWQty = 1;

                updateInventSerialId(serialCount);
                lineNum++;
                tmpUpd.LineNum = lineNum;
                tmpUpd.insert();

                findTmpUpd();   // reselect initial record
            }
        }
        else
        {
            while (tmpUpd.InventQty > 1)
            {
                tmpUpd.InventQty -= 1;
                tmpUpd.update();

                serialCount++;

                tmpUpd.InventQty = 1;
                updateInventSerialId(serialCount);
                lineNum++;
                tmpUpd.LineNum = lineNum;
                tmpUpd.insert();

                findTmpUpd();   // reselect initial record
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransSerialIdServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns serial numbers to the <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record that has serial numbers assigned to it.
    /// </param>
    /// <param name="_serialNumberFormat">
    /// The formatting code that was provided by the user.
    /// </param>
    /// <param name="_serialNumberIntervalStart">
    /// The initial serial number that was provided by the user.
    /// </param>
    /// <param name="_serialNumberIntervalEnd">
    /// The ending serial number that was provided by the user.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The <c>InventTrans</c> record has been changed in the database after you have started the process.
    /// </exception>
    public static void updateTransSerialIdServer(
        InventTrans                _inventTrans,
        SerialNumberFormat         _serialNumberFormat,
        SerialNumberIntervalStart  _serialNumberIntervalStart,
        SerialNumberIntervalEnd    _serialNumberIntervalEnd)
    {
        RecId                       recId;

        InventTrans                 inventTransUpd;
        InventDim                   inventDim;
        InventQty                   inventQty;

        void updateInventSerialId(Integer _serialId)
        {
            inventDim.InventSerialId = InventTransWMS_Register::formatSerialId(_serialId, _serialNumberFormat, _serialNumberIntervalStart, _serialNumberIntervalEnd);
            inventTransUpd.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
        }

        ttsbegin;

        InventUpdate inventUpdate = InventUpdate::newChangeTransDim(_inventTrans.inventMovement());
        inventTransUpd = InventTrans::findRecId(_inventTrans.RecId, true);

        if (! inventTransUpd.checkIsChanged(_inventTrans))
        {
            throw error("@SYS18447");
        }

        inventDim = InventDim::find(inventTransUpd.InventDimId);

        updateInventSerialId(_serialNumberIntervalStart);

        InventUpdateProcessReceiptTransactionListsCache::cacheInstance();
        inventUpdate.writeInventTrans(inventTransUpd,inventTransUpd.orig(),false);
        InventUpdateProcessReceiptTransactionListsCache::processCacheValue();        

        Integer serialCount = _serialNumberIntervalStart;

        if (PdsGlobal::pdsIsCWItem(inventTransUpd.ItemId))
        {
            if (inventTransUpd.PdsCWQty > 0)
            {
                inventQty = decRound(
                    inventTransUpd.Qty / inventTransUpd.PdsCWQty,
                    UnitOfMeasure::findBySymbol(inventTransUpd.inventUnit()).DecimalPrecision);
            }

            while (inventTransUpd.PdsCWQty > 1)
            {
                recId = inventTransUpd.RecId;

                inventTransUpd.updateSplitFromCWQty(1, inventQty);

                serialCount++;

                updateInventSerialId(serialCount);
                InventUpdateProcessReceiptTransactionListsCache::cacheInstance();
                inventUpdate.writeInventTrans(inventTransUpd,inventTransUpd.orig(),false);
                InventUpdateProcessReceiptTransactionListsCache::processCacheValue();

                inventTransUpd = InventTrans::findRecId(recId, true);
            }
        }
        else
        {
            while (inventTransUpd.Qty > 1)
            {
                recId = inventTransUpd.RecId;

                inventTransUpd.updateSplit(1);

                serialCount++;

                updateInventSerialId(serialCount);
                InventUpdateProcessReceiptTransactionListsCache::cacheInstance();
                inventUpdate.writeInventTrans(inventTransUpd,inventTransUpd.orig(),false);
                InventUpdateProcessReceiptTransactionListsCache::processCacheValue();
                
                inventTransUpd = InventTrans::findRecId(recId, true);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatSerialId</Name>
				<Source><![CDATA[
    protected static InventSerialId formatSerialId(Integer _serialId,
                                                   SerialNumberFormat _serialNumberFormat,
                                                   SerialNumberIntervalStart _serialNumberIntervalStart,
                                                   SerialNumberIntervalEnd _serialNumberIntervalEnd)
    {
        return (_serialNumberIntervalStart == 0 && _serialNumberIntervalEnd == 0) ? _serialNumberFormat : NumberSeq::numInsertFormat(_serialId,_serialNumberFormat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get TransDate from the record
    /// </summary>
    /// <param name="_record">
    ///    A buffer for which items are being registered.
    /// </param>
    /// <returns>
    /// Return the date of packing slip
    /// </returns>
    public static TransDate getDateInvent(Common _record)
    {
        TransDate           dateInvent;

        if (_record.TableId == tableNum(PurchParmLine))
        {
            PurchParmLine purchParmLine = _record;
            dateInvent = purchParmLine.purchParmTable().TransDate;
        }

        if (!dateInvent)
        {
            dateInvent = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        return dateInvent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>