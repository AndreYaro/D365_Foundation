<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCorpTaxActAppendedTable8DP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetCorpTaxActAppendedTable8DP_JP</c> class is the data provider class for the <c>AssetCorpTaxActAppendedTable8_JP</c> SSRS report.
/// The report is about Lump Sum assets.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetCorpTaxActAppendedTablesContract_JP)),
    SRSReportQueryAttribute(queryStr(AssetCorpTaxActAppendTables_JP))
]
class AssetCorpTaxActAppendedTable8DP_JP extends SrsReportDataProviderPreProcessTempDB
{
    AssetCorpTaxActAppendedTable8Tmp_JP assetCorpTaxActAppendedTable8Tmp;
    AssetCorpTaxActAppendedHeaderTmp_JP assetCorpTaxActAppendedHeaderTmp;

    TransDate startDate;
    TransDate endDate;

    FiscalYearName fiscalYearName;

    AssetSumCalc_Trans assetSumCalc;

    AssetTable assetTable;
    AssetBook assetBook;
    AssetBook refAssetBook;
    AssetMajorType assetMajorType;
    AssetBookTable assetBookTable;
    AssetPropertyGroup assetPropertyGroup;
    AssetDepreciationProfile assetDepreciationProfile;
    FiscalCalendarYear printFiscalCalendarYear;
    FiscalCalendarYear putInServiceFiscalYear;
    FiscalCalendarYear putInServiceFiscalYearNextAsset;
    PrintDate printDate;
    int numOfYearsEquallyDivided;
    int rowCount;
    CurrencyCode accountingCurrency;
    LanguageId currentUserLanguage;
    CurrencyExchangeHelper currencyExchangeHelper;

    #define.GroupNum(6)

    #AssetDepCalculation_JP
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountFromAccounttingToJPY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all transaction currency amounts from the specified accounting currency amounts.
    /// </summary>
    public void amountFromAccounttingToJPY()
    {
        // 16(8)-2
        assetCorpTaxActAppendedTable8Tmp.AcquisitionCost = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable8Tmp.AcquisitionCost);
        // 16(8)-4
        assetCorpTaxActAppendedTable8Tmp.AllowableDepreciationAmount = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable8Tmp.AllowableDepreciationAmount);
        // 16(8)-5
        assetCorpTaxActAppendedTable8Tmp.DepreciationAmount = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable8Tmp.DepreciationAmount);
        // 16(8)-6
        assetCorpTaxActAppendedTable8Tmp.UnderDepreciationAmount = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable8Tmp.UnderDepreciationAmount);
        // 16(8)-7
        assetCorpTaxActAppendedTable8Tmp.OverDepreciationAmount = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable8Tmp.OverDepreciationAmount);
        // 16(8)-8
        assetCorpTaxActAppendedTable8Tmp.OverDepAmountFromPreviousTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable8Tmp.OverDepAmountFromPreviousTerm);
        // 16(8)-9
        assetCorpTaxActAppendedTable8Tmp.AllowableDepAmountFromPreviousTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable8Tmp.AllowableDepAmountFromPreviousTerm);
        // 16(8)-10
        assetCorpTaxActAppendedTable8Tmp.DepAmountCarriedToNextTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable8Tmp.DepAmountCarriedToNextTerm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST2LocalCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the local currency amount from the specified accounting currency amount.
    /// </summary>
    /// <param name="_amountMST">
    /// The accounting currency amount used to calculate.
    /// </param>
    /// <returns>
    /// A Local currency amount that has been calculated from the accounting currency amount.
    /// </returns>
    public AmountCur amountMST2LocalCurrencyAmount(AmountMST _amountMST)
    {
        AmountCur amount;

        if (_amountMST != 0)
        {
            currencyExchangeHelper.parmRoundingRuleType(CurrencyRoundingRuleType::AssetDep_JP);

            amount = currencyExchangeHelper.calculateAccountingToTransaction(#CurrencyJPY, _amountMST, true);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepMonthsNumberInCurrentTerm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the months number to depreciate in current term.
    /// </summary>
    /// <returns>
    /// The months number to depreciate in current term
    /// </returns>
    public Months calcDepMonthsNumberInCurrentTerm()
    {
        TransDate depEndDate;

        depEndDate = mkDate(dayOfMth(putInServiceFiscalYear.StartDate),
            mthOfYr(putInServiceFiscalYear.StartDate),
            year(putInServiceFiscalYear.StartDate) + numOfYearsEquallyDivided) - 1;

        return AssetDepCalculationHelper_JP::calcNumberOfMthInDateRange(startDate, min(endDate, depEndDate) + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetCorpTaxActAppendedHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetCorpTaxActAppendedHeaderTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetCorpTaxActAppendedHeaderTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetCorpTaxActAppendedHeaderTmp_JP))
    ]
    public AssetCorpTaxActAppendedHeaderTmp_JP getAssetCorpTaxActAppendedHeaderTmp()
    {
        select assetCorpTaxActAppendedHeaderTmp;
        return assetCorpTaxActAppendedHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetCorpTaxActAppendedTable8Tmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetCorpTaxActAppendedTable8Tmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetCorpTaxActAppendedTable8Tmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetCorpTaxActAppendedTable8Tmp_JP))
    ]
    public AssetCorpTaxActAppendedTable8Tmp_JP getAssetCorpTaxActAppendedTable8Tmp()
    {
        select assetCorpTaxActAppendedTable8Tmp;
        return assetCorpTaxActAppendedTable8Tmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverDepAmountFromPreviousTerm</Name>
				<Source><![CDATA[
    public AssetAmount getOverDepAmountFromPreviousTerm(AssetTransDate  _transDate)
    {
        AssetDepEntityInquiry_PreTaxDeduction_JP assetDepEntityInquiry_PreTaxDeduction;
        AssetTableInterval assetTableInterval;
        AssetAmount carryFormardAmount;

        assetTableInterval = assetBook.AssetDepBookMap_JP::assetTableInterval(_transDate);
        assetDepEntityInquiry_PreTaxDeduction = AssetDepEntityInquiry_PreTaxDeduction_JP::construct(
            assetTable.AssetId,
            assetBook.BookId,
            assetTableInterval);

        carryFormardAmount = assetDepEntityInquiry_PreTaxDeduction.calcOverUnderBalanceCarryForward(
            [AssetDepEntityType_JP::OrdinaryDepreciation],
            _transDate);

        return max(carryFormardAmount, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report parameters from a data contract to the member variables.
    /// </summary>
    public void getReportParameters()
    {
        AssetCorpTaxActAppendedTablesContract_JP contract = this.parmDataContract();

        if (contract)
        {
            fiscalYearName = contract.parmFiscalYearName();
            printFiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), fiscalYearName);
            startDate = printFiscalCalendarYear.StartDate;
            endDate = printFiscalCalendarYear.EndDate;
            printDate = contract.parmPrintDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAssetInReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether print this asset in this report.
    /// </summary>
    /// <returns>
    /// True, print this asset in this reprot; False, don't print.
    /// </returns>
    public boolean includeAssetInReport()
    {
        TransDate depEndDateForNextAsset;
        boolean ret = false;

        putInServiceFiscalYearNextAsset = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(), refAssetBook.UsedFromDate);

        depEndDateForNextAsset = mkDate(dayOfMth(putInServiceFiscalYearNextAsset.StartDate),
            mthOfYr(putInServiceFiscalYearNextAsset.StartDate),
            year(putInServiceFiscalYearNextAsset.StartDate) + numOfYearsEquallyDivided) - 1;

        if (refAssetBook && depEndDateForNextAsset > startDate)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBlankData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the blank data.
    /// </summary>
    /// <param name="_blankColumnCount">
    /// Inserts the number of blank columns.
    /// </param>
    public void insertBlankData(int _blankColumnCount)
    {
        int blankColumn = 0;

        while (blankColumn < _blankColumnCount)
        {
            assetCorpTaxActAppendedTable8Tmp.clear();

            assetCorpTaxActAppendedTable8Tmp.RowGroupNum    = rowCount div #GroupNum;
            assetCorpTaxActAppendedTable8Tmp.ColunmGroupNum = rowCount mod #GroupNum;
            assetCorpTaxActAppendedTable8Tmp.SortingNumber  = rowCount;

            assetCorpTaxActAppendedTable8Tmp.insert();

            rowCount++;
            blankColumn++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDetailTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data to temp table.
    /// </summary>
    public void insertDetailTmpTable()
    {
        assetCorpTaxActAppendedTable8Tmp.MonthsNumberInCurrentTerm  = this.calcDepMonthsNumberInCurrentTerm();
        str dateStr;

        if (numOfYearsEquallyDivided)
        {
            // Inserts field 16(8)-4
            assetCorpTaxActAppendedTable8Tmp.AllowableDepreciationAmount = assetCorpTaxActAppendedTable8Tmp.AcquisitionCost
                * assetCorpTaxActAppendedTable8Tmp.MonthsNumberInCurrentTerm / (numOfYearsEquallyDivided * #monthsPerYear);
        }

        AssetAmount depreciationDiff = assetCorpTaxActAppendedTable8Tmp.AllowableDepreciationAmount - assetCorpTaxActAppendedTable8Tmp.DepreciationAmount;

        if (depreciationDiff && abs(depreciationDiff) < 1)
        {
            assetCorpTaxActAppendedTable8Tmp.AllowableDepreciationAmount -= depreciationDiff;
        }
        else if (assetCorpTaxActAppendedTable8Tmp.AllowableDepreciationAmount > assetCorpTaxActAppendedTable8Tmp.DepreciationAmount)
        {
            // Inserts field 16(8)-6
            assetCorpTaxActAppendedTable8Tmp.UnderDepreciationAmount = assetCorpTaxActAppendedTable8Tmp.AllowableDepreciationAmount
                - assetCorpTaxActAppendedTable8Tmp.DepreciationAmount;
        }
        else
        {
            // Inserts field 16(8)-7
            assetCorpTaxActAppendedTable8Tmp.OverDepreciationAmount = assetCorpTaxActAppendedTable8Tmp.DepreciationAmount
                - assetCorpTaxActAppendedTable8Tmp.AllowableDepreciationAmount;
        }

        // Inserts field 16(8)-9
        assetCorpTaxActAppendedTable8Tmp.AllowableDepAmountFromPreviousTerm = min(assetCorpTaxActAppendedTable8Tmp.UnderDepreciationAmount,
            assetCorpTaxActAppendedTable8Tmp.OverDepAmountFromPreviousTerm);

        // Inserts field 16(8)-1
        if (currentUserLanguage == #LanguageJA)
        {
            if (str2Int(JapaneseDateTimeHelper::date2str(putInServiceFiscalYear.StartDate, 'yy')) == 1)
                dateStr = strFmt("%1%2·%3", JapaneseDateTimeHelper::date2str(putInServiceFiscalYear.StartDate, 'gg'), JapaneseDateTimeHelper::getYearStr(putInServiceFiscalYear.StartDate), JapaneseDateTimeHelper::date2str(putInServiceFiscalYear.StartDate, 'M·d'));
            else
                dateStr = JapaneseDateTimeHelper::date2str(putInServiceFiscalYear.StartDate, #JapanDateFormat);
            
            assetCorpTaxActAppendedTable8Tmp.FiscalYearStartDate = dateStr;
            
            if (str2Int(JapaneseDateTimeHelper::date2str(putInServiceFiscalYear.EndDate, 'yy')) == 1)
                dateStr = strFmt("%1%2·%3", JapaneseDateTimeHelper::date2str(putInServiceFiscalYear.EndDate, 'gg'), JapaneseDateTimeHelper::getYearStr(putInServiceFiscalYear.EndDate), JapaneseDateTimeHelper::date2str(putInServiceFiscalYear.EndDate, 'M·d'));
            else
                dateStr = JapaneseDateTimeHelper::date2str(putInServiceFiscalYear.EndDate, #JapanDateFormat);
            
            assetCorpTaxActAppendedTable8Tmp.FiscalYearEndDate = dateStr;
        }
        else
        {
            assetCorpTaxActAppendedTable8Tmp.FiscalYearStartDate = date2StrUsr(putInServiceFiscalYear.StartDate, DateFlags::FormatAll);
            assetCorpTaxActAppendedTable8Tmp.FiscalYearEndDate = date2StrUsr(putInServiceFiscalYear.EndDate, DateFlags::FormatAll);
        }

        if (putInServiceFiscalYear.RecId == printFiscalCalendarYear.RecId)
        {
            assetCorpTaxActAppendedTable8Tmp.SortingNumber = maxInt();
        }
        else
        {
            assetCorpTaxActAppendedTable8Tmp.SortingNumber = rowCount;
        }

        assetCorpTaxActAppendedTable8Tmp.RowGroupNum = rowCount div #GroupNum;
        assetCorpTaxActAppendedTable8Tmp.ColunmGroupNum = rowCount mod #GroupNum;

        if (accountingCurrency != #CurrencyJPY)
        {
            this.amountFromAccounttingToJPY();
        }

        if (assetCorpTaxActAppendedTable8Tmp.AcquisitionCost > 0)
        {
            assetCorpTaxActAppendedTable8Tmp.insert();
            rowCount++;
        }

        assetCorpTaxActAppendedTable8Tmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeaderDataToTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AssetCorpTaxActAppendedHeaderTmp_JP</c> table.
    /// </summary>
    public void insertHeaderDataToTmp()
    {
        CompanyInfo companyInfo = CompanyInfo::find();
        str dateStr;

        if (currentUserLanguage == #LanguageJA)
        {
            //insert the value for the fiscal year start date
            if (str2Int(JapaneseDateTimeHelper::date2str(startDate, 'yy')) == 1)
                dateStr = strFmt("%1%2·%3", JapaneseDateTimeHelper::date2str(startDate, 'gg'), JapaneseDateTimeHelper::getYearStr(startDate), JapaneseDateTimeHelper::date2str(startDate, 'M·d'));
            else
                dateStr = JapaneseDateTimeHelper::date2str(startDate, #JapanDateFormat);
            assetCorpTaxActAppendedHeaderTmp.FiscalYearStartDate = strDel(dateStr, 2, 1);

            //insert the value for the fiscal year end date
            if (str2Int(JapaneseDateTimeHelper::date2str(endDate, 'yy')) == 1)
                dateStr = strFmt("%1%2·%3", JapaneseDateTimeHelper::date2str(endDate, 'gg'), JapaneseDateTimeHelper::getYearStr(endDate), JapaneseDateTimeHelper::date2str(endDate, 'M·d'));
            else
                dateStr = JapaneseDateTimeHelper::date2str(endDate, #JapanDateFormat);
            assetCorpTaxActAppendedHeaderTmp.FiscalYearEndDate   = strDel(dateStr, 2, 1);

            //insert the value for the fiscal year start date by the capital date
            assetCorpTaxActAppendedHeaderTmp.YearOfStartDateAppended = JapaneseDateTimeHelper::date2str(startDate, #ParameterName)
                + (str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterYear)) == 1 ? JapaneseDateTimeHelper::getYearStr(startDate) : Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterYear)), true, false, 1))
                + enum2str(DateSeparator::Dot) + Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterMonth)), true, false, 1)
                + enum2str(DateSeparator::Dot) + Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterDay)), true, false, 1);
        }
        else
        {
            //insert the value for the fiscal year start date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearStartDate = date2StrUsr(startDate, DateFlags::FormatAll);

            //insert the value for the fiscal year end date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearEndDate = date2StrUsr(endDate, DateFlags::FormatAll);

            //insert the value for the fiscal year start date by the capital date
            assetCorpTaxActAppendedHeaderTmp.YearOfStartDateAppended = date2StrUsr(StartDate, DateFlags::FormatAll);
        }

        //insert the value of company's name
        assetCorpTaxActAppendedHeaderTmp.Name = companyInfo.Name;

        //insert the value of company's Kana name
        assetCorpTaxActAppendedHeaderTmp.PhoneticName = companyInfo.PhoneticName;

        assetCorpTaxActAppendedHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the specified values.
    /// </summary>
    public void processReport()
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource assetTable_ds;
        QueryBuildDataSource assetBook_ds;
        QueryBuildDataSource assetDepreciationProfile_ds;
        Set processedAssets = new Set(Types::String);

        this.getReportParameters();

        // Initialize global variables, those variables are added in order to improve the performance.
        accountingCurrency  = Ledger::accountingCurrency();
        currentUserLanguage = currentUserLanguage();
        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::current(),
            printDate);

        this.insertHeaderDataToTmp();

        rowCount = 0;
        query = this.parmQuery();

        AssetCorpTaxActAppendTablesHelper_JP::useAssetBookForAssetDepreciationProfileJoin(query);

        assetTable_ds = query.dataSourceTable(tableNum(AssetTable));
        SysQuery::findOrCreateRange(assetTable_ds, fieldNum(AssetTable, AssetType)).value(SysQuery::valueNot(enum2str(AssetType::Deferred_JP)));
        SysQuery::findOrCreateRange(assetTable_ds, fieldNum(AssetTable, AssetClassification_JP)).value(queryValue(enum2str(AssetClassification_JP::LumpSum)));

        assetBook_ds = query.dataSourceTable(tableNum(AssetBook));
        SysQuery::findOrCreateRange(assetBook_ds, fieldNum(AssetBook, Status)).value(SysQuery::valueNot(enum2str(AssetStatus::NoAcquisition)));
        SysQuery::findOrCreateRange(assetBook_ds, fieldNum(AssetBook, UsedFromDate)).value(queryRange(dateNull(), endDate));
        assetBook_ds.addOrderByField(fieldNum(AssetBook, UsedFromDate));

        assetDepreciationProfile_ds = query.dataSourceTable(tableNum(AssetDepreciationProfile));
        SysQuery::findOrCreateRange(assetDepreciationProfile_ds, fieldNum(AssetDepreciationProfile, Method)).value(enum2str(AssetDepreciationMethod::EquallyDivided_JP));

        queryRun = new QueryRun(query);
        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetBookTable)), fieldNum(AssetBookTable, CurrentOperationsTax)).value(queryValue(enum2int(CurrentOperationsTax::Current)));

        while (queryRun.next())
        {
            assetTable = queryRun.get(tableNum(AssetTable));

            if (!processedAssets.in(assetTable.AssetId))
            {
                assetBook = queryRun.get(tableNum(AssetBook));
                assetBookTable = queryRun.get(tableNum(AssetBookTable));
                assetMajorType = queryRun.get(tableNum(assetMajorType));
                assetPropertyGroup = queryRun.get(tableNum(AssetPropertyGroup));
                assetDepreciationProfile = queryRun.get(tableNum(AssetDepreciationProfile));

                refAssetBook = null;
                if (assetBookTable.LinkedCurrentLayerAssetBookTable_JP)
                {
                    refAssetBook = AssetBook::find(assetTable.AssetId, assetBookTable.LinkedCurrentLayerAssetBookTable_JP);
                }

                if (!refAssetBook)
                {
                    // If the referenced value model isn't setup, take the related value from current value model,
                    // So assign current value model to refAssetBook variable.
                    refAssetBook = assetBook;
                }

                numOfYearsEquallyDivided = assetDepreciationProfile.NumOfYearsEquallyDivided_JP;

                if (processedAssets.empty() && refAssetBook)
                {
                    putInServiceFiscalYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(), refAssetBook.UsedFromDate);
                }

                if (this.includeAssetInReport())
                {
                    // Gets the depreciaton method for this value model as the current depreciaton method.
                    assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, refAssetBook.BookId, dateNull(), endDate);

                    this.summaryDetailDataToTmpTable();
                }

                processedAssets.add(assetTable.AssetId);
            }
        }

        // Insert the last record.
        this.insertDetailTmpTable();

        if (rowCount == 0
            || rowCount mod #GroupNum)
        {
            this.insertBlankData(#GroupNum - (rowCount mod #GroupNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryDetailDataToTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes and inserts the data to temp table.
    /// </summary>
    public void summaryDetailDataToTmpTable()
    {
        AssetSumCalc_Trans  assetSumCalcAcq;
        Set                         docTypes;
        AssetDocumentSumCalcUtil_JP docSumCalcUtil;

        assetSumCalcAcq = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, assetBook.BookId, dateNull(), endDate);
        docTypes = new Set(Types::Container);
        docTypes.add([AssetTransType::Acquisition, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::AcquisitionAdj, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::Depreciation, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::DepreciationAdj, AssetDocumentType_JP::AssetRetirementObligation]);
        docSumCalcUtil = AssetDocumentSumCalcUtil_JP::construct(docTypes);
        assetSumCalcAcq.parmDocSumCalcUtil_JP(docSumCalcUtil);

        if (putInServiceFiscalYear.RecId != putInServiceFiscalYearNextAsset.RecId)
        {
            this.insertDetailTmpTable();

            putInServiceFiscalYear = putInServiceFiscalYearNextAsset;
        }

        // Inserts field 16(8)-2
        assetCorpTaxActAppendedTable8Tmp.AcquisitionCost += assetSumCalcAcq.acquisitionValue() + assetSumCalcAcq.acquisitionAdjValue() - assetSumCalcAcq.getRetirementObligationAcquisitionValue_JP();

        // Inserts field 16(8)-5
        assetCorpTaxActAppendedTable8Tmp.DepreciationAmount += AssetDepTransMap_JP::calcAccumulatedDepAmountMst(refAssetBook, startDate, endDate);
        // Inserts field 16(8)-8
        assetCorpTaxActAppendedTable8Tmp.OverDepAmountFromPreviousTerm += this.getOverDepAmountFromPreviousTerm(startDate - 1);
        // Inserts field 16(8)-10
        // DepAmountCarriedToNextTerm equls to the OverDepAmountFromPreviousTerm of next term
        assetCorpTaxActAppendedTable8Tmp.DepAmountCarriedToNextTerm += this.getOverDepAmountFromPreviousTerm(endDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>