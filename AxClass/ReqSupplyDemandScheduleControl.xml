<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqSupplyDemandScheduleControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqSupplyDemandScheduleControl
{
    #ReqSupplyDemandScheduleTypes

    FormTableControl    formTableControl;

    str                 expand;
    str                 collapse;
    str                 indent;
    int                 typeName;
    int                 parent;
    str                 description;

    container           rowStructure;
    container           rowMapping;

    boolean             isExpanded;
    boolean             isExpandable;
    boolean             isHidden;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTableControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the form table control rows based on the specified row structure.
    /// </summary>
    /// <returns>
    ///    A container that has the rows in the table control to render.
    /// </returns>
    public container buildTableControl()
    {
        #define.noParent(0)
        Counter     counter;
        int         indentLevel;
        int         tableControlRowCounter  = 1;
        Map         expandableElement       = new Map(Types::Integer, Types::Integer);
        container   renderRows;

        // Reset form table control and row mapping
        formTableControl.rows(0);
        rowMapping = conNull();

        // Traverse the table row structure
        for (counter = 1; counter <= conLen(rowStructure); counter++)
        {
            // Get values for the next row
            this.setRowValues(conPeek(rowStructure, counter));

            // Skip row if it is hidden
            if (!isHidden)
            {
                if (parent == #noParent)
                {
                    indentLevel = 0;
                }
                else
                {
                    // Set indent level based on indent level of parent
                    indentLevel = expandableElement.lookup(parent) + 1;
                }

                // Save indent level of expandable element
                expandableElement.insert(typeName, indentLevel);

                // Create a new row and set the table control row description
                formTableControl.insertRows(tableControlRowCounter, 1);
                renderRows = renderRows + [tableControlRowCounter, counter];
                formTableControl.setRowLabel(tableControlRowCounter, this.displayName(indentLevel));

                // Maintain the row to table control row mapping
                rowMapping = conIns(rowMapping, tableControlRowCounter, counter);

                if (isExpandable)
                {
                    // Save indent level of last expandable element
                    expandableElement.insert(typeName, indentLevel);

                    // Skip unexpanded nodes
                    if (!isExpanded)
                    {
                        counter = this.skipUnexpandedNodes(counter, parent);
                    }
                }

                tableControlRowCounter++;
            }
        }

        return renderRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collapse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Collapses the specified row.
    /// </summary>
    /// <param name="_row">
    ///    An integer that represents the row to collapse.
    /// </param>
    public void collapse(int _row)
    {
        int     originalIndentLevel;
        int     linesDeleted;
        str     indentFirstChar = this.makeTextNonBreakable(subStr(indent, 1, 1));

        // Update row structure to set the row as collapsed
        rowStructure = conPoke(rowStructure, this.getTableNumberFromRowNumber(_row), conPoke(conPeek(rowStructure, this.getTableNumberFromRowNumber(_row)), 4, false));

        originalIndentLevel = strLen(subStr(formTableControl.rowLabel(_row), 1, strFind(formTableControl.rowLabel(_row), subStr(expand, 1, 1), 1, strLen(formTableControl.rowLabel(_row))) - 1));

        this.setRowValues(conPeek(rowStructure, this.getTableNumberFromRowNumber(_row)));

        formTableControl.setRowLabel(_row, this.displayName(originalIndentLevel div strLen(indent)));

        do
        {
            linesDeleted++;
        }
        while (subStr(formTableControl.rowLabel(_row + linesDeleted), 1, 1) == indentFirstChar && subStr(formTableControl.rowLabel(_row + linesDeleted), originalIndentLevel + 1, 1) == indentFirstChar);

        formTableControl.deleteRows(_row + 1, linesDeleted - 1);

        rowMapping = conDel(rowMapping, _row + 1, linesDeleted - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRowData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether or not the row is expanded.
    /// </summary>
    /// <param name="_row">
    ///    An integer that contains a row in the form table control.
    /// </param>
    /// <returns>
    ///    A container that has the data of a row.
    /// </returns>
    public container currentRowData(int _row)
    {
        int         tableDataRow;

        // Find data that corresponds to the row in the table control
        tableDataRow = this.getTableNumberFromRowNumber(_row);

        // Return data for the row
        if (tableDataRow)
        {
            return conPeek(rowStructure, tableDataRow);
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current row label based on indentation and description.
    /// </summary>
    /// <param name="_indentLevel">
    ///    An integer that represents the indentation level.
    /// </param>
    /// <returns>
    ///    A string with the row label.
    /// </returns>
    private str displayName(int _indentLevel)
    {
        Counter     counter;
        str         displayName;

        // Add identation
        for (counter = 0; counter < _indentLevel; counter++)
        {
            displayName += indent;
        }

        // Is the node expandable?
        if (isExpandable)
        {
            // Is the node expanded?
            if (isExpanded)
            {
                // Add legend for collapsable node
                displayName += collapse;
            }
            else
            {
                // Add legend for expandable node
                displayName += expand;
            }
        }

        // Add description
        displayName = displayName + description;

        displayName = this.makeTextNonBreakable(displayName);

        return displayName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expands the specified row.
    /// </summary>
    /// <param name="_row">
    ///    An integer that representing the row to expend.
    /// </param>
    /// <returns>
    ///    A container that has the rows in the table control to render.
    /// </returns>
    public container expand(int _row)
    {
        Counter     expandCount;
        Counter     counter;
        int         rowCounter;
        int         startIndentLevel;
        int         indentLevel;
        int         inserts;
        int         lastElement;
        int         parentStartElement;
        int         nextRowValue;
        str         nextRowText;
        container   renderRows;
        int         tableNumberFromRowNumber    = this.getTableNumberFromRowNumber(_row);
        Map         expandableElement           = new Map(Types::Integer, Types::Integer);

        formTableControl.lock();

        // Find values and description of the row following the row to be expanded
        if (_row < formTableControl.rows())
        {
            nextRowValue = this.getTableNumberFromRowNumber(_row +  1);
            nextRowText = formTableControl.rowLabel(_row + 1);
        }
        else
        {
            nextRowValue = tableNumberFromRowNumber + 1;
        }

        // Update row structure to set the row as expanded
        rowStructure = conPoke(rowStructure, tableNumberFromRowNumber, conPoke(conPeek(rowStructure, tableNumberFromRowNumber), 4, true));

        // Find parent node
        this.setRowValues(conPeek(rowStructure, tableNumberFromRowNumber));
        parentStartElement = parent;

        // Calculate indent level
        startIndentLevel = (strFind(formTableControl.rowLabel(_row), subStr(collapse, 1, 1), 1, strLen(formTableControl.rowLabel(_row))) - 1) div strLen(indent);

        // Update row label to show node as expanded
        this.setRowValues(conPeek(rowStructure, this.getTableNumberFromRowNumber(_row)));
        formTableControl.setRowLabel(_row, this.displayName(startIndentLevel));

        expandableElement.insert(typeName, startIndentLevel);

        if (_row < formTableControl.rows())
        {
            expandCount = nextRowValue - tableNumberFromRowNumber - 1;
            lastElement = tableNumberFromRowNumber + expandCount;
        }
        else
        {
            lastElement = conLen(rowStructure);
        }

        rowCounter = _row + 1;

        for (counter = tableNumberFromRowNumber + 1; counter <= lastElement; counter++)
        {
            this.setRowValues(conPeek(rowStructure, counter));

            if (!isHidden)
            {
                if (parent == 0)
                {
                    indentLevel = 0;
                }
                else
                {
                    if (expandableElement.exists(parent))
                    {
                        indentLevel = expandableElement.lookup(parent) + 1;
                    }
                }

                expandableElement.insert(typeName, indentLevel);

                formTableControl.insertRows(rowCounter, 1);
                renderRows = renderRows + [rowCounter, counter];
                inserts++;

                formTableControl.setRowLabel(rowCounter, this.displayName(indentLevel));

                rowMapping = conIns(rowMapping, rowCounter, counter);

                if (isExpandable)
                {
                    expandableElement.insert(typeName, indentLevel);

                    // Skip hidden nodes
                    if (!isExpanded)
                    {
                        counter = this.skipUnexpandedNodes(counter, parent);
                    }
                }

                rowCounter++;
            }
        }

        if (nextRowText)
        {
            formTableControl.setRowLabel(_row + inserts + 1, nextRowText);

            renderRows = renderRows + [_row + inserts + 1, this.getTableNumberFromRowNumber(_row + inserts + 1)];
        }

        formTableControl.unLock(true);

        return renderRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPeriod</Name>
				<Source><![CDATA[
    public int getCurrentPeriod()
    {
        return formTableControl.column();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentSelection</Name>
				<Source><![CDATA[
    public int getCurrentSelection()
    {
        return this.getTableNumberFromRowNumber(formTableControl.row());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRowNumberFromTableNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number in the row structure that corresponds to the row number in the form table control.
    /// </summary>
    /// <param name="_row">
    ///    An integer that represents the form table row number.
    /// </param>
    /// <returns>
    ///    A row in the row structure.
    /// </returns>
    public int getRowNumberFromTableNumber(int _row)
    {
        int i;
        int j = 1;

        while (i != _row && j < conLen(rowMapping))
        {
            j++;
            i = conPeek(rowMapping, j);
        }

        return (i == _row) ? j : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableNumberFromRowNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number in the form table control that corresponds to the row number in the row structure.
    /// </summary>
    /// <param name="_rowNumber">
    ///    An integer that contains the row structure row number.
    /// </param>
    /// <returns>
    ///    A row in the form table control.
    /// </returns>
    public int getTableNumberFromRowNumber(int _rowNumber)
    {
        return conPeek(rowMapping, _rowNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRowExpanded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether or not the row is expanded.
    /// </summary>
    /// <param name="_row">
    ///    An integer that contains a row in the form table control.
    /// </param>
    /// <returns>
    ///    true if the row is currently expanded; otherwise, false.
    /// </returns>
    public boolean isRowExpanded(int _row)
    {
        return conPeek(conPeek(rowStructure, this.getTableNumberFromRowNumber(_row)), #isExpanded);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollapse</Name>
				<Source><![CDATA[
    public str parmCollapse(str _collapse = collapse)
    {
        collapse = _collapse;

        return collapse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpand</Name>
				<Source><![CDATA[
    public str parmExpand(str _expand = expand)
    {
        expand = _expand;

        return expand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormTableControl</Name>
				<Source><![CDATA[
    public FormTableControl parmFormTableControl(FormTableControl _formTableControl = formTableControl)
    {
        formTableControl = _formTableControl;

        return formTableControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIndent</Name>
				<Source><![CDATA[
    public str parmIndent(str _indent = indent)
    {
        indent = _indent;

        return indent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRowStructure</Name>
				<Source><![CDATA[
    public container parmRowStructure(container _rowStructure = rowStructure)
    {
        rowStructure = _rowStructure;

        return rowStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRowValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Extracts information about a row from a container.
    /// </summary>
    /// <param name="_currentRow">
    ///    A container that has information about a row in the row structure.
    /// </param>
    private void setRowValues(container _currentRow)
    {
        typeName        = conPeek(_currentRow, #typeName);
        description     = conPeek(_currentRow, #description);
        isExpandable    = conPeek(_currentRow, #isExpandable);
        isExpanded      = conPeek(_currentRow, #isExpanded);
        isHidden        = conPeek(_currentRow, #isHidden);
        parent          = conPeek(_currentRow, #parent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableRowsVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates shown/hidden state of all row in the row structure based on a container
    /// </summary>
    /// <param name="_currentRow">
    /// A container holding information about the shown/hidden state of the rows
    /// </param>
    public void setTableRowsVisible(container _rowsVisible)
    {
        int         rowCounter;
        boolean     hide;

        // Traverse the show/hidden state of the rows in the row structure
        for (rowCounter = 1; rowCounter <= conLen(_rowsVisible); rowCounter++)
        {
            hide = !conPeek(_rowsVisible, rowCounter);

            // Update state of the row to hidden
            rowStructure = conPoke(rowStructure, rowCounter, conPoke(conPeek(rowStructure, rowCounter), #isHidden, hide));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipUnexpandedNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Skips an unexpanded row in the row structure.
    /// </summary>
    /// <param name="_startRow">
    ///    An integer that contains the start row.
    /// </param>
    /// <param name="_parentOfExpandable">
    ///    A string that represents the type name of the parent of the expandable node.
    /// </param>
    /// <returns>
    ///    The next row after the expanded nodes.
    /// </returns>
    private int skipUnexpandedNodes(int _startRow, int _parentOfExpandable)
    {
        Counter rowCounter = _startRow;

        // Skip unexpanded nodes that should not be rendered in the table control
        do
        {
            rowCounter++;
            this.setRowValues(conPeek(rowStructure, rowCounter));
        }
        while ((parent > _parentOfExpandable && parent != 0) && rowCounter < conLen(rowStructure));

        if (rowCounter < conLen(rowStructure))
        {
            rowCounter--;
        }

        return rowCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqSupplyDemandScheduleControl construct()
    {
        return new ReqSupplyDemandScheduleControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeTextNonBreakable</Name>
				<Source><![CDATA[
    private str makeTextNonBreakable(str text)
    {
        const int nonBreakingSpaceUtf16Code = 160;

        return strReplace(text, ' ', num2Char(nonBreakingSpaceUtf16Code));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>