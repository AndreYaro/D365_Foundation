<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTGenerateXMLFromDataset_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generated xml file from dataset for China GBT 24589.
/// </summary>
class GBTGenerateXMLFromDataset_CN
{
    Filename                exportXMLFilePath;
    PeriodName              periodName;

    XmlTextWriter           xmlTextWriter;
    XmlDocument             xmlDoc;

    #LedgerGBT_CN
    #AOT
    #File
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateXMLFromDataStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the final xml file from dataset.
    /// </summary>
    /// <param name="_category">
    /// The GBT Xml category.
    /// </param>
    /// <param name="_GBTDataStructure">
    /// The GBTDataStructure_CN object that have been used to generate xml file.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void generateXMLFromDataStructure(
        GBTXmlCategory_CN   _category,
        GBTDataStructure_CN _GBTDataStructure)
    {
        System.Data.DataTableCollection     dtc;
        System.Data.DataTable               dt;
        System.Data.DataColumnCollection    dcc;
        System.Data.DataRowCollection       drc;
        System.Data.DataColumn              dc;
        System.Data.DataRow                 dr;
        System.Data.DataSet                 ds;
        str                                 xmlFileName;
        str                                 xmlFilePath;

        GBTDataElementTypeInfo_CN           GBTDataElementTypeInfo;
        System.Data.DataView                dataView;
        str                                 dataTableName;

        int tablesCount;
        int columnsCount;
        int rowsCount;
        int i;
        int j;
        int x;
        str elementValue;

        ds = _GBTDataStructure.parmDataSet();
        GBTDataElementTypeInfo = _GBTDataStructure.parmDataElementTypeInfo();
        if (!CLRInterop::isNull(ds))
        {
            xmlFileName   = this.getXmlFileName(_category);
            xmlFilePath   = exportXMLFilePath + #FilePathDelimiter + xmlFileName + #xml;
            xmlTextWriter = XmlTextWriter::newFile(xmlFilePath, #Encoding);

            // Writes xml file start document
            this.writeStartDoc(_category);

            // Gets data from data set and writes the xml
            dtc         = ds.get_Tables();
            tablesCount = dtc.get_Count();
            for (i = 0; i < tablesCount; i++)
            {
                dt = dtc.get_Item(i);

                //For data table Account balance and net amount, sort by Ledger account
                dataTableName = dt.get_TableName();
                if (dataTableName == #TableName_AccountBalanceAndNetAmount)
                {
                    dataView = dt.get_DefaultView();
                    dataView.set_Sort(#ColumnName_LegerAccount);
                    dt = dataView.ToTable();
                }

                //Gets data table column and row info
                dcc             = dt.get_Columns();
                drc             = dt.get_Rows();
                rowsCount       = drc.get_Count();
                columnsCount    = dcc.get_Count();

                if (rowsCount == 0)
                {
                    // Writes start table
                    this.writeStartTable(dataTableName);
                    // For each row loops all columns
                    for (x = 0; x < columnsCount; x++)
                    {
                        dc = dcc.get_Item(x);
                        this.writeField(dc, GBTDataElementTypeInfo.format(dataTableName, dc.get_ColumnName(), ''));
                    }
                    // Writes end table
                    this.writeEndTable();
                }
                else
                {
                    // loops all rows
                    for (j = 0; j < rowsCount; j++)
                    {
                        // Writes start table
                        this.writeStartTable(dataTableName);
                        // For each row loops all columns
                        for (x = 0; x < columnsCount; x++)
                        {
                            elementValue = '';
                            dc = dcc.get_Item(x);
                            dr = drc.get_Item(j);
                            if (!dr.IsNull(x))
                            {
                                elementValue = dr.get_Item(x);
                            }
                            this.writeField(dc, elementValue);
                        }
                        // Writes end table
                        this.writeEndTable();
                    }
                }
            }
            // Writes xml file end document
            this.writeEndDoc();
            xmlTextWriter.close();
            info(strFmt("@GLS223099" + #FileExtensionDelimiter, xmlFileName + #xml, exportXMLFilePath));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Export Xml file name by GBTXMLCategory.
    /// </summary>
    /// <param name="_category">
    /// The GBT Xml category.
    /// </param>
    /// <returns>
    /// Xml file name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str getXmlFileName(GBTXmlCategory_CN _category)
    {
        str xmlFileName;

        switch (_category)
        {
            case GBTXmlCategory_CN::Common:
                xmlFileName = #GBTSchema_Common_Name + #UnderScore + periodName;
                break;

            case GBTXmlCategory_CN::GL:
                xmlFileName = #GBTSchema_GL_Name + #UnderScore + periodName;
                break;

            case GBTXmlCategory_CN::ARAP:
                xmlFileName = #GBTSchema_ARAP_Name + #UnderScore + periodName;
                break;

            case GBTXmlCategory_CN::FA:
                xmlFileName = #GBTSchema_FA_Name + #UnderScore + periodName;
                break;
        }
        return xmlFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>GBTGenerateXMLFromDataset_CN</c> class.
    /// </summary>
    /// <param name="_filePath">
    /// The file path.
    /// </param>
    /// <param name="_periodName">
    /// The period name.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(
        Filename _filePath,
        PeriodName _periodName)
    {
        exportXMLFilePath = _filePath;
        periodName = _periodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeEndDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the end document.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void writeEndDoc()
    {
        xmlTextWriter.writeEndElement();
        xmlTextWriter.writeEndDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeEndTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the end table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void writeEndTable()
    {
        xmlTextWriter.writeEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the field into xml.
    /// </summary>
    /// <param name="_dc">
    /// The dataset column.
    /// </param>
    /// <param name="_elementValue">
    /// The dataset field value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void writeField(System.Data.DataColumn _dc, anytype _elementValue)
    {
        str columnName;

        columnName = _dc.get_ColumnName();

        // if element type is date and value is date null, needn't to export this element.
        if (_elementValue != #DateNullString)
        {
            xmlTextWriter.writeStartElement(columnName);
            xmlTextWriter.writeString(_elementValue);
            xmlTextWriter.writeEndElement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStartDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the Xml start documentation.
    /// </summary>
    /// <param name="_category">
    /// The GBT Xml category.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void writeStartDoc(GBTXmlCategory_CN   _category)
    {
        str schemaName;
        str elementName;

        if (xmlTextWriter)
        {
            xmlTextWriter.writeStartDocument();

            switch (_category)
            {
                case GBTXmlCategory_CN::Common:
                    schemaName = #SchemaName_Common;
                    elementName = #CommonXMLNameSpaceId;
                    break;

                case GBTXmlCategory_CN::GL:
                    schemaName = #SchemaName_GL;
                    elementName = #GLXMLNameSpaceId;
                    break;

                case GBTXmlCategory_CN::ARAP:
                    schemaName = #SchemaName_ARAP;
                    elementName = #ARAPXMLNameSpaceId;
                    break;

                case GBTXmlCategory_CN::FA:
                    schemaName = #SchemaName_FA;
                    elementName = #FAXMLNameSpaceId;
                    break;
            }
            xmlTextWriter.writeStartElement(elementName);

            xmlTextWriter.writeAttributeString(strFmt(#NameSpaceFormat, #XSI, #SchemaLoc), #LinkNameSpace + ' ' + schemaName);
            xmlTextWriter.writeAttributeString(strFmt(#NameSpaceFormat, #XMLNameSpace, #Enterprise), #LinkNameSpace);
            xmlTextWriter.writeAttributeString(#XMLNameSpace, #LinkNameSpace);
            xmlTextWriter.writeAttributeString(strFmt(#NameSpaceFormat, #XMLNameSpace, #XSI), #LinkXSI);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStartTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the start table.
    /// </summary>
    /// <param name="_name">
    /// A <c>Name</c> value of the data table name.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void writeStartTable(Name _name)
    {
        xmlTextWriter.writeStartElement(_name);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>