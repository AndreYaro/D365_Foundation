<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalFormTransBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJournalFormTransBOM extends ProdJournalFormTrans
{
    ProdJournalBOM      prodJournalBOM;

    ProdBOM             prodBOM;
    FormDataSource      prodBOM_ds;

    ProdTable           prodTable;
    FormDataSource      prodTable_ds;

    FormStringControl   ctrlGridItemId;
    FormStringControl   ctrlItemId;

    FormStringControl   ctrlGridBOMUnit;

    FormStringControl   ctrlPosition;
    FormIntControl      ctrlOprNum;

    PdsCWFormCtrl       cwFormCtrl;
    ProjInventJournalTransMapForm   projInventJournalTransMapForm;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowDimEdit</Name>
				<Source><![CDATA[
    boolean allowDimEdit()
    {
        WMSOrder  wmsOrder;

        select firstonly RecId from wmsOrder
            where wmsOrder.inventTransId == prodJournalBOM.InventTransId;

        return !wmsOrder.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    void datasourceActivePost()
    {
        super();

        if (inventDim_ds)
            inventDim_ds.allowEdit(this.allowDimEdit());

        this.updateDesign(InventDimFormDesignUpdate::Active);

        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceActivePost();
        }
        if (prodTable_ds)
            prodTable_ds.active();

        if (prodBOM_ds)
            prodBOM_ds.active();

        if (inventDim_ds)
            inventDim_ds.active();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePost</Name>
				<Source><![CDATA[
    void datasourceCreatePost()
    {
        inventDim_ds.allowEdit(true);
        this.doAllowEditTransId();
        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceCreatePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    void datasourceInitPost(JournalTransMap _journalTrans)
    {
        super(_journalTrans);
        prodJournalBOM  = _journalTrans;
        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceInitPost(_journalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePost</Name>
				<Source><![CDATA[
    void datasourceInitValuePost()
    {
        super();

        if (journalTableData)
        {
            ProdJournalTable prodJournalTable = journalTableData.journalTable();
            if (prodJournalTable.RecId && prodJournalTable.ProdId)
            {
                prodTable.data(ProdTable::find(prodJournalTable.ProdId));
                prodTable_ds.setCurrent();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePre</Name>
				<Source><![CDATA[
    void datasourceInitValuePre()
    {
        super();

        if (journalTableData)
            journalTransData.initFromJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePost</Name>
				<Source><![CDATA[
    void datasourceWritePost()
    {
        super();

        if (prodJournalBOM.InventDimId != inventDim.InventDimId)
        {
            inventDim.data(InventDim::find(prodJournalBOM.InventDimId));
            inventDim_ds.setCurrent();
        }

        prodBOM.data(prodJournalBOM.prodBOM(false));
        prodBOM_ds.setCurrent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePre</Name>
				<Source><![CDATA[
    void datasourceWritePre()
    {
        prodJournalBOM.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
        super();
        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceWritePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayJournalNumOfLines</Name>
				<Source><![CDATA[
    JournalNumOfLines displayJournalNumOfLines(JournalTransMap _journalTrans)
    {
        return journalTableData.journalTable().NumOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllowEditTransId</Name>
				<Source><![CDATA[
    void doAllowEditTransId()
    {
        boolean allowEdit = (prodJournalBOM.InventTransId ? false : true);
        ctrlGridItemId.allowEdit(allowEdit);
        ctrlGridBOMUnit.allowEdit(allowEdit);
        ctrlItemId.allowEdit(allowEdit);
        ctrlPosition.allowEdit(allowEdit);
        ctrlOprNum.allowEdit(allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedActivityNumberPost</Name>
				<Source><![CDATA[
    void fieldModifiedActivityNumberPost()
    {
        if (prodJournalBOM.isProjMethodConsumed())
        {
            this.projInventJournalTransMapForm().fieldModifiedActivityNumberPost();
            FormDataUtil::getFormDataSource(prodJournalBOM).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedBomConsumpPost</Name>
				<Source><![CDATA[
    void fieldModifiedBomConsumpPost()
    {
        prodJournalBOM.populateInventoryConsumption();

        if(prodJournalBOM.existsOppositeQtyTransId())
        {
            throw error("@SCM:PostPartSameLotIDNotSupported");
        }
   
        if (prodJournalBOM.isProjMethodConsumed())
        {
            this.projInventJournalTransMapForm().fieldModifiedQtyPost();
            FormDataUtil::getFormDataSource(prodJournalBOM).refresh();
        }

        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldnum(ProdJournalBOM,bomConsump));
            FormDataUtil::getFormDataSource(prodJournalBOM).refresh();
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            this.setPhysicalStorno_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedBomUnitIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedBomUnitIdPost()
    {
        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldnum(ProdJournalBOM,bomUnitId));
        }

        prodJournalBOM.defaultInventoryConsumption();

        this.fieldModifiedProjSalesUnitIdPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedInventConsumpPost</Name>
				<Source><![CDATA[
    void fieldModifiedInventConsumpPost()
    {
        if (prodJournalBOM.isProjMethodConsumed())
        {
            this.projInventJournalTransMapForm().fieldModifiedQtyPost();
            FormDataUtil::getFormDataSource(prodJournalBOM).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedInventTransIdPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the journal line data, the inventory dimension data, and matches the production order to
    ///    the one indicated by the newly selected <c>InventTransId</c> value.
    /// </summary>
    public void fieldModifiedInventTransIdPost()
    {
        ProdBOM tmpProdBOM = prodJournalBOM.prodBOM(false);

        // set the ProdId in case it was cleared
        if (!tmpProdBOM)
        {
            tmpProdBOM.ProdId = prodJournalBOM.ProdId;
        }
        prodJournalBOM.initFromProdBOM(tmpProdBOM);

        prodBOM.data(tmpProdBOM);
        prodTable.data(ProdTable::find(prodJournalBOM.ProdId));

        if (this.allowDimEdit())
        {
            inventDim.data(InventDim::find(prodJournalBOM.InventDimId));
            inventDim_ds.allowEdit(true);
        }
        else
            inventDim_ds.allowEdit(false);

        prodBOM_ds.refresh();
        prodTable_ds.refresh();

        this.updateDesign(InventDimFormDesignUpdate::FieldChange);
        this.doAllowEditTransId();
        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldnum(ProdJournalBOM,ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedItemIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedItemIdPost()
    {
        prodJournalBOM.initFromInventTable(prodJournalBOM.inventTable());
        inventDim.data(InventDim::find(prodJournalBOM.InventDimId));
        inventDim_ds.setCurrent();
        this.updateDesign(InventDimFormDesignUpdate::FieldChange);

        if (prodJournalBOM.isProjMethodConsumed())
        {
            this.projInventJournalTransMapForm().fieldModifiedItemIdPost();
            FormDataUtil::getFormDataSource(prodJournalBOM).refresh();
        }
        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldnum(ProdJournalBOM,ItemId));
            FormDataUtil::getFormDataSource(prodJournalBOM).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPdsCWInventComsump</Name>
				<Source><![CDATA[
    public void fieldModifiedPdsCWInventComsump()
    {
        if (cwFormCtrl)
        {
            InventQty preQty = prodJournalBOM.bomConsump;
            cwFormCtrl.fieldModified(fieldnum(ProdJournalBOM,PdsCWInventConsump));
            if (preQty != prodJournalBOM.bomConsump)
            {
                prodJournalBOM.populateInventoryConsumption();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProdIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedProdIdPost()
    {
        super();

        this.projInventJournalTransMapForm().initFromProdTable(prodJournalBOM.prodTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjCatetoryIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedProjCatetoryIdPost()
    {
        if (prodJournalBOM.isProjMethodConsumed())
        {
            this.projInventJournalTransMapForm().fieldModifiedProjCatetoryIdPost();
            FormDataUtil::getFormDataSource(prodJournalBOM).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjSalesCurrencyIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedProjSalesCurrencyIdPost()
    {
        if (prodJournalBOM.isProjMethodConsumed())
        {
            this.projInventJournalTransMapForm().fieldModifiedProjSalesCurrencyIdPost();
            FormDataUtil::getFormDataSource(prodJournalBOM).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjSalesUnitIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedProjSalesUnitIdPost()
    {
        if (prodJournalBOM.isProjMethodConsumed())
        {
            this.projInventJournalTransMapForm().fieldModifiedQtyPost();
            FormDataUtil::getFormDataSource(prodJournalBOM).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    void formInitPost()
    {
        super();

        if (journalTableData)
        {
            initJournalTypeId = ProdJournalType::Picklist;

            this.updateDesign(InventDimFormDesignUpdate::Init);
        }
        if (cwFormCtrl)
        {
            cwFormCtrl.initPost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditJournalTrans</Name>
				<Source><![CDATA[
    protected boolean canEditJournalTrans(JournalTableMap _jourTable)
    {
        return super(_jourTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditAndCreateLines</Name>
				<Source><![CDATA[
    public boolean allowEditAndCreateLines()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditOnly</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean allowEditOnly()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    protected void initDatasourceAllow()
    {
        boolean allow = this.allowEditAndCreateLines() &&
                        this.allowDimEdit();

        super();

        inventDim_ds.allowEdit(allow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimUpdatedPre</Name>
				<Source><![CDATA[
    public boolean inventDimUpdatedPre(InventDim _inventDim)
    {
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;

        if (prodJournalBOM.InventTransId
			&&  ProdJournalTable::find(prodJournalBOM.JournalId).Posted == NoYes::No
			&&  !InventDim::isInventDimEqual(prodJournalBOM.inventDim(), _inventDim))
        {
            select firstOnly RecId from inventTransOrigin
				where inventTransOrigin.InventTransId   == prodJournalBOM.InventTransId
				exists join  inventTrans
					where inventTrans.InventTransOrigin == inventTransOrigin.RecId
						&& inventTrans.StatusIssue      == StatusIssue::Picked
                        && inventTrans.StatusReceipt    == StatusReceipt::None;

            if (inventTransOrigin.RecId)
            {
                warning("@SCM:PickingListIsPickedAndCannotBeChanged");
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    InventMovement inventMovement()
    {
        if (!prodJournalBOM.RecId)
            prodJournalBOM.InventTransChildType = InventTransChildType::ProdJournalBOM;

        return InventMovement::construct(prodBOM,InventMovSubType::None,prodJournalBOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes the object, override and setup catch weight form control class.
    /// </summary>
    /// <param name="_formRun">
    /// The form that calls the method.
    /// </param>
    public void new(FormRun _formRun)
    {
        super(_formRun);

        if (#PdsCatchWeightEnabled)
        {
            this.setupCWFormControl(_formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGridBOMUnit</Name>
				<Source><![CDATA[
    FormStringControl parmCtrlGridBOMUnit(FormStringControl _ctrlGridBOMUnit = ctrlGridBOMUnit)
    {
        ctrlGridBOMUnit = _ctrlGridBOMUnit;
        return ctrlGridBOMUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGridItemId</Name>
				<Source><![CDATA[
    FormStringControl parmCtrlGridItemId(FormStringControl _ctrlGridItemId = ctrlGridItemId)
    {
        ctrlGridItemId = _ctrlGridItemId;
        return ctrlGridItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlItemId</Name>
				<Source><![CDATA[
    FormStringControl parmCtrlItemId(FormStringControl _ctrlItemId = ctrlItemId)
    {
        ctrlItemId = _ctrlItemId;
        return ctrlItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlOprNum</Name>
				<Source><![CDATA[
    FormIntControl parmCtrlOprNum(FormIntControl _ctrlOprNum = ctrlOprNum)
    {
        ctrlOprNum = _ctrlOprNum;
        return ctrlOprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPosition</Name>
				<Source><![CDATA[
    FormStringControl parmCtrlPosition(FormStringControl _ctrlPosition = ctrlPosition)
    {
        ctrlPosition = _ctrlPosition;
        return ctrlPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlProdIdGrid</Name>
				<Source><![CDATA[
    FormStringControl parmCtrlProdIdGrid(FormStringControl _ctrlProdIdGrid = ctrlProdIdGrid)
    {
        ctrlProdIdGrid = _ctrlProdIdGrid;
        return ctrlProdIdGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodBOMInitPost</Name>
				<Source><![CDATA[
    void prodBOMInitPost(ProdBOM _prodBOM)
    {
        prodBOM         = _prodBOM;
        prodBOM_ds      = FormDataUtil::getFormDataSource(_prodBOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTableInitPost</Name>
				<Source><![CDATA[
    void prodTableInitPost(ProdTable _prodTable)
    {
        prodTable       = _prodTable;
        prodTable_ds    = FormDataUtil::getFormDataSource(_prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInventJournalTransMapForm</Name>
				<Source><![CDATA[
    ProjInventJournalTransMapForm projInventJournalTransMapForm()
    {
        if (!projInventJournalTransMapForm)
            projInventJournalTransMapForm = ProjInventJournalTransMapForm::construct(prodJournalBOM);
        else
            projInventJournalTransMapForm.parmProjInventJournalTransMap(prodJournalBOM);

        return projInventJournalTransMapForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPhysicalStorno_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets physical storno value.
    /// </summary>
    protected void setPhysicalStorno_RU()
    {
        prodJournalBOM.StornoPhysical_RU = (prodJournalBOM.BOMConsump < 0 && InventParameters::find().StornoPhysicalPosting_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupCWFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up a catch weight form control to be included in a given <c>FormRun</c> object.
    /// </summary>
    /// <param name = "_formRun">
    /// A <c>FormRun</c> object to include the catch weight form control in.
    /// </param>
    protected void setupCWFormControl(FormRun _formRun)
    {
        var bomConsumpFieldSetup = [
            fieldnum(ProdJournalBOM, bomConsump),           // inventory quantity FieldId to validate
            fieldnum(ProdJournalBOM, PdsCWInventConsump),   // cw quantity FieldId to validate against
            true,                                           // allow modifications
            fieldnum(ProdJournalBOM, bomUnitId)             // unit id field to use
            ];

        cwFormCtrl = PdsCWFormCtrl::constructFromForm(_formRun);
        cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers([bomConsumpFieldSetup]));
        cwFormCtrl.parmItemFieldId(fieldnum(ProdJournalBOM,ItemId));
        cwFormCtrl.parmUnitMethodStr(tablemethodstr(ProdJournalBOM,pdsCWUnitId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignActive</Name>
				<Source><![CDATA[
    protected void updateDesignActive(InventMovement _movement)
    {
        InventDimCtrl_Frm_Mov_ProdPick inventDimCtrl_Frm_Mov_ProdPick = inventDimFormSetup;
        inventDimCtrl_Frm_Mov_ProdPick.formActiveSetup(_movement.inventDimGroupSetup(), _movement, prodJournalBOM);
        inventDimFormSetup.formSetControls(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignInit</Name>
				<Source><![CDATA[
    protected void updateDesignInit(InventMovement _movement)
    {
        if (!inventDimFormSetup)
            inventDimFormSetup  = InventDimCtrl_Frm_Mov_ProdPick::newFromFormMovement(formRun,_movement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>