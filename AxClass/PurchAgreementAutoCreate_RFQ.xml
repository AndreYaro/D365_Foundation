<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementAutoCreate_RFQ</Name>
	<SourceCode>
		<Declaration><![CDATA[
[PurchAgreementAutoCreateFactoryAttribute(tableStr(PurchRFQParmTable))]
class       PurchAgreementAutoCreate_RFQ
extends     PurchAgreementAutoCreate
{
    PurchRFQTable       purchRFQTable;
    PurchRFQLine        purchRFQLine;
    PurchRFQParmTable   purchRFQParmTable;
    PurchRFQReplyTable  purchRFQReplyTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyMarkUpAgreementLine</Name>
				<Source><![CDATA[
        protected void copyMarkUpAgreementLine(PurchRFQLine _purchRFQLine)
    {
        AgreementLine agreementLineLocal;

        if (agreementLineQuantity.isItemBased())
        {
            agreementLineLocal = agreementLineQuantity;
        }
        else
        {
            agreementLineLocal = agreementLineVolume;
        }
        Markup::delete(agreementLineLocal);
        Markup::copy(NoYes::No, _purchRFQLine, agreementLineLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkUpPurchAgreementHeader</Name>
				<Source><![CDATA[
        protected void copyMarkUpPurchAgreementHeader()
    {
        Markup::delete(purchAgreementHeader);
        Markup::copy(NoYes::No, purchRFQTable, purchAgreementHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementLine</Name>
				<Source><![CDATA[
        void createAgreementLine()
    {
        PurchRFQReplyLine               purchRFQReplyLine;
        PurchRFQParmLine                parmLine;
        AgreementLineDefault            agreementLineDefault;
        LineNum                         lineNumber = 0;
        AgreementLineRecId              agreementLineRecId;

        while select RecId from parmLine
            where parmLine.ParmId == purchRFQParmTable.ParmId &&
                  parmLine.TableRefId == purchRFQParmTable.TableRefId
                  join forupdate purchRFQLine
                    where purchRFQLine.RecId == parmLine.rfqLineRecId
                    join purchRFQReplyLine
                        where purchRFQReplyLine.rfqLineRecId == purchRFQLine.RecId
        {
            this.deleteInventTrans(purchRFQLine);
            lineNumber++;

            if (purchRFQLine.LineType == PurchRFQLineItemType::Item)
            {
                // Construct an item-based Purchase Agreement Line
                agreementLineQuantity.clear();
                agreementLineQuantity.Agreement = purchAgreementHeader.RecId;
                agreementLineQuantity.initFromAgreementHeader(purchAgreementHeader);
                purchRFQLine.initAgreementLineQuantity(agreementLineQuantity);
                purchRFQReplyLine.initAgreementLineQuantity(agreementLineQuantity);
                agreementLineQuantity.LineNumber = lineNumber;
                agreementLineQuantity.insert();
                agreementLineRecId = agreementLineQuantity.RecId;
                purchRFQReplyLinePurchAgreementLine::writeRelationship(purchRFQReplyLine,agreementLineQuantity);
            }
            else
            {
                // Construct an category-based Purchase Agreement Line1
                agreementLineVolume.clear();
                agreementLineVolume.Agreement = purchAgreementHeader.RecId;
                agreementLineVolume.initFromAgreementHeader(purchAgreementHeader);
                purchRFQLine.initAgreementLineVolume(agreementLineVolume);
                purchRFQReplyLine.initAgreementLineVolume(agreementLineVolume);
                agreementLineVolume.LineNumber = lineNumber;
                agreementLineVolume.insert();
                agreementLineRecId = agreementLineVolume.RecId;
                purchRFQReplyLinePurchAgreementLine::writeRelationship(purchRFQReplyLine,agreementLineVolume);
            }

            // Project related assignments go into the Agreement Line Default
            agreementLineDefault.clear();
            agreementLineDefault.AgreementLine = agreementLineRecId;
            agreementLineDefault.ProjectCategory = purchRFQLine.ProjCategoryId;
            agreementLineDefault.ProjectCategoryDataAreaId = appl.company().dataArea(tableNum(ProjCategory));
            agreementLineDefault.ProjectActivityNumber = purchRFQLine.ActivityNumber;
            agreementLineDefault.ProjectActivityNumberDataAreaId = appl.company().dataArea(tableNum(smmActivities));
            agreementLineDefault.insert();

            this.copyMarkUpAgreementLine(purchRFQLine);
            purchRFQLine.AgreementId = purchAgreementHeader.PurchNumberSequence;
            purchRFQLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchAgreementHeader</Name>
				<Source><![CDATA[
        void createPurchAgreementHeader()
    {
        super();

        this.copyMarkUpPurchAgreementHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventTrans</Name>
				<Source><![CDATA[
        void deleteInventTrans(PurchRFQLine _purchRFQLine)
    {
        InventUpd_DeleteMovement    deleted;
        Common                      source;
        PurchRFQCaseLine            purchRFQCaseLine;

        if (!_purchRFQLine.createdManually())
        {
            purchRFQCaseLine = PurchRFQCaseLine::findRecId(_purchRFQLine.rfqCaseLineRefRecId);
            if (purchRFQCaseLine.InventTransId)
            {
                source = purchRFQCaseLine;
            }
        }
        else if (_purchRFQLine.InventTransId)
        {
            source = _purchRFQLine;
        }

        if (source)
        {
            deleted = InventUpd_DeleteMovement::newMovement(InventMovement::construct(source), false);
            if (deleted)
            {
                deleted.updateNow();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
        void endUpdate()
    {
        if (!agreementLineQuantity.RecId && !agreementLineVolume.RecId)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(PurchRFQParmTable    _purchRFQParmTable,
                       Object               _callBackClass = null)
    {
        super(_purchRFQParmTable, _callBackClass);

        purchRFQParmTable   = _purchRFQParmTable;
        purchRFQTable       = PurchRFQTable::find(_purchRFQParmTable.rfqId, true);
        purchRFQReplyTable  = purchRFQTable.purchRFQReplyTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchAgreementHeader</Name>
				<Source><![CDATA[
        void setPurchAgreementHeader()
    {
        super();

        purchRFQTable.initPurchAgreementHeader(purchAgreementHeader);
        purchRFQTable.initAgreementHeaderDefault(agreementHeaderDefault);
        purchRFQTable.initPurchAgreementHeaderDefault(purchAgreementHeaderDefault);

        purchRFQReplyTable.initAgreementHeader(purchAgreementHeader);
        purchRFQReplyTable.initAgreementHeaderDefault(agreementHeaderDefault);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVend</Name>
				<Source><![CDATA[
        void setVend()
    {
        if (this.vendAccount())
        {
            vendTable = VendTable::find(this.vendAccount());
        }

        if (!vendTable.RecId)
        {
            checkFailed(strFmt("@SYS17184",this.vendAccount()));
            throw error("@SYS23020");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
        protected VendAccount vendAccount()
    {
        return purchRFQTable.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static PurchAgreementAutoCreate_RFQ construct(PurchRFQParmTable _purchRFQParmTable = null,
                                                Object            _callBackClass = null)
    {
        return new PurchAgreementAutoCreate_RFQ(_purchRFQParmTable, _callBackClass);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>