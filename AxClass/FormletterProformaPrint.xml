<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterProformaPrint</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>FormletterProformaPrint</c> class is used to transfer values to reports when the reports are
///    printed as pro forma reports.
/// </summary>
/// <remarks>
///    When pro forma updates to the sales orders or purchase orders, a record is created in the temporary
///    table in the <c>FormletterJournalPost</c> class hierarchy, which the reports must know about when
///    they are printed.Because the temporary records are only usable in the instance of the class where
///    it is created, the <c>FormletterProformaPrint</c> class is has the purpose of transferring values
///    from the <c>FormletterJournalPost</c> class hierarchy to the pro forma reports through the
///    <c>Formletter</c> class hierarchy.
/// </remarks>
class FormletterProformaPrint implements SysPackable
{
    TmpTaxWorkTrans     journalTmpTaxWorkTrans;
    container           journalTmpTaxWorkTransListPacked;
    List                journalTmpTaxWorkTransList;
    Tax                 tax;

    // <GEEU>
    ExchRate            exchRate;
    ExchrateSecondary   exchrateSecondary;
    #ISOCountryRegionCodes
    // </GEEU>

    #define.CurrentVersion(1)

    // <GEEU>
    #localmacro.CurrentList
        journalTmpTaxWorkTransListPacked,
        exchRate,
        exchRateSecondary
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        journalTmpTaxWorkTransList = new List(Types::Record);

        while select journalTmpTaxWorkTrans
        {
                journalTmpTaxWorkTransList.addEnd(journalTmpTaxWorkTrans);
        }
        journalTmpTaxWorkTransListPacked = journalTmpTaxWorkTransList.pack();

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRate_W</Name>
				<Source><![CDATA[
    public ExchRate parmExchRate_W(ExchRate _exchRate = exchRate)
    {
        exchRate = _exchRate;
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRateSec_W</Name>
				<Source><![CDATA[
    public ExchrateSecondary parmExchRateSec_W(ExchrateSecondary _exchrateSecondary = exchrateSecondary)
    {
        exchrateSecondary = _exchrateSecondary;
        return exchrateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    public TmpTaxWorkTrans parmJournalTmpTaxWorkTrans(TmpTaxWorkTrans _journalTmpTaxWorkTrans = journalTmpTaxWorkTrans)
    {
        journalTmpTaxWorkTrans = _journalTmpTaxWorkTrans;

        return journalTmpTaxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTax</Name>
				<Source><![CDATA[
    public Tax parmTax(Tax _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves temporary tax transactions from the temporary <c>TmpTaxWorkTrans</c> table that relates
    ///    to the record ID specified in the parameter.
    /// </summary>
    /// <param name="_headingRecId">
    ///    The record ID for the record the temporary sales tax transactions must relate to.
    /// </param>
    /// <returns>
    ///    The temporary tax transactions from the temporary <c>TmpTaxWorkTrans</c> table relates to the
    ///    record ID specified in the parameter.
    /// </returns>
    public TmpTaxWorkTrans tmpTaxWorkTrans(recId _headingRecId)
    {
        TmpTaxWorkTrans tmpTaxWorkTrans;

        ttsbegin;

        while select journalTmpTaxWorkTrans
              where journalTmpTaxWorkTrans.HeadingRecId == _headingRecId
        {
            tmpTaxWorkTrans.clear();
            tmpTaxWorkTrans.data(journalTmpTaxWorkTrans);

            // <GEEU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && ! tmpTaxWorkTrans.TaxAutogenerated)
            {
                if (tmpTaxWorkTrans.SourceCurrencyCode == Ledger::accountingCurrency())
                {
                    tmpTaxWorkTrans.TaxAmount = tmpTaxWorkTrans.SourceRegulateAmountCur;
                }
                else
                {
                    tmpTaxWorkTrans.TaxAmount = CurrencyExchangeHelper::mstAmount(tmpTaxWorkTrans.SourceRegulateAmountCur, tmpTaxWorkTrans.SourceCurrencyCode, tmpTaxWorkTrans.TransDate, tmpTaxWorkTrans.euroTriangulation ? UnknownNoYes::Unknown : UnknownNoYes::No, this.parmExchRate_W(), this.parmExchRateSec_W());
                }
            }
            // </GEEU>
            tmpTaxWorkTrans.insert();
        }

        ttscommit;

        return tmpTaxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int             version     = RunBase::getVersion(_packedClass);
        ListEnumerator  listEnumerator;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;

                journalTmpTaxWorkTrans = null;

                delete_from journalTmpTaxWorkTrans;

                journalTmpTaxWorkTransList = List::create(journalTmpTaxWorkTransListPacked);
                listEnumerator = journalTmpTaxWorkTransList.getEnumerator();

                while (listEnumerator.moveNext())
                {
                    journalTmpTaxWorkTrans.data(listEnumerator.current());
                    journalTmpTaxWorkTrans.insert();
                }
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts temporary tax transactions into the temporary <c>TmpTaxWorkTrans</c> table that relates to
    ///    the record ID specified in a parameter.
    /// </summary>
    /// <param name="_headingRecId">
    ///    The record ID for the record that relates to the temporary sales tax transactions.
    /// </param>
    [SysObsolete('The method has been deprecated, use TmpTaxWorkTrans.copyFromTax method instead.', false, 20\7\2020)]
    public void writeTmpTaxWorkTrans(recId _headingRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public FormletterProformaPrint construct()
    {
        return new FormletterProformaPrint();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newUnpack</Name>
				<Source><![CDATA[
    public static FormletterProformaPrint newUnpack(container _packedFormletterProformaPrint)
    {
        FormletterProformaPrint     formletterProformaPrint;

        formletterProformaPrint = FormletterProformaPrint::construct();
        formletterProformaPrint.unpack(_packedFormletterProformaPrint);

        return formletterProformaPrint;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>