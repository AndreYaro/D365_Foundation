<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryUpdateLogCleanupService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSInventoryUpdateLogCleanupService
{
    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activities</Name>
				<Source><![CDATA[
    private WHSInventoryUpdateLogCleanupInstrumentationActivities activities()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSInventoryUpdateLogCleanupService));
        }

        return logger.inventoryUpdateLogCleanup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCleanup</Name>
				<Source><![CDATA[
    internal void runCleanup(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        using (var activityContext = this.activities().runCleanup())
        {
            this.tryCleanup(_processScheduleWorkItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryCleanup</Name>
				<Source><![CDATA[
    private void tryCleanup(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        int infologStartLine = infologLine();

        void log(ProcessExecutionSourceStatus _processExecutionSourceStatus, int totalDeletedRows = 0)
        {
            this.writeProcessAutomationLog(_processScheduleWorkItem, _processExecutionSourceStatus, infologStartLine, totalDeletedRows);
        }

        try
        {
            int totalDeletedRows = this.cleanup();
            
            if (totalDeletedRows)
            {
                log(ProcessExecutionSourceStatus::Success, totalDeletedRows);
            }
        }
        catch (Exception::Error)
        {
            log(ProcessExecutionSourceStatus::Error);

            // do not rethrow business exceptions and unrecoverable errors
        }
        catch
        {
            log(ProcessExecutionSourceStatus::Error);

            throw; // recoverable system errors are handled by process automation/batch framework
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanup</Name>
				<Source><![CDATA[
    private int cleanup()
    {
        Set companiesToCleanup = this.getCompaniesToCleanup();
        SetEnumerator companiesToCleanupEnumerator = companiesToCleanup.getEnumerator();

        int totalDeletedRows;
        while (companiesToCleanupEnumerator.moveNext())
        {
            totalDeletedRows += this.cleanupByCompany(companiesToCleanupEnumerator.current());
        }

        return totalDeletedRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupByCompany</Name>
				<Source><![CDATA[
    private int cleanupByCompany(DataAreaId _dataAreaId)
    {
        changecompany(_dataAreaId)
        {
            using (var activityContext = this.activities().cleanupByCompany())
            {
                utcdatetime maxDateTimeToKeep = DateTimeUtil::addDays(DateTimeUtil::utcNow(), -WHSParameters::find().cleanupInventoryUpdateLogAfterDays());

                ttsbegin;

                WHSInventoryUpdateLog inventoryUpdateLog;

                delete_from inventoryUpdateLog
                    where inventoryUpdateLog.TransactionValidationTime <= maxDateTimeToKeep
                        // Non-empty UpdateReferenceId means that we already sent the inventory update log business event
                        // and it is safe to delete the log record
                        && inventoryUpdateLog.UpdateReferenceId;

                ttscommit;
                    
                int deletedRows = inventoryUpdateLog.RowCount();

                this.activities().parmDeletedRowsPerCompany(activityContext, deletedRows);

                return deletedRows;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompaniesToCleanup</Name>
				<Source><![CDATA[
    private Set getCompaniesToCleanup()
    {
        Set companiesToCleanup = new Set(Types::String);

        WHSInventoryUpdateLog inventoryUpdateLog;

        while select crossCompany dataAreaId
            from inventoryUpdateLog
            group by dataAreaId
        {
            companiesToCleanup.add(inventoryUpdateLog.DataAreaId);
        }

        return companiesToCleanup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeProcessAutomationLog</Name>
				<Source><![CDATA[
    private void writeProcessAutomationLog(
        ProcessScheduleWorkItem _processScheduleWorkItem,
        ProcessExecutionSourceStatus _processExecutionSourceStatus,
        int _infologStartLine,
        int _totalDeletedRows)
    {
        ProcessExecutionSourceLinkItem processExecutionSourceLinkItem = this.createExecutionSourceLinkItem(_processScheduleWorkItem, _processExecutionSourceStatus, _totalDeletedRows);
        ProcessExecutionSourceLink processExecutionSourceLink = ProcessExecutionSourceLink::writeSourceLinkItem(processExecutionSourceLinkItem);

        if (_processExecutionSourceStatus == ProcessExecutionSourceStatus::Error)
        {
            Integer currentLine = infologLine();

            container infoLogData = infolog.copy(_infologStartLine + 1, currentLine);

            SysInfologEnumerator infoLogEnumerator = SysInfologEnumerator::newData(infoLogData);
            while (infoLogEnumerator.moveNext())
            {
                ProcessExecutionMessageLogItem messageLogItem =
                    ProcessExecutionMessageLogItem::newFromProcessExecutionSourceLinkAndMessage(
                        processExecutionSourceLink.RecId, infoLogEnumerator.currentException(),
                        infoLogEnumerator.currentMessage());
                ProcessExecutionMessageLog::insertMessage(messageLogItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExecutionSourceLinkItem</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLinkItem createExecutionSourceLinkItem(
        ProcessScheduleWorkItem _contract,
        ProcessExecutionSourceStatus _processExecutionSourceStatus,
        int _totalDeletedRows)
    {
        ProcessExecutionSourceLinkItem linkItem = ProcessExecutionSourceLinkItem::construct();

        linkItem.parmExecutionId(_contract.parmExecutionId());
        linkItem.parmExecutionSourceStatus(_processExecutionSourceStatus);
        linkItem.parmHeader("@WAX:WHSInventoryUpdateLogCleanupService");

        if (_processExecutionSourceStatus == ProcessExecutionSourceStatus::Error)
        {
            linkItem.parmMessage("@WAX:WHSInventoryUpdateLogCleanupServiceError");
        }
        else
        {
            linkItem.parmMessage(strFmt("@WAX:WHSInventoryUpdateLogCleanupServiceSuccess", _totalDeletedRows));
        }

        linkItem.parmProcessScheduleSeriesPatternRecId(_contract.parmProcessScheduleSeriesPatternRecId());
        linkItem.parmProcessScheduleOccurrenceRecId(_contract.parmProcessScheduleOccurrenceRecId());

        linkItem.parmSourceRecId(0);
        linkItem.parmSourceTableId(0);

        return linkItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>