<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VersioningDocument</c> class manages the state of versionable documents.
/// </summary>
/// <remarks>
///    The public methods of this class correspond to document state transitions.
/// </remarks>
abstract class VersioningDocument
{
    Common changedRecord;

    private PurchInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approveChangeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Approves the current document version.
    /// </summary>
    /// <remarks>
    ///    Sets the state attribute to the <c>Approved</c> value and triggers archiving to history tables.
    /// </remarks>
    public void approveChangeRequest()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().approveChangeRequest(changedRecord, this.getDocumentState()))
        {
            ttsbegin;

            if (this.getDocumentState() != VersioningDocumentState::InReview)
            {
                // Only changes made to a document in state In Review can be approved.
                throw error("@SYS183976");
            }
            this.setDocumentState(VersioningDocumentState::Approved);

            this.createNewVersion();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveCurrentVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs archiving of the current document data to the history tables.
    /// </summary>
    /// <remarks>
    ///    This is an abstract method which must be overridden by subclasses.
    /// </remarks>
    abstract protected void archiveCurrentVersion()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveOnDemand</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Archives current version.
    /// </summary>
    public void archiveOnDemand()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().archiveOnDemand(changedRecord))
        {
            ttsBegin;
            if (!this.isChangeRequestRequired() && !this.isLastVersionArchived())
            {
                this.archiveCurrentVersion();
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelChangeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the current change request.
    /// </summary>
    /// <remarks>
    /// Sets the state attribute to draft.
    /// </remarks>
    public void cancelChangeRequest()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().cancelChangeRequest(changedRecord))
        {
            ttsbegin;

            if (!this.canCancelChangeRequest())
            {
                // Only a change request in state In Review or Rejected can be cancelled.
                throw error("@SYS326423");
            }

            if (this.canCancelWorkflow())
            {
                this.cancelWorkflow();
            }

            this.setDocumentState(VersioningDocumentState::Draft);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Cancels workflow
    /// </summary>
    [Hookable(false)]
    protected internal void cancelWorkflow()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().cancelWorkflow(changedRecord))
        {
            WorkflowTrackingStatusTable workflowTrackingStatusTable = this.workFlowTrackingStatusTable();

            if (workflowTrackingStatusTable
                && workflowTrackingStatusTable.TrackingStatus == WorkflowTrackingStatus::Pending)
            {
                var lastWorkflowTrackingRecord = Workflow::findLastWorkflowTrackingRecord(workflowTrackingStatusTable.CorrelationId);

                if (lastWorkflowTrackingRecord
                    && lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::Workflow
                    && lastWorkflowTrackingRecord.TrackingType == WorkflowTrackingType::Cancellation)
                {
                    return;
                }

                Workflow::cancelWorkflow(workflowTrackingStatusTable.CorrelationId, '');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workFlowTrackingStatusTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Finds a workflow instance for the document.
    /// </summary>
    /// <returns>
    ///  A workflow tracking status record.
    /// </returns>
    [Hookable(false)]
    protected internal WorkflowTrackingStatusTable workFlowTrackingStatusTable()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if workflow can be canceled.
    /// </summary>
    /// <returns>true, if the workflow can be canceled; otherwise, false.</returns>
    [Hookable(false)]
    protected internal boolean canCancelWorkflow()
    {        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelChangeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the change request can be cancelled.
    /// </summary>
    /// <returns>true if the change request can be cancelled; otherwise, false.</returns>
    public boolean canCancelChangeRequest()
    {
        return this.getDocumentState()      == VersioningDocumentState::InReview
               || this.getDocumentState()   == VersioningDocumentState::Rejected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChangeBeRequested</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a change request can be created.
    /// </summary>
    /// <returns>
    ///    true if change management is enabled for the document and a change request can be created;
    ///    otherwise, false.
    /// </returns>
    public boolean canChangeBeRequested()
    {
        VersioningDocumentState currentDocumentState = this.getDocumentState();
        return this.isChangeRequestRequired()
            &&  (   currentDocumentState == VersioningDocumentState::Approved
                ||  currentDocumentState == VersioningDocumentState::InExternalReview
                ||  currentDocumentState == VersioningDocumentState::Confirmed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>change</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts document state after a change to its record.
    /// </summary>
    /// <param name="_newRecord">
    /// The new version of the record.
    /// </param>
    /// <param name="_oldRecord">
    /// The old version of the record.
    /// </param>
    /// <returns>
    /// true if version archiving was performed in effect of the change; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method must be called when any record of the document changes.If change request is required it
    /// will throw an exception if the state is greater or equal to <c>Approved</c> .If the change request
    /// is not required, the state is <c>Confirmed</c> and the change requires confirmation it will set the
    /// state to <c>Approved</c>.If the state is <c>Finalized</c> it will throw an exception.
    /// </remarks>
    public boolean change(Common _newRecord, Common _oldRecord)
    {
        VersioningDocumentState currentDocumentState = this.getDocumentState();

        boolean ret;

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().change(_oldRecord, currentDocumentState))
        {
            changedRecord = _oldRecord;

            if (this.isChangeRequestRequired())
            {
                if (this.isChangeAllowed(currentDocumentState, _newRecord, _oldRecord))
                {
                    // Changes to document under change management are only allowed in Draft state.
                    throw error("@SYS183991");
                }
            }
            else
            {
                if (   (currentDocumentState == VersioningDocumentState::Confirmed)
                    || (currentDocumentState == VersioningDocumentState::InExternalReview))
                {
                    if (!this.isLastVersionArchived())
                    {
                        this.archiveCurrentVersion();
                        ret = true;
                    }

                    if (this.isChangeConfirmationRequired(_newRecord, _oldRecord))
                    {
                        this.markModified();
                        this.setDocumentState(VersioningDocumentState::Approved);
                    }
                }
            }

            boolean	isOriginalSalesInvoiced = true;

            if(tableId2Name(_newRecord.TableId) == tableStr(PurchTable))
            {
                PurchTable purchTable = PurchTable::findRecId(_newRecord.RecId);
                SalesTable salesTable = purchTable.interCompanySalesTableOriginal();

                if (salesTable && salesTable.SalesStatus != SalesStatus::Invoiced)
                {
                    isOriginalSalesInvoiced = false;
                }
            }

            if (currentDocumentState == VersioningDocumentState::Finalized && isOriginalSalesInvoiced)
            {
                throw error("@SYS332459");
            }
        }
            
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the change to the document is allowed.
    /// </summary>
    /// <param name = "_currentDocumentState">
    /// The state of the current document version.
    /// </param>
    /// <param name="_newRecord">
    /// The new version of the record.
    /// </param>
    /// <param name="_oldRecord">
    /// The old version of the record.
    /// </param>
    /// <returns>true if the change to the document is allowed; otherwise, false.</returns>
    protected boolean isChangeAllowed(VersioningDocumentState _currentDocumentState, Common _newRecord, Common _oldRecord)
    {
        return _currentDocumentState >= VersioningDocumentState::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalizes current document version.
    /// </summary>
    /// <remarks>
    /// Sets the document state to a <c>VersioningDocumentState::Finalized</c> value. If a change request
    /// was not required it archives the current version of the document.
    /// </remarks>
    public void close()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().close(changedRecord))
        {
            ttsbegin;

            if (this.getDocumentState() != VersioningDocumentState::Confirmed)
            {
                // Only documents in Confirmed state can be finalized.
                throw error("@SYS335901");
            }

            this.setDocumentState(VersioningDocumentState::Finalized);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Confirms current document version.
    /// </summary>
    /// <remarks>
    ///    Sets state to a <c>Confirmed</c> value. If Change request was not required it archives the current
    ///    version of the document.
    /// </remarks>
    public void confirm()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().confirm(changedRecord))
        {
            ttsbegin;

            if (!this.canConfirmDocument())
            {
                // The document can be confirmed only if the approval status is In external review or Approved.
                throw error("@SYS4004816");
            }

            this.setDocumentState(VersioningDocumentState::Confirmed);

            if (!this.isChangeRequestRequired() && this.isLastVersionArchived())
            {
                this.createNewVersion();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConfirmDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a document can be confirmed.
    /// </summary>
    /// <returns>
    ///     true, if the document can be confirmed; otherwise, false.
    /// </returns>
    protected boolean canConfirmDocument()
    {
        switch (this.getDocumentState())
        {
            case VersioningDocumentState::Approved:
            case VersioningDocumentState::InExternalReview:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateApprovedVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an approved version can be created.
    /// </summary>
    /// <returns>true, if an approved version can be created; otherwise, false.</returns>
    protected boolean canCreateApprovedVersion()
    {
        VersioningDocumentState currentDocumentState = this.getDocumentState();

        switch (currentDocumentState)
        {
            case VersioningDocumentState::Approved:
            case VersioningDocumentState::InExternalReview:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createApprovedVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an approved version of the document.
    /// </summary>
    /// <param name="_isProformaVersion">
    /// A <c>Boolean</c> value indicating whether to create a temporary proforma version; optional.
    /// </param>
    /// <returns>
    /// The record ID of the version created.
    /// </returns>
    /// <remarks>
    ///    This method is useful for documents that do not use the change management to create any unconfirmed
    ///    versions.
    /// </remarks>
    public RefRecId createApprovedVersion(boolean _isProformaVersion = false)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().createApprovedVersion(changedRecord, _isProformaVersion))
        {
            if (!this.canCreateApprovedVersion())
            {
                throw error("@SYS4004816");
            }

            ttsbegin;

            if (!_isProformaVersion &&
                !this.isChangeRequestRequired() &&
                !this.isLastVersionArchived())
            {
                this.archiveCurrentVersion();
            }
            RefRecId createdVersionRecordID = this.createNewVersion(DateTimeUtil::utcNow(), _isProformaVersion);

            ttscommit;

            return createdVersionRecordID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChangeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new document version in a <c>Draft</c> state, or a change request.
    /// </summary>
    /// <remarks>
    ///    Sets state to a <c>Draft</c> value.
    /// </remarks>
    public void createChangeRequest()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().createChangeRequest(changedRecord))
        {
            ttsbegin;

            if (this.isChangeRequestRequired())
            {
                if ( this.getDocumentState() == VersioningDocumentState::Draft
                  || this.getDocumentState() == VersioningDocumentState::InReview
                  || this.getDocumentState() == VersioningDocumentState::Rejected)
                {
                    // Document is already in Draft state.
                    throw error("@SYS183967");
                }

                if (!this.isLastVersionArchived())
                {
                    this.archiveCurrentVersion();
                }

                this.setDocumentState(VersioningDocumentState::Draft);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new version record.
    /// </summary>
    /// <param name="_versionTimeStamp">
    /// The version timestamp that will be used by the new record.
    /// </param>
    /// <param name="_isProformaVersion">
    /// A <c>Boolean</c> value indicating whether the version is temporary proforma; optional.
    /// </param>
    /// <returns>
    /// The record ID of the version created.
    /// </returns>
    abstract protected RefRecId createNewVersion(VersioningTimeStamp _versionTimeStamp = DateTimeUtil::utcNow(),
                                                  boolean _isProformaVersion = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the document.
    /// </summary>
    /// <remarks>
    ///    Only unarchived documents can be deleted.
    /// </remarks>
    public void delete()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().delete(changedRecord))
        {
            if (this.doesHistoryExist())
            {
                // Versioned documents cannot be deleted.
                throw error("@SYS183959");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesHistoryExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether any version of the document is stored in the history tables.
    /// </summary>
    /// <returns>
    ///    true if any version of the document exists in the history tables; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This abstract method must be overridden by subclasses.
    /// </remarks>
    abstract public boolean doesHistoryExist()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentState</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the state of the current document version.
    /// </summary>
    /// <returns>
    ///    The state of the document.
    /// </returns>
    /// <remarks>
    ///    This abstract method must be overridden by subclasses.
    /// </remarks>
    abstract public VersioningDocumentState getDocumentState()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initiates the initial document version.
    /// </summary>
    /// <remarks>
    ///    Sets state to a <c>Draft</c> or <c>Approved</c> value depending on whether a change request is
    ///    required.
    /// </remarks>
    public void initiate()
    {
        this.setDocumentState( this.isChangeRequestRequired() ? VersioningDocumentState::Draft : VersioningDocumentState::Approved );
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeConfirmationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a change to the record will require document confirmation.
    /// </summary>
    /// <param name="_newRecord">
    ///    The new version of the record.
    /// </param>
    /// <param name="_oldRecord">
    ///    The old version of the record.
    /// </param>
    /// <returns>
    ///    true if the change requires confirmation; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Abstract method which must be overridden by subclasses.
    /// </remarks>
    abstract protected boolean isChangeConfirmationRequired(Common _newRecord, Common _oldRecord)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeRequestRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether change request for the document is required.
    /// </summary>
    /// <returns>
    ///    true if change request is required; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This abstract method must to be overridden by subclasses.
    /// </remarks>
    abstract protected boolean isChangeRequestRequired()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastVersionArchived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the last version was archived in the history tables.
    /// </summary>
    /// <returns>
    /// false if the last version has not yet been archived to the history tables or there is no version
    /// yet; otherwise, true.
    /// </returns>
    abstract public boolean isLastVersionArchived()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>markModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows to mark a document as modified when a document state is changed because a change to the record will require document confirmation.
    /// </summary>
    protected void markModified()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectChangeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rejects the current change request.
    /// </summary>
    /// <remarks>
    /// Sets the state attribute to rejected.
    /// </remarks>
    public void rejectChangeRequest()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().rejectChangeRequest(changedRecord))
        {
            ttsbegin;

            if (this.getDocumentState() != VersioningDocumentState::InReview)
            {
                // Only changes made to a document in state In review can be rejected.
                throw error("@SYS326421");
            }
            this.setDocumentState(VersioningDocumentState::Rejected);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmitChangeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resubmits the current document version for approval.
    /// </summary>
    /// <remarks>
    /// Sets the state attribute to in review.
    /// </remarks>
    public void reSubmitChangeRequest()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().reSubmitChangeRequest(changedRecord))
        {
            ttsbegin;

            if (this.getDocumentState() != VersioningDocumentState::Rejected)
            {
                // Only a document in state Rejected can be resubmitted for approval.
                throw error("@SYS326424");
            }
            this.setDocumentState(VersioningDocumentState::InReview);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendToVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sends the current document version to vendor for review.
    /// </summary>
    /// <remarks>
    ///    Sets state to <c>InExternalReview</c> value. If Change request was not required it archives the current
    ///    version of the document.
    /// </remarks>
    public void sendToVendor()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().sendToVendor(changedRecord))
        {
            if (this.getDocumentState() != VersioningDocumentState::Approved)
            {
                //The purchase order can be sent to the vendor only if the approval status is Approved.
                throw error("@SYS4004815");
            }

            ttsbegin;

            this.setDocumentState(VersioningDocumentState::InExternalReview);

            if (!this.isChangeRequestRequired() && this.isLastVersionArchived())
            {
                this.createNewVersion();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentState</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the state of the current version of the document.
    /// </summary>
    /// <param name="_versioningState">
    ///    The state to be set.
    /// </param>
    /// <remarks>
    ///    This abstract method must to be overridden by subclasses.
    /// </remarks>
    abstract protected void setDocumentState(VersioningDocumentState _versioningState)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitChangeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the current document version for approval.
    /// </summary>
    /// <remarks>
    /// Sets the state attribute to in review.
    /// </remarks>
    public void submitChangeRequest()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().versioningDocument().submitChangeRequest(changedRecord))
        {
            ttsbegin;

            if (this.getDocumentState() != VersioningDocumentState::Draft)
            {
                // Only a document in state Draft can be submitted for approval.
                throw error("@SYS326422");
            }
            this.setDocumentState(VersioningDocumentState::InReview);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertToPreviousVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts the current version to the previous version if it exists.
    /// </summary>
    public void revertToPreviousVersion()
    {
        throw error(strFmt("@ApplicationPlatform::MethodNotImplemented", funcName(), classId2Name(classIdGet(this))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal PurchInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>