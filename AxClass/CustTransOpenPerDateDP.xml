<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransOpenPerDateDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustOpenTransPerDateDP</c> class declares the variables that are required for the
/// <c>CustTransOpenPerDate</c>Microsoft SQL Server Reporting Services report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(CustTransOpenPerDate)),
    SRSReportParameterAttribute(classStr(CustTransOpenPerDateContract))
]
public class CustTransOpenPerDateDP extends SrsReportDataProviderPreProcessTempDB
{
    CustTransOpenPerDateTmp custTransOpenPerDateTmp;
    CustTransDetails custTransDetails;
    CustTable custTable;
    CustTrans custTrans;
    AmountCur amountCurOpen;
    AmountMST amountMSTOpen;
    AmountMSTSecondary amountReportingCurrencyOpen;
    DueDate firstDueDate;
    CustCollectionLetterCode collectionLetterCode;

    BillingClassification billingClassification;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustTransOpenPerDateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retreives the actual data for the report from the <c>CustTransOpenPerDateTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data for the report in the <c>CustTransOpenPerDateTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustTransOpenPerDateTmp))
    ]
    public CustTransOpenPerDateTmp getCustTransOpenPerDateTmp()
    {
        select custTransOpenPerDateTmp;
        return custTransOpenPerDateTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustTransOpenPerDateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>CustTransOpenPerDateTmp</c> buffer in preparation for insert.
    /// </summary>
    protected void populateCustTransOpenPerDateTmp()
    {
        custTransOpenPerDateTmp.AccountNum = custTable.AccountNum;
        custTransOpenPerDateTmp.Name = custTable.name();
        custTransOpenPerDateTmp.TransDate = custTrans.TransDate;
        custTransOpenPerDateTmp.Voucher = custTrans.Voucher;
        custTransOpenPerDateTmp.Invoice = custTrans.Invoice;
        custTransOpenPerDateTmp.Txt = custTrans.Txt;
        custTransOpenPerDateTmp.Currency = custTrans.CurrencyCode;
        custTransOpenPerDateTmp.AmountInCurrency = custTrans.AmountCur;        
        custTransOpenPerDateTmp.BalanceInCurrency = amountCurOpen;
        custTransOpenPerDateTmp.Balance = amountMSTOpen;
        custTransOpenPerDateTmp.BalanceInReportingCurrency = amountReportingCurrencyOpen;
        custTransOpenPerDateTmp.DueDate = firstDueDate;
        custTransOpenPerDateTmp.CollectionLetterCode = enum2str(collectionLetterCode);
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            custTransOpenPerDateTmp.FiscalEstablishmentId = custTrans.fiscalEstablishmentId_BR();
        }
        // </GBR>
        custTransOpenPerDateTmp.BillClassification = billingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustTransOpenPerDateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the records into the temporary table.
    /// </summary>
    /// <remarks>
    ///    This method is used to insert the records into the <c>CustTransOpenPerDateTmp</c> table.
    /// </remarks>
    protected void insertCustTransOpenPerDateTmp()
    {
        this.populateCustTransOpenPerDateTmp();

        custTransOpenPerDateTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic of the report.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by the
    ///    <c>CustTransOpenPerDate</c> report.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun;
        QueryBuildDataSource qbdsCustTrans;
        PerDate perDate;

        boolean isPublicSectorScenario = false;
        List listBillingClassification;

        CustTransOpenPerDateContract contract = this.parmDataContract() as CustTransOpenPerDateContract;

        custTransOpenPerDateTmp.setConnection(this.parmUserConnection());

        queryRun = new QueryRun(this.parmQuery());

        listBillingClassification = contract.parmBillingClassification();
        isPublicSectorScenario = CustBillingClassificationReportManager::isPublicSectorScenario(listBillingClassification);

        if (isPublicSectorScenario && !BrazilParameters::isEnabled())
        {
            CustBillingClassificationReportManager::setBillingClassificationRanges(queryRun.query().dataSourceTable(tableNum(CustTrans)), listBillingClassification, contract.parmInclTransWithNoBillingClass(), fieldNum(CustTrans, CustBillingClassification));
        }

        perDate = contract.parmPerDate();
        custTransDetails = new CustTransDetails(custTrans, this.settlementSumDate());

        qbdsCustTrans = SysQuery::findOrCreateDataSource(queryRun.query(), tableNum(CustTrans));
        qbdsCustTrans.addRange(fieldNum(CustTrans, TransDate)).value(queryRange(null, perDate));
        qbdsCustTrans.addRange(fieldNum(CustTrans, Closed)).value(queryValue(dateNull()));
        qbdsCustTrans.addRange(fieldNum(CustTrans, Closed)).value(strFmt('>%1', queryValue(perDate)));

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(CustTable)))
            {
                custTable = queryRun.get(tablenum(CustTable));
            }

            custTrans = queryRun.get(tablenum(CustTrans));
            custTransDetails.setCustVendTrans(custTrans);
            custTransDetails.setTransDate(this.settlementSumDate());

            [amountCurOpen, amountMSTOpen] = custTransDetails.amountCurMSTSettled();            
            amountCurOpen = custTrans.AmountCur - amountCurOpen;
            amountMSTOpen = custTrans.AmountMST - amountMSTOpen;
                        
            amountReportingCurrencyOpen = custTrans.ReportingCurrencyAmount - custTransDetails.amountReportingSettled();

            if (this.wasCustomerTransactionClosed(custTrans))
            {
                continue;
            }

            custTransDetails.setCustVendTrans(custTrans);
            custTransDetails.setTransDate(dateMax());
            firstDueDate = custTransDetails.firstDueDate();
            collectionLetterCode = custTransDetails.collectionLetterCode();

            if (isPublicSectorScenario && !BrazilParameters::isEnabled()
                && (listBillingClassification || contract.parmInclTransWithNoBillingClass()))
            {
                billingClassification = CustBillingClassification::find(custTrans.CustBillingClassification).BillingClassification;
            }
            else
            {
                billingClassification = '';
            }

            this.insertCustTransOpenPerDateTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasCustomerTransactionClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Was the transaction closed.
    /// </summary>
    /// <param name = "_custTrans">The customer transaction.</param>
    /// <returns>True if the transaction was closed; otherwise false.</returns>
    /// <remarks>
    /// The customer transaction is considered closed when the amount has been fully settled.  The open amount is determined based on the
    /// report open transaction date parameter.  Therefore, if the customer transaction has an amount and the open balance for the transaction
    /// as of the report date is zero, then the transaction is closed at the report date.
    /// </remarks>
    protected boolean wasCustomerTransactionClosed(CustTrans _custTrans)
    {
        boolean wasCustomerTransactionClosed;

        if ((_custTrans.AmountCur && amountCurOpen == 0.00)
            || (_custTrans.AmountMST && amountMSTOpen == 0.00))
        {
            wasCustomerTransactionClosed = true;
        }

        return wasCustomerTransactionClosed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementSumDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Date used to set how far forward we look for settlements.
    /// </summary>
    protected date settlementSumDate()
    {
        CustTransOpenPerDateContract contract = this.parmDataContract() as CustTransOpenPerDateContract;
        PerDate perDate = contract.parmPerDate();
        NoYes excludeFutureSettlements = contract.parmExcludeFutureSettlements();

        return excludeFutureSettlements ? perDate : dateMax();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>