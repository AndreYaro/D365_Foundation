<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustSettleChangePolicy_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CustSettleChangePolicy_RU extends RunBase
{
    boolean      dummy;
    TransDate    transDate;

    #VATTransitionPeriod_RU

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        Dummy
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changePolicy</Name>
				<Source><![CDATA[
        public void changePolicy(NoYes _onPayment2onDelivery)
    {
        LedgerVoucher       taxVoucher,taxVoucherStorno;
        LedgerVoucherObject ledgerVoucherObject;
        LedgerVoucherObject ledgerVoucherObjectStorno;
        CustTrans           custTrans = this.custTrans();
        #MacroLib.AviFiles

        this.progressInit("@SYS55210", this.countTotal(), #AviUpdate);

        ttsbegin;

        while (custTrans)
        {
            if (custTrans.remainAmountCur())
            {
                taxVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                          SysModule::Cust,
                                                          "");

                ledgerVoucherObject = LedgerVoucherObject::newVoucher(custTrans.Voucher,
                                                                      transDate < #TransitionStartDate ? custTrans.TransDate : #AfterTransitionEndDateOld,
                                                                      SysModule::Cust,
                                                                      LedgerTransType::Tax);
                ledgerVoucherObject.parmVoucherCheck(false);

                taxVoucher.addVoucher(ledgerVoucherObject);
                taxVoucherStorno = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                                SysModule::Cust,
                                                                "");

                ledgerVoucherObjectStorno = LedgerVoucherObject::newVoucher(custTrans.Voucher,
                                                                            transDate < #TransitionStartDate ? custTrans.TransDate : #AfterTransitionEndDateOld,
                                                                            SysModule::Cust,
                                                                            LedgerTransType::Tax,
                                                                            true);
                ledgerVoucherObject.parmVoucherCheck(false);

                taxVoucherStorno.addVoucher(ledgerVoucherObjectStorno);
                this.reverseTax(custTrans, ledgerVoucherObjectStorno,ledgerVoucherObject,_onPayment2onDelivery);

                taxVoucher.end();
                taxVoucherStorno.end();
            }
            progress.setText("@SYS12371" + ' : ' + custTrans.Voucher);
            progress.incCount();
            next custTrans;
        }

        ttscommit;

        this.progressKill();

        info("@GLS103093");
    }

]]></Source>
			</Method>
			<Method>
				<Name>countTotal</Name>
				<Source><![CDATA[
        protected int countTotal()
    {
        CustTrans custTrans;

        if (transDate < #TransitionStartDate)
        {
            select count(RecId) from custTrans
                where custTrans.Invoice         != ""                 &&
                      custTrans.SettleAmountCur < custTrans.AmountCur &&
                      custTrans.TransDate       > transDate;
        }
        else
        {
            select count(RecId) from custTrans
                where custTrans.Invoice         != ""                 &&
                      custTrans.SettleAmountCur < custTrans.AmountCur &&
                      custTrans.TransDate       < #TransitionStartDate;
        }

        return any2int(custTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTrans</Name>
				<Source><![CDATA[
        private CustTrans custTrans()
    {
        CustTrans         custTrans;
        SalesBookTable_RU salesBookTable;

        select firstonly salesBookTable
            order by ClosingDate desc
            where salesBookTable.ClosingDate != dateNull();

        transDate = salesBookTable ? salesBookTable.ClosingDate : dateNull();

        if (transDate < #TransitionStartDate)
        {
            // this is selection of several records
            select custTrans
                where custTrans.Invoice   != "" &&
                      custTrans.TransDate > transDate;
        }
        else
        {
            // this is selection of several records
            select custTrans
                where custTrans.Invoice   != "" &&
                      custTrans.TransDate < #TransitionStartDate;
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTax</Name>
				<Source><![CDATA[
        private void reverseTax(CustTrans           _custTrans,
                            LedgerVoucherObject _ledgerVoucherObjectStorno,
                            LedgerVoucherObject _ledgerVoucherObject,
                            NoYes               _onPayment)
    {
        CustSettleVATPolicy_RU  vatPolicy;

        vatPolicy = CustSettleVATPolicy_RU::construct();
        vatPolicy.initFromSettlement(_custTrans,
                                     _ledgerVoucherObjectStorno,
                                     _custTrans.AmountMST - _custTrans.SettleAmountMST + _custTrans.CustExchAdjustmentRealized,
                                     _custTrans.remainAmountCur(),
                                     _custTrans.ReportingCurrencyAmount - _custTrans.SettleAmountReporting + _custTrans.ReportingExchAdjustmentRealized,
                                     null);

        vatPolicy.parmLedgerVoucherObjectReverse(_ledgerVoucherObject);
        vatPolicy.calcAndPostTaxes(_onPayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion  :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>