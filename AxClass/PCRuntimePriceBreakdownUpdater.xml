<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimePriceBreakdownUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System;
using Microsoft.Dynamics.AX.Framework.FileManagement;

/// <summary>
/// This class responsible for updating the price breakdown.
/// </summary>
class PCRuntimePriceBreakdownUpdater
{
    PCDocumentHandlingExcel documentHandlingExcel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        documentHandlingExcel = PCDocumentHandlingExcel::createForPriceBreakdown();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentHandlingExcel</Name>
				<Source><![CDATA[
    public PCDocumentHandlingExcel parmDocumentHandlingExcel(PCDocumentHandlingExcel _documentHandlingExcel = documentHandlingExcel)
    {
        documentHandlingExcel = _documentHandlingExcel;

        return documentHandlingExcel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConfigurationReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates price breakdown with the configuration reference
    /// </summary>
    /// <param name="_sourceLine">
    /// An order line.
    /// </param>
    /// <param name="_configurationName">
    /// A configuration name.
    /// </param>
    public void updateConfigurationReference(
        Common                  _sourceLine,
        EcoResConfigurationName _configurationName)
    {
        DocuRef   document = this.parmDocumentHandlingExcel().findDocumentBySourceLine(_sourceLine);
        Filename  fileName;
        str       orderReference;

        switch (_sourceLine.TableId)
        {
            case tableNum(SalesLine)                :
                orderReference  = SalesLine::findRecId(_sourceLine.RecId).SalesId;
                break;
            case tableNum(SalesQuotationLine)       :
                orderReference  = SalesQuotationLine::findRecId(_sourceLine.RecId).QuotationId;
                break;
        }

        fileName = PCExcel::getTempFilePath(orderReference);

        using(var stream = DocumentManagement::getAttachmentStream(document))
        {
            this.updateWorksheet(_sourceLine, fileName, stream, _configurationName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorksheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates price breakdown worksheet.
    /// </summary>
    /// <param name="_sourceLine">
    /// An order line.
    /// </param>
    /// <param name="_fileName">
    /// A file name of the archived document handling file.
    /// </param>
    /// <param name="_stream">
    /// A stream with the document content.
    /// </param>
    /// <param name="_configurationName">
    /// A configuration name.
    /// </param>
    public void updateWorksheet(Common _sourceLine, str _fileName, System.IO.Stream _stream, EcoResConfigurationName _configurationName)
    {
        PCExcel excel = PCExcel::construct();
        excel.openFromStream(_stream);
        excel.addCellValue(PCRuntimeVisitorPriceBreakdown::getConfigurationReferenceRow(), 1, strFmt("@SYS324543","@SYS4001915", _configurationName));
        using(var stream = excel.getMemoryStream())
        {
            this.parmDocumentHandlingExcel().createOrUpdateDocument(_sourceLine, _fileName, stream);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCRuntimePriceBreakdownUpdater construct()
    {
        return new PCRuntimePriceBreakdownUpdater();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>