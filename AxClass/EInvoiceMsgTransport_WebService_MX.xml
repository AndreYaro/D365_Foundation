<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceMsgTransport_WebService_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;

/// <summary>
/// The <c>EInvoiceWebServiceData_MX</c> represents the comunication to the web service.
/// </summary>
class EInvoiceMsgTransport_WebService_MX
{
    EInvoiceCFDIEnvironment_MX  environment;
    EInvoiceCFDIPACAccount_MX   pacAccount;
    Map                         wcfClientsCache;
    X509Certificate2            certificate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        EInvoiceCFDIParameters_MX params = EInvoiceCFDIParameters_MX::find();
        environment = params.CFDIEnvironment;
        pacAccount = params.PACAccount;
        wcfClientsCache = new Map(Types::Container, Types::Class);
        certificate = this.getCurrentPACDigitalCertificate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPACDigitalCertificate</Name>
				<Source><![CDATA[
    protected X509Certificate2 getCurrentPACDigitalCertificate()
    {
        return CertificateHelper_MX::getCurrentPACDigitalCertificate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the message to the web service and returns the response.
    /// </summary>
    /// <param name = "_message">The message content formatted in XML.</param>
    /// <param name = "_messageType">The type of the message.</param>
    /// <param name = "_docType">The type of the document.</param>
    /// <returns>The service response in raw XML format.</returns>
    /// <exception cref="Exception::Error">Send not supported for message type.</exception>
    public EInvoiceMsgStringStream_MX send(str _message, EInvoiceCFDIMessageType_MX _messageType, CFDIDocType_MX _docType = CFDIDocType_MX::Invoice)
    {
        EInvoiceCFDIWebService_MX serviceMethod = EInvoiceMsgTransport_WebService_MX::messageType2webServiceMethod(_messageType, _docType);
        EInvoiceCFDIWebServiceSetup_MX settings = EInvoiceCFDIWebServiceSetup_MX::find(pacAccount, environment, serviceMethod);

        EInvoiceInterfacturaWCF interfacturaWCF;
        container cacheKey = EInvoiceInterfacturaWCF::cacheKey(settings.URL, certificate);
        if (wcfClientsCache.exists(cacheKey))
        {
            interfacturaWCF = wcfClientsCache.lookup(cacheKey);
        }
        else
        {
            interfacturaWCF = EInvoiceInterfacturaWCF::construct(settings.URL, certificate);
            wcfClientsCache.insert(cacheKey, interfacturaWCF);
        }

        str response = interfacturaWCF.request(settings.WebServiceMethod, _message, [settings.WebService]);

        EInvoiceMsgStringStream_MX returnStream = new EInvoiceMsgStringStream_MX();
        
        returnStream.write(response);

        return returnStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>EInvoiceMsgTransport_WebService_MX</c> object.
    /// </summary>
    /// <param name="_messageType">The message type.</param>
    /// <returns>A new <c>EInvoiceMsgTransport_WebService_MX</c> object.</returns>
    public static EInvoiceMsgTransport_WebService_MX construct()
    {
        return new EInvoiceMsgTransport_WebService_MX();
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageType2webServiceMethod</Name>
				<Source><![CDATA[
    private static EInvoiceCFDIWebService_MX messageType2webServiceMethod(EInvoiceCFDIMessageType_MX _messageType, CFDIDocType_MX _docType = CFDIDocType_MX::Invoice)
    {
        switch (_messageType)
        {
            case EInvoiceCFDIMessageType_MX::Submit:
                switch(_docType)
                {
                    case CFDIDocType_MX::Withholding:
                        return EInvoiceCFDIWebService_MX::SendWithholding;

                    default:
                        return EInvoiceCFDIWebService_MX::Send;
                }

            case EInvoiceCFDIMessageType_MX::Cancel:
                return EInvoiceCFDIWebService_MX::Cancel;
            
            case EInvoiceCFDIMessageType_MX::CancelRequest :
                return EInvoiceCFDIWebService_MX::CancelRequest;

            default :
                throw error(strfmt("@SYS4081902", _messageType));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>