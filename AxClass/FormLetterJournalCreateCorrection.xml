<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterJournalCreateCorrection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>FormLetterJournalCreateCorrection</c> class is the journal creation versioning strategy for
///    the correction.
/// </summary>
public class FormLetterJournalCreateCorrection extends FormLetterJournalCreateVersioning
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a journal can be created.
    /// </summary>
    /// <returns>
    /// true if a journal can be created; otherwise, false.
    /// </returns>
    public boolean check()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a line should be discarded.
    /// </summary>
    /// <param name="_parmLine">
    /// The line to checked.
    /// </param>
    /// <returns>
    /// true if the line should be discarded; otherwise, false.
    /// </returns>
    public boolean checkDiscardLine(FormletterParmLine _parmLine)
    {
        return _parmLine.Qty == _parmLine.PreviousQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether journal history must be created.
    /// </summary>
    /// <returns>
    /// true if journal history must be created; otherwise, false.
    /// </returns>
    public boolean createJournalHistory()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or updates a journal line based on a parameter line.
    /// </summary>
    /// <param name="_parmLine">
    ///    The parameter line based on which to create or update the journal line.
    /// </param>
    public void createJournalLine(Common _parmLine)
    {
        Common journalLine = formLetterVersionableJournalCreate.findJournalLine(_parmLine);

        formLetterVersionableJournalCreate.updateJournalLine(journalLine, _parmLine);
        formLetterVersionableJournalCreate.checkJournalLine(journalLine, _parmLine);
        journalLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the associated <c>FormLetterVersionableJournalCreate</c> object.
    /// </summary>
    public void init()
    {
        super();
        formLetterVersionableJournalCreate.adjustAccountingDate(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>FormLetterProvider</c> object.
    /// </summary>
    /// <param name="_formLetterProvider">
    /// The <c>FormLetterProvider</c> object to initialize.
    /// </param>
    public void initFormletterProvider(FormLetterProvider _formLetterProvider)
    {
        super(_formLetterProvider);
        _formLetterProvider.parmVersioningUpdateType(VersioningUpdateType::Correction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayUpdateIfHeaderChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether journal processing should be continued when only the header data has changed and
    /// the lines remain the same.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean mayUpdateIfHeaderChanged()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[

    public static FormLetterJournalCreateCorrection construct()
    {
        return new FormLetterJournalCreateCorrection();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>