<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>RetailTransactionHandler_IN</c> is used to handle India tax informaiton for retail transactions.
/// </summary>
class RetailTransactionHandler_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CreateOrderLineExtension_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create sales extension line for the given Retail transaction line entry
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record that the extension line will be added to.
    /// </param>
    /// <param name="_salesTrans">
    /// The <c>RetailTransactionSalesTrans</c> record being processed.
    /// </param>
    public static void CreateOrderLineExtension_IN(
        SalesLine                   _salesLine,
        RetailTransactionSalesTrans _salesTrans)
    {
        SalesLine_IN            salesLinesIN;
        InventTableModule       inventTableModule;
        PriceDisc_Price         priceDiscPrice;
        InventLocationId        inventLocationId;
        LogisticsLocationRecId  logisticsLocationRecId;
        TaxInformationRecId_IN  taxInformationRecId;
        RetailChannelTable      retailChannelTable;
        TransTaxInformation     transTaxInformation;

        inventLocationId = InventDim::find(_salesLine.InventDimId).InventLocationId;
        if (inventLocationId)
        {
            logisticsLocationRecId  = InventLocation::getDefaultLogisticsLocation_IN(inventLocationId, LogisticsLocationRoleType::Delivery).RecId;
        }
        else
        {
            retailChannelTable      = RetailChannelTable::findByRecId(_salesTrans.Channel);
            logisticsLocationRecId  = InventLocation::getDefaultLogisticsLocation_IN(retailChannelTable.inventLocation, LogisticsLocationRoleType::Delivery).RecId;
        }
        taxInformationRecId     = TaxInformation_IN::findDefaultbyLocation(logisticsLocationRecId).RecId;

        inventTableModule       = InventTableModule::find(_salesLine.ItemId, ModuleInventPurchSales::Sales);
        salesLinesIN            = _salesLine.salesLine_IN();
        priceDiscPrice = PriceDisc_Price::construct();
        priceDiscPrice.parmModuleType(ModuleInventPurchSales::Sales);
        priceDiscPrice.parmItemId(_salesLine.ItemId);
        priceDiscPrice.parmInventDim(_salesLine.inventDim());
        priceDiscPrice.parmUnitID(_salesLine.SalesUnit);
        priceDiscPrice.parmPriceDate(_salesLine.priceDate());
        priceDiscPrice.parmQty(_salesLine.SalesQty);
        priceDiscPrice.parmAccountNum(_salesLine.salesTable().CustAccount);
        priceDiscPrice.parmCurrencyCode(_salesLine.salesTable().CurrencyCode);
        priceDiscPrice.parmPriceGroupId(_salesLine.salesTable().PriceGroupId);

        salesLinesIN.MaximumRetailPrice   = priceDiscPrice.maxRetailPrice_IN();
        if (!salesLinesIN.MaximumRetailPrice)
        {
            salesLinesIN.MaximumRetailPrice   = CurrencyExchangeHelper::curAmount(inventTableModule.MaximumRetailPrice_IN, _salesLine.CurrencyCode);
        }

        if (_salesLine.RecId)
        {
            transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_salesLine);

            if (transTaxInformation)
            {
                transTaxInformation.selectForUpdate(true);
                transTaxInformation.CompanyLocation = logisticsLocationRecId;
                TransTaxInformationHelper::initFromCompanyLocation(transTaxInformation);
                TransTaxInformationHelper::initFromTaxInformation(transTaxInformation);
                ttsbegin;
                transTaxInformation.update();
                ttscommit;
            }
        }

        salesLinesIN.assessableValue(_salesLine);

        _salesLine.packSalesLine_IN(salesLinesIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxInformationForJournalLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets India tax information of journal lines based on the set up on retail store.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to be updated.
    /// </param>
    /// <param name="_channel">
    /// The specific retail store Id.
    /// </param>
    public static void setTaxInformationForJournalLine_IN(LedgerJournalTrans _ledgerJournalTrans, RetailChannelRecId _channel)
    {
        LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtensionIN;
        RetailChannelTable                  retailChannelTable = RetailChannelTable::findByRecId(_channel);
        TransTaxInformation                 transTaxInformation;
        if (_ledgerjournaltrans.RecId)
        {
            transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_ledgerJournalTrans, true);
            ttsBegin;
            transTaxInformation.CompanyLocation = InventLocation::getDefaultLogisticsLocation_IN(retailChannelTable.inventLocation, LogisticsLocationRoleType::Delivery).RecId;
            TransTaxInformationHelper::initFromCompanyLocation(transTaxInformation);
            TransTaxInformationHelper::initFromTaxInformation(transTaxInformation);
            transTaxInformation.update();

            ledgerJournalTransTaxExtensionIN        = LedgerJournalTransTaxExtensionIN::findByLedgerJournalTrans(_ledgerJournalTrans.RecId, true);
            if (!ledgerJournalTransTaxExtensionIN)
            {
                ledgerJournalTransTaxExtensionIN.LedgerJournalTrans = _ledgerJournalTrans.RecId;
                ledgerJournalTransTaxExtensionIN.insert();
            }
            else
            {
                ledgerJournalTransTaxExtensionIN.update();
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxInformationForMarkupTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets India tax information of charges transactions.
    /// </summary>
    /// <param name="_markupTrans">
    /// The <c>MarkupTrans</c> to be used.
    /// </param>
    /// <param name="_channel">
    /// The retail channel of the charge transaction.
    /// </param>
    public static void setTaxInformationForMarkupTrans_IN(MarkupTrans _markupTrans, RetailChannelRecId _channel)
    {
        InventLocationId        inventLocationId;
        MarkupTrans_IN          markupTransIN;
        LogisticsLocationRecId  logisticsLocationRecId;
        RetailChannelTable      retailChannelTable;

        ttsBegin;
        if (_markupTrans.RecId)
        {
            switch (_markupTrans.TransTableId)
            {
                case tableNum (SalesTable):
                    inventLocationId = SalesTable::findRecId(_markupTrans.TransRecId).InventLocationId;
                    break;

                case tableNum (SalesLine):
                    inventLocationId = InventDim::find(SalesLine::findRecId(_markupTrans.TransRecId).InventDimId).InventLocationId;
                    break;

                default:
                    break;
            }

            if (inventLocationId)
            {
                logisticsLocationRecId = InventLocation::getDefaultLogisticsLocation_IN(inventLocationId, LogisticsLocationRoleType::Delivery).RecId;
            }
            else
            {
                retailChannelTable      = RetailChannelTable::findByRecId(_channel);
                logisticsLocationRecId  = InventLocation::getDefaultLogisticsLocation_IN(retailChannelTable.inventLocation, LogisticsLocationRoleType::Delivery).RecId;
            }
            markupTransIN.MarkupTrans       = _markupTrans.RecId;
            markupTransIN.CompanyLocation   = logisticsLocationRecId;
            markupTransIN.TaxInformation    = TaxInformation_IN::findDefaultbyLocation(logisticsLocationRecId).RecId;
            markupTransIN.insert();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>