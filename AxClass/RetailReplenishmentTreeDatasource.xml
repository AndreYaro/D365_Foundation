<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailReplenishmentTreeDatasource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class builds a tree for retail replenishment.
/// </summary>
class RetailReplenishmentTreeDatasource extends CCFormTreeDatasource
{
    OMHierarchyRelationship         currentSelectedHierarchy;
    ImageListAppl                   hierarchiesImageList;
    NoYes                           multipleRoots;
    #RetailResAppl
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildSubTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the subtree nodes in the tree control.
    /// </summary>
    /// <param name="_parentIdx">
    ///    The index of the item in the tree for which to build the subtree.
    /// </param>
    /// <param name="_parentValue">
    ///    The ID of the selected node.
    /// </param>
    /// <param name="_rebuild">
    ///    A Boolean value that indicates whether to rebuild the tree from nothing.
    /// </param>
    /// <returns>
    ///    The index of the currently selected item in the tree.
    /// </returns>
    int buildSubTree(int _parentIdx, anytype _parentValue, boolean _rebuild = false)
    {
        int             childrenCount, idx, hdl;
        boolean         stateExpandedOnce;
        boolean         bold = false;
        boolean         isRoot = tree.getParent(_parentIdx) == 0;
        Common          relationship, parent;
        FormTreeItem    formTreeItem;

        tree.lockWindowUpdate(true);

        if (!_rebuild)
        {
            formTreeItem = tree.getItem(_parentIdx);
            if (formTreeItem)
            {
                stateExpandedOnce = formTreeItem.stateExpandedOnce();
            }
        }

        if (_rebuild || !stateExpandedOnce)
        {
            if (_rebuild) // delete existing subtree
            {
                hdl = tree.getChild(_parentIdx);
                while (hdl)
                {
                    tree.delete(hdl);
                    hdl = tree.getChild(_parentIdx);
                }
            }
            [SelectedData] = selectionStack.pop();

            childrenCount = 0;

            // multipleRoots is true, when tree need to contain replenishment hierarchies as top-level nodes of the tree
            // otherwise, tree has only one root (operating unit node)
            if (isRoot && multipleRoots)
            {
                parent = OmHierarchyTypeEx::findRetailReplenishment(_parentValue);
            }
            else
            {
                parent = OmHierarchyRelationship::findRecId(_parentValue);
            }

            //refresh this node
            formTreeItem = tree.getItem(_parentIdx);
            if (formTreeItem)
            {
                formTreeItem.text(this.itemDescription(parent));
                tree.setItem(formTreeItem);
            }

            relationship = parent.getChildren();

            // now relationship buffer variable contains all children (if any) of parent
            // so we can walk through children and add a new tree node per each child
            while (relationship)
            {
                formTreeItem = new FormTreeItem(this.itemDescription(relationship),
                                                this.image(),
                                                (relationship.hasChildren() == NoYes::Yes),
                                                relationship.RecId);

                idx = tree.addItem(_parentIdx, 0, formTreeItem);

                formTreeItem = tree.getItem(idx);
                tree.setItem(formTreeItem);

                childrenCount++;

                next relationship;
            }

            formTreeItem = tree.getItem(_parentIdx);
            formTreeItem.children(childrenCount);
            formTreeItem.stateExpandedOnce(true);
            tree.setItem(formTreeItem);
        }
        tree.lockWindowUpdate(false);

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandAndSelect</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expands the tree and selects the tree node with the specified data value.
    /// </summary>
    /// <param name="_selectedRelationship">
    ///    ID of the node to be selected.
    /// </param>
    public void expandAndSelect(OMHierarchyRelationship _selectedRelationship)
    {
        anytype                 treeElementData;
        int                     idx;
        List                    ascendants = this.getAscendants(_selectedRelationship.RecId);
        ListEnumerator          le = ascendants.getEnumerator();
        OMHierarchyRelationship relationships;

        idx = tree.getRoot();

        //walk through the ascendants, selecting each one of them
        while (le.moveNext())
        {
            select HierarchyType, ChildOrganization from relationships
                where relationships.HierarchyType == _selectedRelationship.HierarchyType &&
                      relationships.ChildOrganization == le.current();

            treeElementData = tree.getItem(idx).data();

            while (treeElementData != relationships.RecId)
            {
                idx = tree.getNextVisible(idx);
                if (idx)
                {
                    treeElementData = tree.getItem(idx).data();
                }
            }

            tree.select(idx);

            tree.expand(idx, FormTreeExpand::Expand);
        }

        //select the current one
        if (idx)
        {
            tree.expand(idx, FormTreeExpand::Expand);
            treeElementData = tree.getItem(idx).data();

            while (treeElementData != _selectedRelationship.RecId)
            {
                idx = tree.getNextVisible(idx);
                treeElementData = tree.getItem(idx).data();
            }
            tree.select(idx);
        }

        tree.setFocus();
        tree.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAscendants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of ascendants of the current hierarchy node.
    /// </summary>
    /// <param name="_selectedRelationshipId">
    /// Id of the current hierarchy relationship.
    /// </param>
    /// <returns>
    /// List of IDs.
    /// </returns>
    private List getAscendants(RecId _selectedRelationshipId)
    {
        OMHierarchyRelationship relationships, currentRelationship;
        List                    result = new List(Types::Int64);

        select currentRelationship
            where currentRelationship.RecId == _selectedRelationshipId;

        while (currentRelationship.ParentOrganization > 0)
        {
            // get current organization and add it to the top of the list
            select ChildOrganization, HierarchyType, RecId from relationships
                where relationships.ChildOrganization == currentRelationship.ParentOrganization &&
                    relationships.HierarchyType == currentRelationship.HierarchyType;

            result.addStart(relationships.ChildOrganization);

            select RecId, ParentOrganization, HierarchyType from currentRelationship
                where currentRelationship.RecId == relationships.RecId;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyQuery</Name>
				<Source><![CDATA[
    private QueryRun getHierarchyQuery(InventLocationId _inventLocationId = '')
    {
        QueryRun qr;

        if (_inventLocationId)
        {
            qr = new QueryRun(queryStr(RetailReplHierarchyForLocations));
            qr.query().dataSourceTable(tablenum(InventLocation)).addRange(fieldNum(InventLocation, InventLocationid)).value(_inventLocationId);
        }
        else
        {
            Query emptyQuery = new Query();
            emptyQuery.addDataSource(tablenum(RetailReplenishmentHierarchyView));
            qr = new QueryRun(emptyQuery);
        }

        return qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>image</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the image needed depending on the type of current node (hierarchy or retail channel).
    /// </summary>
    /// <param name="_childRecord">
    ///    The current record.
    /// </param>
    /// <returns>
    ///    The ID of the image.
    /// </returns>
    int image(Common _childRecord = null)
    {
        if (_childRecord.TableId == tableNum(RetailReplenishmentHierarchyView))
        {
            return hierarchiesImageList.image(#ImageReplenishmentHierarchy);
        }
        else
        {
            return hierarchiesImageList.image(#ImageRetailChannel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of images referenced by the ID retrieved by the
    ///    <c>RetailReplenishmentTreeDatasource.image</c> method.
    /// </summary>
    /// <returns>
    ///    The image list.
    /// </returns>
    Imagelist imageList()
    {
        return hierarchiesImageList.imageList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRoots</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes roots (top-level nodes) of the tree.
    /// </summary>
    /// <param name="_inventLocationId">
    /// Invent location id, which is used as a filter for the selected list of hierarchies (if not specified, all hierarchies are shown in the tree).
    /// </param>
    /// <returns>
    /// True if there is at least one node added in the tree; otherwise false.
    /// </returns>
    /// <remarks>
    /// Used instead of initRoot() method from parent class as replenishment hierarchy tree has no specific single root node.
    /// </remarks>
    public boolean initRoots(InventLocationId _inventLocationId = '')
    {
        // get query for hierarchies that should be shown in the tree
        QueryRun                            hierarchyQuery = this.getHierarchyQuery(_inventLocationId);
        RetailReplenishmentHierarchyView    replenishmentHierarchy;
        boolean                             hierarchyNodeFound = false;

        tree.deleteAll();

        // Get all the necessary replenishment hierarchies from the query
        // and add all of them as root nodes.
        hierarchyQuery.reset();
        while (hierarchyQuery.next())
        {
            replenishmentHierarchy = hierarchyQuery.get(tableNum(RetailReplenishmentHierarchyView));

            tree.addItem(0, 0, new FormTreeItem(this.itemDescription(replenishmentHierarchy),
                                                this.image(),
                                                replenishmentHierarchy.hasChildren(),
                                                replenishmentHierarchy.RecId));

            hierarchyNodeFound = true;
        }

        return hierarchyNodeFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the item based on the table instance passed as parameter.
    /// </summary>
    /// <param name="common">
    /// An instance of table.
    /// </param>
    /// <returns>
    /// Item description based on the table instance passed as parameter.
    /// </returns>
    /// <remarks>
    /// If the table Id does not match with any case then an message Unknown node type is returned.
    /// </remarks>
    public str itemDescription(Common common)
    {
        #define.DescriptionField("Name")

        switch (common.TableId)
        {
            case tableNum(RetailReplenishmentHierarchyView):
                return common.(fieldName2id(tableNum(RetailReplenishmentHierarchyView), #DescriptionField));
            case tableNum(OMHierarchyRelationship):
                return OMHierarchyRelationship::getChildOrganization(common).Name;
            default:
                return "@RET260032";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the initial position in the tree control which is controlled by this class.
    /// </summary>
    void loadPosition()
    {
        Integer         version;

        if (useLastValue)
        {
            if (xSysLastValue::getLast(this))
                [version,#CurrentList] = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                                                 this.lastValueUserId(),
                                                                 this.lastValueType(),
                                                                 this.lastValueElementName());
        }

        // This is the reason to overload CCFormTreeDatasource.loadPosition(),
        // since the inherited code causes
        // AnyType RecId data to change type to String.
        if (version != #CurrentVersion)
        {
            SelectedData = OmHierarchyRelationship::getRoot(currentSelectedHierarchy.RecId).RecId;
        }

        this.getRelations(SelectedData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the class <c>RetailReplenishmentDatasource</c> and also <c>ImageListAppl</c> class.
    /// </summary>
    /// <param name="_formDataSource">
    /// An instance of formdataSource
    /// </param>
    /// <param name="_formTreeControl">
    /// An instance of tree control.
    /// </param>
    /// <param name="_id">
    /// The Id of the node
    /// </param>
    /// <param name="_parentId">
    /// The parent Id of the node.
    /// </param>
    /// <param name="_multipleRoots">
    /// The option that indicates whether tree may have multiple root nodes (Yes) or only one single root node (No).
    /// </param>
    public void new(FormDataSource                  _formDataSource,
                    FormTreeControl                 _formTreeControl,
                    fieldId                         _id,
                    fieldId                         _parentId,
                    NoYes                           _multipleRoots = NoYes::No)
    {
        hierarchiesImageList = new ImageListAppl();

        hierarchiesImageList.add(#ImageReplenishmentHierarchy);
        hierarchiesImageList.add(#ImageRetailChannel);

        multipleRoots = _multipleRoots;

        super(_formDataSource, _formTreeControl, _id, _parentId, '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>