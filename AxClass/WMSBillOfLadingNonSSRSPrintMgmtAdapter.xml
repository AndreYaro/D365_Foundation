<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSBillOfLadingNonSSRSPrintMgmtAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSBillOfLadingNonSSRSPrintMgmtAdapter</c> class enables use of print management for non-SSRS (for example, Microsoft Office Excel) bill of lading report.
/// </summary>
[NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::WMSBillOfLading_RU),
NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::WMSBilOfLadingTranspDocument_RU)]
class WMSBillOfLadingNonSSRSPrintMgmtAdapter extends NonSSRSPrintMgmtAdapter
{
    RecordSortedList            journalList;
    WMSBillOfLading             wmsBillOfLading;
    SalesInvoiceJournalPrint    salesInvoiceJournalPrint;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodeType</Name>
				<Source><![CDATA[
        protected PrintMgmtNodeType getNodeType()
    {
        return PrintMgmtNodeType::SalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintSettingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assembles the print settings detail necessary for execution of the report.
    /// </summary>
    /// <returns>
    /// Instance of the <c>PrintMgmtPrintSettingDetail</c> class.
    /// </returns>
    protected PrintMgmtPrintSettingDetail getPrintSettingDetail()
    {
        PrintMgmtReportFormat       printMgmtReportFormat;
        SrsReportRunController      controller;
        SRSPrintDestinationSettings printSettings;

        PrintMgmtPrintSettingDetail printSettingDetail = new PrintMgmtPrintSettingDetail();

        // preserve user settings from dialog
        controller    = this.parmArgs().object() as SrsReportRunController;
        if (!controller)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        printSettings = controller.getDataContractObject(classStr(SRSPrintDestinationSettings));
        printSettingDetail.parmPrintJobSettings(printSettings);

        printMgmtReportFormat = PrintMgmtReportFormat::findSystem(printMgmtDocumentType);

        printSettingDetail.parmReportFormatName (printMgmtReportFormat.Name);
        printSettingDetail.parmSSRS             (printMgmtReportFormat.SSRS);
        printSettingDetail.parmType             (PrintMgmtDocInstanceType::Original);
        printSettingDetail.parmInstanceName     (enum2str(PrintMgmtDocInstanceType::Original));

        return printSettingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
        protected void initialize()
    {
        //Do nothing - printMgmtReportRun initialized depending on facture type and other parameters
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintMgmtReportRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>PrintMgmtReportRun</c> object according to setup of internal variables.
    /// </summary>
    /// <remarks>
    /// Internal variable values depend on distinct facture module and other facture parameters.
    /// </remarks>
    protected void initPrintMgmtReportRun()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(
            PrintMgmtHierarchyType::Sales,
            PrintMgmtNodeType::Sales,
            printMgmtDocumentType);

        if (salesInvoiceJournalPrint)
        {
            printMgmtReportRun.parmDefaultCopyPrintJobSettings    (new SRSPrintDestinationSettings(salesInvoiceJournalPrint.parmPrinterSettingsFormLetter()));
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesInvoiceJournalPrint.parmPrinterSettingsFormLetterCopy()));
            printMgmtReportRun.parmForcePrintJobSettings          (!salesInvoiceJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            //forcePrintJobSettings is reversal to usePrintManagement
            printMgmtReportRun.parmForcePrintJobSettings(false);
        }

        printMgmtReportRun.parmSSRS(PrintMgmtSSRS::NonSSRS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPrintSettings</Name>
				<Source><![CDATA[
        public void loadPrintSettings(Common _jourTable, Common _transTable, str _languageId, str _documentKeyValue = '')
    {
        if (this.parmArgs().parmEnumType() == enumNum(PrintCopyOriginal))
        {
            super(_jourTable, _transTable, _languageId, _documentKeyValue);
        }
        else
        {
            printMgmtReportRun.loadSettingDetail(this.getPrintSettingDetail(), _documentKeyValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
        protected void runPrintMgmt()
    {
        WMSBillOfLadingController   wmsBillOfLadingController;

        if (this.parmArgs().parmEnumType() == enumNum(PrintCopyOriginal))
        {
            printCopyOriginal = this.parmArgs().parmEnum();
        }
        else
        {
            printCopyOriginal = PrintCopyOriginal::Original;
        }

        salesInvoiceJournalPrint = args.caller() as salesInvoiceJournalPrint;
        if (salesInvoiceJournalPrint)
        {
            if (salesInvoiceJournalPrint.parmUsePrintManagement())
            {
                printCopyOriginal = PrintCopyOriginal::OriginalPrint;
            }
            else
            {
                printCopyOriginal = PrintCopyOriginal::Original;
            }
        }

        if (this.parmArgs().record())
        {
            // Get journal list from the selected record/s
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            if (this.parmArgs().object())
            {
                journalList = this.parmArgs().object() as RecordSortedList;
                if (!journalList)
                {
                    wmsBillOfLadingController = this.parmArgs().object() as WMSBillOfLadingController;
                    if (wmsBillOfLadingController)
                    {
                        journalList = wmsBillOfLadingController.billOfLadingList();
                    }
                }
            }
        }

        if (!journalList)
        {
            throw error("@SYS26348");
        }

        while (journalList.next(wmsBillOfLading))
        {
            if (!wmsBillOfLading)
            {
                throw error("@SYS26348");
            }

            this.parmArgs().record(wmsBillOfLading);

            this.initPrintMgmtReportRun();

            this.loadPrintSettings(wmsBillOfLading, wmsBillOfLading.salesTable(), wmsBillOfLading.LanguageId);
            this.outputReports();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecordId</Name>
				<Source><![CDATA[
        protected void setRecordId()
    {
        recordId = wmsBillOfLading.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WMSBillOfLadingNonSSRSPrintMgmtAdapter construct()
    {
        return new WMSBillOfLadingNonSSRSPrintMgmtAdapter();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>