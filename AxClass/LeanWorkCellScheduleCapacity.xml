<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanWorkCellScheduleCapacity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanWorkCellScheduleCapacity</c> class provides methods to calculate the booked, free, and
///    estimated capacity and consumption.
/// </summary>
public class LeanWorkCellScheduleCapacity
{
    #TimeConstants
    #define.weeksPerYear(52)

    WrkCtrResourceGroup             wrkCtrResourceGroup;            //cell
    WrkCtrResourceCalendar          wrkCtrResourceCalendar;    //cell calendar
    WorkCalendarTable               workCalendarTable;              //standard workday hours

    LeanWorkCellCapacity            leanWorkCellCapacity;
    LeanProductionFlowModel         leanProductionFlowModel;
    LeanSchedulePlanningPeriod      leanSchedulePlanningPeriod;
    TransDateTime                   dateTime;                       //UTC

    TransDateTime                   capacityFromDateTime;           //UTC
    TransDateTime                   capacityToDateTime;             //UTC
    TransDate                       capacityFromDate;               //company TZ
    TransDate                       capacityToDate;                 //company TZ

    Seconds                         totalCapacitySeconds;
    Seconds                         bookedCapacitySeconds;
    Seconds                         freeCapacitySeconds;

    InventQty                       totalCapacityThroughput;
    InventQty                       bookedCapacityThroughput;
    InventQty                       freeCapacityThroughput;

    boolean                         calcTotalCapacitySeconds;
    boolean                         calcBookedCapacitySeconds;
    boolean                         calcFreeCapacitySeconds;

    boolean                         calcTotalCapacityThroughput;
    boolean                         calcBookedCapacityThroughput;
    boolean                         calcFreeCapacityThroughput;

    boolean                         silentMode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bookedCapacitySeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the number of seconds that are already booked in the given period on the work cell.
    /// </summary>
    /// <param name="_forceRecalc">
    ///    A Boolean value that indicates whether the calculation must be executed even if a cached value is
    ///    present.
    /// </param>
    /// <returns>
    ///    The number seconds that are already booked.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Seconds bookedCapacitySeconds(boolean _forceRecalc = false)
    {
        KanbanJobScheduleCapacitySum        kanbanJobScheduleCapacitySum;

        if (   _forceRecalc
            || !calcBookedCapacitySeconds)
        {
            calcBookedCapacitySeconds = true;
            bookedCapacitySeconds     = 0;

            select sum(PlannedCapacitySumSeconds) from kanbanJobScheduleCapacitySum
                where kanbanJobScheduleCapacitySum.WorkCell      == wrkCtrResourceGroup.RecId
                   && kanbanJobScheduleCapacitySum.PlannedPeriod >= capacityFromDate
                   && kanbanJobScheduleCapacitySum.PlannedPeriod <= capacityToDate;

            bookedCapacitySeconds = kanbanJobScheduleCapacitySum.PlannedCapacitySumSeconds;
        }

        return bookedCapacitySeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookedCapacityThroughput</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity that are already booked in the specified period on the work cell.
    /// </summary>
    /// <param name="_forceRecalc">
    ///    A Boolean value that indicates whether the calculation must be executed even if a cached value is
    ///    present.
    /// </param>
    /// <returns>
    ///    The quantity that is already booked.
    /// </returns>
    /// <remarks>
    ///    The related unit can be retrieved by calling the <c>capacityUnitId</c> method of the
    ///    <c>LeanWorkCellCapacity</c> class.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty bookedCapacityThroughput(boolean _forceRecalc = false)
    {
        KanbanJobScheduleCapacitySum        kanbanJobScheduleCapacitySum;

        if (   _forceRecalc
            || !calcBookedCapacityThroughput)
        {
            calcBookedCapacityThroughput = true;
            bookedCapacityThroughput     = 0;

            select sum(PlannedCapacitySumThroughput) from kanbanJobScheduleCapacitySum
                where kanbanJobScheduleCapacitySum.WorkCell      == wrkCtrResourceGroup.RecId
                   && kanbanJobScheduleCapacitySum.PlannedPeriod >= capacityFromDate
                   && kanbanJobScheduleCapacitySum.PlannedPeriod <= capacityToDate;

            bookedCapacityThroughput = kanbanJobScheduleCapacitySum.PlannedCapacitySumThroughput;
        }

        return bookedCapacityThroughput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>CalendarId</c> value for the period.
    /// </summary>
    /// <returns>
    ///    A <c>CalendarId</c> value.
    /// </returns>
    public CalendarId calendarId()
    {
        return wrkCtrResourceCalendar.CalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capacityFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the start of the period.
    /// </summary>
    /// <returns>
    /// A <c>TransDate</c> value.
    /// </returns>
    /// <remarks>
    /// The date is a company timezone date.
    ///</remarks>
    public TransDate capacityFromDate()
    {
        return capacityFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capacityFromDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the start date and time of the period.
    /// </summary>
    /// <returns>
    /// A <c>TransDateTime</c> value.
    /// </returns>
    /// <remarks>
    /// The value is a UTC date/time.
    ///</remarks>
    public TransDateTime capacityFromDateTime()
    {
        return capacityFromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capacitySeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the capacity in seconds by using the calendar.
    /// </summary>
    /// <param name="_fromDateTime">
    ///    The start date and time to use in the calculation.
    /// </param>
    /// <param name="_toDateTime">
    ///    The end date and time to use in the calculation.
    /// </param>
    /// <returns>
    ///    The calendar capacity in the date and time range.
    /// </returns>
    protected Seconds capacitySeconds(
        TransDateTime _fromDateTime = capacityFromDateTime,
        TransDateTime _toDateTime   = capacityToDateTime)
    {
        return LeanWorkCellScheduleCapacity::capacitySecondsServer(wrkCtrResourceCalendar.CalendarId,
                                                                   _fromDateTime,
                                                                   _toDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>capacityToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end of the period.
    /// </summary>
    /// <returns>
    /// A <c>TransDate</c> value.
    /// </returns>
    /// <remarks>
    /// The date is a company timezone date.
    ///</remarks>
    public TransDate capacityToDate()
    {
        return capacityToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capacityToDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date and time of the period.
    /// </summary>
    /// <returns>
    /// A <c>TransDateTime</c> value.
    /// </returns>
    /// <remarks>
    /// The value is a UTC date/time.
    ///</remarks>
    public TransDateTime capacityToDateTime()
    {
        return capacityToDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capacityUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unit.
    /// </summary>
    /// <returns>
    /// A <c>UnitId</c> value.
    /// </returns>
    public RefRecId capacityUnitOfMeasure()
    {
        return leanWorkCellCapacity.CapacityUnitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the consistency of the cell capacity and calendar.
    /// </summary>
    /// <returns>
    ///    true if the cell capacity and calendar are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The cell capacity and calendar must be the same throughout the whole length of the period.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The cell capacity changes during the period.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The calendar changes during the period.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkData()
    {
        boolean result = true;

        setprefix("@SYS132227");

        if (!wrkCtrResourceGroup)
        {
            result = checkFailed("@SYS309880") && result;
        }

        if (!leanProductionFlowModel)
        {
            result = checkFailed("@SYS309881") && result;
        }

        if (!leanWorkCellCapacity)
        {
            result = checkFailed("@SYS309882") && result;
        }
        else
        {
            if (   leanWorkCellCapacity.ValidFromDate > capacityFromDate
                || (leanWorkCellCapacity.ValidToDate  < capacityToDate
                &&  leanWorkCellCapacity.ValidToDate))
            {
                result = checkFailed(strfmt("@SYS301802",capacityFromDate,capacityToDate)) && result;
            }
        }

        if (!wrkCtrResourceCalendar)
        {
            result = checkFailed("@SYS309883") && result;
        }
        else
        {
            if (   wrkCtrResourceCalendar.ValidFrom > capacityFromDate
                || (wrkCtrResourceCalendar.ValidTo  < capacityToDate
                &&  wrkCtrResourceCalendar.ValidTo))
            {
                result = this.throwOrTrace(strfmt("@SYS301788",capacityFromDate,capacityToDate));
            }
        }

        if (!result)
        {
            result = this.throwOrTrace(strfmt("@SYS309879", wrkCtrResourceGroup.WrkCtrId, dateTime));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedCapacityConsumptionSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the estimated capacity consumption in seconds.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> to estimate.
    /// </param>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> record to which the job belongs; optional.
    /// </param>
    /// <param name="_leanProductionFlowActivity">
    ///    The <c>LeanProductionFlowActivity</c> record that represents the jobs process activity; optional.
    /// </param>
    /// <returns>
    ///    The estimated capacity consumption in seconds.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    A required unit of measure is not set up.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    A required unit of measure is not set up.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Seconds estimatedCapacityConsumptionSeconds(
        KanbanJob                   _kanbanJob,
        Kanban                      _kanban                     = _kanbanJob.kanban(),
        LeanProductionFlowActivity  _leanProductionFlowActivity = _kanbanJob.leanProductionFlowActivity())
    {
        LeanProductionFlow          leanProductionFlow = _leanProductionFlowActivity.leanProductionFlow(capacityToDateTime);
        RefRecId                    unitOfMeasure      = UnitOfMeasure::unitOfMeasureIdBySymbol(_kanban.inventTable().inventUnitId());
        LeanCycleTimeInUnit         cycleTime          = _leanProductionFlowActivity.CycleTime;
        Seconds                     seconds;

        //check next level
        PlanActivity planActivity = _leanProductionFlowActivity.planActivity();

        if (   leanProductionFlow
            && planActivity)
        {
            //the cycle time from the activity relates to the quantity per cycle on the production flow.
            //Convert this quantity to the inventory unit of the kanban item

            if (!leanProductionFlow.QuantityPerCycleUnitOfMeasure)
            {
                throw error(strfmt("@SYS327433",leanProductionFlow.planReference().PlanName));
            }

            InventQty cycleTimePerQuantity = EcoResProductUnitConverter::convertForReleasedProduct(_kanban.ItemId,
                                                                                                   _kanban.InventDimId,
                                                                                                   leanProductionFlow.QuantityPerCycle,
                                                                                                   leanProductionFlow.QuantityPerCycleUnitOfMeasure,
                                                                                                   unitOfMeasure,
                                                                                                   NoYes::Yes);

            //apply quantity to cycle time
            cycleTime            = cycleTime * _kanbanJob.QuantityOrdered / (cycleTimePerQuantity ? cycleTimePerQuantity : 1);

            //convert result to seconds and apply throughput ratio
            if (!leanProductionFlow.TaktUnitOfMeasure)
            {
                throw error(strfmt("@SYS327432",leanProductionFlow.planReference().PlanName));
            }

            seconds = real2int(ProdTimeUnitOfMeasure::convertValueToTimeUnit(leanProductionFlow.TaktUnitOfMeasure,
                                                                             cycleTime,
                                                                             ProdTimeUnitType::Seconds,
                                                                             _kanban.ItemId,
                                                                             _kanban.InventDimId) * _kanbanJob.throughputRatio());
        }

        return seconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedCapacityConsumptionThroughput</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the estimated capacity consumption in units.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> table to estimate.
    /// </param>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> record that to which the job belongs; optional.
    /// </param>
    /// <param name="_unitOfMeasure">
    ///    The <c>UnitId</c> that represents the kanban item inventory unit.
    /// </param>
    /// <returns>
    ///    The estimated capacity consumption in units.
    /// </returns>
    /// <remarks>
    ///    The related unit can be retrieved by calling the <c>LeanWorkCellScheduleCapacity.capacityUnit</c>
    ///    method.The unit is defined in the <c>LeanWorkCellCapacity</c> record.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty estimatedCapacityConsumptionThroughput(
        KanbanJob                   _kanbanJob,
        Kanban                      _kanban = _kanbanJob.kanban(),
        RefRecId                    _unitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(_kanban.inventTable().inventUnitId()))
    {
        InventQty                   inventQty;

        if (_unitOfMeasure)
        {
            switch (leanProductionFlowModel.ModelType)
            {
                case LeanProdFlowModelTypes::Throughput:
                    inventQty = EcoResProductUnitConverter::convertForReleasedProduct(_kanban.ItemId,
                                                                                      _kanban.InventDimId,
                                                                                      _kanbanJob.QuantityOrdered,
                                                                                      _unitOfMeasure,
                                                                                      leanWorkCellCapacity.CapacityUnitOfMeasure,
                                                                                      NoYes::Yes)
                                * _kanbanJob.throughputRatio();
                    break;
                default:
                    inventQty = 0;
                    break;
            }
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>freeCapacitySeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of available seconds in the period.
    /// </summary>
    /// <param name="_forceRecalc">
    ///    A Boolean value that indicates whether the calculation must be executed even if a cached value is
    ///    present.
    /// </param>
    /// <returns>
    ///    The number of available seconds in the period.
    /// </returns>
    /// <remarks>
    ///    If the period is overloaded the method returns zero.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Seconds freeCapacitySeconds(boolean _forceRecalc = false)
    {
        if (   _forceRecalc
            || !calcFreeCapacitySeconds)
        {
            calcFreeCapacitySeconds = true;
            freeCapacitySeconds     = max(0,this.totalCapacitySeconds(_forceRecalc) - this.bookedCapacitySeconds(_forceRecalc));
        }

        return freeCapacitySeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>freeCapacityThroughput</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of available units in the period.
    /// </summary>
    /// <param name="_forceRecalc">
    ///    A Boolean value that indicates whether the calculation must be executed even if a cached value is
    ///    present.
    /// </param>
    /// <returns>
    ///    The number of available units in the period.
    /// </returns>
    /// <remarks>
    ///    If the period is overloaded the method returns zero.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty freeCapacityThroughput(boolean _forceRecalc = false)
    {
        if (   _forceRecalc
            || !calcFreeCapacityThroughput)
        {
            calcFreeCapacityThroughput = true;
            freeCapacityThroughput     = max(0,this.totalCapacityThroughput(_forceRecalc) - this.bookedCapacityThroughput(_forceRecalc));
        }

        return freeCapacityThroughput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        capacityFromDateTime = dateTime;
        capacityFromDate     = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(dateTime,DateTimeUtil::getCompanyTimeZone()));
        this.loadData();
        this.setPeriod(capacityFromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanCapacityPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the work cell capacity period.
    /// </summary>
    /// <returns>
    /// A <c>LeanCapacityPeriods</c> enumeration value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanCapacityPeriods leanCapacityPeriod()
    {
        return leanWorkCellCapacity.CapacityPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProductionFlowModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LeanProductionFlowModel</c> record.
    /// </summary>
    /// <returns>
    /// A <c>LeanProductionFlowModel</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProductionFlowModel leanProductionFlowModel()
    {
        return leanProductionFlowModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanWorkCellCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LeanWorkCellCapacity</c> record.
    /// </summary>
    /// <returns>
    /// A <c>LeanWorkCellCapacity</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanWorkCellCapacity leanWorkCellCapacity()
    {
        return leanWorkCellCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables.
    /// </summary>
    /// <remarks>
    /// This method is called whenever the period is changed.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void loadData()
    {
        if (wrkCtrResourceGroup)
        {
            leanWorkCellCapacity        = LeanWorkCellCapacity::findActiveForWorkCell(wrkCtrResourceGroup.RecId,capacityFromDate);
            leanProductionFlowModel     = leanWorkCellCapacity.productionFlowModel();
            wrkCtrResourceCalendar      = WrkCtrResourceCalendar::findActiveForResourceGroup(wrkCtrResourceGroup.RecId,capacityFromDate);
            workCalendarTable           = WorkCalendarTable::find(wrkCtrResourceCalendar.CalendarId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the production flow model type.
    /// </summary>
    /// <returns>
    /// A <c>LeanProdFlowModeTypes</c> enumeration value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProdFlowModelTypes modelType()
    {
        return leanProductionFlowModel.ModelType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the period forward to the next planning period.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void nextPeriod()
    {
        this.setPeriod(leanSchedulePlanningPeriod.nextPlanningPeriod(capacityFromDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDateTime parmDateTime(utcdatetime _dateTime = dateTime)
    {
        dateTime = _dateTime;
        return dateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSilentMode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean parmSilentMode(boolean _silentMode = silentMode)
    {
        silentMode = _silentMode;

        return silentMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWrkCtrResourceGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public WrkCtrResourceGroup parmWrkCtrResourceGroup(WrkCtrResourceGroup _wrkCtrResourceGroup = wrkCtrResourceGroup)
    {
        wrkCtrResourceGroup = _wrkCtrResourceGroup;
        return wrkCtrResourceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planningPeriodType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the planning period type.
    /// </summary>
    /// <returns>
    /// A <c>LeanPlanningPeriodTypes</c> enumeration value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanPlanningPeriodTypes planningPeriodType()
    {
        return leanProductionFlowModel.PlanningPeriodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the period and initializes the start and end dates.
    /// </summary>
    /// <param name="_transDate">
    ///    A <c>TransDate</c> value that is used to initialize the period.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setPeriod(TransDate _transDate)
    {
        if (   leanProductionFlowModel
            && wrkCtrResourceCalendar)
        {
            leanSchedulePlanningPeriod = LeanSchedulePlanningPeriod::newStandard(leanProductionFlowModel.ModelType,
                                                                                 leanProductionFlowModel.PlanningPeriodType,
                                                                                 wrkCtrResourceCalendar.CalendarId);

            capacityFromDateTime = leanSchedulePlanningPeriod.planningPeriodStartDateTime(_transDate);  //UTC
            capacityToDateTime   = leanSchedulePlanningPeriod.planningPeriodEndDateTime(_transDate);    //UTC
            capacityFromDate     = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(capacityFromDateTime,DateTimeUtil::getCompanyTimeZone()));
            capacityToDate       = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::addSeconds(capacityToDateTime,-1),
                                                      DateTimeUtil::getCompanyTimeZone()));
        }
        this.checkData();

        //reset cache
        calcTotalCapacitySeconds     = false;
        calcBookedCapacitySeconds    = false;
        calcFreeCapacitySeconds      = false;
        calcTotalCapacityThroughput  = false;
        calcBookedCapacityThroughput = false;
        calcFreeCapacityThroughput   = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardWorkDayHours</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the standard work day hours.
    /// </summary>
    /// <returns>
    ///    The hours of the standard work day.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public StandardWorkDayHours standardWorkDayHours()
    {
        return workCalendarTable ? workCalendarTable.StandardWorkDayHours : #hoursPerDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwOrTrace</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles validation errors.
    /// </summary>
    /// <param name="_errorMessage">
    ///    The error message to be logged.
    /// </param>
    /// <returns>
    ///    true if an error is found in silent mode; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the object is in silent mode, no exception is thrown.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    In non-silent mode the <c>_errorMessage</c> is used for throwing an application exception.
    /// </exception>
    private boolean throwOrTrace(str _errorMessage)
    {
        boolean result;

        if (silentMode)
        {
            result = checkFailed(_errorMessage);
        }
        else
        {
            throw error(_errorMessage);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCapacitySeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total number of seconds in the period according to the calendar.
    /// </summary>
    /// <param name="_forceRecalc">
    ///    A Boolean value that indicates whether the calculation must be executed even if a cached value is
    ///    present.
    /// </param>
    /// <returns>
    ///    The total number seconds in the period.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Seconds totalCapacitySeconds(boolean _forceRecalc = false)
    {
        if (_forceRecalc
            || !calcTotalCapacitySeconds)
        {
            calcTotalCapacitySeconds = true;

            totalCapacitySeconds     = any2int(this.capacitySeconds());
        }

        return totalCapacitySeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCapacityThroughput</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total throughput quantity in the period.
    /// </summary>
    /// <param name="_forceRecalc">
    ///    A Boolean value that indicates whether the calculation must be executed even if a cached value is
    ///    present.
    /// </param>
    /// <returns>
    ///    The total throughput quantity in the period.
    /// </returns>
    public InventQty totalCapacityThroughput(boolean _forceRecalc = false)
    {
        if (   _forceRecalc
            || !calcTotalCapacityThroughput)
        {
            calcTotalCapacityThroughput = true;
            totalCapacityThroughput     = 0;
            real factorThroughput       = 0;

            if (this.calendarId())
            {
                switch (leanWorkCellCapacity.CapacityPeriod)
                {
                    case LeanCapacityPeriods::StandardWorkday:
                        if (workCalendarTable.StandardWorkDayHours > 0)
                        {
                            Seconds capacitySeconds = this.totalCapacitySeconds(_forceRecalc);
                            factorThroughput = capacitySeconds / (this.standardWorkDayHours() * #SecondsPerHour);
                        }
                        break;
                    case LeanCapacityPeriods::Week:
                        PreferredLocale preferredLocale = Global::currentUserLanguage();
                        date endOfWeekDate = DateTimeUtil::getEndOfWeekDate(preferredLocale, capacityFromDate);
                        Days workingDays = this.workingDays(LeanSchedulePlanningPeriod::mondayOfWeek(capacityFromDate), endOfWeekDate);
                        if (workingDays > 0)
                        {
                            switch (leanProductionFlowModel.PlanningPeriodType)
                            {
                                case LeanPlanningPeriodTypes::Day:
                                    factorThroughput = 1/workingDays;
                                    break;
                                case LeanPlanningPeriodTypes::Week:
                                    factorThroughput = 1.0;
                                    break;
                            }
                        }
                        break;
                    case LeanCapacityPeriods::Month:
                        workingDays = this.workingDays(dateStartMth(capacityFromDate),dateEndMth(capacityFromDate));
                        if (workingDays > 0)
                        {
                            switch (leanProductionFlowModel.PlanningPeriodType)
                            {
                                case LeanPlanningPeriodTypes::Day:
                                    factorThroughput = 1/workingDays;
                                break;
                                case LeanPlanningPeriodTypes::Week:
                                    factorThroughput = #monthsPerYear/#weeksPerYear;
                                    break;
                            }
                        }
                        break;
                }
            }

            totalCapacityThroughput = decround(leanWorkCellCapacity.AverageThroughputQuantity * factorThroughput,0);
        }

        return totalCapacityThroughput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workingDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the number of working days in the specified period in the calendar.
    /// </summary>
    /// <param name="_fromDate">
    ///    The period start date in the company time zone.
    /// </param>
    /// <param name="_toDate">
    ///    The period end date in the company time zone.
    /// </param>
    /// <returns>
    ///    The number of working days in the period.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Days workingDays(
        TransDate _fromDate = capacityFromDate,     //company TZ
        TransDate _toDate   = capacityToDate)       //company TZ
    {
        Days days = LeanWorkCellScheduleCapacity::workingDaysServer(wrkCtrResourceCalendar.CalendarId,
                                                                    _fromDate,
                                                                    _toDate);
        return days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capacitySecondsServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the capacity in seconds in a specified period according to a specified calendar.
    /// </summary>
    /// <param name="_calendarId">
    ///    The calendar used in the calculation.
    /// </param>
    /// <param name="_fromDateTime">
    ///    The period start date and time.
    /// </param>
    /// <param name="_toDateTime">
    ///    The period end date and time.
    /// </param>
    /// <returns>
    ///    The capacity in seconds.
    /// </returns>
    public static Seconds capacitySecondsServer(
        CalendarId    _calendarId,
        TransDateTime _fromDateTime,    //UTC
        TransDateTime _toDateTime)      //UTC
    {
        TransDateTime   fromDateTimeTZ  = DateTimeUtil::applyTimeZoneOffset(_fromDateTime,DateTimeUtil::getCompanyTimeZone());
        TransDateTime   toDateTimeTZ    = DateTimeUtil::applyTimeZoneOffset(_toDateTime,DateTimeUtil::getCompanyTimeZone());
        TransDate       fromDate        = DateTimeUtil::date(fromDateTimeTZ);
        TransDate       toDate          = DateTimeUtil::date(toDateTimeTZ);
        TransDate       transDate       = fromDate;
        Seconds         capacitySeconds = 0;

        if (   _calendarId
            && _fromDateTime
            && _toDateTime)
        {
            while (transDate <= toDate)
            {
                timeOfDay fromTime = transDate == fromDate ? DateTimeUtil::time(fromDateTimeTZ) : 0;
                timeOfDay toTime = transDate == toDate   ? DateTimeUtil::time(toDateTimeTZ)   : maxint();

                //expects comnpany time zone dates/times
                if (WorkCalendarDate::isDateOpen(_calendarId,transDate))
                {
                    capacitySeconds += WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                                            transDate,
                                                                            fromTime,
                                                                            toTime,
                                                                            true,
                                                                            true);
                }
                transDate++;
            }
        }

        return capacitySeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static LeanWorkCellScheduleCapacity construct()
    {
        return new LeanWorkCellScheduleCapacity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanWorkCellScheduleCapacity</c> class.
    /// </summary>
    /// <param name="_planActivity">
    ///    A <c>PlanActivity</c> record that is used to instantiate the class.
    /// </param>
    /// <param name="_dateTime">
    ///    A <c>TransDateTime</c> temporal value that is used to instantiate the class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LeanWorkCellScheduleCapacity</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanWorkCellScheduleCapacity newPlanActivity(
        PlanActivity  _planActivity,
        TransDateTime _dateTime)    //UTC
    {
        LeanWorkCellScheduleCapacity    leanCellScheduleCapacity = LeanWorkCellScheduleCapacity::construct();

        leanCellScheduleCapacity.parmWrkCtrResourceGroup(_planActivity.planActivityResourceRequirement().wrkCtrResourceGroup());
        leanCellScheduleCapacity.parmDateTime(_dateTime);
        leanCellScheduleCapacity.init();

        return leanCellScheduleCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>LeanWorkCellScheduleCapacity</c> object.
    /// </summary>
    /// <param name="_wrkCtrResourceGroup">
    /// A <c>WrkCtrResourceGroup</c> record used to instantiate the class.
    /// </param>
    /// <param name="_dateTime">
    /// A <c>TransDateTime</c> temporal value used to instantiate the class.
    /// </param>
    /// <param name="_silentMode">
    /// A boolean value indicating whether the initial validation should throw exceptions
    /// or just log errors in the infolog.
    /// </param>
    /// <returns>
    /// A new <c>LeanWorkCellScheduleCapacity</c> object.
    /// </returns>
    public static LeanWorkCellScheduleCapacity newStandard(
        WrkCtrResourceGroup _wrkCtrResourceGroup,
        TransDateTime       _dateTime,            //UTC
        boolean             _silentMode = false)
    {
        LeanWorkCellScheduleCapacity    leanCellScheduleCapacity = LeanWorkCellScheduleCapacity::construct();

        if (_wrkCtrResourceGroup.DataAreaId != appl.company().dataArea(tablenum(WrkCtrResourceGroup)))
        {
            throw error(strfmt("@SYS332727",_wrkCtrResourceGroup.WrkCtrId));
        }

        leanCellScheduleCapacity.parmWrkCtrResourceGroup(_wrkCtrResourceGroup);
        leanCellScheduleCapacity.parmDateTime(_dateTime);
        leanCellScheduleCapacity.parmSilentMode(_silentMode);
        leanCellScheduleCapacity.init();

        return leanCellScheduleCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workingDaysServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the number of open days in a period by using a calendar.
    /// </summary>
    /// <param name="_calendarId">
    ///    The calendar that is used in the calculation.
    /// </param>
    /// <param name="_fromDate">
    ///    The period start date in the company time zone.
    /// </param>
    /// <param name="_toDate">
    ///    The period end date in the company time zone.
    /// </param>
    /// <returns>
    ///    The number of open days in the calendar.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Days workingDaysServer(
        CalendarId _calendarId,
        TransDate  _fromDate,   //company TZ
        TransDate  _toDate)     //company TZ
    {
        TransDate   transDate = _fromDate;
        Days        days      = 0;

        if (   _calendarId
            && _fromDate
            && _toDate)
        {
            while (transDate <= _toDate)
            {
                days += WorkCalendarDate::isDateOpen(_calendarId,transDate) ? 1 : 0;
                transDate++;
            }
        }

        return days;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>