<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashDueAnnouncement_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CashDueAnnouncement_RU extends RunBaseBatch implements BatchRetryable
{
    recId ledgerRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args)
    {
        if (!_args || !_args.record() || _args.dataset() != tableNum(LedgerJournalTrans))
            throw error(Error::wrongUseOfFunction(funcName()));

        ledgerRecId = _args.record().(fieldNum(LedgerJournalTrans, AnnouncementNum_RU)) ? 0 : _args.record().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (ledgerRecId)
        {
            try
            {
                ttsbegin;

                LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(ledgerRecId, true);

                CashDueAnnouncementJournal_RU cashDueAnnouncementJournal;
                cashDueAnnouncementJournal.createFromJournalLine(ledgerJournalTrans);

                ledgerJournalTrans.AnnouncementNum_RU = cashDueAnnouncementJournal.AnnouncementNum;
                ledgerJournalTrans.DocumentNum = cashDueAnnouncementJournal.AnnouncementNum;
                ledgerJournalTrans.DocumentDate = cashDueAnnouncementJournal.TransDate;
                ledgerJournalTrans.update();

                info(strFmt("@GLS113134", cashDueAnnouncementJournal.AnnouncementNum));

                ttscommit;
            }
            catch (Exception::Error)
            {
                throw error("@GLS113135");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args && _args.record().RecId)
        {
            CashDueAnnouncement_RU cashDueAnnouncement = new CashDueAnnouncement_RU();
            cashDueAnnouncement.initFromArgs(_args);
            cashDueAnnouncement.runOperation();

            LedgerJournalTrans ledgerJournalTrans =_args.record();

            FormDataUtil::getFormDataSource(ledgerJournalTrans).reread();
            FormDataUtil::getFormDataSource(ledgerJournalTrans).active();

            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00039, funcName());

            XMLExcelReport_CashDueAnnouncement_RU report = XMLExcelReport_CashDueAnnouncement_RU::construct();
            report.initFromArgs(_args);

            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>