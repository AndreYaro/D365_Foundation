<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>SalesPurchReport_RU</c> used for data preparation
/// for reports based on sales or purch order documents or FTI
/// </summary>
abstract class SalesPurchReport_RU extends RunBaseBatch
{
    private const str LocalizationFeatureReference = 'EEU-00025';

    TmpSalesPurchReportLine_RU  dynamicData;
    TmpSalesPurchReportTable_RU header;

    RecordSortedList        journalList;

    CustVendInvoiceJour     invoiceJour;
    CustVendInvoiceTrans    invoiceTrans;
    MarkupTrans             markupTrans;

    CompanyInfo             company;

    VendTable               vendor;
    CustTable               customer;
    VendTable               consignor;
    CustTable               consignee;

    VendBankAccount         consignorBankAccount;
    CustBankAccount         consigneeBankAccount;
    VendBankAccount         vendorBankAccount;
    CustBankAccount         customerBankAccount;

    ExchRate                exchRate;
    int                     reverseInvoice;
    int                     lineNum;
    int                     reverseLine;

    PrintCopyOriginal       printCopyOriginal;
    FormletterJournalPrint  formletterJournalPrint;

    boolean                 proforma;

    Counter                 internalId;

    boolean                 printInMST;

    QueryRun                queryRun;

    private SRSPrintDestinationSettings printDestinationSettings;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAmountToHeader</Name>
				<Source><![CDATA[
    final protected void addAmountToHeader(AmountCur       _totalAmount,
                                           TaxAmountCur    _totalVATAmount,
                                           AmountCur       _totalAmountWithVAT,
                                           Qty             _totalQty          = 0,
                                           TaxPackagingQty _totalPackagingQty = 0,
                                           Weight          _totalGrossWeight  = 0,
                                           Weight          _totalNetWeight    = 0,
                                           Volume          _totalVolume       = 0)
    {
        header.TotalAmount             += _totalAmount;
        header.TotalVATAmount          += _totalVATAmount;
        header.TotalAmountWithVAT      += _totalAmountWithVAT;
        header.TotalQty                += _totalQty;
        header.TotalPackagingQty       += _totalPackagingQty;
        header.TotalGrossWeight        += _totalGrossWeight;
        header.TotalNetWeight          += _totalNetWeight;
        header.TotalVolume             += _totalVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExtraAmountToHeader</Name>
				<Source><![CDATA[
    protected void addExtraAmountToHeader(AmountCur _totalAmount)
    {
        this.addAmountToHeader(_totalAmount, 0, _totalAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFreeTextInvoiceProformaCondition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds exists join filter on <c>CustInvoiceLine</c> and
    ///     <c>CustInvoiceTable</c> to the invoice transactions' query.
    /// </summary>
    /// <param name="_tradeLoopTrans">
    ///     The <c>QueryRun</c> object associated with invoice trasactions' query.
    /// </param>
    protected void addFreeTextInvoiceProformaCondition(QueryRun _tradeLoopTrans)
    {
        if (this.isFreeTextInvoiceProforma())
        {
            QueryBuildDataSource qbds = _tradeLoopTrans.query().dataSourceTable(invoiceTrans.TableId).addDataSource(tableNum(CustInvoiceLine));
            qbds.relations(false);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldNum(CustInvoiceTrans, SourceDocumentLine),
                         fieldNum(CustInvoiceLine,  SourceDocumentLine));

            qbds = qbds.addDataSource(tableNum(CustInvoiceTable));
            qbds.relations(false);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldNum(CustInvoiceLine,  ParentRecId),
                         fieldNum(CustInvoiceTable, RecId));

           qbds.addRange(fieldNum(CustInvoiceTable, SourceDocumentHeader)).value(queryValue(invoiceJour.SourceDocumentHeader_RU));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineAmountToHeader</Name>
				<Source><![CDATA[
    protected void addLineAmountToHeader(AmountCur       _totalAmount,
                                         TaxAmountCur    _totalVATAmount,
                                         AmountCur       _totalAmountWithVAT,
                                         Qty             _totalQty,
                                         TaxPackagingQty _totalPackagingQty,
                                         Weight          _totalGrossWeight,
                                         Weight          _totalNetWeight,
                                         Volume          _totalVolume = 0)
    {
        this.addAmountToHeader(_totalAmount,
                               _totalVATAmount,
                               _totalAmountWithVAT,
                               _totalQty,
                               _totalPackagingQty,
                               _totalGrossWeight,
                               _totalNetWeight,
                               _totalVolume);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMarkupAmountToHeader</Name>
				<Source><![CDATA[
    protected void addMarkupAmountToHeader(AmountCur    _totalAmount,
                                           TaxAmountCur _totalVATAmount,
                                           AmountCur    _totalAmountWithVAT)
    {
        this.addAmountToHeader(_totalAmount, _totalVATAmount, _totalAmountWithVAT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDynamicData</Name>
				<Source><![CDATA[
    protected void adjustDynamicData()
    {
        AmountCur   difference         = CurrencyExchangeHelper::amount(invoiceJour.InvoiceAmount * exchRate / 100 - header.TotalAmountWithVAT * reverseInvoice, header.CurrencyCode),
                    differenceRemain   = difference,
                    differenceAllocate;

        int         line;

        if (difference)
        {
            select forupdate dynamicData
                order by LineAmount asc
                where dynamicData.InternalId == header.InternalId;

            while (differenceRemain && dynamicData)
            {
                line ++;

                differenceAllocate = line == header.LineNum ?
                                     differenceRemain       :
                                     (CurrencyExchangeHelper::amount(dynamicData.LineAmount * difference / header.TotalAmount, header.CurrencyCode));

                differenceRemain              -= differenceAllocate;
                dynamicData.LineAmount        += differenceAllocate;
                dynamicData.LineAmountWithTax += differenceAllocate;
                dynamicData.Price              = CurrencyExchangeHelper::price(dynamicData.LineAmount / (dynamicData.Qty ? dynamicData.Qty : 1), header.CurrencyCode);
                dynamicData.doUpdate();

                this.adjustSubheader(differenceAllocate);

                next dynamicData;
            }

            header.TotalAmount        += difference;
            header.TotalAmountWithVAT += difference;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustSubheader</Name>
				<Source><![CDATA[
    protected void adjustSubheader(AmountCur  _difference)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscDateAmount</Name>
				<Source><![CDATA[
    // See CashDisc::cashDiscTxt
    private container cashDiscDateAmount()
    {
        CashDiscdate   cashDiscdate   = dateNull();
        CashDiscAmount cashDiscAmount = 0.0;

        if (invoiceJour.CashDiscCode)
        {
            CashDisc cashDisc = CashDisc::find(invoiceJour.CashDiscCode);
            cashDiscdate = cashDisc.discDate(invoiceJour.DocumentDate ?
                                             invoiceJour.DocumentDate :
                                             invoiceJour.InvoiceDate);

            for (cashDisc = cashDisc;
                 cashDisc;
                 cashDisc = CashDisc::find(cashDisc.CashDiscCodeNext))
            {
                cashDiscAmount += CashDisc::cashDiscAmount(cashDisc.CashDiscCode,
                                                           printInMST ? CompanyInfoHelper::standardCurrency() : invoiceJour.CurrencyCode,
                                                           invoiceJour.InvoiceAmount * exchRate / 100 * reverseInvoice,
                                                           (invoiceJour.InvoiceAmount - invoiceJour.SumTax) * exchRate / 100 * reverseInvoice,
                                                           TradeModuleType::newFromModule(this.getModule()).toModuleCustVend());
            }
        }

        return [ cashDiscdate, cashDiscAmount ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(CustVendInvoiceJour  _jour)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public final Object dialog()
    {
        Object ret;
        if (this.showDialog())
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public abstract DocumentStatus documentStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    public boolean doRun()
    {
        return header ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeSubheader</Name>
				<Source><![CDATA[
    protected void finalizeSubheader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    abstract protected ModuleInventPurchSales getModule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    abstract protected TableId getTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVatValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets VAT value in the invoice transaction.
    /// </summary>
    /// <param name="_invoiceTrans">
    ///     The table buffer of the <c>CustInvoiceTrans</c> or <c>VendInvoiceTrans</c> table.
    /// </param>
    /// <returns>
    ///     VAT value.
    /// </returns>
    protected Description getVatValueStr(CustVendInvoiceTrans _invoiceTrans)
    {
        Description ret;

        TaxValue vatValue = _invoiceTrans.CustVendInvoiceTrans::getVATValue_RU();
        if (vatValue)
        {
            ret = strFmt("@GLS106007", vatValue);
        }
        else
        {
            TaxCode taxCode = TaxTable::vatCode_RU(_invoiceTrans.TaxGroup_RU, _invoiceTrans.TaxItemGroup_RU);

            if (!taxCode)
            {
                ret = "@GLS100016";
            }
            else
            {
                ret = strFmt("@GLS106007", vatValue);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerDocumentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of current header document
    /// </summary>
    /// <returns>
    /// Name of current header document
    /// </returns>
    public DocumentNameLong_RU headerDocumentName()
    {
        return header.DocumentName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyData</Name>
				<Source><![CDATA[
    final protected SalesPurchReportCounteragentData_RU initCompanyData(CompanyBankAccountId _bank = "")
    {
        TransDate invoiceDate = this.journalDate();
        SalesPurchReportCounteragentData_RU ret = new SalesPurchReportCounteragentData_RU(this.languageId());

        ret.parmName            (company.name());
        ret.parmAddress         (company.postalAddress().Address);
        ret.parmPhone           (company.phone());
        ret.parmTelefax         (company.teleFax());
        ret.parmBankAccountTable(BankAccountTable::find(_bank ? _bank : company.Bank));
        ret.parmOKDP            (CompanyInfoHelper::partyOKDPasOfDate_RU(company, invoiceDate));
        ret.parmOKPO            (CompanyInfoHelper::partyOKPOasOfDate_RU(company, invoiceDate));
        ret.parmINN             (company.partyINNasOfDate_RU (invoiceDate));
        ret.parmKPP             (company.partyKPPasOfDate_RU (invoiceDate));
        ret.parmStructDept      (SalesParameters::find().StructDepartment_RU);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initContragentData</Name>
				<Source><![CDATA[
    final protected SalesPurchReportCounteragentData_RU initContragentData(CustVendTable  _contragent,
                                                                           BankAccountMap _contragentBankAccount,
                                                                           CustVendAC     _account,
                                                                           Addressing     _deliveryAddress = "")
    {
        SalesPurchReportCounteragentData_RU ret;

        if (_account)
        {
            ret = this.initCustVendData(_contragent,
                                        _contragentBankAccount,
                                        _account);
        }
        else
        {
            if (_contragent.TableId == this.getTableId())
            {
                ret = this.initCustVendData(_contragent,
                                            _contragentBankAccount,
                                            invoiceJour.OrderAccount);
            }
            else
            {
                ret = this.initCompanyData();
            }
        }

        if (_deliveryAddress)
        {
            ret.parmAddress(_deliveryAddress);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrency</Name>
				<Source><![CDATA[
    protected void initCurrency()
    {
        exchRate = 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrencyNames</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the shortcut name for unit of currency and the ISO code for the fractional unit.
    /// </summary>
    protected void initCurrencyNames()
    {
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());
        CurrencyNameDeclension_RU curName = CurrencyNameDeclension_RU::find(header.CurrencyCode, header.LanguageId);

        header.CurrencyShortName      = curName.ShortName;
        header.CurrencyShortNamePenny = curName.ShortNamePenny;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendData</Name>
				<Source><![CDATA[
    final protected SalesPurchReportCounteragentData_RU initCustVendData(CustVendTable  _contragent,
                                                                         BankAccountMap _bankAccount,
                                                                         CustVendAC     _account)
    {
        SalesPurchReportCounteragentData_RU ret = new SalesPurchReportCounteragentData_RU(this.languageId());

        select firstonly _contragent
            where _contragent.AccountNum == _account;

        select firstonly _bankAccount
            where _bankAccount.AccountID         == _contragent.BankAccountId
               && _bankAccount.CustVendAccount   == _account;

        ret.parmName            (_contragent.name());
        ret.parmAddress         (DirUtility::replaceAddressTokenLanguage(DirParty::primaryPostalAddress(_contragent.Party), this.languageId()));
        ret.parmPhone           (_contragent.phone());
        ret.parmTelefax         (_contragent.CustVendTable::telefax());
        ret.parmBankAccountTable(_bankAccount);
        ret.parmOKDP            (_contragent.partyOKDPasOfDate_RU(invoiceJour.InvoiceDate));
        ret.parmOKPO            (_contragent.partyOKPOasOfDate_RU(invoiceJour.InvoiceDate));
        ret.parmINN             (_contragent.partyINNasOfDate_RU (invoiceJour.InvoiceDate));
        ret.parmKPP             (_contragent.partyKPPasOfDate_RU (invoiceJour.InvoiceDate));
        ret.parmStructDept      (_contragent.getStructDepartment_RU());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes sales or procurement category.
    /// </summary>
    protected void initLineCategory()
    {
        if (mappingExists(tableNum(CustVendInvoiceTrans), invoiceTrans.TableId, fieldNum(CustVendInvoiceTrans, Category_RU)))
        {
            dynamicData.Category = invoiceTrans.Category_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineCategoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the weight of the category based item.
    /// </summary>
    /// <returns>
    ///     Always returns zero.
    /// </returns>
    protected ItemGrossWeight initLineCategoryWeight()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinePrice</Name>
				<Source><![CDATA[
    // overloaded in PurchReport_PackingSlipM4M7_Ru
    protected Price initLinePrice(Qty                _qty,
                                  AmountCur          _markupItemPosted,
                                  TaxAmountExcise_RU _markupExcise)
    {
        Price ret;

        if (_qty)
        {
            if (mappingExists(tableNum(CustVendInvoiceTrans),
                              invoiceTrans.TableId,
                              fieldNum(CustVendInvoiceTrans, Price_RU))  &&
                abs(CurrencyExchangeHelper::amount(invoiceTrans.Price_RU * exchRate / 100 * _qty)) == abs(dynamicData.LineAmount))
            {
                ret = CurrencyExchangeHelper::price(invoiceTrans.Price_RU * exchRate / 100);
            }
            else
            {
                // LineAmountMST_W is not mapped for VendPackingSlipTrans, but this is Ok
                ret = printInMST ?
                      CurrencyExchangeHelper::price(abs((invoiceTrans.LineAmountMST_W + _markupItemPosted + _markupExcise) / _qty)) :
                      CurrencyExchangeHelper::price(abs((invoiceTrans.LineAmount + _markupItemPosted + _markupExcise) / _qty));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes weights.
    /// </summary>
    /// <param name="_inventQty">
    ///     A quantity of the item in inventory unit.
    /// </param>
    /// <param name="_inventTable">
    ///     The inventory item record from which to initialize.
    /// </param>
    protected void initLineWeight(InventQty _inventQty, InventTable _inventTable)
    {
        if (_inventTable)
        {
            dynamicData.ItemGrossWeight = _inventTable.grossWeight();
            dynamicData.ItemNetWeight   = _inventTable.NetWeight;

            dynamicData.GrossWeight     = abs(_inventQty * dynamicData.ItemGrossWeight);
        }
        else
        {
            dynamicData.ItemGrossWeight = this.initLineCategoryWeight();
            dynamicData.ItemNetWeight   = dynamicData.ItemGrossWeight;

            dynamicData.GrossWeight     = abs(dynamicData.Qty * dynamicData.ItemGrossWeight);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
    protected void insertHeader()
    {
        header.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFreeTextInvoiceProforma</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a value indicating that current report is proforma of the free text invoice.
    /// </summary>
    /// <returns>
    ///     true if the current report is proforma of the free text invoice; otherwise, false.
    /// </returns>
    protected boolean isFreeTextInvoiceProforma()
    {
        return   invoiceTrans.TableId == tableNum(CustInvoiceTrans)    &&
               ! invoiceJour.InvoiceId                                 &&
                 invoiceJour.SourceDocumentHeader_RU                   &&
                 (select firstonly RecId from custInvoiceTable where
                       custInvoiceTable.SourceDocumentHeader == invoiceJour.SourceDocumentHeader_RU
                 ).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a value indicating that current report is proforma
    /// </summary>
    /// <returns>
    /// Value indicating that current report is proforma
    /// </returns>
    final public boolean isProforma()
    {
        return proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal date.
    /// </summary>
    /// <returns>
    /// The date of journal.
    /// </returns>
    protected TransDate journalDate()
    {
        return invoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    protected LanguageId languageId()
    {
        return invoiceJour.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLabel</Name>
				<Source><![CDATA[
    protected LabelType lookupLabel(LabelId _labelId, LanguageId _languageId = this.languageId())
    {
        return SysLabel::labelId2String(_labelId, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupIncludedInLine</Name>
				<Source><![CDATA[
    // overloaded in PurchReport_Invoice_Ru
    protected container markupIncludedInLine()
    {
        container ret;

        switch (this.getModule())
        {
            case ModuleInventPurchSales::Purch :
                select sum(ItemPosted_RU),
                       sum(TaxAmountVAT_RU),
                       sum(TaxAmountExcise_RU),
                       sum(TaxAmountVATMST_RU),
                       sum(TaxAmountExciseMST_RU),
                       sum(CalculatedAmountMST_W) from markupTrans
                where markupTrans.TransTableId == invoiceTrans.TableId  &&
                      markupTrans.TransRecId   == invoiceTrans.RecId    &&
                      markupTrans.CustVendPosted_RU                         &&
                      markupTrans.ItemPosted_RU;

                if (printInMST)
                {
                    // if ItemPosted_RU <> 0, then ItemPosted_RU == CalculatedAmount
                    ret = [ (markupTrans.ItemPosted_RU ? markupTrans.CalculatedAmountMST_W : 0),
                            markupTrans.TaxAmountVATMST_RU,
                            markupTrans.TaxAmountExciseMST_RU ];
                }
                else
                {
                    ret = [ markupTrans.ItemPosted_RU,
                            markupTrans.TaxAmountVAT_RU,
                            markupTrans.TaxAmountExcise_RU ];
                }
                break;

            default :
                ret = [0, 0, 0];
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupInHeader</Name>
				<Source><![CDATA[
    protected void markupInHeader()
    {
        while select markupTrans
            where markupTrans.TransTableId  == invoiceJour.TableId  &&
                  markupTrans.TransRecId    == invoiceJour.RecId    &&
                  markupTrans.CustVendPosted_RU
        {
            this.prepareMarkupLine(markupTrans);
            this.writeDynamicLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupInLine</Name>
				<Source><![CDATA[
    // overloaded in SalesReport_Invoice_RU, PurchReport_Invoice_Ru
    protected void markupInLine()
    {
        while select markupTrans
            where markupTrans.TransTableId  == invoiceTrans.TableId &&
                  markupTrans.TransRecId    == invoiceTrans.RecId   &&
                  markupTrans.CustVendPosted_RU                     &&
                  ! markupTrans.ItemPosted_RU
        {
            this.prepareMarkupLine(markupTrans);
            this.writeDynamicLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalcCashDisc</Name>
				<Source><![CDATA[
    protected boolean mustCalcCashDisc()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
    abstract protected OffReportType_RU offReportType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderDescription</Name>
				<Source><![CDATA[
    abstract protected Description orderDescription()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCopyOriginal</Name>
				<Source><![CDATA[
    public PrintCopyOriginal parmPrintCopyOriginal(PrintCopyOriginal _printCopyOriginal = printCopyOriginal)
    {
        printCopyOriginal = _printCopyOriginal;
        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintDestinationSettings</Name>
				<Source><![CDATA[
    public SRSPrintDestinationSettings parmPrintDestinationSettings(SRSPrintDestinationSettings _printDestinationSettings = printDestinationSettings)
    {
        printDestinationSettings = _printDestinationSettings;

        return printDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSendReportHeader</Name>
				<Source><![CDATA[
    public void postSendReportHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    protected void prepareData()
    {
        company = CompanyInfo::find();

        if (! journalList && invoiceJour)
        {
            journalList = FormLetter::createJournalListCopy(invoiceJour);
        }

        if (! journalList)
        {
            throw error("@SYS26348");
        }

        internalId = 1;
        journalList.first(invoiceJour);

        if (! invoiceJour)
        {
            throw error("@SYS26348");
        }

        while (invoiceJour)
        {
            if (this.checkJournal(invoiceJour))
            {
                QueryRun tradeLoopTrans = new TradeLoopTrans(invoiceJour, this.transTableId()).buildQueryRun();

                this.addFreeTextInvoiceProformaCondition(tradeLoopTrans);

                if (invoiceJour.creditNote())
                {
                    reverseInvoice = this.reverseCreditNote() ? -1 : 1;
                }
                else
                {
                    reverseInvoice = 1;
                }

                header.clear();
                this.prepareReportHeader();
                this.initCurrency();
                this.initCurrencyNames();
                this.markupInHeader();

                while (tradeLoopTrans.next())
                {
                    invoiceTrans = tradeLoopTrans.get(this.transTableId());

                    this.markupInLine();
                    this.prepareDynamicLine();
                    this.writeDynamicLine();
                }

                if (invoiceJour.EndDisc_RU)
                {
                    this.prepareExtraLines(- invoiceJour.EndDisc_RU, "@SYS6465");
                    this.writeDynamicLine();
                }

                if (this.useRoundOff() && invoiceJour.RoundOff_W)
                {
                    this.prepareExtraLines(invoiceJour.RoundOff_W, "@SYS8172");
                    this.writeDynamicLine();
                }

                // Update totals
                header.LineNum = lineNum;
                if (this.mustCalcCashDisc())
                {
                    [header.CashDiscDate, header.CashDiscAmount] = this.cashDiscDateAmount();
                }

                this.adjustDynamicData();
                this.finalizeSubheader();

                this.insertHeader();
            }

            invoiceJour.reread();

            if (! journalList.next(invoiceJour))
            {
                break;
            }

            internalId++;
        }

        this.removeEmptyJournals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDynamicLine</Name>
				<Source><![CDATA[
    protected void prepareDynamicLine()
    {
        const str nameDelim = '\r\n';

        TaxPackagingQty     taxPackingQty;
        Qty                 qty, qtyInStandardUnits;

        AmountCur           markupItemPosted;
        TaxAmountVAT_RU     markupVATAmount;
        TaxAmountExcise_RU  markupExcise;

        lineNum ++;

        dynamicData.clear();
        dynamicData.initFromReportTable(header);

        reverseLine = invoiceTrans.LineAmount < 0 ? -1 : 1;

        ItemId itemId = FormLetter::journalItemId(this.getModule(),
                                                  invoiceTrans.ItemId,
                                                  invoiceTrans.ExternalItemId_RU);

        ItemId externalItemId = FormLetter::journalExternalItemId(this.getModule(),
                                                                  invoiceTrans.ExternalItemId_RU);

        dynamicData.LineNum             = lineNum;
        dynamicData.ItemName            = invoiceTrans.Name_RU;
        if (externalItemId)
        {
            dynamicData.ItemName        += nameDelim + externalItemId;
        }

        dynamicData.ItemId              = itemId;
        this.initLineCategory();

        dynamicData.Unit                = UnitOfMeasureTranslation::findByTranslation(
                                            UnitOfMeasure::unitOfMeasureIdBySymbol(invoiceTrans.Unit_RU),
                                            this.languageId()).Description;
        if (! dynamicData.Unit)
        {
            dynamicData.Unit = invoiceTrans.Unit_RU;
        }
        dynamicData.CodeOKEI            = UnitOfMeasure_RU::codeOKEI_RU(UnitOfMeasure::findBySymbol(invoiceTrans.Unit_RU));

        // Signed quantity in trade units
        qty                             = (invoiceTrans.Qty ?
                                            invoiceTrans.Qty :
                                            (invoiceTrans.LineAmount ? sign(invoiceTrans.LineAmount) : 0)) * reverseInvoice;
        dynamicData.Qty                 = qty;

        InventTable        inventTable      = InventTable::find(invoiceTrans.ItemId);
        UnitOfMeasureRecId standardUnit     = UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.inventUnitId());
        UnitOfMeasureRecId invoiceTransUnit = UnitOfMeasure::unitOfMeasureIdBySymbol(invoiceTrans.Unit_RU);

        boolean conversionOk = EcoResProductUnitConverter::canBeConvertedForReleasedProduct(invoiceTrans.ItemId,
                                                                                            invoiceTrans.InventDimId,
                                                                                            invoiceTransUnit, 
                                                                                            standardUnit);

        if (! conversionOk && inventTable)
        {
            warning(strFmt("@SYS28690", invoiceTrans.Unit_RU, inventTable.inventUnitId()));
        }

        qtyInStandardUnits              = (invoiceTrans.Unit_RU && invoiceTrans.Qty && conversionOk) 
                                        ? EcoResProductUnitConverter::convertForReleasedProduct(invoiceTrans.ItemId,
                                                                                                invoiceTrans.InventDimId,
                                                                                                qty,
                                                                                                invoiceTransUnit,
                                                                                                standardUnit,
                                                                                                NoYes::Yes)
                                        : qty;

        if (qtyInStandardUnits)
        {
            taxPackingQty               = abs(inventTable.TaxPackagingQty) * qty / qtyInStandardUnits;
        }

        dynamicData.TaxPackagingQty     = taxPackingQty;
        dynamicData.QtyNumber           = abs(taxPackingQty ? roundUp(invoiceTrans.Qty / taxPackingQty, 1) : 0);
        dynamicData.Packing             = inventTable.Packing_RU;
        dynamicData.VatValue            = invoiceTrans.CustVendInvoiceTrans::getVATValue_RU();
        dynamicData.VatValueStr         = this.getVatValueStr(invoiceTrans);

        this.initLineWeight(qtyInStandardUnits, inventTable);

        // Amounts
        [ markupItemPosted,
        markupVATAmount,
        markupExcise ] = this.markupIncludedInLine();

        dynamicData.vatAmount           = printInMST ?
                                        (abs(invoiceTrans.CustVendInvoiceTrans::getVATAmountMST_RU()) * reverseLine + markupVATAmount) :
                                        (abs(invoiceTrans.CustVendInvoiceTrans::getVATAmount_RU()) * reverseLine + markupVATAmount);
        dynamicData.vatAmount           = dynamicData.vatAmount * reverseInvoice;

        dynamicData.LineAmount          = (printInMST ? invoiceTrans.LineAmountMST_W : invoiceTrans.LineAmount) +
                                        markupItemPosted + markupExcise;
        dynamicData.LineAmount          = dynamicData.LineAmount * reverseInvoice;

        dynamicData.Price               = this.initLinePrice(qty, markupItemPosted, markupExcise);
        dynamicData.LineAmountWithTax   = dynamicData.LineAmount + dynamicData.vatAmount;

        dynamicData.LineAmount          = dynamicData.LineAmountWithTax - dynamicData.vatAmount; // exchange bug fix

        this.addLineAmountToHeader(dynamicData.LineAmount,
                                    dynamicData.vatAmount,
                                    dynamicData.LineAmountWithTax,
                                    qty,
                                    dynamicData.QtyNumber,
                                    dynamicData.GrossWeight,
                                    abs(qtyInStandardUnits * dynamicData.ItemNetWeight),
                                    abs(qtyInStandardUnits * inventTable.UnitVolume));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareExtraLines</Name>
				<Source><![CDATA[
    protected void prepareExtraLines(Amount _amount,
                                     str    _txt)
    {
        lineNum ++;
        dynamicData.clear();
        dynamicData.initFromReportTable(header);

        dynamicData.LineNum            = lineNum;
        dynamicData.ItemName           = _txt;

        dynamicData.LineAmount         = CurrencyExchangeHelper::amount(_amount * exchRate / 100, printInMST ? CompanyInfoHelper::standardCurrency() : invoiceJour.CurrencyCode);
        dynamicData.LineAmountWithTax  = dynamicData.LineAmount;

        this.addExtraAmountToHeader(dynamicData.LineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareMarkupLine</Name>
				<Source><![CDATA[
    protected void prepareMarkupLine(MarkupTrans _markupTrans)
    {
        if (! _markupTrans)
            return;

        lineNum ++;
        dynamicData.clear();
        dynamicData.initFromReportTable(header);

        dynamicData.LineNum     = lineNum;
        MarkupTable markupTable = MarkupTable::find(_markupTrans.ModuleType, _markupTrans.MarkupCode);
        dynamicData.ItemName    = LanguageTxt::find(tableNum(MarkupTable),
                                                    markupTable.RecId,
                                                    this.languageId()).Txt;
        dynamicData.ItemName    = dynamicData.ItemName ? dynamicData.ItemName :
                                  markupTrans.Txt ? markupTrans.Txt :
                                  markupTable.Txt;

        dynamicData.Unit              = "";
        dynamicData.Qty               = 0.0;

        AmountCur markupValue = printInMST                                                                ?
        // if CustVendPosted_RU <> 0, then CustVendPosted_RU == CalculatedAmount
                                _markupTrans.TaxAmountExciseMST_RU +
                                (_markupTrans.CustVendPosted_RU ? _markupTrans.CalculatedAmountMST_W : 0) :
                                 _markupTrans.TaxAmountExcise_RU +
                                 _markupTrans.CustVendPosted_RU;
        markupValue = markupValue * reverseInvoice;

        TaxAmountCur markupTaxAmount = (printInMST                      ?
                                        _markupTrans.TaxAmountVATMST_RU :
                                        _markupTrans.TaxAmountVAT_RU) * reverseInvoice;
        dynamicData.vatAmount        = markupTaxAmount;
        dynamicData.VatValue         = _markupTrans.TaxValueVAT_RU;
        dynamicData.VatValueStr      = (!_markupTrans.TaxValueVAT_RU && _markupTrans.TaxVATType_RU == VATType_RU::NonLiable) ? "@GLS100016" : strFmt("@GLS106007", _markupTrans.TaxValueVAT_RU);

        dynamicData.Price             = abs(markupValue);
        dynamicData.LineAmount        = markupValue;

        dynamicData.LineAmountWithTax = markupValue + markupTaxAmount;

        this.addMarkupAmountToHeader(markupValue, markupTaxAmount, markupValue + markupTaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportHeader</Name>
				<Source><![CDATA[
    protected void prepareReportHeader()
    {
        lineNum                 = 0;

        proforma                = ! invoiceJour.InvoiceId;

        header.InternalId       = internalId;
        header.initFromInvoiceJour(invoiceJour);

        header.OrderDescription = this.orderDescription();
        header.LineNum          = lineNum;
        header.DocumentName     = this.prepareTxtData();
        header.DocumentName_Sec = this.prepareTxtData_Sec();

        header.UnitId           = UnitOfMeasureReportingTranslation::findByReportingTranslation(
            UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure,
            this.languageId()).Text;

        header.LanguageId       = this.languageId();

        OffSessionId_RU offSessionId = invoiceJour.CustVendInvoiceJour::getOffSessionId_RU();

        [ header.DirectorName,
          header.DirectorTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(offSessionId, OffPosition_RU::Director);
        [ header.AccountantName,
          header.AccountantTitle ] = OfficialsTrans_RU::getNameTitleByIdPosition(offSessionId, OffPosition_RU::Accountant);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTxtData</Name>
				<Source><![CDATA[
    abstract protected FreeTxt prepareTxtData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTxtData_Sec</Name>
				<Source><![CDATA[
    abstract protected FreeTxt prepareTxtData_Sec()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRun</Name>
				<Source><![CDATA[
    final public void preRun()
    {
        this.prepareData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEmptyJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes headers without lines
    /// </summary>
    protected void removeEmptyJournals()
    {
        delete_from header
            where ! header.LineNum;

        select header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCreditNote</Name>
				<Source><![CDATA[
    abstract protected boolean reverseCreditNote()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.preRun();

        if (this.doRun())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaller</Name>
				<Source><![CDATA[
    public boolean setCaller(Object _object)
    {
        boolean ret;

        if (SysDictClass::isSuperclass(classIdGet(_object), classNum(FormletterJournalPrint)))
        {
            formletterJournalPrint = _object;
            ret                    = true;
        }
        else if (classIdGet(_object) == classNum(SalesFormLetter_FreeText))
        {
            SalesFormLetterFreeTextContract freeTextContract = _object.getContract();

            SalesFormLetterInvoiceContract invoiceContract = SalesFormLetterContract::construct(DocumentStatus::Invoice);
            invoiceContract.parmPrintersettingsFormletter(freeTextContract.parmPrintersettingsFormletter());
            invoiceContract.parmPrintersettingsFormletterCopy(freeTextContract.parmPrintersettingsFormletterCopy());
            invoiceContract.parmPrintFormletter(freeTextContract.parmPrintFormletter());
            invoiceContract.parmUsePrintManagement(freeTextContract.parmUsePrintManagement());

            formletterJournalPrint = FormletterJournalPrint::newFromFormletterContract(invoiceContract);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the invoice journal.
    /// </summary>
    /// <param name="_invoiceJour">
    ///     The table buffer of the <c>CustInvoiceJour</c> or <c>VendInvoiceJour</c> table.
    /// </param>
    public void setInvoiceJour(CustVendInvoiceJour _invoiceJour)
    {
        invoiceJour = _invoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the parameters for the <c>SalesPurchReport_RU</c> report.
    /// </summary>
    /// <param name="_printCopyOriginal">
    ///    The <c>PrintCopyOriginal</c> enumeration value that specifies whether the Original.
    /// </param>
    /// <param name="_invoiceJour">
    ///    Instance of table <c>CustVendInvoiceJour</c>.
    /// </param>
    /// <param name="_journalList">
    ///    <c>List</c> of journals to be printed.
    /// </param>
    protected void setParameters(PrintCopyOriginal   _printCopyOriginal = PrintCopyOriginal::Copy,
                                 CustVendInvoiceJour _invoiceJour = null,
                                 RecordSortedList    _journalList = null)
    {
        journalList       = _journalList;
        printCopyOriginal = _printCopyOriginal;

        invoiceJour       = _invoiceJour.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDialog</Name>
				<Source><![CDATA[
    public boolean showDialog()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    abstract protected TableId transTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useRoundOff</Name>
				<Source><![CDATA[
    // overloaded in SalesPurchReport_Invent_Ru
    protected boolean useRoundOff()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDynamicLine</Name>
				<Source><![CDATA[
    protected void writeDynamicLine()
    {
        dynamicData.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWithPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs report with specified print management parameters
    /// </summary>
    /// <param name="_printMgmtDocumentType">
    /// <c>PrintMgmtDocumentType</c> value determining report to print
    /// </param>
    /// <param name="_args">
    /// <c>Args</c> object which holds caller data
    /// </param>
    /// <param name="_settingDetail">
    /// <c>PrintMgmtPrintSettingDetail</c> object which holds rules for printout
    /// </param>
    /// <param name="_recordId">
    /// Record id of journal to be printed
    /// </param>
    public static void executeWithPrintMgmt(PrintMgmtDocumentType _printMgmtDocumentType, Args _args, PrintMgmtPrintSettingDetail _settingDetail, RecId _recordId)
    {
        SalesPurchReport_RU         salesPurchReport = SalesPurchReport_RU::newFromPrintMgmtDocType(_printMgmtDocumentType, _recordId, _args);
        PrintCopyOriginal           printCopyOriginal;

        if (_settingDetail.parmType() == PrintMgmtDocInstanceType::Copy)
        {
            printCopyOriginal = PrintCopyOriginal::Copy;
        }
        else
        {
            printCopyOriginal = PrintCopyOriginal::Original;
        }

        salesPurchReport.parmPrintCopyOriginal(printCopyOriginal);
        salesPurchReport.setCaller(_args.caller());

        _settingDetail.parmPrintJobSettings().numberOfCopies(_settingDetail.parmNumberOfCopies());

        salesPurchReport.parmPrintDestinationSettings(_settingDetail.parmPrintJobSettings());

        salesPurchReport.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWithPrintMgmtTorg12M15</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs reports (Torg12 and M15) with specified print management parameters
    /// </summary>
    /// <param name="_args">
    /// <c>Args</c> object which holds caller data
    /// </param>
    /// <param name="_settingDetail">
    /// <c>PrintMgmtPrintSettingDetail</c> object which holds rules for printout
    /// </param>
    /// <param name="_recordId">
    /// Record id of journal to be printed
    /// </param>
    public static void executeWithPrintMgmtTorg12M15(Args _args, PrintMgmtPrintSettingDetail _settingDetail, RecId _recordId)
    {
        PrintCopyOriginal           printCopyOriginal;

        if (! _recordId)
        {
            throw error(Error::missingRecord(funcName()));
        }

        if (_settingDetail.parmType() == PrintMgmtDocInstanceType::Copy)
        {
            printCopyOriginal = PrintCopyOriginal::Copy;
        }
        else
        {
            printCopyOriginal = PrintCopyOriginal::Original;
        }

        CustInvoiceJour custInvoiceJour = CustInvoiceJour::findRecId(_recordId);

        if (custInvoiceJour)
        {
            // Torg12
            SalesPurchReport_RU salesPurchReport = new SalesReport_Invoice_RU();

            salesPurchReport.setInvoiceJour(custInvoiceJour);

            salesPurchReport.parmPrintCopyOriginal(printCopyOriginal);
            salesPurchReport.setCaller(_args.caller());

            _settingDetail.parmPrintJobSettings().numberOfCopies(_settingDetail.parmNumberOfCopies());

            salesPurchReport.parmPrintDestinationSettings(_settingDetail.parmPrintJobSettings());

            salesPurchReport.runOperation();

            // M15
            if (custInvoiceJour.custInvoiceJour_RU().CustInvoicePrintoutType_RU == CustInvoicePrintoutType_RU::M_15)
            {
                salesPurchReport = new SalesReport_InvoiceM15_RU();

                salesPurchReport.setInvoiceJour(custInvoiceJour);

                salesPurchReport.parmPrintCopyOriginal(printCopyOriginal);
                salesPurchReport.setCaller(_args.caller());

                _settingDetail.parmPrintJobSettings().numberOfCopies(_settingDetail.parmNumberOfCopies());

                salesPurchReport.parmPrintDestinationSettings(_settingDetail.parmPrintJobSettings());

                salesPurchReport.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPrintMgmtDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>SalesPurchReport_RU</c> object based on print management parameters
    /// </summary>
    /// <param name="_printMgmtDocType">
    /// <c>PrintMgmtDocumentType</c> value determining report to print
    /// </param>
    /// <param name="_recordId">
    /// Record id of journal to be printed
    /// </param>
    /// <param name="_args">
    /// <c>Args</c> object which holds caller data
    /// </param>
    /// <returns>
    /// <c>SalesPurchReport_RU</c> object
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If journal record id not specified
    /// </exception>
    protected static SalesPurchReport_RU newFromPrintMgmtDocType(PrintMgmtDocumentType _printMgmtDocType,  RecId _recordId, Args _args)
    {
        SalesPurchReport_RU             salesPurchReport;

        if (!_recordId)
        {
            throw error(Error::missingRecord(funcName()));
        }

        switch (_printMgmtDocType)
        {
            case PrintMgmtDocumentType::SalesFreeTextInvoice:
                salesPurchReport = new SalesReport_Invoice_RU();
                salesPurchReport.setInvoiceJour(CustInvoiceJour::findRecId(_recordId));
                break;
            case PrintMgmtDocumentType::PurchaseOrderInvoice:
                salesPurchReport = new PurchReport_Invoice_RU();
                salesPurchReport.setInvoiceJour(VendInvoiceJour::findRecId(_recordId));
                break;
            case PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU:
            case PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU:
                salesPurchReport = new SalesReport_Invoice4Paym_RU();
                salesPurchReport.setInvoiceJour(CustInvoice4PaymJour_RU::findRecId(_recordId));
                break;
            case PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU:
                salesPurchReport = new PurchReport_Invoice4Paym_RU();
                salesPurchReport.setInvoiceJour(VendInvoice4PaymJour_RU::findRecId(_recordId));
                break;
            case PrintMgmtDocumentType::PurchaseOrderPackingSlip:
                salesPurchReport = new PurchReport_PackingSlipM4M7_RU();
                if (_args.dataset() == tableNum(PrintoutTable_RU))
                {
                    PurchReport_PackingSlipM4M7_RU packingSlipReport = salesPurchReport;
                    PrintoutTable_RU printoutTable = _args.record();
                    packingSlipReport.setPrintout(printoutTable);
                    packingSlipReport.setInvoiceJour(printoutTable.originalDocument());
                }
                else
                {
                    salesPurchReport.setInvoiceJour(VendPackingSlipJour::findRecId(_recordId));
                }
                break;
        }

        return salesPurchReport;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>