<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMMaterialDivisionUniqueInClassFeatureEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HMIMMaterialDivisionUniqueInClassFeatureEventHandlers</c> class handles events to control enabling the <c>HMIMMaterialDivisionUniqueInClassFeature</c>
/// When enabling the feature, data from table HMIMDIVISION will be migrated to table HMIMMATERIALDIVISION to support allowing same division code in different classes.
/// Whne disabling the feature, data from table HMIMMATERIALDIVISION will be migrate to table HMIMDIVISION, if there exists duplicate record, an error will be thrown.
/// </summary>
internal static class HMIMMaterialDivisionUniqueInClassFeatureEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateHMIMMaterialDivisionDataOnInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the data population job when enabling the feature.
    /// </summary>
    /// <param name="_sender">The <c>FeatureManagementState</c> record to be written.</param>
    /// <param name="_args">The event arguments.</param>
    [DataEventHandler(tableStr(FeatureManagementState), DataEventType::Inserted)]
    public static void populateHMIMMaterialDivisionDataOnInserted(Common _sender, DataEventArgs _args)
    {
        FeatureManagementState featureManagementState = _sender;

        if (featureManagementState.Name == Dynamics.AX.Application.FeatureStateProvider::featureName(HMIMMaterialDivisionUniqueInClassFeature::instance()))
        {
            if (featureManagementState.IsEnabled == NoYes::Yes
            && featureManagementState.orig().IsEnabled == NoYes::No)
            {
                // feature enable
                HMIMMaterialDivisionUniqueInClassFeatureEventHandlers::moveDataFromHMIMDivisionToHMIMMaterialDivision();
            }
            else if (featureManagementState.IsEnabled == NoYes::No
            && featureManagementState.orig().IsEnabled == NoYes::Yes)
            {
                // feature disable
                HMIMMaterialDivisionUniqueInClassFeatureEventHandlers::moveDataFromHMIMMaterialDivisionToHMIMDivision();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateEcoResProductBarcodeAssociationDataOnUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the data population job when enabling the feature.
    /// </summary>
    /// <param name="_sender">The <c>FeatureManagementState</c> record to be written.</param>
    /// <param name="_args">The event arguments.</param>
    [DataEventHandler(tableStr(FeatureManagementState), DataEventType::Updated)]
    public static void populateEcoResProductBarcodeAssociationDataOnUpdated(Common _sender, DataEventArgs _args)
    {
        FeatureManagementState featureManagementState = _sender;

        if (featureManagementState.Name == Dynamics.AX.Application.FeatureStateProvider::featureName(HMIMMaterialDivisionUniqueInClassFeature::instance()))
        {
            if (featureManagementState.IsEnabled == NoYes::Yes
                && featureManagementState.orig().IsEnabled == NoYes::No)
            {
                // feature enable
                HMIMMaterialDivisionUniqueInClassFeatureEventHandlers::moveDataFromHMIMDivisionToHMIMMaterialDivision();
            }
            else if (featureManagementState.IsEnabled == NoYes::No
                && featureManagementState.orig().IsEnabled == NoYes::Yes)
            {
                // feature disable
                HMIMMaterialDivisionUniqueInClassFeatureEventHandlers::moveDataFromHMIMMaterialDivisionToHMIMDivision();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDataFromHMIMDivisionToHMIMMaterialDivision</Name>
				<Source><![CDATA[
    private static void moveDataFromHMIMDivisionToHMIMMaterialDivision()
    {
        HMIMMaterialDivision HMIMMaterialDivision;
        HMIMDivision HMIMDivision;

        ttsbegin;

        delete_from HMIMMaterialDivision;

        insert_recordset HMIMMaterialDivision (DivisionCode, Description, ClassCode)
            select DivisionCode, Description, ClassCode from HMIMDivision;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDataFromHMIMMaterialDivisionToHMIMDivision</Name>
				<Source><![CDATA[
    private static void moveDataFromHMIMMaterialDivisionToHMIMDivision()
    {
        HMIMMaterialDivision HMIMMaterialDivision;
        HMIMDivision HMIMDivision;

        Query duplicateCheckQuery = new Query();
        QueryBuildDataSource qbds = duplicateCheckQuery.addDataSource(tableNum(HMIMMaterialDivision));
        qbds.addSelectionField(fieldNum(HMIMMaterialDivision, DivisionCode));
        qbds.addGroupByField(fieldNum(HMIMMaterialDivision, DivisionCode));
        duplicateCheckQuery.addHavingFilter(qbds, fieldStr(HMIMMaterialDivision, DivisionCode), AggregateFunction::Count).value("> 1");

        QueryRun qr = new QueryRun(duplicateCheckQuery);

        int duplicateRecordsCount = 0;
        HMIMDivisionCode divisionCode = null;

        while (qr.next())
        {
            duplicateRecordsCount += 1;

            if (divisionCode == null)
            {
                HMIMMaterialDivision materialDivision = qr.get(tableNum(HMIMMaterialDivision));
                divisionCode = materialDivision.DivisionCode;
            }
        }

        if (duplicateRecordsCount > 0)
        {
            throw error(strFmt("@SCM:HMIMDivisionDataMigrationDuplicateRecordsError", duplicateRecordsCount, divisionCode));
        }

        try
        {
            ttsbegin;

            delete_from HMIMDivision;

            insert_recordset HMIMDivision (DivisionCode, Description, ClassCode)
                select DivisionCode, Description, ClassCode from HMIMMaterialDivision;
        }
        catch (Exception::DuplicateKeyException)
        {
            ttsabort;
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>