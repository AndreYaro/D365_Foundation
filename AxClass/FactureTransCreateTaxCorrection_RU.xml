<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureTransCreateTaxCorrection_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureTransCreateTaxCorrection_RU extends FactureTransCreate_RU
{
    LedgerJournalTrans  trans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    protected boolean calcAmounts(Qty _qty)
    {
        Amount      amount;

        [ factureTrans.TaxLedgerDimension,
          amount ] = this.taxCorrectionAccount();

        factureTrans.TaxAmount     = amount;
        factureTrans.VAT           = amount;

        [ factureTrans.LineAmount,
          factureTrans.VATValue ]  = TaxData::amount2base_RU(trans.TaxCode, trans.TransDate, abs(factureTrans.TaxAmount));

        if (!trans.ledgerJournalTrans_W().OrigPaymRefRecId_RU)
        {
            factureTrans.LineAmount    = CurrencyExchangeHelper::amount(amount > 0 ? factureTrans.LineAmount : -factureTrans.LineAmount, factureJour.CurrencyCode);
        }
        else
        {
            factureTrans.LineAmount = 0;
        }

        factureTrans.TaxAmountMST  = CurrencyExchangeHelper::amountCur2MST(factureTrans.TaxAmount, trans.CurrencyCode, trans.ExchRate, trans.TransDate, trans.ExchRateSecond, trans.Triangulation);
        factureTrans.LineAmountMST = CurrencyExchangeHelper::amountCur2MST(factureTrans.LineAmount, trans.CurrencyCode, trans.ExchRate, trans.TransDate, trans.ExchRateSecond, trans.Triangulation);
        factureTrans.VATAmountMST  = factureTrans.TaxAmountMST;

        factureTrans.Qty           = factureTrans.LineAmount ? sign(factureTrans.LineAmount) : 1;
        factureTrans.Price         = abs(factureTrans.LineAmount);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans()
    {
        boolean ret = super() && trans.isTaxCorrection_RU(true);

        if (trans.fullyFactured_RU(true))
        {
            ret = checkFailed(strfmt("@GLS111101", trans.Voucher));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureJourCreate</Name>
				<Source><![CDATA[
    private FactureJourCreateTaxCorrection_RU factureJourCreate()
    {
        return facture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    protected void initTrans()
    {
        super();

        factureTrans.initFromLedgerJournalTrans(trans);

        factureTrans.FactureLineType   = FactureLineType_RU::TaxCorrection;
        factureTrans.TransNotes        = strfmt("@GLS111168",
                                                "@GLS102564",
                                                "@GLS103349",
                                                trans.Voucher,
                                                "@SYS7402",
                                                trans.TransDate);

        factureTrans.ItemName          = factureJour.CorrectedFactureExternalId ? trans.Txt : factureTrans.TransNotes;
        factureTrans.CountryRegionName = "";
        factureTrans.TransNotes        = factureTrans.ItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTrans</Name>
				<Source><![CDATA[
    protected void insertTrans()
    {
        FactureTrans_RU tmpTrans;
        DimensionAttributeValueCombination dimAttrValueComb;

        if (factureTrans.isTmp())
        {
            tmpTrans.setTmp();
            tmpTrans.setTmpData(factureTrans);
        }

        select firstonly TaxCode, TaxLedgerDimension from tmpTrans
            where tmpTrans.FactureId          == factureTrans.FactureId            &&
                  tmpTrans.Module             == factureTrans.Module               &&
                  tmpTrans.FactureLineType    == FactureLineType_RU::TaxCorrection &&
                  tmpTrans.TaxCode            == factureTrans.TaxCode
        notexists join dimAttrValueComb
            where dimAttrValueComb.RecId       == tmpTrans.TaxLedgerDimension      &&
                  dimAttrValueComb.MainAccount == LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(factureTrans.TaxLedgerDimension);

        if (tmpTrans)
            throw error(strfmt("@GLS102596",
                               tmpTrans.TaxCode,
                               LedgerDimensionFacade::getDisplayValueForLedgerDimension(tmpTrans.TaxLedgerDimension),
                               factureTrans.TaxCode,
                               LedgerDimensionFacade::getDisplayValueForLedgerDimension(factureTrans.TaxLedgerDimension)));

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU _facture,
                    RecId                _recId,
                    Qty                  _qty,
                    NoYes                _recalcTaxes)
    {
        super(_facture,
              _recId,
              _qty,
              _recalcTaxes);

        select firstonly forupdate trans
            where trans.RecId == _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(RecId _recId, Qty _qty, NoYes _recalcTaxes)
    {
        super(_recId, _qty, _recalcTaxes);

        select firstonly forupdate trans
        where trans.RecId == _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCorrectionAccount</Name>
				<Source><![CDATA[
    private container taxCorrectionAccount()
    {
        LedgerDimensionDefaultAccount retAccount;
        LedgerDimensionDefaultAccount transDefaultAccount;
        LedgerDimensionDefaultAccount offsetTransDefaultAccount;
        Amount                        retAmount = trans.amount();

        TaxTable                      taxTable;
        TaxLedgerAccountGroup         ledgerGroup;

        container                     checkPattern;

        if (trans.AccountType != LedgerJournalACType::Ledger)
        {
            throw error(strfmt("@GLS104454", LedgerJournalACType::Ledger));
        }

        if (! trans.TaxCode || ! TaxTable::exist(trans.TaxCode))
        {
            throw error("@GLS102565");
        }

        taxTable    = TaxTable::find(trans.TaxCode);
        switch (taxTable.TaxType_W)
        {
            case TaxType_W::VAT        :
            case TaxType_W::VATReduced :
            case TaxType_W::VATZero    :
                break;
            default                     :
                throw error("@GLS102568");
        }

        ledgerGroup = TaxLedgerAccountGroup::find(taxTable.TaxAccountGroup);

        [transDefaultAccount, offsetTransDefaultAccount] = [LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(trans.LedgerDimension),
                                                            LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(trans.OffsetLedgerDimension)];
        checkPattern = [transDefaultAccount, offsetTransDefaultAccount];
        switch (checkPattern)
        {
            case [ transDefaultAccount,                              ledgerGroup.TaxOutgoingLedgerDimension    ] :
                retAmount = - retAmount;
            case [ ledgerGroup.TaxOutgoingLedgerDimension,           offsetTransDefaultAccount                 ] :
                retAccount = ledgerGroup.TaxOutgoingLedgerDimension;                          // 68
                break;

            case [ transDefaultAccount,                              ledgerGroup.TaxIncomingPaymentLedgerDimension_RU ] :
                retAmount = - retAmount;
            case [ ledgerGroup.TaxIncomingPaymentLedgerDimension_RU, offsetTransDefaultAccount                 ] :
                retAccount = ledgerGroup.TaxIncomingPaymentLedgerDimension_RU;                // 19.100
                break;

            case [ transDefaultAccount,                              ledgerGroup.TaxIncomingLedgerDimension    ] :
                retAmount = - retAmount;
            case [ ledgerGroup.TaxIncomingLedgerDimension,           offsetTransDefaultAccount                 ] :
                retAccount = ledgerGroup.TaxIncomingLedgerDimension;                          // 19.300
                break;
            default                                                                                              :
                throw error("@GLS102567");
        }

        switch (this.factureJourCreate().book())
        {
            case FactureBook_RU::Purch :
                retAmount =   retAmount;
                break;
            case FactureBook_RU::Sales :
                retAmount = - retAmount;
                break;
            default                                   :
                throw error(error::wrongUseOfFunction(funcname()));
        }

        return [ retAccount, retAmount ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FactureTransCreateTaxCorrection_RU construct(FactureJourCreateTaxCorrection_RU _facture,
                                                                      RecId                             _recId,
                                                                      Qty                               _qty,
                                                                      NoYes                             _recalcTaxes)
    {
        FactureTransCreateTaxCorrection_RU  ret;

        switch (_facture.book())
        {
            case FactureBook_RU::Purch :
                ret = new FactureTransCreateTaxCorrection_RU(_facture,
                                                             _recId,
                                                             _qty,
                                                             _recalcTaxes);
                break;
            case FactureBook_RU::Sales :
                ret = new FactureTransCreateTaxCorrection_RU(_facture,
                                                             _recId,
                                                             _qty,
                                                             _recalcTaxes);
                break;
            default                                   :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>