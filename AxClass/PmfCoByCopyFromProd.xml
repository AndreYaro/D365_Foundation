<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfCoByCopyFromProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Co/By copy source for copying from a production (batch) order.
/// </summary>
public class PmfCoByCopyFromProd extends PmfCoByCopyFrom
{
    PmfProdCoBySearch   search;

    ProdTable           prodTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the id of the production formula for this copy source.
    /// </summary>
    /// <returns>Production BOMid for this copy source.
    /// </returns>
    public BOMId bomId()
    {
        return prodTable.bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looping through the source <c>PmfProdCoby</c> record and send them to the destination.
    /// </summary>
    /// <param name="_copyItemRef">
    /// True if the document references should also be copied to the destination.
    /// </param>
    public void copy(boolean _copyItemRef = false)
    {
        PmfProdCoBy         searchCoBy;

        setprefix(strfmt("@SYS21832",search.prodId()));

        ttsbegin;

        while (search.next())
        {
            searchCoBy = search.coBy();

            setprefix(strfmt("@SYS24300", searchCoBy.ItemId));

            copyTo.copyTo(this, search, copyTo.defaultCoBy(), _copyItemRef);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToPmfFormulaCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the source from information stored in the destination <c>PmfFormulaCoby</c> record.
    /// </summary>
    /// <param name="_toCoBy">Destination <c>PmfFormulaCoby</c> record to be written</param>
    /// <param name="_inventDim"> <c>InventDim</c> record related to the destination record.</param>
    /// <param name="_inventTable"><c>InventTable</c> record related to the destination record.</param>
    public void initToPmfFormulaCoBy(
        PmfFormulaCoBy          _toCoBy,
        InventDim               _inventDim,
        InventTable             _inventTable)
    {
        if (!_inventTable)
        {
            _inventTable = InventTable::find(_toCoBy.ItemId);
        }

        // Copy only item dimensions
        _inventDim.clear();
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(_inventTable.ItemId, _toCoBy.inventDim(), _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToPmfProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the source from information stored in the destination production <c>PmfFormulaCoby</c> record.
    /// </summary>
    /// <param name="_toCoBy">Destination production <c>PmfFormulaCoby</c> record to be written.</param>
    /// <param name="_copyRef">True if the document references should also be copied to the destination, otherwise false.
    /// </param>
    public void initToPmfProdCoBy(
        PmfProdCoBy         _toCoBy,
        boolean             _copyRef = false)
    {
        PmfFormulaCoBy  formulaCoBy;
        PmfProdCoBy     searchProdCoBy;

        searchProdCoBy.data(search.coBy());
        formulaCoBy.PmfCoByMap::initFromCoByMap(searchProdCoBy);
        _toCoBy.PmfCoByMap::initFromCoByMap(formulaCoBy);

        if (_copyRef)
        {
            _toCoBy.InventRefType     = searchProdCoBy.InventRefType;
            _toCoBy.InventRefId       = searchProdCoBy.InventRefId;
            _toCoBy.InventRefTransId  = searchProdCoBy.InventRefTransId;
            _toCoBy.CoByRefRecId      = searchProdCoBy.CoByRefRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard protected new.
    /// </summary>
    /// <param name="_copyTo">Destination copy object that this source will send records to.</param>
    /// <param name="_search">Search object that will be used to retrieve Co/By records.</param>
    protected void new(
        PmfCoByCopyTo       _copyTo,
        PmfProdCoBySearch   _search)
    {
        search      = _search;

        super(_copyTo);

        prodTable  = ProdTable::find(search.prodId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static constructor for this instance.
    /// </summary>
    /// <param name="_copyTo">Destination copy object that this source will send records to.</param>
    /// <param name="_search">Search object that will be used to retrieve the <c>PmfFormulaCoby</c> records.</param>
    /// <returns>Instance of the <c>PmfCoByCopyFromProd</c> initialized with the given destination and search objects.
    /// </returns>
    public static PmfCoByCopyFromProd construct(
        PmfCoByCopyTo       _copyTo,
        PmfProdCoBySearch   _search)
    {
        return new PmfCoByCopyFromProd(_copyTo, _search);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>