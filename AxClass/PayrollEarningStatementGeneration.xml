<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningStatementGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollEarningStatementGeneration</c> class is a wrapper class around the <c>PayrollEarningStatementGenerationTask</c> calss
/// to provide a dialog to create recurring earnings and salary earnings.
/// </summary>
class PayrollEarningStatementGeneration extends PayrollStatementGeneration implements BatchRetryable
{
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        callingRecord,
        payPeriodRecId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogCaption</Name>
				<Source><![CDATA[
    protected str dialogCaption()
    {
        return "@Payroll:GenerateEarningsStatements";
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Payroll:GenerateEarningsStatements";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the <c>PayrollEarningGenerationTask</c> class for earning processing.
    /// </summary>
    /// <param name="_batchTaskGroupList">
    /// The list of workers and related positions for the <c>PayrollEarningGenerationTask</c> class to generate earnings.
    /// </param>
    /// <returns>
    /// The <c>PayrollEarningGenerationTask</c> class.
    /// </returns>
    public RunBaseBatch initializeTask(container _batchTaskGroupList)
    {
        PayrollEarningGenerationTask earningGenerationTask;

        earningGenerationTask = PayrollEarningGenerationTask::construct(this);
        earningGenerationTask.parmPayPeriodRecId(payPeriodRecId);
        earningGenerationTask.parmBatchTaskGroupList(_batchTaskGroupList);

        return earningGenerationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        // If the query has yet to be initialized at this point, we need to do so
        // so that the pack won't fail.
        if (queryRun == null)
        {
            this.initQuery();
        }

        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingRecord</Name>
				<Source><![CDATA[
    public Common parmCallingRecord(Common _callingRecord = callingRecord)
    {
        callingRecord = _callingRecord;

        return callingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayPeriodRecId</Name>
				<Source><![CDATA[
    public PayrollPayPeriodRecId parmPayPeriodRecId(PayrollPayPeriodRecId _payPeriodRecId = payPeriodRecId)
    {
        payPeriodRecId = _payPeriodRecId;

        return payPeriodRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipCompletionMsgDisplay</Name>
				<Source><![CDATA[
    public boolean parmSkipCompletionMsgDisplay(boolean _skipCompletionMsgDisplay = skipCompletionMsgDisplay)
    {
        skipCompletionMsgDisplay = _skipCompletionMsgDisplay;

        return skipCompletionMsgDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycleHelpText</Name>
				<Source><![CDATA[
    protected str payCycleHelpText()
    {
        return "@Payroll:ThePayCycleUsedToGenerateTheEarnings";
    }

]]></Source>
			</Method>
			<Method>
				<Name>payPeriodHelpText</Name>
				<Source><![CDATA[
    protected str payPeriodHelpText()
    {
        return "@Payroll:ThePayPeriodUsedToGenerateTheEarnings";
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduleJob</Name>
				<Source><![CDATA[
    public void runScheduleJob(container _batchTaskGroupList)
    {
        PayrollEarningGenerationTask    earningStatementGenTask;

        super(_batchTaskGroupList);

        // Only need to track the number of earning statements created if not batch
        if (!this.isinbatch())
        {
            // Cast the task to an earnings-specific version so that the count can be determined
            earningStatementGenTask = task as PayrollEarningGenerationTask;

            statementscounter += earningStatementGenTask.getEarningstatementcount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showStatementCountMessage</Name>
				<Source><![CDATA[
    protected Description showStatementCountMessage()
    {
        return (strFmt("@SYS4000367", statementsCounter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;
        PayrollPayPeriodRecId payPeriodRecIdLast;
        Common callingRecordLast;

        #LOCALMACRO.SaveLastList
            callingRecordLast,
            payPeriodRecIdLast
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion:
                if (this.inGetSaveLast())
                {
                    // Only want the query from the save last values.
                    [version, #SaveLastList, queryCon] = packedClass;
                }
                else
                {
                    [version, #CurrentList, queryCon] = packedClass;
                }

                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new QueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCallingPosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the calling position is valid.
    /// </summary>
    /// <param name="_positionRecId">
    ///     The calling position record id.
    /// </param>
    /// <returns>
    ///     true if the calling position is valid; otherwise false.
    /// </returns>
    protected boolean validateCallingPosition(HcmPositionRecId _positionRecId)
    {
        boolean                     ret;
        HcmPositionWorkerAssignment hcmPositionWorkerAssignment;
        utcdatetime                 companyStartofPayPeriod, companyEndOfPayPeriod;

        ret = super(_positionRecId);

        companyEndOfPayPeriod = this.companyEndOfPayPeriodAdjusted(PayrollPayPeriod::find(payPeriodRecId).PeriodEndDate);
        companyStartOfPayPeriod = this.companyEndOfPayPeriodAdjusted(PayrollPayPeriod::find(payPeriodRecId).PeriodStartDate);

        ret = PayrollEarningStatementGeneration::validatePayrollPositionDetail(_positionRecId, companyEndOfPayPeriod, payCycleRecId);

        if (ret)
        {
            select ValidTimeState(companyStartOfPayPeriod, companyEndOfPayPeriod) count(RecId) from hcmPositionWorkerAssignment
                where hcmPositionWorkerAssignment.Position == _positionRecId;

            if (hcmPositionWorkerAssignment.RecId == 0)
            {
                ret = ret && checkFailed("@Payroll:ThePositionIsNotAssignedToAWorkerForThisPayPeriodAssignThePo");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCallingWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the calling worker is valid.
    /// </summary>
    /// <param name="_workerRecId">
    ///     The calling worker record id.
    /// </param>
    /// <returns>
    ///     true if the calling worker is valid; otherwise false.
    /// </returns>
    protected boolean validateCallingWorker(HcmWorkerRecId _workerRecId)
    {
        boolean                     ret;
        utcdatetime                 companyStartofPayPeriod, companyEndOfPayPeriod;

        ret = super(_workerRecId);

        companyEndOfPayPeriod = this.companyEndOfPayPeriodAdjusted(PayrollPayPeriod::find(payPeriodRecId).PeriodEndDate);
        companyStartOfPayPeriod = this.companyEndOfPayPeriodAdjusted(PayrollPayPeriod::find(payPeriodRecId).PeriodStartDate);

        if (HcmPositionWorkerAssignment::countActivePositionWorkerAssignment(_workerRecId, companyStartOfPayPeriod, companyEndOfPayPeriod) == 0)
        {
            ret = ret && checkFailed("@Payroll:TheWorkerIsNotAssignedToAPositionForThisPayPeriodAssignTheWo1");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePayrollPositionDetail</Name>
				<Source><![CDATA[
    public static boolean validatePayrollPositionDetail(HcmPositionRecId _positionRecId, utcdatetime _companyEndOfPayPeriod, PayrollPayCycleRecId _payCycleRecId)
    {
        boolean ret, retLE, retPayCycle, retNormalHours;
        PayrollPositionDetails      payrollPositionDetails;
        LegalEntityRecId        legalEntityRecId;

        if (legalEntityRecId == 0)
        {
            legalEntityRecId = CompanyInfo::current();
        }

        payrollPositionDetails = PayrollPositionDetails::findByPosition(_positionRecId, DateTimeUtil::date(_companyEndOfPayPeriod));

        ret = true;
        if (payrollPositionDetails.RecId != 0)
        {
            retLE = (payrollPositionDetails.PaidByLegalEntity == legalEntityRecId);

            if (!retLE)
            {
                warning(strFmt("@Payroll:TheCurrentLegalEntityDoesNotMatchThePaidByLegalEntityForPosi", HcmPosition::find(_positionRecId).PositionId));
            }

            retPayCycle = (payrollPositionDetails.PayCycle == _payCycleRecId);

            if (!retPayCycle)
            {
                warning(strFmt("@Payroll:ThePayCycleSelectedDoesNotMatchThePayCycleForPosition1EnterT",HcmPosition::find(_positionRecId).PositionId));
            }

            retNormalHours = (payrollPositionDetails.PayrollNormalHours > 0);

            if (!retNormalHours)
            {
                warning(strFmt("@Payroll:EarningsWereNotGeneratedForPosition1EnterTheAnnualNormalHour", HcmPosition::find(_positionRecId).PositionId));
            }
        }
        else
        {
            warning(strFmt("@Payroll:EarningsWereNotGeneratedForPosition1ThePositionIsNotSetUpFor", HcmPosition::find(_positionRecId).PositionId));
            ret = false;
        }

        ret = ret && retLE && retPayCycle && retNormalHours;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of the process class on server.
    /// </summary>
    /// <returns>
    /// An instance of the process class on server.
    /// </returns>
    public static PayrollEarningStatementGeneration construct()
    {
        return (new PayrollEarningStatementGeneration());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        PayrollEarningStatementGeneration earningStatementGeneration;

        earningStatementGeneration = PayrollEarningStatementGeneration::construct();

        if (earningStatementGeneration.prompt())
        {
            earningStatementGeneration.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>