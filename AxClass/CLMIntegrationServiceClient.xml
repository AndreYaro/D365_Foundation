<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CLMIntegrationServiceClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net;
using System.Net.Http;
using Microsoft.Dynamics.ApplicationPlatform;

/// <summary>
/// The <c>CLMIntegrationServiceClient</c> class is abstract implementation of the HTTP client for the service operation.
/// </summary>
public abstract class CLMIntegrationServiceClient implements CLMIntegrationIServiceOperation
{
    protected CLMIntegrationServiceInstance serviceInstance;
    protected CLMIntegrationServiceOperation serviceOperation;

    private HttpClient httpClient;
    private const int DefaultRequestTimeoutMilliseconds = 10000;
    private static Microsoft.Dynamics.HttpCommunication.IHttpClientFactory httpClientFactory = new Microsoft.Dynamics.HttpCommunication.DefaultHttpClientFactory();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmServiceInstance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public CLMIntegrationServiceInstance parmServiceInstance(CLMIntegrationServiceInstance _serviceInstance = serviceInstance)
    {
        serviceInstance = _serviceInstance;

        return serviceInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceOperation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public CLMIntegrationServiceOperation parmServiceOperation(CLMIntegrationServiceOperation _serviceOperation = serviceOperation)
    {
        serviceOperation = _serviceOperation;

        return serviceOperation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoke</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public CLMIntegrationIResponseContract invoke(CLMIntegrationContract _contract)
    {
        _contract.initFromServiceOperation(serviceOperation);

        HttpRequestMessage requestMessage = this.createHttpRequestMessage(_contract);
        HttpResponseMessage responseMessage = this.invokeOperation(requestMessage);
        CLMIntegrationIResponseContract responseContract = this.deserializeResponse(responseMessage);

        return responseContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserializeResponse</Name>
				<Source><![CDATA[
    protected abstract CLMIntegrationIResponseContract deserializeResponse(HttpResponseMessage _responseMessage)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHttpRequestMessage</Name>
				<Source><![CDATA[
    private HttpRequestMessage createHttpRequestMessage(CLMIntegrationContract _contract)
    {
        HttpRequestMessage requestMessage = this.createRequest();
        requestMessage = this.addRequestHeaders(requestMessage);

        if (serviceOperation.RequestMethod == CLMIntegrationRequestMethod::POST ||
            serviceOperation.RequestMethod == CLMIntegrationRequestMethod::PUT ||
            serviceOperation.RequestMethod == CLMIntegrationRequestMethod::PATCH)
        {
            this.getContentSerializer(requestMessage).applyContent(_contract);
        }

        return requestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRequestHeaders</Name>
				<Source><![CDATA[
    private HttpRequestMessage addRequestHeaders(HttpRequestMessage _httpRequestMessage)
    {
        System.Net.Http.Headers.HttpRequestHeaders httpRequestHeaders = _httpRequestMessage.Headers;

        CLMIntegrationServiceOperationKeyValue serviceOperationKeyValue;

        while select serviceOperationKeyValue
            where serviceOperationKeyValue.ServiceOperation == serviceOperation.RecId
                && serviceOperationKeyValue.KeyValueType == CLMIntegrationKeyValueType::Header
        {
            httpRequestHeaders.Add(serviceOperationKeyValue.Key, serviceOperationKeyValue.Value);
        }

        this.getAuthenticationProvider(_httpRequestMessage).applyAuthentication();

        return _httpRequestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequest</Name>
				<Source><![CDATA[
    private HttpRequestMessage createRequest()
    {
        str requestUri = CLMIntegrationUtilities::getAbsoluteUriFromRelativeUri(serviceInstance.BaseURL, serviceOperation.RelativeURL);
        requestUri = CLMIntegrationUtilities::getUriWithServiceOperationQueryParameters(serviceOperation, requestUri, true);
        var httpRequestMessage = new System.Net.Http.HttpRequestMessage(this.getHttpMethod(), requestUri);

        return HttpRequestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHttpMethod</Name>
				<Source><![CDATA[
    private HttpMethod getHttpMethod()
    {
        switch (serviceOperation.RequestMethod)
        {
            case CLMIntegrationRequestMethod::GET:
                return HttpMethod::Get;

            case CLMIntegrationRequestMethod::POST:
                return HttpMethod::Post;

            case CLMIntegrationRequestMethod::PUT:
                return HttpMethod::Put;

            case CLMIntegrationRequestMethod::PATCH:
                return new HttpMethod('PATCH');

            default:
                throw error(error::missingOverload(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeOperation</Name>
				<Source><![CDATA[
    private HttpResponseMessage invokeOperation(HttpRequestMessage _requestMessage)
    {
        this.createHttpClient();

        System.Threading.Tasks.Task[] taskArray = new System.Threading.Tasks.Task[1]();

        var task = httpClient.SendAsync(_requestMessage, System.Threading.CancellationToken::None);
        taskArray.set_Item(0, task);
        System.Threading.Tasks.Task::WaitAny(taskArray);

        if (task.IsCanceled)
        {
            throw error(strFmt("@CLMIntegration:ServiceOperationTimeout", httpClient.Timeout.ToString('c')));
        }
        else if (task.IsFaulted)
        {
            str exceptionMessage = '';

            if (task.Exception)
            {
                System.Exception exception = task.Exception;
                exceptionMessage = exception.Message;

                while (exception.InnerException)
                {
                    exception = exception.InnerException;
                    exceptionMessage = exception.Message;
                }
            }

            throw error(exceptionMessage);
        }

        HttpResponseMessage responseMessage = task.get_Result() as HttpResponseMessage;

        return responseMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHttpClient</Name>
				<Source><![CDATA[
    private void createHttpClient()
    {
        if (!httpClient)
        {
            httpClient = httpClientFactory.CreateClient();
            if (serviceOperation.OperationTimeout)
            {
                httpClient.Timeout = new System.TimeSpan(0, 0, 0, 0, serviceOperation.OperationTimeout * 1000);
            }
            else
            {
                httpClient.Timeout = new System.TimeSpan(0, 0, 0, 0, DefaultRequestTimeoutMilliseconds);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuthenticationProvider</Name>
				<Source><![CDATA[
    private CLMIntegrationIAuthenticationProvider getAuthenticationProvider(HttpRequestMessage _httpRequestMessage)
    {
        CLMIntegrationAuthenticationAttribute attribute = new CLMIntegrationAuthenticationAttribute(serviceInstance.AuthenticationType);
        SysExtensionGenericInstantiation instantiation = new SysExtensionGenericInstantiation(this, _httpRequestMessage);

        CLMIntegrationIAuthenticationProvider instance =
            SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(CLMIntegrationIAuthenticationProvider), attribute, instantiation)
                as CLMIntegrationIAuthenticationProvider;

        if (!instance)
        {
            throw error(strFmt("@CLMIntegration:AuthenticationClassInstanceNotFound", serviceInstance.AuthenticationType));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContentSerializer</Name>
				<Source><![CDATA[
    private CLMIntegrationIContentSerializer getContentSerializer(HttpRequestMessage _httpRequestMessage)
    {
        CLMIntegrationContentAttribute attribute = new CLMIntegrationContentAttribute(serviceOperation.RequestContentType, serviceOperation.RequestBodyType);
        SysExtensionGenericInstantiation instantiation = new SysExtensionGenericInstantiation(this, _httpRequestMessage);

        CLMIntegrationIContentSerializer instance =
            SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(CLMIntegrationIContentSerializer), attribute, instantiation)
                as CLMIntegrationIContentSerializer;

        if (!instance)
        {
            throw error(strFmt("@CLMIntegration:ContentSerializerClassInstanceNotFound",
                serviceOperation.RequestContentType,
                serviceOperation.RequestBodyType));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceOperation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static CLMIntegrationIServiceOperation getServiceOperation(CLMIntegrationServiceOperation _serviceOperation)
    {
        CLMIntegrationServiceOperationAttribute attribute = new CLMIntegrationServiceOperationAttribute(_serviceOperation.BusinessOperation, _serviceOperation.OperationMethod);
        SysExtensionGenericInstantiation instantiation = new SysExtensionGenericInstantiation(_serviceOperation);

        CLMIntegrationIServiceOperation instance =
            SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(CLMIntegrationServiceClient), attribute, instantiation)
                as CLMIntegrationIServiceOperation;

        if (!instance)
        {
            throw error(strFmt("@CLMIntegration:ServiceInstanceClassInstanceNotFound", _serviceOperation.BusinessOperation, _serviceOperation.OperationMethod));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(CLMIntegrationServiceOperation _serviceOperation)
    {
        serviceOperation = _serviceOperation;
        serviceInstance = serviceOperation.serviceInstance();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>