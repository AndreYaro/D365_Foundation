<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSBalanceIngredient_Compensating</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PDSBalanceIngredient_Compensating</c> class provides balancing logic specific for compensating ingredients.
/// </summary>
[PDSIngredientTypeFactoryAttribute(PDSIngredientTypeEnum::Compensating)]
class PDSBalanceIngredient_Compensating extends PDSBalanceIngredient
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceQty</Name>
				<Source><![CDATA[
    public Set balanceQty()
    {
        PDSProdCompensationPrinciple    principle;
        ProdBOM                         active;
        ProdBOM                         compensating;
        Qty                             balancedQty;
        SetEnumerator                   resultIdx;
        Qty                             activeQty;
        InventTransId                   inventTransId;
        container                       con;
        UnitOfMeasureDecimalPrecision   precision;

        if (!result)
        {
            result = new Set(Types::container);
        }

        resultIdx = result.getEnumerator();

        while select InventTransId,ItemId,UnitId,RecId, InventDimId
            From compensating
            where compensating.ProdId == prodId
            join principle
                where principle.ProdBOMRefRecId == compensating.RecId
                join InventTransId, RecId
                    from active
                    where active.RecId == principle.ActiveRefRecId
        {
            activeQty = 0;

            while (resultIdx.moveNext())
            {
                con             = resultIdx.current();
                inventTransId   = conpeek(con, #PosInventTransId);

                if (inventTransId == active.InventTransId)
                {
                    activeQty += conpeek(con, #PosUnNormalizedQty);
                }
            }

            balancedQty = principle.diffAdditiveCompensationCalc(activeQty);

            if (balancedQty < 0)
            {
                throw error(strfmt("@PSC379",balancedQty));
            }

            precision = UnitOfMeasure::findBySymbol(compensating.UnitId).DecimalPrecision;

            result.add(
                [   compensating.InventTransId,
                    compensating.ItemId,
                    decround(balancedQty, precision),
                    '',
                    decround(balancedQty, precision),
                    compensating.InventDimId]);

            resultIdx.reset();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PDSBalanceIngredient_Compensating construct()
    {
        return new PDSBalanceIngredient_Compensating();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>