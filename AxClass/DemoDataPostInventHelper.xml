<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostInventHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DemoDataPostInventHelper</c> class provides helper functionality for inventory documents in the demo data posting feature.
/// </summary>
public class DemoDataPostInventHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findCostingVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a set of costing versions within the range specified by a demo data post run document.
    /// </summary>
    /// <param name = "_demoDataPostRunDocument">The run document.</param>
    /// <returns>The set of costing versions.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static List findCostingVersions(DemoDataPostRunDocument _demoDataPostRunDocument)
    {
        List costVersions = new List(Types::String);
        CostingVersion costingVersion;

        if (!_demoDataPostRunDocument.RecId)
        {
            return costVersions;
        }

        if (_demoDataPostRunDocument.FromDocumentId && _demoDataPostRunDocument.ToDocumentId)
        {
            while select costingVersion
                where costingVersion.BlockActivation == NoYesCombo::No
                    && costingVersion.VersionId >= _demoDataPostRunDocument.FromDocumentId
                    && costingVersion.VersionId <= _demoDataPostRunDocument.ToDocumentId
            {
                if (costingVersion.costingVersionActivationEnabled())
                {
                    costVersions.addEnd(costingVersion.VersionId);
                }
            }
        }
        else if (_demoDataPostRunDocument.FromDocumentId)
        {
            while select costingVersion
                where costingVersion.BlockActivation == NoYesCombo::No
                    && costingVersion.VersionId >= _demoDataPostRunDocument.FromDocumentId
            {
                if (costingVersion.costingVersionActivationEnabled())
                {
                    costVersions.addEnd(costingVersion.VersionId);
                }
            }
        }
        else if (_demoDataPostRunDocument.ToDocumentId)
        {
            while select costingVersion
                where costingVersion.BlockActivation == NoYesCombo::No
                    && costingVersion.VersionId <= _demoDataPostRunDocument.ToDocumentId
            {
                if (costingVersion.costingVersionActivationEnabled())
                {
                    costVersions.addEnd(costingVersion.VersionId);
                }
            }
        }
        else
        {
            while select costingVersion
                where costingVersion.BlockActivation == NoYesCombo::No
            {
                if (costingVersion.costingVersionActivationEnabled())
                {
                    costVersions.addEnd(costingVersion.VersionId);
                }
            }
        }

        return costVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a set of inventory journals within the range specified by a demo data post run document.
    /// </summary>
    /// <param name = "_demoDataPostRunDocument">The run document.</param>
    /// <param name = "_journalType">The journal type.</param>
    /// <returns>The set of inventory journals.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RecordSortedList findInventJournalTable(
        DemoDataPostRunDocument _demoDataPostRunDocument,
        InventJournalType _journalType)
    {
        InventJournalTable inventJournalTable;
        RecordSortedList inventJournals = new RecordSortedList(tableNum(InventJournalTable));
        inventJournals.sortOrder(fieldNum(InventJournalTable, JournalId));

        if (!_demoDataPostRunDocument.RecId)
        {
            return inventJournals;
        }

        Query query = new Query();
        QueryBuildDataSource journalHeaderDataSource = query.addDataSource(tableNum(InventJournalTable));

        //Static ranges
        journalHeaderDataSource.addRange(fieldNum(InventJournalTable, JournalType)).value(queryValue(_journalType));
        journalHeaderDataSource.addRange(fieldNum(InventJournalTable, Posted)).value(queryValue(NoYes::No));

        // Dynamic ranges
        str dateRange = DemoDataPostJournalHelper::buildDateRange(_demoDataPostRunDocument.FromDocumentDate, _demoDataPostRunDocument.ToDocumentDate);
        str journalNumRange = DemoDataPostJournalHelper::buildIdentifierRange(
            fieldStr(InventJournalTable, JournalId),
            _demoDataPostRunDocument.FromDocumentId,
            _demoDataPostRunDocument.ToDocumentId);

        if (journalNumRange)
        {
            journalHeaderDataSource.addRange(fieldNum(InventJournalTable, JournalId)).value(journalNumRange);
        }

        if (dateRange)
        {
            QueryBuildDataSource journalLineDataSource = journalHeaderDataSource.addDataSource(tableNum(InventJournalTrans));
            journalLineDataSource.joinMode(JoinMode::ExistsJoin);
            journalLineDataSource.addLink(
                fieldNum(InventJournalTable, JournalId),
                fieldNum(InventJournalTrans, JournalId),
                journalHeaderDataSource.name());

            journalLineDataSource.addRange(fieldNum(InventJournalTrans, TransDate)).value(dateRange);
        }

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            InventJournalTable = queryRun.get(tableNum(InventJournalTable));
            inventJournals.ins(InventJournalTable);
        }

        return inventJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post a set of inventory journals.
    /// </summary>
    /// <param name = "_inventJournals">The set of inventory journals.</param>
    /// <param name = "_runDocument">The demo data post run document.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void postInventJournals(RecordSortedList _inventJournals, DemoDataPostRunDocument _runDocument)
    {
        InventJournalTable inventJournalTable;
        boolean journalFound = _inventJournals.first(inventJournalTable);

        while (journalFound)
        {
            DemoDataPostInventHelper::postSingleInventJournal(inventJournalTable, _runDocument);

            journalFound = _inventJournals.next(inventJournalTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSingleInventJournal</Name>
				<Source><![CDATA[
    private static void postSingleInventJournal(InventJournalTable _inventJournalTable, DemoDataPostRunDocument _runDocument)
    {
        const JournalTransferErrors journalTransferErrors = NoYes::Yes;

        DemoDataPostDocumentStatus status = DemoDataPostDocumentStatus::Failed;

        DemoDataPostRunDocumentStatus runDocumentStatus = DemoDataPostRunDocumentStatus::addDocumentForProcessing(
            _runDocument.RunId,
            _runDocument.RecId,
            _inventJournalTable.RecId,
            _inventJournalTable.TableId,
            _inventJournalTable.JournalId);

        try
        {
            JournalCheckPost journalCheckPost = InventJournalCheckPost::newPostJournal(_inventJournalTable);
            journalCheckPost.parmTransferErrors(journalTransferErrors);
            journalCheckPost.runOperation();

            status = DemoDataPostDocumentStatus::Success;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0 && xSession::currentRetryCount() < DemoDataPostConstants::MaxRetryCount)
            {
                retry;
            }
        }
        catch
        {
            Global::exceptionTextFallThrough();
        }
        finally
        {
            ttsbegin;

            runDocumentStatus.DocumentStatus = status;
            runDocumentStatus.CompletionTime = DateTimeUtil::getSystemDateTime();
            runDocumentStatus.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>