<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCtrlSZV62</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportCtrlSZV62 extends RPayPFReportCtrlSZV6
{
    #RPayPFReportSZV62
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkKeyChanged</Name>
				<Source><![CDATA[
        protected boolean checkKeyChanged()
    {
        boolean ret;

        ret = super();

        emplNo = ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataValid</Name>
				<Source><![CDATA[
        protected boolean dataValid()
    {
        boolean ret;

        ret = keySpecialSeniority == RPayPFSeniorityType::Common && super();

        if (ret)
        {
            validEmpl.add(keyEmplId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionPctBaseCodes</Name>
				<Source><![CDATA[
        protected container deductionPctBaseCodes()
    {
        container con = connull();

        if (keyFund == pensionInsuranceFund)
        {
            if (deductionCodeExceedMax)
            {
                con = [[deductionCodeExceedMax, false]];
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        protected void init()
    {
        super();
        deductionCodeExceedMax = payTaxParameters.PFDeductionCodePctBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKey</Name>
				<Source><![CDATA[
        protected container parmKey()
    {
        return [#parmKeyReport];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyToCheck</Name>
				<Source><![CDATA[
        protected container parmKeyToCheck()
    {
        return this.parmKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValue</Name>
				<Source><![CDATA[
        protected container parmValue()
    {
        switch (keyFund)
        {
            case pensionInsuranceFund:
                deductionPctBase = conpeek(deductBasePctAmount, 1);
                fundAmountIns = fundAmount - deductionPctBase;
                fundAmountSto = 0;
                break;

            case pensionStorageFund:
                fundAmountSto = fundAmount;
                fundAmountIns = 0;
                break;

            default:
                fundAmountIns = 0;
                fundAmountSto = 0;
        }

        return [#parmValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackData</Name>
				<Source><![CDATA[
        protected void unpackData(container _callParameters)
    {
        container packedQuery;
        parmContract.unpack(_callParameters);

        reportStartDate      = parmContract.reportStartPeriod();
        reportEndDate        = parmContract.reportEndPeriod();
        seniorityStartPeriod = parmContract.seniorityStartPeriod();
        seniorityEndPeriod   = parmContract.seniorityEndPeriod();
        reportCorPeriodStart = parmContract.corrReportStartPeriod();
        reportCorPeriodEnd   = parmContract.corrReportEndPeriod();
        reportType           = parmContract.correctionType();
        reportYear           = year(reportEndDate);
        corrReportYear       = year(reportCorPeriodEnd);
        reportType           = parmContract.correctionType();

        if (reportType == RpayPensionFundExportKindOfCorrection::None)
        {
            reportCalcStartDate = reportStartDate;
        }
        else
        {
            reportCalcStartDate = reportCorPeriodStart;
            reportEndDate       = reportCorPeriodEnd;
        }

        packedQuery = parmContract.queryRun();

        if (SysQuery::isPackedOk(packedQuery))
        {
            queryRun = new QueryRun(packedQuery);
        }
        else
        {
            this.initEmplQuery();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>