<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepPreTaxDedJournalizer_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <C>AssetDepPreTaxDedJournalizer_JP</C> class.
/// </summary>
class AssetDepPreTaxDedJournalizer_JP
{
    AssetBook           assetBookTax;
    AssetDepType_JP     assetDepType;
    private LineNum journalLineNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmJournalLineNum</Name>
				<Source><![CDATA[
    internal LineNum parmJournalLineNum(LineNum _journalLineNum = journalLineNum)
    {
        journalLineNum = _journalLineNum;

        return journalLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates asset journal trans.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number
    /// </param>
    /// <param name="_amount">
    /// The amount
    /// </param>
    /// <param name="_transDate">
    /// The transaction date
    /// </param>
    public void createTrans(
        LedgerJournalId _journalNum,
        AmountCur       _amount,
        TransDate       _transDate)
    {
        AssetJournal    assetJournal;

        assetJournal = new AssetJournal(_journalNum, this.getAssetTransTypeJournal());

        if (journalLineNum)
        {
            assetJournal.parmSkipAutoJournalLineNum(true);
            assetJournal.parmJournalLineNum(journalLineNum);
        }

        assetJournal.createTrans(
            _amount,
            assetBookTax,
            _transDate,
            '',
            0,
            0,
            false,
            0,
            0,
            dateNull(),
            false,
            false,
            this.getAssetDocumentType(),
            this.getAssetDocumentEntryRecId(),
            this.getReserveJournals());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentEntryRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets AssetDocumentEntry record id.
    /// </summary>
    /// <returns>
    /// Returns 0
    /// </returns>
    protected AssetDocumentRecId_JP getAssetDocumentEntryRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets AssetDocumentType.
    /// </summary>
    /// <returns>
    /// Returns AssetDocumentType
    /// </returns>
    protected AssetDocumentType_JP getAssetDocumentType()
    {
        AssetDocumentType_JP   ret;

        switch (assetDepType)
        {
            case AssetDepType_JP::AdditionalDepreciationWithDirectOff:
                ret = AssetDocumentType_JP::AdditionalDepDirectOff;
                break;

            case AssetDepType_JP::AdditionalDepreciationWithReserve:
                ret = AssetDocumentType_JP::AdditionalDepReserve;
                break;

            case AssetDepType_JP::SpecialDepreciationWithDirectOff:
                ret = AssetDocumentType_JP::SpecialDepDirectOff;
                break;

            case AssetDepType_JP::SpecialDepreciationWithReserve:
                ret = AssetDocumentType_JP::SpecialDepReserve;
                break;

            default:
                ret = AssetDocumentType_JP::None;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTransTypeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets AssetTransType journal.
    /// </summary>
    /// <returns>
    /// Returns AssetTransType journal
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws wrong use of the function.
    /// </exception>
    protected AssetTransTypeJournal getAssetTransTypeJournal()
    {
        AssetTransTypeJournal   ret;

        switch (assetDepType)
        {
            case AssetDepType_JP::OrdinaryDepreciation:
                ret = AssetTransTypeJournal::Depreciation;
                break;

            case AssetDepType_JP::AdditionalDepreciationWithDirectOff:
            case AssetDepType_JP::AdditionalDepreciationWithReserve:
            case AssetDepType_JP::SpecialDepreciationWithDirectOff:
            case AssetDepType_JP::SpecialDepreciationWithReserve:
                ret = AssetTransTypeJournal::ExtraordinaryDepreciation;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReserveJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reserve journals.
    /// </summary>
    /// <returns>
    /// Returns reserve journals
    /// </returns>
    protected List getReserveJournals()
    {
        List    ret;

        switch (assetDepType)
        {
            case AssetDepType_JP::AdditionalDepreciationWithReserve:
                ret = new List(Types::Container);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForConstruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes variaties for construct method.
    /// </summary>
    /// <param name="_assetBookTax">
    /// A record of <C>AssetBook</C> on tax layer.
    /// </param>
    /// <param name="_assetDepType">
    /// The asset depreciation type.
    /// </param>
    protected void initForConstruct(
        AssetBook                   _assetBookTax,
        AssetDepType_JP             _assetDepType)
    {
        assetBookTax                = _assetBookTax;
        assetDepType                = _assetDepType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of a sub class of <C>AssetDepPreTaxDedJournalizer_JP</C> based on specified type of depreciation method.
    /// </summary>
    /// <param name="_assetBookTax">
    /// A record of <C>AssetBook</C> on tax layer.
    /// </param>
    /// <param name="_assetDepType">
    /// The asset depreciation type.
    /// </param>
    /// <returns>
    /// A new instance of a sub class of <C>AssetDepPreTaxDedCalculator_JP</C>.
    /// </returns>
    public static AssetDepPreTaxDedJournalizer_JP construct(
        AssetBook       _assetBookTax,
        AssetDepType_JP _assetDepType)
    {
        AssetDepPreTaxDedJournalizer_JP  ret;

        ret = new AssetDepPreTaxDedJournalizer_JP();

        ret.initForConstruct(_assetBookTax, _assetDepType);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>