<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerVendInvPhysStornoExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalizerVendInvPhysStornoExt</c> class is the extension for subledger
/// journalizer to handle invoice physical storno.
/// </summary>
[
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice)
]
public class SubledgerJournalizerVendInvPhysStornoExt extends SubledgerJournalizerExtension
{
    #ISOCountryRegionCodes
    boolean isRU;
    boolean isStornoEnabledEE;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertingImportedSubAccEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for imported subledger journal account entry being inserted to record list.
    /// </summary>
    /// <param name="_subledgerJournalEntry">
    /// <c>SubledgerJournalEntry</c> record being imported.
    /// </param>
    /// <param name="_subledgerJournalAccountEntry">
    /// <c>SubledgerJournalAccountEntry</c> record being imported.
    /// </param>
    /// <param name="_accountingDistributionTmp">
    /// <c>AccountingDistributionTmp</c> record being inserted.
    /// </param>
    /// <param name="_recordInsertList">
    /// record list in which the <c>AccountingDistributionTmp</c> record being inserted.
    /// </param>
    public void insertingImportedSubAccEntryEventHandler(SubledgerJournalEntry _subledgerJournalEntry, SubledgerJournalAccountEntry _subledgerJournalAccountEntry, AccountingDistributionTmp _accountingDistributionTmp, RecordInsertList _recordInsertList)
    {
        AccountingDistribution prAccountingDistribution;

        if ((  _subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchOffsetAccountPckSlp
            || _subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchPckSlpPurchaseOffsetAccount
            || _subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchPckSlpTax)
            && _accountingDistributionTmp.IsRelieving)
        {
            select firstonly TransactionCurrencyAmount from prAccountingDistribution
                where prAccountingDistribution.RecId == _accountingDistributionTmp.AccountingDistribution;

            /*
                If storno flag is on - post product receipt reverse as storno.
                Amount in product receipt distribution must be positive.
            */
            if (subledgerJournalizer.parmSourceDocument().parmIsStornoForReversal_RU() &&
                prAccountingDistribution.TransactionCurrencyAmount > 0)
            {
                /*
                    There was correction operation on product receipt.
                    Change sign and direction of transaction.
                */
                if (_accountingDistributionTmp.IsCorrection)
                {
                    _accountingDistributionTmp.AmountSign         = (_accountingDistributionTmp.TransactionCurrencyAmount < 0) ? DebitCredit::Credit : DebitCredit::Debit;
                    _accountingDistributionTmp.NegativeAmountSign = (_accountingDistributionTmp.AmountSign == DebitCredit::Credit)? DebitCredit::Debit : DebitCredit::Credit;

                    _accountingDistributionTmp.TransactionCurrencyAmount = -_accountingDistributionTmp.TransactionCurrencyAmount;
                    subledgerJournalizer.calculateForeignCurAmounts(_accountingDistributionTmp);
                    _accountingDistributionTmp.initFromAccountingDistributionTmp(_accountingDistributionTmp);
                }
                else
                {
                    _accountingDistributionTmp.AmountSign         = (_accountingDistributionTmp.AmountSign == DebitCredit::Credit) ? DebitCredit::Debit : DebitCredit::Credit;
                    _accountingDistributionTmp.NegativeAmountSign = (_accountingDistributionTmp.AmountSign == DebitCredit::Credit)? DebitCredit::Debit : DebitCredit::Credit;
                }

                _accountingDistributionTmp.IsCorrection = true;
            }
            else
            {
                // Negative amount in product receipt distribution
                if (prAccountingDistribution.TransactionCurrencyAmount < 0)
                {
                    if (_accountingDistributionTmp.IsCorrection)
                    {
                        if (_accountingDistributionTmp.AmountSign == DebitCredit::Debit &&
                            _accountingDistributionTmp.TransactionCurrencyAmount < 0)
                        {
                            _accountingDistributionTmp.AmountSign = DebitCredit::Credit;
                            _accountingDistributionTmp.NegativeAmountSign = DebitCredit::Debit;
                        }
                    }
                    else
                    {
                        /*
                            There was correction operation on product receipt.
                            Change sign and direction of transaction.
                        */
                        if (AccountingEvent::find(prAccountingDistribution.AccountingEvent).Type == AccountingEventType::Correction)
                        {
                            _accountingDistributionTmp.AmountSign         = (_accountingDistributionTmp.TransactionCurrencyAmount < 0) ? DebitCredit::Debit : DebitCredit::Credit;
                            _accountingDistributionTmp.NegativeAmountSign = (_accountingDistributionTmp.AmountSign == DebitCredit::Credit)? DebitCredit::Debit : DebitCredit::Credit;

                            _accountingDistributionTmp.TransactionCurrencyAmount = -_accountingDistributionTmp.TransactionCurrencyAmount;
                            subledgerJournalizer.calculateForeignCurAmounts(_accountingDistributionTmp);
                            _accountingDistributionTmp.initFromAccountingDistributionTmp(_accountingDistributionTmp);
                        }
                    }
                }
                else
                {
                    /*
                        There was correction operation on product receipt.
                        Change sign and direction of transaction.
                    */
                    if (_accountingDistributionTmp.IsCorrection)
                    {
                        _accountingDistributionTmp.AmountSign         = (_accountingDistributionTmp.TransactionCurrencyAmount < 0) ? DebitCredit::Debit : DebitCredit::Credit;
                        _accountingDistributionTmp.NegativeAmountSign = (_accountingDistributionTmp.AmountSign == DebitCredit::Credit)? DebitCredit::Debit : DebitCredit::Credit;

                        _accountingDistributionTmp.TransactionCurrencyAmount = -_accountingDistributionTmp.TransactionCurrencyAmount;
                        subledgerJournalizer.calculateForeignCurAmounts(_accountingDistributionTmp);
                        _accountingDistributionTmp.initFromAccountingDistributionTmp(_accountingDistributionTmp);
                    }
                }

                _accountingDistributionTmp.IsCorrection = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadedAccDistTmpRelieveAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    ///   The method is an event handler for loadedAccDistTmpRelieveAccrual event. Inverts side and Correction if Physical storno is enabled.
    /// </summary>
    /// <param name="_subledgerJournalAccountEntryRelievingTmp">
    ///   <c>SubledgerJournalAccountEntryRelievingTmp</c> table containing entries to be relieved.
    /// </param>
    /// <remarks>
    ///   If Physical storno is enabled for document, transforms reversing entry into correction.
    /// </remarks>
    public void loadedAccDistTmpRelieveAccrual(SubledgerJournalAccountEntryRelievingTmp _subledgerJournalAccountEntryRelievingTmp)
    {
        if (isStornoEnabledEE || subledgerJournalizer.parmSourceDocument().parmIsStornoForReversal_RU())
        {
            while select forUpdate _subledgerJournalAccountEntryRelievingTmp
                where _subledgerJournalAccountEntryRelievingTmp.PostingType == LedgerPostingType::PurchOffsetAccountPckSlp
                   || _subledgerJournalAccountEntryRelievingTmp.PostingType == LedgerPostingType::PurchPckSlpPurchaseOffsetAccount
                   || _subledgerJournalAccountEntryRelievingTmp.PostingType == LedgerPostingType::PurchPckSlpTax
            {
                _subledgerJournalAccountEntryRelievingTmp.Side = (_subledgerJournalAccountEntryRelievingTmp.Side == DebitCredit::Credit) ? DebitCredit::Debit : DebitCredit::Credit;
                _subledgerJournalAccountEntryRelievingTmp.IsCorrection = !_subledgerJournalAccountEntryRelievingTmp.IsCorrection;
                _subledgerJournalAccountEntryRelievingTmp.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        isRU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        isStornoEnabledEE = LedgerParameters::isStornoEnabledEE();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the subledger journalizer extension events.
    /// </summary>
    protected void subscribe()
    {
        if (isRU)
        {
            subledgerJournalizer.insertingImportedSubledgerAccEntry += eventhandler(this.insertingImportedSubAccEntryEventHandler);
        }
        if (isRU || isStornoEnabledEE)
        {
            subledgerJournalizer.loadedAccDistTmpRelieveAccrual += eventhandler(this.loadedAccDistTmpRelieveAccrual);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SubledgerJournalizerVendInvPhysStornoExt construct()
    {
        return new SubledgerJournalizerVendInvPhysStornoExt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>