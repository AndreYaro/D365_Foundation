<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCodaImportBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankCodaImportBase</c> class is the basic class used for importing Belgian CODA statements.
/// </summary>
class BankCodaImportBase
{
    public static const str DetailNumberZero = '0000';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args && _args.dataset() == tablenum(BankCodaAccountStatement))
        {
            BankAccountTable bankAccountTable = _args.caller().bankAccountTable();
            BankCodaParameters bankCodaParameters = BankCodaParameters::find();
            str integrationPoint = classStr(ERTableDestination) + '#' + tableStr(BankCodaAccountStatementEntity);

            var modelMappingDestinationRun = ERObjectsFactory::createMappingDestinationRunByImportFormatMappingId(
                bankCodaParameters.ERModelMappingTable,
                integrationPoint,
                true);
            
            if (bankAccountTable.RecId != 0)
            {
                var bankAccountID = bankAccountTable.AccountID;

                modelMappingDestinationRun = modelMappingDestinationRun
                    .withParameter(new ERModelDefinitionDatabaseContext()
                        .addValue(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountID), bankAccountID));
            }
            
            modelMappingDestinationRun.run();

            BankCodaImportBase::delayedUpdateMovementLines();
        }
        else
        {
            error("@SYS79604");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delayedUpdateMovementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method makes a delayed update of movement lines.
    /// </summary>
    public static void delayedUpdateMovementLines()
    {
        BankCodaAccountStatement statement;

        ttsbegin;

        while select forupdate statement 
            where statement.IsMovementLinesUpdateDelayed == NoYes::Yes
        {
            BankCodaImportBase::updateMovementLines(statement);

            statement.IsMovementLinesUpdateDelayed = NoYes::No;
            statement.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMovementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method updates the Globalisation code.
    /// </summary>
    /// <param name="_bankCodaAccountStatement">
    /// Account statement header.
    /// </param>
    /// <remarks>
    /// This method will loop the movement records in the table bankCodaAccountStatementLines and search for children(grandChildren) to determine the value of globalisationcode.
    /// </remarks>
    public static void updateMovementLines(BankCodaAccountStatement _bankCodaAccountStatement)
    {
        BankCodaAccountStatementLines child;
        BankCodaAccountStatementLines grandChild;
        BankCodaAccountStatementLines bankAccountStatementLinesLocal;
        BankCodaAccountStatementLines bankCodaAccountStatementLines;

        ttsbegin;

        while select forupdate bankAccountStatementLinesLocal
        where bankAccountStatementLinesLocal.AccountStatementNum  == _bankCodaAccountStatement.AccountStatementNum
            && bankAccountStatementLinesLocal.AccountId           == _bankCodaAccountStatement.AccountId
            && bankAccountStatementLinesLocal.StatementDate       == _bankCodaAccountStatement.AccountStatementDate
            && bankAccountStatementLinesLocal.TransactionType     == BankCodaTransactionType::Movement
            && bankAccountStatementLinesLocal.DetailNumber        == DetailNumberZero
        {
            if (BankCodaAccountStatementLines::hasDetails(bankAccountStatementLinesLocal))
            {
                bankAccountStatementLinesLocal.GlobalisationCode = GlobalisationCode::Details;
                while select forupdate child
                where child.SequenceNumber == bankAccountStatementLinesLocal.SequenceNumber
                    && child.DetailNumber  != DetailNumberZero
                    && child.RefRecId      == bankAccountStatementLinesLocal.RecId
                {
                    if (BankCodaAccountStatementLines::hasDetails(child))
                    {
                        child.GlobalisationCode = GlobalisationCode::Details;
                        while select forupdate grandChild
                        where grandChild.SequenceNumber == child.SequenceNumber
                            && grandChild.RefRecId       == child.RecId
                        {
                            grandChild.GlobalisationCode = GlobalisationCode::Global;
                            grandChild.update();
                        }
                    }
                    else
                    {
                        child.GlobalisationCode = GlobalisationCode::Global;
                    }
                    child.update();
                }
            }
            else
            {
                bankAccountStatementLinesLocal.GlobalisationCode = GlobalisationCode::Global;
            }
            bankAccountStatementLinesLocal.update();
        }

        while select forupdate bankCodaAccountStatementLines
        where bankCodaAccountStatementLines.TransactionType     == BankCodaTransactionType::Free
           && bankCodaAccountStatementLines.AccountId           == _bankCodaAccountStatement.AccountId
           && bankCodaAccountStatementLines.AccountStatementNum == _bankCodaAccountStatement.AccountStatementNum
           && bankCodaAccountStatementLines.StatementDate       == _bankCodaAccountStatement.AccountStatementDate
            {
                bankCodaAccountStatementLines.RefRecId = BankCodaAccountStatementLines::findMovforFree(bankCodaAccountStatementLines.SequenceNumber,
                                                                                                   bankCodaAccountStatementLines.DetailNumber,
                                                                                                   bankCodaAccountStatementLines.AccountStatementNum,
                                                                                                   bankCodaAccountStatementLines.AccountId);
                bankCodaAccountStatementLines.update();
            }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>