<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetGroupTableMethod_RB_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the depreciation amount for depreciaton table by an asset group with RB method.
/// </summary>
public class AssetGroupTableMethod_RB_IN extends AssetGroupTableMethod_IN
{
    AssetDepreciationTime   periods;
    AssetAmount             assetAmount;
    AssetTransDate          previousDepreciationDate;
    boolean                 theEnd;

//  Properties required for the depreciation conventions
    AssetTableDepConv       deprConv;
    AssetAmount             prevDepAmountPriorYears;
    AssetAmount             prevDepAmountThisYear;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the amount to depreciate this interval.
    /// </summary>
    /// <returns>
    /// The amount to depreciate this interval.
    /// </returns>
    public AssetAmount calc()
    {
        AssetTransDate          startOfPeriod;
        AssetAmount             extraordinaryDepAmount;
        AssetTransDate          orgPeriodEnd;
        AssetAmount             basisForDepreciation,totalAmount,finalAmount; // Value used for depreciation convention calculation.
        AssetBook               assetBookLoc;
        int                     counter = 1;
        container               assetGroupId,assetLessGroupId;
        AssetTransType          assetTransType;
        boolean                 stdCalendar = false;

        startOfPeriod = deprInterval.startOfPeriod(periodstart);
        orgPeriodEnd  = periodEnd;

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();

            if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
            {
                stdCalendar = true;
            }

            if (stdCalendar)
            {
                this.setAmountToDepreciate();
            }
            else
            {
                this.setAmountToDepreciate(deprInterval.openingPeriodDate(startOfPeriod) - 1);
            }
            extraordinaryDepAmount = - AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBook.AssetGroup, periodEnd, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation,assetBook.AssetId);

            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }

            if (previousDepreciationDate &&
                deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                prevDepAmount = this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal;
                prevPeriods = 0;
                if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
                {
                    prevDepAmountPriorYears += prevDepAmountThisYear;
                    prevDepAmountPriorYears += prevDepAmountExternal;
                    prevDepAmountExternal = 0;
                    prevDepAmountThisYear = 0;
                }
            }

            if (stdCalendar)
            {
                while select assetBookLoc
                    where assetBookLoc.AssetGroup   == assetBook.AssetGroup
                       && assetBookLoc.BookId       == assetBook.BookId
                       && assetBookLoc.Status       != AssetStatus::NoAcquisition
                {
                    if (assetBookLoc.DepreciationStartDate < orgPeriodEnd)
                    {
                        if (AssetParameters::find().DepreciationThreshold_IN < (orgPeriodEnd - assetBookLoc.DepreciationStartDate + 1))
                        {
                            assetGroupId    = conPoke(assetGroupId,counter,assetBookLoc.AssetId);
                            if (assetBookLoc.Status == AssetStatus::Sold || assetBookLoc.Status == AssetStatus::Scrapped)
                            {
                                if (assetBookLoc.Status == AssetStatus::Sold)
                                {
                                    assetTransType = AssetTransType::DisposalSale;
                                }
                                else
                                {
                                    assetTransType = AssetTransType::DisposalScrap;
                                }
                                totalAmount     += assetBookLoc.AcquisitionPrice
                                                 + AssetGroupInformation_IN::find(AssetGroupTrans_IN::findByAssetId(
                                                   assetBookLoc.AssetId,assetBookLoc.AssetGroup,assetBookLoc.BookId,assetTransType).AssetGroupInformation).AmountMst
                                                 + AssetGroupInformation_IN::find(AssetGroupTrans_IN::findByAssetId(assetBookLoc.AssetId,assetBookLoc.AssetGroup,assetBookLoc.BookId,AssetTransType::BonusDepreciation).AssetGroupInformation).AmountMst
                                                 - this.getPrevDepAmount(assetBookLoc,prevDepAmount,orgPeriodEnd);
                            }
                            else
                            {
                                totalAmount     += assetBookLoc.AcquisitionPrice
                                                 + AssetGroupInformation_IN::find(AssetGroupTrans_IN::findByAssetId(
                                                   assetBookLoc.AssetId,assetBookLoc.AssetGroup,assetBookLoc.BookId,AssetTransType::BonusDepreciation).AssetGroupInformation).AmountMst
                                                 - this.getPrevDepAmount(assetBookLoc,prevDepAmount,orgPeriodEnd);
                            }
                        }
                        else
                        {
                            assetLessGroupId = conPoke(assetLessGroupId,counter,assetBookLoc.AssetId);
                            if (assetBookLoc.Status == AssetStatus::Sold || assetBookLoc.Status == AssetStatus::Scrapped)
                            {
                                if (assetBookLoc.Status == AssetStatus::Sold)
                                {
                                    assetTransType = AssetTransType::DisposalSale;
                                }
                                else
                                {
                                    assetTransType = AssetTransType::DisposalScrap;
                                }
                                finalAmount     += assetBookLoc.AcquisitionPrice
                                                   + AssetGroupInformation_IN::find(AssetGroupTrans_IN::findByAssetId(assetBookLoc.AssetId,assetBookLoc.AssetGroup,assetBookLoc.BookId,assetTransType).AssetGroupInformation).AmountMst
                                                   + AssetGroupInformation_IN::find(AssetGroupTrans_IN::findByAssetId(assetBookLoc.AssetId,assetBookLoc.AssetGroup,assetBookLoc.BookId,AssetTransType::BonusDepreciation).AssetGroupInformation).AmountMst
                                                   - this.getPrevDepAmount(assetBookLoc,prevDepAmount,orgPeriodEnd);
                            }
                            else
                            {
                                finalAmount     += assetBookLoc.AcquisitionPrice
                                                   + AssetGroupInformation_IN::find(AssetGroupTrans_IN::findByAssetId(assetBookLoc.AssetId,assetBookLoc.AssetGroup,assetBookLoc.BookId,AssetTransType::BonusDepreciation).AssetGroupInformation).AmountMst
                                                   - this.getPrevDepAmount(assetBookLoc,prevDepAmount,orgPeriodEnd);
                            }
                        }
                        counter ++;
                    }
                }

                if (deprInterval.assetDepreciationTime(depreciationDate))
                {
                    //  This code branch ensures the accuracy of the original calculated amount.
                    if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                    {
                        if ((conLen(assetGroupId) == counter-1))
                            {
                                assetAmount = ((amountToDepreciate-prevDepAmount-extraordinaryDepAmount) *
                                                this.percentage() / 100) /
                                                deprInterval.assetDepreciationTime(depreciationDate);
                            }
                            else
                            {
                                if (conLen(assetLessGroupId) == counter-1)
                                {
                                    assetAmount = ((amountToDepreciate-prevDepAmount-extraordinaryDepAmount) *
                                                    (this.percentage() / 100) *
                                                    (AssetParameters::find().ThresholdPercentage_IN / 100));
                                }
                            }
                            if (conLen(assetGroupId) < counter-1 && conLen(assetLessGroupId) < counter-1)
                            {
                                assetAmount += ((totalAmount-extraordinaryDepAmount) *
                                                this.percentage() / 100) /
                                                deprInterval.assetDepreciationTime(depreciationDate);

                                assetAmount += ((finalAmount-extraordinaryDepAmount) *
                                                (this.percentage() / 100) *
                                                (AssetParameters::find().ThresholdPercentage_IN / 100));
                            }
                    }
                    else
                    {
                        //  Depreciation conventions require an assetBook.serviceLife value.
                        if (assetBook.ServiceLife)
                        {
                                basisForDepreciation = amountToDepreciate -
                                                       prevDepAmountPriorYears -
                                                       extraordinaryDepAmount;

                                assetAmount = deprConv.calc_RB((basisForDepreciation * this.percentage() / 100),
                                                               prevDepAmountThisYear,
                                                               periodEnd,
                                                               round(periods + prevPeriods,0));
                        }
                        else
                        {
                            assetAmount = 0;
                            if (! dualDepreciation)
                                theEnd = true;
                        }
                    }
                }
                else
                {
                    assetAmount = 0;
                }
            }
            //This piece of code will execute for Calendar type Fiscal
            else
            {
                 this.calcFiscalCalendar(orgPeriodEnd, startOfPeriod, extraordinaryDepAmount);
            }

            this.calcRestPeriod(startOfPeriod);

            //  Code added because RB was not updating the assetBook.lifeTimeRest property.
            periods -= restPeriod;

            assetAmount = CurrencyExchangeHelper::amount(assetAmount * this.revaluationFactor());

            // Correction for minimal depreciation
            if (assetAmount < AssetParameters::find().DepreciationMin)
            {
                //  This code branch ensures the accuracy of the original calculated amount.
                if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                {
                    assetAmount = min(AssetParameters::find().DepreciationMin,amountToDepreciate-prevDepAmount-extraordinaryDepAmount);
                }
                else
                {
                    assetAmount = min(AssetParameters::find().DepreciationMin,amountToDepreciate-prevDepAmountPriorYears-prevDepAmountThisYear-extraordinaryDepAmount);
                }
            }

            periodEnd++;
            periodstart = periodEnd;
            periodEnd   = deprInterval.endPeriod(periodstart);

            previousDepreciationDate = depreciationDate;

            if (! prevPeriods)
            {
                assetAmount = assetBook.roundOffDepreciation(assetAmount);
            }

            depreciationThisRun += assetAmount;
            if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
            {
                prevDepAmountThisYear += assetAmount;
            }
        }

        if (stdCalendar)
        {
            //  This code branch ensures the accuracy of the original calculated amount.
            if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
            {
                if (! prevPeriods &&
                    this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount >= amountToDepreciate)
                {
                    assetAmount -= this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                    prevDepAmount = amountToDepreciate - extraordinaryDepAmount;
                    depreciationThisRun = amountToDepreciate - this.prvDepreciationAmount(periodstart) - prevDepAmountExternal - extraordinaryDepAmount;
                    theEnd = true;
                }
                else
                {
                    if ((assetDepreciationProfile.AssetEndDependOnServiceLife == true) && (periods < 1))
                    {
                        if (orgPeriodEnd <= parmRunDate)
                        {
                            assetAmount -= this.prvDepreciationAmount(parmRunDate,true) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                            theEnd = true;
                        }
                    }
                }
            }
            else
            {
                if (! prevPeriods &&
                    prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount >= amountToDepreciate)
                {
                    assetAmount -= prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                    theEnd = true;
                }
                else
                {
                    if ((assetDepreciationProfile.AssetEndDependOnServiceLife == true) && (periods < 1))
                    {
                        if (orgPeriodEnd <= parmRunDate)
                        {
                            assetAmount -= prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                            theEnd = true;
                        }
                    }
                }
            }
        }
        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFiscalCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the depreciation amount in the specified fiscal period
    /// </summary>
    /// <param name="orgPeriodEnd">
    /// Start date of the specified period
    /// </param>
    /// <param name="startOfPeriod">
    /// End date of the specified period
    /// </param>
    /// <param name="extraordinaryDepAmount">
    /// Extraordinary depreciation amount
    /// </param>
    public void calcFiscalCalendar(AssetTransDate  orgPeriodEnd,
                                   AssetTransDate  startOfPeriod,
                                   AssetAmount     extraordinaryDepAmount)
    {
        #DEFINE.MonthMinDays27(27)
        #DEFINE.MonthMaxDays30(30)
        #DEFINE.QuarterMinDays89(89)
        #DEFINE.QuarterMaxDays92(92)

        AssetAmount             basisForDepreciation,finalAmount; // Value used for depreciation convention calculation.
        AssetAmount             disposalAmount;
        AssetBook               assetBookLoc;
        int                     days;
        AssetTransType          assetTransType;
        FiscalCalendar          fiscalCalendar;
        AssetGroupTrans_IN      assetGroupTrans;
        real                    thresholdValue;

        AssetGroupInformation_IN assetGroupInformation;
        QueryRun                queryRun;
        Query                   query   = new Query();
        QueryBuildDataSource    qBDSAssetBook;
        AssetSaleBasis_IN       isSaleDisposal  = AssetParameters::find().AssetSaleBasis_IN;
        TmpAssetDepAdjust_IN    tmpAssetDepAdjust;
        AssetAmount             origAssetAmount;
        AssetAmount             origAssetDepAmount;
        AssetAmount             soldAssetAmount;
        Counter                 lineNum;
        AssetBook               assetBookSale;
        boolean                 amountToDepreciateAdjusted;
        boolean                 adjustmentExists;
        boolean                 isAssetSaleWithProfit;
        AssetAmount             periodAcquisitionValue;

        assetAmount = 0;

        isAssetSaleWithProfit = assetBook.AssetDepBookMap_IN::isAssetSaleWithProfit(deprInterval.openingPeriodDate(startOfPeriod), deprInterval.closingPeriodDate(startOfPeriod));

        periodAcquisitionValue  = assetSumCalc_Trans.acquisitionValue();
        if (isAssetSaleWithProfit
            && periodAcquisitionValue == assetAcquisitionValue)
        {
            while select assetBookSale
                    where assetBookSale.AssetGroup      == assetBook.AssetGroup
                        && assetBookSale.BookId         == assetBook.BookId
                        && (assetBookSale.Status        == AssetStatus::Sold
                            || assetBookSale.Status     == AssetStatus::Scrapped)
                        && assetBookSale.DisposalDate   > assetBookSale.LastDepreciationDate
                        && assetBookSale.DisposalDate >= deprInterval.openingPeriodDate(startOfPeriod)
                        && assetBookSale.DisposalDate <= deprInterval.closingPeriodDate(startOfPeriod)
            {
                soldAssetAmount += assetBookSale.AssetDepBookMap_IN::acquisitionAmount(dateMax());
            }
        }

        if ((assetAcquisitionValue +
            AssetTrans::getSaleAmountForAssetGroup_IN(assetBook, periodEnd) +
            AssetTrans::getBonusDepForAssetGroup_IN(assetBook, periodEnd)) == amountToDepreciate)
        {
            // Do not adjust the sale Amount, Since it is already taken care in amountToDepreciate.
            isAssetSaleWithProfit = false;
        }

        qBDSAssetBook = query.addDataSource(tableNum(AssetBook));
        qBDSAssetBook.addRange(fieldNum(AssetBook, AssetGroup)).value(queryValue(assetBook.AssetGroup));
        qBDSAssetBook.addRange(fieldNum(AssetBook, BookId)).value(queryValue(assetBook.BookId));
        qBDSAssetBook.addRange(fieldNum(AssetBook, Status)).value(SysQuery::valueNot(AssetStatus::NoAcquisition));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            assetBookLoc = queryRun.get(tableNum(AssetBook));

            tmpAssetDepAdjust.clear();
            origAssetAmount = 0;
            origAssetDepAmount = 0;
            tmpAssetDepAdjust.AssetId = assetBookLoc.AssetId;
            if (assetBookLoc.DepreciationStartDate <= orgPeriodEnd)
            {
                fiscalCalendar = FiscalCalendar::find(AssetBookTable::find(assetBook.BookId).getFiscalCalendar());
                if (assetBookLoc.Status == AssetStatus::Sold
                    || assetBookLoc.Status == AssetStatus::Scrapped)
                {
                    if (assetBookLoc.Status == AssetStatus::Sold)
                    {
                        assetTransType = AssetTransType::DisposalSale;
                    }
                    else
                    {
                        assetTransType = AssetTransType::DisposalScrap;
                    }
                    assetGroupTrans =  AssetGroupTrans_IN::findByAssetId(assetBookLoc.AssetId,
                                           assetBookLoc.AssetGroup,
                                           assetBookLoc.BookId,
                                           assetTransType);

                    assetGroupInformation = AssetGroupInformation_IN::find(assetGroupTrans.AssetGroupInformation);
                    if (assetGroupInformation.TransDate <= deprInterval.closingPeriodDate(startOfPeriod)
                        && assetGroupInformation.TransDate >= deprInterval.findFirstDayOfYear(startOfPeriod))
                    {
                            finalAmount = AssetGroupTrans_IN::extraAmountToDepriciate(assetBookLoc.AssetId,
                                            assetBookLoc.AssetGroup,
                                            assetBookLoc.BookId,
                                            deprInterval.openingPeriodDate(startOfPeriod),
                                            deprInterval.closingPeriodDate(startOfPeriod))
                                        + assetGroupInformation.AmountMst
                                        - this.getPrevDepAmount(assetBookLoc, prevDepAmount, orgPeriodEnd);

                        if (finalAmount > 0)
                        {
                            disposalAmount += assetGroupInformation.AmountMst;
                        }
                    }
                    else
                    {
                            finalAmount = AssetGroupTrans_IN::extraAmountToDepriciate(assetBookLoc.AssetId,
                                            assetBookLoc.AssetGroup,
                                            assetBookLoc.BookId,
                                            deprInterval.openingPeriodDate(startOfPeriod),
                                            deprInterval.closingPeriodDate(startOfPeriod))
                                            - this.getPrevDepAmount(assetBookLoc, prevDepAmount, orgPeriodEnd);
                    }
                    //When asset is sold with profit
                    if (finalAmount < 0)
                    {
                        finalAmount = 0;
                    }
                }
                else
                {
                    disposalAmount = 0;
                    finalAmount = AssetGroupTrans_IN::extraAmountToDepriciate(assetBookLoc.AssetId,
                                      assetBookLoc.AssetGroup,
                                      assetBookLoc.BookId,
                                      deprInterval.openingPeriodDate(startOfPeriod),
                                      deprInterval.closingPeriodDate(startOfPeriod))
                                  - this.getPrevDepAmount(assetBookLoc, prevDepAmount, orgPeriodEnd);
                }

                days = periodEnd - startOfPeriod;
                if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                {
                    TransDate lastDayOfYear = LedgerFiscalCalendar::findLastDayOfYear(fiscalCalendar.RecId, startOfPeriod);
                    if (AssetParameters::find().DepreciationThreshold_IN >
                        (lastDayOfYear - assetBookLoc.DepreciationStartDate + 1))
                    {
                        thresholdValue = AssetParameters::find().ThresholdPercentage_IN / 100;
                    }
                    else
                    {
                        thresholdValue = 1;
                    }

                    if (days >= #MonthMinDays27 && days <= #MonthMaxDays30)
                    {
                        //Monthly depreciation calculation when calendor periods are created with one month interval
                        if (prevDepAmount)
                        {
                            assetAmount = ((amountToDepreciate-prevDepAmount-extraordinaryDepAmount)
                                          * (this.percentage() / 100)
                                          * thresholdValue)
                                          / this.numOfMonthsInInterval(deprInterval.openingPeriodDate(startOfPeriod),
                                              deprInterval.closingPeriodDate(startOfPeriod));
                            origAssetAmount     = amountToDepreciate -prevDepAmount;
                            origAssetDepAmount  = assetAmount;
                        }
                        else
                        {
                            origAssetDepAmount = assetAmount;
                            assetAmount += ((finalAmount-extraordinaryDepAmount)
                                           * this.percentage() / 100)
                                           * thresholdValue
                                           / deprInterval.numOfPeriodsLeftInYear(assetBookLoc.DepreciationStartDate);
                            origAssetAmount     = finalAmount;
                            origAssetDepAmount  = assetAmount - origAssetDepAmount;
                        }
                    }
                    else if (days >= #QuarterMinDays89 && days <= #QuarterMaxDays92)
                    {
                        //Quarterly depreciation calculation when calendor periods are created with three month interval
                        if (startOfPeriod <= assetBookLoc.DepreciationStartDate
                            && assetBookLoc.DepreciationStartDate <= periodEnd)
                        {
                            origAssetDepAmount = assetAmount;
                            assetAmount += (finalAmount-extraordinaryDepAmount)
                                           * (this.percentage() / 100)
                                           * thresholdValue
                                           * (this.numOfMonthsInInterval(assetBookLoc.DepreciationStartDate, periodEnd)
                                           / this.numOfMonthsInInterval(assetBookLoc.DepreciationStartDate,
                                               deprInterval.closingPeriodDate(startOfPeriod)));
                            origAssetAmount = finalAmount;
                            origAssetDepAmount  = assetAmount - origAssetDepAmount;
                        }
                        else if (assetBookLoc.DepreciationStartDate < deprInterval.openingPeriodDate(startOfPeriod))
                        {
                            assetAmount = (amountToDepreciate-prevDepAmount-extraordinaryDepAmount)
                                          * (this.percentage() / 100)
                                          * thresholdValue
                                          * (this.numOfMonthsInInterval(startOfPeriod, periodEnd)
                                          / this.numOfMonthsInInterval(deprInterval.openingPeriodDate(startOfPeriod),
                                              deprInterval.closingPeriodDate(startOfPeriod)));
                            origAssetAmount     = amountToDepreciate-prevDepAmount;
                            origAssetDepAmount  = assetAmount;
                        }
                        else
                        {
                            origAssetDepAmount = assetAmount;
                            assetAmount += (finalAmount-extraordinaryDepAmount)
                                           * (this.percentage() / 100)
                                           * thresholdValue
                                           * (this.numOfMonthsInInterval(startOfPeriod, periodEnd)
                                           / this.numOfMonthsInInterval(assetBookLoc.DepreciationStartDate,
                                               deprInterval.closingPeriodDate(startOfPeriod)));
                            origAssetAmount = finalAmount;
                            origAssetDepAmount  = assetAmount - origAssetDepAmount;
                        }
                    }
                    else
                    {
                        // Periodic - When calendar periods are created with different start/end dates other than month/quarter start/end dates.
                        // Depreciation calculation for first period in the current year
                        if (startOfPeriod <= assetBookLoc.DepreciationStartDate && assetBookLoc.DepreciationStartDate <= periodEnd )
                        {
                            //Depreciation calculation when calendor periods are created with less than one month interval
                            if (days < #MonthMinDays27)
                            {
                                origAssetDepAmount  = assetAmount;
                                assetAmount += (finalAmount-extraordinaryDepAmount)
                                               * (this.percentage() / 100)
                                               * thresholdValue
                                               * ((periodEnd - assetBookLoc.DepreciationStartDate +1)
                                                   / (deprInterval.closingPeriodDate(startOfPeriod) - assetBookLoc.DepreciationStartDate + 1));
                            }
                            else
                            {
                                origAssetDepAmount  = assetAmount;
                                assetAmount += (finalAmount-extraordinaryDepAmount)
                                               * (this.percentage() / 100)
                                               * thresholdValue
                                               * (this.numOfMonthsInInterval(assetBookLoc.DepreciationStartDate,periodEnd)
                                               / this.numOfMonthsInInterval(assetBookLoc.DepreciationStartDate,
                                                   deprInterval.closingPeriodDate(startOfPeriod)));
                                origAssetAmount = finalAmount;
                                origAssetDepAmount = assetAmount - origAssetDepAmount;
                            }
                        }
                        //Next year depreciation calculation
                        else if (assetBookLoc.DepreciationStartDate < deprInterval.openingPeriodDate(startOfPeriod))
                        {
                            //Depreciation calculation when calendor periods are created with less than one month interval
                            if (days < #MonthMinDays27)
                            {
                                assetAmount = (amountToDepreciate-prevDepAmount-extraordinaryDepAmount)
                                              * (this.percentage() / 100)
                                              * thresholdValue
                                              * ((days + 1)
                                              / (deprInterval.closingPeriodDate(startOfPeriod) - deprInterval.openingPeriodDate(startOfPeriod) + 1));
                            }
                            else
                            {
                                assetAmount = (amountToDepreciate - prevDepAmount - extraordinaryDepAmount + disposalAmount)
                                              * (this.percentage() / 100)
                                              * thresholdValue
                                              * (this.numOfMonthsInInterval(startOfPeriod,periodEnd)
                                              / this.numOfMonthsInInterval(deprInterval.openingPeriodDate(startOfPeriod),
                                                  deprInterval.closingPeriodDate(startOfPeriod)));
                            }
                            origAssetAmount = amountToDepreciate-prevDepAmount;
                            origAssetDepAmount = assetAmount;
                        }
                        // Depreciation calculation for remaining (other than first period) periods in the current year
                        else
                        {
                            //Depreciation calculation when calendor periods are created with less than one month interval
                            if (days < #MonthMinDays27)
                            {
                                origAssetDepAmount  = assetAmount;
                                assetAmount += (finalAmount-extraordinaryDepAmount)
                                               * (this.percentage() / 100)
                                               * (thresholdValue)
                                               * ((days + 1)
                                                   / (deprInterval.closingPeriodDate(startOfPeriod) - assetBookLoc.DepreciationStartDate + 1));
                            }
                            else
                            {
                                origAssetDepAmount  = assetAmount;
                                assetAmount += (finalAmount-extraordinaryDepAmount)
                                               * (this.percentage() / 100)
                                               * (thresholdValue)
                                               * (this.numOfMonthsInInterval(startOfPeriod,periodEnd)
                                                   / this.numOfMonthsInInterval(assetBookLoc.DepreciationStartDate,
                                                       deprInterval.closingPeriodDate(startOfPeriod)));
                            }
                            origAssetAmount = finalAmount;
                            origAssetDepAmount = assetAmount - origAssetDepAmount;
                        }
                    }
                }
                else
                {
                    //  Depreciation conventions require an assetBook.serviceLife value.
                    if (assetBook.ServiceLife)
                    {
                            basisForDepreciation = amountToDepreciate
                                                   - prevDepAmountPriorYears
                                                   - extraordinaryDepAmount;

                            assetAmount = deprConv.calc_RB((basisForDepreciation * this.percentage() / 100),
                                              prevDepAmountThisYear,
                                              periodEnd,
                                              round(periods + prevPeriods,0));

                        origAssetAmount = amountToDepreciate;
                        origAssetDepAmount = assetAmount;
                    }
                    else
                    {
                        assetAmount = 0;
                        if (! dualDepreciation)
                        {
                            theEnd = true;
                        }
                    }
                }
            }
            if ( (isAssetSaleWithProfit || this.checkIfAdjMthLIFOAndWithinThreshold_IN(periodEnd, assetBookLoc.DepreciationStartDate))
                && origAssetDepAmount != 0
                && (!(amountToDepreciate && amountToDepreciateAdjusted) // If amountToDepreciate exists, adjust only for first time.
                    || (amountToDepreciate && assetAmount != origAssetDepAmount)))
            {
                lineNum++;
                if (amountToDepreciate && assetAmount == origAssetDepAmount)
                {
                    origAssetAmount = origAssetAmount - soldAssetAmount;
                    amountToDepreciateAdjusted = true;
                }
                if (origAssetAmount > 0)
                {
                    tmpAssetDepAdjust.AmountToDepreciate = origAssetAmount;
                    tmpAssetDepAdjust.DepreciationAmount = origAssetDepAmount;
                    tmpAssetDepAdjust.LineNumber         = lineNum;
                    tmpAssetDepAdjust.insert();
                    adjustmentExists = true;
                }
            }
        }
        if (adjustmentExists)
        {
            this.adjustSaleAsset(orgPeriodEnd, startOfPeriod, extraordinaryDepAmount, tmpAssetDepAdjust);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfAdjMthLIFOAndWithinThreshold_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the adjustment method is LIFO and is asset acquired is less than threshold days.
    /// </summary>
    private boolean checkIfAdjMthLIFOAndWithinThreshold_IN(TransDate _assetTransDate, TransDate _assetAcquisitionDate)
    {
        boolean	            ret;
        int                 thresholdValue   = AssetParameters::find().DepreciationThreshold_IN;
        AssetSaleBasis_IN   isAssetSaleBasis = AssetParameters::find().AssetSaleBasis_IN;

        // Adjust the SaleAsset amount, only when it is profit.
        if ((isAssetSaleBasis == AssetSaleBasis_IN::LIFO)
               && ((_assetTransDate - _assetAcquisitionDate + 1) < thresholdValue))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the period of inactivity.
    /// </summary>
    /// <param name="_startOfPeriod">
    /// Start date of the period.
    /// </param>
    protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        super(_startOfPeriod);
        if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            //
            //  The restPeriod may be updated based on the assets depreciation convention or
            //  will be returned unchanged.
            //
            restPeriod = deprConv.calcRestPeriod(restPeriod, periodstart, periods);
        }

        if (calculatePrevPeriods && ! amountToDepreciate)
        {
            prevPeriods += restPeriod;
        }
        else
        {
            calculatePrevPeriods = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrevDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the previous depreciation amount.
    /// </summary>
    /// <param name="_assetBook">
    /// The asset book of the asset.
    /// </param>
    /// <param name="_prevAmount">
    /// Previous amount value of the asset.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    ///  Returns the previous depreciation amount.
    /// </returns>
    public AssetAmount getPrevDepAmount(AssetBook  _assetBook,AssetAmount _prevAmount,TransDate _transDate)
    {
        AssetTrans assetTrans;
        AssetAmount totalAcqAmount,tmpDepAmount,prvDepreciationAmount;

        if (_assetBook.AssetGroupDepreciation_IN == NoYes::Yes &&
            _assetBook.LastDepreciationDate      > _assetBook.DepreciationStartDate)
        {
            if (_prevAmount > 0)
            {
                while select AssetId, AssetGroup, BookId, TransDate, TransType from assetTrans
                    where assetTrans.AssetGroup == _assetBook.AssetGroup
                       && assetTrans.BookId     == _assetBook.BookId
                       && assetTrans.TransDate  < _transDate
                       && (assetTrans.TransType == AssetTransType::Acquisition
                       || assetTrans.TransType  == AssetTransType::AcquisitionAdj)
                {
                    if (AssetBook::find(assetTrans.AssetId,assetTrans.BookId).DepreciationStartDate < AssetBook::find(assetTrans.AssetId,assetTrans.BookId).LastDepreciationDate)
                    {
                        totalAcqAmount += AssetGroupTrans_IN::acquisitionAmount(assetTrans.AssetId,_transDate,assetTrans.BookId);
                    }
                }
                tmpDepAmount = totalAcqAmount * _assetBook.depreciationPercentage() / 100;
                if (_prevAmount != tmpDepAmount)
                {
                    if ((_assetBook.LastDepreciationDate - _assetBook.DepreciationStartDate + 1) < 180)
                    {
                        prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(_assetBook.AssetId,_transDate,_assetBook.BookId))/ totalAcqAmount) *
                                                  tmpDepAmount * (AssetParameters::find().ThresholdPercentage_IN / 100) ;
                    }
                    else
                    {
                        prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(_assetBook.AssetId,_transDate,_assetBook.BookId))/ totalAcqAmount) *
                                                  tmpDepAmount;
                    }
                }
                else
                {
                    prvDepreciationAmount = round(((AssetGroupTrans_IN::acquisitionAmount(_assetBook.AssetId,_transDate,_assetBook.BookId))/ totalAcqAmount) * abs(_prevAmount),1.0);
                }
            }
        }
        else
        {
            prvDepreciationAmount = -(AssetTrans::amountMSTPerDateTranstype(_assetBook.AssetId, _transDate, _assetBook.BookId, AssetTransType::Depreciation) +
                                      AssetTrans::amountMSTPerDateTranstype(_assetBook.AssetId, _transDate, _assetBook.BookId, AssetTransType::DepreciationAdj));
        }

        return prvDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

    //
    //  This property is required to get the asset completely depreciatiate based on service life
    //  and must be initialized from the assetBook.LifeTimeRest property and updated based on the
    //  restPeriod value.
    //
        periods  = assetBook.LifeTimeRest;

        prevDepAmount = this.prvDepreciationAmount(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);
        if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            // Construct an asset depreciation convention class.
            deprConv = AssetTableDepConv::newCalcAssetAmount(assetBook, deprInterval, assetDepreciationProfile);

            //  Calculate any depreciations taken the previous years.
            prevDepAmountPriorYears = this.prevDepAmountPriorYears(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);

            if (assetBook.RevaluationGroupId)
            {
                prevDepAmountPriorYears -= assetSumCalc_Trans.depreciationRevaluationValue();
            }

            //  Calculate any depreciations taken this year.
            prevDepAmountThisYear = this.prevDepAmountThisYear(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
    //
    //  This is to prevent divide by zeros errors during the percentage() method
    //  if the assetBook.ServiceLife property is zero. It will cause the asset to
    //  be ignored during the depreciation "Profile" or "Proposal" process.
    //
        switch (assetDepreciationProfile.Method)
        {
            //
            //  These "Reducing Balance" depreciation methods require a "ServiceLife"
            //  value order to provide a correct precentage value to the calculation process.
            //
            //  The standard reducing balance depreciation method does not require
            //  a "ServiceLife" to provide a correct percentage value so therefore
            //  it is not included in this validation.
            //
            case AssetDepreciationMethod::ReducingBalance125:
            case AssetDepreciationMethod::ReducingBalance150:
            case AssetDepreciationMethod::ReducingBalance175:
            case AssetDepreciationMethod::ReducingBalance200:
                if (!assetBook.ServiceLife)
                {
                    return false;
                }
        }

        if (theEnd)
        {
            return false;
        }
        if (parmRunDate <= baseDate)
        {
            return false;
        }
        this.setDepDate();

    //
    //  This prevents depreciations with invalid dates from
    //  being handled.
    //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfMonthsInInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the number of Month in the specified interval
    /// </summary>
    /// <param name="fromDate">
    /// Start date of the interval
    /// </param>
    /// <param name="toDate">
    /// End date the the interval
    /// </param>
    /// <returns>
    /// return the number of Month in the specified interval
    /// </returns>
    private int numOfMonthsInInterval( AssetTransDate fromDate, AssetTransDate toDate)
    {
        int counter;
        AssetTransDate  nextMonthDate;

        nextMonthDate = fromDate;
        while (nextMonthDate <= toDate)
        {
            nextMonthDate = nextMth(nextMonthDate);
            counter ++;
        }
        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the Asset depreciation percentage.
    /// </summary>
    /// <returns>
    /// The Asset depreciation percentage.
    /// </returns>
    protected AssetDepreciationPercentage percentage()
    {
        #DEFINE.RB125_Factor(1.25)
        #DEFINE.RB150_Factor(1.50)
        #DEFINE.RB175_Factor(1.75)
        #DEFINE.RB200_Factor(2.00)

        AssetDepreciationPercentage percentage;

        switch (assetDepreciationProfile.Method)
        {
            case AssetDepreciationMethod::ReducingBalance125:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB125_Factor, assetBook.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance150:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB150_Factor, assetBook.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance175:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB175_Factor, assetBook.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance200:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB200_Factor, assetBook.ServiceLife);
                break;

            default:
                //  Call the parent class method in order to maintain original code.
                percentage = super();
                break;
        }

        return percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDepAmountPriorYears</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method caculates the assets total amount of depreciation for all years prior to the current year.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// Returns the total amount of depreciation for all years prior to the current year.
    /// </returns>
    private AssetAmount prevDepAmountPriorYears(AssetTransDate _assetTransDate)
    {
        AssetSumCalc_Trans_IN   assetSumCalc_Trans_PriorYears;
        AssetTransDate          toDate;
        AssetAmount             retValue;

        //  The depreciation year used for the asset is "Calendar"
        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
        {
            //
            //  Set the to date to the date prior to the begining
            //  of the year for the passed in date.
            //  This date is the last day of the previous year.
            //
            toDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate) - 1;
        }
        else
        {
            //
            //  The depreciation year is either Fiscal-GL Periods or Fiscal-Asset Calendar
            //
            //  Set the to date to the date prior to the begining
            //  of the year for the passed in date.
            //  This date is the last day of the previous year.
            //
            toDate = deprInterval.openingPeriodDate(_assetTransDate) - 1;
        }

        //
        //  Create a period based AssetSumCalc_Trans for the current asset
        //  using the lowest date value dateNull() (01/01/1900) and the
        //  to date as the date range.
        //  This date range represents the earliest transaction date possible to the
        //  last day of the previous year.
        //
        assetSumCalc_Trans_PriorYears = AssetSumCalc_Trans_IN::newAssetPeriod(assetBook.AssetGroup, assetBook.BookId, dateNull(), toDate);

        //
        //  Create a total for all the asset depreciations and
        //  depreciation adjustments between (including) the two (2) dates.
        //
        retValue = -(assetSumCalc_Trans_PriorYears.depreciationValue()  +
                     assetSumCalc_Trans_PriorYears.depreciationAdjValue());

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDepAmountThisYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method caculates the assets total amount of depreciation for the current year.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The asset transaction date.
    /// </param>
    /// <returns>
    /// Returns the total amount of depreciation for the current year.
    /// </returns>
    private AssetAmount prevDepAmountThisYear(AssetTransDate _assetTransDate)
    {
        AssetSumCalc_Trans_IN   assetSumCalc_Trans_ThisYear;
        AssetTransDate          fromDate;
        AssetTransDate          toDate;
        AssetAmount             retValue;

        //  The depreciation year used for the asset is "Calendar"
        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
        {
            //  Set the from date to the begining of the year for the passed in date.
            fromDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate);
        }
        else
        {
            //
            //  The depreciation year is either Fiscal-GL Periods or Fiscal-Asset Calendar
            //  Set the from date to the begining of the fiscal year for the passed in date.
            //
            fromDate = deprInterval.openingPeriodDate(_assetTransDate);
        }

        //  Set the to date to the end of the depreciation period for the passed in date.
            toDate = deprInterval.endPeriod(_assetTransDate);

        //
        //  Create a period based AssetSumCalc_Trans for the current asset
        //  using the from date and the to date as the date range.
        //  This date range represents the beginning of this year to the
        //  date the of the next depreciation.
        //
        assetSumCalc_Trans_ThisYear = AssetSumCalc_Trans_IN::newAssetPeriod(assetBook.AssetGroup, assetBook.BookId, fromDate, toDate);

        //
        //  Create a total for all the asset depreciations and
        //  depreciation adjustments between (including) the two (2) dates.
        //
        retValue = -(assetSumCalc_Trans_ThisYear.depreciationValue() +
                     assetSumCalc_Trans_ThisYear.depreciationAdjValue());

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the previous year depreciation amount.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The transaction date.
    /// </param>
    /// <param name="_fixedDate">
    /// A boolean value whether the depreciation calendar follows the asset calendar.
    /// </param>
    /// <returns>
    /// Returns the previous year depreciation amount.
    /// </returns>
    private AssetAmount prvDepreciationAmount(AssetTransDate _assetTransDate, boolean _fixedDate = false)
    {
        AssetTransDate  depYearStart;
        AssetAmount     prvDepreciationAmount;

        if (! _fixedDate)
        {
            if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
            {
                depYearStart = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate);
            }
            else
            {
                depYearStart = deprInterval.openingPeriodDate(_assetTransDate);
            }
        }
        else
        {
            depYearStart = _assetTransDate;
        }

        prvDepreciationAmount = -(AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBook.AssetGroup, depYearStart - 1, assetBook.BookId, AssetTransType::Depreciation,assetBook.AssetId) +
                                  AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBook.AssetGroup, depYearStart - 1, assetBook.BookId, AssetTransType::DepreciationAdj,assetBook.AssetId));
        return prvDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustSaleAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate and Reduce the extra calculated depreciated amount in the specified fiscal period
    /// </summary>
    /// <param name="_orgPeriodEnd">
    ///  Start date of the specified period
    /// </param>
    /// <param name="_startOfPeriod">
    /// End date of the specified period
    /// </param>
    /// <param name="_extraordinaryDepAmount">
    /// Extraordinary depreciation amount
    /// </param>
    /// <param name="_tmpAssetDepAdjust">
    /// temp table with depreciation values
    /// </param>
    public void adjustSaleAsset(
                                AssetTransDate  _orgPeriodEnd,
                                AssetTransDate  _startOfPeriod,
                                AssetAmount     _extraordinaryDepAmount, TmpAssetDepAdjust_IN    _tmpAssetDepAdjust)
    {
        AssetAmount                 profit;
        AssetDepBookMap_IN          depBookMapLocal;
        AssetAmount                 groupProfit;
        AssetAmount                 assetAmountLoc;
        Query                       query   = new Query();
        AssetSaleBasis_IN           isSaleDisposal  = AssetParameters::find().AssetSaleBasis_IN;
        AssetAmount                 adjustmentAmt;
        AssetAmount                 adjustDepAmt;

        assetAmountLoc  = 0;
        depBookMapLocal = AssetDepBookMap_IN::getEmptyTableBuffer(AssetBookType::ValueModel);

        groupProfit = 0;

        while select depBookMapLocal
            order by depBookMapLocal.AcquisitionDate desc
            where depBookMapLocal.AssetGroup        == assetBook.AssetGroup
                && depBookMapLocal.AssetBookId      == assetBook.BookId
                && (depBookMapLocal.AssetStatus     == AssetStatus::Sold
                    || depBookMapLocal.AssetStatus  == AssetStatus::Scrapped)
                && depBookMapLocal.DisposalDate >= deprInterval.openingPeriodDate(_startOfPeriod)
                && depBookMapLocal.DisposalDate <= deprInterval.closingPeriodDate(_startOfPeriod)
            {
                profit = - AssetDepTransMap_IN::amountMSTPerDateTransTypes(depBookMapLocal, [AssetTransType::DisposalSale, AssetTransType::DisposalScrap], dateNull(), dateMax());

                if (depBookMapLocal.DepreciationStartDate > depBookMapLocal.LastDepreciationDate)
                {
                    profit -= depBookMapLocal.AssetDepBookMap_IN::acquisitionAmount(dateMax());
                }

                if (profit > 0)
                {
                    groupProfit += profit;
                }
            }

        if (groupProfit > 0)
        {
            if (isSaleDisposal == AssetSaleBasis_IN::FIFO)
            {
                while select _tmpAssetDepAdjust
                    order by _tmpAssetDepAdjust.LineNumber asc
                {
                    if (_tmpAssetDepAdjust.AmountToDepreciate >= (groupProfit - adjustmentAmt))
                    {
                        adjustDepAmt  += ((groupProfit - adjustmentAmt)/_tmpAssetDepAdjust.AmountToDepreciate) * _tmpAssetDepAdjust.DepreciationAmount;
                        adjustmentAmt += groupProfit;
                        break;
                    }
                    else
                    {
                        adjustmentAmt += _tmpAssetDepAdjust.AmountToDepreciate;
                        adjustDepAmt  += _tmpAssetDepAdjust.DepreciationAmount;
                    }
                }
            }
            else
            {
                while select _tmpAssetDepAdjust
                    order by _tmpAssetDepAdjust.LineNumber desc
                {
                    if (_tmpAssetDepAdjust.AmountToDepreciate >= (groupProfit - adjustmentAmt))
                    {
                        adjustDepAmt  += ((groupProfit - adjustmentAmt)/_tmpAssetDepAdjust.AmountToDepreciate) * _tmpAssetDepAdjust.DepreciationAmount;
                        adjustmentAmt += groupProfit;
                        break;
                    }
                    else
                    {
                        adjustmentAmt += _tmpAssetDepAdjust.AmountToDepreciate;
                        adjustDepAmt  += _tmpAssetDepAdjust.DepreciationAmount;
                    }
                }
            }
        }
        if (adjustDepAmt)
        {
            assetAmount -= adjustDepAmt;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>