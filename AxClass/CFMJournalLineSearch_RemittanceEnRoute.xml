<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalLineSearch_RemittanceEnRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CFMJournalSourceAttribute(CFMJournalTransSourceType::RemittanceEnRoute)]
class CFMJournalLineSearch_RemittanceEnRoute extends CFMJournalLineSearch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initProtoTransParmContract</Name>
				<Source><![CDATA[
    protected CFMJournalProtoTransParmContract initProtoTransParmContract(QueryRun _queryRun)
    {
        CFMJournalProtoTransParmContractRemEnRt parmContract = new CFMJournalProtoTransParmContractRemEnRt();

        parmContract.parmGeneralJournalAccountEntry(_queryRun.get(tableNum(GeneralJournalAccountEntry)));

        return parmContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryList</Name>
				<Source><![CDATA[
    protected void initQueryList()
    {
        queryList.addEnd(this.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    protected Query query()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsGJAccountEntry = query.addDataSource(tableNum(GeneralJournalAccountEntry));
        qbdsGJAccountEntry.addGroupByField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        qbdsGJAccountEntry.addGroupByField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        qbdsGJAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount), SelectionField::Sum);

        QueryBuildDataSource qbdsGJEntry = qbdsGJAccountEntry.addDataSource(tableNum(GeneralJournalEntry));
        qbdsGJEntry.relations(true);
        qbdsGJEntry.fetchMode(QueryFetchMode::One2One);
        filter.setDateIntervalOpeningBalance(qbdsGJEntry, fieldNum(GeneralJournalEntry, AccountingDate));
        qbdsGJEntry.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

        QueryBuildDataSource qbdsDimAttrLevelValueView = qbdsGJAccountEntry.addDataSource(tableNum(DimensionAttributeLevelValueView));
        qbdsDimAttrLevelValueView.relations(false);
        qbdsDimAttrLevelValueView.joinMode(JoinMode::ExistsJoin);
        qbdsDimAttrLevelValueView.fetchMode(QueryFetchMode::One2One);
        qbdsDimAttrLevelValueView.addLink(fieldnum(GeneralJournalAccountEntry, LedgerDimension), fieldnum(DimensionAttributeLevelValueView, ValueCombinationRecId));
        qbdsDimAttrLevelValueView.addRange(fieldnum(DimensionAttributeLevelValueView, DimensionAttribute)).value(queryValue(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)));

        QueryBuildDataSource qbdsMainAccount = qbdsDimAttrLevelValueView.addDataSource(tableNum(MainAccount));
        qbdsMainAccount.relations(false);
        qbdsMainAccount.joinMode(JoinMode::ExistsJoin);
        qbdsMainAccount.fetchMode(QueryFetchMode::One2One);
        qbdsMainAccount.addLink(fieldnum(DimensionAttributeLevelValueView, EntityInstance), fieldnum(MainAccount, RecId));
        qbdsMainAccount.addRange(fieldnum(MainAccount, LedgerChartOfAccounts)).value(queryValue(LedgerChartOfAccounts::current()));

        QueryBuildDataSource qbdsLedgerLiquidity = qbdsMainAccount.addDataSource(tableNum(LedgerLiquidity));
        qbdsLedgerLiquidity.relations(true);
        qbdsLedgerLiquidity.joinMode(JoinMode::ExistsJoin);
        qbdsLedgerLiquidity.fetchMode(QueryFetchMode::One2One);
        qbdsLedgerLiquidity.addRange(fieldNum(LedgerLiquidity, CFMRemittanceEnRouteAccountType)).value(queryValue(NoYes::Yes));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceType</Name>
				<Source><![CDATA[
    protected CFMPaymentRequestSourceType sourceType()
    {
        return CFMPaymentRequestSourceType::Manual;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>