<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjPayrollCateg2PrdDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjPayrollCateg2PrdDP</c> class provides data for the
///    <c>ProjListProjPayRollCategory2ColumnPeriod</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjStatementCategory)),
    SRSReportParameterAttribute(classstr(ProjListProjPayrollContract))
]
class ProjListProjPayrollCateg2PrdDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    TransDate               ledgerFromDate1;
    TransDate               ledgerToDate1;
    ProjListColumnData      actualVsBudget;
    ProjForecastModelId     forecastModelId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;

    ProjListProjTrans_PayRoll       listProjTrans;
    projListProjTrans2Period        listProjTrans2Period;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjPayrollTmp          projListProjPayrollTmp;

    QueryRun                queryRun;

    ProjCategoryId          id;
    ProjCategoryName        name;

    projStatement           period1ProjStaTement;
    projStatement           period2ProjStatement;

    AmountMST               period1payRollCost;
    AmountMST               period2PayRollCost;
    ProjQty                 period1QtyHour;
    ProjQty                 period2QtyHour;

    int                     reportType;
    int                     hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;
    int                     showQtyHour, showPayrollCost;
    str                     totalCostLabel, period1Label, period2Label, headerLabel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate the amounts that are needed for the report.
    /// </summary>
    void calculate()
    {
        period1ProjStaTement.parmCategoryId(id);
        period2ProjStatement.parmCategoryId(id);

        if (amountQty == ProjAmountQty::Amount || amountQty == ProjAmountQty::AmountQty)
        {
            period1payRollCost     = period1ProjStaTement.d100_PayrollAllocation();
            period2PayRollCost     = period2ProjStatement.d100_PayrollAllocation();
        }

        if (amountQty == ProjAmountQty::Qty || amountQty == ProjAmountQty::AmountQty)
        {
            period1QtyHour         = period1ProjStaTement.d100_PayrollAllocation_Qty();
            period2QtyHour         = period2ProjStatement.d100_PayrollAllocation_Qty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjPayrollTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>ProjListProjPayrollTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjListProjPayrollTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjListProjPayrollTmp')]
    public ProjListProjPayrollTmp getProjListProjPayrollTmp()
    {
        select * from projListProjPayrollTmp;
        return projListProjPayrollTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProjListProjTrans</c> class by using the parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans2Period = projListProjTrans2Period::construct(ProjListStateType::Payroll, ProjListStateId::Category);
        listProjTrans = listProjTrans2Period.getProjListProjTrans1();
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans2Period.getProjListProjTrans1());

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);

        listProjTrans2Period.parmPeriod1FromDate(ledgerFromDate);
        listProjTrans2Period.parmPeriod1ToDate(ledgerToDate);
        listProjTrans2Period.parmPeriod2FromDate(ledgerFromDate1);
        listProjTrans2Period.parmPeriod2ToDate(ledgerToDate1);

        listProjTrans2Period.parmColumnData(actualVsBudget);
        listProjTrans2Period.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjPayrollTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListProjPayrollTmp()
    {
        projListProjPayrollTmp.clear();

        projListProjPayrollTmp.Id            = id;
        projListProjPayrollTmp.IdLabel       = "@SYS69410";
        projListProjPayrollTmp.Name          = name;

        projListProjPayrollTmp.QtyHour       = period1QtyHour;
        projListProjPayrollTmp.QtyHour1      = period2QtyHour;

        projListProjPayrollTmp.PayrollCost   = listProjTransLayout.showAmountReport(period1payRollCost, showAmount);
        projListProjPayrollTmp.PayrollCost1  = listProjTransLayout.showAmountReport(period2PayRollCost, showAmount);

        // set labels
        projListProjPayrollTmp.HeaderLabel     = headerLabel;
        projListProjPayrollTmp.PeriodLabel     = period1Label;
        projListProjPayrollTmp.PeriodLabel1    = period2Label;

        // set decimal values
        projListProjPayrollTmp.DecimalHourQty     = hourQtyDecimals;
        projListProjPayrollTmp.DecimalPayrollCost = amountDecimals;

        // set field visibility
        projListProjPayrollTmp.ShowQtyHour        = showQtyHour;
        projListProjPayrollTmp.ShowPayrollCost    = showPayrollCost;

        projListProjPayrollTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the amounts are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if the values are not zero; otherwise, false.
    /// </returns>
    boolean lineValue()
    {
        return ((period1payRollCost  != 0) ||
                (period1QtyHour      != 0) ||
                (period2PayRollCost  != 0) ||
                (period2QtyHour      != 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the category record and calls the <c>calculate</c> method.
    /// </summary>
    void printCategory()
    {
        ProjCategory        projCategoryLocal;

        projCategoryLocal   = queryRun.get(tablenum(ProjCategory));

        id                  = projCategoryLocal.CategoryId;
        name                = projCategoryLocal.Name;

        this.calculate();

        if (! skipZero || (this.lineValue()))
        {
            this.insertProjListProjPayrollTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. This method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjPayrollContract contract = this.parmDataContract() as ProjListProjPayrollContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();

        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();
        ledgerFromDate1 = contract.parmLedgerFromDate1();
        ledgerToDate1 = contract.parmLedgerToDate1();

        actualVsBudget = contract.parmActualVsBudget();
        forecastModelId = contract.parmForecastModelId();

        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();

        reportType = contract.parmReportType();

        this.initProjListTrans();

        [showQtyHour, showPayrollCost] = listProjTrans.setDisplayFlags(amountQty);

        [hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        period1Label = listProjTrans2Period.formatPeriodLabel("@SYS9308", 1, DateFlags::None);
        period2Label = listProjTrans2Period.formatPeriodLabel("@SYS13183",2, DateFlags::None);
        headerLabel = listProjTrans2Period.formatSelection(showAmount);

        period1ProjStaTement = projStatement::newProjListPayroll(
                                    listProjTrans2Period.getProjListProjTrans1(),
                                    projListProjTrans2Period::columnData2ActualBudget(actualVsBudget) ,
                                    amountQty,
                                    forecastModelId);

        period2ProjStatement = projStatement::newProjListPayroll(
                                    listProjTrans2Period.getProjListProjTrans2(),
                                    projListProjTrans2Period::columnData2ActualBudget(actualVsBudget) ,
                                    amountQty,
                                    forecastModelId);

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            this.printCategory();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
