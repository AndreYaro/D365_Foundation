<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHand</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventOnHand extends InventOnHandQty
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventSumDelta</Name>
				<Source><![CDATA[
    void addInventSumDelta()
    {
        if (!itemId || InventUpdateOnhandGlobal::mustAddInventSumDeltaOnhand(itemId))
        {
            InventSumDelta inventSumDelta = this.findSumJoinDelta();
            inventSum.addInventSumDeltaQty(inventSumDelta);
            inventSum.addInventSumDeltaValues(inventSumDelta);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventModuleUnitsSelectionToUnitIdAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the unit corresponding to the <c>InventModuleUnits</c> selection.
    /// </summary>
    /// <param name = "_selection">Units Combo box selection.</param>
    /// <param name = "_itemId">Item number.</param>
    /// <param name = "_unitIdSecondary">Secondary unit to use if user selects to manually enter a unit.</param>
    /// <returns>A container with the corresponding unit and an allowEdit flag for the unit control.</returns>
    public static container inventModuleUnitsSelectionToUnitIdAllowEdit(InventModuleUnits _selection, ItemId _itemId, UnitOfMeasureSymbol _unitIdSecondary)
    {
        switch (_selection)
        {
            case InventModuleUnits::InventoryUnit:
                return [InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId, false];
            case InventModuleUnits::SalesUnit:
                return [InventTableModule::find(_itemId, ModuleInventPurchSales::Sales).UnitId, false];
            case InventModuleUnits::PurchaseUnit:
                return [InventTableModule::find(_itemId, ModuleInventPurchSales::Purch).UnitId, false];
            case InventModuleUnits::None:
                return [_unitIdSecondary, true];
        }
        return ['', false];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory model must perform an on hand validation when the invent sum is
    /// updated.
    /// </summary>
    /// <param name="_checkOnly">
    /// A Boolean value that indicates whether an exception will be thrown.
    /// </param>
    /// <returns>
    /// true if the inventory model must perform an on hand validation when the invent sum is updated;
    /// otherwise, false.
    /// </returns>
    public boolean checkInventModel(boolean _checkOnly = false)
    {
        if (_checkOnly || InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().isFinalCommit())
        {
            return InventTable::find(itemId).modelGroup().inventModelType().checkInventOnHand(this, _checkOnly);
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemDrawFinancial</Name>
				<Source><![CDATA[
    public boolean  checkItemDrawFinancial(
        InventQty    _inventQty,
        NoYes        _negativeFinancial,
        boolean      _addInfo = true
        , PdsCWInventQty    _cwQty = 0
        )
    {
        PdsCWInventQty  cwAvailFinancialPost;

        if (! _negativeFinancial)
        {
            InventQty availFinancialPost = this.availFinancial();

            if (cwItem)
            {
                cwAvailFinancialPost = this.pdsCWAvailFinancial();
            }

            if (availFinancialPost < (-_inventQty)
                || (cwItem && cwAvailFinancialPost < (-_cwQty))
                )
            {
                if (! _addInfo)
                {
                    return false;
                }

                setPrefix("@SYS54048");
                str inventDimCriteriaPrefix = inventDimCriteria.preFix();

                if (inventDimCriteriaPrefix)
                {
                    setPrefix(inventDimCriteria.preFix());
                }

                if (!InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().isFinalCommit())
                {
                    if (cwItem)
                    {
                        return checkFailed(strFmt("@SCM:InventOnhandCatchWeightItemConsumptionError", this.itemId, -_cwQty, cwAvailFinancialPost));
                    }
                    return checkFailed(strFmt("@SCM:InventOnHandItemConsumpationError", this.itemId, -_inventQty, availFinancialPost));
                }
                else
                {
                    InventSumDelta inventSumDelta = this.findSumJoinDelta();
                    inventSum.clear();
                    inventSum.addInventSumDeltaQty(inventSumDelta);
                    inventSum.addInventSumDeltaValues(inventSumDelta);
                    InventQty availFinancialDelta = this.availFinancial();

                    if (cwItem)
                    {
                        PdsCWInventQty cwAvailFinancialDelta = this.pdsCWAvailFinancial();
                        return checkFailed(strFmt("@SCM:InventOnhandCatchWeightItemConsumptionError", this.itemId, -cwAvailFinancialDelta, cwAvailFinancialPost - cwAvailFinancialDelta));
                    }

                    return checkFailed(strFmt("@SCM:InventOnHandItemConsumpationError", this.itemId, -availFinancialDelta, availFinancialPost-availFinancialDelta));
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemStdCostSecCur_RU</Name>
				<Source><![CDATA[
    public boolean  checkItemStdCostSecCur_RU(boolean _checkOnly = false)
    {
        if (_checkOnly || InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().isFinalCommit())
        {
            if (this.postedQty())
            {
                try
                {
                    if (this.postedValueSecCur_RU() != CurrencyExchangeHelper::amount(this.postedQty() * this.costPriceSecPcs_RU(false)))
                    {
                        if (_checkOnly)
                        {
                            return false;
                        }
                        infolog.add(Exception::UpdateConflict, strFmt("@SCM:UpdateConflict", this.postedValueSecCur_RU(), this.postedQty(), this.costPriceSecPcs_RU(false), itemId));
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    if (_checkOnly)
                    {
                        return false;
                    }
                    throw Exception::Error;
                }
            }
            else if (this.postedValueSecCur_RU())
            {
                if (_checkOnly)
                {
                    return false;
                }
                infolog.add(Exception::UpdateConflict, strFmt("@SCM:UpdateConflict", this.postedValueSecCur_RU(), this.postedQty(), this.costPriceSecPcs_RU(false), itemId));
                throw Exception::UpdateConflict;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPricePcs</Name>
				<Source><![CDATA[
    public CostPrice costPricePcs(
        boolean      _onHandOnly = false,
        PriceDate    _priceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (_onHandOnly
        ||  !itemId
        ||  !InventTable::modelGroupByItemId(itemId).StandardCost)
        {
            delayAvailabilityCalculation = true;
            this.setInventSum();
        }

        this.setInventSumKey();
        return inventSum.costPricePcs(_onHandOnly, _priceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPriceSecPcs_RU</Name>
				<Source><![CDATA[
    public CostPrice costPriceSecPcs_RU(boolean _onHandOnly = false)
    {
        InventDim inventDimTmp;

        if (_onHandOnly || !itemId || !InventTable::modelGroupByItemId(itemId).StandardCost)
        {
            delayAvailabilityCalculation = true;
            this.setInventSum();
        }

        inventSum.ItemId = itemId;

        if (! inventSum.InventDimId && inventDimId)
        {
            inventSum.InventDimId = inventDimId;
        }

        if (! inventSum.InventDimId && inventDimCriteria.InventDimId && inventDimParm.isInventDimEqualInventDimParm(inventDimCriteria))
        {
            inventSum.InventDimId = inventDimCriteria.InventDimId;
        }

        if (! inventSum.InventDimId)
        {
            inventDimTmp.data(inventDimCriteria);
            inventDimTmp.clearNotSelectedDim(inventDimParm);
            inventSum.InventDimId = InventDim::findOrCreate(inventDimTmp).InventDimId;
        }

        return inventSum.costPriceSecCurPcs_RU(_onHandOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedValue</Name>
				<Source><![CDATA[
    public CostAmount postedValue()
    {
        this.setInventSum();

        return inventSum.PostedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedValueSecCur_RU</Name>
				<Source><![CDATA[
    public CostAmount postedValueSecCur_RU()
    {
        this.setInventSum();

        return inventSum.PostedValueSecCur_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availReservationDimensions</Name>
				<Source><![CDATA[
    static container availReservationDimensions(
        ItemId          _itemId,
        container       _inventDimPacked, // InventDim passed in as container to avoid a call back to client to release reference.
        NoYes           _reserveOnOrdered)
    {
        InventDim       inventDimCriteria;
        InventDimParm   inventDimParmPhysicalInvent;

        if (!_itemId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        [inventDimCriteria] = _inventDimPacked;

        //only take the physical dimensions that have been specified into consideration when looking for on-hand
        inventDimParmPhysicalInvent.initPhysicalDimensionsFromInventDim(InventDimGroupSetup::newItemId(_itemId), inventDimCriteria);

        InventOnhand inventOnhand = InventOnhand::newParameters(_itemId,inventDimCriteria,inventDimParmPhysicalInvent);

        return [inventOnhand.availReservation(_reserveOnOrdered), inventOnhand.pdsCWAvailReservation(_reserveOnOrdered)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventOnhand construct()
    {
        return new InventOnhand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMReportFinish</Name>
				<Source><![CDATA[
    static InventOnhand newBOMReportFinish(InventJournalTrans _inventJournalTrans)
    {
        InventDimParm   inventDimParm;

        InventDim inventDim = InventDim::find(_inventJournalTrans.InventDimId);
        inventDimParm.initFromInventDim(inventDim);

        return InventOnhand::newParameters(_inventJournalTrans.ItemId, inventDim, inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEstimatedUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an instance of the <c>InventOnHand</c> class.
    /// </summary>
    /// <param name="_movement">
    ///    An instance of the <c>InventMovement</c> class.
    /// </param>
    /// <param name="_inventDim">
    ///    An <c>InventDim</c> record that is used by the <c>InventOnHand</c> class.
    /// </param>
    /// <param name="_inventDimFixed">
    ///    An <c>InventDimFixed</c> value.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventOnHand</c> class.
    /// </returns>
    /// <remarks>
    ///    If the <paramref name="_InventdimFixed" /> parameter is specified then the fixed dimensions will be
    ///    included by the <c>InventOnHand</c> class.
    /// </remarks>
    static InventOnhand newEstimatedUpdate(
        InventMovement  _movement,
        InventDim       _inventDim,
        InventDimFixed  _inventDimFixed = 0)
    {
        InventDimParm   inventDimParm;
        InventDimParm   inventDimParmFixedDimensions;

        inventDimParm.initPhysicalDimensionsFromInventDim(_movement.inventDimGroupSetup(),_inventDim);

        // if fixed dimensions were passed the inventDimParm also needs to include these
        if (_inventDimFixed)
        {
            inventDimParmFixedDimensions.initFromInventDimFixed(_inventDimFixed);
            inventDimParm = InventDimParm::orParms(inventDimParm,inventDimParmFixedDimensions);
        }

        return InventOnhand::newParameters(_movement.itemId(), _inventDim, inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFinancialUpdate</Name>
				<Source><![CDATA[
    static public InventOnhand newFinancialUpdate(
        InventMovement  _movement,
        InventDim       _inventDim)
    {
        InventDimParm       inventDimParmActiveFinancialInvent;
        InventDimParm       inventDimParmActive;

        _movement.inventDimGroupSetup().inventDimParmActiveFinancialInventory(inventDimParmActiveFinancialInvent);
        InventOnhand inventOnhand = InventOnhand::newParameters(_movement.itemId(), _inventDim, inventDimParmActiveFinancialInvent);

        if (_inventDim.InventDimId)
        {
            _movement.inventDimGroupSetup().inventDimParmActive(inventDimParmActive);

            if (InventDimParm::isInventDimParmEqual(inventDimParmActiveFinancialInvent,inventDimParmActive))
            {
                inventOnhand.parmInventDimId(_inventDim.InventDimId);
            }
        }

        return inventOnhand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventBatch</Name>
				<Source><![CDATA[
    static public InventOnhand newInventBatch(InventBatch inventBatch)
    {
        InventOnhand inventOnhand = InventOnhand::construct();

        inventOnhand.parmItemId(inventBatch.ItemId);
        inventOnhand.parmBatchId(inventBatch.InventBatchId);

        return inventOnhand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemDim</Name>
				<Source><![CDATA[
    static public InventOnhand newItemDim(
        ItemId             _itemId,
        InventDim          _inventDim,
        InventDimParm      _inventDimParm)
    {
        return InventOnhand::newParameters(_itemId, _inventDim, _inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemId</Name>
				<Source><![CDATA[
    static public InventOnhand newItemId(ItemId _itemId)
    {
        InventOnhand inventOnhand = InventOnhand::construct();

        inventOnhand.parmItemId(_itemId);

        return inventOnhand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    static public InventOnhand newParameters(
        ItemId             _itemId,
        InventDim          _inventDim,
        InventDimParm      _inventDimParm)
    {
        InventOnhand inventOnhand = InventOnhand::construct();

        inventOnhand.parmInventDim(_inventDim);
        inventOnhand.parmInventDimParm(_inventDimParm);
        //this will set the itemId flag on inventDimParm
        inventOnhand.parmItemId(_itemId);

        return inventOnhand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParametersActive</Name>
				<Source><![CDATA[
    static public InventOnhand newParametersActive(
        ItemId             _itemId,
        InventDim          _inventDim,
        InventDimParm      _inventDimParm,
        InventDimParm      _inventDimParmActive)
    {
        InventOnhand inventOnhand = InventOnhand::newParameters(_itemId,_inventDim,_inventDimParm);

        if (_inventDim.InventDimId)
        {
            if (InventDimParm::isInventDimParmEqual(_inventDimParm,_inventDimParmActive))
            {
                inventOnhand.parmInventDimId(_inventDim.InventDimId);
            }
        }

        return inventOnhand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPhysicalInvent</Name>
				<Source><![CDATA[
    static InventOnhand newPhysicalInvent(
        InventMovement  _movement,
        InventDim       _inventDim)
    {
        return InventOnhand::newPhysicalUpdate(_movement,_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPhysicalUpdate</Name>
				<Source><![CDATA[
    static public InventOnhand newPhysicalUpdate(
        InventMovement  _movement,
        InventDim       _inventDim)
    {
        InventDimParm       inventDimParmActivePhyscicalInvent;
        InventDimParm       inventDimParmActive;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        _movement.inventDimGroupSetup().inventDimParmActivePhysicalInventory(inventDimParmActivePhyscicalInvent);

        InventOnhand inventOnhand = InventOnhand::newParameters(_movement.itemId(), _inventDim, inventDimParmActivePhyscicalInvent);

        if (_inventDim.InventDimId)
        {
            _movement.inventDimGroupSetup().inventDimParmActive(inventDimParmActive);

            if (InventDimParm::isInventDimParmEqual(inventDimParmActivePhyscicalInvent,inventDimParmActive))
            {
                inventOnhand.parmInventDimId(_inventDim.InventDimId);
            }
        }

        return inventOnhand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSumJoinDeltaWithBatchIdOrSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the summarized on hand based on batch ID or serial ID.
    /// </summary>
    /// <returns>An <c>InventSumDelta</c> record.</returns>
    /// <remarks>If you replace this method you also need to replace the InventOnhandQty.findSumJoinDeltaWithBatchIdOrSerialId().</remarks>
    [Replaceable]
    protected InventSumDelta findSumJoinDeltaWithBatchIdOrSerialId()
    {
        InventDim       inventDim;
        InventSumDelta  inventSumDelta;

        SysDaQueryObject queryObject = new SysDaQueryObject(inventSumDelta);
        InventDim::dimAddInventSumDeltaFieldsQueryProjection(queryObject);
        
        SysDaQueryExpression whereClause = 
            new SysDaEqualsExpression(
                new SysDaFieldExpression(inventSumDelta, fieldStr(InventSumDelta, SQLTransactionId)),
                new SysDaValueExpression(InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().sqlTransactionId()));
        if (inventDimParm.ItemIdFlag)
        {
            whereClause = whereClause.and(
                new SysDaEqualsExpression(new SysDaFieldExpression(inventSumDelta, fieldStr(InventSumDelta, ItemId)), new SysDaValueExpression(itemId)));
        }

        if (InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
        {
            whereClause = whereClause.and(InventSumDelta::addInventSumDeltaQueryObject(inventSumDelta, inventDimCriteria, inventDimParm));
            queryObject.whereClause(whereClause);
        }
        else
        {
            queryObject.whereClause(whereClause);

            InventDim::dimAddInventDimExistsJoin(queryObject,
                new SysDaFieldExpression(inventSumDelta, fieldStr(InventSumDelta, InventDimId)), 
                inventDim, 
                inventDimCriteria, 
                inventDimParm);
        }

        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.execute(new SysDaFindObject(queryObject));

        return inventSumDelta;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSumJoinWithBatchIdOrSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the summarized on hand based on batch ID or serial ID.
    /// </summary>
    /// <returns>An <c>InventSum</c> record.</returns>
    /// <remarks>If you replace this method you also need to replace the InventOnHandQty.findSumJoinWithBatchIdOrSerialId().</remarks>
    [Replaceable]
    protected InventSum findSumJoinWithBatchIdOrSerialId()
    {
        InventDim   inventDim;
        InventSum   inventSumLocal;

        SysDaQueryObject queryObject = new SysDaQueryObject(inventSumLocal);
        InventDim::dimAddInventSumFieldsQueryProjection(queryObject);
        
        SysDaQueryExpression whereClause = 
            new SysDaEqualsExpression(
                    new SysDaFieldExpression(inventSumLocal, fieldStr(InventSum, Closed)),
                    new SysDaValueExpression(NoYes::No));
        if (inventDimParm.ItemIdFlag)
        {
            whereClause = whereClause
                .and(new SysDaEqualsExpression(new SysDaFieldExpression(inventSumLocal, fieldStr(InventSum, ItemId)), new SysDaValueExpression(itemId)));
        }

        if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
        {
            whereClause = whereClause.and(InventSum::addInventSumQueryObject(inventSumLocal, inventDimCriteria, inventDimParm));
            queryObject.whereClause(whereClause);
        }
        else
        {
            queryObject.whereClause(whereClause);

            InventDim::dimAddInventDimExistsJoin(queryObject,
            new SysDaFieldExpression(inventSumLocal, fieldStr(InventSum, InventDimId)),
            inventDim,
            inventDimCriteria,
            inventDimParm);
        }
        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.execute(new SysDaFindObject(queryObject));

        return inventSumLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSumWithItemAndDimCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the summarized on hand for items where dimension ID has not been specified.
    /// </summary>
    /// <returns>
    /// An <c>InventSum</c> record.
    /// </returns>
    protected InventSum findSumWithItemAndDimCriteria()
    {
        return InventSum::findSum(itemId,inventDimCriteria,inventDimParm,InventSumFields::All);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>