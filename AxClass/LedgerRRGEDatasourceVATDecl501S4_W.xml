<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEDatasourceVATDecl501S4_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerRRGEDatasourceVATDecl501S4_W</c> class calculates values for fourth section of the VAT declaration.
/// </summary>
public class LedgerRRGEDatasourceVATDecl501S4_W extends LedgerRRGEDatasourceVATDeclarationBase_W
{
    int                 lineNum;
    Map                 valuesMap;
    SetEnumerator       valuesKeyEnumerator;
    boolean             hasData;
    Amount              decrease;
    Amount              taxBase1010447, reclaiming1010447, corrTaxBasePlus, corrTaxBaseMinus;
    
    private const str   OperationCode1010447 = '1010447';
    private const str   OperationCode1010448 = '1010448';

    private const str   Worksheet           = 'стр.7';
    private const int   S4Table1Id          = 4010;
    private const int   S4Table2Id          = 4020;
    private const int   Field1Id            = 1;
    private const int   Field2Id            = 2;
    private const int   Field3Id            = 3;
    private const int   Field4Id            = 4;
    private const int   Field5Id            = 5;
    private const int   Field6Id            = 6;
    private const int   Field7Id            = 7;
    private const int   Field8Id            = 8;
    private const int   Field9Id            = 9;
    private const int   Field10Id           = 10;
    private const int   Field11Id           = 11;
    private const int   Field12Id           = 12;
    private const str   Exclamation         = '!';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>collectValues</Name>
				<Source><![CDATA[
    private void collectValues()
    {
        const int OperationCodesMaxCount = 15;

        FactureJour_RU      factureJour;
        FactureTrans_RU     factureTrans;
        VATOperationCode_RU operationCode;
        TaxAmount           correctFactureTaxAmount;
        TaxAmount           restoredVATAmount;
        Map                 locValuesMap;

        void addValue(VATOperationCode_RU _operationCode, Amount _taxBase = 0, Amount _confirmed = 0, Amount _notConfirmed = 0, Amount _reclaiming = 0)
        {
            Amount taxBase;
            Amount confirmed;
            Amount notConfirmed;
            Amount reclaiming;

            if (locValuesMap.exists(_operationCode))
            {
                [taxBase, confirmed, notConfirmed, reclaiming] = locValuesMap.lookup(_operationCode);
            }

            taxBase             += _taxBase;
            confirmed           += _confirmed;
            notConfirmed        += _notConfirmed;
            reclaiming          += _reclaiming;

            locValuesMap.insert(_operationCode, [taxBase, confirmed, notConfirmed, reclaiming]);
        }

        void roundValues()
        {
            Amount          taxBase;
            Amount          confirmed;
            Amount          notConfirmed;
            Amount          reclaiming;
            MapEnumerator   me = locValuesMap.getEnumerator();

            while (me.moveNext())
            {
                [taxBase, confirmed, notConfirmed, reclaiming] = me.currentValue();

                taxBase             = decround(taxBase, 0);
                confirmed           = decround(confirmed, 0);
                notConfirmed        = decround(notConfirmed, 0);
                reclaiming          = decround(reclaiming, 0);

                switch(me.currentKey())
                {
                    case OperationCode1010447 :
                        taxBase1010447      = taxBase;
                        reclaiming1010447   = reclaiming;
                        confirmed           = 0;
                        notConfirmed        = 0;
                        break;
                    case OperationCode1010448 :
                        corrTaxBasePlus     = 0;
                        corrTaxBaseMinus    = 0;
                        taxBase             = 0;
                        reclaiming          = 0;
                        confirmed           = 0;
                        notConfirmed        = 0;
                        break;
                    default:
                        if (valuesMap.elements() < OperationCodesMaxCount)
                        {
                            valuesMap.insert(me.currentKey(), [taxBase, confirmed, notConfirmed, reclaiming]);
                        }
                        break;
                }

                decrease += confirmed + notConfirmed - reclaiming;

                if (!hasData && (taxBase || confirmed || notConfirmed || reclaiming || corrTaxBasePlus || corrTaxBaseMinus))
                {
                    hasData = true;
                }
            }
        }

        locValuesMap = new Map(Types::String, Types::Container);

        while select factureTrans
            join ProcessingType from factureJour
            where factureTrans.Module           == FactureModule_RU::Cust                                   &&
                  factureTrans.FactureLineType  == FactureLineType_RU::InvoiceLine                          &&
                  factureTrans.FactureId        == factureJour.FactureId                                    &&
                  factureTrans.Module           == factureJour.Module                                       &&
                  (factureJour.ProcessingType   == SalesBookFactureProcessingType_RU::VATZero               ||
                   factureJour.ProcessingType   == SalesBookFactureProcessingType_RU::VATZeroCorrection     ||
                   factureJour.ProcessingType   == SalesBookFactureProcessingType_RU::OverdueConfirmation)  &&
                   factureJour.ConfirmationDate >= periodStart                                              &&
                   factureJour.ConfirmationDate <= periodEnd
        {
            operationCode = this.operationCode(factureTrans.TaxCode);
            if (operationCode)
            {
                if (factureJour.ProcessingType == SalesBookFactureProcessingType_RU::VATZeroCorrection ||
                    factureJour.ProcessingType == SalesBookFactureProcessingType_RU::OverdueConfirmation)
                {
                    correctFactureTaxAmount = this.correctFactureTaxAmount(factureTrans, periodStart);
                }

                restoredVATAmount = this.restoredVATAmount(factureTrans);

                addValue(operationCode,
                         factureTrans.LineAmountMST,
                         restoredVATAmount,
                         correctFactureTaxAmount,
                         factureJour.ProcessingType == SalesBookFactureProcessingType_RU::OverdueConfirmation ? restoredVATAmount : 0);
            }
        }

        roundValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorksheet</Name>
				<Source><![CDATA[
    public str defaultWorksheet(int _tableId)
    {
        return Worksheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTables</Name>
				<Source><![CDATA[
    public void initTables()
    {
        const str TableName1	= 'Раздел 4 таблица';
        const str TableName2	= 'Раздел 4 строка 010, коды операций 1010447, 1010448';
        const str Field1Req	    = 'КодОпер';
        const str Field1Name	= 'Код операции';
        const str Field1Cell	= 'A12:L12';
        const str Field2Req	    = 'НалБаза';
        const str Field2Name	= 'Налоговая база';
        const str Field2Cell	= 'A13:AD13';
        const str Field3Req	    = 'НалВычПод';
        const str Field3Name	= 'Налоговые вычеты по операциям, обоснованность применения  налоговой  ставки 0 процентов  по  которым документально  подтверждена';
        const str Field3Cell	= 'AE13:BH13';
        const str Field4Req	    = 'НалНеПод';
        const str Field4Name	= 'Сумма налога, ранее исчисленная  по  операциям, обоснованность  применения налоговой  ставки 0 процентов по которым ранее не была документал';
        const str Field4Cell	= 'BI13:CL13';
        const str Field5Req	    = 'НалВосст';
        const str Field5Name	= 'Сумма налога, ранее принятая к вычету и подлежащая восстановлению';
        const str Field5Cell	= 'CM13:DP13';
        const str Field6Req	    = 'СумУменИтог';
        const str Field6Name	= 'Итого, сумма налога, исчисленная к уменьшению  по данному разделу';
        const str Field6Cell	= 'BI47:CL47';
        const str Field7Req	    = 'КодОпер1010447';
        const str Field7Name	= 'Код операции 1010447';
        const str Field7Cell	= 'A42:L42';
        const str Field8Req	    = 'НалБаза1010447';
        const str Field8Name	= 'Налоговая база 1010447';
        const str Field8Cell	= 'A43:AD43';
        const str Field9Req	    = 'НалВосст1010447';
        const str Field9Name	= 'Сумма налога, ранее принятая к вычету и подлежащая восстановлению 1010447';
        const str Field9Cell	= 'CM43:DP43';
        const str Field10Req	= 'КодОпер1010448';
        const str Field10Name	= 'Код операции 1010448';
        const str Field10Cell	= 'A44:L44';
        const str Field11Req	= 'КорНалБазаУв';
        const str Field11Name	= 'Корректировка налоговой базы при увеличении цены';
        const str Field11Cell	= 'AE45:BH45';
        const str Field12Req	= 'КорНалБазаУм';
        const str Field12Name	= 'Корректировка налоговой базы при уменьшении цены';
        const str Field12Cell	= 'BI45:CL45';


        super();

        this.addTable(S4Table1Id, TableName1);

        this.addField(S4Table1Id, Field1Id, Field1Req, Field1Name, Field1Cell);
        this.addField(S4Table1Id, Field2Id, Field2Req, Field2Name, Field2Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S4Table1Id, Field3Id, Field3Req, Field3Name, Field3Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S4Table1Id, Field4Id, Field4Req, Field4Name, Field4Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S4Table1Id, Field5Id, Field5Req, Field5Name, Field5Cell, SysAlignment::AlignLeft, 10, Minus);

        this.addTable(S4Table2Id, TableName2);
        this.addField(S4Table2Id, Field6Id, Field6Req, Field6Name, Field6Cell, SysAlignment::AlignLeft, 10, Minus);

        this.addField(S4Table2Id, Field7Id, Field7Req, Field7Name, Field7Cell);
        this.addField(S4Table2Id, Field8Id, Field8Req, Field8Name, Field8Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S4Table2Id, Field9Id, Field9Req, Field9Name, Field9Cell, SysAlignment::AlignLeft, 10, Minus);
        
        this.addField(S4Table2Id, Field10Id, Field10Req, Field10Name, Field10Cell);
        this.addField(S4Table2Id, Field11Id, Field11Req, Field12Name, Field11Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S4Table2Id, Field12Id, Field12Req, Field12Name, Field12Cell, SysAlignment::AlignLeft, 10, Minus);

    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next(int _tableId)
    {
        if (hasData)
        {
            switch (_tableId)
            {
                case S4Table1Id:
                    return this.nextTable1();
                case S4Table2Id:
                    return this.nextTable2();
            }
        }

        this.checkDynamicWorkdsheetInitialized(_tableId);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTable1</Name>
				<Source><![CDATA[
    private boolean nextTable1()
    {
        Amount taxBase;
        Amount confirmed;
        Amount notConfirmed;
        Amount reclaiming;

        if (vatDeclaration && valuesKeyEnumerator && valuesKeyEnumerator.moveNext() && valuesMap.exists(valuesKeyEnumerator.current()))
        {
            this.setInitialized(S4Table1Id);

            lineNum++;
            [taxBase, confirmed, notConfirmed, reclaiming] = valuesMap.lookup(valuesKeyEnumerator.current());

            vatDeclaration.setValue(Field1Id,  S4Table1Id, valuesKeyEnumerator.current());
            vatDeclaration.setValue(Field2Id,  S4Table1Id, taxBase);
            vatDeclaration.setValue(Field3Id,  S4Table1Id, confirmed);
            vatDeclaration.setValue(Field4Id,  S4Table1Id, notConfirmed);
            vatDeclaration.setValue(Field5Id,  S4Table1Id, reclaiming);

            if (!this.initialized(S4Table2Id))
            {
                this.nextTable2();
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTable2</Name>
				<Source><![CDATA[
    private boolean nextTable2()
    {
        if (vatDeclaration && !this.initialized(S4Table2Id))
        {
            vatDeclaration.setValue(Field6Id, S4Table2Id, decrease);

            vatDeclaration.setValue(Field7Id, S4Table2Id, OperationCode1010447);
            vatDeclaration.setValue(Field8Id, S4Table2Id, taxBase1010447);
            vatDeclaration.setValue(Field9Id, S4Table2Id, reclaiming1010447);
            
            vatDeclaration.setValue(Field10Id, S4Table2Id, OperationCode1010448);
            vatDeclaration.setValue(Field11Id, S4Table2Id, corrTaxBasePlus);
            vatDeclaration.setValue(Field12Id, S4Table2Id, corrTaxBaseMinus);

            this.setInitialized(S4Table2Id);

            if (!this.initialized(S4Table1Id))
            {
                this.nextTable1();
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageCount</Name>
				<Source><![CDATA[
    public int pageCount(int _tableId)
    {
        return _tableId == S4Table1Id && !worksheetDeleted ? 1 : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset(int _tableId)
    {
        super(S4Table1Id);
        super(S4Table2Id);

        if (!worksheetDeleted)
        {
            valuesMap = new Map(Types::String, Types::Container);

            decrease            = 0;
            taxBase1010447      = 0;
            reclaiming1010447   = 0;
            corrTaxBasePlus     = 0;
            corrTaxBaseMinus    = 0;

            hasData     = false;

            this.collectValues();

            valuesKeyEnumerator = valuesMap.keySet().getEnumerator();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCellCode</Name>
				<Source><![CDATA[
    public void updateCellCode(int _fieldId, int _tableId)
    {
        str cell;
        int cellRow;
        str cellName;
        str aWorksheet;

        if (_tableId == S4Table1Id && lineNum > 1 && evaluator && evaluator.allowUpdateKeyCode())
        {
            [aWorksheet, cell] = str2con_RU(evaluator.keyCode(), Exclamation);

            if (!cell)
            {
                cell = aWorksheet;
                aWorksheet = '';
            }

            if (cell)
            {
                [cellName, cellRow] = ComExcelDocument_RU::cell2ColNameRow(cell, false);
                cell                = ComExcelDocument_RU::changeCellRows(cell, cellRow + (lineNum - 1) * 2);

                if (aWorksheet)
                {
                    cell = aWorksheet + Exclamation + cell;
                }

                evaluator.updateKeyCode(cell);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S4_W construct()
    {
        return new LedgerRRGEDatasourceVATDecl501S4_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVATDeclaration</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S4_W newFromVATDeclaration(LedgerRRGEDatasourceVATDeclaration_W _vatDeclaration)
    {
        LedgerRRGEDatasourceVATDecl501S4_W section4 = LedgerRRGEDatasourceVATDecl501S4_W::construct();

        section4.parmVATDeclaration(_vatDeclaration);

        return section4;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>