<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqMemoryCacheCurrentSessionScope</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqMemoryCacheCurrentSessionScope</c> class allows to manage cache items of similar nature
/// within a single session.
/// </summary>
/// <remarks>
/// Note! <c>ReqMemoryCacheCurrentSessionScope</c> is a disposable class and must always be instantiated
/// in a <c>using</c> block. Failing to follow this rule may result in leaks of resources.
/// All cached items from the scope will be removed from the cache after the scope has been disposed.
/// No new items can be added to the cache within the scope that has been disposed.
/// </remarks>
final class ReqMemoryCacheCurrentSessionScope implements System.IDisposable
{
    private str scopePrefix;
    private System.Collections.ArrayList trackedKeys;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        scopePrefix = System.Guid::NewGuid().ToString() + '#';
        trackedKeys = new System.Collections.ArrayList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scopeKeyToGlobalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a cache item key which is unique within the current scope to a key which is unique globally in <c>ReqMemoryCache</c>.
    /// </summary>
    /// <param name = "_scopeKey">The cache item key which is unique within the current scope.</param>
    /// <returns>A cache item key which is unique globally in the memory cache</returns>
    [Hookable(false)]
    internal str scopeKeyToGlobalKey(str _scopeKey)
    {
        return scopePrefix + _scopeKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackGlobalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tracks the specified cache item key within the current scope. 
    /// All tracked cache items can later be removed from the cache.
    /// </summary>
    /// <param name = "_globalCacheKey">The key of the cached item in <c>ReqMemoryCache</c>.</param>
    [Hookable(false)]
    internal void trackGlobalKey(str _globalCacheKey)
    {
        trackedKeys.Add(_globalCacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisposed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the scope has been disposed. 
    /// </summary>
    /// <returns>true if the scope is disposed; otherwise, false.</returns>
    [Hookable(false)]
    public boolean isDisposed()
    {
        return trackedKeys == null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void Dispose()
    {
        System.Collections.IEnumerator enumerator = trackedKeys.GetEnumerator();

        while (enumerator.MoveNext())
        {
            ReqMemoryCache::removeCrossSession(enumerator.Current);
        }

        trackedKeys = null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>