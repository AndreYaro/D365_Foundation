<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesShippingLabelController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesShippingLabelController</c> class starts the sales shipping label report.
/// </summary>
class SalesShippingLabelController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the report query and parameters based on caller settings.
    /// </summary>
    protected void prePromptModifyContract()
    {
        SalesShippingStat               salesShippingStat;
        RecordSortedList                journalList;

        boolean                         useJournalList;
        container                       cont;
        int                             counter = 0;

        SalesShippingLabelContract contract = this.parmReportContract().parmRdpContract() as SalesShippingLabelContract;

        boolean copy = this.parmArgs().parmEnum();
        this.parmDialogCaption("@SYS54104");

        if (classIdGet(this.parmArgs().caller()) == classNum(SalesInvoiceJournalPrint))
        {
            SalesInvoiceJournalPrint salesInvoiceJournalPrint = this.parmArgs().caller() as SalesInvoiceJournalPrint;
            this.parmReportContract().parmPrintSettings(new SRSPrintDestinationSettings(salesInvoiceJournalPrint.parmPrinterSettingsShippingLabel()));
        }
        else if (classIdGet(this.parmArgs().caller()) == classNum(SalesPackingSlipJournalPrint))
        {
            SalesPackingSlipJournalPrint salesPackingSlipJournalPrint = this.parmArgs().caller() as SalesPackingSlipJournalPrint;
            this.parmReportContract().parmPrintSettings(new SRSPrintDestinationSettings(salesPackingSlipJournalPrint.parmPrinterSettingsShippingLabel()));
        }

        if (this.parmArgs().record())
        {
            useJournalList      = false;
            journalList         = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            useJournalList      = true;
            journalList         = this.parmArgs().object();

            if (!journalList)
            {
                checkFailed("@SYS26348");
                return;
            }
        }

        while (journalList.next(salesShippingStat))
        {
            if (!salesShippingStat)
            {
                checkFailed("@SYS26348");
                return;
            }
            else
            {
                counter++;
                cont += [counter, int642str(salesShippingStat.RecId)];
            }
        }

        contract.parmSalesShippingStatRecIds(Global::xmlString(cont, Types::Container));
        contract.parmMultipleRecords(useJournalList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>presentDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Hides the dialog box, depending on the caller.
    /// </summary>
    protected void presentDialog()
    {
        Args    localArgs = this.parmArgs();
        boolean presentDialog = true;

        if ((classIdGet(localArgs.caller()) == classNum(SalesPackingSlipJournalPrint))   ||
            (classIdGet(localArgs.caller()) == classNum(SalesInvoiceJournalPrint)))
        {
            presentDialog = false;
        }

        this.parmShowDialog(presentDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        SalesShippingLabelController    controller = new SalesShippingLabelController();

        controller.parmReportName(ssrsReportStr(SalesShippingLabel, Report));
        controller.parmArgs(_args);
        controller.presentDialog();
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
