<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormletterParmDataPurchOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchFormletterParmDataPurchOrder extends PurchFormletterParmData
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowReArrange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the rearrange function is allowed for an order.
    /// </summary>
    /// <param name="_parmTable">
    ///    A <c>PurchParmTable</c> record that specifies the order.
    /// </param>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    protected boolean allowReArrange(VendDocumentTableMap _parmTable)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAutomaticTotalDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs automatic end discount calculation.
    /// </summary>
    /// <param name="_purchTable">
    ///    A <c>PurchTable</c> buffer for which to perform the calculation.
    /// </param>
    /// <remarks>
    ///    If order changes require a change request the calculation is not performed.
    /// </remarks>
    protected void calcAutomaticTotalDiscount(PurchTable _purchTable)
    {
        if (!_purchTable.ChangeRequestRequired)
        {
            super(_purchTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>AccountingDate</c> field.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record to be checked.
    /// </param>
    /// <returns>
    /// true if the <c>AccountingDate</c> value is valid; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Warning">
    /// The <c>AccountingDate</c> field value is empty.
    /// </exception>
    protected boolean checkTransDate(PurchTable _purchTable)
    {
        if (_purchTable.isAccountingDateValidationRequired())
        {
            if (!_purchTable.AccountingDate)
            {
               throw warning("@SYS127949");
            }
        }

        return PurchTable::checkLedgerPeriod(_purchTable.PurchId,_purchTable.AccountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesGetSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the line record from the <c>chooseLines</c> query.
    /// </summary>
    /// <returns>
    ///    Always returns null.
    /// </returns>
    protected Common chooseLinesGetSourceLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupChooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Re-enables the source table in query.
    /// </summary>
    /// <remarks>
    ///    No cleanup is needed for the purchase order confirmation that are not queried.
    /// </remarks>
    protected void cleanupChooseLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSpecQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the default value for the <c>SpecQty</c> parameter.
    /// </summary>
    /// <returns>
    ///    A <c>PurchUpdate::All</c> enumeration value.
    /// </returns>
    protected PurchUpdate defaultSpecQty()
    {
        return PurchUpdate::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSumBy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the default value for the <c>SumBy</c> parameter.
    /// </summary>
    /// <returns>
    ///    An <c>AccountOrder::None</c> enumeration value.
    /// </returns>
    protected AccountOrder  defaultSumBy()
    {
        return AccountOrder::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalBePosted(Common  _purchTable)
    {
        PurchTable                      localPurchTable = _purchTable as PurchTable;
        boolean                         ok;

        ok = super(_purchTable);

        if (!this.checkTransDate(localPurchTable))
        {
            //Check the selected Puchase order and throw warning if Purchase order has
            //blank transaction date. Warning is needed to be thrown to cancel the transacation
            //and to fail the selection set if any of the Purchase order is found to have blank
            //transacation date.
            ok = false;
        }

        if (! localPurchTable.mayPurchaseOrderBeUpdated())
        {
            ok = false;
        }

        if (ok 
            && PurchOrderConfirmCheckPurchLineExistFlight::instance().isEnabled()
            && !this.existPurchLine(localPurchTable.PurchId))
        {
            ok = false;
        }

        // Check purchase policy spending threshold before confirming PO
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && ok)
        {
            ok = PurchSpendingThresholdValidation_PSN::checkSpendThresholdPolicyValidation(localPurchTable);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPurchLine</Name>
				<Source><![CDATA[
    private boolean existPurchLine(PurchId _purchId)
    {
        return _purchId 
            && (select firstonly RecId from PurchLine
                    where PurchLine.PurchId == _purchId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalTransBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a source line can be posted.
    /// </summary>
    /// <param name="_sourceLineTable">
    ///    A line record to check for posting.
    /// </param>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    protected boolean mayJournalTransBePosted(Common _sourceLineTable)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecQty</Name>
				<Source><![CDATA[
    PurchUpdate  parmSpecQty(PurchUpdate  _specQty = initialSpecQty)
    {
        // setting specQty on confirmation is not allowed. It has to be the default, which is All.
        initialSpecQtyIsSet = false;
        return initialSpecQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableMapKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a key to use in the <c>parmTableMap</c> map for a record.
    /// </summary>
    /// <param name="_source">
    ///    The record for which to find a key.
    /// </param>
    /// <returns>
    ///    The key to use in the <c>parmTableMap</c> map.
    /// </returns>
    protected str parmTableMapKey(Common _source)
    {
        str         key;
        PurchTable  localPurchTable;

        switch (_source.TableId)
        {
            case tablenum(PurchTable) :
                localPurchTable = _source as PurchTable;
                key = this.addToKey(key, localPurchTable.PurchId);
                break;

            default :
                key = super(_source);
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchStatusRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the purchase status range to use to select the purchase orders to be confirmed.
    /// </summary>
    /// <returns>
    ///    The purchase status range to use to select the purchase orders to be confirmed.
    /// </returns>
    protected str purchStatusRange()
    {
        return queryRange(PurchStatus::Backorder,PurchStatus::Received);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>chooseLines</c> query with line conditions and sort fields.
    /// </summary>
    /// <remarks>
    ///    This method is for the purchase order confirmation lines that are not queried.
    /// </remarks>
    protected void updateQueryBuildLines()
    {
        chooseLines.query().dataSourceTable(tablenum(PurchLine)).enabled(false);
        chooseLines.query().dataSourceTable(tablenum(InventDim)).enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelectionQuery</Name>
				<Source><![CDATA[
    protected SysQueryRun lateSelectionQuery()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>expectParmLinesCreated</Name>
				<Source><![CDATA[
    protected boolean expectParmLinesCreated()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>