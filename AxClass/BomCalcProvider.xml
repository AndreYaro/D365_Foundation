<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BOMCalcProvider</c> class is a provider for building the detailed structure for single level BOM calculations.
/// </summary>
public class BomCalcProvider
{
    RecordSortedList        bomCalcTransDetailList;

    PriceCalcId             priceCalcId;
    BOMCalcDetail           bomCalcDetail;
    BOMCalcQty              bomCalcDetailQty;
    UserConnection          userConnection;
    CreatedTransactionId    transactionId;

    LineNum                 lineNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up data in the <c>BOMCalcTransDetail</c> table.
    /// </summary>
    public void cleanUp()
    {
        BOMCalcProvider::cleanUpByTransactionId(transactionId, userConnection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMCalcTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BOMCalcTable</c> record for a BOM calculation.
    /// </summary>
    /// <param name="_priceCalcId">
    /// The ID of the price calculation.
    /// </param>
    /// <returns>
    /// A <c>BOMCalcTable</c> record.
    /// </returns>
    protected BOMCalcTable getBOMCalcTable(
        PriceCalcId     _priceCalcId)
    {
        BOMCalcTable bomCalcTable;

        select firstonly
                    CostCalculationMethod,
                    RecId from bomCalcTable
            where bomCalcTable.PriceCalcId == _priceCalcId;

        return bomCalcTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevelZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets level zero for a BOM calculation.
    /// </summary>
    /// <param name="_priceCalcId">
    /// The ID of the price calculation.
    /// </param>
    /// <returns>
    /// A <c>BOMCalcTrans</c> record for level zero.
    /// </returns>
    protected BOMCalcTrans getLevelZero(
        PriceCalcId     _priceCalcId)
    {
        BOMCalcTrans bomCalcTrans;

        select firstonly
                    ConsistOfPrice,
                    Qty,
                    ConsumptionVariable,
                    ConsumptionConstant,
                    CostPrice,
                    CostPriceQty,
                    CostMarkup,
                    CostMarkupQty,
                    SalesPriceQty,
                    Resource,
                    RecId from bomCalcTrans
            where bomCalcTrans.PriceCalcId == _priceCalcId
                && bomCalcTrans.Level == 0;

        return bomCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantityFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the proportion used for quantity adjustment.
    /// </summary>
    /// <param name="_quantity">
    /// The quantity for which the factor is calculated.
    /// </param>
    /// <param name="_childQuantity">
    /// The child quantity for which the factor is calculated.
    /// </param>
    /// <param name="_parentFactor">
    /// A factor that should be included in the calculation.
    /// </param>
    /// <returns>
    /// The proportion used for quantity adjustment.
    /// </returns>
    private BOMCalcDetailFactor getQuantityFactor(
        InventQty           _quantity,
        InventQty           _childQuantity,
        BOMCalcDetailFactor _parentFactor)
    {
        BOMCalcDetailFactor factor;

        if (_childQuantity)
        {
            factor = (_quantity / _childQuantity) * _parentFactor;
        }
        else
        {
            factor = 1.0;
        }

        return factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BOMCalcProvider</c> class.
    /// </summary>
    /// <param name="_priceCalcId">
    /// The <c>PriceCalcId</c> identifying a BOM calculation.
    /// </param>
    /// <param name="_bomCalcDetail">
    /// A Boolean value that indicates whether to include calculation detail from consumed products.
    /// </param>
    /// <param name="_userConnection">
    /// The user connection used when building the BOM calculation detail.
    /// </param>
    protected void initialize(
        PriceCalcId     _priceCalcId,
        BOMCalcDetail   _bomCalcDetail,
        UserConnection  _userConnection)
    {
        priceCalcId = _priceCalcId;
        bomCalcDetail = _bomCalcDetail;
        userConnection = _userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>BOMCalcTransDetail</c> record.
    /// </summary>
    /// <param name="_bomCalcTrans">
    /// A <c>BOMCalcTrans</c> record for which the detail record should be initialized.
    /// </param>
    /// <param name="_costCalculationMethod">
    /// A <c>BOMCostCalculationMethod</c> type for which the detail record should be initialized.
    /// </param>
    /// <param name="_consumptionFactor">
    /// A factor that indicates the consumption differences between the parent and child calculations; optional.
    /// </param>
    /// <param name="_level">
    /// The current BOM level; optional.
    /// </param>
    /// <returns>
    /// A <c>BOMCalcTransDetail</c> record.
    /// </returns>
    protected BOMCalcTransDetail initializeDetail(
        BOMCalcTrans                _bomCalcTrans,
        BOMCostCalculationMethod    _costCalculationMethod,
        BOMCalcDetailFactor         _consumptionFactor = 1,
        BOMLevel                    _level = 0)
    {
        BOMCalcTransDetail  bomCalcTransDetail;

        lineNum++;

        bomCalcTransDetail.initFromBOMCalcTrans(_bomCalcTrans);
        bomCalcTransDetail.Level = _level;
        bomCalcTransDetail.LineNum = lineNum;
        bomCalcTransDetail.PriceCalcId = priceCalcId;
        bomCalcTransDetail.ConsumptionFactor = _consumptionFactor;
        bomCalcTransDetail.Qty = bomCalcDetailQty;
        bomCalcTransDetail.CostCalculationMethod = _costCalculationMethod;

        return bomCalcTransDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>BOMCalcTransDetail</c> record into a record sorted list.
    /// </summary>
    /// <param name="_bomCalcTransDetail">
    /// The <c>BOMCalcTransDetail</c> record that should be inserted.
    /// </param>
    protected void insertDetail(BOMCalcTransDetail  _bomCalcTransDetail)
    {
        bomCalcTransDetailList.ins(_bomCalcTransDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        bomCalcTransDetailList = new RecordSortedList(tableNum(BOMCalcTransDetail));
        bomCalcTransDetailList.sortOrder(fieldNum(BOMCalcTransDetail, PriceCalcId), fieldNum(BOMCalcTransDetail, LineNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionId</Name>
				<Source><![CDATA[
        public CreatedTransactionId parmTransactionId()
    {
        return transactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>InventItemPrice</c> or <c>InventItemPriceSim</c> tables.
    /// </summary>
    /// <param  name='_priceCalcId'>
    /// The <c>PriceCalcId</c> identifying the price.
    /// </param>
    /// <returns>
    /// true if the record was found; otherwise, false.
    /// </returns>
    private boolean priceExist(PriceCalcId _priceCalcId)
    {
        InventItemPrices    inventItemPrices;

        select firstonly RecId from inventItemPrices
            where inventItemPrices.PriceCalcId == _priceCalcId;

        return inventItemPrices.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all nested BOM calculations used for a single level BOM calculation.
    /// </summary>
    /// <remarks>
    /// For each of the nested BOM calculations the structure is created and the result gets persisted in the <c>BOMCalcTransDetail</c> table.
    /// </remarks>
    public void process()
    {
        BOMCalcTrans        bomCalcTrans;
        BOMCalcTransDetail  bomCalcTransDetail;
        BOMCalcTable        bomCalcTable;

        if (transactionId)
        {
            this.cleanUp();
        }

        if (userConnection)
        {
            userConnection.ttsbegin();

            bomCalcTransDetail.setConnection(userConnection);

            BOMCalcProvider::cleanUpOldTransactions(userConnection);

            if (bomCalcDetail == NoYes::Yes
                && BOMCalcProvider::canShowDetails(priceCalcId))
            {
                bomCalcTrans = this.getLevelZero(priceCalcId);

                bomCalcDetailQty = bomCalcTrans.Qty;

                if (bomCalcTrans)
                {
                    bomCalcTable = this.getBOMCalcTable(priceCalcId);

                    bomCalcTransDetail = this.initializeDetail(bomCalcTrans, bomCalcTable.CostCalculationMethod);
                    bomCalcTransDetail.setConnection(userConnection);
                    bomCalcTransDetail.insert();

                    transactionId = bomCalcTransDetail.CreatedTransactionId;

                    this.processDetails(priceCalcId, bomCalcTable.CostCalculationMethod);

                    bomCalcTransDetailList.insertDatabase(userConnection);
                }
            }

            userConnection.ttscommit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCostGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes cost group transactions.
    /// </summary>
    /// <param name="_parentBOMCalcTrans">
    /// The record ID of the parent transaction having cost group transactions.
    /// </param>
    /// <param name="_costCalculationMethod">
    /// The calculation method used when calculating the price.
    /// </param>
    /// <param name="_parentConsumptionFactor">
    /// The factor used for consumption conversions.
    /// </param>
    /// <param name="_level">
    /// The level of the current BOM calculation structure.
    /// </param>
    protected void processCostGroup(
        BOMCalcTransRecId           _parentBOMCalcTrans,
        BOMCostCalculationMethod    _costCalculationMethod,
        BOMCalcDetailFactor         _parentConsumptionFactor,
        BOMLevel                    _level)
    {
        BOMCalcTrans        bomCalcTrans;

        while select
                CalcType,
                ConsistOfPrice,
                PriceCalcId,
                Qty,
                ConsumptionVariable,
                ConsumptionConstant,
                CostPriceQty,
                SalesPriceQty,
                Resource,
                RecId from bomCalcTrans
            where bomCalcTrans.ParentBOMCalcTrans == _parentBOMCalcTrans
                && bomCalcTrans.CalcType == ItemCalcType::CostGroup
        {
            this.insertDetail(this.initializeDetail(bomCalcTrans, _costCalculationMethod, _parentConsumptionFactor, _level));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes one BOM calculation used for a single level BOM calculation.
    /// </summary>
    /// <param name="_parentPriceCalcId">
    /// The ID of the parent price calculation.
    /// </param>
    /// <param name="_costCalculationMethod">
    /// The calculation method used when calculating the price.
    /// </param>
    /// <param name="_parentConsumptionFactor">
    /// The factor used for consumption conversions; optional.
    /// </param>
    /// <param name="_level">
    /// The level of the current BOM calculation structure; optional.
    /// </param>
    protected void processDetails(
        PriceCalcId                 _parentPriceCalcId,
        BOMCostCalculationMethod    _costCalculationMethod,
        BOMCalcDetailFactor         _parentConsumptionFactor = 1,
        BOMLevel                    _level = 1)
    {
        BOMCalcTrans                bomCalcTrans;
        BOMCalcTrans                bomCalcTransChild;
        BOMCalcTable                bomCalcTable;
        BOMCalcDetailFactor         consumptionFactorChild;

        while select    CalcType,
                        ConsistOfPrice,
                        PriceCalcId,
                        Qty,
                        ConsumptionVariable,
                        ConsumptionConstant,
                        CostPrice,
                        CostPriceQty,
                        CostMarkup,
                        CostMarkupQty,
                        SalesPriceQty,
                        Resource,
                        RecId from bomCalcTrans
            where bomCalcTrans.PriceCalcId == _parentPriceCalcId
                && bomCalcTrans.Level == 1
                && bomCalcTrans.CalcType != ItemCalcType::CostGroup
        {
            if (bomCalcTrans.ConsistOfPrice)
            {
                bomCalcTable = this.getBOMCalcTable(bomCalcTrans.ConsistOfPrice);

                this.insertDetail(this.initializeDetail(bomCalcTrans, bomCalcTable.CostCalculationMethod, _parentConsumptionFactor, _level));

                if (this.priceExist(bomCalcTrans.ConsistOfPrice)
                    && (bomCalcTable.CostCalculationMethod == BOMCostCalculationMethod::ProductionOrderCost
                        || bomCalcTable.CostCalculationMethod == BOMCostCalculationMethod::ProductionFlowCost))
                {
                    bomCalcTransChild = this.getLevelZero(bomCalcTrans.ConsistOfPrice);

                    consumptionFactorChild = this.getQuantityFactor(bomCalcTrans.consumptionSum(), bomCalcTransChild.qty(), _parentConsumptionFactor);

                    this.processDetails(
                        bomCalcTrans.ConsistOfPrice,
                        bomCalcTable.CostCalculationMethod,
                        consumptionFactorChild,
                        _level+1);
                }
                else
                {
                    this.processCostGroup(bomCalcTrans.RecId, bomCalcTable.CostCalculationMethod, _parentConsumptionFactor, _level+1);
                }
            }
            else
            {
                this.insertDetail(this.initializeDetail(bomCalcTrans, _costCalculationMethod, _parentConsumptionFactor, _level));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether details can be shown for the BOM calculation.
    /// </summary>
    /// <param name="_priceCalcId">
    /// The <c>PriceCalcId</c> identifying a BOM calculation.
    /// </param>
    /// <returns>
    /// true if details can be shown for the BOM calculation; otherwise, false.
    /// </returns>
    public static boolean canShowDetails(
        PriceCalcId         _priceCalcId)
    {
        return BOMCalcTrans::breakdownExist(_priceCalcId)
            && BOMCalcProvider::isStandardCostPrice(_priceCalcId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpByTransactionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up data in the <c>BOMCalcTransDetail</c> table for a given transaction Id.
    /// </summary>
    /// <param name="_transactionId">
    /// The transaction ID for which the cleanup should be performed.
    /// </param>
    /// <param name="_userConnection">
    /// The user connection used when running the cleanup; optional.
    /// </param>
    public static void cleanUpByTransactionId(
        CreatedTransactionId    _transactionId,
        UserConnection          _userConnection = null)
    {
        BOMCalcTransDetail  bomCalcTransDetail;

        if (_userConnection)
        {
            _userConnection.ttsbegin();

            bomCalcTransDetail.setConnection(_userConnection);

            delete_from bomCalcTransDetail where bomCalcTransDetail.CreatedTransactionId == _transactionId;

            _userConnection.ttscommit();
        }
        else
        {
            delete_from bomCalcTransDetail where bomCalcTransDetail.CreatedTransactionId == _transactionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpOldTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up old transactions in the <c>BOMCalcTransDetail</c> table.
    /// </summary>
    /// <param name="_userConnection">
    /// The user connection used when running the cleanup; optional.
    /// </param>
    /// <remarks>
    /// The API ensure that all transactions that are more than 5 days old gets removed in case that the transaction cleanup did not happen.
    /// </remarks>
    private static void cleanUpOldTransactions(
        UserConnection  _userConnection = null)
    {
        BOMCalcTransDetail  bomCalcTransDetail;
        CreatedDateTime     transactionDate = DateTimeUtil::addDays(DateTimeUtil::utcNow(), -5);

        if (_userConnection)
        {
            _userConnection.ttsbegin();

            bomCalcTransDetail.setConnection(_userConnection);

            delete_from bomCalcTransDetail where bomCalcTransDetail.CreatedDateTime <= transactionDate;

            _userConnection.ttscommit();
        }
        else
        {
            delete_from bomCalcTransDetail where bomCalcTransDetail.CreatedDateTime <= transactionDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static BOMCalcProvider construct()
    {
        return new BOMCalcProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates calculation sub-level details.
    /// </summary>
    /// <param name="_priceCalcId">
    /// The <c>PriceCalcId</c> identifying a BOM calculation.
    /// </param>
    /// <param name="_bomCalcDetail">
    /// A <c>NoYes</c> enumeration value that indicates whether to include calculation detail from consumed products.
    /// </param>
    /// <returns>
    /// A <c>CreatedTransactionId</c> value used to filter the details.
    /// </returns>
    public static CreatedTransactionId createDetails(
        PriceCalcId         _priceCalcId,
        BOMCalcDetail       _bomCalcDetail)
    {
        BOMCalcProvider bomCalcProvider;
        UserConnection  userConnection = new UserConnection();
        try
        {
            bomCalcProvider = BOMCalcProvider::newFromParameters(
                _priceCalcId,
                _bomCalcDetail,
                userConnection);

            bomCalcProvider.process();
        }
        finally
        {
            userConnection.finalize();
        }

        return bomCalcProvider.parmTransactionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStandardCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>InventItemPrice</c> or <c>InventItemPriceSim</c> table is a standard cost price.
    /// </summary>
    /// <param  name='_priceCalcId'>
    /// The <c>PriceCalcId</c> identifying the price.
    /// </param>
    /// <returns>
    /// true if the price is a standard cost price; otherwise, false.
    /// </returns>
    private static boolean isStandardCostPrice(PriceCalcId _priceCalcId)
    {
        InventItemPrices    inventItemPrices;
        CostingVersion      costingVersion;

        select firstonly RecId from inventItemPrices
            where inventItemPrices.PriceCalcId == _priceCalcId
            join CostingType from costingVersion
                where costingVersion.VersionId == inventItemPrices.VersionId;

        return inventItemPrices.RecId
                && (costingVersion.CostingType == CostingVersionCostingType::Standard
                    || costingVersion.CostingType == CostingVersionCostingType::Conversion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BOMCalcProvider</c> class.
    /// </summary>
    /// <param name="_priceCalcId">
    /// The <c>PriceCalcId</c> identifying a BOM calculation.
    /// </param>
    /// <param name="_bomCalcDetail">
    /// A boolean value that indicates whether to include calculation detail from consumed products.
    /// </param>
    /// <param name="_userConnection">
    /// The user connection used when building the BOM calculation detail.
    /// </param>
    /// <returns>
    /// An instance of the <c>BOMCalcProvider</c> class.
    /// </returns>
    public static BOMCalcProvider newFromParameters(
        PriceCalcId         _priceCalcId,
        BOMCalcDetail       _bomCalcDetail,
        UserConnection      _userConnection)
    {
        BOMCalcProvider bomCalcProvider = BOMCalcProvider::construct();

        bomCalcProvider.initialize(
            _priceCalcId,
            _bomCalcDetail,
            _userConnection);

        return bomCalcProvider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>