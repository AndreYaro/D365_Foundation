<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttData_ReqExplosion</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttData_ReqExplosion extends GanttData
{
    GanttTable_ReqExplosion ganttTableReqExplosion;
    GanttTable_Link         ganttTableLink;

    Map                     mapDerivedOrigRecIds;

    #define.AdjustLoadingDateDayCount(50)
    #define.AdjustLoadingDateDayThreshold(2)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustLoadingDatesFromTable</Name>
				<Source><![CDATA[
    protected void adjustLoadingDatesFromTable(GanttTmpReqExplosion _ganttTmpReqExplosion)
    {
        TransDate   firstDate;
        TransDate   lastDate;

        if (!_ganttTmpReqExplosion.RecId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        firstDate   = _ganttTmpReqExplosion.SchedFromDate;
        lastDate    = _ganttTmpReqExplosion.SchedToDate;

        if (_ganttTmpReqExplosion.FuturesDate && _ganttTmpReqExplosion.FuturesDate > lastDate)
        {
            lastDate = _ganttTmpReqExplosion.FuturesDate;
        }

        if (_ganttTmpReqExplosion.FuturesDate && _ganttTmpReqExplosion.FuturesDate < firstDate)
        {
            firstDate = _ganttTmpReqExplosion.FuturesDate;
        }

        if (_ganttTmpReqExplosion.ActionDate && _ganttTmpReqExplosion.ActionDate > lastDate)
        {
            lastDate = _ganttTmpReqExplosion.ActionDate;
        }

        if (_ganttTmpReqExplosion.ActionDate && _ganttTmpReqExplosion.ActionDate < firstDate)
        {
            firstDate = _ganttTmpReqExplosion.ActionDate;
        }

        this.adjustLoadingDatesInterval(firstDate, lastDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ganttCalendarType</Name>
				<Source><![CDATA[
    public GanttCalendarType ganttCalendarType()
    {
        return GanttCalendarType::Basic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseLoadingDatesInterval</Name>
				<Source><![CDATA[
    protected void increaseLoadingDatesInterval()
    {
        if (!this.parmGanttClient().parmIsTimeScaleIntervalModified())
        {
            if (!this.parmGanttClient().checkDatesInterval(this.parmLoadingFromDate(),
                                                          this.parmLoadingToDate()))
            {
                this.parmLoadingFromDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                this.parmLoadingToDate(this.parmLoadingFromDate());
            }

            this.adjustLoadingDatesInterval(this.parmLoadingFromDate() - #AdjustLoadingDateDayThreshold,
                                            this.parmLoadingToDate() + #AdjustLoadingDateDayThreshold);

            if (this.parmLoadingToDate() - this.parmLoadingFromDate() < #AdjustLoadingDateDayCount)
            {
                this.adjustLoadingDatesInterval(this.parmLoadingFromDate(),
                                                this.parmLoadingFromDate() + #AdjustLoadingDateDayCount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldCollection</Name>
				<Source><![CDATA[
    protected void initFieldCollection()
    {
        super();

        this.initFieldCollectionReqExplosion();

        this.initFieldCollectionLinks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldCollectionLinks</Name>
				<Source><![CDATA[
    protected void initFieldCollectionLinks()
    {
        ganttTableLink.initDefaultFieldCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldCollectionReqExplosion</Name>
				<Source><![CDATA[
    protected void initFieldCollectionReqExplosion()
    {
        List    listFields;
        Set     setExcludeFieldIds = new Set(Types::Integer);
        setExcludeFieldIds.add(fieldnum(GanttTmpReqExplosion, RefType));

        listFields = GanttTableFieldCollection::listDefaultFields(ganttTableReqExplosion.tableId(), setExcludeFieldIds);

        ganttTableReqExplosion.fieldCollection().createFromList(listFields);

        // field Marked
        ganttTableReqExplosion.fieldCollection().findFieldName(fieldstr(GanttTmpReqExplosion, Marked),
                                                               true,
                                                               tablestr(GanttTmpReqExplosion)).parmEnum2Integer(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPreLoadingData</Name>
				<Source><![CDATA[
    protected void initPreLoadingData()
    {
        super();

        if (!this.parmGanttClient().parmIsTimeScaleIntervalModified())
        {
            this.resetLoadingDatesInterval();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableCollection</Name>
				<Source><![CDATA[
    protected void initTableCollection()
    {
        this.parmGanttTableCollection().insert(ganttTableReqExplosion);
        this.parmGanttTableCollection().insert(ganttTableLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTables</Name>
				<Source><![CDATA[
    protected void initTables()
    {
        super();

        if (!ganttTableReqExplosion)
        {
            ganttTableReqExplosion = GanttTable_ReqExplosion::newAllowUserModification(false);
        }

        if (!ganttTableLink)
        {
            ganttTableLink = GanttTable_Link::newAllowUserModification(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    public void insertData(ReqTrans _reqTrans,
                           Set      _setDerivedOrigRecIds)
    {
        GanttTmpReqExplosion    localTableReqExplosion;
        // reqTrans data
        ganttTableReqExplosion.cleanTableBuffer();

        ganttTableReqExplosion.initFromReqTrans(_reqTrans);
        ganttTableReqExplosion.initFromGanttColor(this.parmGanttClient().parmGanttColor());

        ganttTableReqExplosion.insert(_reqTrans.RecId);

        this.adjustLoadingDatesFromTable(ganttTableReqExplosion.parmTableBuffer());

        localTableReqExplosion = ganttTableReqExplosion.parmTableBuffer();
        this.addCalendarName(localTableReqExplosion.CalendarId);

        // link data
        if (_setDerivedOrigRecIds && _setDerivedOrigRecIds.elements())
        {
            mapDerivedOrigRecIds.insert(ganttTableReqExplosion.parmTableBuffer().RecId, _setDerivedOrigRecIds.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    protected void loadData()
    {
        super();

        // load requirement transactions
        this.loadDataReqTrans();

        // load links
        this.loadDataLinks();

        // increase loading dates interval if it is too small
        this.increaseLoadingDatesInterval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDataLinks</Name>
				<Source><![CDATA[
    protected void loadDataLinks()
    {
        MapEnumerator           mapEnumerator;

        RecId                   recId;
        RecId                   derivedOrigRecId;

        container               conDerivedOrigRecIds;
        Set                     setDerivedOrigRecIds;
        SetEnumerator           setEnumerator;
        GanttSetup_ReqExplosion localGanttSetup  = this.parmGanttClient().parmGanttSetup() as GanttSetup_ReqExplosion;

        if (!mapDerivedOrigRecIds)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        mapEnumerator = mapDerivedOrigRecIds.getEnumerator();

        while (mapEnumerator && mapEnumerator.moveNext())
        {
            recId                   = mapEnumerator.current();
            conDerivedOrigRecIds    = mapDerivedOrigRecIds.lookup(recId);

            if (conDerivedOrigRecIds != connull())
            {
                setDerivedOrigRecIds = Set::create(conDerivedOrigRecIds);

                if (setDerivedOrigRecIds)
                {
                    setEnumerator = setDerivedOrigRecIds.getEnumerator();

                    while (setEnumerator && setEnumerator.moveNext())
                    {
                        derivedOrigRecId = setEnumerator.current();

                        ganttTableReqExplosion.findOrigRecId(derivedOrigRecId, true);

                        ganttTableLink.cleanTableBuffer();
                        ganttTableLink.setLinkData(ganttTableReqExplosion.parmTableBuffer().RecId,
                                                   recId,
                                                   localGanttSetup.parmShowLinks());
                        ganttTableLink.insert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDataReqTrans</Name>
				<Source><![CDATA[
    protected void loadDataReqTrans()
    {
        GanttClient_ReqExplosion    localGanttClient = this.parmGanttClient() as GanttClient_ReqExplosion;
        ReqTransFormExplosion       reqTransFormExplosion = localGanttClient.parmReqTransFormExplosion();

        MapIterator     mi;

        ReqTrans        tmpReqTrans;

        TransDate       firstDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        TransDate       lastDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        container       childrenContainer;
        Set             setChild;
        SetEnumerator   setEnumerator;

        SetIterator     si;

        void addReqTrans(ReqTrans _tmp)
        {
            container   childContainer;

            Set         setDerivedRecIds = new Set(Types::Int64);
            ReqTrans    tmpReqTransChild;

            if (reqTransFormExplosion.mapDerived().exists(_tmp.RecId))
            {
                childContainer = reqTransFormExplosion.mapDerived().lookup(_tmp.RecId);

                if (childContainer)
                {
                    setChild        = Set::create(childContainer);

                    if (childContainer && setChild && setChild.elements())
                    {
                        setEnumerator   = setChild.getEnumerator();

                        while (setEnumerator && setEnumerator.moveNext())
                        {
                            if (reqTransFormExplosion.mapReqTrans().exists(setEnumerator.current()))
                            {
                                tmpReqTransChild = reqTransFormExplosion.mapReqTrans().lookup(setEnumerator.current());
                            }
                            else
                            {
                                tmpReqTransChild = null;
                            }

                            if (tmpReqTransChild.RecId && reqTransFormExplosion.showRefType(tmpReqTransChild))
                            {
                                setDerivedRecIds.add(tmpReqTransChild.RecId);
                            }
                        }
                    }
                }
            }

            this.insertData(_tmp, setDerivedRecIds);
        }

        if (reqTransFormExplosion == null)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (reqTransFormExplosion.tmpReqExplosionTree().ReqGanttShow == ReqGanttShow::CurrentTreeNode)
        {
            if (reqTransFormExplosion.reqTrans().RecId && reqTransFormExplosion.mapTmpRecId2Db())
            {
                if (reqTransFormExplosion.mapTmpRecId2Db().exists(reqTransFormExplosion.reqTrans().RecId) &&
                    reqTransFormExplosion.mapReqTrans().exists(reqTransFormExplosion.mapTmpRecId2Db().lookup(reqTransFormExplosion.reqTrans().RecId)))
                {
                    tmpReqTrans = reqTransFormExplosion.mapReqTrans().lookup(reqTransFormExplosion.mapTmpRecId2Db().lookup(reqTransFormExplosion.reqTrans().RecId));

                    if (tmpReqTrans.RecId && reqTransFormExplosion.showRefType(tmpReqTrans))
                    {
                        addReqTrans(tmpReqTrans);

                        if (reqTransFormExplosion.mapDerived().exists(tmpReqTrans.RecId))
                        {
                            childrenContainer = reqTransFormExplosion.mapDerived().lookup(tmpReqTrans.RecId);

                            if (childrenContainer)
                            {
                                setChild = Set::create(childrenContainer);
                            }

                            if (childrenContainer && setChild && setChild.elements())
                            {
                                si = new SetIterator(setChild);
                                si.begin();
                                while (si.more())
                                {
                                    if (reqTransFormExplosion.mapReqTrans().exists(si.value()))
                                    {
                                        tmpReqTrans = reqTransFormExplosion.mapReqTrans().lookup(si.value());
                                    }
                                    else
                                    {
                                        tmpReqTrans = null;
                                    }
                                    if (tmpReqTrans.RecId && reqTransFormExplosion.showRefType(tmpReqTrans))
                                    {
                                        addReqTrans(tmpReqTrans);
                                    }

                                    si.next();
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            mi = new MapIterator(reqTransFormExplosion.mapReqTrans());
            mi.begin();
            while (mi.more())
            {
                tmpReqTrans = reqTransFormExplosion.mapReqTrans().lookup(mi.key());

                if (reqTransFormExplosion.showRefType(tmpReqTrans))
                    addReqTrans(tmpReqTrans);

                mi.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        mapDerivedOrigRecIds = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttClient</Name>
				<Source><![CDATA[
    public GanttClient parmGanttClient(GanttClient _ganttClient = ganttClient)
    {
        return super(_ganttClient);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttTableReqExplosion</Name>
				<Source><![CDATA[
    public GanttTable_ReqExplosion parmGanttTableReqExplosion(GanttTable_ReqExplosion _ganttTableReqExplosion = ganttTableReqExplosion)
    {
        ganttTableReqExplosion = _ganttTableReqExplosion;
        return ganttTableReqExplosion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLinkMaps</Name>
				<Source><![CDATA[
    protected void resetLinkMaps()
    {
        mapDerivedOrigRecIds = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLoadingData</Name>
				<Source><![CDATA[
    protected void resetLoadingData()
    {
        super();

        this.resetLinkMaps();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttData_ReqExplosion construct()
    {
        return new GanttData_ReqExplosion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttClient</Name>
				<Source><![CDATA[
    public static GanttData_ReqExplosion newGanttClient(GanttClient_ReqExplosion _ganttClient)
    {
        GanttData_ReqExplosion ganttData = GanttData_ReqExplosion::construct();
        ganttData.parmGanttClient(_ganttClient);

        return ganttData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttTableLink</Name>
				<Source><![CDATA[
    public GanttTable_Link parmGanttTableLink(GanttTable_Link _ganttTableLink = ganttTableLink)
    {
        ganttTableLink = _ganttTableLink;
        return ganttTableLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateColors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the colors on all data.
    /// </summary>
    public void updateColors()
    {
        ganttTableReqExplosion.updateColorOnAll(this.parmGanttClient().parmGanttColor());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>