<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustRoleChangeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>CustRoleChangeHelper</c> class is a helper for the "Role change" feature related to customer hierarchy.
/// </summary>
internal class CustRoleChangeHelper
{ 
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeRolesForCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes roles for customers in customers hierarchy.
    /// </summary>
    /// <param name = "_custHierarchyId">Id for customers hierarchy.</param>
    /// <param name = "_selectedCustomers">List of customers Parties.</param>
    /// <param name = "_role">Role for selected customers.</param>
    /// <returns>List of customers parties that have several request for role change. Throws error if validation fails.</returns>
    public static List<String20> changeRolesForCustomers(CustHierarchyId _custHierarchyId, List _selectedCustomers, CustHierarchyNodeRole _role)
    {
        // Add log entry.
        eventSource.WriteCustHierarchyChangeRoleFunctionalityStarted(_custHierarchyId);

        CustRoleChangeHelper::addNewRequestsForRoleChange(_custHierarchyId, _selectedCustomers, _role);
        List changedCustomers = CustRoleChangeHelper::updateChangeRoleRequestsForSameCustomers(_custHierarchyId);
        CustRoleChangeHelper::updateAllRequestWithSameRole(_custHierarchyId);
        CustRoleChangeHelper::updatePendingRoles(_custHierarchyId);

        // Add log entry.
        eventSource.WriteCustHierarchyChangeRoleFunctionalitySuccessfullyFinished(_custHierarchyId);
        return changedCustomers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePendingRoles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all pending requests for role changing and execute them.
    /// </summary>
    /// <param name = "_custHierarchyId">Id for customers hierarchy.</param>
    public static void updatePendingRoles(CustHierarchyId _custHierarchyId)
    {
        
        CustRoleChangeHelper::setRoleForCustomersInHierarchy(CustHierarchyNodeRole::Admin, _custHierarchyId);
                
        if (CustRoleChangeHelper::validateRoleChangingFromAdminToUser(_custHierarchyId))
        {
            CustRoleChangeHelper::setRoleForCustomersInHierarchy(CustHierarchyNodeRole::User, _custHierarchyId);
        }
        else
        {
            // Add log entry.
            eventSource.WriteCustHierarchyChangeRoleFunctionalitySelectedAllAdmins(_custHierarchyId);

            CustRoleChangeHelper::setStatusForPendingCustHierarchyCustomers(_custHierarchyId, CustRoleChangeStatus::Failure, "Failed validation");
            throw Exception::error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRoleChangingFromAdminToUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that not all admins have been selected for changing role into Customer.
    /// </summary>
    /// <param name = "_custHierarchyId">Id for customers hierarchy.</param>
    /// <return>True if not all admins been selected; otherwise, false.</return>
    public static boolean validateRoleChangingFromAdminToUser(CustHierarchyId _custHierarchyId)
    {
        List admins = CustRoleChangeHelper::getAdminsParties(_custHierarchyId);
        int64 pendingAdminsAmmount = CustRoleChangeHelper::countPendingRoleChanges(_custHierarchyId, CustHierarchyNodeRole::Admin);
        return pendingAdminsAmmount == 0 || admins.elements() > pendingAdminsAmmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdminsParties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all parties of admins for selected customers hierarchy.
    /// </summary>
    /// <param name = "_custHierarchyId">Id for customers hierarchy.</param>
    /// <return>List of parties of admins for customers hierarchy.</return>
    public static List<int64> getAdminsParties(CustHierarchyId _custHierarchyId)
    {
        CustHierarchyNode custHierarchyNode;
        CustHierarchyVersion version = CustHierarchyVersion::getActiveVersion(_custHierarchyId);
        
        List custHierarchyAdmins = new List (Types::Int64);

        while select Party from custHierarchyNode
            where custHierarchyNode.CustHierarchyId == _custHierarchyId
                && custHierarchyNode.VersionAdded > custHierarchyNode.VersionRemoved
                && custHierarchyNode.Role == CustHierarchyNodeRole::Admin
        {
            custHierarchyAdmins.addEnd(custHierarchyNode.Party);
        }
        
        return custHierarchyAdmins;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countPendingRoleChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts ammount of requests for changing role in hierarchy.
    /// </summary>
    /// <param name = "_custHierarchyId">Id for customers hierarchy.</param>
    /// <param name = "_role">Role that need to be count.</param>
    /// <return>Ammount of request for changing to the role for a Hierarchy.</return>
    public static int64 countPendingRoleChanges(CustHierarchyId _custHierarchyId, CustHierarchyNodeRole _role)
    {
        CustRoleChangeRequestTable custRoleChangeRequestTable;

        select count(RecId) from custRoleChangeRequestTable
            where custRoleChangeRequestTable.CustHierarchyId == _custHierarchyId
            && custRoleChangeRequestTable.RoleAtRequest == _role
            && custRoleChangeRequestTable.Status == CustRoleChangeStatus::Pending;
        
        return custRoleChangeRequestTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRoleForCustomersInHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates role for customers in hierarchy.
    /// </summary>
    /// <param name = "_custHierarchyId">Id for customers hierarchy.</param>
    /// <param name = "_role">Selected role to update.</param>
    public static void setRoleForCustomersInHierarchy(CustHierarchyNodeRole _role, CustHierarchyId _custHierarchyId)
    {
        CustRoleChangeRequestTable custRoleChangeRequestTable;
        ttsbegin;

        while select * from custRoleChangeRequestTable
            where custRoleChangeRequestTable.RequestedRole == _role
            && custRoleChangeRequestTable.CustHierarchyId == _custHierarchyId
            && custRoleChangeRequestTable.Status == CustRoleChangeStatus::Pending
        {
            CustHierarchyNode custHierarchyNode;
            int64 updateNodeParty = any2Int64(custRoleChangeRequestTable.Party);
           
            select forupdate firstonly custHierarchyNode
                where custHierarchyNode.CustHierarchyId == _custHierarchyId
                && custHierarchyNode.Party == updateNodeParty;

            if (custHierarchyNode)
            {
                custHierarchyNode.Role = _role;
                custHierarchyNode.update();

                custRoleChangeRequestTable.selectForUpdate(true);
                custRoleChangeRequestTable.Status = CustRoleChangeStatus::Success;
                custRoleChangeRequestTable.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewRequestsForRoleChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates role for customers in hierarchy.
    /// </summary>
    /// <param name = "_custHierarchyId">Id for customers hierarchy.</param>
    /// <param name = "_role">Selected role to update.</param>
    public static void addNewRequestsForRoleChange( CustHierarchyId _custHierarchyId, List _selectedCustomers, CustHierarchyNodeRole _requestedRole)
    {
        CustRoleChangeRequestTable custRoleChangeRequestTable;
        CustHierarchyNode selectedCustHierarchyNode;
        ListEnumerator customersEnumerator = _selectedCustomers.getEnumerator();
        RecordInsertList insertList = new RecordInsertList(custRoleChangeRequestTable.TableId);

        ttsbegin;

        while (customersEnumerator.moveNext())
        {
            select selectedCustHierarchyNode 
                where selectedCustHierarchyNode.CustHierarchyId == _custHierarchyId
                && selectedCustHierarchyNode.Party == customersEnumerator.current();
            
            custRoleChangeRequestTable.Party = any2Str(selectedCustHierarchyNode.Party);
            custRoleChangeRequestTable.CustHierarchyId = _custHierarchyId;
            custRoleChangeRequestTable.RoleAtRequest = selectedCustHierarchyNode.Role;
            custRoleChangeRequestTable.RequestedRole = _requestedRole;
            custRoleChangeRequestTable.Status = CustRoleChangeStatus::Pending;
            insertList.add(custRoleChangeRequestTable);
        }
        insertList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChangeRoleRequestsForSameCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all requests for same customer to "failed" state except latest one.
    /// </summary>
    /// <param name = "_custHierarchyId">Id for customers hierarchy.</param>
    /// <return>List of customers with more then one requset.</return>
    public static List<String20> updateChangeRoleRequestsForSameCustomers(CustHierarchyId _custHierarchyId)
    {
        CustRoleChangeRequestTable custRoleChangeRequestTable;
        CustRoleChangeRequestTable otherCustRoleChangeRequestTable;
        List duplicatedRequestsParty = new List(Types::String);
        ttsbegin;

        while select * from custRoleChangeRequestTable
            where custRoleChangeRequestTable.Status == CustRoleChangeStatus::Pending
            && custRoleChangeRequestTable.CustHierarchyId == _custHierarchyId
                
        {
            boolean first = true;
            while select * from otherCustRoleChangeRequestTable
                order by otherCustRoleChangeRequestTable.CreatedDateTime desc
                where custRoleChangeRequestTable.Party == otherCustRoleChangeRequestTable.Party
                && custRoleChangeRequestTable.CustHierarchyId == _custHierarchyId
                && otherCustRoleChangeRequestTable.Status == CustRoleChangeStatus::Pending
            {
                if (first)
                {
                    first = false;
                    continue;
                }
                otherCustRoleChangeRequestTable.selectForUpdate(true);
                otherCustRoleChangeRequestTable.Status = CustRoleChangeStatus::Invalid;
                otherCustRoleChangeRequestTable.Message = "@CustHierarchy:CustRoleChangeHelperFailedMessage";
                otherCustRoleChangeRequestTable.update();
                ListEnumerator duplicatedRequestsPartyEnumerator = duplicatedRequestsParty.getEnumerator();
                duplicatedRequestsPartyEnumerator.moveNext();
                if (duplicatedRequestsParty.elements() == 0 || 
                    duplicatedRequestsPartyEnumerator.current() != otherCustRoleChangeRequestTable.Party)
                {
                    duplicatedRequestsParty.addStart(otherCustRoleChangeRequestTable.Party);
                }
            }
        }

        ttscommit;

        return duplicatedRequestsParty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllRequestWithSameRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets all requests with same role RoleAtRequest and RequestedRole to succeded.
    /// </summary>
    /// <param name = "_custHierarchyId">Id for custHierarchy.</param>
    public static void updateAllRequestWithSameRole(CustHierarchyId _custHierarchyId)
    {
        CustRoleChangeRequestTable custRoleChangeRequestTable;
        ttsbegin;

        while select * from custRoleChangeRequestTable
            where custRoleChangeRequestTable.RoleAtRequest == custRoleChangeRequestTable.RequestedRole
                && custRoleChangeRequestTable.Status == CustRoleChangeStatus::Pending
                && custRoleChangeRequestTable.CustHierarchyId == _custHierarchyId
        {
            custRoleChangeRequestTable.selectForUpdate(true);
            custRoleChangeRequestTable.Status = CustRoleChangeStatus::Success;
            custRoleChangeRequestTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusForPendingCustHierarchyCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates status for all requests.
    /// </summary>
    /// <param name = "_custHierarchyId">Id for custHierarchy.</param>
    /// <param name = "_status">CustRoleChangeStatus to update to.</param>
    /// <param name = "_message">Message for updating request.</param>
    public static void setStatusForPendingCustHierarchyCustomers(CustHierarchyId _custHierarchyId, CustRoleChangeStatus _status, str _message = '')
    {
        CustRoleChangeRequestTable custRoleChangeRequestTable;
        ttsbegin;

        while select * from custRoleChangeRequestTable
            where custRoleChangeRequestTable.Status == CustRoleChangeStatus::Pending
                && custRoleChangeRequestTable.CustHierarchyId == _custHierarchyId
        {
            custRoleChangeRequestTable.selectForUpdate(true);
            custRoleChangeRequestTable.Status = _status;
            custRoleChangeRequestTable.Message = _message;
            custRoleChangeRequestTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>