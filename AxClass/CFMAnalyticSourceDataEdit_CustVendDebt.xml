<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticSourceDataEdit_CustVendDebt</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CFMAnalyticSourceDataEdit_CustVendDebt extends CFMAnalyticSourceDataEdit
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountType</Name>
				<Source><![CDATA[
    abstract CFMAccountType accountType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTableId</Name>
				<Source><![CDATA[
    abstract protected TableId custVendTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransTableId</Name>
				<Source><![CDATA[
    abstract protected TableId custVendTransTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEditTmpTableFromSource</Name>
				<Source><![CDATA[
    protected boolean initEditTmpTableFromSource(QueryRun _queryRun, CFMJournalProtoTrans _protoTrans)
    {
        CustVendTransOpen transOpen = _queryRun.get(this.transOpenTableId());
        CustVendTable custVendTable = _queryRun.get(this.custVendTableId());
        CustVendTrans custVendTrans = _queryRun.get(this.custVendTransTableId());
        CFMDirPartyTable dirPartyCFM = CFMDirPartyTable::findDirParty(custVendTable.Party);
        CustVendTransOpenData transOpenData = transOpen.transOpenData();

        CFMAnalyticDataEditUncommitted uncommittedValues = CFMAnalyticDataEditUncommitted::find(this.sourceType(), transOpen.RecId);
        PaymMode paymMode = uncommittedValues.RecId != 0 ? uncommittedValues.PaymMode : custVendTrans.PaymMode;

        dataEditTable.clear();
        dataEditTable.initValue();

        dataEditTable.DirPartyRecId = custVendTable.Party;
        dataEditTable.DocumentNum = custVendTrans.Invoice;
        dataEditTable.CashFlowDirection = _protoTrans.cashFlowDirection();
        dataEditTable.AccountType = this.accountType();
        dataEditTable.PaymMode = paymMode;
        dataEditTable.DueDate = transOpen.DueDate;

        if (uncommittedValues)
        {
            dataEditTable.PaymDate = uncommittedValues.DueDate;
            dataEditTable.PaymentAccountNum = uncommittedValues.PaymentAccountNum;
            dataEditTable.PaymentAccountType = uncommittedValues.PaymentAccountType;
            dataEditTable.PaymSpec = uncommittedValues.PaymSpec;
        }
        else
        {
            dataEditTable.PaymDate = transOpen.DueDate;
            dataEditTable.PaymSpec = custVendTrans.PaymSpec;

            CustVendPaymModeTable paymModeTable;

            if (paymMode)
            {
                changeCompany(custVendTrans.company())
                {
                    switch (custVendTrans.TableId)
                    {
                        case tableNum(VendTrans):
                            paymModeTable = VendPaymModeTable::find(paymMode);
                            break;

                        case tableNum(CustTrans):
                            paymModeTable = CustPaymModeTable::find(paymMode);
                            break;
                    }

                    switch (paymModeTable.AccountType)
                    {
                        case LedgerJournalACType::Bank:
                            dataEditTable.PaymentAccountNum = paymModeTable.parmPaymAccount();
                            dataEditTable.PaymentAccountType = CFMPaymentAccountType::Bank;
                            break;

                        case LedgerJournalACType::RCash:
                            dataEditTable.PaymentAccountNum = paymModeTable.parmPaymAccount();
                            dataEditTable.PaymentAccountType = CFMPaymentAccountType::Cash_RU;
                            break;
                    }
                }
            }
        }

        CustVendTransCashDisc custVendCashDisc = transOpenData.findCashDisc(dataEditTable.PaymDate);

        dataEditTable.AmountCur = transOpenData.remainAmountCashDisc(dataEditTable.PaymDate);
        dataEditTable.CashDiscAmount = custVendCashDisc.CashDiscAmount;
        dataEditTable.Priority = dirPartyCFM.PaymentPriority;
        dataEditTable.SourceDataAreaId = custVendTrans.company();
        dataEditTable.PaymentDataAreaId = CFMParameters::getCentralizedPaymentCompanyInfo(dataEditTable.SourceDataAreaId).DataArea;
        dataEditTable.SourceType = this.sourceType();
        dataEditTable.SourceRefRecId = transOpen.RecId;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProtoTransParmContract</Name>
				<Source><![CDATA[
    protected CFMJournalProtoTransParmContract initProtoTransParmContract(QueryRun _queryRun)
    {
        CFMJournalProtoTransParmContractCustVend parmContract = new CFMJournalProtoTransParmContractCustVend();

        Query queryTransOpen = _queryRun.query();
        NoYes aggregatedRecords;

        if (queryTransOpen)
        {
            QueryBuildDataSource qbdsTransOpen = queryTransOpen.dataSourceTable(this.transOpenTableId());
            Counter fieldCountTransOpen = queryTransOpen.groupByFieldCount(qbdsTransOpen);
            aggregatedRecords = fieldCountTransOpen != 0;
        }

        parmContract.parmAggregatedRecords(aggregatedRecords);

        parmContract.parmCustVendTransOpen(_queryRun.get(this.transOpenTableId()));
        parmContract.parmCustVendTrans(_queryRun.get(this.custVendTransTableId()));
        parmContract.parmDirPartyMap(_queryRun.get(this.custVendTableId()));

        return parmContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceDataQuery</Name>
				<Source><![CDATA[
    protected void initSourceDataQuery()
    {
        sourceDataQuery.addDataSource(this.transOpenTableId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilterByOrigDoc</Name>
				<Source><![CDATA[
    protected void setFilterByOrigDoc(Query _sourceDataQuery)
    {
        super(_sourceDataQuery);

        QueryBuildDataSource qbdsCustVendTable = _sourceDataQuery.dataSourceTable(this.custVendTableId());

        if (!qbdsCustVendTable)
        {
            qbdsCustVendTable = _sourceDataQuery.dataSourceTable(this.transOpenTableId()).addDataSource(this.custVendTableId());
            qbdsCustVendTable.relations(true);
        }

        qbdsCustVendTable.joinMode(JoinMode::InnerJoin);
        qbdsCustVendTable.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsCustVendTrans = _sourceDataQuery.dataSourceTable(this.custVendTransTableId());
        qbdsCustVendTrans.joinMode(JoinMode::InnerJoin);
        qbdsCustVendTrans.fetchMode(QueryFetchMode::One2One);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDataDatasource</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource sourceDataDatasource()
    {
        return sourceDataQuery.dataSourceTable(this.transOpenTableId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpenTableId</Name>
				<Source><![CDATA[
    abstract protected TableId transOpenTableId()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>