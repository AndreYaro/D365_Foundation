<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOrderManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>RetailOrderManager</c> is used to Create a sales order and related information from a given Retail transaction table entry
/// </summary>
public class RetailOrderManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ProcessOrderDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used for creating the PickingList for sales order transaction.
    /// </summary>
    /// <param name="salesId">
    /// ID of the SalesTable.SalesId field.
    /// </param>
    /// <param name="inventLocationId">
    /// Filter sales lines by warehouse id. Only lines matching this warehouse id will be updated.
    /// </param>
    /// <param name="documentStatusForUpdate">
    /// The type of update to be performed (picking list, packing slip, etc)
    /// </param>
    /// <returns>
    /// Whether the update has been performed.
    /// </returns>
    public static boolean ProcessOrderDelivery(SalesId salesId, InventLocationId inventLocationId, DocumentStatus documentStatusForUpdate)
    {
        SalesTable      salesTable;
        SalesFormLetter salesFormLetter;
        SalesLine       salesLine;
        InventDim       inventDim;
        boolean         hasQuantityToUpdate = false;
        SalesQty        qtyToUpdate;
        boolean         calculateQtyFromPickingList = false;

        SalesQty getRemainingQuantityForUpdate(SalesLine _salesLine, boolean _calculateQtyFromPickingList)
        {
            SalesQty        _qtyToUpdate;

            switch (documentStatusForUpdate)
            {
                case DocumentStatus::PickingList:
                    // Get remaining quantity less any that are on active picklists or on completed picklists.
                    return  _salesLine.RemainInventPhysical - _salesLine.qtyOnPickNotReserved() - _salesLine.pickedInTotalInventUnit();

                case DocumentStatus::PackingSlip:
                    // Updates available qty to what was on picking lists
                    if (_calculateQtyFromPickingList)
                    {
                        return _salesLine.qtyOnPickNotReserved() + _salesLine.pickedInTotalInventUnit();
                    }
                    // Updates available qty not yet delivered / invoiced.
                    else
                    {
                        RetailSalesLineQuantitiesCalculator qtyCalculator = RetailSalesLineQuantitiesCalculator::construct(_salesLine);
                        return qtyCalculator.inventoryQuantityRemaining();
                    }

                default:
                    return 0;
            }
        }
        
        // Check all sales lines and see if there is a picking list that needs to be included on the packing slip
        while select salesLine
            where SalesLine.SalesId == salesId
            exists join inventDim
                where salesLine.InventDimId == inventDim.InventDimId
                    && inventDim.InventLocationId == inventLocationId
        {
            // If there is a qty from a picking list to add to the packing slip set to true
            if (salesLine.qtyOnPickNotReserved() > 0 || salesLine.pickedInTotalInventUnit() > 0)
            {
                calculateQtyFromPickingList = true;
                break;
            }
        }

        ttsbegin;

        salesTable = SalesTable::find(salesId);

        try
        {
            while select forupdate salesLine
                where salesLine.SalesId == salesId
                exists join inventDim
                    where salesLine.InventDimId == inventDim.InventDimId
                        && inventDim.InventLocationId == inventLocationId
            {
                qtyToUpdate = getRemainingQuantityForUpdate(salesLine, calculateQtyFromPickingList);

                if (abs(qtyToUpdate) != 0)
                {
                    hasQuantityToUpdate = true;

                    salesLine.SalesDeliverNow = salesLine.unitConvertInvent2Sales(qtyToUpdate);
                    salesLine.InventDeliverNow = qtyToUpdate;
                    salesLine.doUpdate();
                }
            }

            // If all remaining quantity is covered by active/completed picklists then do not attempt to pick anything.
            if (hasQuantityToUpdate)
            {
                salesFormLetter = SalesFormLetter::construct(documentStatusForUpdate);
                salesFormLetter.reArrangeNow(false);
                salesFormLetter.update(salesTable, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), SalesUpdate::DeliverNow, AccountOrder::None, false, false, false);
            }

            ttscommit;
        }
        catch(Exception::Error)
        {
            ttsabort;
            return false;
        }

        return hasQuantityToUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>