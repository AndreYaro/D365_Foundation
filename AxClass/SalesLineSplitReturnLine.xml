<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineSplitReturnLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesLineSplitReturnLine</c> class is responsible for splitting the return order line.
/// </summary>
class SalesLineSplitReturnLine
{
    #OCCRetryCount
    #ISOCountryRegionCodes

    TradeInventTransId  origInventTransId;
    SalesQty            newQtyOrdered;
    PdsCWInventQty      newCWQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesLineSplitReturnLine construct()
    {
        return new SalesLineSplitReturnLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesLineSplitReturnLineParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate a new <c>SalesLineSplitReturnLine</c> object for the provided <c>SalesLineSplitReturnLineParameters</c> instance.
    /// </summary>
    /// <param name = "_salesLineSplitReturnLineParameters">An instance of <c>SalesLineSplitReturnLineParameters</c> class representing the parameters used to split the return order line.</param>
    /// <returns>The instantiated instance.</returns>
    public static SalesLineSplitReturnLine newFromSalesLineSplitReturnLineParameters(SalesLineSplitReturnLineParameters _salesLineSplitReturnLineParameters)
    {
        SalesLineSplitReturnLine salesLineSplitReturnLine = SalesLineSplitReturnLine::construct();
        SalesLineSplitReturnLine.initialize(_salesLineSplitReturnLineParameters);

        return SalesLineSplitReturnLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal state of the <c>SalesLineSplitReturnLine</c> from the <c>SalesLineSplitReturnLineParameters</c> instance.
    /// </summary>
    /// <param name = "_salesLineSplitReturnLineParameters">An instance of <c>SalesLineSplitReturnLineParameters</c> class.</param>
    protected void initialize(SalesLineSplitReturnLineParameters _salesLineSplitReturnLineParameters)
    {
        origInventTransId   = _salesLineSplitReturnLineParameters.origInventTransId;
        newQtyOrdered       = _salesLineSplitReturnLineParameters.newQtyOrdered;
        newCWQty            = _salesLineSplitReturnLineParameters.newCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>split</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits a return order line into two return order lines.
    /// </summary>
    /// <returns>
    /// The inventory transaction ID for a new return order line.
    /// </returns>
    /// <remarks>
    /// A split can only be done on a return order line.
    /// </remarks>
    public InventTransId split()
    {
        SalesLine origLine, newLine;

        try
        {
            if (origInventTransId)
            {
                origLine = SalesLine::findInventTransId(origInventTransId);
            }

            if (!origLine)
            {
                //The specified Sales Order line could not be found. The operation is aborted.
                throw error("@SYS115232");
            }

            SalesTable salesTable  = SalesTable::find(origLine.SalesId);

            if (!salesTable)
            {
                //The specified Sales order could not be found. The operation is aborted.
                throw error("@SYS115230");
            }

            if (salesTable.returnItem())
            {
                SalesQty newExpectedRetQty = this.splitLineReturnQuantity(origLine, newQtyOrdered);

                if (this.checkReturnQty(newExpectedRetQty, origLine.ExpectedRetQty))
                {
                    ttsbegin;

                    newLine = this.initAndCreateSplitLine(origLine, newExpectedRetQty, newCWQty);

                    if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
                    {
                        this.kittingSplitReturnLine_delegate(origLine, newLine);
                    }

                    // Clears any system added charges and copy
                    // over line charges from the original sales line
                    // Prorates the fixed charges across the split lines.
                    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
                    {
                        this.adjustMarkupTrans(origLine, newLine);
                    }
                    // <GEEPL>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                    {
                        TaxServiceTariff::insertTaxServiceTariffForNewParent(origLine.TableId, origLine.RecId, newLine.TableId, newLine.RecId);
                    }
                    // </GEEPL>

                    this.updateOriginalLine(origLine, newLine.PdsCWExpectedRetQty, newLine.ExpectedRetQty, newQtyOrdered);

                    // In case of IC direct delivery the new split line on the Original RO was created from the ICPO line and
                    // needs to be updated to match the original line (e.g. prices/discounts and ref to lot being returned)
                    if (salesTable.isInterCompanyOrder())
                    {
                        changecompany(salesTable.InterCompanyCompanyId)
                        {
                            this.updateInterCompanySalesLine(origLine, newLine);
                        }
                    }
                    ttscommit;
                }
                else
                {
                    //Update has been canceled.
                    throw error("@SYS18738");
                }
            }
            else
            {
                //The specified Sales order is not of type Return order. The operation is aborted.
                throw error("@SYS115231" );
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return newLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReturnQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified return quantity is valid.
    /// </summary>
    /// <param name = "_returnQty">The quantity of the returned item.</param>
    /// <param name = "_origQty">The quantity on the original line.</param>
    /// <returns>true if the return quantity is valid; false, otherwise.</returns>
    protected boolean checkReturnQty(SalesQty _returnQty, SalesQty _origQty)
    {
        boolean ret = true;

        if (SalesParameters::find().SalesReturnDeliverRemainderPolicy == SalesReturnDeliverRemainderPolicy::EnforceValidate)
        {
            if (_returnQty >= 0 || abs(_returnQty) >= abs(_origQty))
            {
                SalesLine origLine = SalesLine::findInventTransId(origInventTransId);
                ret = checkFailed(strFmt("@SCM:ReturnOrderLineCannotBeSplitWhenDecimalPrecisionError",
                    origLine.SalesUnit, UnitOfMeasure::findBySymbol(origLine.SalesUnit).DecimalPrecision));
            }
        }
        else
        {
            if (_returnQty > 0)
            {
                // The quantity for Returned item must be less or equal zero.
                ret = checkFailed("@SYS98119");
            }

            if (abs(_returnQty) >= abs(_origQty))
            {
                // Return qty %1 cannot be exceeded.
                ret = checkFailed(strFmt("@SYS116394",_origQty));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLineReturnQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the expected return quantity of the new return order line.
    /// </summary>
    /// <param name = "_newQtyOrdered">The quantity for the new return order line.</param>
    /// <param name = "_origLine">The original return order line.</param>
    /// <returns>The expected return quantity of the new return order line.</returns>
    protected SalesQty splitLineReturnQuantity(SalesLine _origLine, SalesQty _newQtyOrdered)
    {
        //The quantity is in invent unit for a stocked sales line and needs to converted into sales unit.
        if (_origLine.isStocked())
        {
            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_origLine.ItemId,
                _origLine.InventDimId,
                _newQtyOrdered,
                _origLine.inventTable().inventUnitId(),
                _origLine.SalesUnit,
                NoYes::Yes);
        }

        return _newQtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndCreateSplitLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and creates new return order line resulting from the split of a return order line.
    /// </summary>
    /// <param name = "_origLine">The original return order line.</param>
    /// <param name = "_newExpectedRetQty">The expected return quantity of the new return order line.</param>
    /// <param name = "_newCWQty">The catch-weight quantity for the new return order line.</param>
    /// <returns>The new return order line.</returns>
    protected SalesLine initAndCreateSplitLine(SalesLine _origLine, SalesQty _newExpectedRetQty, PdsCWInventQty _newCWQty)
    {
        SalesLine newReturnLine = this.initSplitLine(_origLine, _newExpectedRetQty, _newCWQty);
        this.createSplitLine(newReturnLine, this.instantiateSalesLineCreateLineParameters(_origLine));
        
        return newReturnLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSplitLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new return order line resulting from the split of a return order line.
    /// </summary>
    /// <param name = "_origLine">The original return order line.</param>
    /// <param name = "_newExpectedRetQty">The expected return quantity of the new return order line.</param>
    /// <param name = "_newCWQty">The catch-weight quantity for the new return order line.</param>
    /// <returns>The initialized return order line.</returns>
    protected SalesLine initSplitLine(SalesLine _origLine, SalesQty _newExpectedRetQty, PdsCWInventQty _newCWQty)
    {
        // create a new return line
        SalesLine newLine;
        newLine.initFromSalesTable(_origLine.salesTable());
        newLine.initFromSalesLine(_origLine, true, true);
        newLine.InventTransIdReturn = _origLine.InventTransIdReturn;
        newLine.ReturnStatus = ReturnStatusLine::Awaiting;
        newLine.ExpectedRetQty = _newExpectedRetQty;
        newLine.PdsCWExpectedRetQty = _newCWQty;

        if (PdsGlobal::pdsIsCWItem(newLine.ItemId)
            && SalesParameters::find().SalesReturnDeliverRemainderPolicy == SalesReturnDeliverRemainderPolicy::EnforceValidate)
        {
            newLine.pdsCWExpRetQtyConversion();
        }

        newLine.SalesQty = 0;
        newLine.PdsCWQty = 0;
        newLine.QtyOrdered = 0;
        newLine.LineAmount = newLine.returnLineAmount();
        newLine.RefReturnInvoiceTrans_W = _origLine.RefReturnInvoiceTrans_W;
        newLine.modifiedField(fieldNum(SalesLine, PdsCWExpectedRetQty));
        newLine.modifiedField(fieldNum(SalesLine, ExpectedRetQty));
        
        // Sets the return fields
        MCRSalesLine newMCRSalesLine = newLine.mcrSalesLine();
        newMCRSalesLine.CustInvoiceTransRecId = _origLine.mcrSalesLine().CustInvoiceTransRecId;
        newLine.mcrPackMCRSalesLine(newMCRSalesLine);

        return newLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateSalesLineCreateLineParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the parameters used to create a split return order line form the original return order line.
    /// </summary>
    /// <param name = "_origLine">The original return order line.</param>
    /// <returns>the parameters used to create a new return order line form a split order line.</returns>
    protected SalesLineCreateLineParameters instantiateSalesLineCreateLineParameters(SalesLine _origLine)
    {
        SalesLineCreateLineParameters salesLineCreateLineParameters = SalesLineCreateLineParameters::construct();
        salesLineCreateLineParameters.oldAgreementLineRecId     = _origLine.MatchingAgreementLine;
        salesLineCreateLineParameters.interCompanyInventTransId = _origLine.InterCompanyInventTransId;

        return salesLineCreateLineParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSplitLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new return order line resulting from the split of a return order line.
    /// </summary>
    /// <param name = "_newReturnLine">The initialized return order line to be created.</param>
    /// <param name = "_salesLineCreateLineParameters">Parameters used to create the return order line.</param>
    protected void createSplitLine(SalesLine _newReturnLine, SalesLineCreateLineParameters _salesLineCreateLineParameters)
    {
        _newReturnLine.createLineFromParameters(_salesLineCreateLineParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the <c>MarkupTrans</c> of the split and the original return order lines.
    /// </summary>
    /// <param name = "_origLine">The original return order line.</param>
    /// <param name = "_newLine">The  split return order line.</param>
    protected void adjustMarkupTrans(SalesLine _origLine, SalesLine _newLine)
    {
        SalesLine origLineUpdate = SalesLine::findInventTransId(_origLine.InventTransId, true);
        MarkupTrans markupTransOrig;

        while select forupdate markupTransOrig
            where markupTransOrig.TransTableId == origLineUpdate.TableId
                && markupTransOrig.TransRecId == origLineUpdate.RecId
                && (!SalesReturnSplitAdjustMarkupTransFlight::instance().isEnabled()
                    || !markupTransOrig.MCRBrokerContractFee)
        {
            MarkupTrans markupTransNew = this.initializeNewMarkupTrans(_origLine, _newLine, markupTransOrig);
            
            if (markupTransOrig.MarkupCategory == MarkupCategory::Fixed)
            {
                markupTransOrig.Value -= markupTransNew.Value;
                markupTransOrig.update();
            }

            if (markupTransNew.validateWrite())
            {
                markupTransNew.insert();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeNewMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>MarkupTrans</c> for the split return order line.
    /// </summary>
    /// <param name = "_origLine">The original return order line.</param>
    /// <param name = "_newLine">The  split return order line.</param>
    /// <param name = "_markupTransOrig">The <c>MarkupTrans</c> for the original return order line.</param>
    /// <returns>The initialized Markup Trans record.</returns>
    protected MarkupTrans initializeNewMarkupTrans(SalesLine _origLine, SalesLine _newLine, MarkupTrans _markupTransOrig)
    {
        MarkupTrans markupTransNew;
        markupTransNew.clear();
        markupTransNew.initFromSalesLine(_newLine);
        markupTransNew.initFromMarkupTrans(_markupTransOrig);
        markupTransNew.LineNum = MarkupTrans::lastLineNum(_newLine.TableId, _newLine.RecId) + 1;
        markupTransNew.OrigRecId = _markupTransOrig.TransRecId;
        markupTransNew.OrigTableId = _markupTransOrig.TransTableId;

        if (_markupTransOrig.MarkupCategory == MarkupCategory::Fixed)
        {
            markupTransNew.Value = (_newLine.ExpectedRetQty/_origLine.ExpectedRetQty) * _markupTransOrig.Value;
            markupTransNew.Value = CurrencyExchangeHelper::amount(markupTransNew.Value, markupTransNew.CurrencyCode);
        }
        else
        {
            markupTransNew.Value = _markupTransOrig.Value;
        }

        return markupTransNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the original return order line.
    /// </summary>
    /// <param name = "_origLine">The original return order line.</param>
    /// <param name = "_newPdsCWExpectedRetQty">The expected catch-weight return quantity for the new return order line.</param>
    /// <param name = "_newExpectedRetQty">The expected return quantity for the new return order line.</param>
    /// <param name = "_newQtyOrdered">The quantity for the new return order line.</param>
    protected void updateOriginalLine(SalesLine _origLine, PdsCWExpectedRetQty _newPdsCWExpectedRetQty, ReturnExpectedRetQty _newExpectedRetQty, SalesQty _newQtyOrdered)
    {
        // update an original split line
        SalesLine origLineUpdate = SalesLine::findInventTransId(_origLine.InventTransId, true);

        if (PdsGlobal::pdsIsCWItem(origLineUpdate.ItemId))
        {
            origLineUpdate.PdsCWExpectedRetQty -= _newPdsCWExpectedRetQty;
            origLineUpdate.modifiedField(fieldNum(SalesLine, PdsCWExpectedRetQty));

            origLineUpdate.PdsCWQty = origLineUpdate.PdsCWExpectedRetQty;
            origLineUpdate.PdsCWRemainInventPhysical = origLineUpdate.PdsCWQty;
        }

        origLineUpdate.ExpectedRetQty -= _newExpectedRetQty;
        
        origLineUpdate.modifiedField(fieldNum(SalesLine, ExpectedRetQty));

        origLineUpdate.SalesQty = origLineUpdate.ExpectedRetQty;
        origLineUpdate.RemainSalesPhysical = origLineUpdate.SalesQty;
        
        if (origLineUpdate.isStocked())
        {
            origLineUpdate.QtyOrdered = origLineUpdate.QtyOrdered -_newQtyOrdered;
            origLineUpdate.RemainInventPhysical = origLineUpdate.QtyOrdered;
        }

        origLineUpdate.LineAmount = origLineUpdate.returnLineAmount();
        origLineUpdate.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInterCompanySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the intercompany <c>SalesLine</c> records based on the split of the return order line.
    /// </summary>
    /// <param name = "_origLine">The original return order line.</param>
    /// <param name = "_newLine">The new return order line.</param>
    protected void updateInterCompanySalesLine(SalesLine _origLine, SalesLine _newLine)
    {
        PurchLine icPurchLine = PurchLine::findInventTransId(_origLine.InterCompanyInventTransId);

        if (icPurchLine.isDropShipment())
        {
            SalesLine icOriginalSalesLine = icPurchLine.salesLine();
            PurchLine icNewPurchLine = PurchLine::findInventTransId(_newLine.InterCompanyInventTransId);
            SalesLine icNewOriginalSalesLine = icNewPurchLine.salesLine(true);

            SalesQty icNewExpectedRetQty = icNewOriginalSalesLine.ExpectedRetQty;
            icNewOriginalSalesLine.initFromSalesLine(icOriginalSalesLine, true, true, false);
            icNewOriginalSalesLine.ExpectedRetQty = icNewExpectedRetQty;
            icNewOriginalSalesLine.SkipUpdate = InterCompanySkipUpdate::Internal;
            icNewOriginalSalesLine.LineAmount = icNewOriginalSalesLine.returnLineAmount();
            icNewOriginalSalesLine.InventTransIdReturn = icOriginalSalesLine.InventTransIdReturn;
            // <GEERU>
            icNewOriginalSalesLine.RefReturnInvoiceTrans_W = icOriginalSalesLine.RefReturnInvoiceTrans_W;
            // </GEERU>
            icNewOriginalSalesLine.ReturnStatus = icOriginalSalesLine.ReturnStatus;
            icNewOriginalSalesLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSplitReturnLine_delegate</Name>
				<Source><![CDATA[
    delegate void kittingSplitReturnLine_delegate(SalesLine _origSalesLine, SalesLine _newSalesLine)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>