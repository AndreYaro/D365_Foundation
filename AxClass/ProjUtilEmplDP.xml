<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjUtilEmplDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjUtilEmplDP</c> class contains the declaration of the global variables to use.
/// </summary>
/// <remarks>
///    This class provides methods to fetch the data that is used by the <c>ProjListProjPosting</c> report.
/// </remarks>

[
    SRSReportQueryAttribute(queryStr(ProjUtilEmpl)),
    SRSReportParameterAttribute(classStr(ProjUtilEmplContract))
]
public class ProjUtilEmplDP extends SRSReportDataProviderBase
{
    ProjUtilReportParams    params;
    ResResourceName         resourcename;
    ResourceView            resource;
    RealBase                utilizationHours;
    RealBase                burdenHours;
    RealBase                notIncludedHours;
    RealBase                overtimeHours;
    RealBase                normHours;
    RealBase                finalCalcResult;
    ProjHourUtilizationTmp  projHourUtilizationTmp;
    str                     headerLabel;
    str                     dateLabel;
    int                     hourDec;
    int                     rateDec;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProjHourUtilizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
///    Retrieves the required data from the temporary table.
/// </summary>
/// <returns>
///    The required report data from temporary table.
/// </returns>

[
    SRSReportDataSetAttribute('ProjHourUtilizationTmp')
]
public ProjHourUtilizationTmp getProjHourUtilizationTmp()
{
    select projHourUtilizationTmp;
    return projHourUtilizationTmp;
}

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpProjUtilEmpl</Name>
				<Source><![CDATA[
    /// <summary>
///    Retrieves the required data and inserts it into the temporary table.
/// </summary>

public void insertTmpProjUtilEmpl()
{
    projHourUtilizationTmp.Id                =   resource.ResourceId;
    projHourUtilizationTmp.Name              =   resourceName;
    projHourUtilizationTmp.ConsumedHours     =   utilizationHours + burdenHours + notIncludedHours;
    projHourUtilizationTmp.NotIncludedHours  =   notIncludedHours;
    projHourUtilizationTmp.IncludedHours     =   utilizationHours + burdenHours;
    projHourUtilizationTmp.BurdenHours       =   burdenHours;
    projHourUtilizationTmp.UtilizationHours  =   utilizationHours;
    projHourUtilizationTmp.UtilizationRate   =   finalCalcResult;
    projHourUtilizationTmp.NormalHours       =   normHours;
    projHourUtilizationTmp.OvertimeHours     =   overtimeHours;
    projHourUtilizationTmp.HourDec           =   hourDec;
    projHourUtilizationTmp.RateDec           =   rateDec;
    projHourUtilizationTmp.HeaderLabel       =   headerLabel;
    projHourUtilizationTmp.DateLabel         =   dateLabel;
    projHourUtilizationTmp.insert();
}

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    This method provides the ability to write the report business logic. It will be called by SQL
///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
///    tables that will be returned to SSRS.
/// </remarks>

public void processReport()
{
    QueryRun    queryRun;

    ProjUtilEmplContract contract = this.parmDataContract() as ProjUtilEmplContract;

    params = ProjUtilReportParams::construct();
    params.parmProjUtilCalcParams().paramFilterType(ProjUtilCalcFilterType::Employee);

    if (contract.parmProjActualVsBudget() != ProjActualBudgetOnly::Actual)
    {
        params.parmProjUtilCalcParams().paramIsBudget(NoYes::Yes);
        params.parmProjUtilCalcParams().paramForecastModelId(contract.parmProjForecastModelId());
    }
    else
    {
        params.parmProjUtilCalcParams().paramIsBudget(NoYes::No);
    }

    params.parmProjUtilCalcParams().paramIsEfficiency(contract.parmProjIsEfficiency());
    params.parmProjUtilCalcParams().paramFromDate(contract.parmProjFromDate());
    params.parmProjUtilCalcParams().paramToDate(contract.parmProjToDate());
    params.parmProjUtilCalcParams().paramPeriodId(contract.parmEditPeriodID());
    params.parmSkipZero(contract.parmProjSkipZero());

    if (!params.validate())
    {
        return;
    }

    hourDec = ProjParameters::find().HourQtyDecimals;
    rateDec = ProjParameters::find().UtilRateDecimals;
    this.setHeaderLabels();

    //sort by worker PersonnelNumber
    this.parmQuery().dataSourceTable(tableNum(ResourceView)).addSortField(fieldNum(ResourceView, ResourceId));

    queryRun = new SysQueryRun(this.parmQuery());

    while (queryRun.next())
    {
        resource = queryRun.get(tableNum(ResourceView));
        resourceName = resource.Name;

        params.parmProjUtilCalcParams().paramResource(resource.RecId);

        [utilizationHours, burdenHours, normHours, overtimeHours, notIncludedHours, finalCalcResult] = ProjUtilCalc::calculate(params.parmProjUtilCalcParams());

        //go on to next transaction if we don't need to display this one
        if (params.parmSkipZero())
        {
            if (utilizationHours == 0 && burdenHours == 0 && notIncludedHours == 0 && normHours == 0)
            {
                continue;
            }
        }

        this.insertTmpProjUtilEmpl();
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderLabels</Name>
				<Source><![CDATA[
    /// <summary>
///    Sets the values for the header labels.
/// </summary>

public void setHeaderLabels()
{
    str periodLbl;

    if (params.parmProjUtilCalcParams().paramIsBudget())
    {
        headerlabel=("@SYS80981" + ' ' + params.parmProjUtilCalcParams().paramForecastModelId()); //Budget
    }
    else
    {
        headerlabel="@SYS33313"; //Actual
    }

    //Date from: %1 to %2
    periodLbl = strFmt("@SYS104135", date2StrUsr(params.parmProjUtilCalcParams().paramFromDate(), DateFlags::FormatAll),
                                     date2StrUsr(params.parmProjUtilCalcParams().paramToDate() == dateMax() ? dateNull() : params.parmProjUtilCalcParams().paramToDate(), DateFlags::FormatAll));

    dateLabel = periodLbl;
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
