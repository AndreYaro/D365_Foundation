<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovAvgPopulatorFullBatchRecurringController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>LedgerCovAvgDaysPerMonthPopulatorFullBatchRecurringController</c> class schedules and runs the recurring batch job responsible for
/// populating days per month tables for the past year.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.LedgerCovAvgBatchController))]
public final class LedgerCovAvgPopulatorFullBatchRecurringController extends LedgerCovAvgBatchController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(IdentifierName _className = classStr(LedgerCovAvgPopulatorBatch),
        IdentifierName _methodName = staticMethodStr(LedgerCovAvgPopulatorBatch, main),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::ScheduledBatch)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@CashManagement:LedgerCovAvgFullBatchCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassNumber</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ClassId getClassNumber()
    {
        return classNum(LedgerCovAvgPopulatorFullBatchRecurringController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecurrenceData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysRecurrenceData getRecurrenceData()
    {
       //bit mask (0x40) represent the day of the week as Sunday.
        const int RecurrenceDataIntervalIndex = 8;
        const int EveryOneWeekRecurrence = 1;
        const int SundayRecurrenceBitMask = 0x40;

        // Schedule the recurrence to execute every sunday
        TransDate today = DateTimeUtil::getToday(DateTimeUtil::getCompanyTimeZone());
        TransDate nextSunday = CashFlowForecastDateTimeUtil::getStartOfWeek(today, WeekDays::Sunday) + 7;

        TransDate startDate = nextSunday;

        SysRecurrenceData recurrenceData = SysRecurrence::defaultRecurrence();
        recurrenceData = this.setRecurranceTimeZone(recurrenceData, DateTimeUtil::getCompanyTimeZone());
        recurrenceData = SysRecurrence::setRecurrenceStartDate(recurrenceData, startDate);
        recurrenceData = SysRecurrence::setRecurrenceTime(recurrenceData, str2Time('05:00:00'));
        recurrenceData = SysRecurrence::setRecurrenceNoEnd(recurrenceData);
        recurrenceData = SysRecurrence::setRecurrenceUnit(recurrenceData, SysRecurrenceUnit::Week);
        
        // This setup recurrence to sunday of every week.
        recurrenceData = conpoke(recurrenceData, RecurrenceDataIntervalIndex, [EveryOneWeekRecurrence, SundayRecurrenceBitMask]);

        return recurrenceData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildRunTimeTasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal List getChildRunTimeTasks()
    {
        List tasks = new List(Types::Class);
        ListEnumerator runDates = this.createDateRunList(LedgerCovAvgConstants::NumberOfMonthsForFullPopulation).getEnumerator();

        while (runDates.moveNext())
        {
            LedgerCovAvgPopulatorFullBatchRecurringController populatorBatch = this.constructTask();
            populatorBatch.parmStartOfMonth(runDates.current());

            tasks.addEnd(populatorBatch);
        }

        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTask</Name>
				<Source><![CDATA[
    private LedgerCovAvgPopulatorFullBatchRecurringController constructTask()
    {
        return new LedgerCovAvgPopulatorFullBatchRecurringController(this.parmClassName(), this.parmMethodName(), this.parmExecutionMode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>callStaticMainMethod</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void callStaticMainMethod(Args _args)
    {
        LedgerCovAvgPopulatorBatch::main(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>