<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransCodeDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxTransCodeDP</c> class declares the variables that are required for the <c>TaxTransCode</c> report.
/// </summary>
[
    SRSReportQuery(queryStr(TaxTransCode)),
    SRSReportParameterAttribute(classStr(TaxTransCodeContract_W))
]
public class TaxTransCodeDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxTransCodeTmp taxTransCodeTmp;
    boolean     displayVatDueDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildGeneralAccountEntryMainAccount</Name>
				<Source><![CDATA[
    private TaxTransCodeTmp buildGeneralAccountEntryMainAccount()
    {
        TaxTransCodeTmp                     taxTransCodeMainAccount;
        TaxTransGeneralJournalAccountEntry  taxTransGeneralJournalAccountEntry;
        MainAccountLedgerDimensionView      mainAccountView;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        Ledger                              ledger;
        CompanyInfo                         companyInfo;

        if (TaxReportTmpTableDisposeFlight::instance().isEnabled())
        {
            taxTransCodeMainAccount.setConnection(this.parmUserConnection());
        }
        else
        {
            this.takeOwnershipOfTempTable(taxTransCodeMainAccount);
        }

        //  Get all distribution details for each TaxTrans using the tax transaction general journal account entry link table
        insert_recordset taxTransCodeMainAccount (RefRecId, MainAccount, FullyQualifiedAccount, LedgerAccountName, MainAccountRecId, GeneralJournalEntryDataArea)
        select RefRecId from taxTransCodeTmp
            group by RefRecId
            where taxTransCodeTmp.SourceDocumentLine == 0
            join taxTransGeneralJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.taxTrans == taxTransCodeTmp.RefRecId
                && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
            outer join MainAccount, FullyQualifiedAccount, Name, MainAccountRecId from mainAccountView
                group by MainAccount, FullyQualifiedAccount, Name, MainAccountRecId
                where mainAccountView.LedgerDimensionId == taxTransGeneralJournalAccountEntry.LedgerDimension
            join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry
            join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
            join ledger
                where ledger.RecId == generalJournalEntry.Ledger
            join DataArea from companyInfo
                group by DataArea
                where companyInfo.RecId == ledger.PrimaryForLegalEntity;

        taxTransCodeMainAccount = this.updateMainAccountDetails(taxTransCodeMainAccount);

        return taxTransCodeMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSourceDocumentLineMainAccount</Name>
				<Source><![CDATA[
    private TaxTransCodeTmp buildSourceDocumentLineMainAccount()
    {
        TaxTransCodeTmp                 taxTransCodeMainAccount;
        AccountingDistribution          accountingDistribution;
        SourceDocumentLine              sourceDocumentLineForTaxTrans;
        MainAccountLedgerDimensionView  mainAccountView;
        TaxDocCompLineSourceDocLine     taxDocumentComponentLineSDL;
        SourceDocumentLine              sourceDocumentLineForTaxDocumentCompnent;

        if (TaxReportTmpTableDisposeFlight::instance().isEnabled())
        {
            taxTransCodeMainAccount.setConnection(this.parmUserConnection());
        }
        else
        {
            this.takeOwnershipOfTempTable(taxTransCodeMainAccount);
        }

        //  Get all distribution details for each TaxTrans by using the SourceDocumentLine - Core Tax
        insert_recordset taxTransCodeMainAccount (RefRecId, GeneralJournalEntryDataArea, MainAccount, FullyQualifiedAccount, LedgerAccountName, MainAccountRecId)
        select RefRecId, GeneralJournalEntryDataArea from taxTransCodeTmp
            group by RefRecId, GeneralJournalEntryDataArea
            where taxTransCodeTmp.SourceDocumentLine > 0
            join sourceDocumentLineForTaxTrans
                where sourceDocumentLineForTaxTrans.RecId == taxTransCodeTmp.SourceDocumentLine
            join accountingDistribution
                where accountingDistribution.AmountSource == DistributionAmountSource::PrimaryAmount &&
                      accountingDistribution.SourceDocumentLine == sourceDocumentLineForTaxTrans.ParentSourceDocumentLine
            join MainAccount, FullyQualifiedAccount, Name, MainAccountRecId from mainAccountView
                group by MainAccount, FullyQualifiedAccount, Name, MainAccountRecId
                where mainAccountView.LedgerDimensionId == AccountingDistribution.LedgerDimension
            notexists join taxDocumentComponentLineSDL
                where taxDocumentComponentLineSDL.SourceDocumentLine == sourceDocumentLineForTaxTrans.ParentSourceDocumentLine;

        //  Get all distribution details for each TaxTrans by using the SourceDocumentLine - GTE
        //<GTE>
        insert_recordset taxTransCodeMainAccount (RefRecId, GeneralJournalEntryDataArea, MainAccount, FullyQualifiedAccount, LedgerAccountName, MainAccountRecId)
        select RefRecId, GeneralJournalEntryDataArea from taxTransCodeTmp
            group by RefRecId, GeneralJournalEntryDataArea
            where taxTransCodeTmp.SourceDocumentLine > 0
            join sourceDocumentLineForTaxTrans
                where sourceDocumentLineForTaxTrans.RecId == taxTransCodeTmp.SourceDocumentLine
            join taxDocumentComponentLineSDL
                where taxDocumentComponentLineSDL.SourceDocumentLine == sourceDocumentLineForTaxTrans.ParentSourceDocumentLine
            join sourceDocumentLineForTaxDocumentCompnent
                where sourceDocumentLineForTaxDocumentCompnent.RecId == TaxDocumentComponentLineSDL.SourceDocumentLine
            join accountingDistribution
                where accountingDistribution.AmountSource == DistributionAmountSource::PrimaryAmount &&
                      accountingDistribution.SourceDocumentLine == sourceDocumentLineForTaxDocumentCompnent.ParentSourceDocumentLine
            join MainAccount, FullyQualifiedAccount, Name, MainAccountRecId from mainAccountView
                group by MainAccount, FullyQualifiedAccount, Name, MainAccountRecId
                where mainAccountView.LedgerDimensionId == AccountingDistribution.LedgerDimension;
        // </GTE>

        taxTransCodeMainAccount = this.updateMainAccountDetails(taxTransCodeMainAccount);

        return taxTransCodeMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxSourceInfo</Name>
				<Source><![CDATA[
    private container getTaxSourceInfo(QueryRun _queryRun, TaxModuleType _source)
    {
        CustTrans           custTrans;
        VendTrans           vendTrans;
        BankAccountTrans    bankAccountTrans;
        container           con;

        switch (_source)
        {
            case TaxModuleType::Sales,
                 TaxModuleType::SalesInvoice,
                 TaxModuleType::FreeTxtInvoice,
                 TaxModuleType::CustCollectionLetter,
                 TaxModuleType::CustInterestNote,
                 TaxModuleType::Project,
                 TaxModuleType::ProjectInvoice :

                custTrans = _queryRun.get(tableNum(CustTrans));
                break;

            case TaxModuleType::Purch,
                 TaxModuleType::PurchInvoice :

                vendTrans = _queryRun.get(tableNum(VendTrans));
                break;

            case TaxModuleType::Tax,
                 TaxModuleType::Voucher :

                vendTrans = _queryRun.get(tableNum(VendTrans));
                if (! vendTrans)
                {
                    custTrans = _queryRun.get(tableNum(CustTrans));
                }
                break;

            case TaxModuleType::BankAccountReconcile :

                bankAccountTrans = _queryRun.get(tableNum(BankAccountTrans));
                break;
        }

        if (custTrans)
        {
            con = [custTrans.AccountNum, LedgerJournalACType::Cust];
        }
        else if (vendTrans)
        {
            con = [vendTrans.AccountNum, LedgerJournalACType::Vend];
        }
        else if (bankAccountTrans)
        {
            con = [bankAccountTrans.AccountId, LedgerJournalACType::Bank];
        }
        else
        {
            con = ["", LedgerJournalACType::Ledger];
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransCodeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the <c>TaxTransCodeTmp</c> table.
    /// </summary>
    /// <returns>
    /// The <c>TaxTransCodeTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxTransCodeTmp))
    ]
    public TaxTransCodeTmp getTaxTransCodeTmp()
    {
        // Order this result set to the information appears correctly in the report.
        select taxTransCodeTmp order by taxTransCodeTmp.TaxCode, taxTransCodeTmp.TaxDirection, taxTransCodeTmp.RefRecId, taxTransCodeTmp.TaxAmount desc;
        return taxTransCodeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMainAccountDetails</Name>
				<Source><![CDATA[
    private void insertMainAccountDetails(TaxTransCodeTmp taxTransCodeMainAccount)
    {
        insert_recordset taxTransCodeTmp
            (SourceDocumentLine, AccountNumber, AccountType, FullyQualifiedAccount,LedgerAccountName, MainAccount, RefRecId, TaxCode,
            TaxDirection, TaxName, TransDate, VatDueDate_W, Voucher, GeneralJournalEntryDataArea)
        select  SourceDocumentLine, AccountNumber, AccountType, FullyQualifiedAccount,LedgerAccountName, MainAccount, RefRecId, TaxCode,
            TaxDirection, TaxName, TransDate, VatDueDate_W, Voucher, GeneralJournalEntryDataArea from taxTransCodeMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpForPrimaryTaxTransRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a row in the <c>TaxTransCodeTmp</c> table representing the primary row in the report for a
    /// <c>TaxTrans</c> record.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object that contains the joined table buffers from which to retrieve additional
    /// information.
    /// </param>
    /// <param name="_taxTrans">
    /// The <c>TaxTrans</c> table buffer to set the fields in the <c>TaxTransCodeTmp</c> temporary table.
    /// </param>
    /// <param name="useTaxTransSourceDocumentLine">
    /// Identifies when we need to set SourceDocumentLine in the <c>TaxTransCodeTmp</c> temporary table.
    /// </param>
    private void insertTmpForPrimaryTaxTransRow(QueryRun _queryRun, TaxTrans _taxTrans, boolean useTaxTransSourceDocumentLine = false)
    {
        TaxTable taxTable;
        container   con;

        taxTransCodeTmp.TaxCode = _taxTrans.TaxCode;

        if (useTaxTransSourceDocumentLine)
        {
            taxTransCodeTmp.SourceDocumentLine = _taxTrans.SourceDocumentLine;
        }

        taxTable = _queryRun.get(tableNum(TaxTable));
        if (taxTable)
        {
            taxTransCodeTmp.TaxName = taxTable.TaxName;
        }
        taxTransCodeTmp.TaxDirection = _taxTrans.TaxDirection;
        taxTransCodeTmp.GeneralJournalEntryDataArea = _taxTrans.dataAreaId;

        con = this.getTaxSourceInfo(_queryRun, _taxTrans.Source);
        taxTransCodeTmp.AccountNumber = conPeek(con, 1);
        taxTransCodeTmp.AccountType = conPeek(con, 2);

        taxTransCodeTmp.Voucher = _taxTrans.Voucher;
        taxTransCodeTmp.TransDate = _taxTrans.TransDate;

        if (displayVatDueDate)
        {
            taxTransCodeTmp.VatDueDate_W = _taxTrans.taxTrans_W().VatDueDate_W;
        }

        taxTransCodeTmp.RefRecId = _taxTrans.RecId;

        taxTransCodeTmp.TaxBaseAmount = _taxTrans.TaxBaseAmount;
        taxTransCodeTmp.TaxAmount = _taxTrans.TaxAmount;
        taxTransCodeTmp.TaxInCostPriceMST = _taxTrans.TaxInCostPriceMST;

        SubledgerVoucherGeneralJournalEntry	subledgerVoucherGeneralJournalEntry = _queryRun.get(tableNum(SubledgerVoucherGeneralJournalEntry));
        taxTransCodeTmp.GeneralJournalEntry = subledgerVoucherGeneralJournalEntry.GeneralJournalEntry;

        taxTransCodeTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic and inserts data into the <c>TaxTransCodeTmp</c> table.
    /// </summary>
    public void processReport()
    {
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;
        NoYes isSuccessfulReport;

        TaxTransCodeTmp taxTransCodeTmpSourceDocumentLine;
        TaxTransCodeTmp taxTransCodeTmpGeneralAccountEntry;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();
            taxEventSourceLog.TaxReportStart(identifier);
            stopWatch.Start();

            TaxTransCodeContract_W contract = this.parmDataContract() as TaxTransCodeContract_W;
            VatDueDate_W fromVatDate = contract.parmFromVatRegisterDate();;
            VatDueDate_W toVatDate = contract.parmToVatRegisterDate();

            Query query = this.parmQuery();
            QueryBuildDataSource qbdsTaxTrans_W = query.dataSourceTable(tableNum(TaxTrans_W));

            if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
            {
                displayVatDueDate = true;
                qbdsTaxTrans_W.joinMode(JoinMode::InnerJoin);
                qbdsTaxTrans_W.addRange(fieldNum(TaxTrans_W, VatDueDate_W)).value(queryRange(fromVatDate, toVatDate));
            }

            QueryRun queryRun = new QueryRun(query);

            boolean hasSourceDocumentLines;
            boolean hasGeneralAccountEntryLines;
            Set taxTransProcessedSet = new Set(Types::Int64); // This set is used to handle the taxtrans which has been processed. We only process each TaxTrans record once.

            while (queryRun.next())
            {
                TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans));

                // The query outer joins to multiple source tables (CustTrans, VendTrans, BankAccountTrans) based on voucher.
                // The join is only used to identify the AccountNum/Id and type (e.g. Customer, Vendor, Bank).
                // Joining this information in the query performs better than an individual select on each TaxTrans record but
                // has the caveat that the join may return the same TaxTrans multiple times.
                // Check the taxTransProcessedMap to ensure we only process each TaxTrans record once.
                if (!taxTransProcessedSet.in(taxTrans.RecId))
                {
                    taxTransProcessedSet.add(taxTrans.RecId);
                    taxTransCodeTmp.clear();

                    // Use source document data if possible, otherwise revert to use data linked via TaxTransGeneralJournalAccountEntry table
                    // Note: There are cases where a SourceDocLine value references the original source document line which is not useful to
                    // this process. In these cases we revert to the TaxTransGeneralJourncalAccountEntry link table.
                    if (taxTrans.SourceDocumentLine &&
                        taxTrans.TaxOrigin != TaxOrigin::Payment &&
                        taxTrans.TaxOrigin != TaxOrigin::TaxReversed &&
                        taxTrans.TaxOrigin != TaxOrigin::CashDisc)
                    {
                        hasSourceDocumentLines = true;
                        this.insertTmpForPrimaryTaxTransRow(queryRun, taxTrans, true);
                    }
                    else
                    {
                        hasGeneralAccountEntryLines = true;
                        this.insertTmpForPrimaryTaxTransRow(queryRun, taxTrans, false);
                    }
                }
            }

            // Performance: We process these main account details in sets.
            // We also build both sets (taxTransCodeTmpSourceDocumentLine and taxTransCodeTmpGeneralAccountEntry)
            // before adding the results to taxTransCodeTmp.  This keeps taxTransCodeTmp as small as possible
            // in order to process buildGeneralAccountEntryMainAccount as efficiently as possible.

            if (hasSourceDocumentLines)
            {
                taxTransCodeTmpSourceDocumentLine = this.buildSourceDocumentLineMainAccount();
            }

            if (hasGeneralAccountEntryLines)
            {
                taxTransCodeTmpGeneralAccountEntry = this.buildGeneralAccountEntryMainAccount();
            }

            // Performance: Now that we have built both sets, add them to taxTransCodeTemp.
            if (hasSourceDocumentLines)
            {
                this.insertMainAccountDetails(taxTransCodeTmpSourceDocumentLine);
            }

            if (hasGeneralAccountEntryLines)
            {
                this.insertMainAccountDetails(taxTransCodeTmpGeneralAccountEntry);
            }

            this.updateMainAccountTranslatedName();

            isSuccessfulReport = NoYes::Yes;
        }
        catch(Exception::Error)
        {
            isSuccessfulReport = NoYes::Yes;
            throw Exception::Error;
        }
        finally
        {
            if (TaxReportTmpTableDisposeFlight::instance().isEnabled())
            {
                taxTransCodeTmpSourceDocumentLine.dispose();
                taxTransCodeTmpGeneralAccountEntry.dispose();
            }

            stopWatch.Stop();
            taxEventSourceLog.TaxReportStop(identifier, SysCountryRegionCode::countryInfo(), new MenuFunction(menuItemOutputStr(TaxTransCode), menuItemType::Output).label(), 'TaxTransCode', isSuccessfulReport, stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMainAccountDetails</Name>
				<Source><![CDATA[
    private TaxTransCodeTmp updateMainAccountDetails(TaxTransCodeTmp taxTransCodeMainAccount)
    {
        //  Update these distribution details with the reference information
        //  Note: We do not update the amounts because it will cause incorrect report totals
        update_recordSet taxTransCodeMainAccount
            setting
                SourceDocumentLine      = taxTransCodeTmp.SourceDocumentLine,
                AccountNumber           = taxTransCodeTmp.AccountNumber,
                AccountType             = taxTransCodeTmp.AccountType,
                TaxCode                 = taxTransCodeTmp.TaxCode,
                TaxDirection            = taxTransCodeTmp.TaxDirection,
                TaxName                 = taxTransCodeTmp.TaxName,
                TransDate               = taxTransCodeTmp.TransDate,
                VatDueDate_W            = taxTransCodeTmp.VatDueDate_W,
                Voucher                 = taxTransCodeTmp.Voucher
            join taxTransCodeTmp
                where taxTransCodeTmp.RefRecId == taxTransCodeMainAccount.RefRecId;

        return taxTransCodeMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMainAccountTranslatedName</Name>
				<Source><![CDATA[
    private void updateMainAccountTranslatedName()
    {
        LanguageId languageId;
        MainAccountTranslation mainAccountTranslation;

        // The main account name may need to be translated
        languageId = DimensionCache::currentDimensionValueLanguageId();
        if (languageId)
        {
            update_recordset taxTransCodeTmp
                setting TaxName = mainAccountTranslation.Name
                join Name from mainAccountTranslation
                    where mainAccountTranslation.MainAccount == taxTransCodeTmp.MainAccountRecId
                        && taxTransCodeTmp.MainAccountRecId > 0
                        && mainAccountTranslation.LanguageId == languageId
                        && mainAccountTranslation.Name != '';
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>