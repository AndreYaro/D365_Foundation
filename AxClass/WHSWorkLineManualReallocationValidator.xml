<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineManualReallocationValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineManualReallocationValidator</c> class is responsible for validating if it is possible
/// to run the manual work line reallocation logic.
/// </summary>
public class WHSWorkLineManualReallocationValidator extends WHSWorkLineReallocationValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSWorkLineManualReallocationValidator construct()
    {
        return new WHSWorkLineManualReallocationValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkTransType</Name>
				<Source><![CDATA[
    protected boolean validateWorkTransType()
    {
        boolean ret = WHSWorkLineReallocationValidator::canCreateReallocatorForWorkOrderType(workTable.WorkTransType);

        if (!ret)
        {
            WHSWorkCreateHistory::createWorkHistoryLine(
                                            workTable.WorkBuildId,
                                            "@WAX:ManualReallocationEnabledForSalesTransferIssueAndRawMatPicking",
                                            false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateReallocatorForWorkOrderType</Name>
				<Source><![CDATA[
    public static boolean canCreateReallocatorForWorkOrderType(WHSWorkTransType _workTransType)
    {
        return WhsWorkTransactionType::singletonFromTypeOrDefault(_workTransType).isManualReallocationSupported();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSWorkLineManualReallocationValidator</c> instance with the specified parameters.
    /// </summary>
    /// <param name = "_workLineToReallocate">The work line that needs to be reallocated</param>
    /// <param name = "_initialWorkLineInventQty">The total initial work inventory quantity</param>
    /// <param name = "_inventQtyToReallocate">The inventory quantity needed to be reallocated</param>
    /// <param name = "_workException">The selected work exception</param>
    /// <param name = "_userId">The user ID</param>
    /// <returns>A new instance of the <c>WHSWorkLineManualReallocationValidator</c> class</returns>
    public static WHSWorkLineManualReallocationValidator newFromWorkLine(
                                                        WHSWorkLine         _workLineToReallocate,
                                                        Qty                 _initialWorkLineInventQty,
                                                        Qty                 _inventQtyToReallocate,
                                                        WHSWorkException    _workException,
                                                        WHSUserId           _userId)
    {
        WHSWorkLineManualReallocationValidator workLineReallocatorValidator = WHSWorkLineManualReallocationValidator::construct();
        workLineReallocatorValidator.parmWorkLineToReallocate(_workLineToReallocate);
        workLineReallocatorValidator.parmInitialWorkLineInventQty(_initialWorkLineInventQty);
        workLineReallocatorValidator.parmInventQtyToReallocate(_inventQtyToReallocate);
        workLineReallocatorValidator.parmWorkException(_workException);
        workLineReallocatorValidator.parmUserId(_userId);

        return workLineReallocatorValidator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>