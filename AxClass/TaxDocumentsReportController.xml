<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxDocumentsReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxDocumentsReportController</c> class is the controller class for a
/// <c>TaxDocumentsReport</c> report.
/// </summary>
class TaxDocumentsReportController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        public void preRunModifyContract()
    {
        TaxDocumentsReportContract  taxDocumentsReportContract;
        CustVendTrans               trans;
        CzTaxDocumentTable          taxDocumentTable;
        CzTaxCreditMemo             taxCreditMemo;
        Args                        arguments;

        arguments = this.parmArgs();
        taxDocumentsReportContract = this.parmReportContract().parmRdpContract() as TaxDocumentsReportContract;

        // Calling record could be one of multiple datasources. Data and parameters are set based on which
        // datasource is calling the report
        switch (arguments.dataset())
        {
            case tableNum(CzTaxDocumentTable) :
                taxDocumentTable = arguments.record();
                trans = taxDocumentTable.firstCustVendTrans();

                break;

            case tableNum(CzTaxCreditMemo) :
                taxCreditMemo = arguments.record();
                taxDocumentTable = CzTaxDocumentTable::findRecId(taxCreditMemo.TaxDocumentRecId);
                trans = taxDocumentTable.firstCustVendTrans();
                taxDocumentsReportContract.parmTaxCreditMemoId(taxCreditMemo.RecId);

                break;

            case tableNum(CustTrans) :
            case tableNum(VendTrans) :
                trans = arguments.record();
                taxDocumentTable = CzTaxDocumentTable::find(trans.Voucher, trans.TransDate);

                break;

            default:
                throw(error(strfmt("@SYS29104", classstr(TaxDocumentsReportController))));
        }

        taxDocumentsReportContract.parmTaxDocumentId(taxDocumentTable.RecId);
        taxDocumentsReportContract.parmShowTaxCreditMemo(taxCreditMemo.RecId != 0);
        taxDocumentsReportContract.parmTransTableId(trans.TableId);
        taxDocumentsReportContract.parmTransId(trans.RecId);

        if (taxDocumentsReportContract.parmShowTaxCreditMemo())
        {
            this.setRanges(this.getFirstQuery(), taxDocumentTable.RecId);
        }
        else
        {
            // No need to select any CzTaxCreditMemo records because they will
            // not show on the report
            this.setRanges(this.getFirstQuery(), 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges.
    /// </summary>
    /// <param name="_query">
    /// A <c>Query</c> object to which the range is added.
    /// </param>
    /// <param name="_taxDocumentRecId">
    /// The record ID of a tax document.
    /// </param>
    public void setRanges(Query _query, RecId _taxDocumentRecId)
    {
        if (_query)
        {
            SRSReportHelper::addParameterValueRangeToQuery(
                _query,
                tablenum(CzTaxCreditMemo),
                fieldnum(CzTaxCreditMemo, TaxDocumentRecId),
                int642str(_taxDocumentRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        const str FeatureReference = 'CZ-00006';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        TaxDocumentsReportController controller = new TaxDocumentsReportController();

        if (!_args || !_args.record())
        {
            throw(error(strfmt("@SYS29104", classstr(TaxDocumentsReportController))));
        }

        controller.parmShowDialog(false);
        controller.parmReportName(ssrsReportStr(TaxDocumentsReport, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>