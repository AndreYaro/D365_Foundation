<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ePaymentXMLFormatComplement_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ePaymentXMLFormatComplement_MX extends EPaymentXMLFormat_MX
{
    CustBankAccount issuerBankTable;
    BankAccountTable recipientBankTable;
    CustTable customerAccountByBank;
    private const str MXPeso = 'MXN';
    private const str MXPCurrency = 'MXP';
    private const real DefaultExchangeRate = 1;
    protected real exchangeRate = DefaultExchangeRate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendPaymentsElement</Name>
				<Source><![CDATA[
    protected void appendPaymentsElement(XmlElement _comprobanteElement)
    {
        if (this.isComplementoNeeded())
        {
            XmlElement paymentsElement, singlePaymentElement, complementoElement;

            this.changePrefixAndXmlns(this.getPagoPrefix(), this.getPagoNamespace());
            this.setXmlNsAttribute(_comprobanteElement);

            paymentsElement = this.createElement('Pagos');

            paymentsElement.setAttribute('Version', this.getVersion());
            singlePaymentElement = this.createPaymentElement();
            paymentsElement.appendChild(singlePaymentElement);
            this.changePrefixAndXmlns(cfdiPrefix, this.getCfdiNameSpace());

            complementoElement = this.createElement('Complemento');
            complementoElement.appendChild(paymentsElement);
            _comprobanteElement.appendChild(complementoElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIssuerForeignBankInfoRequired</Name>
				<Source><![CDATA[
    private boolean isIssuerForeignBankInfoRequired()
    {
        switch (paymentType)
        {
            case PaymentType_MX::Check:
            case PaymentType_MX::Transfer:
            case PaymentType_MX::CreditCard:
            case PaymentType_MX::DebitCard:
            case PaymentType_MX::ServiceCard:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIssuerBankInfoNeeded</Name>
				<Source><![CDATA[
    private boolean isIssuerBankInfoNeeded()
    {
        switch (paymentType)
        {
            case PaymentType_MX::Check:
            case PaymentType_MX::Transfer:
            case PaymentType_MX::CreditCard:
            case PaymentType_MX::ElectronicWallet:
            case PaymentType_MX::ElectronicMoney:
            case PaymentType_MX::DebitCard:
            case PaymentType_MX::ServiceCard:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecipientBankInfoNeeded</Name>
				<Source><![CDATA[
    private boolean isRecipientBankInfoNeeded()
    {
        switch (paymentType)
        {
            case PaymentType_MX::Check:
            case PaymentType_MX::Transfer:
            case PaymentType_MX::CreditCard:
            case PaymentType_MX::ElectronicWallet:
            case PaymentType_MX::DebitCard:
            case PaymentType_MX::ServiceCard:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIssuerForeignBank</Name>
				<Source><![CDATA[
    private boolean isIssuerForeignBank()
    {
        if (!issuerBankTable)
        {
            return false;
        }

        #isoCountryRegionCodes;

        LogisticsPostalAddress address = LogisticsLocationEntity::location2PostalAddress(issuerBankTable.Location);
        LogisticsAddressCountryRegion countryRegion = LogisticsAddressCountryRegion::findByISOCode(#isoMX);

        return address && address.CountryRegionId != countryRegion.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComprobanteElement</Name>
				<Source><![CDATA[
    protected XmlElement createComprobanteElement()
    {
        XmlElement comprobanteElement;

        comprobanteElement = super();
        comprobanteElement.setAttribute('Moneda', currencyCode);
        comprobanteElement.setAttribute('TipoDeComprobante', 'P');
        comprobanteElement.setAttribute('SubTotal', this.formatXmlAmount(0, currencyCode));
        comprobanteElement.setAttribute('Total', this.formatXmlAmount(0, currencyCode));

        this.appendPaymentsElement(comprobanteElement);

        return comprobanteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConceptoElement</Name>
				<Source><![CDATA[
    protected XmlElement createConceptoElement(Common _conceptoSource = null)
    {
        XmlElement conceptoElement;

        conceptoElement = super();

        conceptoElement.setAttribute('Descripcion', 'Pago');
        conceptoElement.setAttribute('ValorUnitario', '0');
        conceptoElement.setAttribute('Importe', '0');
        conceptoElement.setAttribute('Cantidad', '1');

        return conceptoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceElement</Name>
				<Source><![CDATA[
    protected XmlElement createInvoiceElement(EInvoiceJourBaseMap_MX _eInvoice, CustTrans _invoice)
    {
        XmlElement invoiceElement = this.createElement('DoctoRelacionado');
        invoiceElement.setAttribute('IdDocumento', _eInvoice.eInvoiceUUID());
        this.setAttributeIfNotNull(invoiceElement, 'Serie', _eInvoice.eInvoiceJour().InvoiceSeries);
        this.setAttributeIfNotNull(invoiceElement, 'Folio', _eInvoice.eInvoiceJour().InvoiceFolio);
        invoiceElement.setAttribute('MonedaDR', _eInvoice.currencyCode());

        this.createTipoCambioDRAttribute(invoiceElement, _eInvoice, _invoice);
        if (this.shouldSetMetodoDePagoDR())
        {
            invoiceElement.setAttribute('MetodoDePagoDR', _eInvoice.orderOfPayment());
        }

        Integer counter;
        AmountCur runningTotal;
        CustSettlement custSettlement;

        select sum(SettleAmountCur), minof(CreatedDateTime) from custSettlement
            where custSettlement.TransRecId == _invoice.RecId
               && custSettlement.OffsetRecid == payment.RecId
               && custSettlement.CanBeReversed == NoYes::Yes;

        utcdatetime settlementCreatedDateTime = custSettlement.CreatedDateTime;
        AmountCur settleAmountCurrent = custSettlement.SettleAmountCur;

        while select sum(SettleAmountCur)
            from custSettlement
            group by TransRecId, OffsetRecid
            where custSettlement.TransRecId == _invoice.RecId
               && custSettlement.CanBeReversed == NoYes::Yes
               && custSettlement.CreatedDateTime < settlementCreatedDateTime
        {
            if (CustTrans::find(custSettlement.OffsetRecid).Invoice == '')
            {
                counter++;
            }

            runningTotal += custSettlement.SettleAmountCur;
        }

        AmountCur invoiceOpenBalancePrev = _invoice.AmountCur - runningTotal;

        invoiceElement.setAttribute('NumParcialidad', num2str(counter + 1, 0, 0, 1, 0));
        invoiceElement.setAttribute('ImpSaldoAnt', this.formatXmlAmount(invoiceOpenBalancePrev, _eInvoice.currencyCode()));
        invoiceElement.setAttribute('ImpPagado', this.formatXmlAmount(settleAmountCurrent, _eInvoice.currencyCode()));
        invoiceElement.setAttribute('ImpSaldoInsoluto', this.formatXmlAmount(invoiceOpenBalancePrev - abs(settleAmountCurrent), _eInvoice.currencyCode()));

        return invoiceElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoicesElements</Name>
				<Source><![CDATA[
    protected void createInvoicesElements(XmlElement _paymentElement)
    {
        CustTrans invoice;
        CustSettlement settlement;

        while select crossCompany invoice
            where invoice.Invoice
        exists join settlement
            where settlement.TransRecId == invoice.RecId
               && settlement.TransCompany == invoice.DataAreaId
               && settlement.OffsetRecid == payment.RecId
               && settlement.OffsetCompany == payment.DataAreaId
        {
            changecompany (invoice.company())
            {
                EInvoiceJourBaseMap_MX eInvoiceJour = this.getEInvoiceJourMap(invoice);
                if (!eInvoiceJour)
                {
                    throw error(strFmt("@MexicoCFDI:InvoiceNotCFDI_Error", invoice.Invoice));
                }

                if (!eInvoiceJour.eInvoiceUUID())
                {
                    throw error(strFmt("@MexicoCFDI:InvoiceNotApproved_Error", invoice.Invoice));
                }

                if (eInvoiceJour.eInvoicePaymMethod() != 'PUE')
                {
                    XmlElement invoiceElement = this.createInvoiceElement(eInvoiceJour, invoice);
                    _paymentElement.appendChild(invoiceElement);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentElement</Name>
				<Source><![CDATA[
    protected XmlElement createPaymentElement()
    {
        XmlElement paymentElement = this.createElement('Pago');

        paymentElement.setAttribute('FechaPago', this.getDateTimeStr());
        paymentElement.setAttribute('FormaDePagoP', this.getFormattedPaymentType());
        paymentElement.setAttribute('MonedaP', payment.CurrencyCode);

        if (payment.CurrencyCode != MXPeso
            && payment.CurrencyCode != MXPCurrency
            && payment.CurrencyCode != XXXcurrency)
        {
            paymentElement.setAttribute('TipoCambioP', this.formatExchangeRateAmount(payment.ExchRate / 100));
        }

        Currency currency = Currency::find(payment.CurrencyCode);

        AmountCur paymentTotal;

        if (FeatureStateProvider::isFeatureEnabled(IncludeOnlyPPDAmountsInSettlementTotal_MXFeature::instance()))
        {
            paymentTotal = payment.SettleAmount_MX;
        }
        else
        {
            paymentTotal = payment.AmountCur;
        }

        paymentElement.setAttribute('Monto', this.formatXmlAmountCheckDecimal(abs(paymentTotal), currency.DecimalsCount_MX));

        if (payment.PaymReference)
        {
            paymentElement.setAttribute('NumOperacion', this.escape(payment.PaymReference));
        }

        if (this.isIssuerBankInfoNeeded())
        {
            boolean isCustomerForeignBank = customerAccountByBank.CompanyType_MX == CompanyType_MX::ForeignCompany || this.isIssuerForeignBank();
            if (isCustomerForeignBank)
            {
                paymentElement.setAttribute('RfcEmisorCtaOrd', eInvoiceJourBaseMap_MX::ForeignerRFC);
            }
            else if (issuerBankTable && issuerBankTable.Rfc_MX)
            {
                paymentElement.setAttribute('RfcEmisorCtaOrd', issuerBankTable.Rfc_MX);
            }

            if (issuerBankTable && issuerBankTable.AccountNum)
            {
                paymentElement.setAttribute('CtaOrdenante', this.escape(issuerBankTable.AccountNum));
            }

            if (isCustomerForeignBank && this.isIssuerForeignBankInfoRequired())
            {
                paymentElement.setAttribute('NomBancoOrdExt', this.escape(issuerBankTable.Name));
            }
        }

        if (recipientBankTable && this.isRecipientBankInfoNeeded())
        {
            if (recipientBankTable.Rfc_MX)
            {
                paymentElement.setAttribute('RfcEmisorCtaBen', recipientBankTable.Rfc_MX);
            }

            if (recipientBankTable.AccountNum)
            {
                paymentElement.setAttribute('CtaBeneficiario', recipientBankTable.AccountNum);
            }
        }

        this.createInvoicesElements(paymentElement);
        return paymentElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTipoCambioDRAttribute</Name>
				<Source><![CDATA[
    private void createTipoCambioDRAttribute(
        XmlElement _element,
        EInvoiceJourBaseMap_MX _eInvoice,
        CustTrans _invoice = null)
    {
        const SysFlightName OverridePACTipoCambioDRRequirement = 'OverridePACTipoCambioDRRequirement';

        CurrencyCode invoiceCurrency, paymentCurrency;

        invoiceCurrency = _eInvoice.currencyCode();
        paymentCurrency = payment.CurrencyCode;

        if (invoiceCurrency != paymentCurrency)
        {
            CustTrans_W custTrans_W;

            if (_invoice)
            {
                custTrans_W = _invoice.custTrans_W();
            }

            if (isFlightEnabled(OverridePACTipoCambioDRRequirement)
                && invoiceCurrency == Currency::findCurrencyCodeISO(MXPeso).CurrencyCode)
            {
                exchangeRate = DefaultExchangeRate;
                _element.setAttribute(this.invoiceExchangeRateAttributeName(), num2Str(exchangeRate, 0, 0, 0, 0));
            }
            else if (custTrans_W.CrossRate_MX)
            {
                exchangeRate = 100 / custTrans_W.CrossRate_MX;
                
                exchangeRate = roundUpDec(exchangeRate, 10);

                _element.setAttribute(this.invoiceExchangeRateAttributeName(), this.formatExchangeRateTenDecimals(exchangeRate));
            }
            else
            {
                ExchRate exchRate = ExchangeRateHelper::getVariableExchangeRate(
                    paymentCurrency,
                    invoiceCurrency,
                    Ledger::defaultExchangeRateType(),
                    payment.TransDate,
                    true);

                exchangeRate = roundUpDec(exchRate / 100, 10);

                _element.setAttribute(this.invoiceExchangeRateAttributeName(), this.formatExchangeRateTenDecimals(exchangeRate));
            }
        }
        else 
        {
            exchangeRate = DefaultExchangeRate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTaxes</Name>
				<Source><![CDATA[
    protected void fetchTaxes(Common _taxSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConceptoSourceList</Name>
				<Source><![CDATA[
    protected List getConceptoSourceList()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMexicanPesoCurrency</Name>
				<Source><![CDATA[
    private boolean isMexicanPesoCurrency(str _currencyCode)
    {
        return _currencyCode == MXPeso || _currencyCode == MXPCurrency || _currencyCode == XXXcurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CustTrans _payment, CustSettlement _paymentSettlement = null)
    {
        super(_payment, _paymentSettlement);

        schemaLocation += ' ' + this.getPagosSchemaLocation();

        recipientBankTable = BankAccountTable::find(payment.CompanyBankAccountId);
        customerAccountByBank = CustTable::find(payment.AccountNum);
        issuerBankTable = CustBankAccount::find(payment.AccountNum, payment.ThirdPartyBankAccountId);

        if (customerAccountByBank.CompanyType_MX == CompanyType_MX::ForeignCompany)
        {
            if (!issuerBankTable && this.isIssuerForeignBankInfoRequired())
            {
                throw error("@MexicoCFDI:BankAccount_Error");
            }
        }

        currencyCode = 'XXX';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isComplementoNeeded</Name>
				<Source><![CDATA[
    protected boolean isComplementoNeeded()
    {
        boolean isNeeded;

        CustTrans invoice;
        CustSettlement settlement;

        while select crossCompany invoice
            exists join settlement
                where settlement.TransRecId == invoice.RecId
                   && settlement.TransCompany == invoice.DataAreaId
                   && settlement.OffsetRecid == payment.RecId
                   && settlement.OffsetCompany== payment.DataAreaId
        {
            changecompany (invoice.company())
            {
                if (EInvoiceCFDIJournalHelper::isPUETransaction(invoice))
                {
                    warning(strFmt("@MexicoCFDI:SkipTransPUEWarning", invoice.Invoice));
                }
                else
                {
                    isNeeded = true;
                }
            }
        }

        if (!isNeeded)
        {
            warning(strFmt("@MexicoCFDI:CFDINoValidTransactionsFound", payment.Voucher));
        }

        return isNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPagosSchemaLocation</Name>
				<Source><![CDATA[
    protected str getPagosSchemaLocation()
    {
        return 'http://www.sat.gob.mx/Pagos http://www.sat.gob.mx/sitio_internet/cfd/Pagos/Pagos10.xsd';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetMetodoDePagoDR</Name>
				<Source><![CDATA[
    protected boolean shouldSetMetodoDePagoDR()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceExchangeRateAttributeName</Name>
				<Source><![CDATA[
    protected str invoiceExchangeRateAttributeName()
    {
        return 'TipoCambioDR';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>