<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class InventInventoryDataServiceBatchJob extends InventInventoryDataServiceBaseBatchJob implements ISysBatchTask, BatchRetryable
{
    private static readonly int MinFailedRecordCount = 50;

    private InventInstrumentationLogger           logger;
    private InventInventoryDataServiceInstrumentationActivities inventInventoryDataServiceInstrumentationActivity;

    private InventInventoryDataServiceParameters parameter;
    public boolean isReservationOffsetEnabled;
    public boolean isSoftReserveEnabled;
    public boolean isWHSItemEnabled;
    private boolean isTransactionEnabled;

    public boolean isProcessingQueueBackup;

    public str tableNameToProcessInventSum;
    public str tableNameToProcessReservation;
    public str tableNameToProcessWHS;
    public str tableNameToProcessSoftReserve;

    public boolean lockExistInventSum; 
    public boolean lockExistReservation;
    public boolean lockExistWHS;
    public boolean lockExistSoftReserve; 

    private boolean skipQueueLock;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        super();

        logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceBatchJob));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        if (InventIVCheckRegistrationBeforeProcessQueueFlight::instance().isEnabled())
        {
            container result = InventoryServiceServiceHealthChecker::checkRegistration();
        
            boolean isProcessQueue = conPeek(result, 1);
            boolean isDisableQueue = conPeek(result, 2);
            str errorMessage = conPeek(result, 3);
            if (isProcessQueue)
            {
                this.processQueue();
            }
            else if (isDisableQueue)
            {
                InventInventoryDataServiceDisable inventoryDataServiceDisable = InventInventoryDataServiceDisable::construct();
                inventoryDataServiceDisable.deleteBatchTaskAndQueue();
            }
            else if (errorMessage)
            {
                logger.logInformation(errorMessage);
            }
        }
        else
        {
            this.processQueue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventInventoryDataServiceBatchJob construct()
    {
        return new InventInventoryDataServiceBatchJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    internal static ClassDescription description()
    {
        return "@SCM:InventoryServiceBatchJobDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleForBatchExecution</Name>
				<Source><![CDATA[
    public void scheduleForBatchExecution(SysRecurrenceData _recurrenceData = InventInventoryDataServiceBaseBatchJob::getOneMinuteIntervalRecurrenceData())
    {
        super(_recurrenceData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFeatureAndParameterStatus</Name>
				<Source><![CDATA[
    internal void updateFeatureAndParameterStatus()
    {
        inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();

        parameter = InventInventoryDataServiceParameters::find();
        isProcessingQueueBackup = parameter.IsProcessingQueueBackup;
        isReservationOffsetEnabled = InventInventoryDataServiceSoftReservationHelper::isOffsetEnabled(parameter);
        isSoftReserveEnabled = FeatureStateProvider::isFeatureEnabled(InventInventoryDataServiceSoftReservationFeature::instance());
        isWHSItemEnabled = FeatureStateProvider::isFeatureEnabled(InventInventoryDataServiceWHSFeature::instance()) && parameter.IsWHSItemEnabled;
        isTransactionEnabled = FeatureStateProvider::isFeatureEnabled(InventInventoryDataServiceTransactionFeature::instance());

        skipQueueLock = InventInventoryDataServiceSkipQueueLockFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueueAndLockStatus</Name>
				<Source><![CDATA[
    internal void updateQueueAndLockStatus()
    {
        tableNameToProcessInventSum = isProcessingQueueBackup ? 'InventInventoryDataServiceInventSumQueueBackup' : 'InventInventoryDataServiceInventSumQueue';
        tableNameToProcessReservation = isProcessingQueueBackup ? 'InventInventoryDataServiceReservationQueueBackup' : 'InventInventoryDataServiceReservationQueue';
        tableNameToProcessWHS = isProcessingQueueBackup ? 'InventInventoryDataServiceWHSQueueBackup' : 'InventInventoryDataServiceWHSQueue';
        tableNameToProcessSoftReserve = isProcessingQueueBackup ? 'InventInventoryDataServiceSoftReserveQueueBackup' : 'InventInventoryDataServiceSoftReserveQueue';

        lockExistInventSum = this.existLock(tableNameToProcessInventSum);
        lockExistReservation = isReservationOffsetEnabled ? this.existLock(tableNameToProcessReservation) : false;
        lockExistWHS = isWHSItemEnabled ? this.existLock(tableNameToProcessWHS) : false;
        lockExistSoftReserve = isReservationOffsetEnabled ?  this.existLock(tableNameToProcessSoftReserve) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncateAllInventoryServiceTempTables</Name>
				<Source><![CDATA[
    internal void truncateAllInventoryServiceTempTables()
    {
        InventInventoryDataServiceInventSumQueueTemp::truncate();

        if (isWHSItemEnabled)
        {
            InventInventoryDataServiceWHSQueueTemp::truncate();
        }

        if (isSoftReserveEnabled)
        {
            InventInventoryDataServiceSoftReserveQueueTemp::truncate();
        }

        if (isReservationOffsetEnabled)
        {
            InventInventoryDataServiceReservationQueueTemp::truncate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForInsertIfNotSkipQueueLock</Name>
				<Source><![CDATA[
    internal void waitForInsertIfNotSkipQueueLock()
    {
        this.updateQueueAndLockStatus();

        if (!skipQueueLock)
        {
            using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_WaitAllInsertingFinished())
            {
                ttsbegin;
                InventInventoryDataServiceParameters::updateIsWaitingForInserting(true);
                ttscommit;

                while (this.existLock(tableNameToProcessInventSum)
                || (isReservationOffsetEnabled && this.existLock(tableNameToProcessReservation))
                || (isWHSItemEnabled && this.existLock(tableNameToProcessWHS))
                || (isSoftReserveEnabled && this.existLock(tableNameToProcessSoftReserve)))
                {
                    sleep(1000);
                }

                ttsbegin;
                InventInventoryDataServiceParameters::updateIsWaitingForInserting(false);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertQueueDataIntoTempTable</Name>
				<Source><![CDATA[
    internal void insertQueueDataIntoTempTable()
    {
        this.updateQueueAndLockStatus();

        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_InsertQueueDataToTempTable(skipQueueLock, lockExistInventSum, lockExistReservation, lockExistWHS, lockExistSoftReserve))
        {
            ttsbegin;
            if (isProcessingQueueBackup)
            {
                InventInventoryDataServiceInventSumQueueBackup::insertRecordsIntoTempTable(skipQueueLock, lockExistInventSum);

                if (isReservationOffsetEnabled)
                {
                    InventInventoryDataServiceReservationQueueBackup::insertRecordsIntoTempTable(skipQueueLock, lockExistReservation);
                }

                if (isWHSItemEnabled)
                {
                    InventInventoryDataServiceWHSQueueBackup::insertRecordsIntoTempTable(skipQueueLock, lockExistWHS);
                }

                if (isSoftReserveEnabled)
                { 
                    InventInventoryDataServiceSoftReserveQueueBackup::insertRecordsIntoTempTable(skipQueueLock, lockExistSoftReserve);
                }
            }
            else
            {
                InventInventoryDataServiceInventSumQueue::insertRecordsIntoTempTable(skipQueueLock, lockExistInventSum);

                if (isReservationOffsetEnabled)
                {
                    InventInventoryDataServiceReservationQueue::insertRecordsIntoTempTable(skipQueueLock, lockExistReservation);
                }

                if (isWHSItemEnabled)
                {
                    InventInventoryDataServiceWHSQueue::insertRecordsIntoTempTable(skipQueueLock, lockExistWHS);
                }

                if (isSoftReserveEnabled)
                {
                    InventInventoryDataServiceSoftReserveQueue::insertRecordsIntoTempTable(skipQueueLock, lockExistSoftReserve);
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAllInventoryServiceData</Name>
				<Source><![CDATA[
    private void postAllInventoryServiceData()
    {
        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostAllInventSums())
        {
            System.Threading.Tasks.Task[] threadTasklist = InventInventoryDataServiceBatchJobHelper::allocateTasks(InventInventoryDataServiceJobTaskType::InventSum, true);
            this.waitForAsyncTasks(threadTasklist);
            inventInventoryDataServiceInstrumentationActivity.logPostAllInventSumsInfo(activityContext, threadTasklist.Length);
        }

        if (isWHSItemEnabled)
        {
            using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostAllWHS())
            {
                System.Threading.Tasks.Task[] threadTasklist = InventInventoryDataServiceBatchJobHelper::allocateTasks(InventInventoryDataServiceJobTaskType::WHSInventReserve);
                this.waitForAsyncTasks(threadTasklist);
            }
        }

        if (isSoftReserveEnabled)
        {
            using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostAllSoftReserve())
            {
                InventInventoryDataServiceSoftReserveQueueTemp softReserveQueueTemp;
                while select crosscompany DataAreaId from softReserveQueueTemp group by DataAreaId
                {
                    if (softReserveQueueTemp.DataAreaId != curExt())
                    {
                        changecompany (softReserveQueueTemp.DataAreaId)
                        {
                            System.Threading.Tasks.Task[] threadTasklist = InventInventoryDataServiceBatchJobHelper::allocateTasks(InventInventoryDataServiceJobTaskType::SoftReserve);
                            this.waitForAsyncTasks(threadTasklist);
                        }
                    }
                    else
                    {
                        System.Threading.Tasks.Task[] threadTasklist = InventInventoryDataServiceBatchJobHelper::allocateTasks(InventInventoryDataServiceJobTaskType::SoftReserve);
                        this.waitForAsyncTasks(threadTasklist);
                    }
                }
            }
        }

        if (isTransactionEnabled)
        {
            using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostAllInventJournalTransStatus())
            {
                System.Threading.Tasks.Task[] threadTasklist = InventInventoryDataServiceBatchJobHelper::allocateTasks(InventInventoryDataServiceJobTaskType::InventJournalTransStatus);
                this.waitForAsyncTasks(threadTasklist);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanProcessedQueueData</Name>
				<Source><![CDATA[
    internal void cleanProcessedQueueData()
    {
        this.updateQueueAndLockStatus();

        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_CleanProcessedQueueData())
        {
            ttsbegin;
            if (isProcessingQueueBackup)
            {
                InventInventoryDataServiceInventSumQueueBackup::cleanProcessedQueueData(skipQueueLock, lockExistInventSum);
                InventInventoryDataServiceInventSumQueueTemp::insertPostFailedRecordsIntoQueueTable();
                InventInventoryDataServiceParameters::updateIsProcessingQueueBackup(false);

                if (isReservationOffsetEnabled)
                {
                    InventInventoryDataServiceReservationQueueBackup::cleanProcessedQueueData(skipQueueLock, lockExistReservation);
                    InventInventoryDataServiceReservationQueueTemp::insertPostFailedRecordsIntoQueueTable();
                }

                if (isWHSItemEnabled)
                {
                    InventInventoryDataServiceWHSQueueBackup::cleanProcessedQueueData(skipQueueLock, lockExistWHS);
                    InventInventoryDataServiceWHSQueueTemp::insertPostFailedRecordsIntoQueueTable();
                }

                if (isSoftReserveEnabled)
                {
                    InventInventoryDataServiceSoftReserveQueueBackup::cleanProcessedQueueData(skipQueueLock, lockExistSoftReserve);
                    InventInventoryDataServiceSoftReserveQueueTemp::insertPostFailedRecordsIntoQueueTable();
                }
            }
            else
            {
                InventInventoryDataServiceInventSumQueue::cleanProcessedQueueData(skipQueueLock, lockExistInventSum);
                InventInventoryDataServiceInventSumQueueTemp::insertPostFailedRecordsIntoQueueBackupTable();
                InventInventoryDataServiceParameters::updateIsProcessingQueueBackup(true);

                if (isReservationOffsetEnabled)
                {
                    InventInventoryDataServiceReservationQueue::cleanProcessedQueueData(skipQueueLock, lockExistReservation);
                    InventInventoryDataServiceReservationQueueTemp::insertPostFailedRecordsIntoQueueBackupTable();
                }

                if (isWHSItemEnabled)
                {
                    InventInventoryDataServiceWHSQueue::cleanProcessedQueueData(skipQueueLock, lockExistWHS);
                    InventInventoryDataServiceWHSQueueTemp::insertPostFailedRecordsIntoQueueBackupTable();
                }

                if (isSoftReserveEnabled)
                {
                    InventInventoryDataServiceSoftReserveQueue::cleanProcessedQueueData(skipQueueLock, lockExistSoftReserve);
                    InventInventoryDataServiceSoftReserveQueueTemp::insertPostFailedRecordsIntoQueueBackupTable();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQueue</Name>
				<Source><![CDATA[
    private void processQueue()
    {
        this.updateFeatureAndParameterStatus();
        this.truncateAllInventoryServiceTempTables();
        this.waitForInsertIfNotSkipQueueLock();
        this.insertQueueDataIntoTempTable();

        if (isReservationOffsetEnabled)
        {
            this.mergeReservationQueueWithPartialSuccessReservationQueue();
        }

        this.postAllInventoryServiceData();
        this.cleanProcessedQueueData();

        var isWHSFailed = false;
        if (isWHSItemEnabled)
        {
            isWHSFailed = this.checkAllWHSDataFails();
        }

        var isInventSumFailed = this.checkAllInventSumDataFails();

        if (InventIVAutoSetJobRecurrenceFlight::instance().isEnabled())
        {
            var ifNeedToIncreseFailedCount = false;
            if (isInventSumFailed)
            {
                ifNeedToIncreseFailedCount = this.ifNeedToIncreaseFailedCount(isReservationOffsetEnabled);
            }

            InventInventoryDataServiceBaseBatchJob::UpdateJobRecurrenceAndParametersIfNeeded(classStr(InventInventoryDataServiceBatchJob), classNum(InventInventoryDataServiceBatchJob), ifNeedToIncreseFailedCount, logger);
        }

        if (isWHSFailed || isInventSumFailed)
        {
            throw error("@SCM:InventoryServiceBatchJobFailErrorMessage");
        }

        this.updateServiceStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ifNeedToIncreaseFailedCount</Name>
				<Source><![CDATA[
    private boolean ifNeedToIncreaseFailedCount(boolean _isReservationOffsetEnabled)
    {
        InventInventoryDataServiceInventSumQueueTemp inventSumQueueTemp;
        select count(RecId) from inventSumQueueTemp where inventSumQueueTemp.PostFailed == true;

        if (inventSumQueueTemp.RecId > MinFailedRecordCount)
        {
            if (_isReservationOffsetEnabled)
            {
                InventInventoryDataServiceReservationQueueTemp reservationQueueTemp;
                select count(RecId) from reservationQueueTemp where reservationQueueTemp.PostFailed == true;

                // You might have one inventsum with multiple reservations, if inventsum failed count is larger than offset failed count,
                // which means that failed invensum is not all caused by offset feature, we increase failed count only in this case to prevent job delay recurrence increase too fast.
                if (inventSumQueueTemp.RecId <= reservationQueueTemp.RecId)
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllInventSumDataFails</Name>
				<Source><![CDATA[
    private boolean checkAllInventSumDataFails()
    {
        InventInventoryDataServiceInventSumQueueTemp inventSumQueueTemp;
        select firstOnly inventSumQueueTemp where inventSumQueueTemp.PostFailed == false;
        if (!inventSumQueueTemp)
        {
            select firstonly inventSumQueueTemp;
            if (inventSumQueueTemp.RecId != 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckAllWHSDataFails</Name>
				<Source><![CDATA[
    private boolean CheckAllWHSDataFails()
    {
        InventInventoryDataServiceWHSQueueTemp whsQueueTemp;
        select firstonly whsQueueTemp where whsQueueTemp.PostFailed == false;
        if (!whsQueueTemp)
        {
            select firstonly whsQueueTemp;
            if (whsQueueTemp.RecId != 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceStatus</Name>
				<Source><![CDATA[
    private void updateServiceStatus()
    {
        ttsbegin;
        InventInventoryDataServiceParameters inventoryServiceParameters = InventInventoryDataServiceParameters::find(true);

        if (inventoryServiceParameters.InventoryServiceStatus == InventoryServiceStatus::InitialSync)
        {
            inventoryServiceParameters.InventoryServiceStatus = InventoryServiceStatus::Enabled;
            inventoryServiceParameters.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeReservationQueueWithPartialSuccessReservationQueue</Name>
				<Source><![CDATA[
    private void mergeReservationQueueWithPartialSuccessReservationQueue()
    {
        InventInventoryDataServiceReservationQueueTemp              reservationQueueTemp;
        InventInventoryDataServiceReservationQueuePartialSuccess    reservationQueuePartialSuccess;
        
        ttsbegin;
        while select forupdate reservationQueueTemp
            join forupdate reservationQueuePartialSuccess
            where reservationQueueTemp.ItemId == reservationQueuePartialSuccess.ItemId
               && reservationQueueTemp.InventDimId == reservationQueuePartialSuccess.InventDimId
               && reservationQueueTemp.Company == reservationQueuePartialSuccess.Company
               && reservationQueueTemp.ReservationId == reservationQueuePartialSuccess.ReservationId
        {
            reservationQueueTemp.OffsetQty += reservationQueuePartialSuccess.OffsetQty;
            reservationQueueTemp.update();
            reservationQueuePartialSuccess.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLock</Name>
				<Source><![CDATA[
    private boolean existLock(str tableName)
    {
        Connection connection = new Connection();
        ResultSet resultSet;
        boolean lockExists;

        str sqlStatementText = strFmt(@"
            SELECT 1
            FROM sys.dm_tran_locks
            WHERE resource_associated_entity_id = OBJECT_ID('%1')
            AND request_status = 'GRANT'
            AND request_type = 'LOCK'
            AND request_mode = 'IX'
            ", tableName);

        sqlStatementText = strLRTrim(sqlStatementText);
        SqlStatementExecutePermission permission = new SqlStatementExecutePermission(sqlStatementText);

        // Open the code access permission scope.
        permission.assert();
        Statement statement = connection.createStatement();

        try
        {
            resultSet = statement.executeQueryWithParameters(sqlStatementText, SqlParams::create());
            statement.close();

            if (resultSet && resultSet.next())
            {
                lockExists = resultSet.getBoolean(1);
            }
        }
        catch
        {
            // An error was thrown from the statement execution.
            resultSet = null;
        }
        finally
        {
            connection.finalize();
        }

        return lockExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>