<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionReservationQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionReservationQuery</c> class reads the reservation information based on the 
/// warehouse inventory transcations.
/// </summary>
public final class WHSInventoryTransactionReservationQuery implements WHSInventoryTransactionReservationIQuery
{
    private WHSWorkId workIdToSearchFor;
    private WHSInventoryTransactionReferenceCategory inventoryTransactionReferenceCategory;
    private boolean blankDimensionsInQueryWorkAsWildcards = true;
    private InventDimParm inventDimParmReservationAllowBlank;
    private boolean mustFilterByReferenceCategory;
    private WhsInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the reservation information.
    /// </summary>
    /// <param name = "_itemId">An item to query reservations for.</param>
    /// <param name = "_queryStorageDimensions">Storage dimensions where to look for reservations.</param>
    /// <param name = "_queryProductTrackingDimensions">Optional product and tracking dimensions of the item to query reservations for.</param>
    /// <returns>An instance of the <c>WHSInventoryTransactionReservationDescriptor</c> class which describes the reservation.</returns>
    [Hookable(false)]
    public WHSInventoryTransactionReservationDescriptor findReservations(
        ItemId _itemId,
        WHSInventoryStorageDimensions _queryStorageDimensions,
        WHSInventoryProductTrackingDimensions _queryProductTrackingDimensions)
    {
        using (var activityContext = this.instrumentationLogger().inventoryTransactionQueriesActivities().findReservations())
        {
            this.validateQueryStorageDimensions(_queryStorageDimensions);
            this.validateQueryProductTrackingDimensions(_queryProductTrackingDimensions);

            var reservationsDescriptor = this.findReservationsImpl(_itemId, _queryStorageDimensions, _queryProductTrackingDimensions);
                
            this.instrumentationLogger().inventoryTransactionQueriesActivities().logNumberOfElements(
                activityContext,
                reservationsDescriptor.elementCount());

            return reservationsDescriptor;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkIdToSearchFor</Name>
				<Source><![CDATA[
    /// <summary>
    /// By setting this parameter query will return only reservations belonging to the given warehouse work.
    /// </summary>
    /// <param name = "_workId">A work id to query reservations for.</param>
    /// <returns></returns>
    [Hookable(false)]
    internal WHSInventoryTransactionReservationQuery setWorkIdToSearchFor(WHSWorkId _workId)
    {
        Debug::assert(!mustFilterByReferenceCategory || inventoryTransactionReferenceCategory == WHSInventoryTransactionReferenceCategoryEnum::Work);

        this.workIdToSearchFor = _workId;
        this.setInventoryTransactionReferenceCategory(WHSInventoryTransactionReferenceCategoryEnum::Work);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryTransactionReferenceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// By setting this parameter the query will return only reservations with the given reference category.
    /// </summary>
    /// <param name = "_referenceCategory">Inventory transaction reference category to query the reservations for.</param>
    /// <returns></returns>
    [Hookable(false)]
    internal WHSInventoryTransactionReservationQuery setInventoryTransactionReferenceCategory(WHSInventoryTransactionReferenceCategory _referenceCategory)
    {
        Debug::assert(!workIdToSearchFor || _referenceCategory == WHSInventoryTransactionReferenceCategoryEnum::Work);

        this.inventoryTransactionReferenceCategory = _referenceCategory;
        this.mustFilterByReferenceCategory = true;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBlankDimensionsInQueryWorkAsWildcards</Name>
				<Source><![CDATA[
    /// <summary>
    /// By setting this parameter the query will search by given dimensions but if a dimension is blank it will accept any value for the dimension.
    /// </summary>
    /// <param name = "_blankOrEqualStorageAndTrackingDimensions">true if search by blank dimensions should work as a wildcard; otherwise, false.</param>
    /// <returns></returns>
    [Hookable(false)]
    internal WHSInventoryTransactionReservationQuery setBlankDimensionsInQueryWorkAsWildcards(boolean _blankDimensionsInQueryWorkAsWildcards)
    {
        this.blankDimensionsInQueryWorkAsWildcards = _blankDimensionsInQueryWorkAsWildcards;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowBlankDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// By setting this parameter the query will search by given dimensions but it will allow the blank values as well for specified dimensions.
    /// </summary>
    /// <param name = "_inventDimParmReservationAllowBlank">Dimensions that are allowed to be blank.</param>
    /// <returns></returns>
    /// <remarks>
    /// It can mimic part of the behavior of the InventDimExistsJoinAllowBlank macro.
    /// For reservations WHS assumes that if a dim is blank, it must also be blank in the inventreserve tables.
    /// This is used for finding the maximum row values in InventReserve/InventSumDelta tables.
    /// </remarks>
    [Hookable(false)]
    internal WHSInventoryTransactionReservationQuery setAllowBlankDimensions(InventDimParm _inventDimParmReservationAllowBlank)
    {
        this.inventDimParmReservationAllowBlank = _inventDimParmReservationAllowBlank;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmToMimicWHSInventDimExistsJoin</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventDimParm inventDimParmToMimicWHSInventDimExistsJoin()
    {
        InventDimParm dimParmToMimicWHSInventDimExistsJoin;

        dimParmToMimicWHSInventDimExistsJoin.LicensePlateFlag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventBatchIdFlag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventGtdIdFlag_RU = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventOwnerIdFlag_RU = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventProfileIdFlag_RU = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventSerialIdFlag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventStatusFlag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension1Flag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension2Flag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension3Flag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension4Flag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension5Flag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension6Flag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension7Flag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension8Flag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension9Flag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension10Flag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension11Flag = NoYes::Yes;
        dimParmToMimicWHSInventDimExistsJoin.InventDimension12Flag = NoYes::Yes;

        return dimParmToMimicWHSInventDimExistsJoin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReservationsImpl</Name>
				<Source><![CDATA[
    private WHSInventoryTransactionReservationDescriptor findReservationsImpl(
        ItemId _itemId,
        WHSInventoryStorageDimensions _queryStorageDimensions,
        WHSInventoryProductTrackingDimensions _queryProductTrackingDimensions)
    {
        Map aggregatedReservationsMap = new Map(Types::Container, Types::Class);

        WHSInventoryTransaction inventoryTransaction;
        WHSInventoryItemSetElement inventoryItemSetElement;

        while select inventoryTransaction
            where  (inventoryTransaction.Type == WHSInventoryTransactionTypeEnum::PhysicalReservation || inventoryTransaction.Type == WHSInventoryTransactionTypeEnum::RemovedPhysicalReservation)
                && (!mustFilterByReferenceCategory || inventoryTransaction.ReferenceCategory == inventoryTransactionReferenceCategory)
                && (!workIdToSearchFor || inventoryTransaction.ReferenceId == workIdToSearchFor)  // if workId is provided, search only its reservations
                && inventoryTransaction.InventSiteId == _queryStorageDimensions.parmInventSiteId() // Site is always required
                && inventoryTransaction.InventLocationId == _queryStorageDimensions.parmInventLocationId() // Warehouse is always required
                && inventoryTransaction.WMSLocationId == _queryStorageDimensions.parmWMSLocationId() // Location is always required
                && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryStorageDimensions.parmLicensePlateId()) || inventoryTransaction.LicensePlateId == _queryStorageDimensions.parmLicensePlateId() || (this.inventDimParmReservationAllowBlank.LicensePlateFlag && inventoryTransaction.LicensePlateId == '')) // license plate condition is optional
        join inventoryItemSetElement
                where inventoryItemSetElement.ItemSetId == inventoryTransaction.ItemSetId
                    && inventoryItemSetElement.ItemId == _itemId
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmConfigId()) || inventoryItemSetElement.configId == _queryProductTrackingDimensions.parmConfigId() || (this.inventDimParmReservationAllowBlank.ConfigIdFlag && inventoryItemSetElement.configId == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventColorId()) || inventoryItemSetElement.inventColorId == _queryProductTrackingDimensions.parmInventColorId() || (this.inventDimParmReservationAllowBlank.InventColorIdFlag && inventoryItemSetElement.inventColorId == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventSizeId()) || inventoryItemSetElement.inventSizeId == _queryProductTrackingDimensions.parmInventSizeId() || (this.inventDimParmReservationAllowBlank.InventSizeIdFlag && inventoryItemSetElement.inventSizeId == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventStyleId()) || inventoryItemSetElement.inventStyleId == _queryProductTrackingDimensions.parmInventStyleId() || (this.inventDimParmReservationAllowBlank.InventStyleIdFlag && inventoryItemSetElement.inventStyleId == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventVersionId()) || inventoryItemSetElement.inventVersionId == _queryProductTrackingDimensions.parmInventVersionId() || (this.inventDimParmReservationAllowBlank.InventVersionIdFlag && inventoryItemSetElement.inventVersionId == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventBatchId()) || inventoryItemSetElement.inventBatchId == _queryProductTrackingDimensions.parmInventBatchId() || (this.inventDimParmReservationAllowBlank.InventBatchIdFlag && inventoryItemSetElement.inventBatchId == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventGtdId_RU()) || inventoryItemSetElement.inventGtdId_RU == _queryProductTrackingDimensions.parmInventGtdId_RU() || (this.inventDimParmReservationAllowBlank.InventGTDIdFlag_RU && inventoryItemSetElement.inventGtdId_RU == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventOwnerId_RU()) || inventoryItemSetElement.inventOwnerId_RU == _queryProductTrackingDimensions.parmInventOwnerId_RU() || (this.inventDimParmReservationAllowBlank.InventOwnerIdFlag_RU && inventoryItemSetElement.inventOwnerId_RU == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventProfileId_RU()) || inventoryItemSetElement.inventProfileId_RU == _queryProductTrackingDimensions.parmInventProfileId_RU() || (this.inventDimParmReservationAllowBlank.InventProfileIdFlag_RU && inventoryItemSetElement.inventProfileId_RU == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventSerialId()) || inventoryItemSetElement.inventSerialId == _queryProductTrackingDimensions.parmInventSerialId() || (this.inventDimParmReservationAllowBlank.InventSerialIdFlag && inventoryItemSetElement.inventSerialId == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventStatusId()) || inventoryItemSetElement.inventStatusId == _queryProductTrackingDimensions.parmInventStatusId() || (this.inventDimParmReservationAllowBlank.InventStatusFlag && inventoryItemSetElement.inventStatusId == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension1()) || inventoryItemSetElement.inventDimension1 == _queryProductTrackingDimensions.parmInventDimension1() || (this.inventDimParmReservationAllowBlank.InventDimension1Flag && inventoryItemSetElement.inventDimension1 == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension2()) || inventoryItemSetElement.inventDimension2 == _queryProductTrackingDimensions.parmInventDimension2() || (this.inventDimParmReservationAllowBlank.InventDimension2Flag && inventoryItemSetElement.inventDimension2 == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension3()) || inventoryItemSetElement.inventDimension3 == _queryProductTrackingDimensions.parmInventDimension3() || (this.inventDimParmReservationAllowBlank.InventDimension3Flag && inventoryItemSetElement.inventDimension3 == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension4()) || inventoryItemSetElement.inventDimension4 == _queryProductTrackingDimensions.parmInventDimension4() || (this.inventDimParmReservationAllowBlank.InventDimension4Flag && inventoryItemSetElement.inventDimension4 == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension5()) || inventoryItemSetElement.inventDimension5 == _queryProductTrackingDimensions.parmInventDimension5() || (this.inventDimParmReservationAllowBlank.InventDimension5Flag && inventoryItemSetElement.inventDimension5 == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension6()) || inventoryItemSetElement.inventDimension6 == _queryProductTrackingDimensions.parmInventDimension6() || (this.inventDimParmReservationAllowBlank.InventDimension6Flag && inventoryItemSetElement.inventDimension6 == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension7()) || inventoryItemSetElement.inventDimension7 == _queryProductTrackingDimensions.parmInventDimension7() || (this.inventDimParmReservationAllowBlank.InventDimension7Flag && inventoryItemSetElement.inventDimension7 == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension8()) || inventoryItemSetElement.inventDimension8 == _queryProductTrackingDimensions.parmInventDimension8() || (this.inventDimParmReservationAllowBlank.InventDimension8Flag && inventoryItemSetElement.inventDimension8 == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension9()) || inventoryItemSetElement.inventDimension9 == _queryProductTrackingDimensions.parmInventDimension9() || (this.inventDimParmReservationAllowBlank.InventDimension9Flag && inventoryItemSetElement.inventDimension9 == utcDateTimeNull()))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension10()) || inventoryItemSetElement.inventDimension10 == _queryProductTrackingDimensions.parmInventDimension10() || (this.inventDimParmReservationAllowBlank.InventDimension10Flag && inventoryItemSetElement.inventDimension10 == 0))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension11()) || inventoryItemSetElement.inventDimension11 == _queryProductTrackingDimensions.parmInventDimension11() || (this.inventDimParmReservationAllowBlank.InventDimension11Flag && inventoryItemSetElement.inventDimension11 == ''))
                    && ((this.blankDimensionsInQueryWorkAsWildcards && !_queryProductTrackingDimensions.parmInventDimension12()) || inventoryItemSetElement.inventDimension12 == _queryProductTrackingDimensions.parmInventDimension12() || (this.inventDimParmReservationAllowBlank.InventDimension12Flag && inventoryItemSetElement.inventDimension12 == ''))
        {
            this.addToAggregatedReservationsMap(aggregatedReservationsMap, inventoryTransaction, inventoryItemSetElement);
        }

        return this.convertAggregationMapToDescriptor(aggregatedReservationsMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyReservationExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there exist any potential reservation of interest.
    /// The intuition here is that in most scenarios there are no reservations for the given item / dimensions.
    /// We want to avoid going to transactions at all if it is clear that there are no reservations in on-hand.
    /// </summary>
    /// <param name = "_itemId">An item to check.</param>
    /// <param name = "_queryStorageDimensions">Storage dimensions where to look for reservations.</param>
    /// <param name = "_queryProductTrackingDimensions">Optional product and tracking dimensions of the item to query reservations for.</param>
    /// <returns>true if there are any reservations; otherwise, false.</returns>
    private boolean anyReservationExists(
        ItemId _itemId,
        WHSInventoryStorageDimensions _queryStorageDimensions,
        WHSInventoryProductTrackingDimensions _queryProductTrackingDimensions)
    {
        WHSInventReserve inventReserve;

        if (InventUseDimOfWHSInventReserveToggle::instance().isEnabled())
        {
            select firstonly RecId from inventReserve
                where  inventReserve.ItemId == _itemId
                    && inventReserve.ReservPhysical != 0
                    && inventReserve.InventSiteId == _queryStorageDimensions.parmInventSiteId()
                    && inventReserve.InventLocationId == _queryStorageDimensions.parmInventLocationId()
                    && inventReserve.WMSLocationId == _queryStorageDimensions.parmWMSLocationId()
                    && (!_queryStorageDimensions.parmLicensePlateId() || inventReserve.LicensePlateId == _queryStorageDimensions.parmLicensePlateId()) // license plate condition is optional
                    && (!_queryProductTrackingDimensions.parmConfigId() || inventReserve.configId == _queryProductTrackingDimensions.parmConfigId())
                    && (!_queryProductTrackingDimensions.parmInventBatchId() || inventReserve.inventBatchId == _queryProductTrackingDimensions.parmInventBatchId())
                    && (!_queryProductTrackingDimensions.parmInventColorId() || inventReserve.inventColorId == _queryProductTrackingDimensions.parmInventColorId())
                    && (!_queryProductTrackingDimensions.parmInventGtdId_RU() || inventReserve.inventGtdId_RU == _queryProductTrackingDimensions.parmInventGtdId_RU())
                    && (!_queryProductTrackingDimensions.parmInventOwnerId_RU() || inventReserve.inventOwnerId_RU == _queryProductTrackingDimensions.parmInventOwnerId_RU())
                    && (!_queryProductTrackingDimensions.parmInventProfileId_RU() || inventReserve.inventProfileId_RU == _queryProductTrackingDimensions.parmInventProfileId_RU())
                    && (!_queryProductTrackingDimensions.parmInventSerialId() || inventReserve.inventSerialId == _queryProductTrackingDimensions.parmInventSerialId())
                    && (!_queryProductTrackingDimensions.parmInventSizeId() || inventReserve.inventSizeId == _queryProductTrackingDimensions.parmInventSizeId())
                    && (!_queryProductTrackingDimensions.parmInventStatusId() || inventReserve.inventStatusId == _queryProductTrackingDimensions.parmInventStatusId())
                    && (!_queryProductTrackingDimensions.parmInventStyleId() || inventReserve.inventStyleId == _queryProductTrackingDimensions.parmInventStyleId())
                    && (!_queryProductTrackingDimensions.parmInventVersionId() || inventReserve.inventVersionId == _queryProductTrackingDimensions.parmInventVersionId())
                    && (!_queryProductTrackingDimensions.parmInventDimension1() || inventReserve.inventDimension1 == _queryProductTrackingDimensions.parmInventDimension1())
                    && (!_queryProductTrackingDimensions.parmInventDimension2() || inventReserve.inventDimension2 == _queryProductTrackingDimensions.parmInventDimension2())
                    && (!_queryProductTrackingDimensions.parmInventDimension3() || inventReserve.inventDimension3 == _queryProductTrackingDimensions.parmInventDimension3())
                    && (!_queryProductTrackingDimensions.parmInventDimension4() || inventReserve.inventDimension4 == _queryProductTrackingDimensions.parmInventDimension4())
                    && (!_queryProductTrackingDimensions.parmInventDimension5() || inventReserve.inventDimension5 == _queryProductTrackingDimensions.parmInventDimension5())
                    && (!_queryProductTrackingDimensions.parmInventDimension6() || inventReserve.inventDimension6 == _queryProductTrackingDimensions.parmInventDimension6())
                    && (!_queryProductTrackingDimensions.parmInventDimension7() || inventReserve.inventDimension7 == _queryProductTrackingDimensions.parmInventDimension7())
                    && (!_queryProductTrackingDimensions.parmInventDimension8() || inventReserve.inventDimension8 == _queryProductTrackingDimensions.parmInventDimension8())
                    && (!_queryProductTrackingDimensions.parmInventDimension9() || inventReserve.inventDimension9 == _queryProductTrackingDimensions.parmInventDimension9())
                    && (!_queryProductTrackingDimensions.parmInventDimension10() || inventReserve.inventDimension10 == _queryProductTrackingDimensions.parmInventDimension10())
                    && (!_queryProductTrackingDimensions.parmInventDimension11() || inventReserve.inventDimension11 == _queryProductTrackingDimensions.parmInventDimension11())
                    && (!_queryProductTrackingDimensions.parmInventDimension12() || inventReserve.inventDimension12 == _queryProductTrackingDimensions.parmInventDimension12());
        }
        else
        {
            InventDim inventDim;

            select firstonly RecId from inventReserve
                where  inventReserve.ItemId == _itemId
                    && inventReserve.ReservPhysical != 0
                exists join inventDim
                    where  inventDim.inventDimId == inventReserve.InventDimId
                        && inventDim.InventSiteId == _queryStorageDimensions.parmInventSiteId()
                        && inventDim.InventLocationId == _queryStorageDimensions.parmInventLocationId()
                        && inventDim.WMSLocationId == _queryStorageDimensions.parmWMSLocationId()
                        && (!_queryStorageDimensions.parmLicensePlateId() || inventDim.LicensePlateId == _queryStorageDimensions.parmLicensePlateId()) // license plate condition is optional
                        && (!_queryProductTrackingDimensions.parmConfigId() || inventDim.configId == _queryProductTrackingDimensions.parmConfigId())
                        && (!_queryProductTrackingDimensions.parmInventBatchId() || inventDim.inventBatchId == _queryProductTrackingDimensions.parmInventBatchId())
                        && (!_queryProductTrackingDimensions.parmInventColorId() || inventDim.inventColorId == _queryProductTrackingDimensions.parmInventColorId())
                        && (!_queryProductTrackingDimensions.parmInventGtdId_RU() || inventDim.inventGtdId_RU == _queryProductTrackingDimensions.parmInventGtdId_RU())
                        && (!_queryProductTrackingDimensions.parmInventOwnerId_RU() || inventDim.inventOwnerId_RU == _queryProductTrackingDimensions.parmInventOwnerId_RU())
                        && (!_queryProductTrackingDimensions.parmInventProfileId_RU() || inventDim.inventProfileId_RU == _queryProductTrackingDimensions.parmInventProfileId_RU())
                        && (!_queryProductTrackingDimensions.parmInventSerialId() || inventDim.inventSerialId == _queryProductTrackingDimensions.parmInventSerialId())
                        && (!_queryProductTrackingDimensions.parmInventSizeId() || inventDim.inventSizeId == _queryProductTrackingDimensions.parmInventSizeId())
                        && (!_queryProductTrackingDimensions.parmInventStatusId() || inventDim.inventStatusId == _queryProductTrackingDimensions.parmInventStatusId())
                        && (!_queryProductTrackingDimensions.parmInventStyleId() || inventDim.inventStyleId == _queryProductTrackingDimensions.parmInventStyleId())
                        && (!_queryProductTrackingDimensions.parmInventVersionId() || inventDim.inventVersionId == _queryProductTrackingDimensions.parmInventVersionId())
                        && (!_queryProductTrackingDimensions.parmInventDimension1() || inventDim.inventDimension1 == _queryProductTrackingDimensions.parmInventDimension1())
                        && (!_queryProductTrackingDimensions.parmInventDimension2() || inventDim.inventDimension2 == _queryProductTrackingDimensions.parmInventDimension2())
                        && (!_queryProductTrackingDimensions.parmInventDimension3() || inventDim.inventDimension3 == _queryProductTrackingDimensions.parmInventDimension3())
                        && (!_queryProductTrackingDimensions.parmInventDimension4() || inventDim.inventDimension4 == _queryProductTrackingDimensions.parmInventDimension4())
                        && (!_queryProductTrackingDimensions.parmInventDimension5() || inventDim.inventDimension5 == _queryProductTrackingDimensions.parmInventDimension5())
                        && (!_queryProductTrackingDimensions.parmInventDimension6() || inventDim.inventDimension6 == _queryProductTrackingDimensions.parmInventDimension6())
                        && (!_queryProductTrackingDimensions.parmInventDimension7() || inventDim.inventDimension7 == _queryProductTrackingDimensions.parmInventDimension7())
                        && (!_queryProductTrackingDimensions.parmInventDimension8() || inventDim.inventDimension8 == _queryProductTrackingDimensions.parmInventDimension8())
                        && (!_queryProductTrackingDimensions.parmInventDimension9() || inventDim.inventDimension9 == _queryProductTrackingDimensions.parmInventDimension9())
                        && (!_queryProductTrackingDimensions.parmInventDimension10() || inventDim.inventDimension10 == _queryProductTrackingDimensions.parmInventDimension10())
                        && (!_queryProductTrackingDimensions.parmInventDimension11() || inventDim.inventDimension11 == _queryProductTrackingDimensions.parmInventDimension11())
                        && (!_queryProductTrackingDimensions.parmInventDimension12() || inventDim.inventDimension12 == _queryProductTrackingDimensions.parmInventDimension12());
        }

        return inventReserve.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAggregationMapToDescriptor</Name>
				<Source><![CDATA[
    private WHSInventoryTransactionReservationDescriptor convertAggregationMapToDescriptor(Map _aggregatedReservationsMap)
    {
        WHSInventoryTransactionReservationDescriptor descriptor = WHSInventoryTransactionReservationDescriptor::construct();

        MapEnumerator aggregatedReservationsMapEnumerator = _aggregatedReservationsMap.getEnumerator();
        while (aggregatedReservationsMapEnumerator.moveNext())
        {
            WHSInventoryTransactionReservationQueryAggregateValue aggregatedValue = aggregatedReservationsMapEnumerator.currentValue();

            if (aggregatedValue.getHandlingQty() || aggregatedValue.getHandlingWeight())
            {
                WHSWorkInventTrans workInventTrans = WHSWorkInventTrans::findByInventoryTransactionOriginId(aggregatedValue.getTransactionOriginId());

                WHSInventoryTransactionReservationDescriptorElement descriptorElement = WHSInventoryTransactionReservationDescriptorElement::newFromWorkInventTrans(
                    workInventTrans,
                    aggregatedValue.getHandlingQty(),
                    aggregatedValue.getHandlingWeight(),
                    aggregatedValue.getDimensionsDescriptor());

                descriptor.add(descriptorElement);
            }
        }

        return descriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToAggregatedReservationsMap</Name>
				<Source><![CDATA[
    private void addToAggregatedReservationsMap(Map _aggregatedReservationsMap, WHSInventoryTransaction _inventoryTransaction, WHSInventoryItemSetElement _inventoryItemSetElement)
    {
        WHSWorkInventoryTransactionDimensionsDescriptor dimsDescriptor = WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventoryTransaction(
            _inventoryTransaction,
            _inventoryItemSetElement);

        container aggregatedValueKey = WHSInventoryTransactionReservationQueryAggregateValue::getKey(_inventoryTransaction.InventoryTransactionOriginId, dimsDescriptor);

        WHSInventoryTransactionReservationQueryAggregateValue aggregatedValue;

        if (_aggregatedReservationsMap.exists(aggregatedValueKey))
        {
            aggregatedValue = _aggregatedReservationsMap.lookup(aggregatedValueKey);
        }
        else
        {
            aggregatedValue = WHSInventoryTransactionReservationQueryAggregateValue::newFromValues(_inventoryTransaction.InventoryTransactionOriginId, dimsDescriptor);
            _aggregatedReservationsMap.add(aggregatedValueKey, aggregatedValue);
        }

        this.applyToAggregatedValue(aggregatedValue, _inventoryTransaction, _inventoryItemSetElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyToAggregatedValue</Name>
				<Source><![CDATA[
    private void applyToAggregatedValue(
        WHSInventoryTransactionReservationQueryAggregateValue _aggregatedValue,
        WHSInventoryTransaction _inventoryTransaction,
        WHSInventoryItemSetElement _inventoryItemSetElement)
    {
        WHSInventoryTransactionHandlingQty handlingQty;
        WHSInventoryTransactionHandlingWeight handlingWeight;

        if (_inventoryTransaction.Type == WHSInventoryTransactionTypeEnum::PhysicalReservation)
        {
            handlingQty = _inventoryItemSetElement.HandlingQty;
            handlingWeight = _inventoryItemSetElement.HandlingWeight;
        }
        else
        {
            handlingQty = -_inventoryItemSetElement.HandlingQty;
            handlingWeight = -_inventoryItemSetElement.HandlingWeight;
        }

        _aggregatedValue.addReservationQty(handlingQty, handlingWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQueryStorageDimensions</Name>
				<Source><![CDATA[
    private void validateQueryStorageDimensions(WHSInventoryStorageDimensions _queryStorageDimensions)
    {
        // license plate condition is optional.
        if (   !_queryStorageDimensions
            || !_queryStorageDimensions.parmInventSiteId()
            || !_queryStorageDimensions.parmInventLocationId()
            || !_queryStorageDimensions.parmWMSLocationId())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQueryProductTrackingDimensions</Name>
				<Source><![CDATA[
    private void validateQueryProductTrackingDimensions(WHSInventoryProductTrackingDimensions _queryProductTrackingDimensions)
    {
        if (!_queryProductTrackingDimensions)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSInventoryTransactionReservationQuery construct()
    {
        return new WHSInventoryTransactionReservationQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>