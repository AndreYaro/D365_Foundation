<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalPost</c> class posts either a journal or a transaction.
/// </summary>
final class LedgerJournalPost
{
    #ISOCountryRegionCodes

    #define.journalSizeToProcessInIL(5000)

    #localMacro.ilParams
        %1record,
        %1tableId,
        %1transferErrors,
        %1splitLargeJournal,
        %1suppressClientMessages,
        %1callingFormName
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LedgerJournalEngine ledgerJournalEngine;
        str callerName;

        const str SimulatePost = 'Simulate';

        boolean simulateWhenPosting = strContains(args.parm(), SimulatePost);

        if (args.caller() != null)
        {
            callerName = args.caller().name();

            if (args.dataset() == tableNum(LedgerJournalTrans))
            {
                LedgerILedgerJournalEngineProvider ledgerJournalEngineProvider = args.caller() as LedgerILedgerJournalEngineProvider;
                if (ledgerJournalEngineProvider)
                {
                    // Use information from the caller to optimize performance.
                    ledgerJournalEngine = ledgerJournalEngineProvider.ledgerJournalEngine();

                    if (ledgerJournalEngine)
                    {
                        ledgerJournalEngine.resetBudgetCheckResultsCache();
                    }
                }
            }
        }

        if (simulateWhenPosting)
        {
            LedgerJournalPost::simulatePost(args.record(), args.dataset(), Args.parmEnum(), true, false, callerName, ledgerJournalEngine);
        }
        else
        {
            LedgerJournalPost::post(args.record(), args.dataset(), args.parmEnum(), true, false, callerName, ledgerJournalEngine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>simulatePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Simulates the posting of either a journal or a transaction.
    /// </summary>
    /// <param name="_record">
    ///    The journal or transaction to post.
    /// </param>
    /// <param name="_tableId">
    ///    The Id of the table that '_record' comes from.
    /// </param>
    /// <param name="_transferErrors">
    ///    A flag that indicates whether or not errors should be transferred to a new journal.
    /// </param>
    /// <param name="_splitLargeJournal">
    ///    Flag that indicates whether or not large journals can be split. Basically, it allows one to
    ///    short-circuits the splitting process if you know it's not necessary; optional.
    /// </param>
    /// <param name="_suppressClientMessages">
    ///    Flag that indicates whether or not client messages (dialogs, etc.) need to be suppressed. Useful
    ///    for batch processes, etc., that can't have client interaction; optional.
    /// </param>
    /// <param name="_callingFormName">
    ///    The name of the calling form; optional.
    /// </param>
    /// <param name="_ledgerJournalEngine">
    ///    An instance of the <c>LedgerJournalEngine</c> class to use during posting.; optional.
    /// </param>
    /// <param name="_skipIL_RU">
    ///    Skip execution in .NET intermediate language.; optional.
    /// </param>
    /// <param name="_results_RU">
    ///    An instance of the <c>LedgerJournalCheckPostResults</c> class to use during posting.; optional.
    /// </param>
    /// <param name="_progressBarHide">
    ///    Hide progress bar during posting; optional.
    /// </param>
    /// <remarks>Posting is simulated to provide better validation.</remarks>
    public static void simulatePost(
        Common  _record,
        TableId _tableId,
        NoYes _transferErrors,
        boolean _splitLargeJournal = true,
        boolean _suppressClientMessages = false,
        str _callingFormName = '',
        LedgerJournalEngine _ledgerJournalEngine = null,
        boolean _skipIL_RU = false,
        LedgerJournalCheckPostResults _results_RU = null,
        boolean _progressBarHide = false)
    {
        LedgerJournalPost::postInternal(_record, _tableId, _transferErrors, _splitLargeJournal, _suppressClientMessages, _callingFormName, _ledgerJournalEngine, _skipIL_RU, _results_RU, _progressBarHide, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInternal</Name>
				<Source><![CDATA[
    private static void postInternal(
        Common  _record,
        TableId _tableId,
        NoYes _transferErrors,
        boolean _splitLargeJournal = true,
        boolean _suppressClientMessages = false,
        str _callingFormName = '',
        LedgerJournalEngine _ledgerJournalEngine = null,
        boolean _skipIL_RU = false,
        LedgerJournalCheckPostResults _results_RU = null,
        boolean _progressBarHide = false,
        boolean _simulatePost = false)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans;

        switch (_record.TableId)
        {
            case tableNum(LedgerJournalTable) :
                ledgerJournalTable = _record;
                break;

            case tableNum(LedgerJournalTrans) :
                ledgerJournalTrans = _record;
                ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);
                break;
        }

        if (LedgerJournalPostSimulateCheckLineLimitFlight::instance().isEnabled())
        {
            if (!BatchHeader::isExecutingInBatch() && (!_simulatePost && !ledgerJournalTable.validateIsUnderLineLimit()))
            {
                return;
            }
        }
        else
        {
            if (!BatchHeader::isExecutingInBatch() && !ledgerJournalTable.validateIsUnderLineLimit())
            {
                return;
            }
        }

        // <GEERU>
        if (! _skipIL_RU && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (! _ledgerJournalEngine ||  _ledgerJournalEngine.ledgerJournalTable().numOfLines() > #journalSizeToProcessInIL)
            {
                container packedPostingResults;

                using (LedgerJournalPostContext_RU context = new LedgerJournalPostContext_RU())
                {
                    context.simulatePost = _simulatePost;

                    packedPostingResults = LedgerJournalPost::PostInIL_RU(
                    [#ilParams(_),
                     (_ledgerJournalEngine &&  _ledgerJournalEngine.parmPostingResults_Server()) ?
                            _ledgerJournalEngine.parmPostingResults_Server().pack():
                            conNull()]);
                }

                if (_ledgerJournalEngine && packedPostingResults)
                {
                    _ledgerJournalEngine.parmPostingResults_Server().unpack(packedPostingResults);
                }
                return;
            }
        }
        // </GEERU>

        if (_splitLargeJournal)
        {
            boolean result;
            
            if (ledgerJournalTable.isEligableForDistributionBeforePost() && !_simulatePost)
            {
                LedgerJournalDistribute ledgerJournalDistribute = LedgerJournalDistribute::newLedgerJournalTable(
                    ledgerJournalTable,
                    _transferErrors,
                    true);

                container inputParameters = [classIdGet(ledgerJournalDistribute), ledgerJournalDistribute.pack()];

                [result] = SysOperationSandbox::callStaticMethod(
                    classIdGet(ledgerJournalDistribute),
                    staticMethodStr(LedgerJournalDistribute, distributeAndPostLargeJournalAsync),
                    inputParameters,
                    LedgerJournalDistribute::description());

                if (result)
                {
                    if (ledgerJournalTrans && FormDataUtil::getFormDataSource(ledgerJournalTrans))
                    {
                        FormDataUtil::getFormDataSource(ledgerJournalTrans).research();
                    }

                    return;
                }
            }
        }

        LedgerJournalCheckPost ledgerJournalCheckPost;
        LedgerJournalEngine ledgerJournalEngine;

        switch (_tableId)
        {
            case tableNum(LedgerJournalTable) :
                ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(_record, NoYes::Yes, _transferErrors);

                ledgerJournalTable = _record;

                break;

            case tableNum(LedgerJournalTrans) :
                ledgerJournalEngine = _ledgerJournalEngine;

                NoYes approval = NoYes::No;
                if (_callingFormName == formStr(LedgerJournalTransApprove))
                {
                    approval = NoYes::Yes;
                }

                ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTrans(_record,
                                                                                       LedgerJournalVoucher::Journal,
                                                                                       NoYes::Yes,
                                                                                       _transferErrors,
                                                                                       approval);

                // <GEERU>
                if (_results_RU)
                {
                    ledgerJournalCheckPost.parmPostingResults(_results_RU);
                }
                // </GEERU>

                break;

            default :
                throw error("@SYS18232");
        }

        ledgerJournalCheckPost.parmBeQuiet(_suppressClientMessages);
        ledgerJournalCheckPost.parmMCRProgressBarHide(_progressBarHide);
        ledgerJournalCheckPost.parmSimulatePosting(_simulatePost);

        // <GIN>
        #isoCountryRegionCodes
        boolean canContinue = true;
        boolean countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        boolean taxWithholdParameterMarked = TaxWithholdParameters_IN::checkTaxParameters();
        boolean taxWithholdWarningMsgMarked = TaxWithholdParameters_IN::checkWarningMsg();

        if (countryRegion_IN && taxWithholdParameterMarked && taxWithholdWarningMsgMarked)
        {
            switch (_record.TableId)
            {
                case tableNum(LedgerJournalTable) :
                    ledgerJournalTable = _record;
                    break;

                case tableNum(LedgerJournalTrans) :
                    ledgerJournalTrans = _record;
                    ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);
                    break;
            }

            if (ledgerJournalTable)
            {
                ledgerJournalCheckPost.parmLedgerJournalTable(ledgerJournalTable);

                while select ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                {
                    if (canContinue)
                    {
                        canContinue = LedgerJournalCheckPost_IN::checkPaymentWarningMsg(ledgerJournalTrans);
                    }
                    if (!canContinue)
                    {
                        return;
                    }
                }
            }
        }
        // <GIN>

        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost, ledgerJournalEngine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts either a journal or a transaction.
    /// </summary>
    /// <param name="_record">
    ///    The journal or transaction to post.
    /// </param>
    /// <param name="_tableId">
    ///    The Id of the table that '_record' comes from.
    /// </param>
    /// <param name="_transferErrors">
    ///    A flag that indicates whether or not errors should be transferred to a new journal.
    /// </param>
    /// <param name="_splitLargeJournal">
    ///    Flag that indicates whether or not large journals can be split. Basically, it allows one to
    ///    short-circuits the splitting process if you know it's not necessary; optional.
    /// </param>
    /// <param name="_suppressClientMessages">
    ///    Flag that indicates whether or not client messages (dialogs, etc.) need to be suppressed. Useful
    ///    for batch processes, etc., that can't have client interaction; optional.
    /// </param>
    /// <param name="_callingFormName">
    ///    The name of the calling form; optional.
    /// </param>
    /// <param name="_ledgerJournalEngine">
    ///    An instance of the <c>LedgerJournalEngine</c> class to use during posting.; optional.
    /// </param>
    /// <param name="_skipIL_RU">
    ///    Skip execution in .NET intermediate language.; optional.
    /// </param>
    /// <param name="_results_RU">
    ///    An instance of the <c>LedgerJournalCheckPostResults</c> class to use during posting.; optional.
    /// </param>
    /// <param name="_progressBarHide">
    ///    Hide progress bar during posting; optional.
    /// </param>
    public static void post(
        Common  _record,
        TableId _tableId,
        NoYes _transferErrors,
        boolean _splitLargeJournal = true,
        boolean _suppressClientMessages = false,
        str _callingFormName = '',
        LedgerJournalEngine _ledgerJournalEngine = null,
        boolean _skipIL_RU = false,
        LedgerJournalCheckPostResults _results_RU = null,
        boolean _progressBarHide = false)
    {
        LedgerJournalPost::postInternal(_record, _tableId, _transferErrors, _splitLargeJournal, _suppressClientMessages, _callingFormName, _ledgerJournalEngine, _skipIL_RU, _results_RU, _progressBarHide, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInIL_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Posts entire journal in IL.
    /// </summary>
    /// <param name="_params">
    ///    Container of parameters for the post method.
    /// </param>
    /// <returns>
    ///   Packed posting results.
    /// </returns>
    public static container postInIL_RU(container _params)
    {
        Common                          record;
        TableId                         tableId;
        NoYes                           transferErrors;
        boolean                         splitLargeJournal;
        boolean                         suppressClientMessages;
        str                             callingFormName;
        container                       packedResults;
        LedgerJournalCheckPostResults   results;
        [#ilParams, packedResults] = _params;
        if (packedResults)
        {
            results = LedgerJournalCheckPostResults::construct();
            results.unpack(packedResults);
        }

        LedgerJournalPostContext_RU context = LedgerJournalPostContext_RU::current();
        if (context && context.simulatePost == true)
        {
            LedgerJournalPost::simulatePost(#ilParams, null, true, results);
        }
        else
        {
            LedgerJournalPost::post(#ilParams, null, true, results);
        }

        return results ? results.pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a whole ledger journal.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The journal to post.
    /// </param>
    /// <param name="_transferErrors">
    /// A flag that indicates whether to transfer errors.
    /// </param>
    /// <param name="_splitLargeJournal">
    /// A flag that determines whether large journals can be split; optional. Basically, it lets you
    /// short-circuit the splitting process if you know it is not required.
    /// </param>
    /// <param name="_suppressClientMessages">
    /// A flag that determines whether client messages (dialog boxes, etc.) must be suppressed; optional.
    /// Useful for batch processes, etc., that cannot have client interaction.
    /// </param>
    /// <param name="_progressBarHide">
    ///    Hide progress bar during posting; optional.
    /// </param>
    public static void postJournal(
        LedgerJournalTable  _ledgerJournalTable,
        NoYes               _transferErrors,
        boolean             _splitLargeJournal = true,
        boolean             _suppressClientMessages = false,
        boolean             _progressBarHide = false)
    {
        LedgerJournalPost::post(
            _ledgerJournalTable,
            tableNum(LedgerJournalTable),
            _transferErrors,
            _splitLargeJournal,
            _suppressClientMessages,
            '',     //_callingFormName
            null,   //_ledgerJournalEngine
            false,  //_skipIL_RU
            null,   //_results_RU
            _progressBarHide);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>