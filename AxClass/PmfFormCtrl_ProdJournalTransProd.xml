<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdJournalTransProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PmfFormCtrl_ProdJournalTransProd</c> class is the form control handler for the
/// <c>ProdJournalTransProd</c> form.
/// </summary>
class PmfFormCtrl_ProdJournalTransProd extends PmfFormCtrl
{
    PmfTableLookupExtended  pmfTableLookupProductsCanBeRAF;
    InventDim               inventDim;
    FormDataSource          inventDim_ds;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the change of the <c>ItemId</c> field is editable.
    /// </summary>
    /// <returns>
    /// true if the order is a batch order; otherwise, false .
    /// </returns>
    /// <remarks>
    /// The item ID is only editable if the formula allows for co-byproduct variations.
    /// </remarks>
    public NoYes allowEditItemId()
    {
        return this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowsCoByProductVariations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the current production order allows for variations of the co-products as outputs of
    /// the production.
    /// </summary>
    /// <returns>
    /// true if the order allows for variations of the outputs; otherwise, false.
    /// </returns>
    public NoYes allowsCoByProductVariations()
    {
        ProdJournalProd     prodJournalProd = buffer;

        if (prodJournalProd.ProdId)
        {
            return prodJournalProd.prodTable().PmfCoByVarAllow;
        }

        return this.getCallerProdTable().PmfCoByVarAllow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>active</c> event has been processed for the data source.
    /// </summary>
    public void dataSourceActivePost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the fields on the <c>ProdJournalProd</c> record.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field for which to handle the lookup.
    /// </param>
    /// <param name="_formControl">
    /// The form control that initiates the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// An additional filter for the lookup
    /// </param>
    public void fieldLookup(fieldId _fieldId, FormControl _formControl, str _filterStr)
    {
        ProdJournalProd prodJournalProd = buffer;

        switch (_fieldId)
        {
            case fieldnum(ProdJournalProd, ItemId) :
                if (this.allowsCoByProductVariations())
                {
                    InventTable::pmflookupItemIdCoBy(_formControl);
                }
                else
                {
                    if (pmfTableLookupProductsCanBeRAF != null)
                    {
                        //dispose the previous lookup
                        pmfTableLookupProductsCanBeRAF.disposeNotifier();
                        pmfTableLookupProductsCanBeRAF = null;
                    }
                    pmfTableLookupProductsCanBeRAF = PmfProdCoBy::lookupBatchOrderTransItems(_formControl, prodJournalProd.ProdId);
                }
                break;
            case fieldnum(ProdJournalProd, InventTransId) :
                if (prodJournalProd.ProdId)
                {
                    PmfProdCoBy::lookupInventTransId(_formControl, prodJournalProd.ProdId);
                }
                break;
            default :
                super(_fieldId, _formControl, _filterStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modification of fields for the <c>ProdJournalProd</c> data source.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field that has changed.
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        ProdJournalFormTransProd    journalFormTrans;
        ProdJournalProd             prodJournalProd = buffer;
        Object                      formObject = formRun;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(ProdJournalProd, ProdId) :
                this.updateDesign();
                break;
            case fieldnum(ProdJournalProd, ItemId) :
                if (!prodJournalProd.InventTransId && prodJournalProd.PmfProductType != PmfProductType::None)
                {
                    prodJournalProd.InventTransId = this.getItemRefTransId();
                    prodJournalProd.modifiedField(fieldnum(ProdJournalProd, InventTransId));
                    this.fieldModified(fieldnum(ProdJournalProd, InventTransId));

                    if (!prodJournalProd.InventTransId)
                    {
                        prodJournalProd.InventTransId
                            = NumberSeq::newGetNum(
                                InventParameters::numRefInventTransId()).num();
                    }
                }

                journalFormTrans = formObject.journalForm();
                if (journalFormTrans)
                {
                    if (journalFormTrans.allowDimEdit())
                    {
                        inventDim.data(InventDim::find(prodJournalProd.InventDimId));
                        inventDim_ds.allowEdit(true);
                    }
                    else
                    {
                        inventDim_ds.allowEdit(false);
                    }

                    journalFormTrans.updateDesign(InventDimFormDesignUpdate::FieldChange);
                }
                break;
            case fieldnum(ProdJournalProd, InventTransId) :
                if (prodJournalProd.prodTable().mandatoryRegister() == false)
                {
                    inventDim.data(InventDim::find(prodJournalProd.InventDimId));
                    if (inventDim_ds)
                    {
                        inventDim_ds.allowEdit(true);
                    }
                }
                else if (inventDim_ds)
                {
                    inventDim_ds.allowEdit(false);
                }

                journalFormTrans = formObject.journalForm();
                if (journalFormTrans)
                {
                    journalFormTrans.updateDesign(InventDimFormDesignUpdate::FieldChange);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemRefTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the product transaction, if the product was planned.
    /// </summary>
    /// <returns>
    /// The ID of the transaction.
    /// </returns>
    private InventTransId getItemRefTransId()
    {
        TmpPmfItemTransProdLookup   selectedTmpPmfItemTransProdLookup;
        ProdJournalProd             prodJournalProd = buffer;
        ProdTable                   prodTable;
        InventMovement              movement;
        PmfProdCoBy                 pmfProdCoBy;

        if (!(prodJournalProd.ProdId && prodJournalProd.ItemId))
        {
            return '';
        }

        if (pmfTableLookupProductsCanBeRAF != null)
        {
            selectedTmpPmfItemTransProdLookup = pmfTableLookupProductsCanBeRAF.parmSelectionRecord();
            //unlink the lookup so it does not consume memory
            pmfTableLookupProductsCanBeRAF.disposeNotifier();

            if (selectedTmpPmfItemTransProdLookup
                && selectedTmpPmfItemTransProdLookup.InventTransId
                && prodJournalProd.ItemId == selectedTmpPmfItemTransProdLookup.ItemId)
            {
                return selectedTmpPmfItemTransProdLookup.InventTransId;
            }
        }

        if (prodJournalProd.isCoBy())
        {
            pmfProdCoBy = PmfProdCoBy::findByProdItemDim(
                prodJournalProd.ProdId,
                prodJournalProd.ItemId,
                '');  // always pick the dimension of the transaction
            return pmfProdCoBy.InventTransId;
        }
        else if (prodJournalProd.PmfProductType == PmfProductType::Formula)
        {
            prodTable = prodJournalProd.prodTable();
            movement = prodJournalProd.inventMovementChild(prodTable);
            return movement.transId();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the form element has been initialized
    /// </summary>
    /// <remarks>
    /// Iinitializes the form button manager and adjusts various
    /// properties for the usage of the form with formulas
    /// </remarks>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        this.registerCtrlRule(
            formRun.design().controlName(formControlStr(ProdJournalTransProd,Grid)),
            formRun.design().controlName(formControlStr(ProdJournalTransProd,ctrlGridProdId)),
            methodstr(PmfFormCtrl_ProdJournalTransProd, isFormulaEnabled),
            ButtonRuleEffectType::Label,
            enum2str(PmfOrderType::ProcessBatch));

        this.registerCtrlRule(
            formRun.design().controlName(formControlStr(ProdJournalTransProd,JournalLine)),
            formRun.design().controlName(formControlStr(ProdJournalTransProd,JournalLine_ProdId)),
            methodstr(PmfFormCtrl_ProdJournalTransProd, isFormulaEnabled),
            ButtonRuleEffectType::Label,
            enum2str(PmfOrderType::ProcessBatch));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order is a production batch order.
    /// </summary>
    /// <returns>
    /// true if the order is a production batch order; otherwise, false .
    /// </returns>
    private NoYes isFormulaEnabled()
    {
        ProdJournalProd     prodJournalProd = buffer;

        if (prodJournalProd.ProdId)
        {
            return #PmfEnabled &&
                prodJournalProd.prodTable().ProdType == ProdType::Process;
        }

        ProdTable           prodTable = this.getCallerProdTable();

        return #PmfEnabled
            && prodTable.ProdType == ProdType::Process;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallerProdTable</Name>
				<Source><![CDATA[
    private ProdTable getCallerProdTable()
    {
        Common callerBuffer = this.callerBuffer();
        ProdJournalTable    prodJournalTable;
        ProdTable res;

        if (callerBuffer is prodJournalTable)
        {
            prodJournalTable = this.callerBuffer();
            res = ProdTable::find(prodJournalTable.ProdId);
        }
        else if (callerBuffer is ProdTable)
        {
            res = callerBuffer;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data sources that are that will be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A <c>Common</c> buffer that belongs to the first data source.
    /// </param>
    /// <param name="_datasources2">
    /// A <c>Common</c> buffer that belongs to the second data source.
    /// </param>
    /// <param name="_datasources3">
    /// A <c>Common</c> buffer that belongs to the third data source.
    /// </param>
    /// <param name="_datasources4">
    /// A <c>Common</c> buffer that belongs to the fourth data source.
    /// </param>
    /// <param name="_datasources5">
    /// A <c>Common</c> buffer that belongs to the fifth data source.
    /// </param>
    /// <remarks>
    /// Up to five data sources can be passed. If the implementation requires more data sources additional
    /// custom methods should be implemented on the rule implementer class.The method is called by
    /// <c>FormButtonManager</c> class on the rule class that implements the <c>ButtonStateProvider</c>
    /// interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = inventDim,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdJournalProd))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId == tablenum(InventDim))
        {
            inventDim = _datasources2;
            inventDim_ds = FormDataUtil::getFormDataSource(inventDim);
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form design.
    /// </summary>
    /// <remarks>
    /// Updates the states and visibility of form controls, depending on the type of production order.
    /// </remarks>
    public void updateDesign()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.enableDSField(
                fieldnum(ProdJournalProd, InventTransId),
                this.isFormulaEnabled());

            this.enableDSField(
                fieldnum(ProdJournalProd, ItemId),
                this.isFormulaEnabled() && this.allowEditItemId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_ProdJournalTransProd construct()
    {
        return new PmfFormCtrl_ProdJournalTransProd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PmfFormCtrl_ProdJournalTransProd</c> class by using a
    /// <c>FormRun</c> object.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>FormRun</c> object for which to create the form control handler.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PmfFormCtrl_ProdJournalTransProd</c> class by using a <c>FormRun</c>
    /// object.
    /// </returns>
    public static PmfFormCtrl_ProdJournalTransProd newFromForm(FormRun _formRun)
    {
        PmfFormCtrl_ProdJournalTransProd frmCtrl;

        frmCtrl = PmfFormCtrl_ProdJournalTransProd::construct();
        frmCtrl.parmFormRun(_formRun);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>