<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnhandReportLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventOnhandReportLines</c> class stores lines on the Onhand report in memory.
/// </summary>
class InventOnhandReportLines
{
    RecordSortedList                reportLines;
    InventOnhandStorageReportLine   line;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a line on the report.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> to find.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> buffer with the inventory dimensions to find.
    /// </param>
    /// <returns>
    /// The specified <c>InventOnhandStorageReportLine</c> buffer representing a line on the report.
    /// </returns>
    public InventOnhandStorageReportLine create(
        ItemId              _itemId,
        InventDim           _inventDim)
    {
        InventOnhandStorageReportLine   localLine;

        localLine.ItemId = _itemId;
        localLine.initFromInventDim(_inventDim);
        reportLines.find(localLine);

        return localLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flush</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flushes all report lines.
    /// </summary>
    public void flush()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record sorted list.
    /// </summary>
    private void init()
    {
        reportLines = new RecordSortedList(tableNum(InventOnhandStorageReportLine));
        container sortOrder = [fieldNum(InventOnhandStorageReportLine, ItemId)];
        var enumerator  = InventDim::dimFieldListEnumerator();
        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            sortOrder += [InventDimFieldsMap::mappedFieldId(inventDimFieldId, tableStr(InventOnhandStorageReportLine))];
        }
        reportLines.sortOrderFromContainer(sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventOnhandStorageReportLine</Name>
				<Source><![CDATA[
    private InventOnhandStorageReportLine initInventOnhandStorageReportLine(InventOnhandStorageReportLine _inventOnhandStorageReportLine, InventSum _inventSum, InventDim _inventDim)
    {
        InventIAvailability inventAvailability = InventAvailabilityProvider::findBySumDim(_inventSum, _inventDim).parmInventAvailability();
        _inventOnhandStorageReportLine.ItemId          = _inventSum.ItemId;
        _inventOnhandStorageReportLine.Deducted        = _inventSum.Deducted;
        _inventOnhandStorageReportLine.PostedQty       = _inventSum.PostedQty;
        _inventOnhandStorageReportLine.Received        = _inventSum.Received;
        _inventOnhandStorageReportLine.Ordered         = inventAvailability.ordered();
        _inventOnhandStorageReportLine.AvailOrdered    = inventAvailability.availTotal();
        _inventOnhandStorageReportLine.AvailPhysical   = inventAvailability.availPhysical();
        _inventOnhandStorageReportLine.ReservOrdered   = inventAvailability.reservOrdered();
        _inventOnhandStorageReportLine.ReservPhysical  = inventAvailability.reservPhysical();

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);
        _inventOnhandStorageReportLine.InventDimFieldsMap::initAllDimensionsFrom(_inventDim);

        return _inventOnhandStorageReportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProductOnhand</Name>
				<Source><![CDATA[
    public void insertProductOnhand(InventOnhandStorageReportLine inventOnhandStorageReportLine, InventSum _inventSum, InventDim _inventDim)
    {
        this.insert(this.initInventOnhandStorageReportLine(inventOnhandStorageReportLine, _inventSum, _inventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCWProductOnhand</Name>
				<Source><![CDATA[
    public void insertCWProductOnhand(InventOnhandStorageReportLine inventOnhandStorageReportLine, InventSum _inventSum, InventDim _inventDim)
    {
        inventOnhandStorageReportLine  = this.initInventOnhandStorageReportLine(inventOnhandStorageReportLine, _inventSum, _inventDim);

        inventOnhandStorageReportLine.PdsCWAvailOrdered       = _inventSum.PdsCWAvailOrdered;
        inventOnhandStorageReportLine.PdsCWAvailPhysical      = _inventSum.PdsCWAvailPhysical;
        inventOnhandStorageReportLine.PdsCWDeducted           = _inventSum.PdsCWDeducted;
        inventOnhandStorageReportLine.PdsCWOrdered            = _inventSum.PdsCWOrdered;
        inventOnhandStorageReportLine.PdsCWPostedQty          = _inventSum.PdsCWPostedQty;
        inventOnhandStorageReportLine.PdsCWReceived           = _inventSum.PdsCWReceived;
        inventOnhandStorageReportLine.PdsCWReservOrdered      = _inventSum.PdsCWReservOrdered;
        inventOnhandStorageReportLine.PdsCWReservPhysical     = _inventSum.PdsCWReservPhysical;
        this.insert(inventOnhandStorageReportLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a line into the report lines.
    /// </summary>
    /// <param name="_line">
    /// The line to insert.
    /// </param>
    /// <remarks>
    /// The line will replace an existing line.
    /// </remarks>
    public void insert(InventOnhandStorageReportLine _line)
    {
        reportLines.ins(_line, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert all the report lines to the database.
    /// </summary>
    /// <remarks>
    /// The report lines are flushed when inserted into the database.
    /// </remarks>
    public void insertDatabase()
    {
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(InventOnhandStorageReportLine));
        if (reportLines.first(line))
        {
            do
            {
                recordInsertList.add(line);
            }
            while (reportLines.next(line));
        }
        recordInsertList.insertDatabase();
        this.flush();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventOnhandReportLines construct()
    {
        return new InventOnhandReportLines();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>