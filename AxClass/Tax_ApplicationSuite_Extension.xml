<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(Tax))]
public final class Tax_ApplicationSuite_Extension
{
    public boolean isInsaveAndPost_IT = false;
    public Set custIntentLetterSet_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canPostTrans</Name>
				<Source><![CDATA[
    public boolean canPostTrans(TaxAmount _taxAmount, LedgerPostingController _ledgerPostingController)
    {
        boolean ret = next canPostTrans(_taxAmount, _ledgerPostingController);

        if (FeatureStateProvider::isFeatureEnabled(PostingZeroInvoicesInGeneralLedgerFeature::instance()))
        {
            ret = (ret || (_ledgerPostingController.getReference().isZeroInvoice_IT()));

            if (_ledgerPostingController.getReference().isZeroInvoice_IT())
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00044, funcName());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSaveAndPostTrans</Name>
				<Source><![CDATA[
    public boolean canSaveAndPostTrans(
        TmpTaxWorkTrans _taxWorkTrans,
        TaxTrans _taxTrans,
        TaxAmountCur _taxAmountCur,
        LedgerPostingController _ledgerPostingController)
    {
        boolean ret = next canSaveAndPostTrans(
            _taxWorkTrans,
            _taxTrans,
            _taxAmountCur,
            _ledgerPostingController);

        if (FeatureStateProvider::isFeatureEnabled(PostingZeroInvoicesInGeneralLedgerFeature::instance()))
        {
            ret = _taxworkTrans.ExemptTax == NoYes::No
                && (_taxAmountCur
                    || _taxTrans.TaxAmount
                    || _ledgerPostingController.getReference().isZeroInvoice_IT());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustIntentLetter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check consistency of intent letter.
    /// </summary>
    /// <param name = "_taxTrans">The sales tax to retrieve the intent letter.</param>
    /// <returns>true if no inconsistency was found; false otherwise.</returns>
    public boolean checkCustIntentLetter_IT(TaxTrans _taxTrans)
    {
        boolean ok = true;

        CustIntentLetter_IT custIntentLetter = CustIntentLetter_IT::findInternalId(_taxTrans.taxTrans_IT().IntentLetterId);

        if (!custIntentLetter)
        {
            ok = checkFailed(strFmt("@ExtendedItallianLocalization:LetterNotExist", _taxTrans.taxTrans_IT().IntentLetterId));
        }

        if (ok && custIntentLetter.Status != IntentLetterStatus_IT::Open)
        {
            ok = checkFailed(strFmt(
                "@ExtendedItallianLocalization:LeterIsInStatus",
                _taxTrans.taxTrans_IT().IntentLetterId,
                custIntentLetter.Status));
        }

        if (ok && (custIntentLetter.FromDate && custIntentLetter.ToDate))
        {
            //Check validity period except credit notes.
            if (!Tax::isSourceLineCreditNote(_taxTrans) && (_taxTrans.TransDate < custIntentLetter.FromDate || _taxTrans.TransDate > custIntentLetter.ToDate))
            {
                ok = checkFailed(strFmt(
                    "@ExtendedItallianLocalization:PlafondDateOutOfLetterRange",
                    _taxTrans.TransDate, custIntentLetter.InternalLetterId,
                    custIntentLetter.FromDate,
                    custIntentLetter.ToDate));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustIntentLetterSet_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>custIntentLetterSet</c> object.
    /// </summary>
    protected void initCustIntentLetterSet_IT()
    {
        custIntentLetterSet_IT = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intentLetterId_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the intent letter ID from various scenarios.
    /// </summary>
    /// <param name = "_sourceTableId">The table ID.</param>
    /// <param name = "_sourceRecId">The record ID.</param>
    /// <returns>The foud intent letter ID.</returns>
    [Hookable(true)]
    protected IntentLetterId_IT intentLetterId_IT(TableId _sourceTableId, RecId _sourceRecId)
    {
        if (this is TaxProjInvoice)
        {
            TaxProjInvoice taxProjInvoice = this;
            return TaxProjInvoice.intentLetterId_tpi_IT(_sourceTableId,_sourceRecId);
        }
        else if (this is TaxPostJournal)
        {
            TaxPostJournal taxPostJournal = this;
            return taxPostJournal.intentLetterId_tpj_IT(_sourceRecId);
        }
        else
        {
            IntentLetterId_IT intentLetterId;

            switch (_sourceTableId)
            {
                case tableNum(CustInvoiceLine):
                    CustInvoiceLine custInvoiceLine = custInvoiceLine::find(_sourceRecId);
                    intentLetterId = custInvoiceLine.custInvoiceTable().IntentLetterId_IT;
                    break;

                case tableNum(CustInvoiceTrans):
                    CustInvoiceJour custInvoiceJour;
                    CustInvoiceTrans custInvoiceTrans;
                    select firstonly custInvoiceJour
                        exists join custInvoiceTrans
                        where custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId
                            && custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate
                            && custInvoiceTrans.SalesId == custInvoiceJour.SalesId
                            && custInvoiceTrans.NumberSequenceGroup == custInvoiceJour.numberSequenceGroup
                            && custInvoiceTrans.RecId == _sourceRecId;
                    intentLetterId = custInvoiceJour.IntentLetterInternalId_IT;
                    break;

                case tableNum(VendInvoiceTrans):
                    VendInvoiceJour vendInvoiceJour;
                    VendInvoiceTrans vendInvoiceTrans;
                    select firstonly vendInvoiceJour
                        exists join vendInvoiceTrans
                        where vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                            && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                            && vendInvoiceTrans.PurchId == vendInvoiceJour.purchId
                            && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                            && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.internalInvoiceId
                            && vendInvoiceTrans.RecId == _sourceRecId;
                    intentLetterId = vendInvoiceJour.IntentLetterId_IT;
                    break;

                case tableNum(VendInvoiceInfoLine):
                    VendInvoiceInfoLine vendInvoiceInfoLine = vendInvoiceInfoLine::findRecId(_sourceRecId);

                    if (vendInvoiceInfoLine.OrigPurchId)
                    {
                        intentLetterId = vendInvoiceInfoLine.purchTable().IntentLetterId_IT;
                    }
                    else
                    {
                        VendInvoiceInfoLine vendInvoiceInfoLine_sibling;
                        PurchTable purchTable;
                        //Line inserted manually during invoicing phase
                        select firstOnly IntentLetterId_IT from purchTable
                            where purchTable.IntentLetterId_IT
                            exists join vendInvoiceInfoLine_sibling
                                where vendInvoiceInfoLine_sibling.OrigPurchId == purchTable.PurchId
                                    && vendInvoiceInfoLine_sibling.ParmId == vendInvoiceInfoLine.ParmId
                                    && vendInvoiceInfoLine_sibling.TableRefId == vendInvoiceInfoLine.TableRefId;

                        intentLetterId = purchTable.IntentLetterId_IT;
                    }

                    break;

                case tableNum(MarkupTrans):
                    MarkupTrans markupTransLocal;
                    select firstOnly TransRecId, TransTableId
                        from markupTransLocal
                        where markupTransLocal.RecId == _sourceRecId;

                    switch (markupTransLocal.TransTableId)
                    {
                        case tableNum(CustInvoiceTrans):
                            CustInvoiceJour custInvoiceJourMarkup;
                            CustInvoiceTrans custInvoiceTransMarkup;
                            select firstonly custInvoiceJourMarkup
                                exists join custInvoiceTransMarkup
                                where custInvoiceTransMarkup.InvoiceId == custInvoiceJourMarkup.InvoiceId
                                    && custInvoiceTransMarkup.InvoiceDate == custInvoiceJourMarkup.InvoiceDate
                                    && custInvoiceTransMarkup.SalesId == custInvoiceJourMarkup.SalesId
                                    && custInvoiceTransMarkup.NumberSequenceGroup == custInvoiceJourMarkup.numberSequenceGroup
                                    && custInvoiceTransMarkup.RecId == markupTransLocal.TransRecId;
                            intentLetterId = custInvoiceJourMarkup.IntentLetterInternalId_IT;
                            break;

                        case tableNum(CustInvoiceJour):
                            intentLetterId = CustInvoiceJour::findRecId(markupTransLocal.TransRecId).IntentLetterInternalId_IT;
                            break;

                        case tableNum(CustInvoiceTable):
                            intentLetterId = CustInvoiceTable::findRecId(markupTransLocal.TransRecId).IntentLetterId_IT;
                            break;

                        case tableNum(VendInvoiceTrans):
                            VendInvoiceJour vendInvoiceJourMarkup;
                            VendInvoiceTrans vendInvoiceTransMarkup;
                            select firstonly vendInvoiceJourMarkup
                                exists join vendInvoiceTransMarkup
                                where vendInvoiceTransMarkup.InvoiceId == vendInvoiceJourMarkup.InvoiceId
                                    && vendInvoiceTransMarkup.InvoiceDate == vendInvoiceJourMarkup.InvoiceDate
                                    && vendInvoiceTransMarkup.PurchId == vendInvoiceJourMarkup.purchId
                                    && vendInvoiceTransMarkup.NumberSequenceGroup == vendInvoiceJourMarkup.numberSequenceGroup
                                    && vendInvoiceTransMarkup.InternalInvoiceId == vendInvoiceJourMarkup.internalInvoiceId
                                    && vendInvoiceTransMarkup.RecId == markupTransLocal.TransRecId;
                            intentLetterId = vendInvoiceJourMarkup.IntentLetterId_IT;
                            break;

                        case tableNum(VendInvoiceJour):
                            intentLetterId = VendInvoiceJour::findRecId(markupTransLocal.TransRecId).IntentLetterId_IT;
                            break;

                        case tableNum(VendInvoiceInfoLine):
                            PurchTable purchTableInfo;
                            VendInvoiceInfoLine vendInvoiceInfoLineInfo;
                            select firstOnly IntentLetterId_IT from purchTableInfo
                                exists join vendInvoiceInfoLineInfo
                                    where vendInvoiceInfoLineInfo.RecId == markupTransLocal.TransRecId
                                        && vendInvoiceInfoLineInfo.OrigPurchId == purchTableInfo.PurchId;
                            intentLetterId = purchTableInfo.IntentLetterId_IT;
                            break;

                        case tableNum(VendInvoiceInfoSubTable):
                            PurchTable purchTableMarkup;
                            VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
                            select firstOnly IntentLetterId_IT from purchTableMarkup
                                exists join vendInvoiceInfoSubTable
                                    where vendInvoiceInfoSubTable.RecId == markupTransLocal.TransRecId
                                        && vendInvoiceInfoSubTable.OrigPurchId == purchTableMarkup.PurchId;
                            intentLetterId = purchTableMarkup.IntentLetterId_IT;
                            break;
                        case tablenum(VendInvoiceInfoTable):
                            PurchTable purchTablePendInvoice;
                            VendInvoiceInfoTable vendInvoiceInfoTable;

                            select firstOnly IntentLetterId_IT from purchTablePendInvoice
                                exists join vendInvoiceInfoTable
                                    where vendInvoiceInfoTable.PurchId == purchTablePendInvoice.PurchId
                                        && vendInvoiceInfoTable.RecId == markupTransLocal.TransRecId;
                            intentLetterId = purchTablePendInvoice.IntentLetterId_IT;
                            break;

                    }
                    break;

                default:
                    break;
            }

            return intentLetterId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intentLetterOrigin_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if current intent letter is type customer or vendor.
    /// </summary>
    /// <returns>Type customer, type vendor or none depending on the scenario.</returns>
    protected IntentLetterOrigin_IT intentLetterOrigin_IT()
    {
        if (this is TaxPurchInvoice)
        {
            return IntentLetterOrigin_IT::Vend;
        }
        else if (this is TaxFreeInvoice_Invoice)
        {
            return IntentLetterOrigin_IT::Cust;
        }
        else if (this is TaxPostJournal)
        {
            return IntentLetterOrigin_IT::Vend;
        }
        else if (this is TaxProjInvoice)
        {
            return IntentLetterOrigin_IT::Cust;
        }
        else if (this is TaxSalesInvoice)
        {
            return IntentLetterOrigin_IT::Cust;
        }
        else
        {
            return IntentLetterOrigin_IT::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCustIntentLetterSet_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes all processed intent letters.
    /// </summary>
    /// <returns>true if operation succeeded; false otherwise.</returns>
    /// <exception>Throws exception if amount to be posted exceeds the remaining amount of intent letter.</exception>
    public boolean postCustIntentLetterSet_IT()
    {
        IntentLetterInternalId_IT intentLetterInternalId;
        CustIntentLetter_IT custIntentLetter;

        //Update intent letters
        if (custIntentLetterSet_IT)
        {
            SetEnumerator letterEnum = custIntentletterSet_IT.getEnumerator();

            while (letterEnum.moveNext())
            {
                intentLetterInternalId = letterEnum.current();
                ttsbegin;
                custIntentLetter = CustIntentLetter_IT::findInternalId(intentLetterInternalId, true);

                if (custIntentLetter.IntentLetterAmountMST && custIntentLetter.remainAmountMST() < 0)
                {
                    error(strFmt("@ExtendedItallianLocalization:LetterExceededAmountLimit", custIntentLetter.InternalLetterId));
                    throw error("@SYS21533");
                }

                //Close intent letters
                if (custIntentLetter.IntentLetterType == IntentLetterType_IT::SpecificOperation
                    || (custIntentLetter.IntentLetterType == IntentLetterType_IT::Amount && custIntentLetter.remainAmountMST() == 0))
                {
                    custIntentLetter.close();
                    custIntentLetter.update();
                    info(strfmt("@ExtendedItallianLocalization:IntentLetterHasBeenClosed", custIntentLetter.InternalLetterId));
                }
                ttscommit;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlePromissoryNoteInvoice</Name>
				<Source><![CDATA[
    private void settlePromissoryNoteInvoice(TaxTrans _taxTrans)
    {
        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            VendPromissoryNoteSettleContext_MX context = VendPromissoryNoteSettleContext_MX::getContext();

            if (context && context.isContextOpen())
            {
                context.settleTaxTrans(_taxTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTrans</Name>
				<Source><![CDATA[
    public void initTaxTrans(TaxTrans _taxTrans, NumberSequenceCode _voucherSeriesCode)
    {
        next initTaxTrans(_taxTrans, _voucherSeriesCode);

        if (this is TaxPost && FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            TaxPost taxPost = this;
            taxPost.setTaxTransPlafond_IT(_taxTrans);
        }

        #ISOCountryRegionCodes
        if (MultipleTaxIdReportingHelper::isLegalEntityOrTaxCodeInCountryRegion(
            _taxTrans.TaxCode, [#isoIT], MultipleTaxIdScope::VATDeclaration))
        {
            LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(_taxTrans.SourceRecId, false);

            if (ledgerJournalTrans.ledgerJournalTable().ledgerJournalName().JournalType == LedgerJournalType::Approval)
            {
                TaxTrans_IT taxTrans_IT = _taxTrans.taxTrans_IT();
                taxTrans_IT.InvoiceApproval = NoYes::Yes;
                _taxTrans.packTaxTrans_IT(taxTrans_IT);
            }
        }

        if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()) && TaxTable::find(_taxTrans.TaxCode).AffectPlafond_IT)
        {
            TaxTrans_IT taxTrans_IT = _taxTrans.taxTrans_IT();
            taxTrans_IT.IntentLetterOrigin = this.intentLetterOrigin_IT();
            taxTrans_IT.IntentLetterId = this.intentLetterId_IT(_taxTrans.SourceTableId, _taxTrans.SourceRecId);
            _taxTrans.packTaxTrans_IT(taxTrans_IT);

            if (taxTrans_IT.IntentLetterOrigin == IntentLetterOrigin_IT::Cust
                && taxTrans_IT.IntentLetterId)
            {
                if (!this.checkCustIntentLetter_IT(_taxTrans))
                {
                    throw error("@SYS21533");
                }

                if (!custIntentLetterSet_IT)
                {
                    this.initCustIntentLetterSet_IT();
                }

                custIntentLetterSet_IT.add(taxTrans_IT.IntentLetterId);
            }
        }

        this.settlePromissoryNoteInvoice(_taxTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlafondDate_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the plafond date.
    /// </summary>
    /// <param name = "_sourceTableId">Source table ID.</param>
    /// <param name = "_sourceRecId">Source record ID.</param>
    /// <returns>The plafond date.</returns>
    protected PlafondDate_IT getPlafondDate_IT(TableId _sourceTableId, RefRecId _sourceRecId)
    {
        PlafondDate_IT plafondDate;

        if (this is TaxPostJournal)
        {
            TaxPostJournal taxPostJournal = this;
            plafondDate = taxPostJournal.plafondDate_IT(_sourceTableId, _sourceRecId);
        }
        else if (this is TaxPurchInvoice)
        {
            VendInvoiceJour vendInvoiceJour;
            VendInvoiceTrans vendInvoiceTrans;
            VendInvoiceInfoTable vendInvoiceInfoTable;
            VendInvoiceInfoLine vendInvoiceInfoLine;

            switch (_sourceTableId)
            {
                case tableNum(VendInvoiceTrans):
                    select firstonly PlafondDate_IT from vendInvoiceJour
                        exists join vendInvoiceTrans
                        where vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                            && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                            && vendInvoiceTrans.PurchId == vendInvoiceJour.purchId
                            && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                            && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.internalInvoiceId
                            && vendInvoiceTrans.RecId == _sourceRecId;
                    break;

                case tableNum(VendInvoiceInfoLine):
                    select firstOnly PlafondDate_IT from vendInvoiceInfoTable
                        exists join vendInvoiceInfoLine
                        where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                            && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                            && vendInvoiceInfoLine.RecId == _sourceRecId;
                    break;

                case tableNum(MarkupTrans):
                    MarkupTrans markupTransLocal;
                    select firstOnly TransRecId, TransTableId from markupTransLocal
                        where markupTransLocal.RecId == _sourceRecId;

                    switch (markupTransLocal.TransTableId)
                    {
                        case tableNum(VendInvoiceTrans):
                            select firstonly PlafondDate_IT from vendInvoiceJour
                                exists join vendInvoiceTrans
                                where vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                                    && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                                    && vendInvoiceTrans.PurchId == vendInvoiceJour.purchId
                                    && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                                    && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.internalInvoiceId
                                    && vendInvoiceTrans.RecId == markupTransLocal.TransRecId;
                            break;

                        case tableNum(VendInvoiceJour):
                            vendInvoiceJour = VendInvoiceJour::findRecId(markupTransLocal.TransRecId);
                            break;

                        case tableNum(VendInvoiceInfoLine):
                            select firstOnly PlafondDate_IT from vendInvoiceInfoTable
                                exists join vendInvoiceInfoLine
                                where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                                    && vendInvoiceInfoLine.RecId == markupTransLocal.TransRecId;
                            break;

                        case tableNum(VendInvoiceInfoSubTable):
                            VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
                            select firstOnly PlafondDate_IT from vendInvoiceInfoTable
                                exists join vendInvoiceInfoSubTable
                                where vendInvoiceInfoSubTable.ParmId == vendInvoiceInfoTable.ParmId
                                    && vendInvoiceInfoSubTable.TableRefId == vendInvoiceInfoTable.TableRefId
                                    && vendInvoiceInfoSubTable.RecId == markupTransLocal.TransRecId;
                            break;

                        case tablenum(VendInvoiceInfoTable):
                            vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(markupTransLocal.TransRecId);
                            break;
                    }
                    break;

                default:
                    break;
            }

            if (vendInvoiceJour)
            {
                plafondDate = vendInvoiceJour.PlafondDate_IT;
            }
            else if(vendInvoiceInfoTable)
            {
                plafondDate = vendInvoiceInfoTable.PlafondDate_IT;
            }
        }

        return plafondDate;

    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    public void saveAndPost(LedgerPostingController _ledgerPostingController)
    {
        isInSaveAndPost_IT = true;
        next saveAndPost(_ledgerPostingController);
        isInSaveAndPost_IT = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidTaxCodeIntersectionByCalculationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows an extension class to determine if the current tax code is valid by the calculation date specified.
    /// for processing.
    /// </summary>
    /// <param name = "_taxCode">
    /// The <c>TaxCode</c> value to validate.
    /// </param>
    /// <param name = "_taxCalculationDate">
    /// The calculation date that used for validating.
    /// </param>
    /// <returns>
    /// true if the <c>TaxCode</c> parameter value is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    protected boolean isValidTaxCodeIntersectionByCalculationDate(TaxCode _taxCode, TransDate _taxCalculationDate)
    {
        boolean isValidTaxCode = next isValidTaxCodeIntersectionByCalculationDate(_taxCode, _taxCalculationDate);

        if (isValidTaxCode
            && TaxParameters::find().CheckSalesTaxTransaction)
        {
            changecompany(this.getCompany())
            {
                isValidTaxCode = TaxData::existCodeAndDate(_taxCode, _taxCalculationDate);
            }
        }

        return isValidTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourceLineCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether transaction belongs to credit note.
    /// </summary>
    /// <param name = "_taxTrans">The <c>TaxTrans</c> value to validate.</param>
    /// <returns>true if the <c>TaxTrans</c> belongs to credit note; otherwise, false.</returns>
    private static boolean isSourceLineCreditNote(TaxTrans _taxTrans)
    {
        boolean ret;

        CustVendInvoiceJour custVendInvoiceJour = _taxTrans.getInvoiceJour_EE();
        ret = custVendInvoiceJour && custVendInvoiceJour.InvoiceAmount <= 0;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>