<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowForecastProcessActualsBalanceStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// This is a strategy for processing cash flow daily aggregation of actuals.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.CashFlowIForecastProcessBalanceStrategy))]
[ExportMetadata(classStr(CashFlowIForecastProcessBalanceStrategy), classStr(CashFlowForecastProcessActualsBalanceStrategy))]
internal class CashFlowForecastProcessActualsBalanceStrategy implements CashFlowIForecastProcessBalanceStrategy
{
    private CashFlowForecastProcessBalanceContract processBalanceContract;
    private CashFlowForecastProcessActualsLedgerDimensionLoader dimensionLoader;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromProcessBalanceContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initializeFromProcessBalanceContract(CashFlowForecastProcessBalanceContract _processBalanceContract)
    {
        processBalanceContract = _processBalanceContract;
        dimensionLoader = CashFlowForecastProcessActualsLedgerDimensionLoader::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDimensionReferences</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void loadDimensionReferences()
    {
        dimensionLoader.loadDimensionReferences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearReferences</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void clearReferences()
    {
        dimensionLoader.clearReferences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalances</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createBalances()
    {
        CashFlowForecastBalanceTmp balanceTmp;

        if (processBalanceContract.deleteMode == CashFlowProcessBalanceDeleteMode::DeleteAll)
        {
            this.createOpeningBalance(balanceTmp);
        }
        this.calculateDailyBalances(balanceTmp);

        CashFlowForecastBalanceTmp::updateEnterpriseCurrency(balanceTmp);

        this.insertBalances(balanceTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBalances</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void clearBalances()
    {
        CashFlowForecastBalance cashFlowForecastBalance;

        if (processBalanceContract.deleteMode == CashFlowProcessBalanceDeleteMode::DeleteAll)
        {
            delete_from cashFlowForecastBalance
                where cashFlowForecastBalance.IsActuals == NoYes::Yes;
        }
        else if (processBalanceContract.deleteMode == CashFlowProcessBalanceDeleteMode::DeletePeriod)
        {
            delete_from cashFlowForecastBalance
                where cashFlowForecastBalance.IsActuals == NoYes::Yes
                    && cashFlowForecastBalance.AccountingDate >= processBalanceContract.periodOpenDate
                    && cashFlowForecastBalance.AccountingDate <= processBalanceContract.periodCloseDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBalances</Name>
				<Source><![CDATA[
    private void insertBalances(CashFlowForecastBalanceTmp _balanceTmp)
    {
        CashFlowForecastBalance balances;
        NoYes isActual = NoYes::Yes;

        insert_recordset balances (AccountingDate, MainAccount, DefaultDimension, IsOpeningBalance, IsActuals, AccountingCurrencyAmountIn, AccountingCurrencyAmountOut, EnterpriseCurrencyAmountIn, EnterpriseCurrencyAmountOut)
        select AccountingDate, MainAccount, DefaultDimension, IsOpeningBalance, isActual,
            sum(AccountingCurrencyAmountIn), sum(AccountingCurrencyAmountOut),
            sum(EnterpriseCurrencyAmountIn), sum(EnterpriseCurrencyAmountOut) from _balanceTmp
        group by AccountingDate, MainAccount, DefaultDimension, IsOpeningBalance
            where  _balanceTmp.AccountingCurrencyAmountIn != 0
                || _balanceTmp.AccountingCurrencyAmountOut != 0
                || _balanceTmp.EnterpriseCurrencyAmountIn != 0
                || _balanceTmp.EnterpriseCurrencyAmountOut != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOpeningBalance</Name>
				<Source><![CDATA[
    private void createOpeningBalance(CashFlowForecastBalanceTmp _balanceTmp)
    {
        date periodOpenDate = processBalanceContract.periodOpenDate;

        NoYes isOpeningBalance = NoYes::Yes;
        CashFlowForecastBalanceActualsView balanceView;

        // Credits = AccountingCurrencyAmountOut
        insert_recordset _balanceTmp (MainAccount, IsCredit, DefaultDimension, AccountingDate, IsOpeningBalance, AccountingCurrencyAmountOut)
            select MainAccount, IsCredit, BalanceDefaultDimension, periodOpenDate, isOpeningBalance, sum(AccountingCurrencyAmount) from balanceView
                group by balanceView.MainAccount, balanceView.IsCredit, balanceView.BalanceDefaultDimension
            where balanceView.IsCredit == NoYes::Yes
                && balanceView.AccountingDate >= periodOpenDate
                && balanceView.AccountingDate <= processBalanceContract.periodCloseDate
                && balanceView.Type == FiscalPeriodType::Opening;
        
        _balanceTmp.clear();

        // Debits = AccountingCurrencyAmountIn
        insert_recordset _balanceTmp (MainAccount, IsCredit, DefaultDimension, AccountingDate, IsOpeningBalance, AccountingCurrencyAmountIn)
            select MainAccount, IsCredit, BalanceDefaultDimension, periodOpenDate, isOpeningBalance, sum(AccountingCurrencyAmount) from balanceView
                group by balanceView.MainAccount, balanceView.IsCredit, balanceView.BalanceDefaultDimension
            where balanceView.IsCredit == NoYes::No
                && balanceView.AccountingDate >= periodOpenDate
                && balanceView.AccountingDate <= processBalanceContract.periodCloseDate
                && balanceView.Type == FiscalPeriodType::Opening;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDailyBalances</Name>
				<Source><![CDATA[
    private void calculateDailyBalances(CashFlowForecastBalanceTmp _balanceTmp)
    {
        // calculate all activity daily from the start date forward to today
        // Insert each day into the balance table.
        CashFlowForecastBalanceActualsView balanceView;
        NoYes isOpeningBalance = NoYes::No;

        // Credits = AccountingCurrencyAmountOut
        insert_recordset _balanceTmp (MainAccount, IsOpeningBalance, IsCredit, DefaultDimension, AccountingDate, AccountingCurrencyAmountOut)
            select  MainAccount, isOpeningBalance, IsCredit, BalanceDefaultDimension, AccountingDate, sum(AccountingCurrencyAmount) from balanceView
                group by balanceView.AccountingDate, balanceView.MainAccount, balanceView.IsCredit, balanceView.BalanceDefaultDimension
            where balanceView.IsCredit == NoYes::Yes
                && balanceView.AccountingDate >= processBalanceContract.periodOpenDate
                && balanceView.AccountingDate <= processBalanceContract.periodCloseDate
                && balanceView.Type != FiscalPeriodType::Opening
                && balanceView.PostingType != LedgerPostingType::TransferOpeningClosing;
        
        _balanceTmp.clear();

        // Debits = AccountingCurrencyAmountIn
        insert_recordset _balanceTmp (MainAccount, IsOpeningBalance, IsCredit, DefaultDimension, AccountingDate, AccountingCurrencyAmountIn)
            select MainAccount, isOpeningBalance, IsCredit, BalanceDefaultDimension, AccountingDate, sum(AccountingCurrencyAmount) from balanceView
                group by balanceView.AccountingDate, balanceView.MainAccount, balanceView.IsCredit, balanceView.BalanceDefaultDimension
            where balanceView.IsCredit == NoYes::No
                && balanceView.AccountingDate >= processBalanceContract.periodOpenDate
                && balanceView.AccountingDate <= processBalanceContract.periodCloseDate
                && balanceView.Type != FiscalPeriodType::Opening
                && balanceView.PostingType != LedgerPostingType::TransferOpeningClosing;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>