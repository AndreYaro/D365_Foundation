<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTrialBalanceTmp_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(LedgerTrialBalanceTmp))]
public final class LedgerTrialBalanceTmp_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateBalances_Simulation_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>LedgerTrialBalanceTmp</c> table with balances based on a dimension focus, date range,
    /// period balance type to include and posting layer.
    /// </summary>
    /// <param name="_listPageTmp">
    /// The <c>LedgerTrialBalanceTmp</c> to populate.
    /// </param>
    /// <param name="_primaryFocus">
    /// The dimension focus to restrict to.
    /// </param>
    /// <param name="_fromDate">
    /// The starting date of the balances to include..
    /// </param>
    /// <param name="_toDate">
    /// The ending date of the balances to include.
    /// </param>
    /// <param name="_includeOpening">
    /// True to include opening balances; otherwise, false.
    /// </param>
    /// <param name="_includeClosing">
    /// True to include closing balances; otherwise, false.
    /// </param>
    /// <param name="_postingLayerList">
    /// The posting layer(s) of the transactions to include.
    /// </param>
    /// <param name="_showErrors">
    /// A boolean value that indicates whether errors should be displayed; optional.
    /// </param>
    /// <param name="_runInNewSession">
    /// true to run the process in a new session; otherwise, false.
    /// </param>
    /// <param name="_ledgerRecId">
    /// The <c>Ledger</c> table record to calculate balances for; optional.
    /// </param>
    /// <param name="_simulationJournalGroupId">
    /// The simulation journal group ID; optional.
    /// </param>
    [SysObsolete('This method will be deprecated in a future release, use calculateBalances_Simulation_IT_V2 instead.', false, 14\07\2023)]
    public static void calculateBalances_Simulation_IT(
        LedgerTrialBalanceTmp _listPageTmp,
        Name _primaryFocus,
        FromDate _fromDate,
        ToDate _toDate,
        boolean _includeOpening,
        boolean _includeClosingAdjustments,
        boolean _includeClosingTransactions,
        List _postingLayerList,
        boolean _showErrors = false,
        boolean _runInNewSession = true,
        LedgerRecId _ledgerRecId = Ledger::current(),
        SimulationJournalGroupId_IT _simulationJournalGroupId = '')
    {
        LedgerTrialBalanceTmp::calculateBalances_Simulation_IT_V2(
                _listPageTmp,
                _primaryFocus,
                _fromDate,
                _toDate,
                _includeOpening,
                _includeClosingAdjustments,
                _includeClosingTransactions,
                _postingLayerList,
                _showErrors,
                _runInNewSession,
                _ledgerRecId,
                _simulationJournalGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalances_Simulation_IT_V2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>LedgerTrialBalanceTmp</c> table with balances based on a dimension focus, date range,
    /// period balance type to include and posting layer, and main account category.
    /// </summary>
    /// <param name="_listPageTmp">
    /// The <c>LedgerTrialBalanceTmp</c> to populate.
    /// </param>
    /// <param name="_primaryFocus">
    /// The dimension focus to restrict to.
    /// </param>
    /// <param name="_fromDate">
    /// The starting date of the balances to include..
    /// </param>
    /// <param name="_toDate">
    /// The ending date of the balances to include.
    /// </param>
    /// <param name="_includeOpening">
    /// True to include opening balances; otherwise, false.
    /// </param>
    /// <param name="_includeClosing">
    /// True to include closing balances; otherwise, false.
    /// </param>
    /// <param name="_postingLayerList">
    /// The posting layer(s) of the transactions to include.
    /// </param>
    /// <param name="_showErrors">
    /// A boolean value that indicates whether errors should be displayed; optional.
    /// </param>
    /// <param name="_runInNewSession">
    /// true to run the process in a new session; otherwise, false.
    /// </param>
    /// <param name="_ledgerRecId">
    /// The <c>Ledger</c> table record to calculate balances for; optional.
    /// </param>
    /// <param name="_simulationJournalGroupId">
    /// The simulation journal group ID; optional.
    /// </param>
    /// <param name="_displayMainAccountCategory">
    /// True to include MainAccountCategory; otherwise, false; optional, false by default.
    /// </param>
    public static void calculateBalances_Simulation_IT_V2(
        LedgerTrialBalanceTmp _listPageTmp,
        Name _primaryFocus,
        FromDate _fromDate,
        ToDate _toDate,
        boolean _includeOpening,
        boolean _includeClosingAdjustments,
        boolean _includeClosingTransactions,
        List _postingLayerList,
        boolean _showErrors = false,
        boolean _runInNewSession = true,
        LedgerRecId _ledgerRecId = Ledger::current(),
        SimulationJournalGroupId_IT _simulationJournalGroupId = '',
        boolean _displayMainAccountCategory = false)
    {
        // use a new LedgerTrialBalanceTmp buffer because the parameter
        // is linked to the form data source and using it here causes TTS errors
        LedgerTrialBalanceTmp trialbalanceTmp;

        trialbalanceTmp.linkPhysicalTableInstance(_listPageTmp);
        delete_from trialBalanceTmp;

        if (!_primaryFocus)
        {
            return;
        }

        LedgerTrialBalanceContract trialBalanceContract = new LedgerTrialBalanceContract();
        trialBalanceContract.parmFromDate(_fromDate);
        trialBalanceContract.parmToDate(_toDate);
        trialBalanceContract.parmIncludeOpening(_includeOpening);
        trialBalanceContract.parmIncludeClosingAdjustments(_includeClosingAdjustments);
        trialBalanceContract.parmIncludeClosingTransactions(_includeClosingTransactions);
        trialBalanceContract.parmPostingLayers(_postingLayerList);
        trialBalanceContract.parmPrimaryDimensionFocus(_primaryFocus);
        trialBalanceContract.parmIncludeSimulation_IT(_simulationJournalGroupId != '');
        trialBalanceContract.parmSimulationJournalGroupId_IT(_simulationJournalGroupId);
        trialBalanceContract.parmDisplayMainAccountCategory(_displayMainAccountCategory);

        if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            LedgerTrialBalanceTmp::calculateBalancesV2_Simulation_IT(
                trialBalanceContract,
                _ledgerRecId,
                trialBalanceTmp,
                _simulationJournalGroupId);
        }
        else
        {
            DimensionFocusUpdateBalanceSim_IT::updateBalance(
                DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, _primaryFocus),
                _showErrors,
                _runInNewSession);

            LedgerTrialBalanceDP trialBalanceDP = new LedgerTrialBalanceDP();
            trialBalanceDP.parmDataContract(trialBalanceContract);

            trialBalanceDP.setTrialBalanceTmpTable(trialBalanceTmp);

            trialBalanceDP.processReport();

            if (_simulationJournalGroupId)
            {
                LedgerTrialBalanceTmp trialBalanceTmp2;
                LedgerTrialBalanceTmp trialBalanceTmp3;
                // Copy that data into the LedgerTrialBalanceTmp, disabling RLS so the insert doesn't
                // degrade to row-by-row
                _listPageTmp.recordLevelSecurity(false);

                LedgerTrialBalanceTmp::copyTrialBalanceTmp(trialBalanceTmp, trialBalanceTmp2);
                LedgerTrialBalanceTmp::copyTrialBalanceTmp(trialBalanceTmp, trialBalanceTmp3);
                delete_from trialBalanceTmp;

                // Copy the data from the report run over to the DBTemp table backing the form

                insert_recordset _listPageTmp (PrimaryFocus, LedgerDimension, OpeningBalance, AmountDebit, AmountCredit, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory)
                    select PrimaryFocus, LedgerDimension, OpeningBalance, AmountDebit, AmountCredit, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory
                    from trialBalanceTmp2
                        where trialBalanceTmp2.isSimulation_IT == false
                    notExists join trialBalanceTmp3
                        where trialBalanceTmp2.LedgerDimension == trialBalanceTmp3.LedgerDimension
                            && trialBalanceTmp3.isSimulation_IT == true;

                insert_recordset _listPageTmp (PrimaryFocus, LedgerDimension, OpeningBalance, AmountDebit, AmountCredit, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory, AmountCreditSim_IT, AmountDebitSim_IT)
                    select PrimaryFocus, LedgerDimension, OpeningBalance, AmountDebit, AmountCredit, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory
                    from trialBalanceTmp2
                    join AmountCredit, AmountDebit from trialBalanceTmp3
                    where trialBalanceTmp2.LedgerDimension == trialBalanceTmp3.LedgerDimension
                        && trialBalanceTmp2.isSimulation_IT == false
                        && trialBalanceTmp3.isSimulation_IT == true;

                //insert simulation-only balance records
                insert_recordset _listPageTmp (PrimaryFocus, LedgerDimension, OpeningBalance, AmountDebitSim_IT, AmountCreditSim_IT, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory)
                    select PrimaryFocus, LedgerDimension, OpeningBalance, AmountDebit, AmountCredit, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory
                    from trialBalanceTmp2
                        where trialBalanceTmp2.isSimulation_IT == true
                    notexists join _listPageTmp
                    where _listPageTmp.LedgerDimension == trialBalanceTmp2.LedgerDimension;

                _listPageTmp.recordLevelSecurity(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalancesV2_Simulation_IT</Name>
				<Source><![CDATA[
    private static void calculateBalancesV2_Simulation_IT(
        LedgerTrialBalanceContract _trialBalanceContract,
        LedgerRecId _ledgerRecId,
        LedgerTrialBalanceTmp _trialbalanceTmp,
        SimulationJournalGroupId_IT _simulationJournalGroupId)
    {
        GeneralLedgerBalanceCurrentStatus balanceResult =  GeneralLedgerBalanceProvider::getBalanceStatus(_ledgerRecId);

        LedgerTrialBalanceDPV2 trialBalanceDP = new LedgerTrialBalanceDPV2();
        trialBalanceDP.parmDataContract(_trialBalanceContract);
        trialBalanceDP.setTrialBalanceTmpTable(_trialbalanceTmp);

        trialBalanceDP.processReport();

        if (_simulationJournalGroupId)
        {
            LedgerTrialBalanceTmp trialBalanceTmp2;
            LedgerTrialBalanceTmp trialBalanceTmp3;
            // Copy that data into the LedgerTrialBalanceTmp, disabling RLS so the insert doesn't
            // degrade to row-by-row
            _trialbalanceTmp.recordLevelSecurity(false);

            LedgerTrialBalanceTmp::copyTrialBalanceTmp(_trialbalanceTmp, trialBalanceTmp2);
            LedgerTrialBalanceTmp::copyTrialBalanceTmp(_trialbalanceTmp, trialBalanceTmp3);
            delete_from _trialbalanceTmp;

            // Copy the data from the report run over to the DBTemp table backing the form

            insert_recordset _trialbalanceTmp (PrimaryFocus, ReportingDimension, OpeningBalance, AmountDebit, AmountCredit, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory)
                select PrimaryFocus, ReportingDimension, OpeningBalance, AmountDebit, AmountCredit, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory
                from trialBalanceTmp2
                    where trialBalanceTmp2.isSimulation_IT == false
                notExists join trialBalanceTmp3
                    where trialBalanceTmp2.ReportingDimension == trialBalanceTmp3.ReportingDimension
                        && trialBalanceTmp3.isSimulation_IT == true;

            insert_recordset _trialbalanceTmp (PrimaryFocus, ReportingDimension, OpeningBalance, AmountDebit, AmountCredit, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory, AmountCreditSim_IT, AmountDebitSim_IT)
                select PrimaryFocus, ReportingDimension, OpeningBalance, AmountDebit, AmountCredit, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory
                from trialBalanceTmp2
                join AmountCredit, AmountDebit from trialBalanceTmp3
                where trialBalanceTmp2.ReportingDimension == trialBalanceTmp3.ReportingDimension
                    && trialBalanceTmp2.isSimulation_IT == false
                    && trialBalanceTmp3.isSimulation_IT == true;

            //insert simulation-only balance records
            insert_recordset _trialbalanceTmp (PrimaryFocus, ReportingDimension, OpeningBalance, AmountDebitSim_IT, AmountCreditSim_IT, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory)
                select PrimaryFocus, ReportingDimension, OpeningBalance, AmountDebit, AmountCredit, ClosingAdjustments, ClosingTransactions, EndingBalance, PrimaryFocusDescription, DimensionValues, MainAccountCategory
                from trialBalanceTmp2
                    where trialBalanceTmp2.isSimulation_IT == true
                notexists join _trialbalanceTmp
                where _trialbalanceTmp.ReportingDimension == trialBalanceTmp2.ReportingDimension;

            _trialbalanceTmp.recordLevelSecurity(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTrialBalanceTmp</Name>
				<Source><![CDATA[
    private static void copyTrialBalanceTmp(LedgerTrialBalanceTmp _source, LedgerTrialBalanceTmp _destination)
    {
        insert_recordset _destination(IsSimulation_IT, AmountCredit, AmountCreditTrans, AmountDebit, AmountDebitTrans, ClosingAdjustments, DimensionValues, EndingBalance, LedgerDimension, NetChange, OpeningBalance, PrimaryFocus, PrimaryFocusDescription, AccountingDate, PostingLayer, TransactionType, ClosingTransactions, IsClosingTransaction, MainAccountCategory, ReportingDimension)
            select IsSimulation_IT, AmountCredit, AmountCreditTrans, AmountDebit, AmountDebitTrans, ClosingAdjustments, DimensionValues, EndingBalance, LedgerDimension, NetChange, OpeningBalance, PrimaryFocus, PrimaryFocusDescription, AccountingDate, PostingLayer, TransactionType, ClosingTransactions, IsClosingTransaction, MainAccountCategory, ReportingDimension from _source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayEndingBalanceWithSim_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ending balance with simulation.
    /// </summary>
    /// <returns>Ending balance with simulation.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountMSTLong displayEndingBalanceWithSim_IT()
    {
        AmountMSTLong ret = this.EndingBalance - this.AmountCreditSim_IT + this.AmountDebitSim_IT;
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>