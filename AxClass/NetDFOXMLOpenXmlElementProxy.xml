<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NetDFOXMLOpenXmlElementProxy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Proxy class for the DocumentFormat.OpenXml.OpenXmlElement.
/// </summary>
public class NetDFOXMLOpenXmlElementProxy
{
    protected DocumentFormat.OpenXml.OpenXmlElement openXmlElement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(DocumentFormat.OpenXml.OpenXmlElement _openXmlElement)
    {
        openXmlElement = _openXmlElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ToString</Name>
				<Source><![CDATA[
    public str ToString()
    {
        return openXmlElement.GetType().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original instance of OpenXmlElement.
    /// </summary>
    /// <returns>Returns the original instance of OpenXmlElement.</returns>
    public DocumentFormat.OpenXml.OpenXmlElement getInstance()
    {
        return openXmlElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the proxy class.
    /// </summary>
    /// <param name = "_openXmlElement">The OpenXmlElement object.</param>
    /// <returns>Created proxy class.</returns>
    public static NetDFOXMLOpenXmlElementProxy construct(DocumentFormat.OpenXml.OpenXmlElement _openXmlElement)
    {
        NetDFOXMLOpenXmlElementProxy proxy = null;

        if (_openXmlElement != null)
        {
            System.Type type = _openXmlElement.GetType();
            str typeName = con2Str([type.Namespace, type.Name], '.');

            switch (typeName)
            {
                case "DocumentFormat.OpenXml.Wordprocessing.Text":
                    proxy = NetDFOXMLWordprocessingTextProxy::construct(_openXmlElement as DocumentFormat.OpenXml.Wordprocessing.Text);
                    break;

                case "DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd":
                    proxy = NetDFOXMLWordprocessingBookmarkEndProxy::construct(_openXmlElement as DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd);
                    break;

                case "DocumentFormat.OpenXml.Wordprocessing.BookmarkStart":
                    proxy = NetDFOXMLWordprocessingBookmarkStartProxy::construct(_openXmlElement as DocumentFormat.OpenXml.Wordprocessing.BookmarkStart);
                    break;

                case "DocumentFormat.OpenXml.Wordprocessing.Paragraph":
                    proxy = NetDFOXMLWordprocessingParagraphProxy::construct(_openXmlElement as DocumentFormat.OpenXml.Wordprocessing.Paragraph);
                    break;

                case "DocumentFormat.OpenXml.Wordprocessing.Run":
                    proxy = NetDFOXMLWordprocessingRunProxy::construct(_openXmlElement as DocumentFormat.OpenXml.Wordprocessing.Run);
                    break;

                case "DocumentFormat.OpenXml.Wordprocessing.Table":
                    proxy = NetDFOXMLWordprocessingTableProxy::construct(_openXmlElement as DocumentFormat.OpenXml.Wordprocessing.Table);
                    break;

                case "DocumentFormat.OpenXml.Wordprocessing.TableRow":
                    proxy = NetDFOXMLWordprocessingTableRowProxy::construct(_openXmlElement as DocumentFormat.OpenXml.Wordprocessing.TableRow);
                    break;

                case "DocumentFormat.OpenXml.Wordprocessing.TableCell":
                    proxy = NetDFOXMLWordprocessingTableCellProxy::construct(_openXmlElement as DocumentFormat.OpenXml.Wordprocessing.TableCell);
                    break;

                default:
                    proxy = new NetDFOXMLOpenXmlElementProxy(_openXmlElement);
                    break;
            }
        }

        return proxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>castProxyArrayToOpenXmlElementArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Casts the array of proxies to the array of OpenXmlElement objects.
    /// </summary>
    /// <param name = "_openXmlElementProxyArray">The array of proxy objects.</param>
    /// <returns>Created array of OpenXmlElement objects.</returns>
    protected static DocumentFormat.OpenXml.OpenXmlElement[] castProxyArrayToOpenXmlElementArray(System.Object[] _openXmlElementProxyArray)
    {
        DocumentFormat.OpenXml.OpenXmlElement[] result = null;

        if (_openXmlElementProxyArray != null
            && _openXmlElementProxyArray.Length > 0)
        {
            result = new System.Object[_openXmlElementProxyArray.Length]();

            for (int idx = 0; idx < _openXmlElementProxyArray.Length; idx++)
            {
                NetDFOXMLOpenXmlElementProxy openXmlElementProxy = ERCast::asAny(_openXmlElementProxyArray.GetValue(idx)) as NetDFOXMLOpenXmlElementProxy;
                if (openXmlElementProxy != null)
                {
                    result.SetValue(openXmlElementProxy.getInstance(), idx);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeProxiesForEnumerable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes proxies for OpenXmlElement array.
    /// </summary>
    /// <param name = "_enumerable">The OpenXmlElement array.</param>
    /// <returns>The array of proxies.</returns>
    protected static System.Collections.IEnumerable makeProxiesForEnumerable(System.Collections.IEnumerable _enumerable)
    {
        System.Collections.ArrayList arrayList = null;
        if (_enumerable != null)
        {
            arrayList = new System.Collections.ArrayList();

            System.Collections.IEnumerator enumerator = _enumerable.GetEnumerator();
            while (enumerator.MoveNext())
            {
                DocumentFormat.OpenXml.OpenXmlElement openXmlElement = enumerator.Current as DocumentFormat.OpenXml.OpenXmlElement;
                if (openXmlElement != null)
                {
                    arrayList.Add(NetDFOXMLOpenXmlElementProxy::construct(openXmlElement));
                }
            }
        }

        return arrayList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>descendants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the Descendants method.
    /// </summary>
    /// <returns>The array proxies.</returns>
    public System.Collections.IEnumerable descendants()
    {
        return NetDFOXMLOpenXmlElementProxy::makeProxiesForEnumerable(openXmlElement.Descendants());
    }

]]></Source>
			</Method>
			<Method>
				<Name>descendantsGeneric</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the Descendants generic method.
    /// </summary>
    /// <param name = "_genericType">The generic type.</param>
    /// <returns>The array proxies.</returns>
    protected System.Collections.IEnumerable descendantsGeneric(str _genericType)
    {
        const str methodName = "Descendants";

        return NetDFOXMLOpenXmlElementProxy::makeProxiesForEnumerable(NetReflectionHelper::invokerGenericMethod(
            openXmlElement,
            methodName,
            [_genericType]) as System.Collections.IEnumerable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>descendantsText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the Descendants method fot Text proxy.
    /// </summary>
    /// <returns>The array of Text proxies.</returns>
    public System.Collections.IEnumerable descendantsText()
    {
        return this.descendantsGeneric("DocumentFormat.OpenXml.Wordprocessing.Text, DocumentFormat.OpenXml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>descendantsRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the Descendants method fot Run proxy.
    /// </summary>
    /// <returns>The array of Run proxies.</returns>
    public System.Collections.IEnumerable descendantsRun()
    {
        return this.descendantsGeneric("DocumentFormat.OpenXml.Wordprocessing.Run, DocumentFormat.OpenXml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>descendantsBookmarkStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the Descendants method fot BookmarkStart proxy.
    /// </summary>
    /// <returns>The array of BookmarkStart proxies.</returns>
    public System.Collections.IEnumerable descendantsBookmarkStart()
    {
        return this.descendantsGeneric("DocumentFormat.OpenXml.Wordprocessing.BookmarkStart, DocumentFormat.OpenXml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>descendantsTableCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the Descendants method fot TableCell proxy.
    /// </summary>
    /// <returns>The array of TableCell proxies.</returns>
    public System.Collections.IEnumerable descendantsTableCell()
    {
        return this.descendantsGeneric("DocumentFormat.OpenXml.Wordprocessing.TableCell, DocumentFormat.OpenXml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>descendantsParagraph</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the Descendants method fot Paragraph proxy.
    /// </summary>
    /// <returns>The array of Paragraph proxies.</returns>
    public System.Collections.IEnumerable descendantsParagraph()
    {
        return this.descendantsGeneric("DocumentFormat.OpenXml.Wordprocessing.Paragraph, DocumentFormat.OpenXml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>descendantsTableRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the Descendants method fot TableRow proxy.
    /// </summary>
    /// <returns>The array of TableRow proxies.</returns>
    public System.Collections.IEnumerable descendantsTableRow()
    {
        return this.descendantsGeneric("DocumentFormat.OpenXml.Wordprocessing.TableRow, DocumentFormat.OpenXml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstChildGeneric</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the GetFirstChild generic method.
    /// </summary>
    /// <param name = "_genericType">The generic type.</param>
    /// <returns>The proxy.</returns>
    protected NetDFOXMLOpenXmlElementProxy getFirstChildGeneric(str _genericType)
    {
        const str methodName = "GetFirstChild";

        return NetDFOXMLOpenXmlElementProxy::construct(NetReflectionHelper::invokerGenericMethod(
            openXmlElement,
            methodName,
            [_genericType]) as DocumentFormat.OpenXml.OpenXmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstChildText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the GetFirstChild method fot Text proxy.
    /// </summary>
    /// <returns>The Text proxy.</returns>
    public NetDFOXMLWordprocessingTextProxy getFirstChildText()
    {
        return this.getFirstChildGeneric("DocumentFormat.OpenXml.Wordprocessing.Text, DocumentFormat.OpenXml") as NetDFOXMLWordprocessingTextProxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstChildTableCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the GetFirstChild method fot TableCell proxy.
    /// </summary>
    /// <returns>The TableCell proxy.</returns>
    public NetDFOXMLWordprocessingTableCellProxy getFirstChildTableCell()
    {
        return this.getFirstChildGeneric("DocumentFormat.OpenXml.Wordprocessing.TableCell, DocumentFormat.OpenXml") as NetDFOXMLWordprocessingTableCellProxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSiblingGeneric</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the NextSibling generic method.
    /// </summary>
    /// <param name = "_genericType">The generic type.</param>
    /// <returns>The proxy.</returns>
    protected NetDFOXMLOpenXmlElementProxy nextSiblingGeneric(str _genericType)
    {
        const str methodName = "NextSibling";

        return NetDFOXMLOpenXmlElementProxy::construct(NetReflectionHelper::invokerGenericMethod(
            openXmlElement,
            methodName,
            [_genericType]) as DocumentFormat.OpenXml.OpenXmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSiblingTableCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the NextSibling method fot TableCell proxy.
    /// </summary>
    /// <returns>The TableCell proxy.</returns>
    public NetDFOXMLWordprocessingTableCellProxy nextSiblingTableCell()
    {
        return this.nextSiblingGeneric("DocumentFormat.OpenXml.Wordprocessing.TableCell, DocumentFormat.OpenXml") as NetDFOXMLWordprocessingTableCellProxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSiblingText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the NextSibling method fot Text proxy.
    /// </summary>
    /// <returns>The Text proxy.</returns>
    public NetDFOXMLWordprocessingTextProxy nextSiblingText()
    {
        return this.nextSiblingGeneric("DocumentFormat.OpenXml.Wordprocessing.Text, DocumentFormat.OpenXml") as NetDFOXMLWordprocessingTextProxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSiblingRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the NextSibling method fot Run proxy.
    /// </summary>
    /// <returns>The Run proxy.</returns>
    public NetDFOXMLWordprocessingRunProxy nextSiblingRun()
    {
        return this.nextSiblingGeneric("DocumentFormat.OpenXml.Wordprocessing.Run, DocumentFormat.OpenXml") as NetDFOXMLWordprocessingRunProxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSibling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the NextSibling method.
    /// </summary>
    /// <returns>The proxy.</returns>
    public NetDFOXMLOpenXmlElementProxy nextSibling()
    {
        return NetDFOXMLOpenXmlElementProxy::construct(openXmlElement.NextSibling());
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the Remove method.
    /// </summary>
    public void remove()
    {
        openXmlElement.Remove();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Parent property.
    /// </summary>
    /// <returns>The proxy.</returns>
    public NetDFOXMLOpenXmlElementProxy parent()
    {
        return NetDFOXMLOpenXmlElementProxy::construct(openXmlElement.Parent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAfterSelfGeneric</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the InsertAfterSelf generic method.
    /// </summary>
    /// <param name = "_genericType">The generic type.</param>
    /// <param name = "_newElement">The OpenXmlElement proxy.</param>
    /// <returns>The proxy.</returns>
    protected NetDFOXMLOpenXmlElementProxy insertAfterSelfGeneric(str _genericType, NetDFOXMLOpenXmlElementProxy _newElement)
    {
        const str methodName = "InsertAfterSelf";

        return NetDFOXMLOpenXmlElementProxy::construct(NetReflectionHelper::invokerGenericMethod(
            openXmlElement,
            methodName,
            [_genericType],
            [_genericType],
            [_newElement.getInstance()]) as DocumentFormat.OpenXml.OpenXmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAfterSelfParagraph</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the InsertAfterSelf method fot Paragraph proxy.
    /// </summary>
    /// <param name = "_bookmarkProxy">The Paragraph proxy.</param>
    /// <returns>The Paragraph proxy.</returns>
    public NetDFOXMLWordprocessingParagraphProxy insertAfterSelfParagraph(NetDFOXMLWordprocessingParagraphProxy _bookmarkProxy)
    {
        return this.insertAfterSelfGeneric("DocumentFormat.OpenXml.Wordprocessing.Paragraph, DocumentFormat.OpenXml", _bookmarkProxy) as NetDFOXMLWordprocessingParagraphProxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAfterSelfTableRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the InsertAfterSelf method fot TableRow proxy.
    /// </summary>
    /// <param name = "_tableRowProxy">The TableRow proxy.</param>
    /// <returns>The TableRow proxy.</returns>
    public NetDFOXMLWordprocessingTableRowProxy insertAfterSelfTableRow(NetDFOXMLWordprocessingTableRowProxy _tableRowProxy)
    {
        return this.insertAfterSelfGeneric("DocumentFormat.OpenXml.Wordprocessing.TableRow, DocumentFormat.OpenXml", _tableRowProxy) as NetDFOXMLWordprocessingTableRowProxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the Append method.
    /// </summary>
    /// <param name = "_newChildren">The array of proxies.</param>
    public void appendArray(System.Object[] _newChildren)
    {
        DocumentFormat.OpenXml.OpenXmlElement[] openXmlElements = NetDFOXMLOpenXmlElementProxy::castProxyArrayToOpenXmlElementArray(_newChildren);
        if (openXmlElements != null
            && openXmlElements.Length > 0)
        {
            openXmlElement.Append(openXmlElements);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendChildGeneric</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the AppendChild generic method.
    /// </summary>
    /// <param name = "_genericType">The generic type.</param>
    /// <param name = "_newChild">The OpenXmlElement proxy.</param>
    /// <returns>The proxy.</returns>
    protected NetDFOXMLOpenXmlElementProxy appendChildGeneric(str _genericType, NetDFOXMLOpenXmlElementProxy _newChild)
    {
        const str methodName = "AppendChild";
            
        return NetDFOXMLOpenXmlElementProxy::construct(NetReflectionHelper::invokerGenericMethod(
            openXmlElement,
            methodName,
            [_genericType],
            [_genericType],
            [ _newChild.getInstance()]) as DocumentFormat.OpenXml.OpenXmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendChildRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the AppendChild method fot Run proxy.
    /// </summary>
    /// <param name = "_newChild">The Run proxy.</param>
    /// <returns>The Run proxy.</returns>
    public NetDFOXMLWordprocessingRunProxy appendChildRun(NetDFOXMLWordprocessingRunProxy _newChild)
    {
        return this.appendChildGeneric("DocumentFormat.OpenXml.Wordprocessing.Run, DocumentFormat.OpenXml", _newChild) as NetDFOXMLWordprocessingRunProxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendChildText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the AppendChild method fot Text proxy.
    /// </summary>
    /// <param name = "_newChild">The Text proxy.</param>
    /// <returns>The Text proxy.</returns>
    public NetDFOXMLWordprocessingTextProxy appendChildText(NetDFOXMLWordprocessingTextProxy _newChild)
    {
        return this.appendChildGeneric("DocumentFormat.OpenXml.Wordprocessing.Text, DocumentFormat.OpenXml", _newChild) as NetDFOXMLWordprocessingTextProxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the Clone method.
    /// </summary>
    /// <returns>The proxy.</returns>
    public NetDFOXMLOpenXmlElementProxy clone()
    {
        return NetDFOXMLOpenXmlElementProxy::construct(openXmlElement.Clone() as DocumentFormat.OpenXml.OpenXmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBeforeSelfGeneric</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the InsertBeforeSelf generic method.
    /// </summary>
    /// <param name = "_genericType">The generic type.</param>
    /// <param name = "_newElement">The OpenXmlElement proxy.</param>
    /// <returns>The proxy.</returns>
    protected NetDFOXMLOpenXmlElementProxy insertBeforeSelfGeneric(str _genericType, NetDFOXMLOpenXmlElementProxy _newElement)
    {
        const str methodName = "InsertBeforeSelf";

        return NetDFOXMLOpenXmlElementProxy::construct(NetReflectionHelper::invokerGenericMethod(
            openXmlElement,
            methodName,
            [_genericType],
            [_genericType],
            [_newElement.getInstance()]) as DocumentFormat.OpenXml.OpenXmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBeforeSelfTableRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the InsertBeforeSelf method fot TableRow proxy.
    /// </summary>
    /// <param name = "_tableRowProxy">The TableRow proxy.</param>
    /// <returns>The TableRow proxy.</returns>
    public NetDFOXMLWordprocessingTableRowProxy insertBeforeSelfTableRow(NetDFOXMLWordprocessingTableRowProxy _tableRowProxy)
    {
        return this.insertBeforeSelfGeneric("DocumentFormat.OpenXml.Wordprocessing.TableRow, DocumentFormat.OpenXml", _tableRowProxy) as NetDFOXMLWordprocessingTableRowProxy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>