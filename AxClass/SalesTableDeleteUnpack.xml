<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableDeleteUnpack</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SalesTableDeleteUnpack</c> class is used to unpack sales orders that have been marked void.
/// </summary>
public class SalesTableDeleteUnpack
{
    SalesTable  salesTableTmp;
    SalesLine   salesLineTmp;
    SalesLineForeignTradeCategory salesLineForeignTradeCategoryTmp;
    container   salesTableDeletePackedList;

    // <GEEPL>
    TaxServiceTariff taxServiceTariff;
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLineForeignTradeCategoryTmp</Name>
				<Source><![CDATA[
    public SalesLineForeignTradeCategory parmSalesLineForeignTradeCategoryTmp(SalesLineForeignTradeCategory _salesLineForeignTradeCategoryTmp = salesLineForeignTradeCategoryTmp)
    {
        salesLineForeignTradeCategoryTmp = _salesLineForeignTradeCategoryTmp;
        return salesLineForeignTradeCategoryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLineTmp</Name>
				<Source><![CDATA[
    public SalesLine parmSalesLineTmp(SalesLine _salesLineTmp = salesLineTmp)
    {
        salesLineTmp = _salesLineTmp;
        return salesLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTableDeletePackedList</Name>
				<Source><![CDATA[
    public container parmSalesTableDeletePackedList(container _salesTableDeletePackedList = salesTableDeletePackedList)
    {
        salesTableDeletePackedList = _salesTableDeletePackedList;
        return salesTableDeletePackedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTableTmp</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTableTmp(SalesTable _salesTableTmp = salesTableTmp)
    {
        salesTableTmp = _salesTableTmp;
        return salesTableTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxServiceTariff</Name>
				<Source><![CDATA[
    public TaxServiceTariff parmTaxServiceTariff(TaxServiceTariff _taxServiceTariff = taxServiceTariff)
    {
        taxServiceTariff = _taxServiceTariff;
        return taxServiceTariff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the list of voided sales orders that has been passed to the class.
    /// </summary>
    public void unpack()
    {
        SalesTableDelete    salesTableDelete;
        SalesLineDelete     salesLineDelete;
        // <GEEPL>
        boolean             isPL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        // </GEEPL>

        new OverwriteSystemfieldsPermission().assert();
        if (salesTableDeletePackedList == connull())
            return;

        ListEnumerator le = List::create(salesTableDeletePackedList).getEnumerator();
        salesTableTmp.recordLevelSecurity(true);
        salesTableTmp.setTmp();

        salesLineTmp.recordLevelSecurity(true);
        salesLineTmp.setTmp();

        salesLineForeignTradeCategoryTmp.recordLevelSecurity(true);
        salesLineForeignTradeCategoryTmp.setTmp();

        // <GEEPL>
        if (isPL)
        {
            taxServiceTariff.recordLevelSecurity(true);
            taxServiceTariff.setTmp();
        }
        // </GEEPL>

        setprefix("@SYS50874");

        while (le.moveNext())
        {
            salesTableDelete = le.current();
            setprefix(strfmt("@SYS76767", salesTableDelete.SalesId));

            if (!salesTableDelete.SalesTable ||
                typeof(conpeek(salesTableDelete.SalesTable,1)) != Types::Record)
            {
                warning("@SYS83732");
            }
            else
            {
                salesTableTmp.clear();
                salesTableTmp.overwriteSystemfields(true);
                salesTableTmp.data(conpeek(salesTableDelete.SalesTable,1));
                salesTableTmp.doInsert();

                // <GEEPL>
                if (isPL)
                {
                    taxServiceTariff.clear();
                    taxServiceTariff.ParentRecId = salesTableTmp.RecId;
                    taxServiceTariff.ParentTableId = salesTableTmp.TableId;
                    taxServiceTariff.ServiceTariffNumber = TaxServiceTariff::findByParent(salesTableDelete.TableId, salesTableDelete.RecId, false).ServiceTariffNumber;
                    taxServiceTariff.doInsert();
                }
                // </GEEPL>

                while select salesLineDelete
                    where salesLineDelete.SalesId == salesTableDelete.SalesId
                {
                    if (!salesLineDelete.SalesLine ||
                        typeof(conpeek(salesLineDelete.SalesLine,1)) != Types::Record)
                    {
                        warning("@SYS83733");
                    }
                    else
                    {
                        salesLineTmp.clear();
                        salesLineTmp.overwriteSystemfields(true);
                        salesLineTmp.data(conpeek(salesLineDelete.SalesLine,1));
                        salesLineTmp.LineCreationSequenceNumber = this.nextLineCreationSequence(salesLineTmp.SalesId);
                        salesLineTmp.doInsert();

                        // <GEEPL>
                        if (isPL)
                        {
                            taxServiceTariff.clear();
                            taxServiceTariff.ParentRecId = salesLineTmp.RecId;
                            taxServiceTariff.ParentTableId = salesLineTmp.TableId;
                            taxServiceTariff.ServiceTariffNumber = TaxServiceTariff::findByParent(salesLineDelete.TableId, salesLineDelete.RecId, false).ServiceTariffNumber;
                            taxServiceTariff.doInsert();
                        }
                        // </GEEPL>

                        if (salesLineTmp.isCategoryBased() && salesLineDelete.SalesLineforeignTradeCategory)
                        {
                            if (typeof(conpeek(salesLineDelete.SalesLineforeignTradeCategory,1)) != Types::Record)
                            {
                                warning("@SYS83733");
                            }
                            else
                            {
                                salesLineForeignTradeCategoryTmp.clear();
                                salesLineForeignTradeCategoryTmp.overwriteSystemfields(true);
                                salesLineForeignTradeCategoryTmp.data(conpeek(salesLineDelete.SalesLineforeignTradeCategory,1));
                                salesLineForeignTradeCategoryTmp.doInsert();
                            }
                        }
                    }
                }
            }
        }
        CodeAccessPermission::revertAssert();
        salesTableTmp.overwriteSystemfields(false);
        salesLineTmp.overwriteSystemfields(false);
        salesLineForeignTradeCategoryTmp.overwriteSystemfields(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesTableDeleteUnpack construct()
    {
        return new SalesTableDeleteUnpack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newUnpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>SalesTableDeleteUnpack</c> class.
    /// </summary>
    /// <param name="_salesTableDeletePackedList">
    ///    A packed list of records from the <c>salesTableDelete</c> table.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>SalesTableDeleteUnpack</c> class.
    /// </returns>
    static SalesTableDeleteUnpack newUnpack(container _salesTableDeletePackedList)
    {
        SalesTableDeleteUnpack unpack = SalesTableDeleteUnpack::construct();
        unpack.parmSalesTableDeletePackedList(_salesTableDeletePackedList);
        return unpack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineCreationSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next unique line creation sequence number per SalesId.
    /// </summary>
    /// <returns>The next unique line creation sequence number</returns>
    public SalesLineCreationSequenceNumber nextLineCreationSequence(SalesId _salesId)
    {
        SalesLineCreationSequenceNumber currentLineCreationSequenceNumber = 0;
        SalesLine salesLineSeqNum;

        salesLineSeqNum.setTmp();
        salesLineSeqNum.setTmpData(salesLineTmp);

        select maxof(LineCreationSequenceNumber)
            from salesLineSeqNum
            where salesLineSeqNum.SalesId == _salesId;
            
        if (salesLineSeqNum)
        {
            currentLineCreationSequenceNumber = salesLineSeqNum.LineCreationSequenceNumber;
        }

        return (currentLineCreationSequenceNumber + 1);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>