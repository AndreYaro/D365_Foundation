<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionDateEffectiveData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DateEffectiveDataManagerJournalizing</c> class provides the date effective implementation
///    that is specific to the journalizing definition.
/// </summary>
class JournalizingDefinitionDateEffectiveData extends SysDateEffectiveDataManager
{
    #define.JournalizingDefinitionValidTimeStateUpdate('JournalizingDefinitionValidTimeStateUpdate')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFutureRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a future version of the record from an earlier version of the effective dated record.
    /// </summary>
    /// <param name="_oldVersionId">
    ///    The record ID of the earlier version of the effective dated record.
    /// </param>
    /// <param name="_buffer">
    ///    The record buffer that contains the future version of the effective dated record.
    /// </param>
    public void addFutureRecord(RecId _oldVersionId, Common _buffer)
    {
        // The class %1 must implement the methods %2.
        throw error(strfmt("@SYS191647", classstr(JournalizingDefinitionDateEffectiveData), 'addFutureRecord'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the string value to use as a key for the server cache.
    /// </summary>
    /// <returns>
    ///    The string key for the cache.
    /// </returns>
    protected str cacheKey()
    {
        return #JournalizingDefinitionValidTimeStateUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new version of the <c>JournalizingDefinitionVersion</c> effective dated record.
    /// </summary>
    /// <param name="_journalizingDefinitionVersionId">
    ///    The record ID of the earlier version of the <c>JournalizingDefinitionVersion</c> effective dated
    ///    record.
    /// </param>
    /// <returns>
    ///    The record ID of the new version of the <c>JournalizingDefinitionVersion</c> effective dated record.
    /// </returns>
    public RecId createNewVersion(RecId  _journalizingDefinitionVersionId)
    {
        JournalizingDefinitionVersion  journalizingDefinitionVersion;

        journalizingDefinitionVersion = JournalizingDefinitionVersion::find(_journalizingDefinitionVersionId,true);
        journalizingDefinitionVersion.ValidFrom = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        if (journalizingDefinitionVersion.ValidFrom > journalizingDefinitionVersion.ValidTo)
        {
            journalizingDefinitionVersion.ValidTo = dateMax();
        }
        journalizingDefinitionVersion.doInsert();

        return journalizingDefinitionVersion.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireCurrentRecord</Name>
				<Source><![CDATA[
    public void expireCurrentRecord(RecId _oldVersionId)
    {
        // The class %1 must implement the methods %2.
        throw error(strfmt("@SYS191647", classstr(JournalizingDefinitionDateEffectiveData), 'expireCurrentRecord'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDateEffectiveVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>JournalizingDefinitionVersion</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>JournalizingDefinitionVersion</c> class; otherwise, null.
    /// </returns>
    /// <remarks>
    ///    Returns null if invoked by using the <c>SysDateEffectiveDataManager</c> class object; otherwise,
    ///    the corresponding instance of the <c>SysDateEffectiveVersion</c> map as specified in the derived
    ///    class.
    /// </remarks>
    public SysDateEffectiveVersion getSysDateEffectiveVersion()
    {
        JournalizingDefinitionVersion   journalizingDefinitionVersion;
        return journalizingDefinitionVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the data of the <c>JournalizingDefinitionMatch</c> table from the earlier version to the new
    ///    version.
    /// </summary>
    /// <param name="_oldVersionId">
    ///    The record ID of the earlier version of the <c>JournalizingDefinitionVersion</c> date effective
    ///    record.
    /// </param>
    /// <param name="_newVersionId">
    ///    The record ID of the new version of the <c>JournalizingDefinitionVersion</c> date effective record.
    /// </param>
    /// <param name="_buffer">
    ///    The buffer of the corresponding table in which operation has occurred.
    /// </param>
    /// <param name="_operationToPerform">
    ///    The enumeration value that identifies the type of the operation performed in any of the
    ///    corresponding records.
    /// </param>
    protected void processData(RecId                        _oldVersionId,
                               RecId                        _newVersionId,
                               Common                       _buffer,
                               SysDateEffectiveOperation    _operationToPerform)
    {
        JournalizingDefinitionMatch             journalizingDefinitionMatch;
        JournalizingDefinitionMatch             tmpJournalizingDefinitionMatch;
        JournalizingDefinitionRelatedDefinition journalizingDefinitionRelatedDefinition;
        JournalizingDefinitionRelatedDefinition tmpJournalizingDefinitionRelatedDef;

        ttsbegin;
        if ( _buffer.TableId == tablenum(JournalizingDefinitionMatch) &&
            _operationToPerform == SysDateEffectiveOperation::Insert)
        {
            tmpJournalizingDefinitionMatch = _buffer;
            tmpJournalizingDefinitionMatch.JournalizingDefinitionVersion = _newVersionId;
            tmpJournalizingDefinitionMatch.doInsert();
            _buffer = null;
        }

        while select journalizingDefinitionMatch
        where journalizingDefinitionMatch.JournalizingDefinitionVersion == _oldVersionId
        {
            _buffer = this.processJournalizingDefinitionMatch(_newVersionId,
                                                              _buffer,
                                                              journalizingDefinitionMatch,
                                                              _operationToPerform);
        }

        if (_buffer.TableId == tablenum(JournalizingDefinitionRelatedDefinition) &&
           _operationToPerform == SysDateEffectiveOperation::Insert)
        {
            tmpJournalizingDefinitionRelatedDef = _buffer;
            tmpJournalizingDefinitionRelatedDef.ParentJournalizingDefinitionVersion = _newVersionId;
            tmpJournalizingDefinitionRelatedDef.doInsert();
            _buffer = null;
        }

        while select journalizingDefinitionRelatedDefinition
            where journalizingDefinitionRelatedDefinition.ParentJournalizingDefinitionVersion == _oldVersionId
        {
            _buffer = this.processJournalizingDefRelatedDefinition(_newVersionId,
                                                                   _buffer,
                                                                   journalizingDefinitionRelatedDefinition,
                                                                   _operationToPerform);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processJournalizingDefinitionMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the data of the <c>JournalizingDefinitionMatch</c> table from the earlier version to the new
    ///    version.
    /// </summary>
    /// <param name="_newJournalizingDefinitionVersionId">
    ///    The record ID of a record in the <c>JournalizingDefinitionVersion</c> table created because of the
    ///    new version of the effective dated table record.
    /// </param>
    /// <param name="_buffer">
    ///    The buffer of the corresponding table in which operation has occurred.
    /// </param>
    /// <param name="_journalizingDefinitionMatch">
    ///    The record in the <c>JournalizingDefinitionMatch</c> table that will be used to copy.
    /// </param>
    /// <param name="_operationToPerform">
    ///    The enumeration value that identifies the type of the operation performed in any of the
    ///    corresponding table records.
    /// </param>
    /// <returns>
    ///    The buffer of the corresponding table in which the operation has occurred.
    /// </returns>
    private Common processJournalizingDefinitionMatch(
        RecId                       _newJournalizingDefinitionVersionId,
        Common                      _buffer,
        JournalizingDefinitionMatch _journalizingDefinitionMatch,
        SysDateEffectiveOperation   _operationToPerform)
    {
        JournalizingDefinitionMatchDetail   journalizingDefinitionMatchDetail;
        JournalizingDefinitionMatchDetail   tmpJournalizingDefinitionMatchDetail;
        JournalizingDefinitionMatchDetail   localJournalizingDefinitionMatchDetail;

        RecId                               journalizingDefinitionMatchId;

        if (_buffer.TableId == tablenum(JournalizingDefinitionMatch))
        {
            if (_operationToPerform == SysDateEffectiveOperation::Update &&
                     _buffer.RecId == _journalizingDefinitionMatch.RecId)
            {
                _journalizingDefinitionMatch = _buffer;
                _buffer = null;
            }
            else if (_operationToPerform == SysDateEffectiveOperation::Delete &&
                     _buffer.RecId == _journalizingDefinitionMatch.RecId)
            {
                return null;
            }
        }

        _journalizingDefinitionMatch.JournalizingDefinitionVersion = _newJournalizingDefinitionVersionId;
        journalizingDefinitionMatchId = _journalizingDefinitionMatch.RecId;
        _journalizingDefinitionMatch.doInsert();

        if (_buffer.TableId == tablenum(JournalizingDefinitionMatchDetail) &&
           _operationToPerform == SysDateEffectiveOperation::Insert)
        {
            localJournalizingDefinitionMatchDetail = _buffer;
            if (localJournalizingDefinitionMatchDetail.JournalizingDefinitionMatch == journalizingDefinitionMatchId)
            {
                tmpJournalizingDefinitionMatchDetail = _buffer;
                tmpJournalizingDefinitionMatchDetail.JournalizingDefinitionMatch = _journalizingDefinitionMatch.RecId;
                tmpJournalizingDefinitionMatchDetail.doInsert();
                _buffer = null;
            }
        }

        while select journalizingDefinitionMatchDetail
            where journalizingDefinitionMatchDetail.JournalizingDefinitionMatch == journalizingDefinitionMatchId
        {
            _buffer = this.processJournalizingDefinitionMatchDetail(_journalizingDefinitionMatch.RecId,
                                                          _buffer,
                                                          journalizingDefinitionMatchDetail,
                                                          _operationToPerform);
        }
        return _buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processJournalizingDefinitionMatchDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the data of the <c>JournalizingDefinitionMatchDetail</c> table from the earlier version to
    ///    the new version.
    /// </summary>
    /// <param name="_newJournalizingDefinitionMatchId">
    ///    The record ID of a record in the <c>JournalizingDefinitionMatch</c> table that was created because
    ///    of the new version of the effective dated table record.
    /// </param>
    /// <param name="_buffer">
    ///    The buffer of the corresponding table in which operation has occurred.
    /// </param>
    /// <param name="_journalizingDefinitionMatchDetail">
    ///    The record in the <c>JournalizingDefinitionMatchDetail</c> table that will be used to copy.
    /// </param>
    /// <param name="_operationToPerform">
    ///    The enumeration value that identifies the type of the operation performed in any of the
    ///    corresponding table records.
    /// </param>
    /// <returns>
    ///    The buffer of the corresponding table in which the operation has occurred.
    /// </returns>
    private Common processJournalizingDefinitionMatchDetail(
        RecId                               _newJournalizingDefinitionMatchId,
        Common                              _buffer,
        JournalizingDefinitionMatchDetail   _journalizingDefinitionMatchDetail,
        SysDateEffectiveOperation           _operationToPerform)
    {
        JournalizingDefinitionMatchDetail   tmpJournalizingDefinitionMatchDetail;

        if (_buffer && _buffer.TableId == tablenum(JournalizingDefinitionMatchDetail))
        {
            if (_operationToPerform == SysDateEffectiveOperation::Insert)
            {
                tmpJournalizingDefinitionMatchDetail = _buffer;
                tmpJournalizingDefinitionMatchDetail.JournalizingDefinitionMatch = _newJournalizingDefinitionMatchId;
                tmpJournalizingDefinitionMatchDetail.doInsert();
                _buffer = null;
            }
            else if (_operationToPerform == SysDateEffectiveOperation::Update &&
                     _buffer.RecId == _journalizingDefinitionMatchDetail.RecId)
            {
                _journalizingDefinitionMatchDetail = _buffer;
                _buffer = null;
            }
            else if (_operationToPerform == SysDateEffectiveOperation::Delete &&
                     _buffer.RecId == _journalizingDefinitionMatchDetail.RecId)
            {
                return null;
            }
        }

        _journalizingDefinitionMatchDetail.JournalizingDefinitionMatch = _newJournalizingDefinitionMatchId;
        _journalizingDefinitionMatchDetail.doInsert();
        return _buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processJournalizingDefRelatedDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the data of the <c>JournalizingDefinitionRelatedDefinition</c> table from the earlier
    ///    version to the new version.
    /// </summary>
    /// <param name="_newJournalizingDefinitionVersionId">
    ///    The record ID of a record in the <c>JournalizingDefinitionVersion</c> table that was created
    ///    because of the new version of the effective dated table record.
    /// </param>
    /// <param name="_buffer">
    ///    The buffer of the corresponding table in which the operation has occurred.
    /// </param>
    /// <param name="_journalizingDefinitionRelatedDefinition">
    ///    The record of <c>JournalizingDefinitionRelatedDefinition</c> table to use to copy.
    /// </param>
    /// <param name="_operationToPerform">
    ///    The enumeration value to use to identify the type of the operation performed in any of the
    ///    corresponding tables.
    /// </param>
    /// <returns>
    ///    The buffer of the corresponding table in which the operation has occurred.
    /// </returns>
    private Common processJournalizingDefRelatedDefinition(
        RecId                                   _newJournalizingDefinitionVersionId,
        Common                                  _buffer,
        JournalizingDefinitionRelatedDefinition _journalizingDefinitionRelatedDefinition,
        SysDateEffectiveOperation                  _operationToPerform)
    {
        if (_buffer && _buffer.TableId == tablenum(JournalizingDefinitionRelatedDefinition))
        {
            if (_operationToPerform == SysDateEffectiveOperation::Update &&
                     _buffer.RecId == _journalizingDefinitionRelatedDefinition.RecId)
            {
                _journalizingDefinitionRelatedDefinition = _buffer;
                _buffer = null;
            }
            else if (_operationToPerform  == SysDateEffectiveOperation::Delete &&
                     _buffer.RecId == _journalizingDefinitionRelatedDefinition.RecId)
            {
                return null;
            }
        }

        _journalizingDefinitionRelatedDefinition.ParentJournalizingDefinitionVersion = _newJournalizingDefinitionVersionId;
        _journalizingDefinitionRelatedDefinition.doInsert();

        return _buffer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>