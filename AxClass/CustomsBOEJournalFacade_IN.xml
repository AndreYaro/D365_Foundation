<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsBOEJournalFacade_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Customs BOE Facade
/// </summary>
class CustomsBOEJournalFacade_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel specifc BOE journal and related BOE transactions
    /// </summary>
    /// <param name="journalRecid">
    ///  <c>CustomsVendBOEJour_IN</c> Recid
    /// </param>
    /// <returns>
    /// Returns boolean value whether journal cancellation succedd
    /// </returns>
    public static boolean cancelJournal(RefRecId journalRecid)
    {
        boolean result = true;
        CustomsVendBOEJour_IN customsBOEJour;
        CustomsVendBOETrans_IN customsBOETrans;

        select firstOnly forupdate * from customsBOEJour
            where customsBOEJour.RecId == journalRecid;

        if (customsBOEJour.RecId)
        {
            // validate header
            try
            {
                CustomsBOEJournalFacade_IN::validateJournalForCancel(customsBOEJour);
            }
            catch(Exception::Error)
            {
                result = false;
            }

            // validate lines
            while select * from customsBOETrans
                where customsBOETrans.CustomsBillOfEntryJournal_IN == customsBOEJour.RecId
            {
                try
                {
                    CustomsBOEJournalFacade_IN::validateTransForCancel(customsBOETrans);
                }
                catch(Exception::Error)
                {
                    result = false;
                }
            }

            // cancel
            if (result)
            {
                ttsBegin;
                // update jouornal status
                customsBOEJour.Status = CustomsVendBOEStatus_IN::Canceled;
                customsBOEJour.update();
                // update trans status
                update_recordset customsBOETrans
                setting
                    Status = CustomsVendBOEStatus_IN::Canceled
                where
                    customsBOETrans.CustomsBillOfEntryJournal_IN ==  customsBOEJour.RecId;
                ttsCommit;
            }
        }
        else
        {
            result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalForCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check wether BOE journal is valid for cancellation
    /// </summary>
    /// <param name="_jour">
    /// <c>CustomsVendBOEJour_IN</c> record
    /// </param>
    /// <returns>
    /// Return boolean value whether journal is valid for cancellation
    /// </returns>
    public static boolean checkJournalForCancel(CustomsVendBOEJour_IN _jour)
    {
        return CustomsBOEJournalFacade_IN::checkJournalStatusForCancel(_jour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalStatusForCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check wether BOE journal status is valid for cancellation
    /// </summary>
    /// <param name="_jour">
    /// <c>CustomsVendBOEJour_IN</c> record
    /// </param>
    /// <returns>
    /// Return boolean value whether journal status is valid for cancellation
    /// </returns>
    public static boolean checkJournalStatusForCancel(CustomsVendBOEJour_IN _jour)
    {
        boolean result = true;

        if (_jour.Status != CustomsVendBOEStatus_IN::Posted
            || _jour.ReceiveStatus != CustomsVendBOESubStatus_IN::None
            || _jour.InvoiceStatus != CustomsVendBOESubStatus_IN::None)
            result = false;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransForCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check wether BOE trans is valid for cancellation
    /// </summary>
    /// <param name="_trans">
    /// <c>CustomsVendBOETrans_IN</c> record
    /// </param>
    /// <returns>
    /// Return boolean value whether trans is valid for cancellation
    /// </returns>
    public static boolean checkTransForCancel(CustomsVendBOETrans_IN _trans)
    {
        return CustomsBOEJournalFacade_IN::checkTransStatusForCancel(_trans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransStatusForCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check wether BOE trans status is valid for cancellation
    /// </summary>
    /// <param name="_trans">
    /// <c>CustomsVendBOETrans_IN</c> record
    /// </param>
    /// <returns>
    /// Return boolean value whether trans status is valid for cancellation
    /// </returns>
    public static boolean checkTransStatusForCancel(CustomsVendBOETrans_IN _trans)
    {
        boolean result = true;

        if (_trans.Status != CustomsVendBOEStatus_IN::Posted)
            result = false;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tweakBOEJourInvoiceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check relate <c>CustomsVendBOETrans_In</c> records to tweak <c>CustomsVendBOEJour_In</c> status
    /// </summary>
    /// <param name="_jourId">
    /// <c>CustomsVendBOEJour_In</c> Recid
    /// </param>
    public static void tweakBOEJourInvoiceStatus(RecId _jourId)
    {
        CustomsVendBOETrans_IN customsBOETrans;
        CustomsVendBOEJour_IN customsBOEJour;

        select firstonly forUpdate * from customsBOEJour
            where
                customsBOEJour.RecId == _jourId;
        if (!customsBOEJour.RecId)
            return;

        select firstOnly * from customsBOETrans
            where
                customsBOETrans.CustomsBillOfEntryJournal_IN == _jourId
                && customsBOETrans.RemainingQty > 0
                && customsBOETrans.Status == CustomsVendBOEStatus_IN::Posted;
        if (customsBOETrans.RecId)
        {
            select firstOnly * from customsBOETrans
                where
                    customsBOETrans.CustomsBillOfEntryJournal_IN == _jourId
                    && customsBOETrans.RemainingQty < customsBOETrans.BillOfEntryQty
                    && customsBOETrans.Status == CustomsVendBOEStatus_IN::Posted;
            if (customsBOETrans.RecId)
            {
                // Partial Invoiced
                customsBOEJour.InvoiceStatus = CustomsVendBOESubStatus_IN::Partial;
                customsBOEJour.update();
            }
            else
            {
                // Not Invoiced
                customsBOEJour.InvoiceStatus = CustomsVendBOESubStatus_IN::None;
                customsBOEJour.update();
            }
        }
        else
        {
            // All Invoiced
            customsBOEJour.InvoiceStatus = CustomsVendBOESubStatus_IN::Done;
            customsBOEJour.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tweakBOEJourReceiveStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check relate <c>CustomsVendBOETrans_In</c> records to tweak <c>CustomsVendBOEJour_In</c> status
    /// </summary>
    /// <param name="_jourId">
    /// <c>CustomsVendBOEJour_In</c> Recid
    /// </param>
    public static void tweakBOEJourReceiveStatus(RecId _jourId)
    {
        VendPackingSlipTrans                  vendPackingSlipTrans;
        CustomsVendBOEJour_IN                 customsVendBOEJour;
        CustomsVendBOETrans_IN                customsVendBOETrans;
        CustomsVendBOEJourReceiveStatus_IN    receiveStatus;
        CustomsVendPackingSlipBOETransLink_IN customsVendPackingSlipBOETransLink;

        if (_jourId)
        {
            select sum(Qty) from vendPackingSlipTrans
                join CustomsVendBOETrans_IN, VendPackingSlipTrans from customsVendPackingSlipBOETransLink
                    where customsVendPackingSlipBOETransLink.VendPackingSlipTrans   == vendPackingSlipTrans.RecId
                join CustomsBillOfEntryJournal_IN from customsVendBOETrans
                    where customsVendBOETrans.CustomsBillOfEntryJournal_IN          == _jourId
                    &&    customsVendBOETrans.Status                                != CustomsVendBOEStatus_IN::Canceled
                    &&    customsVendPackingSlipBOETransLink.CustomsVendBOETrans_IN == customsVendBOETrans.RecId;

            select sum(BillOfEntryQty) from customsVendBOETrans
                    where customsVendBOETrans.CustomsBillOfEntryJournal_IN  == _jourId
                    &&    customsVendBOETrans.Status                        != CustomsVendBOEStatus_IN::Canceled;

            if ( vendPackingSlipTrans.Qty == 0 )
            {
                receiveStatus = CustomsVendBOESubStatus_IN::None;
            }
            else if ( vendPackingSlipTrans.Qty < customsVendBOETrans.BillOfEntryQty )
            {
                receiveStatus = CustomsVendBOESubStatus_IN::Partial;
            }
            else
            {
                receiveStatus = CustomsVendBOESubStatus_IN::Done;
            }

            customsVendBOEJour = CustomsVendBOEJour_IN::find(_jourId, true);
            customsVendBOEJour.ReceiveStatus = receiveStatus;
            customsVendBOEJour.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalForCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate whether BOE journal can be canceled or not
    /// </summary>
    /// <param name="_jour">
    ///  <c>CustomsVendBOEJour_IN</c> record
    /// </param>
    protected static void validateJournalForCancel(CustomsVendBOEJour_IN _jour)
    {
        if (!CustomsBOEJournalFacade_IN::checkJournalForCancel(_jour))
        {
            throw error("@SYS4110539");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransForCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate whether BOE trans can be canceled or not
    /// </summary>
    /// <param name="_trans">
    ///  <c>CustomsVendBOETrans_IN</c> record
    /// </param>
    protected static void validateTransForCancel(CustomsVendBOETrans_IN _trans)
    {
        if (!CustomsBOEJournalFacade_IN::checkTransForCancel(_trans))
        {
            throw error("@SYS4110539");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>