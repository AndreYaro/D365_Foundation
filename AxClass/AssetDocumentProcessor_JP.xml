<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentProcessor_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset document processor.
/// </summary>
class AssetDocumentProcessor_JP
{
    AssetDocument_JP        assetDocument;

    RefRecId                assetDocumentEntryRecId;
    AssetTransType          assetTransType;
    RefRecId                refRecId;
    RefTableId              refTableId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDocumentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the asset document transaction.
    /// </summary>
    /// <returns>
    /// Asset document transaction record.
    /// </returns>
    protected AssetDocumentTrans_JP createDocumentTrans()
    {
        AssetDocumentTrans_JP   assetDocumentTrans;

        assetDocumentTrans.clear();
        assetDocumentTrans.initValue();
        assetDocumentTrans.AssetDocumentEntry_JP = assetDocumentEntryRecId;
        assetDocumentTrans.RefTableId = this.parmRefTableId();
        assetDocumentTrans.RefRecId = this.parmRefRecId();
        assetDocumentTrans.insert();

        return assetDocumentTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reference transaction record by ReftableId and RefRecId.
    /// </summary>
    /// <returns>
    /// Reference transaction record.
    /// </returns>
    public Common getReferenceRecord()
    {
        Common ret;

        if (this.parmRefTableId() && this.parmRefRecId())
        {
            ret = AssetTrans::find(this.parmRefRecId());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceRecordAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reference transaction record AmountMST by ReftableId and RefRecId.
    /// </summary>
    /// <returns>
    /// Reference transaction AmountMST.
    /// </returns>
    public AmountMST getReferenceRecordAmountMST()
    {
        Common      ret;
        AmountMST   amountMST;

        ret = this.getReferenceRecord();

        if (ret.TableId)
        {
            amountMST = ret.(fieldNum(AssetTrans, AmountMST));
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceRecordAssetBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reference transaction record AssetBookId by ReftableId and RefRecId.
    /// </summary>
    /// <returns>
    /// Reference transaction AssetBookId.
    /// </returns>
    public AssetBookId getReferenceRecordAssetBookId()
    {
        Common      ret;
        AssetBookId assetBookId;

        ret = this.getReferenceRecord();

        if (ret.TableId)
        {
            assetBookId = ret.(fieldNum(AssetTrans, BookId));
        }

        return assetBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceRecordAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reference transaction record AssetId by ReftableId and RefRecId.
    /// </summary>
    /// <returns>
    /// Reference transaction AssetId.
    /// </returns>
    public AssetId getReferenceRecordAssetId()
    {
        Common      ret;
        AssetId     assetId;

        ret = this.getReferenceRecord();

        if (ret.TableId)
        {
            assetId = ret.(fieldNum(AssetTrans, AssetId));
        }

        return assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceRecordTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reference transaction record TransDate by ReftableId and RefRecId.
    /// </summary>
    /// <returns>
    /// Reference transaction TransDate.
    /// </returns>
    public TransDate getReferenceRecordTransDate()
    {
        Common      ret;
        TransDate   transDate;

        ret = this.getReferenceRecord();

        if (ret.TableId)
        {
            transDate = ret.(fieldNum(AssetTrans, TransDate));
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reference transaction record transaction type by ReftableId and RefRecId.
    /// </summary>
    /// <returns>
    /// Reference transaction type.
    /// </returns>
    public AssetTransType getReferenceTransType()
    {
        Common      ret;
        AssetTransType   transType;

        ret = this.getReferenceRecord();

        if (ret.TableId)
        {
            transType = ret.(fieldNum(AssetTrans, TransType));
        }

        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the asset document instance.
    /// </summary>
    protected void initialize()
    {
        assetDocument = AssetDocument_JP::construct(assetDocumentEntryRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentEntryRecId</Name>
				<Source><![CDATA[
    public RefRecId parmAssetDocumentEntryRecId(RefRecId _assetDocumentEntryRecId = assetDocumentEntryRecId)
    {
        assetDocumentEntryRecId = _assetDocumentEntryRecId;

        return assetDocumentEntryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTransType</Name>
				<Source><![CDATA[
    public AssetTransType parmAssetTransType(AssetTransType _assetTransType = assetTransType)
    {
        assetTransType = _assetTransType;
        return assetTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefRecId</Name>
				<Source><![CDATA[
    public RefRecId parmRefRecId(RefRecId _refRecId = refRecId)
    {
        refRecId = _refRecId;

        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
    public RefTableId parmRefTableId(RefTableId _reftableId = refTableId)
    {
        refTableId = _reftableId;
        return refTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the transction.
    /// </summary>
    protected void process()
    {
        this.createDocumentTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses asset document transaction.
    /// </summary>
    /// <param name="_assetDocumentTrans">
    /// The asset document transaction.
    /// </param>
    /// <param name="_assetTransOrig">
    /// The original host transaction which asset document attached.
    /// </param>
    /// <param name="_assetTransNew">
    /// The new host transaction which asset document attached.
    /// </param>
    public void revertTrans(
        AssetDocumentTrans_JP    _assetDocumentTrans,
        Common                   _assetTransOrig,
        Common                   _assetTransNew
    )
    {
        if (_assetDocumentTrans
            && _assetDocumentTrans.RefTableId == _assetTransOrig.TableId
            && _assetDocumentTrans.RefRecId   == _assetTransOrig.RecId)
        {
            ttsBegin;
            _assetDocumentTrans.RefTableId = _assetTransNew.TableId;
            _assetDocumentTrans.RefRecId   = _assetTransNew.RecId;
            _assetDocumentTrans.insert();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the process.
    /// </summary>
    /// <remarks>
    /// Validates and then process.
    /// </remarks>
    protected void submit()
    {
        if (this.validate())
        {
            this.process();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the processing.
    /// </summary>
    /// <returns>
    /// True if it passed validation; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constucts an asset document processor.
    /// </summary>
    /// <param name="_assetDocumentRecId">
    /// The asset document record id.
    /// </param>
    /// <param name="_assetTransType">
    /// The asset transaction type.
    /// </param>
    /// <returns>
    /// An asset document processor.
    /// </returns>
    public static AssetDocumentProcessor_JP construct(
        RefRecId       _assetDocumentRecId,
        AssetTransType _assetTransType)
    {
        AssetDocumentProcessor_JP   assetDocumentProcessor;
        AssetDocument_JP            assetDocument          = AssetDocument_JP::construct(_assetDocumentRecId);

        assetDocumentProcessor = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(AssetDocumentProcessor_JP),
            new AssetDocumentTypeAttribute_JP(assetDocument.getAssetDocumentType()));

        if (assetDocumentProcessor == null)
        {
            assetDocumentProcessor = new AssetDocumentProcessor_JP();
        }

        assetDocumentProcessor.parmAssetDocumentEntryRecId(_assetDocumentRecId);
        assetDocumentProcessor.parmAssetTransType(_assetTransType);
        assetDocumentProcessor.initialize();

        return assetDocumentProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssetDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the asset document.
    /// </summary>
    /// <param name="_assetDocumentEntryRecId">
    /// The asset document entry record id.
    /// </param>
    /// <remarks>
    /// This is ths fasade for asset document deletion.
    /// </remarks>
    public static void deleteAssetDocument(
        RefRecId    _assetDocumentEntryRecId)
    {
        AssetDocument_JP        assetDocument;
        AssetDocumentEntry_JP   assetDocumentEntry;

        assetDocument = AssetDocument_JP::construct(_assetDocumentEntryRecId);
        if (!assetDocument.validateIsRemovable())
        {
            throw error("@SYS4004953");
        }

        delete_from assetDocumentEntry
            where assetDocumentEntry.RecId == _assetDocumentEntryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertAssetDocumentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses asset document transaction.
    /// </summary>
    /// <param name="_assetDocumentTrans">
    /// The asset document transaction.
    /// </param>
    /// <param name="_assetTransOrig">
    /// The original host transaction which asset document attached.
    /// </param>
    /// <param name="_assetTransNew">
    /// The new host transaction which asset document attached.
    /// </param>
    public static void revertAssetDocumentTrans(
        AssetDocumentTrans_JP    _assetDocumentTrans,
        Common                   _assetTransOrig,
        Common                   _assetTransNew)
    {
        AssetDocumentProcessor_JP processor;
        AssetTrans                assetTrans;
        assetTransType            assetTransType     = assetTransType::None;

        if (_assetDocumentTrans && _assetTransOrig && _assetTransNew)
        {
            assetTrans = _assetTransOrig;
            assetTransType = assetTrans.TransType;

            processor = AssetDocumentProcessor_JP::construct(_assetDocumentTrans.AssetDocumentEntry_JP, assetTransType);
            processor.revertTrans(_assetDocumentTrans, _assetTransOrig, _assetTransNew);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitAssetDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the asset document processing.
    /// </summary>
    /// <param name="_assetDocumentEntryRecId">
    /// The asset document entry record id.
    /// </param>
    /// <param name="_assetTransType">
    /// The asset transaction type.
    /// </param>
    /// <param name="_refTableId">
    /// The reference record table id.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record id.
    /// </param>
    /// <remarks>
    /// This is ths fasade for asset document processing.
    /// </remarks>
    public static void submitAssetDocument(
        RefRecId        _assetDocumentEntryRecId,
        AssetTransType  _assetTransType = AssetTransType::None,
        RefTableId      _refTableId     = 0,
        RefRecId        _refRecId       = 0)
    {
        AssetDocumentProcessor_JP processor = AssetDocumentProcessor_JP::construct(_assetDocumentEntryRecId, _assetTransType);
        processor.parmRefTableId(_refTableId);
        processor.parmRefRecId(_refRecId);
        processor.submit();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>