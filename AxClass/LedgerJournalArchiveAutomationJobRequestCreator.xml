<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalArchiveAutomationJobRequestCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Archive.Contracts;

/// <summary>
/// Helper class to create a contract for ledger journal archive job type.
/// </summary>
public final class LedgerJournalArchiveAutomationJobRequestCreator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPostJobRequest</Name>
				<Source><![CDATA[
    public ArchiveJobPostRequest createPostJobRequest(LedgerJournalArchiveTrans _archiveTrans)
    {
        str jobDes = strFmt("@LedgerJournal:LedgerJournalArchiveAutomationJobRequestCreatorDescription", enum2Str(_archiveTrans.JournalType), _archiveTrans.JournalDataAreaId);
        ArchiveServiceArchiveJobPostRequestBuilder builder = ArchiveServiceArchiveJobPostRequestBuilder::construct(jobDes, LedgerJournalArchiveAutomationConstants::RegisteredTypeName);

        // build root source for LedgerJournalTable
        DictTable ledgerJournalTableTable = new DictTable(tableNum(ledgerJournalTable));
        DictTable ledgerJournalTableHistoryTable = new DictTable(tableNum(LedgerJournalTableHistory));
        
        str ledgerJournalTableName = ledgerJournalTableTable.name(DbBackend::Sql);
        str ledgerJournalTableHistoryName = ledgerJournalTableHistoryTable.name(DbBackend::Sql);
        str postedDateTimeFieldName = ledgerJournalTableTable.fieldName(fieldNum(ledgerJournalTable, PostedDateTime), (DbBackend::Sql));
        str journalNumFieldName = ledgerJournalTableTable.fieldName(fieldNum(ledgerJournalTable, JournalNum), (DbBackend::Sql));
        
        // build sub query for LedgerJournalTransVoucherTemplate
        DictTable LedgerJournalTransVoucherTemplateTable = new DictTable(tableNum(LedgerJournalTransVoucherTemplate));
        str ledgerJournalTransVoucherTemplateName = LedgerJournalTransVoucherTemplateTable.name(DbBackend::Sql);
        ArchiveServiceArchiveJobPostRequestSubQueryBuilder subqueryBuilderLedgerJournalTransVoucherTemplate =
            ArchiveServiceArchiveJobPostRequestSubQueryBuilder::construct(
                ledgerJournalTransVoucherTemplateName,
                ledgerJournalTableName,
                Microsoft.Dynamics.Archive.Contracts.Operator::NotExists);
        subqueryBuilderLedgerJournalTransVoucherTemplate
            .addJoinCondition(journalNumFieldName, journalNumFieldName)
            .addDataAreaIdJoinCondition()
            .addPartitionWhereCondition();

        builder.addDataSource(ledgerJournalTableName, ledgerJournalTableHistoryName)
            .addDateTimeWhereConditionToDataSource(
                ledgerJournalTableName,
                postedDateTimeFieldName,
                _archiveTrans.StartDateTime,
                Microsoft.Dynamics.Archive.Contracts.Operator::GreaterThanOrEquals)
            .addDateTimeWhereConditionToDataSource(
                ledgerJournalTableName,
                postedDateTimeFieldName,
                _archiveTrans.EndDateTime,
                Microsoft.Dynamics.Archive.Contracts.Operator::LessThanOrEquals)
            .addIntWhereConditionToDataSource(
                ledgerJournalTableName,
                ledgerJournalTableTable.fieldName(fieldNum(LedgerJournalTable, Posted), (DbBackend::Sql)),
                1,
                Microsoft.Dynamics.Archive.Contracts.Operator::Equals)
            .addIntWhereConditionToDataSource(
                ledgerJournalTableName,
                ledgerJournalTableTable.fieldName(fieldNum(LedgerJournalTable, JournalType), (DbBackend::Sql)),
                enum2int(_archiveTrans.JournalType),
                Microsoft.Dynamics.Archive.Contracts.Operator::Equals)
            .addDataAreaIdWhereCondition(ledgerJournalTableName, _archiveTrans.JournalDataAreaId)
            .addPartitionWhereCondition(ledgerJournalTableName)
            .addSubQueryWhereConditionToDataSource(ledgerJournalTableName, subqueryBuilderLedgerJournalTransVoucherTemplate);

        // Build child LedgerJournalTrans
        DictTable ledgerJournalTransTable = new DictTable(tableNum(LedgerJournalTrans));
        DictTable ledgerJournalTransHistoryTable = new DictTable(tableNum(LedgerJournalTransHistory));
        str ledgerJournalTransTableName = ledgerJournalTransTable.name(DbBackend::Sql);
        str ledgerJournalTransTableHistoryTableName = ledgerJournalTransHistoryTable.name(DbBackend::Sql);

        builder.addDataSource(ledgerJournalTransTableName, ledgerJournalTransTableHistoryTableName, ledgerJournalTableName)
            .addJoinCondition(
                ledgerJournalTransTableName,
                journalNumFieldName,
                journalNumFieldName)
            .addDataAreaIdJoinCondition(ledgerJournalTransTableName)
            .addPartitionWhereCondition(ledgerJournalTransTableName);

        // Build child LedgerJournalTable_W
        DictTable ledgerJournalTableWTable = new DictTable(tableNum(LedgerJournalTable_W));
        DictTable ledgerJournalTableHistoryWTable = new DictTable(tableNum(LedgerJournalTableHistory_W));
        str ledgerJournalTableWTableName = ledgerJournalTableWTable.name(DbBackend::Sql);
        str ledgerJournalTableHistoryWTableName = ledgerJournalTableHistoryWTable.name(DbBackend::Sql);

        builder.addDataSource(ledgerJournalTableWTableName, ledgerJournalTableHistoryWTableName, ledgerJournalTableName)
            .addJoinCondition(
                ledgerJournalTableWTableName,
                ledgerJournalTableWTable.fieldName(fieldNum(LedgerJournalTable_W, LedgerJournalTable), (DbBackend::Sql)),
                ledgerJournalTableTable.fieldName(fieldNum(ledgerJournalTable, RecId), (DbBackend::Sql)))
            .addPartitionWhereCondition(ledgerJournalTableWTableName);

        // Build child LedgerJournalTrans_W
        DictTable ledgerJournalTransWTable = new DictTable(tableNum(LedgerJournalTrans_W));
        DictTable ledgerJournalTransHistoryWTable = new DictTable(tableNum(LedgerJournalTransHistory_W));
        str ledgerJournalTransWTableName = ledgerJournalTransWTable.name(DbBackend::Sql);
        str ledgerJournalTransHistoryWTableName = ledgerJournalTransHistoryWTable.name(DbBackend::Sql);

        builder.addDataSource(ledgerJournalTransWTableName, ledgerJournalTransHistoryWTableName, ledgerJournalTransTableName)
            .addJoinCondition(
                ledgerJournalTransWTableName,
                ledgerJournalTransWTable.fieldName(fieldNum(LedgerJournalTrans_W, LedgerJournalTrans), (DbBackend::Sql)),
                ledgerJournalTransTable.fieldName(fieldNum(LedgerJournalTrans, RecId), (DbBackend::Sql)))
            .addPartitionWhereCondition(ledgerJournalTransWTableName);

        // Build child LedgerJournalTrans_Asset
        DictTable ledgerJournalTransAssetTable = new DictTable(tableNum(LedgerJournalTrans_Asset));
        DictTable ledgerJournalTransAssetHistoryTable = new DictTable(tableNum(LedgerJournalTransHistory_Asset));
        str ledgerJournalTransAssetTableName = ledgerJournalTransAssetTable.name(DbBackend::Sql);
        str ledgerJournalTransAssetHistoryTableName = ledgerJournalTransAssetHistoryTable.name(DbBackend::Sql);

        builder.addDataSource(ledgerJournalTransAssetTableName, ledgerJournalTransAssetHistoryTableName, ledgerJournalTransTableName)
            .addJoinCondition(
                ledgerJournalTransAssetTableName,
                ledgerJournalTransAssetTable.fieldName(fieldNum(LedgerJournalTrans_Asset, RefRecId), (DbBackend::Sql)),
                ledgerJournalTransTable.fieldName(fieldNum(LedgerJournalTrans, RecId), (DbBackend::Sql)))
            .addPartitionWhereCondition(ledgerJournalTransAssetTableName);

        // Build child LedgerJournalTrans_Project
        DictTable ledgerJournalTransProjectTable = new DictTable(tableNum(LedgerJournalTrans_Project));
        DictTable ledgerJournalTransProjectHistoryTable = new DictTable(tableNum(LedgerJournalTransHistory_Project));
        str ledgerJournalTransProjectTableName = ledgerJournalTransProjectTable.name(DbBackend::Sql);
        str ledgerJournalTransProjectHistoryTableName = ledgerJournalTransProjectHistoryTable.name(DbBackend::Sql);

        builder.addDataSource(ledgerJournalTransProjectTableName, ledgerJournalTransProjectHistoryTableName, ledgerJournalTransTableName)
            .addJoinCondition(
                ledgerJournalTransProjectTableName,
                ledgerJournalTransProjectTable.fieldName(fieldNum(LedgerJournalTrans_Project, RefRecId), (DbBackend::Sql)),
                ledgerJournalTransTable.fieldName(fieldNum(LedgerJournalTrans, RecId), (DbBackend::Sql)))
            .addPartitionWhereCondition(ledgerJournalTransProjectTableName);

        // Build child LedgerJournalTransAccrual
        DictTable ledgerJournalTransAccrualTable = new DictTable(tableNum(LedgerJournalTransAccrual));
        DictTable ledgerJournalTransAccrualHistoryTable = new DictTable(tableNum(LedgerJournalTransAccrualHistory));
        str ledgerJournalTransAccrualTableName = ledgerJournalTransAccrualTable.name(DbBackend::Sql);
        str ledgerJournalTransAccrualHistoryTableName = ledgerJournalTransAccrualHistoryTable.name(DbBackend::Sql);

        builder.addDataSource(ledgerJournalTransAccrualTableName, ledgerJournalTransAccrualHistoryTableName, ledgerJournalTransTableName)
            .addIntWhereConditionToDataSource(
                ledgerJournalTransAccrualTableName,
                ledgerJournalTransAccrualTable.fieldName(fieldNum(LedgerJournalTransAccrual, RefTableId), (DbBackend::Sql)),
                tableNum(LedgerJournalTrans),
                Microsoft.Dynamics.Archive.Contracts.Operator::Equals)
            .addJoinCondition(
                ledgerJournalTransAccrualTableName,
                ledgerJournalTransAccrualTable.fieldName(fieldNum(LedgerJournalTransAccrual, RefRecId), (DbBackend::Sql)),
                ledgerJournalTransTable.fieldName(fieldNum(LedgerJournalTrans, RecId), (DbBackend::Sql)))
            .addPartitionWhereCondition(ledgerJournalTransAccrualTableName);

        // Build child LedgerJournalTransAccrualTrans
        DictTable ledgerJournalTransAccrualTransTable = new DictTable(tableNum(LedgerJournalTransAccrualTrans));
        DictTable ledgerJournalTransAccrualTransHistoryTable = new DictTable(tableNum(LedgerJournalTransAccrualTransHistory));
        str ledgerJournalTransAccrualTransTableName = ledgerJournalTransAccrualTransTable.name(DbBackend::Sql);
        str ledgerJournalTransAccrualTransHistoryTableName = ledgerJournalTransAccrualTransHistoryTable.name(DbBackend::Sql);

        builder.addDataSource(ledgerJournalTransAccrualTransTableName, ledgerJournalTransAccrualTransHistoryTableName, ledgerJournalTransAccrualTableName)
            .addJoinCondition(
                ledgerJournalTransAccrualTransTableName,
                ledgerJournalTransAccrualTransTable.fieldName(fieldNum(LedgerJournalTransAccrualTrans, RefTableId), (DbBackend::Sql)),
                ledgerJournalTransAccrualTable.fieldName(fieldNum(LedgerJournalTransAccrual, RefTableId), (DbBackend::Sql)))
            .addJoinCondition(
                ledgerJournalTransAccrualTransTableName,
                ledgerJournalTransAccrualTransTable.fieldName(fieldNum(LedgerJournalTransAccrualTrans, RefRecId), (DbBackend::Sql)),
                ledgerJournalTransAccrualTable.fieldName(fieldNum(LedgerJournalTransAccrual, RefRecId), (DbBackend::Sql)))
            .addPartitionWhereCondition(ledgerJournalTransAccrualTransTableName);

        return builder.finalizeArchiveJobPostRequest();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>