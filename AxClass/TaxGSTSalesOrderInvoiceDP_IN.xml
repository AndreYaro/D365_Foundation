<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTSalesOrderInvoiceDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GSTSalesInvoiceDP_IN</c> class provides base implementation of a data provider class for sales order invoice reports.
/// </summary>
public class TaxGSTSalesOrderInvoiceDP_IN extends GSTInvoiceDPBase_IN
{
    CustInvoiceJour custInvoiceJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    public void createData()
    {
        super();
        select gstInvoiceHeaderFooterTmp where gstInvoiceHeaderFooterTmp.RecId == headerRecId;
        
        if (gstInvoiceHeaderFooterTmp)
        {
            gstInvoiceDPBase.parmUserConnection().ttsbegin();
            gstInvoiceHeaderFooterTmp.selectForUpdate(true);

            if (taxDocumentExtension.TaxInvReferenceType == GSTReference_IN::BillOfSupply)
            {
                gstInvoiceHeaderFooterTmp.GrandTotal = gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure;
            }
            else
            {
                gstInvoiceHeaderFooterTmp.GrandTotal = grandTotal;
            }

            if (custInvoiceJour.PrintDynamicQRCode_IN == NoYes::Yes)
            {
                OnlineInvoicingHelper_IN::populateDynamicQRCodeData(
                    gstInvoiceHeaderFooterTmp,
                    custInvoiceJour,
                    gstInvoiceDPBase.parmUserConnection());
            }

            gstInvoiceHeaderFooterTmp.doUpdate();
            gstInvoiceDPBase.parmUserConnection().ttscommit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        contract = gstInvoiceDPBase.parmDataContract() as GSTInvoiceContract_IN;
        custInvoiceJour = CustInvoiceJour::findRecId(contract.parmRecordId());
        this.parmInvoiceJournal(custInvoiceJour);
        isProforma = custInvoiceJour.isProforma();
        printCopyOriginal = contract.parmPrintCopyOriginal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimProduct</Name>
				<Source><![CDATA[
    protected void initInventDimProduct()
    {
        InventDimCtrl_Rep_Sales     inventDimReport;
        custFormletterParameters    custFormletterParameters;

        custFormletterParameters= CustFormletterParameters::find();

        inventDimReport = InventDimCtrl_Rep_Sales::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::Invoice);
        inventDimReport.initDimParmVisible();
        inventdimSetup = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimSetupProduct = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        if (custFormLetterParameters.ItemDimPlacement == ItemDimFormLetter::Line)
        {
            inventDimSetup = conUnion(inventDimSetupProduct, inventDimSetup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceHeaderFooterTmp()
    {
        CustInvoiceTrans        custInvoiceTrans;
        LogisticsPostalAddress  deliveryPostalAddress;
        FormLetterRemarks       formLetterRemarks;
        TransTaxInformation     transTaxInformation;
        TransTaxInformationHelper transTaxInformationHelper = TransTaxInformationHelper::newHelper();
        
        select firstOnly custInvoiceTrans
                where custInvoiceTrans.InvoiceDate          == custInvoiceJour.InvoiceDate
                    && custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
                    && custInvoiceTrans.SalesId             == custInvoiceJour.SalesId
                    && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;

        transTaxInformation = transTaxInformationHelper.findTransTaxInformationByRecord(custInvoiceTrans);

        taxInformation              = TaxInformation_IN::find(transTaxInformation.TaxInformation);
        partyTaxInformation         = TaxInformation_IN::find(transTaxInformation.CustomerTaxInformation);
        logisticsLocation           = LogisticsLocation::find(transTaxInformation.CompanyLocation);
        logisticsPostalAddress      = LogisticsPostalAddress::findByLocation(transTaxInformation.CompanyLocation);
        partyLogisticsPostalAddress = LogisticsPostalAddress::findByLocation(transTaxInformation.CustomerLocation);
        partylogisticsLocation      = LogisticsLocation::find(partyLogisticsPostalAddress.Location);

        super();

        // Init the delivery address info
        gstInvoiceHeaderFooterTmp.IsDomesticSales           = NoYes::Yes;
        deliveryPostalAddress = LogisticsPostalAddress::findRecId(custInvoiceTrans.DeliveryPostalAddress);
        gstInvoiceHeaderFooterTmp.ShippedToName            = LogisticsLocation::find(deliveryPostalAddress.Location).Description;
        gstInvoiceHeaderFooterTmp.ShippedToAddress         = deliveryPostalAddress.Address;
        gstInvoiceHeaderFooterTmp.ShippedToState            = deliveryPostalAddress.State;

        if (LogisticsAddressCountryRegion::find(deliveryPostalAddress.CountryRegionId).ISOcode == #isoIN)
        {
            gstInvoiceHeaderFooterTmp.ShippedToStateCode = LogisticsAddressState::find(deliveryPostalAddress.CountryRegionId,
                deliveryPostalAddress.State).StateCode_IN;
        }

        gstInvoiceHeaderFooterTmp.ShippedToGSTIN        = TaxInformation_IN::findDefaultbyLocation(deliveryPostalAddress.Location).getTaxRegistrationNumbersTable(TaxType_IN::GST).RegistrationNumber;
        gstInvoiceHeaderFooterTmp.ShippedToLogisticsPostalAddress = deliveryPostalAddress.RecId;

        gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure = custInvoiceJour.InvoiceAmount;
        gstInvoiceHeaderFooterTmp.TotalInvoiceValueInWords  = numeralsToTxt_IN(abs(custInvoiceJour.InvoiceAmount));
        gstInvoiceHeaderFooterTmp.TotalInvoiceMiscChargeValueInFigure = custInvoiceJour.SumMarkup;

        if (custInvoiceJour.creditNote())
        {
            formLetterRemarks = FormLetterRemarks::find(custInvoiceJour.LanguageId,FormTextType::SalesCreditNote);
        }
        else
        {
            formLetterRemarks = FormLetterRemarks::find(custInvoiceJour.LanguageId,FormTextType::SalesInvoice);
        }

        gstInvoiceHeaderFooterTmp.Declaration   = formLetterRemarks.Txt;
        gstInvoiceHeaderFooterTmp.JournalRecId  = custInvoiceJour.RecId;
        gstInvoiceHeaderFooterTmp.BilledToParty = custInvoiceJour.custTable_InvoiceAccount().Party;

        if (isProforma)
        {
            gstInvoiceHeaderFooterTmp.InvoiceDate = custInvoiceJour.InvoiceDate;
        }

        gstInvoiceHeaderFooterTmp.initEInvoice(custInvoiceJour);

        gstInvoiceHeaderFooterTmp.insert();
        headerRecId = gstInvoiceHeaderFooterTmp.RecId;
        gstInvoiceHeaderFooterTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceTmp(str _className = '')
    {
        CustInvoiceTrans    custInvoiceTrans;

        super(_className);

        if (chargeCode)
        {
            gstInvoiceTmp.Name  = MarkupTable::find(MarkupModuleType::Cust, chargeCode).Txt;
        }
        else
        {
            if (tableNum(CustInvoiceTrans) == lineTableId)
            {
                custInvoiceTrans = CustInvoiceTrans::findRecId(lineRecId);

                if (custInvoiceTrans && classStr(ITaxDocumentLine) == _className)
                {
                    gstInvoiceTmp.ItemId        = custInvoiceTrans.ItemId;
                    gstInvoiceTmp.Name          = custInvoiceTrans.Name;
                    gstInvoiceTmp.Unit          = custInvoiceTrans.SalesUnit;
                    gstInvoiceTmp.UnitPrice     = custInvoiceTrans.SalesPrice;
                    gstInvoiceTmp.LineAmount    = custInvoiceTrans.SalesPrice * custInvoiceTrans.Qty;

                    gstInvoiceTmp.InventDimProduct = FormLetter::inventDimReport(custInvoiceTrans.inventDim(),
                        inventDimSetup,
                        custInvoiceJour.LanguageId);
                }
            }

            if (taxDocumentExtension.TaxInvReferenceType == GSTReference_IN::BillOfSupply)
            {
                gstInvoiceTmp.TaxableValue = custInvoiceTrans.LineAmount;
            }
        }

        gstInvoiceTmp.JournalRecId  = custInvoiceJour.RecId;

        gstInvoiceTmp.insert();
        gstInvoiceTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection to use on table.
    /// </summary>
    /// <remarks>
    /// This is required to guarantee that <c>createdTransactionId</c> of inserted record is different than default transaction.
    /// </remarks>
    public void setTableConnections()
    {
        gstInvoiceHeaderFooterTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
        gstInvoiceTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>useExistingReportData</Name>
				<Source><![CDATA[
    protected boolean useExistingReportData()
    {
        RecId                           jourRecId = gstInvoiceDPBase.parmDataContract().parmRecordId();
        CreatedTransactionId            createdTransactionId = gstInvoiceDPBase.parmDataContract().parmCreatedTransactionId();
        GSTInvoiceHeaderFooterTmp_IN    localGSTInvoiceHeaderFooterTmp_IN;
        GSTInvoiceTmp_IN                localGSTInvoiceTmp;
        RecordSortedList                recordList;
        boolean                         isDataCreated;

        localGSTInvoiceHeaderFooterTmp_IN = GSTInvoiceHeaderFooterTmp_IN::findJourRecId(jourRecId, createdTransactionId);

        if (localGSTInvoiceHeaderFooterTmp_IN)
        {
            isDataCreated = true;

            // The report data is already created so use it.  This is the proforma scenario.
            recordList = new RecordSortedList(tableNum(GSTInvoiceHeaderFooterTmp_IN));
            recordList.sortOrder(fieldNum(GSTInvoiceHeaderFooterTmp_IN, RecId));
            recordList.ins(localGSTInvoiceHeaderFooterTmp_IN);

            localGSTInvoiceHeaderFooterTmp_IN.delete(); //the created data is copied so it should be deleted.

            recordList.insertDatabase(gstInvoiceDPBase.parmUserConnection()); //it is inserted within user connection so the framework will delete it automatically after the report is done.

            // Copy report data for SalesInvoiceTmp
            recordList = new RecordSortedList(tableNum(GSTInvoiceTmp_IN));
            recordList.sortOrder(fieldNum(GSTInvoiceTmp_IN, RecId));

            while select localGSTInvoiceTmp
                order by localGSTInvoiceTmp.OrderByNum
                    where localGSTInvoiceTmp.JournalRecId == jourRecId
            {
                recordList.ins(localGSTInvoiceTmp);
            }

            delete_from localGSTInvoiceTmp        //the created data is copied so it should be deleted.
                where localGSTInvoiceTmp.JournalRecId == jourRecId;

            recordList.insertDatabase(gstInvoiceDPBase.parmUserConnection()); //it is inserted within user connection so the framework will delete it automatically after the report is done.

        }

        return isDataCreated;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>