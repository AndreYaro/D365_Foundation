<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovSummaryStatistics</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerCovSummaryStatistics
{
    private ModuleCustVend module;
    private container companies;
    private boolean useSystemCurrency;
    private CustVendTrans custVendTrans;
    private CustVendTransOpen custVendTransOpen;
    private CurrencyCode systemCurrency;
    private int sign;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromModule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static LedgerCovSummaryStatistics newFromModule(ModuleCustVend _module, container _companies, boolean _useSystemCurrency)
    {
        LedgerCovSummaryStatistics instance = new LedgerCovSummaryStatistics();
        instance.init(_module, _companies, _useSystemCurrency);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(ModuleCustVend _module, container _companies, boolean _useSystemCurrency)
    {
        module = _module;
        companies = _companies;
        useSystemCurrency = _useSystemCurrency;
        custVendTrans = CustVendTrans::getEmptyTableBuffer(_module);
        custVendTransOpen = CustVendTransOpen::getEmptyTableBuffer(_module);

        switch (_module)
        {
            case ModuleCustVend::Cust:
                sign = 1;
                break;

            case ModuleCustVend::Vend:
                sign = -1;
                break;
        }

        systemCurrency = SystemParameters::find().SystemCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOpenBalance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal AmountCur calculateOpenBalance()
    {           
        AmountCur balance;

        while select crosscompany : companies sum(AmountMST), DataArea
            from custVendTransOpen
            group by custVendTransOpen.DataArea
        {
            balance += this.convertAccountingCurrencyAmount(custVendTransOpen.DataArea, custVendTransOpen.AmountMST);
        }

        return balance * sign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalSales</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal AmountCur calculateTotalSales(int _days)
    {
        TransDate currentDate = DateTimeUtil::getToday(DateTimeUtil::getCompanyTimeZone());
        TransDate outstandingDate = currentDate + _days;

        AmountCur balance;
        if (module == ModuleCustVend::Cust)
        {
            while select crosscompany : companies sum(AmountMST), DataArea
                from custVendTrans
                group by custVendTrans.DataArea
                where custVendTrans.TransDate >= outstandingDate
                    && custVendTrans.AmountMST > 0
            {
                balance += this.convertAccountingCurrencyAmount(custVendTrans.DataArea, custVendTrans.AmountMST);
            }
        }

        return balance * sign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostOfGoodsSold</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal AmountCur calculateCostOfGoodsSold(int _days)
    {
        TransDate currentDate = DateTimeUtil::getToday(DateTimeUtil::getCompanyTimeZone());
        TransDate outstandingDate = currentDate + _days;

        CostStatementViewBuilder::main(null);

        AmountCur costOfGoodsSold;
        CostStatementView costStatement;

        while select crosscompany : companies sum(Amount) 
            from costStatement
                group by costStatement.DataAreaId
                where costStatement.StatementType == CostStatementType::Inventory
                    && costStatement.TransDate >= outstandingDate
                    && costStatement.StatementLineCategoryLevel1 == CostStatementLineCategoryLevel1::NetUsage
                    && costStatement.StatementLineCategoryLevel2 == CostStatementLineCategoryLevel2::Sold
        {
            costOfGoodsSold += this.convertAccountingCurrencyAmount(costStatement.DataAreaId, costStatement.Amount);
        }

        return costOfGoodsSold * -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOverDueBalanceAndCount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container calculateOverDueBalanceAndCount()
    {
        AmountCur balance;
        int overDueCount;

        TransDate currentDate = DateTimeUtil::getToday(DateTimeUtil::getCompanyTimeZone());

        while select crosscompany : companies sum(AmountMST), count(RecId), DataArea
            from custVendTransOpen
            group by custVendTransOpen.DataArea
            where custVendTransOpen.DueDate < currentDate
        {
            balance += this.convertAccountingCurrencyAmount(custVendTransOpen.DataArea, custVendTransOpen.AmountMST);

            overDueCount += custVendTransOpen.RecId;
        }

        balance = balance * sign;

        return [balance, overDueCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    private AmountCur convertAccountingCurrencyAmount(DataAreaId _company, AmountMST _amountMST)
    {
        AmountCur returnAmount;

        if (!useSystemCurrency)
        {
            returnAmount = _amountMST;
        }
        else
        {
            changecompany (_company)
            {
                Ledger ledger = Ledger::findByLegalEntity(CompanyInfo::current());

                if (ledger.AccountingCurrency == systemCurrency)
                {
                    returnAmount = _amountMST;
                }
                else
                {
                    CurrencyExchangeHelper currencyHelper = CurrencyExchangeHelper::construct();
                    currencyHelper.parmLedgerRecId(ledger.RecId);
                    returnAmount = currencyHelper.calculateAccountingToTransaction(systemCurrency, _amountMST, true);
                }
            }
        }

        return returnAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>