<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchQuantity</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class PurchQuantity
{
    RefRecId    customsImporterInvoiceNumber;
    RefRecId    customsVendBOETransRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcInventQty</Name>
				<Source><![CDATA[
    public InventQty calcInventQty(PurchLine     purchLine,
                                   PurchUpdate   specQty             = PurchUpdate::All)
    {
        return conpeek(this.calcQtyInvent(purchLine, specQty, naReal(), false, false), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPurchQty</Name>
				<Source><![CDATA[
    public PurchQty calcPurchQty(PurchLine     purchLine,
                                 PurchUpdate   specQty             = PurchUpdate::All)
    {
        return conpeek(this.calcQtyPurch(purchLine, specQty, naReal(), false, false), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    abstract protected container calcQtyInvent(
        PurchLine     purchLine,
        PurchUpdate   specQty             = PurchUpdate::All,
        InventQty     qty                 = naReal(),
        boolean       creditRemaining     = false,
        boolean       calcRemaining       = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurch</Name>
				<Source><![CDATA[
    abstract protected container calcQtyPurch(
        PurchLine      purchLine,
        PurchUpdate    specQty             = PurchUpdate::All,
        PurchQty       qty                 = naReal(),
        boolean        creditRemaining     = false,
        boolean        calcRemaining       = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurchOnModification_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantity purch on modification.
    /// </summary>
    /// <param name="purchLine">
    /// The purch line.
    /// </param>
    /// <param name="purchQtyModified">
    /// The modified purch quantity.
    /// </param>
    /// <param name="specQty">
    /// The special quantity.
    /// </param>
    /// <param name="qty">
    /// Quantity.
    /// </param>
    /// <param name="creditRemaining">
    /// The remaining credit.
    /// </param>
    /// <param name="calcRemaining">
    /// The calcualted remaining.
    /// </param>
    /// <returns>
    /// The instance of the <c>container</c> class.
    /// </returns>
    public container calcQtyPurchOnModification_IN(
        PurchLine      purchLine,
        PurchQty       purchQtyModified,
        PurchUpdate    specQty          = PurchUpdate::All,
        PurchQty       qty              = naReal(),
        boolean        creditRemaining  = false,
        boolean        calcRemaining    = true)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deviationQty_RU</Name>
				<Source><![CDATA[
    // overloaded in PurchQuantity_PackingSlip_Ru
    public InventQty deviationQty_RU(PurchLine _purchLine)
    {
        container dummy() // BP warning
        {
            return [ _purchLine ];
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsImporterInvoiceNumber_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The parameter of the custcoms importer invoice number.
    /// </summary>
    /// <param name="_customsImporterInvoiceNumber">
    /// The customs importer invoice number.
    /// </param>
    public void parmCustomsImporterInvoiceNumber_IN(RefRecId _customsImporterInvoiceNumber = customsImporterInvoiceNumber)
    {
        customsImporterInvoiceNumber = _customsImporterInvoiceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsVendBOETrans_IN</Name>
				<Source><![CDATA[
    public RecId parmCustomsVendBOETrans_IN(RefRecId _customsVendBOETrans = customsVendBOETransRecId)
    {
        customsVendBOETransRecId = _customsVendBOETrans;

        return customsVendBOETransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This methods calculates PdsCWReceiveNow.
    /// </summary>
    /// <param name="_purchLine">
    /// PurchLine records used in calculations.</param>
    /// <param name="_specQty">
    /// Used to determine the PurchLine qty used in calculations.</param>
    /// <returns>Values calculated for PdsCWReceiveNow.</returns>
    /// <remarks>
    /// <syntax>
    /// protected Container pdsCWCalcInventQty(PurchLine _purchLine,
    ///     PurchUpdate _specQty)
    /// </syntax>
    /// </remarks>
    public PdsCWInventQty pdsCWCalcInventQty(
        PurchLine   _purchLine,
        PurchUpdate _specQty        = PurchUpdate::All)
    {
        return conpeek(
                    this.pdsCWCalcQtyInvent(
                        _purchLine,
                        _specQty,
                        naReal(),
                        false,
                        false),
                    1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates updated quantity, old remainder quantity and new remainder quantity in catch weight unit.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> table record.
    /// </param>
    /// <param name="_specQty">
    /// An update type.
    /// </param>
    /// <param name="_qty">
    /// An update quantity.
    /// </param>
    /// <param name="_creditRemaining">
    /// A Boolean value that indicates whether remainder quantity should be credited.
    /// </param>
    /// <param name="_calcRemaining">
    /// A Boolean parameter that specifies if remainder quantity should be calculated.
    /// </param>
    /// <returns>
    /// A container with the updated quantity, old remainder quantity and new remainder quantity in catch
    /// weight unit.
    /// </returns>
    abstract protected container pdsCWCalcQtyInvent(
        PurchLine      _purchLine,
        PurchUpdate    _specQty             = PurchUpdate::All,
        PdsCWInventQty _qty                 = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// This methods calculates PdsCWReceiveNow, PdsCWRemainBefore and
    /// PdsCWRemainAfter and returns the values respectively in a container.
    /// </summary>
    /// <param name="_purchLine">
    /// PurchLine records used in calculations.</param>
    /// <param name="_specQty">
    /// Used to determine the PurchLine qty used in calculations.</param>
    /// <param name="_qty">Qty to update</param>
    /// <param name="_creditRemaining">
    /// Should remaining qty be credited?</param>
    /// <returns>Values calculated for PdsCWReceiveNow,
    /// PdsCWRemainBefore and PdsCWRemainAfter.   Added to container in
    /// that order.</returns>
    /// <remarks>
    /// <syntax>
    /// protected Container pdsCWQtyInvent(PurchLine _purchLine,
    ///     PurchUpdate _specQty, PdsCWInventQty _qty,
    ///     boolean _creditRemaining)
    /// </syntax>
    /// </remarks>
    public container pdsCWQtyInvent(
        PurchLine     _purchLine,
        PurchUpdate   _specQty           = PurchUpdate::All,
        PdsCWInventQty _qty              = naReal(),
        boolean       _creditRemaining   = false)
    {
        return this.pdsCWCalcQtyInvent(
                    _purchLine,
                    _specQty,
                    _qty,
                    _creditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    public container qtyInvent(PurchLine     purchLine,
                               PurchUpdate   specQty             = PurchUpdate::All,
                               InventQty     qty                 = naReal(),
                               boolean       creditRemaining     = false)
    {
        return this.calcQtyInvent(purchLine, specQty, qty, creditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPurch</Name>
				<Source><![CDATA[
    public container qtyPurch(PurchLine     purchLine,
                              PurchUpdate   specQty             = PurchUpdate::All,
                              PurchQty      qty                 = naReal(),
                              boolean       creditRemaining     = false)
    {
        return this.calcQtyPurch(purchLine, specQty, qty, creditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchQuantity  construct(DocumentStatus _documentStatus, boolean _excludePending = false)
    {
        #ISOCountryRegionCodes
        if (_documentStatus == DocumentStatus::PackingSlip
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL, #isoRU]))
        {
            return new PurchQuantity_PackingSlip_RU();
        }

        if (_documentStatus == DocumentStatus::Invoice
            && _excludePending)
        {
            return new PurchQuantity_InvoiceNotPending();
        }

        DocumentStatusFactoryAttribute attribute = new DocumentStatusFactoryAttribute(_documentStatus);
        PurchQuantity instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PurchQuantity), attribute) as PurchQuantity;

        if (!instance)
        {
            throw error(strfmt("@SYS19306",funcname()));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunFastCheckQuantity</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean canRunFastCheckQuantity()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>