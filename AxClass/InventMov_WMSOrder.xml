<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_WMSOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMov_WMSOrder</c> class is used with Warehouse Management System (WMS) orders.
/// </summary>
[InventMovementFactoryAttribute(tableStr(WMSOrder))]
class InventMov_WMSOrder extends InventMovement
{
    WMSOrder            wmsOrder;
    InventTransOrigin   inventTransOriginWMSOrder;
    InventTrans         inventTransWMSOrder;
    InventMovement      parentMovement;
    boolean             skipOverDeliveryCheck;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchDispReservationBlockedFieldId</Name>
				<Source><![CDATA[
    public FieldId batchDispReservationBlockedFieldId()
    {
        FieldId ret = 0;

        if (wmsOrder.InventTransType == InventTransType::TransferOrderShip && wmsOrder.Type == WMSOrderType::OrderPick)
        {
            ret = fieldNum(PdsDispositionMaster, PdsTransBlockPick);
        }
        else if (wmsOrder.InventTransType == InventTransType::Sales && wmsOrder.Type == WMSOrderType::OrderPick)
        {
            ret = fieldNum(PdsDispositionMaster, PdsSalesBlockPick);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReservationFormBeShown</Name>
				<Source><![CDATA[
    public boolean canReservationFormBeShown()
    {
        if (wmsOrder.Type == WMSOrderType::OrderPick)
        {
            if (wmsOrder.isBeingProcessedOnMultipleRoutes())
            {
                return checkFailed("@SYS103912");
            }
        }
        else if (wmsOrder.isBeingProcessed())
        {
            return checkFailed("@SYS67784");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateParentMovement</Name>
				<Source><![CDATA[
    protected boolean canUpdateParentMovement()
    {
        // set the local variable if not defined already
        this.parentMovement();

        // not to risk cyclic movement updates
        return( (parentMovement  != null)
            &&  (parentMovement  != this)
            &&  (parentMovement.buffer().TableId != wmsOrder.TableId) );
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimInventOwnerId_RU</Name>
				<Source><![CDATA[
    public boolean checkDimInventOwnerId_RU(InventDim _inventDim, boolean _showError = true)
    {
        boolean         ret = super(_inventDim, _showError);

        if (this.inventDimGroupSetup().isDimensionActive(fieldNum(InventDim, InventOwnerId_RU)) &&
            _inventDim.InventOwnerId_RU &&
            _inventDim.inventProfile_RU().InventOwnerIdCheckPurchOrder &&
            wmsOrder.InventTransType == InventTransType::Sales)
        {
            SalesTable salesTable = SalesTable::find(wmsOrder.InventTransRefId);
            InventOwner_RU inventOwner = InventOwner_RU::findCustAccount(salesTable.CustAccount, salesTable.salesTable_RU().AgreementHeaderExt_RU);
            if (inventOwner && inventOwner.InventOwnerId != _inventDim.InventOwnerId_RU)
            {
                ret = _showError ? checkFailed(strFmt("@GLS115707", fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU)))) : false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimPhysical</Name>
				<Source><![CDATA[
    boolean checkDimPhysical(
        InventQty   _qty,
        InventDim   _inventDim,
        boolean     _finalCheck,
        boolean     _showError = true
        )
    {
        boolean    ok = super(_qty, _inventDim, _finalCheck, _showError);

        if (ok && _finalCheck && this.inventDimGroupSetup().isDimensionActive(fieldNum(InventDim, InventOwnerId_RU)))
        {
            if (_inventDim.inventProfile_RU().InventOwnerIdCheckSalesOrder &&
                wmsOrder.InventTransType == InventTransType::Sales)
            {
                SalesTable salesTable = SalesTable::find(wmsOrder.InventTransRefId);
                if (! InventOwner_RU::checkSalesOrder(_inventDim.InventOwnerId_RU, salesTable))
                {
                    ok = checkFailed(strFmt("@GLS115659",
                                            _inventDim.InventOwnerId_RU,
                                            salesTable.CustAccount,
                                            AgreementHeaderExt_RU::find(salesTable.salesTable_RU().AgreementHeaderExt_RU).AgreementId,
                                            fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotOverDelivery</Name>
				<Source><![CDATA[
    public boolean checkNotOverDelivery(
        InventQty       _physicalNow,
        boolean         _isPhysicalUpdate
        , PdsCWInventQty  _cwQty = 0.0
        )
    {
        UnitQty qtyPost;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            UnitQty qtyPre = abs(this.parentMovement().transQty());

            if (this.mustBeExpectedAgain())
            {
                qtyPost = abs((_isPhysicalUpdate ? 0 : this.transIdSum().wms()) + this.transIdSum().physical() + _physicalNow) ;
            }
            else
            {
                qtyPost = abs((_isPhysicalUpdate ? 0 : this.transIdSum().wms()) + this.transIdSum().physical() + this.transIdSum().financial() + _physicalNow) ;
            }

            Percent subOverPct = (qtyPost - qtyPre) / (qtyPre ? qtyPre : 1) * 100;

            if (subOverPct > this.overDeliveryPct())
            {
                return checkFailed(strFmt("@SYS24920",subOverPct,this.overDeliveryPct()));
            }
        }
        else
        {
            return super(_physicalNow, _isPhysicalUpdate
                , _cwQty
            );
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysical</Name>
				<Source><![CDATA[
    public boolean checkUpdatePhysical(InventUpd_Physical _updateNow)
    {
        boolean ok = true;

        if (this.transQtyUnit() == 0)
        {
            ok = checkFailed("@SYS12170");
        }

        ok = super(_updateNow) && ok;
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendAc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer or vendor account that is associated to this movement.
    /// </summary>
    /// <returns>
    /// The account ID of the customer or vendor.
    /// </returns>
    public CustVendAC custVendAc()
    {
        return wmsOrder.Customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return this.parentMovement().defaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimParmRelatedUpdate</Name>
				<Source><![CDATA[
    public InventDimParm dimParmRelatedUpdate(InventDim _inventDim = null)
    {
        return this.parentMovement().dimParmRelatedUpdate(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransFromBuffer</Name>
				<Source><![CDATA[
    public void initInventTransFromBuffer(
        InventTrans         _inventTrans,
        InventMovement      _movement_orig)
    {
        super(_inventTrans, _movement_orig);

        _inventTrans.TransChildType     = this.transChildType();
        _inventTrans.TransChildRefId    = this.transChildRefId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChildBuffer</Name>
				<Source><![CDATA[
    public InventTransChildRefId insertChildBuffer(
        InventDimId     _inventDimId,
        InventQty       _qtyNow,
        UnitQty         _qtyNowUnit,
        boolean         _splitMovement,
        Object          _updateClass = null
        , PdsCWInventQty  _cwQty = 0
        )
    {
        WMSOrder    newWMSOrder;

        if (_splitMovement)
        {
            newWMSOrder.data(wmsOrder);
            newWMSOrder.InventDimId             = _inventDimId;
            newWMSOrder.QtyRequested            = -_qtyNow;
            newWMSOrder.Qty                     = -_qtyNow;
            newWMSOrder.QtyNoShipment           = newWMSOrder.Qty;
 
            newWMSOrder.PdsCWQtyRequested       = -_cwQty;
            newWMSOrder.PdsCWQty                = -_cwQty;
            newWMSOrder.PdsCWQtyNoShipment      = newWMSOrder.PdsCWQty;

            newWMSOrder.OrderId                 = NumberSeq::newGetNum(WMSParameters::numRefWMSOrderId()).num();
            newWMSOrder.doInsert();
        }
        return wmsOrder.OrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return wmsOrder.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>InventMovement</c> object must be auto-reserved.
    /// </summary>
    /// <returns>
    ///    true if the <c>InventMovement</c> object must be auto-reserved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is often called together with the <c>canBeReserved</c> method, which returns a default
    ///    Boolean value from the <c>inventType</c> class hierarchy.
    /// </remarks>
    public boolean  mustBeAutoReserved()
    {
        if (!this.inventTable().inventItemType().canBeAutoReserved())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    public boolean  mustBeBookedFinancially()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    public boolean mustBeQuarantineControlled()
    {
        switch (wmsOrder.InventTransType)
        {
            case InventTransType::QuarantineOrder   :
                InventQuarantineOrder inventQuarantineOrder = InventQuarantineOrder::find(wmsOrder.InventTransRefId);
                return InventMovement::construct(inventQuarantineOrder).mustBeQuarantineControlled();
            default:
                parentMovement = this.parentMovement();
                if (parentMovement != this)
                {
                    return parentMovement.mustBeQuarantineControlled();
                }
                break;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckOverDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current <c>InventMovement</c> object requires checking for over delivery.
    /// </summary>
    /// <param name="_direction">
    /// The <c>InventDirection</c> value of the update that is being made.
    /// </param>
    /// <returns>
    /// true if over delivery must be checked; otherwise, false.
    /// </returns>
    public NoYes mustCheckOverDelivery(InventDirection _direction)
    {
        if (skipOverDeliveryCheck)
        {
            return NoYes::No;
        }

        return this.parentMovement().mustCheckOverDelivery(_direction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateRelatedTrans</Name>
				<Source><![CDATA[
    public boolean mustUpdateRelatedTrans()
    {
        return this.parentMovement().mustUpdateRelatedTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseParentMovToDimTransferReceipt</Name>
				<Source><![CDATA[
    //return true in order to allow parent movements merge dimensions when dimensions for transfer receipts are handled
    public boolean mustUseParentMovToDimTransferReceipt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        WMSOrder        _wmsOrder,
        InventType      _inventType = _wmsOrder.type())
    {
        wmsOrder = _wmsOrder;

        super(_wmsOrder,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!wmsOrder.RecId)
        {
            return null;
        }

        return new InventMov_WMSOrder(wmsOrder.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    public Percent overDeliveryPct()
    {
        return this.parentMovement().overDeliveryPct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentMovement</Name>
				<Source><![CDATA[
    public InventMovement parentMovement(boolean _noThrow = false)
    {
        if (parentMovement)
        {
            return parentMovement;
        }

        if (!wmsOrder)
        {
            parentMovement = this;
            return parentMovement;
        }
        if (wmsOrder.PostTransfer)
        {
            parentMovement = this;
            return parentMovement;
        }

        if (!inventTransWMSOrder)
        {
            inventTransWMSOrder = InventTrans::findByInventTransOrigin(this.inventTransOriginId());
        }

        if (!inventTransOriginWMSOrder)
        {
            inventTransOriginWMSOrder = InventTransOrigin::find(this.inventTransOriginId());
        }

        parentMovement = inventTransWMSOrder.inventMovement(_noThrow);

        //we want the To - movement
        if (parentMovement && inventTransOriginWMSOrder.ReferenceCategory == InventTransType::TransferOrderReceive)
        {
            parentMovement = parentMovement.newMovement_TransferReceipt();
        }
        //we want the From movement
        if (parentMovement && inventTransOriginWMSOrder.ReferenceCategory == InventTransType::TransferOrderShip)
        {
            parentMovement = parentMovement.newMovement_TransferIssue();
        }

        return parentMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipOverDeliveryCheck</Name>
				<Source><![CDATA[
    public boolean parmSkipOverDeliveryCheck(boolean _skipOverDeliveryCheck = skipOverDeliveryCheck)
    {
        skipOverDeliveryCheck = _skipOverDeliveryCheck;

        return skipOverDeliveryCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAdjustInventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the inventory quantity for the movement.
    /// </summary>
    /// <param name="_inventQty">
    /// The inventory quantity to adjust.
    /// </param>
    public void pdsAdjustInventoryQuantity(InventQty _inventQty)
    {
        if (PdsGlobal::pdsIsCWItem(this.itemId()))
        {
            wmsOrder.Qty -= _inventQty;
            wmsOrder.QtyRequested -= _inventQty;
            wmsOrder.QtyNoShipment -= _inventQty;

            if (this.canUpdateParentMovement())
            {
                this.parentMovement().pdsAdjustInventoryQuantity(_inventQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCleanZeroSplitInventMovementTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the estimated transaction with a null catch weight quantity and adjusts the quantity
    /// according to the order.
    /// </summary>
    public void pdsCleanZeroSplitInventMovementTrans()
    {
        InventTrans         inventTransDelete;
        InventTransOrigin   inventTransOrigin;
        WMSOrderTrans       wmsOrderTrans;

        if (!PdsGlobal::pdsIsCWItem(wmsOrder.ItemId))
        {
            return;
        }

        ttsbegin;
        // transaction leftover needs to be summed to the original transaction
        while select forupdate inventTransDelete
        join firstonly inventTransOrigin
            where   inventTransOrigin.RecId             == inventTransDelete.InventTransOrigin
            &&      inventTransOrigin.InventTransId     == wmsOrder.InventTransId
            &&      inventTransDelete.TransChildType    == InventTransChildType::WMSOrder
            &&      inventTransDelete.TransChildRefId   == wmsOrder.OrderId
            &&      inventTransDelete.ItemId            == wmsOrder.ItemId
            &&      inventTransDelete.PdsCWQty          == 0
            &&      inventTransDelete.Qty               != 0
        {
            //delete the leftover transactions
            inventTransDelete.delete(NoYes::No, NoYes::Yes);
        }

        delete_from wmsOrderTrans
            where   wmsOrderTrans.OrderId           == wmsOrder.OrderId
            &&      wmsOrderTrans.ItemId            == wmsOrder.ItemId
            &&      wmsOrderTrans.InventTransId     == wmsOrder.InventTransId
            &&      wmsOrderTrans.PdsCWQty          == 0
            &&      wmsOrderTrans.Qty               != 0;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsConsiderRestrictReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the batch disposition functionality should be considered reservation.
    /// </summary>
    /// <returns>
    /// Always returns true;
    /// </returns>
    public boolean pdsConsiderRestrictReservation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets catch weight remaining physical.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        return this.transSign() * wmsOrder.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight reserve quantity.
    /// </summary>
    /// <returns>
    /// The catch weight reserve quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReserveQty()
    {
        return this.pdsCWTransQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catch weight transaction quantity.
    /// </summary>
    /// <param name="_pdsCWQtyInvent">
    /// The catch weight transaction quantity to set.
    /// </param>
    public void pdsCWSetTransQty(PdsCWInventQty _pdsCWQtyInvent)
    {
        wmsOrder.PdsCWQty = this.transSign() * _pdsCWQtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets catch weight transaction quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        return this.transSign() * wmsOrder.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMustConsiderBatchAttrib</Name>
				<Source><![CDATA[
    public PdsBatchAttribAutoRes pdsMustConsiderBatchAttrib()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRestrictReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the reservation should be blocked.
    /// </summary>
    /// <param name="_dispMaster">
    /// An instance of the <c>PdsDispositionMaster</c> class.
    /// </param>
    /// <returns>
    /// true if the reservation should be blocked; otherwise, false .
    /// </returns>
    [SysObsolete('', false, 31\01\2016)]
    public boolean pdsRestrictReservation(PdsDispositionMaster _dispMaster)
    {
        return super(_dispMaster);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateBufferWithAdjustedQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the document buffer after the inventory quantity adjustment.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The preferred inventory dimension to adjust quantities for; optional.
    /// </param>
    public void pdsUpdateBufferWithAdjustedQuantity(InventDimId _inventDimId = this.inventDimId())
    {
        if (!PdsGlobal::pdsIsCWItem(wmsOrder.ItemId))
        {
            return;
        }
        else
        {
            if (this.canUpdateParentMovement())
            {
                InventQty adjustmentQuantity = this.remainPhysical() - this.newMovement_Orig().remainPhysical();
                UnitQty adjustmentQuantityUnit = this.remainPhysicalUnit() - this.newMovement_Orig().remainPhysicalUnit();

                // If absolute value of the quantity is being increased then original document should be updated first
                if (adjustmentQuantity * this.transSign() > 0)
                {
                    this.parentMovement().pdsUpdateBufferWithAdjustedQuantity();
                }

                // Update link between inventory and WMS transactions
                InventUpd_ChildReference inventUpd_ChildReference = InventUpd_ChildReference::newParameters(
                    this,
                    adjustmentQuantity,
                    adjustmentQuantityUnit,
                    false,
                    _inventDimId,
                    0);
                inventUpd_ChildReference.updateNow();

                // If absolute value of the quantity is being decreased then original document should be updated afterwards
                if (adjustmentQuantity * this.transSign() < 0)
                {
                    this.parentMovement().pdsUpdateBufferWithAdjustedQuantity();
                }

                wmsOrder.selectForUpdate(true);
                wmsOrder.doUpdate();
            }
            else
            {
                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::SalesIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOffsetPhysical</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOffsetPhysical()
    {
        return LedgerPostingType::SalesOffsetAccountPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::SalesConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
    public LedgerPostingType postingPhysical()
    {
        return LedgerPostingType::SalesPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedMovement</Name>
				<Source><![CDATA[
    public InventMovement relatedMovement()
    {
        return this.parentMovement().relatedMovement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty   remainPhysical()
    {
        return this.transSign() * wmsOrder.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    public InventQty   reserveQty()
    {
        return this.transQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        wmsOrder.InventDimId =_dimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty  _qtyInvent)
    {
        wmsOrder.Qty = this.transSign() * _qtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transChildRefId</Name>
				<Source><![CDATA[
    public InventTransChildRefId transChildRefId()
    {
        return wmsOrder.OrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transChildType</Name>
				<Source><![CDATA[
    public InventTransChildType transChildType()
    {
        return InventTransChildType::WMSOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return wmsOrder.DlvDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return wmsOrder.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty  transQty()
    {
        return this.transSign() * wmsOrder.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    public InventTransRefId transRefId()
    {
        return wmsOrder.OrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the inventory transaction sign.
    /// </summary>
    /// <returns>
    ///    The sign of the inventory transactions.
    /// </returns>
    public Integer transSign()
    {
        if (this == this.parentMovement())
        {
            return super();
        }

        return this.parentMovement().transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::WMSOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(boolean _updateReservation = true)
    {
        InventUpd_Estimated estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(wmsOrder));
        estimated.updateNow();

        wmsOrder.selectForUpdate(true);
        wmsOrder.doUpdate();

        if (estimated && _updateReservation)
        {
            estimated.updateReservation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMov_WMSOrder</c> class based on the specified record.
    /// </summary>
    /// <param name="_wmsOrder">
    ///    The <c>WMSOrder</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_WMSOrder</c> class.
    /// </returns>
    public static InventMov_WMSOrder newFromWMSOrder(WMSOrder _wmsOrder)
    {
        return new InventMov_WMSOrder(_wmsOrder);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
