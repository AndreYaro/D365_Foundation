<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationInvoicePredunningBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>>CustAutomationInvoicePredunningBuilder</c> builds the list of invoices to generate pre-dunning notifications.
/// </summary>
internal final class CustAutomationInvoicePredunningBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populatePreDunningInvoices</Name>
				<Source><![CDATA[
    internal static void populatePreDunningInvoices(CustAutomationContract _contract)
    {
        CustAutomationInvoicePredunningBuilder builder = new CustAutomationInvoicePredunningBuilder();
        builder.buildPredunningInvoices(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPredunningInvoices</Name>
				<Source><![CDATA[
    private void buildPredunningInvoices(CustAutomationContract _contract)
    {
        this.insertInvoiceData(_contract);
        this.updatePredunningWithStrategyLineDetails(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoiceData</Name>
				<Source><![CDATA[
    private void insertInvoiceData(CustAutomationContract _contract)
    {
        CustAutomationInvoice invoiceInsert;
        CustAutomationInvoice invoiceLocal;
        CustTrans custTrans;
        CustInvoiceJour custInvoiceJour;
        CustAutomationStrategyName strategyName = _contract.parmCustAutomationStrategy().StrategyName;
        ProcessExecutionId executionId = _contract.parmExecutionId();
        NoYes predunning = NoYes::Yes;
        date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        CustAutomationDays predunningDays = CustAutomationStrategyLine::findPredunningForStrategy(_contract.parmCustAutomationStrategy().RecId).Days;
        date predunningInvoiceDate = DateTimeUtil::date(DateTimeUtil::addDays(currentDate, -predunningDays));
        RefRecId processScheduleOccurrenceId = _contract.parmProcessScheduleOccurrenceRecId();

        insert_recordset invoiceInsert (AccountNum, DueDate, Invoice, StrategyName, ExecutionId, Predunning, ExecutionDate, ProcessScheduleOccurrenceId)
            select
                AccountNum,
                DueDate,
                Invoice,
                strategyName,
                executionId,
                predunning,
                currentDate,
                processScheduleOccurrenceId
            from custTrans
                where custTrans.Closed == dateNull()
                    && custTrans.CustAutomationExclude == NoYes::No
                    && custTrans.CustAutomationPredunningSent == NoYes::No
                    && custTrans.DueDate <= predunningInvoiceDate
            exists join custInvoiceJour
                where custInvoiceJour.InvoiceId == custTrans.Invoice
                    && custInvoiceJour.InvoiceAccount == custTrans.AccountNum
                    && custInvoiceJour.InvoiceDate == custTrans.TransDate
                    && custInvoiceJour.LedgerVoucher == custTrans.Voucher
            exists join invoiceLocal
                where invoiceLocal.StrategyName == strategyName
                    && invoiceLocal.ExecutionId == executionId
                    && invoiceLocal.AccountNum == custTrans.AccountNum
                    && invoiceLocal.Invoice != custTrans.Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePredunningWithStrategyLineDetails</Name>
				<Source><![CDATA[
    private void updatePredunningWithStrategyLineDetails(CustAutomationContract _contract)
    {
        CustAutomationInvoice invoice;
        CustAutomationStrategyLine strategyLine;

        update_recordset invoice
            setting ActionType = strategyLine.ActionType,
                When = strategyLine.When,
                Days = strategyLine.Days,
                BusinessDocument = strategyLine.BusinessDocument,
                BusinessPurposeContact = strategyLine.BusinessPurposeContact,
                Recipient = strategyLine.Recipient
            where invoice.ExecutionId == _contract.parmExecutionId()
                && invoice.Predunning == NoYes::Yes
            join strategyLine
                where strategyLine.ParentRecId == _contract.parmCustAutomationStrategy().RecId
                    && strategyLine.Predunning == NoYes::Yes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>