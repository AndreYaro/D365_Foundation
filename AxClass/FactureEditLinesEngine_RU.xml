<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureEditLinesEngine_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FactureEditLinesEngine_RU
{
    Set                         jourSet, transSet, markupSet;
    SetEnumerator               jourEn,  transEn,  markupEn;
    Map                         facturedRecordsMap;
    Map                         jourMap, transMap, markupMap;
    Map                         mapInvoiceTrans;
    container                   cachedQueryRun;
    container                   currentQueryRun;

    CustVendAC                  consignor, consignee;
    str                         contragent,
                                contragentSec,
                                firstSourceId;

    FactureJourCreate_RU        factureCreate;

    CustVendInvoiceTrans        tmpTrans;
    CustVendInvoiceJour         tmpJour, localJour;

    Common                      sourceRecord;

    TransDate                   maxInvoiceDate;

    OfficialsTrans_RU           offTransRecord;
    OfficialsServ_RU            offServ;
    Map                         offCache;

    FormRun                     editLinesForm;

    FormTabControl              custTabControl,
                                vendTabControl,
                                emplTabControl,
                                ledgTabControl;

    FormTabPageControl          addrTabPageControl,
                                offTabPageControl;

    FormStringControl           customerControl,
                                vendorControl,
                                employeeControl,
                                factureCustomerControl,
                                factureVendorControl,
                                consigneeControl,
                                consignorControl,
                                correctedFactureExternalIdControl,
                                sellerControl,
                                buyerControl,
                                factureIdExternalControl;

    FormStringControl           factureExternalIdControl,
                                factureExtIdNumSegGroupIdControl,
                                currencyControl,
                                inventOwnerIdControl;
    FormComboBoxControl         taxCorrectionContragentTypeControl,
                                showJournalsControl,
                                inventProfileTypeControl,
                                distributionTypeControl,
                                correctionTypeControl;
    FormCheckBoxControl         creditNoteControl,
                                positiveControl,
                                sameAsControl,
                                vatOnPaymentControl,
                                correctControl,
                                useOriginalDocumentAsFactureControl,
                                processVATControl;
    FormGroupControl            externalDateGroupControl,
                                sourceGroupControl,
                                custRoundOffGroupControl,
                                custEndDiscGroupControl,
                                vendRoundOffGroupControl,
                                vendEndDiscGroupControl,
                                correctionGroupControl,
                                commissionGroupControl,
                                invAmountGroupControl,
                                commAmountGroupControl,                                
                                processVATGroupControl;
    FormDateControl             factureDateControl,
                                factureReportDateControl,
                                factureDateExternalControl,
                                correctedFactureDateControl,
                                correctedPeriodControl;
    FormTreeControl             custTreeControl,
                                vendTreeControl,
                                emplTreeControl,
                                ledgTreeControl;
    FormReferenceGroupControl   addressControl,
                                purchBookVATProcessParametersControl;
    FormDataSource              custInvoiceJourDS,
                                custInvoiceJourRUDS,
                                custInvoiceTransDS,
                                custInvoiceTransRUDS,
                                custCommReportTransItemDS,
                                vendInvoiceJourDS,
                                vendInvoiceTransDS,
                                vendCommReportTransItemDS,
                                markupDS,
                                emplAdvTableDS,
                                emplAdvLineDS,
                                ledgerJournalTableDS,
                                ledgerJournalTransDS,
                                ledgerJournalTransExistDS;
    FormStringControl           vendInvoiceGroupControl;
    FormStringControl           vendPaymentGroupControl;

    QueryBuildRange      currencyRange, factureDateRange;

    InventProfileType_RU lastValueInventProfileType;
    InventOwnerId_RU     lastValueInventOwnerId;

    boolean              treeIsBuilt;

    boolean              isProforma;
    boolean              currentJourOnly;

    boolean              isInsertAllJours;

    FormButtonControl    postPrintButton;
    FormButtonControl    postOnlyButton;
    FormButtonControl    printOnlyButton;

    RecordSortedList     rslTmpTrans;

    protected const str comma = ',';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressDefault</Name>
				<Source><![CDATA[
    private LogisticsPostalAddress addressDefault()
    {
        LogisticsPostalAddress ret;

        if (consigneeControl.text())
        {
            ret = LogisticsLocationEntity::findPostalAddress(CustTable::find(consigneeControl.text()), LogisticsLocationRoleType::Invoice);
        }
        else
        {
            ret = this.addressDefaultSec();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressDefaultSec</Name>
				<Source><![CDATA[
    abstract protected LogisticsPostalAddress addressDefaultSec()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustExternalDate</Name>
				<Source><![CDATA[
    final public void adjustExternalDate()
    {
        factureDateExternalControl.dateValue(min(factureDateExternalControl.dateValue(),
                                                 factureDateControl.dateValue()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowedInventProfileTypes</Name>
				<Source><![CDATA[
    public Set allowedInventProfileTypes()
    {
        Set         inventProfileTypeSet = new Set(Types::Enum);
        int         i;
        DictEnum    dictEnum = new DictEnum(enumNum(InventProfileType_RU));
        ;
        for (i=0; i<enumCnt(InventProfileType_RU); i++)
        {
            inventProfileTypeSet.add(dictEnum.index2Value(i));
        }
        return inventProfileTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends transaction to map.
    /// </summary>
    /// <param name="_key">
    /// The key of the map.
    /// </param>
    /// <param name="_qty">
    /// Value of the map.
    /// </param>
    /// <returns>
    /// true if the key did not already exist in the map and has been inserted; otherwise, false.
    /// </returns>
    protected boolean appendTrans(container _key,
                                  Qty       _qty)
    {
        return mapInvoiceTrans.insert(_key, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public int buildTree()
    {
        int globalIdx = 0,
            rootIdx;

        if (treeIsBuilt)
            return 0;

        treeIsBuilt = true;

        this.treeControl().deleteAll();

        if (transSet.elements())
        {
            rootIdx = this.treeControl().addItem(0,
                                                 globalIdx,
                                                 new FormTreeItem(this.transHeaderName(),
                                                                  transSet.empty() ? 1 : 0,
                                                                  transSet.elements(),
                                                                  ""));
            globalIdx ++;

            transEn = transSet.getEnumerator();

            while (transEn.moveNext())
            {
                tmpTrans.con2buf(transMap.lookup(transEn.current()));
                this.treeControl().addItem(rootIdx,
                                           globalIdx,
                                           new FormTreeItem(this.transName(tmpTrans),
                                                            1,
                                                            0,
                                                            ""));
                globalIdx ++;
            }
            this.treeControl().expand(rootIdx, FormTreeExpand::Expand);
        }

        return globalIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJour</Name>
				<Source><![CDATA[
    protected boolean checkJour(CustVendInvoiceJour _jour,
                                boolean             _proforma = false)
    {
        return !_jour.CustVendInvoiceJour::getFacturedFully_RU() &&
               (_proforma || _jour.InvoiceId); // free text invoice fix
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans(CustVendInvoiceTrans _trans)
    {
        return !_trans.CustVendInvoiceTrans::getFacturedFully_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public void clear()
    {
        jourSet   = new Set(typeName2Type(extendedTypeStr(RecId)));
        transSet  = new Set(typeName2Type(extendedTypeStr(RecId)));
        markupSet = new Set(typeName2Type(extendedTypeStr(RecId)));
        transMap  = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Container);
        jourMap   = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Container);
        markupMap = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Container);
        jourEn    = jourSet.getEnumerator();
        transEn   = transSet.getEnumerator();
        markupEn  = markupSet.getEnumerator();

        mapInvoiceTrans = new Map(Types::Container, Types::Real);
        if (factureCreate)
        {
            if (isInsertAllJours)
            {
                this.clearTrans();
            }
            else
            {
                factureCreate.clearTrans();
            }
        }

        consignor = "";
        consignee = "";

        treeIsBuilt = false;
        this.buildTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears transaction from map.
    /// </summary>
    protected void clearTrans()
    {
        mapInvoiceTrans = new Map(Types::Container, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commPartner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commission partner.
    /// </summary>
    /// <returns>Commission partner.</returns>
    public CustVendAC commPartner()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>consignee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns consignee account
    /// </summary>
    /// <returns>
    /// Consignee account
    /// </returns>
    public final CustVendAC consignee()
    {
        return consignee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consignor</Name>
				<Source><![CDATA[
    public final CustVendAC consignor()
    {
        return consignor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragent</Name>
				<Source><![CDATA[
    final public str contragent(str _contragent = contragent)
    {
        contragent = _contragent;
        return contragent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentChanged</Name>
				<Source><![CDATA[
    public void contragentChanged(boolean _clearSelection = true)
    {
        this.nillExternalFactureId();

        if (! this.contragentControlOK())
        {
            this.contragentInit();
            this.contragentInitDefault();
        }

        this.criteriaChanged(_clearSelection);

        if (! this.contragentFactureControlOK())
        {
            this.contragentControlChangedAfter();
        }

        this.offRebuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentControlChangedAfter</Name>
				<Source><![CDATA[
    protected void contragentControlChangedAfter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentControlOK</Name>
				<Source><![CDATA[
    abstract protected boolean contragentControlOK()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentFactureControlOK</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    protected boolean contragentFactureControlOK()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInit</Name>
				<Source><![CDATA[
    abstract public void contragentInit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInitDefault</Name>
				<Source><![CDATA[
    abstract public void contragentInitDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentSec</Name>
				<Source><![CDATA[
    final public str contragentSec(str _contragentSec = contragentSec)
    {
        contragentSec = _contragentSec;
        return contragentSec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaChanged</Name>
				<Source><![CDATA[
    public void criteriaChanged(boolean _clear = true)
    {
        if (_clear)
        {
            this.clear();
        }
        this.initDeliveryAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCheck</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    protected boolean dateCheck(TransDate _date,
                                RecId     _recId)
    {
        boolean ret;

        select firstonly localJour
            where localJour.RecId       == _recId &&
                  localJour.InvoiceDate >  _date;

        if (localJour.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateRemove</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    protected void dateRemove()
    {
        this.removeJour(localJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateSet</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public Set dateSet()
    {
        return jourSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeTable</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    protected Common decodeTable(Common _src)
    {
        return _src;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeTableRecId</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    protected RecId decodeTableRecId(RecId _recId)
    {
        return _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeTrans</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    protected Common decodeTrans(Common _src)
    {
        return _src;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeTransRecId</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    protected RecId decodeTransRecId(RecId _recId)
    {
        return _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveAdvLine</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineEmpl_Ru
    public void dsActiveAdvLine()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveAdvTable</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineEmpl_Ru
    public void dsActiveAdvTable()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveInvoiceJour</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public void dsActiveInvoiceJour(FormDataSource _jourDs)
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveInvoiceTrans</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public void dsActiveInvoiceTrans(FormDataSource _transDs)
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveLedgTable</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public void dsActiveLedgTable()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveLedgTrans</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public void dsActiveLedgTrans()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveMarkup</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public void dsActiveMarkup()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteAdvTable</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineEmpl_Ru
    public boolean dsExecuteAdvTable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteInvoiceJour</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public boolean dsExecuteInvoiceJour(FormDataSource _jourDs)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteLedgTable</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public boolean dsExecuteLedgTable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteLedgTrans</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public boolean dsExecuteLedgTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteMarkup</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public void dsExecuteMarkup()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitAdvLine</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineEmpl_Ru
    public void dsInitAdvLine()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitAdvTable</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineEmpl_Ru
    public void dsInitAdvTable()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitInvoiceJour</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public void dsInitInvoiceJour()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitLedgTable</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public void dsInitLedgTable()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitLedgTrans</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public void dsInitLedgTrans()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitLedgTransExist</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public void dsInitLedgTransExist()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscFactured</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public boolean endDiscFactured(RecId _recId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalDateSameAsFactureDate</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    protected boolean externalDateSameAsFactureDate()
    {
        return sameAsControl.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>extFactureIdNumSeqCode</Name>
				<Source><![CDATA[
    abstract public NumberSequenceCode extFactureIdNumSeqCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>extFactureIdNumSeqGroup</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public NumberSequenceGroupId extFactureIdNumSeqGroup(NumberSequenceGroupId _id = "")
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>facturedTransMap</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    protected Map facturedTransMap()
    {
        return facturedRecordsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureType</Name>
				<Source><![CDATA[
    abstract public FactureType_RU factureType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJourByTrans</Name>
				<Source><![CDATA[
    abstract protected void findJourByTrans(Common _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecord</Name>
				<Source><![CDATA[
    private void findRecord(QueryRun _queryRun,
                            int      _dataSourceNo,
                            RecId    _recId)
    {
        _queryRun.reset();

        while (_queryRun.next())
        {
            if (_queryRun.getNo(_dataSourceNo).RecId == _recId)
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransByJour</Name>
				<Source><![CDATA[
    abstract protected void findTransByJour(Common _jour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureExternalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the value of external identificator of facture.
    /// </summary>
    /// <param name="_manualEnteredFactureExternalId">
    /// Facture ID enetered on the form;
    /// </param>
    /// <returns>
    /// Facture external identificator.
    /// </returns>
    public FactureExternalId_RU getFactureExternalId(FactureExternalId_RU _manualEnteredFactureExternalId)
    {
        return _manualEnteredFactureExternalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeEndDisc</Name>
				<Source><![CDATA[
    final public IncludeInFacture_RU includeEndDisc(boolean             _set,
                                                    Common              _jour,
                                                    IncludeInFacture_RU _include)
    {
        IncludeInFacture_RU ret;

        if (_set)
        {
            ret = _include;

            treeIsBuilt = false;

            if (ret)
            {
                this.insertEndDisc(_jour, NoYes::Yes);
            }
            else
            {
                this.removeEndDisc(_jour, NoYes::Yes);
            }

            this.refreshHeader();
        }
        else
        {
            ret = this.inEndDisc(_jour.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeJour</Name>
				<Source><![CDATA[
    final public IncludeInFacture_RU includeJour(boolean             _set,
                                                 Common              _jour,
                                                 IncludeInFacture_RU _include)
    {
        IncludeInFacture_RU ret;

        if (_set)
        {
            ret = _include;

            treeIsBuilt = false;

            if (ret)
            {
                this.insertJour(_jour);
            }
            else
            {
                this.removeJour(_jour);
            }

            this.refreshHeader();
        }
        else
        {
            ret = this.inJour(_jour.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeMarkup</Name>
				<Source><![CDATA[
    final public IncludeInFacture_RU includeMarkup(boolean             _set,
                                                   MarkupTrans         _trans,
                                                   IncludeInFacture_RU _include)
    {
        IncludeInFacture_RU ret;

        if (_set)
        {
            ret = _include;

            treeIsBuilt = false;

            if (ret)
            {
                this.insertMarkup(_trans);
            }
            else
            {
                this.removeMarkup(_trans);
            }

            this.refreshHeader();
        }
        else
        {
            ret = this.inMarkup(_trans.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeRoundOff</Name>
				<Source><![CDATA[
    final public IncludeInFacture_RU includeRoundOff(boolean             _set,
                                                     Common              _jour,
                                                     IncludeInFacture_RU _include)
    {
        IncludeInFacture_RU ret;

        if (_set)
        {
            ret = _include;

            treeIsBuilt = false;

            if (ret)
            {
                this.insertRoundOff(_jour, NoYes::Yes);
            }
            else
            {
                this.removeRoundOff(_jour, NoYes::Yes);
            }

            this.refreshHeader();
        }
        else
        {
            ret = this.inRoundOff(_jour.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeTrans</Name>
				<Source><![CDATA[
    public IncludeInFacture_RU includeTrans(boolean             _set,
                                            Common              _trans,
                                            IncludeInFacture_RU _include)
    {
        IncludeInFacture_RU ret;

        if (_set)
        {
            ret = _include;

            treeIsBuilt = false;

            if (ret)
            {
                this.insertTrans(_trans, NoYes::Yes);
            }
            else
            {
                this.removeTrans(_trans, NoYes::Yes);
            }

            this.refreshHeader();
        }
        else
        {
            ret = this.inTrans(_trans.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCommissionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes group of controls related to commission trade.
    /// </summary>
    public void initCommissionGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inEndDisc</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public boolean inEndDisc(RecId _recId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrect</Name>
				<Source><![CDATA[
    public void initCorrect()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectionGroup</Name>
				<Source><![CDATA[
    public void initCorrectionGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes correction type field on form.
    /// </summary>
    public void initCorrectionType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreditNote</Name>
				<Source><![CDATA[
    public void initCreditNote()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrency</Name>
				<Source><![CDATA[
    final public void initCurrency()
    {
        const str currencyFieldName = 'CurrencyCode';
        FieldId field = fieldName2id(sourceRecord.TableId, currencyFieldName);

        if (field)
        {
            currencyControl.text(sourceRecord.(field));
        }
        else
        {
            currencyControl.text(CompanyInfoHelper::standardCurrency());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeliveryAddress</Name>
				<Source><![CDATA[
    public void initDeliveryAddress()
    {
        addressControl.value(this.addressDefault().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExternalDate</Name>
				<Source><![CDATA[
    public void initExternalDate()
    {
        factureDateExternalControl.enabled(! this.externalDateSameAsFactureDate());

        if (this.externalDateSameAsFactureDate() || ! factureDateExternalControl.dateValue())
        {
            factureDateExternalControl.dateValue(factureDateControl.dateValue());
        }
        else
        {
            this.adjustExternalDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFactureDate</Name>
				<Source><![CDATA[
    public void initFactureDate()
    {
        factureDateControl.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventOwnerId</Name>
				<Source><![CDATA[
    public void initInventOwnerId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventProfileType</Name>
				<Source><![CDATA[
    public void initInventProfileType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceLinkDS</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public void initInvoiceLinkDS(FormDataSource _ds)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerEngine</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public void initLedgerEngine()
    {
        // do nothing by default
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPositive</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public void initPositive()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProcessVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets access to <c>FormCheckBoxControl</c> control that reperesents Vat on payment value on the form.
    /// </summary>
    public void initProcessVAT()
    {
        processVATControl.enabled(NoYes::No);

        processVATControl.value(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchBookVATProcessParametersRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes VAT process parameter record
    /// </summary>
    public void initPurchBookVATProcessParametersRecId()
    {
        purchBookVATProcessParametersControl.enabled(! vatOnPaymentControl.value());

        purchBookVATProcessParametersControl.value(PurchBookVATProcessParameters_RU::defaultParms(PurchBookProcessingType_RU::Standard).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceGroup</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public void initSourceGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVATOnPayment</Name>
				<Source><![CDATA[
    public void initVATOnPayment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inJour</Name>
				<Source><![CDATA[
    private boolean inJour(RecId _recId)
    {
        return jourSet.in(this.decodeTableRecId(_recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inMarkup</Name>
				<Source><![CDATA[
    public final boolean inMarkup(RecId _recId)
    {
        return markupSet.in(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inRoundOff</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public boolean inRoundOff(RecId _recId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAllJours</Name>
				<Source><![CDATA[
    private void insertAllJours(QueryRun _jourRun,
                                boolean  _insert)
    {
        Common          jour;
        QueryRun        queryRun;
        RecId           save;
        FormDataSource  formDataSource;

        const int dataSourceNo = 1;

        this.unpackMapInvoiceTrans();
        currentQueryRun = this.mainQueryRun().pack();
        this.setCache();

        treeIsBuilt = false;

        queryRun = _jourRun;
        formDataSource = this.mainDataSource();
        save     = formDataSource.queryRun().getNo(dataSourceNo).RecId;
        for (jour = formDataSource.getFirst(); jour; jour = formDataSource.getNext())
        {
            jour = this.decodeTable(jour);

            if (this.inJour(jour.RecId))
            {
                this.removeJour(jour);
            }
            if (_insert)
            {
                this.insertJour(jour);
            }
        }

        this.findRecord(formDataSource.queryRun(), dataSourceNo, save);
        this.packMapInvoiceTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEndDisc</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public void insertEndDisc(Common _jour,
                              NoYes  _updateJour = NoYes::No)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJour</Name>
				<Source><![CDATA[
    public boolean insertJour(Common  _jour,
                              boolean _proforma = false)
    {
        Common  jour = this.decodeTable(_jour);

        if (! this.checkJour(jour, _proforma))
        {
            return false;
        }

        this.insertJourWithUpdate(jour);
        this.updateAllMarkups(jour.TableId, jour.RecId, true);

        this.insertRoundOff(_jour);
        this.insertEndDisc(_jour);

        this.findTransByJour(jour);
        while ((rslTmpTrans && rslTmpTrans.next(tmpTrans)) || (!rslTmpTrans && tmpTrans))
        {
            if (this.checkTrans(tmpTrans))
            {
                this.insertTrans(tmpTrans);
            }

            this.updateAllMarkups(tmpTrans.TableId, tmpTrans.RecId, true); // no matter, is line factured or not,
                                                                           // markup on this line must be included

            if (! rslTmpTrans)
            {
                next tmpTrans;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJourWithUpdate</Name>
				<Source><![CDATA[
    protected void insertJourWithUpdate(CustVendInvoiceJour _jour)
    {
        if (!jourSet.elements())
        {
            firstSourceId = _jour.InvoiceId;
        }
        jourSet.add(this.decodeTableRecId(_jour.RecId));
        jourMap.insert(this.decodeTableRecId(_jour.RecId), this.decodeTable(_jour).buf2con());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLinkedTrans</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    protected void insertLinkedTrans(CustVendInvoiceTrans _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMarkup</Name>
				<Source><![CDATA[
    public void insertMarkup(MarkupTrans _trans,
                             NoYes       _updateJour = NoYes::No)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRoundOff</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public void insertRoundOff(Common   _jour,
                               NoYes    _updateJour = NoYes::No)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTrans</Name>
				<Source><![CDATA[
    public final void insertTrans(CustVendInvoiceTrans _trans,
                              NoYes                _updateJour = NoYes::No)
    {
        CustVendInvoiceTrans trans = this.decodeTrans(_trans);
        boolean              facturedQtyMapped = mappingExists(tablenum(CustVendInvoiceTrans),
                                                           _trans.TableId,
                                                           fieldnum(CustVendInvoiceTrans, FacturedQty_RU));
        boolean              refCommTransMapped = mappingExists(tablenum(CustVendInvoiceTrans),
                                                            _trans.TableId,
                                                            fieldnum(CustVendInvoiceTrans, RefCommReportTrans_RU));

        if (!this.checkTrans(_trans))
            return;

        transSet.add(trans.RecId);
        transMap.insert(trans.RecId, trans.buf2con());

        if (factureCreate)
        {
            if (isInsertAllJours)
            {

                this.appendTrans([  trans.TableId,
                                    trans.RecId,
                                    refCommTransMapped          ?
                                    trans.RefCommReportTrans_RU : 0], trans.Qty ?
                                                                      trans.Qty - (facturedQtyMapped ? trans.FacturedQty_RU : 0) :
                                                                      (this.transAmount(trans) ? 1 : 0));
            }
            else
            {
                factureCreate.appendTrans([ trans.TableId,
                                            trans.RecId,
                                            refCommTransMapped          ?
                                            trans.RefCommReportTrans_RU : 0], trans.Qty ?
                                                                              trans.Qty - (facturedQtyMapped ? trans.FacturedQty_RU : 0) :
                                                                              (this.transAmount(trans) ? 1 : 0));
            }
        }

        this.insertLinkedTrans(trans);

        if (_updateJour)
        {
            this.findJourByTrans(trans);
            this.insertJourWithUpdate(tmpJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inTrans</Name>
				<Source><![CDATA[
    public final boolean inTrans(RecId _recId)
    {
        return transSet.in(this.decodeTransRecId(_recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOwnerId</Name>
				<Source><![CDATA[
    public InventOwnerId_RU inventOwnerId()
    {
        return inventOwnerIdControl ? inventOwnerIdControl.text() : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>InventProfileType_RU</c> value from control
    /// </summary>
    /// <returns>
    /// <c>InventProfileType_RU</c> value from control
    /// </returns>
    public InventProfileType_RU inventProfileType()
    {
        return inventProfileTypeControl ? inventProfileTypeControl.selection() : InventProfileType_RU::NotSpecified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourFullyFactured</Name>
				<Source><![CDATA[
    public final boolean jourFullyFactured(RecId   _jourRecId,
                                     boolean _updateMap = true)
    {
        boolean ret   = true;
        RecId   recId = this.decodeTableRecId(_jourRecId);

        if (facturedRecordsMap.exists(recId))
        {
            ret = facturedRecordsMap.lookup(recId);
        }
        else
        {
            select tmpJour
                where tmpJour.RecId == recId;

            ret = this.roundOffFactured(tmpJour.RecId)                      &&
                  this.endDiscFactured(tmpJour.RecId)                       &&
                  this.markupFullyFactured(tmpJour.TableId, tmpJour.RecId);

            if (ret)
            {
                this.findTransByJour(tmpJour);
            }
            
            while (ret && ((rslTmpTrans && rslTmpTrans.next(tmpTrans)) || (!rslTmpTrans && tmpTrans)))
            {
                ret = tmpTrans.custVendInvoiceTransInterface().fullyFactured_RU();
                ret = ret && this.markupFullyFactured(tmpTrans.TableId, tmpTrans.RecId);

                if (! rslTmpTrans)
                {
                    next tmpTrans;
                }
            }

            if (_updateMap)
            {
                facturedRecordsMap.insert(recId, ret);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourHasNoSelectedChildren</Name>
				<Source><![CDATA[
    protected boolean jourHasNoSelectedChildren() // tmpJour is inited before
    {
        boolean matchNotFound = this.markupsNotIncluded(tmpJour.TableId, tmpJour.RecId) &&
                                ! this.inRoundOff(tmpJour.RecId)                        &&
                                ! this.inEndDisc(tmpJour.RecId);

        if (matchNotFound)
        {
            this.findTransByJour(tmpJour);
        }

        while (((rslTmpTrans && rslTmpTrans.next(tmpTrans)) || (!rslTmpTrans && tmpTrans)) && matchNotFound)
        {
            matchNotFound = ! transSet.in(tmpTrans.RecId);
            matchNotFound = matchNotFound && this.markupsNotIncluded(tmpTrans.TableId, tmpTrans.RecId);

            if (! rslTmpTrans)
            {
                next tmpTrans;
            }
        }

        return matchNotFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container with list of journals.
    /// </summary>
    /// <returns>
    /// Container with list of journals.
    /// </returns>
    public container jourList()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    public void jumpRef(TableId           _tableId,
                        FieldId           _fieldId,
                        FormStringControl _ctrl)
    {
        DictTable    dictTable = new DictTable(_tableId);
        Args         args      = new Args();
        MenuFunction function  = dictTable.formRef() ?  new MenuFunction(dictTable.formRef(), MenuItemType::Display) : null;
        ;
        if (function)
        {
            args.lookupField(_fieldId);
            args.lookupValue(_ctrl.text());
            function.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueInventOwnerId</Name>
				<Source><![CDATA[
    public InventOwnerId_RU lastValueInventOwnerId(InventOwnerId_RU _lastValueInventOwnerId = lastValueInventOwnerId)
    {
        ;
        lastValueInventOwnerId = _lastValueInventOwnerId;
        return lastValueInventOwnerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueInventProfileType</Name>
				<Source><![CDATA[
    public InventProfileType_RU lastValueInventProfileType(InventProfileType_RU _lastValueInventProfileType = lastValueInventProfileType)
    {
        ;
        lastValueInventProfileType = _lastValueInventProfileType;
        return lastValueInventProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookups transaction data by the key.
    /// </summary>
    /// <param name="_key">
    /// The key of the map.
    /// </param>
    /// <returns>
    /// If data exists returns value, else zerro.
    /// </returns>
    public Qty lookupTrans(container _key)
    {
        if (mapInvoiceTrans.exists(_key))
            return mapInvoiceTrans.lookup(_key);

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return main data source of facture type.
    /// </summary>
    /// <returns>
    /// Return main data source of facture type.
    /// </returns>
    abstract protected FormDataSource mainDataSource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainQueryRun</Name>
				<Source><![CDATA[
    abstract protected QueryRun mainQueryRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAll</Name>
				<Source><![CDATA[
    final public void markAll(boolean _mark)
    {
        isInsertAllJours = true;
        this.insertAllJours(this.mainQueryRun(), _mark);
        this.researchDS();
        this.buildTree();
        isInsertAllJours = false;
        this.refreshHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupFullyFactured</Name>
				<Source><![CDATA[
    protected boolean markupFullyFactured(TableId  _tableId,
                                          RecId    _recId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupsNotIncluded</Name>
				<Source><![CDATA[
    protected boolean markupsNotIncluded(TableId _tableId,
                                         RecId   _recId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxInvoiceDate</Name>
				<Source><![CDATA[
    public final TransDate maxInvoiceDate(TransDate _newDate = maxInvoiceDate)
    {
        SetIterator it;
        RecId       prev = 0;

        if (_newDate < maxInvoiceDate)
        {
            it = new SetIterator(this.dateSet());
            while (it.more())
            {
                if (this.dateCheck(_newDate, it.value()))
                {
                    this.dateRemove();
                    it = new SetIterator(this.dateSet());
                    while (prev && it.more())
                    {
                        if (it.value() == prev)
                        {
                            prev = 0;
                        }
                        else
                        {
                            it.next();
                        }
                    }
                }
                else
                {
                    prev = it.value();
                }
                if (prev && it.more())
                {
                    it.next();
                }
            }
        }

        maxInvoiceDate = _newDate;

        return maxInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU _factureCreate)
    {
        jourSet   = new Set(typeName2Type(extendedTypeStr(RecId)));
        transSet  = new Set(typeName2Type(extendedTypeStr(RecId)));
        markupSet = new Set(typeName2Type(extendedTypeStr(RecId)));
        transMap  = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Container);
        jourMap   = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Container);
        markupMap = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Container);
        jourEn    = jourSet.getEnumerator();
        transEn   = transSet.getEnumerator();
        markupEn  = markupSet.getEnumerator();

        facturedRecordsMap = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Enum);
        mapInvoiceTrans = new Map(Types::Container, Types::Real);
        factureCreate  = _factureCreate;
        maxInvoiceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>nillExternalFactureId</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    protected void nillExternalFactureId()
    {
        factureExternalIdControl.text("");
    }

]]></Source>
			</Method>
			<Method>
				<Name>offAccount</Name>
				<Source><![CDATA[
    abstract protected CustVendAC offAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>offInit</Name>
				<Source><![CDATA[
    public void offInit()
    {
        if (OfficialsServ_RU::isFeatureEnabled())
        {
            offServ  = new OfficialsServ_RU();
            offServ.initTableFacture(factureCreate.module(),
                                     this.offAccount(),
                                     true,
                                     creditNoteControl ? creditNoteControl.value() : false,
                                     inventProfileTypeControl ? inventProfileTypeControl.selection() : InventProfileType_RU::NotSpecified,
                                     this.inventOwnerId());

            offCache = new Map(Types::Container, Types::Class);
        }
        else
        {
            offTabPageControl.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offLoadFromCache</Name>
				<Source><![CDATA[
    private boolean offLoadFromCache()
    {
        container       searchPattern = [ factureCreate.module(),
                                          this.offAccount(),
                                          creditNoteControl.value(),
                                          inventProfileTypeControl.selection(),
                                          this.inventOwnerId() ];

        List            load;
        ListEnumerator  en;

        boolean         ret;

        if (offCache.exists(searchPattern))
        {
            load = offCache.lookup(searchPattern);

            if (load.elements())
            {
                en = load.getEnumerator();

                ttsbegin;

                while (en.moveNext())
                {
                    offTransRecord.data(en.current());
                    offTransRecord.doInsert();
                }

                ttscommit;
            }

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offRebuild</Name>
				<Source><![CDATA[
    final public void offRebuild()
    {
        FormDataSource offDS;

        if (offServ)
        {
            OfficialsTrans_RU::deleteWithoutUpdate(offServ.newId());

            if (! this.offLoadFromCache())
            {
                offServ.initTableFacture(factureCreate.module(),
                                         this.offAccount(),
                                         false,
                                         creditNoteControl.value(),
                                         inventProfileTypeControl ? inventProfileTypeControl.selection() : InventProfileType_RU::NotSpecified,
                                         this.inventOwnerId());
            }

            offDS = FormDataUtil::getFormDataSource(offTransRecord);
            offDS.executeQuery();
        }
        else
        {
            offTabPageControl.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offRelease</Name>
				<Source><![CDATA[
    final public void offRelease()
    {
        if (offServ)
        {
            OfficialsServ_RU::release(offServ.newId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
    abstract protected OffReportType_RU offReportType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>offResearch</Name>
				<Source><![CDATA[
    final public void offResearch()
    {
        if (offServ)
        {
            OfficialsTrans_RU::searchAccountIdx(offTransRecord,
                                                this.offReportType(),
                                                offServ.newId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offSaveToCache</Name>
				<Source><![CDATA[
    final public void offSaveToCache(
        CustVendAC           _oldAccount,
        boolean              _oldCreditNote,
        InventProfileType_RU _oldInventProfileType = this.inventProfileType(),
        InventOwnerId_RU     _oldInventOwnerId     = this.inventOwnerId())
    {
        List save;

        if (offServ)
        {
            save = new List(Types::Record);

            while select offTransRecord
                where offTransRecord.OffSessionId == offServ.newId()
            {
                save.addEnd(offTransRecord);
            }

            offCache.insert([ factureCreate.module(), _oldAccount, _oldCreditNote, _oldInventProfileType, _oldInventOwnerId], save);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offSessionID</Name>
				<Source><![CDATA[
    final public OffSessionId_RU offSessionID()
    {
        return offServ         ?
               offServ.newId() :
               "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>packMapInvoiceTrans</Name>
				<Source><![CDATA[
    private void packMapInvoiceTrans()
    {
        factureCreate.unpackMapInvoiceTrans(mapInvoiceTrans.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentJourOnly</Name>
				<Source><![CDATA[
    public boolean parmCurrentJourOnly(boolean _currentJourOnly = currentJourOnly)
    {
        currentJourOnly = _currentJourOnly;
        return currentJourOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirstSourceId</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineEmpl_Ru
    public str parmFirstSourceId(str _new = firstSourceId)
    {
        firstSourceId = _new;
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceGroupControl</Name>
				<Source><![CDATA[
    public FormStringControl parmVendInvoiceGroupControl(FormStringControl _value = vendInvoiceGroupControl)
    {
        vendInvoiceGroupControl = _value;
        return vendInvoiceGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPaymentGroupControl</Name>
				<Source><![CDATA[
    public FormStringControl parmVendPaymentGroupControl(FormStringControl _value = vendPaymentGroupControl)
    {
        vendPaymentGroupControl = _value;
        return vendPaymentGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchBookVATPrcPrmsRecIdChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Processes changing of VAT process parameter record
    /// </summary>
    public void purchBookVATPrcPrmsRecIdChanged()
    {
        this.initProcessVAT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFactureExternalIdControl</Name>
				<Source><![CDATA[
    public void refreshFactureExternalIdControl()
    {
        #JmgConstants
        boolean isRevision = correctionTypeControl.selection() == FactureCorrectionType_RU::Revision;

        if (factureExternalIdControl)
        {
            factureExternalIdControl.allowEdit(! isRevision);

            if (! factureExternalIdControl.enabled() || isRevision)
            {
                factureExternalIdControl.text("");
            }
            factureExternalIdControl.lookupButton(#LOOKUP_NEVER);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshHeader</Name>
				<Source><![CDATA[
    final public void refreshHeader()
    {
        consigneeControl.text(this.consignee() ? this.consignee() : consigneeControl.text());
        consignorControl.text(this.consignor() ? this.consignor() : consignorControl.text());
        this.initDeliveryAddress();
        factureExtIdNumSegGroupIdControl.text(this.extFactureIdNumSeqGroup());

        this.refreshFactureExternalIdControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEndDisc</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public void removeEndDisc(Common _jour,
                              NoYes  _updateJour = NoYes::No)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeJour</Name>
				<Source><![CDATA[
    public void removeJour(CustVendInvoiceJour _jour)
    {
        Common jour = this.decodeTable(_jour);

        this.removeJourWithUpdate(jour);
        this.updateAllMarkups(jour.TableId, jour.RecId, false);
        this.removeRoundOff(_jour);
        this.removeEndDisc(_jour);

        this.findTransByJour(jour);
        while ((rslTmpTrans && rslTmpTrans.next(tmpTrans)) || (!rslTmpTrans && tmpTrans))
        {
            this.removeTrans(tmpTrans);
            this.updateAllMarkups(tmpTrans.TableId, tmpTrans.RecId, false);

            if (! rslTmpTrans)
            {
                next tmpTrans;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeJourWithUpdate</Name>
				<Source><![CDATA[
    protected void removeJourWithUpdate(CustVendInvoiceJour    _jour)
    {
        jourSet.remove(this.decodeTableRecId(_jour.RecId));
        jourMap.remove(this.decodeTableRecId(_jour.RecId));
        if (! jourSet.elements())
        {
            firstSourceId = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLinkedTrans</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    protected void removeLinkedTrans(Common _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMarkup</Name>
				<Source><![CDATA[
    public void removeMarkup(MarkupTrans _trans,
                             NoYes       _updateJour = NoYes::No)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRoundOff</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public void removeRoundOff(Common _jour,
                               NoYes  _updateJour = NoYes::No)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTrans</Name>
				<Source><![CDATA[
    public final void removeTrans(Common _trans,
                              NoYes  _updateJour = NoYes::No)
    {
        Common  trans = this.decodeTrans(_trans);
        CustVendInvoiceTrans invoiceTrans;
        boolean refCommTransMapped = mappingExists(tablenum(CustVendInvoiceTrans),
                                                   _trans.TableId,
                                                   fieldnum(CustVendInvoiceTrans, RefCommReportTrans_RU));

        transSet.remove(trans.RecId);
        transMap.remove(trans.RecId);
        if (factureCreate)
        {

            if (refCommTransMapped)
            {
                invoiceTrans = trans;
                if (isInsertAllJours)
                {
                    this.removeTransMap([ invoiceTrans.TableId, invoiceTrans.RecId, invoiceTrans.RefCommReportTrans_RU]);
                }
                else
                {
                    factureCreate.removeTrans([ invoiceTrans.TableId, invoiceTrans.RecId, invoiceTrans.RefCommReportTrans_RU]);
                }
            }
            else
            {
                if (isInsertAllJours)
                {
                    this.removeTransMap([ trans.TableId, trans.RecId, 0]);
                }
                else
                {
                    factureCreate.removeTrans([ trans.TableId, trans.RecId, 0]);
                }
            }
        }

        this.removeLinkedTrans(_trans);

        if (_updateJour)
        {
            this.findJourByTrans(trans);

            if (this.jourHasNoSelectedChildren())
            {
                this.removeJourWithUpdate(tmpJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTransMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes transaction data from the map.
    /// </summary>
    /// <param name="_key">
    /// The key of the map.
    /// </param>
    /// <returns>
    /// true if the key was found in the map and the element has been deleted; otherwise, false.
    /// </returns>
    protected boolean removeTransMap(container _key)
    {
        return mapInvoiceTrans.remove(_key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchDS</Name>
				<Source><![CDATA[
    abstract protected void researchDS()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffFactured</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCustVend_Ru
    public boolean roundOffFactured(RecId _recId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets data cache.
    /// </summary>
    protected void setCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlsButtons</Name>
				<Source><![CDATA[
    final public void setControlsButtons(FormButtonControl _postPrintButton, FormButtonControl _postOnlyButton, FormButtonControl _printOnlyButton)
    {
        ;
        postPrintButton = _postPrintButton;
        postOnlyButton  = _postOnlyButton;
        printOnlyButton = _printOnlyButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlsContragents</Name>
				<Source><![CDATA[
    final public void setControlsContragents(FormStringControl _customerControl,
                                             FormStringControl _vendorControl,
                                             FormStringControl _employeeControl,
                                             FormStringControl _factureCustomerControl,
                                             FormStringControl _factureVendorControl,
                                             FormStringControl _consigneeControl,
                                             FormStringControl _consignorControl)
    {
        customerControl        = _customerControl;
        vendorControl          = _vendorControl;
        employeeControl        = _employeeControl;
        factureCustomerControl = _factureCustomerControl;
        factureVendorControl   = _factureVendorControl;
        consigneeControl       = _consigneeControl;
        consignorControl       = _consignorControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlsOther</Name>
				<Source><![CDATA[
    final public void setControlsOther(FormStringControl         _factureExternalIdControl,
                                       FormStringControl         _factureExtIdNumSegGroupIdControl,
                                       FormStringControl         _currencyControl,
                                       FormComboBoxControl       _taxCorrectionContragentTypeControl,
                                       FormComboBoxControl       _showJournalsControl,
                                       FormCheckBoxControl       _creditNoteControl,
                                       FormCheckBoxControl       _positiveControl,
                                       FormCheckBoxControl       _sameAsControl,
                                       FormGroupControl          _externalDateGroupControl,
                                       FormGroupControl          _sourceGroupControl,
                                       FormGroupControl          _custRoundOffGroupControl,
                                       FormGroupControl          _custEndDiscGroupControl,
                                       FormGroupControl          _vendRoundOffGroupControl,
                                       FormGroupControl          _vendEndDiscGroupControl,
                                       FormDateControl           _factureDateControl,
                                       FormDateControl           _factureDateExternalControl,
                                       FormGroupControl          _correctionGroupControl,
                                       FormCheckBoxControl       _vatOnPaymentControl,
                                       FormStringControl         _correctedFactureExternalIdControl,
                                       FormDateControl           _correctedFactureDateControl,
                                       FormDateControl           _correctedPeriodControl,
                                       FormCheckBoxControl       _correctControl,
                                       FormComboBoxControl       _inventProfileTypeControl,
                                       FormStringControl         _inventOwnerIdControl,
                                       FormReferenceGroupControl _addressControl,
                                       FormCheckBoxControl       _processVATControl,
                                       FormReferenceGroupControl _purchBookVATProcessParametersControl,
                                       FormGroupControl          _processVATGroupControl,
                                       FormComboBoxControl       _distributionTypeControl,
                                       FormComboBoxControl       _correctionTypeControl,
                                       FormGroupControl          _commissionGroupControl = null,
                                       FormStringControl         _sellerControl = null,
                                       FormStringControl         _buyerControl = null,
                                       FormStringControl         _factureIdExternalControl = null,
                                       FormGroupControl          _invAmountGroupControl = null,
                                       FormGroupControl          _commAmountGroupControl = null,
                                       FormDateControl           _factureReportDateControl = null,
                                       FormCheckBoxControl       _useOriginalDocumentAsFactureControl = null)

    {
        factureExternalIdControl                = _factureExternalIdControl;
        factureExtIdNumSegGroupIdControl        = _factureExtIdNumSegGroupIdControl;
        currencyControl                         = _currencyControl;
        taxCorrectionContragentTypeControl      = _taxCorrectionContragentTypeControl;
        showJournalsControl                     = _showJournalsControl;
        creditNoteControl                       = _creditNoteControl;
        positiveControl                         = _positiveControl;
        sameAsControl                           = _sameAsControl;
        externalDateGroupControl                = _externalDateGroupControl;
        sourceGroupControl                      = _sourceGroupControl;
        custRoundOffGroupControl                = _custRoundOffGroupControl;
        custEndDiscGroupControl                 = _custEndDiscGroupControl;
        vendRoundOffGroupControl                = _vendRoundOffGroupControl;
        vendEndDiscGroupControl                 = _vendEndDiscGroupControl;
        factureDateControl                      = _factureDateControl;
        factureDateExternalControl              = _factureDateExternalControl;
        correctionGroupControl                  = _correctionGroupControl;
        vatOnPaymentControl                     = _vatOnPaymentControl;
        correctedFactureExternalIdControl       = _correctedFactureExternalIdControl;
        correctedFactureDateControl             = _correctedFactureDateControl;
        correctedPeriodControl                  = _correctedPeriodControl;
        correctControl                          = _correctControl;
        inventProfileTypeControl                = _inventProfileTypeControl;
        inventOwnerIdControl                    = _inventOwnerIdControl;
        addressControl                          = _addressControl;
        processVATControl                       = _processVATControl;
        purchBookVATProcessParametersControl    = _purchBookVATProcessParametersControl;
        processVATGroupControl                  = _processVATGroupControl;
        distributionTypeControl                 = _distributionTypeControl;
        correctionTypeControl                   = _correctionTypeControl;
        commissionGroupControl                  = _commissionGroupControl;
        sellerControl                           = _sellerControl;
        buyerControl                            = _buyerControl;
        factureIdExternalControl                = _factureIdExternalControl;
        invAmountGroupControl                   = _invAmountGroupControl;
        commAmountGroupControl                  = _commAmountGroupControl;
        factureReportDateControl                = _factureReportDateControl;
        useOriginalDocumentAsFactureControl     = _useOriginalDocumentAsFactureControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlsTabs</Name>
				<Source><![CDATA[
    final public void setControlsTabs(FormTabControl     _custTabControl,
                                      FormTabControl     _vendTabControl,
                                      FormTabControl     _emplTabControl,
                                      FormTabControl     _ledgTabControl,
                                      FormTabPageControl _addrTabPageControl,
                                      FormTabPageControl _offTabPageControl)
    {
        custTabControl     = _custTabControl;
        vendTabControl     = _vendTabControl;
        emplTabControl     = _emplTabControl;
        ledgTabControl     = _ledgTabControl;
        addrTabPageControl = _addrTabPageControl;
        offTabPageControl  = _offTabPageControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    final public void setDatasources(FormDataSource _custInvoiceJourDS,
                                     FormDataSource _custInvoiceJourRUDS,
                                     FormDataSource _custInvoiceTransDS,
                                     FormDataSource _custInvoiceTransRUDS,
                                     FormDataSource _vendInvoiceJourDS,
                                     FormDataSource _vendInvoiceTransDS,
                                     FormDataSource _markupDS,
                                     FormDataSource _emplAdvTableDS,
                                     FormDataSource _emplAdvLineDS,
                                     FormDataSource _ledgerJournalTableDS,
                                     FormDataSource _ledgerJournalTransDS,
                                     FormDataSource _ledgerJournalTransExistDS,
                                     FormDataSource _custCommReportTransItemDS = null,
                                     FormDataSource _vendCommReportTransItemDS = null)

    {
        custInvoiceJourDS         = _custInvoiceJourDS;
        custInvoiceJourRUDS       = _custInvoiceJourRUDS;
        custInvoiceTransDS        = _custInvoiceTransDS;
        custInvoiceTransRUDS      = _custInvoiceTransRUDS;
        custCommReportTransItemDS = _custCommReportTransItemDS;
        vendInvoiceJourDS         = _vendInvoiceJourDS;
        vendInvoiceTransDS        = _vendInvoiceTransDS;
        vendCommReportTransItemDS = _vendCommReportTransItemDS;        
        markupDS                  = _markupDS;
        emplAdvTableDS            = _emplAdvTableDS;
        emplAdvLineDS             = _emplAdvLineDS;
        ledgerJournalTableDS      = _ledgerJournalTableDS;
        ledgerJournalTransDS      = _ledgerJournalTransDS;
        ledgerJournalTransExistDS = _ledgerJournalTransExistDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledButtons</Name>
				<Source><![CDATA[
    void setEnabledButtons()
    {
        postPrintButton.enabled(! isProforma);
        postOnlyButton.enabled(! isProforma);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnableControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set Enable property of controls.
    /// </summary>
    public void setEnableControls()
    {
        useOriginalDocumentAsFactureControl.enabled(!correctControl.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setForm</Name>
				<Source><![CDATA[
    final public void setForm(FormRun _editLinesForm)
    {
        if (_editLinesForm.name() == formStr(FactureEditLines_RU))
        {
            editLinesForm = _editLinesForm;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsProforma</Name>
				<Source><![CDATA[
    void setIsProforma(boolean _value)
    {
        ;
        isProforma = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOffTransRecord</Name>
				<Source><![CDATA[
    final public void setOffTransRecord(OfficialsTrans_RU _offTransRecord)
    {
        offTransRecord = _offTransRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceRecord</Name>
				<Source><![CDATA[
    public void setSourceRecord(Common _sourceRecord)
    {
        sourceRecord = _sourceRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTreeControls</Name>
				<Source><![CDATA[
    final public void setTreeControls(FormTreeControl _custTreeControl,
                                      FormTreeControl _vendTreeControl,
                                      FormTreeControl _emplTreeControl,
                                      FormTreeControl _ledgTreeControl)
    {
        custTreeControl = _custTreeControl;
        vendTreeControl = _vendTreeControl;
        emplTreeControl = _emplTreeControl;
        ledgTreeControl = _ledgTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleContragents</Name>
				<Source><![CDATA[
    abstract public void setVisibleContragents()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    abstract public void setVisibleControls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleTabs</Name>
				<Source><![CDATA[
    abstract public void setVisibleTabs()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCorrectionContragentTypeChanged</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    public void taxCorrectionContragentTypeChanged()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transAmount</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineTaxCorrection_Ru
    protected Amount transAmount(CustVendInvoiceTrans _trans)
    {
        return _trans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transFullyFactured</Name>
				<Source><![CDATA[
    public boolean transFullyFactured(RecId   _transRecId,
                                      boolean _updateMap = true)
    {
        boolean ret   = true;
        RecId   recId = this.decodeTransRecId(_transRecId);

        if (this.facturedTransMap().exists(recId))
        {
            ret = this.facturedTransMap().lookup(recId);
        }
        else
        {
            select firstonly tmpTrans
                where tmpTrans.RecId == recId;

            ret = tmpTrans.custVendInvoiceTransInterface().fullyFactured_RU();

            if (_updateMap)
            {
                this.facturedTransMap().insert(recId, ret);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transHeaderName</Name>
				<Source><![CDATA[
    abstract protected str transHeaderName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transName</Name>
				<Source><![CDATA[
    abstract protected str transName(CustVendInvoiceTrans    _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeControl</Name>
				<Source><![CDATA[
    abstract protected FormTreeControl treeControl()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackMapInvoiceTrans</Name>
				<Source><![CDATA[
    private void unpackMapInvoiceTrans()
    {
        mapInvoiceTrans = Map::create(factureCreate.packMapInvoiceTrans());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllMarkups</Name>
				<Source><![CDATA[
    protected void updateAllMarkups(TableId _tableId,
                                    RecId   _recId,
                                    boolean _insert)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkup</Name>
				<Source><![CDATA[
    public void updateMarkup(MarkupTrans _trans,
                             Amount      _amount)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTrans</Name>
				<Source><![CDATA[
    public void updateTrans(Common _trans,
                            Qty    _qty)
    {
        CustVendInvoiceTrans invoiceTrans;
        boolean refCommTransMapped = mappingExists(tablenum(CustVendInvoiceTrans),
                                               _trans.TableId,
                                               fieldnum(CustVendInvoiceTrans, RefCommReportTrans_RU));
        Common trans = this.decodeTable(_trans);

        this.insertTrans(trans, NoYes::Yes);
        if (factureCreate)
        {
            if (refCommTransMapped)
            {
                invoiceTrans = trans;
                if (isInsertAllJours)
                {
                    this.updateTransMap([ invoiceTrans.TableId, invoiceTrans.RecId, invoiceTrans.RefCommReportTrans_RU ], _qty);
                }
                else
                {
                    factureCreate.updateTrans([ invoiceTrans.TableId, invoiceTrans.RecId, invoiceTrans.RefCommReportTrans_RU ], _qty);
                }
            }
            else
            {
                if (isInsertAllJours)
                {
                    this.updateTransMap([ trans.TableId, trans.RecId, 0 ], _qty);
                }
                else
                {
                    factureCreate.updateTrans([ trans.TableId, trans.RecId, 0 ], _qty);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates transaction's data.
    /// </summary>
    /// <param name="_key">
    /// The key of the map.
    /// </param>
    /// <param name="_qty">
    /// Data of the map.
    /// </param>
    /// <returns>
    /// true.
    /// </returns>
    protected boolean updateTransMap(container _key,
                               Qty     _qty)
    {
        mapInvoiceTrans.remove(_key);
        return _qty ? mapInvoiceTrans.insert(_key, _qty) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCommReportedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies whether report for principal line quantity should be used in facture line.
    /// </summary>
    /// <returns>
    /// True if report for principal line quantity should be used in facture line; otherwise false.
    /// </returns>
    public boolean useCommReportedQty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useOriginalDocumentAsFactureCtrlVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies whether the form control UseOriginalDocumentAsFactureControl should be visible on form.
    /// </summary>
    /// <returns>
    /// true if the form control UseOriginalDocumentAsFactureControl should be visible on form; otherwise false.
    /// </returns>
    public boolean useOriginalDocumentAsFactureCtrlVisible()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFactureExternalId</Name>
				<Source><![CDATA[
    // overloaded in FactureEditLinesEngineCust_Ru
    public boolean validateFactureExternalId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueBeforeFactureDate</Name>
				<Source><![CDATA[
    protected str valueBeforeFactureDate()
    {
        const str twoDots = '..';
        const str parm = '\%1';
        
        return twoDots + strFmt(parm, factureDateControl.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatOnPaymentChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Processes changing VAT on payment parameter
    /// </summary>
    public void vatOnPaymentChanged()
    {
        this.initPurchBookVATProcessParametersRecId();
        this.initProcessVAT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FactureEditLinesEngine_RU construct(FactureJourCreate_RU _factureCreate,
                                                      FactureModule_RU     _module           = _factureCreate.module(),
                                                      NoYes                _exportProcessing = NoYes::No)
    {
        FactureEditLinesEngine_RU   ret;

        switch (_module)
        {
            case FactureModule_RU::Cust :
                if (_exportProcessing == NoYes::No)
                {
                    ret = new FactureEditLinesEngineCust_RU(_factureCreate);
                }
                else
                {
                    ret = new FactureEditLinesEngineExportFacture_RU(_factureCreate);
                }
                break;
            case FactureModule_RU::Vend :
                ret = new FactureEditLinesEngineVend_RU(_factureCreate);
                break;
            case FactureModule_RU::Empl :
                ret = new FactureEditLinesEngineEmpl_RU(_factureCreate);
                break;
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                ret = new FactureEditLinesEngineTaxCorrection_RU(_factureCreate);
                break;

            default                     :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsResearch</Name>
				<Source><![CDATA[
    protected static void dsResearch(FormDataSource _ds)
    {
        RecId save = _ds.cursor().RecId;

        _ds.research();

        while (_ds.cursor().RecId != save)
        {
            if (! _ds.next())
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>