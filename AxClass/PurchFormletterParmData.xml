<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormletterParmData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchFormletterParmData extends formletterParmData
{
    #ISOCountryRegionCodesVendInv_W

    PurchParameters purchParameters; // Cached parameters
    PurchQuantity   purchQuantity;
    PurchParmUpdate purchParmUpdate;
    PurchTable      purchTable;

    boolean         creditRemaining;
    RecordInsertList recordInsertParmLine_Asset;
    DocumentOrigin  documentOrigin;
    Num             parmTableNum;
    Num             number;
    PurchSummary    purchSummary;

    // Used for createParmUpdate
    PurchUpdate     initialSpecQty;
    boolean         initialSpecQtyIsSet;
    // Used by reArrangeLines
    boolean         hold;
    boolean         notApproved;
    // Used by reArrange
    boolean         clearTotals;
    List            markupHeaderRecIds;
    // Parm which controls processing of additional lines for invoices
    boolean         processAdditional;
    // Parameter used to indicate if interCompanyMarkupAllocation should be performed for invoices.
    boolean         doInterCompanyMarkupAllocation;

    // Indicates that datasource's records ranges should not be added to chooseLines query
    boolean                 skipAddingRecordsRange;
    NoYes                   mcrProcessDropShipment;

    container       packedNewPurchLineRecIdSet;
    container       packedDeletePurchTablePurchIdSet;
    container       packedDeletePurchLineRecIdSet;

    VendDocumentTableMap  externalDefaultedParmTable;
    boolean         skipParmTableDefaulting;
    RefRecId        lastParmTableRecId;

    boolean initQtyFromPO;

    // <GEERU>
    PurchParmTable          purchParmTableFilter;
    NoYes                   storno;
    NoYes                   fixedExchRate;
    ExchRate                exchRate;
    PostingProfile          postingProfile;
    InventProfileType_RU    inventProfileType;
    boolean                 usePostingProfileFromContract;
    // </GEERU>

     // <GIN>
    CustomsImportOrderType_IN       customsImportOrderType;
    RefRecId                        customsImporterInvoiceNumber;
    RefRecId                        customsBillOfEntryNumber;
    AmountCur                       withholdTaxAmount;
    TaxWithholdCodeType_IN          taxWithholdType;
    NoYesId                         taxesMarked;
    Map                             parmLineBOEMap;
    // </GIN>

    // <GEEPL>
    InventLocationId                inventLocationId;
    PlSADNumberCode                 sadNumberCode;
    // </GEEPL>

    private PurchFormLetterInstrumentationLogger instrumentationLogger;

    #ISOcountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPurchStatusRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a query range with the value that is specified in the <c>purchStatusRange</c> method for the
    /// purchase status field of the <c>PurchTable</c> table.
    /// </summary>
    protected void addPurchStatusRange()
    {
        chooseLines.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, PurchStatus)).value(this.purchStatusRange());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToKey_W</Name>
				<Source><![CDATA[
    protected str addToKey_W(str _key, VendDocumentSubTableMap _parmSubTable)
    {
        PurchParmTable  purchParmTable;

        select firstonly DeliveryName, DeliveryPostalAddress from purchParmTable
            where   purchParmTable.ParmId     == _parmSubTable.ParmId
            &&      purchParmTable.TableRefId == _parmSubTable.TableRefId;

        _key = this.addToKey(_key, purchParmTable.DeliveryName);
        _key = this.addToKey(_key, int642str(purchParmTable.DeliveryPostalAddress));

        if (taxesMarked)
        {
            _key = this.addToKey(_key, int642str(purchParmTable.VendDocumentTableMap::parmTaxInformation_IN()));
        }
        return _key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToOrigOrderIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds reference to set of original order ID.
    /// </summary>
    /// <param name="_vendDocumentTableMap">
    /// VendDocumentTableMap record to be inserted.
    /// </param>
    /// <param name="_vendDocumentSubTableMap">
    /// VendDocumentSubTableMap record to be inserted.
    /// </param>
    /// <param name="_purchTable">
    /// Original order record.
    /// </param>
    public void addToOrigOrderIdSet(VendDocumentTableMap _vendDocumentTableMap, VendDocumentSubTableMap _vendDocumentSubTableMap, PurchTable _purchTable)
    {
        str parmTableKey;

        if (!this.skipOrderIdInReSelect(_purchTable, _vendDocumentTableMap, _vendDocumentSubTableMap))
        {
            parmTableKey = this.parmTableMapKey(_vendDocumentSubTableMap);
            this.insertParmTableMap(_vendDocumentTableMap, parmTableKey);
            origOrderIdSet.add(_vendDocumentSubTableMap.OrigPurchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowReArrange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a purchase posting can be rearranged.
    /// </summary>
    /// <param name="_parmTable">
    ///    The document to test to determine whether a saved pending invoice may be rearranged.
    /// </param>
    /// <returns>
    ///    true if the provided saved pending invoice can be rearranged; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A saved pending invoice which was previously rearranged should not be rearranged again when the
    ///    document is not being rearranged.This method is called after the query ranges are already
    ///    known.This method should be overridden by derived classes.
    /// </remarks>
    protected boolean allowReArrange(VendDocumentTableMap _parmTable)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowReArrangeEnd</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean allowReArrangeEnd()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAutomaticTotalDiscount</Name>
				<Source><![CDATA[
    protected void calcAutomaticTotalDiscount(PurchTable _purchTable)
    {
        if (PurchParameters::find().AutomaticTotalDiscount)
        {
            _purchTable = PurchTable::findRecId(_purchTable.RecId, true);
            _purchTable.updateFinalDisc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGetPurchIdFromParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if purchId can be taken from parm table.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    protected boolean canGetPurchIdFromParmTable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkifPackingSlipExistForBOE_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if packing slip exist for BOE.
    /// </summary>
    /// <param name="_customsVendBOETrans">
    /// The customs vend BOE transaction.
    /// </param>
    /// <returns>
    /// Returns true if the packing slip exist for BOE.
    /// </returns>
    protected boolean checkifPackingSlipExistForBOE_IN(RefRecId _customsVendBOETrans)
    {
        VendPackingSlipTrans vendPackingSlipTrans;
        CustomsVendPackingSlipBOETransLink_IN customsVendPackingSlipBOETransLink;

        select RecId from vendPackingSlipTrans
                exists join CustomsVendBOETrans_IN, VendPackingSlipTrans from customsVendPackingSlipBOETransLink
                    where vendPackingSlipTrans.RecId == customsVendPackingSlipBOETransLink.VendPackingSlipTrans
                       && customsVendPackingSlipBOETransLink.CustomsVendBOETrans_IN == _customsVendBOETrans
                       && vendPackingSlipTrans.FullyMatched == NoYes::No;

        return vendPackingSlipTrans.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfPurchOrderExist</Name>
				<Source><![CDATA[
    protected boolean  checkIfPurchOrderExist(PurchTable   _purchTable)
    {
        if (!_purchTable)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data.
    /// </summary>
    /// <param name="_customsImportOrderType">
    /// The customs import order type.
    /// </param>
    /// <param name="_append">
    /// If 'True', the data has appends.
    /// </param>
    public void createData_IN(CustomsImportOrderType_IN _customsImportOrderType,
                              boolean                   _append = false)
    {
        #OCCRetryCount

        Common localParmUpdate;
        QueryBuildDataSource qbds;

        try
        {
            if (!this.parmParmUpdate().RecId)
            {
                localParmUpdate = this.createParmUpdate();
                this.insertParmUpdate(localParmUpdate);
            }

            if (!onlyCreateParmUpdate)
            {
                if (skipInitChooseLinesQuery)
                {
                    this.selectChooseLines(_append);
                }
                else
                {
                    this.updateQueryBuild_IN(_customsImportOrderType);
                    this.parmCustomsImportOrderType_IN(_customsImportOrderType);

                    if (!_append)
                    {
                        this.deleteParmTables();
                    }

                    if (!this.lateSelection() || this.parmExecuteLateSelection())
                    {
                        this.selectChooseLines(_append);
                    }

                    qbds = chooseLines.query().dataSourceTable(this.sourceTableTableId());
                    if (qbds)
                    {
                        qbds.enabled(true);
                    }
                }
            }
            this.fillOutputContract();
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw Exception::TransientSqlConnectionError;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch
        {
            this.catchAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromHistoryParmLine_Asset</Name>
				<Source><![CDATA[
    protected void createFromHistoryParmLine_Asset(RefRecId _parmLineRecId, RefRecId _newParmLineRecId)
    {
        // Should be overriden if there is anything to do for any specific document type.
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromHistoryParmLines</Name>
				<Source><![CDATA[
    protected void createFromHistoryParmLines(Common _parmTable)
    {
        VendDocumentLineMap     parmLine = this.initParmLine();
        VendDocumentLineMap     parmLineNew = this.initParmLine();
        VendDocumentTableMap    parmTable = _parmTable;

        Debug::assert(parmTable.TableId != tableNum(VendDocumentTableMap));

        super(parmTable);

        while select parmLine
            where parmLine.ParmId     == parmTable.ParmId &&
                  parmLine.TableRefId == parmTable.TableRefId
        {
            parmLineNew = parmLine.data();
            parmLineNew.ParmId = this.parmId();
            this.insertParmLine(parmLineNew);
            this.createFromHistoryParmLine_Asset(parmLine.RecId, parmLineNew.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromHistoryParmSubTables</Name>
				<Source><![CDATA[
    protected void createFromHistoryParmSubTables(Common _parmTable)
    {
        VendDocumentSubTableMap parmSubTable = this.initParmSubTable();
        VendDocumentSubTableMap parmSubTableNew = this.initParmSubTable();
        VendDocumentTableMap    parmTable = _parmTable;

        Debug::assert(parmTable.TableId != tableNum(VendDocumentTableMap));
        super(parmTable);

        while select parmSubTable
            where parmSubTable.ParmId     == parmTable.ParmId &&
                  parmSubTable.TableRefId == parmTable.TableRefId
        {
            parmSubTableNew = parmSubTable.data();
            parmSubTableNew.ParmId = this.parmId();
            this.insertParmSubTable(parmSubTableNew);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromHistoryParmTable</Name>
				<Source><![CDATA[
    protected void createFromHistoryParmTable(Common _parmTable)
    {
        VendDocumentTableMap    parmTableNew = this.initParmTable();
        VendDocumentTableMap    parmTable = _parmTable;

        Debug::assert(parmTable.TableId != tableNum(VendDocumentTableMap));
        super(parmTable);

        parmTableNew = parmTable.data();
        parmTableNew.ParmId = this.parmId();
        this.insertParmTable(parmTableNew);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a purchase parameter line and purchase parameter asset line for the given purchase line.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase line to reference when you create the parameter lines.
    /// </param>
    /// <param name="_tableRef">
    /// A <c>TradeLineRefId</c> value that is used on the purchase parameter line.
    /// </param>
    /// <returns>
    /// true if the parameter lines are created successfully; otherwise, false.
    /// </returns>
    protected boolean createParmLine(Common         _purchLine,
                                     TradeLineRefId _tableRef)
    {
        #ISOcountryRegionCodes
        boolean                             lineCreated         = false;
        VendDocumentLineAssetMap            localParmLine_Asset = this.initParmLine_Asset();
        PurchLine                           purchLine           = _purchLine as PurchLine;
        container                           quantities          = this.getLineQuantities(_purchLine);
        container                           cwQuantities;
        PdsCWInventQty                      cwQuantityNew;
        PdsCWInventQty                      cwQuantityPrevious;
        PdsVendBatchInfo                    pdsVendBatchInfo    = null;
        SalesParmLine                       salesParmLine;
        PurchParmLine                       localPurchParmLine;
        boolean                             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        RealBase                            factor;

        // <GEERU>
        PurchLine_W                 purchLine_W;
        // </GEERU>
        boolean isCwItem = PdsGlobal::pdsIsCWItem(purchLine.ItemId);
        if (isCwItem)
        {
            cwQuantities       = this.pdsCWGetLineQuantities(_purchLine);
            cwQuantityPrevious = conPeek(cwQuantities, #posPreviousCWQty);
            cwQuantityNew      = conPeek(cwQuantities, #posNewCWQty);
        }

        if (TaxParameters::isCustomsEnable_IN()
            && purchParmUpdate.CustomsImportOrderType_IN == CustomsImportOrderType_IN::ImportOrder
            && purchLine.purchTable().purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
        {
            // If user is posting a packing slip and the Quantities being selected as Bill Of Entry
            if ((purchParmUpdate.DocumentStatus == DocumentStatus::PackingSlip
            && purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN)
            ||
            // If user is posting an Invoice and the Quantities being selected either Bill Of Entry or Packing slip
            (purchParmUpdate.DocumentStatus == DocumentStatus::Invoice
            && (purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN
            || purchParmUpdate.SpecQty == PurchUpdate::PackingSlip)))

            {
                lineCreated = this.createParmLinesForBOE_IN(_purchLine, _tableRef);

                if (lineCreated)
                {
                    return lineCreated;
                }
            }
            else if (purchParmUpdate.SpecQty == PurchUpdate::All
                && versioningStrategy.parmVersioningUpdateType() != VersioningUpdateType::Cancel)
            {
                return checkFailed(strFmt("@GLS221540", purchParmUpdate.DocumentStatus));
            }
        }

        versioningStrategy.initSourceLine(_purchLine);

        VendDocumentLineMap localParmLine = this.initializeParmLine(_tableRef);

        this.setPreviousVersionQuantityFields(
            localParmLine,
            conPeek(quantities, #posPreviousQty),
            conPeek(quantities, #posPreviousInventQty),
            cwQuantityPrevious);

        if (interCompanyParmId
        && !this.parmInterCompanyParmSelectFromJournal())
        {
            if (isCwItem)
            {
                cwQuantityNew = this.pdsCWInterCompanyParmLineQty(purchLine);
            }

            salesParmLine = this.interCompanyParmLine(purchLine);
            localParmLine.Closed = salesParmLine.Closed;

            localParmLine.defaultRow(
                purchLine,
                purchParmUpdate,
                this.interCompanyParmLineQty(purchLine, false),
                this.interCompanyParmLineQty(purchLine, true),
                cwQuantityNew);

            this.setInterCompanyInventDim(localParmLine, salesParmLine);

            if (localParmLine.Closed)
            {
                localParmLine.RemainAfter = 0;
                localParmLine.setRemainAfterInvent();
                localParmLine.PdsCWRemainAfter = 0;
            }
            purchLine.PurchReceivedNow = localParmLine.ReceiveNow;
            purchLine.setInventReceivedNow();
            purchLine.PdsCWInventReceivedNow = localParmLine.PdsCWReceiveNow;
        }
        else
        {
            if (initQtyFromPO &&
                (purchParmUpdate.SpecQty == PurchUpdate::All || purchParmUpdate.SpecQty == PurchUpdate::ReceiveNow))
            {
                localParmLine.defaultRow(
                    purchLine,purchParmUpdate,
                    conPeek(quantities, #posNewQty),
                    conPeek(quantities, #posNewInventQty),
                    cwQuantityNew,
                    null,
                    PurchUpdate::All);
            }
            else
            {
                localParmLine.defaultRow(
                    purchLine,purchParmUpdate,
                    conPeek(quantities, #posNewQty),
                    conPeek(quantities, #posNewInventQty),
                    cwQuantityNew);
            }
        }

        this.setParmLine(purchLine, localParmLine);

        if (localParmLine.TableId == tableNum(PurchParmLine))
        {
            localPurchParmLine = localParmLine;

            if (versioningStrategy.parmVersioningUpdateType() == VersioningUpdateType::Correction ||
                versioningStrategy.parmVersioningUpdateType() == VersioningUpdateType::Cancel)
            {
                localPurchParmLine.InventDimId = this.getCorrectionInventoryDimensions(purchLine);
            }

            if (#PdsVendBatchEnabled)
            {
                if (localPurchParmLine.pdsCanSetVendBatchInfo())
                {
                    pdsVendBatchInfo = purchLine.pdsVendBatchInfo();
                }

                localPurchParmLine.pdsInitFromVendBatchInfo(pdsVendBatchInfo);
            }
        }

        if (countryRegion_RU)
        {
            purchLine_W = purchLine.purchLine_W();
            localParmLine.VendDocumentLineMap::parmDeviationQty_RU(this.qtyDeviation_RU(_purchLine));
            localParmLine.VendDocumentLineMap::parmPostingProfile_RU(purchLine_W.PostingProfile_RU ? purchLine_W.PostingProfile_RU : purchLine.purchTable().PostingProfile);
            localParmLine.VendDocumentLineMap::parmInventProfileType_RU(purchLine.inventDim().InventProfileId_RU ?
                                                 purchLine.inventDim().inventProfile_RU().InventProfileType :
                                                 InventProfileType_RU::General);
        }

        if (versioningStrategy.shouldCreateParmLine(localParmLine))
        {
            this.setAssessableValueTransactionCurrency_IN(localParmLine, purchLine, localPurchParmLine);
            this.createParmLineRecord(localParmLine, purchLine, localParmLine_Asset, _tableRef, quantities, cwQuantities);
            lineCreated = true;
        }

        return lineCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a purchase parameter line record.
    /// </summary>
    /// <param name="_tableRef">
    /// A line reference value that is used on the purchase parameter line record.
    /// </param>
    /// <returns>
    /// The initialized purchase parameter line record.
    /// </returns>
    protected VendDocumentLineMap initializeParmLine(TradeLineRefId _tableRef)
    {
        VendDocumentLineMap localParmLine = this.initParmLine();

        localParmLine.clear();
        localParmLine.Ordering = this.parmDocumentStatus();
        localParmLine.TableRefId = _tableRef;
        localParmLine.DocumentOrigin = this.parmDocumentOrigin();
        localParmLine.ParmId = this.parmId();

        return localParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectionInventoryDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default inventory dimensions for the current <c>PurchParmLine</c> record in correction scenarios.
    /// </summary>
    /// <param name = "_purchLine">The current purchase order line record.</param>
    /// <returns>An inventory dimension ID.</returns>
    internal InventDimId getCorrectionInventoryDimensions(PurchLine _purchLine)
    {
        return _purchLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a purchase parameter line.
    /// </summary>
    /// <param name = "_purchParmLine">
    /// The <c>VendDocumentLineMap</c> record to be created.
    /// </param>
    /// <param name = "_purchLine">
    /// The <c>PurchLine</c> record to initialize the <c>VendDocumentLineAssetMap</c> record from.
    /// </param>
    /// <param name = "_purchParmLine_Asset">
    /// The parameter line which should hold the fixed asset data.
    /// </param>
    /// <param name = "_tableRef">
    /// A <c>TradeLineRefId</c> value that is used on the purchase parameter line.
    /// </param>
    /// <param name = "_quantities">
    /// A container with the following 4 elements:
    /// new document unit of measure quantity, new inventory unit quantity,
    /// previous document unit quantity and previous inventory unit quantity
    /// </param>
    /// <param name = "_cwQuantities">
    /// A container with the following 2 elements:
    /// new catch weight unit of measure quantity and previous catch weight unit quantity.
    /// </param>
    protected void createParmLineRecord(VendDocumentLineMap _purchParmLine,
                                        PurchLine _purchLine,
                                        VendDocumentLineAssetMap _purchParmLine_Asset,
                                        TradeLineRefId _tableRef,
                                        container _quantities,
                                        container _cwQuantities)
    {
        if(this.VendDocumentLineMap(_purchParmLine))
        {
            this.insertParmLine(_purchParmLine);
        }

        this.insertVendInvoiceInfoLineTax_IN(_purchParmLine, _purchLine);

        this.createFiscalDocumentTextUpdate_BR(_purchParmLine, _purchLine);

        if(this.VendDocumentLineMap(_purchParmLine))
        {
            this.createParmLineAsset(_purchParmLine_Asset, _purchLine, _purchParmLine);
        }

        this.allowCreateParmTable(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssessableValueTransactionCurrency_IN</Name>
				<Source><![CDATA[
    private void setAssessableValueTransactionCurrency_IN(VendDocumentLineMap _purchParmLine, PurchLine _purchLine, PurchParmLine _localPurchParmLine)
    {
        if (TaxParameters::checkTaxParameters_IN() && _purchLine.PurchQty != 0)
        {
            PurchParmLine_IN purchParmLineIN;
            if (_purchParmLine.TableId == tableNum(PurchParmLine))
            {
                purchParmLineIN.AssessableValueTransactionCurrency = _localPurchParmLine.getMiscChargesAmount_IN(_purchLine.TableId, _purchLine.RecId, _purchParmLine.Ordering);
            }
            else if (_purchParmLine.TableId == tableNum(VendInvoiceInfoLine))
            {
                VendInvoiceInfoLine vendInvoiceInfoLine = _purchParmLine;
                purchParmLineIN.AssessableValueTransactionCurrency = vendInvoiceInfoLine.getMiscChargesAmount_IN(_purchLine.TableId, _purchLine.RecId, _purchParmLine.Ordering);
            }
            _purchParmLine.VendDocumentLineMap::parmAssessableValue_IN(purchParmLineIN.AssessableValueTransactionCurrency);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendInvoiceInfoLineTax_IN</Name>
				<Source><![CDATA[
    private void insertVendInvoiceInfoLineTax_IN(VendDocumentLineMap _purchParmLine, PurchLine _purchLine)
    {
        //Below lines of code is to insert the India direct taxes(TDS/TCS) from Purchline table in to vendInvoiceInfoLineTax_IN table,which is
        // a child table of VendInvoiceInfoLine to hold, india taxes field's data.
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                && _purchLine
                && _purchParmLine
                && _purchParmLine.TableId == tableNum(VendInvoiceInfoLine))
        {
            VendInvoiceInfoLineTaxExtension_IN insertVendInvoiceInfoLineTax;
            insertVendInvoiceInfoLineTax.initFromPurchLine(_purchLine);
            insertVendInvoiceInfoLineTax.VendInvoiceInfoLine = _purchParmLine.RecId;
            insertVendInvoiceInfoLineTax.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalDocumentTextUpdate_BR</Name>
				<Source><![CDATA[
    private void createFiscalDocumentTextUpdate_BR(VendDocumentLineMap _purchParmLine, PurchLine _purchLine)
    {
        if (BrazilParameters::isEnabled()
            && _purchParmLine.TableId == tableNum(VendInvoiceInfoLine))
        {
            FiscalDocumentTextUpdate_BR::newFromRecord(_purchParmLine).copy(_purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the parameter line which holds the fixed asset data.
    /// </summary>
    /// <param name="_purchParmLine_Asset">
    /// The parameter line which should hold the fixed asset data.
    /// </param>
    /// <param name="_purchLine">
    /// The purchase line to reference when creating the parameter lines
    /// </param>
    /// <param name="_purchParmLine">
    /// The parameter line for the current purchase line.
    /// </param>
    protected void createParmLineAsset(
        VendDocumentLineAssetMap    _purchParmLine_Asset,
        Common                      _purchLine,
        VendDocumentLineMap         _purchParmLine)
    {
        _purchParmLine_Asset.clear();
        _purchParmLine_Asset.initFromPurchLine(_purchLine);
        _purchParmLine_Asset.VendDocumentLineAssetMap::initFromLine(_purchParmLine);

        this.insertParmLine_Asset(_purchParmLine_Asset);
        // <GJP>
        if (AssetDocumentUtility_JP::isAssetDocumentEnabled())
        {
            AssetDocumentReductionEntryInvoiceLnk_JP::copyFromPurchExtToVendDocumentLineLnk(
                _purchLine,
                _purchParmLine_Asset);
        }
        // </GJP>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLinesForBOE_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates parameter lines for BOE.
    /// </summary>
    /// <param name="_purchLine">
    /// The purch line information.
    /// </param>
    /// <param name="_tableRef">
    /// The table reference.
    /// </param>
    /// <returns>
    /// Returns true if new instance have been created.
    /// </returns>
    protected boolean createParmLinesForBOE_IN(PurchLine _purchLine,
                                               TradeLineRefId _tableRef)
    {
        boolean                     lineCreated         = false;
        VendDocumentLineMap         localParmLine       = this.initParmLine();
        VendDocumentLineAssetMap    localParmLine_Asset = this.initParmLine_Asset();
        PurchLine                   purchLine           = _purchLine as PurchLine;
        container                   quantities          = this.getLineQuantities(_purchLine);
        container                   cwQuantities;
        SalesParmLine               salesParmLine;
        RealBase                    factor;
        AmountMST                   perUnitAssessableValue;
        PurchParmLine               purchParmLine;
        PurchParmLine_IN            purchParmLineIN;
        VendInvoiceInfoLineTaxExtension_IN   insertVendInvoiceInfoLineTax;

        CustomsVendBOETrans_IN      customsVendBOETransCopy;
        PurchQty                    purchQtyCopy, purchFinQtyCopy;
        InventQty                   inventQtyCopy, invenFinQtyCopy;
        CustomsQty_IN               customsQtyforPackingSlip;

        #ISOcountryRegionCodes
        parmLineBOEMap = new Map(Types::String, Types::Container);

        if (PdsGlobal::pdsIsCWItem(_purchLine.ItemId))
        {
            cwQuantities = this.pdsCWGetLineQuantities(_purchLine);
        }

        if (purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN
            && purchParmUpdate.DocumentStatus == DocumentStatus::PackingSlip
            && _purchLine.RemainPurchPhysical
            && _purchLine.RemainInventPhysical)
        {
            purchQtyCopy    = _purchLine.RemainPurchPhysical;
            inventQtyCopy   = _purchLine.RemainInventPhysical;
        }

        if ((purchParmUpdate.SpecQty == PurchUpdate::PackingSlip
            || purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN)
            && purchParmUpdate.DocumentStatus == DocumentStatus::Invoice
            && _purchLine.RemainPurchFinancial
            && _purchLine.RemainInventFinancial)
        {
            purchFinQtyCopy     = _purchLine.RemainPurchFinancial;
            invenFinQtyCopy     = _purchLine.RemainInventFinancial;
            purchQtyCopy        = _purchLine.RemainPurchPhysical;
            inventQtyCopy       = _purchLine.RemainInventPhysical;
        }

        while select RecId, CustomsBillOfEntryNumberTable, BillOfEntryQty, AssessableValue, AssessableValueAccountingCurrency from customsVendBOETransCopy
            where customsVendBOETransCopy.PurchLineRecId    == _purchLine.RecId
                && customsVendBOETransCopy.RemainingQty     != 0
                && customsVendBOETransCopy.Status           != CustomsVendBOEStatus_IN::Canceled
        {
            if (purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN
                && purchParmUpdate.DocumentStatus == DocumentStatus::PackingSlip)
            {
                if (versioningStrategy.parmVersioningUpdateType() == VersioningUpdateType::Correction ||
                    versioningStrategy.parmVersioningUpdateType() == VersioningUpdateType::Cancel)
                {
                    VendPackingSlipTrans packingSlipTransForBOE_IN = this.findPackingSlipForBOECorr_IN(customsVendBOETransCopy.RecId, _purchLine);
                    if (!packingSlipTransForBOE_IN
                        || (PurchPackingSlipCorrectionConsiderMultipleBOE_INFlight::instance().isEnabled()
                            && !packingSlipTransForBOE_IN.Qty))
                    {
                        continue;
                    }
                }
                else
                {
                    customsQtyforPackingSlip = CustomsVendBOETrans_IN::getRemainingQuantityForPackingSlipUpdate(_purchLine.PurchId, _purchLine.InventTransId, _purchLine.RemainPurchPhysical, customsVendBOETransCopy.RecId);

                    if (!customsQtyforPackingSlip)
                    {
                        continue;
                    }
                }
            }

            if (purchParmUpdate.SpecQty == PurchUpdate::PackingSlip
                && purchParmUpdate.DocumentStatus == DocumentStatus::Invoice)
            {
                if (!this.checkifPackingSlipExistForBOE_IN(customsVendBOETransCopy.RecId))
                {
                    continue;
                }
            }

            this.setNewPostingPurchAndInventQty_IN(customsVendBOETransCopy.RecId);
            quantities  = this.getLineQuantities(_purchLine);

            if (purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN
                && purchParmUpdate.DocumentStatus == DocumentStatus::PackingSlip
                && localParmLine.RemainAfter
                && localParmLine.RemainAfterInvent)
            {
                _purchLine.RemainPurchPhysical = localParmLine.RemainAfter;
                _purchLine.RemainInventPhysical = localParmLine.RemainAfterInvent;
            }

            if ((purchParmUpdate.SpecQty == PurchUpdate::PackingSlip
                || purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN)
                && purchParmUpdate.DocumentStatus == DocumentStatus::Invoice
                && localParmLine.RemainAfter
                && localParmLine.RemainAfterInvent)
            {
                if (purchParmUpdate.SpecQty == PurchUpdate::PackingSlip)
                {
                    _purchLine.RemainPurchFinancial = 0;
                    _purchLine.RemainInventFinancial = 0;
                }
                else if (purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN)
                {
                    _purchLine.RemainPurchFinancial = max(_purchLine.RemainPurchFinancial - localParmLine.ReceiveNow, 0);
                    _purchLine.RemainInventFinancial = max(_purchLine.RemainInventFinancial - localParmLine.ReceiveNow, 0);
                }
                _purchLine.RemainPurchPhysical = localParmLine.RemainAfter;
                _purchLine.RemainInventPhysical = localParmLine.RemainAfterInvent;
            }

            versioningStrategy.initSourceLine(_purchLine);

            localParmLine.clear();

            // Storing the Customs Invoice Registration details & Bill of entry details
            localParmLine.VendDocumentLineMap::parmCustomsBillOfEntryNumberTable_IN(customsVendBOETransCopy.CustomsBillOfEntryNumberTable);

            localParmLine.Ordering = this.parmDocumentStatus();
            localParmLine.TableRefId = _tableRef;
            localParmLine.DocumentOrigin = this.parmDocumentOrigin();
            localParmLine.ParmId = this.parmId();

            this.setPreviousVersionQuantityFields(localParmLine,
                conPeek(quantities, #posPreviousQty),
                conPeek(quantities, #posPreviousInventQty),
                conPeek(cwQuantities, #posPreviousCWQty)
                );

            if (interCompanyParmId
                && !this.parmInterCompanyParmSelectFromJournal())
            {
                salesParmLine = this.interCompanyParmLine(purchLine);
                localParmLine.Closed = salesParmLine.Closed;

                localParmLine.defaultRow(
                    purchLine,
                    purchParmUpdate,
                    this.interCompanyParmLineQty(purchLine, false),
                    this.interCompanyParmLineQty(purchLine, true));

                this.setInterCompanyInventDim(localParmLine, salesParmLine);

                if (localParmLine.Closed)
                {
                    localParmLine.RemainAfter = 0;
                    localParmLine.setRemainAfterInvent();
                }
                purchLine.PurchReceivedNow = localParmLine.ReceiveNow;
                purchLine.setInventReceivedNow();
            }
            else
            {
                localParmLine.defaultRow(purchLine,purchParmUpdate,
                    conPeek(quantities, #posNewQty), conPeek(quantities, #posNewInventQty));
            }

            if (versioningStrategy.shouldCreateParmLine(localParmLine))
            {
                if (TaxParameters::checkTaxParameters_IN() && customsVendBOETransCopy.BillOfEntryQty != 0)
                {
                    factor = customsVendBOETransCopy.AssessableValue/customsVendBOETransCopy.BillOfEntryQty;
                    localParmLine.VendDocumentLineMap::parmAssessableValue_IN(factor * localParmLine.ReceiveNow);
                    perUnitAssessableValue = customsVendBOETransCopy.AssessableValueAccountingCurrency/customsVendBOETransCopy.BillOfEntryQty;
                    localParmLine.VendDocumentLineMap::parmAssessableValueAccountingCurrency(perUnitAssessableValue * localParmLine.ReceiveNow);
                    if (localParmLine.TableId == TableNum(purchParmLine))
                    {
                        purchParmLineIN                 = localParmLine.purchParmLine_IN();
                        purchParmLineIN.SourceTableId   = customsVendBOETransCopy.TableId;
                        purchParmLineIN.SourceRecId     = customsVendBOETransCopy.RecId;
                        purchParmLineIN.CustomsBillOfEntryNumberTable = customsVendBOETransCopy.CustomsBillOfEntryNumberTable;
                        purchParmLineIN.parmAssessableValueAccountingCurrency(perUnitAssessableValue * localParmLine.ReceiveNow);
                        localParmLine.packPurchParmLine_IN(purchParmLineIN);
                    }
                }

                this.insertParmLine(localParmLine);
                if (localParmLine)
                {
                    parmLineBOEMap.insert(this.parmLineBOEMapKey_IN(localParmLine, customsVendBOETransCopy.RecId), [int642str(localParmLine.RecId) + '#' + int642str(customsVendBOETransCopy.RecId)]);
                }

                if (localParmLine.TableId == tableNum(PurchParmLine))
                {
                    purchParmLine = localParmLine;
                    purchParmLineIN = purchParmLine.purchParmLine_IN();
                    if (!purchParmLineIN && !purchParmLineIN.PurchParmLine)
                    {
                        purchParmLine.SysExtensionSerializerMap::postInsert();
                    }
                }
                //Below lines of code is to insert the India direct taxes(TDS/TCS) from Purchline table in to vendInvoiceInfoLineTax_IN table,which is
                // a child table of VendInvoiceInfoLine to hold, india taxes field's data.
                if (purchLine
                    && localParmLine
                    && localParmLine.TableId == tableNum(VendInvoiceInfoLine))
                {
                    insertVendInvoiceInfoLineTax.initFromPurchLine(purchLine);

                    insertVendInvoiceInfoLineTax.VendInvoiceInfoLine = localParmLine.RecId;
                    insertVendInvoiceInfoLineTax.SourceTableId          = customsVendBOETransCopy.TableId;
                    insertVendInvoiceInfoLineTax.SourceRecId            = customsVendBOETransCopy.RecId;
                    insertVendInvoiceInfoLineTax.insert();

                    TransTaxInformationHelper::copyTransTaxInformation(purchLine, localParmLine);
                }
                this.createParmLineAsset(localParmLine_Asset, purchLine, localParmLine);

                lineCreated = true;

                this.allowCreateParmTable(true);
            }
        }

        if (purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN
            && purchParmUpdate.DocumentStatus == DocumentStatus::PackingSlip
            && purchQtyCopy
            && inventQtyCopy)
        {
            _purchLine.RemainPurchPhysical = purchQtyCopy;
            _purchLine.RemainInventPhysical = inventQtyCopy;
        }

        if ((purchParmUpdate.SpecQty == PurchUpdate::PackingSlip
            || purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN)
            && purchParmUpdate.DocumentStatus == DocumentStatus::Invoice
            && purchQtyCopy
            && inventQtyCopy)
        {
            _purchLine.RemainPurchPhysical      = purchQtyCopy;
            _purchLine.RemainInventPhysical     = inventQtyCopy;
            _purchLine.RemainPurchFinancial     = purchFinQtyCopy;
            _purchLine.RemainInventFinancial    = invenFinQtyCopy;
        }

        return lineCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmSubTable</Name>
				<Source><![CDATA[
    protected void createParmSubTable(Common _parmTable)
    {
        VendDocumentSubTableMap parmSubTable = this.initParmSubTable();
        VendDocumentTableMap    parmTable = _parmTable;

        Debug::assert(parmTable.TableId != tableNum(VendDocumentSubTableMap));
        parmSubTable = VendDocumentSubTableMap::createFromHeader(parmTable, false);
        this.insertParmSubTable(parmSubTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmTable</Name>
				<Source><![CDATA[
    protected Common createParmTable(
        Common                _purchTable,
        Common                _purchLine,
        TradeLineRefId        _tableRefId,
        boolean               _skipParmSubTable = false,
        boolean               _hold = false,
        boolean               _notApproved = false,
        Num                   _purchSummaryFormLetterId = '',
        VendPostingProfile    _postingProfile = '',
        InventProfileType_RU  _inventProfileType = InventProfileType_RU::General
       )
    {
        VendDocumentTableMap parmTable = this.initParmTable();
        
        this.initializeParmTable(
            parmTable,
            _purchLine as PurchLine,
            _purchTable as PurchTable,
            _tableRefId,
            _hold,
            _notApproved,
            _purchSummaryFormLetterId,
            _postingProfile,
            _inventProfileType);

        this.insertParmTable(parmTable);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            if (_purchTable is PurchTable)
            {
                PurchFormletterParmData::insertTaxes_IN(parmTable, _purchTable);
            }
        }
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled()
            && parmTable.TableId == tableNum(VendInvoiceInfoTable))
        {
            FiscalDocumentTextUpdate_BR::newFromRecord(parmTable).copy(_purchTable);
        }
        // </GBR>

        if (!_skipParmSubTable)
        {
            this.createParmSubTable(parmTable);
        }

        this.tableRefIdUsed(true);
        this.allowCreateParmTable(this.parmAllowEmptyParmTable());

        return parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParmTable</Name>
				<Source><![CDATA[
    protected VendDocumentTableMap initializeParmTable(
        VendDocumentTableMap  _parmTable,
        PurchLine             _purchLine,
        PurchTable            _purchTable,
        TradeLineRefId        _tableRefId,
        boolean               _hold = false,
        boolean               _notApproved = false,
        Num                   _purchSummaryFormLetterId = '',
        VendPostingProfile    _postingProfile = '',
        InventProfileType_RU  _inventProfileType = InventProfileType_RU::General
       )
    {
        VendDocumentTableMap parmTable = _parmTable;

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && _purchLine.RecId)
        {
            this.updateTableSplit_IN(parmTable, _purchLine);
        }
        // </GIN>

        parmTable.Ordering = this.parmDocumentStatus();

        if (this.parmSkipParmTableDefaulting())
        {
            parmTable.data(this.parmExternalDefaultedParmTable());
            parmTable.TableRefId = _tableRefId;
        }
        else
        {
            this.calcAutomaticTotalDiscount(_purchTable);
            parmTable.ParmId = this.parmId();
            parmTable.BatchAdministration = multiForm;
            //Set the tableRefId before calling defaultParmTable
            parmTable.TableRefId = _tableRefId;
            // <GEEPL>
            this.initParmTableFromLine(parmTable, _purchLine);
            // </GEEPL>
            parmTable.Num = this.getParmTableNum(parmTable.Num, _purchTable, _purchSummaryFormLetterId);

            // In case of automated posting (intercompany purch invoice),
            // TransDate should be carried over from IC Sales invoice
            // and this.transDate will return the carried-over date.
            // Other values set in defaultParmDate depend on this date,
            // therefore setting the TransDate before calling defaultParmTable
            parmTable.TransDate = this.transDate();
            this.defaultParmTable(parmTable, _purchTable);

            if (!parmTable.DocumentDate && _purchTable.InterCompanyDirectDelivery && this.parmInterCompanyParmId())
            {
                parmTable.DocumentDate = parmTable.TransDate;
            }

            parmTable.VendDocumentTableMap::initTotals();

            this.setHoldOrNotApproved(parmTable, _hold, _notApproved);

            this.setParmTableLog(parmTable);
        }

        // <GIN>
        if (taxesMarked)
        {
            parmTable.VendDocumentTableMap::parmTaxInformation_IN(
                TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_purchLine).TaxInformation);
            
            if (_purchLine.RecId)
            {
                this.updateTableSplit_IN(parmTable, _purchLine);
            }

            if (TaxParameters::find().Excise_IN && this.parmLedgerJournalTrans())
            {
                parmTable.VendDocumentTableMap::parmConsignmentNoteNum_IN(
                    TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(
                        this.parmLedgerJournalTrans()).ServiceTaxConsignmentNoteNum);
            }

            boolean customsEnabled = TaxParameters::find().Customs_IN;

            if (customsEnabled
                && this.parmDocumentStatus() == DocumentStatus::BillOfEntry_IN
                && parmTable.TransDate)
            {
                parmTable.TransDate = this.parmTransDate();
            }

            if (customsEnabled
                && parmTable is PurchParmTable
                && this.parmDocumentStatus() == DocumentStatus::BillOfEntry_IN)
            {
                PurchParmTable purchParmTableLocal = parmTable;

                purchParmTableLocal.EXIMPorts_IN = purchTable.EXIMPorts_IN;
            }
        }
        // </GIN>

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            parmTable.PostingProfile = _postingProfile == '' 
                ? this.postingProfile_RU(_purchLine.purchLine_W().PostingProfile_RU, _purchTable.PostingProfile)
                : _postingProfile;

            parmTable.VendDocumentTableMap::parmInventProfileType_RU(_inventProfileType == InventProfileType_RU::General
                ? this.inventProfileType_RU(_purchLine)
                : _inventProfileType);
        }
        // </GEERU>

        return parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Inserts the India direct taxes(TDS/TCS) from the <c>PurchTable</c> table 
    ///   into the <c>VendInvoiceInfoTableTaxExtension_IN</c> table,
    ///   which is a child table of VendInvoiceInfoTable to hold India tax fields' data.
    /// </summary>
    /// <param name = "_parmTable">
    ///   If this argument is an invoice info, tax data will be stored with a reference to this entry.
    /// </param>
    /// <param name = "_purchTable">
    ///   Supplies the actual tax data.
    /// </param>
    private static void insertTaxes_IN(VendDocumentTableMap _parmTable, PurchTable _purchTable)
    {
        if (_purchTable
         && _parmTable
         && _parmTable.TableId == tableNum(VendInvoiceInfoTable))
        {
            VendInvoiceInfoTableTaxExtension_IN vendInvoiceInfoTableTax;
            vendInvoiceInfoTableTax.initFromPurchTable(_purchTable);
            vendInvoiceInfoTableTax.VendInvoiceInfoTable = _parmTable.RecId;
            vendInvoiceInfoTableTax.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    protected Common  createParmUpdate()
    {
        // <GIN>
        VendPackingSlipJour         vendPackingSlipJourLoc;
        // </GIN>
        // <GEERU>
        #ISOCountryRegionCodes
        boolean                     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            taxesMarked = NoYes::Yes;
        }
        // </GIN>

        if (parmUpdateSysLastValue)
        {
            purchParmUpdate.initFromSysLastValue(parmUpdateSysLastValue);

            // <GIN>
            if (taxesMarked
                && purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN
                && purchTable.purchTable_W().CustomsImportOrder_IN == NoYes::No)
            {
                purchParmUpdate.SpecQty = this.defaultSpecQty();
            }
            // </GIN>
        }
        purchParmUpdate.ParmId                   = this.parmId();
        purchParmUpdate.DocumentStatus           = this.parmDocumentStatus();

        if (initialSpecQtyIsSet)
        {
            purchParmUpdate.SpecQty = this.parmSpecQty();
        }
        else if (!parmUpdateSysLastValue.RecId)
        {
            purchParmUpdate.SpecQty = this.defaultSpecQty();
        }

        purchParmUpdate.SumBy                    = this.defaultSumBy();
        purchParmUpdate.SumPurchId               = '';
        purchParmUpdate.SumNum                   = this.sumNum();
        purchParmUpdate.SumIncludePending        = NoYes::Yes;
        purchParmUpdate.CheckCreditMax           = VendParameters::find().CreditMaxCheck;
        purchParmUpdate.Storno                   = this.defaultStorno();
        purchParmUpdate.LateSelection            = false;
        purchParmUpdate.CreditRemaining          = this.parmCreditRemaining();
        purchParmUpdate.Proforma                 = this.parmProforma();

        // <GEERU>
        if (countryRegion_RU)
        {
            purchParmUpdate.SplitPostingProfile_RU    = this.getSplitPostingProfile_RU();
            purchParmUpdate.SplitInventProfileType_RU = this.getSplitInventProfileType_RU();
            purchParmUpdate.StornoPhysical_RU         = InventParameters::find().StornoPhysicalPosting_RU;
        }
        // </GEERU>
        // <GIN>
        //Sets default values when purchEditLines opens.
        if (TaxParameters::isCustomsEnable_IN())
        {
            purchParmUpdate.CustomsBillOfEntry_IN               = NoYes::No;
            purchParmUpdate.CustomsBillOfEntryNumberTable_IN    = 0;
            purchParmUpdate.CustomsImportOrderType_IN           = CustomsImportOrderType_IN::PurchaseOrder;
            if (callerTable is VendPackingSlipJour)
            {
                vendPackingSlipJourLoc = callerTable;
                purchParmUpdate.CustomsImportOrderType_IN           = vendPackingSlipJourLoc.purchTable().purchTable_W().CustomsImportOrder_IN ?
                                                                                        CustomsImportOrderType_IN::ImportOrder :
                                                                                        CustomsImportOrderType_IN::PurchaseOrder;
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && callerTable is VendInvoiceInfoTable)
            {
                VendInvoiceInfoTable vendInvoiceInfoTable = callerTable;
                purchParmUpdate.CustomsImportOrderType_IN = vendInvoiceInfoTable.purchTable().purchTable_W().CustomsImportOrder_IN ?
                    CustomsImportOrderType_IN::ImportOrder : CustomsImportOrderType_IN::PurchaseOrder;

                // Import order only supports SpecQty with option PackingSlip and BillOfEntryQuantity_IN,
                // reset with default value to avoid invalid option.
                if (taxesMarked
                    && purchParmUpdate.CustomsImportOrderType_IN == CustomsImportOrderType_IN::ImportOrder
                    && purchParmUpdate.SpecQty != PurchUpdate::PackingSlip
                    && purchParmUpdate.SpecQty != PurchUpdate::BillOfEntryQuantity_IN
                    && TaxCreateParmUpdateWithDefaultSpecQty_INFlight::instance().isEnabled())
                {
                    purchParmUpdate.SpecQty = this.defaultSpecQty();
                }
            }
        }
        if (TaxParameters::checkTaxParameters_IN()
            || TaxWithholdParameters_IN::checkTaxParameters())
        {
            taxesMarked                                     = NoYes::Yes;
            purchParmUpdate.SplitDeliveryInformation_IN     = PurchParameters::find().splitDeliveryInformation_IN(purchParmUpdate.DocumentStatus);
        }
        // </GIN>

        return purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmTable</Name>
				<Source><![CDATA[
    protected void defaultParmTable(VendDocumentTableMap _parmTable, PurchTable _purchTable)
    {
        Debug::assert(_parmTable.TableId != tableNum(VendDocumentTableMap));
        _parmTable.defaultRow(_purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSpecQty</Name>
				<Source><![CDATA[
    protected PurchUpdate defaultSpecQty()
    {
        return purchParameters.recommendedSpecQty(this.parmDocumentStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultStorno</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default value for the <c>Storno</c> parameter.
    /// </summary>
    /// <returns>
    /// The default value that is retrieved from the configuration.
    /// </returns>
    protected NoYesId defaultStorno()
    {
        return VendParameters::find().CreditError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSumBy</Name>
				<Source><![CDATA[
    protected AccountOrder  defaultSumBy()
    {
        return purchParameters.SummaryUpdateBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmLine</Name>
				<Source><![CDATA[
    protected void deleteParmLine(RefRecId _refRecId)
    {
        VendDocumentLineMap localParmLine = this.initParmLine();

        delete_from localParmLine
            where localParmLine.ParmId == this.parmId() &&
                  localParmLine.PurchLineRecId == _refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmLines</Name>
				<Source><![CDATA[
    protected void deleteParmLines()
    {
        PurchParmLine::deleteParmId(purchParmUpdate.ParmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmSubTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the subheader table records that correspond to the specified purchase order.
    /// </summary>
    /// <param name="_purchId">
    ///    The <c>PurchId</c> value of the header.
    /// </param>
    protected void deleteParmSubTable(PurchId _purchId)
    {
        VendDocumentSubTableMap localParmSubTable = this.initParmSubTable();

        delete_from localParmSubTable
            where localParmSubTable.ParmId == this.parmId() &&
                    localParmSubTable.OrigPurchId == _purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmTables</Name>
				<Source><![CDATA[
    protected void deleteParmTables()
    {
        PurchParmTable::deleteWithoutUpdate(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsParmLines</Name>
				<Source><![CDATA[
    protected boolean existsParmLines()
    {
        return (select firstonly RecId from purchParmLine
                                where purchParmLine.ParmId == this.parmId()).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsParmSubTable</Name>
				<Source><![CDATA[
    protected boolean existsParmSubTable(Common _parmSubTable)
    {
        boolean ret;
        PurchParmSubTable purchParmSubTable;

        ret = super(_parmSubTable);

        if (!ret)
        {
            purchParmSubTable = _parmSubTable as PurchParmSubTable;
            ret = PurchParmSubTable::exist(purchParmSubTable.ParmId,
                                           purchParmSubTable.TableRefId,
                                           purchParmSubTable.OrigPurchId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsParmUpdate</Name>
				<Source><![CDATA[
    protected boolean existsParmUpdate(Common _parmUpdate)
    {
        PurchParmUpdate parmUpdate = _parmUpdate as PurchParmUpdate;

        return PurchParmUpdate::exist(parmUpdate.ParmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmTable_TableRefId</Name>
				<Source><![CDATA[
    protected FieldId fieldIdParmTable_TableRefId()
    {
        return VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, TableRefId), this.parmTableTableId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdSourceTable_OrderId</Name>
				<Source><![CDATA[
    protected FieldId fieldIdSourceTable_OrderId()
    {
        return fieldNum(PurchTable, PurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOrigOrderIsSet</Name>
				<Source><![CDATA[
    protected void fillOrigOrderIsSet()
    {
        PurchParmTable      localParmTable;
        PurchParmSubTable   localParmSubTable;
        PurchTable          localPurchTable;

        // Recreate lines for documents that do not have a status of pending
        while select forceplaceholders localParmTable
            where localParmTable.ParmId == this.parmId()

               // <GEERU>
               && (! this.parmParmTable_W() || localParmTable.PurchId == this.purchID_W())
               // </GEERU>
               join localParmSubTable
                    where localParmSubTable.ParmId     == localParmTable.ParmId
                       && localParmSubTable.TableRefId == localParmTable.TableRefId
                join localPurchTable
                    where localPurchTable.PurchId == localParmSubTable.OrigPurchId
        {
            this.addToOrigOrderIdSet(localParmTable, localParmSubTable, localPurchTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOutputContract</Name>
				<Source><![CDATA[
    protected void fillOutputContract()
    {
        super();
        outputContract.parmLastParmTableRecId(lastParmTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPackingSlipForBOECorr_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the vendpackingslip trans buffer, if exist for the Packingslip
    /// while doing a packingslip correction.
    /// </summary>
    /// <param name="_customsVendBOETrans">
    /// Customs vend BOE trans Record which is used to identify the related packingslip trans
    /// </param>
    /// <param name="_purchLine">
    /// PurchLine Record which is used to identify the related packingslip trans
    /// </param>
    /// <returns>
    /// VendPackingslipTrans record if exists for a packingslip posted with the Quantity Bill of Entry.
    /// </returns>
    protected VendPackingSlipTrans findPackingSlipForBOECorr_IN(RefRecId _customsVendBOETrans,
        Common _purchLine)
    {
        PurchLine                               purchLine;
        VendPackingSlipJour                     vendPackingSlipJour;
        VendPackingSlipTrans                    vendPackingSlipTrans;
        CustomsVendPackingSlipBOETransLink_IN   customsVendPackingSlipBOETransLink;

        if ( this.parmCallerTable().TableId == tableNum(VendPackingSlipJour))
        {
            vendPackingSlipJour = this.parmCallerTable() as VendPackingSlipJour;
        }

        if (_purchLine.TableId == tableNum(PurchLine))
        {
            purchLine = _purchLine as PurchLine;
        }

        if (vendPackingSlipJour && purchLine)
        {
            select firstonly vendPackingSlipTrans
                where vendPackingSlipTrans.VendPackingSlipJour == vendPackingSlipJour.RecId
                    && vendPackingSlipTrans.InventTransId == purchLine.InventTransId
                exists join CustomsVendBOETrans_IN, VendPackingSlipTrans from customsVendPackingSlipBOETransLink
                    where vendPackingSlipTrans.RecId == customsVendPackingSlipBOETransLink.VendPackingSlipTrans
                        && customsVendPackingSlipBOETransLink.CustomsVendBOETrans_IN == _customsVendBOETrans;
        }
        return vendPackingSlipTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves quantities from the purchase order line to be used for the parameter line generation.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase order line to retrieve the quantities for.
    /// </param>
    /// <returns>
    /// A container with the following 4 elements:
    /// new document unit of measure quantity,
    /// new inventory unit quantity,
    /// previous document unit quantity,
    /// previous inventory unit quantity
    /// </returns>
    protected container getLineQuantities(PurchLine _purchLine)
    {
        return versioningStrategy.getLineQuantities(_purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParmTableNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>Num</c> value of the header to use in the <c>createParmTable</c> method.
    /// </summary>
    /// <param name="_num">
    ///    The current header <c>Num</c> value.
    /// </param>
    /// <param name="_purchTable">
    ///    The current <c>PurchTable</c> table.
    /// </param>
    /// <param name="_overrideNum">
    ///    A Boolean value that indicates whether the <c>Num</c> value should be overridden in this method.
    /// </param>
    /// <returns>
    ///    The new header <c>Num</c> value.
    /// </returns>
    protected Num getParmTableNum(Num _num, PurchTable _purchTable, Num _overrideNum)
    {
        if (PurchFormLetterPackingSlipBlankOutProformaTableNumFlight::instance().isEnabled()
            && this.parmProforma() && this.parmDocumentStatus() == DocumentStatus::PackingSlip)
        {
            return '';
        }

        if (this.parmInterCompanyParmId() && this.sumNum())
        {
            _num = this.sumNum();
        }

        if (!_num)
        {
            _num = this.parmParmTableNum();
        }

        if (_overrideNum)
        {
            _num = _overrideNum;
        }

        return _num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTableFromSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PurchTable</c> record of the <c>PurchLine</c> record passed in.
    /// </summary>
    /// <param name="_sourceLine">
    ///    A <c>PurchLine</c> record.
    /// </param>
    /// <returns>
    ///    A <c>PurchTable</c> record.
    /// </returns>
    protected Common getSourceTableFromSourceLine(Common _sourceLine)
    {
        PurchLine localPurchLine = _sourceLine as PurchLine;
        return localPurchLine.purchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWithholdingTaxAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets withholding tax amount.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vend account.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountCur</c> class.
    /// </returns>
    public AmountCur getWithholdingTaxAmount_IN(CustVendAC      _vendAccount,
                                                Voucher         _voucher,
                                                TransDate       _transDate)
    {
        TaxWithholdTrans_IN     taxWithholdTrans;

        withholdTaxAmount = 0;
        select sum(TaxWithholdAmountCur), TaxType from taxWithholdTrans
            group by TaxType
            where taxWithholdTrans.VendAccount  == _vendAccount
               && taxWithholdTrans.Voucher      == _voucher
               && taxWithholdTrans.TransDate    == _transDate;
        if (taxWithholdTrans.TaxWithholdAmountCur)
        {
            if (taxWithholdTrans.TaxType == TaxWithholdCodeType_IN::TDS)
            {
                withholdTaxAmount = taxWithholdTrans.TaxWithholdAmountCur;
                taxWithholdType   = TaxWithholdCodeType_IN::TDS;
            }

            else if (taxWithholdTrans.TaxType == TaxWithholdCodeType_IN::TCS)
            {
                withholdTaxAmount = taxWithholdTrans.TaxWithholdAmountCur;
                taxWithholdType   = TaxWithholdCodeType_IN::TCS;
            }
        }

        return withholdTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoSourceTableSkipped</Name>
				<Source><![CDATA[
    protected void infoSourceTableSkipped(Common _sourceTable)
    {
        PurchTable sourceTable = _sourceTable as PurchTable;
        info(strFmt("@SYS62710", sourceTable.PurchaseType, sourceTable.PurchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        purchQuantity = PurchQuantity::construct(this.parmDocumentStatus());
        doInterCompanyMarkupAllocation = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the correct type of the table buffer to initialize a line.
    /// </summary>
    /// <returns>
    ///    A new table buffer of the correct type.
    /// </returns>
    protected VendDocumentLineMap initParmLine()
    {
        PurchParmLine purchParmLine;
        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmLine_Asset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the correct type of table buffer to initialize a line asset.
    /// </summary>
    /// <returns>
    ///    A new table buffer of the correct type.
    /// </returns>
    protected VendDocumentLineAssetMap initParmLine_Asset()
    {
        PurchParmLine_Asset purchParmLine_Asset;
        return purchParmLine_Asset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmSubTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the correct type of table buffer to initialize a sub header.
    /// </summary>
    /// <returns>
    ///    A new table buffer of the correct type.
    /// </returns>
    protected VendDocumentSubTableMap initParmSubTable()
    {
        PurchParmSubTable purchParmSubTable;
        return purchParmSubTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the correct type of table buffer to initialize the header.
    /// </summary>
    /// <returns>
    ///    A new table buffer of the correct type.
    /// </returns>
    protected VendDocumentTableMap initParmTable()
    {
        PurchParmTable purchParmTable;
        return purchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmTableFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the header from line header.
    /// </summary>
    /// <param name="_vendDocumentTable">
    /// Header record
    /// </param>
    /// <param name="_sourceLineMap">
    /// Line record
    /// </param>
    protected void initParmTableFromLine(
        VendDocumentTableMap _vendDocumentTable,
        Common               _sourceLineMap)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the record list and map variables.
    /// </summary>
    protected void initRecordLists()
    {
        super();
        recordInsertParmLine_Asset  = new RecordInsertList(this.parmLineAssetTableId(), true, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLine</Name>
				<Source><![CDATA[
    protected void insertParmLine(Common _parmLine)
    {
        VendDocumentLineMap parmLine = _parmLine;

        Debug::assert(parmLine.TableId != tableNum(VendDocumentLineMap));

        // RecId is needed if purchParmSubLines and markupTrans are going to be created.
        parmLine.RecId  = systemSequence.reserveValues(1, parmLine.TableId);

        super(parmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLine_Asset</Name>
				<Source><![CDATA[
    protected void insertParmLine_Asset(VendDocumentLineAssetMap _parmLine_Asset)
    {
        _parmLine_Asset.RecId  = systemSequence.reserveValues(1, _parmLine_Asset.TableId);
        recordInsertParmLine_Asset.add(_parmLine_Asset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmSubTable</Name>
				<Source><![CDATA[
    protected void insertParmSubTable(Common _parmSubTable)
    {
        VendDocumentSubTableMap parmSubTable = _parmSubTable;

        Debug::assert(parmSubTable.TableId != tableNum(VendDocumentSubTableMap));

        // RecId is needed if markupTrans are going to be created.
        parmSubTable.RecId  = systemSequence.reserveValues(1, parmSubTable.TableId);
        super(parmSubTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmTable</Name>
				<Source><![CDATA[
    protected void insertParmTable(Common _parmTable)
    {
        VendDocumentTableMap parmTable = _parmTable;

        TableId                tableId;
        VendInvoiceHoldHistory vendInvoiceHoldHistoryLocal;
        VendInvoiceInfoTable   vendInvoiceInfoTableOld;
        VendInvoiceInfoTable   vendInvoiceInfoTableNew;

        #ISOCountryRegionCodes

        Debug::assert(_parmTable.TableId != tableNum(VendDocumentTableMap));

        // RecId is needed if markupTrans and taxWorkRegulation are going to be created.
        parmTable.RecId  = systemSequence.reserveValues(1, parmTable.TableId);
        super(parmTable);

        lastParmTableRecId = parmTable.RecId;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled() && _parmTable.TableId == tableNum(VendInvoiceInfoTable))
        {
            tableId = tableNum(VendInvoiceInfoTable);
            vendInvoiceInfoTableNew = parmTable;

            select RecId from vendInvoiceInfoTableOld
                where vendInvoiceInfoTableOld.TableRefId == vendInvoiceInfoTableNew.TableRefId
                   && vendInvoiceInfoTableOld.RecId != vendInvoiceInfoTableNew.RecId;

            update_recordset vendInvoiceHoldHistoryLocal
            setting VendInvoiceJour_PSN = lastParmTableRecId
                where vendInvoiceHoldHistoryLocal.VendInvoiceJour_PSN == vendInvoiceInfoTableOld.RecId
                   && vendInvoiceHoldHistoryLocal.RefTableId_PSN == tableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records in the record lists into the database.
    /// </summary>
    protected void insertRecordLists()
    {
        // <GTE>
        SetEnumerator               setEnum;
        FormletterParmTable         purchParmTableTransit;
        PurchTable                  purchTableTransit;
        // </GTE>

        recordInsertParmLine_Asset.insertDatabase();
        super();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.transitDocument();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            setEnum = parmTableMap.valueSet().getEnumerator();
            while (setEnum.moveNext())
            {
                purchParmTableTransit = setEnum.current();
                select firstOnly purchTableTransit
                    where purchTableTransit.PurchId == purchParmTableTransit.OrderId;
                TaxBusinessService::transferTaxDocument(purchTableTransit, purchParmTableTransit);
            }
        }
        //</GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyParmLine</Name>
				<Source><![CDATA[
    protected Common interCompanyParmLine(Common _common)
    {
        PurchLine           localPurchLine  = _common as PurchLine;
        PurchTable          localPurchTable = localPurchLine.purchTable();
        SalesParmLine       salesParmLine;

        if (interCompanyCompanyId)
        {
            changecompany(interCompanyCompanyId)
            {
                select firstonly salesParmLine
                       where salesParmLine.ParmId        == interCompanyParmId
                       &&    salesParmLine.OrigSalesId   == localPurchTable.InterCompanySalesId
                       &&    salesParmLine.InventTransId == localPurchLine.InterCompanyInventTransId;
            }
        }
        else
        {
            select firstonly salesParmLine
                   where salesParmLine.ParmId        == interCompanyParmId
                   &&    salesParmLine.OrigSalesId   == localPurchLine.InventRefId
                   &&    salesParmLine.InventTransId == localPurchLine.InventRefTransId;
        }

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>InventProfileType_RU</c> actual for update
    /// </summary>
    /// <param name="_purchLine">
    /// <c>PurchLine</c> parameter to take posting profile from
    /// </param>
    /// <returns>
    /// Posting profile from line, or General, if splitting is not applied
    /// </returns>
    public InventProfileType_RU inventProfileType_RU(PurchLine _purchLine)
    {
        if (this.splitInventProfileType_RU())
        {
            return _purchLine.inventProfileType_RU();
        }
        return InventProfileType_RU::General;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountInQuery</Name>
				<Source><![CDATA[
    protected boolean  invoiceAccountInQuery()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingSlipSelection</Name>
				<Source><![CDATA[
    protected boolean parmPackingSlipSelection()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelection</Name>
				<Source><![CDATA[
    protected boolean lateSelection()
    {
        return purchParmUpdate.LateSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelectionQuery</Name>
				<Source><![CDATA[
    protected SysQueryRun lateSelectionQuery()
    {
        return new SysQueryRun(purchParmUpdate.LateSelectionQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    protected boolean mayJournalBePosted(Common _sourceTable)
    {
        boolean ret;
        PurchTable sourceTable = _sourceTable as PurchTable;

        ret = super(sourceTable);

        if (!PurchPrepayTable::isPrepayLimitValid(sourceTable.PurchId, strFmt("@SYS183651", sourceTable.PurchId)))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needVarianceApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified header table record needs variance approval.
    /// </summary>
    /// <param name="_parmTable">
    ///    The record to check.
    /// </param>
    /// <returns>
    ///    true if the provided record allows for variance approval; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method should be overridden by the derived classes.
    /// </remarks>
    protected boolean needVarianceApproval(VendDocumentTableMap _parmTable)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        externalDefaultedParmTable = this.initParmTable();

        this.initializePurchParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packExtensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs <c>VendInvoiceInfoTable_RU</c>, <c>VendInvoiceInfoTable_RU</c> and or <c>VendInvoiceInfoTable_RU</c> from the <c>_oldParmTable</c> to <c>_newParmTable</c>.
    /// </summary>
    /// <param name="_oldParmTable">
    /// The <c>_oldParmTable</c> which will be the source of the extension tables.
    /// </param>
    /// <param name="_newParmTable">
    /// The <c>_newParmTable</c> which will be the destination of the extension tables.
    /// </param>
    public void packExtensions(VendDocumentTableMap _oldParmTable, VendDocumentTableMap _newParmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAutoConsolidate</Name>
				<Source><![CDATA[
    public boolean parmAutoConsolidate(boolean _autoConsolidate = false)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClearTotals</Name>
				<Source><![CDATA[
    protected boolean parmClearTotals(boolean _clearTotals = clearTotals)
    {
        clearTotals = _clearTotals;
        return clearTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditRemaining</Name>
				<Source><![CDATA[
    protected boolean parmCreditRemaining(boolean  _creditRemaining = creditRemaining)
    {
        creditRemaining = _creditRemaining;
        return creditRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsBillOfEntryNumber_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The parameter of customs bill of entry number.
    /// </summary>
    /// <param name="_customsBillOfEntryNumber">
    /// The customs bill of entry number information.
    /// </param>
    public void parmCustomsBillOfEntryNumber_IN(RefRecId   _customsBillOfEntryNumber = customsBillOfEntryNumber)
    {
        customsBillOfEntryNumber = _customsBillOfEntryNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsImporterInvoiceNumber_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The customs importer invoice number parameter.
    /// </summary>
    /// <param name="_customsImporterInvoiceNumber">
    /// The customs importer invoice number rec id..
    /// </param>
    public void parmCustomsImporterInvoiceNumber_IN(RefRecId   _customsImporterInvoiceNumber = customsImporterInvoiceNumber)
    {
        customsImporterInvoiceNumber = _customsImporterInvoiceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsImportOrderType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The customs import order type parameter.
    /// </summary>
    /// <param name="_customsImportOrderType">
    /// The customs import order type.
    /// </param>
    public void parmCustomsImportOrderType_IN(CustomsImportOrderType_IN   _customsImportOrderType = customsImportOrderType)
    {
        customsImportOrderType = _customsImportOrderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeletePurchLineRecIdSet</Name>
				<Source><![CDATA[
    protected container parmDeletePurchLineRecIdSet(container _packedDeletePurchLineRecIdSet = packedDeletePurchLineRecIdSet)
    {
        packedDeletePurchLineRecIdSet = _packedDeletePurchLineRecIdSet;

        return packedDeletePurchLineRecIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeletePurchTablePurchIdSet</Name>
				<Source><![CDATA[
    protected container parmDeletePurchTablePurchIdSet(container _packedDeletePurchTablePurchIdSet = packedDeletePurchTablePurchIdSet)
    {
        packedDeletePurchTablePurchIdSet = _packedDeletePurchTablePurchIdSet;

        return packedDeletePurchTablePurchIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentOrigin</Name>
				<Source><![CDATA[
    public DocumentOrigin parmDocumentOrigin(DocumentOrigin _documentOrigin = documentOrigin)
    {
        documentOrigin = _documentOrigin;
        return documentOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRate_RU</Name>
				<Source><![CDATA[
    public ExchRate parmExchRate_RU(ExchRate _exchRate = exchRate)
    {
        exchRate = _exchRate;
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExternalDefaultedParmTable</Name>
				<Source><![CDATA[
    public VendDocumentTableMap parmExternalDefaultedParmTable(VendDocumentTableMap _externalDefaultedParmTable = externalDefaultedParmTable)
    {
        externalDefaultedParmTable = _externalDefaultedParmTable;

        Debug::assert(externalDefaultedParmTable.TableId != tableNum(VendDocumentTableMap));
        return externalDefaultedParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedExchRate_RU</Name>
				<Source><![CDATA[
    public NoYes parmFixedExchRate_RU(NoYes _fixedExchRate = fixedExchRate)
    {
        fixedExchRate = _fixedExchRate;
        return fixedExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId_PL</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId_PL(
        InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventProfileType_RU</Name>
				<Source><![CDATA[
    public InventProfileType_RU parmInventProfileType_RU(InventProfileType_RU _inventProfileType = inventProfileType)
    {
        inventProfileType = _inventProfileType;
        return inventProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAssetTableId</Name>
				<Source><![CDATA[
    protected TableId parmLineAssetTableId()
    {
        return tableNum(PurchParmLine_Asset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineBOEMapKey_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The parameter line of BOE map key.
    /// </summary>
    /// <param name="_line">
    /// The parameter line information.
    /// </param>
    /// <param name="_customsVendBOETransRecId">
    /// The customs vend BOE trans rec id.
    /// </param>
    /// <returns>
    /// The parameter line information.
    /// </returns>
    protected str parmLineBOEMapKey_IN(Common _line, RefRecId _customsVendBOETransRecId)
    {
        str             key;
        PurchLine       line;
        VendDocumentLineMap   parmLine = this.initParmLine();

        switch (_line.TableId)
        {
            case this.parmLineTableId():
                parmLine = _line;
                key = this.addToKey(key, int642str(parmLine.RecId));
                key = this.addToKey(key, int642str(_customsVendBOETransRecId));
                break;

            case tableNum(PurchLine) :
                line = _line;
                key = this.addToKey(key, int642str(line.RecId));
                key = this.addToKey(key, int642str(_customsVendBOETransRecId));
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineMapKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs fields that represent unique identification of the document line to hash string.
    /// </summary>
    /// <param name="_line">
    /// Document line record.
    /// </param>
    /// <returns>
    /// Hash string.
    /// </returns>
    protected str parmLineMapKey(Common _line)
    {
        str             key;
        PurchLine       line;
        VendDocumentLineMap   parmLine = this.initParmLine();
        // <GIN>
        boolean         isCustomsEnabled = TaxParameters::isCustomsEnable_IN();
        // </GIN>

        switch (_line.TableId)
        {
            case this.parmLineTableId():
                parmLine = _line;
                key = this.addToKey(key, parmLine.OrigPurchId);
                key = this.addToKey(key, parmLine.InventTransId);
                // <GIN>
                // New Key introduced only if customs feature is enabled and the Order is of type import and the CustomsVendBoeTrans.
                if (isCustomsEnabled
                    && parmLine.purchTable().purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
                {
                    key = this.addToKey(key, int642str(parmLine.RecId));
                }
                // </GIN>
                break;

            case tableNum(PurchLine) :
                line = _line;
                key = this.addToKey(key, line.PurchId);
                key = this.addToKey(key, line.InventTransId);
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineTableId</Name>
				<Source><![CDATA[
    protected TableId parmLineTableId()
    {
        return tableNum(PurchParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewPurchLineRecIdSet</Name>
				<Source><![CDATA[
    protected container parmNewPurchLineRecIdSet(container _packedNewPurchLineRecIdSet = packedNewPurchLineRecIdSet)
    {
        packedNewPurchLineRecIdSet = _packedNewPurchLineRecIdSet;

        return packedNewPurchLineRecIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumber</Name>
				<Source><![CDATA[
    protected Num parmNumber(Num _number = number)
    {
        number = _number;

        return number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable_W</Name>
				<Source><![CDATA[
    public Common parmParmTable_W(Common _parmTable = purchParmTableFilter)
    {
        purchParmTableFilter = _parmTable as PurchParmTable;
        return purchParmTableFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTableNum</Name>
				<Source><![CDATA[
    Num parmParmTableNum(Num _parmTableNum = parmTableNum)
    {
        parmTableNum = _parmTableNum;
        return parmTableNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _purchParmUpdate = purchParmUpdate)
    {
        purchParmUpdate = _purchParmUpdate as PurchParmUpdate;
        this.parmParmId(purchParmUpdate.ParmId);
        return purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile_RU</Name>
				<Source><![CDATA[
    public PostingProfile parmPostingProfile_RU(PostingProfile _postingProfile = postingProfile)
    {
        postingProfile = _postingProfile;
        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessAdditional</Name>
				<Source><![CDATA[
    protected boolean parmProcessAdditional(boolean _processAdditional = processAdditional)
    {
        processAdditional = _processAdditional;

        return processAdditional;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryChooseLinesPendingInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the query that is used on the <c>VendInvoiceInfoTable</c> table to select the lines
    ///    to copy to the table header.
    /// </summary>
    /// <param name="_chooseLinesPendingInvoice">
    ///    The new <c>SysQueryRun</c>; optional.
    /// </param>
    /// <returns>
    ///    The <c>SysQueryRun</c> query that is used to select the lines to copy from the pending invoice.
    /// </returns>
    protected SysQueryRun parmQueryChooseLinesPendingInvoice(SysQueryRun _chooseLinesPendingInvoice = null)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSADNumberCode_PL</Name>
				<Source><![CDATA[
    public PlSADNumberCode parmSADNumberCode_PL(PlSADNumberCode _sadNumberCode = sadNumberCode)
    {
        sadNumberCode = _sadNumberCode;
        return sadNumberCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipParmTableDefaulting</Name>
				<Source><![CDATA[
    public boolean parmSkipParmTableDefaulting(boolean _skipParmTableDefaulting = skipParmTableDefaulting)
    {
        skipParmTableDefaulting = _skipParmTableDefaulting;
        return skipParmTableDefaulting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = purchTable)
    {
        if (_sourceTable.TableId == tableNum(PurchTable))
        {
            purchTable = _sourceTable;
        }
        return _sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecQty</Name>
				<Source><![CDATA[
    PurchUpdate  parmSpecQty(PurchUpdate  _specQty = initialSpecQty)
    {
        initialSpecQtyIsSet = true;
        initialSpecQty = _specQty;
        return initialSpecQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorno_RU</Name>
				<Source><![CDATA[
    public NoYes parmStorno_RU(NoYes _storno = storno)
    {
        storno = _storno;
        return storno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubTableMapKey</Name>
				<Source><![CDATA[
    protected str parmSubTableMapKey(Common _source)
    {
        str                 key;
        PurchParmSubTable   purchParmSubTable;

        switch (_source.TableId)
        {
            case tableNum(PurchParmSubTable) :
                purchParmSubTable = _source;
                key = this.addToKey(key, purchParmSubTable.ParmId);
                key = this.addToKey(key, purchParmSubTable.TableRefId);
                key = this.addToKey(key, purchParmSubTable.OrigPurchId);
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubTableTableId</Name>
				<Source><![CDATA[
    protected TableId parmSubTableTableId()
    {
        return tableNum(PurchParmSubTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableMapKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs fields that represent unique identification of the document header to hash string.
    /// </summary>
    /// <param name="_source">
    /// Document header record.
    /// </param>
    /// <returns>
    /// Hash string.
    /// </returns>
    protected str parmTableMapKey(Common _source)
    {
        str                         key;
        PurchLine                   purchLine;
        VendDocumentTableMap        parmTable = this.initParmTable();
        VendDocumentSubTableMap     parmSubTable = this.initParmSubTable();
        VendDocumentLineMap         parmLine = this.initParmLine();
        TransTaxInformation         transTaxInformation;

        // <GEERU>
        #ISOcountryRegionCodes
        boolean                     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        switch (_source.TableId)
        {
            case tableNum(PurchLine) :
                purchLine = _source;
                key = this.addToKey(key, purchLine.PurchId);
                break;

            case this.parmTableTableId():
                parmTable = _source;
                key = this.addToKey(key, parmTable.PurchId);
                break;

            case this.parmSubTableTableId():
                parmSubTable = _source;
                key = this.addToKey(key, parmSubTable.OrigPurchId);
                break;

            case this.parmLineTableId():
                parmLine = _source;
                // <GEERU>
                if (countryRegion_RU &&
                    this.canGetPurchIdFromParmTable() &&
                    (this.splitInventProfileType_RU() ||
                     this.splitPostingProfile_RU()))
                {
                    select firstonly parmTable
                        where parmTable.ParmId      == parmLine.ParmId &&
                              parmTable.TableRefId  == parmLine.TableRefId;

                    key = this.addToKey(key, parmTable.PurchId);
                }
                else
                {
                    // </GEERU>
                    key = this.addToKey(key, parmLine.OrigPurchId);
                    // <GEERU>
                }
                // </GEERU>
                break;
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            if (this.splitPostingProfile_RU())
            {
                switch (_source.TableId)
                {
                    case tableNum(PurchLine)        :
                        purchLine = _source;
                        key = this.addToKey(key, this.postingProfile_RU(purchLine.purchLine_W().PostingProfile_RU,
                                                                        purchLine.purchTable().PostingProfile));
                        break;

                    case this.parmTableTableId()    :
                        parmTable = _source;
                        key = this.addToKey(key, parmTable.PostingProfile);
                        break;

                    case this.parmSubTableTableId() :
                        parmSubTable = _source;
                        select firstonly parmTable
                            where parmTable.ParmId     == parmSubTable.ParmId &&
                                  parmTable.TableRefId == parmSubTable.TableRefId;
                        key = this.addToKey(key, parmTable.PostingProfile);
                        break;

                    case this.parmLineTableId()     :
                        parmLine = _source;
                        select firstonly parmTable
                            where parmTable.ParmId     == parmLine.ParmId &&
                                  parmTable.TableRefId == parmLine.TableRefId;
                        key = this.addToKey(key, this.postingProfile_RU(parmLine.VendDocumentLineMap::parmPostingProfile_RU(),
                                                                        parmTable.PostingProfile));
                        break;
                }
            }

            if (this.splitInventProfileType_RU())
            {
                switch (_source.TableId)
                {
                    case tableNum(PurchLine)        :
                        purchLine = _source;
                        key = this.addToKey(key, int2str(this.inventProfileType_RU(purchLine)));
                        break;

                    case this.parmTableTableId()    :
                        parmTable = _source;
                        key = this.addToKey(key, int2str(parmTable.VendDocumentTableMap::parmInventProfileType_RU()));
                        break;

                    case this.parmSubTableTableId() :
                        parmSubTable = _source;
                        select firstonly parmTable
                            where parmTable.ParmId     == parmSubTable.ParmId &&
                                  parmTable.TableRefId == parmSubTable.TableRefId;
                        key = this.addToKey(key, int2str(parmTable.VendDocumentTableMap::parmInventProfileType_RU()));
                        break;

                    case this.parmLineTableId()     :
                        parmLine = _source;
                        key = this.addToKey(key, int2str(this.inventProfileType_RU(parmLine.purchLine())));
                        break;
                }
            }
        }
        // </GEERU>

        //<GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && this.splitDeliveryInformation_IN())
        {
            switch (_source.TableId)
            {
                case tableNum(PurchLine) :
                    purchLine = _source;
                    key = this.addToKey(key, purchLine.DeliveryName);
                    key = this.addToKey(key, int642str(purchLine.DeliveryPostalAddress));
                    if (taxesMarked)
                    {
                        transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(purchLine);
                        key = this.addToKey(key, int642str(TaxInformation_IN::find(transTaxInformation.TaxInformation).RecId));
                    }
                    break;

                case this.parmTableTableId()    :
                    parmTable = _source;
                    key = this.addToKey(key, parmTable.DeliveryName);
                    key = this.addToKey(key, int642str(parmTable.DeliveryPostalAddress));
                    if (taxesMarked)
                    {
                        key = this.addToKey(key, int642str(parmTable.VendDocumentTableMap::parmTaxInformation_IN()));
                    }
                    break;

                case this.parmLineTableId()     :
                    parmLine = _source;
                    key = this.addToKey(key, parmLine.DeliveryName);
                    key = this.addToKey(key, int642str(parmLine.DeliveryPostalAddress));
                    if (taxesMarked)
                    {
                        transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(parmLine.purchLine());
                        key = this.addToKey(key, int642str(TaxInformation_IN::find(transTaxInformation.TaxInformation).RecId));
                    }
                    break;

                case this.parmSubTableTableId() :
                    parmSubTable = _source;

                    key = this.addToKey_W(key, parmSubTable);

                    break;
            }
        }
        // </GIN>

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableTableId</Name>
				<Source><![CDATA[
    protected TableId parmTableTableId()
    {
        return tableNum(PurchParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePostingProfileFromContract_RU</Name>
				<Source><![CDATA[
    public boolean parmUsePostingProfileFromContract_RU(boolean _usePostingProfileFromContract = usePostingProfileFromContract)
    {
        usePostingProfileFromContract = _usePostingProfileFromContract;
        return usePostingProfileFromContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWGetLineQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves catch weight quantities from the purchase order line to be used for the parameter line generation.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase order line to retrieve the quantities for.
    /// </param>
    /// <returns>
    /// A container with the following 2 elements:
    /// new catch weight unit of measure quantity,
    /// previous catch weight unit quantity,
    /// </returns>
    protected container pdsCWGetLineQuantities(PurchLine _purchLine)
    {
        return versioningStrategy.pdsCWGetLineQuantities(_purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegates the calculation of the catch weight quantities to the associated <c>PurchQuantity</c> object.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase order line to calculate the quantities with.
    /// </param>
    /// <param name="_qty">
    /// The base quantity for the calculation.
    /// </param>
    /// <returns>
    /// The calculated <c>PdsCWReceiveNow</c>, <c>PdsCWRemainBefore</c> and <c>PdsCWRemainAfter</c> value.
    /// </returns>
    public container pdsCWQtyInvent(PurchLine _purchLine, PdsCWInventQty _qty = naReal())
    {
        return purchQuantity.pdsCWQtyInvent(
                    _purchLine,
                    purchParmUpdate.SpecQty,
                    _qty,
                    purchParmUpdate.CreditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the vendor posting profile that is associated with the <c>PurchLine</c> if invoices in update
    ///    should be splitted by posting profiles or with the <c>PurchTable</c> if not.
    /// </summary>
    /// <param name="_lineProfile">
    ///    The vendor posting profile that is associated with the <c>PurchLine</c>.
    /// </param>
    /// <param name="_tableProfile">
    ///    The vendor posting profile that is associated with the <c>PurchTable</c>.
    /// </param>
    /// <returns>
    ///    The vendor posting profile.
    /// </returns>
    protected VendPostingProfile postingProfile_RU(
        VendPostingProfile _lineProfile,
        VendPostingProfile _tableProfile)
    {
        if (this.splitPostingProfile_RU() && _lineProfile)
        {
            return _lineProfile;
        }
        return _tableProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchID_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines current purchase Id.
    /// </summary>
    /// <returns>
    /// Purchase Id.
    /// </returns>
    protected PurchId purchID_W()
    {
        PurchParmTable parmTable = this.parmParmTable_W();
        return parmTable.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchStatusRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the purchase status range to use for selecting purchase orders to be updated.
    /// </summary>
    /// <returns>
    ///    The purchase status range to use.
    /// </returns>
    /// <remarks>
    ///    The purpose of the <c>purchStatusRange</c> method is to add a filter when you select purchase
    ///    orders to update using the select button in the <c>PurchEditLines</c> form.
    /// </remarks>
    protected str purchStatusRange()
    {
        return queryValue(PurchStatus::Backorder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyDeviation_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the deviation qty for the current line update.
    /// </summary>
    /// <param name="_purchLine">
    ///    <c>PurchLine</c> record to take officials from.
    /// </param>
    /// <returns>
    ///    The deviation qty for the current line update.
    /// </returns>
    /// <remarks>
    ///    The deviation qty used in the M4/M7/TORG1-2-3 reports.
    /// </remarks>
    protected InventQty qtyDeviation_RU(PurchLine _purchLine)
    {
        container dummy() // BP warning
        {
            return [ _purchLine ];
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    public container  qtyInvent(PurchLine     _purchLine,
                         InventQty     qty = naReal())
    {
        return purchQuantity.qtyInvent(_purchLine, purchParmUpdate.SpecQty, qty, purchParmUpdate.CreditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPurch</Name>
				<Source><![CDATA[
    public container  qtyPurch(PurchLine     _purchLine,
                        PurchQty      _qty     = naReal(),
                        PurchUpdate   _specQty = purchParmUpdate.SpecQty)
    {
        return purchQuantity.qtyPurch(_purchLine, _specQty, _qty, purchParmUpdate.CreditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryName</Name>
				<Source><![CDATA[
    protected str queryName()
    {
        return queryStr(PurchUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrange</Name>
				<Source><![CDATA[
    public void reArrange()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().purchFormLetterParmDataActivities().reArrange(purchParmUpdate))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeCreateNewJournal</Name>
				<Source><![CDATA[
    protected boolean reArrangeCreateNewJournal(PurchTable _purchTable, VendDocumentTableMap _parmTable, VendDocumentSubTableMap _parmSubTable)
    {
        return (this.checkIfPurchOrderExist(_purchTable) && purchSummary.createNewJournal(_purchTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeEnd</Name>
				<Source><![CDATA[
    protected void reArrangeEnd()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().purchFormLetterParmDataActivities().reArrangeEnd())
        {
            if (this.allowReArrangeEnd())
            {
                VendDocumentTableMap    localParmTable = this.initParmTable();
                VendDocumentSubTableMap localParmSubTable = this.initParmSubTable();
                MarkupTrans             localMarkupTrans;
                VendDocumentLineMap     parmLine = this.initParmLine();

                super();

                // Report any MarkupTrans that will be deleted via an association to
                // an orphaned invoice (sub header record without any lines).
                while select forceplaceholders MarkupCode from localMarkupTrans
                    join OrigPurchId from localParmSubTable
                        where localParmSubTable.ParmId     == purchParmUpdate.ParmId
                           && localParmSubTable.TableId    == localMarkupTrans.TransTableId
                           && localParmSubTable.RecId      == localMarkupTrans.TransRecId
                    notexists join parmLine
                        where parmLine.ParmId              == purchParmUpdate.ParmId
                           && parmLine.TableRefId          == localParmSubTable.TableRefId
                           && parmLine.OrigPurchId         == localParmSubTable.OrigPurchId
                {
                    info(strFmt("@SYS120666", localMarkupTrans.MarkupCode, localParmSubTable.OrigPurchId));
                }

                delete_from forceplaceholders localParmSubTable
                    where localParmSubTable.ParmId == purchParmUpdate.ParmId
                    notexists join parmLine
                        where parmLine.ParmId              == localParmSubTable.ParmId
                           && parmLine.TableRefId          == localParmSubTable.TableRefId
                           && parmLine.OrigPurchId         == localParmSubTable.OrigPurchId;

                activityContext.addCustomProperty('purchParmSubTable', int2Str(localParmSubTable.RowCount()));

                this.updateTransTaxInformation_IN();

                delete_from forceplaceholders localParmTable
                    where localParmTable.ParmId == purchParmUpdate.ParmId
                    notexists join localParmSubTable
                        where localParmSubTable.ParmId     == localParmTable.ParmId
                           && localParmSubTable.TableRefId == localParmTable.TableRefId;

                 activityContext.addCustomProperty('purchParmTable', int2Str(localParmTable.RowCount()));

                // Delete MarkupTrans that were allocated *to* a line *from* a summary header where the header is now gone
                // see the method MarkupAllocation_PurchParmLine*.setMarkupTransFields()
                delete_from forceplaceholders localMarkupTrans
                        where localMarkupTrans.OrigTableId          == localParmTable.TableId
                           && !localMarkupTrans.IsDeleted
                        exists join parmLine
                            where parmLine.ParmId              == purchParmUpdate.ParmId
                               && parmLine.TableId             == localMarkupTrans.TransTableId
                               && parmLine.RecId               == localMarkupTrans.TransRecId
                        notexists join localParmTable
                            where localParmTable.ParmId        == purchParmUpdate.ParmId
                               && localParmTable.TableId       == localMarkupTrans.OrigTableId
                               && localParmTable.RecId         == localMarkupTrans.OrigRecId;

                activityContext.addCustomProperty('markupTrans', int2Str(localMarkupTrans.RowCount()));

                if (this.parmClearTotals())
                {
                    purchParmUpdate.clearParmTableTotals();
                }
            }
            else
            {
                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransTaxInformation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Update TransTaxInformation and TransitDocumentTransTaxInfoRelation_IN.
    /// </summary>
    [Replaceable]
    protected void updateTransTaxInformation_IN()
    {
        VendDocumentTableMap      localParmTable = this.initParmTable();
        VendDocumentSubTableMap   localParmSubTable = this.initParmSubTable();

        // <GTE> <GIN>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            TransTaxInformation transTaxInformation;
            VendInvoiceInfoTable vendInvoiceInfoTable;
            TransitDocumentTransTaxInfoRelation_IN transitDocumentTransTaxInfoRelation_IN;

            if (this is PurchFormletterParmDataInvoice)
            {
                PurchFormletterParmDataInvoice purchFormletterParmDataInvoice = this;
                select RecId from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.ParmId == purchParmUpdate.ParmId
                        && vendInvoiceInfoTable.SourceDocumentLine == purchFormletterParmDataInvoice.parmSourceDocumentLineRecId();

                if (!vendInvoiceInfoTable)
                {
                    select RecId from vendInvoiceInfoTable
                        where vendInvoiceInfoTable.ParmId == purchParmUpdate.ParmId
                            && vendInvoiceInfoTable.RecId == lastParmTableRecId;
                }

                if (vendInvoiceInfoTable)
                {
                    update_recordset transTaxInformation
                        setting HeadingRecId = vendInvoiceInfoTable.RecId
                    join RecId from localParmTable
                        where localParmTable.ParmId == purchParmUpdate.ParmId
                            && transTaxInformation.HeadingRecId == localParmTable.RecId
                            && transTaxInformation.HeadingTableId == localParmTable.tableId
                    notexists join localParmSubTable
                        where localParmSubTable.ParmId     == localParmTable.ParmId
                            && localParmSubTable.TableRefId == localParmTable.TableRefId;

                    update_recordset transitDocumentTransTaxInfoRelation_IN
                        setting HeadingRecId = vendInvoiceInfoTable.RecId
                    join RecId from localParmTable
                        where localParmTable.ParmId == purchParmUpdate.ParmId
                            && transitDocumentTransTaxInfoRelation_IN.HeadingRecId == localParmTable.RecId
                            && transitDocumentTransTaxInfoRelation_IN.HeadingTableId == localParmTable.tableId
                    notexists join localParmSubTable
                        where localParmSubTable.ParmId     == localParmTable.ParmId
                            && localParmSubTable.TableRefId == localParmTable.TableRefId;
                }
            }
        }
        // </GTE> </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeInit</Name>
				<Source><![CDATA[
    protected void reArrangeInit()
    {
        hold = false;
        notApproved = false;
        purchSummary    = PurchSummary::construct(purchParmUpdate.SumBy, purchParmUpdate.ParmId, purchParmUpdate.SumPurchId, this.parmDocumentStatus(), number);
        markupHeaderRecIds = new List(Types::Int64);

        if (purchParmUpdate.SumPurchId)
        {
            purchSummary.summaryPurchId(purchParmUpdate.SumPurchId);
            purchSummary.summaryOrderTable(PurchTable::find(purchParmUpdate.SumPurchId));
            purchSummary.summaryTableRef(formletterParmData::getNewTableRefId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeLines</Name>
				<Source><![CDATA[
    protected void reArrangeLines(QueryRun _queryRun)
    {
        VendDocumentTableMap      localParmTable = this.initParmTable();
        VendDocumentTableMap      oldParmTable = this.initParmTable();
        VendDocumentSubTableMap   localParmSubTable = this.initParmSubTable();
        ListEnumerator            markupHeaderRecIdsEnumerator;

        // <GEERU>
        #ISOcountryRegionCodes
        boolean                   countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        localParmSubTable  = _queryRun.get(this.parmSubTableTableId());
        purchTable         = localParmSubTable.purchTable();
        oldParmTable       = VendDocumentSubTableMap::header(localParmSubTable);

        if (this.allowReArrange(oldParmTable))
        {
            if (!purchTable.isInterCompanyOrder() || purchParmUpdate.SumBy == AccountOrder::Auto || purchParmUpdate.SumBy == AccountOrder::Account)
            {
                // <GEERU>
                if (this.reArrangeCreateNewJournal(purchTable, oldParmTable, localParmSubTable) ||
                    (countryRegion_RU &&
                     ((this.splitInventProfileType_RU() && purchSummary.summaryInventProfileType() != oldParmTable.VendDocumentTableMap::parmInventProfileType_RU()) ||
                      (this.splitPostingProfile_RU()    && purchSummary.summaryPostingProfile()    != oldParmTable.PostingProfile))))
                // </GEERU>
                {
                    if (!purchParmUpdate.SumPurchId)
                    {
                        purchSummary.summaryPurchId(purchTable.PurchId);
                        purchSummary.summaryOrderTable(purchTable);
                        purchSummary.summaryTableRef(formletterParmData::getNewTableRefId());
                        // <GEERU>
                        purchSummary.summaryPostingProfile(oldParmTable.PostingProfile);
                        purchSummary.summaryInventProfileType(oldParmTable.VendDocumentTableMap::parmInventProfileType_RU());
                        // </GEERU>
                    }

                    purchSummary.setFormLetterIdFromTrans(oldParmTable.Num);
                    if (oldParmTable.RecId)
                    {
                        localParmTable.data(oldParmTable);

                        this.packExtensions(oldParmTable, localParmTable);

                        localParmTable.RecId = 0;
                        if (localParmTable.PurchId != purchTable.PurchId)
                            this.updateParmTable(localParmTable, purchTable);
                        localParmTable.TableRefId  = purchSummary.summaryTableRef();
                        localParmTable.Num         = purchSummary.formLetterId();
                        // <GEERU>
                        localParmTable.PostingProfile       = purchSummary.summaryPostingProfile();
                        if (countryRegion_RU)
                        {
                            localParmTable.VendDocumentTableMap::parmInventProfileType_RU(purchSummary.summaryInventProfileType());
                        }
                        // </GEERU>
                        this.setHoldOrNotApproved(localParmTable, hold, notApproved);
                        this.insertParmTable(localParmTable);

                        // Copy attached document from current vendor invoice to the new vendor invoice
                        Docu::copy(oldParmTable, localParmTable);

                        // Move payment schedule from current journal to the new journal
                        VendPaymSchedule::move(oldParmTable, localParmTable);

                        // Move tax adjustments from current vendor invoice to the new vendor invoice
                        TaxWorkRegulation::move(oldParmTable, localParmTable);

                        // Copy any header misc charges from the current journal to the new journal
                        Markup::move(oldParmTable.TableId, oldParmTable.RecId,
                                                  localParmTable.TableId, localParmTable.RecId);

                        // <GBR>
                        if (BrazilParameters::isEnabled())
                        {
                            FiscalReferenceParm_BR::copy(oldParmTable, localParmTable);
                            FiscalDocumentTextUpdate_BR::newFromRecord(localParmTable).copy(oldParmTable);
                            PurchShippingStat_BR::copy(oldParmTable, localParmTable);
                        }
                        // </GBR>

                        // Copy any cached misc charges to the new journal
                        markupHeaderRecIdsEnumerator = markupHeaderRecIds.getEnumerator();
                        while (markupHeaderRecIdsEnumerator.moveNext())
                        {
                            // Old recId is markupHeaderRecIdsEnumerator.current()
                            Markup::move(oldParmTable.TableId, markupHeaderRecIdsEnumerator.current(),
                                         localParmTable.TableId, localParmTable.RecId);
                        }
                        markupHeaderRecIds = new List(Types::Int64);
                    }
                    else
                    {
                        this.createParmTable(purchTable, null, purchSummary.summaryTableRef(), true, hold, notApproved, purchSummary.formLetterId());
                    }
                    hold = false;
                    notApproved = false;
                }
                // Not creating new journal
                else
                {
                    // If the old header was on hold or unapproved, make sure the new one matches
                    if ((oldParmTable.Hold == NoYes::Yes) || this.needVarianceApproval(oldParmTable))
                    {
                        localParmTable.clear();

                        this.packExtensions(oldParmTable, localParmTable);

                        localParmTable.ParmId = oldParmTable.ParmId;
                        localParmTable.TableRefId = purchSummary.summaryTableRef();
                        localParmTable.PurchId = purchSummary.summaryPurchId();
                        // <GEERU>
                        localParmTable.PostingProfile       = purchSummary.summaryPostingProfile();
                        localParmTable.VendDocumentTableMap::parmInventProfileType_RU(purchSummary.summaryInventProfileType());
                        // </GEERU>

                        // See if the new journal has already been created
                        if (parmTableMap.exists(this.parmTableMapKey(localParmTable)))
                        {
                            localParmTable = parmTableMap.lookup(this.parmTableMapKey(localParmTable));
                        }

                        if (localParmTable.RecId != 0)
                        {
                            // New journal already exists, check if an update is actually needed
                            if ((oldParmTable.Hold == NoYes::Yes && localParmTable.Hold == NoYes::No) ||
                                (oldParmTable.VarianceApproved == NoYes::No && localParmTable.VarianceApproved == NoYes::Yes))
                            {
                                // Update the new journal
                                this.setHoldOrNotApproved(localParmTable, oldParmTable.Hold == NoYes::Yes, oldParmTable.VarianceApproved == NoYes::No);
                            }
                            // <GBR>
                            if (BrazilParameters::isEnabled())
                            {
                                FiscalReferenceParm_BR::copy(oldParmTable, localParmTable);
                                FiscalDocumentTextUpdate_BR::newFromRecord(localParmTable).copy(oldParmTable);
                                PurchShippingStat_BR::copy(oldParmTable, localParmTable);
                            }
                            // </GBR>

                            // Copy attached document from current vendor invoice to the new vendor invoice
                            Docu::copy(oldParmTable, localParmTable);

                            // Move payment schedule from current vendor invoice to the new vendor invoice
                            VendPaymSchedule::move(oldParmTable, localParmTable);

                            // Move tax adjustments from current vendor invoice to the new vendor invoice
                            TaxWorkRegulation::move(oldParmTable, localParmTable);

                            // Copy any header misc charges to the new journal
                            Markup::move(oldParmTable.TableId, oldParmTable.RecId,
                                         localParmTable.TableId, localParmTable.RecId);
                        }
                        else
                        {
                            // New journal doesn't exist yet; update flags so journal gets put on hold or unapproved when it is created
                            hold = (hold || oldParmTable.Hold == NoYes::Yes);
                            notApproved = (notApproved || oldParmTable.VarianceApproved == NoYes::No);

                            // Cache any header misc charges so they can be copied to the new journal
                            if (MarkupTrans::exist(oldParmTable.TableId, oldParmTable.RecId))
                            {
                                markupHeaderRecIds.addEnd(oldParmTable.RecId);
                            }
                        }
                    }
                }

                this.reArrangeUpdateParmLine(purchParmUpdate.ParmId, localParmSubTable.OrigPurchId, localParmSubTable.TableRefId, purchSummary.summaryTableRef());

                localParmSubTable.TableRefId   = purchSummary.summaryTableRef();
            }
            else
            {
                purchSummary.setFormLetterIdFromTrans(oldParmTable.Num);
                if (oldParmTable.RecId)
                {
                    localParmTable.data(oldParmTable);

                    this.packExtensions(oldParmTable, localParmTable);

                    if (localParmTable.PurchId != purchTable.PurchId)
                        this.updateParmTable(localParmTable, purchTable);
                    localParmTable.Num         = purchSummary.formLetterId();
                    localParmTable.TableRefId  = formletterParmData::getNewTableRefId();
                    this.insertParmTable(localParmTable);
                }
                else
                {
                    localParmTable = this.createParmTable(purchTable, null, formletterParmData::getNewTableRefId(), true, false, false, purchSummary.formLetterId());
                }

                this.reArrangeUpdateParmLine(purchParmUpdate.ParmId, localParmSubTable.OrigPurchId, localParmSubTable.TableRefId, localParmTable.TableRefId);

                localParmSubTable.TableRefId = localParmTable.TableRefId;
            }

            if (localParmSubTable.TableRefId != localParmSubTable.orig().TableRefId &&
                !VendInvoiceInfoSubTable::exist(localParmSubTable.ParmId, localParmSubTable.TableRefId, localParmSubTable.OrigPurchId))
            {
                this.reArrangeUpdateParmSubTable(localParmSubTable);
            }
            if (localParmTable.TableRefId != localParmTable.orig().TableRefId &&
                !VendInvoiceInfoTable::exist(localParmTable.ParmId, localParmTable.TableRefId))
            {
                this.reArrangeUpdateParmTable(localParmTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun reArrangeQueryRun()
    {
        return purchSummary.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeSplit</Name>
				<Source><![CDATA[
    protected void reArrangeSplit()
    {
        TradeLineRefId      tableRefId;
        VendDocumentTableMap      oldParmTable = this.initParmTable();
        VendDocumentTableMap      localParmTable = this.initParmTable();
        VendDocumentSubTableMap   localParmSubTable = this.initParmSubTable();
        VendDocumentLineMap       localParmLine = this.initParmLine();

        // <GEERU>
        VendDocumentSubTableMap   vendDocumentSubTableMap;
        // </GEERU>

        while select localParmTable
            where localParmTable.ParmId         == this.parmId()
               && localParmTable.ParmJobStatus  == ParmJobStatus::Waiting
        {
            this.insertParmTableMap(localParmTable);
        }

        while select forupdate localParmLine
            where localParmLine.ParmId == this.parmId()
        {
            tableRefId = this.getTableRefId(localParmLine);
            if (localParmLine.TableRefId != tableRefId)
            {
                oldParmTable = VendDocumentLineMap::header(localParmLine);
                if (oldParmTable.ParmJobStatus != ParmJobStatus::Waiting)
                {
                    continue;
                }

                if (!parmTableMap.exists(this.parmTableMapKey(localParmLine)))
                {
                    localParmTable.data(oldParmTable);
                    localParmTable.TableRefId = tableRefId;

                    this.insertParmTable(localParmTable);
                }
                else
                {
                    localParmTable = oldParmTable;
                }

                localParmSubTable.ParmId = localParmTable.ParmId;
                localParmSubTable.TableRefId = tableRefId;
                localParmSubTable.OrigPurchId = localParmLine.OrigPurchId;

                if (!this.existsParmSubTable(localParmSubTable))
                {
                    // <GEERU>
                    vendDocumentSubTableMap = VendDocumentLineMap::subHeader(localParmLine);
                    if (vendDocumentSubTableMap.RecId)
                    {
                        // </GEERU>
                        localParmSubTable.data(VendDocumentLineMap::subHeader(localParmLine));
                        localParmSubTable.TableRefId   = tableRefId;
                        this.insertParmSubTable(localParmSubTable);
                        // <GEERU>
                    }
                    // </GEERU>
                }

                localParmLine.TableRefId        = tableRefId;

                this.reArrangeUpdateParmSingleLine(localParmLine, oldParmTable.PurchId, tableRefId);

                localParmLine.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeUpdateParmLine</Name>
				<Source><![CDATA[
    //This method is overridden in the invoice class.
    protected void reArrangeUpdateParmLine(ParmId _fromParmId, PurchId _fromPurchId, TradeLineRefId _fromTableRefId, TradeLineRefId _toTableRefId)
    {
        PurchParmLine localParmLine;
        ttsbegin;

        update_recordset localParmLine
            setting TableRefId  = _toTableRefId
            where localParmLine.ParmId      ==  _fromParmId
               && localParmLine.OrigPurchId == _fromPurchId
               && localParmLine.TableRefId  == _fromTableRefId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeUpdateParmSingleLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   The method should be overriden bu descendants to perform document-specific actions before line rearrange.
    /// </summary>
    /// <param name="_line">
    ///   A document line being rearranged. The method is called just before saving the rearranged line.
    /// So old values can be accessed using the <c>orig()</c> method of the record.
    /// </param>
    /// <param name="_fromPurchId">
    ///  An old purchase identiofier.
    /// </param>
    /// <param name="_toTableRefId">
    ///  A new  <c>TradeLineRefId</c> value.
    /// </param>
    protected void reArrangeUpdateParmSingleLine(VendDocumentLineMap _line, PurchId _fromPurchId, TradeLineRefId _toTableRefId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeUpdateParmSubTable</Name>
				<Source><![CDATA[
    protected void reArrangeUpdateParmSubTable(VendDocumentSubTableMap _parmSubTable)
    {
        Debug::assert(_parmSubTable.TableId != tableNum(VendDocumentSubTableMap));
        _parmSubTable.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recIdSuspensionTables</Name>
				<Source><![CDATA[
    protected List recIdSuspensionTables()
    {
        List    list    = super();

        list.addEnd(this.parmTableTableId());
        list.addEnd(this.parmSubTableTableId());
        list.addEnd(this.parmLineTableId());
        list.addEnd(this.parmLineAssetTableId());
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelectLines</Name>
				<Source><![CDATA[
    protected void reSelectLines(Num _origOrderId)
    {
        PurchLine localPurchLine;

        Query query = this.buildReSelectLinesQuery(_origOrderId);
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            localPurchLine = queryRun.get(tableNum(PurchLine));
            this.reSelectLine(localPurchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReSelectLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>Query</c> object for reselecting the purchase lines.
    /// </summary>
    /// <param name = "_origOrderId">
    /// The order id to select lines from.
    /// </param>
    /// <returns>
    /// The <c>Query</c> object for reselecting the purchase lines.
    /// </returns>
    protected Query buildReSelectLinesQuery(Num _origOrderId)
    {
        boolean specQtyIsReceiveNow = (purchParmUpdate.SpecQty == PurchUpdate::ReceiveNow);
        
        Query query = new Query();

        QueryBuildDataSource qbdsPurchLine = query.addDataSource(tableNum(PurchLine));
        qbdsPurchLine.addSortIndex(indexNum(PurchLine, PurchLineIdx));
        qbdsPurchLine.indexIsHint(true);
        qbdsPurchLine.addRange(fieldNum(PurchLine, PurchId)).value(queryValue(_origOrderId));
        qbdsPurchLine.addRange(fieldNum(PurchLine, Blocked)).value(queryValue(NoYes::No));
        qbdsPurchLine.addRange(fieldNum(PurchLine, IsDeleted)).value(queryValue(NoYes::No));

        if (specQtyIsReceiveNow)
        {
            qbdsPurchLine.addRange(fieldNum(PurchLine, PurchReceivedNow)).value(SysQuery::valueNot(0.0));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHoldOrNotApproved</Name>
				<Source><![CDATA[
    protected void setHoldOrNotApproved(VendDocumentTableMap _parmTable, boolean _hold, boolean _notApproved)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterCompanyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the intercompany inventory dimensions on a parameter line.
    /// </summary>
    /// <param name="_parmLine">
    /// The parameter line on which to set the dimensions.
    /// </param>
    /// <param name="_salesParmLine">
    /// The related intercompany sales parameter line on which to set the dimensions.
    /// </param>
    protected void setInterCompanyInventDim(VendDocumentLineMap _parmLine, SalesParmLine _salesParmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewPostingPurchAndInventQty_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets new posting purch and invent quantity.
    /// </summary>
    /// <param name="_customsVendBOETrans">
    /// The customs vend BOE trans rec id.
    /// </param>
    protected void setNewPostingPurchAndInventQty_IN(RefRecId _customsVendBOETrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmTableLog</Name>
				<Source><![CDATA[
    void setParmTableLog(VendDocumentTableMap _parmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreviousVersionQuantityFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the previous version quantity fields for documents that support versioning.
    /// </summary>
    /// <param name="_vendDocumentLineMap">
    /// The parameter line to the the fields on.
    /// </param>
    /// <param name="_previousPurchQty">
    /// The previous version quantity field in purchase unit of measure.
    /// </param>
    /// <param name="_previousInventQty">
    /// The previous version quantity field in inventory unit of measure.
    /// </param>
    /// <param name="_previousCWQty">
    /// The previous version quantity field in catch weight unit of measure.
    /// </param>
    protected void setPreviousVersionQuantityFields(VendDocumentLineMap  _vendDocumentLineMap,
                                                    PurchQty             _previousPurchQty,
                                                    InventQty            _previousInventQty
                                                    , PdsCWInventQty     _previousCWQty
                                                    )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMayJournalBePosted</Name>
				<Source><![CDATA[
    protected boolean skipMayJournalBePosted()
    {
        boolean skip = super();

        if (!skip)
        {
            if (interCompanyParmId)
            {
                skip = true;
            }
        }

        return skip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipOrderIdInReSelect</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>origPurchId</c> value should be skipped in the <c>reSelect</c> method.
    /// </summary>
    /// <param name="_purchTable">
    ///    The current <c>purchTable</c> record.
    /// </param>
    /// <param name="_parmTable">
    ///    The current header record.
    /// </param>
    /// <param name="_parmSubTable">
    ///    The current subheader record.
    /// </param>
    /// <returns>
    ///    false if the <c>origPurchId</c> value may be used in the <c>reSelect</c> method; otherwise, true.
    /// </returns>
    /// <remarks>
    ///    This method is used for purchase invoices.
    /// </remarks>
    protected boolean skipOrderIdInReSelect(PurchTable _purchTable, VendDocumentTableMap _parmTable, VendDocumentSubTableMap _parmSubTable)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineTableId</Name>
				<Source><![CDATA[
    protected TableId sourceLineTableId()
    {
        return tableNum(PurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableTableId</Name>
				<Source><![CDATA[
    protected TableId sourceTableTableId()
    {
        return tableNum(PurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitDeliveryInformation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits delivery information.
    /// </summary>
    /// <param name="_splitDeliveryInformation">
    /// The split delivery information.
    /// </param>
    /// <returns>
    /// The split result.
    /// </returns>
    public NoYes splitDeliveryInformation_IN(NoYes  _splitDeliveryInformation = purchParmUpdate.SplitDeliveryInformation_IN)
    {
        purchParmUpdate.SplitDeliveryInformation_IN = _splitDeliveryInformation;
        return purchParmUpdate.SplitDeliveryInformation_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitInventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if invoices in update should be splitted by inventory profile types
    /// </summary>
    /// <param name="_splitInventProfileType">
    /// Parameter, if true should be splitted
    /// </param>
    /// <returns>
    /// True, if invoices in update should be splitted by inventory profile types
    /// </returns>
    public NoYes splitInventProfileType_RU(NoYes _splitInventProfileType = purchParmUpdate.SplitInventProfileType_RU)
    {
        purchParmUpdate.SplitInventProfileType_RU = _splitInventProfileType;
        return purchParmUpdate.SplitInventProfileType_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitPostingProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if invoices in update should be splitted by posting profiles
    /// </summary>
    /// <param name="_splitPostingProfile">
    /// Parameter, if true should be splitted
    /// </param>
    /// <returns>
    /// True, if invoices in update should be splitted by posting profiles
    /// </returns>
    public NoYes splitPostingProfile_RU(NoYes _splitPostingProfile = purchParmUpdate.SplitPostingProfile_RU)
    {
        purchParmUpdate.SplitPostingProfile_RU = _splitPostingProfile;
        return purchParmUpdate.SplitPostingProfile_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumNum</Name>
				<Source><![CDATA[
    protected Num  sumNum(Num  _sumNum = purchParmUpdate.SumNum)
    {
        purchParmUpdate.SumNum = _sumNum;
        return purchParmUpdate.SumNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate(TransDate _transDate = transDate)
    {
        VendDocumentTableMap localParmTable = this.initParmTable();

        if (!_transDate)
        {
            localParmTable.Ordering = this.parmDocumentStatus();
            localParmTable.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, TransDate), localParmTable.TableId),
                                        purchTable,
                                        this.parmLedgerJournalTrans());
            _transDate = localParmTable.TransDate;
        }

        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmTable</Name>
				<Source><![CDATA[
    protected void  updateParmTable(VendDocumentTableMap      _parmTable,
                          PurchTable                    _purchTable,
                          Name                          _purchName          = _purchTable.PurchName,
                          VendName                      _deliveryName       = _purchTable.DeliveryName,
    LogisticsLocationRecId        _deliveryLocation   = _purchTable.deliveryLocation(),
                                   CustPostingProfile     _postingProfile_RU    = _purchTable.PostingProfile,
                                   InventProfileType_RU   _inventProfileType_RU = InventProfileType_RU::General)

    {
        // <GEERU>
        #ISOCountryRegionCodes
        boolean     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        Debug::assert(_parmTable.TableId != tableNum(VendDocumentTableMap));
        _parmTable.initFromPurchTable(_purchTable);

        _parmTable.PurchName               = _purchName;
        _parmTable.DeliveryName            = _deliveryName;
        _parmTable.DeliveryPostalAddress   = LogisticsPostalAddress::findByLocation(_deliveryLocation).RecId;
        // <GEERU>
        if (countryRegion_RU)
        {
            _parmTable.PostingProfile       = _postingProfile_RU;
            _parmTable.VendDocumentTableMap::parmInventProfileType_RU(_inventProfileType_RU);
        }
        // </GEERU>

        _parmTable.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, PaymMode), _parmTable.TableId), _purchTable);
        _parmTable.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, PaymSpec), _parmTable.TableId), _purchTable);
        _parmTable.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, VendBankAccountID), _parmTable.TableId), _purchTable);
        _parmTable.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, FixedDueDate), _parmTable.TableId), _purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void updateQueryBuild()
    {
        super();

        if (this.useLateSelectionQuery() && !this.parmUsePackedMapInChooseLinesQuery())
        {
            return;
        }

        if (!this.parmDatasourceRecordsPacked())
        {
            if (interCompanyMapPacked)
            {
                this.updateQueryDocumentRanges(interCompanyMapPacked, true);
            }
            else
            {
                if (!isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) || chooseLines.query().dataSourceTable(tableNum(PurchTable)))
                {
                    chooseLines.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, PurchId));

                    if (this.invoiceAccountInQuery())
                    {
                        chooseLines.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, InvoiceAccount));
                    }

                    if (this.vendAccountInQuery())
                    {
                        chooseLines.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, OrderAccount));
                    }

                    chooseLines.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, PurchPoolId));

                    this.addPurchStatusRange();

                    if (purchTable)
                    {
                        chooseLines.query().dataSourceTable(tableNum(PurchTable)).rangeField(fieldNum(PurchTable, PurchId)).value(queryValue(purchTable.PurchId));

                        if (this.invoiceAccountInQuery())
                        {
                            chooseLines.query().dataSourceTable(tableNum(PurchTable)).rangeField(fieldNum(PurchTable, InvoiceAccount)).value(queryValue(purchTable.InvoiceAccount));
                        }

                        if (this.vendAccountInQuery())
                        {
                            chooseLines.query().dataSourceTable(tableNum(PurchTable)).rangeField(fieldNum(PurchTable, OrderAccount)).value(queryValue(purchTable.OrderAccount));
                        }

                        chooseLines.query().dataSourceTable(tableNum(PurchTable)).rangeField(fieldNum(PurchTable, PurchPoolId)).value(queryValue(purchTable.PurchPoolId));
                    }
                }
            }
        }
        else
        {
            setPrefix("@SYS25781");
            this.updateQueryDocumentRanges(this.parmDatasourceRecordsPacked(), this.parmCallerTable().TableId == tableNum(EGAISWaybillJour_RU));
        }

        this.updateQueryBuildLines();
        this.updateQueryBuildSpecQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query build.
    /// </summary>
    /// <param name="_customsImportOrderType">
    /// The customs import order type.
    /// </param>
    protected void updateQueryBuild_IN(CustomsImportOrderType_IN _customsImportOrderType)
    {
        Map             mapPurchTable;
        MapEnumerator   mapPurchTableEnumerator;
        PurchTable      localPurchTable;
        PurchTable_W    localPurchTable_W;
        PurchTable_W    purchTable_W;
        SysGlobalCache  cache
    = classfactory.globalCache()
    ;
        int             noSelected;

        #Query

        this.initQueryBuild();

        if (this.parmDatasourceRecordsPacked())
        {
            mapPurchTable = Map::create(datasourceRecordsPacked);
            mapPurchTableEnumerator = mapPurchTable.getEnumerator();

            chooseLines.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, PurchId));

            while (mapPurchTableEnumerator.moveNext())
            {
                localPurchTable = mapPurchTableEnumerator.currentValue();
                localPurchTable_W = localPurchTable.purchTable_W();

                if ((_customsImportOrderType == CustomsImportOrderType_IN::ImportOrder      &&
                        localPurchTable_W.CustomsImportOrder_IN == NoYes::Yes)                    ||
                        (_customsImportOrderType == CustomsImportOrderType_IN::PurchaseOrder    &&
                        localPurchTable_W.CustomsImportOrder_IN == NoYes::No))
                {
                    chooseLines.query().dataSourceTable(tableNum(PurchTable)).findRange(fieldNum(PurchTable, PurchId)).value(queryValue(localPurchTable.PurchId));
                }
                else
                {
                    chooseLines.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, PurchId)).value(queryValue(''));
                }
                noSelected++;
            }
            // If no Rows was selected, make sure the query doesn't select all row's (no criteria is the equivalent of select all).
            if (noSelected == 0)
            {
                chooseLines.query().dataSourceTable(this.sourceTableTableId()).enabled(false);
            }
        }
        else
        {
            purchTable_W = purchTable.purchTable_W();
            if ((_customsImportOrderType == CustomsImportOrderType_IN::ImportOrder      &&
                purchTable_W.CustomsImportOrder_IN == NoYes::Yes)                    ||
                (_customsImportOrderType == CustomsImportOrderType_IN::PurchaseOrder    &&
                purchTable_W.CustomsImportOrder_IN == NoYes::No))
            {
                chooseLines.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, PurchId)).value(queryValue(purchTable.PurchId));
            }
            else
            {
                chooseLines.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, PurchId)).value(queryValue(''));
            }
        }

        this.updateQueryBuildLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>chooseLines</c> query with line conditions and sort fields.
    /// </summary>
    protected void updateQueryBuildLines()
    {
        chooseLines.query().dataSourceTable(tableNum(PurchLine)).addRange(fieldNum(PurchLine, Blocked)).value(queryValue(NoYes::No));

        chooseLines.query().dataSourceTable(tableNum(PurchLine)).addSortField(fieldNum(PurchLine, PurchId));
        chooseLines.query().dataSourceTable(tableNum(PurchLine)).addSortField(fieldNum(PurchLine, LineNumber));

        chooseLines.query().dataSourceTable(tableNum(InventDim)).addRange(fieldNum(InventDim, InventSiteId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildSpecQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query ranges specific to SpecQty settings.
    /// </summary>
    protected void updateQueryBuildSpecQty()
    {
        QueryBuildDataSource qbds;
        QueryBuildRange qbr;

        if (purchParmUpdate.SpecQty == PurchUpdate::ReceiveNow)
        {
            // Only include lines with a ReceiveNow quantity
            // Change join mode of line datasources to outer join so that we will still
            // create a header in doChooseLines(), even if there are no lines with ReceiveNow
            qbds = chooseLines.query().dataSourceTable(tableNum(PurchLine));
            if (qbds)
            {
                qbds.joinMode(JoinMode::OuterJoin);
                qbr = SysQuery::findOrCreateRange(qbds, fieldNum(PurchLine, PurchReceivedNow));
                qbr.value(SysQuery::valueNot(0));
                qbr.status(RangeStatus::Hidden);
            }

            qbds = chooseLines.query().dataSourceTable(tableNum(InventDim));
            if (qbds)
            {
                qbds.joinMode(JoinMode::OuterJoin);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryDocumentRanges</Name>
				<Source><![CDATA[
    protected int updateQueryDocumentRanges(container _datasourceRecordsPackedMap, boolean _abortOnError = false)
    {
        int             ret;
        Counter         counter;
        Map             map;
        MapEnumerator   mapEnumerator;
        PurchTable      localPurchTable;
        PurchTable_W    localPurchTable_W;
        QueryBuildRange rangePurchTable;

        ret = super(_datasourceRecordsPackedMap, _abortOnError);

        if (TaxParameters::isCustomsEnable_IN() &&
            ret                                 &&
            _datasourceRecordsPackedMap)
        {
            counter = 0;
            map = Map::create(_datasourceRecordsPackedMap);
            mapEnumerator = map.getEnumerator();

            while (mapEnumerator.moveNext())
            {
                localPurchTable = mapEnumerator.currentValue();
                localPurchTable_W = localPurchTable.purchTable_W();

                if (localPurchTable_W.CustomsImportOrder_IN == NoYes::Yes)
                {
                    counter ++;
                }
                if (counter == conPeek(_datasourceRecordsPackedMap, 4))
                {
                    ttsbegin;
                    select forupdate purchParmUpdate
                        where purchParmUpdate.ParmId == parmId;
                    purchParmUpdate.CustomsImportOrderType_IN = CustomsImportOrderType_IN::ImportOrder;
                    purchParmUpdate.update();
                    ttscommit;
                }
                this.parmCustomsImportOrderType_IN(purchParmUpdate.CustomsImportOrderType_IN);
            }

            map = Map::create(_datasourceRecordsPackedMap);
            mapEnumerator = map.getEnumerator();

            while (mapEnumerator.moveNext())
            {
                localPurchTable = mapEnumerator.currentValue();
                localPurchTable_W = localPurchTable.purchTable_W();

                if ((localPurchTable_W.CustomsImportOrder_IN == NoYes::Yes && purchParmUpdate.CustomsImportOrderType_IN    == CustomsImportOrderType_IN::PurchaseOrder) ||
                       (localPurchTable_W.CustomsImportOrder_IN == NoYes::No  && purchParmUpdate.CustomsImportOrderType_IN == CustomsImportOrderType_IN::ImportOrder))
                {
                    rangePurchTable = chooseLines.query().dataSourceTable(tableNum(PurchTable)).findRange(fieldNum(PurchTable, PurchId));
                    if (rangePurchTable)
                    {
                        rangePurchTable.value(queryValue(''));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTableSplit_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the table split information.
    /// </summary>
    /// <param name="_toTable">
    /// The split table.
    /// </param>
    /// <param name="_fromLine">
    /// The split line.
    /// </param>
    protected void updateTableSplit_IN(Common _toTable, Common _fromLine)
    {
        PurchLine       purchLine;
        PurchParmLine   purchParmLine;
        PurchTable      localpurchTable;
        PurchParmTable  purchParmTable;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine  vendInvoiceInfoLine;

        switch (_toTable.TableId)
        {
            case tableNum(PurchParmTable) :
                purchParmTable = _toTable;
                break;

            case tableNum(PurchTable) :
                localpurchTable = _toTable;
                break;

            case tableNum(VendInvoiceInfoTable) :
                vendInvoiceInfoTable = _toTable;
                break;
        }

        if (this.splitDeliveryInformation_IN())
        {
            switch (_fromLine.TableId)
            {
                case tableNum(PurchParmLine) :
                    purchParmLine = _fromLine;

                    switch (_toTable.TableId)
                    {
                        case tableNum(PurchParmTable) :

                            purchParmTable.DeliveryPostalAddress    = purchParmLine.DeliveryPostalAddress;
                            purchParmTable.DeliveryName             = purchParmLine.DeliveryName;

                        break;
                    }
                    break;
                case tableNum(VendInvoiceInfoLine) :
                    vendInvoiceInfoLine = _fromLine;

                    switch (_toTable.TableId)
                    {
                        case tableNum(VendInvoiceInfoTable) :
                            vendInvoiceInfoTable.DeliveryPostalAddress = vendInvoiceInfoLine.DeliveryPostalAddress;
                            vendInvoiceInfoTable.DeliveryName          = vendInvoiceInfoLine.DeliveryName;

                            break;
                    }
                    break;
                case tableNum(PurchLine) :
                    purchLine = _fromLine;

                    switch (_toTable.TableId)
                    {
                        case tableNum(PurchParmTable) :
                            purchParmTable.DeliveryName          = purchLine.DeliveryName;
                            purchParmTable.DeliveryPostalAddress = purchLine.DeliveryPostalAddress;
                            break;

                        case tableNum(PurchTable) :
                            localpurchTable.DeliveryName                = purchLine.DeliveryName;
                            localpurchTable.DeliveryPostalAddress       = purchLine.DeliveryPostalAddress;

                            break;

                        case tableNum(VendInvoiceInfoTable) :
                            vendInvoiceInfoTable.DeliveryName          = purchLine.DeliveryName;
                            vendInvoiceInfoTable.DeliveryPostalAddress = purchLine.DeliveryPostalAddress;

                            break;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLateSelectionQuery</Name>
				<Source><![CDATA[
    protected boolean useLateSelectionQuery()
    {
        return purchParmUpdate.LateSelection && purchParmUpdate.LateSelectionQuery != conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSplitting</Name>
				<Source><![CDATA[
    protected boolean useSplitting()
    {
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() ||
            TaxWithholdParameters_IN::checkTaxParameters())
        {
            return this.splitDeliveryInformation_IN();
        }
        // </GIN>
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccountInQuery</Name>
				<Source><![CDATA[
    protected boolean  vendAccountInQuery()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowJournal</Name>
				<Source><![CDATA[
    static boolean allowJournal(DocumentStatus _documentStatus, PurchTable _purchTable)
    {
        PurchFormletterParmData purchFormletterParmData = PurchFormletterParmData::newData(_documentStatus);

        return purchFormletterParmData.mayJournalBePosted(_purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates posting data.
    /// </summary>
    /// <param name="_purchFormletterContractPacked">
    ///   A packed version of a <c>PurchFormletterContract</c> class.
    /// </param>
    /// <param name="_append">
    ///   A <c>boolean</c> value determining whether existing lines should be deleted.
    /// </param>
    /// <param name="_reuseParmUpdate">
    ///   A <c>boolean</c> value determining whether to reuse any exising <c>PurchParmUpdate</c> record; optional.
    /// </param>
    /// <param name="_onlyCreateParmUpdate">
    ///   A <c>boolean</c> value determining whether it is only the <c>PurchParmUpdate</c> record that should be created; optional.
    /// </param>
    /// <param name="_executeLateSelection">
    ///   A <c>boolean</c> value determining whether to execute the late selection <c>Query</c>; optional.
    /// </param>
    /// <param name="_canShowDialogs">
    ///   A <c>boolean</c> value determining whether dialogs will be shown as part of this execution; optional.
    /// </param>
    /// <returns>
    ///   A <c>container</c> with the result of the data creation; optional.
    /// </returns>
    /// <remarks>
    ///   Passing false in the _canShowDialogs parameter forces the code to be executed in IL.
    /// </remarks>
    static public container chooseLinesServer(
        container      _purchFormletterContractPacked,
        boolean        _append,
        boolean        _reuseParmUpdate = false,
        boolean        _onlyCreateParmUpdate = false,
        boolean        _executeLateSelection = false,
        boolean        _canShowDialogs = true)
    {
        return (PurchFormletterParmData::executeChooseLinesServer(_purchFormletterContractPacked, _append, _reuseParmUpdate, _onlyCreateParmUpdate, _executeLateSelection));
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesServer_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Choose lines server.
    /// </summary>
    /// <param name="_purchFormletterContractPacked">
    /// The letter contract packed purch form.
    /// </param>
    /// <param name="_append">
    /// If 'True', there is append.
    /// </param>
    /// <param name="_customsImportOrderType">
    /// The customs import order type.
    /// </param>
    /// <param name="_reuseParmUpdate">
    /// If 'True', the reuse parameter is update.
    /// </param>
    /// <param name="_onlyCreateParmUpdate">
    /// If 'True', the only created parameter is update.
    /// </param>
    /// <param name="_executeLateSelection">
    /// The execute late selection.
    /// </param>
    /// <returns>
    /// The instance of the <c>container</c> class.
    /// </returns>
    static public container chooseLinesServer_IN(
        container                 _purchFormletterContractPacked,
        boolean                   _append,
        CustomsImportOrderType_IN _customsImportOrderType,
        boolean                   _reuseParmUpdate = false,
        boolean                   _onlyCreateParmUpdate = false,
        boolean                   _executeLateSelection = false)
    {
        PurchFormletterParmData purchFormletterParmData = PurchFormletterParmData::newChooseLines(_purchFormletterContractPacked,
                                                                                                  _reuseParmUpdate,
                                                                                                  _onlyCreateParmUpdate,
                                                                                                  _executeLateSelection);
        purchFormletterParmData.createData_IN(_customsImportOrderType, _append);

        return purchFormletterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeChooseLinesServer</Name>
				<Source><![CDATA[
    static private container executeChooseLinesServer(
        container      _purchFormletterContractPacked,
        boolean        _append,
        boolean        _reuseParmUpdate = false,
        boolean        _onlyCreateParmUpdate = false,
        boolean        _executeLateSelection = false)
    {
        // <GEERU><GEEU>
        #IsoCountryRegionCodes
        #EECountryRegionCodes
        // </GEEU></GEERU>

        PurchFormletterParmData purchFormletterParmData = PurchFormletterParmData::newChooseLines(_purchFormletterContractPacked,
                                                                                                  _reuseParmUpdate,
                                                                                                  _onlyCreateParmUpdate,
                                                                                                  _executeLateSelection);
        purchFormletterParmData.createData(_append);

        // <GEERU><GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
        {
            purchFormletterParmData.initOfficials_RU();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeCZHUPLRU))
        {
            purchFormletterParmData.checkAdvancePayments_W();
        }
        // </GEEU></GEERU>

        return purchFormletterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initpurchParmUpdateFormletter</Name>
				<Source><![CDATA[
    public static PurchParmUpdate initpurchParmUpdateFormletter(DocumentStatus _documentStatus,
                                                                container      _purchFormletterPacked)
    {
        PurchParmUpdate         purchParmUpdate;
        PurchFormLetter         purchFormLetter;
        PurchFormletterParmData purchFormletterParmData = PurchFormletterParmData::newData(_documentStatus);

        purchFormLetter = PurchFormLetter::construct(_documentStatus);
        purchFormLetter.unpack(_purchFormletterPacked);

        purchFormletterParmData.parmParmUpdateSysLastValue(purchFormLetter.purchParmUpdate());
        purchFormletterParmData.parmParmIdSynched(purchFormLetter.parmIdSynched());
        purchFormletterParmData.parmCreditRemaining(purchFormLetter.creditRemaining());
        purchFormletterParmData.parmProforma(purchFormLetter.proforma());
        purchFormletterParmData.parmParmId(purchFormLetter.parmId());

        purchParmUpdate = purchFormletterParmData.createParmUpdate();

        return purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new <c>PurchFormletterParmData</c> from a <c>PurchFormLetterContract</c>.
    /// </summary>
    /// <param name = "_purchFormLetterContract">
    ///     The <c>PurchFormLetterContract</c> to create a new <c>PurchFormletterParmData</c> from.
    ///     </param>
    /// <returns>
    ///     A new <c>PurchFormletterParmData</c> object.
    /// </returns>
    protected static PurchFormletterParmData newFromContract(PurchFormLetterContract _purchFormLetterContract)
    {
        return PurchFormletterParmData::newData(_purchFormLetterContract.getDocumentStatus(), 
                                                _purchFormLetterContract.parmVersioningUpdateType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PurchFormletterParmData</c> class.
    /// </summary>
    /// <param name="_purchFormletterContractPacked">
    /// The packed <c>PurchFormletterContractPacked</c> class to use.
    /// </param>
    /// <param name="_reuseParmUpdate">
    /// A Boolean value that indicates whether to reuse the <c>PurchParmUpdate</c> record.
    /// </param>
    /// <param name="_onlyCreateParmUpdate">
    /// A Boolean value that indicates whether to create the <c>PurchParmUpdate</c> record.
    /// </param>
    /// <param name="_executeLateSelection">
    /// A Boolean value that indicates whether the late selection is executed.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PurchFormletterParmData</c> class.
    /// </returns>
    static PurchFormletterParmData newChooseLines(
        container      _purchFormletterContractPacked,
        boolean        _reuseParmUpdate = false,
        boolean        _onlyCreateParmUpdate = false,
        boolean        _executeLateSelection = false)
    {
        PurchFormLetterContract purchFormLetterContract = PurchFormLetterContract::newFromPackedVersion(_purchFormletterContractPacked);
        PurchFormLetterInvoiceContract invoiceContract;
        PurchFormletterParmData purchFormletterParmData;
        VendDocumentTableMap parmTable;
        Map intercompanyMap;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        // <GEEPL>
        PurchFormLetterSADContract  sadContract;
        PurchFormletterParmDataSAD  sadParmData;
        // </GEEPL>

        if (purchFormLetterContract is PurchFormLetterInvoiceContract)
        {
            invoiceContract = purchFormLetterContract;
        }

        purchFormletterParmData = PurchFormletterParmData::newFromContract(purchFormLetterContract);
        purchFormletterParmData.parmAllowEmptyParmTable(purchFormLetterContract.parmAllowEmptyTable());
        purchFormletterParmData.parmInterCompanyCompanyId(purchFormLetterContract.parmIntercompanyCompanyId());
        purchFormletterParmData.parmInterCompanyParmId(purchFormLetterContract.parmIntercompanyParmId());
        if (purchFormLetterContract.parmIntercompanyMapPacked())
        {
            intercompanyMap = Map::create(SysOperationHelper::base64Decode(purchFormLetterContract.parmIntercompanyMapPacked()));
            if (intercompanyMap.elements())
            {
                purchFormletterParmData.parmInterCompanyMap(intercompanyMap.pack());
            }
        }
        purchFormletterParmData.parmProforma(purchFormLetterContract.parmProforma());
        purchFormletterParmData.parmMultiForm(purchFormLetterContract.parmMultiForm());
        purchFormletterParmData.parmParmIdSynched(purchFormLetterContract.parmParmIdSynched());
        purchFormletterParmData.parmCreditRemaining(purchFormLetterContract.parmCreditRemaining());
        purchFormletterParmData.parmTransDate(purchFormLetterContract.parmTransDate());
        if (purchFormLetterContract.parmChooseLinesQueryPacked())
        {
            purchFormletterParmData.parmQueryChooseLines(new SysQueryRun(SysOperationHelper::base64Decode(purchFormLetterContract.parmChooseLinesQueryPacked())));
        }

        purchFormletterParmData.parmShowQueryForm(purchFormLetterContract.parmShowQueryForm());
        purchFormletterParmData.parmParmUpdateSysLastValue(purchFormLetterContract.parmParmUpdate());
        purchFormletterParmData.parmDatasourceRecordsPacked(purchFormLetterContract.parmDataSourceRecordMapPacked());
        purchFormletterParmData.parmCreateFromLines(purchFormLetterContract.parmCreateFromLines());
        purchFormletterParmData.parmCreateFromHistory(purchFormLetterContract.parmCreateFromHistory());
        purchFormletterParmData.parmSourceTable(purchFormLetterContract.parmSourceTable());
        purchFormletterParmData.parmOnlyCreateParmUpdate(_onlyCreateParmUpdate);
        purchFormletterParmData.parmExecuteLateSelection(_executeLateSelection);

        if (FormLetterContractPackingUseContainerFlight::instance().isEnabled())
        {
            purchFormletterParmData.parmHistoryList(purchFormLetterContract.parmHistoryListContainerPacked());
            purchFormletterParmData.parmLineList(purchFormLetterContract.parmLineListContainerPacked());
        }
        else
        {
            purchFormletterParmData.parmLineList(SysOperationHelper::base64Decode(purchFormLetterContract.parmLineListPacked()));
            purchFormletterParmData.parmHistoryList(SysOperationHelper::base64Decode(purchFormLetterContract.parmHistoryListPacked()));
        }

        purchFormletterParmData.parmParmTableNum(purchFormLetterContract.parmParmTableNum());
        purchFormletterParmData.parmDocumentOrigin(purchFormLetterContract.parmDocumentOrigin());
        purchFormletterParmData.parmNumber(purchFormLetterContract.parmNumber());
        purchFormletterParmData.parmProcessAdditional(purchFormLetterContract.parmProcessAdditional());
        purchFormletterParmData.parmCallerTable(purchFormLetterContract.parmCallerTable());

        //Only used for purchSelectLinesManager
        purchFormletterParmData.parmNewPurchLineRecIdSet(SysOperationHelper::base64Decode(purchFormLetterContract.parmNewPurchLineRecIdSet()));
        purchFormletterParmData.parmDeletePurchLineRecIdSet(SysOperationHelper::base64Decode(purchFormLetterContract.parmDeletePurchLineRecIdSet()));
        purchFormletterParmData.parmDeletePurchTablePurchIdSet(SysOperationHelper::base64Decode(purchFormLetterContract.parmDeletePurchTablePurchIdSet()));

        //Only used for invoice and approval.
        if (invoiceContract)
        {
            if (invoiceContract.parmChooseLinesPendingInvoicePacked())
            {
                purchFormletterParmData.parmQueryChooseLinesPendingInvoice(
                    new SysQueryRun(SysOperationHelper::base64Decode(invoiceContract.parmChooseLinesPendingInvoicePacked()))
                );
            }

            if (invoiceContract.parmExecutingPaymentAuthorizationTask())
            {
                purchFormletterParmData.parmShowQueryForm(false);
            }

            purchFormletterParmData.parmAutoConsolidate(invoiceContract.parmAutoConsolidate());
        }

        //Only used for approval.
        purchFormletterParmData.parmLedgerJournalTrans(purchFormLetterContract.parmLedgerJournalTrans());

        if (purchFormLetterContract.parmParmId() != '')
        {
            parmTable = purchFormLetterContract.parmParmTable();

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                vendInvoiceInfoTable.data(parmTable);

                if ((parmTable.ParmId!= '' || vendInvoiceInfoTable.isDirectInvoice()) && parmTable.ParmId == purchFormLetterContract.parmParmId())
                {
                    purchFormletterParmData.parmExternalDefaultedParmTable(parmTable);
                    purchFormletterParmData.parmSkipParmTableDefaulting(true);
                }
            }
            else
            if (parmTable.ParmId != '' && parmTable.ParmId == purchFormLetterContract.parmParmId())
            {
                purchFormletterParmData.parmExternalDefaultedParmTable(parmTable);
                purchFormletterParmData.parmSkipParmTableDefaulting(true);
            }
        }

        if (purchFormLetterContract.parmSpecQtyIsSet())
        {
            purchFormletterParmData.parmSpecQty(purchFormLetterContract.parmSpecQty());
        }

        if (_reuseParmUpdate)
        {
            purchFormletterParmData.parmParmUpdate(purchFormLetterContract.parmParmUpdate() as PurchParmUpdate);
        }

        // <GEERU>
        if (invoiceContract &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            purchFormletterParmData.parmStorno_RU(invoiceContract.parmStorno_RU());
            purchFormletterParmData.parmFixedExchRate_RU(invoiceContract.parmFixedExchRate_RU());
            purchFormletterParmData.parmExchRate_RU(invoiceContract.parmExchRate_RU());
            purchFormletterParmData.parmUsePostingProfileFromContract_RU(invoiceContract.parmUsePostingProfileFromContract_RU());
            purchFormletterParmData.parmPostingProfile_RU(invoiceContract.parmPostingProfile_RU());
            purchFormletterParmData.parmInventProfileType_RU(invoiceContract.parmInventProfileType_RU());

            if (!invoiceContract.parmSourceTable())
            {
                VendDocumentTableMap parmTableLoc = invoiceContract.parmParmTable();
                PurchTable purchTable = parmTableLoc.purchTable();

                if (purchTable)
                {
                    purchFormletterParmData.parmSourceTable(purchTable);
                }

            }
        }
        // </GEERU>

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoPL ]))
        {
            purchFormletterParmData.parmInventLocationId_PL(purchFormLetterContract.parmInventLocationId_PL());

            sadContract = purchFormLetterContract as PurchFormLetterSADContract;
            sadParmData = purchFormletterParmData as PurchFormletterParmDataSAD;

            if (sadContract && sadParmData)
            {
                sadParmData.parmSADNumberCode_PL(sadContract.parmSADNumberCode_PL());
            }
        }
        // </GEEPL>

        purchFormletterParmData.init();
        return purchFormletterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchFormletterParmData construct(DocumentStatus _documentStatus)
    {
        DocumentStatusFactoryAttribute  attribute   = new DocumentStatusFactoryAttribute(_documentStatus);
        PurchFormletterParmData         parmData    = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PurchFormletterParmData), attribute) as PurchFormletterParmData;

        if(!parmData)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return parmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newData</Name>
				<Source><![CDATA[
    static FormletterParmData newData(DocumentStatus _documentStatus,
                                             VersioningUpdateType _updateType = VersioningUpdateType::Initial)
    {
        PurchFormletterParmData parmData = PurchFormletterParmData::construct(_documentStatus);
        parmData.parmVersioningStrategy(FormLetterParmDataVersioning::newVersioningUpdateType(_updateType, parmData));
        parmData.parmDocumentStatus(_documentStatus);

        return parmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReArrange</Name>
				<Source><![CDATA[
    static PurchFormletterParmData newReArrange(
        container        _purchFormletterContractPacked,
        boolean          _isExecutingInBatch = false)
    {
        PurchFormLetterContract     purchFormLetterContract = PurchFormLetterContract::newFromPackedVersion(_purchFormletterContractPacked);
        PurchFormletterParmData     purchFormletterParmData = PurchFormletterParmData::newData(purchFormLetterContract.getDocumentStatus());
        // <GEEPL>
        PurchFormLetterSADContract  sadContract;
        // </GEEPL>

        purchFormletterParmData.parmParmUpdate(purchFormLetterContract.parmParmUpdate() as PurchParmUpdate);
        purchFormletterParmData.parmIsInBatch(_isExecutingInBatch);
        purchFormletterParmData.parmMultiForm(purchFormLetterContract.parmMultiForm());
        purchFormletterParmData.parmCreateFromLines(purchFormLetterContract.parmCreateFromLines());

        purchFormletterParmData.parmParmTableNum(purchFormLetterContract.parmParmTableNum());
        purchFormletterParmData.parmDocumentOrigin(purchFormLetterContract.parmDocumentOrigin());
        purchFormletterParmData.parmNumber(purchFormLetterContract.parmNumber());
        purchFormletterParmData.parmClearTotals(purchFormLetterContract.parmClearTotals());
        purchFormletterParmData.parmTransDate(purchFormLetterContract.parmTransDate());

        if (FormLetterContractPackingUseContainerFlight::instance().isEnabled())
        {
            purchFormletterParmData.parmLineList(purchFormLetterContract.parmLineListContainerPacked());
        }
        else
        {        
            purchFormletterParmData.parmLineList(SysOperationHelper::base64Decode(purchFormLetterContract.parmLineListPacked()));
        }

        // <GEEPL>
        sadContract = purchFormLetterContract as PurchFormLetterSADContract;
        if (sadContract)
        {
            purchFormletterParmData.parmSADNumberCode_PL(sadContract.parmSADNumberCode_PL());
        }
        // </GEEPL>

        purchFormletterParmData.init();
        return purchFormletterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReSelect</Name>
				<Source><![CDATA[
    static PurchFormletterParmData newReSelect(container        _purchFormletterContractPacked,
                                               PurchParmTable   _parmTable   = null,
                                               boolean          _forceUpdate = false)
    {
        PurchFormLetterContract purchFormLetterContract = PurchFormLetterContract::newFromPackedVersion(_purchFormletterContractPacked);
        PurchFormletterParmData purchFormletterParmData = PurchFormletterParmData::newData(purchFormLetterContract.getDocumentStatus());
        // <GEERU>
        #ISOCountryRegionCodes
        boolean                 countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        // <GEEPL>
        PurchFormLetterSADContract  sadContract;
        // </GEEPL>

        purchFormletterParmData.parmParmUpdate(purchFormLetterContract.parmParmUpdate());
        purchFormletterParmData.parmAllowEmptyParmTable(purchFormLetterContract.parmAllowEmptyTable());
        purchFormletterParmData.parmCreditRemaining(purchFormLetterContract.parmCreditRemaining());
        purchFormletterParmData.parmCreateFromLines(purchFormLetterContract.parmCreateFromLines());

        purchFormletterParmData.parmParmTableNum(purchFormLetterContract.parmParmTableNum());
        purchFormletterParmData.parmDocumentOrigin(purchFormLetterContract.parmDocumentOrigin());
        purchFormletterParmData.parmNumber(purchFormLetterContract.parmNumber());
        purchFormletterParmData.parmTransDate(purchFormLetterContract.parmTransDate());

        if (FormLetterContractPackingUseContainerFlight::instance().isEnabled())
        {
            purchFormletterParmData.parmLineList(purchFormLetterContract.parmLineListContainerPacked());
        }
        else
        {
            purchFormletterParmData.parmLineList(SysOperationHelper::base64Decode(purchFormLetterContract.parmLineListPacked()));
        }

        // <GEERU>
        if (countryRegion_RU && _parmTable)
        {
            purchFormletterParmData.parmParmTable_W        (_parmTable);
            purchFormletterParmData.parmForceUpdate_W      (_forceUpdate);
        }
        // </GEERU>

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            purchFormletterParmData.parmInventLocationId_PL(purchFormLetterContract.parmInventLocationId_PL());
        }
        sadContract = purchFormLetterContract as PurchFormLetterSADContract;
        if (sadContract)
        {
            purchFormletterParmData.parmSADNumberCode_PL(sadContract.parmSADNumberCode_PL());
        }
        // </GEEPL>

        purchFormletterParmData.init();
        return purchFormletterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeServer</Name>
				<Source><![CDATA[
    static public container reArrangeServer(
        container    _purchFormletterContractPacked,
        boolean      _isExecutingInBatch = false)
    {
        PurchFormletterParmData purchFormletterParmData = PurchFormletterParmData::newReArrange(_purchFormletterContractPacked, _isExecutingInBatch);

        purchFormletterParmData.reArrange();

        return purchFormletterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelectServer</Name>
				<Source><![CDATA[
    static public container reSelectServer(container      _purchFormletterContractPacked,
                                                  PurchParmTable _parmTable   = null,
                                                  boolean        _forceUpdate = false)
    {
        // <GEERU>
        PurchFormletterParmData purchFormletterParmData = PurchFormletterParmData::newReSelect(_purchFormletterContractPacked,
                                                                                               _parmTable,
                                                                                               _forceUpdate);
        // </GEERU>
        purchFormletterParmData.reSelect();

        return purchFormletterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeUpdateParmTable</Name>
				<Source><![CDATA[
    protected void reArrangeUpdateParmTable(VendDocumentTableMap _parmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        TransitDocumentManager_IN   transitDocManager;
        SetEnumerator               setEnum;
        FormletterParmTable         purchParmTableTransit;
        FormletterParmLine          purchParmLineTransit;
        PurchTable                  purchTableTransit;
        PurchLine                   purchLineTransit;
        VendInvoiceInfoLineTaxExtension_IN  vendInvoiceInfoLine_IN;
        PurchParmLine_IN                    purchParmLine_IN;
        CustomsVendBOETrans_IN              customsVendBOETrans_IN;
        
        transitDocManager = TransitDocumentManager_IN::newManager();
        if (transitDocManager.existsAnyTransitDocType() &&
                transitDocManager.existTransitRuleForTransType(tableNum(PurchTable)))
        {
            setEnum = parmTableMap.valueSet().getEnumerator();
            while (setEnum.moveNext())
            {
                purchParmTableTransit = setEnum.current();

                select firstOnly purchTableTransit
                        where purchTableTransit.PurchId == purchParmTableTransit.OrderId;

                transitDocManager.transit(purchTableTransit, purchParmTableTransit);

                purchParmLineTransit = new DictTable(this.parmLineTableId()).makeRecord();

                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) 
                    && (purchTableTransit.DocumentStatus == DocumentStatus::BillOfEntry_IN
                        || purchTableTransit.DocumentStatus == DocumentStatus::PackingSlip)
                    && purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN)
                {
                    // for Import order
                    if (this.parmLineTableId() == tableNum(PurchParmLine))
                    {
                        while select customsVendBOETrans_IN
                                where customsVendBOETrans_IN.PurchId == purchTableTransit.PurchId
                                join purchParmLineTransit
                                    where purchParmLineTransit.ParmId == purchParmTableTransit.ParmId
                                        && purchParmLineTransit.TableRefId == purchParmTableTransit.TableRefId
                                join PurchParmLine, SourceTableId, SourceRecId from purchParmLine_IN
                                    where purchParmLine_IN.PurchParmLine == purchParmLineTransit.RecId
                                        && purchParmLine_IN.SourceTableId == tableNum(customsVendBOETrans_IN)
                                        && purchParmLine_IN.SourceRecId == customsVendBOETrans_IN.RecId
                        {
                            transitDocManager.transit(customsVendBOETrans_IN, purchParmLineTransit, purchParmTableTransit);
                        }
                    }
                    else if (this.parmLineTableId() == tableNum(VendInvoiceInfoLine))
                    {
                        while select customsVendBOETrans_IN
                                where customsVendBOETrans_IN.PurchId == purchTableTransit.PurchId
                                join purchParmLineTransit
                                    where purchParmLineTransit.ParmId == purchParmTableTransit.ParmId
                                        && purchParmLineTransit.TableRefId == purchParmTableTransit.TableRefId
                                join VendInvoiceInfoLine, SourceTableId, SourceRecId from vendInvoiceInfoLine_IN
                                    where vendInvoiceInfoLine_IN.VendInvoiceInfoLine == purchParmLineTransit.RecId
                                        && vendInvoiceInfoLine_IN.SourceTableId == tableNum(customsVendBOETrans_IN)
                                        && vendInvoiceInfoLine_IN.SourceRecId == customsVendBOETrans_IN.RecId
                        {
                            transitDocManager.transit(customsVendBOETrans_IN, purchParmLineTransit, purchParmTableTransit);
                        }
                    }
                }
                else
                {
                // </GIN>
                    while select purchLineTransit
                        join purchParmLineTransit
                            where purchParmLineTransit.TableRefId == purchParmTableTransit.TableRefId
                                && purchParmLineTransit.ParmId == purchParmTableTransit.ParmId
                                && purchParmLineTransit.SourceLineRecId == purchLineTransit.RecId
                    {
                        transitDocManager.transit(purchLineTransit, purchParmLineTransit, purchParmTableTransit);
                    }
                // <GIN>
                }
                // </GIN>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add initialization process when new method is called.
    /// </summary>
    protected void initializePurchParameters ()
    {
        purchParameters = PurchParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify localParmLine before createParmLineRecord method is called.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase line to reference when you create the parameter lines.
    /// </param>
    /// <param name="_localParmLine">
    /// The initialized purchase parameter line record.
    /// </param>
    protected void setParmLine(PurchLine _purchLine, VendDocumentLineMap _localParmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendDocumentLineMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the records should be inserted.
    /// </summary>
    /// <param name = "_purchParmLine">The <c>PurchParmLine</c> record.</param>
    /// <returns>
    /// true if record should be inserted; otherwise, false.
    /// </returns>
    protected boolean VendDocumentLineMap(VendDocumentLineMap _purchParmLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal FormLetterInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchFormLetterInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>