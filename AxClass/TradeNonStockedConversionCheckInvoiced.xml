<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionCheckInvoiced</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TradeNonStockedConversionCheckInvoiced</c> class checks for transaction that are not fully invoiced.
/// </summary>
class TradeNonStockedConversionCheckInvoiced
extends TradeNonStockedConversionCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes all checks.
    /// </summary>
    /// <returns>
    /// true if all checks pass; otherwise, false.
    /// </returns>
    public boolean check()
    {
        boolean ok;

        ok = this.checkInventTrans();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>InventTrans</c> table for transactions that are not fully invoiced.
    /// </summary>
    /// <returns>
    /// true if no transactions exists; otherwise, false.
    /// </returns>
    private boolean checkInventTrans()
    {
        boolean             ok = true;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTransAssembly;
        TradeNonStockedConversionItem conversionItem;

        while select crosscompany conversionItem
            where conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
            &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
            &&   (!this.singleItemCheck()
            ||    (conversionItem.ItemIdDataAreaId    == tradeNonStockedConversionItem.ItemIdDataAreaId
            &&     conversionItem.ItemId              == tradeNonStockedConversionItem.ItemId))
            join InventTransId, ReferenceId, ReferenceCategory from inventTransOrigin
                where inventTransOrigin.ItemId        == conversionItem.ItemId
                &&    inventTransOrigin.DataAreaId    == conversionItem.ItemIdDataAreaId
                &&    (inventTransOrigin.ReferenceCategory == InventTransType::Purch
                ||     inventTransOrigin.ReferenceCategory == InventTransType::Sales)
                    exists join inventTrans
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                        &&    inventTrans.ValueOpen         == InventTransOpen::Yes
                        &&    (inventTrans.StatusReceipt    == StatusReceipt::Received
                        ||     inventTrans.StatusReceipt    == StatusReceipt::Registered
                        ||     inventTrans.StatusReceipt    == StatusReceipt::Arrived
                        ||     inventTrans.StatusIssue      == StatusIssue::Deducted
                        ||     inventTrans.StatusIssue      == StatusIssue::Picked)

        {
            ok = false;
            this.writeLog(conversionItem,
                          tablenum(InventTransOrigin),
                          fieldnum(InventTransOrigin, InventTransId),
                          inventTransOrigin.InventTransId,
                          this.inventReferenceCategoryToTableId(inventTransOrigin.ReferenceCategory),
                          inventTransOrigin.ReferenceId);
        }

        while select crosscompany conversionItem
                where conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                &&    conversionItem.Status             == TradeNonStockedConversionStatus::Draft
                &&   (!this.singleItemCheck()
                ||    (conversionItem.ItemIdDataAreaId == tradeNonStockedConversionItem.ItemIdDataAreaId
                &&     conversionItem.ItemId           == tradeNonStockedConversionItem.ItemId))
            join RecId, InventTransId, ReferenceId, ReferenceCategory from inventTransOrigin
                where inventTransOrigin.ItemId     == conversionItem.ItemId
                &&    inventTransOrigin.DataAreaId == conversionItem.ItemIdDataAreaId
                exists join inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    &&    inventTrans.ValueOpen == InventTransOpen::Yes
                    &&    (inventTrans.StatusIssue == StatusIssue::OnOrder
                    ||     inventTrans.StatusIssue == StatusIssue::ReservOrdered
                    ||     inventTrans.StatusIssue == StatusIssue::ReservPhysical)
        {
            select firstonly crosscompany RecId from inventTransAssembly
                where inventTransAssembly.InventTransOrigin == inventTransOrigin.RecId
                &&    inventTransAssembly.StatusIssue       == StatusIssue::Sold;

            if (inventTransAssembly)
            {
                ok = false;

                this.writeLog(conversionItem,
                              tablenum(InventTransOrigin),
                              fieldnum(InventTransOrigin, InventTransId),
                              inventTransOrigin.InventTransId,
                              this.inventReferenceCategoryToTableId(inventTransOrigin.ReferenceCategory),
                              inventTransOrigin.ReferenceId);
            }
        }

        while select crosscompany conversionItem
                where conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
                &&   (!this.singleItemCheck()
                ||    (conversionItem.ItemIdDataAreaId    == tradeNonStockedConversionItem.ItemIdDataAreaId
                &&     conversionItem.ItemId              == tradeNonStockedConversionItem.ItemId))
            join RecId, InventTransId, ReferenceId, ReferenceCategory from inventTransOrigin
                where inventTransOrigin.ItemId     == conversionItem.ItemId
                &&    inventTransOrigin.DataAreaId == conversionItem.ItemIdDataAreaId
                exists join inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    &&    inventTrans.ValueOpen         == InventTransOpen::Yes
                    &&    inventTrans.StatusReceipt     == StatusReceipt::Ordered
        {
            select firstonly crosscompany RecId from inventTransAssembly
                where inventTransAssembly.InventTransOrigin == inventTransOrigin.RecId
                &&    inventTransAssembly.StatusReceipt     == StatusReceipt::Purchased;

            if (inventTransAssembly)
            {
                ok = false;

                this.writeLog(conversionItem,
                              tablenum(InventTransOrigin),
                              fieldnum(InventTransOrigin, InventTransId),
                              inventTransOrigin.InventTransId,
                              this.inventReferenceCategoryToTableId(inventTransOrigin.ReferenceCategory),
                              inventTransOrigin.ReferenceId);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the issue type.
    /// </summary>
    /// <returns>
    ///    An element of the <c>TradeNonStockedConversionIssue</c> enumeration type.
    /// </returns>
    protected TradeNonStockedConversionIssue issueType()
    {
        return TradeNonStockedConversionIssue::NotFullyInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes all checks in the <c>TradeNonStockedConversionCheckInvoiced</c> class.
    /// </summary>
    /// <param name="_tradeNonStockedConversion">
    /// A <c>TradeNonStockedConversion</c> record.
    /// </param>
    /// <param name="_tradeNonStockedConversionItem">
    /// A <c>TradeNonStockedConversionItem</c> record; optional.
    /// </param>
    /// <returns>
    /// true if all checks pass; otherwise, false.
    /// </returns>
    static public boolean checkAll(
        TradeNonStockedConversion       _tradeNonStockedConversion,
        TradeNonStockedConversionItem   _tradeNonStockedConversionItem  = null)

    {
        boolean ok;

        TradeNonStockedConversionCheckInvoiced tradeNonStockedConversionCheckInvoiced = TradeNonStockedConversionCheckInvoiced::construct();
        tradeNonStockedConversionCheckInvoiced.parmTradeNonStockedConversion(_tradeNonStockedConversion);
        tradeNonStockedConversionCheckInvoiced.parmTradeNonStockedConversionItem(_tradeNonStockedConversionItem);
        ok = tradeNonStockedConversionCheckInvoiced.check();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static public TradeNonStockedConversionCheckInvoiced construct()
    {
        return new TradeNonStockedConversionCheckInvoiced();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>