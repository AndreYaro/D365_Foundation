<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAsyncCustomerCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailAsyncCustomerCreator</c> creates AX customers for <c>RetailAsyncCustomer</c>.
/// </summary>
class RetailAsyncCustomerCreator
{
    RetailAsyncCustomer asyncCustomer;
    RetailAsyncCustomerV2 asyncCustomerV2;
    Batch currentBatch;

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>RetailAsyncCustomer</c> table with the caller record.
    /// </summary>
    /// <param name="args">
    /// A caller arguments.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If the class is not called with particular async customer.
    /// </exception>
    void initFromArgs(Args args)
    {
        if (args && args.dataset())
        {
            if (args.dataset() == tablenum(RetailAsyncCustomer) && args.record())
            {
                asyncCustomer = args.record();
            }
            else if (args.dataset() == tableNum(RetailAsyncCustomerV2) && args.record())
            {
                asyncCustomerV2 = args.record();
            }
            else
            {
                throw error("@retail:AsyncCustomerCreatorInitErr");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentBatch</Name>
				<Source><![CDATA[
    Batch parmCurrentBatch(Batch _batch = currentBatch)
    {
        currentBatch = _batch;

        return currentBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the transactionTable is initialized then sends email to single recepient otherwise send to all recepients of the transactions which are posted.
    /// </summary>
    /// <param name="_schedulerJobTable">
    /// The current instance of <c>RetailConnSchedulerJobTable</c> table.
    /// </param>
    public void run(RetailConnSchedulerJobTable _schedulerJobTable)
    {
        if (asyncCustomer)
        {
            this.createSingleCustomer(asyncCustomer);
        }
        else if (asyncCustomerV2)
        {
            this.processAsyncCustomerOperation(asyncCustomerV2);
        }
        else
        {
            this.createAllCustomers();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProcessAllAsyncCustomerV2Records</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all async customer records available in the <c>RetailAsyncCustomerV2</c> table.
    /// </summary>
    [Hookable(false)]
    internal void ProcessAllAsyncCustomerV2Records()
    {
        RetailAsyncCustomerV2 retailAsyncCustomerV2;

        while select retailAsyncCustomerV2
            order by retailAsyncCustomerV2.OperationTimeStamp, retailAsyncCustomerV2.Operation asc
            where retailAsyncCustomerV2.OnlineOperationCompleted == NoYes::No
        {
            System.Exception ex;
            try
            {
                ttsbegin;

                this.processAsyncCustomerOperation(retailAsyncCustomerV2);

                ttscommit;
            }
            catch (ex)
            {
                warning(ex.Message);
                warning("@Retail:AsyncCustomerV2OperationError");

                eventSource.EventWriteAsyncCustomerV2ProcessingFailed(strFmt('OperationId: %1, Exception: %2', retailAsyncCustomerV2.OperationId, ex.ToString()));
            }
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and updates customers and associated first class properties like
    /// Addresses, Contacts, Affiliations and Attributes for all <c>RetailAsyncCustomer</c>.
    /// </summary>
    /// <remarks>
    /// Calls the method <c>sendSingleReceipt</c> to send the emails.
    /// </remarks>
    void createAllCustomers()
    {
        // Find or create customer created in async mode
        RetailAsyncCustomer asyncCust;

        while select forUpdate asyncCust
            index hint CustAccountAsyncIdx
            where asyncCust.OnlineCustCreated == NoYes::No
        {
            this.createSingleCustomer(asyncCust);
        }

        // Process all async customer records in the RetailAsyncCustomerV2 table.
        this.ProcessAllAsyncCustomerV2Records();

        // Process async address records for sync customers.
        RetailTransactionServiceCustomer::ProcessAsyncAddressOperationForSyncCustomer();

        // Process async affilation records for sync customers.
        RetailTransactionServiceCustomer::ProcessAsyncAffiliationOperationForSyncCustomer();

        // Process async contact records for sync customers.
        RetailTransactionServiceCustomer::ProcessAsyncContactOperationForSyncCustomer();

        // Process async attribute records for sync customers.
        RetailTransactionServiceCustomer::ProcessAsyncAttributeOperationForSyncCustomer();

        RetailTransactionServiceCustomer::ProcessAsyncExternalIdentityLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSingleCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends email to the recipients of the transaction table passed as parameter.
    /// </summary>
    /// <param name = "_asyncCustomer">The <c>RetailAsyncCustomer</c></param>
    void createSingleCustomer(RetailAsyncCustomer  _asyncCustomer)
    {
        RetailTransactionServiceCustomer::createAsyncCustomerWithAddresses(_asyncCustomer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        RetailAsyncCustomerCreator customerCreator = new RetailAsyncCustomerCreator();
        RetailConnSchedulerJobTable schedulerJobTable;

        customerCreator.initFromArgs(args);
        customerCreator.run(schedulerJobTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAsyncCustomerOperation</Name>
				<Source><![CDATA[
    /// <summary>Create or modify a customer account for the customer. Link the account to RetailCustTable, if needed.</summary>
    /// <param name = "asyncCust">The async customer that should be created online.</param>
    /// <returns>The <c>CustAccount</c> of the existing/newly created online customer.</returns>
    protected CustAccount processAsyncCustomerOperation(RetailAsyncCustomerV2 asyncCust)
    {
        CustAccount custAccountNum;

        // Use the existing customer if it was already created
        if (asyncCust.OnlineOperationCompleted)
        {
            custAccountNum = asyncCust.CustAccount;
            return custAccountNum;
        }

        // Ensure that the record is set to be updatable.
        asyncCust.selectForUpdate(true);

        // Record the start of the processing operation.
        eventSource.EventWriteAsyncCustomerV2ProcessingStarted(asyncCust.OperationId, asyncCust.Operation);

        // Save the current line number in the InfoLog.
        int fromLine = Global::infologLine();

        switch (asyncCust.Operation)
        {
            case RetailAsyncOperation::Create:
                try
                {
                    DirPartyType dirPartyRelationType = any2Enum(asyncCust.RelationshipType);

                    container result;
                    using (RetailTransactionServiceCustomerContext context = RetailTransactionServiceCustomerContext::construct())
                    {
                        context.parmCustomerTitleRecId(asyncCust.TitleRecordId);

                        result = RetailTransactionServiceCustomer::newCustomer(
                            asyncCust.CustName,
                            asyncCust.CustGroup,
                            asyncCust.Currency,
                            asyncCust.LanguageId,
                            asyncCust.Street,
                            asyncCust.ZipCode,
                            asyncCust.State,
                            asyncCust.County,
                            asyncCust.Phone,
                            asyncCust.CellularPhone,
                            asyncCust.Email,
                            asyncCust.Url,
                            asyncCust.MultiLineDisc,
                            asyncCust.EndDisc,
                            asyncCust.LineDisc,
                            asyncCust.PriceGroup,
                            asyncCust.TaxGroup,
                            asyncCust.CreditMax,
                            asyncCust.Blocked,
                            asyncCust.OrganizationId,
                            asyncCust.UsePurchRequest,
                            asyncCust.VatNum,
                            asyncCust.InvoiceAccount,
                            asyncCust.MandatoryCreditLimit,
                            asyncCust.ContactPersonId,
                            asyncCust.UseOrderNumberReference,
                            asyncCust.ReceiptOption,
                            asyncCust.ReceiptEmail,
                            asyncCust.City,
                            asyncCust.Country,
                            asyncCust.IdentificationNumber,
                            asyncCust.StoreRecId,
                            dirPartyRelationType,
                            asyncCust.StreetNumber,
                            asyncCust.DistrictName,
                            asyncCust.BuildingComplement,
                            asyncCust.cnpjCpfNum_BR,
                            asyncCust.AddressName,
                            asyncCust.AddressType,
                            asyncCust.AddressPhone,
                            asyncCust.AddressEmail,
                            asyncCust.AddressUrl,
                            asyncCust.AddressTaxGroup,
                            asyncCust.FirstName,
                            asyncCust.MiddleName,
                            asyncCust.LastName,
                            asyncCust.PhoneExtension,
                            asyncCust.RetailCustAffiliations);
                    }

                    if (conLen(result) >= 1)
                    {
                        boolean customerCreated = conPeek(result, 1); // validInsert
                        if (customerCreated)
                        {
                            custAccountNum = conPeek(result, 3); // custAccountNum

                            // Associate the RetailCustTable entry for the customer to the async cust id..
                            RetailCustTable retailCustTable = RetailCustTable::find(custAccountNum, true);
                            if (retailCustTable)
                            {
                                retailCustTable.CustAccountAsync = asyncCust.CustAccountAsync;
                                retailCustTable.update();
                            }

                            // Update any external identity mappings for that customer.
                            RetailExternalIdToAsyncCustomerMapV2 retailExternalIdToAsyncCustomerMapV2;
                            RetailIdentityProvider retailIdentityProvider;

                            select forupdate retailExternalIdToAsyncCustomerMapV2 where retailExternalIdToAsyncCustomerMapV2.CustAccountAsync == asyncCust.CustAccountAsync;
                            if (retailExternalIdToAsyncCustomerMapV2)
                            {
                                select retailIdentityProvider where  retailIdentityProvider.RecId == retailExternalIdToAsyncCustomerMapV2.ProviderId;
                                RetailTransactionServiceCustomer::createLinkExternalIdWithCustomer(retailExternalIdToAsyncCustomerMapV2.ExternalIdentityId, retailIdentityProvider.Issuer, custAccountNum, NoYes::Yes);
                                retailExternalIdToAsyncCustomerMapV2.delete();
                            }
                            else
                            {
                                // for backward compatibility.
                                RetailExternalIdToAsyncCustomerMap retailExternalIdToAsyncCustomerMap;
                                select forupdate retailExternalIdToAsyncCustomerMap where retailExternalIdToAsyncCustomerMap.AsyncCustomerAccountNumber == asyncCust.CustAccountAsync;
                                if (retailExternalIdToAsyncCustomerMap)
                                {
                                    select retailIdentityProvider where  retailIdentityProvider.RecId == retailExternalIdToAsyncCustomerMap.ProviderId;
                                    RetailTransactionServiceCustomer::createLinkExternalIdWithCustomer(retailExternalIdToAsyncCustomerMap.ExternalIdentityId, retailIdentityProvider.Issuer, custAccountNum, NoYes::Yes);
                                    retailExternalIdToAsyncCustomerMap.delete();
                                }
                            }

                            // Mark the record as processed.
                            asyncCust.OnlineOperationCompleted = NoYes::Yes;
                            asyncCust.CustAccount = custAccountNum;
                            asyncCust.LastKnownError = '';
                            asyncCust.update();

                            eventSource.EventWriteAsyncCustomerV2ProcessingSuccessful(asyncCust.OperationId, asyncCust.Operation);
                        }
                        else
                        {
                            str errorMessage = '';
                            if (conLen(result) >= 2)
                            {
                                errorMessage = System.String::IsNullOrWhiteSpace(conPeek(result, 2)) ? '' : conPeek(result, 2);
                            }

                            // Save the last known error.
                            asyncCust.LastKnownError = errorMessage;
                            asyncCust.update();

                            eventSource.EventWriteAsyncCustomerV2ProcessingException(asyncCust.OperationId, asyncCust.Operation, errorMessage);
                        }
                    }
                    else
                    {
                        // Save the last known error.
                        asyncCust.LastKnownError = strFmt("@Retail:AsyncCustomerSyncOperationFailedWithUnknownError", RetailTransactionServiceUtilities::getInfologMessages(fromLine));
                        asyncCust.update();

                        eventSource.EventWriteAsyncCustomerV2ProcessingFailedDueToUnparsableResult(asyncCust.OperationId, asyncCust.Operation);
                    }
                }
                catch (Exception::Error)
                {
                    str errorMessage = RetailTransactionServiceUtilities::getInfologMessages(fromLine);

                    // Save the last known error.
                    asyncCust.LastKnownError = strFmt("@Retail:AsyncCustomerSyncOperationFailedWithUnknownError", errorMessage);
                    asyncCust.update();
                }

                break;
            case RetailAsyncOperation::Update:
                // Since this is an update operation, ensure that the customer has already been created.
                custAccountNum = System.String::IsNullOrWhiteSpace(asyncCust.CustAccountAsync) ? asyncCust.CustAccount : RetailTransactionServiceCustomer::getAccountNumberAssociatedToAsyncCustomer(asyncCust.CustAccountAsync);
                CustTable custTable = CustTable::find(custAccountNum, false);

                if (!custTable)
                {
                    // Save the last known error.
                    asyncCust.LastKnownError = "@Retail:AsyncCustomerUpdateFailedWhenUnableToLocateParent";
                    asyncCust.update();

                    eventSource.EventWriteAsyncCustomerV2ProcessingSkippedDueToMissingCustomerRecord(asyncCust.OperationId, asyncCust.Operation);
                    break;
                }

                try
                {
                    container updateResult;
                    using (RetailTransactionServiceCustomerContext context = RetailTransactionServiceCustomerContext::construct())
                    {
                        context.parmCustomerTitleRecId(asyncCust.TitleRecordId);

                        updateResult = RetailTransactionServiceCustomer::updateCustomer(
                                custTable.RecId,
                                asyncCust.CustName,
                                asyncCust.CustGroup,
                                asyncCust.Currency,
                                asyncCust.LanguageId,
                                asyncCust.Phone,
                                0,
                                asyncCust.CellularPhone,
                                asyncCust.Email,
                                0,
                                asyncCust.Url,
                                0,
                                asyncCust.MultiLineDisc,
                                asyncCust.EndDisc,
                                asyncCust.LineDisc,
                                asyncCust.PriceGroup,
                                asyncCust.TaxGroup,
                                asyncCust.CreditMax,
                                asyncCust.Blocked,
                                asyncCust.OrganizationId,
                                asyncCust.UsePurchRequest,
                                asyncCust.VatNum,
                                asyncCust.InvoiceAccount,
                                asyncCust.MandatoryCreditLimit,
                                asyncCust.ContactPersonId,
                                asyncCust.UseOrderNumberReference,
                                asyncCust.ReceiptOption,
                                asyncCust.ReceiptEmail,
                                asyncCust.IdentificationNumber,
                                asyncCust.FirstName,
                                asyncCust.MiddleName,
                                asyncCust.LastName,
                                asyncCust.PhoneExtension,
                                0,
                                asyncCust.RetailCustAffiliations);
                    }

                    if (conLen(updateResult) >= 1)
                    {
                        boolean customerCreated = conPeek(updateResult, 1); // validInsert
                        if (customerCreated)
                        {
                            custAccountNum = conPeek(updateResult, 3); // custAccountNum

                            // Mark the record as processed.
                            asyncCust.OnlineOperationCompleted = NoYes::Yes;
                            asyncCust.CustAccount = custAccountNum;
                            asyncCust.LastKnownError = '';
                            asyncCust.update();

                            eventSource.EventWriteAsyncCustomerV2ProcessingSuccessful(asyncCust.OperationId, asyncCust.Operation);
                        }
                        else
                        {
                            str errorMessage = '';
                            if (conLen(updateResult) >= 2)
                            {
                                errorMessage = System.String::IsNullOrWhiteSpace(conPeek(updateResult, 2)) ? '' : conPeek(updateResult, 2);
                            }

                            // Save the last known error.
                            asyncCust.LastKnownError = errorMessage;
                            asyncCust.update();

                            eventSource.EventWriteAsyncCustomerV2ProcessingException(asyncCust.OperationId, asyncCust.Operation, errorMessage);
                        }
                    }
                    else
                    {
                        // Save the last known error.
                        asyncCust.LastKnownError = strFmt("@Retail:AsyncCustomerSyncOperationFailedWithUnknownError", RetailTransactionServiceUtilities::getInfologMessages(fromLine));
                        asyncCust.update();

                        eventSource.EventWriteAsyncCustomerV2ProcessingFailedDueToUnparsableResult(asyncCust.OperationId, asyncCust.Operation);
                    }
                }
                catch (Exception::Error)
                {
                    str errorMessage = RetailTransactionServiceUtilities::getInfologMessages(fromLine);

                    // Save the last known error.
                    asyncCust.LastKnownError = strFmt("@Retail:AsyncCustomerSyncOperationFailedWithUnknownError", errorMessage);
                    asyncCust.update();
                }

                break;
            default:
                // Nothing to do.
                eventSource.EventWriteAsyncCustomerV2ProcessingSkippedDueToUnhandledOperationType(asyncCust.OperationId, asyncCust.Operation);
                break;
        }

        return custAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProcessCurrentAsyncRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronize a provided <c>RetailAsyncCustomerView</c> record.
    /// </summary>
    /// <param name = "_retailAsyncCustomerView">The record to synchronize.</param>
    [Hookable(false)]
    internal static void ProcessCurrentAsyncRecord(RetailAsyncCustomerView _retailAsyncCustomerView)
    {
        RetailAsyncCustAccount _custAccountNum;
        boolean _validationStatus;
        int fromLine = Global::infologLine();

        [_validationStatus, _custAccountNum] = RetailAsyncCustomerCreator::validateCustAccount(_retailAsyncCustomerView.CustAccount, _retailAsyncCustomerView.CustAccountAsync);

        ttsbegin;
        switch (_retailAsyncCustomerView.RefTableId)
        {
            case tableNum(RetailAsyncCustomerV2):
                RetailAsyncCustomerV2 retailAsyncCustomerV2;
                select firstonly forupdate retailAsyncCustomerV2
                    where retailAsyncCustomerV2.RecId == _retailAsyncCustomerView.RefRecId;

                // If you are updating an async customer record and we cannot locate the corresponding accountNumber, then show an error.
                if (retailAsyncCustomerV2.Operation == RetailAsyncOperation::Update && System.String::IsNullOrWhiteSpace(_custAccountNum))
                {
                    retailAsyncCustomerV2.LastKnownError = strFmt("@Retail:CustomerAccountNotFound", retailAsyncCustomerV2.CustAccountAsync);
                    retailAsyncCustomerV2.update();
                }
                else
                {
                    RetailAsyncCustomerCreator customerCreator = new RetailAsyncCustomerCreator();
                    customerCreator.processAsyncCustomerOperation(retailAsyncCustomerV2);
                }
                break;
            case tableNum(RetailAsyncCustomerContact) :
                RetailAsyncCustomerContact asyncContact;
                select firstonly forupdate asyncContact
                    where asyncContact.RecId == _retailAsyncCustomerView.RefRecId
                        && asyncContact.OnlineOperationCompleted == NoYes::No;

                if (_validationStatus)
                {
                    RetailTransactionServiceCustomer::processAsyncCustContactOperation(asyncContact, _custAccountNum);
                }
                else
                {
                    asyncContact.LastKnownError = strFmt("@Retail:CustomerAccountNotFound", asyncContact.CustAccountAsync);
                    asyncContact.update();
                }
                break;
            case tableNum(RetailAsyncAddressV2) :
                RetailAsyncAddressV2 asyncAddress;
                select firstonly forupdate asyncAddress
                    where asyncAddress.RecId == _retailAsyncCustomerView.RefRecId
                        && asyncAddress.OnlineOperationCompleted == NoYes::No;

                if (_validationStatus)
                {
                    RetailTransactionServiceCustomer::processAsyncAddressOperation(asyncAddress, _custAccountNum);
                }
                else
                {
                    asyncAddress.LastKnownError = strFmt("@Retail:CustomerAccountNotFound", asyncAddress.CustAccountAsync);
                    asyncAddress.update();
                }

                break;
            case tableNum(RetailAsyncCustomerAttributeV2) :
                RetailAsyncCustomerAttributeV2 asyncAttribute;
                select firstonly forupdate asyncAttribute
                    where asyncAttribute.RecId == _retailAsyncCustomerView.RefRecId
                            && asyncAttribute.OnlineOperationCompleted == NoYes::No;

                if (_validationStatus && asyncAttribute)
                {
                   // Handle the scenario where the attribute is for a sync customer.
                   if (!System.String::IsNullOrWhiteSpace(asyncAttribute.CustAccount))
                   {
                       RetailTransactionServiceCustomer::processAsyncCustAttributeOperation(asyncAttribute.CustAccount, false);
                   }
                   else
                   {
                       RetailTransactionServiceCustomer::processAsyncCustAttributeOperation(asyncAttribute.CustAccountAsync, true);
                   }
                }
                else
                {
                    // Save the last known error.
                    asyncAttribute.LastKnownError = strFmt("@Retail:CustomerAccountNotFound", asyncAttribute.CustAccountAsync);
                    asyncAttribute.update();
                }

                break;
            case tableNum(RetailAsyncCustomerAffiliation) :
                RetailAsyncCustomerAffiliation asyncAffiliation;
                select firstonly forupdate asyncAffiliation
                    where asyncAffiliation.RecId == _retailAsyncCustomerView.RefRecId
                        && asyncAffiliation.OnlineOperationCompleted == NoYes::No;

                if (_validationStatus)
                {
                    RetailTransactionServiceCustomer::processAsyncCustAffiliationOperation(asyncAffiliation, _custAccountNum);
                }
                else
                {
                    asyncAffiliation.LastKnownError = strFmt("@Retail:CustomerAccountNotFound", asyncAffiliation.CustAccountAsync);
                    asyncAffiliation.update();
                }

                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the customer account information before record synchronization.
    /// </summary>
    /// <param name = "_custAccount">The customer account, if available.</param>
    /// <param name = "_custAccountAsync">The async customer account, if available.</param>
    /// <returns>A container containing 2 values. 1st value is the validation result as a boolean, 2nd is the customer account number retrieved.</returns>
    internal static container validateCustAccount(CustAccount _custAccount, RetailAsyncCustAccount _custAccountAsync)
    {
        boolean validationSuccessful = false;
        CustAccount customerAccount;

        if (!System.String::IsNullOrWhiteSpace(_custAccount))
        {
            CustTable custTable = CustTable::find(_custAccount, false);
            if (custTable.RecId != 0)
            {
                customerAccount = _custAccount;
                validationSuccessful = true;
            }
        }

        if (!validationSuccessful && !System.String::IsNullOrWhiteSpace(_custAccountAsync))
        {
            customerAccount = RetailTransactionServiceCustomer::getAccountNumberAssociatedToAsyncCustomer(_custAccountAsync);

            if (!System.String::IsNullOrWhiteSpace(customerAccount))
            {
                validationSuccessful = true;
            }
        }

        return [validationSuccessful, customerAccount];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>