<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransUpdateProject</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalTransUpdateProject extends LedgerJournalTransUpdate
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    boolean  check(LedgerJournalTrans ledgerJournalTrans,
                   boolean _checkNoSettlement = true,
                   LedgerVoucher _ledgerVoucher = null,
                   LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        boolean         ok;

        ok = ProjPost::newCheckTrans(ledgerJournalTrans).checkTrans(false);
        ok = this.checkJournalAmount(ledgerJournalTrans,
                                     LedgerJournalTrans_Project::find(ledgerJournalTrans.RecId)) && ok;
        ok = super(ledgerJournalTrans, _checkNoSettlement, _ledgerVoucher, _ledgerPostingMessageCollection) && ok;
        ok = this.checkTaxCombination(ledgerJournalTrans, _ledgerPostingMessageCollection)   && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalAmount</Name>
				<Source><![CDATA[
    boolean checkJournalAmount(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project _ledgerJournalTrans_Project,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        Amount              amount;
        LedgerJournalTrans  ledgerJournalTransLoc = _ledgerJournalTrans;

        // <GTE> 
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxableDocumentDescriptor taxableDocumentDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(_ledgerJournalTrans);

            if (!taxableDocumentDescriptor.skipTaxDocument())
            {
                // _ledgerJournalTrans.AmountCurDebit and AmountCurCredit are modified temporarily during posting of tax inclusive scenario for GTE, so reread the journal line
                // here to get origianl amount and then check it.
                ledgerJournalTransLoc = LedgerJournalTrans::findRecId(_ledgerJournalTrans.RecId, false);
            }
        }
        // </GTE>

        if (ledgerJournalTransLoc.AccountType == LedgerJournalACType::Project &&
            ledgerJournalTransLoc.ledgerJournalTable().JournalType != LedgerJournalType::Cost)
        {
            if(_ledgerJournalTrans_Project.Qty)
            {
                _ledgerJournalTrans_Project.CostPrice = _ledgerJournalTrans.amount() / _ledgerJournalTrans_Project.Qty;
            }

            amount = CurrencyExchangeHelper::amount(_ledgerJournalTrans_Project.Qty * _ledgerJournalTrans_Project.CostPrice, ledgerJournalTransLoc.CurrencyCode);

            if (ledgerJournalTransLoc.AmountCurDebit)
            {
                if (ledgerJournalTransLoc.AmountCurDebit != amount && ledgerJournalTransLoc.AmountCurDebit != -amount)
                {
                    if (_ledgerPostingMessageCollection)
                    {
                        return _ledgerPostingMessageCollection.logCheckFailed("@SYS50951");
                    }
                    else
                    {
                        return checkFailed("@SYS50951");
                    }
                }
            }

            if (ledgerJournalTransLoc.AmountCurCredit)
            {
                if (ledgerJournalTransLoc.AmountCurCredit  != amount && ledgerJournalTransLoc.AmountCurCredit  != -amount)
                {
                    if (_ledgerPostingMessageCollection)
                    {
                        return _ledgerPostingMessageCollection.logCheckFailed("@SYS50951");
                    }
                    else
                    {
                        return checkFailed("@SYS50951");
                    }
                }
            }
        } 

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWhenPost</Name>
				<Source><![CDATA[
    boolean checkWhenPost(
        LedgerJournalTrans          _ledgerJournalTrans,
        LedgerJournalTrans          _originalLedgerJournalTrans,
        boolean                     _checkNoSettlement = true,
        LedgerPostingMessageLog     _ledgerPostingMessageCollection = null)
    {
        boolean ok;

        ok = _ledgerJournalTrans.checkVATPosting();
        ok = this.checkTaxCombination(_ledgerJournalTrans, _ledgerPostingMessageCollection)              && ok;
        ok = ProjPost::newCheckTrans(_ledgerJournalTrans).checkTrans()  && ok;
        ok = this.checkJournalAmount(_ledgerJournalTrans,
                                     LedgerJournalTrans_Project::find(_ledgerJournalTrans.RecId),
                                     _ledgerPostingMessageCollection) && ok;
        ok = super(_ledgerJournalTrans, _originalLedgerJournalTrans, _checkNoSettlement, _ledgerPostingMessageCollection)    && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount ledgerDimension(LedgerJournalTrans  _journalTrans,
                                                         boolean             throwerror = true)
    {
        return ProjPosting::getLedgerDimension(ProjAccountType::CostAccount,
                                            _journalTrans.parmAccount(),
                                            LedgerJournalTrans_Project::find(_journalTrans.RecId).CategoryId,
                                            0,
                                            false,
                                            throwerror);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherCheck</Name>
				<Source><![CDATA[
    boolean ledgerVoucherCheck(LedgerJournalTrans       _ledgerJournalTrans,
                               LedgerVoucher            _ledgerVoucher,
                               boolean                  _checkNoSettlement = false,
                               boolean                  _reversalsMayExist = false,
                               LedgerPostingMessageLog  _ledgerPostingMessageCollection = null)
    {
        boolean                    ok                         = true;
        LedgerJournalTrans         journalTrans               = _ledgerJournalTrans.data();
        LedgerJournalTrans_Project ledgerJournalTrans_Project = LedgerJournalTrans_Project::find(_ledgerJournalTrans.RecId);
        LedgerVoucherObject postingReference;
        MainAccountNum             mainAccountId;

        ok = this.check(_ledgerJournalTrans, _checkNoSettlement, _ledgerVoucher, _ledgerPostingMessageCollection);

        _ledgerVoucher.parmSkipBlockedForManualEntryCheck(journalTrans.canSkipBlockedForManualEntryCheck());

        journalTrans.AccountType = LedgerJournalACType::Ledger;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            journalTrans.parmLedgerDimension(LedgerDimensionFacade::serviceCreateLedgerDimension(this.ledgerDimension(_ledgerJournalTrans, false), _ledgerJournalTrans.DefaultDimension));
        }
        else
        {
            journalTrans.parmLedgerDimension(this.ledgerDimension(_ledgerJournalTrans, false));
        }

        if (!journalTrans.parmLedgerDimension())
        {
            if (_ledgerPostingMessageCollection)
            {
                ok = _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS82336", _ledgerJournalTrans.parmAccount(), ledgerJournalTrans_Project.CategoryId));
            }
            else
            {
                ok = checkFailed(strFmt("@SYS82336", _ledgerJournalTrans.parmAccount(), ledgerJournalTrans_Project.CategoryId));
            }
        }
        else
        {
            mainAccountId = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(journalTrans.parmLedgerDimension());

            if (!MainAccount::checkAllowPosting(
                mainAccountId,
                LedgerPostingType::None,
                false,
                true,
                true,
                LedgerChartOfAccounts::current(),
                _ledgerPostingMessageCollection))
            {
                if (_ledgerPostingMessageCollection)
                {
                    ok = _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS82337", _ledgerJournalTrans.parmAccount(), ledgerJournalTrans_Project.CategoryId));
                }
                else
                {
                    ok = checkFailed(strFmt("@SYS82337", _ledgerJournalTrans.parmAccount(), ledgerJournalTrans_Project.CategoryId));
                }
            }
        }

        _ledgerVoucher.parmJournalNumber(journalTrans.JournalNum);

        postingReference = _ledgerVoucher.findLedgerVoucherObject(journalTrans.Voucher, journalTrans.TransDate);
        if (postingReference == null)
        {
            postingReference = LedgerVoucherObject::newReference(
                journalTrans.Voucher,
                journalTrans.TransDate,
                _ledgerVoucher.parmSysModuleDefault());

            postingReference.parmAcknowledgementDate(journalTrans.AcknowledgementDate);

            _ledgerVoucher.addVoucher(postingReference);
        }

        postingReference.addTrans(LedgerVoucherTransObject::newTransLedgerJournal(journalTrans));

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNonReoverableTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts non recoverable tax per funding source of the project contract.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The <c>LedgerVoucher</c> instance.
    /// </param>
    /// <param name="_ledgerPostingController">
    /// The <c>LedgerPostingController</c> instance.
    /// </param>
    /// <param name="_originalLedgerJournalTrans">
    /// The original <c>LedgerJournalTrans</c> to post.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> to post.
    /// </param>
    /// <param name="_ledgerDimensionId">
    /// The ledger account dimension that non recoverable tax to be post.
    /// </param>
    /// <param name="_interCompany">
    /// True if an intercompany journal; otherwise, false.
    /// </param>
    /// <param name="_isDueToDueFromAccountLocal">
    /// True if due to or due from account; otherwise, false.
    /// </param>
    public void postNonReoverableTax(LedgerVoucher          _ledgerVoucher,
                                    LedgerPostingController _ledgerPostingController,
                                    LedgerJournalTrans      _originalLedgerJournalTrans,
                                    LedgerJournalTrans      _ledgerJournalTrans,
                                    LedgerDimensionAccount  _ledgerDimensionId,
                                    boolean                 _interCompany = false,
                                    boolean                 _isDueToDueFromAccountLocal = false)
    {
        ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(ProjTable::find(
                                             LedgerJournalTrans_Project::find(
                                             _ledgerJournalTrans.RecId).ProjId).ProjInvoiceProjId);

        if (ProjFundingSource::numberOfFundingSources(projInvoiceTable.ProjInvoiceProjId) == 1)
        {
            super(_ledgerVoucher, _ledgerPostingController,
                    _originalLedgerJournalTrans, _ledgerJournalTrans,
                    _ledgerDimensionId, _interCompany, _isDueToDueFromAccountLocal);
        }
        else
        {
            List nonRecoverableTaxAmountCurList;

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
                && _originalLedgerJournalTrans.Transferred == NoYes::No
                && !TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(_originalLedgerJournalTrans).skipTaxDocument())
            {
                nonRecoverableTaxAmountCurList = this.getNonRecoverableTaxAmountCurListFromGTE(_originalLedgerJournalTrans);
            }
            else
            {
                nonRecoverableTaxAmountCurList = taxVoucherService.getNonRecoverableTaxAmountCurList(_originalLedgerJournalTrans,
                                                                                                     _interCompany,
                                                                                                     _isDueToDueFromAccountLocal);
            }

            if (nonRecoverableTaxAmountCurList)
            {
                CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(),
                                                                                                _ledgerPostingController.getReference().parmAccountingDate());
                exchangeRateHelper.parmExchangeRate1(_ledgerJournalTrans.ExchRate);
                exchangeRateHelper.parmExchangeRate2(_ledgerJournalTrans.ExchRateSecond);
                exchangeRateHelper.parmReportingExchangeRate1(_ledgerJournalTrans.ReportingCurrencyExchRate);
                exchangeRateHelper.parmReportingExchangeRate2(_ledgerJournalTrans.ReportingCurrencyExchRateSecondary);

                ListEnumerator nonRecoverableTaxAmountCurListEnumerator = nonRecoverableTaxAmountCurList.getEnumerator();

                while (nonRecoverableTaxAmountCurListEnumerator.moveNext())
                {
                    LedgerPostingType   nonRecoverableTaxLedgerPostingType;
                    TaxAmountCur        nonRecoverableTaxAmountCur;

                    [nonRecoverableTaxLedgerPostingType, nonRecoverableTaxAmountCur] = nonRecoverableTaxAmountCurListEnumerator.current();

                    if (nonRecoverableTaxAmountCur)
                    {
                        ProjTrans           projTrans           = ProjTrans::newLedgerJournalTrans(_ledgerJournalTrans);
                        ProjFundingEngine   projFundingEngine   = ProjFundingEngine::construct(projTrans, nonRecoverableTaxAmountCur,  0);

                        List    fundingSourceList;
                        if (projFundingEngine.allocate())
                        {
                            fundingSourceList = projFundingEngine.parmfundingSourceAllocation();
                        }

                        MapEnumerator fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, nonRecoverableTaxAmountCur, projTrans.currencyIdCost()).getEnumerator();

                        LedgerDimensionAccount      mergedLedgerDimension;
                        LedgerVoucherTransObject    ledgerVoucherTransObject;
                        ProjLedger                  projLedger;
                        ProjFundingSource           projFundingSource;
                        LedgerVoucherObject         ledgerVoucherObject;

                        while (fundingAllocationEnumerator.moveNext())
                        {
                            projLedger = ProjLedger::newLedgerJournalTax(_ledgerJournalTrans);
                            projLedger.parmfundingSourceID(fundingAllocationEnumerator.currentKey());
                            projFundingSource = ProjFundingSource::find(fundingAllocationEnumerator.currentKey());
                            mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimensionId,projFundingSource.DefaultDimension);

                            ledgerVoucherObject = _ledgerPostingController.getReference();
                            ledgerVoucherObject.lastTransTxt(_ledgerJournalTrans.Txt);

                            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                                                        ledgerVoucherObject,
                                                                                        nonRecoverableTaxLedgerPostingType,
                                                                                        mergedLedgerDimension,
                                                                                        _ledgerJournalTrans.CurrencyCode,
                                                                                        fundingAllocationEnumerator.currentValue(),
                                                                                        exchangeRateHelper);
                            ledgerVoucherTransObject.parmProjLedger(projLedger);
                            ledgerVoucherTransObject.parmReasonRefRecID(_ledgerJournalTrans.ReasonRefRecID);
                            _ledgerVoucher.addTrans(ledgerVoucherTransObject);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountGTE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get tax amount calculated by GTE
    /// </summary>
    /// <param name = "_ledgerJournalTrans">the journal line for which tax is calculated</param>
    /// <returns>tax amount calculated by GTE</returns>    
    protected TaxAmount getTaxAmountGTE(LedgerJournalTrans _originalLedgerJournalTrans)
    {
        // <GTE>
        TaxAmount           taxAmountGTE;
        LedgerJournalTrans  ledgerJournalTransOffsetCust;
        ITaxDocument        taxDocument;
        ITaxableDocument    taxableDocument;
        ITaxDocumentLine    taxDocumentLineObject;
         
        if (!isOffset)
        {
            taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(_originalLedgerJournalTrans));
            taxDocument     = TaxBusinessService::calculateTax(taxableDocument);
                
            if (taxDocument)
            {
                if (LedgerJournalTrans::isCustomerInvoice(_originalLedgerJournalTrans))
                {
                    taxAmountGTE = taxDocument.getInclTax().amountTransactionCurrency();
                    // The sign of outgoing tax must be reversed, since:
                    // 1). amount posted to project cost account is: ledgerJournalTrans.AmountCurDebit - ledgerJournalTrans.AmountCurCredit - amountInclTaxAmountCur
                    // 2). AND tax sign is negative for: project debit customer, tax sign is positive for project credit customer
                    taxAmountGTE = -taxAmountGTE;
                }
                else
                {
                    taxDocumentLineObject = taxDocument.findLineBySource(_originalLedgerJournalTrans.TableId, _originalLedgerJournalTrans.RecId);
                        
                    if (taxDocumentLineObject && taxDocumentLineObject.priceInclTax())
                    {
                        taxAmountGTE = taxDocumentLineObject.getInclTax().amountTransactionCurrency();
                    }
                }
            }
        }

        return taxAmountGTE;
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow(LedgerVoucher       _ledgerVoucher,
                   LedgerPostingType   _posting,
                   LedgerJournalTrans  _ledgerJournalTrans,
                   LedgerJournalTrans  _originalLedgerJournalTrans,
                   boolean             _interCompany = false,
                   boolean             _reversalsMayExist = true,
                   boolean             _isDueToDueFromAccount =  false
                   )
    {
        TaxAmountCur                amountInclTaxAmountCur;
        LedgerJournalTable          ledgerJournalTable;
        ProjPost                    projPost;
        LedgerPostingController     ledgerPostingController;
        LedgerDimensionAccount      ledgerDimension;
        ProjTrans                   projTrans;

        // <GIN>
        boolean              isCustomsEnabled = TaxParameters::isCustomsEnable_IN();
        // </GIN>

        ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher);

        projTrans = ProjTrans::newLedgerJournalTrans(_ledgerJournalTrans);

        ledgerJournalTable = _ledgerJournalTrans.ledgerJournalTable();
        if (ledgerJournalTable.JournalType == LedgerJournalType::Cost                ||
            ledgerJournalTable.JournalType == LedgerJournalType::Daily               ||
            ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister ||
            ledgerJournalTable.JournalType == LedgerJournalType::Approval)
        {
            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                if (!TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(_originalLedgerJournalTrans).skipTaxDocument())
                {
                    amountInclTaxAmountCur = this.getTaxAmountGTE(_originalLedgerJournalTrans);
                }
                else
                {
                    amountInclTaxAmountCur = 0;
                }
            }
            else
            {
            // </GTE>
                amountInclTaxAmountCur = taxVoucherService.taxAmountForProjectType(_originalLedgerJournalTrans);
            // <GTE>
            }
            // </GTE>            
        }

        ProjTable projTableLocal = ProjTable::findByLedgerDimension(_ledgerJournalTrans.parmLedgerDimension());
        if ((ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() && !projTableLocal.ProjInvoiceProjId) ||
            ProjRevRecHelper::getCostLedgerStatus(projTableLocal) == ProjLedgerStatus::Operations ||
            !projTrans.projLineProperty().ToBeCapitalize)
        {
            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ProjTrans::newLedgerJournalTrans(_ledgerJournalTrans).costAccountLedgerDimension(0, false), _ledgerJournalTrans.DefaultDimension);
        }
        else
        {
            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ProjTrans::newLedgerJournalTrans(_ledgerJournalTrans).statusAccountLedgerDimension(0), _ledgerJournalTrans.DefaultDimension);
        }

        this.postNonReoverableTax(_ledgerVoucher,
                        ledgerPostingController,
                        _originalLedgerJournalTrans,
                        _ledgerJournalTrans,
                        ledgerDimension,
                        _interCompany,
                        _isDueToDueFromAccount);

        // <GIN>
        if (isCustomsEnabled)
        {
            projPost = ProjPost::newCreateProjCostAndLedger_IN(_ledgerJournalTrans,
                                                               _ledgerVoucher,
                                                               ledgerJournalTable.JournalType,
                                                               amountInclTaxAmountCur,
                                                               totLoiAmount);
        }
        else
        {
            // </GIN>
            projPost = ProjPost::newCreateProjCostAndLedger(_ledgerJournalTrans,
                                                                _ledgerVoucher,
                                                                ledgerJournalTable.JournalType,
                                                                amountInclTaxAmountCur);
            // <GIN>
        }
        // </GIN>
        if (_originalLedgerJournalTrans.canAccountTypeBeTaxed(LedgerJournalACType::Project) &&
           ((!isOffset && _originalLedgerJournalTrans.isPrimaryTaxable()) ||
           (isOffset && _originalLedgerJournalTrans.isOffsetTaxable())))
        {
            projPost.parmTaxParentReferenceTableId(_ledgerJournalTrans.TableId);
            projPost.parmTaxParentReferenceRecId(_ledgerJournalTrans.RecId);
        }

        if (ProjUpdateSalexTaxInVendInvJourOnApprovalFlight::instance().isEnabled() && ledgerJournalTable.JournalType == LedgerJournalType::Approval)
        {
            this.updateSalesTaxInVendInvoiceJourAndUpdateSalesValue(_ledgerJournalTrans, amountInclTaxAmountCur);
        }

        projPost.postTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTaxInVendInvoiceJourAndUpdateSalesValue</Name>
				<Source><![CDATA[
    internal void updateSalesTaxInVendInvoiceJourAndUpdateSalesValue(LedgerJournalTrans ledgerJournalTrans, TaxAmountCur amountInclTaxAmountCur)
    {
        VendTrans vendTrans = VendTrans::find(ledgerJournalTrans.VendTransId);
        VendInvoiceJour vendInvoiceJour = VendInvoiceJour::findFromVendTrans(
                     vendTrans.Invoice,
                     ledgerJournalTrans.TransDate,
                     vendTrans.AccountNum,
                     true,
                     ledgerJournalTrans.Voucher
                     );
        if (vendInvoiceJour.RecId != 0)
        {
            if (!vendTrans.displayTaxAmountReverse())
            {
                vendInvoiceJour.SumTax += amountInclTaxAmountCur;
            }
            vendInvoiceJour.SalesBalance  = vendInvoiceJour.InvoiceAmount - vendInvoiceJour.SumTax;
            vendInvoiceJour.doUpdate();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>