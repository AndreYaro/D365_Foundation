<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPickingListJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::PickingList)]
[DocumentStatusFactoryAttribute(DocumentStatus::ProjectPickingList)]
class SalesPickingListJournalCreate extends FormletterJournalCreate
{
    WMSPickingRoute     wmsPickingRoute;
    WMSShipment         wmsShipment;

    SalesTable          salesTable;
    SalesParmTable      salesParmTable;
    SalesParmLine       salesParmLine;
    SalesParmUpdate     salesParmUpdate;
    SalesLine           salesLine;

    SalesTotals         salesTotals;
    RecordSortedList    recordListSalesParmLine;
    NoYes               creditNote;
    boolean             abortIfMultipleWarehouses;
    InventLocationId    lastInventLocationId;
    //Order is a WMS order if all of its lines are using output orders
    boolean             isWMSOrder;
    boolean             isWMSOrderCalculated;

    private KittingISalesPickingListJournalHandler kittingHandler;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLine</Name>
				<Source><![CDATA[
    protected void  calcLine(
        SalesLine       _salesLine,
        SalesParmLine   _salesParmLine)
    {
        _salesLine          = this.getSalesLine(_salesParmLine);
        updateNow           = _salesParmLine.DeliverNow;
        updateNowInvent     = _salesParmLine.InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    protected boolean  checkDiscardLine(Common _salesParmLine)
    {
        SalesParmLine localSalesParmLine = _salesParmLine as SalesParmLine;

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            if (!kittingHandler)
            {
                kittingHandler = KittingClassDelegateHelper::createISalesPickingListJournalHandler(this);
            }

            if (kittingHandler)
            {
                kittingHandler.checkDiscardLine(localSalesParmLine);
            }
        }

        if (localSalesParmLine.DeliverNow == 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForMultipleInventLocations</Name>
				<Source><![CDATA[
    protected void checkForMultipleInventLocations()
    {
        if (lastInventLocationId != '')
        {
            if (salesParmLine.inventDim().InventLocationId != '' && lastInventLocationId != salesParmLine.inventDim().InventLocationId  )
            {
                throw error("@SYS97841");
            }
        }
        else
        {
            lastInventLocationId =  salesParmLine.inventDim().InventLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether all lines that are being updated are using output orders.
    /// </summary>
    /// <returns>
    /// false if at least one line is not using output orders; otherwise, true.
    /// </returns>
    protected boolean checkIfWMSOrder()
    {
        SalesParmLine  salesParmLineLocal;

        if (!isWMSOrderCalculated)
        {
            select firstonly salesParmLineLocal
                where  salesParmLineLocal.ParmId == salesParmUpdate.ParmId
                   && !salesParmLineLocal.wmsOrder;

            if (!salesParmLineLocal)
            {
                isWMSOrder = true;
            }
            isWMSOrderCalculated = true;
        }

        return isWMSOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfWMSOrderTransExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a Warehouse Management System (WMS) order transaction exists for the WMS picking
    ///    route.
    /// </summary>
    /// <returns>
    ///    true if a WMS order transaction exists for the WMS picking route; otherwise, false.
    /// </returns>
    protected boolean checkIfWMSOrderTransExist()
    {
        return (select firstonly RecId from wmsOrderTrans
                    where wmsOrderTrans.RouteId == wmsPickingRoute.PickingRouteID).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a journal will be created.
    /// </summary>
    /// <returns>
    /// true of a journal can be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If a journal is not created, no exception is thrown.A journal is not created if it does not contain
    /// lines.
    /// </remarks>
    protected boolean checkNoThrow()
    {
	    // Call Center Orders are authorized when completed. All other orders have authorization done when
	    // Generating the picking List. Here we verify if Call center Orders have all valid payments while other order types
        // tries to authorize the CC  payments.
        return super() &&
            (salesTable.mcrIsCallCenter() ?
            salesTable.mcrHasAllValidPayments() :
            salesTable.creditCardDoPreAuthorize(false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the journal header record.
    /// </summary>
    /// <remarks>
    ///    <c>The createJournalHeader</c> method does not create any journal header records because journal
    ///    header records are only created if the user is not using consolidated pick for the order lines that
    ///    are picking list updated.The creation of a journal header record is moved to after creating the
    ///    Warehouse Management System (WMS) orders in the <c>createWMSJournal</c> method.
    /// </remarks>
    protected void createJournalHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventMovement</c> class.
    /// </summary>
    /// <returns>The created <c>InventMovement</c>.</returns>
    protected InventMovement instantiateInventMovement()
    {
        return InventMovement::construct(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal line.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The <c>SalesParmLine</c> record that will be used to create the journal line.
    /// </param>
    protected void createJournalLine(Common _salesParmLine)
    {
        InventQty                       qtyNow;
        InventDimParm                   inventDimParmPhysical;

        salesParmLine = _salesParmLine as SalesParmLine;
        salesLine = this.getSalesLine(salesParmLine, true);

        if (abortIfMultipleWarehouses)
        {
            this.checkForMultipleInventLocations();
        }

        InventQualityManagementBlockHandler::blockSalesPickingList(salesLine);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            if (this.parmTax())
            {
                this.parmTax().validate_IN();
            }
        }
        // </GIN>

        InventMovement inventMovement;
        
        if (this.reduceOnHandForParmLine())
        {
            InventItemType inventItemType = InventItemType::newItemId(salesLine.ItemId);
            if (inventItemType.mustInventBeControlled())
            {
                InventDim inventDim = salesLine.inventDim();
                InventDimGroupSetup::newItemId(salesLine.ItemId).inventDimParmActivePhysicalInventory(inventDimParmPhysical);
        
                InventDimParm inventDimParm;
                inventDimParm.initFromInventDim(inventDim);

                InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(salesLine.ItemId,inventDim,InventDimParm::andParms(inventDimParmPhysical,inventDimParm));
                
                inventMovement = this.instantiateInventMovement();

                if (!inventMovement)
                {
                    throw error('@SCM:CannotCreateJournalLine');
                }

                inventMovement.initForAutoReservation();

                inventOnHandQty.parmAdvancedCriteria(InventReservationCriteriaBuilder::newMovement(inventMovement).buildCriteria());

                boolean isCWItem = PdsGlobal::pdsIsCWItem(salesLine.ItemId);
                if (isCWItem)
                {
                    PdsCWInventQty cwQtyNow = min(salesParmLine.PdsCWDeliverNow, max(inventOnHandQty.pdsCWAvailPhysical()
                       - InventTransIdSumSingleStatus::pdsCWQtyReservPhysicalChildTypeNone(InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId)),0));

                    if (cwQtyNow != salesParmLine.PdsCWDeliverNow)
                    {
                        salesParmLine.PdsCWDeliverNow     = cwQtyNow;
                        qtyNow = PdsCatchWeight::inventQty(
                            salesParmLine.ItemId,
                            cwQtyNow);
                        salesParmLine.InventNow    = qtyNow;
                        salesParmLine.DeliverNow   = UnitOfMeasureConverter::convert(
                            salesParmLine.InventNow,
                            UnitOfMeasure::unitOfMeasureIdBySymbol(salesLine.inventTable().inventUnitId()),
                            UnitOfMeasure::unitOfMeasureIdBySymbol(salesLine.SalesUnit),
                            NoYes::Yes,
                            InventTable::itemProduct(salesLine.ItemId));
                        //to get right qtyNow - adding reservedPhysical quantity from this salesLine
                        qtyNow = min(salesParmLine.InventNow, max(inventOnHandQty.availPhysical()
                                - InventTransIdSumSingleStatus::qtyReservPhysicalChildTypeNone(InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId)),0));

                        info(strFmt("@SYS26397", qtyNow));
                    }
                }
                else
                if (qtyNow != salesParmLine.InventNow)
                {
                    //to get right qtyNow - adding reservedPhysical quantity from this salesLine
                    qtyNow = min(salesParmLine.InventNow, max(inventOnHandQty.availPhysical()
                           - InventTransIdSumSingleStatus::qtyReservPhysicalChildTypeNone(InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId)),0));

                    if (qtyNow != salesParmLine.InventNow)
                    {
                        salesParmLine.InventNow     = qtyNow;
                        salesParmLine.DeliverNow   = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                            salesLine.ItemId,
                            salesLine.InventDimId,
                            salesParmLine.InventNow,
                            salesLine.inventTable().inventUnitId(),
                            salesLine.SalesUnit,
                            NoYes::Yes);
                        info(strFmt("@SYS26397", qtyNow));
                    }
                }
            }
        }

        if (salesParmLine.InventNow)
        {
            this.calcLine(salesLine,salesParmLine);

            this.reserveBuffer();

            inventMovement = inventMovement ? inventMovement : this.instantiateInventMovement();

            if (!inventMovement)
            {
                throw error('@SCM:CannotCreateJournalLine');
            }

            WMSOrder wmsOrder = this.createWMSOutputOrder(inventMovement,
                                                             -salesParmLine.InventNow,
                                                             WMSOrderType::OrderPick,
                                                             -salesParmLine.PdsCWDeliverNow
                                                             );

			this.insertWMSShipment();
			wmsOrder.updateShipment(wmsShipment,
									min(salesParmLine.InventNow, wmsOrder.qtyNoShipment),
									wmsPickingRoute.PickingRouteID,
									true,
                                    min(salesParmLine.PdsCWDeliverNow, wmsOrder.PdsCWQtyNoShipment));

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                Docu::copy(salesLine, wmsOrder);

                // If the line is a child, copy the parent's order notes to the custPickingListTrans.
                if (salesLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
                {
                    Docu::copy(SalesDeliverySchedule::findOrderLineForDeliveryLine(salesLine.InventTransId), wmsOrder);
                }
            }

            if (salesParmTable.SalesId != salesParmLine.OrigSalesId)
            {
               this.updateSumSalesId();
            }
            salesLine.SalesDeliverNow  = 0;
            salesLine.InventDeliverNow = 0;
            salesLine.PdsCWInventDeliverNow = 0;
            salesLine.doUpdate();

            if (salesTable.InterCompanyCompanyId)
            {
                SalesLineType::construct(salesLine).interCompanyResetDeliverNow();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal link.
    /// </summary>
    /// <param name="_common">
    /// The record in which to base the journal link.
    /// </param>
    protected void createJournalLink(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWMSJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates Warehouse Management System (WMS) shipment and WMS picking route records for the picking
    ///    list.
    /// </summary>
    /// <remarks>
    ///    The records are only created when not using consolidated pick for the lines in the picking list.
    /// </remarks>
    protected void createWMSJournal()
    {
        if (this.checkIfWMSOrderTransExist() && !this.checkIfWMSOrder())
        {
            this.setDeliveryFields();

            this.insertWMSShipment();
            wmsPickingRoute.insert();
            wmsShipment.updateSiteWarehouseFromPickingRoute();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWMSOutputOrder</Name>
				<Source><![CDATA[
    protected WMSOrder createWMSOutputOrder(
        InventMovement      _movement,
        InventQty           _qty,
        WMSOrderType        _wmsOrderType = WMSOrderType::OrderPick,
        PdsCWInventQty      _cwQty = 0
        )
    {
        return WMSOrderCreate::createOrUpdateWMSOrder(_movement, _qty, _wmsOrderType, '',  _cwQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the form letter type.
    /// </summary>
    /// <returns>
    /// A <c>FormletterType</c> enumeration value.
    /// </returns>
    protected FormletterType formletterType()
    {
        return FormletterType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatchWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight on order or reserved for the specified line.
    /// </summary>
    /// <param name="_localSalesParmLine">
    /// The line being processed.
    /// </param>
    /// <param name="_inventMovement">
    /// The inventory movement related to the line.
    /// </param>
    /// <returns>
    /// The weight for the catch weight quantity.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// Insufficient inventory transactions with status on order or reserved.
    /// </exception>
    protected InventQty getCatchWeight(
        SalesParmLine   _localSalesParmLine,
        InventMov_Sales _inventMovement)
    {
        PdsCWInventQty                      cwQtyNotAssigned = _localSalesParmLine.PdsCWDeliverNow;

        PdsCatchWeightMovementQtyAdjustment pdsCatchWeightMovementQtyAdjustment = PdsCatchWeightMovementQtyAdjustment::newBuffer(_localSalesParmLine.salesLine());

        InventQty qtyAssigned = pdsCatchWeightMovementQtyAdjustment.salesIssueQty(
            DocumentStatus::PickingList,
            cwQtyNotAssigned,
            _inventMovement.inventTableInvent().UnitId);

        if (!pdsCatchWeightMovementQtyAdjustment.isFullCatchWeightQuantityAssigned())
        {
            warning("@SCM:ItemFullCatchWeightQuantityNotAssigned");
            Info("@SCM:InventOrderPickingGeneralGuide");
            throw error(strFmt("@SYS54028",StatusIssue::Picked));
        }
        return qtyAssigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current journal header.
    /// </summary>
    /// <returns>
    /// A journal header record.
    /// </returns>
    public Common getJournal()
    {
        return wmsPickingRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLine</Name>
				<Source><![CDATA[
    protected SalesLine  getSalesLine(
        SalesParmLine       _salesParmLine,
        boolean             _forUpdate = false)
    {
        SalesLine  localSalesLine;

        localSalesLine.selectForUpdate(_forUpdate);

        select firstonly localSalesLine
            where localSalesLine.RecId == _salesParmLine.SalesLineRecId;

        if (!SalesTable::exist(localSalesLine.SalesId))
        {
            throw error("@SYS16740");
        }

        return localSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCatchWeightValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts inventory quantities for catch weight items which have been on order or reserved.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// Insufficient inventory transactions with on order or reserved status.
    /// </exception>
    protected void initCatchWeightValues()
    {
        SalesParmLine               localSalesParmLine;
        InventTransOrigin           inventTransOrigin;
        InventTableModule           inventTableModuleInvent;
        SalesQty                    salesQtyDelta;

        if (!#pdsCatchWeightEnabled)
        { // catch weight not enabled, so no need to try to select
            return;
        }

        while select forupdate localSalesParmLine
            where localSalesParmLine.ParmId == salesParmTable.ParmId
               && localSalesParmLine.TableRefId == salesParmTable.TableRefId
               && localSalesParmLine.PdsCWDeliverNow             > 0        // only select lines with catch weight being issued
            join RecId from inventTransOrigin
                where inventTransOrigin.InventTransId           == localSalesParmLine.InventTransId
            join UnitId from inventTableModuleInvent
                where inventTableModuleInvent.ItemId            == localSalesParmLine.ItemId
                  &&  inventTableModuleInvent.ModuleType        == ModuleInventPurchSales::Invent
        {
            if (!this.checkDiscardLine(localSalesParmLine))
            {
                setPrefix(localSalesParmLine.FormletterJournalTrans::getLinePrefix());

                SalesLine localSalesLine = localSalesParmLine.salesLine(true);
                InventMov_Sales inventMovement = InventMov_Sales::newFromSalesLine(localSalesLine);

                // Find the catch weight from the transactions
                InventQty qtyAssigned = this.getCatchWeight(localSalesParmLine, inventMovement);

                if (qtyAssigned > 0
                 && localSalesParmLine.InventNow != qtyAssigned)
                { // Update salesParmLine with new values for weight
                    InventQty inventQtyDelta = qtyAssigned - localSalesParmLine.InventNow;
                    localSalesLine = localSalesParmLine.salesLine();
                    if (localSalesLine.SalesUnit == inventTableModuleInvent.UnitId)
                    { // Same unit so update sales quantity related field too
                        salesQtyDelta = inventQtyDelta;
                        localSalesParmLine.DeliverNow += salesQtyDelta;
                        localSalesParmLine.RemainBefore = localSalesLine.RemainSalesPhysical;
                        localSalesParmLine.RemainAfter -= salesQtyDelta;
                    }
                    else if (UnitOfMeasure::findBySymbol(localSalesLine.SalesUnit).UnitOfMeasureClass
                          == UnitOfMeasure::findBySymbol(inventTableModuleInvent.UnitId).UnitOfMeasureClass)
                    { // Same unit class so update sales quantity related field too, but convert to proper unit
                        salesQtyDelta = UnitOfMeasureConverter::convert(
                            qtyAssigned,
                            UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModuleInvent.UnitId),
                            UnitOfMeasure::unitOfMeasureIdBySymbol(localSalesLine.SalesUnit),
                            NoYes::No,
                            localSalesLine.inventTable().Product)
                            - localSalesParmLine.DeliverNow;

                        localSalesParmLine.DeliverNow += salesQtyDelta;
                        localSalesParmLine.RemainBefore = localSalesLine.RemainSalesPhysical;
                        localSalesParmLine.RemainAfter -= salesQtyDelta;
                    }
                    localSalesParmLine.InventNow += inventQtyDelta;
                    localSalesParmLine.RemainBeforeInvent = localSalesLine.RemainInventPhysical;
                    localSalesParmLine.RemainAfterInvent -= inventQtyDelta;
                    localSalesParmLine.update();
                    recordListSalesParmLine = null;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal header record.
    /// </summary>
    protected void initJournalHeader()
    {
        if (this.checkIfWMSOrder())
        { // All lines are using output orders (consolidated picking), so no need to create shipments and picking routes here.
            return;
        }

        wmsShipment.clear();

        wmsShipment.initTypeOrderPick();

        wmsPickingRoute.clear();
        wmsPickingRoute.initTypeOrderPick(wmsShipment,
                                          WMSExpeditionStatus::Registered,
                                          WMSPickRequestTable::construct(salesTable),
                                          this.getJournalNumber(),
                                          false);

        wmsPickingRoute.InterCompanyPosted = this.parmInterCompanyPosted();
        wmsPickingRoute.ParmId             = salesParmUpdate.ParmId;
        wmsPickingRoute.MCRPackingBoxName   = salesParmTable.MCRPackingBoxName;

        // If using the picking workbench to create picking lists, put the pick wave reference on the header table.
        if (this.parmMCRPickWaveReference() != '')
        {
            wmsPickingRoute.MCRPickingWaveRef = this.parmMCRPickWaveReference();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLoopLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the iteration over journal line.
    /// </summary>
    protected void initLoopLines()
    {
        super();
        abortIfMultipleWarehouses = SalesParameters::find().CheckMultipleWareHouses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the source table record.
    /// </summary>
    protected void initSourceTable()
    {
        salesTable = salesParmTable.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the total calculation.
    /// </summary>
    protected void initTotals()
    {
        // <GTE>
        // </GTE>

        this.initCatchWeightValues();
        salesTotals = SalesTotals::construct(salesParmTable, salesParmUpdate.SpecQty, salesParmUpdate.SumBy, salesParmUpdate.ParmId, salesParmUpdate.SumSalesId, documentStatus);
        salesTotals.fillRecordSortedListLine();
        recordListSalesParmLine    = salesTotals.recordSortedListLine();

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            ITaxableDocument taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(salesParmTable));
            TaxBusinessService::calculateTax(taxableDocument);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records in the record lists into the database.
    /// </summary>
    protected void insertRecordList()
    {
        this.createWMSJournal();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWMSShipment</Name>
				<Source><![CDATA[
    private void insertWMSShipment()
    {
        if (!wmsShipment.RecId)
        {
            wmsShipment.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal line table.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table ID for the table that will be used to link sales orders when picking list
    ///    updating sales orders.
    /// </summary>
    /// <returns>
    ///    The table ID for the link table
    /// </returns>
    /// <remarks>
    ///    Creation of links is moved to the <c>SalesPickingListJournalPost</c> table because links must first
    ///    be created after update of picking route.
    /// </remarks>
    protected TableId linksTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noLinesForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions when there are no lines selected for posting.
    /// </summary>
    /// <param name="_throwError">
    /// true if the error message should be thrown as an exception; otherwise, false.
    /// </param>
    /// <remarks>
    /// Informs the user that there are no lines selected for posting.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// Posting has been canceled.
    /// </exception>
    protected void noLinesForPosting(boolean _throwError = false)
    {
        if (this.linesExists())
        {
            // Credit card failed w/error message already, just announce posting failure
            this.showPostingCanceledError(_throwError);
        }
        else
        {
            super(_throwError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSequenceReference</c> object for the journal number.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> object.
    /// </returns>
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return WMSParameters::numRefWMSPickingRouteId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;

        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = salesParmUpdate)
    {
        salesParmUpdate = _parmUpdate as SalesParmUpdate;

        return salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>RecordSortedList</c> object that contains all posting parameter line records.
    /// </summary>
    /// <returns>
    /// A <c>RecordSortedList</c> object.
    /// </returns>
    protected RecordSortedList recordListParmLine()
    {
        return salesTotals.recordSortedListLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceOnHandForParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the quantity that is posted for a <c>salesParmLine</c> record should be reduced
    ///    to what is available.
    /// </summary>
    /// <returns>
    ///    true if the quantity that is posted for a <c>salesParmLine</c> record should be reduced to what is
    ///    available; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The quantity is not reduced for items that generate Warehouse Management System (WMS) orders.
    /// </remarks>
    protected boolean reduceOnHandForParmLine()
    {
        return (salesParmUpdate.ReduceOnHand && !salesParmLine.wmsOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveBuffer</Name>
				<Source><![CDATA[
    protected void reserveBuffer()
    {
        InventQty               unReserveQty = salesParmLine.InventNow;
        PdsCWInventQty          cwReserveQty = 0;
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        InventDimParm           inventDimParmFixed;
        InventDimParm           inventDimParmPrimary;

        if (salesParmUpdate.Reserve)
        {
            InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId));
            // if reduce on-hand is enabled and the available on-hand inventory isn't zero, physical reservation should be done with
            // the available on-hand quantity automatically, And physical reservation has higher priority than order reservation.
            // that means order reservation should be unreserved and redo physical reservation if the on-hand quantity is enough.
            if (this.reduceOnHandForParmLine())
            {
                unReserveQty += inventTransIdSum.onOrder();
                if (unReserveQty > 0)
                {
                    // Try to update the order reservation to physical reservation.
                    while select sum(Qty) from inventTrans group by inventDimId, InventDimFixed
                        where inventTrans.StatusIssue                   == StatusIssue::ReservOrdered
                           && inventTrans.StatusReceipt                 == StatusReceipt::None
                           && inventTrans.TransChildRefId               == ''
                           && inventTrans.TransChildType                == InventTransChildType::None
                           && inventTrans.MarkingRefInventTransOrigin   == 0
                        exists join inventTransOrigin
                            where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                               && inventTransOrigin.InventTransId   == salesLine.InventTransId
                    {
                        InventDimFixedClass::inventDimFixed2InventDimParm(inventTrans.inventDimFixed, inventDimParmFixed);
                        InventDimGroupSetup::newItemId(salesLine.ItemId).inventDimParmActivePrimaryDimension(inventDimParmPrimary);
                        InventDim inventDimCriteria = InventDim::find(inventTrans.inventDimId);
                        inventDimCriteria.clearNotSelectedDim(InventDimParm::orParms(inventDimParmFixed, inventDimParmPrimary));
                        InventUpd_Reservation::updateReserveBuffer(salesLine, -inventTrans.Qty, InventMovSubType::None, 0, false, null, inventDimCriteria);
                        InventUpd_Reservation::updateReserveBuffer(salesLine, inventTrans.Qty, InventMovSubType::None, 0, false, null, inventDimCriteria);
                    }
                }
            }

            inventTransIdSum = InventTransIdSum::newTransIdNoChildType(InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId));
            InventQty reserveQty = -salesParmLine.InventNow - inventTransIdSum.reservPhysical();
            cwReserveQty = -salesParmLine.PdsCWDeliverNow - inventTransIdSum.pdsCWReservPhysical();

            // redo physical reservation.
            InventUpd_Reservation::updateReserveBuffer(salesLine, min(reserveQty, 0), InventMovSubType::None, min(cwReserveQty, 0));

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)) && ! salesTable.mcrCheckShipComplete())
            {
                throw error(strFmt("@MCR12672", salesTable.SalesId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryFields</Name>
				<Source><![CDATA[
    protected void setDeliveryFields()
    {
        SalesLine       localSalesLine;
        SalesParmLine   localsalesParmLine;

        if (!salesParmTable.DeliveryPostalAddress
            ||  !salesParmTable.DeliveryName
            ||  !salesParmTable.DlvMode)
        {
            select firstonly localsalesParmLine
                where localsalesParmLine.ParmId     == salesParmTable.ParmId
                &&    localsalesParmLine.TableRefId == salesParmTable.TableRefId;

            localSalesLine = localsalesParmLine.salesLine();
        }

        wmsPickingRoute.DeliveryPostalAddress   = salesParmTable.DeliveryPostalAddress  ? salesParmTable.DeliveryPostalAddress
                                                                                        : localSalesLine.DeliveryPostalAddress;
        wmsPickingRoute.DeliveryName            = salesParmTable.DeliveryName           ? salesParmTable.DeliveryName
                                                                                        : localSalesLine.defaultDeliveryName();
        wmsPickingRoute.DlvModeId               = salesParmTable.DlvMode                ? salesParmTable.DlvMode
                                                                                        : (localSalesLine.DlvMode ? localSalesLine.DlvMode : localSalesLine.salesTable().DlvMode);
        wmsPickingRoute.PrintMgmtSiteId         = salesParmTable.InventSiteId;

        if (this.isSingleWarehouseInPostingLines())
        {
            wmsPickingRoute.inventLocationId = salesParmLine.inventDim().InventLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table for the journal.
    /// </summary>
    /// <returns>
    /// A <c>SalesTable</c> record.
    /// </returns>
    protected Common sourceTable()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total object.
    /// </summary>
    /// <returns>
    /// A total object.
    /// </returns>
    protected Object totals()
    {
        return salesTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the posting parameter line table.
    /// </summary>
    /// <returns>
    /// A <c>SalesParmLine</c> record.
    /// </returns>
    protected Common typeParmLine()
    {
        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate  updateDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumSalesId</Name>
				<Source><![CDATA[
    protected void  updateSumSalesId()
    {
        if (SalesTable::exist(salesParmLine.OrigSalesId))
        {
            ttsbegin;

            SalesTable localSalesTable = salesParmLine.salesTable(true);

            localSalesTable.updateBackStatus();

            localSalesTable.reread();

            localSalesTable.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesPickingListJournalCreate construct()
    {
        return new SalesPickingListJournalCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCreate</Name>
				<Source><![CDATA[
    protected void endCreate()
    {
        super();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.transitDocument();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxBusinessService::transferTaxDocument(salesParmTable, wmsPickingRoute);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleWarehouseInPostingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if all posting <c>SalesParmLine</c> records use the same one warehouse.
    /// </summary>
    /// <returns>True when all posting <c>SalesParmLine</c> records use the same one warehouse; Otherwise false</returns>
    private boolean isSingleWarehouseInPostingLines()
    {
        InventDim     localInventDim;
        SalesParmLine localsalesParmLine;

        select firstonly RecId from localInventDim
            where localInventDim.InventLocationId != salesParmLine.inventDim().InventLocationId
        exists join localsalesParmLine
            where localsalesParmLine.InventDimId  == localInventDim.InventDimId
                && localsalesParmLine.ParmId      == salesParmTable.ParmId
                && localsalesParmLine.TableRefId  == salesParmTable.TableRefId;

        return !localInventDim.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        WMSOrderTrans               wmsOrderTransLoc;
        SalesParmLine               salesParmLineLoc;
        TransitDocumentManager_IN transitDocManager = TransitDocumentManager_IN::newManager();

        transitDocManager.transit(salesParmTable, wmsPickingRoute);

        while select  wmsOrderTransLoc
                where wmsOrderTransLoc.routeId              == wmsPickingRoute.pickingRouteID
                    && wmsOrderTransLoc.fullPallet          == 0
                join salesParmLineLoc
                    where salesParmLineLoc.InventTransId    == wmsOrderTransLoc.InventTransId
                        && salesParmLineLoc.ParmId          == salesParmTable.ParmId
                        && salesParmLineLoc.TableRefId      == salesParmTable.TableRefId
        {
            transitDocManager.transit(salesParmLineLoc, wmsOrderTransLoc, wmsPickingRoute);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyFormletterContract</Name>
				<Source><![CDATA[
    public FormLetterContract parmInterCompanyFormletterContract(FormLetterContract _interCompanyFormletterContract = interCompanyFormletterContract)
    {
        FormLetterContract ret;

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            if (!kittingHandler)
            {
                kittingHandler = KittingClassDelegateHelper::createISalesPickingListJournalHandler(this);
            }

            if (kittingHandler && !interCompanyFormletterContract)
            {
                kittingHandler.setInventTransList(_interCompanyFormletterContract);
            }
        }
    
        ret = super(_interCompanyFormletterContract);
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>