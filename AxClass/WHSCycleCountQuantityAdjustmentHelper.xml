<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCycleCountQuantityAdjustmentHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCycleCountQuantityAdjustmentHelper</c> class assist the quantity adjustment during cycle counting.
/// </summary>
internal final class WHSCycleCountQuantityAdjustmentHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>totalQtyHasExceededFailLimit</Name>
				<Source><![CDATA[
    internal static boolean totalQtyHasExceededFailLimit(
        Qty _totalQty,
        WHSWorkLineCycleCount _workLineCycleCount,
        InventDim _inventDim,
        WHSWorkUser _workUser,
        WhsrfPassthrough _pass)
    {
        Qty absoluteDifferenceInCountedQuantity = abs(_totalQty - _workLineCycleCount.QtyExpected);

        boolean failLimit;

        if (absoluteDifferenceInCountedQuantity > _workUser.WorkCountMaxQty)
        {
            failLimit = true;
        }
        else if ((absoluteDifferenceInCountedQuantity * InventTable::find(_pass.parmItemId()).costPcsPrice('', _inventDim)) > _workUser.WorkCountMaxValue)
        {
            failLimit = true;
        }
        else if ((absoluteDifferenceInCountedQuantity / _workLineCycleCount.QtyExpected) * 100 > _workUser.WorkCountMaxPercent)
        {
            failLimit = true;
        }

        return failLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets adjustment quantity to perform inventory on-hand correction.
    /// </summary>
    /// <param name = "_totalQty">Total quantity.</param>
    /// <param name = "_workLineCycleCount">Cycle counting transaction.</param>
    /// <returns>Adjustment quantity.</returns>
    internal static Qty getAdjustmentQty(Qty _totalQty, WHSWorkLineCycleCount _workLineCycleCount)
    {
        Qty adjustmentQty;

        if (_workLineCycleCount.displayInventJournalId())
        {
            // Calculate adjustment quantity based on counted quantity because item was already counted and adjusted.
            adjustmentQty = _totalQty - _workLineCycleCount.QtyCounted;
        }
        else
        {
            adjustmentQty = _totalQty - _workLineCycleCount.QtyExpected;
        }

        return adjustmentQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets adjustment weight to perform inventory on-hand correction.
    /// </summary>
    /// <param name = "_capturedWeight">Captured weight.</param>
    /// <param name = "_workLineCycleCount">Cycle counting transaction.</param>
    /// <returns>Adjustment weight.</returns>
    internal static WHSCapturedWeight getAdjustmentWeight(Qty _capturedWeight, WHSWorkLineCycleCount _workLineCycleCount)
    {
        WHSCapturedWeight adjustmentWeight;

        if (_workLineCycleCount.displayInventJournalId())
        {
            // Calculate adjustment weight based on captured weight because item was already captured and adjusted.
            adjustmentWeight = _capturedWeight - _workLineCycleCount.CapturedWeight;
        }
        else
        {
            adjustmentWeight = _capturedWeight - _workLineCycleCount.ExpectedWeight;
        }

        return adjustmentWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdjustmentWork</Name>
				<Source><![CDATA[
    internal static WHSAdjustmentWorkId createAdjustmentWork(
        Qty	_totalQty,
        WHSCapturedWeight _totalWeight,
        InventDim _currentInventDim,
        WhsrfPassthrough _pass)
    {
        ItemId currentItemId = _pass.parmItemId();
        WHSLicensePlateId licensePlateId = _pass.parmLicensePlateId();
        WHSInventAdjustmentCreateParameters params;
        
        if (WHSInventTable::correctionWeightCapturingProcess(currentItemId) == WHSCountingWeightCapturingMethod::NotCaptured)
        {
            params = WHSCycleCountQuantityAdjustmentHelper::initInventAdjustmentCreateParams(currentItemId, _currentInventDim, _totalQty, licensePlateId, _pass);
        }
        else
        {
            params = WHSCycleCountQuantityAdjustmentHelper::initInventAdjustmentCreateParamsWithWeight(currentItemId, _currentInventDim, _totalQty, _totalWeight, licensePlateId, _pass);
        }

        WHSInventAdjustmentCreate createAdj = WHSInventAdjustmentCreate::newFromParams(params);
        createAdj.run();
        return createAdj.createdWorkId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventAdjustmentCreateParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes parameters for inventory adjustment.
    /// </summary>
    /// <param name = "_itemId">The item for which inventory adjustment parameter initialized.</param>
    /// <param name = "_inventDim">The inventory dimensions for the item.</param>
    /// <param name = "_adjustmentQty">The number of units of the item.</param>
    /// <param name = "_licensePlateId">The license plate id for item.</param>
    /// <returns>The initialized <c>WHSInventAdjustmentCreateParameters</c> object.</returns>
    private static WHSInventAdjustmentCreateParameters initInventAdjustmentCreateParams(
        ItemId _itemId,
        InventDim _inventDim,
        Qty _adjustmentQty,
        WHSLicensePlateId _licensePlateId,
        WhsrfPassthrough _pass)
    {
        WHSCapturedWeight averageAdjustmentWeight = 0;

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(_itemId,  _inventDim);
            
            if (inventOnHandQty.pdsCWPhysicalInvent() > 0)
            {
                averageAdjustmentWeight = WHSCatchWeightHelper::calculateAverageWeight(
                    _adjustmentQty,
                    inventOnHandQty.pdsCWPhysicalInvent(),
                    inventOnHandQty.physicalInvent(),
                    InventTable::inventDecimals(_itemId));
            }
            else
            {
                averageAdjustmentWeight = PdsCatchWeightItem::find(_itemId).nominalQty() * _adjustmentQty;
            }
        }

        WHSInventAdjustmentCreateParameters params = WHSCycleCountQuantityAdjustmentHelper::initInventAdjustmentCreateParamsWithWeight(
            _itemId, 
            _inventDim, 
            _adjustmentQty, 
            averageAdjustmentWeight, 
            _licensePlateId, 
            _pass);

        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventAdjustmentCreateParamsWithWeight</Name>
				<Source><![CDATA[
    private static WHSInventAdjustmentCreateParameters initInventAdjustmentCreateParamsWithWeight(
        ItemId _itemId,
        InventDim _inventDim,
        Qty _adjustmentQty,
        WHSCapturedWeight _adjustmentWeight,
        WHSLicensePlateId _licensePlateId,
        WhsrfPassthrough _pass)
    {
        WHSInventAdjustmentCreateParameters params = WHSInventAdjustmentCreateParameters::construct();

        params.WorkUserId = _pass.parmUserId();
        params.ItemId = _itemId;
        params.InventDim = _inventDim;
        params.AdjustmentQty = _adjustmentQty;
        params.AdjustmentUnit = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);
        params.AdjustmentCatchWeight = _adjustmentWeight;
        params.WmsLocationId = _pass.parmWMSLocationId();
        params.InventLocationId = _pass.parmInventLocationId();
        params.AdjustmentTypeCode = WHSParameters::find().CycleCountAdjustmentTypeCode;
        params.LicensePlateId = _licensePlateId;
        params.WorkTransType = WHSWorkTransType::CycleCountAccepted;
        params.WorkType	= WHSWorkType::Count;
        params.WorkCreatedBy = WHSWorkUser::getWorkerEmployeeRecId(params.WorkUserId);
        params.InventCountingReasonCode = _pass.lookupStr(WHSWorkExecuteDisplayCycleCountControls::CountingReasonCode);
        params.SkipLocationLicensePlatePositionSequencing = true;

        return params;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>