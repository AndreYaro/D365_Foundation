<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximSionCopying_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim sion copying class.
/// </summary>
class EximSionCopying_IN extends RunBase
{
    DialogField         dialogFromProductGroup;
    DialogField         dialogToProductGroup;
    DialogField         dialogFromDateTime;
    DialogField         dialogToDateTime;
    EximProductGroup_IN fromProductGroup;
    EximProductGroup_IN toProductGroup;
    FromDateTime        fromDateTime;
    ToDateTime          toDateTime;
    RefRecId            sionTableRecId;

    #define.SingleQuote("'")
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        toProductGroup,
        fromDateTime,
        toDateTime
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogFromProductGroup = dialog.addFieldValue(identifierstr(EximProductGroup_IN), fromProductGroup, "@GLS61459", "@GLS61460");

        dialogFromProductGroup.allowEdit(false);

        dialogToProductGroup = dialog.addFieldValue(identifierstr(EximProductGroup_IN), toProductGroup, "@GLS61462", "@GLS61461");
        dialogFromDateTime   = dialog.addFieldValue(identifierstr(FromDateTime), fromDateTime, "", "@GLS61463");
        dialogToDateTime     = dialog.addFieldValue(identifierstr(ToDateTime), toDateTime, "", "@GLS61464");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fields value from the dialog.
    /// </summary>
    /// <returns>
    /// If 'True', the value of the fields are got successfully.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = true;

        super();

        toProductGroup = dialogToProductGroup.value();
        fromDateTime   = dialogFromDateTime.value();
        toDateTime     = dialogToDateTime.value();

        if (!toProductGroup)
        {
            ret = checkFailed(strfmt("@SYS26332", #SingleQuote+"@GLS61462"+#SingleQuote));
        }

        if (fromDateTime > toDateTime)
        {
            ret = checkFailed("@SYS104511");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSionItemTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record items into table.
    /// </summary>
    /// <param name="_sionLineRecId">
    /// The line record id of Sion.
    /// </param>
    /// <param name="_newRecId">
    /// The new record id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertSionItemTable(
        RefRecId _sionLineRecId,
        RefRecId _newRecId)
    {
        EximSionItemTable_IN             sionItemTable;
        EximSionItemTable_IN             sionItemTableLoc;
        EximSionItemTable_IN             sionItemTableCopy;
        EximSionItemTableRelationship_IN sionItemTableRelation;
        Map                              recIdMap = new Map(Types::Int64, Types::Int64);
        MapIterator                      recIdMapIterator;

        while select sionItemTable
            where sionItemTable.SionLineRecId == _sionLineRecId
        {
            sionItemTableLoc.data(sionItemTable);
            sionItemTableLoc.SionLineRecId = _newRecId;
            sionItemTableLoc.insert();

            if (sionItemTableLoc.Basis == EximSionBasis_IN::PctOfInput)
            {
                this.insertSionItemTableRelation(sionItemTable.RecId, sionItemTableLoc.RecId);
            }

            if (sionItemTableLoc.Basis == EximSionBasis_IN::StandardQty)
            {
                this.insertSionStandardQtyTable(sionItemTable.RecId, sionItemTableLoc.RecId);
            }

            select firstonly RelatedSionItemTableRecId from sionItemTableRelation
                where sionItemTableRelation.RelatedSionItemTableRecId == sionItemTable.RecId;

            if (sionItemTableRelation.RelatedSionItemTableRecId)
            {
                recIdMap.insert(sionItemTable.RecId, sionItemTableLoc.RecId);
            }
        }

        recIdMapIterator = new MapIterator(recIdMap);

        while (recIdMapIterator.more())
        {
            update_recordset sionItemTableRelation
                setting RelatedSionItemTableRecId = recIdMapIterator.value()
                    join SionLineRecId, RecId from sionItemTableCopy
                        where sionItemTableRelation.SionItemTableRecId        == sionItemTableCopy.RecId
                           && sionItemTableRelation.RelatedSionItemTableRecId == recIdMapIterator.key()
                           && sionItemTableCopy.SionLineRecId                == _newRecId;

            recIdMapIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSionItemTableRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts table relation of the item.
    /// </summary>
    /// <param name="_sionItemRecId">
    /// The item record id of Sion.
    /// </param>
    /// <param name="_newRecId">
    /// The new reocrd id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertSionItemTableRelation(
        RefRecId _sionItemRecId,
        RefRecId _newRecId)
    {
        EximSionItemTableRelationship_IN sionItemTableRelation;
        EximSionItemTableRelationship_IN sionItemTableRelationLoc;

        while select sionItemTableRelation
            where sionItemTableRelation.SionItemTableRecId == _sionItemRecId
        {
            sionItemTableRelationLoc.data(sionItemTableRelation);
            sionItemTableRelationLoc.SionItemTableRecId = _newRecId;
            sionItemTableRelationLoc.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSionLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into table.
    /// </summary>
    /// <param name="_refRecId">
    /// The record id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertSionLines(RefRecId _refRecId)
    {
        EximSionLine_IN sionLine;
        EximSionLine_IN sionLineLoc;

        while select sionLine
            where sionLine.SionTableRecId == sionTableRecId
        {
            sionLineLoc.data(sionLine);
            sionLineLoc.SionTableRecId = _refRecId;
            sionLineLoc.doInsert();

            this.insertSionItemTable(sionLine.RecId, sionLineLoc.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSionStandardQtyTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts standard quantity table.
    /// </summary>
    /// <param name="_sionItemTableRecId">
    /// The record id of the item table.
    /// </param>
    /// <param name="_newRecId">
    /// The new record id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertSionStandardQtyTable(
        RefRecid _sionItemTableRecId,
        RefRecid _newRecId)
    {
        EximSionStandardQtyTable_IN sionStandardQtyTable;
        EximSionStandardQtyTable_IN sionStandardQtyTableLoc;

        sionStandardQtyTable = EximSionStandardQtyTable_IN::findByRef(_sionItemTableRecId);

        sionStandardQtyTableLoc.data(sionStandardQtyTable);
        sionStandardQtyTableLoc.SionItemTableRecId = _newRecId;
        sionStandardQtyTableLoc.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record into table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertSionTable()
    {
        EximSionTable_IN sionTableLoc;

        fromDateTime = DateTimeUtil::removeTimeZoneOffset(fromDateTime, DateTimeUtil::getUserPreferredTimeZone());
        toDateTime   = DateTimeUtil::removeTimeZoneOffset(toDateTime, DateTimeUtil::getUserPreferredTimeZone());

        sionTableLoc.EximProductGroupTable = EximProductGroupTable_IN::findByProductGroupId(toProductGroup).RecId;
        sionTableLoc.ValidFrom = fromDateTime;
        sionTableLoc.ValidTo   = toDateTime;
        sionTableLoc.insert();

        this.insertSionLines(sionTableLoc.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDateTime parmFromDateTime(FromDateTime _fromDateTime = fromDateTime)
    {
        fromDateTime = _fromDateTime;

        return fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromProductGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximProductGroup_IN parmFromProductGroup(EximProductGroup_IN _fromProductGroup = fromProductGroup)
    {
        fromProductGroup = _fromProductGroup;

        return fromProductGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSionTableRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmSionTableRecId(RefRecId _sionTableRecId = sionTableRecId)
    {
        sionTableRecId = _sionTableRecId;

        return sionTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDateTime parmToDateTime(ToDateTime _toDateTime = toDateTime)
    {
        toDateTime = _toDateTime;

        return toDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToProductGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximProductGroup_IN parmToProductGroup(EximProductGroup_IN _toProductGroup = toProductGroup)
    {
        toProductGroup = _toProductGroup;

        return toProductGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        super();

        try
        {
            ttsbegin;
            EximSionCopying_IN::runOnServer(toProductGroup, fromDateTime, toDateTime, sionTableRecId);
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>EximSionCopying_IN</c> class.
    /// </summary>
    /// <param name="_calledFrom">
    /// The called from instance.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        ret = super(_calledFrom);

        if (ret &&
            (!fromProductGroup
            || !toProductGroup
            || !EximProductGroupTable_IN::exist(toProductGroup)))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS61465";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EximSionTable_IN   sionTable;
        EximSionCopying_IN sionCopying = new EximSionCopying_IN();
        FormDataSource     eximSionTableDS;

        if (_args && _args.dataset() && (_args.dataset() == tablenum(EximSionTable_IN)))
        {
            sionTable       = _args.record();
            eximSionTableDS = FormDataUtil::getFormDataSource(_args.record());

            sionCopying.parmFromProductGroup(EximProductGroupTable_IN::find(sionTable.EximProductGroupTable).ProductGroup);
            sionCopying.parmSionTableRecId(sionTable.RecId);

            if (sionCopying.prompt())
            {
                if (sionCopying.validate())
                {
                    sionCopying.runOperation();
                }

                if (eximSionTableDS)
                {
                    eximSionTableDS.executeQuery();
                }
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on the server side.
    /// </summary>
    /// <param name="_toProductGroup">
    /// The exim product group.
    /// </param>
    /// <param name="_fromDateTime">
    /// The from date time.
    /// </param>
    /// <param name="_toDateTime">
    /// The to date time.
    /// </param>
    /// <param name="_sionTableRecId">
    /// The sion table rec id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runOnServer(
        EximProductGroup_IN _toProductGroup,
        FromDateTime        _fromDateTime,
        ToDateTime          _toDateTime,
        RefRecId            _sionTableRecId)
    {
        EximSionCopying_IN  eximSionCopying;

        eximSionCopying = new EximSionCopying_IN();
        eximSionCopying.parmToProductGroup(_toProductGroup);
        eximSionCopying.parmFromDateTime(_fromDateTime);
        eximSionCopying.parmToDateTime(_toDateTime);
        eximSionCopying.parmSionTableRecId(_sionTableRecId);
        eximSionCopying.insertSionTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>