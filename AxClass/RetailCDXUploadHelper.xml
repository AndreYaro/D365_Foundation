<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXUploadHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  CDX Upload helper class with common methods used by cloud and store system upload.
/// </summary>
public static class RetailCDXUploadHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CreateUploadSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create upload session. If upload session already exists, ignore.
    /// </summary>
    /// <param name = "dataStoreRecID">The data store RecID.</param>
    /// <param name = "jobID">The job identifier.</param>
    /// <param name = "scheduleRecID">The schedule RecId.</param>
    /// <param name = "success">Status indicating if upload is successful.</param>
    /// <param name = "targetStorage">The GUID record of uploaded Azure blob.</param>
    /// <param name = "fileSize">The file size.</param>
    /// <param name = "checkSum">The file checksum.</param>
    /// <param name = "localUploadSessionId">Upload session identifier on channel database.</param>
    /// <param name = "errorMessage">The error message.</param>
    /// <param name = "rerunFor">The upload session ID that this upload session reruns for.</param>
    /// <returns>Created upload session Id.</returns>
    public static RetailCDXSessionNumber CreateUploadSession(int64 dataStoreRecID, str jobID, int64 scheduleRecID,  boolean success, RetailCDXFilePathOrGuid targetStorage, RetailCDXFileSize fileSize, RetailCdxCheckSum checkSum, RetailCdxLocalUploadSessionId localUploadSessionId, str errorMessage, RetailCDXSessionNumber rerunFor = 0)
    {
        return RetailCDXUploadHelper::CreateUploadSession_v2(dataStoreRecID, jobID, scheduleRecID, success, targetStorage, fileSize, checkSum, localUploadSessionId, errorMessage, rerunFor, RetailCDXUploadSessionRerunType::IncludeRecordsFromSubsequentSessions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateUploadSession_v2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create upload session. If upload session already exists, ignore.
    /// </summary>
    /// <param name = "dataStoreRecID">The data store RecID.</param>
    /// <param name = "jobID">The job identifier.</param>
    /// <param name = "scheduleRecID">The schedule RecId.</param>
    /// <param name = "success">Status indicating if upload is successful.</param>
    /// <param name = "targetStorage">The GUID record of uploaded Azure blob.</param>
    /// <param name = "fileSize">The file size.</param>
    /// <param name = "checkSum">The file checksum.</param>
    /// <param name = "localUploadSessionId">Upload session identifier on channel database.</param>
    /// <param name = "errorMessage">The error message.</param>
    /// <param name = "rerunFor">The upload session ID that this upload session reruns for.</param>
    /// <param name = "uploadSessionRerunType">The upload session rerun type.</param>
    /// <param name = "batchJobId">The batch job Id.</param>
    /// <returns>Created upload session Id.</returns>
    internal static RetailCDXSessionNumber CreateUploadSession_v2(int64 dataStoreRecID, str jobID, int64 scheduleRecID,  boolean success, RetailCDXFilePathOrGuid targetStorage, RetailCDXFileSize fileSize, RetailCdxCheckSum checkSum, RetailCdxLocalUploadSessionId localUploadSessionId, str errorMessage, RetailCDXSessionNumber rerunFor, RetailCDXUploadSessionRerunType uploadSessionRerunType, RecId batchJobId = 0)
    {
        if (dataStoreRecID == 0)
        {
            throw Global::error("@Retail:RetailCDXUploadHelperDataStoreRecIdZeroError");
        }

        if (!jobID)
        {
            throw Global::error("@Retail:RetailCDXUploadHelperJobIdEmptyError");
        }

        RetailCDXUploadSession uploadSessionTable = RetailCDXUploadSession::findValidUploadSession(dataStoreRecID, localUploadSessionId);

        // if trying to create a success upload session (i.e upload session that didn't fail during package creation step), check if there is an existing valid AX upload session for the local upload session Id
        if (success && uploadSessionTable)
        {
            Global::warning(strFmt("@Retail:RetailCDXIgnoreDuplicateUploadSessionWarning", dataStoreRecID, localUploadSessionId));
            return uploadSessionTable.UploadSessionId;
        }

        select maxof(UploadSessionId)
            from uploadSessionTable
            where uploadSessionTable.DataStore == dataStoreRecID;

        RetailCDXSessionNumber uploadSessionId = uploadSessionTable.UploadSessionId + 1;

        // check if the new AX upload session Id is valid
        if (uploadSessionId <= 0)
        {
            throw Global::error(strFmt("@Retail:RetailCDXUploadCreateAXUploadSessionZeroValueError", uploadSessionId));
        }

        // Upload sessions created by AsyncClient are expected to not have schedule
        if (scheduleRecID == 0)
        {
            RetailConnDatabaseProfile    dataStore;
            RetailConnScheduleJobMapping scheduleJobMapping;
            RetailCDXScheduleDataGroup   scheduleDataGroup;

            select firstonly scheduleRecID from scheduleJobMapping
                where  scheduleJobMapping.SchedulerJobId == jobID
                exists join scheduleDataGroup
                where  scheduleDataGroup.Schedule == scheduleJobMapping.ScheduleRecId
                exists join dataStore
                where  dataStore.DataGroup == scheduleDataGroup.DataGroup
                && dataStore.RecId         == dataStoreRecID;

            scheduleRecID = scheduleJobMapping.ScheduleRecId;
        }

        RetailCDXUploadSession uploadSessionSelectedForRerun;

        // Note that the rerunFor contains the localUploadSessionID value of the original upload session which was selected for rerun, hence we need to get the corresponding AX Upload session Id.
        if (rerunFor)
        {
            // get the corresponding session only if the rerunFor is not 0
            // otherwise we can pick the wrong upload session as LocalUploadSessionId is 0 on most of the upload sessions which are not created as part of a rerun.
            select firstonly UploadSessionId from uploadSessionSelectedForRerun
                where uploadSessionSelectedForRerun.LocalUploadSessionId == rerunFor &&
                      uploadSessionSelectedForRerun.DataStore == dataStoreRecID;
        }

        RetailCDXUploadSession uploadSessionToCreate;

        uploadSessionToCreate.initValue();
        uploadSessionToCreate.UploadSessionId = uploadSessionId;
        uploadSessionToCreate.dataStore = dataStoreRecID;
        uploadSessionToCreate.JobId = jobID;
        uploadSessionToCreate.Schedule = scheduleRecID;
        uploadSessionToCreate.DateCreated = DateTimeUtil::utcNow();
        uploadSessionToCreate.FileSize = fileSize;
        uploadSessionToCreate.CheckSum = checkSum;
        uploadSessionToCreate.LocalUploadSessionId = localUploadSessionId;
        uploadSessionToCreate.RerunFor = uploadSessionSelectedForRerun.UploadSessionId;
        uploadSessionToCreate.BatchJobId = batchJobId;

        // set new DataGroup field which is part of blob storage container path
        // this field will NOT be updated when the datstore is moved to another datagroup since it is only used for accessing package from blob storage
        RetailConnDatabaseProfile dataStore;

        select DataGroup from dataStore
            where dataStore.RecId == dataStoreRecID;

        if (dataStore)
        {
            uploadSessionToCreate.DataGroup = dataStore.DataGroup;
        }

        if (success)
        {
            uploadSessionToCreate.Status = RetailCDXUploadSessionStatus::Uploaded;
            uploadSessionToCreate.UploadPath = targetStorage;
        }
        else
        {
            uploadSessionToCreate.Status = RetailCDXUploadSessionStatus::ReadFailed;
            uploadSessionToCreate.Message = errorMessage;
        }

        // create upload session
        ttsbegin;

        if (rerunFor)
        {
            RetailCDXUploadSession rerunUploadSessionTable = RetailCDXUploadSession::findValidUploadSession(dataStoreRecID, rerunFor);

            // when rerun for a single upload session, only mark that session to Executed, and use the uploadSessionRerunType returned from client side
            // to handle the case client didn't update, in this case it should go back to the old scenario.
            if (rerunUploadSessionTable && uploadSessionRerunType == RetailCDXUploadSessionRerunType::IncludeRecordsFromSelectedSessionOnly)
            {
                update_recordset uploadSessionTable
                    setting Rerun = RetailCDXUploadSessionRerun::Executed
                    where uploadSessionTable.DataStore == dataStoreRecID
                        && uploadSessionTable.JobId == jobID
                        && uploadSessionTable.LocalUploadSessionId == rerunFor
                        && uploadSessionTable.Rerun == RetailCDXUploadSessionRerun::Marked;

                if (!RetailCdxFeatureControl::IsCancelingOldUploadSessionsReplacedByRerunDisabled()
                && uploadSessionToCreate.Status == RetailCDXUploadSessionStatus::Uploaded)
                {
                    // The new upload session, which is created as a result of rerunning the session originally selected for rerun, contains all transactional data contained in the session selected for rerun and
                    // all transactional data created since then.  Hence we can safely cancel the original upload session selected for rerun.
                    update_recordset uploadSessionTable
                    setting Status = RetailCDXUploadSessionStatus::Canceled,
                            Message = strFmt("@Retail:UploadSessionCanceledAndReplacedByNewerSession", uploadSessionId)
                    where uploadSessionTable.DataStore == dataStoreRecID
                       && uploadSessionTable.JobId == jobID
                       && uploadSessionTable.LocalUploadSessionId == rerunFor
                       && uploadSessionTable.Status != RetailCDXUploadSessionStatus::Applied;
                }
            }
            else
            {
                // GetRerunUploadSessionId returns the oldest upload session marked for rerun.
                // so if that rerun is successful and creates a new upload session then any upload sessions that is still marked for rerun and is created after the 'oldest session marked for rerun'
                // do not need to be processed because the newer session created as a result of the last rerun will contain a superset of the data that we would get by rerunning a more recent session.
                // hence we need to set the 'Rerun' field of this sessions to RetailCDXUploadSessionRerun::Executed.
                update_recordset uploadSessionTable
                setting Rerun = RetailCDXUploadSessionRerun::Executed
                where uploadSessionTable.DataStore == dataStoreRecID
                    && uploadSessionTable.JobId == jobID
                    && uploadSessionTable.Rerun == RetailCDXUploadSessionRerun::Marked;

                if (!RetailCdxFeatureControl::IsCancelingOldUploadSessionsReplacedByRerunDisabled()
                && uploadSessionToCreate.Status == RetailCDXUploadSessionStatus::Uploaded)
                {
                    // The new upload session, which is created as a result of rerunning the session originally selected for rerun, contains all transactional data contained in the session selected for rerun and
                    // all transactional data created since then.  Hence we can safely cancel the upload sessions created after the session selected for rerun.
                    update_recordset uploadSessionTable
                    setting Status = RetailCDXUploadSessionStatus::Canceled,
                            Message = strFmt("@Retail:UploadSessionCanceledAndReplacedByNewerSession", uploadSessionId)
                    where uploadSessionTable.DataStore == dataStoreRecID
                       && uploadSessionTable.JobId == jobID
                       && uploadSessionTable.LocalUploadSessionId >= rerunFor
                       && uploadSessionTable.LocalUploadSessionId < localUploadSessionId
                       && uploadSessionTable.Status != RetailCDXUploadSessionStatus::Applied;
                }
            }
        }

        if (!uploadsessionToCreate.validateWrite())
        {
            throw Global::error(strFmt("@Retail:RetailCDXUploadSessionValidateWriteFailed", localUploadSessionId));
        }

        uploadsessionToCreate.insert();

        // after upload session had been created successfully, remove the related record from the RetailCDXUploadPathHistory table
        RetailCDXUploadPathHistory retailCDXUploadPathHistory;
        delete_from retailCDXUploadPathHistory
            where retailCDXUploadPathHistory.DataGroup == uploadsessionToCreate.DataGroup
               && retailCDXUploadPathHistory.UploadPath == uploadsessionToCreate.UploadPath;

        ttscommit;

        return uploadSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateUploadDataFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate upload data file name.
    /// </summary>
    /// <param name = "dataStoreRecID">The data store RecID.</param>
    public static str GenerateUploadDataFileName(int64 dataStoreRecID)
    {
        utcdatetime now = DateTimeUtil::utcNow();
        str suffix, prefix;

        int t1,t2,t3,t4,t5,t6;
        t1 = DateTimeUtil::year(now);
        t2 = DateTimeUtil::month(now);
        t3 = DateTimeUtil::day(now);
        t4 = DateTimeUtil::hour(now);
        t5 = DateTimeUtil::minute(now);
        t6 = DateTimeUtil::second(now);

        suffix = strFmt('%1%2%3%4%5%6',
            t1,
            strRFix(int2Str(t2), 2, '0'),
            strRFix(int2Str(t3), 2, '0'),
            strRFix(int2Str(t4), 2, '0'),
            strRFix(int2Str(t5), 2, '0'),
            strRFix(int2Str(t6), 2, '0')
        );

        prefix = System.IO.Path::GetRandomFileName();

        return strFmt('%1_%2-%3.zip', prefix, dataStoreRecID, suffix);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>