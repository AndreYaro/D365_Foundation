<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentReconciliationClearingCustTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BankDocumentReconciliationClearingCustTrans extends BankDocumentReconciliationClearing
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doClearBankDocument</Name>
				<Source><![CDATA[
    protected void doClearBankDocument()
    {
        if (listOfBankDocumentRecId != null && (listOfBankDocumentRecId.elements() == 1))
        {
            ListEnumerator le = listOfBankDocumentRecId.getEnumerator();
            le.moveNext();

            BankDocumentTable bankDocumentTable = BankDocumentTable::find(le.current());
            
            if (this.checkDocumentNotAlreadyMatched(bankDocumentTable)
                && this.checkZeroBalanceOnRelatedBankAccountTrans(bankDocumentTable))
            {
                BankDocumentProcessor::submitBankDocumentTable(bankDocumentTable.getBankDocumentTableMap(), BankDocumentStatusChangeType::Reconcile);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkZeroBalanceOnRelatedBankAccountTrans</Name>
				<Source><![CDATA[
    private boolean checkZeroBalanceOnRelatedBankAccountTrans(BankDocumentTable _bankDocumentTable)
    {
        boolean isValid = false;

        BankAccountTrans bankAccountTransOriginal = this.findOriginalBankAccountTrans(_bankDocumentTable);
        BankAccountTrans bankAccountTransReversal = this.findCancelledBankAccountTrans(_bankDocumentTable);

        if (bankAccountTransOriginal && bankAccountTransReversal && (bankAccountTransOriginal.AmountMST + bankAccountTransReversal.AmountMST) == 0)
        {
            isValid = true;
        }

        if (!isValid)
        {
            checkFailed("@CashManagement:ClearingCustTransNonMatchingBankAccountTrans");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalBankAccountTrans</Name>
				<Source><![CDATA[
    private BankAccountTrans findOriginalBankAccountTrans(BankDocumentTable _bankDocumentTable)
    {
        return this.findUnreconciledBankAccountTrans(_bankDocumentTable.SourceRelationType, _bankDocumentTable.SourceRecId, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCancelledBankAccountTrans</Name>
				<Source><![CDATA[
    private BankAccountTrans findCancelledBankAccountTrans(BankDocumentTable _bankDocumentTable)
    {
        return this.findUnreconciledBankAccountTrans(_bankDocumentTable.SourceRelationType, _bankDocumentTable.SourceRecId, NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnreconciledBankAccountTrans</Name>
				<Source><![CDATA[
    private BankAccountTrans findUnreconciledBankAccountTrans(RefTableId _sourceTableId, RefRecId _sourceRecId, NoYes _isCancelled)
    {
        BankAccountTrans bankAccountTrans;

        select firstonly * from bankAccountTrans
            where bankAccountTrans.SourceTableId == _sourceTableId
                && bankAccountTrans.SourceRecId == _sourceRecId
                && bankAccountTrans.Reconciled == NoYes::No
                && bankAccountTrans.Cancel == _isCancelled;

        return bankAccountTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDocumentNotAlreadyMatched</Name>
				<Source><![CDATA[
    private boolean checkDocumentNotAlreadyMatched(BankDocumentTable _bankDocumentTable)
    {
        boolean isValid = true;

        if (_bankDocumentTable.IsReconciled)
        {
            isValid = checkFailed("@GLS221892");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>