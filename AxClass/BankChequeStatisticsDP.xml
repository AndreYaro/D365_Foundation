<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankChequeStatisticsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankChequeStatisticsDP</c> class is used as the data provider for the <c>BankChequeStatisticsReport</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(BankChequeStatisticsContract))]
class BankChequeStatisticsDP extends SRSReportDataProviderBase
{
    TransDate fromDate;
    TransDate toDate;
    BankChequeStatisticsTmp bankChequekStatisticsTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankChequeStatisticsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>BankChequeStatisticsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>BankChequeStatisticsTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('BankChequeStatisticsTmp')]
    public BankChequeStatisticsTmp bankChequeStatisticsTmp()
    {
        select bankChequekStatisticsTmp;
        return bankChequekStatisticsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChequesData</Name>
				<Source><![CDATA[
    private void processChequesData(BankChequeStates _status)
    {
        BankChequeTable bankChequeTable;
        BankAccountTrans bankAccountTrans;

        if (_status == BankChequeStates::Voided)
        {
            ttsBegin;
            insert_recordset bankChequekStatisticsTmp
            (
                ChequeNum,
                AccountID,
                TransDate,
                Voucher,
                CurrencyCode,
                AmountCur,
                Status
            )
            select ChequeNum, AccountID, TransDate, Voucher, CurrencyCode, AmountCur, _status
                from bankChequeTable
                where bankChequeTable.ChequeStatus == ChequeStatus::Rejected
                    && bankChequeTable.TransDate >= fromDate
                    && bankChequeTable.TransDate <= toDate;
            ttsCommit;
        }

        if (_status == BankChequeStates::Outstanding)
        {
            ttsBegin;
            insert_recordset bankChequekStatisticsTmp
            (
                ChequeNum,
                AccountID,
                CurrencyCode,
                Status,
                TransDate,
                Voucher,
                AmountCur
            )
            select ChequeNum, AccountID, CurrencyCode, _status
                from bankChequeTable
            join TransDate, Voucher, AmountCur
                from bankAccountTrans
                where bankAccountTrans.AccountId == bankChequeTable.AccountID
                    && bankAccountTrans.ChequeNum == bankChequeTable.ChequeNum
                    && bankAccountTrans.TransDate >= fromDate
                    && bankAccountTrans.TransDate <= toDate
                    && bankAccountTrans.Included == NoYes::No;
            ttsCommit;
        }

        if (_status == BankChequeStates::Cleared)
        {
            ttsBegin;
            insert_recordset bankChequekStatisticsTmp
            (
                ChequeNum,
                AccountID,
                CurrencyCode,
                Status,
                TransDate,
                Voucher,
                AmountCur
            )
            select ChequeNum, AccountID, CurrencyCode, _status
                from bankChequeTable
            join TransDate, Voucher, AmountCur
                from bankAccountTrans
                where bankAccountTrans.AccountId == bankChequeTable.AccountID
                    && bankAccountTrans.ChequeNum == bankChequeTable.ChequeNum
                    && bankAccountTrans.TransDate >= fromDate
                    && bankAccountTrans.TransDate <= toDate
                    && bankAccountTrans.Included == NoYes::Yes;
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report
    /// </summary>
    public void processReport()
    {
        BankChequeStatisticsContract contract;

        contract = this.parmDataContract();

        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();

        ttsBegin;
        this.processChequesData(BankChequeStates::Voided);
        this.processChequesData(BankChequeStates::Outstanding);
        this.processChequesData(BankChequeStates::Cleared);
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankChequeStatisticsDP construct()
    {
        return new BankChequeStatisticsDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
