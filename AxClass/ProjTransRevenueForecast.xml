<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransRevenueForecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjTransRevenueForecast extends ProjTransRevenue
{
    ProjForecastRevenue projForecastRevenue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canTransStatusBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a transaction can be invoiced based on its status.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    boolean canTransStatusBeInvoiced(boolean     _chargeable = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projForecastRevenue.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for a transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    public CostPrice costPrice()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projForecastRevenue.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return projForecastRevenue.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the exchange rate to use for the sales amounts that are reported by this transaction
    /// based on the transaction date.
    /// </summary>
    /// <param name="_transDate">
    /// The date to use to find the exchange rate. The default value is the transaction date; optional.
    /// </param>
    /// <returns>
    /// The exchange rate to use for the sales amounts that are reported by this transaction.
    /// </returns>
    public ExchRate exchRateSales(TransDate _transDate = dateNull())
    {
        return projForecastRevenue.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastEliminationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the expected elimination date for this transaction.
    /// </summary>
    /// <returns>
    /// The expected elimination date for this transaction.
    /// </returns>
    ProjForecastEliminationDate    forecastEliminationDate()
    {
        return projForecastRevenue.EliminationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the expected invoice date for this transaction.
    /// </summary>
    /// <returns>
    /// The expected invoice date for this transaction.
    /// </returns>
    ProjForecastInvoiceDate    forecastInvoiceDate()
    {
        return projForecastRevenue.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastModelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the forecast model for this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the forecast model for this transaction.
    /// </returns>
    ForecastModelId forecastModelId()
    {
        return projForecastRevenue.ModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projForecastRevenue.ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return projForecastRevenue.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjForecastRevenue _projForecastRevenue)
    {
        projForecastRevenue  = _projForecastRevenue;

        super(_projForecastRevenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    public ProjId projId()
    {
        return projForecastRevenue.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    public Qty qty()
    {
        return projForecastRevenue.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return projForecastRevenue.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return projForecastRevenue.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    public SalesPrice salesPrice()
    {
        return projForecastRevenue.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for this transaction.
    /// </returns>
    public TaxGroup taxGroup()
    {
        return projForecastRevenue.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return projForecastRevenue.StartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    public TransactionID transId()
    {
        return projForecastRevenue.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    public TransTxt txt()
    {
        return projForecastRevenue.Txt;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>