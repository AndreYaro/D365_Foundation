<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRFPassthrough_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSRFPassthrough_Extension</c> provides strongly typed convenience methods to the <c>WhsrfPassthrough</c> class.
/// </summary>
[ExtensionOf(classStr(WhsrfPassthrough))]
public final class WHSRFPassthrough_Extension
{
    const private str IsPreviousSession = 'IsPreviousSession';
    const private str SessionToken = 'SessionToken';
    const private str PreviousSessionToken = 'PreviousSessionToken';
    const private str SendWarehouseInfo = 'SendWarehouseInfo';
    const private str DeviceAlert = 'DeviceAlert';
    const private str PreviousLocation = 'PrevLocation';
    const private str PreviousItem = 'PrevItem';
    const private str DeviceHardwareIdentification = 'DeviceHardwareIdentification';

    #WHSRF
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LineNum parmLineNum(LineNum _lineNum = 0)
    {
        if (!prmIsDefault(_lineNum))
        {
            this.insert(#LineNum, _lineNum);
        }
        return this.lookupNum(#LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = '')
    {
        if (!prmIsDefault(_inventLocationId))
        {
            this.insert(#InventLocationId, _inventLocationId);
        }
        return this.lookupStr(#InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicensePlateId</Name>
				<Source><![CDATA[
    public WHSLicensePlateId parmLicensePlateId(WHSLicensePlateId _licensePlateId = '')
    {
        if (!prmIsDefault(_licensePlateId))
        {
            this.insert(#LicensePlateId, _licensePlateId);
        }
        return this.lookupStr(#LicensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSLocationId</Name>
				<Source><![CDATA[
    public WMSLocationId parmWMSLocationId(WMSLocationId _wmsLocationId = '')
    {
        if (!prmIsDefault(_wmsLocationId))
        {
            this.insert(#WMSLocationId, _wmsLocationId);
        }
        return this.lookupStr(#WMSLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _siteId = '')
    {
        if (!prmIsDefault(_siteId))
        {
            this.insert(#InventSiteId, _siteId);
        }
        return this.lookupStr(#InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventOwnerId</Name>
				<Source><![CDATA[
    public InventOwnerId_RU parmInventOwnerId(InventOwnerId_RU _inventOwnerId = '')
    {
        if (!prmIsDefault(_inventOwnerId))
        {
            this.insert(#OwnerId_RU, _inventOwnerId);
        }
        return this.lookupStr(#OwnerId_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    public UserId parmUserId(UserId _userId = '')
    {
        if (!prmIsDefault(_userId))
        {
            this.insert(#UserId, _userId);
        }
        return this.lookupStr(#UserId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = '')
    {
        if (!prmIsDefault(_itemId))
        {
            this.insert(#ItemId, _itemId);
        }
        return this.lookupStr(#ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public ItemId parmInventDimId(InventDimId _inventDimId = '')
    {
        if (!prmIsDefault(_inventDimId))
        {
            this.insert(#InventDimId, _inventDimId);
        }
        return this.lookupStr(#InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = '')
    {
        if (!prmIsDefault(_prodId))
        {
            this.insert(#ProdId, _prodId);
        }
        return this.lookupStr(#ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    public PurchId parmPurchId(PurchId _purchId = '')
    {
        if (!prmIsDefault(_purchId))
        {
            this.insert(#PurchId, _purchId);
        }
        return this.lookupStr(#PurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    public WHSLoadId parmLoadId(WHSLoadId _loadId = '')
    {
        if (!prmIsDefault(_loadId))
        {
            this.insert(#LoadId, _loadId);
        }

        return this.lookupStr(#LoadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchId</Name>
				<Source><![CDATA[
    public InventBatchId parmBatchId(InventBatchId _batchId = '')
    {
        if (!prmIsDefault(_batchId))
        {
            this.insert(#BatchId, _batchId);
        }
        return this.lookupStr(#BatchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Qty parmBatchQty(anytype _batchQty = '')
    {
        if (!prmIsDefault(_batchQty))
        {
            this.insert(#BatchQty, _batchQty);
        }
        return this.lookupNum(#BatchQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchExpDate</Name>
				<Source><![CDATA[
    public str parmBatchExpDate(str _batchExpDate = '')
    {
        if (!prmIsDefault(_batchExpDate))
        {
            this.insert(#ExpDate, _batchExpDate);
        }
        return this.lookupStr(#ExpDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSReceiptId parmReceiptId(WHSReceiptId _receiptId = '')
    {
        if (!prmIsDefault(_receiptId))
        {
            this.insert(#ReceiptId, _receiptId);
        }
        return this.lookupStr(#ReceiptId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSerialId</Name>
				<Source><![CDATA[
    public InventSerialId parmSerialId(InventSerialId _serialId = '')
    {
        if (!prmIsDefault(_serialId))
        {
            this.insert(#SerialId, _serialId);
        }
        return this.lookupStr(#SerialId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUOM</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUOM(UnitOfMeasureSymbol _uom = '')
    {
        if (!prmIsDefault(_uom))
        {
            this.insert(#UOM, _uom);
        }
        return this.lookupStr(#UOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedValueUOM</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmSelectedValueUOM(UnitOfMeasureSymbol _uom = '')
    {
        if (!prmIsDefault(_uom))
        {
            this.insert(#SelectedValueUOM, _uom);
        }
        return this.lookupStr(#SelectedValueUOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentUOM</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmCurrentUOM(UnitOfMeasureSymbol _uom = '')
    {
        if (!prmIsDefault(_uom))
        {
            this.insert(#CurrentUOM, _uom);
        }
        return this.lookupStr(#CurrentUOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public Qty parmQty(anytype _qty = '')
    {
        if (!prmIsDefault(_qty))
        {
            this.insert(#Qty, _qty);
        }
        return this.lookupNum(#Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyToScrap</Name>
				<Source><![CDATA[
    public Qty parmQtyToScrap(anytype _qty = '')
    {
        if (!prmIsDefault(_qty))
        {
            this.insert(#QtyToScrap, _qty);
        }
        return this.lookupNum(#QtyToScrap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyToConsume</Name>
				<Source><![CDATA[
    public Qty parmQtyToConsume(anytype _qty = '')
    {
        if (!prmIsDefault(_qty))
        {
            this.insert(#QtyToConsume, _qty);
        }
        return this.lookupNum(#QtyToConsume);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyToPick</Name>
				<Source><![CDATA[
    public Qty parmQtyToPick(anytype _qty = '')
    {
        if (!prmIsDefault(_qty))
        {
            this.insert(#QtyToPick, _qty);
        }
        return this.lookupNum(#QtyToPick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyToPut</Name>
				<Source><![CDATA[
    public Qty parmQtyToPut(anytype _qty = '')
    {
        if (!prmIsDefault(_qty))
        {
            this.insert(#QtyToPut, _qty);
        }
        return this.lookupNum(#QtyToPut);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentQty</Name>
				<Source><![CDATA[
    public Qty parmCurrentQty(anytype _qty = '')
    {
        if (!prmIsDefault(_qty))
        {
            this.insert(#CurrentQty, _qty);
        }
        return this.lookupNum(#CurrentQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Qty parmNewQty(anytype _qty = '')
    {
        if (!prmIsDefault(_qty))
        {
            this.insert(#NewQty, _qty);
        }
        return this.lookupNum(#NewQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Qty parmDimQty(anytype _qty = '')
    {
        if (!prmIsDefault(_qty))
        {
            this.insert(#DimQty, _qty);
        }
        return this.lookupNum(#DimQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimRunningQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Qty parmDimRunningQty(anytype _qty = '')
    {
        if (!prmIsDefault(_qty))
        {
            this.insert(#DimRunningQty, _qty);
        }
        return this.lookupNum(#DimRunningQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunningQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Qty parmRunningQty(anytype _qty = '')
    {
        if (!prmIsDefault(_qty))
        {
            this.insert(#RunningQty, _qty);
        }
        return this.lookupNum(#RunningQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPiecesConfirmed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventHandlingQty parmPiecesConfirmed(InventHandlingQty _piecesConfirmed = 0)
    {
        if (!prmIsDefault(_piecesConfirmed))
        {
            this.insert(WHSWorkExecuteDisplayPieceByPieceControls::PiecesConfirmed, _piecesConfirmed);
        }
        return this.lookupNum(WHSWorkExecuteDisplayPieceByPieceControls::PiecesConfirmed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTOLineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal LineNum parmTOLineNum(anytype _lineNum = '')
    {
        if (!prmIsDefault(_lineNum))
        {
            this.insert(#TOLineNum, _lineNum);
        }
        return this.lookupNum(#TOLineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMixedLPLineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Line parmMixedLPLineNum(anytype _lineNum = '')
    {
        if (!prmIsDefault(_lineNum))
        {
            this.insert(#MixedLPLineNum, _lineNum);
        }
        return this.lookupNum(#MixedLPLineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPONum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal PurchId parmPONum(PurchId _PONum = '')
    {
        if (!prmIsDefault(_PONum))
        {
            this.insert(#PONum, _PONum);
        }

        return this.lookupStr(#PONum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPOLineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal TradeLineNumber parmPOLineNum(anytype _lineNum = '')
    {
        if (!prmIsDefault(_lineNum))
        {
            this.insert(#POLineNum, _lineNum);
        }
        return this.lookupInt64(#POLineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmASNItemRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal RecId parmASNItemRecId(anytype _aSNItemRecId = '')
    {
        if (!prmIsDefault(_aSNItemRecId))
        {
            this.insert(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId, _aSNItemRecId);
        }
        return this.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevMode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkExecuteMode parmPrevMode(anytype _mode = '')
    {
        if (!prmIsDefault(_mode))
        {
            this.insert(#PrevMode, _mode);
        }
        return any2Enum(this.lookupNum(#PrevMode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevStep</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal int parmPrevStep(anytype _step = '')
    {
        if (!prmIsDefault(_step))
        {
            this.insert(#PrevStep, _step);
        }
        return this.lookupNum(#PrevStep);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewCaptureWeight</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSCapturedWeight parmNewCaptureWeight(anytype _newCaptureWeight = '')
    {
        if (!prmIsDefault(_newCaptureWeight))
        {
            this.insert(WHSWorkExecuteDisplayCatchWeightControls::NewCaptureWeight, _newCaptureWeight);
        }
        return this.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::NewCaptureWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSReturnID parmReturnId(WHSReturnID _returnId = '')
    {
        if (!prmIsDefault(_returnId))
        {
            this.insert(WHSMobileAppControlNames::ReturnId, _returnId);
        }

        return this.lookupStr(WHSMobileAppControlNames::ReturnId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveLabelId</Name>
				<Source><![CDATA[
    public WHSWaveLabelId parmWaveLabelId(anytype _waveLabelId = '')
    {
        if (!prmIsDefault(_waveLabelId))
        {
            this.insert(#WaveLabelId, _waveLabelId);
        }
        return this.lookupStr(#WaveLabelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveLabelBuildId</Name>
				<Source><![CDATA[
    public WHSWaveLabelBuildId parmWaveLabelBuildId(anytype _waveLabelBuildId = '')
    {
        if (!prmIsDefault(_waveLabelBuildId))
        {
            this.insert(#LabelBuildId, _waveLabelBuildId);
        }
        return this.lookupStr(#LabelBuildId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAppVersion</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSMobileAppVersion parmAppVersion(anytype _appVersion = '')
    {
        if (!prmIsDefault(_appVersion))
        {
            this.insert(#RequestAppVersion, _appVersion);
        }
        return this.lookupStr(#RequestAppVersion, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceId</Name>
				<Source><![CDATA[
    public guid parmDeviceId(guid _deviceId = emptyGuid())
    {
        if (!prmIsDefault(_deviceId))
        {
            this.insert(#RequestDeviceId, guid2Str(_deviceId));
        }
        str deviceId = this.lookupStr(#RequestDeviceId);

        return (deviceId == '') ? emptyGuid() : str2Guid(deviceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceBrand</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSMobileAppDeviceBrandId parmDeviceBrand(anytype _brandId = '')
    {
        if (!prmIsDefault(_brandId))
        {
            this.insert(#XMLDeviceBrandNameAttribute, _brandId);
        }
        return this.lookupStr(#XMLDeviceBrandNameAttribute, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceModel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSMobileAppDeviceModelId parmDeviceModel(anytype _modelId = '')
    {
        if (!prmIsDefault(_modelId))
        {
            this.insert(#XMLDeviceModelAttribute, _modelId);
        }
        return this.lookupStr(#XMLDeviceModelAttribute, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDevicePlatform</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSMobileAppPlatformId parmDevicePlatform(anytype _platformId = '')
    {
        if (!prmIsDefault(_platformId))
        {
            this.insert(#XMLDevicePlatformAttribute, _platformId);
        }
        return this.lookupStr(#XMLDevicePlatformAttribute, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDevicePlatformVersion</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSMobileAppVersion parmDevicePlatformVersion(anytype _platformVersion = '')
    {
        if (!prmIsDefault(_platformVersion))
        {
            this.insert(#XMLDevicePlatformVersionAttribute, _platformVersion);
        }
        return this.lookupStr(#XMLDevicePlatformVersionAttribute, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceAlert</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSMobileAppDeviceAlert parmDeviceAlert(anytype _alert = '')
    {
        if (!prmIsDefault(_alert))
        {
            this.insert(DeviceAlert, _alert);
        }
        return this.lookupStr(DeviceAlert, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceHardwareIdentification</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSMobileAppDeviceAlert parmDeviceHardwareIdentification(anytype _hardwareIdentification = '')
    {
        if (!prmIsDefault(_hardwareIdentification))
        {
            this.insert(DeviceHardwareIdentification, _hardwareIdentification);
        }
        return this.lookupStr(DeviceHardwareIdentification, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestXml</Name>
				<Source><![CDATA[
    public str parmRequestXml(anytype _requestXml = '')
    {
        if (!prmIsDefault(_requestXml))
        {
            this.insert(#RequestXmlString, _requestXml);
        }
        return this.lookupStr(#RequestXmlString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviousLocation</Name>
				<Source><![CDATA[
    public WMSLocationId parmPreviousLocation(WMSLocationId _prevLocation = '')
    {
        if (!prmIsDefault(_prevLocation))
        {
            this.insert(PreviousLocation, _prevLocation);
        }
        return this.lookupStr(PreviousLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviousItem</Name>
				<Source><![CDATA[
    public ItemId parmPreviousItem(ItemId _itemId = '')
    {
        if (!prmIsDefault(_itemId))
        {
            this.insert(PreviousItem, _itemId);
        }
        return this.lookupStr(PreviousItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an exact copy of the instance.
    /// </summary>
    /// <returns>An exact copy.</returns>
    public WhsrfPassthrough clone()
    {
        return WhsrfPassthrough::create(this.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the presence of the license plate grouping policy in the map.
    /// </summary>
    /// <param name="_licensePlateGroupingPolicy">
    /// The default license plate grouping policy parameter is passed  as none; optional.
    /// </param>
    /// <returns>
    /// returns the current license plate grouping policy from the lookup.
    /// </returns>
    public WHSLicensePlateGroupingPolicy parmUnitization(WHSLicensePlateGroupingPolicy _licensePlateGroupingPolicy = WHSLicensePlateGroupingPolicy::None)
    {
        if (!prmIsDefault(_licensePlateGroupingPolicy))
        {
            this.insert(#Unitization, _licensePlateGroupingPolicy);
        }
        return any2Enum(this.lookupNum(#Unitization));
    }

]]></Source>
			</Method>
			<Method>
				<Name>combineWith</Name>
				<Source><![CDATA[
    /// <summary>
    /// Combines two <c>WHSRFPassthrough</c> maps.
    /// </summary>
    /// <param name = "_sourceMap">
    /// The <c>WHSRFPassthrough</c> to combine with the contents of the current map.
    /// </param>
    public void combineWith(WHSRFPassthrough _sourceMap)
    {
        MapEnumerator me = _sourceMap.getEnumerator();
        while (me.moveNext())
        {
            str key = me.currentKey();
            str value = me.currentValue();

            this.insert(key, value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the presence of the work id in the map.
    /// </summary>
    /// <param name="_workId">
    /// Work id parameter to be used for map; optional.
    /// </param>
    /// <returns>
    /// returns the current work id from the lookup.
    /// </returns>
    public WHSWorkId parmWorkId(WHSWorkId _workId = '')
    {
        if (!prmIsDefault(_workId))
        {
            this.insert(#WorkId, _workId);
        }
        return this.lookupStr(#WorkId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the presence of the menu item in the map.
    /// </summary>
    /// <param name="_menuItem">
    /// Menu item parameter to be used for map; optional.
    /// </param>
    /// <returns>
    /// returns the current menu item from the lookup.
    /// </returns>
    public WHSMenuItemName parmMenuItem(WHSMenuItemName _menuItem = '')
    {
        if (!prmIsDefault(_menuItem))
        {
            this.insert(#MenuItem, _menuItem);
        }
        return this.lookupStr(#MenuItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the presence of location id to move in the map.
    /// </summary>
    /// <param name="_toLocationId">
    /// location id to be used for map; optional.
    /// </param>
    /// <returns>
    /// returns the current location id to move from the map.
    /// </returns>
    public WMSLocationId parmToLocationId(WMSLocationId _toLocationId = '')
    {
        if (!prmIsDefault(_toLocationId))
        {
            this.insert(#ToLocationId, _toLocationId);
        }
        return this.lookupStr(#ToLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFEFOWarnLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the presence of FEFOWarnLP value to show a warning message
    /// </summary>
    /// <param name="_licensePlateId">
    /// license plate id to be used for map; optional.
    /// </param>
    /// <returns>
    /// returns the current license plate id from the lookup
    /// </returns>
    public WHSLicensePlateId parmFEFOWarnLP(WHSLicensePlateId _licensePlateId = '')
    {
        if (!prmIsDefault(_licensePlateId))
        {
            this.insert(#FEFOWarnLP, _licensePlateId);
        }
        return this.lookupStr(#FEFOWarnLP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFEFOWarnBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the presence of FEFOWarnBatch value to show a warning message
    /// </summary>
    /// <param name="_batchId">
    /// batch id id to be used for map; optional.
    /// </param>
    /// <returns>
    /// returns the current batch id from the lookup
    /// </returns>
    public InventBatchId parmFEFOWarnBatch(InventBatchId _batchId = '')
    {
        if (!prmIsDefault(_batchId))
        {
            this.insert(#FEFOWarnBatch, _batchId);
        }
        return this.lookupStr(#FEFOWarnBatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryStatusId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSInventStatusId parmInventoryStatusId(WHSInventStatusId _inventoryStatusId = '')
    {
        if (!prmIsDefault(_inventoryStatusId))
        {
            this.insert(#InventoryStatus, _inventoryStatusId);
        }
        return this.lookupStr(#InventoryStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDispositionCode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSDispositionCode parmDispositionCode(WHSDispositionCode _dispositionCode = '')
    {
        if (!prmIsDefault(_dispositionCode))
        {
            this.insert(WHSMobileAppControlNames::DispositionCode, _dispositionCode);
        }
        return this.lookupStr(WHSMobileAppControlNames::DispositionCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferOrderReceiveInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventDimId parmTransferOrderReceiveInventDimId(InventDimId _transferOrderReceiveInventDimId = '')
    {
        if (!prmIsDefault(_transferOrderReceiveInventDimId))
        {
            this.insert(#TransferOrderReceiveInventDimId, _transferOrderReceiveInventDimId);
        }
        return this.lookupStr(#TransferOrderReceiveInventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMobileAppStepId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSMobileAppStepId parmMobileAppStepId(WHSMobileAppStepId _mobileAppStepId = '')
    {
        if (!prmIsDefault(_mobileAppStepId))
        {
            this.insert(#MobileAppStepId, _mobileAppStepId);
        }
        return this.lookupStr(#MobileAppStepId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentStep</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal str parmCurrentStep(str _currentStep = '')
    {
        if (!prmIsDefault(_currentStep))
        {
            this.insert(#CurrentStep, _currentStep);
        }
        return this.lookupStr(#CurrentStep);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSModule parmModule(WHSModule _module = WHSModule::Purch)
    {
        if (!prmIsDefault(_module))
        {
            this.insert(#Module, _module);
        }

        return any2Enum(this.lookupNum(#Module));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserSessionId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkUserSessionId parmUserSessionId(guid _userSessionId = emptyGuid())
    {
        if (!prmIsDefault(_userSessionId))
        {
            this.insert(#UserSessionId, guid2Str(_userSessionId));
        }
        str userSessionId = this.lookupStr(#UserSessionId);

        return (userSessionId == '') ? emptyGuid() : str2Guid(userSessionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPreviousSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmIsPreviousSession(boolean _isPreviousSession = false)
    {
        if (!prmIsDefault(_isPreviousSession))
        {
            this.insert(IsPreviousSession, _isPreviousSession);
        }

        return any2Enum(this.lookupNum(IsPreviousSession));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionToken</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal guid parmSessionToken(guid _sessionToken = emptyGuid())
    {
        if (!prmIsDefault(_sessionToken))
        {
            this.insert(SessionToken, guid2Str(_sessionToken));
        }
        str token = this.lookupStr(SessionToken);

        return (token == '') ? emptyGuid() : str2Guid(token);
    }

]]></Source>
			</Method>
			<Method>
				<Name>regenerateSessionToken</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void regenerateSessionToken()
    {
        using (var cryptoProvider = new System.Security.Cryptography.RNGCryptoServiceProvider())
        {
            System.Byte[] bytes = new System.Byte[16]();
            cryptoProvider.GetBytes(bytes);

            this.parmSessionToken(new System.Guid(bytes));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviousSessionToken</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal guid parmPreviousSessionToken(guid _sessionToken = emptyGuid())
    {
        if (!prmIsDefault(_sessionToken))
        {
            this.insert(PreviousSessionToken, guid2Str(_sessionToken));
        }
        str token = this.lookupStr(PreviousSessionToken);

        return (token == '') ? emptyGuid() : str2Guid(token);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSendWarehouseInfo</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmSendWarehouseInfo(boolean _sendWarehouseInfo = false)
    {
        if (!prmIsDefault(_sendWarehouseInfo))
        {
            if (_sendWarehouseInfo)
            {
                this.insert(SendWarehouseInfo, _sendWarehouseInfo);
            }
            else
            {
                this.remove(SendWarehouseInfo);
            }
        }

        return any2Enum(this.lookupNum(SendWarehouseInfo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeviceData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setDeviceData(WHSMobileDeviceData _data)
    {
        this.parmDeviceId(_data.deviceId);
        this.parmAppVersion(_data.appVersion);
        this.parmDeviceBrand(_data.deviceBrand);
        this.parmDeviceModel(_data.deviceModel);
        this.parmDevicePlatform(_data.platform);
        this.parmDevicePlatformVersion(_data.platformVersion);

        if(WHSMobileDeviceAlertFlight::instance().isEnabled())
        {
            this.parmDeviceAlert(_data.alert);
        }

        if (WHSMobileAppDeviceFriendlyNameAndHWIDFlight::instance().isEnabled())
        {
            this.parmDeviceHardwareIdentification(_data.hardwareIdentification);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>