<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureJourCreateVend_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureJourCreateVend_RU extends FactureJourCreate_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret;

        ret = super() && FactureJour_RU::checkTaxReportingDate(factureDate,
                                                           factureDateExternal,
                                                           factureReportDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    protected boolean checkParameters()
    {
        boolean ret;

        ret = super();
        if (correctionType != FactureCorrectionType_RU::Revision && ! factureExtId)
        {
            ret = checkFailed("@GLS104571");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendInvoiceJourByRecId</Name>
				<Source><![CDATA[
    protected CustVendInvoiceJour findCustVendInvoiceJourByRecId(RefRecId _recId)
    {
        return VendInvoiceJour::findRecId(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendInvoiceTransByRecId</Name>
				<Source><![CDATA[
    protected CustVendInvoiceTrans findCustVendInvoiceTransByRecId(RefRecId _recId)
    {
        return VendInvoiceTrans::findRecId(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceJourByTrans</Name>
				<Source><![CDATA[
    protected Common findInvoiceJourByTrans(Common _trans)
    {
        VendInvoiceTrans localVendInvoiceTrans = _trans as VendInvoiceTrans;

        return VendInvoiceJour::findFromVendInvoiceTrans(localVendInvoiceTrans.PurchID,
                                                         localVendInvoiceTrans.InvoiceId,
                                                         localVendInvoiceTrans.InvoiceDate,
                                                         localVendInvoiceTrans.NumberSequenceGroup,
                                                         localVendInvoiceTrans.InternalInvoiceId,
                                                         true,
                                                         ! localVendInvoiceTrans.InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceTransByFacture</Name>
				<Source><![CDATA[
    protected Common findInvoiceTransByFacture()
    {
        return VendInvoiceTrans::findFacture_RU(factureTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void initJournal()
    {
        DictType            dictType;
        NumberSequenceTable numTable;
        boolean             error = false;

        numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendFactureId_RU(),false,true);

        if (! numberSeq)
        {
            dictType = new DictType(extendedtypenum(VendFactureId_RU));
            warning(strfmt("@SYS53911", dictType.label(), "@SYS25194"));
            error    = true;
        }
        else
        {
            numTable = numberSeq.parmNumTableNum(numTable);
            if (numTable.Manual)
            {
                dictType = new DictType(extendedtypenum(VendFactureId_RU));
                warning(strfmt("@GLS104926", dictType.label(), "@SYS25194"));
                error    = true;
            }
        }

        if (error)
        {
            throw error("@GLS106933");
        }

        super();

        factureJour.FactureId   = numberSeq.num();
        factureJour.Module      = FactureModule_RU::Vend;

        if (correctionType == FactureCorrectionType_RU::Revision)
        {
            factureJour.FactureExternalId = correctedFactureExtId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    public FactureModule_RU module()
    {
        return FactureModule_RU::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceOrder</Name>
				<Source><![CDATA[
    protected void updateSourceOrder(CustVendInvoiceJour _jour)
    {
        PurchTable      table;

        ttsbegin;

        table = _jour.purchTable(true);
        if (table && table.DocumentStatus != DocumentStatus::Facture_RU)
        {
            table.DocumentStatus = DocumentStatus::Facture_RU;
            table.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>