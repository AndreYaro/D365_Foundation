<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUnShipLoadLineTmpDataCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSUnShipLoadLineTmpDataCreator</c> class is responsible for creating the temporary data used for unshipping a loadline.
/// </summary>
class WHSUnShipLoadLineTmpDataCreator
{
    WHSLoadLine loadLine;
    private Map containerLineQtyAccountedFor;
    private boolean whsUnShipLoadLineTmpDataCreatorBuildTmpSortingSupportCWItemsFlight = WHSUnShipLoadLineTmpDataCreatorBuildTmpSortingSupportCWItemsFlight::instance().isEnabled();
    private boolean whsUnShipLoadLineTmpDataCreatorBuildTmpSortingSupportMultipleLoadLinesFlight = WHSUnShipLoadLineTmpDataCreatorBuildTmpSortingSupportMultipleLoadLinesFlight::instance().isEnabled();
    private boolean whsUnShipLoadLineOutboundSortingAdjustInitialSOWorkFlight = WHSUnShipLoadLineOutboundSortingAdjustInitialSOWorkFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSUnShipLoadLineTmpDataCreator construct()
    {
        return new  WHSUnShipLoadLineTmpDataCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>WHSUnShipLoadLineTmpDataCreator</c> class.
    /// </summary>
    /// <param name = "_loadLine">The load line that the data should be build for.</param>
    /// <returns>
    /// A new instance of the <c>WHSUnShipLoadLineTmpDataCreator</c> class.
    ///</returns>
    public static WHSUnShipLoadLineTmpDataCreator newFromLoadLine(WHSLoadLine _loadLine)
    {
        WHSUnShipLoadLineTmpDataCreator creator = WHSUnShipLoadLineTmpDataCreator::construct();
        creator.parmLoadLine(_loadLine);

        return creator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadLine</Name>
				<Source><![CDATA[
    public WHSLoadLine parmLoadLine(WHSLoadLine _loadLine = loadLine)
    {
        loadLine = _loadLine;
        return loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForCreateWorkOnPositionClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query work when sort template is set to create work on position closed.
    /// </summary>
    /// <param name = "_workTable">The work header record.</param>
    /// <param name = "_sortPosition">The outbound sort position record.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c>.</returns>
    protected SysDaQueryObject buildQueryForCreateWorkOnPositionClose(
        WHSWorkTable            _workTable,
        WHSOutboundSortPosition _sortPosition)
    {
        SysDaQueryObject workTableQueryObject = new SysDaQueryObject(_workTable);
        
        workTableQueryObject.firstOnlyHint = true;
        
        workTableQueryObject.projection().add(fieldStr(WHSWorkTable, WorkId));
        workTableQueryObject.projection().add(fieldStr(WHSWorkTable, RecId));

        workTableQueryObject.whereClause(new SysDaEqualsExpression(
                new SysDaFieldExpression(_workTable, fieldStr(WHSWorkTable, TargetLicensePlateId)),
                new SysDaValueExpression(_sortPosition.LicensePlateId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_workTable, fieldStr(WHSWorkTable, WorkTransType)),
                new SysDaValueExpression(WHSWorkTransType::SortedInventoryPicking)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_workTable, fieldStr(WHSWorkTable, WorkStatus)),
                new SysDaValueExpression(WHSWorkStatus::Closed))));

        return workTableQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTmpSorting</Name>
				<Source><![CDATA[
    private void buildTmpSorting(
        WHSTmpLoadLineInventory _tmpLoadLineInv,
        WHSLoadLine             _loadLine)
    {
        InventDim                       inventDimBuffer;
        WHSOutboundSortPositionTrans    sortPositionTrans;
        WHSOutboundSortPosition         sortPosition;
        WHSOutboundSortTemplate         sortTemplate;
        WHSWorkLine                     workLine;

        List invendDimFieldList = InventDim::dimEnabledFieldList();

        while select SortIdentifier, ItemId, InventDimId, ProductQuantity, UnitSymbol, WorkLine, LoadLine from sortPositionTrans
            where sortPositionTrans.LoadLine == _loadLine.RecId
            join LicensePlateId, WMSLocationId from sortPosition
                where sortPosition.RecId == sortPositionTrans.OutboundSortPosition
                &&    sortPosition.SortPositionStatus == WHSOutboundSortPositionStatus::Closed
                join CreateWorkOnPositionClose, SortTemplateType from sortTemplate
                    where sortTemplate.SortTemplateId == sortPosition.SortTemplateId
                join inventDimBuffer
                    where inventDimBuffer.inventDimId == sortPositionTrans.InventDimId
        {
            WHSContainerLine containerLine;
            WHSWorkTable workTable;

            if (sortTemplate.CreateWorkOnPositionClose)
            {
                SysDaFindObject qf = new SysDaFindObject(
                    this.buildQueryForCreateWorkOnPositionClose(workTable, sortPosition));
                new SysDaFindStatement().executeQuery(qf);

                if (workTable.RecId == 0)
                {
                    continue;
                }
            }

            InventDim inventDim;

            inventDim.initFromInventDim(inventDimBuffer, invendDimFieldList);

            inventDim.LicensePlateId = sortPosition.LicensePlateId;
            inventDim.wMSLocationId = workTable.RecId ? workTable.getFinalPutLocation() : sortPosition.WMSLocationId;

            WHSWorkLineRecID containerWorkLineRefRecId;

            if (sortTemplate.SortTemplateType == WHSOutboundSortTemplateType::Container)
            {
                select firstOnly ContainerId, ShipmentId from containerLine
                    where containerLine.LoadLine    == _loadLine.RecId
                    &&    containerLine.ShipmentId  == _loadLine.ShipmentId
                    &&    containerLine.ContainerId == sortPositionTrans.SortIdentifier;

                if (this.containerOnFinalLocation(containerLine, sortTemplate, inventDim.InventLocationId))
                {
                    continue;
                }
                else
                {
                    WHSWorkLine     containerWorkLine;
                    WHSWorkTable    containerWorkTable;

                    // Determine appropriate work line to cancel while unpicking
                    select firstOnly RecId from containerWorkLine
                        where containerWorkLine.LoadLineRefRecId    == _loadLine.RecId
                        &&    containerWorkLine.WorkStatus          == WHSWorkStatus::Closed
                        exists join containerWorkTable
                            where containerWorkTable.WorkId == containerWorkLine.WorkId
                            &&    containerWorkTable.WorkStatus	    == WHSWorkStatus::Closed
                            &&    containerWorkTable.WorkTransType  != WHSWorkTransType::SortedInventoryPicking
                            &&    (containerWorkTable.WorkStatus    == WHSWorkStatus::Closed
                            ||     containerWorkTable.WorkStatus    == WHSWorkStatus::Combined);

                    containerWorkLineRefRecId = containerWorkLine.RecId;
                }
            }
            
            workLine = WHSWorkLine::findByRecId(sortPositionTrans.WorkLine);

            if (workLine.hasDimTracking() && sortTemplate.SortTemplateType == WHSOutboundSortTemplateType::Container)
            {
                this.buildTmpSortingDimTracking(sortPositionTrans, _tmpLoadLineInv, inventDim.wMSLocationId, sortPosition.LicensePlateId);
            }
            else
            {
                WHSWorkLineRecId workLineRecId;

                if (whsUnShipLoadLineOutboundSortingAdjustInitialSOWorkFlight)
                {
                    workLineRecId = 0;
                }
                else
                {
                    workLineRecId = sortPositionTrans.WorkLine ? sortPositionTrans.WorkLine : containerWorkLineRefRecId;
                }

                if (whsUnShipLoadLineTmpDataCreatorBuildTmpSortingSupportCWItemsFlight && PdsGlobal::pdsIsCWItem(sortPositionTrans.ItemId))
                {
                    this.buildTmpSortingInventTransCatchWeight(_tmpLoadLineInv,
                        inventDim,
                        _loadLine,
                        whsUnShipLoadLineTmpDataCreatorBuildTmpSortingSupportMultipleLoadLinesFlight && !workLine.InventTransId ? _loadLine.InventTransId : workLine.InventTransId,
                        containerLine.ContainerId,
                        workLineRecId);
                }
                else
                {
                    inventDim = InventDim::findOrCreate(inventDim);

                    InventQty sortedInventQty = InventTableModule::unitConvert(sortPositionTrans.ItemId,
                                                                   ModuleInventPurchSales::Invent,
                                                                   sortPositionTrans.UnitSymbol,
                                                                   sortPositionTrans.ProductQuantity,
                                                                   sortPositionTrans.InventDimId);

                    this.addTmpLoadLineInventoryRecord(
                    _tmpLoadLineInv, sortedInventQty,
                    inventDim.inventDimId,
                    _loadLine.RecId,
                    containerLine.ContainerId,
                    0,
                    workLineRecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>containerOnFinalLocation</Name>
				<Source><![CDATA[
    private boolean containerOnFinalLocation(
        WHSContainerLine         _containerLine,
        WHSOutboundSortTemplate  _sortTemplate,
        InventLocationId         _inventLocationId)
    {
        WHSContainerTable containerTable = WHSContainerTable::findByContainerId(_containerLine.ContainerId);
        WHSCloseContainerProfile closeContainerProfile = WHSCloseContainerProfile::find(containerTable.CloseContainerProfileId);

        InventDim conInventDim = _containerLine.mergedClosedInventDim();
        conInventDim.InventLocationId = _inventLocationId;

        return conInventDim.wMSLocation().whsLocationType() == WHSParameters::find().ShipFinalLocType
                    || (!_sortTemplate.CreateWorkOnPositionClose
                        && conInventDim.wMSLocation().wMSLocationId == containerTable.defaultSortingLocationId(closeContainerProfile));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTmpSortingDimTracking</Name>
				<Source><![CDATA[
    private void buildTmpSortingDimTracking(
        WHSoutboundSortPositionTrans _sortPositionTrans,
        WHSTmpLoadLineInventory      _tmpLoadLineInv,
        WMSLocationId                _locationId,
        WHSLicensePlateId            _licensePlateId)
    {
        WHSDimTracking  dimTracking;
        WHSWorkLine     workLine;

        while select InventDimId, Qty, CapturedWeight from dimTracking
            exists join workLine
                where workLine.WorkId   == dimTracking.WorkId
                &&    workLine.LineNum  == dimTracking.LineNum
                &&    workLine.RecId    == _sortPositionTrans.WorkLine
        {
            InventDim inventDim = inventDim::find(dimTracking.InventDimId);
            inventDim.wMSLocationId = _locationId;
            inventDim.LicensePlateId = _licensePlateId;

            inventDim = inventDim::findOrCreate(inventDim);

            WHSWorkLineRecId workLineRecId = whsUnShipLoadLineOutboundSortingAdjustInitialSOWorkFlight ? 0 : _sortPositionTrans.WorkLine;

            if (whsUnShipLoadLineTmpDataCreatorBuildTmpSortingSupportCWItemsFlight)
            {
                this.addTmpLoadLineInventoryRecord(_tmpLoadLineInv, dimTracking.Qty, inventDim.inventDimId, _sortPositionTrans.LoadLine, '', dimTracking.CapturedWeight, workLineRecId);
            }
            else
            {
                this.addTmpLoadLineInventoryRecord(_tmpLoadLineInv, dimTracking.Qty, inventDim.inventDimId, _sortPositionTrans.LoadLine, '', 0, workLineRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTmpSortingInventTransCatchWeight</Name>
				<Source><![CDATA[
    private void buildTmpSortingInventTransCatchWeight(WHSTmpLoadLineInventory _tmpLoadLineInv,
                                            InventDim _inventDim, 
                                            WHSLoadLine _loadLine, 
                                            InventTransId _inventTransId, 
                                            WHSContainerId _containerId, 
                                            WHSWorkLineRecId _workLineId)
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        InventDim inventDimJoin;
        InventDimParm sortPositionTransInventDimParm;

        if (_inventTransId)
        {
            sortPositionTransInventDimParm.initFromInventDim(_inventDim);
                
            while select InventDimId, Qty, PdsCWQty from inventTrans
                        where inventTrans.ItemId == _loadLine.ItemId
                    exists join inventTransOrigin
                        where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                        &&    inventTransOrigin.InventTransId == _inventTransId
                    #InventDimExistsJoin(inventTrans.inventDimId, inventDimJoin, _inventDim, sortPositionTransInventDimParm)
            {
                this.addTmpLoadLineInventoryRecord(_tmpLoadLineInv,
                        abs(inventTrans.PdsCWQty),
                        inventTrans.inventDimId,
                        _loadLine.RecId,
                        _containerId,
                        abs(inventTrans.Qty),
                        _workLineId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTmpLoadLineInventoryRecord</Name>
				<Source><![CDATA[
    private void addTmpLoadLineInventoryRecord(
        WHSTmpLoadLineInventory     _tmpLoadLineInventory,
        InventHandlingQty           _qty,
        InventDimId                 _inventDimId,
        WHSLoadLineRefRecId         _loadLineRefRecId,
        WHSContainerId              _containerId,
        WHSCapturedWeight           _weight,
        WHSWorkLineRecId            _workLineRecId)
    {
        _tmpLoadLineInventory.clear();
        this.initTmpLoadLineInventoryRecord(_tmpLoadLineInventory, _qty, _inventDimId, _loadLineRefRecId, _containerId, _weight, _workLineRecId);
        _tmpLoadLineInventory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpLoadLineInventoryRecord</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void initTmpLoadLineInventoryRecord(
        WHSTmpLoadLineInventory     _tmpLoadLineInventory,
        InventHandlingQty           _inventHandlingQty,
        InventDimId                 _inventDimId,
        WHSLoadLineRefRecId         _loadLineRefRecId,
        WHSContainerId              _containerId,
        WHSCapturedWeight           _weight,
        WHSWorkLineRecId            _workLineRecId)
    {
        _tmpLoadLineInventory.InventQty        = _inventHandlingQty;
        _tmpLoadLineInventory.InventDimId      = _inventDimId;
        _tmpLoadLineInventory.RefRecId         = _loadLineRefRecId;
        _tmpLoadLineInventory.ContainerId      = _containerId;
        _tmpLoadLineInventory.Weight            = _weight;
        _tmpLoadLineInventory.WorkLineRecId     = _workLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocationSortingType</Name>
				<Source><![CDATA[
    private boolean isLocationSortingType(WHSSortingLocationType _locationType, WMSLocation _wmsLocation)
    {
        return _locationType && _wmsLocation.whsLocationType() == _locationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///Insert records into the <c>WHSTmpLoadLineInventory</c> table that is used to unship load lines.
    /// </summary>
    /// <returns>
    /// A <c>WHSTmpLoadLineInventory</c> instance.
    /// </returns>
    public WHSTmpLoadLineInventory buildTmpTable()
    {
        WHSTmpLoadLineInventory tmpLoadLineInv;
        WHSWorkLine             workLine;
        WHSWorkTable            workTable;
        WHSWorkId               lastWHSWorkId;
        WHSWorkTable            putWorkTable;
        WHSWorkLine				putWorkLine;
        WHSParameters           whsParam = WHSParameters::find();
        WMSLocation             wmsLocation;

        Map dimQtyInClosedConMap = this.createTmpLoadLineInventoryFromContainerLines(tmpLoadLineInv);
        boolean packingWorkProcessing;

        // Go through the initial picks.
        while select InventQtyWork, ItemId, LineNum, WorkId, ContainerId, RecId, InventTransId, WorkType, LocatedLPId, WorkStatus, InventDimId from workLine
            order by workLine.WorkId
            where workLine.LoadLineRefRecId	== loadLine.RecId
                && (workLine.WorkStatus == WHSWorkStatus::Closed
                   || workLine.WorkStatus == WHSWorkStatus::Combined
                   || workLine.WorkStatus == WHSWorkStatus::Open)
            join WorkId, TargetLicensePlateId, InventLocationId, WorkTransType, CombinedWorkId, WorkStatus from workTable
                where workTable.WorkId      == workLine.WorkId
                    && (workTable.WorkStatus	== WHSWorkStatus::Closed
                       || workTable.WorkStatus == WHSWorkStatus::Combined
                       || workTable.WorkStatus == WHSWorkStatus::Open)
                    && workTable.WorkTransType != WHSWorkTransType::SortedInventoryPicking
        {

            if (((workTable.WorkStatus == WHSWorkStatus::Open
                || workLine.WorkStatus == WHSWorkStatus::Open)
                    && workTable.WorkTransType != WHSWorkTransType::Packing)
                || (workTable.WorkTransType == WHSWorkTransType::Packing
                    && workTable.WorkStatus != WHSWorkStatus::Open))
            {
                //Skipping not packing but open work/line and packing but open works.
                continue;
            }

            packingWorkProcessing = (workTable.WorkTransType == WHSWorkTransType::Packing);

            if (lastWHSWorkId != workLine.WorkId)
            {
                // If the work line was consolidated into other works we need to find the location and license plate from the last work.
                putWorkTable = WHSWorkTable::find(WHSConsolidatedWorkLine::findLastConsolidatedWorkLineByOriginWorkLine(
                WHSConsolidatedWorkLine::findOriginWorkLineWithinWork(workLine)).workId);

                if (!putWorkTable && workTable.WorkStatus == WHSWorkStatus::Combined)
                {
                    putWorkTable = WHSWorkTable::find(workTable.CombinedWorkId);
                }

                putWorkTable = putWorkTable ? putWorkTable : workTable;

                select firstonly wmsLocationId, WorkId from putWorkLine
                    order by putWorkLine.LineNum desc
                    where putWorkLine.WorkId		==  putWorkTable.WorkId
                        && (putWorkLine.WorkStatus	== WHSWorkStatus::Closed
                            || packingWorkProcessing)
                        && putWorkLine.WorkType		== WHSWorkType::Put
                    join LocProfileId from wmsLocation
                        where wmsLocation.wMSLocationId			== putWorkLine.wmsLocationId
                            &&  wmsLocation.InventLocationId	== putWorkTable.InventLocationId;

                lastWHSWorkId = workLine.WorkId;
            }

            if (this.isLocationSortingType(whsParam.SortingLocationType, wmsLocation))
            {
                WHSOutboundSortPositionTrans sortPositionTrans;
                select firstonly WorkLine, SortTransStatus from sortPositionTrans
                    where sortPositionTrans.LoadLine == loadLine.RecId;

                if (sortPositionTrans.WorkLine == workLine.RecId
                    || (sortPositionTrans.SortTransStatus == WHSOutboundSortPositionStatus::Closed
                        && WHSWorkTable::find(WHSWorkLine::findByRecId(sortPositionTrans.WorkLine).WorkId).WorkTransType == WHSWorkTransType::SortedInventoryPicking))
                {
                    continue;
                }
            }

            boolean			hasAddedTmpLoadLineRecords;
            WHSDimTracking	dimTracking;
            
            // If the workLine uses dim tracking we must use those values.
            while select InventDimId, Qty from dimTracking
                where dimTracking.WorkId    == workLine.WorkId
                    && dimTracking.LineNum	== workLine.LineNum
            {
                hasAddedTmpLoadLineRecords = true;

                this.buildTmpLoadLineInventory(dimTracking.inventDimId,
                        dimTracking.Qty,
                        tmpLoadLineInv,
                        putWorkTable,
                        workLine,
                        putWorkLine,
                        dimQtyInClosedConMap,
                        true);
            }

            // Packing work has dimTracking "unrolled" into work line's inventDim directly
            if (!hasAddedTmpLoadLineRecords
                && packingWorkProcessing)
            {
                hasAddedTmpLoadLineRecords = true;
		
		        var pickedQuantity = workLine.InventQtyWork;

                this.buildTmpLoadLineInventory(workLine.inventDimId,
                                        pickedQuantity,
                                        tmpLoadLineInv,
                                        putWorkTable,
                                        workLine,
                                        putWorkLine,
                                        dimQtyInClosedConMap,
                                        false);
            }

            // If the there is no dim tracking (happens for LP guided transfer orders) we will try to get dims from InventDim.
            if (!hasAddedTmpLoadLineRecords && putWorkTable.WorkTransType == WHSWorkTransType::TransferIssue)
            {
                InventTrans inventTrans = this.getInventoryTransactions(workLine, putWorkTable);
                while (inventTrans)
                {
                    hasAddedTmpLoadLineRecords = true;
                    var pickedQuantity = -inventTrans.Qty;

                    this.buildTmpLoadLineInventory(inventTrans.inventDimId,
                                        pickedQuantity,
                                        tmpLoadLineInv,
                                        putWorkTable,
                                        workLine,
                                        putWorkLine,
                                        dimQtyInClosedConMap,
                                        false);

                    next inventTrans;
                }
            }

            // If no dim tracking and no transfer order, use the data from the load line.
            if (!hasAddedTmpLoadLineRecords)
            {
                var pickedQuantity = workLine.InventQtyWork;

                this.buildTmpLoadLineInventory(loadLine.inventDimId,
                                        pickedQuantity,
                                        tmpLoadLineInv,
                                        putWorkTable,
                                        workLine,
                                        putWorkLine,
                                        dimQtyInClosedConMap,
                                        false);
            }
        }

        this.buildTmpSorting(tmpLoadLineInv, loadLine);

        return tmpLoadLineInv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryTransactions</Name>
				<Source><![CDATA[
    private InventTrans getInventoryTransactions(WHSWorkLine _workLine, WHSWorkTable _workTable)
    {
        InventTrans       inventTrans;
        InventTransOrigin inventTransOrigin;
        InventDim         inventDimJoin;
        InventDim     loadLineInventDim = this.getLoadLineInventDim(_workLine, _workTable);
        InventDimParm loadLineInventDimParm;

        loadLineInventDimParm.initFromInventDim(loadLineInventDim);

        select InventDimId, Qty from inventTrans
            where inventTrans.ItemId == loadLine.ItemId
                exists join inventTransOrigin
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    &&    inventTransOrigin.InventTransId == _workLine.InventTransId
                #InventDimExistsJoin(inventTrans.inventDimId, inventDimJoin, loadLineInventDim, loadLineInventDimParm);
    
        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTmpLoadLineInventory</Name>
				<Source><![CDATA[
    // This method has been created to minimise the occurrances of flight switch.
    // When removing the flight, please consider removing this method, and use the content from inside the 'if' instead.
    private void buildTmpLoadLineInventory(
        InventDimId             _inventDimId,
        Qty                     _qty,
        WHSTmpLoadLineInventory _tmpLoadLineInv,
        WHSWorkTable            _workTable,
        WhsWorkLine             _workLine,
        WhsWorkLine             _putWorkLine,
        Map                     _dimQtyInClosedConMap,
        boolean                 _isDimTracking)
    {
        InventDim inventDim = this.initializeInventDim(_inventDimId, _workTable, _putWorkLine);
        this.tryAddTmpLoadLineInventoryRecord(inventDim.inventDimId, _qty, _tmpLoadLineInv, _workLine, _dimQtyInClosedConMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryAddTmpLoadLineInventoryRecord</Name>
				<Source><![CDATA[
    private void tryAddTmpLoadLineInventoryRecord(
        InventDimId             _inventDimId,
        Qty                     _qty,
        WHSTmpLoadLineInventory _tmpLoadLineInv,
        WhsWorkLine             _workLine,
        Map                     _dimQtyInClosedConMap)
    {
        Qty packedContainerQty = _dimQtyInClosedConMap.exists(_inventDimId) ? _dimQtyInClosedConMap.lookup(_inventDimId) : 0;

        if (_qty > packedContainerQty)
        {
            this.addTmpLoadLineInventoryRecord(_tmpLoadLineInv, _qty - packedContainerQty, _inventDimId, loadLine.RecId, _workLine.ContainerId, 0, _workLine.RecId);
            _dimQtyInClosedConMap.remove(_inventDimId);
        }
        else
        {
            packedContainerQty -= _qty;

            if (packedContainerQty == 0)
            {
                _dimQtyInClosedConMap.remove(_inventDimId);
            }
            else
            {
                _dimQtyInClosedConMap.insert(_inventDimId, packedContainerQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimForToteReuse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>InventDim</c> from the temporary tote table when tote reuse is enabled.
    /// </summary>
    /// <param name = "_inventDim"><c>InventDim</c> to use in case early tote reuse is enabled.</param>
    /// <param name = "_workLine">Related work line buffer.</param>
    /// <returns>true if the license plate id of <c>InventDim</c> has been changed to the temporary license plate id; otherwise, false.</returns>
    protected boolean setInventDimForToteReuse(InventDim _inventDim, WHSWorkLine _workLine)
    {
        if (WHSToteReuseTable::isToteReuseEnabled(_workLine))
        {
            WHSToteReuseTable::setInventDimLicensePlateIdToTmpToteIdIfFoundForWorkLine(_inventDim, _workline);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize inventory dimension from <c>WHSWorkTable</c> and <c>WHSWorkLine</c>
    /// </summary>
    /// <param name = "_inventDimId">Inventory dimensions used for initialization.</param>
    /// <param name = "_workTable">Work to initialize inventory dimensions.</param>
    /// <param name = "_workLine">Work line to initialize inventory dimensions.</param>
    /// <returns>Initialized inventory dimension.</returns>
    protected InventDim initializeInventDim(
        InventDimId     _inventDimId,
        WHSWorkTable    _workTable,
        WHSWorkLine     _workLine)
    {
        InventDim inventDim = InventDim::find(_inventDimId);
        inventDim.wmsLocationId = _workLine.wmsLocationId;

        if (WMSLocation::find(inventDim.wmsLocationId, inventDim.InventLocationId).whsLocationIsLPControlled())
        {
            inventDim.LicensePlateId = _workTable.TargetLicensePlateId;
            this.setInventDimForToteReuse(inventDim, _workLine);
        }

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLineInventoryFromContainerLines</Name>
				<Source><![CDATA[
    private Map createTmpLoadLineInventoryFromContainerLines(WHSTmpLoadLineInventory _tmpLoadLineInv)
    {
        WHSContainerTable	containerTable;
        WHSContainerLine	containerLine;
        InventDim			containerInventDim;
        InventDim			containerLineInventDim;

        Map dimQtyInClosedConMap = new Map(Types::String, Types::Real);

        InventDim inventDimCriteria = loadLine.inventDim().data();

        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(inventDimCriteria);

        boolean packingWorkProcessing;

        if (WHSPackingWorkHelper::connectedPackingWorkToLoadLineExists(loadLine.RecId))
        {
            packingWorkProcessing = true;
        }

        while select containerLine
            where containerLine.LoadLine == loadLine.RecId
            join containerTable
                where containerTable.ContainerId		== containerLine.ContainerId
                   && containerTable.ContainerBuildId	== ''
            join containerInventDim
                where containerInventDim.inventDimId == containerTable.InventDimId
            #InventDimInnerJoin(containerLine.InventDimId, containerLineInventDim, inventDimCriteria, inventDimParm)
        {
            this.initializeLoadLineInventoryFromContainerLine(_tmpLoadLineInv, containerTable, containerInventDim, containerLine, containerLineInventDim);

            _tmpLoadLineInv.insert();

            if(packingWorkProcessing
                && containerTable.ContainerStatus == WHSContainerStatus::Closed)
            {
                continue;
            }

            if (dimQtyInClosedConMap.exists(containerLineInventDim.inventDimId))
            {
                Qty packedContainerQty = dimQtyInClosedConMap.lookup(containerLineInventDim.inventDimId);

                dimQtyInClosedConMap.insert(containerLineInventDim.inventDimId, packedContainerQty + _tmpLoadLineInv.InventQty);
            }
            else
            {
                dimQtyInClosedConMap.insert(containerLineInventDim.inventDimId, _tmpLoadLineInv.InventQty);
            }
        }

        return dimQtyInClosedConMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTmpTableCatchWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///Insert records into the <c>WHSTmpLoadLineInventory</c> table that is used to unship load lines.
    /// </summary>
    /// <returns>
    /// A <c>WHSTmpLoadLineInventory</c> instance.
    /// </returns>
    [Hookable(false)]
    internal WHSTmpLoadLineInventory buildTmpTableCatchWeight()
    {
        WHSTmpLoadLineInventory tmpLoadLineInv;
        WHSWorkLine             workLine;
        WHSWorkTable            workTable;
        WHSWorkId               lastWHSWorkId;
        WHSWorkTable            putWorkTable;
        WHSWorkLine				putWorkLine;
        boolean                 putIsPackingStation;
        WHSParameters           whsParam = WHSParameters::find();
        WMSLocation             wmsLocation;

        // Go through the initial picks.
        while select InventQtyWork, ItemId, LineNum, WorkId, ContainerId, CapturedWeight, RecId, InventTransId, WorkType from workLine
            order by workLine.WorkId
            where workLine.LoadLineRefRecId	== loadLine.RecId
                && workLine.WorkStatus      == WHSWorkStatus::Closed
            join WorkId, TargetLicensePlateId, InventLocationId, WorkTransType from workTable
                where workTable.WorkId      == workLine.WorkId
                    && workTable.WorkStatus	== WHSWorkStatus::Closed
        {
            if (lastWHSWorkId != workLine.WorkId)
            {
                // If the work line was consolidated into other works we need to find the location and license plate from the last work.
                putWorkTable = WHSWorkTable::find(WHSConsolidatedWorkLine::findLastConsolidatedWorkLineByOriginWorkLine(
                    WHSConsolidatedWorkLine::findOriginWorkLineWithinWork(workLine)).workId);

                putWorkTable = putWorkTable ? putWorkTable : workTable;

                select firstonly wmsLocationId, WorkId from putWorkLine
                        order by putWorkLine.LineNum desc
                        where putWorkLine.WorkId		==  putWorkTable.WorkId
                            && putWorkLine.WorkStatus	== WHSWorkStatus::Closed
                            && putWorkLine.WorkType		== WHSWorkType::Put
                        join LocProfileId from wmsLocation
                            where wmsLocation.wMSLocationId			== putWorkLine.wmsLocationId
                                &&  wmsLocation.InventLocationId	== putWorkTable.InventLocationId;

                putIsPackingStation = WHSLocationProfile::find(wmsLocation.LocProfileId).isPackingLocationProfile();
                lastWHSWorkId = workLine.WorkId;
            }

            if (this.isLocationSortingType(whsParam.SortingLocationType, wmsLocation))
            {
                // Skip over logic if we went through sorting since it will be handled in the method buildTmpSorting.
                continue;
            }

            boolean			hasAddedTmpLoadLineRecords;
            WHSDimTracking	dimTracking;

            // If the workLine uses dim tracking we must use those values.
            while select InventDimId, Qty, CapturedWeight from dimTracking
                where dimTracking.WorkId    == workLine.WorkId
                    && dimTracking.LineNum	== workLine.LineNum
            {
                hasAddedTmpLoadLineRecords = true;

                this.buildCatchWeightTmpLoadLineInventoryRecord(dimTracking.InventDimId,
                        dimTracking.Qty,
                        dimTracking.CapturedWeight,
                        tmpLoadLineInv,
                        putWorkTable,
                        workLine,
                        putWorkLine,
                        putIsPackingStation);
            }

            if (!hasAddedTmpLoadLineRecords
                && putWorkTable.WorkTransType == WHSWorkTransType::TransferIssue)
            {
                InventTrans       inventrans;
                InventTransOrigin inventTransOrigin;
                InventDim         inventDimJoin;
                
                InventDim     loadLineInventDim = this.getLoadLineInventDim(workLine, workTable);
                InventDimParm loadLineInventDimParm;

                loadLineInventDimParm.initFromInventDim(loadLineInventDim);

                select InventDimId, Qty, PdsCWQty from inventrans
                    where inventrans.ItemId == loadLine.ItemId
                exists join inventTransOrigin
                    where inventrans.InventTransOrigin    == inventTransOrigin.RecId
                    &&    inventTransOrigin.InventTransId == workLine.InventTransId
                #InventDimExistsJoin(invenTrans.inventDimId, inventDimJoin, loadLineInventDim, loadLineInventDimParm);

                while (inventrans)
                {
                    hasAddedTmpLoadLineRecords = true;

                    this.buildCatchWeightTmpLoadLineInventoryRecord(inventrans.InventDimId,
                        abs(inventrans.PdsCWQty),
                        abs(inventrans.Qty),
                        tmpLoadLineInv,
                        putWorkTable,
                        workLine,
                        putWorkLine,
                        putIsPackingStation);

                    next inventrans;
                }
            }

            if (!hasAddedTmpLoadLineRecords)
            {
                this.buildCatchWeightTmpLoadLineInventoryRecord(loadLine.InventDimId,
                    workLine.InventQtyWork,
                    workLine.CapturedWeight,
                    tmpLoadLineInv,
                    putWorkTable,
                    workLine,
                    putWorkLine,
                    putIsPackingStation);
            }
        }

        this.buildTmpSorting(tmpLoadLineInv, loadLine);
        return tmpLoadLineInv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCatchWeightTmpLoadLineInventoryRecord</Name>
				<Source><![CDATA[
    private void buildCatchWeightTmpLoadLineInventoryRecord(
        InventDimId             _inventDimId,
        InventHandlingQty       _inventoryQty,
        WHSTransWeight          _capturedWeight,
        WHSTmpLoadLineInventory _tmpLoadLineInv,
        WHSWorkTable            _workTable,
        WhsWorkLine             _pickWorkLine,
        WhsWorkLine             _putWorkLine,
        boolean                 _putIsPackingStation)
    {
        InventDim inventDim = this.initializeInventDim(
                    _inventDimId,
                    _workTable,
                    _putWorkLine);

        InventHandlingQty   packedContainerQty;
        WHSTransWeight      packedWeight;

        if (_putIsPackingStation)
        {
            [packedContainerQty, packedWeight] = this.createTmpLoadLineInventoryFromContainerLinesCatchWeight(_tmpLoadLineInv, inventDim, _inventoryQty, _pickWorkLine.RecId);
        }

        if (_inventoryQty > packedContainerQty)
        {
            WHSTransWeight inventoryWeight;
            if (_capturedWeight)
            {
                inventoryWeight = _capturedWeight - packedWeight;
            }
            else
            {
                // Calculate weight based off inventory values.
                inventoryWeight = WHSCatchWeightHelper::calculateMovingWeight(_pickWorkLine.ItemId, inventDim.InventDimId, _inventoryQty - packedContainerQty);
            }

            this.addTmpLoadLineInventoryRecord(_tmpLoadLineInv,
                                                _inventoryQty - packedContainerQty,
                                                inventDim.InventDimId,
                                                loadLine.RecId,
                                                _pickWorkLine.ContainerId,
                                                inventoryWeight,
                                                _pickWorkLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLineInventoryFromContainerLinesCatchWeight</Name>
				<Source><![CDATA[
    private container createTmpLoadLineInventoryFromContainerLinesCatchWeight(
            WHSTmpLoadLineInventory _tmpLoadLineInv,
            InventDim               _inventDimCriteria,
            InventHandlingQty       _currentWorkQty,
            WHSWorkLineRecId        _workLineRecId)
    {
        WHSContainerTable	containerTable;
        WHSContainerLine	containerLine;
        InventDim			containerInventDim;
        InventDim			containerLineInventDim;

        InventDim           inventDimCriteria = _inventDimCriteria;
        InventHandlingQty   runningWorkQty = _currentWorkQty;
        WHSTransWeight      packedContainerWeight;
        InventHandlingQty   packedContainerQty;
        WHSParameters       whsParam = WHSParameters::find();

        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(inventDimCriteria);

        while select containerLine
            where containerLine.LoadLine == loadLine.RecId
            join containerTable
                where containerTable.ContainerId		== containerLine.ContainerId
                   && containerTable.ContainerBuildId	== ''
            join containerInventDim
                where containerInventDim.inventDimId == containerTable.InventDimId
            #InventDimInnerJoin(containerLine.InventDimId, containerLineInventDim, inventDimCriteria, inventDimParm)
        {
            if (runningWorkQty <= 0)
            {
                break;
            }

            this.initializeLoadLineInventoryFromContainerLine(_tmpLoadLineInv, containerTable, containerInventDim, containerLine, containerLineInventDim);

            InventDim inventDim = InventDim::find(_tmpLoadLineInv.InventDimId);

            InventHandlingQty   inventContainerQty           = WHSCatchWeightHelper::convertInventQuantity(containerLine.ItemId, containerLine.UnitId, containerLine.Qty, containerLine.InventDimId);
            InventHandlingQty   packedQtyRemaining           = inventContainerQty;
            WHSTransWeight      containerLineWeightRemaining = containerLine.CapturedWeight;

            if (containerLineQtyAccountedFor.exists(containerLine.RecId))
            {
                InventHandlingQty   usedQty;
                WHSTransWeight      usedWeight;
                [usedQty, usedWeight]         = containerLineQtyAccountedFor.lookup(containerLine.RecId);
                packedQtyRemaining           -= usedQty;
                containerLineWeightRemaining -= usedWeight;
            }
            
            if (!packedQtyRemaining)
            {
                continue;
            }

            InventHandlingQty   packedQtyToUse       = min(packedQtyRemaining, runningWorkQty);
            WHSTransWeight      containerWeightToUse = WHSCatchWeightHelper::calculateAverageWeight(packedQtyToUse, packedQtyRemaining, containerLineWeightRemaining, InventTable::inventDecimals(loadLine.ItemId));

            if (containerLineQtyAccountedFor.exists(containerLine.RecId))
            {
                InventHandlingQty usedQty;
                WHSTransWeight    usedWeight;
                [usedQty, usedWeight] = containerLineQtyAccountedFor.lookup(containerLine.RecId);
                usedQty += packedQtyToUse;
                usedWeight += containerWeightToUse;

                containerLineQtyAccountedFor.insert(containerLine.RecId, [usedQty, usedWeight]);
            }
            else
            {
                containerLineQtyAccountedFor.insert(containerLine.RecId, [packedQtyToUse, containerWeightToUse]);
            }

            runningWorkQty          -= packedQtyToUse;
            packedContainerWeight   += containerWeightToUse;

            // Don't create a tmpLoadLineInventory record for items that have gone to sort here, instead just account for the quantity and move on.
            if (whsParam.SortingLocationType && inventDim.wmsLocation().whsLocationType() == whsParam.SortingLocationType)
            {
                packedContainerQty += packedQtyToUse;
                continue;
            }

            this.addTmpLoadLineInventoryRecord(_tmpLoadLineInv, packedQtyToUse, inventDim.inventDimId, loadLine.RecId, containerTable.ContainerId, containerWeightToUse, _workLineRecId);
            
            packedContainerQty += _tmpLoadLineInv.InventQty;
        }

        return [packedContainerQty, packedContainerWeight];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLoadLineInventoryFromContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the load line inventory breakdown from a container line.
    /// </summary>
    /// <param name = "_loadLineInventory">
    /// A <c>WHSTmpLoadLineInventory</c> record to initialize.
    /// </param>
    /// <param name = "_containerTable">
    /// A <c>WHSContainerTable</c> record associated with the container line.
    /// </param>
    /// <param name = "_containerInventDim">
    /// An <c>InventDim</c> record associated with the container.
    /// </param>
    /// <param name = "_containerLine">
    /// A <c>WHSContainerLine</c> record to initialize from.
    /// </param>
    /// <param name = "_containerLineInventDim">
    /// An <c>InventDim</c> record associated with the container line.
    /// </param>
    protected void initializeLoadLineInventoryFromContainerLine(
        WHSTmpLoadLineInventory _loadLineInventory,
        WHSContainerTable		_containerTable,
        InventDim				_containerInventDim,
        WHSContainerLine		_containerLine,
        InventDim				_containerLineInventDim)
    {
        this.initTmpLoadLineInventoryRecord(
            _loadLineInventory,
            _containerLine.getInventoryHandlingQuantity(),
            this.constructLoadLineInventoryInventDim(_containerTable, _containerInventDim, _containerLine, _containerLineInventDim).InventDimId,
            _containerLine.LoadLine,
            _containerTable.ContainerId,
            _loadLineInventory.Weight,
            _loadLineInventory.WorkLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLoadLineInventoryInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the inventory dimensions to be associated with the load line inventory breakdown.
    /// </summary>
    /// <param name = "_containerTable">
    /// A <c>WHSContainerTable</c> record.
    /// </param>
    /// <param name = "_containerInventDim">
    /// An <c>InventDim</c> record associated with the container.
    /// </param>
    /// <param name = "_containerLine">
    /// A <c>WHSContainerLine</c> record.
    /// </param>
    /// <param name = "_containerLineInventDim">
    /// An <c>InventDim</c> record associated with the container line.
    /// </param>
    /// <returns>
    /// The constructed <c>InventDim</c> record.
    /// </returns>
    protected InventDim constructLoadLineInventoryInventDim(
        WHSContainerTable	_containerTable,
        InventDim			_containerInventDim,
        WHSContainerLine	_containerLine,
        InventDim			_containerLineInventDim)
    {
        InventDim loadLineInventoryInventDim = _containerLineInventDim.data();

        if (_containerInventDim.wMSLocationId)
        {
            loadLineInventoryInventDim.wMSLocationId = _containerInventDim.wMSLocationId;
        }

        if (_containerTable.ContainerStatus == WHSContainerStatus::Closed)
        {
            loadLineInventoryInventDim.LicensePlateId = _containerInventDim.LicensePlateId;
        }

        return InventDim::findOrCreate(loadLineInventoryInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        containerLineQtyAccountedFor = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadLineInventDim</Name>
				<Source><![CDATA[
    private InventDim getLoadLineInventDim(WHSWorkLine _workLine, WHSWorkTable _workTable)
    {
        InventDim loadLineInventDim;

        loadLineInventDim = loadLine.inventDim();        

        this.setLicensePlateId(loadLineInventDim, _workLine, _workTable);

        return loadLineInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLicensePlateid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the license plate of an InventDim.
    /// The WHSTransferOrderReducePickUseTargetLicensePlateFlight is the newer fix,
    /// therefore the TargetLicensePlateId is the desired value to be set as LicensePlateId.
    /// </summary>
    private void setLicensePlateid(InventDim _loadLineInventDim, WHSWorkLine _workLine, WHSWorkTable _workTable)
    {
        _loadLineInventDim.LicensePlateId = _workTable.TargetLicensePlateId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>