<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetCollationStatementReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetCollationStatementReport extends RunBaseBatch implements BatchRetryable
{
    DialogField          dialogStandardId;
    RAssetInventoryTable assetInventoryTable;
    RAssetStandardId     assetStandardId;
    DialogField          dialogInventoryDate;
    RAssetTransDate      inventoryDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetStandard</Name>
				<Source><![CDATA[
    public RAssetStandardId assetStandard()
    {
        return assetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunBase dialogRunBase = super();

        dialogRunBase.caption("@GLS116537");
        dialogStandardId    = dialogRunBase.addField(extendedTypeStr(RAssetStandardId));
        dialogInventoryDate = dialogRunBase.addField(extendedTypeStr(RAssetTransDate), "@SYS23896", "@GLS102130");

        dialogInventoryDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        return dialogRunBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        assetStandardId = dialogStandardId.value();
        inventoryDate   = dialogInventoryDate.value();
        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    private void initFromArgs(Args _args)
    {
        ;

        if (! _args || _args.dataset() != tableNum(RAssetInventoryTable))
            throw(error(strFmt("@SYS19306", funcName())));

        assetInventoryTable = _args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public Query initQuery()
    {
        const str RangeQty = '(AccountingQty != FactQty)';

        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tableNum(RAssetInventoryTable));
        qbds.addRange(fieldNum(RAssetInventoryTable, RecId)).value(queryValue(assetInventoryTable.RecId));

        qbds = qbds.addDataSource(tableNum(RAssetInventoryTrans));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);

        qbds.addRange(fieldNum(RAssetInventoryTrans, AssetStandardId)).value(queryValue(assetStandardId));
        qbds.addRange(fieldNum(RAssetInventoryTrans, AccountingQty)).value(RangeQty);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryDate</Name>
				<Source><![CDATA[
    public RAssetTransDate inventoryDate()
    {
        return inventoryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean ret;
        ;

        ret = super();
        if (ret)
            this.initQuery();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of Excel report and executes it
    /// </summary>
    public void run()
    {
        OXMLExcelReport_INV18_RU excelReport = OXMLExcelReport_INV18_RU::construct();
        Args                     args        = new Args();

        args.record(assetInventoryTable);
        args.caller(this);

        excelReport.parmArgs(args);

        if (excelReport.init())
        {
            excelReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (! assetStandardId)
                ret = checkFailed("@FixedAssets:FA_MessageValidation_BookMustBeSpecified");

            if (inventoryDate == dateNull())
                ret = checkFailed("@SYS24455");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RAssetCollationStatementReport rassetCollationStatement = new RAssetCollationStatementReport();
        ;

        rassetCollationStatement.initFromArgs(_args);

        if (rassetCollationStatement.prompt())
            rassetCollationStatement.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>