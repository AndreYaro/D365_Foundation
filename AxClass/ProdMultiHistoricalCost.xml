<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiHistoricalCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdMultiHistoricalCost</c> class shows the user dialog box to end the production order.
/// </summary>
/// <remarks>
///    Several production orders can be selected in the user dialog box. Each production order will be
///    ended using the <see cref="T:ProdUpdHistoricalCost" />.
/// </remarks>
class ProdMultiHistoricalCost extends ProdMulti implements BatchRetryable
{
    ProdParmHistoricalCost          standardParmHistoricalCost;

    #DEFINE.CurrentVersion(6)
    #LOCALMACRO.CurrentList
        standardParmHistoricalCost
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of batch journal types.
    /// </summary>
    /// <returns>
    ///    true if the class is set to be shown in the list of batch journal types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> returns false,
    ///    this method will not have any effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    boolean checkBuffer(Common _prodTable)
    {
        ProdTable prodTable = _prodTable as ProdTable;
        Common anyBuffer;
        return !ProdParmHistoricalCost::exist(parmId,prodTable.ProdId) && prodTable.status().runHistoricalCost(anyBuffer,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the performance of any clean up that is required after a dialog box has been canceled.
    /// </summary>
    /// <remarks>
    ///    Override this method if any clean up is necessary after a dialog box has been canceled.
    /// </remarks>
    void cleanupDialog()
    {
        ProdParmHistoricalCost::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        ProdParmHistoricalCost  prodParmHistoricalCost;

        return prodParmHistoricalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the form, which is provided with a user interface for specifying the parameters
    ///    for update of production.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    formName formName()
    {
        return formstr(ProdParmHistoricalCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer  _prodParmHistoricalCost)
    {
        ProdParmHistoricalCost prodParmHistoricalCost = _prodParmHistoricalCost;
        ProdParmHistoricalCost saveProdParmHistoricalCost;
        saveProdParmHistoricalCost.data(prodParmHistoricalCost);
        prodParmHistoricalCost.data(standardParmHistoricalCost);

        prodParmHistoricalCost.ParmId           = saveProdParmHistoricalCost.ParmId;
        prodParmHistoricalCost.RecId            = saveProdParmHistoricalCost.RecId;
        prodParmHistoricalCost.LineNum          = saveProdParmHistoricalCost.LineNum;
        prodParmHistoricalCost.ProdId           = saveProdParmHistoricalCost.ProdId;
        prodParmHistoricalCost.JobStatus        = saveProdParmHistoricalCost.JobStatus;
        prodParmHistoricalCost.ExecutedDateTime = saveProdParmHistoricalCost.ExecutedDateTime;
        prodParmHistoricalCost.AutoUpdate       = autoUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(Common _prodTable, ParmBuffer _prodParmHistoricalCost)
    {
        ProdTable prodTable = _prodTable as ProdTable;
        ProdParmHistoricalCost prodParmHistoricalCost = _prodParmHistoricalCost;
        if (usedInitParmDefault)
        {
            standardParmHistoricalCost.initFromProdParametersDim(prodTable.prodParametersDim());
            usedInitParmDefault = false;
        }

        super(_prodTable,_prodParmHistoricalCost);

        this.initProdParmHistoricalCost(prodParmHistoricalCost, prodTable);
        prodParmHistoricalCost.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdParmHistoricalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProdParmHistoricalCost</c> record to be inserted.
    /// </summary>
    /// <param name = "_prodParmHistoricalCost"> The <c>ProdParmHistoricalCost</c> record to be inserted. </param>
    /// <param name = "_prodTable"> The corresponding <c>ProdTable</c> record. </param>
    protected void initProdParmHistoricalCost(ProdParmHistoricalCost _prodParmHistoricalCost, ProdTable _prodTable)
    {        
        _prodParmHistoricalCost.ProdId = _prodTable.ProdId;
        // <GEERU>
        _prodParmHistoricalCost.EndJob_RU = !_prodTable.calculatingWIP_RU();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return ProdParmHistoricalCost::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>ProdMultiHistoricalCost</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>ProdMultiHistoricalCost</c> class.
    /// </returns>
    /// <remarks>
    ///    All variables that are required to re-initialize the class after construction must be packed.
    ///    Normally, a macro in the class declaration is used to list the variables to pack. Another macro
    ///    holds a version number. This number refers to the version of the variable list. When a new variable
    ///    is introduced, follow these steps:
    ///    <list type="number">
    ///       <item>
    ///          <description>Increment the version number that is in the version macro.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Copy the current list to the <c>unpack</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the new variable to the bottom of the list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Recompile the class.</description>
    ///       </item>
    ///    </list>
    ///     When the
    ///    <c>
    ///       isSwappingPrompt
    ///    </c>
    ///     method returns a value of true, you may must pack some prompt-related variables.
    /// </remarks>
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    Num parmId(Num _parmId = parmId)
    {
        parmId = _parmId;

        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer  _standard  = standardParmHistoricalCost)
    {
        standardParmHistoricalCost = _standard;

        return standardParmHistoricalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        return new QueryRun(querystr(ProdMultiSelectHistoricalCost)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::MultiHistoricalCost))
        {
            #OCCRetryCount
            ProdParmHistoricalCost prodParmHistoricalCost;

            super();

            select prodParmHistoricalCost
                index NumLineNumIdx
                where prodParmHistoricalCost.ParmId     == this.parmId()
                   && prodParmHistoricalCost.JobStatus  != ParmJobStatus::Executed;

            while (prodParmHistoricalCost)
            {
                try
                {
                    this.endProductionOrder(prodParmHistoricalCost);
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    exceptionTextFallThrough();
                }
                next prodParmHistoricalCost;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endProductionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends a single production order.
    /// </summary>
    /// <param name = "_prodParmHistoricalCost">End production order parameters.</param>
    [Replaceable]
    protected void endProductionOrder(ProdParmHistoricalCost _prodParmHistoricalCost)
    {
        // Don't allow the Production Order to be Ended if there is open Work.
        if (WHSProdTable::isWorkCompleteForProdOrder(_prodParmHistoricalCost.ProdId))
        {
            ProdTable::find(_prodParmHistoricalCost.ProdId).status().runHistoricalCost(_prodParmHistoricalCost,false,this);
        }
        else
        {
            throw error(strFmt("@SCM:CanNotEndProductionOrderWithOpenWork", _prodParmHistoricalCost.ProdId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter value to an instance of the
    ///    <c>ProdMultiHistoricalCost</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When <c>isSwappingPrompt</c> method returns a value of true, you may have to unpack some
    ///    prompt-related variables.
    /// </remarks>
    boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conpeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                standardParmHistoricalCost.CalcDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                ret = super(base);
                break;
            case 5:
                [version,
                 parmId,
                 standardParmHistoricalCost
                ] = _packedClass;
                ret = true;
                break;
            default :
                this.initParmDefault();
                ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdMultiHistoricalCost construct(Args _args)
    {
        ProdMultiHistoricalCost prodMultiHistoricalCost = new ProdMultiHistoricalCost();

        return prodMultiHistoricalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@SYS60762";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProdMultiHistoricalCost     prodMultiHistoricalCost = ProdMultiHistoricalCost::construct(_args);

        if (_args.parmEnum() == RunChoose::Run)
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(prodMultiHistoricalCost.formName(), _args.menuItemName()))
            {
                RunBaseMultiParm::initFromForm(prodMultiHistoricalCost,_args);

                if (! prodMultiHistoricalCost.prompt())
                {
                    return;
                }

                prodMultiHistoricalCost.runOnServer();
                prodMultiHistoricalCost.refreshCaller(_args);
            }
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>