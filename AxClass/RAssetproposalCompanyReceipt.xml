<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetproposalCompanyReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetproposalCompanyReceipt extends RAssetProposal implements BatchRetryable
{
    RAssetMoveHist rAssetMoveHist;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
        public RAssetTransType assetTransType()
    {
        return RAssetTransType::CompanyReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDisposalTrans</Name>
				<Source><![CDATA[
        public void createDisposalTrans(RAssetDisposalType _assetSoldScrap,
                                    RAssetStandardId   _assetStandardId,
                                    LedgerJournalTrans _disposalLine     = null)
    {
        RAssetDisposalParameters  rAssetDisposalParameters;
        RAssetAmount              rAssetAmount;
        LedgerJournalTrans        ledgerJournalTrans;
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset;

        if (! (select firstonly RecId from rAssetDisposalParameters
                  where rAssetDisposalParameters.PostingProfile == rAssetStandards.postingProfile(runDate) &&
                        rAssetDisposalParameters.SoldScrap      == _assetSoldScrap).RecId)
            throw error(strFmt("@GLS220505", this.assetTransType()));

        while select rAssetDisposalParameters
            where rAssetDisposalParameters.SoldScrap      == _assetSoldScrap &&
                  rAssetDisposalParameters.PostingProfile == rAssetStandards.postingProfile(runDate)
        {
            switch (rAssetDisposalParameters.PostValue)
            {
                case RAssetPostValue::BalanceAcq:
                    rAssetAmount = rAssetMoveHist.rAssetMoveStandard(_assetStandardId).BalanceAcquisition;
                    break;
                case RAssetPostValue::BalanceDepr:
                    rAssetAmount = -rAssetMoveHist.rAssetMoveStandard(_assetStandardId).BalanceDepreciation;
                    break;
                case RAssetPostValue::AcqAdjPriorYears:
                case RAssetPostValue::AcqAdjThisYear:
                case RAssetPostValue::AcqPriorYears:
                case RAssetPostValue::AcqThisYear:
                case RAssetPostValue::Acquisition:
                case RAssetPostValue::DepAdjPriorYears:
                case RAssetPostValue::DepAdjThisYear:
                case RAssetPostValue::DepBonusRecovery:
                case RAssetPostValue::DepPriorYears:
                case RAssetPostValue::DepThisYear:
                case RAssetPostValue::Gain:
                case RAssetPostValue::NBV:
                case RAssetPostValue::RevaluePriorYear:
                case RAssetPostValue::RevalueThisYear:
                case RAssetPostValue::SaleValue:
                    rAssetAmount = RassetDisposalValue::postValue(rAssetTable.AccountNum,
                                                                  _assetStandardId,
                                                                  rAssetDisposalParameters.PostValue,
                                                                  0,
                                                                  runDate);
                    break;
                default:
                    rAssetAmount = this.getAssetAmount(rAssetDisposalParameters.PostValue, _assetStandardId);
                    break;
            }

            if (rAssetDisposalParameters.postThis(rAssetTable.AccountNum, rAssetAmount, _assetStandardId))
            {
                rAssetAmount = RAssetProposal::roundAmount(_assetStandardId,
                                                           rAssetTable,
                                                           runDate,
                                                           rAssetAmount,
                                                           rAssetStandards.CurrencyCode);

                if (rAssetAmount)
                {
                    rAssetJournal.createTrans(rAssetAmount,
                                              rAssetTable,
                                              runDate,
                                              rAssetStandards,
                                              '',
                                              enum2str(rAssetDisposalParameters.PostValue),
                                              rAssetDisposalParameters.LedgerDimension,
                                              NoYes::No);

                    ledgerJournalTrans = rAssetJournal.ledgerJournalTrans();
                    ledgerJournalTrans.selectForUpdate(true);

                    ledgerJournalTrans.OffsetLedgerDimension = this.mergeLedgerDimensionAndDefaultDimension(rAssetDisposalParameters.OffsetLedgerDimension,
                                                                                                            ledgerJournalTrans.DefaultDimension);
                    ledgerJournalTrans.Invisible             = rAssetDisposalParameters.Invisible;
                    ledgerJournalTrans.NoEdit                = rAssetDisposalParameters.Invisible;
                    ledgerJournalTrans.update();

                    ledgerJournalTrans_RAsset = rAssetJournal.ledgerJournalTrans_RAsset();
                    ledgerJournalTrans_RAsset.selectForUpdate(true);
                    ledgerJournalTrans_RAsset.ToFromRecId = ledgerJournalTrans.RecId;
                    ledgerJournalTrans_RAsset.PostValue   = rAssetDisposalParameters.PostValue;
                    ledgerJournalTrans_RAsset.doUpdate();
                }
            }
        }

        if (ledgerJournalTrans_RAsset)
        {
            ledgerJournalTrans_RAsset.CanDisposal = true;
            ledgerJournalTrans_RAsset.ToFromRecId = 0;
            ledgerJournalTrans_RAsset.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets asset amount.
    /// </summary>
    /// <param name = "_assetPostValue">An asset post value type.</param>
    /// <param name = "_assetStandardId">An asset standard Id.</param>
    /// <returns>Returns asset amount.</returns>
    protected RAssetAmount getAssetAmount(
        RAssetPostValue _assetPostValue,
        RAssetStandardId _assetStandardId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
        public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount  = 0)
    {
        rAssetMoveHist = RAssetMoveHist::findLastOperation(rAssetTable.AccountNum,RAssetMoveType::CompanyReceipt,NoYes::No,runDate);
        runDate = rAssetMoveHist.ChangeDate;
        if (runDate && rAssetStandards.Depreciation)
        {
            rAssetJournal.createVoucher();
            this.createDisposalTrans(RAssetDisposalType::CompanyReceipt, _assetStandardId);
        }
        else if (singleOperation)
            throw error(strFmt("@GLS220506",
                                rAssetTable.AccountNum,
                                RAssetMoveHist::findLastOperation(rAssetTable.AccountNum,RAssetMoveType::CompanyReceipt,NoYes::No).ChangeDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116685");
        dialogRunDate.label("@GLS116689");
        dialogAssetStandardId.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run(QueryRun _queryRun = queryRun)
    {
        ;
        _queryRun.query().dataSourceName(tableStr(RAssetTable)).addRange(fieldNum(RAssetTable, AssetType)).value(queryRange(RAssetType::Tangible, RAssetType::Other));
        super(_queryRun);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>