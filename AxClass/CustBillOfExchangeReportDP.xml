<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangeReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustBillOfExchangeReportDP</c> class declares the variables that is required for the
/// <c>CustBillOfExchangeReport</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CustBillOfExchangeReport)),
    SRSReportParameterAttribute(classstr(CustBillOfExchangeReportContract))
]
public class CustBillOfExchangeReportDP extends SRSReportDataProviderBase
{
    private int amountCounter;

    private CustBillOfExchangeReportTmp custBillOfExchangeReportTmp;
    private CustBillOfExchangeReportTmpStaging custBillOfExchangeReportTmpStaging;
    private CustBillOfExchangeReportTmpLookup custBillOfExchangeReportTmpLookup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustBillOfExchangeReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Picks values from the <c>CustBillOfExchangeReportTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The values from the temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(CustBillOfExchangeReportTmp))]
    public CustBillOfExchangeReportTmp getCustBillOfExchangeReportTmp()
    {
        select custBillOfExchangeReportTmp;
        return custBillOfExchangeReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustBillOfExchangeReportTmpStaging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns initial values which can be copied or calculated.
    /// </summary>
    private void initCustBillOfExchangeReportTmpStaging()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustTrans custTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustBillOfExchangeTrans custBillOfExchangeTransLocal;

        update_recordSet custBillOfExchangeReportTmpStaging
            setting
                Status = custBillOfExchangeJour.Status,
                CustAccount = custBillOfExchangeJour.CustAccount,
                DueDate = custBillOfExchangeJour.DueDate,
                ApprovalDate = custBillOfExchangeJour.ApprovalDate,
                DocumentDate = custBillOfExchangeJour.DocumentDate
            join Status, CustAccount, DueDate, ApprovalDate, DocumentDate from custBillOfExchangeJour
                where custBillOfExchangeReportTmpStaging.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId;

        update_recordSet custBillOfExchangeReportTmpStaging
            setting
                SeqNum = custBillOfExchangeTrans.SeqNum,
                Currency = custBillOfExchangeTrans.CurrencyCode
            join SeqNum, CurrencyCode from custBillOfExchangeTrans
                where custBillOfExchangeReportTmpStaging.BillOfExchangeId == custBillOfExchangeTrans.BillOfExchangeId
                    && custBillOfExchangeReportTmpStaging.Status == custBillOfExchangeTrans.Status
                    notExists join custBillOfExchangeTransLocal
                        where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeTransLocal.BillOfExchangeId
                            && custBillOfExchangeTransLocal.SeqNum > custBillOfExchangeTrans.SeqNum;

        update_recordSet custBillOfExchangeReportTmpStaging
            setting
               PaymMode = custTrans.PaymMode
            join PaymMode from custTrans
                where custTrans.BillOfExchangeId == custBillOfExchangeReportTmpStaging.BillOfExchangeId
                    && custTrans.AccountNum == custBillOfExchangeReportTmpStaging.CustAccount
                    exists join custBillOfExchangeTrans
                        where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeReportTmpStaging.BillOfExchangeId
                            && custBillOfExchangeTrans.Status == custBillOfExchangeReportTmpStaging.Status
                            && custBillOfExchangeTrans.SeqNum == custBillOfExchangeReportTmpStaging.SeqNum
                            && custTrans.Voucher == custBillOfExchangeTrans.Voucher
                            && custTrans.TransDate == custBillOfExchangeTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustBillOfExchangeReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>CustBillOfExchangeReportTmp</c> temporary table.
    /// </summary>
    private void insertCustBillOfExchangeReportTmp()
    {
        amountCounter = 1;
        insert_recordset custBillOfExchangeReportTmp
        (
            AmountCounter,
            AmountDrawn,
            AmountMSTDrawn,
            AmountMSTOpen,
            ApprovalDate,
            BillOfExchangeId,
            Currency,
            CustAccount,
            DocumentDate,
            DueDate,
            PaymMode,
            Status
        )
        select amountCounter,
            AmountDrawnCur,
            AmountDrawnMST,
            RemainAmountMST,
            ApprovalDate,
            BillOfExchangeId,
            Currency,
            CustAccount,
            DocumentDate,
            DueDate,
            PaymMode,
            StatusStr
        from custBillOfExchangeReportTmpStaging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustBillOfExchangeReportTmpLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills in <c>CustBillOfExchangeReportTmpLookup</c> temporary table to perform set-based fields update of <C>CustBillOfExchangeReportTmpLookup</C>.
    /// </summary>
    private void insertCustBillOfExchangeReportTmpLookup()
    {
        insert_recordset custBillOfExchangeReportTmpLookup (CustBillOfExchangeReportTmpRecId)
            select minof(RecId)
            from custBillOfExchangeReportTmp
            group by BillOfExchangeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates data in the settlement section.
    /// </summary>
    private void printSettlement()
    {
        CustBillOfExchangeInvoice custBillOfExchangeInvoice;

        // Lines to be inserted here don't relate to BOE customer transactions
        int fromTransaction = 0;
        // Lines to be inserted here relate to BOE settlement with invoice
        int fromSettlement = 1;

        insert_recordset custBillOfExchangeReportTmp
        (
            AmountCounter,
            AmountDrawn,
            AmountMSTDrawn,
            AmountMSTOpen,
            ApprovalDate,
            BillOfExchangeId,
            Currency,
            CustAccount,
            DocumentDate,
            DueDate,
            PaymMode,
            Settlement,
            Status,
            Transaction,
            CurrencyCode,
            InvoiceAccountNum,
            InvoiceAmountCur,
            InvoiceCompany,
            InvoiceDueDate,
            InvoiceId,
            SettlementAmountCur,
            Voucher
        )
        select amountCounter,
            AmountDrawnCur,
            AmountDrawnMST,
            RemainAmountMST,
            ApprovalDate,
            BillOfExchangeId,
            Currency,
            CustAccount,
            DocumentDate,
            DueDate,
            PaymMode,
            fromSettlement,
            StatusStr,
            fromTransaction
        from custBillOfExchangeReportTmpStaging
        join
            CurrencyCode,
            InvoiceAccountNum,
            InvoiceAmountCur,
            InvoiceCompany,
            DueDate,
            InvoiceId,
            InvoiceAmountCur,
            Voucher
        from custBillOfExchangeInvoice
            where custBillOfExchangeInvoice.BillOfExchangeId == custBillOfExchangeReportTmpStaging.BillOfExchangeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates data in the transactions section.
    /// </summary>
    private void printTransactions()
    {
        CustTransOpen custTransOpen;
        CustTrans custTrans;

        // Lines to be inserted here relate to BOE customer transactions
        int fromTransaction = 2;
        // Lines to be inserted here don't relate to BOE settlement with invoice
        int fromSettlement = 0;
        date datemin = dateNull();

        insert_recordset custBillOfExchangeReportTmp
        (
            AmountCounter,
            AmountDrawn,
            AmountMSTDrawn,
            AmountMSTOpen,
            ApprovalDate,
            BillOfExchangeId,
            Currency,
            CustAccount,
            DocumentDate,
            DueDate,
            PaymMode,
            Settlement,
            Status,
            Transaction,
            PostingProfile,
            TransactionAmountMST,
            TransDate,
            Txt,
            Voucher,
            BankDiscNoticeDeadline
        )
        select amountCounter,
            AmountDrawnCur,
            AmountDrawnMST,
            RemainAmountMST,
            ApprovalDate,
            BillOfExchangeId,
            Currency,
            CustAccount,
            DocumentDate,
            DueDate,
            PaymMode,
            fromSettlement,
            StatusStr,
            fromTransaction
        from custBillOfExchangeReportTmpStaging
        join PostingProfile,
            AmountMST,
            TransDate,
            Txt,
            Voucher
        from custTrans
            where custTrans.BillOfExchangeID == custBillOfExchangeReportTmpStaging.BillOfExchangeId
                && custTrans.AccountNum == custBillOfExchangeReportTmpStaging.CustAccount
        //adding rows with empty BankDiscNoticeDeadline - needed here to get correct amount of rows
        outer join datemin
        from custTransOpen
            where custTransOpen.AccountNum == custTrans.AccountNum
                && custTransOpen.RefRecId == custTrans.RecId;

        //update the actual BankDiscNoticeDeadline with value from CustTransOpen
        update_recordset custBillOfExchangeReportTmp setting
            BankDiscNoticeDeadline = custTransOpen.BankDiscNoticeDeadline
        join BillOfExchangeID, AccountNum, RecId from custTrans
            where custTrans.AccountNum == custBillOfExchangeReportTmp.CustAccount
                && custTrans.BillOfExchangeID == custBillOfExchangeReportTmp.BillOfExchangeId
                join BankDiscNoticeDeadline from custTransOpen
                    where custTransOpen.AccountNum == custTrans.AccountNum
                        && custTransOpen.RefRecId == custTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data based on the specified parameters and calculations based on criteria.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;
        CustBillOfExchangeJour custBillOfExchangeJour;
        RecordInsertList stagingTableList = new RecordInsertList(
            custBillOfExchangeReportTmpStaging.TableId,
            false,
            false,
            false,
            false,
            true,
            custBillOfExchangeReportTmpStaging);

        CustBillOfExchangeReportContract contract = this.parmDataContract() as CustBillOfExchangeReportContract;
        Query query = new Query(this.parmQuery());
        queryRun = new QueryRun(query);

        amountCounter = 0;

        while (queryRun.next())
        {
            custBillOfExchangeJour = queryRun.get(tablenum(CustBillOfExchangeJour)) AS CustBillOfExchangeJour;
            custBillOfExchangeReportTmpStaging.BillOfExchangeId = custBillOfExchangeJour.BillOfExchangeId;
            custBillOfExchangeReportTmpStaging.AmountDrawnCur = custBillOfExchangeJour.amountDrawn();
            custBillOfExchangeReportTmpStaging.AmountDrawnMST = custBillOfExchangeJour.amountMSTDrawn();
            custBillOfExchangeReportTmpStaging.RemainAmountMST = custBillOfExchangeJour.amountMSTOpen();
            custBillOfExchangeReportTmpStaging.StatusStr = enum2str(custBillOfExchangeJour.Status);
            stagingTableList.add(custBillOfExchangeReportTmpStaging);
        }

        stagingTableList.insertDatabase();

        this.initCustBillOfExchangeReportTmpStaging();

        if (contract.parmSettlement())
        {
            this.printSettlement();
        }

        if (contract.parmTransactions())
        {
            this.printTransactions();
        }

        this.insertCustBillOfExchangeReportTmpLookup();
        this.updateAmountCounterAndTransaction(contract.parmTransactions());

        //Now for those records which were NOT inserted in CustBillOfExchangeReportTmp by printTransactions and printSettlement we need to add lines from staging
        delete_from custBillOfExchangeReportTmpStaging
            exists join custBillOfExchangeReportTmp
                where custBillOfExchangeReportTmp.BillOfExchangeId == custBillOfExchangeReportTmpStaging.BillOfExchangeId;

        this.insertCustBillOfExchangeReportTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmountCounterAndTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>Transaction</c> and <c>AmountCounter</c> fields of <c>CustBillOfExchangeReportTmp</c> temporary table.
    /// </summary>
    /// <param name="printTransactions">
    /// Whether transaction lines are printed in the report.
    /// </param>
    /// <remarks>
    /// Transaction field is driving background color\bold font for report lines, also hiding\showing some controls.
    /// AmountCounter field is used for bottom table of total amounts per currency.
    /// </remarks>
    private void updateAmountCounterAndTransaction(boolean printTransactions)
    {
        update_recordSet custBillOfExchangeReportTmp setting
            AmountCounter = 1
        exists join custBillOfExchangeReportTmpLookup
            where custBillOfExchangeReportTmpLookup.CustBillOfExchangeReportTmpRecId == custBillOfExchangeReportTmp.RecId;

        if (printTransactions)
        {
            delete_from custBillOfExchangeReportTmpLookup;

            insert_recordset custBillOfExchangeReportTmpLookup ( CustBillOfExchangeReportTmpRecId, Transaction )
                select minof(RecId), Transaction from custBillOfExchangeReportTmp group by BillOfExchangeId, Transaction;

            update_recordSet custBillOfExchangeReportTmp setting
                Transaction = 1
            exists join custBillOfExchangeReportTmpLookup
                where custBillOfExchangeReportTmpLookup.CustBillOfExchangeReportTmpRecId == custBillOfExchangeReportTmp.RecId
                    && custBillOfExchangeReportTmp.Transaction == 2;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
