<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityManagementBlock</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventQualityManagementBlock</c> class provides the facilities for quality management process blocking.
/// </summary>
class InventQualityManagementBlock implements InventQualityManagementActionable
{
    InventTestBlockProcess      process;
    InventQualityReferenceType  referenceType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>handleOpenQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles an opened <c>InventQualityOrderTable</c> record if one exists.
    /// </summary>
    /// <param name = "_orderTable">The open <c>InventQualityOrderTable</c> record.</param>
    protected void handleOpenQualityOrder(InventQualityOrderTable _orderTable)
    {
        WHSQualityManagementCreateBeforeReportAsFinishedContext qualityManagementCreateBeforeReportAsFinishedContext = WHSQualityManagementCreateBeforeReportAsFinishedContext::current();
        
        if (qualityManagementCreateBeforeReportAsFinishedContext)
        {
            error("@SYS333773");
            qualityManagementCreateBeforeReportAsFinishedContext.parmHasError(true);
        }
        else
        {
            throw error("@SYS333773");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleLastClosedQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the last <c>InventQualityOrderTable</c> record if one exists.
    /// </summary>
    /// <param name = "_orderTable">The last closed <c>InventQualityOrderTable</c> record.</param>
    protected void handleLastClosedQualityOrder(InventQualityOrderTable _orderTable)
    {
        if (_orderTable.OrderStatus == InventTestOrderStatus::Fail)
        {
            warning("@SYS113924");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>actOnAssociations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks quality associations that match criteria passed for blocking policy and blocks the currently
    ///    considered process accordingly.
    /// </summary>
    /// <param name="_itemCode">
    ///    An <c>ItemCode</c> value.
    /// </param>
    /// <param name="_itemRelation">
    ///    An <c>ItemRelation</c> value.
    /// </param>
    /// <param name="_accountCode">
    ///    An <c>InventTestAccountCode</c> value.
    /// </param>
    /// <param name="_accountRelation">
    ///    An <c>InventTestAccountRelation</c> value.
    /// </param>
    /// <param name="_wrkCtrCode">
    ///    An <c>InventTestWrkCtrCode</c> value.
    /// </param>
    /// <param name="_wrkCtrRelation">
    ///    A <c>WrkCtrIdBase</c> value.
    /// </param>
    /// <remarks>
    ///    This method is intended to provide a callback for third-party methods called in the <c>run</c>
    ///    method.
    /// </remarks>
    public void actOnAssociations(
        ItemCode                    _itemCode,
        ItemRelation                _itemRelation,
        InventTestAccountCode       _accountCode,
        InventTestAccountRelation   _accountRelation,
        InventTestWrkCtrCode        _wrkCtrCode,
        WrkCtrIdBase                _wrkCtrRelation)
    {
        InventTestAssociationTable      associationTable;
        utcdatetime                     currentTime          = DateTimeUtil::getSystemDateTime();
        InventTestBlockProcessComparer  blockProcessComparer = InventTestBlockProcessComparer::construct();

        while select associationTable
            where   associationTable.OrderType          == referenceType.referenceType()
                 && associationTable.ItemCode           == _itemCode
                 && associationTable.ItemRelation       == _itemRelation
                 && associationTable.AccountCode        == _accountCode
                 && associationTable.AccountRelation    == _accountRelation
                 && associationTable.WrkCtrCode         == _wrkCtrCode
                 && associationTable.WrkCtrRelation     == _wrkCtrRelation
                 && associationTable.ValidFromDateTime  <= currentTime
                 && associationTable.ValidToDateTime    >  currentTime
                 && (associationTable.InventSiteId      == referenceType.inventSiteId()
                     || !associationTable.InventSiteId)
        {
            if (blockProcessComparer.compare(associationTable.BlockProcess, process) < 0)
            {
                continue;
            }
                 
            InventQualityOrderTable orderTable = InventQualityOrderTable::findOpenQualityOrderForAssociation(associationTable, 
                                                                                                             referenceType.inventRefId(),
                                                                                                             referenceType.inventTransId(),
                                                                                                             referenceType.itemId(),
                                                                                                             referenceType.referenceType(),
                                                                                                             referenceType.routeOprId(),
                                                                                                             referenceType.oprNum());

            if (orderTable)
            {
                this.handleOpenQualityOrder(orderTable);
            }
            else
            {
                orderTable = InventQualityOrderTable::findLastClosedQualityOrderForAssociation(associationTable,
                                                                                               referenceType.inventRefId(),
                                                                                               referenceType.inventTransId(),
                                                                                               referenceType.itemId(),
                                                                                               referenceType.referenceType(),
                                                                                               referenceType.routeOprId(),
                                                                                               referenceType.oprNum());

                if (orderTable)
                {
                    this.handleLastClosedQualityOrder(orderTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected final void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcess</Name>
				<Source><![CDATA[
    protected InventTestBlockProcess parmProcess(InventTestBlockProcess _process = process)
    {
        process = _process;
        return process;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceType</Name>
				<Source><![CDATA[
    protected InventQualityReferenceType parmReferenceType(InventQualityReferenceType _referenceType = referenceType)
    {
        referenceType = _referenceType;
        return referenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the main process blocking logic of checking the blocking policy and blocking accordingly.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The process was blocked.
    /// </exception>
    final protected void run()
    {
        if (referenceType.canBlock())
        {
            referenceType.iterateQualityAssociations(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockPerQualityAssociations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers the blocking mechanism that blocks the current process, which is conditioned on the
    ///    existence of a quality association and quality order that indicate whether the process on the given
    ///    reference document buffer is blocked.
    /// </summary>
    /// <param name="_buffer">
    ///    A <c>Common</c> buffer that stores the reference document.
    /// </param>
    /// <param name="_process">
    ///    An <c>InventTestBlockProcess</c> value.
    /// </param>
    public static void blockPerQualityAssociations(Common _buffer, InventTestBlockProcess _process)
    {
        InventQualityReferenceType      inventQualityReferenceType = InventQualityReferenceType::newFromBuffer(_buffer);

        if ((InventTestAssociationTable::recordCountForOrderType(inventQualityReferenceType.referenceType()) <= 0)
            || InventQualityManagementBlock::canSkipBlockProcess(inventQualityReferenceType.referenceType(), _process))
        {
            // No associations for the given reference type or block process, so no need to check blocking
            return;
        }

        InventQualityManagementBlock inventQualityManagementBlock = InventQualityManagementBlock::construct();
        inventQualityManagementBlock.parmProcess(_process);
        inventQualityManagementBlock.parmReferenceType(inventQualityReferenceType);
        inventQualityManagementBlock.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventQualityManagementBlock construct()
    {
        return new InventQualityManagementBlock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSkipBlockProcess</Name>
				<Source><![CDATA[
    private static boolean canSkipBlockProcess(InventTestReferenceType _referenceType, InventTestBlockProcess _process)
    {
        str cacheScope = classStr(InventQualityManagementBlock);
        container key = [_referenceType, _process, curExt()];
        var cacheValue = SysTransactionScopeCache::get(cacheScope, key, null);

        if (cacheValue == null)
        {
            container      blockProcess;
            boolean        findEqualEnum = false;
            ListEnumerator listEnum      = InventTestBlockProcessOrderedList::construct().getEnumerator();

            while (listEnum.moveNext())
            {
                InventTestBlockProcess currentValue = any2Enum(listEnum.current());
                // All processes executed before or equal to given process (_process), should be recorded in container.
                // For example: If given process is product receipt, then any blocking process such as receipts list
                // whose order of precedence is before product receipt will be recorded in container,
                // and then we use this container to find if any blocking process record exists in quality order association table.
                if (currentValue == _process)
                {
                    findEqualEnum = true;
                }
                if (findEqualEnum)
                {
                    blockProcess += [currentValue];
                }
            }

            InventTestAssociationTable inventTestAssociationTable;
            select firstonly RecId from inventTestAssociationTable
                where inventTestAssociationTable.OrderType == _referenceType
                   && inventTestAssociationTable.BlockProcess in blockProcess;

            cacheValue = inventTestAssociationTable.RecId ? false : true;
            SysTransactionScopeCache::set(cacheScope, key, cacheValue);
        }
        return cacheValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>