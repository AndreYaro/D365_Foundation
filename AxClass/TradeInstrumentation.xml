<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeInstrumentation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TradeInstrumentation</c> class is a base class for instrumentation.
/// </summary>
internal abstract class TradeInstrumentation
{
    private TradeInstrumentationContext             context;
    private TradeInstrumentationContextInstanceId   contextInstanceId;
    private List                                    measures;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        measures = new List(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TradeInstrumentation</c> class.
    /// </summary>
    /// <param name = "_context">The context of the measure.</param>
    /// <param name = "_contextInstanceId">The instance ID of the context of the measure.</param>
    protected void initialize(
        TradeInstrumentationContext             _context, 
        TradeInstrumentationContextInstanceId   _contextInstanceId)
    {
        context = _context;
        contextInstanceId = _contextInstanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMeasureElapsedMilliseconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the elapsed milliseconds measure to the list of measures recorded.
    /// </summary>
    /// <param name = "_measureName">The name of the measure.</param>
    /// <param name = "_elapsedMilliseconds">The elapsed milliseconds.</param>
    /// <returns>An instance of the <c>TradeInstrumentation</c> class.</returns>
    internal TradeInstrumentation addMeasureElapsedMilliseconds(TradeInstrumentationMeasureName _measureName, int64 _elapsedMilliseconds)
    {
        this.addMeasureByValue(_measureName, _elapsedMilliseconds, TradeInstrumentationMeasureType::ElapsedMilliseconds);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMeasureElapsedMillisecondsFromStopwatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the elapsed milliseconds measure based on a stopwatch to the list of measures recorded.
    /// </summary>
    /// <param name = "_measureName">The name of the measure.</param>
    /// <param name = "_stopwatch">The stopwatch from which to get the elapsed milliseconds.</param>
    /// <returns>An instance of the <c>TradeInstrumentation</c> class.</returns>
    internal TradeInstrumentation addMeasureElapsedMillisecondsFromStopwatch(TradeInstrumentationMeasureName _measureName, TradeInstrumentationStopwatch _stopwatch)
    {
        this.addMeasureByValue(_measureName, _stopwatch.elapsedMilliseconds(), TradeInstrumentationMeasureType::ElapsedMilliseconds);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMeasureCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the count measure to the list of measures recorded.
    /// </summary>
    /// <param name = "_measureName">The name of the measure.</param>
    /// <param name = "_count">The count.</param>
    /// <returns>An instance of the <c>TradeInstrumentation</c> class.</returns>
    internal TradeInstrumentation addMeasureCount(TradeInstrumentationMeasureName _measureName, int64 _count)
    {
        this.addMeasureByValue(_measureName, _count, TradeInstrumentationMeasureType::Count);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMeasureNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the number measure to the list of measures recorded.
    /// </summary>
    /// <param name = "_measureName">The name of the measure.</param>
    /// <param name = "_number">The number.</param>
    /// <returns>An instance of the <c>TradeInstrumentation</c> class.</returns>
    internal TradeInstrumentation addMeasureNumber(TradeInstrumentationMeasureName _measureName, int64 _number)
    {
        this.addMeasureByValue(_measureName, _number, TradeInstrumentationMeasureType::Number);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMeasureProcessStopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the process stopped measure to the list of measures recorded.
    /// </summary>
    /// <param name = "_measureName">The name of the measure.</param>
    /// <returns>An instance of the <c>TradeInstrumentation</c> class.</returns>
    internal TradeInstrumentation addMeasureProcessStopped(TradeInstrumentationMeasureName _measureName)
    {
        this.addMeasureByValue(_measureName, 1, TradeInstrumentationMeasureType::ProcessStopped);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMeasureProcessRestarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the process restarted measure to the list of measures recorded.
    /// </summary>
    /// <param name = "_measureName">The name of the measure.</param>
    /// <returns>An instance of the <c>TradeInstrumentation</c> class.</returns>
    internal TradeInstrumentation addMeasureProcessRestarted(TradeInstrumentationMeasureName _measureName)
    {
        this.addMeasureByValue(_measureName, 1, TradeInstrumentationMeasureType::ProcessRestarted);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMeasureProcessStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the process started measure to the list of measures recorded.
    /// </summary>
    /// <param name = "_measureName">The name of the measure.</param>
    /// <returns>An instance of the <c>TradeInstrumentation</c> class.</returns>
    internal TradeInstrumentation addMeasureProcessStarted(TradeInstrumentationMeasureName _measureName)
    {
        this.addMeasureByValue(_measureName, 1, TradeInstrumentationMeasureType::ProcessStarted);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMeasureProcessCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the process completed measure to the list of measures recorded.
    /// </summary>
    /// <param name = "_measureName">The name of the measure.</param>
    /// <returns>An instance of the <c>TradeInstrumentation</c> class.</returns>
    internal TradeInstrumentation addMeasureProcessCompleted(TradeInstrumentationMeasureName _measureName)
    {
        this.addMeasureByValue(_measureName, 1, TradeInstrumentationMeasureType::ProcessCompleted);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMeasureByValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a measure to the list of measures recorded.
    /// </summary>
    /// <param name = "_measureName">The name of the measure.</param>
    /// <param name = "_measure">The measure.</param>
    /// <param name = "_measureType">The type of the measure.</param>
    private void addMeasureByValue(
        TradeInstrumentationMeasureName _measureName, 
        int64                           _measure, 
        TradeInstrumentationMeasureType _measureType)
    {
        measures.addEnd([_measureName, _measure, _measureType]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logMeasures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the measures recorded.
    /// </summary>
    /// <returns>An instance of the <c>TradeInstrumentation</c> class.</returns>
    internal TradeInstrumentation logMeasures()
    {
        ListEnumerator measureEnumerator = measures.getEnumerator();

        TradeInstrumentationMeasureName measureName;
        int64 measure;
        TradeInstrumentationMeasureType measureType;

        while (measureEnumerator.moveNext())
        {
            [measureName, measure, measureType] = measureEnumerator.current();

            this.writeMeasure(context, contextInstanceId, measureName, measure, enum2Symbol(enumNum(TradeInstrumentationMeasureType), enum2int(measureType)));
        }

        measures = new List(Types::Container);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes a measure.
    /// </summary>
    /// <param name = "_context">The context of the measure.</param>
    /// <param name = "_contextInstanceId">The instance ID of the context of the measure.</param>
    /// <param name = "_measureName">The name of the measure.</param>
    /// <param name = "_measure">The measure.</param>
    /// <param name = "_measureType">The type of the measure.</param>
    protected abstract void writeMeasure(
        TradeInstrumentationContext     _context, 
        str                             _contextInstanceId, 
        TradeInstrumentationMeasureName _measureName, 
        int64                           _measure, 
        str                             _measureType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMeasureNameByMethodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a measure name based on class and method name.
    /// </summary>
    /// <param name = "_objectName">The name of the class or table that contains the measure.</param>
    /// <param name = "_methodName">The name of the method that contains the measure.</param>
    /// <returns>The measure name.</returns>
    internal static TradeInstrumentationMeasureName getMeasureNameByMethodName(UtilElementName _objectName, MethodName _methodName)
    {
        return strFmt('%1::%2', _objectName, _methodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMeasureNameByValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a measure name based on provided measure name and value.
    /// </summary>
    /// <param name = "_measureName">The name of the measure.</param>
    /// <param name = "_measureValue">The value of the measure.</param>
    /// <returns>The measure name.</returns>
    internal TradeInstrumentationMeasureName getMeasureNameByValue(TradeInstrumentationMeasureName _measureName, anytype _measureValue)
    {
        return strFmt('%1::%2', _measureName, _measureValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>