<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgServiceDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates data for publishing via the ShopFloorService
/// Used for generating dataset based on paging and filtering information
/// </summary>
public class JmgServiceDataProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dataset based on provided filter and paging criteria
    /// </summary>
    /// <param name="_filterExecutor">
    /// <c>JmgServiceDataFilterExecutor</c> object that contains the filters to be used
    /// and applies the filters on the datasource
    /// </param>
    /// <param name="_pagingSetup">
    /// <c>PagingSetup</c> object containing requested paging information
    /// </param>
    /// <param name="_tableNum">
    /// Table or View id containing the base dataset
    /// </param>
    /// <param name="_orderbyFieldNum">
    /// field id of the field the return dataset should be ordered by
    /// mandatory for implementing paging
    /// </param>
    /// <returns>
    /// dataset containing the list of records
    /// </returns>
    public static Common getData(JmgServiceDataFilterExecutor _filterExecutor, JmgPagingSetup _pagingSetup, TableId _tableNum, FieldId _orderbyFieldNum)
    {
        Common result;
        QueryRun queryRun;
        Query query;
        QueryBuildDataSource qbds;
        int64 startPosition;
        DictTable dictTable;

        query = new Query();
        query.addDataSource(_tableNum);

        qbds = query.dataSourceTable(_tableNum,1);

        qbds.addOrderByField(_orderbyFieldNum);

        if (_filterExecutor)
        {
            _filterExecutor.applyFilters(qbds);
        }

        queryRun = new QueryRun(query);

        if (_pagingSetup)
        {
            if (_pagingSetup.parmNumberOfRecordsInPage() > 0)
            {
                // This would allow the user to just specify the maximum no. of records if
                // he/she is not interested in paging
                if (_pagingSetup.parmPageNumber() == 0)
                {
                    _pagingSetup.parmPageNumber(1);
                }

                startPosition = ((_pagingSetup.parmPageNumber() - 1) * _pagingSetup.parmNumberOfRecordsInPage()) + 1;
                queryRun.enablePositionPaging();
                queryRun.addPageRange(startPosition, _pagingSetup.parmNumberOfRecordsInPage());
            }
        }

        dictTable = DictTable::construct(tableId2Name(_tableNum));
        result = dictTable.makeRecord();
        result.setTmp();

        while (queryRun.next())
        {
            result.data(queryRun.get(_tableNum));
            result.insert();
        }

        select * from result;

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>