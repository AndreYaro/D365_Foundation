<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentLineStateContainerCleanerAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Data maintenance action to to clear out StateContainer field on SourceDocumentLine records.
/// StateContainer field can be cleaned for all SDL which AccountingStatus is equal to [Completed, Finalized, Canceled].
/// Exceptions (in case of corrections):
/// 1) For document type ProductReceipt do not clean SDL
/// 2) For document type ProductOrder clean only when AccountingStatus is equal to [Finalized, Canceled]
/// </summary>
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
[DataMaintenanceFeatureClass(classStr(SourceDocumentLineStateContainerCleanerFlight))]
internal final class SourceDocumentLineStateContainerCleanerAction
    implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionParameters, IDataMaintenanceActionScheduleParameters
{
    // Variable stores upper time limit on cleaning. Job cleans documents
    // only after some period of time.
    private utcdatetime createdDateTimeUpperLimit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        int FixMonthsToSkip = SourceDocumentParameters::find().SourceDocumentLineStateContainerCleanerMonthsToSkip;
        createdDateTimeUpperLimit = DateTimeUtil::addMonths(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), -fixMonthsToSkip);
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@SourceDocumentAccountingFramework:SourceDocumentLineStateContainerCleanerActionCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@SourceDocumentAccountingFramework:SourceDocumentLineStateContainerCleanerActionDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::Performance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::General;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(SourceDocumentLineStateContainerCleanerTask));
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpportunityForDocumentWithoutSpecialLogic</Name>
				<Source><![CDATA[
    private boolean hasOpportunityForDocumentWithoutSpecialLogic()
    {
        boolean opportunityExists;
        container accountingStatausesForDocumentsWithoutSpecialLogic = SourceDocumentLineStateContainerCleanerHelper::accountingStatusesForDocumentsWithoutSpecialLogic;

        SourceDocumentLine sourceDocumentLine;
        SourceDocumentHeader sourceDocumentHeader;

        select firstonly RecId from sourceDocumentLine
            where sourceDocumentLine.StateContainer != conNull()
                && sourceDocumentLine.CreatedDateTime <= createdDateTimeUpperLimit
                && sourceDocumentLine.Partition == getCurrentPartitionRecId()
                && sourceDocumentLine.AccountingStatus in accountingStatausesForDocumentsWithoutSpecialLogic
            join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
                && sourceDocumentHeader.TypeEnumName != enumId2Name(enumNum(SourceDocument_ProductReceipt))
                && sourceDocumentHeader.TypeEnumName != enumId2Name(enumNum(SourceDocument_ProductOrder));

        opportunityExists = sourceDocumentLine.RecId != 0;

        return opportunityExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpportunityForProductOrder</Name>
				<Source><![CDATA[
    private boolean hasOpportunityForProductOrder()
    {
        boolean opportunityExists;
        container accountinStatusesForDocumentTypePurchaseOrder = SourceDocumentLineStateContainerCleanerHelper::accountingStatusesForDocumentTypePurchaseOrder;

        SourceDocumentLine sourceDocumentLine;
        SourceDocumentHeader sourceDocumentHeader;

        select firstonly RecId from sourceDocumentLine
            where sourceDocumentLine.StateContainer != conNull()
                && sourceDocumentLine.CreatedDateTime <= createdDateTimeUpperLimit
                && sourceDocumentLine.Partition == getCurrentPartitionRecId()
                && sourceDocumentLine.AccountingStatus in accountinStatusesForDocumentTypePurchaseOrder
            join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
                && sourceDocumentHeader.TypeEnumName == enumId2Name(enumNum(SourceDocument_ProductOrder));

        opportunityExists = sourceDocumentLine.RecId != 0;

        return opportunityExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        boolean opportunityExists;

        opportunityExists = this.hasOpportunityForDocumentWithoutSpecialLogic() || this.hasOpportunityForProductOrder();
            
        DataMaintenanceOpportunityResult scanResult = DataMaintenanceOpportunityResult::construct();
        scanResult.parmOpportunityFound(opportunityExists);
        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters</Name>
				<Source><![CDATA[
    public DataMaintenanceActionParameters parameters()
    {
        DataMaintenanceActionParameters actionParameters = new DataMaintenanceActionParameters();
        actionParameters.IsSystemAction = false;

        return actionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionScheduleParameters scheduleParameters()
    {
        DataMaintenanceActionScheduleParameters params = new DataMaintenanceActionScheduleParameters();
        params.Frequency = DataMaintenanceActionScheduleFrequency::EveryFourHour;

        return params;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>