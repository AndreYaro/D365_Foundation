<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TradeNonStockedConversionChange</c> class manages the conversion to non-stocked products.
/// </summary>
class TradeNonStockedConversionChange
extends RunBaseBatch implements BatchRetryable
{
    TradeNonStockedConversion   tradeNonStockedConversion;
    TradeNonStockedConversion   tradeNonStockedConversionNew;

    #Define.CurrentVersion(1)
    #Localmacro.CurrentList
        tradeNonStockedConversion,
        tradeNonStockedConversionNew
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createConversionTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a <c>TradeNonStockedConversionChangeTaskLog</c> record.
    /// </summary>
    protected void createConversionTask()
    {
        TradeNonStockedConversionChangeTaskLog tradeNonStockedConversionChangeTaskLog;

        if (!TradeNonStockedConversionChangeTaskLog::existsTradeNonStockedConversion(this.parmTradeNonStockedConversion().RecId))
        {
            ttsbegin;
            tradeNonStockedConversionChangeTaskLog.initFromTradeNonStockedConversion(this.parmTradeNonStockedConversion());
            tradeNonStockedConversionChangeTaskLog.ExecutedDateTimeStart  = DateTimeUtil::utcNow();
            tradeNonStockedConversionChangeTaskLog.ExecutedByWorker       = HcmWorker::userId2Worker(curuserid());
            tradeNonStockedConversionChangeTaskLog.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Moves all items with status check with issues to a new conversion.
    /// </summary>
    protected void createNewConversion()
    {
        TradeNonStockedConversion       newConversion;
        TradeNonStockedConversionRecId  newConversionRecId;
        TradeNonStockedConversionItem   newConversionItem;
        TradeNonStockedConversionCheckTaskLog newTaskLog;
        TradeNonStockedConversionCheckTaskLog taskLog;

        if (TradeNonStockedConversionItem::existsStatus(this.parmTradeNonStockedConversion().RecId, TradeNonStockedConversionStatus::CheckedIssues))
        {
            ttsbegin;
            newConversion.initFromTradeNonStockedConversion(tradeNonStockedConversionNew);
            newConversion.insert();
            newConversionRecId = newConversion.RecId;

            insert_recordset newTaskLog(readinessRunDateTimeStart, readinessRunDateTimeEnd, nonStockedConversion)
                select ReadinessRunDateTimeStart, ReadinessRunDateTimeEnd, newConversionRecId from taskLog
                    where taskLog.NonStockedConversion == this.parmTradeNonStockedConversion().RecId;

            update_recordset newConversionItem
                setting NonStockedConversion = newConversionRecId
                where newConversionItem.NonStockedConversion == this.parmTradeNonStockedConversion().RecId
                &&    newConversionItem.Status == TradeNonStockedConversionStatus::CheckedIssues;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversion</Name>
				<Source><![CDATA[
    public TradeNonStockedConversion parmTradeNonStockedConversion(TradeNonStockedConversion _tradeNonStockedConversion = tradeNonStockedConversion)
    {
        tradeNonStockedConversion = _tradeNonStockedConversion;
        return tradeNonStockedConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversionNew</Name>
				<Source><![CDATA[
    public TradeNonStockedConversion parmTradeNonStockedConversionNew(TradeNonStockedConversion _tradeNonStockedConversionNew = tradeNonStockedConversionNew)
    {
        tradeNonStockedConversionNew = _tradeNonStockedConversionNew;
        return tradeNonStockedConversionNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the conversion.
    /// </summary>
    public void run()
    {
        TradeNonStockedConversionTaskManager tradeNonStockedConversionTaskManager;

        super();

        if (this.validate())
        {
            ttsbegin;
            this.createNewConversion();
            this.createConversionTask();
            ttscommit;
            tradeNonStockedConversionTaskManager = TradeNonStockedConversionTaskManager::newManager(TradeNonStockedConversionTaskType::Change,
                                                                                                    this.parmTradeNonStockedConversion(),
                                                                                                    this.parmCurrentBatch());
            tradeNonStockedConversionTaskManager.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates that theconversion can be performed.
    /// </summary>
    /// <param name="_calledFrom">
    ///   The calling object.
    /// </param>
    /// <returns>
    ///   true if the conversion can be performed; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (this.parmTradeNonStockedConversion().status() == TradeNonStockedConversionStatus::Draft)
        {
            ret = checkFailed("@SYS324061");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionChange construct()
    {
        return new TradeNonStockedConversionChange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS321731";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChange</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionChange newChange(
        TradeNonStockedConversion _tradeNonStockedConversion,
        TradeNonStockedConversion _tradeNonStockedConversionNew)
    {
        TradeNonStockedConversionChange tradeNonStockedConversionChange = TradeNonStockedConversionChange::construct();
        tradeNonStockedConversionChange.getLast();
        tradeNonStockedConversionChange.parmTradeNonStockedConversion(_tradeNonStockedConversion);
        tradeNonStockedConversionChange.parmTradeNonStockedConversionNew(_tradeNonStockedConversionNew);
        return tradeNonStockedConversionChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runChange</Name>
				<Source><![CDATA[
    static public void runChange(
        TradeNonStockedConversion _tradeNonStockedConversion,
        TradeNonStockedConversion _tradeNonStockedConversionNew)
    {
        TradeNonStockedConversionChange tradeNonStockedConversionChange = TradeNonStockedConversionChange::newChange(_tradeNonStockedConversion, _tradeNonStockedConversionNew);
        if (tradeNonStockedConversionChange.prompt())
        {
            tradeNonStockedConversionChange.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>