<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayExcludeTblDays</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements algorithm of excluded days for time sheets.
/// </summary>
class RPayExcludeTblDays extends RPayExcludeDays
{
    Set excludedTblPeriods;

    #RpayTblConstants
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExcludedDays</Name>
				<Source><![CDATA[
        Days getExcludedDays()
    {
        RPayTblTrans            payTblTrans;
        RPayTimeGroupMember     payTimeGroupMember;
        RPayTblSpecTimeTable    payTblSpecTimeTable;
        RPayCalendarTimeTrans   timeTrans;
        Days                    exclByTbl, exclByTimeCode;

        this.resetExcludedPeriods();

        while select payTblTrans
            where payTblTrans.emplId            == emplId
               && payTblTrans.SourceDate        >= startDate
               && payTblTrans.SourceDate        <= endDate
        {
            while select payCalendarTimeCode from payTimeGroupMember
                where payTimeGroupMember.TimeGroup == nonAppearanceTimeGroupCode
            notExists join payTblSpecTimeTable
                where payTblSpecTimeTable.RpayCalendarTimeCode == payTimeGroupMember.PayCalendarTimeCode
            {
                timeTrans = RPayCalendarTimeTrans::findByTimeCode(payTblTrans.RecId, payTimeGroupMember.PayCalendarTimeCode);
                exclByTimeCode += timeTrans.Day;

                this.prepareAndUpdateExcludedPeriods(payTblTrans, payTimeGroupMember.PayCalendarTimeCode, exclByTimeCode);
                exclByTbl += exclByTimeCode;
            }
        }

        isDaysCalculated = true;

        return exclByTbl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYearsExcludeDays</Name>
				<Source><![CDATA[
        container getYearsExcludeDays()
    {
        RPayTblJournal          payTblJournal;
        RPayTblTrans            payTblTrans;
        RPayTimeGroupMember     payTimeGroupMember;
        RPayTblSpecTimeTable    payTblSpecTimeTable;
        RPayCalendarTimeTrans   timeTrans;

        while select TableId from payTblJournal
            where payTblJournal.TblDate     >= startDate
               && payTblJournal.TblDate     <= endDate
        join RecId, SourceDate from payTblTrans
            where payTblTrans.PayTblNum     == payTblJournal.TblNum
               && payTblTrans.emplId        == emplId
        {
            while select payCalendarTimeCode from payTimeGroupMember
                where payTimeGroupMember.TimeGroup == nonAppearanceTimeGroupCode
            notExists join payTblSpecTimeTable
                where payTblSpecTimeTable.RpayCalendarTimeCode == payTimeGroupMember.PayCalendarTimeCode
            {
                timeTrans = RPayCalendarTimeTrans::findByTimeCode(payTblTrans.RecId, payTimeGroupMember.PayCalendarTimeCode);

                if (round(timeTrans.Day, 1) != 0)
                {
                    yearsSet.add(year(payTblTrans.SourceDate));
                    break;
                }
            }
        }

        return yearsSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareAndUpdateExcludedPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares data for updating excluded period set.
    /// </summary>
    /// <param name="_payTblTrans">
    /// The record of <c>RPayTblTrans</c> table.
    /// </param>
    /// <param name="_timeCode">
    /// The time code.
    /// </param>
    /// <param name="_exclByTimeCode">
    /// The number of excluded days.
    /// </param>
    protected void prepareAndUpdateExcludedPeriods(RPayTblTrans _payTblTrans, RPayTblTimeCode _timeCode, Days _exclByTimeCode)
    {
        RPayTblDayHourTrans dayHourTrans;
        int                 i;
        fieldId             fieldId;
        StartDate           tblTimeStartDate;
        EndDate             tblTimeEndDate;
        Name                timeName = RPayCalendarTimeTable::find(_timeCode).FullName;

        if (RPayTblJournal::find(_payTblTrans.PayTblNum).PayTblType == RPayTblType::EveryDay)
        {
            dayHourTrans = RPayTblDayHourTrans::find(_payTblTrans.RecId, _timeCode);

            if (dayHourTrans)
            {
                for (i = 1; i <= dayOfMth(endMth(_payTblTrans.SourceDate)); i++)
                {
                    fieldId = fieldname2id(tablenum(RPayTblDayHourTrans), #DayHourTransFieldPrefix + int2str(i));

                    if (dayHourTrans.(fieldId) != 0)
                    {
                        if (!tblTimeStartDate)
                        {
                            tblTimeStartDate = mkdate(i, mthofyr(_payTblTrans.SourceDate), year(_payTblTrans.SourceDate));
                        }
                    }
                    else
                    {
                        if (tblTimeStartDate)
                        {
                            tblTimeEndDate = mkdate(i - 1, mthofyr(_payTblTrans.SourceDate), year(_payTblTrans.SourceDate));
                        }
                    }

                    if (tblTimeStartDate && tblTimeEndDate)
                    {
                        this.updateExcludedPeriods(tblTimeStartDate, tblTimeEndDate, tblTimeEndDate - tblTimeStartDate + 1, timeName);
                        tblTimeStartDate = datenull();
                        tblTimeEndDate = datenull();
                    }
                }

                if (tblTimeStartDate)
                {
                    tblTimeEndDate = endMth(_payTblTrans.SourceDate);
                    this.updateExcludedPeriods(tblTimeStartDate, tblTimeEndDate, tblTimeEndDate - tblTimeStartDate + 1, timeName);
                    tblTimeStartDate = datenull();
                    tblTimeEndDate = datenull();
                }
            }
        }
        else
        {
            if (_exclByTimeCode != 0)
            {
                tblTimeStartDate = dateStartMth(_payTblTrans.SourceDate);
                tblTimeEndDate   = endMth(_payTblTrans.SourceDate);

                this.updateExcludedPeriods(tblTimeStartDate, tblTimeEndDate, _exclByTimeCode, timeName);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>