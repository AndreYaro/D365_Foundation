<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxListController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller class for the <c>TaxList</c> report.
/// </summary>
public class TaxListController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a report contract before a report is run.
    /// </summary>
    protected void prePromptModifyContract()
    {
        Query           query;
        QueryFilter     transDateQueryFilter;
        QueryFilter     vatDateQueryFilter;
        TaxListContract contract;

        #ISOCountryRegionCodes

        this.parmDialogCaption("@SYS13578");

        query = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        if (TaxParameters::reportUseVatDueDate_W())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00041, funcName());

            transDateQueryFilter = query.findQueryFilter(query.dataSourceTable(tableNum(TaxTrans)), fieldStr(TaxTrans, TransDate));
            if (transDateQueryFilter)
            {
                query.clearQueryFilters(query.dataSourceTable(tableNum(TaxTrans)), fieldStr(TaxTrans, TransDate));
            }
            transDateQueryFilter = SysQuery::findOrCreateQueryFilter(query, query.dataSourceTable(tableNum(TaxTrans)), fieldStr(TaxTrans, TransDate));
            transDateQueryFilter.status(RangeStatus::Hidden);
            vatDateQueryFilter = SysQuery::findOrCreateQueryFilter(query, query.dataSourceTable(tableNum(TaxTrans_W)), fieldStr(TaxTrans_W, VatDueDate_W));
            vatDateQueryFilter.status(RangeStatus::Open);
        }
        else
        {
            transDateQueryFilter = SysQuery::findOrCreateQueryFilter(query, query.dataSourceTable(tableNum(TaxTrans)), fieldStr(TaxTrans, TransDate));
            transDateQueryFilter.status(RangeStatus::Open);
            vatDateQueryFilter = query.findQueryFilter(query.dataSourceTable(tableNum(TaxTrans_W)), fieldStr(TaxTrans_W, VatDueDate_W));
            if (vatDateQueryFilter)
            {
                query.clearQueryFilters(query.dataSourceTable(tableNum(TaxTrans_W)), fieldStr(TaxTrans_W, VatDueDate_W));
            }
        }

        contract = this.parmReportContract().parmRdpContract() as TaxListContract;
        contract.parmDisplaySalesTaxCharge(!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoPL, #isoHU]));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        SrsReportRunController  controller = new TaxListController();
        controller.parmReportName(ssrsReportStr(TaxList, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>