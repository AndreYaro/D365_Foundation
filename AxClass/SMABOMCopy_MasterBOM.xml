<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMABOMCopy_MasterBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SMABOMCopy_MasterBOM extends SMABOMCopy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
        protected boolean checkParameters()
    {
        return super() && SMATemplateBOMTable::checkExist(bomCopyRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
        protected void copy()
    {
        SMAServiceBOMTable  serviceBOM, serviceBOMnew;
        RecordInsertList    recordList = this.initRecordList();
        Map                 subBOMMap  = new Map(Types::Record,Types::Record);
        MapEnumerator       me;

        while select serviceBOM
            order by LineNum, RecId
            where serviceBOM.ServiceBOMId           == bomCopyRefId &&
                  serviceBOM.ServiceBOMParentLineId == serviceBOMParentLineIdcopy &&
                  ((serviceBOM.ServiceObjectRelationId     == relationId) ||
                   (serviceBOM.ServiceObjectRelationId     == ''))
        {
            if (serviceBOM.isActive(relationId))
            {
                this.initBuffer(serviceBOMnew,serviceBOM);
                recordList.add(serviceBOMnew);
                if (serviceBOMnew.inventTable().isProducedByDefault())
                {
                    subBOMMap.insert(serviceBOMnew,serviceBOM);
                }
                else
                    this.incProgress(serviceBOM.inventTable());
            }
        }
        recordList.insertDatabase();
        recordList = null;

        /* copy sub BOM's */
        me = subBOMMap.getEnumerator();
        while (me.moveNext())
            this.copySubBOM(me.currentKey(),me.currentValue());
    }
]]></Source>
			</Method>
			<Method>
				<Name>copySubBOM</Name>
				<Source><![CDATA[
        protected void copySubBOM(SMAServiceBOMTable _bufferNew, Common _bufferSource)
    {
        this.incProgress(_bufferNew.inventTable());
        super(_bufferNew,_bufferSource);
    }
]]></Source>
			</Method>
			<Method>
				<Name>getProgressCount</Name>
				<Source><![CDATA[
        protected container getProgressCount()
    {
        SMAServiceBOMTable  serviceBOMTable;
        container       c;

        select count(RecId) from serviceBOMTable
            index hint ServiceBOMOrigIdx
            where serviceBOMTable.ServiceBOMId           == serviceBOMIdnew &&
                  serviceBOMTable.ServiceBOMParentLineId == ''              &&
                  serviceBOMTable.OrigLine               == NoYes::Yes      &&
                  serviceBOMTable.ItemType               == ItemType::Item;

        c += serviceBOMTable.RecId;

        select count(RecId) from serviceBOMTable
            index hint ServiceBOMOrigIdx
            where serviceBOMTable.ServiceBOMId           == serviceBOMIdnew &&
                  serviceBOMTable.ServiceBOMParentLineId == ''              &&
                  serviceBOMTable.OrigLine               == NoYes::Yes      &&
                  serviceBOMTable.ItemType               != ItemType::Item;

        c += serviceBOMTable.RecId;
        return c;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initBufferFromCopySource</Name>
				<Source><![CDATA[
        protected void initBufferFromCopySource(SMAServiceBOMTable _buffer, Common _source)
    {
        SMAServiceBOMTable source = _source as SMAServiceBOMTable;
        _buffer.initFromTemplateBOM(source);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>