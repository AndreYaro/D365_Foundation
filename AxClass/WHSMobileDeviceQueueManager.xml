<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceQueueManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileDeviceQueueManager</c> class is used to run batch job for processing mobile device events.
/// </summary>
internal final class WHSMobileDeviceQueueManager extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.isInBatch())
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
            {
                this.createTasks();
            }
        }
        else
        {
            this.executeTask();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    private void createTasks()
    {
        this.expireLeasedMessages();

        // add parallel processing runtime tasks to batch header
        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

        if (batchHeader)
        {
            var queueTask = WHSMobileDeviceQueueTask::newTask();

            if (queueTask.parmMessageCount() > 0)
            {
                batchHeader.addRuntimeTask(queueTask, this.parmCurrentBatch().RecId);

                batchHeader.save();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeTask</Name>
				<Source><![CDATA[
    private void executeTask()
    {
        WHSMobileDeviceQueueTask queueTask = WHSMobileDeviceQueueTask::newTask();

        if (queueTask.parmMessageCount() > 0)
        {
            queueTask.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireLeasedMessages</Name>
				<Source><![CDATA[
    private void expireLeasedMessages()
    {
        WHSMobileDeviceQueueBatchAffinity batchAffinity = emptyGuid();
        utcdatetime leaseExpiredDate = DateTimeUtil::addMinutes(DateTimeUtil::getSystemDateTime(), -10);

        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;

        ttsbegin;

        mobileDeviceQueueMessage.skipEvents(true);

        update_recordSet mobileDeviceQueueMessage
            setting BatchAffinity = batchAffinity
        where 
            mobileDeviceQueueMessage.State == WHSMobileDeviceQueueMessageState::Queued &&
            mobileDeviceQueueMessage.BatchAffinity != batchAffinity &&
            mobileDeviceQueueMessage.ModifiedDateTime < leaseExpiredDate;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@WAX:MenuItem_WHSMobileDeviceQueueManager";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSMobileDeviceQueueManager construct()
    {
        return new WHSMobileDeviceQueueManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSMobileDeviceQueueManager queueManager = WHSMobileDeviceQueueManager::construct();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(queueManager))
        {
            if (queueManager.prompt())
            {
                queueManager.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return formStr(WHSMobileDeviceQueueEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSMobileDeviceQueueManager);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>