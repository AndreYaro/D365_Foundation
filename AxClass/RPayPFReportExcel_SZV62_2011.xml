<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportExcel_SZV62_2011</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportExcel_SZV62_2011 extends RPayPFReportExcel implements IRPayReportRunClass
{
    RPayPFReportCtrl                reportData;
    IRPayPFReportCommand            totalFundCommand, seniorityCommand;

    IRPayPFReportDataIterator       fundDataIterator, seniorityIterator;

    #RPayPFReportSZV62

    #define.ReportTitle("@RUP3081")

    RPayAmount                      fundAmountIns, fundAmountSto;
    Counter                         emplNo, emplCnt;

    #define.StartRow(24)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmpl</Name>
				<Source><![CDATA[
    protected boolean checkEmpl(RHRMEmplTable   _emplTable,
                                boolean         _displayMessage = true,
                                str 20          _personCategory = '',
                                str 20          _formType       = '')
    {
        boolean ret = true;

        ret = this.checkEmplIsInsured(_emplTable, _displayMessage) && ret;

        if (ret)
        {
            ret = this.checkMainInsuredPersonCat(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPFNumber(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPersonalInfo(_emplTable, _displayMessage, false, true) && ret;
            ret = this.checkEmplDoesNotHaveSpecSen(_emplTable, _displayMessage, _personCategory) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    void fillDocument(RHRMEmplTable _emplTable = null)
    {
        RHRMEmplTable   emplTableLocal;
        container       con;

        str             prevCategory;
        int             workSheetNum;
        int             curRow;

        totalFundCommand.parmValue(connull());
        fundDataIterator = totalFundCommand.iterator();

        if (fundDataIterator.more())
        {
            if (!this.makeDocument())
            {
                return;
            }

            this.progressInit(this.caption(), SysQuery::countTotal(queryRun), #AviFormLetter);
            progress.updateInterval(0);

            while (fundDataIterator.more())
            {
                con = fundDataIterator.value();
                [#parmKeyReport] = conpeek(con, 1);
                [#parmValue]     = conpeek(con, 2);

                if (keyCategory && !keyEmplId)
                {
                    if (prevCategory != keyCategory)
                    {
                        ++workSheetNum;
                        excelDocument.insertSheet(workSheetNum, workSheetNum);
                        this.fillHeader(workSheetNum, keyCategory);
                        this.fillFundAmounts(workSheetNum, #StartRow + 1);
                        prevCategory = keyCategory;
                        curRow       = #StartRow;
                        emplCnt      = 1;
                    }
                }

                if (keyCategory && keyEmplId)
                {
                    emplTableLocal = RHRMEmplTable::find(keyEmplId);
                    progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));
                    progress.incCount();
                    curRow = this.fillLines(workSheetNum, emplTableLocal, curRow);
                    ++emplCnt;
                }

                fundDataIterator.moveNext();
            }

            if (excelDocument)
            {
                if (workSheetNum >= 1)
                {
                    excelDocument.deleteWorkSheet(workSheetNum + 1);
                }
                excelDocument.visible(true);
                excelDocument = NULL;
            }
        }
        else
        {
            info("@GLS101555");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFundAmounts</Name>
				<Source><![CDATA[
    protected void fillFundAmounts(int              _workSheetNum,
                                   int              _curRow)
    {
        excelDocument.insertValue('CJ' +  int2str(_curRow), fundAmountIns,    _workSheetNum);
        excelDocument.insertValue('CY' +  int2str(_curRow), fundAmountIns,    _workSheetNum);

        excelDocument.insertValue('DN' +  int2str(_curRow), fundAmountSto,      _workSheetNum);
        excelDocument.insertValue('EC' +  int2str(_curRow), fundAmountSto,      _workSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    protected void fillHeader(int _workSheetNum, str 20 _personCategory)
    {
        void fillCorrectPeriod()
        {
            if (corrReportYear > #ReportYear2010)
            {
                if (this.periodType() == enumnum(RPayPFReportPeriod))
                {
                    switch (corrTaxPeriod)
                    {
                        case RPayReportSocialTaxPeriod::Quarter :
                            excelDocument.insertValue('BQ17', #CheckSign, _workSheetNum);
                            break;
                        case RPayReportSocialTaxPeriod::HalfYear :
                            excelDocument.insertValue('CL17', #CheckSign, _workSheetNum);
                            break;
                        case RPayReportSocialTaxPeriod::NineMonth :
                            excelDocument.insertValue('DE17', #CheckSign, _workSheetNum);
                            break;
                        case RPayReportSocialTaxPeriod::Year :
                            excelDocument.insertValue('DP17', #CheckSign, _workSheetNum);
                            break;
                    }
                }
                else if (this.periodType() == enumnum(RPayPFReportPeriod))
                {
                    switch (corrTaxPeriodByQtr)
                    {
                        case RPayPFReportPeriod::Quarter1 :
                            excelDocument.insertValue('BQ17', #CheckSign, _workSheetNum);
                            break;
                        case RPayPFReportPeriod::Quarter2 :
                            excelDocument.insertValue('CL17', #CheckSign, _workSheetNum);
                            break;
                        case RPayPFReportPeriod::Quarter3 :
                            excelDocument.insertValue('DE17', #CheckSign, _workSheetNum);
                            break;
                        case RPayPFReportPeriod::Quarter4 :
                            excelDocument.insertValue('DP17', #CheckSign, _workSheetNum);
                            break;
                    }
                }
            }
            else
            {
                switch (corrTaxPeriod2010)
                {
                    case RPayReportPensionPeriod2010::HalfYear :
                        excelDocument.insertValue('CL17', #CheckSign, _workSheetNum);
                        break;
                    case RPayReportPensionPeriod2010::Year :
                        excelDocument.insertValue('DP17', #CheckSign, _workSheetNum);
                        break;
                }
            }
            excelDocument.insertValue('ET17', corrReportYear, _workSheetNum);
        }
        excelDocument.insertValue('AO8',    companyInfo.PFRegNum_RU,    _workSheetNum);
        excelDocument.insertValue('H9',     CompanyInfoHelper::partyINN_RU(companyInfo),  _workSheetNum);
        excelDocument.insertValue('AU9',    CompanyInfoHelper::partyKPP_RU(companyInfo),  _workSheetNum);
        excelDocument.insertValue('AU10',   companyInfo.Name,           _workSheetNum);
        excelDocument.insertValue('AU11',   _personCategory,            _workSheetNum);

        if (reportYear > #ReportYear2010)
        {
            if (this.periodType() == enumnum(RPayReportSocialTaxPeriod))
            {
                switch (taxPeriod)
                {
                    case RPayReportSocialTaxPeriod::Quarter :
                        excelDocument.insertValue('DM7', #CheckSign, _workSheetNum);
                        break;
                    case RPayReportSocialTaxPeriod::HalfYear :
                        excelDocument.insertValue('EH7', #CheckSign, _workSheetNum);
                        break;
                    case RPayReportSocialTaxPeriod::NineMonth :
                        excelDocument.insertValue('FA7', #CheckSign, _workSheetNum);
                        break;
                    case RPayReportSocialTaxPeriod::Year :
                        excelDocument.insertValue('FK7', #CheckSign, _workSheetNum);
                        break;
                }
            }
            else if (this.periodType() == enumnum(RPayPFReportPeriod))
            {
                switch (taxPeriodByQtr)
                {
                    case RPayPFReportPeriod::Quarter1 :
                        excelDocument.insertValue('DM7',  #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter2 :
                        excelDocument.insertValue('EH7', #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter3 :
                        excelDocument.insertValue('FA7', #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter4 :
                        excelDocument.insertValue('FK7',  #CheckSign, _workSheetNum);
                        break;
                }
            }
            excelDocument.insertValue('DC8', reportYear, _workSheetNum);
        }
        else
        {
            if (taxPeriod2010 == RPayReportPensionPeriod2010::HalfYear)
            {
                excelDocument.insertValue('DY9', #CheckSign, _workSheetNum);
            }
            else
            {
                excelDocument.insertValue('EJ9', #CheckSign, _workSheetNum);
            }
        }

        excelDocument.insertValue('EB10', emplNo, _workSheetNum);

        switch (reportType)
        {
            case RpayPensionFundExportKindOfCorrection::Cancellative:
                excelDocument.insertValue('B19', #CheckSign, _workSheetNum);
                fillCorrectPeriod();
                break;

            case RpayPensionFundExportKindOfCorrection::None:
                excelDocument.insertValue('T14', #CheckSign, _workSheetNum);
                break;

            case RpayPensionFundExportKindOfCorrection::Correctional:
               excelDocument.insertValue('B16', #CheckSign, _workSheetNum);
                fillCorrectPeriod();
                break;
        }

        excelDocument.insertValue('B27',    OfficialsTable_RU::findDirector().Title,    _workSheetNum);
        excelDocument.insertValue('CL27',   OfficialsTable_RU::nameDirector(),          _workSheetNum);

        excelDocument.insertValue('I29',    DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), _workSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLines</Name>
				<Source><![CDATA[
    protected int fillLines(int _workSheetNum, RHRMEmplTable _emplTable, int _startRow)
    {
        int                     curRow = _startRow;

        if (curRow > #StartRow)
        {
            excelDocument.copyAndInsertRange('B' + int2str(curRow - 1) + ':' + 'FW' + int2str(curRow - 1), _workSheetNum);
        }

        excelDocument.insertValue('B'  + int2str(curRow), emplCnt,                       _workSheetNum);
        excelDocument.insertValue('I'  + int2str(curRow), _emplTable.Name(),             _workSheetNum);
        excelDocument.insertValue('AR' + int2str(curRow), _emplTable.payPFRINN(),        _workSheetNum);
        excelDocument.insertValue('BN' + int2str(curRow), strupr(LogisticsPostalAddress::findByLocation(_emplTable.personTable().PensionFundLocation).Address), _workSheetNum);

        this.fillFundAmounts(_workSheetNum, curRow);

        curRow = this.fillSeniorityPeriods(_workSheetNum, curRow);
        ++curRow;

        return curRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSeniorityPeriods</Name>
				<Source><![CDATA[
    protected int fillSeniorityPeriods(int          _workSheetNum,
                                       int          _curRow)
    {
        container senPeriodsCon;

        StartDate                       seniorityDateFrom;
        EndDate                         seniorityDateTo;
        RPayInsuranceSeniorityTypeId    insuranceTypeId;
        int                             senMonths, senDays;

        int                             curRow = _curRow;
        boolean   addRow;

        seniorityCommand.parmValue([#SeniorityKey]);
        seniorityIterator = seniorityCommand.iterator();

        while (seniorityIterator.more())
        {
            senPeriodsCon = seniorityIterator.value();
            [#seniorityValue] = senPeriodsCon;

            if (addRow)
            {
                curRow++;
                excelDocument.copyAndInsertRange('B' + int2str(curRow - 1) + ':' + 'FW' + int2str(curRow - 1), _workSheetNum);

                excelDocument.insertValue('B'  + int2str(curRow), '', _workSheetNum);
                excelDocument.insertValue('I'  + int2str(curRow), '', _workSheetNum);
                excelDocument.insertValue('AR' + int2str(curRow), '', _workSheetNum);
                excelDocument.insertValue('BN' + int2str(curRow), '', _workSheetNum);
                excelDocument.insertValue('CJ' + int2str(curRow), '', _workSheetNum);
                excelDocument.insertValue('CY' + int2str(curRow), '', _workSheetNum);
                excelDocument.insertValue('DN' + int2str(curRow), '', _workSheetNum);
                excelDocument.insertValue('EC' + int2str(curRow), '', _workSheetNum);
            }

            excelDocument.insertValue('ER' +  int2str(curRow), date2str(seniorityDateFrom, 123, 2, 2, 2, 2, 4, DateFlags::None), _workSheetNum);
            excelDocument.insertValue('FH' +  int2str(curRow), date2str(seniorityDateTo, 123, 2, 2, 2, 2, 4, DateFlags::None),   _workSheetNum);

            seniorityIterator.moveNext();
            addRow = true;
        }

        return curRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeesData</Name>
				<Source><![CDATA[
    protected void initEmployeesData()
    {
        parmContract = new RPayPFReportParmContract();
        parmContract.reportStartPeriod(reportStartPeriod);
        parmContract.reportEndPeriod(reportEndPeriod);
        parmContract.corrReportStartPeriod(corrReportStartPeriod);
        parmContract.corrReportEndPeriod(corrReportEndPeriod);
        parmContract.seniorityEndPeriod(seniorityEndPeriod);
        parmContract.seniorityStartPeriod(seniorityStartPeriod);
        parmContract.queryRun(queryRun.pack());
        parmContract.correctionType(reportType);

        reportData = RPayPFReportCtrl::construct(this);
        reportData.prepareData();
        totalFundCommand = new RPayReportCommandSZV6(reportData.reportData(), [#FundAmountDS]);
        seniorityCommand = new RPayReportCommandSZV6(reportData.reportData(), [#SeniorityDS]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected void initParameters()
    {
        super();

        if (! payTaxParameters.PensionFundinvalidDeduction)
        {
            info(strFmt("@SYS76498", "@RUP854", "@RUP1178"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>minYearEnabled</Name>
				<Source><![CDATA[
    protected Yr minYearEnabled()
    {
        return #ReportYear2010;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    public container parmContract()
    {
        return parmContract.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodType</Name>
				<Source><![CDATA[
    protected enumId periodType()
    {
        return enumnum(RPayPFReportPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    public RPayPFReportCtrl reportData()
    {
        return new RPayPFReportCtrlSZV62();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (! this.checkCompanyInfo() || ! this.checkTaxParameters())
            return;

        this.initEmployeesData();
        this.fillDocument();

        this.displayResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conpeek(_packedClass, 1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }

                this.setQueryEmplRange();
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>