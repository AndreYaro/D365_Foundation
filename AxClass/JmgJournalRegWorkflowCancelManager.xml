<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgJournalRegWorkflowCancelManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgJournalRegistrationWFCancelManager</c> class is used to cancel a journal registration
///    workflow.
/// </summary>
/// <remarks>
///    This class inherits from the <c>WorkflowCancelManager</c> class and handles the update of the
///    journal registration record when the cancel button has been clicked. The journal registration is
///    set into a pending cancellation status and this is presented to the user immediately. The default
///    dialog and cancel functionality from the <c>WorkflowCancelManager</c> class is reused.
/// </remarks>
public class JmgJournalRegWorkflowCancelManager extends WorkflowCancelManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the workflow status on the journal registration that is canceled.
    /// </summary>
    /// <param name="_args">
    ///    An argument that references the record that should be canceled.
    /// </param>
    /// <remarks>
    ///    This method rereads the record from the data source because this is changed when submitting a
    ///    workflow and these changes may not be refreshed in the client.
    ///    The workflow status is set to None and the record is updated and refreshed in the client.
    /// </remarks>
    public void updateDocument(Args _args)
    {
        JmgStampJournalTrans    jmgStampJournalTrans;

        if (_args.record() is JmgStampJournalTrans)
        {
            jmgStampJournalTrans = _args.record() as JmgStampJournalTrans;
            jmgStampJournalTrans.reread();
        }
        else if (_args.record() is WorkflowTrackingStatusTable)
        {
            WorkflowTrackingStatusTable workflowTrackingStatusTable = _args.record() as WorkflowTrackingStatusTable;
            workflowTrackingStatusTable.reread();

            if (workflowTrackingStatusTable.ContextTableId == tableNum(JmgStampJournalTrans))
            {
                jmgStampJournalTrans = JmgStampJournalTrans::findRecId(workflowTrackingStatusTable.ContextRecId);
            }
        }

        if (jmgStampJournalTrans)
        {
            ttsbegin;
            jmgStampJournalTrans.selectForUpdate(true);
            jmgStampJournalTrans.WorkflowStatus = JmgJournalRegWorkflowStatus::None;
            jmgStampJournalTrans.update();
            ttscommit;

            FormDataSource jmgStampJournalTrans_DS = FormDataUtil::getFormDataSource(jmgStampJournalTrans);
            if (jmgStampJournalTrans_DS)
            {
                jmgStampJournalTrans_DS.research(true);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JmgJournalRegWorkflowCancelManager construct()
    {
        return new JmgJournalRegWorkflowCancelManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgJournalRegWorkflowCancelManager workflowCancelManager = JmgJournalRegWorkflowCancelManager::construct();

        workflowCancelManager.run(_args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>