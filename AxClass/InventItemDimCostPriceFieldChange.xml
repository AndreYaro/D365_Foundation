<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemDimCostPriceFieldChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventItemDimCostPriceFieldChange
{
    InventTable inventTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkItemDimCostPriceChange</Name>
				<Source><![CDATA[
        public boolean checkItemDimCostPriceChange()
    {
        InventDimCombination    inventDimCombination;
        InventItemPrice         inventItemPrice;
        InventSite              inventSite;
        Price                   pcsPrice;
        boolean                 first                       = true;

        boolean differentItemPricesExist(InventDimId _inventDimId)
        {
            inventItemPrice = InventItemPrice::findCurrent(inventTable.ItemId, CostingVersionPriceType::Cost, _inventDimId);
            if (!inventItemPrice)
            {
                return false;   // No price record
            }

            if (first)
            {
                pcsPrice = inventItemPrice.pcsPrice();
                first    = false;
            }

            return pcsPrice != inventItemPrice.pcsPrice();
        }

        if (! inventTable.ItemDimCostPrice && inventTable.orig().ItemDimCostPrice &&
            inventTable.inventItemType().mustInventBeControlled())
        {
            while select SiteId
                from inventSite
            {
                first = true;
                while select InventDimId
                    from inventDimCombination
                    where inventDimCombination.ItemId == inventTable.ItemId
                {
                    InventDim siteInventDim = InventItemPrice::addSiteToInventDim(inventDimCombination.InventDimId, inventSite.SiteId);
                    if (siteInventDim && differentItemPricesExist(siteInventDim.InventDimId))
                    {
                        return checkFailed("@SYS104793");
                    }
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrices</Name>
				<Source><![CDATA[
        public void createPrices()
    {
        ttsbegin;
        // 'Use dimension comnbination' is activated - create prices per site/dimensions
        if (inventTable.ItemDimCostPrice && !inventTable.orig().ItemDimCostPrice)
        {
            this.createPricesPerSiteAndItemDimension();
        }
        // 'Use dimensions combinations' is de-activated
        else if (!inventTable.ItemDimCostPrice && inventTable.orig().ItemDimCostPrice)
        {
             this.createPricesPerSite();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPricesPerSite</Name>
				<Source><![CDATA[
        protected void createPricesPerSite()
    {
        InventSite              inventSite;
        InventDimCombination    inventDimCombination;

        while select SiteId from inventSite
        {
            while select InventDimId
                from inventDimCombination
                where inventDimCombination.ItemId == inventTable.ItemId
            {
                InventItemPrice inventItemPrice = this.findSiteSpecificPrice(inventDimCombination.InventDimId, inventSite.SiteId);

                if (inventItemPrice)
                {
                    this.insertSiteSpecificInventItemPrice(InventDim::inventDimIdBlank(), inventSite.SiteId, inventItemPrice);
                    break; //loop until a price record is found for any of the dimension combinations
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPricesPerSiteAndItemDimension</Name>
				<Source><![CDATA[
        protected void createPricesPerSiteAndItemDimension()
    {
        InventSite              inventSite;
        InventDimCombination    inventDimCombination;

        while select SiteId
            from inventSite
        {
            InventItemPrice inventItemPrice = this.findSiteSpecificPrice(InventDim::inventDimIdBlank(), inventSite.SiteId);
            if (inventItemPrice)
            {
                while select InventDimId from inventDimCombination
                    where inventDimCombination.ItemId == inventTable.ItemId
                {
                    this.insertSiteSpecificInventItemPrice(inventDimCombination.InventDimId, inventSite.SiteId, inventItemPrice);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSiteSpecificPrice</Name>
				<Source><![CDATA[
        protected InventItemPrice findSiteSpecificPrice(InventDimId _inventDimId, InventSiteId _siteId)
    {
        InventItemPrice inventItemPrice;

        inventItemPrice.clear();

        InventDim inventDim = InventItemPrice::addSiteToInventDim(_inventDimId, _siteId);
        if (inventDim)
        {
            inventItemPrice = InventItemPrice::findCurrent(inventTable.ItemId,
                                                           CostingVersionPriceType::Cost,
                                                           inventDim.InventDimId);
            // Create prices per site/dimensions based on the site specific price
        }
        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSiteSpecificInventItemPrice</Name>
				<Source><![CDATA[
        protected void insertSiteSpecificInventItemPrice(
        InventDimId     _inventDimId,
        InventSiteId    _siteId,
        InventItemPrice _inventItemPrice
        )
    {
        _inventItemPrice.InventDimId = InventItemPrice::addSiteToInventDim(_inventDimId, _siteId, true).InventDimId;

        // Pass in the recid of the price from which the costGroupRollup records should be copied
        _inventItemPrice.insert(_inventItemPrice.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
        public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        if (!prmisDefault(_inventTable))
        {
            inventTable = _inventTable;
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventItemDimCostPriceFieldChange construct()
    {
        return new InventItemDimCostPriceFieldChange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTable</Name>
				<Source><![CDATA[
        public static InventItemDimCostPriceFieldChange newInventTable(InventTable _inventTable)
    {
        InventItemDimCostPriceFieldChange inventItemDimCostPriceFieldChange = InventItemDimCostPriceFieldChange::construct();
        inventItemDimCostPriceFieldChange.parmInventTable(_inventTable);
        return inventItemDimCostPriceFieldChange;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
