<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSIEExportFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// <c>LedgerSIEExportFile</c> export SIE files.
/// </summary>
class LedgerSIEExportFile extends RunBaseBatch implements BatchRetryable
{
    ERFormatMappingId erBinding;
    date reportingDate;
    BudgetModelId budgetModelId;
    private List postingLayer;

    DialogField dialogErBinding;
    DialogField dialogReportingDate;
    DialogField dialogBudgetModelId;
    private DialogField dialogPostingLayer;

    private LedgerPostingLayerMultiSelectLookup postingLayerLookup;

    ERIModelDefinitionParameters  modelDefinitionParameters;
    ERIFormatMappingRunContract formatRunContract;

    boolean erDialogClosedOk;

    const ModelName ERModelName = 'Ledger accounting reports';
    const str ERDataSourceModelName = 'model';
    const str ERDataSourceParameterHelper = 'ParametersHelper';
    const str ERDataSoureXApplication = 'xApplication';
    const str ERDataSoureXSession = 'xSession';

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        reportingDate,
        budgetModelId,
        erBinding
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunBase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog dialog = super();

        dialog.caption("@SYS95524");

        dialog.addGroup("@AccountsReceivable:ElectronicReporting");
        dialogReportingDate = dialog.addFieldValue(extendedTypeStr(TransDate), reportingDate, "@SYS23896");
        dialogBudgetModelId = dialog.addFieldValue(extendedTypeStr(BudgetModelId), budgetModelId);
        dialogErBinding = dialog.addFieldValue(extendedTypeStr(ERFormatMappingId), erBinding);
        dialogErBinding.control().registerOverrideMethod(methodStr(FormReferenceControl, lookupReference),
            methodStr(LedgerSIEExportFile, erBinding_lookup),
            this);
        dialogErBinding.control().mandatory(true);

        dialogPostingLayer = dialog.addField(extendedTypeStr(LedgerPostingLayerMultiSelection), "@SYS10925", "@SYS1487");
        dialogPostingLayer.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
            methodStr(LedgerSIEExportFile, postingLayerLookup),
            this);
        dialogPostingLayer.control().mandatory(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>erBinding_lookup</Name>
				<Source><![CDATA[
    private Common erBinding_lookup(FormReferenceControl _formControl)
    {
        return ERFormatMappingTable::lookup(_formControl, ERModelName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingLayerLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates look up for posting layers.
    /// </summary>
    /// <param name = "_callerControl">The posting layer control.</param>
    private void postingLayerLookup(FormStringControl _callerControl)
    {
        postingLayerLookup.lookupPostingLayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runElectonicReporting</Name>
				<Source><![CDATA[
    private void runElectonicReporting()
    {
        var paramsActions = this.createParamActions(true);
        paramsActions.applyToAndHide(modelDefinitionParameters);

        var formatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(erBinding, '', true);

        if (this.isInBatch())
        {
            formatMappingRun.withFormatMappingRunJobCaption(currentBatch.Caption);
            formatMappingRun.runBatch(currentBatch.batchJobId, modelDefinitionParameters);
        }
        else
        {
            formatMappingRun.runUnattended(modelDefinitionParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            reportingDate = dialogReportingDate.value();
            budgetModelId = dialogBudgetModelId.value();
            erBinding = dialogErBinding.value();
            postingLayer = postingLayerLookup.getPostingLayerSelection();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.runElectonicReporting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>LedgerSIEExportFile</c>.
    /// </summary>
    /// <returns>A new instance of <c>LedgerSIEExportFile</c></returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerSIEExportFile construct()
    {
        return new LedgerSIEExportFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS95524";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LedgerSIEExportFile sieExportFile = LedgerSIEExportFile::construct();
        if (sieExportFile.prompt())
        {
            sieExportFile.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean ret = super();

        return ret && erDialogClosedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,
                #CurrentList, 
                modelDefinitionParameters ? modelDefinitionParameters.selectPackableParameters().pack() : conNull(), 
                formatRunContract ? formatRunContract.pack() : conNull(),
                postingLayer ? postingLayer.pack() : conNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container packedParameters;
        container packedRunContract;
        container packedPostingLayer;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedParameters, packedRunContract, packedPostingLayer] = packedClass;

                if (packedParameters != conNull())
                {
                    modelDefinitionParameters = ERObjectsFactory::createModelDefinitionParameters();
                    modelDefinitionParameters.unpack(packedParameters);
                }

                if (packedRunContract != conNull())
                {
                    formatRunContract = ERObjectsFactory::createFormatMappingRunContract();
                    formatRunContract.unpack(packedRunContract);
                }

                if (packedPostingLayer != conNull())
                {
                    postingLayer = List::create(packedPostingLayer);
                }
                else
                {
                    postingLayer = new List(Types::Enum);
                    postingLayer.addEnd(CurrentOperationsTax::Current);
                }

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParamActions</Name>
				<Source><![CDATA[
    private ERIModelDefinitionParamsUIAction createParamActions(boolean _populateData)
    {
        var parametersHelper = LedgerSIEExportParametersHelper_SE::constructWithPostingLayer(reportingDate, budgetModelId, postingLayer);
        LedgerSIEERDataProvider_SE dataProvider = LedgerSIEERDataProvider_SE::construct(parametersHelper);
        xApplication xApplication = new xApplication();
        xSession xSession = new xSession();

        if (_populateData)
        {
            dataProvider.populateData();
        }

        var actions =
            new ERModelDefinitionParamsUIActionComposite()
            .add(new ERModelDefinitionObjectParameterAction(ERDataSourceModelName, ERDataSourceParameterHelper, parametersHelper, true))
            .add(new ERModelDefinitionObjectParameterAction(ERDataSourceModelName, ERDataSoureXApplication, xApplication, true))
            .add(new ERModelDefinitionObjectParameterAction(ERDataSourceModelName, ERDataSoureXSession, xSession, true))
            .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(dataProvider.getLedgerSIEFinDimValueTmp_SE(), true))
            .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(dataProvider.getLedgerTrialBalanceTmp(), true))
            .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(dataProvider.getLedgerSIEPeriodBudgetTmp_SE(), true))
            .add(new ERModelDefinitionDatabaseContext().addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext()));

        return actions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogClosedWithOk</Name>
				<Source><![CDATA[
    public void dialogClosedWithOk(Object _dialog)
    {
        super(_dialog);

        var paramsActions = this.createParamActions(false);
        var formatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(erBinding, '', true)
            .withParameter(paramsActions);

        var formatRunController = formatMappingRun.getController();
        erDialogClosedOk = formatRunController.prompt();

        if (erDialogClosedOk)
        {
            formatRunContract = formatRunController.getDataContractObject() as ERIFormatMappingRunContract;
            modelDefinitionParameters = formatRunContract.parmModelDefinitionParameters();
        }
        else if (this.batchInfo())
        {
            this.batchInfo().parmBatchExecute(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase dialog)
    {
        super(dialog);

        postingLayerLookup = LedgerPostingLayerMultiSelectLookup::construct(dialogPostingLayer.control());
        postingLayerLookup.setValueFromList(postingLayer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingLayers</Name>
				<Source><![CDATA[
    private boolean checkPostingLayers()
    {
        if(postingLayer.empty())
        {
            return checkFailed("@GeneralLedger:TrialBalancePostingLayerRequired");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns whether the dialog can close or not.
    /// </summary>
    /// <param name = "calledFrom"></param>
    /// <returns>true if the dialog can be closed; otherwise, false.</returns>
    public boolean checkCloseDialog(Object calledFrom = null)
    {
        boolean ret;
    
        ret = super(calledFrom);
        ret = ret && this.checkPostingLayers();
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>