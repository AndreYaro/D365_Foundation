<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandReserveBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>InventOnHandReserveBase</c> is a base class for inventory reservation form controller classes.
/// </summary>
public abstract class InventOnHandReserveBase
{
    InventDimCtrl_Frm_OnHand    inventDimFormSetup;
    FormRun                     onHandReserveFormRun;
    Args                        onHandReserveFormArgs;
    Common                      onHandReserveFormCallerRecord;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>abortReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aborts the reservation by closing the reservation form.
    /// </summary>
    public void abortReservation()
    {
        onHandReserveFormRun.closeCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the caller data after reservation.
    /// </summary>
    public void callerRefresh()
    {
        Object callerForm;

        if (onHandReserveFormArgs && onHandReserveFormArgs.caller() is FormRun)
        {
            callerForm = onHandReserveFormArgs.caller() as FormRun;
        }

        if (onHandReserveFormCallerRecord is SalesLine)
        {
            ttsbegin;
            SalesLine salesLine  = SalesLine::findRecId(onHandReserveFormCallerRecord.RecId, true);
            SalesPrice salesPrice = SalesLineType::construct(salesLine).interCompanyCalcSalesPrice();
            if (salesLine.SalesPrice != salesPrice)
            {
                salesLine.SalesPrice = salesPrice;
                salesLine.LineAmount = salesLine.calcLineAmount();
                salesLine.update(true);
            }
            ttscommit;

            if (callerForm && formHasMethod(callerForm, identifierStr(doRefresh)))
            {
                callerForm.doRefresh(true);
            }
        }
        else if (callerForm && formHasMethod(callerForm, identifierStr(doResearch)))
        {
            callerForm.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSameBatchReserveCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the same batch reservation check class based on the specified parameters.
    /// </summary>
    /// <param name="_movement">
    /// Inventory movement that requires reservation.
    /// </param>
    /// <param name="_inventDim">
    /// Requested inventory dimensions for the reservation.
    /// </param>
    /// <returns>
    /// A new instance of the same batch reservation check class based on the specified parameters.
    /// </returns>
    public InventISameBatchReserveCheck createSameBatchReserveCheck(InventMovement _movement, InventDim _inventDim)
    {
        InventDimParm inventDimParm;

        inventDimParm.initFromInventDim(_inventDim);

        return InventSameBatchReserveCheck::newFromDim(_movement, _inventDim, inventDimParm, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventMovSubType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the InventMovSubType that should be used when constructing InventMovements.
    /// </summary>
    /// <param name="_movement">
    /// The <c>InventMovement</c> for which the subtype should be returned. This parameter is optional.
    /// </param>
    /// <returns>
    /// InventMovSubType
    /// </returns>
    protected InventMovSubType getInventMovSubType(InventMovement _movement = this.movement())
    {
        InventMovSubType      inventMovSubType = InventMovSubType::None;

        if (_movement && _movement.buffer().TableId == tableNum(InventQuarantineOrder))
        {
            InventQuarantineOrder inventQuarantineOrder = _movement.buffer();
            inventMovSubType = inventQuarantineOrder.getInventMovSubType(InventDirection::Issue);
        }

        return inventMovSubType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory movement that requires the reservation.
    /// </summary>
    /// <returns>
    /// The inventory movement that requires the reservation.
    /// </returns>
    public abstract InventMovement movement()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference to the reservation form calling context <c>Args</c> object.
    /// </summary>
    /// <param name = "_args">The <c>Args</c> object instance.</param>
    /// <returns>The saved reference to the <c>Args</c>.</returns>
    public Args parmCallerArgs(Args _args = onHandReserveFormArgs)
    {
        if (!prmIsDefault(_args))
        {
            onHandReserveFormArgs = _args;
            this.parmCallerRecord(onHandReserveFormArgs.record());
        }
        return onHandReserveFormArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference to the reservation form object.
    /// </summary>
    /// <param name = "_formRun">
    /// The <c>FormRun</c> object for the reservation form.
    /// </param>
    /// <returns>
    /// The saved reference to the reservation form <c>FormRun</c> object.
    /// </returns>
    public FormRun parmFormRun(FormRun _formRun = onHandReserveFormRun)
    {
        if (!prmIsDefault(_formRun))
        {
            onHandReserveFormRun = _formRun;
            this.parmCallerArgs(onHandReserveFormRun.args());
        }
        return onHandReserveFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference to the caller record context.
    /// </summary>
    /// <param name = "_callerRecord">Record from the caller passed through <c>Args</c>.</param>
    /// <returns>The saved record reference.</returns>
    /// <exception cref="Exception::Error">
    /// Caller record not specified.
    /// </exception>
    public Common parmCallerRecord(Common _callerRecord = onHandReserveFormCallerRecord)
    {
        if (!prmIsDefault(_callerRecord))
        {
            onHandReserveFormCallerRecord = _callerRecord;

            if (!onHandReserveFormCallerRecord)
            {
                if (onHandReserveFormRun)
                {
                    throw error(Error::missingFormActiveBuffer(onHandReserveFormRun.name()));
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }
        return onHandReserveFormCallerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimFormSetup</Name>
				<Source><![CDATA[
    public InventDimCtrl_Frm_OnHand parmInventDimFormSetup(InventDimCtrl_Frm_OnHand _inventDimFormSetup = inventDimFormSetup)
    {
        inventDimFormSetup = _inventDimFormSetup;

        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckSameLot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the same lot batch reservation check for the attempted reservation
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimension that the reservation should be attempted from
    /// </param>
    /// <param name="_qty">
    /// The quantity to be reserved
    /// </param>
    /// <param name="_cwQty">
    /// The catch weight quantity to be reserved
    /// </param>
    /// <returns>
    /// true, if the reservation can be performed;
    /// false, otherwise
    /// </returns>
    [SysObsolete('Use method pdsCheckSameLotQuantities() instead', false, 31\01\2016)]
    public boolean pdsCheckSameLot(
        InventDim       _inventDim,
        InventQty       _qty,
        PdsCWInventQty  _cwQty = 0)
    {
        PmfQtyDataCarrier sameLotCheckQuantities = this.pdsCheckSameLotQuantities(_inventDim, _qty, _cwQty);

        return sameLotCheckQuantities != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckSameLotQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the same lot batch reservation check for the attempted reservation
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimension that the reservation should be attempted from
    /// </param>
    /// <param name="_qty">
    /// The quantity to be reserved
    /// </param>
    /// <param name="_cwQty">
    /// The catch weight quantity to be reserved
    /// </param>
    /// <returns>
    /// An instance of the <c>PmfQtyDataCarrier</c> class containing the actual quantities to reserve or <c>null</c> if the caller should not
    /// continue with reservation.
    /// </returns>
    public PmfQtyDataCarrier pdsCheckSameLotQuantities(
        InventDim       _inventDim,
        InventQty       _qty,
        PdsCWInventQty  _cwQty = 0)
    {
        InventDim                           inventDimReq;

        PmfQtyDataCarrier ret = new PmfQtyDataCarrier();
        ret.parmInventQty(_qty);
        ret.parmCwQty(_cwQty);

        InventMovement movement = this.movement();
        if (movement.pdsSameLotReservation())
        {
            inventDimReq.data(_inventDim);
            PdsSameLotError sameLotError = this.createSameBatchReserveCheck(movement, inventDimReq).run();

            if (sameLotError != PdsSameLotError::None)
            {
                PdsSameLotBatchResolution resolution = movement.pdsAskSameLotResolution(sameLotError, inventDimReq, _qty, _cwQty);

                if (resolution)
                {
                    ttsbegin;

                    resolution.resolve();

                    ttscommit;

                    if (resolution.abortManualReservation())
                    {
                        this.abortReservation();
                        ret = null;
                    }
                    else if (!resolution.continueReservation())
                    {
                        ret = null;
                    }
                    else
                    {
                        PdsSameLotBatchResolution_ChangeQty changeQtyResolution = resolution as PdsSameLotBatchResolution_ChangeQty;
                        if (changeQtyResolution)
                        {
                            ret.parmInventQty(changeQtyResolution.parmUpdQty());
                            ret.parmCwQty(changeQtyResolution.parmPdsCWUpdQty());
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
