<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesParmCleanupStoredProcedureBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>SalesParmCleanupStoredProcedureBuilder</c> creates SQL Server stored procedures for handling SalesParm* table clean-up.
/// The created stored procedures are to be used in SalesParmCleanup batch processing.
/// </summary>
class SalesParmCleanupStoredProcedureBuilder extends ApplicationSQLObjects
{
    const str spName_SalesParmCleanupEnsureTableTypesExist = 'SalesParmCleanupEnsureTableTypesExist';
    const str spName_SalesParmCleanupExistsJoins = 'SalesParmCleanupExistsJoins';
    const str spName_SalesParmCleanupNotExistsJoins = 'SalesParmCleanupNotExistsJoins';
    public const str spName_SalesParmCleanupController = 'SalesParmCleanupController';

    private str typeName_SalesParmTable_deleted = 'SalesParmTable_deleted';
    private str typeName_DeletedRecIds = 'DeletedRecIds';

    private int64 initialPartitionRecId;

    private int edtLength_DataAreaId;
    private int edtLength_ParmId;
    private int edtLength_TradeLineRefId;

    private str tableName_SalesParmTable;
    private int tableId_SalesParmTable;
    private str tableFieldName_SalesParmTable_Partition;
    private str tableFieldName_SalesParmTable_DataAreaId;
    private str tableFieldName_SalesParmTable_ParmId;
    private str tableFieldName_SalesParmTable_TableRefId;
    private str tableFieldName_SalesParmTable_RecId;
    private str tableFieldName_SalesParmTable_ParmJobStatus;
    private str tableFieldName_SalesParmTable_CreatedDateTime;
    private str tableFieldName_SalesParmTable_IsSimulatePosting;
    private str tableFieldName_SalesParmTable_CustPackingSlipJour;
    private str tableFieldName_SalesParmTable_CustInvoiceJourRecId;

    private str tableName_SalesParmUpdate;
    private str tableFieldName_SalesParmUpdate_Partition;
    private str tableFieldName_SalesParmUpdate_DataAreaId;
    private str tableFieldName_SalesParmUpdate_RecId;
    private str tableFieldName_SalesParmUpdate_ParmId;

    private str tableName_SalesParmLine;
    private int tableId_SalesParmLine;
    private str tableFieldName_SalesParmLine_Partition;
    private str tableFieldName_SalesParmLine_DataAreaId;
    private str tableFieldName_SalesParmLine_RecId;
    private str tableFieldName_SalesParmLine_ParmId;
    private str tableFieldName_SalesParmLine_TableRefId;

    private str tableName_SalesParmSubTable;
    private str tableFieldName_SalesParmSubTable_Partition;
    private str tableFieldName_SalesParmSubTable_DataAreaId;
    private str tableFieldName_SalesParmSubTable_ParmId;
    private str tableFieldName_SalesParmSubTable_TableRefId;

    private str tableName_PlInventPackageParm;
    private str tableFieldName_PlInventPackageParm_RefTableId;
    private str tableFieldName_PlInventPackageParm_RefRecId;

    private str tableName_SalesParmUpdate_IN;
    private str tableFieldName_SalesParmUpdate_IN_SalesParmUpdate;

    private str tableName_SalesParmSubLine;
    private str tableFieldName_SalesParmSubLine_LineRefRecId;

    private str tableName_SalesParmLine_IN;
    private str tableFieldName_SalesParmLine_IN_SalesParmLine;

    private str tableName_SalesParmLine_BR;
    private str tableFieldName_SalesParmLine_BR_SalesParmLine;

    private str tableName_SalesParmLineCorrLink_RU;
    private str tableFieldName_SalesParmLineCorrLink_RU_SalesParmLineRecId;

    private str tableName_PDSSalesParmLinePricingCalculation;
    private str tableFieldName_PDSSalesParmLinePricingCalculation_SalesParmLine;

    private str tableName_MCRSalesParmLine;
    private str tableFieldName_MCRSalesParmLine_SalesParmLine;

    private str tableName_MCRPackingBoxTrans;
    private str tableFieldName_MCRPackingBoxTrans_SalesParmLine;

    private str tableName_MCRPackingItem;
    private str tableFieldName_MCRPackingItemm_RefTableId;
    private str tableFieldName_MCRPackingItem_RefRecId;

    private str tableName_EXIMSalesParmLine_IN;
    private str tableFieldName_EXIMSalesParmLine_IN_SalesParmLineRecId;

    private boolean areMemoryOptimizedTablesSupported;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        // It is expected that all DDL statements should work inside transactions, so it is no need to create a new user connection.
        this.initialize(false); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>contructAndCreateStoreProcedures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate <c>SalesParmCleanupStoredProcedureBuilder</c> and execute <c>createSqlObjects</c>.
    /// </summary>
    public static void contructAndCreateStoreProcedures()
    {
        SalesParmCleanupStoredProcedureBuilder builder = new SalesParmCleanupStoredProcedureBuilder();
        builder.createSqlObjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up SQL connection and class level variables which are used to create SQL stored procedures.
    /// </summary>
    /// <param name = "_runOnSeparateUserConnection">Whether a new or the exsiting DB connection should be used.</param>
    protected void initialize(boolean _runOnSeparateUserConnection = false)
    {
        super(_runOnSeparateUserConnection);

        this.setAreMemoryOptimizedTablesSupported();

        initialPartitionRecId = this.getInitialPartitionRecId();

        DictType edt_DataAreaId = new DictType(extendedTypeNum(DataAreaId));
        edtLength_DataAreaId = edt_DataAreaId.stringLen();

        DictType edt_ParmId = new DictType(extendedTypeNum(ParmId));
        edtLength_ParmId = edt_ParmId.stringLen();

        DictType edt_TradeLineRefId = new DictType(extendedTypeNum(TradeLineRefId));
        edtLength_TradeLineRefId = edt_TradeLineRefId.stringLen();

        DictTable table_SalesParmTable = new DictTable(tableNum(SalesParmTable));
        tableName_SalesParmTable = table_SalesParmTable.name(DbBackend::Sql);
        tableId_SalesParmTable = table_SalesParmTable.id();
        tableFieldName_SalesParmTable_Partition = table_SalesParmTable.fieldObject(fieldNum(SalesParmTable, Partition)).name(DbBackend::Native);
        tableFieldName_SalesParmTable_DataAreaId = table_SalesParmTable.fieldObject(fieldNum(SalesParmTable, DataAreaId)).name(DbBackend::Native);
        tableFieldName_SalesParmTable_RecId = table_SalesParmTable.fieldObject(fieldNum(SalesParmTable, RecId)).name(DbBackend::Native);
        tableFieldName_SalesParmTable_ParmId = table_SalesParmTable.fieldObject(fieldNum(SalesParmTable, ParmId)).name(DbBackend::Native);
        tableFieldName_SalesParmTable_TableRefId = table_SalesParmTable.fieldObject(fieldNum(SalesParmTable, TableRefId)).name(DbBackend::Native);
        tableFieldName_SalesParmTable_ParmJobStatus = table_SalesParmTable.fieldObject(fieldNum(SalesParmTable, ParmJobStatus)).name(DbBackend::Native);
        tableFieldName_SalesParmTable_CreatedDateTime = table_SalesParmTable.fieldObject(fieldNum(SalesParmTable, CreatedDateTime)).name(DbBackend::Native);
        tableFieldName_SalesParmTable_IsSimulatePosting = table_SalesParmTable.fieldObject(fieldNum(SalesParmTable, IsSimulatePosting)).name(DbBackend::Native);
        tableFieldName_SalesParmTable_CustPackingSlipJour = table_SalesParmTable.fieldObject(fieldNum(SalesParmTable, CustPackingSlipJour)).name(DbBackend::Native);
        tableFieldName_SalesParmTable_CustInvoiceJourRecId = table_SalesParmTable.fieldObject(fieldNum(SalesParmTable, CustInvoiceJourRecId)).name(DbBackend::Native);

        DictTable table_SalesParmUpdate = new DictTable(tableNum(SalesParmUpdate));
        tableName_SalesParmUpdate = table_SalesParmUpdate.name(DbBackend::Sql);
        tableFieldName_SalesParmUpdate_Partition = table_SalesParmUpdate.fieldObject(fieldNum(SalesParmUpdate, Partition)).name(DbBackend::Native);
        tableFieldName_SalesParmUpdate_DataAreaId = table_SalesParmUpdate.fieldObject(fieldNum(SalesParmUpdate, DataAreaId)).name(DbBackend::Native);
        tableFieldName_SalesParmUpdate_RecId = table_SalesParmUpdate.fieldObject(fieldNum(SalesParmUpdate, RecId)).name(DbBackend::Native);
        tableFieldName_SalesParmUpdate_ParmId = table_SalesParmUpdate.fieldObject(fieldNum(SalesParmUpdate, ParmId)).name(DbBackend::Native);
        
        DictTable table_SalesParmLine = new DictTable(tableNum(SalesParmLine));
        tableName_SalesParmLine = table_SalesParmLine.name(DbBackend::Sql);
        tableId_SalesParmLine = table_SalesParmLine.id();
        tableFieldName_SalesParmLine_Partition = table_SalesParmLine.fieldObject(fieldNum(SalesParmLine, Partition)).name(DbBackend::Native);
        tableFieldName_SalesParmLine_DataAreaId = table_SalesParmLine.fieldObject(fieldNum(SalesParmLine, DataAreaId)).name(DbBackend::Native);
        tableFieldName_SalesParmLine_RecId = table_SalesParmLine.fieldObject(fieldNum(SalesParmLine, RecId)).name(DbBackend::Native);
        tableFieldName_SalesParmLine_ParmId = table_SalesParmLine.fieldObject(fieldNum(SalesParmLine, ParmId)).name(DbBackend::Native);
        tableFieldName_SalesParmLine_TableRefId = table_SalesParmLine.fieldObject(fieldNum(SalesParmLine, TableRefId)).name(DbBackend::Native);

        DictTable table_SalesParmSubTable = new DictTable(tableNum(SalesParmSubTable));
        tableName_SalesParmSubTable = table_SalesParmSubTable.name(DbBackend::Sql);
        tableFieldName_SalesParmSubTable_Partition = table_SalesParmSubTable.fieldObject(fieldNum(SalesParmSubTable, Partition)).name(DbBackend::Native);
        tableFieldName_SalesParmSubTable_DataAreaId = table_SalesParmSubTable.fieldObject(fieldNum(SalesParmSubTable, DataAreaId)).name(DbBackend::Native);
        tableFieldName_SalesParmSubTable_ParmId = table_SalesParmSubTable.fieldObject(fieldNum(SalesParmSubTable, ParmId)).name(DbBackend::Native);
        tableFieldName_SalesParmSubTable_TableRefId = table_SalesParmSubTable.fieldObject(fieldNum(SalesParmSubTable, TableRefId)).name(DbBackend::Native);

        DictTable table_PlInventPackageParm = new DictTable(tableNum(PlInventPackageParm));
        tableName_PlInventPackageParm = table_PlInventPackageParm.name(DbBackend::Sql);
        tableFieldName_PlInventPackageParm_RefTableId = table_PlInventPackageParm.fieldObject(fieldNum(PlInventPackageParm, RefTableId)).name(DbBackend::Native);
        tableFieldName_PlInventPackageParm_RefRecId = table_PlInventPackageParm.fieldObject(fieldNum(PlInventPackageParm, RefRecId)).name(DbBackend::Native);

        DictTable table_SalesParmUpdate_IN = new DictTable(tableNum(SalesParmUpdate_IN));
        tableName_SalesParmUpdate_IN = table_SalesParmUpdate_IN.name(DbBackend::Sql);
        tableFieldName_SalesParmUpdate_IN_SalesParmUpdate = table_SalesParmUpdate_IN.fieldObject(fieldNum(SalesParmUpdate_IN, SalesParmUpdate)).name(DbBackend::Native);
       
        DictTable table_SalesParmSubLine = new DictTable(tableNum(SalesParmSubLine));
        tableName_SalesParmSubLine = table_SalesParmSubLine.name(DbBackend::Sql);
        tableFieldName_SalesParmSubLine_LineRefRecId = table_SalesParmSubLine.fieldObject(fieldNum(SalesParmSubLine, LineRefRecId)).name(DbBackend::Native);
        
        DictTable table_SalesParmLine_IN = new DictTable(tableNum(SalesParmLine_IN));
        tableName_SalesParmLine_IN = table_SalesParmLine_IN.name(DbBackend::Sql);
        tableFieldName_SalesParmLine_IN_SalesParmLine = table_SalesParmLine_IN.fieldObject(fieldNum(SalesParmLine_IN, SalesParmLine)).name(DbBackend::Native);
        
        DictTable table_SalesParmLine_BR = new DictTable(tableNum(SalesParmLine_BR));
        tableName_SalesParmLine_BR = table_SalesParmLine_BR.name(DbBackend::Sql);
        tableFieldName_SalesParmLine_BR_SalesParmLine = table_SalesParmLine_BR.fieldObject(fieldNum(SalesParmLine_BR, SalesParmLine)).name(DbBackend::Native);
        
        DictTable table_SalesParmLineCorrLink_RU = new DictTable(tableNum(SalesParmLineCorrLink_RU));
        tableName_SalesParmLineCorrLink_RU = table_SalesParmLineCorrLink_RU.name(DbBackend::Sql);
        tableFieldName_SalesParmLineCorrLink_RU_SalesParmLineRecId = table_SalesParmLineCorrLink_RU.fieldObject(fieldNum(SalesParmLineCorrLink_RU, SalesParmLineRecId)).name(DbBackend::Native);

        DictTable table_PDSSalesParmLinePricingCalculation = new DictTable(tableNum(PDSSalesParmLinePricingCalculation));
        tableName_PDSSalesParmLinePricingCalculation = table_PDSSalesParmLinePricingCalculation.name(DbBackend::Sql);
        tableFieldName_PDSSalesParmLinePricingCalculation_SalesParmLine = table_PDSSalesParmLinePricingCalculation.fieldObject(fieldNum(PDSSalesParmLinePricingCalculation, SalesParmLine)).name(DbBackend::Native);
        
        DictTable table_MCRSalesParmLine = new DictTable(tableNum(MCRSalesParmLine));
        tableName_MCRSalesParmLine = table_MCRSalesParmLine.name(DbBackend::Sql);
        tableFieldName_MCRSalesParmLine_SalesParmLine = table_MCRSalesParmLine.fieldObject(fieldNum(MCRSalesParmLine, SalesParmLine)).name(DbBackend::Native);
        
        DictTable table_MCRPackingBoxTrans = new DictTable(tableNum(MCRPackingBoxTrans));
        tableName_MCRPackingBoxTrans = table_MCRPackingBoxTrans.name(DbBackend::Sql);
        tableFieldName_MCRPackingBoxTrans_SalesParmLine = table_MCRPackingBoxTrans.fieldObject(fieldNum(MCRPackingBoxTrans, SalesParmLine)).name(DbBackend::Native);
        
        DictTable table_MCRPackingItem = new DictTable(tableNum(MCRPackingItem));
        tableName_MCRPackingItem = table_MCRPackingItem.name(DbBackend::Sql);
        tableFieldName_MCRPackingItemm_RefTableId = table_MCRPackingItem.fieldObject(fieldNum(MCRPackingItem, RefTableId)).name(DbBackend::Native);
        tableFieldName_MCRPackingItem_RefRecId = table_MCRPackingItem.fieldObject(fieldNum(MCRPackingItem, RefRecId)).name(DbBackend::Native);
        
        DictTable table_EXIMSalesParmLine_IN = new DictTable(tableNum(EXIMSalesParmLine_IN));
        tableName_EXIMSalesParmLine_IN = table_EXIMSalesParmLine_IN.name(DbBackend::Sql);
        tableFieldName_EXIMSalesParmLine_IN_SalesParmLineRecId = table_EXIMSalesParmLine_IN.fieldObject(fieldNum(EXIMSalesParmLine_IN, SalesParmLineRecId)).name(DbBackend::Native);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSqlObjects</Name>
				<Source><![CDATA[
    /// <summary>
    /// The base implementation creates SQL objects within a transactional scope, which limits what SQL can support
    /// for memory optimized tables. Therefore SalesParmCleanup builder logic should run outside transactional scope
    /// to ensure drop statements can work on memory optimized table types. The drop statements are needed to
    /// update the table types, should they be changed.
    /// </summary>
    /// <returns>Value indicating whether SQL artefacts were successfully created.</returns>
    protected boolean createSqlObjects()
    {
        // Invoke local logic first as call to super() finalizes the connection
        boolean ret = this.createSalesParmStoredProcedures();

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialPartitionRecId</Name>
				<Source><![CDATA[
    private int64 getInitialPartitionRecId()
    {
        ResultSet resultSet = this.executeSqlStatementQueryWithParameters("select COALESCE((select top 1 RECID from PARTITIONS where PARTITIONKEY = 'initial'), 0)", SqlParams::create());
        int64 result = 0;

        try
        {
            if (resultSet.next())
            {
                result = resultSet.getInt64(1);
            }
        }
        finally
        {
            resultSet.close();
        }

        if(result == 0)
        {
            throw error("@SalesAndMarketing:SalesParmCleanupStoredProcedureBuilder_getInitialPartitionRecIdError");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesParmStoredProcedures</Name>
				<Source><![CDATA[
    private boolean createSalesParmStoredProcedures()
    {
        if (!this.createSP_SalesParmCleanupEnsureTableTypesExist()
            // Need to create the types defined in the above stored procedure in order to create consuming stored procedure "SalesParmCleanupExistsJoins":
            || !this.execute_SalesParmCleanupEnsureTableTypesExist()
            || !this.createSP_SalesParmCleanupExistsJoins()
            || !this.createSP_SalesParmCleanupNotExistsJoins()
            || !this.createSP_SalesParmCleanupController())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAreMemoryOptimizedTablesSupported</Name>
				<Source><![CDATA[
    private void setAreMemoryOptimizedTablesSupported()
    {
        // While memory optimized types are supported on production databases, they are not supported on at least some
        // sandbox databases. In such cases, database refresh from production to sandbox would fail as the receiving database would
        // not have e.g. an online file stream to support memory optimized types. Until that can be accommodated, disable
        // memory optimized table types.
        areMemoryOptimizedTablesSupported = false;
        return;

        ResultSet resultSet = this.executeSqlStatementQueryWithParameters("select COALESCE((select 1 from sys.database_files where type = 2), 0)", SqlParams::create());

        try
        {
            if (resultSet.next())
            {
                int result = resultSet.getInt(1);

                switch (result)
                {
                    case 0, 1:
                        areMemoryOptimizedTablesSupported = (result == 1) ? true : false;
                        break;
                    default:
                        warning("@SalesAndMarketing:SalesParmCleanupStoredProcedureBuilder_setAreMemoryOptimizedTablesSupportedWarning");
                        areMemoryOptimizedTablesSupported = false;
                        break;
                }
            }
        }
        finally
        {
            resultSet.close();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSP_SalesParmCleanupEnsureTableTypesExist</Name>
				<Source><![CDATA[
    private boolean createSP_SalesParmCleanupEnsureTableTypesExist()
    {
        this.dropProcedure(spName_SalesParmCleanupEnsureTableTypesExist);
        
        if (!this.executeSqlStatementWithParameters(this.createStatement_SalesParmCleanupEnsureTableTypesExist(), SqlParams::create()))
        {
            // Assume SP was not created and throw error
            Error(strFmt("@SalesAndMarketing:SalesParmCleanupStoredProcedureBuilder_createSPError", spName_SalesParmCleanupEnsureTableTypesExist));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStatement_SalesParmCleanupEnsureTableTypesExist</Name>
				<Source><![CDATA[
    private str createStatement_SalesParmCleanupEnsureTableTypesExist()
    {
        str createStatement =   "CREATE PROCEDURE [DBO]." + spName_SalesParmCleanupEnsureTableTypesExist + "(@forceRecreate bit = 0) AS";
        createStatement +=      " BEGIN";
        createStatement +=          " \r\n----------";
        createStatement +=          " \r\n-- Creates table types which are used in stored procedure " + spName_SalesParmCleanupExistsJoins + ".";
        createStatement +=          " \r\n-- Created table types will add option 'WITH (MEMORY_OPTIMIZED = ON)' if the current database supports it. Otherwise the types will work on tempDB, in which case the consumimg stored procedure should not be used.";
        createStatement +=          " \r\n-- This stored procedure is expected to be executed before the creation of (via class SalesParmCleanupStoredProcedureBuilder) and during exection of stored procedure " + spName_SalesParmCleanupExistsJoins + ".";
        createStatement +=          " \r\n----------\r\n";
        createStatement +=          " if (@forceRecreate = 1)";
        createStatement +=          " BEGIN";
        createStatement +=              " drop type if exists  [DBO]." + typeName_SalesParmTable_deleted;
        createStatement +=              " drop type if exists  [DBO]." + typeName_DeletedRecIds;
        createStatement +=          " END";
        createStatement +=          " if TYPE_ID('[DBO]." + typeName_SalesParmTable_deleted + "') is null";
        createStatement +=          " BEGIN";
        createStatement +=              " create type [DBO]." + typeName_SalesParmTable_deleted + " as table (";
        createStatement +=                  tableFieldName_SalesParmTable_Partition + " bigint not null,";
        createStatement +=                  tableFieldName_SalesParmTable_DataAreaId + " varchar(" + int2Str(edtLength_DataAreaId) + ") not null,";
        createStatement +=                  tableFieldName_SalesParmTable_ParmId + " varchar(" + int2Str(edtLength_ParmId) + ") not null,";
        createStatement +=                  tableFieldName_SalesParmTable_TableRefId + " varchar(" + int2Str(edtLength_TradeLineRefId) + ") not null,";
        createStatement +=                  tableFieldName_SalesParmTable_RecId + " bigint not null,";
        createStatement +=                  "INDEX delIdx (" + tableFieldName_SalesParmTable_Partition + "," + tableFieldName_SalesParmTable_DataAreaId + "," + tableFieldName_SalesParmTable_ParmId + "," + tableFieldName_SalesParmTable_TableRefId + "),";
        createStatement +=                  "INDEX recIdx (" + tableFieldName_SalesParmTable_RecId + ")";
        createStatement +=              ")";
        if (areMemoryOptimizedTablesSupported)
        {
            createStatement +=          " WITH (MEMORY_OPTIMIZED = ON)";
        }
        createStatement +=          " END";
        createStatement +=          " if TYPE_ID('[DBO]." + typeName_DeletedRecIds + "') is null";
        createStatement +=          " BEGIN";
        createStatement +=              " create type [DBO]." + typeName_DeletedRecIds + " as table (";
        createStatement +=                  "RecId bigint not null,";
        createStatement +=                  "INDEX delIdx (" + tableFieldName_SalesParmUpdate_RecId + ")";
        createStatement +=              ")";
        if (areMemoryOptimizedTablesSupported)
        {
            createStatement +=          " WITH (MEMORY_OPTIMIZED = ON)";
        }
        createStatement +=          " END";
        createStatement +=      " END";

        return createStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute_SalesParmCleanupEnsureTableTypesExist</Name>
				<Source><![CDATA[
    private boolean execute_SalesParmCleanupEnsureTableTypesExist(boolean _forceCreate = true)
    {
        if (!this.executeSqlStatementWithParameters("exec [DBO]." + spName_SalesParmCleanupEnsureTableTypesExist + " @forceRecreate = " + (_forceCreate ? "1" : "0"), SqlParams::create()))
        {
            Error("@SalesAndMarketing:SalesParmCleanupStoredProcedureBuilder_execute_SalesParmCleanupEnsureTableTypesExistError");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSP_SalesParmCleanupExistsJoins</Name>
				<Source><![CDATA[
    private boolean createSP_SalesParmCleanupExistsJoins()
    {
        this.dropProcedure(spName_SalesParmCleanupExistsJoins);
        
        if (!this.executeSqlStatementWithParameters(this.createStatement_SalesParmCleanupExistsJoins(), SqlParams::create()))
        {
            // Assume SP was not created and throw error
            Error(strFmt("@SalesAndMarketing:SalesParmCleanupStoredProcedureBuilder_createSPError", spName_SalesParmCleanupExistsJoins));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStatement_SalesParmCleanupExistsJoins</Name>
				<Source><![CDATA[
    private str createStatement_SalesParmCleanupExistsJoins()
    {
        str createStatement =   "CREATE PROCEDURE [DBO]." + spName_SalesParmCleanupExistsJoins + "(@daysRetention int = 30, @numHeadersToDelete int = 1000, @partition bigint = " + int642Str(initialPartitionRecId) + ", @dataAreaId varchar(" + int2Str(edtLength_DataAreaId) + ") = 'dat', @cleanUpMode tinyint = 0) AS";
        createStatement +=      " BEGIN";
        createStatement +=          " \r\n----------";
        createStatement +=          " \r\n-- Will clean-up SalesParm* records older than a specified number of days, to a maximum number of header (SALESPARMTABLE) records.";
        createStatement +=          " \r\n-- No transaction is used, to minimise locking contention. If the stored procedure is terminated prematurely, another stored procedure (" + spName_SalesParmCleanupNotExistsJoins + ") can be used to clean-up orphaned records.";
        createStatement +=          " \r\n-- Uses inner joins to local variables of tables types which are populated with deleted related data. The table types used are defined in stored procedure " + spName_SalesParmCleanupEnsureTableTypesExist + ". If memory optimized tables are not supported in the current database, the table types will fall back to regular tables types in tempDB. In such cases, be mindful of deleting large volumes of data leveraging tempDB; consider whether to use slower stored procedure " + spName_SalesParmCleanupNotExistsJoins + " instead.";
        createStatement +=          " \r\n-- This stored procedure is expected to be executed from stored procedure " + spName_SalesParmCleanupController + ".";
        createStatement +=          " \r\n----------\r\n";
        createStatement +=          " declare @cutOffDateTime datetime = DATEADD(DAY, -@daysRetention, GETDATE())";
        createStatement +=          " declare @parmJobStatusExecuted int = " + int2Str(enum2Int(ParmJobStatus::Executed));
        createStatement +=          " declare @parmJobStatusWaiting int = " + int2Str(enum2Int(ParmJobStatus::Waiting));
        createStatement +=          " declare @parmJobStatusError int = " + int2Str(enum2Int(ParmJobStatus::ContainErrors));
        createStatement +=          " DECLARE @salesParmTable_tableId int = " + int2Str(tableId_SalesParmTable);
        createStatement +=          " DECLARE @salesParmLine_tableId int = " + int2Str(tableId_SalesParmLine);
        createStatement +=          " declare @salesParmTable_deleted [DBO]." + typeName_SalesParmTable_deleted;
        createStatement +=          " declare @salesParmUpdate_deleted [DBO]." + typeName_DeletedRecIds;
        createStatement +=          " declare @salesParmLine_deleted [DBO]." + typeName_DeletedRecIds;

        if (SalesParmCleanupWithCredManNonExistsJoinConditionStoredProcedureFlight::instance().isEnabled())
        {
            createStatement += this.deleteStatementSalesParmTableExistsJoin(tableFieldName_SalesParmTable_ParmId, tableFieldName_SalesParmTable_TableRefId);
        }
        else
        {
            createStatement +=          " delete top (@numHeadersToDelete) " + tableName_SalesParmTable;
            createStatement +=              " output deleted." + tableFieldName_SalesParmTable_Partition + ", deleted." + tableFieldName_SalesParmTable_DataAreaId + ", deleted." + tableFieldName_SalesParmTable_ParmId + ", deleted." + tableFieldName_SalesParmTable_TableRefId + ", deleted." + tableFieldName_SalesParmTable_RecId;
            createStatement +=              " into @salesParmTable_deleted";
            createStatement +=              " from " + tableName_SalesParmTable;
            createStatement +=              " where " + tableFieldName_SalesParmTable_Partition + " = @partition and " + tableFieldName_SalesParmTable_DataAreaId + " = @dataAreaId" +
                                                " and (@cleanUpMode = 2 or (@cleanUpMode = 0 and " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusExecuted) or (@cleanUpMode = 1 and (" + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusError or " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusExecuted)) or (@cleanUpMode = 3 and " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusWaiting))" +
                                                " and " + tableFieldName_SalesParmTable_CreatedDateTime + " <= @cutOffDateTime" +
                                                " and (" + tableFieldName_SalesParmTable_IsSimulatePosting + " = 0 or " + tableFieldName_SalesParmTable_CustPackingSlipJour + " != 0 or " + tableFieldName_SalesParmTable_CustInvoiceJourRecId + " != 0)";
        }

        createStatement +=          " delete " + tableName_SalesParmSubTable + " from " + tableName_SalesParmSubTable + " t";
        createStatement +=              " where exists (select 1 from @salesParmTable_deleted d where d." + tableFieldName_SalesParmTable_Partition + " = t." + tableFieldName_SalesParmSubTable_Partition + " and d." + tableFieldName_SalesParmTable_DataAreaId + " = t." + tableFieldName_SalesParmSubTable_DataAreaId + " and d." + tableFieldName_SalesParmTable_ParmId + " = t." + tableFieldName_SalesParmSubTable_ParmId + " and d." + tableFieldName_SalesParmTable_TableRefId + " = t." + tableFieldName_SalesParmSubTable_TableRefId + ")";
        createStatement +=          " delete " + tableName_PlInventPackageParm + " from " + tableName_PlInventPackageParm + " t";
        createStatement +=              " where t." + tableFieldName_PlInventPackageParm_RefTableId + " = @salesParmTable_tableId and exists (select 1 from @salesParmTable_deleted d where d." + tableFieldName_SalesParmTable_RecId + " = t." + tableFieldName_PlInventPackageParm_RefRecId + ")";
        createStatement +=          " delete top (@numHeadersToDelete) " + tableName_SalesParmUpdate;
        createStatement +=              " output deleted." + tableFieldName_SalesParmUpdate_RecId;
        createStatement +=              " into @salesParmUpdate_deleted";
        createStatement +=              " from " + tableName_SalesParmUpdate + " t";
        createStatement +=              " where not exists (select 1 from " + tableName_SalesParmTable + " d where d." + tableFieldName_SalesParmTable_Partition + " = t." + tableFieldName_SalesParmUpdate_Partition + " and d." + tableFieldName_SalesParmTable_DataAreaId + " = t." + tableFieldName_SalesParmUpdate_DataAreaId + " and d." + tableFieldName_SalesParmTable_ParmId + " = t." + tableFieldName_SalesParmUpdate_ParmId + ")"; //  Need to use not-exists as SalesParmTable is on the many side of composition
        createStatement +=          " delete " + tableName_SalesParmUpdate_IN + " from " + tableName_SalesParmUpdate_IN + " t";
        createStatement +=              " where exists (select 1 from @salesParmUpdate_deleted d where d." + tableFieldName_SalesParmUpdate_RecId + " = t." + tableFieldName_SalesParmUpdate_IN_SalesParmUpdate+ ")";
        createStatement +=          " delete " + tableName_SalesParmLine;
        createStatement +=              " output deleted." + tableFieldName_SalesParmLine_RecId;
        createStatement +=              " into @salesParmLine_deleted";
        createStatement +=              " from " + tableName_SalesParmLine + " t";
        createStatement +=              " where exists (select 1 from @salesParmTable_deleted d where d." + tableFieldName_SalesParmTable_Partition + " = t." + tableFieldName_SalesParmLine_Partition + " and d." + tableFieldName_SalesParmTable_DataAreaId + " = t." + tableFieldName_SalesParmLine_DataAreaId + " and d." + tableFieldName_SalesParmTable_ParmId + " = t." + tableFieldName_SalesParmLine_ParmId + " and d." + tableFieldName_SalesParmTable_TableRefId + " = t." + tableFieldName_SalesParmLine_TableRefId + ")";
        createStatement +=          " delete " + tableName_SalesParmSubLine + " FROM " + tableName_SalesParmSubLine + " t";
        createStatement +=              " where exists (select 1 from @salesParmLine_deleted d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmSubLine_LineRefRecId + ")";
        createStatement +=          " delete " + tableName_SalesParmLine_IN + " FROM " + tableName_SalesParmLine_IN + " t";
        createStatement +=              " where exists (select 1 from @salesParmLine_deleted d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmLine_IN_SalesParmLine + ")";
        createStatement +=          " delete " + tableName_SalesParmLine_BR + " FROM " + tableName_SalesParmLine_BR + " t";
        createStatement +=              " where exists (select 1 from @salesParmLine_deleted d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmLine_BR_SalesParmLine + ")";
        createStatement +=          " delete " + tableName_SalesParmLineCorrLink_RU + " FROM " + tableName_SalesParmLineCorrLink_RU + " t";
        createStatement +=              " where exists (select 1 from @salesParmLine_deleted d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmLineCorrLink_RU_SalesParmLineRecId + ")";
        createStatement +=          " delete " + tableName_PlInventPackageParm + " from " + tableName_PlInventPackageParm + " t";
        createStatement +=              " where t." + tableFieldName_PlInventPackageParm_RefTableId + " = @salesParmLine_tableId and exists (select 1 from @salesParmLine_deleted d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_PlInventPackageParm_RefRecId + ")";
        createStatement +=          " delete " + tableName_PDSSalesParmLinePricingCalculation + " FROM " + tableName_PDSSalesParmLinePricingCalculation + " t";
        createStatement +=              " where exists (select 1 from @salesParmLine_deleted d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_PDSSalesParmLinePricingCalculation_SalesParmLine + ")";
        createStatement +=          " delete " + tableName_MCRSalesParmLine + " FROM " + tableName_MCRSalesParmLine + " t";
        createStatement +=              " where exists (select 1 from @salesParmLine_deleted d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_MCRSalesParmLine_SalesParmLine + ")";
        createStatement +=          " delete " + tableName_MCRPackingBoxTrans + " FROM " + tableName_MCRPackingBoxTrans + " t";
        createStatement +=              " where exists (select 1 from @salesParmLine_deleted d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_MCRPackingBoxTrans_SalesParmLine + ")";
        createStatement +=          " delete " + tableName_MCRPackingItem + " FROM " + tableName_MCRPackingItem + " t";
        createStatement +=              " where t." + tableFieldName_MCRPackingItemm_RefTableId + " = @salesParmLine_tableId and exists (select 1 from @salesParmLine_deleted d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_MCRPackingItem_RefRecId + ")";
        createStatement +=          " delete " + tableName_EXIMSalesParmLine_IN + " FROM " + tableName_EXIMSalesParmLine_IN + " t";
        createStatement +=              " where exists (select 1 from @salesParmLine_deleted d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_EXIMSalesParmLine_IN_SalesParmLineRecId + ")";
        createStatement +=      " END";

        return createStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSP_SalesParmCleanupNotExistsJoins</Name>
				<Source><![CDATA[
    private boolean createSP_SalesParmCleanupNotExistsJoins()
    {
        this.dropProcedure(spName_SalesParmCleanupNotExistsJoins);
        
        if (!this.executeSqlStatementWithParameters(this.createStatement_SalesParmCleanupNotExistsJoins(), SqlParams::create()))
        {
            // Assume SP was not created and throw error
            Error(strFmt("@SalesAndMarketing:SalesParmCleanupStoredProcedureBuilder_createSPError", spName_SalesParmCleanupNotExistsJoins));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStatement_SalesParmCleanupNotExistsJoins</Name>
				<Source><![CDATA[
    private str createStatement_SalesParmCleanupNotExistsJoins()
    {
        str createStatement =   "CREATE PROCEDURE [DBO]." + spName_SalesParmCleanupNotExistsJoins + "(@daysRetention int = 30, @numHeadersToDelete int = 1000, @partition bigint = " + int642Str(initialPartitionRecId) + ", @dataAreaId varchar(" + int2Str(edtLength_DataAreaId) + ") = 'dat', @cleanUpMode tinyint = 0, @deleteReferenceDataOnly bit = 0) AS";
        createStatement +=      " BEGIN";
        createStatement +=          " \r\n----------";
        createStatement +=          " \r\n-- Will clean-up SalesParm* records older than a specified number of days, to a maximum number of header (SALESPARMTABLE) records.";
        createStatement +=          " \r\n-- No transaction is used, to minimise locking contention. Uses 'not exists' joins to ensure no orphaned records remain.";
        createStatement +=          " \r\n-- This stored procedure is expected to be executed from stored procedure " + spName_SalesParmCleanupController + ".";
        createStatement +=          " \r\n----------\r\n";
        createStatement +=          " declare @cutOffDateTime datetime = DATEADD(DAY, -@daysRetention, GETDATE())";
        createStatement +=          " declare @parmJobStatusExecuted int = " + int2Str(enum2Int(ParmJobStatus::Executed));
        createStatement +=          " declare @parmJobStatusWaiting int = " + int2Str(enum2Int(ParmJobStatus::Waiting));
        createStatement +=          " declare @parmJobStatusError int = " + int2Str(enum2Int(ParmJobStatus::ContainErrors));
        createStatement +=          " DECLARE @salesParmTable_tableId int = " + int2Str(tableId_SalesParmTable);
        createStatement +=          " DECLARE @salesParmLine_tableId int = " + int2Str(tableId_SalesParmLine);
        createStatement +=          " if (@deleteReferenceDataOnly = 1)";
        createStatement +=          " BEGIN";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_SalesParmSubTable + " from " + tableName_SalesParmSubTable + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmTable + " d where d." + tableFieldName_SalesParmTable_Partition + " = t." + tableFieldName_SalesParmSubTable_Partition + " and d." + tableFieldName_SalesParmTable_DataAreaId + " = t." + tableFieldName_SalesParmSubTable_DataAreaId + " and d." + tableFieldName_SalesParmTable_ParmId + " = t." + tableFieldName_SalesParmSubTable_ParmId + " and d." + tableFieldName_SalesParmTable_TableRefId + " = t." + tableFieldName_SalesParmSubTable_TableRefId + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_PlInventPackageParm + " from " + tableName_PlInventPackageParm + " t";
        createStatement +=                  " where t." + tableFieldName_PlInventPackageParm_RefTableId + " = @salesParmTable_tableId and not exists (select 1 from " + tableName_SalesParmTable + " d where d." + tableFieldName_SalesParmTable_RecId + " = t." + tableFieldName_PlInventPackageParm_RefRecId + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_SalesParmUpdate + " from " + tableName_SalesParmUpdate + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmTable + " d where d." + tableFieldName_SalesParmTable_Partition + " = t." + tableFieldName_SalesParmUpdate_Partition + " and d." + tableFieldName_SalesParmTable_DataAreaId + " = t." + tableFieldName_SalesParmUpdate_DataAreaId + " and d." + tableFieldName_SalesParmTable_ParmId + " = t." + tableFieldName_SalesParmUpdate_ParmId + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_SalesParmUpdate_IN + " from " + tableName_SalesParmUpdate_IN + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmUpdate + " d where d." + tableFieldName_SalesParmUpdate_RecId + " = t." + tableFieldName_SalesParmUpdate_IN_SalesParmUpdate + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_SalesParmLine + " from " + tableName_SalesParmLine + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmTable + " d where d." + tableFieldName_SalesParmTable_Partition + " = t." + tableFieldName_SalesParmLine_Partition + " and d." + tableFieldName_SalesParmTable_DataAreaId + " = t." + tableFieldName_SalesParmLine_DataAreaId + " and d." + tableFieldName_SalesParmTable_ParmId + " = t." + tableFieldName_SalesParmLine_ParmId + " and d." + tableFieldName_SalesParmTable_TableRefId + " = t." + tableFieldName_SalesParmLine_TableRefId + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_SalesParmSubLine + " FROM " + tableName_SalesParmSubLine + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmSubLine_LineRefRecId + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_SalesParmLine_IN + " FROM " + tableName_SalesParmLine_IN + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmLine_IN_SalesParmLine + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_SalesParmLine_BR + " FROM " + tableName_SalesParmLine_BR + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmLine_BR_SalesParmLine + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_SalesParmLineCorrLink_RU + " FROM " + tableName_SalesParmLineCorrLink_RU + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmLineCorrLink_RU_SalesParmLineRecId + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_PlInventPackageParm + " from " + tableName_PlInventPackageParm + " t";
        createStatement +=                  " where t." + tableFieldName_PlInventPackageParm_RefTableId + " = @salesParmLine_tableId and not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_PlInventPackageParm_RefRecId + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_PDSSalesParmLinePricingCalculation + " FROM " + tableName_PDSSalesParmLinePricingCalculation + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_PDSSalesParmLinePricingCalculation_SalesParmLine + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_MCRSalesParmLine + " FROM " + tableName_MCRSalesParmLine + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_MCRSalesParmLine_SalesParmLine + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_MCRPackingBoxTrans + " FROM " + tableName_MCRPackingBoxTrans + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_MCRPackingBoxTrans_SalesParmLine + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_MCRPackingItem + " FROM " + tableName_MCRPackingItem + " t";
        createStatement +=                  " where t." + tableFieldName_MCRPackingItemm_RefTableId + " = @salesParmLine_tableId and not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_MCRPackingItem_RefRecId + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_EXIMSalesParmLine_IN + " FROM " + tableName_EXIMSalesParmLine_IN + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_EXIMSalesParmLine_IN_SalesParmLineRecId + ")";
        createStatement +=          " END";
        createStatement +=          " ELSE";
        createStatement +=          " BEGIN";

        if (SalesParmCleanupWithCredManNonExistsJoinConditionStoredProcedureFlight::instance().isEnabled())
        {
            createStatement += this.deleteStatementSalesParmTableNotExistsJoin(tableFieldName_SalesParmTable_ParmId, tableFieldName_SalesParmTable_TableRefId);
        }
        else
        {
            createStatement +=              " delete top (@numHeadersToDelete) " + tableName_SalesParmTable + " from " + tableName_SalesParmTable;
            createStatement +=                  " where " + tableFieldName_SalesParmTable_Partition + " = @partition and " + tableFieldName_SalesParmTable_DataAreaId + " = @dataAreaId" +
                                                    " and (@cleanUpMode = 2 or (@cleanUpMode = 0 and " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusExecuted) or (@cleanUpMode = 1 and (" + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusError or " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusExecuted)) or (@cleanUpMode = 3 and " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusWaiting))" +
                                                    " and " + tableFieldName_SalesParmTable_CreatedDateTime + " <= @cutOffDateTime" +
                                                    " and (" + tableFieldName_SalesParmTable_IsSimulatePosting + " = 0 or " + tableFieldName_SalesParmTable_CustPackingSlipJour + " != 0 or " + tableFieldName_SalesParmTable_CustInvoiceJourRecId + " != 0)";
        }

        createStatement +=              " delete " + tableName_SalesParmSubTable + " from " + tableName_SalesParmSubTable + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmTable + " d where d." + tableFieldName_SalesParmTable_Partition + " = t." + tableFieldName_SalesParmSubTable_Partition + " and d." + tableFieldName_SalesParmTable_DataAreaId + " = t." + tableFieldName_SalesParmSubTable_DataAreaId + " and d." + tableFieldName_SalesParmTable_ParmId + " = t." + tableFieldName_SalesParmSubTable_ParmId + " and d." + tableFieldName_SalesParmTable_TableRefId + " = t." + tableFieldName_SalesParmSubTable_TableRefId + ")";
        createStatement +=              " delete " + tableName_PlInventPackageParm + " from " + tableName_PlInventPackageParm + " t";
        createStatement +=                  " where t." + tableFieldName_PlInventPackageParm_RefTableId + " = @salesParmTable_tableId and not exists (select 1 from " + tableName_SalesParmTable + " d where d." + tableFieldName_SalesParmTable_RecId + " = t." + tableFieldName_PlInventPackageParm_RefRecId + ")";
        createStatement +=              " delete top (@numHeadersToDelete) " + tableName_SalesParmUpdate + " from " + tableName_SalesParmUpdate + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmTable + " d where d." + tableFieldName_SalesParmTable_Partition + " = t." + tableFieldName_SalesParmUpdate_Partition + " and d." + tableFieldName_SalesParmTable_DataAreaId + " = t." + tableFieldName_SalesParmUpdate_DataAreaId + " and d." + tableFieldName_SalesParmTable_ParmId + " = t." + tableFieldName_SalesParmUpdate_ParmId + ")";
        createStatement +=              " delete " + tableName_SalesParmUpdate_IN + " from " + tableName_SalesParmUpdate_IN + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmUpdate + " d where d." + tableFieldName_SalesParmUpdate_RecId + " = t." + tableFieldName_SalesParmUpdate_IN_SalesParmUpdate + ")";
        createStatement +=              " delete " + tableName_SalesParmLine + " from " + tableName_SalesParmLine + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmTable + " d where d." + tableFieldName_SalesParmTable_Partition + " = t." + tableFieldName_SalesParmLine_Partition + " and d." + tableFieldName_SalesParmTable_DataAreaId + " = t." + tableFieldName_SalesParmLine_DataAreaId + " and d." + tableFieldName_SalesParmTable_ParmId + " = t." + tableFieldName_SalesParmLine_ParmId + " and d." + tableFieldName_SalesParmTable_TableRefId + " = t." + tableFieldName_SalesParmLine_TableRefId + ")";
        createStatement +=              " delete " + tableName_SalesParmSubLine + " FROM " + tableName_SalesParmSubLine + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmSubLine_LineRefRecId + ")";
        createStatement +=              " delete " + tableName_SalesParmLine_IN + " FROM " + tableName_SalesParmLine_IN + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmLine_IN_SalesParmLine + ")";
        createStatement +=              " delete " + tableName_SalesParmLine_BR + " FROM " + tableName_SalesParmLine_BR + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmLine_BR_SalesParmLine + ")";
        createStatement +=              " delete " + tableName_SalesParmLineCorrLink_RU + " FROM " + tableName_SalesParmLineCorrLink_RU + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_SalesParmLineCorrLink_RU_SalesParmLineRecId + ")";
        createStatement +=              " delete " + tableName_PlInventPackageParm + " from " + tableName_PlInventPackageParm + " t";
        createStatement +=                  " where t." + tableFieldName_PlInventPackageParm_RefTableId + " = @salesParmLine_tableId and not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_PlInventPackageParm_RefRecId + ")";
        createStatement +=              " delete " + tableName_PDSSalesParmLinePricingCalculation + " FROM " + tableName_PDSSalesParmLinePricingCalculation + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_PDSSalesParmLinePricingCalculation_SalesParmLine + ")";
        createStatement +=              " delete " + tableName_MCRSalesParmLine + " FROM " + tableName_MCRSalesParmLine + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_MCRSalesParmLine_SalesParmLine + ")";
        createStatement +=              " delete " + tableName_MCRPackingBoxTrans + " FROM " + tableName_MCRPackingBoxTrans + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_MCRPackingBoxTrans_SalesParmLine + ")";
        createStatement +=              " delete " + tableName_MCRPackingItem + " FROM " + tableName_MCRPackingItem + " t";
        createStatement +=                  " where t." + tableFieldName_MCRPackingItemm_RefTableId + " = @salesParmLine_tableId and not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_MCRPackingItem_RefRecId + ")";
        createStatement +=              " delete " + tableName_EXIMSalesParmLine_IN + " FROM " + tableName_EXIMSalesParmLine_IN + " t";
        createStatement +=                  " where not exists (select 1 from " + tableName_SalesParmLine + " d where d." + tableFieldName_SalesParmLine_RecId + " = t." + tableFieldName_EXIMSalesParmLine_IN_SalesParmLineRecId + ")";
        createStatement +=          " END";
        createStatement +=      " END";

        return createStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSP_SalesParmCleanupController</Name>
				<Source><![CDATA[
    private boolean createSP_SalesParmCleanupController()
    {
        this.dropProcedure(spName_SalesParmCleanupController);
        
        if (!this.executeSqlStatementWithParameters(this.createStatement_SalesParmCleanupController(), SqlParams::create()))
        {
            // Assume SP was not created and throw error
            Error(strFmt("@SalesAndMarketing:SalesParmCleanupStoredProcedureBuilder_createSPError", spName_SalesParmCleanupController));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStatement_SalesParmCleanupController</Name>
				<Source><![CDATA[
    private str createStatement_SalesParmCleanupController()
    {
        str createStatement =   "CREATE PROCEDURE [DBO]." + spName_SalesParmCleanupController + "(@daysRetention int = 30, @numHeadersToDelete int = 1000, @partition bigint = " + int642Str(initialPartitionRecId) + ", @dataAreaId varchar(" + int2Str(edtLength_DataAreaId) + ") = 'dat', @cleanUpMode tinyint = 0, @forceNotExistsJoins bit = 0, @deleteReferenceDataOnly bit = 0) AS";
        createStatement +=      " BEGIN";
        createStatement +=          " \r\n----------";
        createStatement +=          " \r\n-- Will clean-up SalesParm* records older than a specified number of days, to a maximum number of header (SALESPARMTABLE) records.";
        createStatement +=          " \r\n-- No transaction is used, to minimise locking contention. This is the entry point for SalesParm cleanup.";
        createStatement +=          " \r\n-- By default, stored procedure " + spName_SalesParmCleanupExistsJoins + " is used. Setting parameter @forceNotExistsJoins = 1 will cause stored procedure " +  spName_SalesParmCleanupNotExistsJoins + " to be used, which is slower but catches orphaned records.";
        createStatement +=          " \r\n----------\r\n";
        if (areMemoryOptimizedTablesSupported)
        {
            createStatement +=      " if (@forceNotExistsJoins = 0 and @deleteReferenceDataOnly = 0)"; // By default, always use memory optimized tables when supported
        }
        else
        {
            createStatement +=      " if (@forceNotExistsJoins = 0 and @deleteReferenceDataOnly = 0 and @numHeadersToDelete <= 100000)"; // When memory optimized tables are not supported, consider the impact on tempDB for large deletes. Support inserting up to 100K header records into tempDB table (lines may be more).
        }
        createStatement +=          " BEGIN";
        createStatement +=              " exec dbo." + spName_SalesParmCleanupExistsJoins + " @daysRetention, @numHeadersToDelete, @partition, @dataAreaId, @cleanUpMode;";
        createStatement +=          " END";
        createStatement +=          " ELSE";
        createStatement +=          " BEGIN";
        createStatement +=              " exec dbo." + spName_SalesParmCleanupNotExistsJoins + " @daysRetention, @numHeadersToDelete, @partition, @dataAreaId, @cleanUpMode, @deleteReferenceDataOnly;";
        createStatement +=          " END";
        createStatement +=      " END";

        return createStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteStatementSalesParmTableExistsJoin</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal str deleteStatementSalesParmTableExistsJoin(str _parmIdFieldName, str _refIdFieldName)
    {
        str deleteStatement =          " delete top (@numHeadersToDelete) " + tableName_SalesParmTable;
        deleteStatement +=              " output deleted." + tableFieldName_SalesParmTable_Partition + ", deleted." + tableFieldName_SalesParmTable_DataAreaId + ", deleted." + _parmIdFieldName + ", deleted." + _refIdFieldName + ", deleted." + tableFieldName_SalesParmTable_RecId;
        deleteStatement +=              " into @salesParmTable_deleted";
        deleteStatement +=              " from " + tableName_SalesParmTable;
        deleteStatement +=              " where " + tableFieldName_SalesParmTable_Partition + " = @partition and " + tableFieldName_SalesParmTable_DataAreaId + " = @dataAreaId" +
                                            " and (@cleanUpMode = 2 or (@cleanUpMode = 0 and " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusExecuted) or (@cleanUpMode = 1 and (" + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusError or " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusExecuted)) or (@cleanUpMode = 3 and " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusWaiting))" +
                                            " and " + tableFieldName_SalesParmTable_CreatedDateTime + " <= @cutOffDateTime" +
                                            " and (" + tableFieldName_SalesParmTable_IsSimulatePosting + " = 0 or " + tableFieldName_SalesParmTable_CustPackingSlipJour + " != 0 or " + tableFieldName_SalesParmTable_CustInvoiceJourRecId + " != 0)";

        return deleteStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteStatementSalesParmTableNotExistsJoin</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal str deleteStatementSalesParmTableNotExistsJoin(str _parmIdFieldName, str _refIdFieldName)
    {
        str deleteStatement =              " delete top (@numHeadersToDelete) " + tableName_SalesParmTable + " from " + tableName_SalesParmTable;
        deleteStatement +=                  " where " + tableFieldName_SalesParmTable_Partition + " = @partition and " + tableFieldName_SalesParmTable_DataAreaId + " = @dataAreaId" +
                                                " and (@cleanUpMode = 2 or (@cleanUpMode = 0 and " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusExecuted) or (@cleanUpMode = 1 and (" + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusError or " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusExecuted)) or (@cleanUpMode = 3 and " + tableFieldName_SalesParmTable_ParmJobStatus + " = @parmJobStatusWaiting))" +
                                                " and " + tableFieldName_SalesParmTable_CreatedDateTime + " <= @cutOffDateTime" +
                                                " and (" + tableFieldName_SalesParmTable_IsSimulatePosting + " = 0 or " + tableFieldName_SalesParmTable_CustPackingSlipJour + " != 0 or " + tableFieldName_SalesParmTable_CustInvoiceJourRecId + " != 0)";

        return deleteStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>