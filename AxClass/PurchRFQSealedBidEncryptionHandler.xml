<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedBidEncryptionHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.Environment;
using Microsoft.Dynamics.ApplicationPlatform.Environment.Settings;
using Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation;
using Microsoft.Dynamics.AX.KeyVaultEncryptionUtility;
using System.Text;

[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
internal final class PurchRFQSealedBidEncryptionHandler
{
    private static PurchRFQSealedBidInstrumentationLogger logger;
    private KeyVaultEncryptionEngine encryptionEngine;
    private str encryptionKey;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromKeyVaultParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>PurchRFQSealedBidEncryptionHandler> class.
    /// </summary>
    /// <param name="_appClientId">The Application ID used for authenticating to Key Vault.</param>
    /// <param name="_valutSecretKey">The Secrets used for authenticating to Key Vault.</param>
    /// <param name="_vaultUrl">The Key Vault URL.</param>
    /// <returns>Instance of the <c>PurchRFQSealedBidEncryptionHandler</c> class.</returns>
    [Hookable(false)]
    internal static PurchRFQSealedBidEncryptionHandler newFromKeyVaultParameter(str _appClientId
                                                                               , System.Security.SecureString _valutSecretKey
                                                                               , str _vaultUrl)
    {
        PurchRFQSealedBidEncryptionHandler sealedBidEncryptionHandler = new PurchRFQSealedBidEncryptionHandler();
        sealedBidEncryptionHandler.initialize(_appClientId, _valutSecretKey, _vaultUrl);

        return sealedBidEncryptionHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEncryptionKey</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal str parmEncryptionKey(str _encryptionKey = encryptionKey)
    {
        encryptionKey = _encryptionKey;
        return encryptionKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editEncryptedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypt or decrypt table field using Key vault encryption and decryption.
    /// </summary>
    /// <param name ="_common">A table buffer.</param>
    /// <param name = "_value">The string value to be encrypted or decrypted.</param>
    /// <param name = "_fieldId">Id of the field to be encrypted or decrypted.</param>
    /// <param name = "_set">If true, sets the value.</param>
    /// <returns>The encrypted or Decrypted value.</returns>
    [Hookable(false)]
    internal final str editEncryptedField(Common _common, str value, FieldId _fieldId, boolean _set)
    {
        Global::logEncryptDecryptActivity(_common, _fieldId, _set);

        if (_set)
        {
            using (SysInstrumentationActivityContext activityContext = logger.encryptionDecryptionActivities().encrypt(_common.RecId, _common.TableId, _fieldId, _set))
            {
                _common.(_fieldId) = appl.EncryptForPurpose(this.encrypt(value), _common.encryptionPurpose(_fieldId));
            }

            return value;
        }
        else
        {
            if (conLen(_common.(_fieldId)) > 0)
            {
                if (_common.RecId > 0 && _common.orig().(_fieldId) == _common.(_fieldId))
                {
                    SysEncryptionLog::logField(_common, _fieldId, ReadWrite::read);
                }

                str decrypted = null;
                using (SysInstrumentationActivityContext activityContext = logger.encryptionDecryptionActivities().decrypt(_common.RecId, _common.TableId, _fieldId, _set))
                {
                    decrypted = this.decrypt(appl.DecryptForPurpose(_common.(_fieldId), _common.encryptionPurpose(_fieldId)));
                }

                return decrypted;
            }
            else
            {
                return "";
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editEncryptedString</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final str editEncryptedString(str value, boolean _set)
    {
        if (_set)
        {
            return this.encrypt(value);
        }
        else
        {
            return this.decrypt(value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateEncryptionKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate encryption key.
    /// </summary>
    /// <param name ="_replyTableRecId">The <c>RefRecId</c> of sealed reply.</param>
    /// <param name = "_activationDateTime">The activation date and time (UTC Date time).</param>
    /// <param name = "_expirationDateTime">The expiration date and time (UTC Date time).</param>
    /// <returns>The name of generated key.</returns>
    /// <exception>An exception is thrown when a key can not be created.</exception>
    [Hookable(false)]
    internal final str generateEncryptionKey(RefRecId _replyTableRecId, utcdatetime _activationDateTime, utcdatetime _expirationDateTime)
    {
        try
        {
            str key = null;
            using (SysInstrumentationActivityContext activityContext = logger.encryptionDecryptionActivities().generateEncryptionKey(_replyTableRecId))
            {
                Microsoft.Dynamics.AX.KeyVaultEncryptionUtility.EncryptionKeyTags keyTags = new Microsoft.Dynamics.AX.KeyVaultEncryptionUtility.EncryptionKeyTags();
                keyTags.add ('purpose', 'Used as encryption key in sealed RFQ');

                key = encryptionEngine.GenerateEncryptionKey(_activationDateTime, _expirationDateTime, keyTags);
            }

            this.parmEncryptionKey(key);
        }
        catch
        {
            PurchRFQSealedBidManager::throwSealedBidError(logger);
        }

        return this.parmEncryptionKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>encrypt</Name>
				<Source><![CDATA[
    private final str encrypt(str _plainText)
    {
        return _plainText == '' ? _plainText : encryptionEngine.Encrypt(_plainText, this.parmEncryptionKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>decrypt</Name>
				<Source><![CDATA[
    private final str decrypt(str _cipherText)
    {
        return _cipherText == '' ? _cipherText : encryptionEngine.Decrypt(_cipherText, this.parmEncryptionKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        logger = PurchRFQSealedBidInstrumentationLogger::createLogger(classStr(PurchRFQSealedBidEncryptionHandler));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the encryption handler.
    /// </summary>
    /// <param name="_appClientId">The Application ID used for authenticating to Key Vault.</param>
    /// <param name="_valutSecretKey">The Secrets used for authenticating to Key Vault.</param>
    /// <param name="_vaultUrl">The Key Vault URL.</param>
    private void initialize(str _appClientId, System.Security.SecureString _valutSecretKey, str _vaultUrl)
    {
        if (_appClientId == "" ||  System.String::IsNullOrEmpty(appl.convertToUnsecureString(_valutSecretKey)) || _vaultUrl == "")
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        encryptionEngine = new KeyVaultEncryptionEngine(_appClientId, _valutSecretKey, _vaultUrl, null, true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>