<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistRuleSaleOfProductCharge</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::Charge),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::Charge),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::Charge)
]
class AccDistRuleSaleOfProductCharge extends AccountingDistributionRule
{
    MarkupTable                 markupTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUseDiscountMainAccDimListProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a discount monetary amount specific main account dimension list provider can be used
    /// to derive main account dimension values that are required for classifying the financial
    /// consequences of a discount.
    /// </summary>
    /// <returns>
    /// true if the main account list provider can be used; otherwise, false.
    /// </returns>
    public boolean canUseDiscountMainAccDimListProvider()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the accounting rule.
    /// </summary>
    protected void initialize()
    {
        Object                          object = sourceDocumentLineItem;
        SourceDocumentLineItemICharge   iCharge;

        if (object is SourceDocumentLineItemICharge)
        {
            iCharge = object as SourceDocumentLineItemICharge;
            markupTable = iCharge.parmMarkupTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionAllocList</Name>
				<Source><![CDATA[
    public LedgerDimensionAllocationList parmLedgerDimensionAllocList()
    {
        LedgerDimensionAllocationList       returnedledgerDimensionAllocationList;
        CustInvoiceDistributionTemplate     custInvoiceDistributionTemplate;
        LedgerDimensionAllocation           ledgerDimensionAllocation;
        RefRecId                            custInvoiceLineTemplateRecId;
        LedgerDimensionAccount              ledgerDimensionAccount;
        CustInvoiceTable                    custInvoiceTable;

        custInvoiceTable = custInvoiceTable::findSourceDocumentHeader(sourceDocumentLineItem.parmSourceDocumentHeaderRecId());
        custInvoiceLineTemplateRecId = MarkupTrans::findBySourceDocumentLine(sourceDocumentLineItem.parmSourceDocumentLine().RecId).CustInvoiceLineTemplate;

        while select LedgerDimension, Percentage from custInvoiceDistributionTemplate
           where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == custInvoiceLineTemplateRecId
        {
            if (!ledgerDimensionAllocationList)
            {
                ledgerDimensionAllocationList = LedgerDimensionAllocationList::construct();
            }

            ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(custInvoiceDistributionTemplate.LedgerDimension, custInvoiceTable.DefaultDimension);

            ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimensionAccount, custInvoiceDistributionTemplate.Percentage / 100, this.parmSide(), false);

            ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
        }

        returnedledgerDimensionAllocationList = super();

        return returnedledgerDimensionAllocationList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        LedgerPostingType markupPostingType;

        if (markupTable.CustType == MarkupType::LedgerAccount &&
            markupTable.VendType == MarkupType::LedgerAccount)
        {
            markupPostingType = markupTable.VendPosting;
        }
        else if (markupTable.CustType == MarkupType::CustVend)
        {
            markupPostingType = markupTable.VendPosting;
        }
        else
        {
            markupPostingType = markupTable.CustPosting;
        }

        return markupPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit     side = DebitCredit::Credit;

        if (this.parmAccountingdistribution().TransactionCurrencyAmount < 0)
        {
            if (side == DebitCredit::Credit)
            {
                side = DebitCredit::Debit;
            }
            else
            {
                side = DebitCredit::Credit;
            }
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>