<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashBookDP_LT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CashBookDP_LT</c> class extends the base class for providing data for <c>CashBook_LT</c>
/// SSRS reports.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CashTrans)),
    SRSReportParameterAttribute(classstr(CashBookContract))
]
public class CashBookDP_LT extends CashBookDP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyQueryFilters</Name>
				<Source><![CDATA[
    protected void applyQueryFilters(QueryRun _queryRun)
    {
        super(_queryRun);

        QueryBuildDataSource qbds = _queryRun.query().dataSourceTable(tablenum(RCashTrans));

        findOrCreateRange_W(
            qbds,
            fieldnum(RCashTrans, DocType),
            queryValue(RCashDocType::DisbursementSlip) + ',' + queryValue(RCashDocType::ReimbursementSlip) + ',' + queryValue(RCashDocType::Correction));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the customer or vendor name based on the offset account.
    /// </summary>
    /// <returns>
    /// Name of the customer or vendor.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Name getCustVendName()
    {
        Name custVendName;

        switch (cashTrans.OffsetAccountType)
        {
            case LedgerJournalACType::Cust :
                custVendName = CustTable::find(cashTrans.OffsetAccountNum()).name();
                break;

            case LedgerJournalACType::Vend :
                custVendName = VendTable::find(cashTrans.OffsetAccountNum()).name();
                break;
        }

        return custVendName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTxt</Name>
				<Source><![CDATA[
    protected TransTxt getTransTxt()
    {
        return cashTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashBookHeaderTmp</Name>
				<Source><![CDATA[
    protected CashBookHeaderTmp initializeCashBookHeaderTmp()
    {
        const int LinePart_2 = 2;
        const int LinePart_3 = 3;

        CashBookHeaderTmp cashBookHeaderLocal = super();
        TempStr tmpStr = SysLabel::labelId2String(literalstr("@GLS112058"), infolog.language());

        cashBookHeaderLocal.debitTransQtyText  = getSubString_W(tmpStr, LinePart_2);
        cashBookHeaderLocal.creditTransQtyText = getSubString_W(tmpStr, LinePart_3);

        return cashBookHeaderLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashBookLinesTmp</Name>
				<Source><![CDATA[
    protected CashBookLinesTmp initializeCashBookLinesTmp()
    {
        CashBookLinesTmp cashBookLinesLocal = super();
        cashBookLinesLocal.CustVendName = this.getCustVendName();

        return cashBookLinesLocal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>