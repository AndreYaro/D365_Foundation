<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostEmplJournalSaleAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostEmplJournalSaleAdj extends ProjPostEmplJournal
{
    ProjEmplTrans               projEmplTransLocal;
    TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSale;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustmentLedgerSalesAmount</Name>
				<Source><![CDATA[
        protected AmountCur adjustmentLedgerSalesAmount()
    {
        if (this.parmTransStatus() == ProjTransStatus::Adjusted)
        {
            return this.parmAdjustmentLedgerSalesAmount();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterSalesAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the accrued sales amount has been entered and is expected to be posted.
    /// </summary>
    /// <returns>
    /// true if the accrued sales amount is nonzero and the <c>parmEnterSalesAccrued</c> method returns
    /// true; otherwise, false.
    /// </returns>
    protected boolean checkEnterSalesAccrued()
    {
        boolean ret = false;

        if (this.parmTransStatus() == ProjTransStatus::Adjusted)
        {
            ret = (this.parmEnterSalesAccrued() && projTrans.transTurnover());
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a budget update is required.
    /// </summary>
    /// <returns>
    ///    true if a budget update is required; otherwise, false.
    /// </returns>
    public boolean checkUpdateBudget()
    {
        boolean ret;

        if (projTrans.qty() < 0 && !this.parmTransIdOrig())
        {
            ret = true;
        }
        else if (this.parmTransIdOrig())
        {
            ret = false;
        }
        else
        {
            ret = super();
        }

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjEmplTrans _projEmplTrans, TmpProjAdjustmentCreateSale _tmpProjAdjustmentCreateSale)
    {
        ProjJournalTrans    projJournalTransLocal;

        projEmplTransLocal = _projEmplTrans;
        tmpProjAdjustmentCreateSale = _tmpProjAdjustmentCreateSale;

        super(projJournalTransLocal);

        projTrans = ProjTrans::newProjTransEmplTransSaleAdj(_projEmplTrans, _tmpProjAdjustmentCreateSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjEmplTransSale       projEmplTransSale;
        
        TransDate getLedgerTransdate()
        {
            TransDate ret;

            if (ledgerVoucher)
            {
                ret = ledgerVoucher.lastTransDate();
            }

            return ret;
        }

        ProjTransStatus getTransStatus()
        {
            ProjTransStatus ret;

            ret = this.parmTransStatus();

            if (!ret)
            {
                ret = ProjTransStatus::Posted;
            }
            return ret;
        }

        //Create ProjEmplTransSale record

        projEmplTransSale.clear();
        projEmplTransSale  = ProjEmplTransSale::initTransFromAdjCreateSale(tmpProjAdjustmentCreateSale);
        projEmplTransSale.TransId = projEmplTransLocal.TransId;
        if (this.parmAdjustment() && this.parmAdjustmentDate())
        {
            projEmplTransSale.LedgerTransdate = this.parmAdjustmentDate();
        }
        else
        {
            projEmplTransSale.LedgerTransdate = getLedgerTransdate();
        }

        if (this.parmTransStatus() == ProjTransStatus::Adjusted)
        {
            projEmplTransSale.LedgerSalesPosted = NoYes::No;
            projEmplTransSale.LedgerSalesAmount = 0;
        }
        else
        {
            if (this.checkEnterSalesAccrued() && ProjFundingSource::isExternalFunding(projEmplTransSale.FundingSource))
            {
                projEmplTransSale.LedgerSalesPosted  = true;
                projEmplTransSale.LedgerSalesAmount = projTrans.transTurnoverMST();
            }
        }

        projEmplTransSale.TransStatus = getTransStatus();
        projEmplTransSale.insert();

        if (this.parmsalesUseOrig())
        {
            this.parmTransIdSales(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdSales(projEmplTransSale.TransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountMST</Name>
				<Source><![CDATA[
        protected AmountMST salesAmountMST()
    {
        AmountMST ret;

        if (this.parmTransStatus() == ProjTransStatus::Adjusted)
        {
            ret = this.parmSalesAmountMST();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>