<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingValidPeriodChecker</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The batch job to check the effective/expiration date of price adjustments, discounts and trade agreements.
/// </summary>
internal class RetailPriceChangeTrackingValidPeriodChecker extends RunBaseBatch implements BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    private static date neverDate = DateTimeUtil::date(DateTimeUtil::maxValue());
    private static date noDate = DateTimeUtil::date(DateTimeUtil::minValue());

    // The timeout for trying to acquire the lock to run the Job will be 10 minutes.
    private static int RetailPriceChangeTrackingValidPeriodCheckerJobAcquireLockTimeOutMilliseconds = 600000;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailPriceChangeTrackingValidPeriodChecker scheduler = new RetailPriceChangeTrackingValidPeriodChecker();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailPriceChangeTrackingValidPeriodChecker construct()
    {
        var batch = new RetailPriceChangeTrackingValidPeriodChecker();
        RetailPriceChangeTrackingHelper::setBatchGroup(batch);

        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        System.Exception ex;

        boolean needFullRefresh = false;
        int retryCount = 0;
        const int RetryMax = 3;

        try
        {
            // Process data for each of the tracked companies.
            RetailPriceChangeTrackingDataArea priceChangeTrackingDataArea;

            ttsbegin;

            while select crosscompany TrackedDataArea from priceChangeTrackingDataArea
            {
                changeCompany(priceChangeTrackingDataArea.TrackedDataArea)
                {
                    this.checkValidPeriodAndTrackPriceChanges();
                }
            }

            ttscommit;
        }
        catch(ex)
        {
            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(classStr(RetailPriceChangeTrackingValidPeriodChecker), methodStr(RetailPriceChangeTrackingValidPeriodChecker, checkValidPeriodAndTrackPriceChanges));
            exceptionTelemetry.addExtendedData('Retry count', int2Str(retryCount));
            exceptionTelemetry.addException(ex);
            exceptionTelemetry.log();

            if (retryCount < RetryMax)
            {
                retryCount++;
                retry;
            }
            else
            {
                // Don't swallow the exception as this is an independant batch job, but still trigger full refresh as a workaround.
                needFullRefresh = true;
                throw error("@RetailPricing:RetailPriceChangeTrackingValidPeriodCheckerJobError");
            }
        }
        finally
        {
            if (needFullRefresh)
            {
                eventSource.EventWritePriceChangeTrackingFullRefresh(
                    'valid period checker failure',
                    classStr(RetailPriceChangeTrackingValidPeriodChecker),
                    methodStr(RetailPriceChangeTrackingValidPeriodChecker, checkValidPeriodAndTrackPriceChanges),
                    '');

                RetailPriceChangeTracking::writeFullRefreshRecord();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RetailPricing:CheckValidPeriodLabel";
    }

]]></Source>
			</Method>
			<Method>
				<Name>runWithRecurrence</Name>
				<Source><![CDATA[
    public static void runWithRecurrence()
    {
        System.Exception ex;
        int retryCount = 0;
        const int RetryMax = 3;

        try
        {
            BatchHeader batchHeader = BatchHeader::construct();
            batchHeader.parmCaption("@RetailPricing:CheckValidPeriodLabel");

            // Set the recurrence data to execute daily;
            SysRecurrenceData sysRecurrenceData = SysRecurrence::defaultRecurrence();
            sysRecurrenceData = SysRecurrence::setRecurrenceStartDateTime(sysRecurrenceData, DateTimeUtil::utcNow());
            sysRecurrenceData = SysRecurrence::setRecurrenceNoEnd(sysRecurrenceData);
            sysRecurrenceData = SysRecurrence::setRecurrenceUnit(sysRecurrenceData, SysRecurrenceUnit::Day,1);

            batchHeader.parmRecurrenceData(sysRecurrenceData);
            batchHeader.addTask(RetailPriceChangeTrackingValidPeriodChecker::construct());

            batchHeader.save();
        }
        catch(Exception::UpdateConflict)
        {
            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(
                classStr(RetailPriceChangeTrackingValidPeriodChecker),
                staticMethodStr(RetailPriceChangeTrackingValidPeriodChecker, runWithRecurrence));
            exceptionTelemetry.addExtendedData('Retry count', int2Str(retryCount));
            exceptionTelemetry.addException(ex);
            exceptionTelemetry.log();

            if (retryCount < RetryMax)
            {
                retryCount++;
                retry;
            }
            else
            {
                throw error("@RetailPricing:RetailPriceChangeTrackingValidPeriodCheckerJobError");
            }
        }
        catch(Exception::DuplicateKeyException)
        {
            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(
                classStr(RetailPriceChangeTrackingValidPeriodChecker),
                staticMethodStr(RetailPriceChangeTrackingValidPeriodChecker, runWithRecurrence));
            exceptionTelemetry.addExtendedData('Retry count', int2Str(retryCount));
            exceptionTelemetry.addException(ex);
            exceptionTelemetry.log();

            if (retryCount < RetryMax)
            {
                retryCount++;
                retry;
            }
            else
            {
                throw error("@RetailPricing:RetailPriceChangeTrackingValidPeriodCheckerJobError");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopRecurrenceInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// stop the recurrence instances of this batch jobs.
    /// </summary>
    internal static void stopRecurrenceInstance()
    {
        System.Exception ex;
        int retryCount = 0;
        const int RetryMax = 3;

        try
        {
            BatchJob batchJob;
            Batch batch;
            int validPeriodCheckClassNum = classNum(RetailPriceChangeTrackingValidPeriodChecker);

            ttsbegin;

            // Stop means set the status to Hold and clear the recurrence data.
            update_recordset batchJob setting recurrenceData = conNull(), Status = BatchStatus::Hold
                where  batchJob.Status == BatchStatus::Executing
                    || batchJob.Status == BatchStatus::Waiting
                    || batchJob.Status == BatchStatus::Ready
                    || batchJob.Status == BatchStatus::Scheduled
            join batch
                where batch.BatchJobId == batchJob.RecId && batch.ClassNumber == validPeriodCheckClassNum;

            ttscommit;
        }
        catch(Exception::UpdateConflict)
        {
            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(
                classStr(RetailPriceChangeTrackingValidPeriodChecker),
                staticMethodStr(RetailPriceChangeTrackingValidPeriodChecker, stopRecurrenceInstance));
            exceptionTelemetry.addExtendedData('Retry count', int2Str(retryCount));
            exceptionTelemetry.addException(ex);
            exceptionTelemetry.log();

            if (retryCount < RetryMax)
            {
                retryCount++;
                retry;
            }
            else
            {
                throw error("@RetailPricing:RetailPriceChangeTrackingValidPeriodCheckerJobError");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecurrenceInstanceScheduled</Name>
				<Source><![CDATA[
    internal static boolean isRecurrenceInstanceScheduled()
    {
        BatchJob batchJob;
        Batch batch;
        int validPeriodCheckClassNum = classNum(RetailPriceChangeTrackingValidPeriodChecker);

        // Stop means set the status to Hold and clear the recurrence data.
        select batchJob
        where  batchJob.Status == BatchStatus::Executing
            || batchJob.Status == BatchStatus::Waiting
            || batchJob.Status == BatchStatus::Ready
            || batchJob.Status == BatchStatus::Scheduled
        join batch
            where batch.BatchJobId == batchJob.RecId && batch.ClassNumber == validPeriodCheckClassNum;

        return batchJob.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailPriceChangeTrackingValidPeriodChecker</c> class
    ///  can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailPriceChangeTrackingValidPeriodChecker</c> can
    ///  be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the job must be run in batch.
    /// </summary>
    /// <returns>Always return true.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidPeriodAndTrackPriceChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the validation period for price adjustments, simple discounts and trade agreements, which is enabled and has an effective date or expiration date.
    /// </summary>
    public void checkValidPeriodAndTrackPriceChanges()
    {
        utcdatetime updatedDatetime = DateTimeUtil::utcNow();
        guid tag = newGuid();

        // Check trade agreement first as it may have full refresh, and then we don't need to check discounts.
        boolean isFullRefreshTriggered = this.checkTradeAgreementValidPeriodAndTrackPriceChange(updatedDatetime, tag);

        if (!isFullRefreshTriggered)
        {
            this.checkDiscountValidPeriodAndTrackPriceChange(updatedDatetime, tag);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscountValidPeriodAndTrackPriceChange</Name>
				<Source><![CDATA[
    private void checkDiscountValidPeriodAndTrackPriceChange(utcdatetime _updateDatetime, guid _tag)
    {
        RetailPeriodicDiscount retailPeriodicDiscount;
        RetailDiscountPriceGroup retailDiscountPriceGroup;
        RetailChannelPriceGroup retailChannelPriceGroup;
        RetailChannelTable retailChannelTable;
        RetailCatalogPriceGroup retailCatalogPriceGroup;

        date minDateWindow = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - 1;
        date maxDateWindow = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + 1;

        // Loop through all price adjustments or simple discounts associated with channel price groups.
        while select retailPeriodicDiscount
            join retailDiscountPriceGroup
            join retailChannelPriceGroup
            join retailChannelTable
            where retailPeriodicDiscount.Status == RetailDisabledEnabled::Enabled
            && retailPeriodicDiscount.IsDiscountCodeRequired == NoYes::No
            && (retailPeriodicDiscount.PeriodicDiscountType == RetailDiscountOfferTypeBase::Promotion
                || retailPeriodicDiscount.PeriodicDiscountType == RetailDiscountOfferTypeBase::DiscountOffer
                || retailPeriodicDiscount.PeriodicDiscountType == RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit)
            && (retailPeriodicDiscount.DateValidationType == RetailDateValidationTypeBase::Standard
              && ((retailPeriodicDiscount.ValidFrom >= minDateWindow && retailPeriodicDiscount.ValidFrom <= maxDateWindow)
                  || (retailPeriodicDiscount.ValidTo >= minDateWindow && retailPeriodicDiscount.ValidTo <= maxDateWindow)))
            && retailDiscountPriceGroup.OfferId == retailPeriodicDiscount.OfferId
            && retailDiscountPriceGroup.PriceDiscGroup == retailChannelPriceGroup.PriceGroup
            && retailChannelPriceGroup.RetailChannel == retailChannelTable.RecId
        {
            RetailPeriodicDiscountChangeTrackingHelper::trackDiscountInternal(retailPeriodicDiscount, _updateDatetime, _tag);
        }

        // Loop through all price adjustments or simple discounts associated with catalog price groups.
        while select retailPeriodicDiscount
            join retailDiscountPriceGroup
            join retailCatalogPriceGroup
            where retailPeriodicDiscount.Status == RetailDisabledEnabled::Enabled
            && retailPeriodicDiscount.IsDiscountCodeRequired == NoYes::No
            && RetailPeriodicDiscountChangeTrackingHelper::isDiscountTypeSupported(retailPeriodicDiscount.PeriodicDiscountType)
            && (retailPeriodicDiscount.DateValidationType == RetailDateValidationTypeBase::Standard
              && ((retailPeriodicDiscount.ValidFrom >= minDateWindow && retailPeriodicDiscount.ValidFrom <= maxDateWindow)
                  || (retailPeriodicDiscount.ValidTo >= minDateWindow && retailPeriodicDiscount.ValidTo <= maxDateWindow)))
            && retailDiscountPriceGroup.OfferId == retailPeriodicDiscount.OfferId
            && retailDiscountPriceGroup.PriceDiscGroup == retailCatalogPriceGroup.PriceDiscGroup
        {
            RetailPeriodicDiscountChangeTrackingHelper::trackDiscountInternal(retailPeriodicDiscount, _updateDatetime, _tag);
        }

        // Loop through all price adjustments or simple discounts using advanced date period.
        while select retailPeriodicDiscount
            where retailPeriodicDiscount.Status == RetailDisabledEnabled::Enabled
            && retailPeriodicDiscount.IsDiscountCodeRequired == NoYes::No
            && retailPeriodicDiscount.DateValidationType == RetailDateValidationTypeBase::Advanced
            && RetailPeriodicDiscountChangeTrackingHelper::isDiscountTypeSupported(retailPeriodicDiscount.PeriodicDiscountType)
        {
            RetailPeriodicDiscountChangeTrackingHelper::trackDiscountInternal(retailPeriodicDiscount, _updateDatetime, _tag);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTradeAgreementValidPeriodAndTrackPriceChange</Name>
				<Source><![CDATA[
    private boolean checkTradeAgreementValidPeriodAndTrackPriceChange(utcdatetime _updatedDatetime, guid _tag)
    {
        PriceDiscTable priceDiscTable;
        EcoResProduct ecoResProduct;
        InventTableModule inventTableModule;

        date minDateWindow = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - 1;
        date maxDateWindow = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + 1;

        boolean isFullRefreshTriggered = this.trackAllItemCodeDiscountTradeAgreements(minDateWindow, maxDateWindow);

        // If full refresh triggered, then there is no need to do product id level track.
        if (isFullRefreshTriggered)
        {
            return true;
        }

        this.trackTableItemCodeTradeAgreements(minDateWindow, maxDateWindow, _updatedDatetime, _tag);
        this.trackGroupItemCodeDiscountTradeAgreements(minDateWindow, maxDateWindow, _updatedDatetime, _tag);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackTableItemCodeTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Track price trade agreements and line discount trade agreements with ItemCode = Table.
    /// </summary>
    /// <param name = "_minDateWindow">The minimum date to check if trade agreement is valid.</param>
    /// <param name = "_maxDateWindow">The max date to check if trade agreement is valid.</param>
    /// <param name = "_updateDatetime">The updated datetime.</param>
    /// <param name = "_tag">The tag to mark a change tracking record reversion.</param>
    private void trackTableItemCodeTradeAgreements(date _minDateWindow, date _maxDateWindow, utcdatetime _updateDatetime, guid _tag)
    {
        PriceDiscTable priceDiscTable;
        EcoResProduct ecoResProduct;
        InventTable inventTable;
        InventTableModule inventTableModule;
        RetailPriceChangeTracking priceChangeTracking, existingRecords;

        ttsbegin;

        // Update exist records.
        update_recordset priceChangeTracking
            setting UpdatedDatetime = _updateDatetime, Tag = _tag
        exists join inventTable
            where priceChangeTracking.ProductId == inventTable.Product && priceChangeTracking.Tag != _tag // not yet updated by previous steps.
        join priceDiscTable
            where (priceDiscTable.relation == PriceType::PriceSales || priceDiscTable.relation == PriceType::LineDiscSales)
            && priceDiscTable.Module == ModuleInventCustVend::Cust
            && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
            && priceDiscTable.ItemCode == PriceDiscProductCodeType::Table
            && ((priceDiscTable.FromDate >= _minDateWindow && priceDiscTable.FromDate <= _maxDateWindow)
                || (priceDiscTable.ToDate >= _minDateWindow && priceDiscTable.ToDate <= _maxDateWindow))
            && priceDiscTable.ItemRelation == inventTable.ItemId;

        // Insert not exist records.
        insert_recordset priceChangeTracking
        (
            ProductId,
            Tag,
            UpdatedDatetime // need to be the last as extra timezone field will be added automatically
        )
        select Product, _tag, _updateDatetime
        from inventTable
            group by Product
        exists join priceDiscTable
            where (priceDiscTable.relation == PriceType::PriceSales || priceDiscTable.relation == PriceType::LineDiscSales)
            && priceDiscTable.Module == ModuleInventCustVend::Cust
            && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
            && priceDiscTable.ItemCode == PriceDiscProductCodeType::Table
            && ((priceDiscTable.FromDate >= _minDateWindow && priceDiscTable.FromDate <= _maxDateWindow)
                || (priceDiscTable.ToDate >= _minDateWindow && priceDiscTable.ToDate <= _maxDateWindow))
            && priceDiscTable.ItemRelation == inventTable.ItemId
        notexists join existingRecords
            where existingRecords.ProductId == inventTable.Product;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackGroupItemCodeDiscountTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Track price trade agreements and line discount trade agreements with ItemCode = Group.
    /// </summary>
    /// <param name = "_minDateWindow">The minimum date to check if trade agreement is valid.</param>
    /// <param name = "_maxDateWindow">The max date to check if trade agreement is valid.</param>
    /// <param name = "_updateDatetime">The updated datetime.</param>
    /// <param name = "_tag">The tag to mark a change tracking record reversion.</param>
    private void trackGroupItemCodeDiscountTradeAgreements(date _minDateWindow, date _maxDateWindow, utcdatetime _updateDatetime, guid _tag)
    {
        PriceDiscTable priceDiscTable;
        EcoResProduct ecoResProduct;
        InventTable inventTable;
        InventTableModule inventTableModule;
        RetailPriceChangeTracking priceChangeTracking, existingRecords;

        ttsbegin;

        // Update exist records.
        update_recordset priceChangeTracking
            setting UpdatedDatetime = _updateDatetime, Tag = _tag
        exists join inventTable
            where priceChangeTracking.ProductId == inventTable.Product && priceChangeTracking.Tag != _tag // not yet updated by previous steps.
        join inventTableModule
            where inventTable.ItemId == inventTableModule.ItemId && inventTableModule.ModuleType == ModuleInventPurchSales::Sales
        join priceDiscTable
            where priceDiscTable.relation == PriceType::LineDiscSales
            && priceDiscTable.Module == ModuleInventCustVend::Cust
            && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
            && priceDiscTable.ItemCode == PriceDiscProductCodeType::GroupId
            && ((priceDiscTable.FromDate >= _minDateWindow && priceDiscTable.FromDate <= _maxDateWindow)
                || (priceDiscTable.ToDate >= _minDateWindow && priceDiscTable.ToDate <= _maxDateWindow))
            && priceDiscTable.ItemRelation == inventTableModule.LineDisc;

        // Insert not exist records.
        insert_recordset priceChangeTracking
        (
            ProductId,
            Tag,
            UpdatedDatetime // need to be the last as extra timezone field will be added automatically
        )
        select Product, _tag, _updateDatetime
        from inventTable
            group by Product
        exists join inventTableModule
            where inventTable.ItemId == inventTableModule.ItemId && inventTableModule.ModuleType == ModuleInventPurchSales::Sales
        join priceDiscTable
            where (priceDiscTable.relation == PriceType::PriceSales || priceDiscTable.relation == PriceType::LineDiscSales)
            && priceDiscTable.Module == ModuleInventCustVend::Cust
            && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
            && priceDiscTable.ItemCode == PriceDiscProductCodeType::GroupId
            && ((priceDiscTable.FromDate >= _minDateWindow && priceDiscTable.FromDate <= _maxDateWindow)
                || (priceDiscTable.ToDate >= _minDateWindow && priceDiscTable.ToDate <= _maxDateWindow))
            && priceDiscTable.ItemRelation == inventTableModule.LineDisc
        notexists join existingRecords
            where existingRecords.ProductId == inventTable.Product;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackAllItemCodeDiscountTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Track price trade agreements and line discount trade agreements with ItemCode = All.
    /// </summary>
    /// <param name = "_minDateWindow">The minimum date to check if trade agreement is valid.</param>
    /// <param name = "_maxDateWindow">The max date to check if trade agreement is valid.</param>
    /// <returns>True if all item code exists, otherwise false.</returns>
    private boolean trackAllItemCodeDiscountTradeAgreements(date _minDateWindow, date _maxDateWindow)
    {
        PriceDiscTable priceDiscTable;

        select firstonly RecId from priceDiscTable
            where priceDiscTable.relation == PriceType::LineDiscSales
            && priceDiscTable.Module == ModuleInventCustVend::Cust
            && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
            && priceDiscTable.ItemCode == PriceDiscProductCodeType::All
            && ((priceDiscTable.FromDate >= _minDateWindow && priceDiscTable.FromDate <= _maxDateWindow)
                || (priceDiscTable.ToDate >= _minDateWindow && priceDiscTable.ToDate <= _maxDateWindow));

        if (priceDiscTable.RecId)
        {
            RetailTradeAgreementChangeTrackingHelper::trackAllItemCodeTradeAgreement();
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>