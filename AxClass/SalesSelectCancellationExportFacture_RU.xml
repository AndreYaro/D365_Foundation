<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesSelectCancellationExportFacture_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesSelectCancellationExportFacture_RU extends RunBaseBatch implements BatchRetryable
{
    SalesTmpExportFactureProcessing_RU tmpFactureProcessing;
    QueryRun  queryRun;

    #define.CurrentVersion(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(FactureJour_RU));
        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, Module),
                            queryValue(FactureModule_RU::Cust)).status(RangeStatus::Locked);
        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, FactureType),
                            queryValue(FactureType_RU::Invoice)).status(RangeStatus::Locked);
        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, ExportProcessing),
                            queryValue(NoYes::Yes)).status(RangeStatus::Locked);

        qbds.addRange(fieldNum(FactureJour_RU, ProcessingType)).value(SysQuery::value(SalesBookFactureProcessingType_RU::OverdueConfirmation));
        qbds.addRange(fieldNum(FactureJour_RU, ProcessingType)).value(SysQuery::value(SalesBookFactureProcessingType_RU::VATStandard));
        qbds.addRange(fieldNum(FactureJour_RU, ProcessingType)).value(SysQuery::value(SalesBookFactureProcessingType_RU::VATStandardCancellation));
        qbds.addRange(fieldNum(FactureJour_RU, ProcessingType)).value(SysQuery::value(SalesBookFactureProcessingType_RU::VATStandardCorrection));
        qbds.addRange(fieldNum(FactureJour_RU, ProcessingType)).value(SysQuery::value(SalesBookFactureProcessingType_RU::VATZero));
        qbds.addRange(fieldNum(FactureJour_RU, ProcessingType)).value(SysQuery::value(SalesBookFactureProcessingType_RU::VATZeroCorrection));
        qbds.addRange(fieldNum(FactureJour_RU, FactureDate));
        qbds.addRange(fieldNum(FactureJour_RU, ExportDate));
        qbds.addRange(fieldNum(FactureJour_RU, ConfirmationDate));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.query().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        while (queryRun.next())
        {
            FactureJour_RU factureJour = queryRun.get(tableNum(FactureJour_RU));

            tmpFactureProcessing.clear();
            tmpFactureProcessing.initFromFactuerJour(factureJour);
            tmpFactureProcessing.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpFactureProcessing</Name>
				<Source><![CDATA[
    SalesTmpExportFactureProcessing_RU tmpFactureProcessing()
    {
        return tmpFactureProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   conQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, conQuery] = packedClass;
                Query query = new Query(conQuery);
                queryRun = new QueryRun(query);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesSelectCancellationExportFacture_RU construct()
    {
        SalesSelectCancellationExportFacture_RU cancelHandling = new SalesSelectCancellationExportFacture_RU();

        return cancelHandling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return  "@GLS112983";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
