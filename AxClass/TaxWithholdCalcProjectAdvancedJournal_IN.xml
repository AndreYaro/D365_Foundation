<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCalcProjectAdvancedJournal_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdCalcProjectAdvancedJournal_IN</c> class integrates with the calculation of Indian withhold tax from the project advanced journal lines.
/// </summary>
internal class TaxWithholdCalcProjectAdvancedJournal_IN extends TaxWithholdCalculation_IN
{
    private ProjAdvancedJournalLineTaxWithholdDocument_IN projAdvancedJournalLineTaxWithholdDocument;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates withholding tax amount for project advanced journal.
    /// </summary>
    /// <returns>
    /// The value of the withholding tax amount.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        TaxAmountCur taxWithholdAmountCur;

        Debug::assert(projAdvancedJournalLineTaxWithholdDocument != null);

        if (!projAdvancedJournalLineTaxWithholdDocument.getFirstLine())
        {
            return 0;
        }

        this.calcTmpTransLineWithholdGrossAmount();

        boolean linesExist = true;

        while (linesExist)
        {
            taxableLineCurrentlyBeingCalculated = projAdvancedJournalLineTaxWithholdDocument.getCurrentLine();

            ProjAdvancedJournalLine projAdvancedJournalLineLoc = taxableLineCurrentlyBeingCalculated.getSourceLine();

            AmountCur lineGrossAmountCur = TmpTransLineWithholdGrossAmount_IN::lineGrossAmountCur(tmpTransLineWithholdGrossAmount, projAdvancedJournalLineLoc.TableId, projAdvancedJournalLineLoc.RecId);
            container taxWithholdData = this.setWHTContainerData(projAdvancedJournalLineLoc, lineGrossAmountCur);

            boolean isCreditNote = this.isCreditNote(projAdvancedJournalLineLoc);

            if (isCreditNote)
            {
                taxWithholdData = conPoke(taxWithholdData, #TaxDate, projAdvancedJournalLineLoc.AccountingDate);
                taxWithholdAmountCur = this.creditNoteCalculationV2(taxWithholdData, '', '', projAdvancedJournalLineLoc.ProjId);
            }
            else if (lineGrossAmountCur > 0)
            {
                AccountNum vendAccount = this.getOffsetAccount(projAdvancedJournalLineLoc);

                str curext = curext();

                // populate container with vendor information.
                container vendorInformation;
                vendorInformation += vendAccount;
                vendorInformation += '';
                vendorInformation += '';
                vendorInformation += '';
                vendorInformation += curext;
                vendorInformation += curext;

                this.setInvoiceCompany(curext);
                this.setPaymentCompany(curext);

                ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExt = projAdvancedJournalLineLoc.projAdvancedJournalLineTaxExtensionIN();
                boolean isRecoverableAccount = projAdvancedJournalLineTaxExt.TCSGroup ? true : false;

                taxWithholdAmountCur = this.totalTaxWithhold(
                    vendAccount,
                    projAdvancedJournalLineTaxExt.getTaxWithholdGroup(),
                    projAdvancedJournalLineLoc.AccountingDate,
                    taxWithholdData,
                    isRecoverableAccount,
                    false,
                    '',
                    '',
                    '',
                    projAdvancedJournalLineLoc.ExtendedCost,
                    0,
                    LedgerJournalACType::Project,
                    projAdvancedJournalLineLoc.OffsetAccountType,
                    vendorInformation);

                if (isRecoverableAccount)
                {
                    taxWithholdAmountCur = taxWithholdAmountCur * -1;
                }
            }

            linesExist = projAdvancedJournalLineTaxWithholdDocument.getNextLine();
        }

        this.updateTaxWithholdUncommitted();

        return taxWithholdAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the project integration journal line is credit note.
    /// </summary>
    /// <param name = "_line">The <c>ProjAdvancedJournalLine</c> record.</param>
    /// <returns>true if the project integration journal line is credit note; otherwise, false.</returns>
    protected boolean isCreditNote(Common _line)
    {
        return TaxProjOperationUtils::isCreditNote(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxWithholdUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all <c>TaxWithholdUncommitted_IN</c> records for the current document, voucher, and invoice.
    /// </summary>
    /// <remarks>
    /// For the journals, the current document may actually contain multiple tax documents. Therefore, we
    /// need to override the default behavior so that only one of these tax documents.
    /// </remarks>
    public void updateTaxWithholdUncommitted()
    {
        if (useTaxWithholdUncommitted && projAdvancedJournalLineTaxWithholdDocument is ProjAdvancedJournalLineTaxWithholdDocument_IN)
        {
            ProjAdvancedJournalLineTaxWithholdDocument_IN projAdvancedJournalLineTaxWithholdDocumentLoc = projAdvancedJournalLineTaxWithholdDocument;

            if (TaxWithholdUncommitted_IN::existByDocumentAndVoucher(
                projAdvancedJournalLineTaxWithholdDocument.getSourceHeader().TableId,
                projAdvancedJournalLineTaxWithholdDocument.getSourceHeader().RecId,
                projAdvancedJournalLineTaxWithholdDocument.getReferenceNumber()))
            {
                ProjAdvancedJournalLine projAdvancedJorunalline = projAdvancedJournalLineTaxWithholdDocumentLoc.parmProjAdvancedJournalLine();

                TaxWithholdUncommitted_IN::deleteForDocumentLine(
                    projAdvancedJorunalline.TableId,
                    projAdvancedJorunalline.RecId,
                    this.useSubLedgerJournalLines());
            }

            TaxWithholdUncommitted_IN::createWithholdTaxUncommitted(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTmpTransLineWithholdGrossAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates each transaction line and insert to <c>TmpTransLineWithholdGrossAmount_IN</c>
    /// </summary>
    private void calcTmpTransLineWithholdGrossAmount()
    {
        boolean linesExist = true;

        while (linesExist)
        {
            taxableLineCurrentlyBeingCalculated = projAdvancedJournalLineTaxWithholdDocument.getCurrentLine();

            ProjAdvancedJournalLine projAdvancedJournalLineLoc = taxableLineCurrentlyBeingCalculated.getSourceLine();
            ProjAdvancedJournal projAdvancedJournalLoc = projAdvancedJournalLineLoc.getProjAdvancedJournal();

            AmountCur amountCur = this.getGrossAmount(projAdvancedJournalLineLoc);
            ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExt = projAdvancedJournalLineLoc.projAdvancedJournalLineTaxExtensionIN();

            ttsBegin;
            tmpTransLineWithholdGrossAmount.clear();
            tmpTransLineWithholdGrossAmount.HeadingTableId = projAdvancedJournalLoc.TableId;
            tmpTransLineWithholdGrossAmount.HeadingRecId = projAdvancedJournalLoc.RecId;
            tmpTransLineWithholdGrossAmount.SourceTableId = projAdvancedJournalLineLoc.TableId;
            tmpTransLineWithholdGrossAmount.SourceRecId = projAdvancedJournalLineLoc.RecId;
            tmpTransLineWithholdGrossAmount.AccountType = AccountType_IN::Vend;
            tmpTransLineWithholdGrossAmount.AccountNumber = this.getOffsetAccount(projAdvancedJournalLineLoc);
            tmpTransLineWithholdGrossAmount.LineGrossAmountCur = amountCur;
            tmpTransLineWithholdGrossAmount.TransDate = projAdvancedJournalLineLoc.ProjTransDate;
            tmpTransLineWithholdGrossAmount.TaxWithholdGroup = projAdvancedJournalLineTaxExt.getTaxWithholdGroup();
            tmpTransLineWithholdGrossAmount.AmountOriginMST = CurrencyExchangeHelper::amountCur2MST(amountCur, projAdvancedJournalLineLoc.CostCurrency, projAdvancedJournalLineLoc.CostExchangeRate, projAdvancedJournalLineLoc.ProjTransDate);
            tmpTransLineWithholdGrossAmount.Voucher = projAdvancedJournalLineLoc.Voucher;
            tmpTransLineWithholdGrossAmount.insert();
            ttsCommit;

            linesExist = projAdvancedJournalLineTaxWithholdDocument.getNextLine();
        }

        projAdvancedJournalLineTaxWithholdDocument.getFirstLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetAccount</Name>
				<Source><![CDATA[
    private LedgerJournalAC getOffsetAccount(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        LedgerJournalAC offsetAccount;

        if (_projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Vend && _projAdvancedJournalLine.OffsetLedgerDimension)
        {
            offsetAccount = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_projAdvancedJournalLine.OffsetLedgerDimension);
        }

        return offsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossAmount</Name>
				<Source><![CDATA[
    private AmountCur getGrossAmount(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        sourceCurrencyCode = _projAdvancedJournalLine.CostCurrency;
        exchRate = _projAdvancedJournalLine.CostExchangeRate;
        AmountCur lineAmount = _projAdvancedJournalLine.ExtendedCost;
        AmountCur grossAmount = lineAmount;

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExt = _projAdvancedJournalLine.projAdvancedJournalLineTaxExtensionIN();
            TaxWithholdGroupHeading taxWithholdGroupHeading = TaxWithholdGroupHeading::find(projAdvancedJournalLineTaxExt.getTaxWithholdGroup());

            TaxEngineProjAdvancedJournalLineHeader taxEngineProjAdvancedJournalLineHeader = _projAdvancedJournalLine.salesPurchJournalTable();
            ITaxableDocument taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(taxEngineProjAdvancedJournalLineHeader));
            ITaxDocument taxDocument = TaxBusinessService::calculateTaxForProjAdvancedJournal(taxableDocument);

            if (taxDocument)
            {
                ITaxDocumentLine taxDocumentLine = taxDocument.findLineBySource(_projAdvancedJournalLine.TableId, _projAdvancedJournalLine.RecId);
                if (taxDocumentLine)
                {
                    if (taxDocumentLine.priceInclTax())
                    {
                        AmountCur totalGTETaxAmount = taxDocumentLine.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Credit).amountTransactionCurrency();
                        totalGTETaxAmount -= taxDocumentLine.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Debit).amountTransactionCurrency();

                        if (TaxEngineEREnumToEnumUtil::taxDirectionEnum(taxDocumentLine.getFieldValue(TaxEngineModelFrameworkFieldsConstants::TaxDirection)) == TaxDirection::OutgoingTax)
                        {
                            totalGTETaxAmount = -totalGTETaxAmount;
                        }

                        lineAmount -= totalGTETaxAmount;
                    }

                    Map includeTaxComponentsMap = TaxWithholdIncIndirectTaxComponentsUtil::getIncTaxComponentsForWithholdGroup(taxWithholdGroupHeading.RecId);
                    AmountCur indirectTaxAmount = taxDocumentLine.getTaxAmountByComponentsAndProvider(includeTaxComponentsMap, TaxAccountingProvider::Party);
                    if (TaxEngineEREnumToEnumUtil::taxDirectionEnum(taxDocumentLine.getFieldValue(TaxEngineModelFrameworkFieldsConstants::TaxDirection)) == TaxDirection::IncomingTax)
                    {
                        indirectTaxAmount = -indirectTaxAmount;
                    }

                    grossAmount = lineAmount + indirectTaxAmount;
                }
            }
        }

        return grossAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        Object  _initializationClass,
        boolean _useTaxWithholdUncommitted,
        boolean _loadTaxWithholdUncommittedOnInit,
        boolean _loadTaxWithholdTrans,
        boolean _skipInit = false,
        boolean _maintainExistingTaxWithholdUncommitted = false)
    {
        super();

        maintainExistingTaxWithholdUncommitted = _maintainExistingTaxWithholdUncommitted;
        useTaxWithholdUncommitted = _useTaxWithholdUncommitted;
        loadTaxWithholdUncommitted = _loadTaxWithholdUncommittedOnInit;
        loadTaxWithholdTrans = _loadTaxWithholdTrans;

        if (!_skipInit)
        {
            this.init(_initializationClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the <c>TaxWithholdUncommitted_IN</c> records into the <c>TmpTaxWithholdWorkTrans_IN</c> buffer.
    /// </summary>
    /// <param name="_initializationClass">
    /// The initialization class. The initialization class is a TaxableDocument class for journals.
    /// </param>
    public void init(Object _initializationClass)
    {
        projAdvancedJournalLineTaxWithholdDocument = _initializationClass as TaxableDocument;

        voucher = projAdvancedJournalLineTaxWithholdDocument.getReferenceNumber();
        headingRecId = projAdvancedJournalLineTaxWithholdDocument.getSourceHeader().RecId;
        headingTableId = projAdvancedJournalLineTaxWithholdDocument.getSourceHeader().TableId;
        taxModuleType = projAdvancedJournalLineTaxWithholdDocument.getModuleType();

        super(_initializationClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current transaction to calculate supports the <c>SubLedgerDistributions</c> or <c>SubLedgerJournalLines</c> records.
    /// </summary>
    /// <returns>
    /// true if the current transaction to calculate supports the <c>SubLedgerDistributions</c> or <c>SubLedgerJournalLines</c> records; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWithholdTaxForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates withholding tax for project advanced journal.
    /// </summary>
    /// <param name = "_projAdvancedJournalRecId">The record id of <c>ProjAdvancedJournal</c>.</param>
    /// <returns> The total withholding tax amount for journal.</returns>
    public static TaxAmountCur calculateWithholdTaxForJournal(RefRecId _projAdvancedJournalRecId)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;
        ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExt;
        ProjAdvancedJournalLineTaxWithholdDocument_IN projAdvancedJournalLineTaxWithholdDoc;
        TaxAmountCur totalTaxWithholdAmount;

        if (FeatureStateProvider::isFeatureEnabled(TaxProjOpsIntegrationJournal_INFeature::instance()))
        {
            while select * from projAdvancedJournalLine
                where projAdvancedJournalLine.ProjAdvancedJournal == _projAdvancedJournalRecId
                    && projAdvancedJournalLine.TransType == ProjTransType::Cost
                    && projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Vend
                    && projAdvancedJournalLine.ExtendedCost != 0
                exists join projAdvancedJournalLineTaxExt
                    where projAdvancedJournalLineTaxExt.ProjAdvancedJournalLine == projAdvancedJournalLine.RecId
                        && (projAdvancedJournalLineTaxExt.TDSGroup != ''
                            || projAdvancedJournalLineTaxExt.TCSGroup != '')
            {
                projAdvancedJournalLineTaxWithholdDoc = ProjAdvancedJournalLineTaxWithholdDocument_IN::construct(projAdvancedJournalLine);
                projAdvancedJournalLineTaxWithholdDoc.calcTax();

                // Summary the withholding tax amount per line.
                totalTaxWithholdAmount += projAdvancedJournalLineTaxWithholdDoc.taxWithholdCalculation().totalTaxWithholdAmount();
            }
        }

        return totalTaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxWithholdAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total tax withhold amount per project advanced journal line.
    /// </summary>
    /// <returns>
    /// The total tax withhold amount.
    /// </returns>
    public TaxAmountCur totalTaxWithholdAmount()
    {
        TaxAmountCur totalTaxWithholdAmount;

        if (headingTableId == tableNum(ProjAdvancedJournal))
        {
            ProjAdvancedJournalLine projAdvancedJournalLine = projAdvancedJournalLineTaxWithholdDocument.parmProjAdvancedJournalLine();
            ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExt = projAdvancedJournalLine.projAdvancedJournalLineTaxExtensionIN();

            select sum(SourceRegulateAmountCur) from taxWithholdWorkTrans
                where taxWithholdWorkTrans.HeadingTableId == headingTableId
                    && taxWithholdWorkTrans.HeadingRecId == headingRecId
                    && taxWithholdWorkTrans.SourceTableId == projAdvancedJournalLine.TableId
                    && taxWithholdWorkTrans.SourceRecId == projAdvancedJournalLine.RecId
                    && taxWithholdWorkTrans.Voucher == projAdvancedJournalLine.Voucher;

            totalTaxWithholdAmount = taxWithholdWorkTrans.SourceRegulateAmountCur;

            if (projAdvancedJournalLineTaxExt.TCSGroup)
            {
                totalTaxWithholdAmount = totalTaxWithholdAmount * -1;
            }
        }

        return totalTaxWithholdAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>