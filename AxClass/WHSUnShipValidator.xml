<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUnShipValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class WHSUnShipValidator
{
    private InventDim       inventDim;
    private WHSLoadLine     loadLine;
    internal WHSContainerId containerid;
    private WhsUnShip       unShip;
    private boolean         isMoveToLocationLPControlled;
    private static boolean  inventTransTypeSalesRefactoringFlightIsEnabled = WHSInventTransTypeSalesRefactoringFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        inventDim = _inventDim;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsMoveToLocationLPControlled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmIsMoveToLocationLPControlled(boolean _isMoveToLocationLPControlled = isMoveToLocationLPControlled)
    {
        isMoveToLocationLPControlled = _isMoveToLocationLPControlled;

        return isMoveToLocationLPControlled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLoadLine parmLoadLine(WHSLoadLine _loadLine = loadLine)
    {
        loadLine = _loadLine;

        return loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSContainerId parmContainerId(WHSContainerId _containerId = containerid)
    {
        containerid = _containerId;

        return containerid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnship</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WhsUnShip parmUnship(WhsUnShip _unShip = unShip)
    {
        unShip = _unShip;

        return unShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSUnShipValidator construct(
        InventDim           _inventDim,
        WHSLoadLine         _loadLine,
        WHSContainerId      _containerId,
        WhsUnShip           _unShip,
        boolean             _isMoveToLocationLPControlled)
    {
        WHSUnShipValidator unShipValidator = new WHSUnShipValidator();
        unShipValidator.parmInventDim(_inventDim);
        unShipValidator.parmLoadLine(_loadLine);
        unShipValidator.parmContainerId(_containerId);
        unShipValidator.parmUnship(_unShip);
        unShipValidator.parmIsMoveToLocationLPControlled(_isMoveToLocationLPControlled);

        return unShipValidator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequest</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean validateRequest()
    {       
        return unShip.validateRequest(inventDim, loadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void validate()
    {    
        unShip.validateMoveToLicensePlate(isMoveToLocationLPControlled);

        if (!this.validateRequest())
        {
            throw error("@WAX:UnpickError");
        }
       
        this.validateBasedOnInventTransType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBasedOnInventTransType</Name>
				<Source><![CDATA[
    private void validateBasedOnInventTransType()
    {
        WHSLoadLine locLoadLine = WHSLoadLine::findbyRecId(loadLine.RecId);
        
        if (inventTransTypeSalesRefactoringFlightIsEnabled)
        {
            if (!this.isInventTransTypeSupported(locLoadLine.InventTransType))
            {
                throw error("@WAX3485");
            }
        
            if (this.isSalesProcessSerialSupportedByInventTransType(locLoadLine.InventTransType)
                && InventTable::find(locLoadLine.ItemId).isSalesProcessSerialActive()
                && WHSInventTable::captureSerial(locLoadLine.ItemId) != WHSRFWhenToCapture::None)
            {
                warning(this.unshipLoadLineForSerialItemErrorMessage(locLoadLine.InventTransType));
            }
        }
        else
        {
            if (locLoadLine.InventTransType == InventTransType::Sales)
            {
                if (InventTable::find(locLoadLine.ItemId).isSalesProcessSerialActive()
                &&  WHSInventTable::captureSerial(locLoadLine.ItemId) != WHSRFWhenToCapture::None)
                {
                    warning("@WAX:UnshipLoadLineForSerialItem");
                }
            }
            else if (locLoadLine.InventTransType != InventTransType::TransferOrderShip)
            {
                throw error("@WAX3485");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventTransTypeSupported</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    protected internal boolean isInventTransTypeSupported(InventTransType _inventTransType)
    {
        return _inventTransType == InventTransType::Sales
            || _inventTransType == InventTransType::TransferOrderShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesProcessSerialSupportedByInventTransType</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean isSalesProcessSerialSupportedByInventTransType(InventTransType _inventTransType)
    {
        return _inventTransType == InventTransType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unshipLoadLineForSerialItemErrorMessage</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal str unshipLoadLineForSerialItemErrorMessage(InventTransType _inventTransType)
    {
        if (_inventTransType == InventTransType::Sales)
        {
            return "@WAX:UnshipLoadLineForSerialItem";
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>