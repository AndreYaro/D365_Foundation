<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSysApplicationInsightsEventTelemetryDuplicate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility.Implementation;
using EnvironmentFactory = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory;

/// <summary>
/// Telemetry data contract class containing the information context when writing custom events to Application Insights.
/// </summary>
internal final class WHSSysApplicationInsightsEventTelemetryDuplicate
{
    private static readonly str     aadTenantId             = EnvironmentFactory::GetApplicationEnvironment().Aad.TenantDomainGUID;
    private static readonly str     lcsEnvironmentId        = EnvironmentFactory::GetApplicationEnvironment().LCS.LCSEnvironmentId;
    private static readonly str     roleInstanceName        = SysApplicationInsightsTelemetryHelper::getEnvironmentInstanceName();
    private static readonly str     roleName                = SysApplicationInsightsTelemetryHelper::getEnvironmentRoleName();
    private static readonly boolean allowCustomerContent    = true;
    private static readonly boolean allowEUPI               = true;
    private                 str     activityId = System.Diagnostics.Tracing.EventSource::CurrentThreadActivityId.ToString();

    private EventTelemetry eventTelemetry;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        eventTelemetry = new EventTelemetry();
        this.initializeTelemetryContext(eventTelemetry.Context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromEventIdName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Factory method creating a custom event telemetry contract .
    /// </summary>
    /// <param name = "_eventId">The event identification.</param>
    /// <param name = "_name">The name of the event.</param>
    /// <returns>An instance of <c>WHSSysApplicationInsightsEventTelemetryDuplicate</c></returns>
    public final static WHSSysApplicationInsightsEventTelemetryDuplicate newFromEventIdName(str _eventId, str _name)
    {
        WHSSysApplicationInsightsEventTelemetryDuplicate telemetry = new WHSSysApplicationInsightsEventTelemetryDuplicate();
        telemetry.setName(_name);

        telemetry.addPropertyAadTenantId();
        telemetry.addPropertyActivityId();
        telemetry.addPropertyEnvironmentId();
        telemetry.addPropertyEventId(_eventId);

        return telemetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builder method adding a property to the existing telemetry data contract.
    /// </summary>
    /// <param name = "_property">Property object to add.</param>
    /// <returns>The current telemetry contract.</returns>
    public final WHSSysApplicationInsightsEventTelemetryDuplicate addProperty(SysApplicationInsightsProperty _property)
    {
        this.addPropertyInternal(_property.key(), _property.parmValue(), _property.dataClassification());
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventTelemetryContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current native Application Insights event telemetry contract.
    /// </summary>
    /// <returns>An instance of <c>Microsoft.ApplicationInsights.DataContracts.EventTelemetry</c></returns>
    public final EventTelemetry eventTelemetryContract()
    {
        return eventTelemetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setName</Name>
				<Source><![CDATA[
    private void setName(str 512 _name)
    {
        eventTelemetry.Name = _name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyInternal</Name>
				<Source><![CDATA[
    private void addPropertyInternal(SysApplicationInsightsPropertyKey _key, str 8192 _value, SysApplicationInsightsComplianceDataType _dataClassification)
    {
        str 8192 propertyValue = _value;

        if (this.isDataClassificationSupported(_dataClassification))
        {
            if (!propertyValue)
            {
                propertyValue = '<empty>';     // An actual value is needed, because the property would otherwise not be present in the telemetry results.
            }

            var properties = eventTelemetry.Properties;

            if (properties.ContainsKey(_key))
            {
                properties.Remove(_key); // This is needed as the Add method would throw an exception if the key already exists.
            }

            properties.Add(_key, propertyValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataClassificationSupported</Name>
				<Source><![CDATA[
    private boolean isDataClassificationSupported(SysApplicationInsightsComplianceDataType _dataClassification)
    {
        return      _dataClassification == SysApplicationInsightsComplianceDataType::SystemMetadata
            ||      _dataClassification == SysApplicationInsightsComplianceDataType::OII
            || ((   _dataClassification == SysApplicationInsightsComplianceDataType::EUPI) && allowEUPI)
            || ((   _dataClassification == SysApplicationInsightsComplianceDataType::CustomerContent) && allowCustomerContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTelemetryContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper to update the telemetry context on a telemetry data contract. The telemetry context provides information about the user, session, ...
    /// </summary>
    /// <param name = "_context">The telemetry context from the telemetry contract.
    /// <see href="https://aka.ms/AppInsightsEventTelemetryContract"></see>
    /// </param>
    protected void initializeTelemetryContext(TelemetryContext _context)
    {
        Batch batchTask;

        CloudContext cloudContext   = _context.Cloud;
        cloudContext.RoleInstance   = roleInstanceName;
        cloudContext.RoleName       = roleName;
        
        UserContext userContext = _context.User;
        userContext.Id = curUserId();
        
        SessionContext sessionContext = _context.Session;
        sessionContext.Id = int2Str(SessionId());

        this.addPropertyLegalEntity();

        if(Global::isRunningOnBatch())
        {
            batchTask = BatchHeader::getCurrentBatchTask();

            this.addPropertyExecutionMode('Batch');
            this.addPropertyBatchJobId(batchTask.BatchJobId);
            this.addPropertyBatchJobCaption(batchTask.Caption);
        }
        else
        {
            this.addPropertyExecutionMode('Interactive');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyActivityId</Name>
				<Source><![CDATA[
    protected void addPropertyActivityId()
    {
        this.addPropertyInternal('activityId', activityId, SysApplicationInsightsComplianceDataType::SystemMetadata);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyEnvironmentId</Name>
				<Source><![CDATA[
    protected void addPropertyEnvironmentId()
    {
        this.addPropertyInternal('environmentId', lcsEnvironmentId , SysApplicationInsightsComplianceDataType::OII);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyEventId</Name>
				<Source><![CDATA[
    protected void addPropertyEventId(str _eventId)
    {
        this.addPropertyInternal('eventId', _eventId, SysApplicationInsightsComplianceDataType::SystemMetadata);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyAadTenantId</Name>
				<Source><![CDATA[
    protected void addPropertyAadTenantId()
    {
        this.addPropertyInternal('aadTenantId', aadTenantId, SysApplicationInsightsComplianceDataType::OII);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyLegalEntity</Name>
				<Source><![CDATA[
    protected void addPropertyLegalEntity()
    {
        this.addPropertyInternal('LegalEntity', curExt(), SysApplicationInsightsComplianceDataType::OII);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyExecutionMode</Name>
				<Source><![CDATA[
    protected void addPropertyExecutionMode(str _executionMode)
    {
        this.addPropertyInternal('ExecutionMode', _executionMode, SysApplicationInsightsComplianceDataType::SystemMetadata);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyBatchJobId</Name>
				<Source><![CDATA[
    protected void addPropertyBatchJobId(RefRecId _batchJobId)
    {
        this.addPropertyInternal('BatchJobId', strFmt('%1', _batchJobId), SysApplicationInsightsComplianceDataType::SystemMetadata);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyBatchJobCaption</Name>
				<Source><![CDATA[
    protected void addPropertyBatchJobCaption(BatchCaption _batchJobCaption)
    {
        this.addPropertyInternal('BatchJobCaption', _batchJobCaption, SysApplicationInsightsComplianceDataType::CustomerContent);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>