<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPaymDetailedStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>MCRPaymDetailedStatus</c> class is used to display the detailed payment status.
/// </summary>
class MCRPaymDetailedStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDetailedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Describes the detailed status of an individual payment.
    /// </summary>
    /// <param name="_mcrCustPaymTable">
    /// The payment transaction record.
    /// </param>
    /// <returns>
    /// The detailed payment status.
    /// </returns>
    public static MCRCustPaymDetailedStatus getDetailedStatus(MCRCustPaymTable _mcrCustPaymTable)
    {
        MCRCustPaymDetailedStatus retStatus = enum2str(_mcrCustPaymTable.Status);

        switch (_mcrCustPaymTable.CustPaymType)
        {
            case MCRCustPaymType::Cash:
                break;
            case MCRCustPaymType::Check:
                if (_mcrCustPaymTable.Status == MCRCustPaymStatus::Posted)
                {
                    retStatus = "@MCR24812";  // Check hold
                }
                else if (_mcrCustPaymTable.Status == MCRCustPaymStatus::Declined)
                {
                    retStatus = "@MCR30676";  // NSF
                }
                break;
            case MCRCustPaymType::CreditCard:
                retStatus = MCRPaymDetailedStatus::getDetailedStatus_CC(_mcrCustPaymTable);
                break;
            // Break for gift card.
            case MCRCustPaymType::GiftCard:
                break;
            case MCRCustPaymType::OnAccount:
                if (_mcrCustPaymTable.Status == MCRCustPaymStatus::Declined)
                {
                    retStatus = "@MCR24594";  // Over credit limit
                }
                break;
            case MCRCustPaymType::RefundCheck:
                if (_mcrCustPaymTable.Status == MCRCustPaymStatus::NotSubmitted)
                {
                    retStatus = "@MCR10711";
                }
                break;
        }

        return retStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailedStatus_CC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the detailed payment status of credit card payments.
    /// </summary>
    /// <param name="_mcrCustPaymTable">
    /// The payment record used to decipher the detailed status.
    /// </param>
    /// <returns>
    /// The detailed status of a credit card payment transaction.
    /// </returns>
    private static MCRCustPaymDetailedStatus getDetailedStatus_CC(MCRCustPaymTable _mcrCustPaymTable)
    {
        CreditCardAuthTrans         creditCardAuthTrans;
        MCRCustPaymDetailedStatus   retStatus = enum2str(_mcrCustPaymTable.Status);

        if (_mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard)
        {
            switch (_mcrCustPaymTable.Status)
            {
                case MCRCustPaymStatus::Authorized:
                    creditCardAuthTrans = CreditCardAuthTrans::mcrFindValidPreApproval(_mcrCustPaymTable.RecId);
                    if (creditCardAuthTrans)
                    {
                        if (creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved
                            || creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::NA)
                        {
                            retStatus = "@MCR30680";  // Pending partial settlement
                        }
                    }
                    break;
                case MCRCustPaymStatus::Declined:
                    creditCardAuthTrans = CreditCardAuthTrans::mcrFindLatest(_mcrCustPaymTable.RecId);
                    if (creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Declined
                        || creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Error
                        || creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::NA)
                    {
                        retStatus = enum2str(creditCardAuthTrans.ProcessorStatus);
                    }
                    break;
                case MCRCustPaymStatus::NotSubmitted:
                    if (_mcrCustPaymTable.getUnpostedAmount() < 0)
                    {
                        retStatus = "@MCR30891";  // Refund pending approval
                    }
                    break;
                case MCRCustPaymStatus::Paid:
                    retStatus = "@SYS79585"; // Settled
                    break;
                case MCRCustPaymStatus::Posted:
                    creditCardAuthTrans = CreditCardAuthTrans::mcrFindCharge(_mcrCustPaymTable.RecId);
                    if (creditCardAuthTrans)
                    {
                        if (creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::NA)
                        {
                            retStatus = "@MCR27555";  // Pending settlement
                        }
                        else if (creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Settled)
                        {
                            retStatus = "@SYS79585"; // Partially settled
                        }
                        else if (creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Error)
                        {
                            retStatus = "@MCR30430";  // Settlement failed
                        }
                    }
                    break;
            }
        }

        return retStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>