<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservationSummary_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetReservationSummary_PSN</c> class contains the business logic for the <c>BudgetReservationFinancialSummary_PSN</c> and the <c>BudgetReservationRelievingDetail_PSN</c> forms.
/// </summary>
public class BudgetReservationSummary_PSN
{
    BudgetReservationHeader_PSN                 budgetReservationHeader;
    BudgetReservationLine_PSN                   budgetReservationLine;
    BudgetReservationTmpFinancialSummary_PSN    budgetReservationTmpFinancialSummary;
    BudgetReservationTmpRelieveDetail_PSN       budgetReservationTmpRelieveDetail;

    FormReferenceGroupControl                   budgetReservationHeaderControl;
    FormReferenceGroupControl                   budgetReservationLineControl;

    Amount totalReserved;
    Amount totalRelieved;
    Amount totalRemaining;
    Amount totalFinalized;

    private BudgetReservationRelievingStatusType_PSN relievingStatusType;

    private boolean isBudgetReservationOpenReliefDetailsEnabled = isConfigurationkeyEnabled(configurationKeyNum(BudgetReservation_PSN));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>openRelievingDocumentForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the relieving document that references the budget reservation line.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The relieving document's source document line record ID referencing the budget reservation line.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Wrong use of function error is thrown if the passed in source document line record ID is not a purchase order,
    /// vendor invoice or purchase requisition record.
    /// </exception>
    public void openRelievingDocumentForm(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        SourceDocumentLine  sourceDocumentLine;
        Common              relievingDocument;
        MenuName            menuName;
        Args                args = new Args();
    
        if (_sourceDocumentLineRecId)
        {
            sourceDocumentLine = SourceDocumentLine::find(_sourceDocumentLineRecId);
    
            switch (sourceDocumentLine.SourceRelationType)
            {
                case tableNum(PurchLine):
                    relievingDocument = PurchTable::findSourceDocumentHeader(sourceDocumentLine.SourceDocumentHeader);
                    menuName = MenuItemDisplayStr(PurchTable);
                    break;
                case tableNum(VendInvoiceTrans):
                    relievingDocument = VendInvoiceJour::findSourceDocumentHeader(sourceDocumentLine.SourceDocumentHeader);
                    menuName = MenuItemDisplayStr(VendInvoiceJournal);
                    break;
                case tableNum(PurchReqLine):
                    relievingDocument = PurchReqTable::findBySourceDocumentHeader(sourceDocumentLine.SourceDocumentHeader);
                    menuName = MenuItemDisplayStr(PurchReqTable);
                    break;
                case tableNum(VendInvoiceInfoLine):
                    relievingDocument = VendInvoiceInfoTable::findSourceDocumentHeader(sourceDocumentLine.SourceDocumentHeader);
                    menuName = MenuItemDisplayStr(VendInvoiceInfoListPage);
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
    
            args.record(relievingDocument);
            args.lookupRecord(relievingDocument);
            new MenuFunction(menuName, MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservationHeader</Name>
				<Source><![CDATA[
    public BudgetReservationHeader_PSN parmBudgetReservationHeader(BudgetReservationHeader_PSN _budgetReservationHeader = budgetReservationHeader)
    {
        budgetReservationHeader = _budgetReservationHeader;
    
        return budgetReservationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservationHeaderControl</Name>
				<Source><![CDATA[
    public FormReferenceGroupControl parmBudgetReservationHeaderControl(FormReferenceGroupControl _budgetReservationHeaderControl = budgetReservationHeaderControl)
    {
        budgetReservationHeaderControl = _budgetReservationHeaderControl;
    
        return budgetReservationHeaderControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservationLine</Name>
				<Source><![CDATA[
    public BudgetReservationLine_PSN parmBudgetReservationLine(BudgetReservationLine_PSN _budgetReservationLine = budgetReservationLine)
    {
        budgetReservationLine = _budgetReservationLine;

        return budgetReservationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservationLineControl</Name>
				<Source><![CDATA[
    public FormReferenceGroupControl parmBudgetReservationLineControl(FormReferenceGroupControl _budgetReservationLineControl = budgetReservationLineControl)
    {
        budgetReservationLineControl = _budgetReservationLineControl;
    
        return budgetReservationLineControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservationSummaryTmp</Name>
				<Source><![CDATA[
    public BudgetReservationTmpFinancialSummary_PSN parmBudgetReservationSummaryTmp(
        BudgetReservationTmpFinancialSummary_PSN _budgetReservationTmpFinancialSummary = budgetReservationTmpFinancialSummary)
    {
        budgetReservationTmpFinancialSummary = _budgetReservationTmpFinancialSummary;
    
        return budgetReservationTmpFinancialSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservationTmpRelieveDetail</Name>
				<Source><![CDATA[
    public BudgetReservationTmpRelieveDetail_PSN parmBudgetReservationTmpRelieveDetail(
        BudgetReservationTmpRelieveDetail_PSN _budgetReservationTmpRelieveDetail = budgetReservationTmpRelieveDetail)
    {
        budgetReservationTmpRelieveDetail = _budgetReservationTmpRelieveDetail;
    
        return budgetReservationTmpRelieveDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalReserved</Name>
				<Source><![CDATA[
    public Amount parmTotalReserved(Amount _totalReserved = totalReserved)
    {
        totalReserved =  _totalReserved;
        return totalReserved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalRelieved</Name>
				<Source><![CDATA[
    public Amount parmTotalRelieved(Amount _totalRelieved = totalRelieved)
    {
        totalRelieved =  _totalRelieved;
        return totalRelieved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalRemaining</Name>
				<Source><![CDATA[
    public Amount parmTotalRemaining(Amount _totalRemaining = totalRemaining)
    {
        totalRemaining =  _totalRemaining;
        return totalRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalFinalized</Name>
				<Source><![CDATA[
    public Amount parmTotalFinalized(Amount _totalFinalized = totalFinalized)
    {
        totalFinalized =  _totalFinalized;
        return totalFinalized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRelievingStatusType</Name>
				<Source><![CDATA[
    internal BudgetReservationRelievingStatusType_PSN parmRelievingStatusType(BudgetReservationRelievingStatusType_PSN _relievingStatusType = relievingStatusType)
    {
        relievingStatusType = _relievingStatusType;
        return relievingStatusType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFinancialSummaryData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the reserved, relieved, remaining and finalized amounts into the temporary table
    /// against the budget reservation source document header and source document line values.
    /// </summary>
    public void populateFinancialSummaryData()
    {
        AmountMST                   reservedAmount;
        AmountMST                   relievedAmount;
        AmountMST                   remainingAmount;
        AmountMST                   finalizedAmount     = 0;
        BudgetReservation_PSN       budgetReservation   = budgetReservationHeader.getBudgetReservation();
    
        // Fetch the reserved amount.
        reservedAmount = BudgetReservationCalculateBalance_PSN::getJournalizedAmount(
            budgetReservationHeader.SourceDocumentHeader,
            budgetReservationLine.SourceDocumentLine);
    
        // Fetch the relieved amount.
        relievedAmount = BudgetReservationCalculateBalance_PSN::getPostedRelievedAmount(
            budgetReservationHeader.SourceDocumentHeader,
            budgetReservationLine.SourceDocumentLine);
    
        remainingAmount = reservedAmount - relievedAmount;
    
        // Determine the finalized amount.
        // The logic for determining the finalized amount is as follows: If the budget reservation is finalized then the finalized amount is the remaining
        // amount either for the line (if one is passed in) or for the whole budget reservation. If a budget reservation line is passed in (RecId isn't 0)
        // then if the line is finalized the finalized amount is the remaining amount on the line. If no line is passed in and the budget reservation isn't
        // finalized then the finalized amount is the total of the remaining amounts of the finalized lines (if any).
        if (budgetReservation.isDocumentFinalized())
        {
            finalizedAmount = remainingAmount;
        }
        else if (budgetReservationLine.RecId != 0)
        {
            if (SourceDocumentLine::find(budgetReservationLine.SourceDocumentLine).AccountingStatus == SourceDocumentLineAccountingStatus::Finalized)
            {
                finalizedAmount = remainingAmount;
            }
        }
        else
        {
            finalizedAmount = BudgetReservationSummary_PSN::getBudgetReservationFinalizedLinesAmount(budgetReservationHeader.SourceDocumentHeader);
        }
    
        remainingAmount -= finalizedAmount;

        this.insertSummaryDataByBudgetReservationLine(budgetReservationLine.RecId, reservedAmount, relievedAmount, remainingAmount, finalizedAmount);
        
        totalReserved += reservedAmount;
        totalRelieved += relievedAmount;
        totalRemaining += remainingAmount;
        totalFinalized += finalizedAmount;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSummaryDataByBudgetReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>BudgetReservationTmpFinancialSummary_PSN</c> table.
    /// </summary>
    /// <param name="_budgetReservationLine">
    /// The budget reservation line for which the financial summary record is created.
    /// </param>
    /// <param name="_reservedAmount">
    /// The amount reserved for the financial summary line.
    /// </param>
    /// </param>
    /// <param name="_relievedAmount">
    /// The amount relieved from the financial summary line.
    /// </param>
    /// </param>
    /// <param name="_remainingAmount">
    /// The remaining amount for the financial summary line.
    /// </param>
    /// </param>
    /// <param name="_finalizedAmount">
    /// The amount finalized for the financial summary line.
    /// </param>
    private void insertSummaryDataByBudgetReservationLine(BudgetReservationLineRecId_PSN _budgetReservationLine, 
                                            AmountCur _reservedAmount,
                                            AmountCur _relievedAmount,
                                            AmountCur _remainingAmount,
                                            AmountCur _finalizedAmount = 0)
    {
        budgetReservationTmpFinancialSummary.BudgetReservationLine = _budgetReservationLine;
        budgetReservationTmpFinancialSummary.ReservedAmount = _reservedAmount;
        budgetReservationTmpFinancialSummary.RelievedAmount = _relievedAmount;
        budgetReservationTmpFinancialSummary.RemainingAmount = _remainingAmount;
        budgetReservationTmpFinancialSummary.FinalizedAmount = _finalizedAmount;

        if (isBudgetReservationOpenReliefDetailsEnabled)
        {
            budgetReservationTmpFinancialSummary.CurrentRemaining = _remainingAmount - budgetReservationTmpFinancialSummary.OpenAmount;
        }

        budgetReservationTmpFinancialSummary.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRelievingDocumentsDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the list of documents and their amounts relieving a budget reservation document line.
    /// </summary>
    public void populateRelievingDocumentsDetail()
    {
        Map                                                  budgetReservationRelievingDocumentMap;
        MapEnumerator                                        budgetReservationRelievingDocumentMapEnumerator;
        BudgetReservationSourceDocumentAmountDetail_PSN      budgetResSourceDocAmountDetail;
        Amount totalOpenAmount;

        delete_from budgetReservationTmpRelieveDetail;

        if (isBudgetReservationOpenReliefDetailsEnabled && this.parmRelievingStatusType() == BudgetReservationRelievingStatusType_PSN::Open)
        {
            budgetReservationRelievingDocumentMap = Map::create(BudgetReservationSummary_PSN::fetchRelievingOpenDocumentDetails(
                budgetReservationHeader.SourceDocumentHeader,
                budgetReservationLine.SourceDocumentLine));
        }
        else
        {
            budgetReservationRelievingDocumentMap = Map::create(BudgetReservationSummary_PSN::fetchRelievingDocumentsDetails(
                budgetReservationHeader.SourceDocumentHeader,
                budgetReservationLine.SourceDocumentLine));
        }

        if (!budgetReservationRelievingDocumentMap.empty())
        {
            ttsBegin;
    
            budgetReservationRelievingDocumentMapEnumerator = budgetReservationRelievingDocumentMap.getEnumerator();
    
            while (budgetReservationRelievingDocumentMapEnumerator.moveNext())
            {
                budgetResSourceDocAmountDetail = budgetReservationRelievingDocumentMapEnumerator.currentValue();
    
                budgetReservationTmpRelieveDetail.ProductName           = budgetResSourceDocAmountDetail.parmItemName();
                budgetReservationTmpRelieveDetail.AccountingDate        = budgetResSourceDocAmountDetail.parmAccountingDate();
                budgetReservationTmpRelieveDetail.Amount                = budgetResSourceDocAmountDetail.parmAccountingCurrencyAmount();
                budgetReservationTmpRelieveDetail.LineNum               = budgetResSourceDocAmountDetail.parmLineNumber();
                budgetReservationTmpRelieveDetail.DocumentNumber        = budgetResSourceDocAmountDetail.parmDocumentNumber();
                budgetReservationTmpRelieveDetail.SourceDocumentLine    = budgetResSourceDocAmountDetail.parmSourceDocumentLine();

                if (isBudgetReservationOpenReliefDetailsEnabled && this.parmRelievingStatusType() == BudgetReservationRelievingStatusType_PSN::Open)
                {
                    budgetReservationTmpRelieveDetail.DocumentStatus = budgetResSourceDocAmountDetail.parmRelievingDocumentStatus();
                    totalOpenAmount += budgetReservationTmpRelieveDetail.Amount;
                }

                budgetReservationTmpRelieveDetail.insert();
            }
    
            ttsCommit;
        }

        if (isBudgetReservationOpenReliefDetailsEnabled)
        {
            delete_from budgetReservationTmpFinancialSummary;

            budgetReservationTmpFinancialSummary.OpenAmount = totalOpenAmount;
            this.populateFinancialSummaryData();
            select firstonly budgetReservationTmpFinancialSummary;
        }

        // Refresh the form datasource to display inserted records.
        if (FormDataUtil::getFormDataSource(budgetReservationTmpRelieveDetail))
        {
            FormDataUtil::getFormDataSource(budgetReservationTmpRelieveDetail).research(true);
        }

        if (isBudgetReservationOpenReliefDetailsEnabled && FormDataUtil::getFormDataSource(budgetReservationTmpFinancialSummary))
        {
            FormDataUtil::getFormDataSource(budgetReservationTmpFinancialSummary).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlsValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets control values on either the <c>BudgetReservationFinancialSummary_PSN</c> or the <c>BudgetReservationRelievingDetail_PSN</c> form,
    /// depending on which form the current class is being called from.
    /// </summary>
    public void setControlsValue()
    {
        budgetReservationHeaderControl.value(this.parmBudgetReservationHeader().RecId);
    
        budgetReservationLineControl.value(this.parmBudgetReservationLine().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BudgetReservationSummary_PSN</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>BudgetReservationSummary_PSN</c> class.
    /// </returns>
    private static BudgetReservationSummary_PSN construct()
    {
        return new BudgetReservationSummary_PSN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchRelievingDocumentsDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches all the relieving document details against a budget reservation header or a budget reservation line.
    /// </summary>
    /// <param name="_sourceDocumentHeaderRecId">
    /// A record ID of a record in the <c>SourceDocumentHeader</c> table.
    /// </param>
    /// <param name="_sourceDocumentLineRecId">
    /// A record ID of a record in the <c>SourceDocumentLine</c> table.
    /// </param>
    /// <returns>
    /// A container containing the relieving details against a budget reservation header or a budget reservation line.
    /// </returns>
    private static container fetchRelievingDocumentsDetails(
        SourceDocumentHeaderRecId   _sourceDocumentHeaderRecId,
        SourceDocumentLineRecId     _sourceDocumentLineRecId)
    {
        Amount                                              amountInAccountingCurrency;
        Amount                                              sourceDocumentAmount;
        SourceDocumentLine                                  budgetReservationSourceDocumentLine;
        SourceDocumentLine                                  relievingSourceDocumentLine;
        SourceDocumentLine                                  parentSourceDocumentLine;
        SourceDocumentLineItem                              relievingDocumentSourceDocumentLineItem;
        PurchOrderLineSourceDocumentLineItem                purchOrderLineSourceDocumentLineItem;
        VendorInvoiceLineSourceDocLineItem                  vendorInvoiceLineSourceDocLineItem;
        PurchReqSourceDocLineItem                           purchReqSourceDocLineItem;
        BudgetReservationSourceDocumentLineItem_PSN         budgetResLineSourceDocLineItem;
        AccountingDistribution                              relievingAccountingDistribution;
        AccountingDistribution                              budgetResAccountingDistribution;
        SubledgerJournalAccountEntryDistribution            relievingAccountEntryDistribution;
        SubledgerJournalAccountEntry                        relievingSubledgerJournalAccountEntry;
        CurrencyExchangeHelper                              currencyExchangeHelper;
        Name                                                itemName;
        Map                                                 budgetReservationRelievingDocumentMap;
        CurrencyCode                                        currencyCode = Ledger::accountingCurrency();
        SourceDocumentLineRecId                             parentSourceDocumentLineRecId;
        BudgetReservationSourceDocumentAmountDetail_PSN     budgetResSourceDocAmountDetail;
    
        if (_sourceDocumentLineRecId)
        {
            budgetReservationSourceDocumentLine = SourceDocumentLine::find(_sourceDocumentLineRecId);
        }
        else
        {
            budgetReservationSourceDocumentLine = SourceDocumentLine::findBySourceDocumentHeader(_sourceDocumentHeaderRecId);
        }
    
        Debug::assert(budgetReservationSourceDocumentLine.RecId != 0);
    
        budgetResLineSourceDocLineItem  = SourceDocumentLineItem::newFromSourceDocumentLine(budgetReservationSourceDocumentLine);
        LedgerRecId ledgerRecId         = Ledger::findByLegalEntity(budgetResLineSourceDocLineItem.parmLegalEntityRecId()).RecId;
        currencyExchangeHelper          = CurrencyExchangeHelper::newExchangeDate(ledgerRecId, budgetReservationSourceDocumentLine.ExchangeRateDate);

        budgetReservationRelievingDocumentMap = new Map(Types::Int64, Types::Class);

        // Get the relieving document information by looping through the jounalized accounting distributions
        // that reference the relieved budget reservation line's accounting distritbutions.
        while select SourceDocumentLine, TransactionCurrency, AccountingLegalEntity, AccountingDate, sum(TransactionCurrencyAmount) from relievingAccountingDistribution
            group by SourceDocumentLine, TransactionCurrency, AccountingLegalEntity, AccountingDate
            order by SourceDocumentLine asc
        exists join budgetResAccountingDistribution
            where (_sourceDocumentLineRecId == 0 || budgetResAccountingDistribution.SourceDocumentLine == _sourceDocumentLineRecId)
                && budgetResAccountingDistribution.SourceDocumentHeader == _sourceDocumentHeaderRecId
                && relievingAccountingDistribution.ReferenceDistribution == budgetResAccountingDistribution.RecId
                && relievingAccountingDistribution.ReferenceRole  == AccountingDistributionReferenceRole::Matching
        exists join relievingAccountEntryDistribution
            where relievingAccountEntryDistribution.AccountingDistribution == relievingAccountingDistribution.RecId
        exists join relievingSubledgerJournalAccountEntry
            where relievingAccountEntryDistribution.SubledgerJournalAccountEntry == relievingSubledgerJournalAccountEntry.RecId
                && relievingSubledgerJournalAccountEntry.Side == DebitCredit::Debit
        {
            amountInAccountingCurrency = currencyExchangeHelper.calculateCurrencyToCurrency(
                relievingAccountingDistribution.TransactionCurrency,
                currencyCode,
                relievingAccountingDistribution.TransactionCurrencyAmount,
                true);
    
            parentSourceDocumentLineRecId           = relievingAccountingDistribution.SourceDocumentLine;
            relievingSourceDocumentLine             = SourceDocumentLine::find(relievingAccountingDistribution.SourceDocumentLine);
            relievingDocumentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(relievingSourceDocumentLine);
    
            if (relievingDocumentSourceDocumentLineItem is TaxSourceDocSublineItem
                || relievingDocumentSourceDocumentLineItem is ChargeSourceDocLineItem)
            {
                // The taxes and charges should be grouped to the parent line so child line amounts are added to the parent's line amount.
                // Find the top parent line and add to its amount.
                parentSourceDocumentLine        = SourceDocumentLine::findTopParentSourceDocumentLine(relievingAccountingDistribution.SourceDocumentLine);
                parentSourceDocumentLineRecId   = parentSourceDocumentLine.RecId;
    
                if (budgetReservationRelievingDocumentMap.exists(parentSourceDocumentLineRecId))
                {
                    budgetResSourceDocAmountDetail = budgetReservationRelievingDocumentMap.lookup(parentSourceDocumentLineRecId);
    
                    sourceDocumentAmount = budgetResSourceDocAmountDetail.parmAccountingCurrencyAmount();
    
                    sourceDocumentAmount += amountInAccountingCurrency;
    
                    budgetResSourceDocAmountDetail.parmAccountingCurrencyAmount(sourceDocumentAmount);
    
                    budgetReservationRelievingDocumentMap.insert(parentSourceDocumentLineRecId, budgetResSourceDocAmountDetail);
                }
                else
                {
                    relievingDocumentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(parentSourceDocumentLine);
                    if (BudgetReservationChildReliefFlight::instance().isEnabled())
                    {
                        AccountingDistribution parentDistributions;
                        select firstonly TransactionCurrency, sum(TransactionCurrencyAmount) from parentDistributions
                            group by TransactionCurrency
                            where parentDistributions.SourceDocumentLine == parentSourceDocumentLine.RecId;

                        amountInAccountingCurrency += currencyExchangeHelper.calculateCurrencyToCurrency(
                            parentDistributions.TransactionCurrency,
                            currencyCode,
                            parentDistributions.TransactionCurrencyAmount,
                            true);
                    }
                }
            }

            if (relievingDocumentSourceDocumentLineItem is PurchOrderLineSourceDocumentLineItem)
            {
                purchOrderLineSourceDocumentLineItem = relievingDocumentSourceDocumentLineItem as PurchOrderLineSourceDocumentLineItem;
                itemName = purchOrderLineSourceDocumentLineItem.getItemName();
            }
            else if (relievingDocumentSourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
            {
                vendorInvoiceLineSourceDocLineItem = relievingDocumentSourceDocumentLineItem as VendorInvoiceLineSourceDocLineItem;
                itemName = vendorInvoiceLineSourceDocLineItem.getItemName();
            }
            else if (relievingDocumentSourceDocumentLineItem is PurchReqSourceDocLineItem)
            {
                purchReqSourceDocLineItem = relievingDocumentSourceDocumentLineItem as PurchReqSourceDocLineItem;
                itemName = purchReqSourceDocLineItem.parmItemName();
            }
    
            if (!budgetReservationRelievingDocumentMap.exists(parentSourceDocumentLineRecId))
            {
                budgetResSourceDocAmountDetail = BudgetReservationSourceDocumentAmountDetail_PSN::newForSourceDocumentLine(
                    itemName,
                    relievingAccountingDistribution.AccountingDate,
                    amountInAccountingCurrency,
                    relievingDocumentSourceDocumentLineItem.parmLineNum(),
                    relievingDocumentSourceDocumentLineItem.parmSourceDocument().parmDocumentNumber(),
                    parentSourceDocumentLineRecId);
    
                budgetReservationRelievingDocumentMap.insert(parentSourceDocumentLineRecId, budgetResSourceDocAmountDetail);
            }
        }
    
        return budgetReservationRelievingDocumentMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetReservationFinalizedLinesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the finalized amount for a budget reservation from the finalized lines.
    /// </summary>
    /// <param name="_sourceDocumentHeaderRecId">
    /// The source document header of the budget reservation header possibly having finalized lines.
    /// </param>
    /// <returns>
    /// The finalized amount for the budget reservation from the budget reservation lines.
    /// </returns>
    private static AmountMST getBudgetReservationFinalizedLinesAmount(SourceDocumentHeaderRefRecId _sourceDocumentHeaderRecId)
    {
        SourceDocumentLine          sourceDocumentLine;
        AmountMST                   finalizedAmount     = 0;
        AmountMST                   lineTotalAmount     = 0;
        AmountMST                   lineRelievedAmount  = 0;
    
        if (_sourceDocumentHeaderRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        // Process all of the finalized lines.
        while select RecId from sourceDocumentLine
            where sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeaderRecId
                && sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Finalized
        {
            lineTotalAmount = BudgetReservationCalculateBalance_PSN::getJournalizedAmount(
                _sourceDocumentHeaderRecId,
                sourceDocumentLine.RecId);
    
            lineRelievedAmount = BudgetReservationCalculateBalance_PSN::getPostedRelievedAmount(
                _sourceDocumentHeaderRecId,
                sourceDocumentLine.RecId);
    
            finalizedAmount += (lineTotalAmount - lineRelievedAmount);
        }
    
        return finalizedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetReservationHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetReservationSummary_PSN</c> class from the passed in budget reservation header table record.
    /// </summary>
    /// <param name="_budgetReservationHeader">
    /// The budget reservation header record to use when creating an instance of the <c>BudgetReservationSummary_PSN</c> class.
    /// </param>
    /// <returns>
    /// A <c>BudgetReservationSummary_PSN</c> class instance.
    /// </returns>
    public static BudgetReservationSummary_PSN newFromBudgetReservationHeader(BudgetReservationHeader_PSN _budgetReservationHeader)
    {
        BudgetReservationSummary_PSN budgetReservationSummary;
    
        if (_budgetReservationHeader.RecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        budgetReservationSummary = BudgetReservationSummary_PSN::construct();
        budgetReservationSummary.parmBudgetReservationHeader(_budgetReservationHeader);
    
        return budgetReservationSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetReservationSummary_PSN</c> class from the passed in budget reservation line table record.
    /// </summary>
    /// <param name="_budgetReservationLine">
    /// The budget reservation line record to use when creating a new <c>BudgetReservationSummary_PSN</c> class instance.
    /// </param>
    /// <returns>
    /// A new <c>BudgetReservationSummary_PSN</c> class instance.
    /// </returns>
    public static BudgetReservationSummary_PSN newFromBudgetReservationLine(BudgetReservationLine_PSN _budgetReservationLine)
    {
        BudgetReservationSummary_PSN budgetReservationSummary;
    
        if (_budgetReservationLine.RecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        budgetReservationSummary = BudgetReservationSummary_PSN::construct();
        budgetReservationSummary.parmBudgetReservationHeader(_budgetReservationLine.getBudgetReservationHeader());
        budgetReservationSummary.parmBudgetReservationLine(_budgetReservationLine);
    
        return budgetReservationSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchRelievingOpenDocumentDetails</Name>
				<Source><![CDATA[
    private static container fetchRelievingOpenDocumentDetails(
        SourceDocumentHeaderRecId _sourceDocumentHeaderRecid,
        SourceDocumentLineRecId _sourceDocumentLineRecid)
    {
        SourceDocumentLine budgetReservationSourceDocumentLine = BudgetReservationSummary_PSN::getSourceDocumentLine(_sourceDocumentLineRecid, _sourceDocumentHeaderRecid);

        Debug::assert(budgetReservationSourceDocumentLine.RecId != 0);

        CurrencyExchangeHelper currencyExchangeHelper = BudgetReservationSummary_PSN::getCurrencyExchangeHelper(budgetReservationSourceDocumentLine);
        Map budgetReservationRelievingDocumentMap = new Map(Types::Int64, Types::Class);
        CurrencyCode currencyCode = Ledger::accountingCurrency();

        Amount amountInAccountingCurrency;
        AccountingDistribution relievingAccountingDistribution;
        AccountingDistribution budgetResAccountingDistribution;
        SubledgerJournalAccountEntryDistribution relievingAccountEntryDistribution;
        SubledgerJournalAccountEntry relievingSubledgerJournalAccountEntry;

        while select SourceDocumentHeader, SourceDocumentLine, TransactionCurrency, AccountingLegalEntity, AccountingDate, sum(TransactionCurrencyAmount) from relievingAccountingDistribution
                group by SourceDocumentLine, TransactionCurrency, AccountingLegalEntity, AccountingDate
                order by SourceDocumentLine asc
            exists join budgetResAccountingDistribution
                where (_sourceDocumentLineRecId == 0 || budgetResAccountingDistribution.SourceDocumentLine == _sourceDocumentLineRecId)
                    && budgetResAccountingDistribution.SourceDocumentHeader == _sourceDocumentHeaderRecId
                    && relievingAccountingDistribution.ReferenceDistribution == budgetResAccountingDistribution.RecId
                    && relievingAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching
            notexists join relievingAccountEntryDistribution
                where relievingAccountEntryDistribution.AccountingDistribution == relievingAccountingDistribution.RecId
                join relievingSubledgerJournalAccountEntry
                    where relievingAccountEntryDistribution.SubledgerJournalAccountEntry == relievingSubledgerJournalAccountEntry.RecId
                        && relievingSubledgerJournalAccountEntry.Side == DebitCredit::Debit
        {
            amountInAccountingCurrency = currencyExchangeHelper.calculateCurrencyToCurrency(
                relievingAccountingDistribution.TransactionCurrency,
                currencyCode,
                relievingAccountingDistribution.TransactionCurrencyAmount,
                true);

            budgetReservationRelievingDocumentMap = BudgetReservationSummary_PSN::updateBudgetReservationMapForOpenDocuments(
                relievingAccountingDistribution,
                amountInAccountingCurrency,
                budgetReservationRelievingDocumentMap);
        }

        return budgetReservationRelievingDocumentMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLine</Name>
				<Source><![CDATA[
    private static SourceDocumentLine getSourceDocumentLine(SourceDocumentLineRecId _sourceDocumentLineRecId, SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        return (_sourceDocumentLineRecId > 0) ? SourceDocumentLine::find(_sourceDocumentLineRecId) : SourceDocumentLine::findBySourceDocumentHeader(_sourceDocumentHeaderRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyExchangeHelper</Name>
				<Source><![CDATA[
    private static CurrencyExchangeHelper getCurrencyExchangeHelper(SourceDocumentLine _budgetReservationSourceDocumentLine)
    {
        BudgetReservationSourceDocumentLineItem_PSN budgetResLineSourceDocLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(_budgetReservationSourceDocumentLine);
        LedgerRecId ledgerRecId = Ledger::findByLegalEntity(budgetResLineSourceDocLineItem.parmLegalEntityRecId()).RecId;

        return CurrencyExchangeHelper::newExchangeDate(ledgerRecId, _budgetReservationSourceDocumentLine.ExchangeRateDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOpenSourceDocumentAmountDetail</Name>
				<Source><![CDATA[
    private static BudgetReservationSourceDocumentAmountDetail_PSN createOpenSourceDocumentAmountDetail(
        SourceDocumentLineItem _relievingDocumentSourceDocumentLineItem,
        Amount _amountInAccountingCurrency,
        SourceDocumentLineRecId _parentSourceDocumentLineRecId,
        AccountingDate _relievingAccountingDistributionAccountingDate)
    {
        Name itemName;
        BudgetReservationRelievingDocumentStatus_PSN status;

        if (_relievingDocumentSourceDocumentLineItem is PurchOrderLineSourceDocumentLineItem)
        {
            PurchOrderLineSourceDocumentLineItem purchOrderLineSourceDocumentLineItem = _relievingDocumentSourceDocumentLineItem as PurchOrderLineSourceDocumentLineItem;
            itemName = purchOrderLineSourceDocumentLineItem.getItemName();
            status = enum2str(purchOrderLineSourceDocumentLineItem.getSourceDocumentStatus());
        }
        else if (_relievingDocumentSourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
        {
            VendorInvoiceLineSourceDocLineItem vendorInvoiceLineSourceDocLineItem = _relievingDocumentSourceDocumentLineItem as VendorInvoiceLineSourceDocLineItem;
            itemName = vendorInvoiceLineSourceDocLineItem.getItemName();
            status = enum2str(vendorInvoiceLineSourceDocLineItem.getSourceDocumentStatus());
        }
        else if (_relievingDocumentSourceDocumentLineItem is PurchReqSourceDocLineItem)
        {
            PurchReqSourceDocLineItem purchReqSourceDocLineItem = _relievingDocumentSourceDocumentLineItem as PurchReqSourceDocLineItem;
            itemName = purchReqSourceDocLineItem.parmItemName();
            status = enum2str(purchReqSourceDocLineItem.getSourceDocumentStatus());

        }

        BudgetReservationSourceDocumentAmountDetail_PSN budgetReservationSourceDocumentAmountDetail;

        if (_relievingDocumentSourceDocumentLineItem)
        {
            budgetReservationSourceDocumentAmountDetail = BudgetReservationSourceDocumentAmountDetail_PSN::newForOpenSourceDocumentLine(
                status,
                itemName,
                _relievingAccountingDistributionAccountingDate,
                _amountInAccountingCurrency,
                _relievingDocumentSourceDocumentLineItem.parmLineNum(),
                _relievingDocumentSourceDocumentLineItem.parmSourceDocument().parmDocumentNumber(),
                _parentSourceDocumentLineRecId);
        }

        return budgetReservationSourceDocumentAmountDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetReservationMapForOpenDocuments</Name>
				<Source><![CDATA[
    private static Map updateBudgetReservationMapForOpenDocuments(
        AccountingDistribution _relievingAccountingDistribution,
        Amount _amountInAccountingCurrency,
        Map _budgetReservationRelievingDocumentMap)
    {
        SourceDocumentLineRecId parentSourceDocumentLineRecId = _relievingAccountingDistribution.SourceDocumentLine;
        SourceDocumentLine relievingSourceDocumentLine = SourceDocumentLine::find(_relievingAccountingDistribution.SourceDocumentLine);
        SourceDocumentLineItem relievingDocumentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(relievingSourceDocumentLine);
        BudgetReservationSourceDocumentAmountDetail_PSN budgetReservationSourceDocumentAmountDetail;

        if (relievingDocumentSourceDocumentLineItem is TaxSourceDocSublineItem
            || relievingDocumentSourceDocumentLineItem is ChargeSourceDocLineItem)
        {
            SourceDocumentLine parentSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(_relievingAccountingDistribution.SourceDocumentLine);
            parentSourceDocumentLineRecId = parentSourceDocumentLine.RecId;

            if (_budgetReservationRelievingDocumentMap.exists(parentSourceDocumentLineRecId))
            {
                budgetReservationSourceDocumentAmountDetail = _budgetReservationRelievingDocumentMap.lookup(parentSourceDocumentLineRecId);
                Amount sourceDocumentAmount = budgetReservationSourceDocumentAmountDetail.parmAccountingCurrencyAmount();
                sourceDocumentAmount += _amountInAccountingCurrency;
                budgetReservationSourceDocumentAmountDetail.parmAccountingCurrencyAmount(sourceDocumentAmount);
                _budgetReservationRelievingDocumentMap.insert(parentSourceDocumentLineRecId, budgetReservationSourceDocumentAmountDetail);
            }
            else
            {
                relievingDocumentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(parentSourceDocumentLine);
            }
        }

        if (!_budgetReservationRelievingDocumentMap.exists(parentSourceDocumentLineRecId))
        {
            budgetReservationSourceDocumentAmountDetail = BudgetReservationSummary_PSN::createOpenSourceDocumentAmountDetail(
                relievingDocumentSourceDocumentLineItem,
                _amountInAccountingCurrency,
                parentSourceDocumentLineRecId,
                _relievingAccountingDistribution.AccountingDate);

            if (budgetReservationSourceDocumentAmountDetail)
            {
                _budgetReservationRelievingDocumentMap.insert(parentSourceDocumentLineRecId, budgetReservationSourceDocumentAmountDetail);
            }
        }

        return _budgetReservationRelievingDocumentMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>