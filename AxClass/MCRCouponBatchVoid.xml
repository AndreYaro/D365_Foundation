<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCouponBatchVoid</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRCouponBatchVoid</c> voids coupons.
/// </summary>
class MCRCouponBatchVoid extends RunBaseBatch implements BatchRetryable
{
    QueryRun            queryRun;
    LedgerVoucher       ledgerVoucher;
   // Packed variables
    MCRCouponId          mcrCouponId;
    MCRCouponExpDate     mcrCouponExpDate;
    ToDate              mcrToDate;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        MCRCouponId,
        MCRCouponExpDate,
        MCRToDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formCall</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all records in the <c>TmpMCRCoupon</c> buffer using
    /// the <c>MCRCouponPost_Void</c> class.
    /// </summary>
    /// <param name="_tmpMCRCoupon">
    /// A temporary table buffer that has all the coupons that need to be voided.
    /// </param>
    void formCall(TmpMCRCoupon _tmpMCRCoupon)
    {
        TmpMCRCoupon        tmpMCRCoupon;
        MCRCoupon           mcrCoupon;
        MCRCouponPost_Void  mcrCouponPost_Void;

        tmpMCRCoupon.setTmpData(_tmpMCRCoupon);

        ttsBegin;
        while select MCRCouponId from tmpMCRCoupon
                where tmpMCRCoupon.MCRMark == NoYes::Yes
            join firstonly forupdate mcrCoupon
                where mcrCoupon.MCRCouponId == tmpMCRCoupon.MCRCouponId
        {
            // Post before voiding record since validate post ignores voided coupons
            mcrCouponPost_Void = new MCRCouponPost_Void(MCRCoupon::find(tmpMCRCoupon.MCRCouponId));
            mcrCouponPost_Void.post();

            mcrCoupon.MCRCouponVoided = NoYes::Yes;
            mcrCoupon.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        queryRun =  new QueryRun(queryStr(MCRCoupon));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        QueryBuildDataSource    qbdsCoupons;
        Query                   queryCoupons = new Query();

        super();

        qbdsCoupons = queryCoupons.addDataSource(tableNum(MCRCoupon));
        qbdsCoupons.addRange(fieldNum(MCRCoupon, mcrCouponId));
        qbdsCoupons.addRange(fieldNum(MCRCoupon, mcrToDate));
        qbdsCoupons.addRange(fieldNum(MCRCoupon, mcrCouponExpDate));
        queryRun = new QueryRun(queryCoupons);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openTmpMCRCouponForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes method to open the <c>tmpMCRCoupon</c> form.
    /// </summary>
    /// <param name="_tmpMCRCoupon">
    /// The <c>tmpMCRCoupon</c> record for which to open the form.
    /// </param>
    protected void openTmpMCRCouponForm(TmpMCRCoupon _tmpMCRCoupon)
    {
        MCRCouponBatchVoid::openTmpMCRCoupon(_tmpMCRCoupon, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        MCRCoupon              mcrCoupon;
        TmpMCRCoupon           tmpMCRCoupon;

        RecordSortedList        recordSortedList = new RecordSortedList(tableNum(TmpMCRCoupon));
        Query                   query = new Query();

        QueryBuildDataSource    qbdsCoupons;
        boolean                 recordfound = false;

        try
        {
            qbdsCoupons = this.queryRun().query().dataSourceNo(1);
            ttsBegin;
            while (queryRun.next())
            {
                mcrCoupon = queryRun.get(tableNum(MCRCoupon));
                if (mcrCoupon.MCREnabled == NoYes::Yes
                && mcrCoupon.MCRCouponVoided == NoYes::No)
                {
                    tmpMCRCoupon.MCRCouponId = mcrCoupon.MCRCouponId;
                    tmpMCRCoupon.MCRCouponDesc = mcrCoupon.MCRCouponDesc;
                    tmpMCRCoupon.MCRCouponExpDate = mcrCoupon.MCRCouponExpDate;
                    tmpMCRCoupon.MCRCouponValue = MCRCouponDiscount::findLargestAmount(mcrCoupon.MCRCouponId);
                    tmpMCRCoupon.MCRToDate = mcrCoupon.MCRToDate;
                    tmpMCRCoupon.MCRMark = NoYes::Yes;
                    tmpMCRCoupon.insert();
                    tmpMCRCoupon.clear();
                    recordfound = true;
                }
            }
            ttsCommit;

            // call tmpform
            if (recordfound)
            {
                this.openTmpMCRCouponForm(tmpMCRCoupon);
            }
            else
            {
                info("@MCR36978");
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::Error)
        {// dummy statement to remove prevent warning
            recordfound = recordfound;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container   packedQuery;
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = packedClass;
                if (!packedQuery)
                    return false;
                queryRun = new QueryRun(packedQuery);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRCouponBatchVoid construct()
    {
        return new MCRCouponBatchVoid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@MCR25602";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        MCRCouponBatchVoid          mcrCouponBatchVoid;
        mcrCouponBatchVoid = MCRCouponBatchVoid::construct();
        if (mcrCouponBatchVoid.prompt())
            mcrCouponBatchVoid.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openTmpMCRCoupon</Name>
				<Source><![CDATA[
    private static void openTmpMCRCoupon(TmpMCRCoupon _tmpMCRCoupon, Object _caller)
    {
        Args                    formArgs;
        FormRun                 formRun;

        formArgs = new Args(formStr(TmpMCRCoupon));
        formArgs.record(_tmpMCRCoupon);
        formArgs.caller(_caller);
        formRun = classfactory.formRunClass(formArgs);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>