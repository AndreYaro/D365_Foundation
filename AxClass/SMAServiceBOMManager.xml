<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMAServiceBOMManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMAServiceBOMManager extends RunBase
{
    SMATemplateBOMId            templateBOMId;
    SMAServiceBOMAction         serviceBOMAction;
    SMAServiceObjectRelation    serviceObjectRelation;
    DialogRunbase               dialog;
    DialogField                 dialogTemplateBOMId;
    boolean                     createServiceBOM;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        templateBOMId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createServiceBOM</Name>
				<Source><![CDATA[
    protected void createServiceBOM()
    {
        // Select a Template BOM to attach
        if (this.prompt())
        {
            if (templateBOMId)
            {
                this.updateServiceBOM(templateBOMId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteServiceBOM</Name>
				<Source><![CDATA[
    protected void deleteServiceBOM()
    {
        // Select a Template BOM to delete
        SMAServiceObjectRelation    serviceBOM;
        SMAServiceBOMTable          serviceBOMlines;
        SMAServiceBOMChange         serviceBOMhistory;

        ttsbegin;

        // Delete history for service BOm
        while select forupdate serviceBOMhistory where
                    serviceBOMhistory.ServiceBOMId  == serviceObjectRelation.TemplateBOMId &&
                    serviceBOMhistory.ServiceObjectRelationId      == serviceObjectRelation.ServiceObjectRelationId
        {
            serviceBOMhistory.doDelete();
        }

        // Delete service BOM lines
        while select forupdate serviceBOMlines where
                    serviceBOMlines.ServiceBOMId    == serviceObjectRelation.TemplateBOMId &&
                    serviceBOMlines.ServiceObjectRelationId        == serviceObjectRelation.ServiceObjectRelationId
        {
            serviceBOMlines.doDelete();
        }

        // Delete service BOm
        serviceBOM = SMAServiceObjectRelation::find(serviceObjectRelation.ServiceObjectRelationId, true);

        serviceBOM.TemplateBOMId = '';
        serviceBOM.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = this.dialogInternal(dialog);

        switch (serviceBOMAction)
        {
            case SMAServiceBOMAction::Attach:
                // Select Template BOm
                dialog.caption("@SYS93937");
                dialogTemplateBOMId  = dialog.addFieldValue(extendedTypeStr(SMATemplateBOMId), '');
                break;

            case SMAServiceBOMAction::Move:
                // Create Template BOm
                dialog.caption("@SYS87079");
                break;

            default:
                // "Invalid argument!"
                throw error("@SYS111577");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existServiceBOM</Name>
				<Source><![CDATA[
    protected boolean existServiceBOM()
    {
        return (serviceObjectRelation.TemplateBOMId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        templateBOMId    = dialogTemplateBOMId.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveServiceBOM</Name>
				<Source><![CDATA[
    protected void moveServiceBOM()
    {
        SMAServiceObjectRelation    newDesination;
        SMAServiceObjectRelation    serviceBOM;
        SMAServiceObjectRelation    newServiceBOM;
        SMAServiceBOMTable          serviceBOMlines;
        SMAServiceBOMChange         serviceBOMhistory;

        newDesination = this.selectDestinationServiceBOM();

        if (newDesination)
        {
            if (newDesination.TemplateBOMId)
            {
                // Selected service object relation already has template BOm
                throw error("@SYS93936");
            }

            ttsbegin;

            // Move history for service BOm
            while select forupdate serviceBOMhistory where
                serviceBOMhistory.ServiceBOMId              == serviceObjectRelation.TemplateBOMId &&
                serviceBOMhistory.ServiceObjectRelationId   == serviceObjectRelation.ServiceObjectRelationId
            {
                serviceBOMhistory.ObjectId                  = newDesination.ServiceObjectId;
                serviceBOMhistory.ServiceObjectRelationId   = newDesination.ServiceObjectRelationId;
                serviceBOMhistory.doUpdate();
            }

            // Move active service BOM lines
            while select forupdate serviceBOMlines where
                serviceBOMlines.ServiceBOMId    == serviceObjectRelation.TemplateBOMId &&
                serviceBOMlines.ServiceObjectRelationId     == serviceObjectRelation.ServiceObjectRelationId
            {
                serviceBOMlines.ObjectId                    = newDesination.ServiceObjectId;
                serviceBOMlines.ServiceObjectRelationId     = newDesination.ServiceObjectRelationId;
                serviceBOMhistory.ServiceObjectRelationId   = newDesination.ServiceObjectRelationId;
                serviceBOMlines.doUpdate();
            }

            // Update service BOm
            newServiceBOM = SMAServiceObjectRelation::find(newDesination.ServiceObjectRelationId, true);
            newServiceBOM.TemplateBOMId = serviceObjectRelation.TemplateBOMId;
            newServiceBOM.update();

            serviceBOM = SMAServiceObjectRelation::find(serviceObjectRelation.ServiceObjectRelationId, true);

            serviceBOM.TemplateBOMId = '';

            serviceBOM.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(SMAServiceBOMAction _serviceBOMAction, SMAServiceObjectRelation _buffer = null)
    {
        super();

        serviceBOMAction        = _serviceBOMAction;
        serviceObjectRelation   = _buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = connull();

        return [#CurrentVersion, #CurrentList] + [pack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        switch (serviceBOMAction)
        {
            case SMAServiceBOMAction::Attach:
                if (this.existServiceBOM())
                {
                    // Service object relation already has Template BOM attached
                    throw error("@SYS93936");
                }
                this.createServiceBOM();
                break;

            case SMAServiceBOMAction::Delete:
                if (!this.existServiceBOM())
                {
                    // There is no Template attached to service object relation.
                    throw error("@SYS94164");
                }

                // Are you sure you want to delete service BOM lines together with Service BOM history?
                if (Box::yesNo("@SYS93957", DialogButton::No) == DialogButton::Yes)
                {
                    this.deleteServiceBOM();
                }

                break;

            case SMAServiceBOMAction::Move:
                if (!this.existServiceBOM())
                {
                    // There is no Template attached to service object relation.
                    throw error("@SYS94164");
                }
                this.moveServiceBOM();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDestinationServiceBOM</Name>
				<Source><![CDATA[
    protected SMAServiceObjectRelation selectDestinationServiceBOM()
    {
        Args                        args;
        FormRun                     formRun;
        SMAServiceObjectRelation    newRelation;

        args = new Args(formstr(SMAServiceObjectRelationSelect));
        args.caller(this);
        args.parm(int2str(serviceObjectRelation.RelTableId));

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();

        if (formRun.closedOK())
        {
            // Get selectedstage from form
            newRelation = formRun.selectedRelation();
        }

        return newRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        int         version   = RunBase::getVersion(_packedClass);
        container   packedQuery = connull();

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, packedQuery] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceBOM</Name>
				<Source><![CDATA[
    protected void updateServiceBOM(SMATemplateBOMId _templateBOMId)
    {
        SMAServiceObjectRelation    serviceBOM;

        ttsbegin;

        serviceBOM = SMAServiceObjectRelation::find(serviceObjectRelation.ServiceObjectRelationId, true);

        serviceBOM.TemplateBOMId = _templateBOMId;
        serviceBOM.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SMAServiceBOMManager construct(SMAServiceBOMAction _serviceBOMAction, Common _buffer = null)
    {
        SMAServiceBOMManager        serviceBOMManager = null;
        SMAServiceObjectRelation    serviceObjectRelation;

        switch (_buffer.TableId)
        {
            case tablenum(SMAServiceObjectRelation):
                serviceObjectRelation = _buffer;
                serviceBOMManager = new SMAServiceBOMManager(_serviceBOMAction, serviceObjectRelation);
                break;

            default:
                // Class %1 must be called with caller.
                throw error(strfmt("@SYS53926", classStr(SMAServiceBOMManager)));
        }

        return serviceBOMManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SMAServiceBOMManager    serviceBOMManager;
        SMAServiceBOMAction     serviceBOMAction;

        if (_args)
        {
            if (_args.parmEnumType() == enumnum(SMAServiceBOMAction))
            {
                serviceBOMAction = _args.parmEnum();

                if (_args.record())
                {
                    serviceBOMManager = SMAServiceBOMManager::construct(serviceBOMAction, _args.record());

                    if (serviceBOMManager)
                    {
                        serviceBOMManager.runOperation();

                        if (serviceBOMAction == SMAServiceBOMAction::Move)
                        {
                            _args.caller().refreshDatasource();
                        }
                        else
                        {
                            // Update form view
                            _args.caller().rereadDatasource();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>