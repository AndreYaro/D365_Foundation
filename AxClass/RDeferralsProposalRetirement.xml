<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsProposalRetirement</Name>
	<SourceCode>
		<Declaration><![CDATA[
[RDeferralsProposalFactory(RDeferralsTransType::Retired, '')]
public class rDeferralsProposalRetirement extends RDeferralsProposal implements BatchRetryable
{
    boolean         inferior;
    DialogField     dialogInferior;

    protected const Version CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates journal lines.
    /// </summary>
    public void createJournalLines()
    {
        RDeferralsLedgerAccounts rDeferralsLedgerAccounts;
        RDeferralsAmount         rDeferralsAmount;
        LedgerJournalTrans       ledgerJournalTrans;
        LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferrals;
        TransDate                transDate = inferior ? deferralsBook.RetirementDate : runDate;
        container                ledgerAccounts;

        if (! deferralsBook.PostingProfile ||
            deferralsBook.Depreciate       ||
            deferralsBook.StartDeferralsDate > runDate)
            return;

        if (deferralsBook.Status != RDeferralsStatus::Open)
            return;

        if (inferior && (deferralsBook.RetirementDate == dateNull() || deferralsBook.RetirementDate > runDate))
            return;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00093, funcName());

        ttsbegin;
        rDeferralsJournal.createVoucher();

        while select rDeferralsLedgerAccounts
            order by AccountCode desc
            where rDeferralsLedgerAccounts.PostingProfile     == deferralsBook.PostingProfile         &&
                  rDeferralsLedgerAccounts.DeferralsTransType == RDeferralsTransType::Retired         &&
                  ((rDeferralsLedgerAccounts.AccountCode      == RDeferralsTableGroupAllBook::Table   &&
                    rDeferralsLedgerAccounts.Num              == deferralsBook.DeferralsId)           ||
                   (rDeferralsLedgerAccounts.AccountCode      == RDeferralsTableGroupAllBook::GroupId &&
                    rDeferralsLedgerAccounts.Num              == deferralsBook.DeferralsGroupId)      ||
                   (rDeferralsLedgerAccounts.AccountCode      == RDeferralsTableGroupAllBook::Book    &&
                    rDeferralsLedgerAccounts.Num              == deferralsBook.DeferralsBookId)       ||
                   rDeferralsLedgerAccounts.AccountCode       == RDeferralsTableGroupAllBook::All)
        {
            if (conFind(ledgerAccounts, rDeferralsLedgerAccounts.PostValue))
                continue;

            rDeferralsAmount = RDeferralsRetirementValue::postValue(deferralsBook.DeferralsId,
                                                                    deferralsBook.DeferralsBookId,
                                                                    rDeferralsLedgerAccounts.PostValue,
                                                                    transDate);

            rDeferralsAmount = RDeferralsProposal::roundAmount(deferralsBook,
                                                               rDeferralsAmount);
            if (rDeferralsAmount)
            {
                rDeferralsJournal.createTrans(-rDeferralsAmount,
                                              deferralsBook,
                                              transDate,
                                              enum2str(rDeferralsLedgerAccounts.PostValue),
                                              rDeferralsLedgerAccounts.DeferralsLedgerDimension,
                                              offsetDefaultAccount);
                ledgerJournalTrans = rDeferralsJournal.ledgerJournalTrans();
                ledgerJournalTrans_RDeferrals = rDeferralsJournal.ledgerJournalTrans_RDeferrals();

                if (!ledgerJournalTrans.OffsetLedgerDimension)
                {
                    ledgerJournalTrans.parmOffsetLedgerDimension(rDeferralsLedgerAccounts.DeferralsOffsetLedgerDimension ?
                                                                LedgerDimensionFacade::serviceCreateLedgerDimension(rDeferralsLedgerAccounts.DeferralsOffsetLedgerDimension, ledgerJournalTrans.DefaultDimension)
                                                             : 0);
                }
                ledgerJournalTrans_RDeferrals.ToFromRecId = ledgerJournalTrans.RecId;
                ledgerJournalTrans.update();
                ledgerJournalTrans_RDeferrals.update();

                ledgerAccounts = conIns(ledgerAccounts, 1, rDeferralsLedgerAccounts.PostValue);
            }
        }

        if (ledgerJournalTrans)
        {
            ledgerJournalTrans_RDeferrals.ToFromRecId = 0;
            ledgerJournalTrans_RDeferrals.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets retirement transaction type.
    /// </summary>
    /// <returns>RDeferralsTransType::Retired.</returns>
    public RDeferralsTransType deferralsTransType()
    {
        return RDeferralsTransType::Retired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows retirement dialog. 
    /// </summary>
    /// <returns>Dialog object.</returns>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@SYS67400");

        dialogRunDate.label("@SYS67457");
        dialogRunDate.helpText("@GLS107160");

        dialogInferior = dialog.addField(extendedTypeStr(NoYesId), "@GLS107204", "@GLS107205");

        this.addCorrectionGroup(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        inferior = dialogInferior.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _runProposal = queryRun)
    {

        _runProposal.query().dataSourceNo(1).findRange(fieldNum(RDeferralsBook, Status)).value(queryValue(RDeferralsStatus::Open));
        super (_runProposal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, inferior, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version     = conpeek(packedClass,1);
        container       base;
        boolean         ret;

        switch (version)
        {
            case CurrentVersion:
                [version, inferior, base] = packedClass;
                ret = super(base);
                break;
            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>