<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashReceiptNumLV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class allows the user to change the receipt numbers on posted cash transactions.
/// </summary>
public class CashReceiptNumLV extends RunBaseBatch implements BatchRetryable
{
    RCashTrans              cashTrans;
    DialogField             dialogBatchId;
    DialogField             dialogNum;
    NumberSequenceFormat    cashReceiptNum;
    CashReceiptTableRecId   cashReceiptTableRecId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        cashReceiptNum,
        cashReceiptTableRecid
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogBatchId   = dialog.addFieldValue(extendedTypeStr(CashReceiptTableRecId),
                                               cashTrans.LvCashReceiptTable,
                                               "@GLS113280",
                                               "@GLS113281");

        dialogNum       = dialog.addFieldValue(extendedTypeStr(CashReceiptNumberLV),
                                               cashTrans.CashReceiptNumLV,
                                               "@GLS113232",
                                               "@GLS113282");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method extracts the dialog parameters and saves them in class variables.
    /// </summary>
    /// <returns>
    ///  Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        cashReceiptTableRecId       = dialogBatchId.value();
        cashReceiptNum              = dialogNum.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCashTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of table RCashTrans.
    /// </summary>
    /// <param name="_cashTrans">
    /// The new value of table RCashTrans; optional.
    /// </param>
    /// <returns>
    ///  The current value of table RCashTrans.
    /// </returns>
    public RCashTrans parmCashTrans(RCashTrans _cashTrans = cashTrans)
    {
        cashTrans = _cashTrans;
        return cashTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The purpose of this dialog is to update the cash receipt number for the cash transaction.
    /// since the record is non editable, the run method verifies if the cash receipt entered
    /// is valid and then updates the cash transaction.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        RCashTrans                  rCashTrans;
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_RCash    ledgerJournalTrans_RCash;
        boolean                     result = true;

        super();

        try
        {
            ttsbegin;

            if (cashReceiptNum && cashReceiptNum != cashTrans.CashReceiptNumLV)
            {
                result = LvCashReceiptTrans::checkCashReceiptTableNum(cashReceiptTableRecId, cashReceiptNum, cashTrans.TransDate);
            }

            if (result)
            {
                update_recordset rCashTrans
                    setting LvCashReceiptTable       = cashReceiptTableRecId,
                            CashReceiptNumLV         = cashReceiptNum
                    where rCashTrans.RecId == cashTrans.RecId;

                update_recordset ledgerJournalTrans_RCash
                    setting LvCashReceiptTable      = cashReceiptTableRecId,
                            CashReceiptNumLV        = cashReceiptNum
                    where ledgerJournalTrans.Voucher        == cashTrans.Voucher
                       && ledgerJournalTrans.TransDate      == cashTrans.TransDate
                    join ledgerJournalTrans_RCash
                        where ledgerJournalTrans_RCash.RefRecId     == ledgerJournalTrans.RecId &&
                              ledgerJournalTrans_RCash.DocType      == cashTrans.DocType        &&
                              ledgerJournalTrans_RCash.CashDocId    == cashTrans.DocId;
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS113283";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RCashTrans          rCashTrans;
        FormObjectSet       dataSource;
        CashReceiptNumLV    cashReceiptNum = new CashReceiptNumLV();

        if (! _args || ! _args.record() || _args.dataset() != tableNum(RCashTrans))
        {
            throw error(Error::missingRecord(tableStr(RCashTrans)));
        }

        rCashTrans = _args.record();
        cashReceiptNum.parmCashTrans(rCashTrans);

        if (cashReceiptNum.prompt())
        {
            cashReceiptNum.runOperation();
        }

        dataSource = FormDataUtil::getFormDataSource(_args.record());
        dataSource.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>