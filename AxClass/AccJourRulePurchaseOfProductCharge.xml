<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRulePurchaseOfProductCharge</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::Charge),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ChargeVariance)
]
class AccJourRulePurchaseOfProductCharge extends AccountingJournalizingRule
{
    MarkupTable                 markupTable;
    MarkupTrans                 markupTrans;
    SourceDocumentLineItem      parentSourceDocumentLineItem;
    AccountingJournalizingRule  parentAccountingJournalizingRule;
    boolean                     useAccountingDistributionDimensionValues;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUsePartyMainAccDimensionListProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a party amount specific main account dimension list provider can be used to
    /// derive main account dimension values required for classifying the financial consequences of source
    /// document amounts assigned to a party in an economic exchange.
    /// </summary>
    /// <returns>
    /// true if a the main account list provider can be used; otherwise, false.
    /// </returns>
    public boolean canUsePartyMainAccDimensionListProvider()
    {
        boolean ret;
        boolean canUseEmplMainAccDimListProvider;

        ret = super();

        if (this.parmIsCountryRegionEEandRU())
        {
            canUseEmplMainAccDimListProvider = AccountingRule_RU::canUseEmplMainAccDimListProvider_RU(sourceDocumentLineItem);
        }

        return ret && !canUseEmplMainAccDimListProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalAccountEntryLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger account to use to enter a subledger journal entry.
    /// </summary>
    /// <param name="_defaultLedgerDimension">
    /// The default ledger dimension.
    /// </param>
    /// <param name="_accountingDistributionLedgerDimension">
    /// The accounting distribution ledger dimension.
    /// </param>
    /// <returns>
    /// A <c>LedgerDimensionAccount</c> object.
    /// </returns>
    public LedgerDimensionAccount getJournalAccountEntryLedgerDimension(LedgerDimensionDefaultAccount _defaultLedgerDimension, LedgerDimensionAccount _accountingDistributionLedgerDimension)
    {
        LedgerDimensionAccount                  ret;

        if (markupTable.RecId != 0)
        {
            if (markupTable.CustType != MarkupType::CustVend)
            {
                switch (markupTable.VendType)
                {
                    case MarkupType::LedgerAccount:
                        if (markupTable.VendPosting == this.parmJournalizingCurrentLedgerPostingType())
                        {
                            _defaultLedgerDimension = markupTable.IsLetterOfCredit_SA == NoYes::Yes ? this.getVendBankChargeLedgerDimension_SA() : markupTable.VendorLedgerDimension;
                        }
                        break;
                }
            }
        }

        ret = super(_defaultLedgerDimension, _accountingDistributionLedgerDimension);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendBankChargeLedgerDimension_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves ledger dimension for bank charge.
    /// </summary>
    /// <returns>Ledger dimension from bank document posting profile, if any.</returns>
    protected DimensionDynamicDefaultAccount getVendBankChargeLedgerDimension_SA()
    {
        BankDocumentFacilityTypeRefRecId facilityTypeId =  this.getBankDocumentFacilityTypeIdByTransId_SA(markupTrans.TransRecId);
        BankDocumentPosting bankDocumentPostingProfile = BankDocumentPosting::findByFacilityType(facilityTypeId);
        DimensionDynamicDefaultAccount vendorLedgerDimension = bankDocumentPostingProfile.MiscChargesLedgerDimension;

        if (!vendorLedgerDimension)
        {
            warning("@ApplicationSuite_Localization:BankDocumentPostingProfileNotSet");
        }

        return vendorLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentFacilityTypeIdByTransId_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets bank document facility type used for markup of bank charge type.
    /// </summary>
    /// <param name = "_transRecId">The Id of original transaction the markup is related to.</param>
    /// <returns>Bank facility type Id.</returns>
    protected BankDocumentFacilityTypeRefRecId getBankDocumentFacilityTypeIdByTransId_SA(RecId _transRecId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchLine purchLine;
        BankLCImport bankLCImport;
        BankDocumentFacilityAgreementLine bankDocumentFacilityAgreementLine;

        select firstonly BankDocumentFacilityType from bankDocumentFacilityAgreementLine
            exists join bankLCImport
                where bankLCImport.BankDocumentFacilityAgreementLine == bankDocumentFacilityAgreementLine.RecId
            exists join purchLine
                where purchLine.PurchId == bankLCImport.PurchTable
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.PurchLineRecId == purchLine.RecId
                    && vendInvoiceInfoLine.RecId == _transRecId;

        return bankDocumentFacilityAgreementLine.BankDocumentFacilityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the accounting rule.
    /// </summary>
    protected void initialize()
    {
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceJour         VendInvoiceJour;
        ChargeSourceDocLineItem localChargeSourceDocLineItem;

        super();

        localChargeSourceDocLineItem = this.parmSourceDocumentLineItem() as ChargeSourceDocLineItem;
        if (localChargeSourceDocLineItem)
        {
            markupTrans = localChargeSourceDocLineItem.parmMarkupTrans();
            markupTable = localChargeSourceDocLineItem.parmMarkupTable();

            switch (markupTrans.TransTableId)
            {
                case tableNum(VendInvoiceInfoTable):
                    vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(markupTrans.TransRecId);
                    parentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(vendInvoiceInfoTable);
                    break;
                case tableNum(VendInvoiceJour):
                    vendInvoiceJour = VendInvoiceJour::findRecId(markupTrans.TransRecId);
                    parentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(vendInvoiceJour);
                    break;
                case tableNum(VendInvoiceInfoSubTable):
                    vendInvoiceInfoTable = VendInvoiceInfoSubTable::findRecId(markupTrans.TransRecId).vendInvoiceInfoTable();
                    parentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(vendInvoiceInfoTable);
                    break;
                case tableNum(VendInvoiceInfoLine):
                    parentSourceDocumentLineItem = this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem();
                    Debug::assert(parentSourceDocumentLineItem !=null);
                    break;
                case tableNum(VendInvoiceTrans):
                    parentSourceDocumentLineItem = this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem();
                    Debug::assert(parentSourceDocumentLineItem !=null);
                    break;
                default:
                    parentSourceDocumentLineItem = this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem();
                    Debug::assert(parentSourceDocumentLineItem !=null);
            }

            parentAccountingJournalizingRule = AccountingJournalizingRule::newRule(parentSourceDocumentLineItem, MonetaryAmount::ExtendedPrice);

            if (markupTable && markupTable.VendType != MarkupType::CustVend)
            {
                // Use AccountingDistribution financial dimension because the miscellaneous charge code does not post to vendor summary account.
                useAccountingDistributionDimensionValues = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionValuesUsedForSummaryAccount</Name>
				<Source><![CDATA[
    public DimensionValuesUsedForSummaryAccount parmDimensionValuesUsedForSummaryAccount(boolean _setValue = false, DimensionValuesUsedForSummaryAccount _dimensionValuesUsedForSummaryAccount = 0)
    {
        DimensionValuesUsedForSummaryAccount ret;

        if (_setValue && useAccountingDistributionDimensionValues)
        {
            // Override the general ledger parameter financial dimension "Values used for summary account" setting to
            // AccountingDistribution because the miscellaneous charge code does not post to vendor summary account.
            ret = super(_setValue, DimensionValuesToUseForSummaryAccount::AccountingDistributions);
        }
        else
        {
            ret = super(_setValue, _dimensionValuesUsedForSummaryAccount);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalizingDefLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmJournalizingDefLedgerPostingType()
    {
        LedgerPostingType journalizingDefLedgerPostingType;

        journalizingDefLedgerPostingType = LedgerPostingType::VendBalance;
        // <GEERU>
        if (this.parmIsCountryRegionEEandRU())
        {
            if (AccountingRule_RU::canUseEmplMainAccDimListProvider_RU(sourceDocumentLineItem))
            {
                journalizingDefLedgerPostingType = LedgerPostingType::EmplBalance_RU;
            }
        }
        // </GEERU>
        return journalizingDefLedgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        LedgerPostingType markupPostingType;

        markupPostingType = LedgerPostingType::VendBalance;

        if (markupTable.RecId != 0)
        {
            if (markupTable.CustType != MarkupType::CustVend)
            {
                switch (markupTable.VendType)
                {
                    case MarkupType::LedgerAccount:
                        markupPostingType = markupTable.VendPosting;
                        break;

                    case MarkupType::Item:
                        markupPostingType = parentAccountingJournalizingRule.parmLedgerPostingType();
                        break;
                }
            }
        }
        // <GEERU>
        if (this.parmIsCountryRegionEEandRU())
        {
            if (AccountingRule_RU::canUseEmplMainAccDimListProvider_RU(sourceDocumentLineItem))
            {
                markupPostingType = LedgerPostingType::EmplBalance_RU;
            }
        }
        // </GEERU>
        return markupPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit     side = DebitCredit::Credit;

        if (this.parmAccountingdistribution().TransactionCurrencyAmount < 0)
        {
            if (side == DebitCredit::Credit)
            {
                side = DebitCredit::Debit;
            }
            else
            {
                side = DebitCredit::Credit;
            }
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>