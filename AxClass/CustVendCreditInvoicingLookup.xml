<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCreditInvoicingLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendCreditInvoicingLookup</c> class allows a developer to prepare a list of invoices
///    which can be corrected by a particular customer or vendor document.
/// </summary>
class CustVendCreditInvoicingLookup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>filterCustInvoicesForCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method produces a list of customer invoices that are available for correction by the specified
    ///    <paramref name="_correctiveDocument" /> parameter.
    /// </summary>
    /// <param name="_qCustTrans">
    ///    Query which will be modified to select only those invoices which are available for correction.
    /// </param>
    /// <param name="_correctiveDocument">
    ///    Corrective document.
    /// </param>
    /// <param name="_custAccount">
    ///    Customer's account of the corrective document.
    /// </param>
    /// <param name="_invoiceId">
    ///    Invoice which is supposed to be corrected. This is an optional parameter.
    /// </param>
    /// <remarks>
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Only invoices can be corrected.</description>
    ///       </item>
    ///       <item>
    ///          <description>Only invoices of the specified customer, that is, specified by the <paramref
    ///          name="_custAccount" /> parameter, should be proposed for correction.</description>
    ///       </item>
    ///       <item>
    ///          <description>Credit notes are not allowed to be corrected.</description>
    ///       </item>
    ///       <item>
    ///          <description>Project sales orders can only correct invoices of the same project.</description>
    ///       </item>
    ///       <item>
    ///          <description>Non-project documents cannot be used as corrections for project invoices.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public void filterCustInvoicesForCorrection(
        Query       _qCustTrans,
        Common      _correctiveDocument,
        CustAccount _custAccount,
        InvoiceId   _invoiceId = '')
    {
        QueryBuildDataSource    dsCustTrans;
        boolean                 correctiveDocumentIsProjectSalesOrder;

        dsCustTrans = _qCustTrans.dataSourceTable(tablenum(CustTrans));

        if (_qCustTrans.dataSourceCount() != 1 || !dsCustTrans)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // By default all the invoices related to the _custAccount are selected.
        dsCustTrans.addRange(fieldnum(CustTrans, Invoice)).value(_invoiceId ? _invoiceId : SysQuery::valueNotEmptyString());
        dsCustTrans.addRange(fieldnum(CustTrans, BillOfExchangeStatus)).value(queryValue(CustVendNegInstStatus::None));
        dsCustTrans.addRange(fieldnum(CustTrans, AccountNum)).value(_custAccount);

        // Credit notes are not allowed to be corrected.
        dsCustTrans.addRange(fieldnum(CustTrans, AmountCur)).value(queryValue('>0'));

        // Transaction type of Settlement not allowed to be corrected.
        if (CustFreeTextCreditInvoicingLookupFlight::instance().isEnabled()
            && _correctiveDocument.TableId == tableNum(CustInvoiceTable))
        {
            dsCustTrans.addRange(fieldnum(CustTrans, TransType)).value(SysQuery::valueNot(LedgerTransType::Settlement));
        }

        correctiveDocumentIsProjectSalesOrder = this.isProjectSalesOrder(_correctiveDocument);

        // Project sales orders
        if (correctiveDocumentIsProjectSalesOrder)
        {
            // can only correct invoices of the same project
            this.filterCustInvoicesForProject(dsCustTrans, _correctiveDocument);
        }
        else
        {
            // only non-project invoices can be corrected by non-project documents
            this.filterNonProjectCustInvoices(dsCustTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterCustInvoicesForProject</Name>
				<Source><![CDATA[
        private void filterCustInvoicesForProject(QueryBuildDataSource _dsCustTrans, SalesTable _correctiveProjectSalesOrder)
    {
        QueryBuildDataSource dsProjInvoiceJour;
        QueryBuildDataSource dsProjInvoiceItem;

        dsProjInvoiceJour = _dsCustTrans.addDataSource(tablenum(ProjInvoiceJour));
        dsProjInvoiceJour.joinMode(JoinMode::ExistsJoin);
        dsProjInvoiceJour.addLink(fieldnum(CustTrans, Voucher), fieldnum(ProjInvoiceJour, LedgerVoucher));
        dsProjInvoiceJour.addLink(fieldnum(CustTrans, TransDate), fieldnum(ProjInvoiceJour, InvoiceDate));

        dsProjInvoiceItem = dsProjInvoiceJour.addDataSource(tablenum(ProjInvoiceItem));
        dsProjInvoiceItem.joinMode(JoinMode::InnerJoin);
        dsProjInvoiceItem.addLink(fieldnum(ProjInvoiceJour, ProjInvoiceId), fieldnum(ProjInvoiceItem, ProjInvoiceId));
        dsProjInvoiceItem.addLink(fieldnum(ProjInvoiceJour, InvoiceDate), fieldnum(ProjInvoiceItem, InvoiceDate));
        dsProjInvoiceItem.addRange(fieldnum(ProjInvoiceItem, ProjId)).value(_correctiveProjectSalesOrder.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterNonProjectCustInvoices</Name>
				<Source><![CDATA[
        private void filterNonProjectCustInvoices(QueryBuildDataSource _dsCustTrans)
    {
        QueryBuildDataSource dsProjInvoiceJour;

        dsProjInvoiceJour = _dsCustTrans.addDataSource(tablenum(ProjInvoiceJour));
        dsProjInvoiceJour.joinMode(JoinMode::NoExistsJoin);
        dsProjInvoiceJour.addLink(fieldnum(CustTrans, Voucher), fieldnum(ProjInvoiceJour, LedgerVoucher));
        dsProjInvoiceJour.addLink(fieldnum(CustTrans, TransDate), fieldnum(ProjInvoiceJour, InvoiceDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterNonProjectVendInvoices</Name>
				<Source><![CDATA[
        private void filterNonProjectVendInvoices(QueryBuildDataSource _dsVendTrans)
    {
        QueryBuildDataSource dsVendInvoiceJour;
        QueryBuildDataSource dsProjItemTrans;

        dsVendInvoiceJour = _dsVendTrans.addDataSource(tablenum(VendInvoiceJour));
        dsVendInvoiceJour.joinMode(JoinMode::NoExistsJoin);
        dsVendInvoiceJour.addLink(fieldnum(VendTrans, Voucher), fieldnum(VendInvoiceJour, LedgerVoucher));
        dsVendInvoiceJour.addLink(fieldnum(VendTrans, TransDate), fieldnum(VendInvoiceJour, InvoiceDate));

        dsProjItemTrans = dsVendInvoiceJour.addDataSource(tablenum(ProjItemTrans));
        dsProjItemTrans.joinMode(JoinMode::InnerJoin);
        dsProjItemTrans.addLink(fieldnum(VendInvoiceJour, CostLedgerVoucher), fieldnum(ProjItemTrans, VoucherPackingSlip));
        dsProjItemTrans.addLink(fieldnum(VendInvoiceJour, InvoiceDate), fieldnum(ProjItemTrans, TransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterVendInvoicesForCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Produces a list of vendor invoices that are available for correction and is specified by the
    ///    <paramref name="_correctiveDocument" /> parameter.
    /// </summary>
    /// <param name="_qVendTrans">
    ///    Query which will modified to select only those invoices which are available for correction.
    /// </param>
    /// <param name="_correctiveDocument">
    ///    Corrective document.
    /// </param>
    /// <param name="_vendAccount">
    ///    Vendors account of the corrective document.
    /// </param>
    /// <param name="_invoiceId">
    ///    Invoice which is supposed to be corrected. This is an optional parameter.
    /// </param>
    /// <remarks>
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Only invoices can be corrected.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Only invoices of the specified vendor, that is, specified by the <c>_vendAccount</c> parameter,
    ///             should be proposed for correction.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Credit notes are not allowed to be corrected.</description>
    ///       </item>
    ///       <item>
    ///          <description>Project purchase orders cannot be used as corrections for non-project
    ///          invoices.</description>
    ///       </item>
    ///       <item>
    ///          <description>Non-project documents cannot be used as corrections for project invoices.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public void filterVendInvoicesForCorrection(
        Query           _qVendTrans,
        Common          _correctiveDocument,
        VendAccount     _vendAccount,
        InvoiceId       _invoiceId = '')
    {
        QueryBuildDataSource    dsVendTrans;
        boolean                 correctiveDocumentIsProjectPurchaseOrder;

        dsVendTrans = _qVendTrans.dataSourceTable(tablenum(VendTrans));

        if (_qVendTrans.dataSourceCount() != 1 || !dsVendTrans)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // By default all the invoices related to the _vendAccount are selected.
        dsVendTrans.addRange(fieldnum(VendTrans, Invoice)).value(_invoiceId ? _invoiceId : SysQuery::valueNotEmptyString());
        dsVendTrans.addRange(fieldnum(VendTrans, PromissoryNoteStatus)).value(queryValue(CustVendNegInstStatus::None));
        dsVendTrans.addRange(fieldnum(VendTrans, PromissoryNoteStatus)).value(queryValue(CustVendNegInstStatus::Invoiced));
        dsVendTrans.addRange(fieldnum(VendTrans, AccountNum)).value(_vendAccount);

        // Credit notes are not allowed to be corrected.
        dsVendTrans.addRange(fieldnum(CustTrans, AmountCur)).value(queryValue('<0'));

        correctiveDocumentIsProjectPurchaseOrder = this.isProjectPurchaseOrder(_correctiveDocument);

        // Project sales orders
        if (correctiveDocumentIsProjectPurchaseOrder)
        {
            // can only correct invoices of the same project
            this.filterVendInvoicesForProject(dsVendTrans, _correctiveDocument);
        }
        else
        {
            // otherwise a document cannot be used as a correction for project invoices
            this.filterNonProjectVendInvoices(dsVendTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterVendInvoicesForProject</Name>
				<Source><![CDATA[
        private void filterVendInvoicesForProject(QueryBuildDataSource _dsVendTrans, PurchTable _correctiveProjectPurchaseOrder)
    {
        QueryBuildDataSource dsVendInvoiceJour;
        QueryBuildDataSource dsProjItemTrans;

        dsVendInvoiceJour = _dsVendTrans.addDataSource(tablenum(VendInvoiceJour));
        dsVendInvoiceJour.joinMode(JoinMode::ExistsJoin);
        dsVendInvoiceJour.addLink(fieldnum(VendTrans, Voucher), fieldnum(VendInvoiceJour, LedgerVoucher));
        dsVendInvoiceJour.addLink(fieldnum(VendTrans, TransDate), fieldnum(VendInvoiceJour, InvoiceDate));

        dsProjItemTrans = dsVendInvoiceJour.addDataSource(tablenum(ProjItemTrans));
        dsProjItemTrans.joinMode(JoinMode::InnerJoin);
        dsProjItemTrans.addLink(fieldnum(VendInvoiceJour, CostLedgerVoucher), fieldnum(ProjItemTrans, VoucherPackingSlip));
        dsProjItemTrans.addLink(fieldnum(VendInvoiceJour, InvoiceDate), fieldnum(ProjItemTrans, TransDate));
        dsProjItemTrans.addRange(fieldnum(ProjItemTrans, ProjId)).value(_correctiveProjectPurchaseOrder.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectPurchaseOrder</Name>
				<Source><![CDATA[
        private boolean isProjectPurchaseOrder(Common _correctiveDocument)
    {
        PurchTable purchTable;

        if (_correctiveDocument.TableId == tablenum(PurchTable))
        {
            purchTable = _correctiveDocument;
            return purchTable.ProjId != '';
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectSalesOrder</Name>
				<Source><![CDATA[
        private boolean isProjectSalesOrder(Common _correctiveDocument)
    {
        SalesTable salesTable;

        if (_correctiveDocument.TableId == tablenum(SalesTable))
        {
            salesTable = _correctiveDocument;
            return salesTable.ProjId != '';
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>