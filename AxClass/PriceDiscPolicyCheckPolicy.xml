<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscPolicyCheckPolicy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscPolicyCheckPolicy</c> class is used to check whether a given field in a given
/// record is subject to a price discount policy.
/// </summary>
abstract class PriceDiscPolicyCheckPolicy
{
    PriceDiscResultFields   priceDiscResultFields;
    Common                  policyTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUserPolicyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a policy field is included in either the manual or system policy.
    /// </summary>
    /// <param name = "_policyField">
    /// A <c>PriceDiscPolicyField</c> object to check.
    /// </param>
    /// <returns>
    /// true if the policy field is included; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean checkUserPolicyField(PriceDiscPolicyField _policyField)
    {
        return !this.isPolicyField(_policyField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPolicyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a policy field is included in a policy.
    /// </summary>
    /// <param name = "_policyField">
    /// A <c>PriceDiscPolicyField</c> object to check.
    /// </param>
    /// <returns>
    /// true if the policy field is included; otherwise, false.
    /// </returns>
    abstract protected boolean isPolicyField(PriceDiscPolicyField _policyField)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the field ID of policies for the price discount change related to the record initiating
    /// the class.
    /// </summary>
    /// <returns>
    /// A container of field IDs.
    /// </returns>
    public container getPolicyFields()
    {
        return this.retrievePolicyTableFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePolicyTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the field ID of policies for the price discount change related to the record initiating
    /// the class.
    /// </summary>
    /// <returns>
    /// A container of field IDs.
    /// </returns>
    abstract protected container retrievePolicyTableFields()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table field IDs of fixed policies for the record initiating the class.
    /// </summary>
    /// <returns>
    ///    A container of table field IDs.
    /// </returns>
    public container getFixedPolicyFields()
    {
        return this.retrieveFixedPolicyTableFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveFixedPolicyTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table field IDs of fixed policies for the record initiating the class.
    /// </summary>
    /// <returns>
    /// A container of table field IDs.
    /// </returns>
    abstract protected container retrieveFixedPolicyTableFields()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasManualPolicyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there is a manual policy for the given policy field
    /// </summary>
    /// <param name="_policyField">
    /// A <c>PriceDiscPolicyField</c> object to check.
    /// </param>
    /// <returns>
    /// true if the policy field in question has a manual policy; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean hasManualPolicyField(PriceDiscPolicyField _policyField)
    {
        return this.isManualPolicyField(_policyField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isManualPolicyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there is a manual policy for the given policy field
    /// </summary>
    /// <param name="_policyField">
    /// A <c>PriceDiscPolicyField</c> object to check.
    /// </param>
    /// <returns>
    /// true if the policy field in question has a manual policy; otherwise, false.
    /// </returns>
    abstract protected boolean isManualPolicyField(PriceDiscPolicyField _policyField)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Compiles manual and system created policy field lists.
    /// </summary>
    public void init()
    {
        this.initializePolicyFieldLists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePolicyFieldLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes manual and system created policy field lists.
    /// </summary>
    abstract protected void initializePolicyFieldLists()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the value of given field must be updated.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID of the field for which to check whether update is needed.
    /// </param>
    /// <returns>
    ///    true if the field in question can be updated; otherwise, false.
    /// </returns>
    [SysObsolete("Method is moved to mustUpdatePolicyField.", false, 31\03\2018), Hookable(false)]
    final public boolean mustUpdateField(RefFieldId _fieldId)
    {
        return this.mustUpdatePolicyField(PriceDiscPolicyField::newPriceDiscResultsField(_fieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdatePolicyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the value of given policy field must be updated.
    /// </summary>
    /// <param name="_policyField">
    /// A <c>PriceDiscPolicyField</c> object to check whether update is needed.
    /// </param>
    /// <returns>
    ///  true if the policy field in question can be updated; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    final public boolean mustUpdatePolicyField(PriceDiscPolicyField _policyField)
    {
        return this.isFixedPolicyField(_policyField) && this.checkUserPolicyField(_policyField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedPolicyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a field is a fixed policy field.
    /// </summary>
    /// <param name = "_policyField">
    /// A <c>PriceDiscPolicyField</c> object to check.
    /// </param>
    /// <returns>
    /// true if the policy field is a fixed policy field; otherwise, false.
    /// </returns>
    abstract protected boolean isFixedPolicyField(PriceDiscPolicyField _policyField)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePolicyTable</Name>
				<Source><![CDATA[
    protected void initializePolicyTable(Common _policyTable)
    {
        policyTable = _policyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscResultFields</Name>
				<Source><![CDATA[
    public PriceDiscResultFields parmPriceDiscResultFields(PriceDiscResultFields _priceDiscResultFields)
    {
        priceDiscResultFields = _priceDiscResultFields;
        return priceDiscResultFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PriceDiscPolicyCheckPolicy</c> class and initializes the internal
    /// variables.
    /// </summary>
    /// <param name="_policyTable">
    /// An instance of the <c>PriceDiscResultFields</c> table map.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PriceDiscPolicyCheckPolicy</c> class, initialized with the passed
    /// parameters.
    /// </returns>
    public static PriceDiscPolicyCheckPolicy newFromParm(Common _policyTable)
    {
        PriceDiscPolicyCheckPolicy checkPolicy;
        
        if (PriceDiscResultFields::isPriceDiscPolicyEnabled(_policyTable.TableId))
        {
            checkPolicy = new PriceDiscPolicyCheckActivePolicy();
        }
        else
        {
            checkPolicy = new PriceDiscPolicyCheckNoPolicy();
        }

        checkPolicy.initializePolicyTable(_policyTable);
        checkPolicy.init();

        return checkPolicy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>