<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportYearlyAT</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxReportYearlyAT extends RunBase
{
    private const str FeatureReference = 'AT-00001';

    TransDate           fromDate;
    TransDate           toDate;
    TaxPeriod           taxPeriod;

    DialogField         dialogFromDate;
    DialogField         dialogToDate;
    DialogField         dialogPeriod;
    DialogField         dialogPdfFileName;

    TmpTaxReportById    tmpTaxReportById;
    ERFileName          pdfFileName = 'U1.pdf';
    TaxAuthorityAddress taxAuthorityAddress;

    TaxBase             amount1000;
    TaxBase             amount1001;
    TaxBase             amount1021;

    TaxAmount           amount1011;
    TaxAmount           amount1012;
    TaxAmount           amount1015;
    TaxAmount           amount1017;
    TaxAmount           amount1018;
    TaxAmount           amount1019;
    TaxAmount           amount1016;
    TaxAmount           amount1020;

    TaxBase             amount1022;
    TaxBase             amount1029;
    TaxBase             amount1025;
    TaxBase             amount1035;
    TaxBase             amount1052;
    TaxBase             amount1038;

    TaxAmount           amount1156;
    TaxAmount           amount1157;
    TaxAmount           amount1148;
    TaxAmount           amount1144;
    TaxAmount           amount1132;

    TaxBase             amount1070;
    TaxBase             amount1071;

    TaxBase             amount1072;
    TaxBase             amount1073;
    TaxBase             amount1075;
    TaxBase             amount1088;
    TaxAmount           amount1172;
    TaxAmount           amount1173;
    TaxAmount           amount1175;
    TaxAmount           amount1188;

    TaxBase             amount1076;
    TaxBase             amount1077;

    TaxAmount           amount1160;
    TaxAmount           amount1161;
    TaxAmount           amount1183;
    TaxAmount           amount1165;
    TaxAmount           amount1166;
    TaxAmount           amount1182;
    TaxAmount           amount1187;
    TaxAmount           amount1189;
    TaxAmount           amount1164;
    TaxAmount           amount1162;
    TaxAmount           amount1163;
    TaxAmount           amount1167;
    TaxAmount           amount1174;

    TaxAmount           amount1190;
    TaxAmount           amount1538;

    TaxAmount           amount1127;
    TaxAmount           amount1128;

    TaxAmount           amount1172027;
    TaxAmount           amount1173027;
    TaxAmount           amount1175027;
    TaxAmount           amount1188027;

    TaxAmount           amount1172028;
    TaxAmount           amount1173028;
    TaxAmount           amount1175028;
    TaxAmount           amount1188028;

    TaxAmount           amount1166027;

    #DEFINE.SysLastValuesCurrentVersion(2)
    #LOCALMACRO.SysLastValuesList
        taxPeriod,
        pdfFileName
    #ENDMACRO

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        taxPeriod,
        pdfFileName,
        fromDate,
        toDate
    #endmacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmount</Name>
				<Source><![CDATA[
    private TaxAmount addAmount(TaxAmount _baseAmount, TaxAmount _amount)
    {
        TaxAmount ret;

        if (_baseAmount < 0)
        {
            ret = _baseAmount - _amount;
        }
        else
        {
            ret = _baseAmount + _amount;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    private void calcAmounts()
    {
        TaxBase  amount9022;
        TaxBase  amount9029;
        TaxBase  amount9025;
        TaxBase  amount9035;
        TaxBase  amount9052;
        TaxBase  amount9038;

        amount1021 = this.getTaxReportAmount(1021) * -1;
        amount1011 = this.getTaxReportAmount(1011) * -1;
        amount1012 = this.getTaxReportAmount(1012) * -1;
        amount1015 = this.getTaxReportAmount(1015) * -1;
        amount1017 = this.getTaxReportAmount(1017) * -1;
        amount1018 = this.getTaxReportAmount(1018) * -1;
        amount1019 = this.getTaxReportAmount(1019) * -1;
        amount1016 = this.getTaxReportAmount(1016) * -1;
        amount1020 = this.getTaxReportAmount(1020) * -1;
        amount1022 = this.getTaxReportAmount(1022) * -1;
        amount1029 = this.getTaxReportAmount(1029) * -1;
        amount1025 = this.getTaxReportAmount(1025) * -1;
        amount1035 = 0;
        amount1052 = this.getTaxReportAmount(1052) * -1;
        amount1038 = this.getTaxReportAmount(1038) * -1;
        amount1156 = this.getTaxReportAmount(1156) * -1;
        amount1157 = this.getTaxReportAmount(1157);
        amount1148 = this.getTaxReportAmount(1148);
        amount1144 = this.getTaxReportAmount(1144);
        amount1132 = this.getTaxReportAmount(1132);
        amount1071 = this.getTaxReportAmount(1071);
        amount1072 = this.getTaxReportAmount(1072);
        amount1073 = this.getTaxReportAmount(1073);
        amount1075 = 0;
        amount1088 = this.getTaxReportAmount(1088);
        amount1076 = this.getTaxReportAmount(1076);
        amount1077 = this.getTaxReportAmount(1077);
        amount1172 = this.getTaxReportAmount(1172);
        amount1173 = this.getTaxReportAmount(1173);
        amount1175 = this.getTaxReportAmount(1175);
        amount1160 = this.getTaxReportAmount(1160);
        amount1161 = this.getTaxReportAmount(1161);
        amount1183 = this.getTaxReportAmount(1183);
        amount1166 = this.getTaxReportAmount(1166) * -1;
        amount1182 = this.getTaxReportAmount(1182) * -1;
        amount1187 = this.getTaxReportAmount(1187) * -1;
        amount1188 = this.getTaxReportAmount(1188);
        amount1189 = this.getTaxReportAmount(1189) * -1;
        amount1164 = this.getTaxReportAmount(1164);
        amount1162 = this.getTaxReportAmount(1162) * -1;
        amount1163 = this.getTaxReportAmount(1163);
        amount1167 = this.getTaxReportAmount(1167);
        amount1190 = this.getTaxReportAmount(1190) * -1;
        amount1127 = this.getTaxReportAmount(1127);
        amount1128 = this.getTaxReportAmount(1128);
        amount9022 = this.getTaxReportAmount(9022) * -1;
        amount9029 = this.getTaxReportAmount(9029) * -1;
        amount9025 = this.getTaxReportAmount(9025) * -1;
        amount9035 = 0;
        amount9052 = this.getTaxReportAmount(9052) * -1;
        amount9038 = this.getTaxReportAmount(9038) * -1;

        amount1172027 = this.getTaxReportAmount(1172027);
        amount1173027 = this.getTaxReportAmount(1173027);
        amount1175027 = this.getTaxReportAmount(1175027);
        amount1188027 = this.getTaxReportAmount(1188027);

        amount1172028 = this.getTaxReportAmount(1172028);
        amount1173028 = this.getTaxReportAmount(1173028);
        amount1175028 = this.getTaxReportAmount(1175028);
        amount1188028 = this.getTaxReportAmount(1188028);

        amount1166027 = this.getAmount1166027();

        amount1166 = this.addAmount(amount1166, amount1166027);

        amount1000 = amount1021 + amount1011 + amount1012 + amount1015 + amount1017 +
                     amount1018 + amount1019 + amount1016 + amount1020 + amount1022 +
                     amount1029 + amount1025 + amount1035 + amount1052 + amount1038;

        amount1001 = amount9022 + amount9029 + amount9025 + amount9035 + amount9052 +
                     amount9038;

        amount1022 += amount9022;
        amount1029 += amount9029;
        amount1025 += amount9025;
        amount1035 += amount9035;
        amount1052 += amount9052;
        amount1038 += amount9038;

        amount1538 = amount1022 + amount1029 + amount1025 + amount1035 + amount1052 + amount1038;
        amount1070 = amount1071 + amount1072 + amount1073 + amount1088 + amount1076 + amount1077 + amount1075;

        amount1165 = amount1172 + amount1173 + amount1175 + Amount1188 +
            amount1172027 + amount1172028 +
            amount1173027 + amount1173028 +
            amount1175027 + amount1175028 +
            amount1188027 + amount1188028;

        amount1174 = amount1071 + amount1070;

        amount1160 += (amount1127 + amount1128);

        amount1127 += amount1172027 + amount1173027 + amount1175027 + amount1188027 + amount1166027;
        amount1128 += amount1172028 + amount1173028 + amount1175028 + amount1188028;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyAddress</Name>
				<Source><![CDATA[
    private Addressing companyAddress()
    {
        CompanyInfo companyInfo;

        companyInfo=CompanyInfo::find();
        return companyInfo.postalAddress().Street + ' ' + companyInfo.postalAddress().ZipCode + ' ' + companyInfo.postalAddress().City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    private Name companyName()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyVatNum1</Name>
				<Source><![CDATA[
    private VATNum companyVatNum1()
    {
        VATNum  vatNum = CompanyInfo::find().CoRegNum;

        return substr(vatNum, strfind(vatNum, '-', 1, strlen(vatNum)) + 1, 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyVatNum2</Name>
				<Source><![CDATA[
    private VATNum companyVatNum2()
    {
        VATNum  vatNum = CompanyInfo::find().CoRegNum;

        return substr(vatNum, strfind(vatNum, '/', 1, strlen(vatNum)) + 1, 4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPDFFiller</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PDFFiller constructPDFFiller()
    {
        return PDFFillerYearlyAT::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogFromDate    = dialog.addFieldValue(extendedtypestr(FromDate),fromDate);
        dialogToDate      = dialog.addFieldValue(extendedtypestr(ToDate),toDate);
        dialogPeriod      = dialog.addFieldValue(extendedtypestr(TaxPeriod),taxPeriod);
        dialogPdfFileName = dialog.addFieldValue(extendedtypestr(ERFileName), pdfFileName, "@SYS82356", "@SYS82357");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPDFFile</Name>
				<Source><![CDATA[
    private void fillPDFFile()
    {
        PDFFillerYearlyAT   pdfFiller;

        #TaxReportingCodesAT

        pdfFiller = this.constructPDFFiller();
        pdfFiller.parmPdfFileName(pdfFileName);

       // Amounts
        pdfFiller.addStrField(#Zahl02_1,     this.companyVatNum1());
        pdfFiller.addStrField(#Zahl02_2,     this.companyVatNum2());
        if (this.vatDepartment())
        {
            pdfFiller.addStrField(#Zahl03,       this.vatDepartment());
        }
        pdfFiller.addStrField(#Text01,       this.taxAuthorityName() + '\n' + this.taxAuthorityAddressing());
        pdfFiller.addStrField(#Text06,       this.companyName() +'\n' + this.companyAddress());
        pdfFiller.addStrField(#Datum14,      date2str(fromDate,32,0,1,2,2,4,DateFlags::None));
        pdfFiller.addStrField(#Datum15,      date2str(toDate,32,0,1,2,2,4,DateFlags::None));
        pdfFiller.addRealField(#Zahl23,      amount1000);
        pdfFiller.addRealField(#Zahl24,      amount1001);
        pdfFiller.addRealField(#Zahl24a,     amount1021);
        pdfFiller.addRealField(#Zahl525,     amount1000 + amount1001 + amount1021);
        pdfFiller.addRealField(#Zahl525x,    amount1000 + amount1001 + amount1021);
        pdfFiller.addRealField(#Zahl27,      amount1011);
        pdfFiller.addRealField(#Zahl28,      amount1012);
        pdfFiller.addRealField(#Zahl29,      amount1015);
        pdfFiller.addRealField(#Zahl30,      amount1017);
        pdfFiller.addRealField(#Zahl31,      amount1018);
        pdfFiller.addRealField(#Zahl34,      amount1019);
        pdfFiller.addRealField(#Zahl35,      amount1016);
        pdfFiller.addRealField(#Zahl37,      amount1020);
        pdfFiller.addRealField(#Zahl538,     amount1538);
        pdfFiller.addRealField(#Zahl39,      amount1022);
        pdfFiller.addRealField(#Zahl41,      amount1029);
        pdfFiller.addRealField(#Zahl43,      amount1025);
        pdfFiller.addRealField(#Zahl49,      amount1052);
        pdfFiller.addRealField(#Zahl51,      amount1038);
        pdfFiller.addRealField(#Zahl60,      amount1156);
        pdfFiller.addRealField(#Zahl61,      amount1157);
        pdfFiller.addRealField(#Zahl61a,     amount1148);
        pdfFiller.addRealField(#Zahl62,      amount1070);
        pdfFiller.addRealField(#Zahl63,      amount1071);
        pdfFiller.addRealField(#Zahl564,     amount1174);
        pdfFiller.addRealField(#Zahl67,      amount1072);
        pdfFiller.addRealField(#Zahl69,      amount1073);
        pdfFiller.addRealField(#Zahl73,      amount1076);
        pdfFiller.addRealField(#Zahl74,      amount1077);
        pdfFiller.addRealField(#Zahl75,      amount1160);
        pdfFiller.addRealField(#Zahl76,      amount1161);
        pdfFiller.addRealField(#Zahl76_01,   amount1183);
        pdfFiller.addRealField(#Zahl77,      amount1165);
        pdfFiller.addRealField(#Zahl78,      amount1166);
        pdfFiller.addRealField(#Zahl78a,     amount1182);
        pdfFiller.addRealField(#Zahl137a,    amount1189);
        pdfFiller.addRealField(#Zahl79,      amount1187);
        pdfFiller.addRealField(#Zahl80,      amount1162);
        pdfFiller.addRealField(#Zahl80a,     amount1163);
        pdfFiller.addRealField(#Zahl84,      amount1167);
        pdfFiller.addRealField(#Zahl85,      amount1190);
        pdfFiller.addRealField(#Zahl61b,     amount1144);
        pdfFiller.addRealField(#Zahl61c,     amount1132);
        pdfFiller.addRealField(#Zahl71b,     amount1088);
        pdfFiller.addRealField(#Zahl79a,     amount1189);
        pdfFiller.addRealField(#Zahl85_01a,  amount1127);
        pdfFiller.addRealField(#Zahl85_02a,  amount1128);

        pdfFiller.addDateField(#Tagesdatum2, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        pdfFiller.saveFDF();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount1166027</Name>
				<Source><![CDATA[
    private TaxAmount getAmount1166027()
    {
        TaxAmount           taxAmount;
        TmpTaxReportById    tmpTaxReportById1166027;
        Date                reportCode1166027StartDate;

        #define.StartDate('01/07/2010')

        reportCode1166027StartDate = str2date(#StartDate, 123);

        if (fromDate < reportCode1166027StartDate && toDate < reportCode1166027StartDate)
        {
            //ReportingCode 1166027 will only be reported for dates later than 1/7/2010
            taxAmount = 0;
        }
        else if (fromDate < reportCode1166027StartDate && toDate >= reportCode1166027StartDate)
        {
            //We need to set the from date to be the start date for reporting code 1166027 and reload its value
            tmpTaxReportById1166027   = TaxTrans::taxAmountByReportId_Table(reportCode1166027StartDate,toDate,taxPeriod,TaxRepVersion::Total);

            select firstonly Amount from tmpTaxReportById1166027 where tmpTaxReportById1166027.TaxReportField == 1166027;
            taxAmount = tmpTaxReportById1166027.Amount;
        }
        else
        {
            select Amount from tmpTaxReportById where tmpTaxReportById.TaxReportField == 1166027;
            taxAmount = tmpTaxReportById.Amount;
        }

        return abs(taxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        fromDate    = dialogFromDate.value();
        toDate      = dialogToDate.value();
        if (!toDate)
        {
            toDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        taxPeriod   = dialogPeriod.value();
        pdfFileName = dialogPdfFileName.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>SysLastValues</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///    This is a customization of the standard <c>SysLastValues</c> record functionality and is required
    ///    to support the split implementation of serializing (by using the <c>pack</c> and <c>unpack</c>
    ///    methods) and to persist user input (the <c>SysLastValues</c> record).
    /// </remarks>
    public void getLast()
    {
        container packedValues;

        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        // super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        getLastCalled   = true;
        inGetSaveLast   = true;

        // Restore the pertinent values from the SysLastValue table.
        packedValues = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                               this.lastValueUserId(),
                                               this.lastValueType(),
                                               this.lastValueElementName(),
                                               this.lastValueDesignName());

        this.unpackSysLastValues(packedValues);

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the tax amount from the <c>TmpTaxReportById</c> table for given tax code.
    /// </summary>
    /// <param name="_taxReportField">
    ///    The tax report field from which the tax amount will be retrieved.
    /// </param>
    /// <returns>
    ///    A tax amount for supplied tax code.
    /// </returns>

    private Amount getTaxReportAmount(TaxReportField _taxReportField)
    {
        select firstonly Amount from tmpTaxReportById where tmpTaxReportById.TaxReportField == _taxReportField;
        return tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the data required for the <c>SysLastValues</c> record.
    /// </summary>
    /// <returns>
    ///    A container that holds the data to be persisted with the <c>SysLastValues</c> record.
    /// </returns>
    /// <remarks>
    ///    The pack and unpack pattern does not have provisions for supporting different serialization and the
    ///    <c>SysLastValues</c> records pack lists. This separate packing mechanism has been implemented for
    ///    thhhe <c>SysLastValues</c> record and is first defined on the class one level above the
    ///    <c>RunBase</c> or <c>RunBaseBatch</c> class. Derivative classes also implement this method so that
    ///    a whole object can be packed for the <c>SysLastValues</c> record.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container packSysLastValues()
    {
        return [#SysLastValuesCurrentVersion, #SysLastValuesList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        TaxPeriodHead taxPeriodHead;

        taxPeriodHead      = TaxPeriodHead::find(taxPeriod);
        tmpTaxReportById   = TaxTrans::taxAmountByReportId_Table(fromDate,toDate,taxPeriod,TaxRepVersion::Total);
        taxAuthorityAddress = TaxAuthorityAddress::find(taxPeriodHead.TaxAuthority);

        this.calcAmounts();

        this.fillPDFFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the <c>SysLastValues</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///    This is a customization of the standard <c>SysLastValues</c> record functionality and is required
    ///    to support the split implementation of serializing (using the <c>pack</c> and <c>unpack</c> method)
    ///    and to persist user input (a   <c>SysLastValues</c> record).
    /// </remarks>
    public void saveLast()
    {
        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        //super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast   = true;

        // Persist the pertinent values to the SysLastValue table.
        xSysLastValue::putValue(this.packSysLastValues(),
                                this.lastValueDataAreaId(),
                                this.lastValueUserId(),
                                this.lastValueType(),
                                this.lastValueElementName(),
                                this.lastValueDesignName());

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAuthorityAddressing</Name>
				<Source><![CDATA[
    private Addressing taxAuthorityAddressing()
    {
        LogisticsPostalAddress postalAddress = LogisticsLocationEntity::location2PostalAddress(taxAuthorityAddress.Location);

        return postalAddress.Street + '\n' + postalAddress.ZipCode + ' ' + postalAddress.City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAuthorityName</Name>
				<Source><![CDATA[
    private CompanyName taxAuthorityName()
    {
        return taxAuthorityAddress.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer    version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <param name="_packedValues">
    ///    The values stored by the <c>SysLastValues</c> framework that are to be unpacked.
    /// </param>
    /// <remarks>
    ///    The pack and unpack pattern does not have provisions for supporting different serialization and the
    ///    <c>SysLastValues</c> records pack lists. This separate packing mechanism has been implemented for a
    ///    <c>SysLastValues</c> record and is first defined on the class one level above the <c>RunBase</c> or
    ///    <c>RunBaseBatch</c> class. Derivative classes also implement this method so that a whole object can
    ///    be unpacked for a <c>SysLastValues</c> record.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void unpackSysLastValues(container _packedValues)
    {
        Version version = RunBase::getVersion(_packedValues);

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList] = _packedValues;

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (!pdfFileName)
        {
            ret = checkFailed("@SYS18624");
        }

        if (!fromDate)
        {
            ret = checkFailed("@SYS39559");
        }

        if (fromDate > toDate)
        {
            ret = checkFailed("@SYS16982");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatDepartment</Name>
				<Source><![CDATA[
    private VATNum vatDepartment()
    {
        VATNum  vatNum;

        vatNum = CompanyInfo::find().CoRegNum;

        if (strfind(vatNum, '-', 1, strlen(vatNum)))
        {
            return substr(vatNum,strfind(vatNum,'-',1,strlen(vatNum))+1,2);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxReportYearlyAT construct()
    {
        return new TaxReportYearlyAT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS59653";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        TaxReportYearlyAT taxReportYearlyAT;

        taxReportYearlyAT = TaxReportYearlyAT::construct();

        if (taxReportYearlyAT.prompt())
            taxReportYearlyAT.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>