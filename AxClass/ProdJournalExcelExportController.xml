<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalExcelExportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdJournalExcelExportController</c> class is responsible for the customization of the Office menu for 
/// production journal forms by defining what should be exported for the data entity associated with the custom menu item.
/// </summary>
internal class ProdJournalExcelExportController
{
    private static const str CustomExportLinesToExcelOptionId = 'ProdJournalEntityOfficeMenuId';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    /// <param name = "_prodJournalType">The production journal type.</param>
    [Hookable(false)]
    internal static void customizeMenuOptions(OfficeMenuOptions _menuOptions, ProdJournalType _prodJournalType)
    {
        // Clear the menu options which are driven by the root data source of an entity.
        ListIterator dataEntityIterator = new ListIterator(_menuOptions.dataEntityOptions());
        while (dataEntityIterator.more())
        {
            dataEntityIterator.delete();
        }

        str dataEntityName = '';
        str dataEntityLabel;

        switch (_prodJournalType)
        {
            case ProdJournalType::Picklist:
                dataEntityName  = tableStr(ProdProductionPickingListJournalEntryEntity);
                dataEntityLabel = "@SCM:ProdProductionPickingListJournalEntryEntityLabel";
                break;
            case ProdJournalType::RouteCard:
                dataEntityName  = tableStr(ProdRouteCardProductionJournalEntryEntity);
                dataEntityLabel = "@SCM:ProdRouteCardProductionJournalEntryEntityLabel";
                break;
            case ProdJournalType::JobCard:
                dataEntityName  = tableStr(ProdJobCardProductionJournalEntryEntity);
                dataEntityLabel = "@SCM:ProdJobCardProductionJournalEntryEntityLabel";
                break;
            case ProdJournalType::ReportFinished:
                dataEntityName  = tableStr(ProdReportAsFinishedProductionJournalEntryEntity);
                dataEntityLabel = "@SCM:ProdReportAsFinishedProductionJournalEntryEntity";
                break;
        }

        if (dataEntityName != '')
        {
            OfficeGeneratedExportMenuItem exportMenuItem = OfficeGeneratedExportMenuItem::construct(dataEntityName, CustomExportLinesToExcelOptionId);
            exportMenuItem.displayName(strFmt("@SYS76681", dataEntityLabel, '', curExt()));
            _menuOptions.customMenuItems().addEnd(exportMenuItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataEntityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <see cref="ExportToExcelDataEntityContext"/> that specifies what should be exported for the specified menu item.
    /// </summary>
    /// <param name = "_menuItem">The menu item.</param>
    /// <param name = "_prodJournalTable">The production journal.</param>
    /// <returns>
    /// Returns the <see cref="ExportToExcelDataEntityContext"/> that specifies what should be exported for the specified menu item;
    /// otherwise, null.
    /// </returns>
    [Hookable(false)]
    internal static ExportToExcelDataEntityContext getDataEntityContext(OfficeGeneratedExportMenuItem  _menuItem, ProdJournalTable _prodJournalTable)
    {
        ExportToExcelDataEntityContext context = null;
        
        if (_menuItem.id() == CustomExportLinesToExcelOptionId)
        {    
            str dataEntityName = '';
            str fieldGroupName;
            str dataAreaId;
            str orderNumber;

            switch (_prodJournalTable.JournalType)
            {
                case ProdJournalType::Picklist:
                    dataEntityName = tableStr(ProdProductionPickingListJournalEntryEntity);
                    fieldGroupName = tableFieldGroupStr(ProdProductionPickingListJournalEntryEntity, AutoReport);
                    dataAreaId     = fieldStr(ProdProductionPickingListJournalEntryEntity, DataAreaId);
                    orderNumber    = fieldStr(ProdProductionPickingListJournalEntryEntity, JournalNumber);
                    break;
                case ProdJournalType::RouteCard:
                    dataEntityName  = tableStr(ProdRouteCardProductionJournalEntryEntity);
                    fieldGroupName  = tableFieldGroupStr(ProdRouteCardProductionJournalEntryEntity, AutoReport);
                    dataAreaId      = fieldStr(ProdRouteCardProductionJournalEntryEntity, DataAreaId);
                    orderNumber     = fieldStr(ProdRouteCardProductionJournalEntryEntity, JournalNumber);
                    break;
                case ProdJournalType::JobCard:
                    dataEntityName  = tableStr(ProdJobCardProductionJournalEntryEntity);
                    fieldGroupName  = tableFieldGroupStr(ProdJobCardProductionJournalEntryEntity, AutoReport);
                    dataAreaId      = fieldStr(ProdJobCardProductionJournalEntryEntity, DataAreaId);
                    orderNumber     = fieldStr(ProdJobCardProductionJournalEntryEntity, JournalNumber);
                    break;
                case ProdJournalType::ReportFinished:
                    dataEntityName  = tableStr(ProdReportAsFinishedProductionJournalEntryEntity);
                    fieldGroupName  = tableFieldGroupStr(ProdReportAsFinishedProductionJournalEntryEntity, AutoReport);
                    dataAreaId      = fieldStr(ProdReportAsFinishedProductionJournalEntryEntity, DataAreaId);
                    orderNumber     = fieldStr(ProdReportAsFinishedProductionJournalEntryEntity, JournalNumber);
                    break;
            }

            if (dataEntityName != '')
            {
                context = ProdJournalExcelExportController::getCustomizedExportToExcelDataEntityContext(dataEntityName, fieldGroupName, dataAreaId, orderNumber, _prodJournalTable.JournalId);
            }
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomizedExportToExcelDataEntityContext</Name>
				<Source><![CDATA[
    private static ExportToExcelDataEntityContext getCustomizedExportToExcelDataEntityContext(str _dataEntityName, str _fieldGroupName, str _dataAreaId, str _orderNumber, ProdJournalId _prodJournalId)
    {
        ExportToExcelDataEntityContext context = ExportToExcelDataEntityContext::construct(_dataEntityName, _fieldGroupName);
        ListEnumerator entities = context.entities().getEnumerator();
        while (entities.moveNext())
        {
            ExportToExcelDataEntityInfo entity = entities.current();

            if(entity.entityName() == _dataEntityName)
            {
                ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(_dataEntityName);
                var filter = filterBuilder.and(
                            filterBuilder.areEqual(_dataAreaId, curExt()),
                            filterBuilder.areEqual(_orderNumber, _prodJournalId));

                entity.filter(filter);
                break;
            }
        }

        return context;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>