<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCustomCorrectionJournal_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxCustomCorrectionJournal_RU extends TaxCustomJournal_RU
{
    CustomCorrectionTable_RU customCorrectionTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAndInsertTaxes</Name>
				<Source><![CDATA[
    protected TaxAmount calcAndInsertTaxes()
    {
        CustomJournalTrans_RU           customJournalTrans;
        CustomCorrectionTrans_RU        customCorrectionTrans;
        TaxAmount                       vatAmount;
        TaxAmount                       exciseAmount;
        TaxAmount                       baseAmount;
        TaxAmount                       taxAmount;
        LedgerDimensionDefaultAccount   ledgerDefaultAccount;

        ttsbegin;

        while select customCorrectionTrans
        where customCorrectionTrans.CorrectionJournalId == customCorrectionTable.CorrectionJournalId
        {
            customJournalTrans = customCorrectionTrans.customJournalTrans();
            baseAmount   = 0;
            vatAmount    = 0;
            exciseAmount = 0;

            baseAmount   = customCorrectionTrans.CorrectionCost;
            vatAmount    = customCorrectionTrans.CorrectionVAT;
            exciseAmount = customCorrectionTrans.CorrectionExcise;

            if (! vatAmount && ! exciseAmount)
            {
                continue;
            }

            taxWorkTrans.clear();
            taxWorkTrans.HeadingTableId         = sourceTableId;
            taxWorkTrans.HeadingRecId           = sourceRecId;
            taxWorkTrans.SourceTableId          = this.sourceTableId();
            taxWorkTrans.SourceRecId            = this.sourceRecId();
            taxWorkTrans.InvoiceRecId           = sourceRecId;

            taxWorkTrans.Source                 = taxModuleType;
            taxWorkTrans.Voucher                = voucher;
            taxWorkTrans.TransDate              = taxDate;
            taxWorkTrans.CalculationDate        = taxDate;
            taxWorkTrans.TaxDirection           = TaxDirection::IncomingTax;
            taxWorkTrans.CurrencyCode           = sourceCurrencyCode;
            taxWorkTrans.SourceCurrencyCode     = sourceCurrencyCode;
            taxWorkTrans.TaxAutogenerated       = true;
            taxWorkTrans.TaxBaseAmount          = baseAmount;
            taxWorkTrans.TaxBaseAmountCur       = baseAmount;
            taxWorkTrans.SourceBaseAmountCur    = baseAmount;
            taxWorkTrans.TaxBaseQty             = customJournalTrans.Qty;

            if (vatAmount)
            {
                taxWorkTrans.TaxCode                = FEACCCustomRateTable_RU::findOnDate(customJournalTrans.feaccId,
                                                                                          TaxType_W::VAT,
                                                                                          CustomJournalCalc_RU::customAllImportExport(customJournalTable.CustomJournalType),
                                                                                          customJournalTrans.CountryRegionId,
                                                                                          customJournalTable.PlanArrivalDate);
                if (! taxWorkTrans.TaxCode)
                {
                    checkFailed(strfmt("@GLS116079", customCorrectionTable.CorrectionJournalId,
                                                    customJournalTable.CustomJournalId,
                                                    customJournalTrans.feaccId,
                                                    enum2str(TaxType_W::VAT)));
                }

                ledgerDefaultAccount                = TaxLedgerAccountGroup::accountLedgerDimension(taxWorkTrans.TaxCode, TaxDirection::IncomingTax);
                taxWorkTrans.LedgerDimension        = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDefaultAccount, customJournalTrans.DefaultDimension);

                taxWorkTrans.SourceTaxAmountCur     = vatAmount;
                taxWorkTrans.TaxAmount              = vatAmount;
                taxWorkTrans.TaxAmountCur           = vatAmount;
                taxWorkTrans.insert();

                taxAmount += vatAmount;
            }

            if (exciseAmount)
            {
                taxWorkTrans.TaxCode                = FEACCCustomRateTable_RU::findOnDate(customJournalTrans.feaccId,
                                                                                          TaxType_W::Excise,
                                                                                          CustomJournalCalc_RU::customAllImportExport(customJournalTable.CustomJournalType),
                                                                                          customJournalTrans.CountryRegionId,
                                                                                          customJournalTable.PlanArrivalDate);
                if (! taxWorkTrans.TaxCode)
                {
                    checkFailed(strfmt("@GLS116079", customCorrectionTable.CorrectionJournalId,
                                                    customJournalTable.CustomJournalId,
                                                    customJournalTrans.feaccId,
                                                    enum2str(TaxType_W::Excise)));
                }

                ledgerDefaultAccount                = TaxLedgerAccountGroup::accountLedgerDimension(taxWorkTrans.TaxCode, TaxDirection::IncomingTax);
                taxWorkTrans.LedgerDimension        = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDefaultAccount, customJournalTrans.DefaultDimension);

                taxWorkTrans.SourceTaxAmountCur     = exciseAmount;
                taxWorkTrans.TaxAmount              = exciseAmount;
                taxWorkTrans.TaxAmountCur           = exciseAmount;
                taxWorkTrans.insert();

                taxAmount += exciseAmount;
            }
        }

        ttscommit;

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    void parmJournalTable(Common _journalTable)
    {
        customCorrectionTable   = _journalTable;
        customJournalTable      = CustomJournalTable_RU::find(customCorrectionTable.JournalId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>