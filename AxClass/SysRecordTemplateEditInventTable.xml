<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysRecordTemplateEditInventTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SysRecordTemplateEditInventTable</c> class is the specialized version of the
/// <c>SysRecordTemplateEdit</c> class that is responsible for editing the product per company
/// templates.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class SysRecordTemplateEditInventTable extends SysRecordTemplateEdit
{
    EcoResProductTemplateManager    productTemplateManager;
    Set                             dataSourcesNameSet;
    RefRecId                        inventTableRecId;
    ItemId                          itemId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRecordTemplateStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a record template storage handler.
    /// </summary>
    /// <param name="_formRun">
    /// An instance of the <c>FormRun</c> class.
    /// </param>
    /// <returns>
    /// A record template storage handler instance.
    /// </returns>
    public SysRecordTemplateStorage createRecordTemplateStorage(FormRun _formRun = formRun)
    {
        this.productTemplateManager().parmRecordTemplateFormRun(_formRun);
        this.productTemplateManager().parmRecordTemplateType(SysRecordTemplateType::Company);

        return this.productTemplateManager().createRecordTemplateStorage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitFormRun</Name>
				<Source><![CDATA[
    protected FormRun createAndInitFormRun()
    {
        Args args = new Args();
        args.openMode(OpenMode::Edit);
        args.name(formStr(EcoResProductDetailsExtended));
        args.caller(this);
        formRun = classfactory.formRunClass(args);
        formRun.init();

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecordTemplateEnabledForDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether templates are allowed for a form data source.
    /// </summary>
    /// <param name="_formDataSource">
    /// A form data source.
    /// </param>
    /// <returns>
    /// true if templates are allowed for a form data source; otherwise, false.
    /// </returns>
    protected boolean isRecordTemplateEnabledForDataSource(FormDataSource _formDataSource)
    {
        if (!dataSourcesNameSet)
        {
            dataSourcesNameSet = this.productTemplateManager().dataSourcesNameSet();
        }

        return dataSourcesNameSet.in(_formDataSource.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductTemplateManager</Name>
				<Source><![CDATA[
    public EcoResProductTemplateManager parmProductTemplateManager(EcoResProductTemplateManager _productTemplateManager = productTemplateManager)
    {
        productTemplateManager = _productTemplateManager;

        return productTemplateManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productTemplateManager</Name>
				<Source><![CDATA[
    protected EcoResProductTemplateManager productTemplateManager()
    {
        if (!productTemplateManager)
        {
            throw error(Error::missingParameter(this));
        }

        return productTemplateManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the <c>InventTable</c> form datasource for the specified form by executing its query
    /// and sets the relations for corresponding <c>InventTable</c> and <c>MCRInventTable</c> records.
    /// </summary>
    /// <param name="_formRun">
    /// The instance of a template form to take the datasource from.
    /// </param>
    protected void refreshFormData(FormRun _formRun)
    {
        this.productTemplateManager().parmRecordTemplateFormRun(_formRun);
        productTemplateManager.fixRecordRelations();

        //Store tmp table record for product dimension group datasource, as it gets corrupted after formDataSourceInventTable.executeQuery().
        FormDataSource formDataSourceProductDimensionGroupProduct = _formRun.dataSource(identifierStr(EcoResProductDimensionGroupProduct));
        RefRecId formDataSourceProductDimensionGroupProductRecId = formDataSourceProductDimensionGroupProduct.cursor().RecId;

        FormDataSource formDataSourceInventTable;
        formDataSourceInventTable = _formRun.dataSource(identifierStr(InventTable));

        this.executeFormDatasourceInventTableQuery(formDataSourceInventTable);

        //Restore product dimension group datasource if product is product master.
        EcoResProduct formDataSourceEcoResProductCursor = _formRun.dataSource(identifierStr(EcoResProduct)).cursor();

        if (formDataSourceEcoResProductCursor
            && EcoResProduct::find(formDataSourceEcoResProductCursor.RecId).isProductMaster())
        {
            formDataSourceProductDimensionGroupProduct.cursor().RecId = formDataSourceProductDimensionGroupProductRecId;
            formDataSourceProductDimensionGroupProduct.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeFormDatasourceInventTableQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the query for <c>InventTable</c> table form datasource.
    /// </summary>
    /// <param name = "_formDataSourceInventTable">A form datasource for the <c>InventTable</c> table.</param>
    protected void executeFormDatasourceInventTableQuery(FormDataSource _formDataSourceInventTable)
    {
        _formDataSourceInventTable.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a form for editing the template.
    /// </summary>
    /// <param name="_formRun">
    /// An instance of the <c>FormRun</c> class.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The form was not started correctly.
    /// </exception>
    public void runFormRun(FormRun _formRun)
    {
        this.refreshFormData(_formRun);

        super(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormDataSourceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a form data source into temporary mode and initializes it by using the template record.
    /// </summary>
    /// <param name="_formDataSource">
    /// A form data source.
    /// </param>
    protected void setFormDataSourceRecord(FormDataSource _formDataSource)
    {
        _formDataSource.autoQuery(false);
        _formDataSource.autoSearch(false);

        super(_formDataSource);

        Common formDataSourceBuffer = _formDataSource.cursor();
        if (formDataSourceBuffer.TableId == tableNum(InventTable))
        {
            InventTable inventTable = formDataSourceBuffer;
            itemId = inventTable.ItemId;
        }
        else if (itemId && this.isRecordTemplateEnabledForDataSource(_formDataSource))
        {
            this.setInventTableRelation(formDataSourceBuffer);

            if (formDataSourceBuffer.RecId)
            {
                formDataSourceBuffer.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTableRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the foreign key values for a buffer of an <c>InventTable</c> relation table.
    /// </summary>
    /// <param name="_common">
    /// A buffer to set foreign key values for.
    /// </param>
    private void setInventTableRelation(Common _common)
    {
        switch (_common.TableId)
        {
            case tableNum(InventItemGroupItem):
                InventItemGroupItem inventItemGroupItem = _common;
                inventItemGroupItem.ItemId              = itemId;
                inventItemGroupItem.ItemDataAreaId      = curExt2dataareaid(tableNum(InventTable));
                inventItemGroupItem.ItemGroupDataAreaId = curExt2dataareaid(tableNum(InventItemGroup));
                break;

            case tableNum(InventModelGroupItem):
                InventModelGroupItem inventModelGroupItem = _common;
                inventModelGroupItem.ItemId                 = itemId;
                inventModelGroupItem.ItemDataAreaId         = curExt2dataareaid(tableNum(InventTable));
                inventModelGroupItem.ModelGroupDataAreaId   = curExt2dataareaid(tableNum(InventModelGroup));
                break;

            case tableNum(EcoResStorageDimensionGroupItem):
                EcoResStorageDimensionGroupItem ecoResStorageDimensionGroupItem = _common;
                ecoResStorageDimensionGroupItem.ItemId          = itemId;
                ecoResStorageDimensionGroupItem.ItemDataAreaId  = curExt2dataareaid(tableNum(InventTable));
                break;

            case tableNum(EcoResTrackingDimensionGroupItem):
                EcoResTrackingDimensionGroupItem ecoResTrackingDimensionGroupItem = _common;
                ecoResTrackingDimensionGroupItem.ItemId         = itemId;
                ecoResTrackingDimensionGroupItem.ItemDataAreaId = curExt2dataareaid(tableNum(InventTable));
                break;

            case tableNum(WHSReservationHierarchyItem):
                if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
                {
                    WHSReservationHierarchyItem whsReservationHierarchyItem = _common;
                    whsReservationHierarchyItem.ItemId                      = itemId;
                    whsReservationHierarchyItem.ItemDataAreaId              = curExt2dataareaid(tableNum(InventTable));
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SysRecordTemplateEditInventTable construct()
    {
        return new SysRecordTemplateEditInventTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SysRecordTemplateEditInventTable</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>SysRecordTemplateEditInventTable</c> class.
    /// </returns>
    public static SysRecordTemplateEditInventTable newDefault()
    {
        SysRecordTemplateEditInventTable templateEdit = SysRecordTemplateEditInventTable::construct();
        templateEdit.parmProductTemplateManager(EcoResProductTemplateManager::construct());

        return templateEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCopyingTemplateFieldValue</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SysRecordTemplate), delegateStr(SysRecordTemplate, onCopyingTemplateFieldValue))]
    public static void onCopyingTemplateFieldValue(xFormRun _formRunContext,
                                                    TableId _tableId,
                                                    FieldId _fieldId,
                                                    EventHandlerRejectResult _rejectRecordTemplateForDerivedTable)
    {
        if (_formRunContext && _formRunContext.form() && _formRunContext.form().name() == formStr(EcoResProductDetailsExtended)
            && _tableId == tableNum(InventTable))
        {
            switch (_fieldId)
            {
                case fieldName2Id(tableNum(InventTable), fieldStr(InventTable, StandardInventColorId)):
                case fieldName2Id(tableNum(InventTable), fieldStr(InventTable, StandardInventSizeId)):
                case fieldName2Id(tableNum(InventTable), fieldStr(InventTable, StandardInventStyleId)):
                case fieldName2Id(tableNum(InventTable), fieldStr(InventTable, StandardInventVersionId)):
                case fieldName2Id(tableNum(InventTable), fieldStr(InventTable, StandardConfigId)):
                    _rejectRecordTemplateForDerivedTable.reject();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes form data source record by using the template record.
    /// </summary>
    /// <param name="_formDataSourceCommon">
    /// A form data source record.
    /// </param>
    protected void createRecordTemplate(Common _formDataSourceCommon)
    {
        EcoResRecordTemplate ecoResRecordTemplate = EcoResRecordTemplate::construct();

        ecoResRecordTemplate.parmCommon(_formDataSourceCommon);
        ecoResRecordTemplate.parmForceCompanyTemplate(recordTemplateDescription);
        ecoResRecordTemplate.parmOnlyEditableFieldsOnCreate(false);

        if (_formDataSourceCommon.TableId == tablenum(WHSInventTable))
        {
            EcoResProductTemplateApplyManagerUtils::applyTemplateForWHSInventTable(ecoResRecordTemplate);
        }

        ecoResRecordTemplate.createRecord();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>