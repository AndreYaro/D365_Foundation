<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleCashSaleOfProductExtPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::ExtendedPrice),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::Discount),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::Tax),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::TaxNonRecoverable),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::WithholdTax_IN),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::TaxMeasure),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::TaxMeasureComponent),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::TaxMeasureNonRecoverable),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::RoundingAmount)
]
public class AccJourRuleCashSaleOfProductExtPrice extends AccJourRuleSaleOfProductExtendedPrice
{
    PaymTerm                        paymTerm;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUseTermMainAccDimensionListProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a term amount specific main account dimension list provider can be used to derive
    /// main account dimension values required for classifying the financial consequences of source
    /// document term.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean canUseTermMainAccDimensionListProvider()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the accounting rule.
    /// </summary>
    protected void initialize()
    {
        Object                          sourceDocument = sourceDocumentLineItem.parmSourceDocument();
        SourceDocumentITerms            iTerm;
        dataAreaId                      paymTermDataAreaId;
        PaymTermId                      paymTermId;

        if (sourceDocument is SourceDocumentITerms)
        {
            iTerm = sourceDocument as SourceDocumentITerms;
            paymTermDataAreaId = iTerm.parmPaymTermDataAreaId();
            paymTermId = iTerm.parmPaymTermId();
            if (paymTermId)
            {
                changecompany(paymTermDataAreaId)
                {
                    paymTerm = PaymTerm::find(paymTermId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSummarize</Name>
				<Source><![CDATA[
    public boolean parmSummarize()
    {
        boolean isSummarized;

        if (paymTerm.Cash && paymTerm.PostOffsettingAR)
        {
            isSummarized = NoYes::No;
        }
        else
        {
            isSummarized = NoYes::Yes;
        }

        return isSummarized;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>