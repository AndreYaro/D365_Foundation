<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchAttributeCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventBatchAttributeCriteria</c> class represents a set of filters that can be used
///    to filter on hand based on batch attribute selections.
/// </summary>
public class InventBatchAttributeCriteria extends InventOnHandSingleDimensionCriteria
{
    TmpPdsBatchAttribSelect filterConditions;

    CustAccount             customer;
    ItemId                  itemId;
    UnknownNoYes            hasBatchAttributes;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>affectedDimension</Name>
				<Source><![CDATA[
        public FieldId affectedDimension()
    {
        return fieldNum(InventDim, InventBatchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMustBeApplied</Name>
				<Source><![CDATA[
        protected boolean calcMustBeApplied()
    {
        return #PdsBatchAttribEnabled && itemId && this.hasBatchAttributes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doApplyToOnHandQuery</Name>
				<Source><![CDATA[
        protected void doApplyToOnHandQuery(InventOnHandQuery _onHandQuery)
    {
        SysQuery::findOrCreateGroupByField(_onHandQuery.parmSysQuery(), _onHandQuery.dsInventDim(), fieldNum(InventDim, InventBatchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBatchAttributes</Name>
				<Source><![CDATA[
        private boolean hasBatchAttributes()
    {
        if (hasBatchAttributes == UnknownNoYes::Unknown)
        {
            if (!itemId)
            {
                return false;
            }

            hasBatchAttributes = PdsBatchAttribByItem::existItemIdAny(itemId) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return hasBatchAttributes == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this criteria from the given inventory movement.
    /// </summary>
    /// <param name="_movement">
    ///    The inventory movement.
    /// </param>
    private void initFromMovement(InventMovement _movement)
    {
        if (_movement.pdsMustConsiderBatchAttrib())
        {
            itemId    = _movement.itemId();
            customer  = _movement.custVendAc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMatchedByInventDim</Name>
				<Source><![CDATA[
        public boolean isMatchedByInventDim(inventDim _inventDim)
    {
        return PdsBatchAttributes::pdsCheckBatchAtribReserve(itemId,
                                                             customer,
                                                             _inventDim.InventBatchId,
                                                             this.parmFilterConditions());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomer</Name>
				<Source><![CDATA[
        public CustAccount parmCustomer(CustAccount _customer = customer)
    {
        customer = _customer;

        return customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterConditions</Name>
				<Source><![CDATA[
        public TmpPdsBatchAttribSelect parmFilterConditions(TmpPdsBatchAttribSelect _filterConditions = null)
    {
        if (!prmisDefault(_filterConditions))
        {
            filterConditions.setTmpData(_filterConditions);
        }
        else
        {
            select firstonly filterConditions;
            if (!filterConditions)
            {
                filterConditions.setTmpData(InventTable::pdsFillDefaultBatchAttribforItem(itemId, customer));
            }
        }

        return filterConditions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
        public ItemId parmItemId(ItemId _itemId = itemId)
    {
        if (!prmisDefault(_itemId))
        {
            itemId             = _itemId;
            hasBatchAttributes = UnknownNoYes::Unknown;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventBatchAttributeCriteria construct()
    {
        return new InventBatchAttributeCriteria();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventBatchAttributeCriteria</c> class
    ///    that represents the batch attribute requirements of the specified movement.
    /// </summary>
    /// <param name="_movement">
    ///    The inventory movement.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventBatchAttributeCriteria</c> class.
    /// </returns>
    public static InventBatchAttributeCriteria newFromMovement(InventMovement _movement)
    {
        if (!_movement)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventBatchAttributeCriteria criteria = InventBatchAttributeCriteria::construct();
        criteria.initFromMovement(_movement);

        return criteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventBatchAttributeCriteria</c> class
    ///    that represents the batch attribute requirements of the item and customer.
    /// </summary>
    /// <param name="_itemId">
    ///    The ID of the item.
    /// </param>
    /// <param name="_customer">
    ///    The customer account.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventBatchAttributeCriteria</c> class.
    /// </returns>
    public static InventBatchAttributeCriteria newItemCustomer(itemId _itemId, CustAccount _customer)
    {
        InventBatchAttributeCriteria criteria = InventBatchAttributeCriteria::construct();
        criteria.parmItemId(_itemId);
        criteria.parmCustomer(_customer);

        return criteria;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
