<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjInvoiceProposalCreateLinesTask</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// A task for generating invoice proposals that can run in Batch.
/// </summary>
class ProjInvoiceProposalCreateLinesTask extends RunBaseBatch implements BatchRetryable
{
    private Set projIds;
    private ProjInvoiceProjId contractId;
    private ProjInvoiceProposalCreateLinesParams params;
    private boolean useBillingRules;

    const int CurrentVersion = 1;

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>Construct</Name>
        <Source><![CDATA[
    /// <summary>
    /// Constructs an instance of this class that can be used to generate project invoice proposals for the given contract and project ids.
    /// </summary>
    /// <param name = "_contractId">The contract that will receive the invoice proposals.</param>
    /// <param name = "_projIds">The set of projects to use when gathering transactions for the proposal.</param>
    /// <param name = "_params">The parameters to use when creating the proposal lines.</param>
    /// <param name = "_useBillingRules">"True" here will cause the task to create billing-rule invoice proposals instead of non-billing rule proposals.</param>
    /// <returns>A task that can create invoice proposals for the given contract and project Ids.</returns>
    public static ProjInvoiceProposalCreateLinesTask Construct(ProjInvoiceProjId _contractId, Set _projIds, ProjInvoiceProposalCreateLinesParams _params, boolean _useBillingRules)
    {
        ProjInvoiceProposalCreateLinesTask batch = new ProjInvoiceProposalCreateLinesTask();
        batch.projIds = _projIds;
        batch.contractId = _contractId;
        batch.params = _params;
        batch.useBillingRules = _useBillingRules;

        return batch;
    }

]]></Source>
      </Method>
      <Method>
        <Name>pack</Name>
        <Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, this.contractId, this.projIds.pack(), this.params.pack(), this.useBillingRules];
    }

]]></Source>
      </Method>
      <Method>
        <Name>unpack</Name>
        <Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        if (conPeek(_packedClass, 1) != CurrentVersion)
        {
            return false;
        }

        this.contractId = conPeek(_packedClass, 2);
        this.projIds = Set::create(conPeek(_packedClass, 3));
        ProjInvoiceProposalCreateLinesParams unpackedParams = ProjInvoiceProposalCreateLinesParams::construct();
        unpackedParams.unpack(conPeek(_packedClass, 4));

        this.params = unpackedParams;

        this.useBillingRules = conPeek(_packedClass, 5);

        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    public void run()
    {
        if (this.useBillingRules)
        {
            ProjInvoiceProposalRulePeriodic::createInvoiceProposalLines(this.contractId, this.params);
        }
        else
        {
            ProjInvoiceProposalNormalPeriodic::createInvoiceProposalLines(this.contractId, this.projIds, this.params);
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>canRunInNewSession</Name>
        <Source><![CDATA[
    public boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>create</Name>
        <Source><![CDATA[
    public static ProjInvoiceProposalCreateLinesTask create(container _packedObject)
    {
        ProjInvoiceProposalCreateLinesTask proposalBatch = new ProjInvoiceProposalCreateLinesTask();

        proposalBatch.unpack(_packedObject);

        return proposalBatch;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>