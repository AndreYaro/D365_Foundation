<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetSourceTypeStatusDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetSourceTypeStatusDP_CN</c> is the data provider class for <c>AssetSourceTypeStatus_CN</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetSourceTypeStatus_CN)),
    SRSReportParameterAttribute(classstr(AssetSourceTypeStatusContract_CN))
]
public class AssetSourceTypeStatusDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    AssetSourceTypeStatusTmp_CN assetSourceTypeStatusTmp_CN;
    boolean                     isExcludedScrap;
    FromDate                    fromDate;
    ToDate                      toDate;
    AssetGroupId                assetGroupName;
    AssetSourceTypeId_CN        sourceType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetSourceTypeStatusTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>AssetSourceTypeStatusTmp_CN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetSourceTypeStatusTmp_CN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(AssetSourceTypeStatusTmp_CN))]
    public AssetSourceTypeStatusTmp_CN getAssetSourceTypeStatusTmp_CN()
    {
        return assetSourceTypeStatusTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreEndYr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last year month end date for the given date.
    /// </summary>
    /// <param name="_date">
    /// The date parameter.
    /// </param>
    /// <returns>
    /// The last year month end date.
    /// </returns>
    private TransDate getPreEndYr(TransDate _date)
    {
        TransDate preYrDate;

        preYrDate = _date;

        while (year(preYrDate) == year(_date))
        {
             preYrDate = prevmth(preYrDate);
        }

        return endmth(preYrDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the data and inserts into <c>AssetSourceTypeStatusTmp_CN</c> table.
    /// </summary>
    /// <param name="_assetTable">
    /// The <c>AssetTable</c> buffer.
    /// </param>
    /// <param name="_assetSourceType">
    /// The <c>AssetSourceType</c> buffer.
    /// </param>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    private void initTmpData(
        AssetTable         _assetTable,
        AssetSourceType_CN _assetSourceType,
        AssetId _assetId ='')
    {
        AssetBook          assetBook;
        AssetTable         innerAssetTable;
        AssetBook          sourceAssetBook;
        AssetSumCalc       assetSumCalc;
        AssetSumCalc       assetSumCurrYearCalc;
        AssetSumCalc       assetSumPrevYearCalc;
        AssetAmount        assetAcquisitionValue;
        AssetTable         sourceAssetTable;

        while select * from sourceAssetBook
            order by sourceAssetBook.AssetId
                where sourceAssetBook.Status != AssetStatus::NoAcquisition
                    && sourceAssetBook.AssetGroup == _assetTable.AssetGroup
                join sourceAssetTable
                    where sourceAssetTable.AssetId == sourceAssetBook.AssetId
                    && sourceAssetTable.AssetSourceType_CN == _assetTable.AssetSourceType_CN
                outer join assetBook
                    where assetBook.AssetId == sourceAssetBook.AssetId && assetBook.BookId == sourceAssetBook.BookId
                outer join AssetGroup,AssetSourceType_CN,AssetId,Name from innerAssetTable
                    where innerAssetTable.AssetId == sourceAssetBook.AssetId
                    && (!_assetId || (innerAssetTable.AssetId == _assetId))
        {
            if (this.isExcluded(sourceAssetBook))
            {
                continue;
            }

            assetSumCalc = AssetSumCalc_Trans::newAssetYear(
                sourceAssetBook.AssetId,
                sourceAssetBook.BookId,
                toDate,
                AssetYear::All);

            assetSumPrevYearCalc = AssetSumCalc_Trans::newAssetYear(
                sourceAssetBook.AssetId,
                sourceAssetBook.BookId,
                toDate,
                AssetYear::PriorYears);

            assetSumCurrYearCalc = AssetSumCalc_Trans::newAssetYear(
                sourceAssetBook.AssetId,
                sourceAssetBook.BookId,
                toDate,
                AssetYear::CurrDate_CN);

            assetSumCalc.calc();
            assetSumPrevYearCalc.calc();
            assetSumCurrYearCalc.calc();

            assetAcquisitionValue = assetSumCalc.acquisitionValue();

            assetSourceTypeStatusTmp_CN.AssetGroupIdParm    = assetGroupName;
            assetSourceTypeStatusTmp_CN.SourceTypeIdParm    = sourceType;
            assetSourceTypeStatusTmp_CN.AssetGroupId        = innerAssetTable.AssetGroup;
            assetSourceTypeStatusTmp_CN.SourceTypeId        = AssetSourceType_CN::find(innerAssetTable.AssetSourceType_CN).SourceTypeId;
            assetSourceTypeStatusTmp_CN.AssetId             = innerAssetTable.AssetId;
            assetSourceTypeStatusTmp_CN.Name                = innerAssetTable.Name;
            assetSourceTypeStatusTmp_CN.AcquisitionDate     = sourceAssetBook.AcquisitionDate;
            assetSourceTypeStatusTmp_CN.AcquisitionValue    = assetAcquisitionValue;

            if (assetBook.DisposalDate < this.getPreEndYr(toDate)
                || assetBook.AcquisitionDate > this.getPreEndYr(toDate))
            {
                assetSourceTypeStatusTmp_CN.YearBeginningValue = 0;
            }
            else
            {
                assetSourceTypeStatusTmp_CN.YearBeginningValue = assetAcquisitionValue
                                                                    + assetSumPrevYearCalc.depreciationValue()
                                                                    + assetSumPrevYearCalc.extraDepreciationValue()
                                                                    + assetSumPrevYearCalc.acquisitionAdjValue()
                                                                    + assetSumPrevYearCalc.writeDownAdjValue()
                                                                    + assetSumPrevYearCalc.writeUpAdjValue()
                                                                    + assetSumPrevYearCalc.revaluationValue();
            }
            assetSourceTypeStatusTmp_CN.DepreciationThisYear = assetSumCurrYearCalc.depreciationValue()
                                                                + assetSumCurrYearCalc.extraDepreciationValue()
                                                                + assetSumCurrYearCalc.depreciationAdjValue();

            assetSourceTypeStatusTmp_CN.AdjustmentThisYear = assetSumCurrYearCalc.acquisitionAdjValue()
                                                                + assetSumCurrYearCalc.writeDownAdjValue()
                                                                + assetSumCurrYearCalc.writeUpAdjValue()
                                                                + assetSumCurrYearCalc.revaluationValue();

            assetSourceTypeStatusTmp_CN.AccumulatedDepreciation = assetSumCurrYearCalc.depreciationValue()
                                                                    + assetSumCurrYearCalc.extraDepreciationValue()
                                                                    + assetSumCurrYearCalc.depreciationAdjValue()
                                                                    + assetSumPrevYearCalc.depreciationValue()
                                                                    + assetSumPrevYearCalc.extraDepreciationValue()
                                                                    + assetSumPrevYearCalc.depreciationAdjValue();

            assetSourceTypeStatusTmp_CN.AccumulatedAdjustment = assetSumCurrYearCalc.acquisitionAdjValue()
                                                                + assetSumCurrYearCalc.writeDownAdjValue()
                                                                + assetSumCurrYearCalc.writeUpAdjValue()
                                                                + assetSumCurrYearCalc.revaluationValue()
                                                                + assetSumPrevYearCalc.acquisitionAdjValue()
                                                                + assetSumPrevYearCalc.writeDownAdjValue()
                                                                + assetSumPrevYearCalc.writeUpAdjValue()
                                                                + assetSumPrevYearCalc.revaluationValue();

            assetSourceTypeStatusTmp_CN.AssetScrapValue = assetBook.ScrapValue;
            assetSourceTypeStatusTmp_CN.NetBookValue    = assetSumCurrYearCalc.netBookValue()+assetSumPrevYearCalc.netBookValue();
            assetSourceTypeStatusTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExcluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if asset is excluded or not.
    /// </summary>
    /// <param name="_assetBook">
    /// The <c>AssetBook</c> table buffer.
    /// </param>
    /// <returns>
    /// <c>True</c> if excluded; else <c>False</c>.
    /// </returns>
    public boolean isExcluded(
        AssetBook      _assetBook)
    {
        AssetBookTable assetBookTable;

        assetBookTable = AssetBookTable::find(_assetBook.BookId);

        if (assetBookTable.CurrentOperationsTax != CurrentOperationsTax::Current)
        {
            return true;
        }

        if (_assetBook.AcquisitionDate < fromDate || _assetBook.AcquisitionDate > toDate)
        {
            return true;
        }

        switch (_assetBook.Status)
        {
            case AssetStatus::NoAcquisition:
                return true;

            case AssetStatus::Closed:

            case AssetStatus::Scrapped:

            case AssetStatus::Sold:
                if ( _assetBook.DisposalDate
                    && isExcludedScrap
                    && _assetBook.DisposalDate < prevyr(toDate) )
                {
                    return true;
                }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the SSRS report business logic.
    /// </summary>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00142, funcName());

        AssetSourceTypeStatusContract_CN contract;
        AssetTable                       assetTable;
        AssetSourceType_CN               assetSourceType;
        Query                            query;
        QueryRun                         queryRun;
        AssetGroupId                     assetGroupPrev;
        AssetGroupId                     assetGroupCur;
        AssetSourceTypeId_CN             sourceTypePrev;
        AssetSourceTypeId_CN             sourceTypeCur;
        QueryBuildDataSource             qbds;
        AssetId                          assetId;

        contract = this.parmDataContract() as AssetSourceTypeStatusContract_CN;

        isExcludedScrap = contract.parmIsExcludedAsset();
        fromDate        = contract.parmFromDate();
        toDate          = contract.parmToDate() ? contract.parmToDate() : dateMax();
        query           = this.parmQuery();

        assetGroupName = SysQuery::findOrCreateRange(query.dataSourceName(
            tablestr(AssetTable)),
            fieldnum(AssetTable, AssetGroup)).value();

        assetId = SysQuery::findOrCreateRange(query.dataSourceName(
            tablestr(AssetTable)),
            fieldnum(AssetTable, AssetId)).value();

        sourceType = SysQuery::findOrCreateQueryFilter(
            query,
            query.dataSourceTable(tableNum(AssetSourceType_CN)),
                fieldStr(AssetSourceType_CN, SourceTypeId)).value();

        qbds = query.dataSourceTable(tableNum(AssetTable));
        qbds.addGroupByField(fieldNum(AssetTable, AssetGroup));
        qbds.addGroupByField(fieldNum(AssetTable, AssetSourceType_CN));
        qbds.addSortField(fieldNum(AssetTable, AssetId));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            assetTable      = queryRun.get(tablenum(AssetTable));
            assetSourceType = AssetSourceType_CN::find(assetTable.AssetSourceType_CN);

            assetGroupCur   = assetTable.AssetGroup;
            sourceTypeCur   = assetSourceType.SourceTypeId;

            this.initTmpData(assetTable, assetSourceType, AssetId);
            assetGroupPrev = assetGroupCur;
            sourceTypePrev = sourceTypeCur;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>