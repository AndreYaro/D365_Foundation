<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSequenceNumberMoverBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class WHSSequenceNumberMoverBase
{
    protected SysDictTable sysDictTable;
    protected FieldName sequenceNumberFieldName;
    private boolean isValidated;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    public void moveUp(Common _rowToMove)
    {
        this.move(_rowToMove, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    public void moveDown(Common _rowToMove)
    {
        this.move(_rowToMove, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveUp</Name>
				<Source><![CDATA[
    public boolean canMoveUp(Common _row)
    {
        return this.canMove(_row, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveDown</Name>
				<Source><![CDATA[
    public boolean canMoveDown(Common _row)
    {
        return this.canMove(_row, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMove</Name>
				<Source><![CDATA[
    private boolean canMove(Common _row, boolean _up)
    {
        if (!_row || !_row.RecId)
        {
            return false;
        }

        this.validateParametersOnce();
        this.validateRow(_row);

        Common targetRow = this.findAdjacentSequenceNumberRow(_row, _up);
        return targetRow != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>move</Name>
				<Source><![CDATA[
    private void move(Common _rowToMove, boolean _up)
    {
        if (!_rowToMove || !_rowToMove.RecId)
        {
            return;
        }

        this.validateParametersOnce();
        this.validateRow(_rowToMove);

        if (!_rowToMove.validateWrite())
        {
            return;
        }

        Common targetRow = this.findAdjacentSequenceNumberRow(_rowToMove, _up);
        if (!targetRow)
        {
            return;
        }

        this.swapSequenceNumbers(_rowToMove, targetRow);

        this.researchDataSource(_rowToMove);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAdjacentSequenceNumberRow</Name>
				<Source><![CDATA[
    protected abstract Common findAdjacentSequenceNumberRow(Common _row, boolean _up)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapSequenceNumbers</Name>
				<Source><![CDATA[
    private void swapSequenceNumbers(Common _rowToMove, Common _targetRow)
    {
        anytype currentSequenceNumber = _rowToMove.getFieldValue(sequenceNumberFieldName);
        anytype nextSequenceNumber = _targetRow.getFieldValue(sequenceNumberFieldName);
        anytype tempSequenceNumber = WHSSequenceNumberMoverBase::getMaxValueByType(typeOf(currentSequenceNumber));

        ttsbegin;

        _targetRow.setFieldValue(sequenceNumberFieldName, tempSequenceNumber);
        _targetRow.update();

        _rowToMove.setFieldValue(sequenceNumberFieldName, nextSequenceNumber);
        _rowToMove.update();

        _targetRow.setFieldValue(sequenceNumberFieldName, currentSequenceNumber);
        _targetRow.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxValueByType</Name>
				<Source><![CDATA[
    private static anytype getMaxValueByType(Types _type)
    {
        switch (_type)
        {
            case Types::Integer:
                return intMax();
            case Types::Int64:
                return int64Max();
            case Types::Real:
                return realMax();

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchDataSource</Name>
				<Source><![CDATA[
    private void researchDataSource(Common _row)
    {
        FormDataSource datasource = FormDataUtil::getFormDataSource(_row) as FormDataSource;
        if (datasource)
        {
            if (sysDictTable.tableType() == TableType::InMemory)
            {
                RecId recId = _row.RecId;
                datasource.research();
                datasource.positionToRecordByValue(fieldNum(Common, RecId), int642Str(recId));
            }
            else
            {
                datasource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRow</Name>
				<Source><![CDATA[
    private void validateRow(Common _row)
    {
        this.validateRowTableId(_row);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRowTableId</Name>
				<Source><![CDATA[
    private void validateRowTableId(Common _row)
    {
        if (_row.tableId != sysDictTable.id())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParametersOnce</Name>
				<Source><![CDATA[
    private void validateParametersOnce()
    {
        if (isValidated)
        {
            return;
        }

        this.validateParameters();

        isValidated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    protected void validateParameters()
    {
        this.validateSequenceNumberFieldBelongsToTable();
        this.validateSequenceNumberFieldTypeIsSupported();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSequenceNumberFieldBelongsToTable</Name>
				<Source><![CDATA[
    private void validateSequenceNumberFieldBelongsToTable()
    {
        TableId tableId = sysDictTable.id();
        boolean belongsToTable = fieldName2Id(tableId, sequenceNumberFieldName);
        if (!belongsToTable)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSequenceNumberFieldTypeIsSupported</Name>
				<Source><![CDATA[
    private void validateSequenceNumberFieldTypeIsSupported()
    {
        SysDictField sysDictField = SysDictField::newName(sysDictTable.name(), sequenceNumberFieldName);
        Types fieldType = sysDictField.baseType();
        boolean isSupported = fieldType == Types::Integer || fieldType == Types::Int64 || fieldType == Types::Real;
        if (!isSupported)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>