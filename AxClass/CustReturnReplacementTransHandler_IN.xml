<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustReturnReplacementTransHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustReturnReplacementTransHandler_IN</c> class handles customer return and replacement transaction based on customer invoice transaction.
/// </summary>
class CustReturnReplacementTransHandler_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateCustReturnTransReplacementTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update customer return and replacement transaction based on customer invoice transaction.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> customer invoice transaction line.
    /// </param>
    static public void updateCustReturnTransReplacementTrans(CustInvoiceTrans _custInvoiceTrans)
    {
        ReturnReplaceItemRef    returnReplaceItemRef;
        CustReturnTransReplacementTrans_IN  custReturnTransReplacementTrans_IN;
        CustInvoiceTrans    custInvoiceTrans;
        CustInvoiceTrans returnCustInvoiceTrans;
        CustInvoiceTrans replacementCustInvoiceTrans;
        CustInvoiceJour custInvoiceJour;

        if (TaxParameters::isExciseEnable_IN())
        {
            custInvoiceTrans = CustInvoiceTrans::findRecId(_custInvoiceTrans.RecId);
            custInvoiceJour = custInvoiceTrans.custInvoiceJour();
            if (custInvoiceJour.ReturnItemNum && custInvoiceTrans.custInvoiceTrans_IN().ExciseType_IN == ExciseType_IN::Manufacturer && custInvoiceJour.SalesType == SalesType::Sales)
            {
                // For sales replacement order invoice.
                // Return order can't be partially invoice, so always have one custinvoicetrans for each return order line.
                select firstOnly RecId, ReturnDispositionCodeId from returnCustInvoiceTrans join returnReplaceItemRef
                    where returnCustInvoiceTrans.SalesId == returnReplaceItemRef.OrigSalesId &&
                        returnCustInvoiceTrans.LineNum == returnReplaceItemRef.OrigSalesLineNum &&
                        returnCustInvoiceTrans.ItemId == returnReplaceItemRef.ItemId &&
                        returnReplaceItemRef.ReplaceSalesId == custInvoiceTrans.SalesId &&
                        returnReplaceItemRef.ReplaceSalesLineNum == custInvoiceTrans.LineNum &&
                        returnReplaceItemRef.ItemId == custInvoiceTrans.ItemId;

                if (
                    returnCustInvoiceTrans &&
                    returnCustInvoiceTrans.custInvoiceTrans_IN().ExciseType_IN == ExciseType_IN::Manufacturer &&
                    ReturnDispositionCode::find(returnCustInvoiceTrans.ReturnDispositionCodeId).DispositionAction == DispositionAction::ReplaceCredit &&
                    !custReturnTransReplacementTrans_IN::existReplacementCustInvoiceTrans(custInvoiceTrans.RecId))
                {
                    custReturnTransReplacementTrans_IN.ReplacementCustInvoiceTrans = custInvoiceTrans.RecId;
                    custReturnTransReplacementTrans_IN.ReturnCustInvoiceTrans = returnCustInvoiceTrans.RecId;
                    custReturnTransReplacementTrans_IN.insert();
                }
            }
            else if (
                custInvoiceJour.ReturnItemNum &&
                custInvoiceTrans.custInvoiceTrans_IN().ExciseType_IN == ExciseType_IN::Manufacturer &&
                custInvoiceJour.SalesType == SalesType::ReturnItem &&
                ReturnDispositionCode::find(custInvoiceTrans.ReturnDispositionCodeId).DispositionAction == DispositionAction::ReplaceCredit)
            {
                // For sales return order invoice.
                // Replacement order can be partially invoice, so always have one or more custinvoicetrans for each replacement order line.
                while select RecId from replacementCustInvoiceTrans join returnReplaceItemRef
                    where replacementCustInvoiceTrans.SalesId == returnReplaceItemRef.ReplaceSalesId &&
                        replacementCustInvoiceTrans.LineNum == returnReplaceItemRef.ReplaceSalesLineNum &&
                        replacementCustInvoiceTrans.ItemId == returnReplaceItemRef.ItemId &&
                        returnReplaceItemRef.OrigSalesId == custInvoiceTrans.SalesId &&
                        returnReplaceItemRef.OrigSalesLineNum == custInvoiceTrans.LineNum &&
                        returnReplaceItemRef.ItemId == custInvoiceTrans.ItemId
                {
                    if (replacementCustInvoiceTrans.custInvoiceTrans_IN().ExciseType_IN == ExciseType_IN::Manufacturer  && !custReturnTransReplacementTrans_IN::existReplacementCustInvoiceTrans(replacementCustInvoiceTrans.RecId))
                    {
                        custReturnTransReplacementTrans_IN.ReplacementCustInvoiceTrans = replacementCustInvoiceTrans.RecId;
                        custReturnTransReplacementTrans_IN.ReturnCustInvoiceTrans = custInvoiceTrans.RecId;
                        custReturnTransReplacementTrans_IN.insert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>