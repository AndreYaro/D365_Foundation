<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineType_Project</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       SalesLineType_Project
extends     SalesLineType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountClearingLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountClearingLedgerDimension(SalesTable _salesTable = salesTable)
    {
        ProjInvoiceTable projInvoiceTable;

        if (_salesTable.ProjId)
        {
            projInvoiceTable = ProjInvoiceTable::find(ProjTable::find(_salesTable.ProjId).ProjInvoiceProjId);
        }

        return CustLedgerAccounts::clearingLedgerDimension(ProjFundingSource::findCustAccount(projInvoiceTable.ProjInvoiceProjId).CustAccount,
                                                           projInvoiceTable.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountConsumptionLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountConsumptionLedgerDimension(InventTable _inventTable = salesLine.inventTable(),CostGroupId _costGroupId = '')
    {
        // Funding Source field is not used in sales order transaction
        ProjTrans projTrans = ProjTrans::newSalesLine(salesLine);

        return projTrans.salesLineConsumpLedgerDimension(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountCustLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountCustLedgerDimension(SalesTable _salesTable = salesTable)
    {
        ProjInvoiceTable projInvoiceTable;;

        if (_salesTable.ProjId)
        {
            projInvoiceTable = ProjInvoiceTable::find(ProjTable::find(_salesTable.ProjId).ProjInvoiceProjId);
        }

        return CustLedgerAccounts::summaryLedgerDimension(ProjFundingSource::findCustAccount(projInvoiceTable.ProjInvoiceProjId).CustAccount,
                                                          projInvoiceTable.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSalesLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountSalesLedgerDimension(InventTable _inventTable = salesLine.inventTable())
    {
        ProjTrans projTrans = ProjTrans::newSalesLine(salesLine);

        if (salesLine.LedgerDimension)
        {
            return salesLine.LedgerDimension;
        }

        return projTrans.salesLineRevenueLedgerDimension(salesLine,projTrans.fundingSource());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    boolean canBeInvoiced()
    {
        ProjProposalItem        projProposalItem;
        boolean ret = super();

        if (ret)
        {
            while select projProposalItem
                where projProposalItem.InventTransId  == salesLine.InventTransId
            {
                ProjProposalJour projProposalJour = projProposalItem.projProposalJour();

                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    if ((projProposalJour.LineProperty == ProjLinePropertyCode::Open &&
                         projProposalItem.DeliverNow != projProposalItem.RemainBefore && !projProposalItem.RemainAfter) ||
                         projProposalJour.LineProperty == ProjLinePropertyCode::PSASubmitted ||
                         projProposalJour.LineProperty == ProjLinePropertyCode::PSARejected ||
                         projProposalJour.LineProperty == ProjLinePropertyCode::Approved)
                    {
                        ret = false;
                    }
                }
                else if (projProposalJour.LineProperty == ProjLinePropertyCode::Open ||
                         projProposalJour.LineProperty == ProjLinePropertyCode::PSASubmitted ||
                         projProposalJour.LineProperty == ProjLinePropertyCode::PSARejected ||
                         projProposalJour.LineProperty == ProjLinePropertyCode::Approved)
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredInTotal</Name>
				<Source><![CDATA[
    SalesQty    deliveredInTotal()
    {
        SalesQty        qtySales = 0;
        ProjInvoiceItem projInvoiceItem;
        ProjItemTrans   projItemTrans;

        if (salesLine.ProjTransId)
        {
            select sum(QtyPhysical) from projInvoiceItem
                exists join projItemTrans
                    where projItemTrans.ProjTransId == projInvoiceItem.ProjTransId &&
                        projItemTrans.ProjTransIdRef == salesLine.ProjTransId;

            qtySales        = projInvoiceItem.QtyPhysical;

            qtySales       += (select sum(Qty) from custPackingSlipTrans
                                  where custPackingSlipTrans.InventTransId == salesLine.InventTransId).Qty;
        }

        return qtySales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesLine</c> record by using the <c>SalesCategory</c> value.
    /// </summary>
    /// <param name="_salesCategory">
    /// The <c>SalesCategory</c> value from which to initialize the sales line.
    /// </param>
    /// <param name="_name">
    /// The name to be assigned to the line.
    /// </param>
    protected void initFromEcoResCategory(SalesCategory _salesCategory, ItemFreeTxt _name)
    {
        InventTable     inventTable;

        super(_salesCategory, _name);

        if (salesLine.ItemId)
        {
            inventTable = salesLine.inventTable();
        }

        if (!inventTable.ProjCategoryId && _salesCategory)
        {
            this.setDefaultProjectGlobalCategory(_salesCategory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line with the specified <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record on which to base the sales line.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that specifies whether to reset the price; optional.
    /// </param>
    /// <param name="_matchingAgreement">
    /// The record ID of the agreement header that is associated with the sales order. Used for the
    /// automatic association with an agreement line.
    /// </param>
    /// <param name="_performVariantValidation">
    /// A Boolean value that indicates whether product variant validation should be performed and pass before executing variant specific defaulting; optional.
    /// </param>
    void initFromInventTable(InventTable _inventTable, boolean _resetPrice = true, AgreementHeaderRecId _matchingAgreement = 0, boolean _performVariantValidation = false)
    {
        super(_inventTable, _resetPrice, _matchingAgreement, _performVariantValidation);

        if (!_inventTable.ProjCategoryId && salesLine.SalesCategory)
        {
            this.setDefaultProjectGlobalCategory(salesLine.SalesCategory);
        }

        ProjTable projTableLocal = salesLine.projTable();
        //  Salesprice for internal projects are always set to zero
        if (projTableLocal.Type == ProjType::Internal ||
            (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() && !projTableLocal.ProjInvoiceProjId))
        {
            salesLine.SalesPrice = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        salesLine.ProjCategoryId = ProjParameters::find().ItemCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    public void inserting()
    {
        if (salesLine.ProjId && ! salesLine.ProjTransId)
        {
            salesLine.ProjTransId   = ProjParameters::newTransId();
        }

        salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::Project);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInTotal</Name>
				<Source><![CDATA[
    SalesQty invoicedInTotal()
    {
        SalesQty qty = 0;
        ProjInvoiceItem projInvoiceItem;
        ProjItemTrans   projItemTrans;

        if (salesLine.ProjTransId)
        {
            select sum(Qty) from projInvoiceItem
                exists join projItemTrans
                where projItemTrans.ProjTransId == projInvoiceItem.ProjTransId &&
                    projItemTrans.ProjTransIdRef == salesLine.ProjTransId;

            qty = projInvoiceItem.Qty;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionSales</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount ledgerDimensionSales(InventTable _inventTable = salesLine.inventTable())
    {
        ProjTrans projTrans = ProjTrans::newSalesLine(salesLine);

        if (salesLine.LedgerDimension)
        {
            return salesLine.LedgerDimension;
        }

        return projTrans.salesLineRevenueLedgerDimension(salesLine,projTrans.fundingSource());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionSales_IT</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount ledgerDimensionSales_IT(InventTable _inventTable = salesLine.inventTable(), boolean _creditNote = false )
    {
        return this.ledgerDimensionSales(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetProjAdjustRefInventTrans</Name>
				<Source><![CDATA[
    public boolean mustSetProjAdjustRefInventTrans(InvoiceId _invoiceId = '')
    {
        return (_invoiceId ? true : false); //Must set projAdjustRefId only if this is an invoice
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    LedgerPostingType postingOperations()
    {
        return LedgerPostingType::ProjCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingSales</Name>
				<Source><![CDATA[
    LedgerPostingType postingSales()
    {
        return LedgerPostingType::ProjTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingSales_IT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the Ledger posting type.
    /// </summary>
    /// <param name="_creditNote">Determines if the invoice is credit note.</param>
    /// <returns>The ledger posting type.</returns>
    public LedgerPostingType postingSales_IT(boolean _creditNote = false)
    {
        return this.postingSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultProjectGlobalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project category based on the sales category
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The sales category.
    /// </param>
    protected void setDefaultProjectGlobalCategory(RefRecId _ecoResCategory)
    {
        ProjCategoryId projCategoryId = ProjCategory::getDefaultProjectGlobalCategory(_ecoResCategory);
        if (projCategoryId)
        {
            salesLine.ProjCategoryId = projCategoryId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxItemGroup</Name>
				<Source><![CDATA[
    void setTaxItemGroup(TaxItemGroup _taxItemGroup)
    {
        if (ProjParameters::find().TaxItemGroupMethod == ProjTaxItemGroupMethod::Category)
        {
            super(ProjCategory::find(salesLine.ProjCategoryId).TaxItemGroupId);
        }
        else
        {
            super(_taxItemGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    public void  updating()
    {
        if (salesLine.ProjId && ! salesLine.ProjTransId)
        {
            salesLine.ProjTransId   = ProjParameters::newTransId();
        }

        super();

    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    public void deleting()
    {
        ProjTransSalesLine projTrans = new ProjTransSalesLine(salesLine);        
        ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Release);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified field is valid.
    /// </summary>
    /// <param name="fieldId">
    /// The field ID of the field to validate.
    /// </param>
    /// <returns>
    /// true if the field is valid; otherwise, false.
    /// </returns>
    boolean  validateField(FieldId  fieldId)
    {
        boolean  ok = super(fieldId);

        if (ok)
        {
            switch (fieldId)
            {
                case(fieldNum(SalesLine, ProjId)):
                    if (salesLine.ProjId)
                    {
                        if (salesLine.SalesType == SalesType::ItemReq)
                        {
                            ok = ProjTable::find(salesLine.ProjId).status().validateWriteItemRequirement();
                        }
                        else
                        {
                            ok = ProjTable::find(salesLine.ProjId).status().validateWriteSalesLine();
                        }
                    }
                    break;

                case(fieldNum(SalesLine, ProjCategoryId)):
                    ok = salesLine.checkProjCategory();
                    break;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean  validateWrite(boolean _skipCreditLimitCheck = false)
    {
        ProjValCheckTrans   projValCheckTrans   = new ProjValCheckTrans();
        boolean             ok                  = true;

        ok = super(_skipCreditLimitCheck);

        // Check ProjId
        if (ok)
        {
            if (salesLine.ProjId)
            {
                if (salesLine.SalesType == SalesType::ItemReq)
                {
                    ok  = ProjTable::find(salesLine.ProjId).status().validateWriteItemRequirement();
                }
                else
                {
                    ok  = ProjTable::find(salesLine.ProjId).status().validateWriteSalesLine();
                }
            }
        }

        // Check ProjCategoryId
        if (ok)
        {
            if (!this.validateProjCategoryId())
            {
                ok = checkFailed("@SYS98169");
            }
            ok  = ok && salesLine.checkProjCategory();
        }

        // Check ProjLinePropertyId
        if (ok && !this.validateProjLinePropertyId())         
        {
            ok = checkFailed("@Proj:ProjectLinePropertyMissing");
        }

        // Check the combination
        if (ok)
        {
            ok  = projValCheckTrans.validateMandatory(salesLine);
        }

        // Check if funding source is valid
        if (ok && ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
        {
            ok = salesLine.checkProjFundingSource();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates project category ID on the sales line.
    /// </summary>
    /// <returns>
    /// true if project category ID is valid; otherwise, false.
    /// </returns>
    protected boolean validateProjCategoryId()
    {
        return salesLine.ProjCategoryId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjLinePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates project line property ID on the sales line.
    /// </summary>
    /// <returns>
    /// true if project line property ID is valid; otherwise, false.
    /// </returns>
    protected boolean validateProjLinePropertyId()
    {
        return salesLine.ProjLinePropertyId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesTable</c> record based on the passed <c>ProjTable</c> record.
    /// </summary>
    /// <param name = "_projTable">
    /// The <c>ProjTable</c> record.
    /// </param>
    /// <returns>
    /// <c>SalesTable</c> record.
    /// </returns>
    public SalesTable salesTableFromProjTable(ProjTable _projTable)
    {
        SalesTable salesOrder = this.initSalesTableFromProjTable(_projTable);
        if (!salesOrder)
        {
            salesOrder = this.createSalesTableFromProjtable(_projTable);
        }
        return salesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTableFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesTable</c> record initialized from the passed <c>ProjTable</c> record.
    /// </summary>
    /// <param name = "_projTable">
    /// The <c>ProjTable</c> record.
    /// </param>
    /// <returns>
    /// <c>SalesTable</c> record.
    /// </returns>
    [Replaceable]
    protected SalesTable initSalesTableFromProjTable(ProjTable _projTable)
    {
        if (_projTable.hasMultipleFundingSourcesWithItemReqMultFundSourcesFeatureEnabled())
        {
            return _projTable.salesTable_ItemReqMultFundingSources(this.salesLine.CurrencyCode, this.salesLine.ProjFundingSource);
        }
        else
        {
            return _projTable.salesTable_ItemReq(this.salesLine.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTableFromProjtable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesTable</c> record from the passed <c>ProjTable</c> record.
    /// </summary>
    /// <param name = "_projTable">
    /// The <c>ProjTable</c> record.
    /// </param>
    /// <returns>
    /// <c>SalesTable</c> record.
    /// </returns>
    protected SalesTable createSalesTableFromProjtable(ProjTable _projTable)
    {
        if (_projTable.hasMultipleFundingSourcesWithItemReqMultFundSourcesFeatureEnabled())
        {
            return _projTable.createSalesTable_ItemReqMultFundingSources(this.salesLine.CurrencyCode, this.salesLine.ProjFundingSource);
        }
        else
        {
            return _projTable.createSalesTable_ItemReq(this.salesLine.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Item requirement - packing slip posting should delete existing funding tracking limits(if any).
    /// </summary>
    /// <param name = "inventTransIdSum">
    /// The <c>InventTransIdSum</c> associated with the sales order; optional.
    /// </param>
    public void updateSalesLine(InventTransIdSum inventTransIdSum = null)
    {
        super(inventTransIdSum);

        if (salesLine.SalesType == SalesType::ItemReq &&
            salesLine.SalesStatus == SalesStatus::Invoiced &&
            salesLine.InventRefTransId)
        {
            VendInvoiceInfoLine vendInvoiceInfoLine;
            select firstonly SourceDocumentLine from vendInvoiceInfoLine
                where vendInvoiceInfoLine.InventTransId == salesLine.InventRefTransId;

            if (vendInvoiceInfoLine.SourceDocumentLine)
            {
                ProjFundingLimitTrackingManager::updateUsingSourceDocumentLine(vendInvoiceInfoLine.SourceDocumentLine, ProjFundingLimitTrackingAction::Release, false);
            }
            else
            {
                // Item requirement lines which are consumed during PO product receipt, then funding tracking limits should be cleared.
                PurchLine purchLine;
                select firstonly SourceDocumentLine from purchLine
                    where purchLine.InventTransId == salesLine.InventRefTransId
                       && purchLine.DataAreaId == salesLine.DataAreaId;

                if (purchLine.SourceDocumentLine)
                {
                    ProjFundingLimitTrackingManager::updateUsingSourceDocumentLine(purchLine.SourceDocumentLine, ProjFundingLimitTrackingAction::Release, false);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>