<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductDimGroupSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductDimGroupSetup extends EcoResDimensionGroupSetup
{
    EcoResProductDimensionGroupRecId        productDimensionGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activeDimensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which dimensions are active dimensions.
    /// </summary>
    /// <returns>
    ///    A list that contains the IDs of dimensions in the <c>InventDim</c> records that are active.
    /// </returns>
    public List activeDimensionFields()
    {
        InventDimParm   inventDimParm   = this.inventDimParmActiveDimensions();
        return inventDimParm.selectedDimFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyProductDimensionsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any product dimensions are active.
    /// </summary>
    /// <returns>
    /// true if any product dimensions are active; otherwise, false.
    /// </returns>
    public boolean anyProductDimensionsActive()
    {
        return productDimensionGroup != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnlyConfigActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if config is the only active product dimension.
    /// </summary>
    /// <returns>true if config is the only active product dimension.</returns>
    public boolean isOnlyConfigActive()
    {
        boolean configActive = this.getFieldSetup(fieldNum(InventDim, configId)).isActive();
        if (!configActive)
        {
            return false;
        }
        var prodDims = InventDim::dimProductDimFieldSet().getEnumerator();
        while (prodDims.moveNext())
        {
            FieldId fieldId = prodDims.current();
            if (fieldId == fieldNum(InventDim, configId))
            {
                //Handled above
                continue;
            }

            boolean dimIsActive = this.getFieldSetup(fieldId).isActive();
            if (dimIsActive)
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the values for active product dimensions from one <c>InventDim</c> record to another
    ///    <c>InventDim</c> record.
    /// </summary>
    /// <param name="_inventDimFrom">
    ///    The <c>InventDim</c> record from which to copy.
    /// </param>
    /// <param name="_inventDimTo">
    ///    The <c>InventDim</c> record to which to copy.
    /// </param>
    public void copyProductDimensions(
        InventDim               _inventDimFrom,
        InventDim               _inventDimTo)
    {
        // copy values for the active dimensions
        _inventDimTo.initFromInventDim(_inventDimFrom, this.activeDimensionFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>InventDimGroupFieldSetup</c> class, based on the specified
    ///    dimension setup record.
    /// </summary>
    /// <param name="_dimensionFieldId">
    ///    A dimension field ID of the record that is to be found.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventDimGroupFieldSetup</c> class.
    /// </returns>
    /// <remarks>
    ///    The instance of the <c>InventDimGroupFieldSetup</c> class that is returned is never null, but may
    ///    not have a dimension field ID.
    /// </remarks>
    public InventDimGroupFieldSetup getFieldSetup(FieldId _dimensionFieldId)
    {
        return EcoResProductDimGroupSetupCache::getFieldSetup(productDimensionGroup, _dimensionFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldSetupEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an enumerator to iterate over all dimension fields.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventDimGroupFieldSetupEnumerator</c> class.
    /// </returns>
    public InventDimGroupFieldSetupEnumerator getFieldSetupEnumerator()
    {
        InventDimGroupFieldSetupEnumerator inventDimGroupFieldSetupEnumerator = InventDimGroupFieldSetupEnumerator::newFieldListAndDimGroups(
            EcoResProductDimGroupSetup::dimFields().getEnumerator(),
            productDimensionGroup, 0, 0);

        return inventDimGroupFieldSetupEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmActiveDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns information about which dimensions are active product dimensions.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimParm</c> record where fields that fulfill the condition are set.
    /// </returns>
    public InventDimParm inventDimParmActiveDimensions()
    {
        return EcoResProductDimGroupSetupCache::active(productDimensionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductDimensionGroup</Name>
				<Source><![CDATA[
    protected EcoResProductDimensionGroupRecId  parmProductDimensionGroup(EcoResProductDimensionGroupRecId  _productDimensionGroup = productDimensionGroup)
    {
        productDimensionGroup = _productDimensionGroup;

        return productDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductDimGroupSetup construct()
    {
        return new EcoResProductDimGroupSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProductDimensionsForItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the values for active product dimensions from one <c>InventDim</c> record to another
    ///    <c>InventDim</c> record.
    /// </summary>
    /// <param name="_itemId">
    ///    The ID of the item.
    /// </param>
    /// <param name="_inventDimFrom">
    ///    The <c>InventDim</c> record from which to copy.
    /// </param>
    /// <param name="_inventDimTo">
    ///    The <c>InventDim</c> record to which to copy.
    /// </param>
    public static void copyProductDimensionsForItem(
        ItemId                  _itemId,
        InventDim               _inventDimFrom,
        InventDim               _inventDimTo)
    {
        InventTable     inventTable = InventTable::find(_itemId);

        // The method below checks if a product master is specified.
        EcoResProductDimGroupSetup::copyProductDimensionsForProductMaster(inventTable.Product, _inventDimFrom, _inventDimTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProductDimensionsForProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies values for active product dimensions from one <c>InventDim</c> record to another
    ///    <c>InventDim</c> record.
    /// </summary>
    /// <param name="_productMaster">
    ///    The product master for the product.
    /// </param>
    /// <param name="_inventDimFrom">
    ///    The <c>InventDim</c> record from which to copy.
    /// </param>
    /// <param name="_inventDimTo">
    ///    The <c>InventDim</c> record to which to copy.
    /// </param>
    public static void copyProductDimensionsForProductMaster(
        EcoResProductRecId      _productMaster,
        InventDim               _inventDimFrom,
        InventDim               _inventDimTo)
    {
        // Don't find product master directly as products which aren't product masters aren't cached here (caching isn't FoundAndEmpty)
        EcoResProduct                       ecoResProduct = EcoResProduct::find(_productMaster);
        EcoResProductMaster                 ecoResProductMaster = ecoResProduct as EcoResProductMaster;

        if (!ecoResProductMaster)
        { // Either the parameter doesn't specify a product or the specified product is not a product master, so nothing to copy
            return;
        }

        // Find the product dimension group for the product master
        EcoResProductDimensionGroupProduct ecoResProductDimensionGroupProduct = EcoResProductDimensionGroupProduct::findByProduct(_productMaster);

        // Create an instance of this class for the product dimension group
        EcoResProductDimGroupSetup ecoResProductDimGroupSetup = EcoResProductDimGroupSetup::newDimensionGroup(ecoResProductDimensionGroupProduct.ProductDimensionGroup);

        // copy values for the active dimensions
        ecoResProductDimGroupSetup.copyProductDimensions(_inventDimFrom, _inventDimTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of fields from the <c>InventDim</c> records that contain all the product dimension
    ///    fields.
    /// </summary>
    /// <returns>
    ///    A list of field IDs.
    /// </returns>
    static public List dimFields()
    {
        return InventDim::dimProductDimFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventDimParm</c> record that contains only the fields of the specified product
    ///    dimension.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimParm</c> record that contains fields that are flagged for active product dimensions.
    /// </returns>
    static public InventDimParm inventDimParmProductDimensions()
    {
        InventDimParm   inventDimParm;
        List            fieldList       = InventDim::dimProductDimensionEnabledFieldList();

        inventDimParm.initFromInventDimFieldList(fieldList);

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>EcoResProductDimGroupSetup</c> class that matches the specified
    ///    dimension group.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The product dimension group for which the instance is created.
    /// </param>
    /// <returns>
    ///    An instance of the <c>EcoResProductDimGroupSetup</c> class.
    /// </returns>
    static public EcoResProductDimGroupSetup newDimensionGroup(EcoResProductDimensionGroupRecId  _productDimensionGroup)
    {
        EcoResProductDimGroupSetup  ecoResProductDimGroupSetup = EcoResProductDimGroupSetup::construct();

        ecoResProductDimGroupSetup.parmProductDimensionGroup(_productDimensionGroup);
        return ecoResProductDimGroupSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>EcoResProductDimGroupSetup</c> class that matches the
    ///    <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    ///    The item for which the instance is created.
    /// </param>
    /// <returns>
    ///    An instance of the <c>EcoResProductDimGroupSetup</c> class.
    /// </returns>
    static public EcoResProductDimGroupSetup newInventTable(InventTable  _inventTable)
    {
        return EcoResProductDimGroupSetup::newDimensionGroup(_inventTable.productDimensionGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>EcoResProductDimGroupSetup</c> class that matches the specified item.
    /// </summary>
    /// <param name="_itemId">
    ///    The item for which the instance is created.
    /// </param>
    /// <returns>
    ///    An instance of the <c>EcoResProductDimGroupSetup</c> class.
    /// </returns>
    static public EcoResProductDimGroupSetup newItemId(ItemId  _itemId)
    {
        return EcoResProductDimGroupSetup::newInventTable(InventTable::find(_itemId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>