<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationWorkflowSubmissionTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Performs processing on vendor invoices during execution of the automatic workflow submission background process.
/// </summary>
internal final class VendInvoiceAutomationWorkflowSubmissionTask extends SysOperationServiceController
{
    private const int MaximumAllowedCollectionRetries = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionTaskCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationWorkflowSubmissionTask construct()
    {
        return new VendInvoiceAutomationWorkflowSubmissionTask(
            classStr(VendInvoiceAutomationWorkflowSubmissionTask),
            methodStr(VendInvoiceAutomationWorkflowSubmissionTask, runSubmission),
            SysOperationExecutionMode::ReliableAsynchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSubmission</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs automatic workflow submission on a limited number of eligible invoices.
    /// </summary>
    /// <param name = "_processScheduleWorkItem">The process execution data contract for the submission.</param>
    internal void runSubmission(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        VendInvoiceAutomationInvoiceTmp invoicesReadyForWorkflowSubmission = this.collectInvoicesReadyForWorkflowSubmission();

        try
        {
            this.submitVendorInvoices(invoicesReadyForWorkflowSubmission, _processScheduleWorkItem);
        }
        finally
        {
            VendInvoiceAutomationInvoicesInWorkflowSubmission::removeSubmissionRecordsFor(invoicesReadyForWorkflowSubmission);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectInvoicesReadyForWorkflowSubmission</Name>
				<Source><![CDATA[
    private VendInvoiceAutomationInvoiceTmp collectInvoicesReadyForWorkflowSubmission()
    {
        // Generate a random wait time between retries to ensure that any conflicting threads
        // attempt retries on different intervals
        int waitBetweenRetries = RandomGenerate::construct().randomInt(50, 1000);

        VendInvoiceAutomationInvoiceTmp invoicesReadyForWorkflowSubmission;

        VendInvoiceAutomationIWorkflowSubmissionCollector invoiceSubmissionCollector =
            VendInvoiceAutomationWorkflowSubmissionCollectorFactory::constructInvoiceCollector();

        VendInvoiceAutomationInstrumentationWorkflowSubmissionActivities instrumentationWorkflowSubmissionActivities =
            VendInvoiceAutomationInstrumentationWorkflowSubmissionActivities::createFromLoggerName(
            classStr(VendInvoiceAutomationWorkflowSubmissionTask));

        using (var activityContext = instrumentationWorkflowSubmissionActivities.collectInvoicesReadyForSubmissionContext())
        {
            try
            {
                ttsbegin;

                invoicesReadyForWorkflowSubmission = invoiceSubmissionCollector.collectInvoicesForWorkflowSubmission();

                this.insertCollectedInvoicesIntoWorkTable(invoicesReadyForWorkflowSubmission);

                ttscommit;
            }
            catch (Exception::DuplicateKeyException)
            {
                int currentRetryCount = xSession::currentRetryCount();

                // Only one record can exist per invoice in the submission table, so a duplicate key exception implies an invoice was collected
                // that already belongs to a submission process. If so, collection should be retried.
                if (currentRetryCount < MaximumAllowedCollectionRetries)
                {
                    sleep(currentRetryCount * waitBetweenRetries);
                    retry;
                }
                else
                {
                    VendInvoiceAutomationInstrumentationDbErrorProperties errorProperties = VendInvoiceAutomationInstrumentationDbErrorProperties::constructFromActivityContext(activityContext);
                    errorProperties.duplicateKeyProperty(invoicesReadyForWorkflowSubmission.RecId);
                }
            }
        }

        return invoicesReadyForWorkflowSubmission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCollectedInvoicesIntoWorkTable</Name>
				<Source><![CDATA[
    private void insertCollectedInvoicesIntoWorkTable(VendInvoiceAutomationInvoiceTmp _collectedInvoices)
    {
        VendInvoiceAutomationInvoicesInWorkflowSubmission invoiceSubmissionWorkTable;

        insert_recordset invoiceSubmissionWorkTable(VendInvoiceRecId)
            select VendInvoiceRecId from _collectedInvoices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitVendorInvoices</Name>
				<Source><![CDATA[
    private void submitVendorInvoices(
        VendInvoiceAutomationInvoiceTmp _vendInvoicesReadyForWorkflowSubmission,
        ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        VendInvoiceInfoTable vendInvoice;
        VendInvoiceAutomationInvoiceTmp invoicesByCompany;
        
        insert_recordset invoicesByCompany(VendInvoiceDataAreaId)
            select VendInvoiceDataAreaId from _vendInvoicesReadyForWorkflowSubmission
                group by _vendInvoicesReadyForWorkflowSubmission.VendInvoiceDataAreaId;

        while select VendInvoiceDataAreaId from invoicesByCompany
        {
            changecompany(invoicesByCompany.VendInvoiceDataAreaId)
            {
                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                vendInvoice = null;

                while select vendInvoice
                    exists join _vendInvoicesReadyForWorkflowSubmission
                        where _vendInvoicesReadyForWorkflowSubmission.VendInvoiceRecId == vendInvoice.RecId
                            && _vendInvoicesReadyForWorkflowSubmission.VendInvoiceDataAreaId == invoicesByCompany.VendInvoiceDataAreaId
                {
                    this.submitVendorInvoice(vendInvoice, _processScheduleWorkItem);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitVendorInvoice</Name>
				<Source><![CDATA[
    private void submitVendorInvoice(VendInvoiceInfoTable _vendorInvoice, ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        VendInvoiceAutomationIWorkflowSubmitter invoiceWorkflowSubmitter =
            VendInvoiceAutomationWorkflowSubmitterFactory::getWorkflowSubmitterForInvoiceSubmission(_vendorInvoice, _processScheduleWorkItem);

        invoiceWorkflowSubmitter.submitToWorkflow();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>