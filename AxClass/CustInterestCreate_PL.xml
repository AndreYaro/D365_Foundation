<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestCreate_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class CustInterestCreate_PL extends CustInterestCreate implements BatchRetryable
{
    DialogField calculateFreeHandInterestField;
    NoYes calculateFreeHandInterest;
    DialogField noteIssueDateField;
    TransDate noteIssueDate;

    InterestAmountCur taxInterestAmount;
    int taxInterestDays;
    TransDate custTransDate;

    #DEFINE.CurrentVersion(13)
    #LOCALMACRO.CurrentList
        calculateFreeHandInterest,
        noteIssueDate
    #ENDMACRO

    private const int daysAYear100 = 36500;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcInterestAmount</Name>
				<Source><![CDATA[
    protected container calcInterestAmount(CustTable _custTable,
        CustTrans _custTrans,
        TransDate _calcFrom,
        TransDate _calcTo,
        PositiveDays _interestDays,
        AmountCur _calculationAmount,
        TransDate _dueDate)
    {
        CurrencyCode currency;
        Percent percent;
        TransTxt transactionMsg;
        AmountCur amountCur;
        AmountCur minInterestAmt;
        AmountCur maxInterestAmt;
        CustInterestFee custInterestFeeAmount;
        TransDate calcFromAdjusted;

        taxInterestDays = 0;
        taxInterestAmount = 0;

        calcFromAdjusted = _calcFrom + _interestDays;

        if (custInterest.CustInterestType == CustInterestType::SingleRate
            || _custTable.CustExcludeInterestCharges
            || calcFromAdjusted > _calcTo)
        {
            return super(_custTable, _custTrans, _calcFrom, _calcTo, _interestDays, _calculationAmount, _dueDate);
        }

        currency = _custTrans.CurrencyCode;
        percent = custInterestVersionDetail.InterestPercent;

        // Calculate the number of days for the tax interest rate and standard rate
        if (calcFromAdjusted <= _dueDate)
        {
            taxInterestDays = _dueDate - calcFromAdjusted + 1;
        }

        _interestDays += _calcTo - calcFromAdjusted - taxInterestDays + 1;

        // Calculate tax interest amount
        taxInterestAmount = _calculationAmount * custInterestVersionDetail.TaxInterestPercent_PL
            * taxInterestDays / daysAYear100;

        // Calculate total interest amount
        amountCur = _calculationAmount * percent * _interestDays / daysAYear100;
        amountCur += taxInterestAmount;
        _interestDays += taxInterestDays;

        taxInterestAmount = CurrencyExchangeHelper::amount(taxInterestAmount, currency);

        custInterestFeeAmount = CustInterestFee::findByCustInterestVersionDetail(custInterestVersionDetail.RecId, currency);

        // Check if a minimum/maximum interest amount is set for the interest code and use it if necessary
        minInterestAmt = custInterestFeeAmount.MinimumInterestAmount;
        maxInterestAmt = custInterestFeeAmount.MaximumInterestAmount;

        if (minInterestAmt > amountCur && minInterestAmt != 0)
        {
            amountCur = minInterestAmt;
            minInterestAmt = _calculationAmount < 0 ? -minInterestAmt : minInterestAmt;
            transactionMsg = strFmt("@SYS128236", minInterestAmt, currency);
            isCurrencyConversionRequired = true;
        }

        if (maxInterestAmt < amountCur && maxInterestAmt != 0)
        {
            amountCur = maxInterestAmt;
            maxInterestAmt = _calculationAmount < 0 ? -maxInterestAmt : maxInterestAmt;
            transactionMsg = strFmt("@SYS128237", maxInterestAmt, currency);
            isCurrencyConversionRequired = true;
        }

        if (!transactionMsg)
        {
            transactionMsg = strFmt("@SYS128235", percent, "@SYS77046", custInterestVersionDetail.InterestInterval, custInterestVersionDetail.InterestCalculate);
        }

        return [amountCur, CustInterestCreationErrorType::ValidTransaction, _interestDays, percent, transactionMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that an interest note can be created for the given <c>CustTrans</c> record.
    /// </summary>
    /// <param name="_dueDate">
    /// Due date of the customer transaction.
    /// </param>
    /// <param name="_custTrans">
    /// Customer transaction for which to create the interest note.
    /// </param>
    /// <returns>
    /// true if an interest note can be created; otherwise, false.
    /// </returns>
    protected boolean checkTrans(DueDate _dueDate, CustTrans _custTrans)
    {
        boolean ret = super(_dueDate, _custTrans);

        custTransDate = _custTrans.TransDate;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    protected void createJournal(CustInterestJour _custInterestJour)
    {
        _custInterestJour.NoteIssueDate_PL = noteIssueDate ? noteIssueDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        super(_custInterestJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        calculateFreeHandInterestField = dialog.addFieldValue(enumStr(NoYes), calculateFreeHandInterest, "@GLS110929", "@GLS110935");
        noteIssueDateField = dialog.addFieldValue(extendedTypeStr(TransDate), noteIssueDate, "@GLS113019", "@GLS113020");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    protected TransDate getFromDate(
        CustLastInterestDate _lastInterestDate,
        DueDate _dueDate,
        TransDate _transDate)
    {
        PaymentDueDateUpdatePolicy paymentDueDateUpdatePolicy;

        TransDate ret = super(_lastInterestDate, _dueDate, _transDate);

        if (!_lastInterestDate
            && custInterest.CustInterestType != CustInterestType::SingleRate
            && calculateFreeHandInterest
            && custInterestVersion.TaxInterestDays_PL
            && ret > custTransDate + custInterestVersion.TaxInterestDays_PL)
        {
            ret = custTransDate + custInterestVersion.TaxInterestDays_PL;

            // Recalculate values based on new 'calculate from' date
            paymentDueDateUpdatePolicy = PaymentDueDateUpdatePolicy::Next;
            if (paymCalendarCustInterest.InterestCalculationStart == PaymCalendarInterestCalculationStart::PreviousBusinessDay)
            {
                paymentDueDateUpdatePolicy = PaymentDueDateUpdatePolicy::Previous;
            }

            [interestStartDate, interestGraceDays] = this.getInterestStartDateAndGraceDays(ret, paymentDueDateUpdatePolicy, '');
            ret = interestStartDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        calculateFreeHandInterest = calculateFreeHandInterestField.value();
        noteIssueDate = noteIssueDateField.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdditionalCustInterestTransFields</Name>
				<Source><![CDATA[
    protected void setAdditionalCustInterestTransFields(CustInterestTrans _custInterestTrans)
    {
        _custInterestTrans.TaxInterestAmount_PL = taxInterestAmount;
        _custInterestTrans.TaxInterestDays_PL = taxInterestDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdditionalCustInterestTransLineFields</Name>
				<Source><![CDATA[
    protected void setAdditionalCustInterestTransLineFields(CustInterestTransLine _custInterestTransLine)
    {
        TransDate dueDate;

        if (!_custInterestTransLine.CustInterestTrans
            && calculateFreeHandInterest
            && custInterestVersion.TaxInterestDays_PL)
        {
            dueDate = CustTrans::find(_custInterestTransLine.CustTransId).DueDate;

            custInterestTransLine.CustInterestTrans = CustInterestTrans::findByCustTransIdInterestNote(
                                                    custInterestTransLine.CustTransId, _custInterestTransLine.InterestNote, dueDate).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container base;
        boolean ret;
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [ version, #CurrentList, base ] = _packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>