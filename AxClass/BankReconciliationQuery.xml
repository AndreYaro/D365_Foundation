<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class BankReconciliationQuery extends AbstractBankQuery
{
    private const str IsMatchedCondition = '%1 = 0';
    private const str TableField = '%1.%2';

    private List groupByFieldIds;

    protected TableId sourceTableId;
    protected BankReconciliationMatchRule rule;
    protected Common comparedRecordBuffer;
    protected List matchRuleCache;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(BankReconciliationMatchRule _rule, TableId _sourceTableId)
    {
        sourceTableId = _sourceTableId;
        rule = _rule;
        groupByFieldIds = new List(Types::Integer);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGroupByFieldIds</Name>
				<Source><![CDATA[
    internal List getGroupByFieldIds()
    {
        return groupByFieldIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRunRecord</Name>
				<Source><![CDATA[
    internal void setQueryRunRecord(QueryRun _queryRun, Common _searchTable)
    {
        for (Counter counter = 1; counter <= _queryRun.query().dataSourceCount(); counter ++)
        {
            TableId tableId = _queryRun.query().dataSourceNo(counter).table();
            if (tableId == sourceTableId)
            {
                _queryRun.setRecord(_searchTable, counter);
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComparedRecordBuffer</Name>
				<Source><![CDATA[
    internal protected void setComparedRecordBuffer(Common _comparedStatementTmpBuffer)
    {
        comparedRecordBuffer = _comparedStatementTmpBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupByFields</Name>
				<Source><![CDATA[
    internal protected void addGroupByFields(TableId _tableId, RecId _groupRuleRecId)
    {
        BankReconciliationGroupRule groupRule = BankReconciliationGroupRule::find(_groupRuleRecId);

        if (groupRule)
        {
            BankReconciliationGroupRuleLine ruleLine;
            while select FieldId from ruleLine
                group by FieldId
                where ruleLine.BankReconciliationGroupRule == groupRule.RecId
            {
                BankGroupByField groupField = new BankGroupByField(_tableId, ruleLine.FieldId);
                this.addGroupByField(groupField);
                groupByFieldIds.addEnd(ruleLine.FieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldRanges</Name>
				<Source><![CDATA[
    internal protected void addFieldRanges(QueryBuildDataSource _qbds, FieldId _isMatched, TableId _tableId)
    {
        str rangeValue;

        ListEnumerator enumerator = matchRuleCache.getEnumerator();

        while (enumerator.moveNext())
        {
            BankReconciliationMatchRuleLine matchRuleLine = enumerator.current();
            anytype comparedValue = this.getCompareValue(matchRuleLine, comparedRecordBuffer);

            if (comparedValue)
            {
                FieldId fieldId = this.generateFieldId(matchRuleLine.FieldId);

                if (BankReconciliationRuleParser::getTypeForField(_qbds.table(), fieldId) == Types::Enum)
                {
                    comparedValue = BankReconciliationRuleParser::convertEnumCompareValueToIndex(_qbds.table(), fieldId, comparedValue);
                }

                BankReconciliationMatchFieldValue rangeValueString = this.getFieldStr(_qbds, fieldId) +
                    BankReconciliationRuleParser::getSQLRangeValueString(
                        matchRuleLine.Operator,
                        comparedValue,
                        BankReconciliationRuleParser::getTypeForField(_qbds.table(), fieldId));

                rangeValue = BankReconciliationRuleParser::combineRanges(rangeValue, rangeValueString);
            }
        }

        str isMatchedFilter = strFmt(IsMatchedCondition, this.getFieldStr(_qbds, _isMatched));
        rangeValue = BankReconciliationRuleParser::combineRanges(rangeValue, isMatchedFilter);
        this.addFieldRange(new BankQueryRange(_tableId, _isMatched, rangeValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFieldId</Name>
				<Source><![CDATA[
    internal protected FieldId generateFieldId(FieldId _origFieldId)
    {
        return _origFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompareValue</Name>
				<Source><![CDATA[
    internal protected anytype getCompareValue(BankReconciliationMatchRuleLine _matchRuleLine, Common _comparedTmpBuffer)
    {
        anytype compareValue;

        FieldId compareFieldId = BankReconciliationRuleParser::getComparedTableFieldId(_matchRuleLine.CompareFieldId, _comparedTmpBuffer);

        if (compareFieldId && _comparedTmpBuffer)
        {
            compareValue = BankReconciliationRuleParser::getCompareValueFromField(
                _matchRuleLine.getFieldType(),
                _comparedTmpBuffer.(compareFieldId),
                _matchRuleLine.CompareFieldExpression);
        }
        else
        {
            compareValue = _matchRuleLine.Value;
        }

        return compareValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldStr</Name>
				<Source><![CDATA[
    internal str getFieldStr(QueryBuildDataSource _qbds, FieldId _fieldId)
    {
        return strFmt(TableField, _qbds.name(), fieldId2Name(_qbds.table(), _fieldId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>