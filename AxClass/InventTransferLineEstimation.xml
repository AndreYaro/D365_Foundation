<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferLineEstimation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransferLineEstimation</c> class handles the estimation of <c>InventTransLine</c> records.
/// </summary>
class InventTransferLineEstimation
{
    InventTransferLine inventTransferLine;
    InventTransferLine inventTransferLineOrig;
    boolean mustSyncDimensions = false;
    boolean isCancellingTransferOrder = false;
    InventUpd_Estimated estimatedFrom;
    InventUpd_Estimated estimatedTo;
    InventTransferRemainStatus  origRemainStatus;
    NoYes dropEstimated;
    NoYes updateHeader;
    NoYes skipReservation;

    InventQty qtyRemainReceive;
    PdsCWInventQty cwQtyRemainReceive;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmQtyRemainReceive</Name>
				<Source><![CDATA[
    public InventQty parmQtyRemainReceive(InventQty _qtyRemainReceive = qtyRemainReceive)
    {
        qtyRemainReceive = _qtyRemainReceive;
        return qtyRemainReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCwQtyRemainReceive</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmCwQtyRemainReceive(PdsCWInventQty _cwQtyRemainReceive = cwQtyRemainReceive)
    {
        cwQtyRemainReceive = _cwQtyRemainReceive;
        return cwQtyRemainReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDropEstimated</Name>
				<Source><![CDATA[
    public NoYes parmDropEstimated(NoYes _dropEstimated = dropEstimated)
    {
        dropEstimated = _dropEstimated;
        return dropEstimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReservation</Name>
				<Source><![CDATA[
    public NoYes parmSkipReservation(NoYes _skipReservation = skipReservation)
    {
        skipReservation = _skipReservation;
        return skipReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateHeader</Name>
				<Source><![CDATA[
    public NoYes parmUpdateHeader(NoYes _updateHeader = updateHeader)
    {
        updateHeader = _updateHeader;
        return updateHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLine</Name>
				<Source><![CDATA[
    private void initFromLine(InventTransferLine _inventTransferLine)
    {
        inventTransferLine = _inventTransferLine;
        inventTransferLineOrig = inventTransferLine.orig();
        origRemainStatus = inventTransferLineOrig.RemainStatus;

        qtyRemainReceive = inventTransferLine.QtyRemainReceive;
        cwQtyRemainReceive = inventTransferLine.PdsCWQtyRemainReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsCancellingTransferOrder</Name>
				<Source><![CDATA[
    public void setIsCancellingTransferOrder(ParmId _parmId)
    {
        if (_parmId)
        {
            InventTransferParmTable inventTransferParmTable;
            select firstonly CanceledShipmentJournalRecId from inventTransferParmTable
                where inventTransferParmTable.ParmId == _parmId;
            if (inventTransferParmTable.CanceledShipmentJournalRecId)
            {
                isCancellingTransferOrder = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimatedPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>RemainStatus</c> and estimated <c>InventTrans</c> fields that are related to the line.
    /// </summary>    
    public void updateEstimatedPre()
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);

        if (!dropEstimated)
        {
            container changedQuantities;
            int changedQuantitiesLen = 0;

            if (inventTransferLineOrig.QtyRemainReceive > qtyRemainReceive)
            {
                // Must sync dimensions when reducing estimated quantity to be received.
                mustSyncDimensions = true;
            }

            // For full visibility CW items we cannot use InventUpd_Estimated to update
            // the receiving end so we need to determine which adjustments need to be made
            // for specific dimension/marking combinations and apply them manually.
            // To do this we compare the transaction before and after update of the shipping end.
            Map transFromBeforeUpd;
            Map transFromAfterUpd;
            if (isCWItem)
            {
                // Get the state of the involved transactions before update.
                transFromBeforeUpd = this.getQuantitiesForMovement();
            }

            estimatedFrom = this.updateEstimated(InventMovSubType::None);

            if (isCWItem)
            {
                // Get the state of the involved transactions after update.
                transFromAfterUpd = this.getQuantitiesForMovement();

                // Get the container with changes to apply.
                changedQuantities = this.calculateQuantityChanges(transFromBeforeUpd, transFromAfterUpd);
                changedQuantitiesLen = conLen(changedQuantities);
            }

            inventTransferLine.QtyRemainReceive = qtyRemainReceive;
            inventTransferLine.PdsCWQtyRemainReceive = cwQtyRemainReceive;

            // Update the receiving end of the transaction.
            // In case of CW item use the changes stored in changedQuantities
            // or standard process if changedQuantities is empty.
            if (isCWItem && changedQuantitiesLen > 0)
            {
                InventMov_TransferTo estimatedToMovement = InventMovement::construct(inventTransferLine, InventMovSubType::TransferOrderTo) as InventMov_TransferTo;
                if (!estimatedToMovement) 
                {
                    throw error("@SYS18447");
                }

                estimatedToMovement.parmUseFromMovementAsIssueMovement(true);

                for (int it = 1; it <= changedQuantitiesLen; ++it)
                {
                    InventDimId inventDimId;
                    InventTransOriginIdMarked marking;
                    InventQty qty;
                    PdsCWInventQty cwQty;

                    [inventDimId, marking, qty, cwQty] = conPeek(changedQuantities, it);

                    InventDim inventDim = InventDim::find(inventDimId);
                    InventDimParm inventDimParm;                    
                    inventDimParm.initDimTransferReceipt(inventDim);
                    if (PdsGlobal::pdsIsCWFullVisItem(inventTransferLine.ItemId))
                    {
                        inventDimParm.InventSerialIdFlag = NoYes::Yes;
                    }

                    estimatedTo = InventUpd_Estimated::newInventMovement(estimatedToMovement);
                    estimatedTo.parmInventDim(inventDim);
                    estimatedTo.parmInventDimParm(inventDimParm);

                    // Only support for from changed quantity
                    if (!isCancellingTransferOrder && estimatedFrom.parmEstimated())
                    {
                        estimatedTo.parmEstimated(-(min(abs(estimatedTo.parmEstimated()), qty)));               // Quantity should be min of movement and changed quantity
                        estimatedTo.parmPdsCWEstimated(-(min(abs(estimatedTo.parmPdsCWEstimated()), cwQty)));   // CW quantity should be min of movement and changed CW quantity
                    }

                    estimatedTo.updateNow();
                }
            }
            // For normal items use standard InventUpd_Estimated
            else
            {
                estimatedTo = this.updateEstimated(InventMovSubType::TransferOrderTo);
            }
        }

        if (isCWItem)
        {
            this.clearRemainingQuantities();
        }

        this.setStatusRemain();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRemainingQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the remaining quantities based on catch weight remaining quantities.
    /// </summary>
    private void clearRemainingQuantities()
    {
        if (inventTransferLine.PdsCWQtyShipped
            && !inventTransferLine.PdsCWQtyRemainShip)
        {
            inventTransferLine.QtyRemainShip = 0;
        }

        if (inventTransferLine.PdsCWQtyReceived
            && !inventTransferLine.PdsCWQtyRemainReceive)
        {
            inventTransferLine.QtyRemainReceive = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the estimated <c>InventTrans</c> fields.
    /// </summary>
    /// <param name = "_inventMovSubType">An <c>InventMovSubType</c> value.</param>
    /// <returns>A new instance of the <c>InventUpd_Estimated</c> class.</returns>
    protected InventUpd_Estimated updateEstimated(InventMovSubType _inventMovSubType)
    {
        InventUpd_Estimated estimated = this.instantiateInventUpd_Estimated(_inventMovSubType);
        if (estimated)
        {
            estimated.updateNow();
        }

        return estimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventUpd_Estimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>InventUpd_Estimated</c>.
    /// </summary>
    /// <param name = "_inventMovSubType">An <c>InventMovSubType</c> value.</param>
    /// <returns>An <c>InventUpd_Estimated</c> instance.</returns>
    protected InventUpd_Estimated instantiateInventUpd_Estimated(InventMovSubType _inventMovSubType)
    {
        return InventUpd_Estimated::newInventMovement(this.instantiateInventMovement(_inventMovSubType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>InventMovement</c> class.
    /// </summary>
    /// <param name = "_inventMovSubType">An <c>InventMovSubType</c> value.</param>
    /// <returns>An <c>InventMovement</c> instance.</returns>
    protected InventMovement instantiateInventMovement(InventMovSubType _inventMovSubType)
    {
        return InventMovement::construct(inventTransferLine, _inventMovSubType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimatedOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates related data after an insert.
    /// </summary>
    public void updateEstimatedOnInsert()
    {
        if (!dropEstimated)
        {
            estimatedFrom.updateOwnerRelationship();
            estimatedTo.updateOwnerRelationship();

            // <GIN>
            if (inventTransferLine.checkForUnitID_IN())
            {
                InventTransOrigin::updateMarking(estimatedTo.movement().inventTransOriginId(),
                                                estimatedFrom.movement().inventTransOriginId(),
                                                inventTransferLine.converUnit_IN(inventTransferLine.QtyRemainReceive));
                InventTransOrigin::updateMarking(estimatedFrom.movement().inventTransOriginId(),
                                                estimatedTo.movement().inventTransOriginId(),
                                                inventTransferLine.converUnit_IN(-inventTransferLine.QtyRemainReceive));
            }
            // </GIN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimatedOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates related data after an update.
    /// </summary>
    public void updateEstimatedOnUpdate() {}

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimatedPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>RemainStatus</c> and estimated <c>InventTrans</c> fields that are related to the line.
    /// </summary>
    public void updateEstimatedPost()
    {      
        //status for line has been changed so header status might need to be updated
        if (updateHeader && inventTransferLine.RemainStatus != origRemainStatus)
        {
            inventTransferLine.setInventTransferStatus();
        }

        if (estimatedFrom && !skipReservation)
        {
            estimatedFrom.updateReservation();
        }

        if (mustSyncDimensions)
        {
            InventMov_TransferTo::syncEstimatedTransactions(inventTransferLine.InventTransId,
                                                            inventTransferLine.InventTransIdReceive,
                                                            InventMovSubType::TransferOrderTo,
                                                            inventTransferLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusRemain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the remainStatus field of the line.
    /// </summary>
    private void setStatusRemain()
    {
        if (! inventTransferLine.QtyRemainShip && ! inventTransferLine.QtyRemainReceive)
        {
            inventTransferLine.RemainStatus = InventTransferRemainStatus::None;
        }
        else
        {
            if (! inventTransferLine.QtyRemainShip)
            {
                inventTransferLine.RemainStatus = InventTransferRemainStatus::Receiving;
            }
            else
            {
                inventTransferLine.RemainStatus = InventTransferRemainStatus::Shipping;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantitiesForMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quantities for transactions associated with given movement as a map of
    ///     [InventDimId, MarkingRefInventTransOrigin] => [Qty, PdsCWQty]
    /// </summary>
    /// <returns>
    ///     Map of quantities.
    /// </returns>
    private Map getQuantitiesForMovement()
    {
        InventMovement  movement = InventMovement::construct(inventTransferLine);
        InventTrans     inventTrans;
        Map             result = new Map(Types::Container, Types::Container);

        while select InventDimId, MarkingRefInventTransOrigin, sum(Qty), sum(PdsCWQty) from inventTrans
            group by inventTrans.InventDimId, inventTrans.MarkingRefInventTransOrigin
            where inventTrans.InventTransOrigin     == movement.inventTransOriginId()
                  && inventTrans.TransChildType     == movement.transChildType()
                  && inventTrans.TransChildRefId    == movement.transChildRefId()
                  && inventTrans.StatusIssue        >= StatusIssue::ReservPhysical
                  && inventTrans.StatusIssue        <= StatusIssue::QuotationIssue
                  && inventTrans.StatusReceipt      == StatusReceipt::None
        {
            result.insert([inventTrans.InventDimId, inventTrans.MarkingRefInventTransOrigin],
                          [inventTrans.Qty, inventTrans.PdsCWQty]);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQuantityChanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Compares transactions before and after an update to find quantity changes.
    ///     Records changes as a container:
    ///     [InventDimId, MarkingRefInventTransOrigin, Qty, PdsCWQty].
    /// </summary>
    /// <param name="_before">
    ///     Transactions before the update as returned by <c>getQuantitiesForMovement</c>.
    /// </param>
    /// <param name="_after">
    ///     Transactions after the update as returned by <c>getQuantitiesForMovement</c>.
    /// </param>
    /// <returns>
    ///     Container of changes containers.
    /// </returns>
    private container calculateQuantityChanges(Map _before, Map _after)
    {
        container                   result = conNull();
        Map                         copyAfter = Map::create(_after.pack());

        InventDimId                 inventDimId;
        InventTransOriginIdMarked   marking;
        InventQty                   qtyBefore;
        PdsCWInventQty              cwQtyBefore;
        InventQty                   qtyAfter;
        PdsCWInventQty              cwQtyAfter;

        MapEnumerator it = _before.getEnumerator();
        while (it.moveNext())
        {
            [inventDimId, marking] = it.currentKey();
            [qtyBefore, cwQtyBefore] = it.currentValue();

            // If entry exists in both maps then calculate the difference
            if (_after.exists(it.currentKey()))
            {
                [qtyAfter, cwQtyAfter] = copyAfter.lookup(it.currentKey());

                if ((qtyAfter - qtyBefore != 0) || (cwQtyAfter - cwQtyBefore != 0))
                {
                    result += [[inventDimId, marking, qtyAfter - qtyBefore, cwQtyAfter - cwQtyBefore]];
                }
                copyAfter.remove(it.currentKey());
            }
            // If it's only in the _before then negate it
            else
            {
                if (qtyBefore != 0 || cwQtyBefore != 0)
                {
                    result += [[inventDimId, marking, -qtyBefore, -cwQtyBefore]];
                }
            }
        }

        // Add the entries from copyAfter that are left
        it = copyAfter.getEnumerator();
        while (it.moveNext())
        {
            [inventDimId, marking] = it.currentKey();
            [qtyAfter, cwQtyAfter] = it.currentValue();

            if (qtyAfter != 0 || cwQtyAfter != 0)
            {
                result += [[inventDimId, marking, qtyAfter, cwQtyAfter]];
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLine</Name>
				<Source><![CDATA[
    static public InventTransferLineEstimation newFromLine(InventTransferLine _inventTransferLine)
    {
        InventTransferLineEstimation instance = InventTransferLineEstimation::construct();
        instance.initFromLine(_inventTransferLine);
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static protected InventTransferLineEstimation construct()
    {
        return new InventTransferLineEstimation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>