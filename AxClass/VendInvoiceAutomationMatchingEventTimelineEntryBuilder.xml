<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationMatchingEventTimelineEntryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Timeline entry builder for the matching AP automation event.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.DocumentEventHistoryITimelineEntryBuilder))]
[ExportMetadata(classStr(DocumentEventHistoryITimelineEntryBuilder), enumStr(VendInvoiceMatchProductReceiptToInvoiceLineEvent))]
internal final class VendInvoiceAutomationMatchingEventTimelineEntryBuilder extends VendInvoiceAutomationHistoryBaseTimelineEntryBuilder
                                                                            implements ProcessExecutionIOpenExecutionMessageLogDialog
{
    private VendInvoiceInfoTable vendorInvoice;
    private ProcessExecutionId matchingExecutionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForDocumentEventHistoryEvent</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initializeForDocumentEventHistoryEvent(DocumentEventHistoryEvent _documentHistoryEvent)
    {
        vendorInvoice = this.getVendorInvoiceFromDocumentHistoryEvent(_documentHistoryEvent);
        matchingExecutionId = _documentHistoryEvent.getDocumentEventLog().ExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldTimelineEntryBeShownInTimeline</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean shouldTimelineEntryBeShownInTimeline(DocumentEventHistoryEvent _historyEvent)
    {
        DocumentEventLog documentEventLog = _historyEvent.getDocumentEventLog();
        DocumentEventLog nextDocumentEventInLog = this.findNextDocumentEventInLog(documentEventLog);

        boolean isNextDocumentEventAMatchingEvent = this.isDocumentEventLogOfType(
            nextDocumentEventInLog,
            enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent));

        // Only render a timeline entry for a matching event if that matching event is the last
        // one to occur in a matching run. This ensures that only relevant matching events are rendered.
        return !isNextDocumentEventAMatchingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimelineEntryHeader</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected TimelineEntryHeader getTimelineEntryHeader(DocumentEventHistoryEvent _historyEvent)
    {
        return strFmt(
            "@AccountsPayable:VendInvoiceAutomationMatchingEventTimelineEntryHeader", 
            this.getResultForMatchingEvent(_historyEvent.getDocumentEventLog()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimelineEntryDetails</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected TimelineEntryDetails getTimelineEntryDetails(DocumentEventHistoryEvent _historyEvent)
    {
        TimelineEntryDetails entryDetails = super(_historyEvent);

        // Generate a matching details summary that depicts how many matching attempts
        // have been made relative to the matching attempt limit, if set
        TimelineEntryDetails matchingFailureSummary = this.generateMatchingFailureSummary(
            _historyEvent.getDocument(),
            _historyEvent.getDocumentEventLog());

        // Append this matching summary to the existing timeline entry details
        entryDetails = strFmt(
            "@AccountsPayable:VendInvoiceAutomationMatchingEventTimelineEntryDetails",
            entryDetails,
            matchingFailureSummary);

        return entryDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimelineEntryButtons</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected List getTimelineEntryButtons(DocumentEventHistoryEvent _historyEvent)
    {
        List timelineEntryButtons = super(_historyEvent);

        if (vendorInvoice)
        {
            Args messageLogArgs = new Args();
            messageLogArgs.caller(this);

            // Add a link to the most recent automatic matching message log for this invoice to
            // the timeline entry buttons
            TimelineButton messageLogButton = TimelineButton::newForMenuItem(
                menuItemDisplayStr(ProcessExecutionMessageLogDialog),
                MenuItemType::Display,
                messageLogArgs);

            timelineEntryButtons.addEnd(messageLogButton);
        }

        return timelineEntryButtons;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContractForMessageLog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ProcessExecutionMessageLogContract getContractForMessageLog()
    {
        return ProcessExecutionMessageLogContract::newForSourceRecord(
            VendInvoiceAutomationConstants::AutomationMatchingTypeName,
            vendorInvoice.TableId,
            vendorInvoice.RecId,
            matchingExecutionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultForMatchingEvent</Name>
				<Source><![CDATA[
    private TimelineEntryHeader getResultForMatchingEvent(DocumentEventLog _matchingEvent)
    {
        TimelineEntryHeader matchingEventResult;

        switch (_matchingEvent.EventEnumValue)
        {
            case VendInvoiceMatchProductReceiptToInvoiceLineEvent::Waiting:
                matchingEventResult = "@AccountsPayable:VendInvoiceAutomationMatchingWaitingTimelineEntryHeader";
                break;
            case VendInvoiceMatchProductReceiptToInvoiceLineEvent::NotApplicable:
                matchingEventResult = "@AccountsPayable:VendInvoiceAutomationMatchingNotApplicableTimelineEntryHeader";
                break;
            case VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed:
                matchingEventResult = "@AccountsPayable:VendInvoiceAutomationStepSuccessful";
                break;
            case VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed:
                matchingEventResult = "@AccountsPayable:VendInvoiceAutomationStepFailed";
                break;
        }

        return matchingEventResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateMatchingFailureSummary</Name>
				<Source><![CDATA[
    private TimelineEntryDetails generateMatchingFailureSummary(
        Common _document,
        DocumentEventLog _eventLog)
    {
        VendParameters vendorInvoiceParameters = VendParameters::findByCompany(vendorInvoice.DataAreaId);
        
        PositiveNumber matchingAttemptsLimit = vendorInvoiceParameters.AutomationProductReceiptMatchingMaxAttempts;
        PositiveNumber matchingAttemptsCount = this.calculateHowManyConsecutiveMatchingAttemptsHaveOccurred(_eventLog) + 1;

        // Adjust limit details for scenario in which no attempts limit has been specified
        TimelineEntryDetails matchingAttemptsLimitDetails = 
            matchingAttemptsLimit > 0 ? int2Str(matchingAttemptsLimit) : "@AccountsPayable:VendInvoiceAutomationMatchingUnlimitedFailures";

        return strFmt(
            "@AccountsPayable:VendInvoiceAutomationMatchingEventFailureSummary", 
            matchingAttemptsCount,
            matchingAttemptsLimitDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHowManyConsecutiveMatchingAttemptsHaveOccurred</Name>
				<Source><![CDATA[
    private PositiveNumber calculateHowManyConsecutiveMatchingAttemptsHaveOccurred(DocumentEventLog _eventLog)
    {
        SequenceNumber lastFailedMatchingEventSequenceNumber = this.findSequenceNumberOfMostRecentFailedMatchingEvent(_eventLog);
        return this.findNumberOfMatchingAttemptsSinceLastMatchingFailure(_eventLog, lastFailedMatchingEventSequenceNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSequenceNumberOfMostRecentFailedMatchingEvent</Name>
				<Source><![CDATA[
    private SequenceNumber findSequenceNumberOfMostRecentFailedMatchingEvent(DocumentEventLog _eventLog)
    {
        DocumentEventLog failedMatchingDocumentEvent;

        // Get the sequence number, if any, of the most recent matching failure for the given
        // matching document event.
        select firstonly Sequence from failedMatchingDocumentEvent
            order by failedMatchingDocumentEvent.Sequence desc
            where failedMatchingDocumentEvent.SourceRecId == _eventLog.SourceRecId
               && failedMatchingDocumentEvent.SourceTableId == _eventLog.SourceTableId
               && failedMatchingDocumentEvent.DocumentEvent == _eventLog.DocumentEvent
               && failedMatchingDocumentEvent.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed
               && failedMatchingDocumentEvent.Sequence < _eventLog.Sequence;

        return failedMatchingDocumentEvent.Sequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNumberOfMatchingAttemptsSinceLastMatchingFailure</Name>
				<Source><![CDATA[
    private int findNumberOfMatchingAttemptsSinceLastMatchingFailure(
        DocumentEventLog _matchingEvent, 
        SequenceNumber _mostRecentFailedMatchingSequenceNumber)
    {
        DocumentEventLog matchingEventsSinceLastFailure;

        // Find the number of matching attempts logged between the sequence number of the current
        // matching event and the sequence number of the most recent failed matching event.
        // This number is the number of matching attemps made during this matching run.
        select count(RecId) from matchingEventsSinceLastFailure
            where matchingEventsSinceLastFailure.SourceRecId == _matchingEvent.SourceRecId
               && matchingEventsSinceLastFailure.SourceTableId == _matchingEvent.SourceTableId
               && matchingEventsSinceLastFailure.DocumentEvent == _matchingEvent.DocumentEvent
               && matchingEventsSinceLastFailure.Sequence < _matchingEvent.Sequence
               && matchingEventsSinceLastFailure.Sequence > _mostRecentFailedMatchingSequenceNumber;

        return matchingEventsSinceLastFailure.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextDocumentEventInLog</Name>
				<Source><![CDATA[
    private DocumentEventLog findNextDocumentEventInLog(DocumentEventLog _documentEventLog)
    {
        SequenceNumber sequenceNumberOfNextDocumentEventInLog = _documentEventLog.Sequence + 1;

        DocumentEventLog documentEventLog;

        select firstonly documentEventLog
            where documentEventLog.SourceRecId == _documentEventLog.SourceRecId
               && documentEventLog.SourceTableId == _documentEventLog.SourceTableId
               && documentEventLog.Sequence == sequenceNumberOfNextDocumentEventInLog;

        return documentEventLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentEventLogOfType</Name>
				<Source><![CDATA[
    private boolean isDocumentEventLogOfType(DocumentEventLog _documentEventLog, EnumId _documentEventType)
    {
        DocumentEvent documentEvent;

        select firstonly documentEvent
            where documentEvent.RecId == _documentEventLog.DocumentEvent;

        return documentEvent.EventEnumId == _documentEventType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>