<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxFiscalDocumentTax_Invoice_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class performs tax calculations when posting a tax fiscal document.
/// </summary>
class TaxFiscalDocumentTax_Invoice_BR extends Tax
{
    TaxCode                     taxCode;
    AccountNum                  accountNum;
    AccountNum                  offsetAccountNum;
    TaxAmount                   amount;
    Common                      sourceRecord;

    TaxFiscalDocumentCalcTax_BR    fiscalDocumentCalcTax;
    LedgerVoucher                  ledgerVoucher;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(NoYes                          _post,
                    TaxFiscalDocumentCalcTax_BR    _salesForm,
                    LedgerVoucher                  _ledgerVoucher,
                    TmpTaxWorkTrans                _tmpTaxWorkTrans)
    {
        post                    = _post;
        fiscalDocumentCalcTax   = _salesForm;
        ledgerVoucher           = _ledgerVoucher;
        taxWorkTrans            = _tmpTaxWorkTrans;
        taxModuleType           = TaxModuleType::SalesInvoice;

        headingTableId          = fiscalDocumentCalcTax.tableId();
        headingRecId            = fiscalDocumentCalcTax.recID();

        super();

        if (!headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            if (!this.checkParameters())
            {
                throw error("@SYS18447");
            }

            if (ledgerVoucher)
            {
                voucher = ledgerVoucher.lastVoucher();
                taxDate = ledgerVoucher.lastTransDate();
            }
            else
            {
                taxDate = fiscalDocumentCalcTax.invoiceDate();
            }
            sourceCurrencyCode = fiscalDocumentCalcTax.currencyCode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public RecId sourceRecId()
    {
        return sourceRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public tableId sourceTableId()
    {
        return sourceRecord.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves and posts (if not proforma) the tax of the tax fiscal document.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// Instance of the <c>LedgerPostingController</c> class used to post to the general ledger.
    /// </param>
    /// <returns>
    /// The calculated tax amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount       taxAmount;

        this.initLedgerPosting(_ledgerPostingController);

        if (post)
        {
            this.saveAndPost(_ledgerPostingController);
            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
            this.zeroOutAmountsInTaxTrans();
        }
        else
        {
            this.saveInJournalTrans(headingTableId, headingRecId);
            taxAmount = this.totalTaxAmount();
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>zeroOutAmountsInTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Zeroes out the amounts previously stored into the TaxTrans table
    /// </summary>
    /// <remarks>
    /// The Tax engine will calculate tax values normally for the fiscal document. For Tax transfer documents
    /// we need these values to be zero.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void zeroOutAmountsInTaxTrans()
    {
        TaxTrans    taxTrans;
        boolean     moreLines;

        ttsbegin;

        fiscalDocumentCalcTax.initCursor();
        moreLines = true;
        while (moreLines)
        {
            sourceRecord = fiscalDocumentCalcTax.nextLine();
            if (fiscalDocumentCalcTax.lineExist())
            {
                while select forupdate taxTrans
                    where taxTrans.SourceTableId == sourceRecord.TableId
                        && taxTrans.SourceRecId == sourceRecord.RecId
                {
                    taxTrans.TaxValue = 0;
                    taxTrans.update();
                }
            }
            else
            {
                moreLines   = false;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>