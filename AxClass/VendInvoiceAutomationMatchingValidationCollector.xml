<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationMatchingValidationCollector</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceAutomationMatchingValidationCollector</c> class collects vendor invoices
/// eligible for automatic matching validation process.
/// </summary>
internal final class VendInvoiceAutomationMatchingValidationCollector
{
    private VendInvoiceAutomationInstrumentationMatchingValidationActivities instrumentationMatchingValidationActivities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructInvoiceCollector</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationMatchingValidationCollector constructInvoiceCollector()
    {
        VendInvoiceAutomationMatchingValidationCollector invoiceCollector = new VendInvoiceAutomationMatchingValidationCollector();
        
        invoiceCollector.instrumentationMatchingValidationActivities =
            VendInvoiceAutomationInstrumentationMatchingValidationActivities::createFromLoggerName(
            classStr(VendInvoiceAutomationMatchingValidationCollector));

        return invoiceCollector;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectInvoicesForMatchingValidation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public VendInvoiceAutomationInvoiceTmp collectInvoicesForMatchingValidation()
    {
        VendInvoiceAutomationInvoiceTmp invoicesReadyForMatchingValidation;

        if (VendAutomateVendorInvoicesFeature::isEnabled())
        {
            this.filterInvoicesReadyForAutomationMatchingValidation();
            invoicesReadyForMatchingValidation = this.applyThroughputLimitsToInvoicesReadyForMatchingValidation();
        }

        return invoicesReadyForMatchingValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoicesReadyForAutomationMatchingValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies filters to get all the applicable invoices for automatic matching validation process.
    /// </summary>
    private void filterInvoicesReadyForAutomationMatchingValidation()
    {
        VendInvoiceAutomationInvoicesInMatchingValidation invoicesReadyForMatchingValidation;
        invoicesReadyForMatchingValidation.skipDataMethods(true);
        invoicesReadyForMatchingValidation.skipDatabaseLog(true);
        invoicesReadyForMatchingValidation.skipEvents(true);
        invoicesReadyForMatchingValidation.skipDeleteActions(true);
        invoicesReadyForMatchingValidation.skipDeleteMethod(true);
            
        VendParameters vendParameters;

        using (var activityContext = instrumentationMatchingValidationActivities.collectMatchingValidationInvoicesReadyContext())
        {
            while select crosscompany DataAreaId from vendParameters
            where vendParameters.AutomationWorkflowSubmission == NoYes::Yes
            {
                changecompany(vendParameters.DataAreaId)
                {
                    this.filterInvoicesWithAutomaticWFSubmission(invoicesReadyForMatchingValidation, vendParameters.DataAreaId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoicesWithAutomaticWFSubmission</Name>
				<Source><![CDATA[
    private void filterInvoicesWithAutomaticWFSubmission(
        VendInvoiceAutomationInvoicesInMatchingValidation _invoicesReadyForMatchingValidation,
        DataAreaId _dataAreaId)
    {
        // Applies filters to get eligible invoices for automatic matching process when automatic workflow submission process is enabled.
        VendInvoiceInfoTable vendInvoiceInfoTable;

        // Automatic matching validation criteria for invoices other than imported.
        delete_from _invoicesReadyForMatchingValidation
            where _invoicesReadyForMatchingValidation.VendInvoiceDataAreaId == _dataAreaId
                exists join vendInvoiceInfoTable
                    where vendInvoiceInfoTable.RecId == _invoicesReadyForMatchingValidation.VendInvoiceRecId
                        && vendInvoiceInfoTable.DocumentOrigin == DocumentOrigin::Service;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyThroughputLimitsToInvoicesReadyForMatchingValidation</Name>
				<Source><![CDATA[
    private VendInvoiceAutomationInvoiceTmp applyThroughputLimitsToInvoicesReadyForMatchingValidation()
    {
        VendInvoiceAutomationInvoiceTmp allowedInvoicesForMatchingValidation;
        VendInvoiceAutomationInvoicesInMatchingValidation invoicesReadyForMatchingValidation;

        int numberOfInvoicesCollected = 0;

        using (var activityContext = instrumentationMatchingValidationActivities.maxCollectionSubmissionContext())
        {
            int maximumAllowedNumberOfInvoicesCollected = this.calculateMatchingValidationFrequencyInHours();

            while select invoicesReadyForMatchingValidation
            order by invoicesReadyForMatchingValidation.RecId
            {
                if (numberOfInvoicesCollected >= maximumAllowedNumberOfInvoicesCollected)
                {
                    // If the maximum number of invoices has been collected, stop collecting new invoices
                    break;
                }

                allowedInvoicesForMatchingValidation.VendInvoiceRecId = invoicesReadyForMatchingValidation.VendInvoiceRecId;
                allowedInvoicesForMatchingValidation.VendInvoiceDataAreaId = invoicesReadyForMatchingValidation.VendInvoiceDataAreaId;
                allowedInvoicesForMatchingValidation.insert();

                numberOfInvoicesCollected++;
            }
            
            VendInvoiceAutomationInstrumentationPerformanceProperties performanceProperties = VendInvoiceAutomationInstrumentationPerformanceProperties::constructFromActivityContext(activityContext);

            performanceProperties.throttlingLimitMetProperty(numberOfInvoicesCollected, maximumAllowedNumberOfInvoicesCollected);
        }

        return allowedInvoicesForMatchingValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMatchingValidationFrequencyInHours</Name>
				<Source><![CDATA[
    private int calculateMatchingValidationFrequencyInHours()
    {
        int maximumAllowedInvoicesPerHour = VendParameters::getMaximumInvoicesAllowedForAutomatedMatchingValidation();
        ProcessScheduleSeriesPollingDetails processPollingDetails = ProcessScheduleSeries::getPollingDetailsForSeries(
            VendInvoiceAutomationConstants::AutomationMatchingValidationTypeName,
            "@AccountsPayable:AutomationMatchingValidationSeriesName");

        int matchingValidationFrequencyInHours = processPollingDetails.parmInterval();

        if (processPollingDetails.parmUnit() == ProcessScheduleUnit::Day)
        {
            matchingValidationFrequencyInHours = matchingValidationFrequencyInHours * 24;
        }

        return maximumAllowedInvoicesPerHour * matchingValidationFrequencyInHours;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>