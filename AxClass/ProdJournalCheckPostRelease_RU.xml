<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCheckPostRelease_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJournalCheckPostRelease_RU extends ProdJournalCheckPost implements BatchRetryable
{
    boolean updateFinancial;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    public boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean                 ok = true;

        ProdJournalRelease_RU   prodJournalRelease;
        ProdTable               prodTable;

        while select ProdId from prodJournalRelease
            where prodJournalRelease.JournalId  == this.parmJournalId()
            join InventDimId from prodTable
                where prodTable.ProdId          == prodJournalRelease.ProdId
        {
            if (!prodTable.useReleaseFromProduction_RU())
            {
                ok = checkFailed(strfmt("@GLS115793", prodJournalRelease.ProdId));
            }
        }

        ok = ok && super(_journalTransList);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(JournalTransData _journalTransData)
    {
        ProdJournalRelease_RU   prodJournalRelease = _journalTransData.journalTrans();

        InventDim               mainItemInventDim,
                                byProdItemInventDim;

        ProdReleaseTrans_RU     prodReleaseTrans;

        setprefix(fieldLabelValue(prodJournalRelease.TableId, fieldnum(ProdJournalRelease_RU, ProdId), prodJournalRelease.ProdId));
        setprefix(fieldLabelValue(prodJournalRelease.TableId, fieldnum(ProdJournalRelease_RU, ItemId), prodJournalRelease.ItemId));

        boolean ok = super(_journalTransData);

        ProdReleaseKindTable_RU prodReleaseKindTable = prodJournalRelease.prodReleaseKindTable();
        if (ok && ! prodReleaseKindTable.RecId)
        {
            ok = checkFailed(strfmt("@GLS115794", prodJournalRelease.ReleaseKindId));
        }

        if (ok)
        {
            ProdTable prodTable = prodJournalRelease.prodTable();

            if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(prodJournalRelease.ItemId, fieldnum(InventDim, InventLocationId)) &&
                prodReleaseKindTable.Autodeduction && prodReleaseKindTable.InventLocationId != prodJournalRelease.inventDim().InventLocationId)
            {
                ok = checkFailed(strfmt("@GLS115795", prodJournalRelease.ReleaseKindId, prodReleaseKindTable.InventLocationId));
            }

            if (!prodJournalRelease.UnitId)
            {
                ok = checkFailed(strfmt("@GLS115796", prodJournalRelease.LineNum));
            }
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(prodTable.ItemId, prodTable.inventDim(), mainItemInventDim);
            mainItemInventDim = InventDim::findDim(mainItemInventDim);

            EcoResProductDimGroupSetup::copyProductDimensionsForItem(prodJournalRelease.ItemId, prodJournalRelease.inventDim(), byProdItemInventDim);
            byProdItemInventDim = InventDim::findDim(byProdItemInventDim);

            InventByProductTable_RU inventByProductTable = InventByProductTable_RU::find(prodTable.ItemId,
                                                                                         mainItemInventDim.InventDimId,
                                                                                         prodJournalRelease.ItemId,
                                                                                         byProdItemInventDim.InventDimId);

            if (!prodReleaseKindTable.IsReject && !inventByProductTable.RecId)
            {
                ok = checkFailed(strfmt("@GLS115797",
                                        prodJournalRelease.ItemId,
                                        prodTable.ItemId));
            }
            else
                if ((prodReleaseKindTable.ReleaseCalcPrinciple == ProdReleaseCalcPrinciple_RU::FixedPrice ||
                     (inventByProductTable && inventByProductTable.ByProdCosting == ProdByProdCosting_RU::FixedPrice)))
                {
                    ProdParametersDim prodParametersDim = prodTable.prodParametersDim();
                    if (prodParametersDim.CalculatingWIP_RU && prodParametersDim.CalculatingMethod_RU == ProdCalculatingMethod_RU::Proportionally)
                    {
                        ok = checkFailed(strfmt("@GLS115880", prodJournalRelease.ItemId,
                                                             prodParametersDim.CalculatingMethod_RU,
                                                             prodJournalRelease.ReleaseKindId,
                                                             ProdReleaseCalcPrinciple_RU::Calculated));
                    }
                    else if (prodJournalRelease.inventTable().inventTableModuleInvent().price() == 0)
                    {
                        ok = checkFailed(strfmt("@GLS115781", prodJournalRelease.ItemId));
                    }
                }
        }

        prodReleaseTrans.initFromProdJournalRelease(prodJournalRelease);

        InventUpd_Physical physical = InventUpd_Physical::newProdReleaseTrans_RU(prodReleaseTrans);
        if (!physical.check(prodJournalRelease.TransDate))
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateFinancial</Name>
				<Source><![CDATA[
    public boolean parmUpdateFinancial(boolean _updateFinancial = updateFinancial)
    {
        updateFinancial = _updateFinancial;
        return updateFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTransLedger</Name>
				<Source><![CDATA[
    public void postTransLedger(JournalTransData    _journalTransData,
                                LedgerVoucher       _ledgerVoucher)
    {
        ProdReleaseTrans_RU     prodReleaseTrans,
                                offsetProdReleaseTrans;

        InventUpd_Physical      physical,
                                physicalScrap;
        InventUpd_Financial     financial, financialScrap;

        Price                   totalPrice, price;

        ProdJournalTable      prodJournalTable   = journalTableData.journalTable();
        ProdJournalRelease_RU prodJournalRelease = _journalTransData.journalTrans();
        ProdTable             prodTable          = prodJournalRelease.prodTable();
        updateFinancial = updateFinancial || prodJournalRelease.OffsetTransRefRecId;

        setprefix(fieldLabelValue(prodJournalRelease.TableId, fieldnum(ProdJournalRelease_RU, ProdId), prodJournalRelease.ProdId));
        setprefix(fieldLabelValue(prodJournalRelease.TableId, fieldnum(ProdJournalRelease_RU, ItemId), prodJournalRelease.ItemId));

        super(_journalTransData, _ledgerVoucher);

        prodReleaseTrans.initFromProdJournalRelease(prodJournalRelease);
        prodReleaseTrans.insert();

        InventQty inventQty = prodReleaseTrans.inventReleaseQty();

        physical = InventUpd_Physical::newProdReleaseTrans_RU(prodReleaseTrans);
        physical.updateNow(_ledgerVoucher);

        costAmountPhysical += physical.updPhysicalAmountLedger();

        prodReleaseTrans.PostingWIPValuation         = physical.movement().postingOffsetPhysical();
        prodReleaseTrans.PostingWIPReceipt           = physical.movement().postingPhysical();
        prodReleaseTrans.WIPValuationLedgerDimension = physical.movement().offsetAccountPhysical();
        prodReleaseTrans.WIPReceiptLedgerDimension   = physical.movement().accountPhysical();
        prodReleaseTrans.CostAmount                  = physical.updPhysicalAmountLedger();
        prodReleaseTrans.update();

        if (prodReleaseTrans.OffsetRefRecId)
        {
            offsetProdReleaseTrans = ProdReleaseTrans_RU::findRecId(prodReleaseTrans.OffsetRefRecId, true);
            totalPrice = - offsetProdReleaseTrans.AmountReleased ? offsetProdReleaseTrans.AmountReleased : prodReleaseTrans.CostAmount ;
        }
        else
        {
            price      = InventTable::findCostPcsPrice(prodReleaseTrans.ItemId, prodReleaseTrans.InventDimId);
            totalPrice = CurrencyExchangeHelper::amount(InventTransIdSum::newTransOriginId(InventTransOrigin::findByInventTransId(prodReleaseTrans.InventTransId).RecId).physical() * price);
        }

        if (offsetProdReleaseTrans.RecId && !prodReleaseTrans.isScrap())
        {
            InventTransOrigin::updateMarking(
                InventTransOrigin::findByInventTransId(prodReleaseTrans.InventTransId).RecId,
                InventTransOrigin::findByInventTransId(offsetProdReleaseTrans.InventTransId).RecId,
                inventQty);
            InventTransOrigin::updateMarking(
                InventTransOrigin::findByInventTransId(offsetProdReleaseTrans.InventTransId).RecId,
                InventTransOrigin::findByInventTransId(prodReleaseTrans.InventTransId).RecId,
                offsetProdReleaseTrans.inventReleaseQty());
        }

        if (updateFinancial)
        {
            if (offsetProdReleaseTrans.RecId)
            {
                this.updateTransSource(offsetProdReleaseTrans, _ledgerVoucher);

                offsetProdReleaseTrans.Cancelled = NoYes::Yes;
                offsetProdReleaseTrans.update();
            }

            financial = InventUpd_Financial::newProdReleaseTrans_RU(prodReleaseTrans, _ledgerVoucher, totalPrice);
            financial.updateNow();

            prodReleaseTrans.Cancelled = NoYes::Yes;
            prodReleaseTrans.update();
        }

        if (prodJournalRelease.isScrap())
        {
            InventMov_Virtuel movementScrap = InventMov_Virtuel::newAutoLossProfit_Physical(physical, physical.movement());
            movementScrap.parmOffsetAccountPhysical(prodReleaseTrans.scrapDisposalLedger());
            movementScrap.parmPostingOffsetPhysical(LedgerPostingType::ProdScrap);
            movementScrap.parmAccountPhysical(prodReleaseTrans.WIPReceiptLedgerDimension);
            movementScrap.parmPostingPhysical(prodReleaseTrans.PostingWIPReceipt);
            movementScrap.parmTransRefId(prodReleaseTrans.ProdId);
            movementScrap.parmTransType(InventTransType::ProdRelease_RU);
            movementScrap.parmMustBeBookedPhysically(physical.movement().mustBeBookedPhysically());
            movementScrap.parmMustBeQuarantineControlled(false);
            movementScrap.parmStornoPhysical_RU(physical.movement().parmStornoPhysical_RU());
            movementScrap.parmStornoPhysicalForced_RU(physical.movement().parmStornoPhysicalForced_RU());

            if (financial)
            {
                movementScrap.parmAccountBalanceSheet(financial.movement().accountBalanceSheet());
                movementScrap.parmPostingBalanceSheet(financial.movement().postingBalanceSheet());
                movementScrap.parmAccountOperations(prodReleaseTrans.scrapLedger());
                movementScrap.parmPostingOperations(LedgerPostingType::ProdScrap);
            }

            physicalScrap = InventUpd_Physical::newProdReleaseLossProfit_RU(movementScrap, -inventQty);
            physicalScrap.updateNow(_ledgerVoucher);

            prodReleaseTrans.AutodetectionInventTransId = movementScrap.transId();
            prodReleaseTrans.update();

            prodJournalRelease.AutodetectionInventTransId = movementScrap.transId();
            prodJournalRelease.update();

            InventTransOrigin::updateMarking(
                InventTransOrigin::findByInventTransId(prodReleaseTrans.InventTransId).RecId,
                InventTransOrigin::findByInventTransId(prodReleaseTrans.AutodetectionInventTransId).RecId,
                inventQty);
            InventTransOrigin::updateMarking(
                InventTransOrigin::findByInventTransId(prodReleaseTrans.AutodetectionInventTransId).RecId,
                InventTransOrigin::findByInventTransId(prodReleaseTrans.InventTransId).RecId,
                -inventQty);

            if (financial)
            {
                financialScrap = InventUpd_Financial::newProdReleaseLossProfit_RU(movementScrap,
                                                                                  financial,
                                                                                  -financial.parmFinancial(),
                                                                                  -financial.parmFinancialUnit(),
                                                                                  -totalPrice,
                                                                                  _ledgerVoucher);
                financialScrap.updateNow();
            }

            if (offsetProdReleaseTrans.RecId)
            {
                InventTrans inventTrans = InventTrans::findTransId(offsetProdReleaseTrans.AutodetectionInventTransId, true);
                inventTrans.ReturnInventTransOrigin = movementScrap.inventTransOriginId();
                inventTrans.update();

                inventTrans = InventTrans::findTransId(movementScrap.transId(), true);
                inventTrans.ReturnInventTransOrigin = InventTransOrigin::findByInventTransId(offsetProdReleaseTrans.AutodetectionInventTransId).RecId;
                inventTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prefix</Name>
				<Source><![CDATA[
    public str prefix()
    {
        if (journalCheckPostType == JournalCheckPostType::Check)
        {
            return "@SYS28450" + ' - ' + "@GLS115737";
        }

        return "@SYS5943" + ' - ' + "@GLS115737";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferErrorJournalLine</Name>
				<Source><![CDATA[
    public void transferErrorJournalLine(JournalTransMap    _journalTrans,
                                         JournalTableData   _toJournalTableData,
                                         JournalTableMap    _toJournalTable)
    {
        ProdJournalRelease_RU   prodJournalRelease = _journalTrans;

        if (prodJournalRelease.InventTransId)
        {
            InventTransOrigin::changeReferenceId(InventTransOrigin::findByInventTransId(prodJournalRelease.InventTransId).RecId, prodJournalRelease.ProdId);
        }

        super(_journalTrans, _toJournalTableData, _toJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransSource</Name>
				<Source><![CDATA[
    protected void updateTransSource(ProdReleaseTrans_RU _prodReleaseTrans, LedgerVoucher _ledgerVoucher)
    {
        InventUpd_Financial     financial, financialScrap;
        Price                   price, totalPrice;

        price      = InventTable::findCostPcsPrice(_prodReleaseTrans.ItemId, _prodReleaseTrans.InventDimId);
        totalPrice = CurrencyExchangeHelper::amount(InventTransIdSum::newTransOriginId(InventTransOrigin::findByInventTransId(_prodReleaseTrans.InventTransId).RecId).physical() * price);

        financial = InventUpd_Financial::newProdReleaseTrans_RU(_prodReleaseTrans, _ledgerVoucher, totalPrice);
        financial.updateNow();

        if (_prodReleaseTrans.isScrap())
        {
            InventTrans inventTrans = InventTrans::findTransId(_prodReleaseTrans.AutodetectionInventTransId);

            InventMov_Virtuel movementScrap = InventMov_Virtuel::newAutoLossProfit(financial, inventTrans, inventTrans.InventTransOrigin().InventTransId);
            movementScrap.parmTransQty(inventTrans.Qty);
            movementScrap.parmAccountOperations(_prodReleaseTrans.scrapLedger());
            movementScrap.parmPostingOperations(LedgerPostingType::ProdScrap);
            movementScrap.parmAccountBalanceSheet(financial.movement().accountBalanceSheet());
            movementScrap.parmPostingBalanceSheet(financial.movement().postingBalanceSheet());
            movementScrap.parmTransRefId(_prodReleaseTrans.ProdId);
            movementScrap.parmTransType(InventTransType::ProdRelease_RU);

            NoYes stornoPhysical = InventParameters::find().StornoPhysicalPosting_RU && ! _prodReleaseTrans.OffsetRefRecId;
            movementScrap.parmStornoPhysical_RU(stornoPhysical);
            movementScrap.parmStornoPhysicalForced_RU(stornoPhysical);

            financialScrap = InventUpd_Financial::newProdReleaseLossProfit_RU(movementScrap,
                                                                              financial,
                                                                              -financial.parmFinancial(),
                                                                              -financial.parmFinancialUnit(),
                                                                              -totalPrice,
                                                                              _ledgerVoucher);
            financialScrap.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS115737";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPost</Name>
				<Source><![CDATA[
    static ProdJournalCheckPostRelease_RU newJournalCheckPost(boolean                _autoBlock,
                                                                     boolean                _showInfoResult,
                                                                     JournalCheckPostType   _journalCheckPostType,
                                                                     tableId                _tableId,
                                                                     JournalId              _journalId)
    {
        ProdJournalCheckPostRelease_RU journalCheckPost = new ProdJournalCheckPostRelease_RU();

        journalCheckPost.getLast();
        journalCheckPost.parmAutoBlock(_autoBlock);
        journalCheckPost.parmShowInfoResult(_showInfoResult);
        journalCheckPost.parmJournalCheckPostType(_journalCheckPostType);
        journalCheckPost.parmJournalTableId(_tableId);
        journalCheckPost.parmJournalId(_journalId);
        journalCheckPost.parmThrowCheckFailed(false);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPostJournal</Name>
				<Source><![CDATA[
    static ProdJournalCheckPostRelease_RU newPostJournal(ProdJournalId   _prodJournalId,
                                                                boolean         _showInfoResult)
    {
        ProdJournalCheckPostRelease_RU journalCheckPost = new ProdJournalCheckPostRelease_RU();

        journalCheckPost.getLast();
        journalCheckPost.parmAutoBlock(true);
        journalCheckPost.parmShowInfoResult(_showInfoResult);
        journalCheckPost.parmJournalCheckPostType(JournalCheckPostType::Post);
        journalCheckPost.parmJournalTableId(tablenum(ProdJournalTable));
        journalCheckPost.parmJournalId(_prodJournalId);
        journalCheckPost.parmVoucher('');
        journalCheckPost.parmThrowCheckFailed(true);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
