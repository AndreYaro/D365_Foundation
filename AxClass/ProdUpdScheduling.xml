<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdScheduling</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdUpdScheduling</c> class is the base class for production operations and job scheduling
///    update classes.
/// </summary>
/// <remarks>
///    An instance of this class should not be created; only derived classes should be instantiated.
/// </remarks>
class ProdUpdScheduling extends ProdUpd
{
    ProdParmScheduling      prodParmScheduling;
    WrkCtrParmSchedule      wrkCtrParmSchedule;
    WrkCtrScheduler_Prod    wrkCtrScheduler;

    #define.TotalRuntimeXpp('TotalRuntimeXpp')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initWrkCtr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the resource scheduling engine.
    /// </summary>
    public void initWrkCtr()
    {
        if (!wrkCtrScheduler)
        {
            wrkCtrScheduler = WrkCtrScheduler_Prod::newCheckLockingTTSLevel(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlapErrorUpdate</Name>
				<Source><![CDATA[
    void overlapErrorUpdate(OprNum _overlapErrorOprNum)
    {
        if (_overlapErrorOprNum <= 0)
        {
            return;
        }

        SysInfoAction_Formrun infoActionOverlap = SysInfoAction_Formrun::newFormnameControlname(formStr(ProdRoute),
                                                                                                identifierStr(ProdRoute_OverlapQty));

        ProdRoute prodRouteOverlapError = ProdRoute::find(prodParmScheduling.ProdId,
                                                          _overlapErrorOprNum,
                                                          RouteOprPriority::Primary,
                                                          true);
        if (prodRouteOverlapError)
        {
            infoActionOverlap.parmCallerBuffer(prodRouteOverlapError);
            prodRouteOverlapError.OverlapQty = 0;
            prodRouteOverlapError.update();

            setPrefix(strFmt("@SYS25786", _overlapErrorOprNum));
            info("@SYS88483",'', infoActionOverlap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer parmParmBuffer(ParmBuffer _prodParmScheduling = prodParmScheduling)
    {
        if (!_prodParmScheduling.RecId)
            throw error("@SYS25332");

        prodParmScheduling = _prodParmScheduling;

        return prodParmScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWrkCtrScheduler</Name>
				<Source><![CDATA[
    public WrkCtrScheduler_Prod parmWrkCtrScheduler(WrkCtrScheduler_Prod _wrkCtrScheduler = wrkCtrScheduler)
    {
        if (!prmisDefault(_wrkCtrScheduler))
        {
            wrkCtrScheduler = _wrkCtrScheduler;
        }
        return wrkCtrScheduler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the update of the production order to the scheduled state.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        WrkCtrSchedulerRuntimes wrkCtrSchedulerRuntimes = WrkCtrSchedulerRuntimes::construct();

        setPrefix(#PrefixField(ProdParmScheduling,ProdId));

        wrkCtrSchedulerRuntimes.startMeasurement(#TotalRuntimeXpp);

        // add the parameters to the scheduling list
        wrkCtrParmSchedule = WrkCtrParmSchedule::newProdParmScheduling(prodParmScheduling);

        try
        {
            this.updateSchedule(wrkCtrParmSchedule, true);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::CLRError)
        {
            warning(WrkCtrSchedulerJobSchedulingEngine::getLastClrException());
            throw error("@SYS135501");
        }
        catch (Exception::Error)
        {
            ttsbegin;

            switch (wrkCtrScheduler.schedStatus(wrkCtrParmSchedule))
            {
                case ProdSchedStatus::JobScheduled:
                    WrkCtrCapRes::createRefIdDeleted(wrkCtrScheduler.capacityRefType(),
                                                     prodParmScheduling.ProdId,
                                                     WrkCtrCapacityType::JobSched);
                    break;

                case ProdSchedStatus::OperationScheduled:
                    WrkCtrCapRes::createRefIdDeleted(wrkCtrScheduler.capacityRefType(),
                                                     prodParmScheduling.ProdId,
                                                     WrkCtrCapacityType::OperationSched);
                    break;
            }

            this.updateJobJournal(ParmJobStatus::ContainErrors);

            ttscommit;

            throw error("@SYS18447");
        }

        wrkCtrSchedulerRuntimes.endMeasurement(#TotalRuntimeXpp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSchedule</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void updateSchedule(WrkCtrParmSchedule _wrkCtrParmSchedule, boolean _updateJobJournal)
    {
        this.runScheduling(_wrkCtrParmSchedule, _updateJobJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduling</Name>
				<Source><![CDATA[
    internal void runScheduling(WrkCtrParmSchedule _wrkCtrParmSchedule, boolean _updateJobJournal)
    {        
        ttsbegin;

        if (! this.validate())
        {
            throw Exception::Error;
        }

        this.initWrkCtr();

        wrkCtrScheduler.reset();
        wrkCtrScheduler.addWrkCtrParmSchedule(_wrkCtrParmSchedule);

        wrkCtrScheduler.run();

        if (_updateJobJournal)
        {
            this.updateJobJournal(ParmJobStatus::Executed);
        }

        this.deleteWrkCtrCapDeleted(wrkCtrScheduler.capacityRefType(), prodParmScheduling.ProdId);

        ttscommit;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWrkCtrCapDeleted</Name>
				<Source><![CDATA[
    private void deleteWrkCtrCapDeleted(WrkCtrCapRefType _refType, ProdId _prodId)
    {
        ProdTable localProdTable  = ProdTable::find(_prodId, false);

        if (localProdTable.Recid != 0)
        {
            ProdTable prodTableRef;

            while select ProdId from prodTableRef
                where prodTableRef.CollectRefProdId  == localProdTable.CollectRefProdId
                    && prodTableRef.ProdLocked       == NoYes::No
            {
                WrkCtrCapRes::deleteRefIdDeleted(_refType, prodTableRef.ProdId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        if (! super())
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdUpdScheduling construct(
        ProdSchedMethod     prodSchedMethod
        )
    {
        ProdUpdScheduling   prodUpdScheduling;

        switch (prodSchedMethod)
        {
            case ProdSchedMethod::JobScheduling:
                prodUpdScheduling = new ProdUpdScheduling_Job();
                break;
            case ProdSchedMethod::OperationScheduling:
                prodUpdScheduling = new ProdUpdScheduling_Operation();
                break;
        }

        return prodUpdScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBufferFromRelease</Name>
				<Source><![CDATA[
    static ProdParmScheduling initParmBufferFromRelease(ProdParmRelease prodParmRelease, ProdParmScheduling _standardProdParmScheduling = null)
    {
        ProdParmScheduling prodParmScheduling = _standardProdParmScheduling.data();
        prodParmScheduling.ParmBuffer::initParmId();
        if (prmisDefault(_standardProdParmScheduling))
        {
            prodParmScheduling.initParmDefault();
            prodParmScheduling.initFromProdParametersDim(prodParmRelease.prodTable().prodParametersDim());
        }
        else
        {
            prodParmScheduling.SyncRef       = NoYes::No;
            prodParmScheduling.SchedRef      = NoYes::No;
        }
        prodParmScheduling.ProdId            = prodParmRelease.ProdId;
        prodParmScheduling.AutoUpdate        = NoYes::Yes;

        if (prodParmRelease.References)
        {
            prodParmScheduling.SyncRef       = NoYes::Yes;
            prodParmScheduling.SchedRef      = NoYes::Yes;
        }

        return prodParmScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPreviousJob</Name>
				<Source><![CDATA[
    static void runPreviousJob(
        ProdParmScheduling prodParmScheduling,
        ProdPurch           _prodPurch  = null,
        RunbaseRecsMapable  _multi      = null
        )
    {
        ProdParmCostEstimation prodParmCostEstimation = ProdUpdCostEstimation::initParmBufferFromSched(prodParmScheduling);

        prodParmCostEstimation.insert();
        ProdTable::find(prodParmCostEstimation.ProdId).status().runCostEstimation(prodParmCostEstimation,false,_prodPurch,_multi,true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>