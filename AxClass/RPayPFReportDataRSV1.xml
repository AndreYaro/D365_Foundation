<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportDataRSV1</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportDataRSV1 extends RPayPFReportData
{
    KeySum  sectionValuesList, invalidList, studentsList;

    RPayAmount              deductionAmount,
                            fundAmountMth1,
                            fundAmountMth2,
                            fundAmountMth3;
    Range                   keyDeduction;
    RPayCounterUnit         sPP;

    RPayPFReportDataIteratorRSV totalAmountsIterator, invalidIterator;
    RPayPFReportCommandRSV_2013      totalAmountsCommand,  invalidCommand;

    RPayPFReportKeyContract_RSV     keyContract;
    RPayPFReportValueContract_RSV   valueContract;

    #RPayPFReport_RSV1
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildEmplListData</Name>
				<Source><![CDATA[
    private void buildEmplListData(container _conValue)
    {
        valueContract.unpack(conpeek(_conValue, 2));
        fundTotalAmount = valueContract.parmFundTotalAmount();

        switch (keyContract.parmPayPeriod())
        {
            case datenull() + 1:
                fundAmountMth1 = fundTotalAmount;
                fundAmountMth2 = 0;
                fundAmountMth3 = 0;
                break;
            case datenull() + 2:
                fundAmountMth2 = fundTotalAmount;
                fundAmountMth1 = 0;
                fundAmountMth3 = 0;
                break;
            case datenull() + 3:
                fundAmountMth3 = fundTotalAmount;
                fundAmountMth2 = 0;
                fundAmountMth1 = 0;
                break;
            default:
                fundAmountMth1 = 0;
                fundAmountMth2 = 0;
                fundAmountMth3 = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataStrucuture</Name>
				<Source><![CDATA[
    protected void initDataStrucuture()
    {
        container conValue;

        keyContract   = new RPayPFReportKeyContract_RSV();
        valueContract = new RPayPFReportValueContract_RSV();

        conValue            = valueContract.pack();
        sectionValuesList   = KeySum::construct(1, conlen(conValue));

        conValue     = [#emplValueList];
        invalidList  = KeySum::construct(1, conlen(conValue));
        studentsList = KeySum::construct(1, conlen(conValue));

        sPP = RPayTaxParameters::find().PensionFundInsurance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(container _conValue)
    {
        container tmpCon;

        switch (conpeek(_conValue, 1))
        {
            case #TotalAmountDS:
                tmpCon = condel(_conValue, 1, 1);
                this.insertFundValues(tmpCon);
                break;

            case #InvalidDS:
                tmpCon = condel(_conValue, 1, 1);
                this.insertInvalid(tmpCon);
                break;

            case #StudentDS:
                tmpCon = condel(_conValue, 1, 1);
                this.insertStudent(tmpCon);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFundValues</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertFundValues(container _conValue)
    {
        container tmpCon;
        container conKeys;
        container conValue;
        int i;

        if (conlen(_conValue))
        {
            conKeys  = conpeek(_conValue, 1);
            conValue = conpeek(_conValue, 2);

            for (i = 1; i <= conlen(conKeys); ++i)
            {
                tmpCon = conpoke(tmpCon, 1, conpeek(conKeys, i));
                sectionValuesList.updateNow(tmpCon, conValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvalid</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertInvalid(container _conValue)
    {
        if (conlen(_conValue))
        {
            keyContract.unpack(conpeek(_conValue, 1));

            if (keyContract.parmFund() == sPP && keyContract.parmCategory() != #InsuredPersonCatEmployee)
            {
                this.buildEmplListData(_conValue);
                invalidList.updateNow([keyContract.parmEmplId()], [#emplValueList]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStudent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertStudent(container _conValue)
    {
        if (conlen(_conValue))
        {
            keyContract.unpack(conpeek(_conValue, 1));

            if (keyContract.parmFund() == sPP && keyContract.parmStudent())
            {
                this.buildEmplListData(_conValue);
                studentsList.updateNow([keyContract.parmEmplId()], [#emplValueList]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterator</Name>
				<Source><![CDATA[
    public IRPayPFReportDataIterator iterator(container _initIteratorValue)
    {
        RPayPFReportDataIteratorRSV iterator;
        container tmpCon;

        switch (conpeek(_initIteratorValue, 1))
        {
            case #TotalAmountDS:
                iterator = new RPayPFReportDataIteratorRSV(sectionValuesList);
                break;

            case #InvalidDS:
                iterator = new RPayPFReportDataIteratorRSV(invalidList);
                break;

            case #StudentDS:
                iterator = new RPayPFReportDataIteratorRSV(studentsList);
                break;
        }

        if (conlen(_initIteratorValue) > 1)
        {
            tmpCon = condel(_initIteratorValue, 1, 1);
            iterator.find(tmpCon);
        }

        return iterator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>