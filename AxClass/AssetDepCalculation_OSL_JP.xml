<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepCalculation_OSL_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to do depreciation calculation for a specified Japan depreciation method: Old Straight Line.
/// </summary>
public class AssetDepCalculation_OSL_JP extends AssetDepCalculation_JP
{
    boolean         isInEquallyDividedMode;
    boolean         isInEquallyDividedFormula;

    #AssetDepCalculation_JP
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AssetAmount calc()
    {
        AssetAmount ret;

        ret = super();

        if (calcArgs.parmAssetType() == AssetType::Tangible)
        {
            // For tangible asset, the depreciation is not really done if it is not in equally divided mode.
            if (calcArgs.parmIsDepreciationDone()
                && calcArgs.parmNumOfYearsEquallyDivided() > 0
                && !isInEquallyDividedMode
                && !calcArgs.parmIsNBVReachedZero())
            {
                calcArgs.parmIsDepreciationDone(false);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllowableLimitForAccumulatedDep</Name>
				<Source><![CDATA[
    protected AssetAmount calcAllowableLimitForAccumulatedDep()
    {
        AssetAmount ret;

        if (isInEquallyDividedMode)
        {
            ret = calcArgs.parmAmountToDepreciate() + this.getReductionEntryAdjustment(calcArgs.parmPeriodEnd()) - this.getExtraDepreciationAmount();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBaseAmountToDepreciate</Name>
				<Source><![CDATA[
    protected AssetAmount calcBaseAmountToDepreciate()
    {
        AssetAmount ret;

        if (isInEquallyDividedMode)
        {
            ret = this.calcAllowableLimitForAccumulatedDep() - this.getBeginningBalanceOfAccumulatedDep(this.calcDepStartDateInCurYear());
        }
        else
        {
            ret = super();

            if (calcArgs.parmAssetType() == AssetType::Tangible)
            {
                if (calcArgs.parmIsDepProfileChanged() && calcArgs.parmPrevDepMethod() == AssetDepreciationMethod::OldDecliningBalance_JP)
                {
                    if (isInEquallyDividedFormula)
                    {
                        // RemainingDepRatioForTangibleOnOSL = 0.05
                        ret = this.calcAllowableLimitForAccumulatedDep()
                            - this.getBeginningBalanceOfAccumulatedDep(this.calcDepStartDateInCurYearBeyondChange());
                    }
                    // if change happended at 5% < rest asset value <= 10%
                    else if (AssetProfileChangeFromODBToOSL_JPFlight::instance().isEnabled() && calcArgs.parmPercentageOfAssetValueAtProfileChange()
                        && #RemainingDepRatioForTangibleOnOSL < calcArgs.parmPercentageOfAssetValueAtProfileChange()
                        && calcArgs.parmPercentageOfAssetValueAtProfileChange() <= #ExclusiveDepRatioForTangibleOnOSL)
                    {
                        ret = ret - this.getBeginningBalanceOfAccumulatedDep(calcArgs.parmStartToDepreciateDate())
                            - calcArgs.parmAcquisitionPrice() * #RemainingDepRatioForTangibleOnOSL;
                    }
                    else
                    {
                        // ExclusiveDepRatioForTangibleOnOSL = 0.1
                        ret = ret - this.getBeginningBalanceOfAccumulatedDep(calcArgs.parmStartToDepreciateDate())
                            - calcArgs.parmAcquisitionPrice() * #ExclusiveDepRatioForTangibleOnOSL;
                    }
                }
                else
                {
                    ret = ret * #AdditionDepRatioForTangibleOnOSL;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurYearDepRateAsFraction</Name>
				<Source><![CDATA[
    protected container calcCurYearDepRateAsFraction()
    {
        container           ret;
        real                depRateNominator;
        real                depRateDenominator = 1;
        AssetTableInterval  depInterval;
        AssetTransDate      equallyDividedModeStartDate;
        AssetTransDate      depStartDateInCurYear;
        AssetTransDate      endDateInCurYear;
        int                 numOfMonthHaveBeenDividedInPreYears;
        int                 numOfMonthWillBeDividedInYears;

        #TimeConstants

        if ((isInEquallyDividedMode || isInEquallyDividedFormula) && this.calcNumOfYearsEquallyDivided() > 0)
        {
            equallyDividedModeStartDate = this.calcEquallyDividedStartDate();
            depStartDateInCurYear       = this.calcDepStartDateInCurYear();
            depInterval                 = calcArgs.parmAssetTableInterval();
            endDateInCurYear            = depInterval.findLastDayOfYear(depStartDateInCurYear);

            numOfMonthHaveBeenDividedInPreYears = AssetDepCalculationHelper_JP::calcNumberOfMthInDateRange(equallyDividedModeStartDate, depStartDateInCurYear);
            numOfMonthWillBeDividedInYears      = AssetDepCalculationHelper_JP::calcNumberOfMthInDateRange(depStartDateInCurYear, endDateInCurYear+1);
            if (numOfMonthWillBeDividedInYears + numOfMonthHaveBeenDividedInPreYears >= this.calcNumOfYearsEquallyDivided() * #monthsPerYear)
            {
                depRateNominator = 1;
            }
            else
            {
                depRateNominator = numOfMonthWillBeDividedInYears;
                depRateDenominator = this.calcNumOfYearsEquallyDivided() * #monthsPerYear - numOfMonthHaveBeenDividedInPreYears;
            }

            ret = [depRateNominator, depRateDenominator];
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEquallyDividedStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates equally divided start date.
    /// </summary>
    /// <returns>
    /// Returns the <c>AssetTransDate</c>
    /// </returns>
    protected AssetTransDate calcEquallyDividedStartDate()
    {
        AssetTransDate ret;

        if (isInEquallyDividedFormula)
        {
            ret = calcArgs.parmEquallyDividedFormulaStartDate();
        }
        else
        {
            ret = calcArgs.parmEquallyDividedStartDate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFinalAmountToDepreciate</Name>
				<Source><![CDATA[
    protected AssetAmount calcFinalAmountToDepreciate()
    {
        AssetAmount ret;

        if (isInEquallyDividedMode)
        {
            ret = this.calcBaseAmountToDepreciate();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumOfDepreciablePeriodInCurYear</Name>
				<Source><![CDATA[
    protected int calcNumOfDepreciablePeriodInCurYear()
    {
        int                 ret;
        AssetTransDate      depEndDateInCurYear;
        AssetTransDate      firstDateInCurYear;
        AssetTransDate      lastDateInCurYear;
        AssetTransDate      equallyDividedStartDate;
        AssetTransDate      equallyDividedEndDate;
        AssetTableInterval  depInterval;

        if (isInEquallyDividedMode || isInEquallyDividedFormula)
        {
            depInterval             = calcArgs.parmAssetTableInterval();
            equallyDividedStartDate = this.calcEquallyDividedStartDate();
            equallyDividedEndDate   = AssetDepCalculationHelper_JP::calcEquallyDividedEndDate(depInterval, equallyDividedStartDate, this.calcNumOfYearsEquallyDivided());

            firstDateInCurYear      = depInterval.findFirstDayOfYear(calcArgs.parmPeriodstart());
            lastDateInCurYear       = depInterval.findLastDayOfYear(calcArgs.parmPeriodstart());
            depEndDateInCurYear     = (equallyDividedEndDate > lastDateInCurYear) ? lastDateInCurYear : depInterval.endPeriod(equallyDividedEndDate);
            // Adjust the depEndDateInCurYear to make sure it is in the same year of current period strat date.
            if (depEndDateInCurYear < firstDateInCurYear)
            {
                depEndDateInCurYear = firstDateInCurYear;
            }

            ret = max(depInterval.indexofPeriod(depEndDateInCurYear) - depInterval.indexofPeriod(this.calcDepStartDateInCurYear()) + 1, 0);
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumOfYearsEquallyDivided</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of years equally divided.
    /// </summary>
    /// <returns>
    /// Returns the years equally divided.
    /// </returns>
    protected AssetDepNumOfYearsEquallyDivided_JP calcNumOfYearsEquallyDivided()
    {
        AssetDepNumOfYearsEquallyDivided_JP ret;

        if (isInEquallyDividedFormula)
        {
            ret = real2int(AssetDepCalculationHelper_JP::roundOffServiceLife(calcArgs.parmAssetServiceLife()));
        }
        else
        {
            ret = calcArgs.parmNumOfYearsEquallyDivided();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciationMethod</Name>
				<Source><![CDATA[
    public AssetDepreciationMethod getAssetDepreciationMethod()
    {
        return AssetDepreciationMethod::OldStraightLine_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunCalc</Name>
				<Source><![CDATA[
    public void preRunCalc()
    {
        AssetTransDate      startDate;

        super();

        //
        // There are two kinds of equally divided depreciation:
        // (1) For ODB and OSL, equally divided depreciation is used for the part beyonds the allowable
        // limit of accumulated depreciation; it always starts from the first period of a fiscal year.
        // (2) For OSL changed from ODB, user can choose to use equally divided depreciation for the part
        // under the allowable limit of accumulated depreciation, we call this equally divided formula
        // from the UI side; it can start from any period of a year. In this situation, the first kind
        // of equally divided depreciation will also be applied for the part beyonds the allowable limit
        // of accumulated depreciation.
        // e.g.
        //      Acquisition cost:       1,000.00
        //      Book value at change:   150.00
        //      Change date:            2012/4/1
        //      Use 2-year equally divided formula
        //      Use 5-year equally divided depreciation for the part over allowable limit
        //  The result will be
        //      From        To          Formula             Depreciation    Book value  Equally divided type
        //      2012/4/1    2013/3/31   (150-1000*5%)*12/24     50              100         (2)
        //      2013/4/1    2014/3/31   (100-1000*5%)*12/12     50              50          (2)
        //      2014/4/1    2015/3/31   50*12/60                10              40          (1)
        //      2015/4/1    2016/3/31   40*12/48                10              30          (1)
        //      2016/4/1    2017/3/31   30*12/36                10              20          (1)
        //      2017/4/1    2018/3/31   20*12/24                10              10          (1)
        //      2018/4/1    2019/3/31   10*12/12                10              0           (1)
        //
        isInEquallyDividedFormula = false;
        isInEquallyDividedMode = false;
        // Check the status of N years equally divided
        if (calcArgs.parmAssetType() == AssetType::Tangible)
        {
            boolean isEquallyDividedEnabled = this.isEquallyDividedEnabled();

            if (calcArgs.parmEquallyDividedStartDate() != dateNull())
            {
                if (calcArgs.parmEquallyDividedStartDate() <= calcArgs.parmPeriodstart())
                {
                    isInEquallyDividedMode = true;
                }
            }
            else if (isEquallyDividedEnabled)
            {
                if (this.isTheFirstPeriodInCurYear())
                {
                    AssetAmount beginningBalance = this.getBeginningBalanceOfAccumulatedDep(calcArgs.parmPeriodstart());
                    AssetAmount allowableLimit = this.calcAllowableLimitForAccumulatedDep();

                    if ((allowableLimit >= 0 && beginningBalance >= allowableLimit)
                        || (allowableLimit <= 0 && beginningBalance <= allowableLimit))
                    {
                        isInEquallyDividedMode = true;
                        calcArgs.parmEquallyDividedStartDate(calcArgs.parmAssetTableInterval().startOfPeriod(calcArgs.parmPeriodStart()));

                        // Save the date to global cache for initlizating the AssetEquallyDividedDepProfileTmp_JP later.
                        AssetEquallyDividedDepProfileTmp_JP::saveEquallyDividedStartDateForProfile(
                            calcArgs.parmAssetId(),
                            calcArgs.parmAssetBookId(),
                            calcArgs.parmPeriodStart());
                    }
                }
            }

            boolean isEquallyDividedFormulaAllowed = !isInEquallyDividedMode && isEquallyDividedEnabled;
            boolean isDepProfileChangedFromODB = calcArgs.parmIsDepProfileChanged() && calcArgs.parmPrevDepMethod() == AssetDepreciationMethod::OldDecliningBalance_JP;

            if (isEquallyDividedFormulaAllowed && isDepProfileChangedFromODB)
            {
                if (calcArgs.parmEquallyDividedFormulaStartDate() != dateNull())
                {
                    if (calcArgs.parmEquallyDividedFormulaStartDate() <= calcArgs.parmPeriodstart())
                    {
                        isInEquallyDividedFormula = true;
                    }
                }
                else
                {
                    startDate = calcArgs.parmAssetTableInterval().startOfPeriod(calcArgs.parmStartToDepreciateDate());
                    if (calcArgs.parmIsUseEquallyDividedFormula())
                    {
                        isInEquallyDividedFormula = true;
                        calcArgs.parmEquallyDividedFormulaStartDate(startDate);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smoothDepreciationForYear</Name>
				<Source><![CDATA[
    protected boolean smoothDepreciationForYear()
    {
        boolean ret;

        ret = super();

        ret = ret && !isInEquallyDividedMode;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>