<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchiveUpdateProcessHistoryTableTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransArchiveUpdateProcessHistoryTableTask</c> class is used to update processing state of
///  inventory transaction archive process history table by using multiple batch tasks.
/// </summary>
internal class InventTransArchiveUpdateProcessHistoryTableTask extends RunBaseBatch implements BatchRetryable
{
    SysGuidString  sessionId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        sessionId
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the batch task can be seen in the batch journal.
    /// </summary>
    /// <returns>
    /// true in order to see the results in the batch journal.
    /// </returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return InventTransArchiveUpdateProcessHistoryTableTask::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionGuid</Name>
				<Source><![CDATA[
    public SysGuidString parmSessionGuid(SysGuidString _sessionId = sessionId)
    {
        sessionId = _sessionId;

        return sessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        try
        {
            InventTransArchiveTask inventTransArchiveTask;
            select firstonly RecId from inventTransArchiveTask
                where inventTransArchiveTask.SessionId               == sessionId
                   && inventTransArchiveTask.InventTransArchiveState < InventTransArchiveState::Ended;

            ttsbegin;

            // Clean up task
            if (!inventTransArchiveTask.RecId)
            {
                delete_from inventTransArchiveTask
                    where inventTransArchiveTask.SessionId == sessionId;
            }

            InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable = InventTransArchiveProcessHistoryTable::findBySessionId(sessionId, true);
            if (inventTransArchiveProcessHistoryTable)
            {
                inventTransArchiveProcessHistoryTable.StopRunning = inventTransArchiveTask.RecId ? NoYes::Yes : NoYes::No;
                if (!inventTransArchiveTask.RecId)
                {
                    inventTransArchiveProcessHistoryTable.InventTransArchiveState = InventTransArchiveState::Ended;
                }

                inventTransArchiveProcessHistoryTable.update();
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventTransArchiveUpdateProcessHistoryTableTask construct()
    {
        return new InventTransArchiveUpdateProcessHistoryTableTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        if (InventTransArchiveFeatureHelper::isFeatureEnabled())
        {
            return "@SCM:InventTransArchivingUpdateArchivingRecordV2";
        }

        return "@SCM:InventTransArchivingUpdateArchivingRecord";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    public static InventTransArchiveUpdateProcessHistoryTableTask newFromParameters(SysGuidString _sessionId)
    {
        if (!_sessionId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        InventTransArchiveUpdateProcessHistoryTableTask inventTransArchiveUpdateProcessHistoryTableTask = InventTransArchiveUpdateProcessHistoryTableTask::construct();
        inventTransArchiveUpdateProcessHistoryTableTask.getLast();
        inventTransArchiveUpdateProcessHistoryTableTask.parmSessionGuid(_sessionId);

        return inventTransArchiveUpdateProcessHistoryTableTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>