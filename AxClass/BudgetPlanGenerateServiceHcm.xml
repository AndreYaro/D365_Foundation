<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateServiceHcm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateServiceHcm</c> class is responsible for generating the budget plan
/// data using the <c>BudgetPlanGenerateContractHcm</c> data contract class.
/// </summary>
public class BudgetPlanGenerateServiceHcm extends BudgetPlanGenerateService
{
    BudgetPlanGenerateContractHcm           budgetPlanGenerateContractHcm;
    BudgetPlanScenarioRecId                 currentBudgetPlanScenario;
    HcmPositionForecast                     hcmPositionForecast;
    HcmPositionForecastDetail               hcmPositionForecastDetail;
    HcmPositionForecastDetailV2             hcmPositionForecastDetailV2;
    HcmPositionForecastBudgetDefaultValue   hcmPositionForecastBudgetDefaultValue;
    HcmPositionForecastDefaultDim           hcmPositionForecastDefaultDim;
    HcmPositionForecastScenario             positionForecastScenario;
    HcmForecastScenario                     forecastScenario;

    // Map used to cache the generated ledger dimensions.
    // Key: Container [LedgerDimension, HcmPositionForecastDistributionTemplateRecId, HcmPositionForecastDefaultDimension, EffectiveDate]
    // Value: Map [LedgerDimensionBudgetPlanning, Percent]
    Map generatedLedgerDimensions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bulkInsertOrUpdateBudgetPlanLines</Name>
				<Source><![CDATA[
    public void bulkInsertOrUpdateBudgetPlanLines()
    {
        // Make the bulkInsertOrUpdateBudgetPlanLines method public so that it can be accessed by the BudgetPlanHcmSelect form.
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateOrUpdateBudgetPlanLine</Name>
				<Source><![CDATA[
    protected boolean canCreateOrUpdateBudgetPlanLine(BudgetPlanLineDataGenerationTmp _budgetPlanLineDataGenerationTmp)
    {
        boolean canCreateOrUpdateBudgetPlanLine;

        canCreateOrUpdateBudgetPlanLine = (_budgetPlanLineDataGenerationTmp.LedgerDimension != 0) && super(_budgetPlanLineDataGenerationTmp);

        return canCreateOrUpdateBudgetPlanLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a budget plan line for the supplied budget plan header.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the budget plan header that the line should be created for.
    /// </param>
    /// <param name="_factor">
    /// The factor that the line amount should be multiplied by.
    /// </param>
    public void createBudgetPlanLine(BudgetPlanHeaderRecId  _budgetPlanHeaderRecId, Factor _factor = 1.00)
    {
        boolean skipPosition;

        if (!positionForecastScenario.FullTimeEquivalency)
        {
            // Notify user that the current position being processed was not included in the data generation
            // and continue processing other positions.
            checkFailed(strFmt("@GLS150309", HcmPosition::find(hcmPositionForecast.Position).PositionId));
            skipPosition = true;
        }

        if (!hcmPositionForecastBudgetDefaultValue)
        {
            // Notify user that the current position being processed was not included in the data generation
            // and continue processing other positions.
            checkFailed(strFmt("@GLS150462", HcmPosition::find(hcmPositionForecast.Position).PositionId));
            skipPosition = true;
        }

        if (!skipPosition)
        {
            if (!prmisDefault(_factor))
            {
                this.generateMonetaryBudgetPlanLine(_budgetPlanHeaderRecId, _factor);
                this.generateQuantityBudgetPlanLine(_budgetPlanHeaderRecId, _factor);
            }
            else
            {
                this.generateMonetaryBudgetPlanLine(_budgetPlanHeaderRecId);
                this.generateQuantityBudgetPlanLine(_budgetPlanHeaderRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateBudgetPlanHeader</Name>
				<Source><![CDATA[
    public BudgetPlanHeader createOrUpdateBudgetPlanHeader()
    {
        BudgetPlanGenerateType  budgetPlanGenerateType;
        BudgetPlanHeader        budgetPlanHeader;
        BudgetPlanLine          budgetPlanLine;
        BudgetPlanScenarioRecId targetBudgetPlanScenarioQuantityRecId;

        budgetPlanHeader = super();

        budgetPlanGenerateType = budgetPlanGenerateContract.parmTargetBudgetPlanGenerateType();

        switch (budgetPlanGenerateType)
        {
            case BudgetPlanGenerateType::ReplaceBudgetPlan:
                targetBudgetPlanScenarioQuantityRecId = budgetPlanGenerateContractHcm.parmTargetBudgetPlanScenarioQuantity();

                if (targetBudgetPlanScenarioQuantityRecId)
                {
                    delete_from budgetPlanLine
                        where budgetPlanLine.BudgetPlanScenario == targetBudgetPlanScenarioQuantityRecId;
                }
                break;

            case BudgetPlanGenerateType::UpdateBudgetPlan:
                targetBudgetPlanScenarioQuantityRecId = budgetPlanGenerateContractHcm.parmTargetBudgetPlanScenarioQuantity();
                break;
        }

        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query object according to the user defined settings on the dialog.
    /// </summary>
    /// <returns>
    /// The instance of the <c>Query</c> class.
    /// </returns>
    protected Query createQuery()
    {
        Query                query;
        QueryBuildDataSource hcmPositionForecastDataSource;
        QueryBuildDataSource hcmPositionForecastDefaultDimDataSource;
        QueryBuildDataSource hcmPositionForecastBudgetDefaultValueDataSource;

        if (!ledger)
        {
            ledger = Ledger::find(budgetPlanGenerateContract.parmTargetLedgerRecId());
        }

        query = new Query(
                    SysOperationHelper::base64Decode(
                        budgetPlanGenerateContractHcm.parmQueryBudgetPlanGenerateHcm()));

        hcmPositionForecastDataSource = query.dataSourceTable(tableNum(HcmPositionForecast));

        // Add the HcmPositionForecastBudgetDefaultValue table to the query along with a range for the target legal entity
        hcmPositionForecastBudgetDefaultValueDataSource = hcmPositionForecastDataSource.addDataSource(tableNum(HcmPositionForecastBudgetDefaultValue));
        hcmPositionForecastBudgetDefaultValueDataSource.joinMode(JoinMode::OuterJoin);
        hcmPositionForecastBudgetDefaultValueDataSource.fetchMode(QueryFetchMode::One2One);
        hcmPositionForecastBudgetDefaultValueDataSource.addSelectionField(fieldNum(HcmPositionForecastBudgetDefaultValue, CurrencyCode));
        hcmPositionForecastBudgetDefaultValueDataSource.addLink(
            fieldNum(HcmPositionForecast, RecId),
            fieldNum(HcmPositionForecastBudgetDefaultValue, PositionForecast),
            hcmPositionForecastDataSource.name());

        SysQuery::findOrCreateRange(
            hcmPositionForecastBudgetDefaultValueDataSource,
            fieldNum(HcmPositionForecastBudgetDefaultValue, LegalEntity)).value(SysQuery::value(ledger.PrimaryForLegalEntity));

        // Add the HcmPositionForecastDefaultDim table to the query along with a range for the target legal entity
        hcmPositionForecastDefaultDimDataSource = hcmPositionForecastDataSource.addDataSource(tableNum(HcmPositionForecastDefaultDim));
        hcmPositionForecastDefaultDimDataSource.joinMode(JoinMode::OuterJoin);
        hcmPositionForecastDefaultDimDataSource.fetchMode(QueryFetchMode::One2One);
        hcmPositionForecastDefaultDimDataSource.addSelectionField(fieldNum(HcmPositionForecastDefaultDim, DistributionTemplate));
        hcmPositionForecastDefaultDimDataSource.addSelectionField(fieldNum(HcmPositionForecastDefaultDim, DefaultDimension));
        hcmPositionForecastDefaultDimDataSource.addLink(
            fieldNum(HcmPositionForecast, RecId),
            fieldNum(HcmPositionForecastDefaultDim, PositionForecast),
            hcmPositionForecastDataSource.name());

        SysQuery::findOrCreateRange(
            hcmPositionForecastDefaultDimDataSource,
            fieldNum(HcmPositionForecastDefaultDim, LegalEntity)).value(SysQuery::value(ledger.PrimaryForLegalEntity));

        query.dataSourceTable(tableNum(HcmForecastScenario)).addRange(fieldNum(HcmForecastScenario, BudgetPlanScenario)).
                                                                value(SysQuery::value(budgetPlanGenerateContractHcm.parmSourceBudgetPlanScenarioRecId()));
        query.dataSourceTable(tableNum(HcmForecastScenario)).addRange(fieldNum(HcmForecastScenario, BudgetPlanningProcess)).
                                                                value(SysQuery::value(budgetPlanGenerateContractHcm.parmSourceBudgetPlanProcess()));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllMatchingBudgetPlanLine</Name>
				<Source><![CDATA[
    protected void deleteAllMatchingBudgetPlanLine(BudgetPlanLineDataGenerationTmp _budgetPlanLineDataGenerationTmp)
    {
        BudgetPlanLine budgetPlanLine;

        if (budgetPlanGenerateContractHcm.parmTargetBudgetPlanLineIncludePosition())
        {
            delete_from budgetPlanLine
            where budgetPlanLine.BudgetPlanHeader    == _budgetPlanLineDataGenerationTmp.BudgetPlanHeader
                && budgetPlanLine.BudgetPlanScenario == _budgetPlanLineDataGenerationTmp.BudgetPlanScenario
                && budgetPlanLine.PositionScenario   == _budgetPlanLineDataGenerationTmp.PositionForecastScenario
                && budgetPlanLine.Position           == _budgetPlanLineDataGenerationTmp.HcmPosition;
        }
        else
        {
            super(_budgetPlanLineDataGenerationTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecordInTmpTable</Name>
				<Source><![CDATA[
    protected void findRecordInTmpTable(BudgetPlanLineDataGenerationTmp _budgetPlanLineDataGenerationTmp)
    {
        if (budgetPlanGenerateContractHcm.parmTargetBudgetPlanLineIncludePosition())
        {
            // All fields in the BudgetPlanLineIdx index are specified as where clauses in index order to improve read performance.
            select firstonly forupdate budgetPlanLineDataGenerationTmpBulkInsert
                where budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanHeader            == _budgetPlanLineDataGenerationTmp.BudgetPlanHeader
                    && budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanScenario         == _budgetPlanLineDataGenerationTmp.BudgetPlanScenario
                    && budgetPlanLineDataGenerationTmpBulkInsert.LedgerDimension            == _budgetPlanLineDataGenerationTmp.LedgerDimension
                    && budgetPlanLineDataGenerationTmpBulkInsert.EffectiveDate              == _budgetPlanLineDataGenerationTmp.EffectiveDate
                    && budgetPlanLineDataGenerationTmpBulkInsert.BudgetClass                == _budgetPlanLineDataGenerationTmp.BudgetClass
                    && budgetPlanLineDataGenerationTmpBulkInsert.AssetId                    == ''
                    && budgetPlanLineDataGenerationTmpBulkInsert.HcmPosition                == _budgetPlanLineDataGenerationTmp.HcmPosition
                    && budgetPlanLineDataGenerationTmpBulkInsert.PositionForecastScenario   == _budgetPlanLineDataGenerationTmp.PositionForecastScenario;
        }
        else
        {
            super(_budgetPlanLineDataGenerationTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
    protected void generateData()
    {
        #OCCRetryCount

        BudgetPlanHeader    budgetPlanHeader;
        boolean             isValidQuery;
        Query               userDefinedQuery;
        QueryRun            userDefinedQueryRun;

        try
        {
            ttsbegin;

            changecompany (CompanyInfo::findRecId(ledger.PrimaryForLegalEntity).DataArea)
            {
                userDefinedQuery = this.createQuery();

                // Create a new budget plan header or find the budget header record to update/replace
                budgetPlanHeader = this.createOrUpdateBudgetPlanHeader();

                userDefinedQueryRun = new QueryRun(userDefinedQuery);

                while (userDefinedQueryRun.next())
                {
                    isValidQuery = true;

                    this.setPositionDetailsFromQuery(userDefinedQueryRun);

                    this.createBudgetPlanLine(budgetPlanHeader.RecId);
                }
            }

            if (isValidQuery)
            {
                this.bulkInsertOrUpdateBudgetPlanLines();

                if (!isBudgetPlanLineCreated)
                {
                    throw Exception::Error;
                }
            }
            else
            {
                throw error(this.recordNotFoundErrorMessage());
            }

            if (budgetPlanHeader)
            {
                this.showTaskCompleteMessage();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            error("@SYS78886");
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the LedgerDimension based on the default dimension attributes specified on the source record.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The record ID of the <c>DimensionAttributeValueCombination</c> record.
    /// </param>
    /// <param name="_hcmPositionForecastDistributionTemplateRecId">
    /// The record ID of the <c>AccountingDistributionTemplate</c> record.
    /// </param>
    /// <param name="_hcmPositionForecastDefaultDimension">
    /// The record ID of the <c>DimensionAttributeValueSet</c> record.
    /// </param>
    /// <param name="_effectiveDate">
    /// Validation date to use to when validating the dimension combination.
    /// </param>
    /// <returns>
    /// A <c>Map</c> object that contains the dimension combinations created along with
    /// the distribution percentage.
    /// </returns>
    protected Map generateLedgerDimension(
        LedgerDimensionBase                     _ledgerDimension,
        AccountingDistributionTemplateRecId     _hcmPositionForecastDistributionTemplateRecId,
        DimensionDefault                        _hcmPositionForecastDefaultDimension,
        BudgetPlanLineEffectiveDate             _effectiveDate)
    {
        AccountingDistributionTemplateDetail    positionForecastDistributionTemplateLines;
        BudgetPlanningContract                  budgetPlanningContract;
        DimensionHierarchyId                    accountStructureId;
        DimensionAttributeValueContract         dimensionAttributeValueContract;
        DimensionAttributeValueContract         mainAccountDimensionAttributeValueContract;
        DimensionAttributeValueSetItemView      valueSetItemView;
        DimensionAttribute                      dimensionAttribute;
        DimensionAttributeValueCombination      ledgerDimension;
        LedgerDimensionBudgetPlanning           budgetPlanningLedgerDimension;
        List                                    values;
        Map                                     dimensionsPercentage;
        Map                                     attributeNameDisplayValue;
        MapEnumerator                           attributeNameDisplayValueEnumerator;
        container                               generatedLedgerDimensionKey;

        changecompany(CompanyInfo::getDataArea(positionForecastScenario.LegalEntity))
        {
            generatedLedgerDimensionKey = [
                _ledgerDimension,
                _hcmPositionForecastDistributionTemplateRecId,
                _hcmPositionForecastDefaultDimension,
                _effectiveDate];

            if (generatedLedgerDimensions.exists(generatedLedgerDimensionKey))
            {
                dimensionsPercentage = generatedLedgerDimensions.lookup(generatedLedgerDimensionKey);
            }
            else
            {
                dimensionsPercentage = new Map(typeName2Type(extendedTypeStr(LedgerDimensionBudgetPlanning)),
                                               typeName2Type(extendedTypeStr(Percent)));

                ledgerDimension = DimensionAttributeValueCombination::find(_ledgerDimension);

                // Create the main account data contract
                dimensionAttribute = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));

                if (dimensionAttribute)
                {
                    mainAccountDimensionAttributeValueContract = new DimensionAttributeValueContract();
                    mainAccountDimensionAttributeValueContract.parmName(dimensionAttribute.Name);
                    mainAccountDimensionAttributeValueContract.parmValue(ledgerDimension.DisplayValue);

                    // Add the account structure to the contract
                    accountStructureId = DimensionHierarchy::getAccountStructure(ledgerDimension.MainAccount);

                    budgetPlanningContract = new BudgetPlanningContract();
                    budgetPlanningContract.parmAccountStructure(DimensionHierarchy::find(accountStructureId).Name);

                    // If a distribution template exists, then get the dimension values from the template
                    if (_hcmPositionForecastDistributionTemplateRecId)
                    {
                        while select DefaultDimension, DistributionPercent from positionForecastDistributionTemplateLines
                            where positionForecastDistributionTemplateLines.DistributionTemplate == _hcmPositionForecastDistributionTemplateRecId
                        {
                            attributeNameDisplayValue = new Map(typeName2Type(extendedTypeStr(Name)),
                                                                typeName2Type(extendedTypeStr(DimensionValue)));
                            values = new List(Types::Class);
                            values.addEnd(mainAccountDimensionAttributeValueContract);

                            // Get attributes from template distribution
                            while select Name from dimensionAttribute
                                join DisplayValue from valueSetItemView
                                    where valueSetItemView.DimensionAttribute          == dimensionAttribute.RecId
                                        && valueSetItemView.DimensionAttributeValueSet == positionForecastDistributionTemplateLines.DefaultDimension
                            {
                                attributeNameDisplayValue.insert(dimensionAttribute.Name, valueSetItemView.DisplayValue);
                            }

                            // Replace common dimension values from the distribution template with default dimension values
                            while select Name from dimensionAttribute
                                join DisplayValue from valueSetItemView
                                    where valueSetItemView.DimensionAttribute          == dimensionAttribute.RecId
                                        && valueSetItemView.DimensionAttributeValueSet == _hcmPositionForecastDefaultDimension
                            {
                                attributeNameDisplayValue.insert(dimensionAttribute.Name, valueSetItemView.DisplayValue);
                            }

                            attributeNameDisplayValueEnumerator = attributeNameDisplayValue.getEnumerator();

                            while (attributeNameDisplayValueEnumerator.moveNext())
                            {
                                // Create the data contract and add the attribute name and value
                                dimensionAttributeValueContract = new DimensionAttributeValueContract();
                                dimensionAttributeValueContract.parmName(attributeNameDisplayValueEnumerator.currentKey());
                                dimensionAttributeValueContract.parmValue(attributeNameDisplayValueEnumerator.currentValue());

                                values.addEnd(dimensionAttributeValueContract);
                            }

                            budgetPlanningContract.parmValues(values);

                            // Get the ledger dimension
                            budgetPlanningLedgerDimension = this.saveLedgerDimension(budgetPlanningContract, _effectiveDate);

                            // If the same ledger dimension was created previously, then add the old and new percentages
                            // since the old percentage will be overwritten by the new one.
                            if (dimensionsPercentage.exists(budgetPlanningLedgerDimension))
                            {
                                positionForecastDistributionTemplateLines.DistributionPercent += dimensionsPercentage.lookup(budgetPlanningLedgerDimension);
                            }

                            dimensionsPercentage.insert(
                                budgetPlanningLedgerDimension,
                                positionForecastDistributionTemplateLines.DistributionPercent);
                        }
                    }
                    else if (_hcmPositionForecastDefaultDimension)
                    {
                        // Get the dimension values from the default values record
                        values = new List(Types::Class);
                        values.addEnd(mainAccountDimensionAttributeValueContract);

                        while select Name from dimensionAttribute
                            join DisplayValue from valueSetItemView
                                where valueSetItemView.DimensionAttribute          == dimensionAttribute.RecId
                                    && valueSetItemView.DimensionAttributeValueSet == _hcmPositionForecastDefaultDimension
                        {
                            dimensionAttributeValueContract = new DimensionAttributeValueContract();
                            dimensionAttributeValueContract.parmName(dimensionAttribute.Name);
                            dimensionAttributeValueContract.parmValue(valueSetItemView.DisplayValue);

                            values.addEnd(dimensionAttributeValueContract);
                        }

                        budgetPlanningContract.parmValues(values);

                        dimensionsPercentage.insert(
                            this.saveLedgerDimension(budgetPlanningContract, _effectiveDate),
                            100);
                    }
                    else
                    {
                        // In the absence of both default and dimension template, use the main account alone
                        values = new List(Types::Class);
                        values.addEnd(mainAccountDimensionAttributeValueContract);

                        budgetPlanningContract.parmValues(values);

                        dimensionsPercentage.insert(
                            this.saveLedgerDimension(budgetPlanningContract, _effectiveDate),
                            100);
                    }
                }
                generatedLedgerDimensions.insert(generatedLedgerDimensionKey, dimensionsPercentage);
            }
        }
        return dimensionsPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateMonetaryBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the monetary type <c>BudgetPlanLine</c> records.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_factor">
    /// The factor that each line should be multiplied by; optional.
    /// </param>
    private void generateMonetaryBudgetPlanLine(BudgetPlanHeaderRecId _budgetPlanHeaderRecId, Factor _factor = 1.00)
    {
        AmountCur                            transactionCurrencyAmount;
        BudgetPlanLineDataGenerationTmp      budgetPlanLineDataGenerationTmp;
        HcmPositionForecastBudgetAcctLineTmp hcmPositionForecastBudgetAcctLineTmp;
        Map                                  ledgerDimensionPercentage;
        MapEnumerator                        ledgerDimensionPercentageEnumerator;
        BudgetPlanCurrencyAmount             totalAmount;
        BudgetPlanCurrencyAmount             maxAmount;
        BudgetPlanLineDataGenerationTmp      budgetPlanLineDataGenerationTmpMaxAmount;
        HcmBudgetAmountCur                   totalBudgetAmount;

        currentBudgetPlanScenario = budgetPlanGenerateContractHcm.parmTargetBudgetPlanScenario();

        HcmPositionForecastCostAllocation positionForecastCostAllocation = HcmPositionForecastCostAllocation::construct();
        positionForecastCostAllocation.createAllocationLines(hcmPositionForecastBudgetAcctLineTmp,
                                                              positionForecastScenario.RecId,
                                                              ledger.PrimaryForLegalEntity);

        // Generate the Monetary scenario lines
        while select sum(BudgetAmountCur) from hcmPositionForecastBudgetAcctLineTmp
            group by LedgerDimension, EffectiveDate
        {
            totalAmount = 0;
            maxAmount = 0;
            budgetPlanLineDataGenerationTmpMaxAmount.clear();

            budgetPlanLineDataGenerationTmp.data(this.setBudgetPlanLineDataGenerationTmp(_budgetPlanHeaderRecId));
            budgetPlanLineDataGenerationTmp.TransactionCurrencyCode = hcmPositionForecastBudgetDefaultValue.CurrencyCode;
            budgetPlanLineDataGenerationTmp.EffectiveDate           = hcmPositionForecastBudgetAcctLineTmp.EffectiveDate;

            // Get the ledger dimension values and their respective distribution percentage
            ledgerDimensionPercentage = this.generateLedgerDimension(
                                            hcmPositionForecastBudgetAcctLineTmp.LedgerDimension,
                                            hcmPositionForecastDefaultDim.DistributionTemplate,
                                            hcmPositionForecastDefaultDim.DefaultDimension,
                                            budgetPlanLineDataGenerationTmp.EffectiveDate);

            ledgerDimensionPercentageEnumerator = ledgerDimensionPercentage.getEnumerator();

            while (ledgerDimensionPercentageEnumerator.moveNext())
            {
                budgetPlanLineDataGenerationTmp.LedgerDimension = ledgerDimensionPercentageEnumerator.currentKey();
                transactionCurrencyAmount = hcmPositionForecastBudgetAcctLineTmp.BudgetAmountCur;

                // Apply distribution percentage to the source line amount
                transactionCurrencyAmount = (transactionCurrencyAmount * (ledgerDimensionPercentageEnumerator.currentValue() / 100));

                if (!prmisDefault(_factor))
                {
                    transactionCurrencyAmount = this.adjustAmountByFactor(transactionCurrencyAmount, _factor);
                }

                // Round the amount after distribution percentage and factor have been applied.
                transactionCurrencyAmount = CurrencyExchange::round(transactionCurrencyAmount, hcmPositionForecastBudgetDefaultValue.CurrencyCode);

                budgetPlanLineDataGenerationTmp.TransactionCurrencyAmount = transactionCurrencyAmount;

                // Track the BudgetPlanLineDataGenerationTmp that has the largest amount.
                if (budgetPlanLineDataGenerationTmp.TransactionCurrencyAmount > maxAmount)
                {
                    maxAmount = budgetPlanLineDataGenerationTmp.TransactionCurrencyAmount;
                    budgetPlanLineDataGenerationTmpMaxAmount.data(budgetPlanLineDataGenerationTmp);
                }

                totalAmount += budgetPlanLineDataGenerationTmp.TransactionCurrencyAmount;

                this.createOrUpdateBudgetPlanLine(budgetPlanLineDataGenerationTmp);
            }

            totalBudgetAmount = hcmPositionForecastBudgetAcctLineTmp.BudgetAmountCur;

            if (!prmisDefault(_factor))
            {
                totalBudgetAmount = this.adjustAmountByFactor(totalBudgetAmount, _factor);
                totalBudgetAmount = CurrencyExchange::round(totalBudgetAmount, hcmPositionForecastBudgetDefaultValue.CurrencyCode);
            }

            // Account for any rounding differences by increasing or decreasing the line with the greatest amount.
            if (totalAmount != totalBudgetAmount)
            {
                this.findRecordInTmpTable(budgetPlanLineDataGenerationTmpMaxAmount);

                if (budgetPlanLineDataGenerationTmpBulkInsert)
                {
                    // Update the record with the difference between the budget amount on the forecast position and the total amount distributed.
                    budgetPlanLineDataGenerationTmpBulkInsert.TransactionCurrencyAmount += (totalBudgetAmount - totalAmount);

                    if (budgetPlanLineDataGenerationTmp.AccountingCurrencyAmount)
                    {
                        budgetPlanLineDataGenerationTmpBulkInsert.AccountingCurrencyAmount += (totalBudgetAmount - totalAmount);
                    }

                    budgetPlanLineDataGenerationTmpBulkInsert.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQuantityBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the quantity type <c>BudgetPlanLine</c> records.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_factor">
    /// The factor that each budget plan line should be multiplied by; optional.
    /// </param>
    private void generateQuantityBudgetPlanLine(BudgetPlanHeaderRecId _budgetPlanHeaderRecId, Factor _factor = 1.00)
    {
        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmp;
        Map                             ledgerDimensionPercentage;
        MapEnumerator                   ledgerDimensionPercentageEnumerator;
        BudgetPlanQuantity              totalQuantity;
        BudgetPlanQuantity              maxQuantity;
        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmpMaxQuantity;
        HcmFullTimeEquivalency          totalFullTimeEquivalency;

        currentBudgetPlanScenario = budgetPlanGenerateContractHcm.parmTargetBudgetPlanScenarioQuantity();

        // Generate the Quantity lines
        if (currentBudgetPlanScenario)
        {
            budgetPlanLineDataGenerationTmp.data(this.setBudgetPlanLineForQuantity(_budgetPlanHeaderRecId));

            ledgerDimensionPercentage = this.generateLedgerDimension(
                                            budgetPlanGenerateContractHcm.parmTargetBudgetPlanScenarioMainAccount(),
                                            hcmPositionForecastDefaultDim.DistributionTemplate,
                                            hcmPositionForecastDefaultDim.DefaultDimension,
                                            budgetPlanLineDataGenerationTmp.EffectiveDate);

            ledgerDimensionPercentageEnumerator = ledgerDimensionPercentage.getEnumerator();

            while (ledgerDimensionPercentageEnumerator.moveNext())
            {
                budgetPlanLineDataGenerationTmp.LedgerDimension = ledgerDimensionPercentageEnumerator.currentKey();

                // Apply distribution percentage to the source line full time equivalent value
                budgetPlanLineDataGenerationTmp.Quantity = (positionForecastScenario.FullTimeEquivalency * (ledgerDimensionPercentageEnumerator.currentValue() / 100));

                // Apply factor rule and rounding
                if (!prmisDefault(_factor))
                {
                    budgetPlanLineDataGenerationTmp.Quantity = budgetPlanLineDataGenerationTmp.Quantity * _factor;
                }
                else
                {
                    budgetPlanLineDataGenerationTmp.Quantity = budgetPlanLineDataGenerationTmp.Quantity * budgetPlanGenerateContract.parmTargetFactor();
                }

                // Round the quantity to 2 decimal places.
                budgetPlanLineDataGenerationTmp.Quantity = decRound(budgetPlanLineDataGenerationTmp.Quantity, 2);

                budgetPlanLineDataGenerationTmp.Quantity = round(
                    budgetPlanLineDataGenerationTmp.Quantity,
                    budgetPlanGenerateContract.parmTargetRoundingPrecision());

                // Track the BudgetPlanLineDataGenerationTmp that has the largest quantity.
                if (budgetPlanLineDataGenerationTmp.Quantity > maxQuantity)
                {
                    maxQuantity = budgetPlanLineDataGenerationTmp.Quantity;
                    budgetPlanLineDataGenerationTmpMaxQuantity.data(budgetPlanLineDataGenerationTmp);
                }

                totalQuantity += budgetPlanLineDataGenerationTmp.Quantity;

                this.createOrUpdateBudgetPlanLine(budgetPlanLineDataGenerationTmp);
            }

            totalFullTimeEquivalency = positionForecastScenario.FullTimeEquivalency;

            if (!prmisDefault(_factor))
            {
                totalFullTimeEquivalency = totalFullTimeEquivalency * _factor;
            }
            else
            {
                totalFullTimeEquivalency = totalFullTimeEquivalency * budgetPlanGenerateContract.parmTargetFactor();
            }

            totalFullTimeEquivalency = decRound(totalFullTimeEquivalency, 2);

            totalFullTimeEquivalency = round(totalFullTimeEquivalency, budgetPlanGenerateContract.parmTargetRoundingPrecision());

            // Account for any rounding differences by increasing or decreasing the line with the greatest quantity.
            if (totalQuantity != totalFullTimeEquivalency)
            {
                this.findRecordInTmpTable(budgetPlanLineDataGenerationTmpMaxQuantity);

                if (budgetPlanLineDataGenerationTmpBulkInsert)
                {
                    // Update the record with the difference between the FullTimeEquivalency and the total quantity distributed.
                    budgetPlanLineDataGenerationTmpBulkInsert.Quantity += (totalFullTimeEquivalency - totalQuantity);
                    budgetPlanLineDataGenerationTmpBulkInsert.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserDefinedQuery</Name>
				<Source><![CDATA[
    public Query getUserDefinedQuery()
    {
        return this.createQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        generatedLedgerDimensions = new Map(Types::Container, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateContract</Name>
				<Source><![CDATA[
    public BudgetPlanGenerateContract parmBudgetPlanGenerateContract(BudgetPlanGenerateContract _budgetPlanGenerateContract = budgetPlanGenerateContract)
    {
        super(_budgetPlanGenerateContract);

        budgetPlanGenerateContractHcm = _budgetPlanGenerateContract as BudgetPlanGenerateContractHcm;

        return budgetPlanGenerateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the combination and retrieves the record ID of the persisted combination.
    /// </summary>
    /// <param name="_budgetPlanningContract">
    /// The instance of the <c>BudgetPlanningContract</c> class.
    /// </param>
    /// <param name="_effectiveDate">
    /// Validation date to use to when validating the dimension combination.
    /// </param>
    /// <returns>
    /// The <c>LedgerDimensionBudgetPlanning</c> record ID of the <c>DimensionAttributeValueCombination</c> record created.
    /// </returns>
    protected LedgerDimensionBudgetPlanning saveLedgerDimension(
        BudgetPlanningContract      _budgetPlanningContract,
        BudgetPlanLineEffectiveDate _effectiveDate)
    {
        DimensionStorage                dimensionStorage;
        LedgerDimensionBudgetPlanning   ledgerDimension;

        dimensionStorage = DimensionServiceProvider::buildDimStorageForBudgetPlanAccount(_budgetPlanningContract);

        // If the combination is valid, save it.
        if (dimensionStorage.segmentCount() > 0
            && LedgerDimensionValidationHelper::validateByTreeForCombination(dimensionStorage, _effectiveDate))
        {
            ledgerDimension = dimensionStorage.save();
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanLineDataGenerationTmp</Name>
				<Source><![CDATA[
    protected BudgetPlanLineDataGenerationTmp setBudgetPlanLineDataGenerationTmp(
        BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmp;

        budgetPlanLineDataGenerationTmp = super(_budgetPlanHeaderRecId);

        budgetPlanLineDataGenerationTmp.BudgetClass = budgetPlanGenerateContractHcm.parmTargetBudgetClass();

        if (budgetPlanGenerateContractHcm.parmTargetBudgetPlanLineIncludePosition())
        {
            budgetPlanLineDataGenerationTmp.HcmPosition = hcmPositionForecast.RecId;
            budgetPlanLineDataGenerationTmp.PositionForecastScenario = positionForecastScenario.RecId;
        }

        return budgetPlanLineDataGenerationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanLineForQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data for the <c>BudgetPlanLineDataGenerationTmp</c> table.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The <c>BudgetPlanHeader</c> record ID for which to set the <c>BudgetPlanLineDataGenerationTmp</c> record.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanLineDataGenerationTmp</c> record.
    /// </returns>
    protected BudgetPlanLineDataGenerationTmp setBudgetPlanLineForQuantity(
        BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanLine                  budgetPlanLine;
        BudgetPlanLineItemLine          budgetPlanLineItem;
        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmp;

        budgetPlanLine.BudgetPlanHeader   = _budgetPlanHeaderRecId;
        budgetPlanLine.BudgetPlanScenario = budgetPlanGenerateContractHcm.parmTargetBudgetPlanScenarioQuantity();

        budgetPlanLineItem = BudgetPlanLineItemLine::construct();
        budgetPlanLineItem.parmBudgetPlanLine(budgetPlanLine);
        budgetPlanLineItem.initValue();
        budgetPlanLineItem.defaultRow();

        budgetPlanLineDataGenerationTmp.BudgetPlanHeader   = budgetPlanLine.BudgetPlanHeader;
        budgetPlanLineDataGenerationTmp.BudgetPlanScenario = budgetPlanLine.BudgetPlanScenario;
        budgetPlanLineDataGenerationTmp.EstimateType       = budgetPlanLine.EstimateType;
        budgetPlanLineDataGenerationTmp.EffectiveDate      = budgetPlanLine.EffectiveDate;
        budgetPlanLineDataGenerationTmp.IsRecurring        = budgetPlanLine.IsRecurring;
        budgetPlanLineDataGenerationTmp.UnitOfMeasure      = budgetPlanLine.UnitOfMeasure;

        budgetPlanLineDataGenerationTmp.BudgetClass = budgetPlanGenerateContractHcm.parmTargetBudgetClass();

        if (budgetPlanGenerateContractHcm.parmTargetBudgetPlanLineIncludePosition())
        {
            budgetPlanLineDataGenerationTmp.HcmPosition = hcmPositionForecast.RecId;
            budgetPlanLineDataGenerationTmp.PositionForecastScenario = positionForecastScenario.RecId;
        }

        return budgetPlanLineDataGenerationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPositionDetailsFromForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the class table variables to the current values.
    /// </summary>
    /// <param name="_hcmPositionForecastScenario">
    /// The forecast position scenario to use in order to retrieve the table values.
    /// </param>
    public void setPositionDetailsFromForecast(HcmPositionForecastScenarioRecId _hcmPositionForecastScenario)
    {
        select firstonly FullTimeEquivalency, LegalEntity, PositionForecast from positionForecastScenario
            where positionForecastScenario.RecId == _hcmPositionForecastScenario
                outer join firstonly CurrencyCode from hcmPositionForecastBudgetDefaultValue
                    where hcmPositionForecastBudgetDefaultValue.PositionForecast == positionForecastScenario.PositionForecast
                        outer join firstonly DistributionTemplate, DefaultDimension from hcmPositionForecastDefaultDim
                            where hcmPositionForecastDefaultDim.PositionForecast == positionForecastScenario.PositionForecast;

        hcmPositionForecast = HcmPositionForecast::find(positionForecastScenario.PositionForecast);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPositionDetailsFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the class table variables to the current values.
    /// </summary>
    /// <param name="_userDefinedQueryRun">
    /// The query to use in order to retrieve the table values.
    /// </param>
    protected void setPositionDetailsFromQuery(QueryRun _userDefinedQueryRun)
    {
        hcmPositionForecast                   = _userDefinedQueryRun.get(tableNum(HcmPositionForecast)) as HcmPositionForecast;

        if (BudgetLinkPositionToMultipleForecastDetailsFlight::instance().isEnabled())
        {
            hcmPositionForecastDetailV2 = _userDefinedQueryRun.get(tableNum(HcmPositionForecastDetailV2)) as HcmPositionForecastDetailV2;
        }
        else
        {
            hcmPositionForecastDetail = _userDefinedQueryRun.get(tableNum(HcmPositionForecastDetail)) as HcmPositionForecastDetail;
        }

        hcmPositionForecastBudgetDefaultValue = _userDefinedQueryRun.get(tableNum(HcmPositionForecastBudgetDefaultValue)) as HcmPositionForecastBudgetDefaultValue;
        hcmPositionForecastDefaultDim         = _userDefinedQueryRun.get(tableNum(HcmPositionForecastDefaultDim)) as HcmPositionForecastDefaultDim;
        positionForecastScenario              = _userDefinedQueryRun.get(tableNum(HcmPositionForecastScenario)) as HcmPositionForecastScenario;
        forecastScenario                      = _userDefinedQueryRun.get(tableNum(HcmForecastScenario)) as HcmForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the process of data generation.
    /// </summary>
    /// <param name="_budgetPlanGenerateContractHcm">
    /// An instance of <c>BudgetPlanGenerateContractHcm</c> class.
    /// </param>
    public void startProcess(BudgetPlanGenerateContractHcm _budgetPlanGenerateContractHcm)
    {
        BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanGenerateServiceHcm));
        using (SysInstrumentationActivityContext budgetPlanGenerateServiceHcmContext = budgetPlanLogger.budgetPlanGeneration().HCMContext(_budgetPlanGenerateContractHcm))
        {
            this.parmBudgetPlanGenerateContract(_budgetPlanGenerateContractHcm);
            this.initialize();
            this.generateData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetPlanGenerateServiceHcm</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetPlanGenerateServiceHcm</c> class.
    /// </returns>
    public static BudgetPlanGenerateServiceHcm construct()
    {
        return new BudgetPlanGenerateServiceHcm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>