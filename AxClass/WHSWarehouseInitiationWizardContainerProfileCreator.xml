<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWarehouseInitiationWizardContainerProfileCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSWarehouseInitiationWizardContainerProfileCreator extends WHSWarehouseInitiationWizardEntityCreatorBase
{
    private WHSCloseContainerProfileId containerPackingPolicy;
    private WHSPackProfileId packingProfileId;
    private WHSWeightUOM weightUnit;
    private WHSWarehouseContainerClosingWorkCreationProcess creationProces;
    private WMSLocationId packingFinalShippingLocationId;
    private InventLocationId warehouseId;
    private WhsWarehouseGroupId warehouseGroupId;
    private WhsWarehouseGroupAll warehouseSelection;
    private boolean isAvailableAtSortingLoc;
    private WMSLocationId sortLocation;
    private Set selectedTypes = new Set(Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>entityName</Name>
				<Source><![CDATA[
    public str entityName()
    {
        return tablePName(WHSCloseContainerProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFrom</Name>
				<Source><![CDATA[
    public static WHSWarehouseInitiationWizardContainerProfileCreator newFrom(
        WHSWarehouseInitiationWizardEntitiesCreatorMode _mode,
        WHSWarehouseInitiationWizardEntitiesCreationSummaryBuilder _summaryBuilder,
        WHSCloseContainerProfileId _containerPackingPolicy,
        WHSPackProfileId _packingProfileId,
        UnitOfMeasureSymbol _weightUnit,
        WHSWarehouseContainerClosingWorkCreationProcess _creationProces, 
        WMSLocationId _packingFinalShippingLocationId,
        Set _selectedTypes,
        InventLocationId _warehouseId,
        WhsWarehouseGroupId _warehouseGroupId,
        WhsWarehouseGroupAll _warehouseSelection,
        boolean _isAvailableAtSortingLoc,
        WMSLocationId _sortLocation)
    {
        WHSWarehouseInitiationWizardContainerProfileCreator creator = new WHSWarehouseInitiationWizardContainerProfileCreator(_mode, _summaryBuilder);
        creator.containerPackingPolicy = _containerPackingPolicy;
        creator.packingProfileId = _packingProfileId;
        creator.weightUnit = _weightUnit;
        creator.creationProces = _creationProces;
        creator.packingFinalShippingLocationId = _packingFinalShippingLocationId;
        creator.selectedTypes = _selectedTypes;
        creator.warehouseId  = _warehouseId;
        creator.warehouseGroupId = _warehouseGroupId;
        creator.warehouseSelection = _warehouseSelection;
        creator.isAvailableAtSortingLoc = _isAvailableAtSortingLoc;
        creator.sortLocation = _sortLocation;
        return creator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreate</Name>
				<Source><![CDATA[
    protected boolean canCreate()
    {
        return containerPackingPolicy != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    protected boolean exist()
    {
        return WHSCloseContainerProfile::exist(containerPackingPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    protected void insert()
    {
        boolean containerProfileExists = WHSCloseContainerProfile::exist(containerPackingPolicy);
        
        if(!containerProfileExists)
        {
            WHSCloseContainerProfile containerProfile;
            containerProfile.CloseContainerProfileId = containerPackingPolicy;
            containerProfile.WeightUOM = weightUnit;
            containerProfile.Description = containerPackingPolicy;
            containerProfile.ContainerClosingWorkCreationProcess  = creationProces;
            containerProfile.WarehouseGroupAll  = warehouseSelection;
            if(containerProfile.WarehouseGroupAll == WhsWarehouseGroupAll::Group)
            {
                containerProfile.WarehouseGroupId  = warehouseGroupId;
            }
            else if (containerProfile.WarehouseGroupAll == WhsWarehouseGroupAll::Warehouse)
            {
                containerProfile.InventLocationId  = warehouseId;
                if(!isAvailableAtSortingLoc)
                {
                    containerProfile.DefaultFinalShipLoc  = packingFinalShippingLocationId;
                }
                else
                {
                    containerProfile.DefaultSortLocation  = sortLocation;
                }
            }
            containerProfile.insert();
        }

        this.createProfile();
  
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProfile</Name>
				<Source><![CDATA[
    protected void createProfile()
    {
        boolean profileExists = WHSPackProfile::exist(packingProfileId);
        
        SetEnumerator typesEnumerator = selectedTypes.getEnumerator();
        WHSContainerTypeCode typeName = typesEnumerator.current();
        
        if(!profileExists)
        {
            WHSPackProfile profile;
            profile.PackProfileId = packingProfileId;
            profile.Description = packingProfileId;
            profile.CloseContainerProfileId = containerPackingPolicy;
            profile.LPAssignment = WHSLPAssignment::Auto;
            profile.DefaultContainerType = typeName;
            profile.insert();
        
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>