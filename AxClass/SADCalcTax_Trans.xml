<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SADCalcTax_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SADCalcTax_Trans extends SADCalcTax
{
    PlSADTable sadTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForSourceTable</Name>
				<Source><![CDATA[
    public static SADCalcTax_Trans newForSourceTable(PlSADTable _sadTable)
    {
        SADCalcTax_Trans calcTax = new SADCalcTax_Trans();
        calcTax.init(_sadTable);
        return calcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(Common _common)
    {
        super(_common);
        sadTable = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    public TransDate taxDate()
    {
        return sadTable.VATDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public DocumentDate documentDate()
    {
        return sadTable.SADDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionDate</Name>
				<Source><![CDATA[
    public TransDate transactionDate()
    {
        return sadTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendAccount</Name>
				<Source><![CDATA[
    protected VendAccount getVendAccount()
    {
        VendAccount vendAccount;
        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForTaxService())
        {
            vendAccount = PlSADPurchLine::getUniqueVendor(sadTable.SADNumberCode);
        }
        else
        {
            vendAccount = sadTable.SadDutyVend;
        }

        return vendAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>