<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqForecastReduce_TransFixed</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqForecastReduce_TransFixed</c> class handles the reduction of a demand or supply forecast
///    based on the principle transactions reduction key.
/// </summary>
class ReqForecastReduce_TransFixed extends ReqForecastReduce
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcNewReqQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a new forecast quantity.
    /// </summary>
    /// <param name="_reqTrans">
    /// A <c>ReqTrans</c> record of type forecast.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    /// <param name="_reduceValue">
    /// A real value that contains a reduce value.
    /// </param>
    /// <returns>
    /// A real value that contains the reduced forecast quantity.
    /// </returns>
    protected ReqQty calcNewReqQty(
        ReqTrans    _reqTrans,
        ReqSetupDim _setupDim,
        real        _reduceValue)
    {
        return this.calcNewReqQtyFromQty(_reqTrans,_reduceValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the first reduction period.
    /// </summary>
    /// <returns>
    ///    A container that contains the start and end date for the first reduction period.
    /// </returns>
    protected container firstPeriod()
    {
        MapEnumerator           me;

        TransDate               fromDate;
        TransDate               toDate;

        if (mapPeriod && mapPeriod.elements())
        {
            me = mapPeriod.getEnumerator();

            // Set is needed to retrieve values in the right order
            var orderedSet = new Set(Types::Date);
            while (me.moveNext())
            {
                orderedSet.add(this.getReqDateFromMapPeriodKey(me.currentKey()));
            }

            var se = orderedSet.getEnumerator();
            if (se.moveNext())
            {
                fromDate = se.current();
            }

            if (se.moveNext())
            {
                toDate   = se.current() - 1;
            }
            else
            {
                toDate   = dateMax();
            }

            return [fromDate,toDate];
        }

        return [dateNull(),dateNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodCreateSetKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the key element in the map that contains the reduction periods.
    /// </summary>
    /// <param name="_forecastType">
    ///    An <c>ForecastTableType</c> enumeration value that specifies whether the forecast reduction is with
    ///    regard to a demand forecast or a supply forecast.
    /// </param>
    /// <param name="_reqTransCache">
    ///    A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory
    ///    dimensions.
    /// </param>
    void mapPeriodCreateSetKey(
        ForecastTableType   _forecastType,
        ReqTransCache       _reqTransCache,
        ReqSetupDim         _setupDim)
    {
        this.mapPeriodCreateSetKeyFromReduceKey(_setupDim.reqReduceKeyId(),false, _forecastType, _reqTransCache, _setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodCreateSetValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value element in the map that contains the reduction periods.
    /// </summary>
    /// <param name="_forecastType">
    ///    An <c>ForecastTableType</c> enumeration value that specifies whether the forecast reduction is with
    ///    regard to a demand or supply forecast.
    /// </param>
    /// <param name="_reqTransCache">
    ///    A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory
    ///    dimensions.
    /// </param>
    protected void mapPeriodCreateSetValue(
        ForecastTableType   _forecastType,
        ReqTransCache       _reqTransCache,
        ReqSetupDim         _setupDim)
    {
        this.mapPeriodCreateSetValuePhysicalQty(_forecastType, _setupDim);
        this.mapPeriodCreateSetValueExpectedQty(_forecastType,_reqTransCache,_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodCreateSetValuePhysicalQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value element in the map that contains the reduction periods.
    /// </summary>
    /// <param name="_forecastType">
    ///    An <c>ForecastTableType</c> enumeration value that specifies whether the forecast reduction is with
    ///    regard to a demand or supply forecast.
    /// </param>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory
    ///    dimensions.
    /// </param>
    /// <remarks>
    ///    The value is calculated by finding all delivered or received quantity for the first reduction
    ///    period.
    /// </remarks>
    protected void mapPeriodCreateSetValuePhysicalQty(
        ForecastTableType   _forecastType,
        ReqSetupDim         _setupDim)
    {
        InventQty                   reduceQty;

        InventTransOrigin           inventTransOrigin;
        InventTrans                 inventTrans;
        InventTransOriginTransfer   inventTransOriginTransfer;
        InventTrans                 inventTransTransfer;

        InventDim                   inventDim;
        InventDim                   inventDimTransfer;
        InventDim                   inventDimCriteria;
        InventDimParm               inventDimParm;

        ReqSetup                    setup = _setupDim.setup();

        TransDate                   fromDate;
        TransDate                   toDate;

        SalesLine                   salesLine;

        [fromDate,toDate] = this.firstPeriod();

        if (! fromDate || fromDate > dateToday)
        {
            return ;
        }

        // first period includes pasted days. Updated transactions might reduce the forecast.

        inventDimParm.initCovPrDimension(InventDimGroupSetup::newItemId(setup.itemId()));
        inventDimCriteria = _setupDim.inventDim();

        // Financial or physical exclusive internal transfers

        while select forceplaceholders sum(Qty) from inventTrans
            group by inventTransOrigin.ReferenceCategory, salesLine.CustGroup, salesLine.CustAccount
            where inventTrans.DatePhysical  >= fromDate
               && inventTrans.DatePhysical  <= toDate
               && (_forecastType != ForecastTableType::Demand || inventTrans.StatusIssue   != StatusIssue::None)
               && (_forecastType != ForecastTableType::Supply || inventTrans.StatusReceipt != StatusReceipt::None)
               && !inventTrans.PackingSlipReturned
        join ReferenceCategory from inventTransOrigin
            where inventTransOrigin.RecId  == inventTrans.InventTransOrigin
               && inventTransOrigin.ItemId == setup.itemId()
        outer join TableId from inventTransOriginTransfer
            where  (_forecastType != ForecastTableType::Demand || inventTransOriginTransfer.IssueInventTransOrigin == inventTransOrigin.RecId)
                && (_forecastType != ForecastTableType::Supply || inventTransOriginTransfer.ReceiptInventTransOrigin == inventTransOrigin.RecId)
        outer join CustGroup, CustAccount from salesLine
            where salesLine.InventTransId == inventTransOrigin.InventTransId
        #inventDimExistsJoin(InventTrans.inventDimId,inventDim,inventDimCriteria,inventDimParm)
        notexists join inventTransTransfer
                where inventTransTransfer.ItemId              == inventTrans.ItemId
                   && (_forecastType != ForecastTableType::Demand || inventTransTransfer.InventTransOrigin   == inventTransOriginTransfer.ReceiptInventTransOrigin)
                   && (_forecastType != ForecastTableType::Supply || inventTransTransfer.InventTransOrigin   == inventTransOriginTransfer.IssueInventTransOrigin)
            #inventDimExistsJoin(inventTransTransfer.inventDimId,inventDimTransfer,inventDimCriteria,inventDimParm)
        {
            if (_setupDim.canReduceForecast(_forecastType,ReqTrans::transType2RefType(inventTransOrigin.ReferenceCategory,inventTrans.Qty)))
            {
                if (_forecastType == ForecastTableType::Demand && salesLine.CustGroup && salesLine.CustAccount)
                {
                    this.mapPeriodUpdatePerCustomer(fromDate, inventTrans.Qty, salesLine.CustGroup, salesLine.CustAccount, _setupDim);
                }
                else
                {
                    reduceQty += inventTrans.Qty;
                }
            }
        }

        // find registred or picked exclusive internal transfers
        while select forceplaceholders sum(Qty) from inventTrans
            group by inventTransOrigin.ReferenceCategory, salesLine.CustGroup, salesLine.CustAccount
            where inventTrans.DateStatus  >= fromDate
               && inventTrans.DateStatus  <= toDate
               && (_forecastType != ForecastTableType::Demand || inventTrans.StatusIssue  == StatusIssue::Picked )
               && (_forecastType != ForecastTableType::Supply || inventTrans.StatusReceipt == StatusReceipt::Registered)
        join ReferenceCategory from inventTransOrigin
            where inventTransOrigin.RecId  == inventTrans.InventTransOrigin
               && inventTransOrigin.ItemId == setup.itemId()
        outer join TableId from inventTransOriginTransfer
            where  (_forecastType != ForecastTableType::Demand || inventTransOriginTransfer.IssueInventTransOrigin == inventTransOrigin.RecId)
                && (_forecastType != ForecastTableType::Supply || inventTransOriginTransfer.ReceiptInventTransOrigin == inventTransOrigin.RecId)
        outer join CustGroup, CustAccount from salesLine
            where salesLine.InventTransId == inventTransOrigin.InventTransId
        #inventDimExistsJoin(InventTrans.inventDimId,inventDim,inventDimCriteria,inventDimParm)
        notexists join inventTransTransfer
                where inventTransTransfer.ItemId              == inventTrans.ItemId
                   && (_forecastType != ForecastTableType::Demand || inventTransTransfer.InventTransOrigin   == inventTransOriginTransfer.ReceiptInventTransOrigin)
                   && (_forecastType != ForecastTableType::Supply || inventTransTransfer.InventTransOrigin   == inventTransOriginTransfer.IssueInventTransOrigin)
            #inventDimExistsJoin(inventTransTransfer.inventDimId,inventDimTransfer,inventDimCriteria,inventDimParm)
        {
            if (_setupDim.canReduceForecast(_forecastType,ReqTrans::transType2RefType(inventTransOrigin.ReferenceCategory,inventTrans.Qty)))
            {
                if (_forecastType == ForecastTableType::Demand && salesLine.CustGroup && salesLine.CustAccount)
                {
                    this.mapPeriodUpdatePerCustomer(fromDate, inventTrans.Qty, salesLine.CustGroup, salesLine.CustAccount, _setupDim);
                }
                else
                {
                    reduceQty += inventTrans.Qty;
                }
            }
        }

        this.mapPeriodUpdateValue(fromDate,reduceQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodUpdateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the map that contains the reduction periods.
    /// </summary>
    /// <param name="_reqDate">
    ///  A date that contains the start date of the reduction period.
    /// </param>
    /// <param name="_addValue">
    /// A real value that contains a value which is added to the reduction balance.
    /// </param>
    /// <param name="_customerGroupId">
    /// A Customer Group Identification
    /// </param>
    /// <param name="_customerAccountId">
    /// A Customer Account Identification
    /// </param>
    protected void mapPeriodUpdateBalance(
        TransDate   _reqDate,
        real        _addValue,
        CustGroupId _customerGroupId = '',
        CustAccount _customerAccountId = '')
    {
        this.mapPeriodUpdateValue(_reqDate,_addValue, _customerGroupId, _customerAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
        reductionType = ReqReduceType::OpenOrdersReductionKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ReqForecastReduce_TransFixed</c> class and initializes the object.
    /// </summary>
    /// <returns>
    ///    A <c>ReqForecastReduce_TransFixed</c> object.
    /// </returns>
    public static ReqForecastReduce_TransFixed contruct()
    {
        return new ReqForecastReduce_TransFixed();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>