<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustSettlementPriorityProcessingQueryRangeGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustSettlementPriorityProcessingQueryRangeGenerator</c> class creates ranges for customer settlement priority processing
/// based on the system settlement priority configuration.
/// </summary>
internal class CustSettlementPriorityProcessingQueryRangeGenerator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateQueryFieldSortOrderForCustSettlementPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the given query with an order clause for the given settlement priority associated field.
    /// </summary>
    /// <param name = "_query">The query to update.</param>
    /// <param name = "_custSettlementPriority">The customer settlement priority entry.</param>
    internal void updateQueryFieldSortOrderForCustSettlementPriority(Query _query, CustSettlementPriority _custSettlementPriority)
    {
        SortOrder sortOrder = this.convertDirectionToSortOrder(_custSettlementPriority.Direction);

        switch (_custSettlementPriority.Attribute)
        {
            case CustSettlementPriorityAttribute::TranscationAmount:
                _query.dataSourceTable(tableNum(CustTransOpen)).addOrderByField(fieldNum(CustTransOpen, AmountCur), sortOrder);
                break;

            case CustSettlementPriorityAttribute::Billing:
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    _query.dataSourceTable(tableNum(CustBillingClassification)).addOrderByField(fieldNum(CustBillingClassification, SettlementPriority), SortOrder::Ascending);
                }
                break;

            case CustSettlementPriorityAttribute::CashDiscountDate:
                _query.dataSourceTable(tableNum(CustTransOpen)).addOrderByField(fieldNum(CustTransOpen, SettlementPriorityCashDiscDate), sortOrder);
                break;

            case CustSettlementPriorityAttribute::DueDate:
                _query.dataSourceTable(tableNum(CustTransOpen)).addOrderByField(fieldNum(CustTransOpen, DueDate), sortOrder);
                break;

            case CustSettlementPriorityAttribute::TransactionType:
                _query.dataSourceTable(tableNum(CustSettlementTransactionPriority)).addOrderByField(fieldNum(CustSettlementTransactionPriority, Priority), SortOrder::Descending);
                break;

            case CustSettlementPriorityAttribute::TransactionDate:
                _query.dataSourceTable(tableNum(CustTrans)).addOrderByField(fieldNum(CustTrans, TransDate), sortOrder);
                break;

            case CustSettlementPriorityAttribute::Voucher:
                _query.dataSourceTable(tableNum(CustTrans)).addOrderByField(fieldNum(CustTrans, Voucher), sortOrder);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRangeOrderByForSettlementQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update query range order by for settlement query.
    /// </summary>
    /// <param name = "_settlementQuery">The settlement query.</param>
    /// <param name = "_custSettlementPriority">The customer settlement priority.</param>
    internal void updateQueryRangeOrderByForSettlementQuery(Query _settlementQuery, CustSettlementPriority _custSettlementPriority)
    {
        QueryBuildDataSource qbdsSettlment = _settlementQuery.dataSourceTable(tableNum(tmpCustOpenLines));
        SortOrder sortOrder = this.convertDirectionToSortOrder(_custSettlementPriority.Direction);

        if (qbdsSettlment)
        {
            switch (_custSettlementPriority.Attribute)
            {
                case CustSettlementPriorityAttribute::TranscationAmount:
                    qbdsSettlment.addOrderByField(fieldNum(tmpCustOpenLines, TransactionAmount), sortOrder);
                    break;

                case CustSettlementPriorityAttribute::CashDiscountDate:
                    qbdsSettlment.addOrderByField(fieldNum(tmpCustOpenLines, CashDiscDate), sortOrder);
                    break;

                case CustSettlementPriorityAttribute::DueDate:
                    qbdsSettlment.addOrderByField(fieldNum(tmpCustOpenLines, DueDate), sortOrder);
                    break;

                case CustSettlementPriorityAttribute::TransactionType:
                    qbdsSettlment.addOrderByField(fieldNum(tmpCustOpenLines, TransPriority), SortOrder::Descending);
                    break;

                case CustSettlementPriorityAttribute::TransactionDate:
                    qbdsSettlment.addOrderByField(fieldNum(tmpCustOpenLines, TransDate), sortOrder);
                    break;

                case CustSettlementPriorityAttribute::Voucher:
                    qbdsSettlment.addOrderByField(fieldNum(tmpCustOpenLines, Voucher), sortOrder);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDirectionToSortOrder</Name>
				<Source><![CDATA[
    private SortOrder convertDirectionToSortOrder(CustSettlementAttributeDirection _direction)
    {
        SortOrder sortOrder;

        if (_direction == CustSettlementAttributeDirection::Ascending)
        {
            sortOrder = SortOrder::Ascending;
        }
        else
        {
            sortOrder = SortOrder::Descending;
        }

        return sortOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the query range generator.
    /// </summary>
    /// <returns>The new query range generator.</returns>
    internal static CustSettlementPriorityProcessingQueryRangeGenerator construct()
    {
        return new CustSettlementPriorityProcessingQueryRangeGenerator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>