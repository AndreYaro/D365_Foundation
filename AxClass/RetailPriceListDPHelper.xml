<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceListDPHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailPriceListDPHelper</c> calculates prices for assorted items in a store and insert it to a temporary table.
/// </summary>
public class RetailPriceListDPHelper
{
    private static str RetailInstrumentationSegmentArea = 'PriceList';
    private static date defaultDate = Global::dateNull();

    private RecId operatingUnitRecId;
    private RetailStoreId storeNumber;
    private date activeDate;
    private LanguageId languageId;
    private str storeName;
    // This is used for telemetry to tell how many items are involved in price calculation.
    private int64 numberOfRecords;
    private TmpRetailPriceListDisplayValues retailPricelist;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmStoreNumber</Name>
				<Source><![CDATA[
    public RetailStoreId parmStoreNumber(str _storeNumber = storeNumber)
    {
        storeNumber = _storeNumber;
        return _storeNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveDate</Name>
				<Source><![CDATA[
    internal date parmActiveDate(date _activeDate = activeDate)
    {
        activeDate = _activeDate;
        return activeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpDBInstanceToStoreValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the tmp table to store the price report values.
    /// </summary>
    /// <param name = "_retailPricelist">The tmp table instance.</param>
    internal void setTmpDBInstanceToStoreValues(TmpRetailPriceListDisplayValues _retailPricelist)
    {
        this.retailPricelist = _retailPricelist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get a tmp table which stores price and discount calculation results for the given operating unit.
    /// </summary>
    /// <returns>A tmp db which stores price and discount calculation results for the given operating unit.</returns>
    internal TmpRetailPriceListDisplayValues getPriceList()
    {
        using(var instrumentation = RetailPricingInstrumentationSegment::construct(RetailInstrumentationSegmentArea, methodStr(RetailPriceListDPHelper, getPriceList)))
        {
            TmpRetailPriceListDisplayValues priceListValues = this.getPriceListInternal();
            instrumentation.addExtendedData(varStr(numberOfRecords), int642Str(numberOfRecords));
            return priceListValues;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceListInternal</Name>
				<Source><![CDATA[
    private TmpRetailPriceListDisplayValues getPriceListInternal()
    {
        // Setup class variables.
        languageId = LanguageTable::defaultLanguage();

        RetailStoreTable store = RetailStoreTable::find(this.storeNumber);
        this.operatingUnitRecId = RetailStoreTable::findOperatingUnit(store.RecId).RecId;

        // Setup query.
        Query itemListForPriceQuery = new Query(queryStr(RetailStorelItemPriceList));
        itemListForPriceQuery.dataSourceTable(tableNum(RetailAssortmentLookupChannelGroup))
            .addRange(fieldNum(RetailAssortmentLookupChannelGroup, OMOperatingUnitId))
            .value(queryValue(this.operatingUnitRecId));
        itemListForPriceQuery.dataSourceTable(tableNum(CatalogProduct))
            .enabled(false);
        itemListForPriceQuery.dataSourceTable(tableNum(RetailCatalogChannelCollapsed))
            .enabled(false);
        itemListForPriceQuery.dataSourceTable(tableNum(Catalog))
            .enabled(false);
        itemListForPriceQuery.dataSourceTable(tableNum(EcoResProductTranslation))
            .addRange(fieldNum(EcoResProductTranslation, LanguageId))
            .value(SysQuery::value(languageId));

        this.setTradeAgreementDateRange(itemListForPriceQuery);

        return this.calculatePriceListDetails(itemListForPriceQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTradeAgreementDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set query date range.
    /// </summary>
    /// <param name = "_itemListForPriceQuery">The query on which date range is limited.</param>
    private void setTradeAgreementDateRange(Query _itemListForPriceQuery)
    {
        date previousDate = activeDate - 1;
        date nextDate = activeDate + 1;

        str validFromRange = strFmt('((%1 < %2) || (%1 == 0))',
                fieldStr(RetailChannelItemPriceAgreement, FromDate),
                date2StrXpp(nextDate));
        str validToRange = strFmt('((%1 > %2) || (%1 == 0))',
                fieldStr(RetailChannelItemPriceAgreement, ToDate),
                date2StrXpp(previousDate));
        _itemListForPriceQuery.dataSourceTable(tableNum(RetailChannelItemPriceAgreement))
            .clearRange(fieldNum(RetailChannelItemPriceAgreement, FromDate));
        _itemListForPriceQuery.dataSourceTable(tableNum(RetailChannelItemPriceAgreement))
            .addRange(fieldNum(RetailChannelItemPriceAgreement, FromDate))
            .value(validFromRange);
        _itemListForPriceQuery.dataSourceTable(tableNum(RetailChannelItemPriceAgreement))
            .clearRange(fieldNum(RetailChannelItemPriceAgreement, ToDate));
        _itemListForPriceQuery.dataSourceTable(tableNum(RetailChannelItemPriceAgreement))
            .addRange(fieldNum(RetailChannelItemPriceAgreement, ToDate))
            .value(validToRange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePriceListDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a data source, price will be calculated for each item.
    /// </summary>
    /// <param name = "_query">The data source query.</param>
    /// <returns>A temporary table which stores price information for items.</returns>
    private TmpRetailPriceListDisplayValues calculatePriceListDetails(Query _query)
    {
        RetailAssortmentLookup localAssortmentlookUp;
        InventTable localInventTable;
        RetailChannelItemPriceAgreement localPriceAgreement;
        SalesUnit salesUnit;
        InventDimCombination localInventDimCombination;
        RetailPriceDiscountLine priceDiscountLine;
        List priceDiscountLines;
        RefRecId channelRecId = RetailChannelTable::findByOperatingUnitId(this.operatingUnitRecId).RecId;
        QueryRun queryRun = new QueryRun(_query);

        priceDiscountLines = new List(Types::Class);

        numberOfRecords = 0;
        while(queryRun.next())
        {
            localAssortmentlookUp = queryRun.get(tableNum(RetailAssortmentLookup));
            localInventTable = queryRun.get(tableNum(InventTable));

            localPriceAgreement = queryRun.get(tableNum(RetailChannelItemPriceAgreement));
            localInventDimCombination = queryRun.get(tableNum(InventDimCombination));

            salesUnit = InventTableModule::find(localInventTable.ItemId, ModuleInventPurchSales::Sales).UnitId;

            priceDiscountLine = new RetailPriceDiscountLine();
            // Price list does not calculate price base on catalog.
            priceDiscountLine.parmCatalogRefRecId(0);
            priceDiscountLine.parmChannelRefRecId(channelRecId);
            priceDiscountLine.parmReferenceRecId(localAssortmentLookup.RecId);
            priceDiscountLine.parmInventDimId(localInventDimCombination.InventDimId);
            priceDiscountLine.parmItemId(localInventTable.ItemId);
            priceDiscountLine.parmQty(1);
            priceDiscountLine.parmSalesUnit(salesUnit);
            priceDiscountLines.addEnd(priceDiscountLine);

            ++numberOfRecords;
        }

        // Pricing engine call.
        RetailPricingCalculatorCreator::getInstance().createPriceCheck().calculateIndependentPriceDiscountsWithDateTime(
            channelRecId,
            priceDiscountLines,
            new System.DateTimeOffset(activeDate, System.TimeSpan::Zero));

        // Populates discounts, active pirce and offers data.
        return this.PopulatePriceDiscountsOfferIdInTempTable(priceDiscountLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePriceDiscountsOfferIdInTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Append discount offer id applicable to a line to the discount lines.
    /// </summary>
    /// <param name = "_priceDiscountLines">A list of price discount lines.</param>
    /// <returns>A temporary table which stores price information for items.</returns>
    [Replaceable(true)]
    protected TmpRetailPriceListDisplayValues populatePriceDiscountsOfferIdInTempTable(List _priceDiscountLines)
    {
        RefRecId assortmentLookUpRecId, channelRecId;
        RetailPriceDiscountLine priceDiscountLine;
        TmpRetailPriceListDisplayValues tmpRetailPriceListDisplayValues = this.retailPricelist;
        ListEnumerator priceDiscountLinesEnumerator = _priceDiscountLines.getEnumerator();


        RecordInsertList listOfDisplayDetails = new RecordInsertList(tableNum(TmpRetailPriceListDisplayValues),
                                                                                true,
                                                                                true,
                                                                                true,
                                                                                true,
                                                                                true,
                                                                                tmpRetailPriceListDisplayValues);

        while (priceDiscountLinesEnumerator.moveNext())
        {
            RefRecId productRecId;
            container offerIdsCont, promotionsCont;
            RetailMemo discountOffers, promotionOffers;

            priceDiscountLine = priceDiscountLinesEnumerator.current();

            assortmentLookUpRecId = priceDiscountLine.parmReferenceRecId();
            channelRecId = priceDiscountLine.parmChannelRefRecId();

            productRecId = InventTable::find(priceDiscountLine.parmItemId()).Product;

            tmpRetailPriceListDisplayValues.AssortmentRecId = assortmentLookUpRecId;
            tmpRetailPriceListDisplayValues.ChannelRecId = channelRecId;
            tmpRetailPriceListDisplayValues.CatalogRecId = priceDiscountLine.parmCatalogRefRecId();
            tmpRetailPriceListDisplayValues.ItemId = priceDiscountLine.parmItemId();
            tmpRetailPriceListDisplayValues.ActivePrice = priceDiscountLine.parmPrice();
            tmpRetailPriceListDisplayValues.CalculatedDiscount = priceDiscountLine.parmDiscount();

            EcoResProductTranslation ecoResProductTranslation = EcoResProductTranslation::findByProductLanguage(productRecId, languageId);
            tmpRetailPriceListDisplayValues.ProductName = ecoResProductTranslation.Name;
            RetailChannelTable retailChannelRecord = RetailChannelTable::findByRecId(channelRecId);
            tmpRetailPriceListDisplayValues.Currency = retailChannelRecord.Currency;
            Price price = this.getItemPrice(tmpRetailPriceListDisplayValues.ItemId, ModuleInventPurchSales::Sales, channelRecId, retailChannelRecord.Currency);
            tmpRetailPriceListDisplayValues.Price = price;

            // Get discount offers.
            offerIdsCont += RetailPriceListHelper::getOffersAssignedToCategory(channelRecId, productRecId, activeDate);
            offerIdsCont += priceDiscountLine.parmCatalogRefRecId() ?
                             RetailPriceListHelper::getOffersDirectlyAssignedToCategoryAndCatalog(priceDiscountLine.parmCatalogRefRecId(), productRecId, activeDate) : '';
            offerIdsCont += RetailPriceListHelper::getOffersDirectlyAssignedToProduct(channelRecId, productRecId, activeDate);
            offerIdsCont += priceDiscountLine.parmCatalogRefRecId() ?
                             RetailPriceListHelper::getOffersDirectlyAssignedToProductAndCatalog(priceDiscountLine.parmCatalogRefRecId(), productRecId, activeDate) : '';

            // Get promotional offers.
            promotionsCont += RetailPriceListHelper::getOffersAssignedToCategory(channelRecId, productRecId, activeDate, true);
            promotionsCont += priceDiscountLine.parmCatalogRefRecId() ?
                               RetailPriceListHelper::getOffersDirectlyAssignedToCategoryAndCatalog(priceDiscountLine.parmCatalogRefRecId(), productRecId, activeDate, true) : '';
            promotionsCont += RetailPriceListHelper::getOffersDirectlyAssignedToProduct(channelRecId, productRecId, activeDate, true);
            promotionsCont += priceDiscountLine.parmCatalogRefRecId() ?
                               RetailPriceListHelper::getOffersDirectlyAssignedToProductAndCatalog(priceDiscountLine.parmCatalogRefRecId(), productRecId, activeDate, true) : '';

            // Separate offers with comma and store them in a variable.
            for (int i=1; i <= conlen(offerIdsCont); i++)
            {
                if (conpeek(offerIdsCont,i))
                {
                    discountOffers += (discountOffers ? ', ' : '') + conpeek(offerIdsCont,i);
                }
            }

            // Separate promotional offers with comma and store them in a variable.
            for (int i=1; i <= conlen(promotionsCont); i++)
            {
                if (conpeek(promotionsCont,i))
                {
                    promotionOffers += (promotionOffers ? ', ' : '') + conpeek(promotionsCont,i);
                }
            }

            tmpRetailPriceListDisplayValues.DiscountOffers = discountOffers;
            tmpRetailPriceListDisplayValues.Promotions = promotionOffers;

            listOfDisplayDetails.add(tmpRetailPriceListDisplayValues);
        }

        ttsbegin;
        listOfDisplayDetails.insertDatabase();
        ttscommit;

        return tmpRetailPriceListDisplayValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get item price.
    /// </summary>
    /// <param name = "_itemId">The item id.</param>
    /// <param name = "_moduleType">The module type.</param>
    /// <param name = "_retailChannelRecordId">The channel record id.</param>
    /// <param name = "_currencyMode">The currency mode.</param>
    /// <returns>A price.</returns>
    [Replaceable(true)]
    protected Price getItemPrice(ItemId _itemId,
        ModuleInventPurchSales _moduleType,
        RetailChannelRecId _retailChannelRecordId,
        CurrencyCode _currencyMode)
    {
        date previousDate = activeDate - 1;
        date nextDate = activeDate + 1;

        InventTableModule inventModule = InventTableModule::find(_itemId, _moduleType);

        RetailChannelItemPriceAgreement priceAgreement;
        select firstonly priceAgreement where priceAgreement.RetailChannel == _retailChannelRecordId &&
            priceAgreement.Currency == _currencyMode &&
            priceAgreement.UNITID == inventModule.UNITID &&
            priceAgreement.ItemId == _itemId &&
            (priceAgreement.FromDate < nextDate || priceAgreement.FromDate == defaultDate) &&
            (priceAgreement.ToDate > previousDate || priceAgreement.ToDate == defaultDate);

        if (!priceAgreement)
        {
            return inventModule.Price;
        }

        return priceAgreement.Amount ? priceAgreement.Amount : inventModule.Price;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>