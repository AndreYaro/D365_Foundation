<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentCleanupForSalesOrderInvoiceAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
[DataMaintenanceFeatureClass(classstr(SourceDocumentCleanupForSalesOrderInvoiceFlight))]
internal final class SourceDocumentCleanupForSalesOrderInvoiceAction implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionScheduleParameters
{
    private const int FixWindowMonths = SourceDocumentCleanupForSalesOrderTaskHelper::FixWindowMonths;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@SourceDocumentAccountingFramework:SourceDocumentCleanupForSalesOrderInvoiceActionCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@SourceDocumentAccountingFramework:SourceDocumentCleanupForSalesOrderInvoiceActionDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::General;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(SourceDocumentCleanupForSalesOrderInvoiceTask));
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return FeatureStateProvider::isFeatureEnabled(CustSourceDocumentDataGenerationDisableFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        DataMaintenanceOpportunityResult scanResult = DataMaintenanceOpportunityResult::construct();
        scanResult.parmOpportunityFound(this.hasUnnecessarySourceDocumentHeadersForSalesOrderInvoice());

        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUnnecessarySourceDocumentHeadersForSalesOrderInvoice</Name>
				<Source><![CDATA[
    private boolean hasUnnecessarySourceDocumentHeadersForSalesOrderInvoice()
    {
        SourceDocumentHeader sourceDocumentHeader;
        CustInvoiceJour custInvoiceJour;

        if (FeatureStateProvider::isFeatureEnabled(CustSourceDocumentDataGenerationDisableFeature::instance()))
        {
            select firstonly crosscompany RecId from sourceDocumentHeader
                where sourceDocumentHeader.SourceRelationType == tableNum(CustInvoiceJour)
            join SourceDocumentHeader, SalesId, SalesType, CreatedDateTime from custInvoiceJour
                where custInvoiceJour.SourceDocumentHeader == sourceDocumentHeader.RecId
                && custInvoiceJour.SalesId != ''
                && custInvoiceJour.SalesType == SalesType::Sales
                && custInvoiceJour.CreatedDateTime <= DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -FixWindowMonths);

            return sourceDocumentHeader.RecId != 0;
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionScheduleParameters scheduleParameters()
    {
        DataMaintenanceActionScheduleParameters params = new DataMaintenanceActionScheduleParameters();
        params.Frequency = DataMaintenanceActionScheduleFrequency::EveryTwoHour;
        return params;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>