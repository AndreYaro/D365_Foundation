<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentSplit_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntgrExportDocumentSplit_CN</c> handles the splitting of export documents.
/// </summary>
public class TaxIntgrExportDocumentSplit_CN extends TaxIntgrExportDocumentOperator_CN
{
    TaxIntgrExportDocumentSplitCalc_CN  exportDocumentSplitCalc;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
        protected void calculate(RefRecId _sourceRecId)
    {
        //calculate is done in passed on split calculaton
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExportDocumentSource</Name>
				<Source><![CDATA[
        protected boolean checkExportDocumentSource(TaxIntgrExportDocumentSource_CN _exportDocumentSource)
    {
        boolean result = true;

        if (_exportDocumentSource.isWithExportDocumentOperation(TaxIntgrExportDocumentOperationType_CN::Split)
            || _exportDocumentSource.isWithExportDocumentOperation(TaxIntgrExportDocumentOperationType_CN::Merge)
            || !_exportDocumentSource.isOverAmountLimit())
        {
            result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOperation</Name>
				<Source><![CDATA[
    protected void doOperation(RefRecId _sourceRecId, boolean _isGenerateFromOriginalDoc = false)
    {
        List                                listOfSourceRecIdLocal;
        RecordInsertList                    exportDocumentLineInsertList;
        RecordInsertList                    operationInsertList;

        exportDocumentLineInsertList = new RecordInsertList(tableNum(TaxIntgrExportDocumentLine_CN));
        operationInsertList = new RecordInsertList(tableNum(TaxIntgrExportDocumentOperation_CN));

        listOfSourceRecIdLocal = new List(Types::Int64);
        listOfSourceRecIdLocal.addEnd(_sourceRecId);
        TaxIntgrExportDocumentManager_CN::createExportDocumentFromMap(
            listOfSourceRecIdLocal,
            exportDocumentSplitCalc.getExportDocMap(),
            TaxIntgrExportDocumentOperationType_CN::Split,
            exportDocumentLineInsertList,
            operationInsertList,
            _isGenerateFromOriginalDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationType</Name>
				<Source><![CDATA[
        public TaxIntgrExportDocumentOperationType_CN getOperationType()
    {
        return TaxIntgrExportDocumentOperationType_CN::Split;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidateOnEachDocument</Name>
				<Source><![CDATA[
        public boolean isValidateOnEachDocument()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportDocumentSplitCalc</Name>
				<Source><![CDATA[
        public TaxIntgrExportDocumentSplitCalc_CN parmExportDocumentSplitCalc(TaxIntgrExportDocumentSplitCalc_CN _exportDocumentSplitCalc = exportDocumentSplitCalc)
    {
        exportDocumentSplitCalc = _exportDocumentSplitCalc;
        return exportDocumentSplitCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitBasedOnCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform split based on calculation instance.
    /// </summary>
    /// <param name="_splitCalc">
    /// The calculation instance.
    /// </param>
    public static void splitBasedOnCalc(TaxIntgrExportDocumentSplitCalc_CN  _splitCalc)
    {
        TaxIntgrExportDocumentSplit_CN::splitBasedOnCalcData([_splitCalc.pack(), _splitCalc.packCalculatedDataMap()]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitBasedOnCalcData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform split based on calculated data pack.
    /// </summary>
    /// <param name="_dataPack">
    /// The calculated data pack.
    /// </param>
    private static void splitBasedOnCalcData(container _dataPack)
    {
        TaxIntgrExportDocumentSplitCalc_CN  splitCalc;
        TaxIntgrExportDocumentSplit_CN      exportDocumentSplit;

        splitCalc = TaxIntgrExportDocumentSplitCalc_CN::constructFromContainer(_dataPack);

        exportDocumentSplit = TaxIntgrExportDocumentOperator_CN::construct(TaxIntgrExportDocumentOperationType_CN::Split);
        exportDocumentSplit.setSourceRecId(splitCalc.parmExportDocSourceId());
        exportDocumentSplit.parmExportDocumentSplitCalc(splitCalc);
        exportDocumentSplit.operation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitExportDocumentAuto</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform split automatically.
    /// </summary>
    /// <param name="_exportDocumentSourceRecId">
    /// The export document source record id.
    /// </param>
    public static void splitExportDocumentAuto(RefRecId _exportDocumentSourceRecId, boolean _isGenerateFromOriginalDoc = false)
    {
        TaxIntgrExportDocumentSplitCalc_CN  splitCalc;
        TaxIntgrExportDocumentSplit_CN      exportDocumentSplit;

        splitCalc = TaxIntgrExportDocumentSplitCalc_CN::construct(_exportDocumentSourceRecId);
        if (splitCalc.splitAuto())
        {
            exportDocumentSplit = TaxIntgrExportDocumentOperator_CN::construct(TaxIntgrExportDocumentOperationType_CN::Split);
            exportDocumentSplit.setSourceRecId(_exportDocumentSourceRecId);
            exportDocumentSplit.parmExportDocumentSplitCalc(splitCalc);
            exportDocumentSplit.operation(_isGenerateFromOriginalDoc);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>