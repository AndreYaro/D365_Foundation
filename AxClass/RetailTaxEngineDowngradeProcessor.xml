<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTaxEngineDowngradeProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

class RetailTaxEngineDowngradeProcessor extends RunBaseBatch implements BatchRetryable
{
    // The container contains the elements that aren't supported in AX2012 Retail
    private const container UnsupportedElements = ['Prerequisites'];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RetailTaxEngineDowngradeProcessor downgradeProcessor;

        downgradeProcessor = new RetailTaxEngineDowngradeProcessor();

        if (downgradeProcessor.prompt())
        {
            downgradeProcessor.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.populateLegacyERSolutionData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLegacyERSolutionData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the legacy ER solution data for AX2012 "downgrade" N-1 compatiblity.
    /// </summary>
    private void populateLegacyERSolutionData()
    {
        ERSolutionTable solutionTable;
        ERSolutionVersionTable solutionVersionTable;
        container solutionTableProcessed;

        ttsbegin;
        while select forupdate solutionVersionTable
            where solutionVersionTable.Status == ERSolutionVersionStatus::Completed
            join solutionTable
            where solutionTable.RecId == solutionVersionTable.Solution
                && (solutionTable.SolutionTypeId == TaxEngineConfigurationConstants::TaxableDocModelConfigGUID
                    || solutionTable.SolutionTypeId == TaxEngineConfigurationConstants::TaxConfigGUID)
        {
            if (!conFind(solutionTableProcessed, solutionTable.RecId))
            {
                // Converts the solution type GUID to the legacy solution type
                solutionTable.selectForUpdate(true);
                if (solutionTable.SolutionTypeId == TaxEngineConfigurationConstants::TaxableDocModelConfigGUID)
                {
                    solutionTable.SolutionTypeLegacy = ERSolutionTypeLegacy::TaxableDocument;
                }
                else
                {
                    solutionTable.SolutionTypeLegacy = ERSolutionTypeLegacy::TaxDocument;
                }

                solutionTable.update();

                solutionTableProcessed += solutionTable.RecId;
            }

            ERSolutionVersion solutionVersionObject;

            // Serializes the solution version to XML and updates it into the legacy XML field.
            ERXmlSerializer serializer = new ERXmlSerializer(ERSessionFactory::getSession());
            serializer.parmWithBinaryData(true);
            serializer.ParmIdentificationStrategy(new ERObjectIdentificationStrategyGuid());
            
            solutionVersionObject = solutionVersionTable.toObject(serializer.parmIdentificationStrategy()) as ERSolutionVersion;
            serializer.ParmOwnership(solutionVersionObject.createOwnershipForExport());

            XML erSolutionVersionXML = serializer.SerializeToXml(solutionVersionObject);

            solutionVersionTable.XmlLegacy = this.removeUnsupportedElement(erSolutionVersionXML);
            solutionVersionTable.update();

            // Populates the legacy table ERSolutionVersionComponentTableLegacy
            var componentEnumerator = solutionVersionObject.getEnumerator();
            while (componentEnumerator.moveNext())
            {
                ERSolutionVersionComponentTableLegacy componentTable;
                var component = componentEnumerator.current();
                ERVersion erVersion = component as ERVersion;

                if (component is ERDataModelVersion)
                {
                    ERDataModelVersion dataModelVersion = component as ERDataModelVersion;
                    ERDataModel dataModel = dataModelVersion.parmModel();

                    componentTable.SolutionVersion = solutionVersionTable.RecId;
                    componentTable.ComponentVersionNumber = dataModelVersion.parmNumber();
                    componentTable.ComponentGUID = ERDataModelTable::guidByName(dataModel.parmName());
                    componentTable.ComponentName = dataModel.parmName();
                    componentTable.ComponentType = ERSolutionComponentTypeLegacy::DataModel;

                    if (!ERSolutionVersionComponentTableLegacy::findBySolutionVersionAndGUID(solutionVersionTable.RecId, componentTable.ComponentGUID))
                    {
                        componentTable.insert();
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeUnsupportedElement</Name>
				<Source><![CDATA[
    private XML removeUnsupportedElement(XML _xml)
    {
        XmlDocument xmlDocument = XmlDocument::newXml(_xml);
        XmlNode root = xmlDocument.documentElement();

        for (int i = 1; i <= conLen(UnsupportedElements); i++)
        {
            XmlElement unsupportedElement = root.getNamedElement(conPeek(UnsupportedElements, i));

            if (unsupportedElement)
            {
                root.removeChild(unsupportedElement);
            }
        }

        return xmlDocument.outerXml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@RetailGTE:ProcessTaxConfigForN1";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>