<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSWaveTableForm</c> class provides business logic for the <c>WHSWaveTable</c> form.
/// </summary>
public class WHSWaveTableForm extends WHSWaveTableFormBase
{
    private str     shipmentIds;
    private str     waveIds;
    private boolean onlyOneWave;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWaveTableForm construct()
    {
        return new WHSWaveTableForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        onlyOneWave = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlyOneWave</Name>
				<Source><![CDATA[
    public boolean onlyOneWave()
    {
        return onlyOneWave;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveIds</Name>
				<Source><![CDATA[
    public str parmWaveIds(str _waveIds = waveIds)
    {
        waveIds = _waveIds;

        return waveIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentIds</Name>
				<Source><![CDATA[
    public str parmShipmentIds(str _shipmentIds = shipmentIds)
    {
        shipmentIds = _shipmentIds;

        return shipmentIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
	/// Opens wave form depending on the wave template.
	/// </summary>
	/// <param name="_common">
	/// Wave record.
	/// </param>
	/// <returns>
	/// True if a form is opened, false otherwise.
	/// </returns>
    public boolean run(Common _common)
    {
        boolean         ret;
        Args            args = new Args();
        WHSWaveTable    waveTable = _common as WHSWaveTable;

        switch (waveTable.waveTemplate().WaveTemplateType)
        {
            case WHSWaveTemplateType::Production:
                args.record(_common);
                MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(WHSProdWaveTable), MenuItemType::Display);
                menuFunction.run(args);
                ret = true;
                break;
            case WHSWaveTemplateType::Kanban:
                args.record(_common);
                menuFunction = new MenuFunction(menuItemDisplayStr(WHSKanbanWaveTable), MenuItemType::Display);
                menuFunction.run(args);
                ret = true;
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWaveId</Name>
				<Source><![CDATA[
    public void setWaveId(WHSLoadId _loadId)
    {
        WHSWaveTable        whsWaveTable;
        WHSWaveLine         whsWaveLine;
        str                 waveIdToAdd = SysQuery::valueEmptyString();
        int                 waveCount;

        if (_loadId)
        {
            while select WaveId from whsWaveTable
                exists join whsWaveLine
                    where whsWaveTable.WaveID == whsWaveLine.WaveId
                          && whsWaveLine.LoadId == _loadId
            {
                if (waveIdToAdd == SysQuery::valueEmptyString())
                {
                    waveIdToAdd = whsWaveTable.WaveId;
                }
                else
                {
                    waveIdToAdd = waveIdToAdd + ',' + whsWaveTable.WaveId;
                }
                ++ waveCount;
            }

            this.parmWaveIds(waveIdToAdd);
        }

        onlyOneWave = waveCount == 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
	/// Sets shipment ids of the load to current instance.
	/// </summary>
	/// <param name="_loadId">
	/// Load that contains shipments.
	/// </param>
    public void setShipmentId(WHSLoadId _loadId)
    {
        WHSShipmentTable    shipmentTable;
        str                 shipmentIdToAdd;

        if (_loadId)
        {
            while select ShipmentId from shipmentTable
                where shipmentTable.LoadId == _loadId
            {
                shipmentIdToAdd = this.parmShipmentIds() + shipmentTable.ShipmentId + ',';
                this.parmShipmentIds(shipmentIdToAdd);
            }

            if (!shipmentIdToAdd)
            {
                this.parmShipmentIds(SysQuery::valueEmptyString());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Load Ids for the shipments associated with the wave.
    /// </summary>
    /// <param name="_dataSource">
    /// A Wave Table datasource containing the highlighted records.
    /// </param>
    /// <returns>
    /// A string of Load Ids separated by a comma.
    /// </returns>
    public static str getLoadIds(FormDataSource _dataSource)
    {
        str          ids;
        WHSWaveTable rec;
        WHSWaveLine  waveLine;

        for (rec = _dataSource.getFirst(true) ? _dataSource.getFirst(true) : _dataSource.cursor();
             rec;
             rec = _dataSource.getNext())
        {
            while select LoadId, WaveId from waveLine
                where waveLine.WaveId == rec.WaveId
            {
                ids = ids ? ids + ',' : ids;
                ids += waveLine.LoadId;
            }
        }

        return ids;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Shipment Ids for the shipments associated with the wave.
    /// </summary>
    /// <param name="_dataSource">
    /// A Wave Table datasource containing the highlighted records.
    /// </param>
    /// <returns>
    /// A string of Shipment Ids separated by a comma.
    /// </returns>
    public static str getShipmentIds(FormDataSource _dataSource)
    {
        str          ids;
        WHSWaveTable rec;
        WHSWaveLine  waveLine;

        for (rec = _dataSource.getFirst(true) ? _dataSource.getFirst(true) : _dataSource.cursor();
             rec;
             rec = _dataSource.getNext())
        {
            while select ShipmentId, WaveId from waveLine
                where waveLine.WaveId == rec.WaveId
            {
                ids = ids ? ids + ',' : ids;
                ids += waveLine.ShipmentId;
            }
        }

        return ids;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>