<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceGetInvoiceMatchStatusAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[DataContract]
[SysCopilotChatGlobalAction]
[SysCopilotChatActionDefinition(
    identifierStr(MS.ServerForm.VendInvoiceCopilot.CheckMatchStatus),
    'Check invoice match status',
    'Check the product receipt matching status of the given vendor invoice',
    'VendInvoiceGetInvoiceMatchStatusAction',
    MenuItemType::Action)]
public final class VendInvoiceGetInvoiceMatchStatusAction extends SysCopilotChatAction
{
    private const str metricNamespace = 'VendorInvoiceCopilot';
    private const str actionName = 'MS.ServerForm.VendInvoiceCopilot.CheckMatchStatus';
    private str invoiceId;
    private str vendAccount = '';
    private int productReceiptToMatch = 0;
    // Plugin does not support Enum type, use int to represent vendor invoice exception status
    private int invoiceStatus = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    [DataMember('invoiceId'),
    SysCopilotChatActionInputParameter('Vendor invoice number of the given invoice', true)]
    public str parmInvoiceId(str _vendInvoiceId = invoiceId)
    {
        invoiceId = _vendInvoiceId;
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    [DataMember('vendAccount'),
    SysCopilotChatActionOutputParameter('Vendor account number of the given vendor invoice')]
    public str parmVendAccount(str _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;
        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductReceiptToMatch</Name>
				<Source><![CDATA[
    [DataMember('productReceiptToMatch'),
    SysCopilotChatActionOutputParameter('Number of product receipts that can be matched to the vendor invoice')]
    public int parmProductReceiptToMatch(int _productReceiptToMatch = productReceiptToMatch)
    {
        productReceiptToMatch = _productReceiptToMatch;
        return productReceiptToMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceStatus</Name>
				<Source><![CDATA[
    [DataMember('invoiceStatus'),
    SysCopilotChatActionOutputParameter('Exception status of the given vendor invoice')]
    public int parmInvoiceStatus(int _invoiceStatus = invoiceStatus)
    {
        invoiceStatus = _invoiceStatus;
        return invoiceStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    public void executeAction(SysCopilotChatActionDefinitionAttribute _actionDefinition, object _context)
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(VendInvoiceGetInvoiceMatchStatusAction));

        using (var context = logger.activityContext(actionName, metricNamespace))
        {
            if (VendInvoiceCopilotMatchProductReceiptFlight::instance().isEnabled())
            {
                VendInvoiceInfoTable vendInvoiceInfoTable;
                VendInvoiceInfoLine vendInvoiceInfoLine;
                VendInvoiceInfoSubLine vendInvoiceInfoSubline;
                VendPackingSlipTrans vendPackingSlipTrans;
                VendPackingSlipJour vendPackingSlipJour;
                VendInvoiceInfoSubLineSumAll vendInvoiceInfoSublineSumAll;
                PurchLine purchLine;
                VendInvoiceCopilotExceptionStatus localInvoiceStatus = VendInvoiceCopilotExceptionStatus::NoException;

                select count(RecId) from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.Num == this.parmInvoiceId()
                        && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;
        
                // If there is available pending vendor invoice to match
                if (vendInvoiceInfoTable.RecId == 1)
                {
                    select ParmId, TableRefId, InvoiceAccount from vendInvoiceInfoTable
                        where vendInvoiceInfoTable.Num == this.parmInvoiceId()
                            && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;

                    this.parmVendAccount(vendInvoiceInfoTable.InvoiceAccount);

                    // Invoice is in-use
                    if (vendInvoiceInfoTable.ParmId != '')
                    {
                        localInvoiceStatus = VendInvoiceCopilotExceptionStatus::InvoiceInProcess;
                    }
                    else
                    {
                        while select vendInvoiceInfoLine
                            where vendInvoiceInfoLine.ReceiveNow != 0
                                && vendInvoiceInfoLine.PurchLineRecId != 0
                                && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                        {
                            if (VendInvoiceInfoLine.checkIfQuantityMatch() == LastMatchVarianceOptions::Warning)
                            {
                                localInvoiceStatus = VendInvoiceCopilotExceptionStatus::QtyMatchingError;
                                break;
                            }
                        }
                        // Invoice contains PR matching validation error
                        if (localInvoiceStatus == VendInvoiceCopilotExceptionStatus::QtyMatchingError)
                        {
                            select count(RecId) from vendPackingSlipJour
                                join vendPackingSlipTrans
                                group by vendPackingSlipJour.PackingSlipId
                                    where vendPackingSlipJour.RecId == vendPackingSlipTrans.VendPackingSlipJour
                                join vendInvoiceInfoLine
                                    where vendInvoiceInfoLine.InventTransId == vendPackingSlipTrans.InventTransId
                                        && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                                        && vendInvoiceInfoLine.ReceiveNow != 0
                                        && vendInvoiceInfoLine.PurchLineRecId != 0
                                        && vendPackingSlipTrans.FullyMatched == NoYes::No
                                        && vendPackingSlipTrans.Qty * vendInvoiceInfoLine.ReceiveNow > 0
                                    notexists join vendInvoiceInfoSubline
                                        where vendInvoiceInfoSubline.LineRefRecId == vendInvoiceInfoLine.RecId
                                            && vendInvoiceInfoSubline.JournalRefRecId == vendPackingSlipTrans.RecId;

                            this.parmProductReceiptToMatch(vendPackingSlipJour.RecId);
                        }
                    }
                }
                else if (vendInvoiceInfoTable.RecId > 1)
                {
                    localInvoiceStatus = VendInvoiceCopilotExceptionStatus::DuplicatePending;
                }
                else
                {
                    select firstonly RecId from vendInvoiceInfoTable
                        where vendInvoiceInfotable.Num == this.parmInvoiceId()
                            && vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed;
            
                    localInvoiceStatus = vendInvoiceInfoTable.RecId ?
                        VendInvoiceCopilotExceptionStatus::InvoicePosted : VendInvoiceCopilotExceptionStatus::InvoiceNotExists;
                }

                this.parmInvoiceStatus(enum2int(localInvoiceStatus));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>