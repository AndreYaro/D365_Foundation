<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransTaxInformationUIControllerProdTable_IN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UI controller class for controlling all Production Order on new tax information UI and transaction update.
/// </summary>
[ExtensionOf(classstr(TransTaxInformationUIControllerProdTable))]
final class TransTaxInformationUIControllerProdTable_IN_Extension
{
    #ISOCountryRegionCodes
    internal boolean hasExciseRecordType = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the preparative logics to set the UI and data on Tax information form.
    /// </summary>
    public void run()
    {
        next run();
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
			ttsbegin;
			transTaxInformation.selectForUpdate(true);
			transTaxInformation.ExciseType = ExciseType_IN::Manufacturer;
            TransTaxInformationHelper::initFromTaxInformation(transTaxInformation);
			transTaxInformation.update();
			ttscommit;
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToVATCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all VAT tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToVATCtrls()
    {
        next setVisibleToVATCtrls();
        transTaxInformationVATCtrl.parmVatTab().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToServiceTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all service tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToServiceTaxCtrls()
    {
        next setVisibleToServiceTaxCtrls();
        transTaxInformationServiceTaxCtrl.parmServiceTaxTab().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToExciseCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all excise tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToExciseCtrls()
    {
        next setVisibleToExciseCtrls();
        transTaxInformationExciseCtrl.parmExciseRecordType().visible(hasExciseRecordType);
        transTaxInformationExciseCtrl.parmCENVATCreditAvailed().visible(false);
        transTaxInformationExciseCtrl.parmConsignment().visible(false);
        transTaxInformationExciseCtrl.parmDirectSettlement().visible(false);
        transTaxInformationExciseCtrl.parmIsScrap().visible(false);
        transTaxInformationExciseCtrl.parmDisposalType().visible(false);
        transTaxInformationExciseCtrl.parmDSA().visible(TaxExciseTypeController_IN::isDSAVisible(this.parmTaxModelTaxable().getItemId(), sourceTable.DataAreaId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToWithholdTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all withholding tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToWithholdTaxCtrls()
    {
        next setVisibleToWithholdTaxCtrls();
        transTaxInformationTaxWithholdingCtrl.parmTaxWithholdingTab().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToCustomsCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all customers tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToCustomsCtrls()
    {
        next setVisibleToCustomsCtrls();
        transTaxInformationCustomsCtrl.parmCustomsTab().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToSalesTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to sales sales tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToSalesTaxCtrls()
    {
        next setVisibleToSalesTaxCtrls();
        transTaxInformationSalesTaxCtrl.parmSalesTaxTab().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToExciseCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set enabled or disabled to all Excise controls on Tax information form.
    /// </summary>
    protected void setEnabledToExciseCtrls()
    {
        next setEnabledToExciseCtrls();
        transTaxInformationExciseCtrl.parmExciseType().enabled(false);
        transTaxInformationExciseCtrl.parmExciseTarriffCodes().enabled(TaxParameters::find().Excise_IN);
        transTaxInformationExciseCtrl.parmDSA().enabled(
            TaxExciseTypeController_IN::isDSAAllowed(
                transTaxInformation.ExciseType,
                transTaxInformation.ExciseRecordType,
                this.parmTaxModelTaxable().getItemId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToGSTTCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all GST tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToGSTTCtrls()
    {
        next setVisibleToGSTTCtrls();
        transTaxInformationGSTCtrl.parmGSTTab().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatoryExciseTariffCode</Name>
				<Source><![CDATA[
    protected void isMandatoryExciseTariffCode()
    {
        boolean     mandatory;

        mandatory   = (transTaxInformation.ExciseDSA == NoYes::Yes)
                       || (transTaxInformation.ExciseRecordType != ExciseRecordType_IN::None);

        transTaxInformationExciseCtrl.parmExciseTarriffCodes().mandatory(mandatory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedOfExcise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to excise.
    /// </summary>
    /// <param name="_formComboBoxControl">
    /// The form comboBox control.
    /// </param>
    /// <returns>
    /// Returns true if the control is modified, otherwise false
    /// </returns>
    protected boolean modifiedOfExcise(FormComboBoxControl _formComboBoxControl)
    {
        boolean ret;

        next modifiedOfExcise(_formComboBoxControl);

        if (ret)
        {
            this.isMandatoryExciseTariffCode();
            if (transTaxInformationExciseCtrl.parmDSA().visible())
            {
                TransTaxInformationHelper::updateExciseDSA(transTaxInformation, this.parmTaxModelTaxable().getItemId());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedOfExciseDSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to Excise field DSA.
    /// </summary>
    /// <param name = "_excisDSA">The form data source field.</param>
    protected void modifiedOfExciseDSA(FormDataObject _excisDSA)
    {
        this.isMandatoryExciseTariffCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes UI controls and data source for Tax information form.
    /// </summary>
    protected void init()
    {
        hasExciseRecordType = sourceTable.TableId == tableNum(ProdJournalBOM);
        next init();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>