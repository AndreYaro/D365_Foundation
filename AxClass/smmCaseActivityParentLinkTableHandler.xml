<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmCaseActivityParentLinkTableHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles events for <c>smmActivityParentLinkTable</c>.
/// </summary>
class smmCaseActivityParentLinkTableHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>smmActivityParentLinkTable_Pre_delete</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(smmActivityParentLinkTable), tableMethodStr(smmActivityParentLinkTable, delete))]
    public static void smmActivityParentLinkTable_Pre_delete(XppPrePostArgs _args)
    {
        smmActivityParentLinkTable linkTable = _args.getThis();
        boolean clearBack = _args.getArg('_clearBack');

        if (linkTable.PrimaryLink && clearBack)
        {
            switch (linkTable.ParentType)
            {
                case (smmActivityParentType::Campaign):
                    smmCampaignTable smmCampaignTable = smmCampaignTable::findRec(linkTable.RefRecId, true);

                    if (smmCampaignTable && smmCampaignTable.CampaignFollowUpActivity == linkTable.ActivityNumber)
                    {
                        // Clear link on campaign
                        smmCampaignTable.CampaignFollowUpActivity = '';
                        smmCampaignTable.update(false);
                    }

                    // Is the activity linked to a campaign target?
                    smmCampaignSelection smmCampaignSelection;
                    select firstonly forupdate smmCampaignSelection where smmCampaignSelection.ActivityNumber == linkTable.ActivityNumber;

                    if (smmCampaignSelection  && smmCampaignSelection.ActivityNumber == linkTable.ActivityNumber)
                    {
                        // Clear link on campaign target
                        smmCampaignSelection.ActivityNumber = '';
                        smmCampaignSelection.update(false);
                    }
                    break;
                case (smmActivityParentType::CallList):
                    smmTMCallListGroup          smmTMCallListGroup;

                    select forupdate firstonly smmTMCallListGroup where smmTMCallListGroup.RecId == linkTable.RefRecId;

                    if (smmTMCallListGroup && smmTMCallListGroup.ActivityNumber == linkTable.ActivityNumber)
                    {
                        // Clear link on call list
                        smmTMCallListGroup.ActivityNumber = '';
                        smmTMCallListGroup.update(false);
                    }

                    // Is the activity linked to a call list target
                    smmTMCallListTable          smmTMCallListTable;
                    select firstonly forupdate smmTMCallListTable where smmTMCallListTable.CallbackActivityId == linkTable.ActivityNumber;

                    if (smmTMCallListTable && smmTMCallListTable.CallbackActivityId == linkTable.ActivityNumber)
                    {
                        // Clear link on call list target
                        smmTMCallListTable.CallbackActivityId = '';
                        smmTMCallListTable.update(false);
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivityParentLinkTable_Post_insert</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(smmActivityParentLinkTable), tableMethodStr(smmActivityParentLinkTable, insert))]
    public static void smmActivityParentLinkTable_Post_insert(XppPrePostArgs args)
    {
        smmActivityParentLinkTable linkTable = args.getThis();

        if (linkTable.ParentType == smmActivityParentType::Organization
            || linkTable.ParentType == smmActivityParentType::Person)
        {
            smmTransLog::initTrans(linkTable, smmLogAction::insert);
        }

        smmActivities smmActivities;
        smmActivities = smmActivities::find(linkTable.ActivityNumber,true);

        // Check the case log condition if the usermemo is not empty
        if (smmActivities.RecId != 0 && smmActivities.UserMemo != "")
        {
            if (linkTable.ParentType == smmActivityParentType::Case)
            {
                smmSourceType::checkAndCreateCaseLogForSourceType(smmActivities, linkTable);
            }
            else
            {
                smmSourceType::checkAndCreateCaseLogForSourceType(smmActivities);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>