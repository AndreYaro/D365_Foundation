<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransOnAccTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransOnAccTrans extends ProjTransOnAcc
{
    ProjOnAccTrans  projOnAccTrans;

    boolean         getCanBeInvoiced;
    boolean         canBeInvoiced;
    boolean         calcTransTurnover;
    boolean         getVoucherInvoice;
    AmountCur       transTurnover;
    boolean         calcLedgerSalesAmountMST;
    AmountMST       ledgerSalesAmountMST;
    Voucher         voucherInvoice;

    ProjOnAccTransTaxExtensionIN projOnAccTransTaxExtensionIN;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjusteble</Name>
				<Source><![CDATA[
    public boolean adjusteble()
    {
        ProjOnAccTransSale   projOnAccTransSale;

        if (projOnAccTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
        {
            return false;
        }

        select firstonly projOnAccTransSale
        where projOnAccTransSale.TransId == projOnAccTrans.TransId &&
            projOnAccTransSale.TransStatus != ProjTransStatus::Posted;
        if (projOnAccTransSale)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return projOnAccTrans.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Assessable value for this transaction.
    /// </summary>
    /// <returns>
    /// Assessable value for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Amountcur assessableValue_IN()
    {
        return projOnAccTransTaxExtensionIN.AssessableValueTransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        ProjOnAccTransSale   projOnAccTransSale;
        boolean             ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccTrans)))
        {
            if (!getCanBeInvoiced)
            {
                getCanBeInvoiced = true;
                while select projOnAccTransSale
                    where projOnAccTransSale.TransId == this.transId()
                {
                    canBeInvoiced = ProjTrans::newProjOnAccTransSale(projOnAccTrans, projOnAccTransSale).canBeInvoiced(_chargeable);
                    if (canBeInvoiced)
                    {
                        break;
                    }
                }
            }

            ret = canBeInvoiced;
        }
        else
        {
            ret = super(_chargeable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTransStatusBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a transaction can be invoiced based on its status.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    public boolean canTransStatusBeInvoiced(
    boolean _chargeable  = false)
    {
        boolean ret = false;

        switch (this.transStatus())
        {
            case ProjTransStatus::NoStatus:
                ret = false;
                break;

            case ProjTransStatus::Registered:
                ret = true;
                break;

            case ProjTransStatus::Posted:
                ret = false;
                break;

            case ProjTransStatus::InvoiceProposal:
                if (_chargeable)
                {
                    ret = true;
                }
                else
                {
                    ret = false;
                }
                break;

            case ProjTransStatus::Invoiced:
                ret = false;
                break;

            case ProjTransStatus::MarkedCreditnote:
                ret = true;
                break;

            case ProjTransStatus::CreditnoteProposal:
                ret = false;
                break;

            case ProjTransStatus::Estimated:
                ret = false;
                break;

            case ProjTransStatus::Eliminated:
                ret = false;
                break;

            case ProjTransStatus::Adjusted:
                ret = false;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projOnAccTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for sales amounts that are reported by the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projOnAccTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return projOnAccTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction is invoiceable.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public boolean invoiceable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction has been invoiced.
    /// </summary>
    /// <returns>
    /// true if this transaction has been invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public  boolean invoiced()
    {
        ProjOnAccTransSale  projOnAccTransSale;
        boolean             ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccTrans)))
        {
            while select projOnAccTransSale
            where projOnAccTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjOnAccTransSale(projOnAccTrans, projOnAccTransSale).invoiced();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount invoiced in default currency for this transaction.
    /// </summary>
    /// <returns>
    /// The amount invoiced.
    /// </returns>
    /// <remarks>
    /// If the transaction has not been invoiced, returns 0.
    /// </remarks>
    public AmountMST invoicedMST()
    {
        AmountMST           ret;
        ProjTransPosting    projTransPosting;

        if (this.invoiced() && projOnAccTrans.projInvoiceId())
        {
            while select AmountMst
            from projTransPosting
                where projTransPosting.TransId == projOnAccTrans.TransId
            {
                ret -= projTransPosting.AmountMst;
            }
        }
        else
        {
            ret = this.amountMST();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the invoice ID of the invoice for this transaction.
    /// </summary>
    /// <returns>
    /// The invoice ID of the invoice for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjInvoiceId invoiceId()
    {
        ProjOnAccTransSale  projOnAccTransSale;
        ProjInvoiceId       ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccTrans)))
        {
            while select projOnAccTransSale
            where projOnAccTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjOnAccTransSale(projOnAccTrans, projOnAccTransSale).invoiceId();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to be posted to the general ledger.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountMST ledgerSalesAmountMST()
    {
        AmountMST           ret;
        ProjOnAccTransSale  projOnAccTransSale;
        ProjTrans           projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccTrans)))
        {
            if (!calcLedgerSalesAmountMST)
            {
                calcLedgerSalesAmountMST = true;
                while select projOnAccTransSale
                where projOnAccTransSale.TransId == projOnAccTrans.TransId
                {
                    projTransSale = ProjTrans::newProjOnAccTransSale(projOnAccTrans, projOnAccTransSale);
                    ledgerSalesAmountMST += projTransSale.ledgerSalesAmountMST();
                }
            }

            ret = ledgerSalesAmountMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Maximum retail price value for this transaction.
    /// </summary>
    /// <returns>
    /// Maximum retail price value for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public MaximumRetailPrice_IN maximumRetailPrice_IN()
    {
        return projOnAccTransTaxExtensionIN.MaximumRetailPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjOnAccTrans _projOnAccTrans)
    {
        projOnAccTrans  = _projOnAccTrans;

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            projOnAccTransTaxExtensionIN = ProjOnAccTransTaxExtensionIN::findByProjOnAccTrans(_projOnAccTrans.RecId);
        }
        // <GIN>

        super(_projOnAccTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjId projId()
    {
        return projOnAccTrans.ProjID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction is from a project proposal.
    /// </summary>
    /// <returns>
    /// true if this transaction is from a project proposal; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction. This base class implementation simply returns false.
    /// </remarks>
    public  boolean proposal()
    {
        ProjOnAccTransSale  projOnAccTransSale;
        boolean             ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccTrans)))
        {
            while select projOnAccTransSale
            where projOnAccTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjOnAccTransSale(projOnAccTrans, projOnAccTransSale).proposal();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ID of the project proposal that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project proposal that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public  ProjProposalId proposalId()
    {
        ProjOnAccTransSale  projOnAccTransSale;
        ProjProposalId      ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccTrans)))
        {
            while select projOnAccTransSale
            where projOnAccTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjOnAccTransSale(projOnAccTrans, projOnAccTransSale).proposalId();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return ProjOnAccTrans.PSAContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIsOnAccount</Name>
				<Source><![CDATA[
    public NoYes psaIsOnAccount()
    {
        return projOnAccTrans.psaIsOnAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaRefRecIdBudgetTrans</Name>
				<Source><![CDATA[
    public RefRecId psaRefRecIdBudgetTrans()
    {
        return projOnAccTrans.psaRefRecIdBudgetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaRefTableIdBudgetTrans</Name>
				<Source><![CDATA[
    public RefTableId psaRefTableIdBudgetTrans()
    {
        return projOnAccTrans.psaRefTableIdBudgetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public Qty qty()
    {
        return projOnAccTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projOnAccTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    SalesPrice salesPrice()
    {
        SalesPrice  ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccTrans)))
        {
            ret = this.qty() ? CurrencyExchangeHelper::price(this.transTurnover() / this.qty(), this.currencyIdSales()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjOnAccTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projOnAccTrans.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The item tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projOnAccTrans.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return projOnAccTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return projOnAccTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur           ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccTrans)))
        {
            ret = projOnAccTrans.TotalSalesAmountCur;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    public TransTxt txt()
    {
        return projOnAccTrans.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Voucher voucherInvoice()
    {
        Voucher             ret;
        ProjOnAccTransSale  projOnAccTransSale;
        ProjTrans           projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransOnAccTrans)))
        {
            if (!getVoucherInvoice)
            {
                getVoucherInvoice = true;
                while select projOnAccTransSale
                where projOnAccTransSale.TransId == projOnAccTrans.TransId
                {
                    projTransSale = ProjTrans::newProjOnAccTransSale(projOnAccTrans, projOnAccTransSale);
                    voucherInvoice = projTransSale.voucherInvoice();
                    if (voucherInvoice)
                    {
                        break;
                    }
                }
            }

            ret = voucherInvoice;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>