<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KeyVaultClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
using System.Reflection;

/// <summary>
/// This class wraps the logic of creating a Key Vault client.
/// </summary>
public class KeyVaultClient
{
    private const str KeyVaultUriGroupName = 'keyvaulturi';
    private const str KeyVaultSecretGroupName = 'secretname';
    private const str KeyVaultSecretVersionGroupName = 'secretversion';
    private const str RegexPattern = @'vault:\/\/(?<'
        + KeyVaultUriGroupName
        + @'>([\w.-]+)?)\/(?<'
        + KeyVaultSecretGroupName
        + @'>[\w-]+)(\/(?<'
        + KeyVaultSecretVersionGroupName
        + @'>\w+))?';

    private static readonly System.Text.RegularExpressions.Regex KeyVaultIdentityRegex = new System.Text.RegularExpressions.Regex(
        RegexPattern,
        System.Text.RegularExpressions.RegexOptions::Compiled);

    private KeyVaultPropertyContract keyVaultPropertyContract;
    private container cacheRef;
    private ExternalKeyVaultAccessor externalKeyVaultAccessor;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isAssemblyExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates is the assembly exists in the Global Assembly Cache.
    /// </summary>
    /// <returns>True if the specified assembly exists; otherwise, false.</returns>
    public static boolean isAssemblyExists()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate and initialize the <c>KeyVaultClient</c> from the <c>KeyVaultPropertyContract</c>.
    /// </summary>
    /// <param name = "_keyVaultPropertyContract">The property contract.</param>
    /// <returns>The <c>KeyVaultClient</c> object.</returns>
    public static KeyVaultClient createFromDataContract(KeyVaultPropertyContract _keyVaultPropertyContract)
    {
        KeyVaultClient keyVaultClient = new KeyVaultClient();
        keyVaultClient.parmKeyVaultPropertyContract(_keyVaultPropertyContract);
        keyVaultClient.init();

        return keyVaultClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyVaultPropertyContract</Name>
				<Source><![CDATA[
    public KeyVaultPropertyContract parmKeyVaultPropertyContract(KeyVaultPropertyContract _keyVaultPropertyContract = keyVaultPropertyContract)
    {
        keyVaultPropertyContract = _keyVaultPropertyContract;
        return keyVaultPropertyContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheRef</Name>
				<Source><![CDATA[
    public container parmCacheRef(container _cacheRef = cacheRef)
    {
        cacheRef = _cacheRef;
        return cacheRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings from the property contract.
    /// </summary>
    public void init()
    {
        if (KeyVaultClient::isAssemblyExists())
        {
            str keyVaultClientId = this.keyVaultPropertyContract.parmKeyVaultInteractiveClientId();
            str keyVaultClientSecretKey = this.keyVaultPropertyContract.parmKeyVaultClientSecretKey();

            this.externalKeyVaultAccessor = new ExternalKeyVaultAccessor(keyVaultClientId, keyVaultClientSecretKey);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryParseCert</Name>
				<Source><![CDATA[
    private static X509Certificate2 tryParseCert(str _certData)
    {
        X509Certificate2 cert = null;

        if (!System.String::IsNullOrEmpty(_certData))
        {
            try
            {
                var bytes = KeyVaultClient::getBytes(_certData);
                CLRObject keyStorageFlags = CLRInterop::parseClrEnum(
                    'System.Security.Cryptography.X509Certificates.X509KeyStorageFlags',
                    'MachineKeySet, Exportable, PersistKeySet');
                cert = new X509Certificate2(bytes, null, keyStorageFlags);
            }
            catch (Exception::CLRError)
            {
                error("@KeyVault:UnabledToParseCertificate");
            }
        }

        return cert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a value from storage.
    /// </summary>
    /// <param name = "_id">The KeyVault secret identifier.</param>
    /// <param name = "_noCache">Enable cache.</param>
    /// <returns>The string data.</returns>
    public str GetValue(str _id, boolean _noCache = false)
    {
        str result;

        if (this.externalKeyVaultAccessor != null && _id)
        {
            var matchResult = KeyVaultIdentityRegex.Match(_id);
            if (matchResult.Success)
            {
                var groupsEnumerator = matchResult.Groups.GetEnumerator();

                str secretName, secretVersion;

                while (groupsEnumerator.MoveNext() && (!secretName || !secretVersion))
                {
                    System.Text.RegularExpressions.Group currentGroup = groupsEnumerator.Current;
                    if (!secretName && currentGroup.Name == KeyVaultSecretGroupName)
                    {
                        secretName = currentGroup.Value;

                        if (!secretName)
                        {
                            break;
                        }
                    }
                    else if (!secretVersion && currentGroup.Name == KeyVaultSecretVersionGroupName)
                    {
                        secretVersion = currentGroup.Value;
                    }
                }

                if (secretName)
                {
                    try
                    {
                        result = this.externalKeyVaultAccessor.getSecretByVersion(
                            this.keyVaultPropertyContract.parmKeyVaultUrl(),
                            secretName,
                            secretVersion,
                            _noCache);
                    }
                    catch (Exception::CLRError)
                    {
                        error("@KeyVault:UnabledToFindSecret");
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a certificate from storage.
    /// </summary>
    /// <param name = "_id">The KeyVault secret identifier.</param>
    /// <param name = "_throwIfNotFound">Throws an application if the certificate is not found.</param>
    /// <param name = "_noCache">Enable cache.</param>
    /// <returns>The certificate.</returns>
    public X509Certificate2 GetCertificate(str _id, boolean _throwIfNotFound = false, boolean _noCache = false)
    {
        str secret = this.GetValue(_id, _noCache);
        X509Certificate2 cert = KeyVaultClient::tryParseCert(secret);

        if (cert == null && _throwIfNotFound)
        {
            throw error("@KeyVault:UnabledToFindCertificate");
        }

        return cert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetCertificateThumbprint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a thumbprint of a certificate.
    /// </summary>
    /// <param name = "_id">The KeyVault secret identifier.</param>
    /// <param name = "_noCache">Enable cache.</param>
    /// <returns></returns>
    public str GetCertificateThumbprint(str _id, boolean _noCache = false)
    {
        str ret;
        X509Certificate2 certificate = this.GetCertificate(_id, false, _noCache);

        if (certificate != null)
        {
            ret = certificate.Thumbprint;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBytes</Name>
				<Source><![CDATA[
    private static System.Byte[] getBytes(str _certData)
    {
        System.Byte[] bytes;

        try
        {
            bytes = System.Convert::FromBase64String(_certData);
        }
        catch
        {
            exceptionTextFallThrough();
        }

        if (!bytes)
        {
            try
            {
                bytes = System.Text.Encoding::UTF8.GetBytes(_certData);
            }
            catch
            {
                exceptionTextFallThrough();
            }
        }

        return bytes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>