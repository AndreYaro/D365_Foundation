<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailItemOnHandQuantityBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailItemOnHandQuantityBatch</c> class is used to process and generate RetailItemOnHandQuantity.
/// </summary>
internal final class RetailItemOnHandQuantityBatch extends SysOperationServiceController
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a RetailItemOnHandQuantityBatch. RetailItemOnHandQuantityBatch is used to process and generate RetailItemOnHandQuantity.
    /// </summary>
    public void new()
    {
        super();
        this.parmClassName(classStr(RetailItemOnHandQuantityBatch));
        this.parmMethodName(methodStr(RetailItemOnHandQuantityBatch, run));
        this.parmDialogCaption("@Retail:RetailItemOnHandQuantityBatch");
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conveys whether the job must be run in batch.
    /// </summary>
    /// <returns>Always returns true.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start the batch job.
    /// </summary>
    public void run()
    {
        System.Exception ex;

        try
        {
            this.calculate();
        }
        catch(ex)
        {
            str exceptionStr = strFmt("%1 Exception details: %2", "@RetailInventory:RetailItemOnHandQuantityBatchJobError", RetailItemOnHandQuantityBatch::exceptionToString(ex));
            eventSource.EventWriteProductAvailabilityJobFailed(tableStr(RetailItemOnHandQuantity), exceptionStr);
            throw error("@RetailInventory:RetailItemOnHandQuantityBatchJobError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exceptionToString</Name>
				<Source><![CDATA[
    private static str exceptionToString(System.Exception _exception)
    {
        if (_exception != null)
        {
            str exceptionType = _exception.GetType().FullName;
            str stackTrace = _exception.StackTrace != null ? _exception.StackTrace.ToString() : strFmt('Exception stack trace was null. Current stack is: %1', System.Environment::StackTrace);
            str exceptionMessage = _exception.Message != null ? _exception.Message : 'Exception message was null';
            str exceptionToLog = strFmt("Exception Type: %1 / Exception message: %2 / Exception stacktrace: %3", exceptionType, exceptionMessage, stackTrace);

            return exceptionToLog;
        }
        else
        {
            return strFmt('%1 was called with a null exception. Printing the current call stack: %2', funcName(),  System.Environment::StackTrace);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    private void calculate()
    {
        ttsBegin;

        // Legacy stop watch for RetailItemOnHandQuantityBatch only, each data area total execution.
        System.Diagnostics.Stopwatch retailItemOnHandQuantityBatchJobStopWatch = new System.Diagnostics.Stopwatch();
        // Unified product availability job stop watch for total execution across all data areas.
        System.Diagnostics.Stopwatch unifiedTotalJobStopWatch = new System.Diagnostics.Stopwatch();
        // Unified product availability job stop watch for each data area delete / update / insert execution.
        System.Diagnostics.Stopwatch unifiedSubJobStopWatch = new System.Diagnostics.Stopwatch();
        int64 totalRowsAffected = 0;
        int64 dataAreaRowsInserted = 0;
        int64 dataAreaRowsUpdated = 0;
        int64 dataAreaRowsDeleted = 0;
        int64 durationInMs;
        
        eventSource.EventWriteProductAvailabilityJobBegin(tableStr(RetailItemOnHandQuantity));
        this.startNewTiming(unifiedTotalJobStopWatch);

        CompanyInfo companyInfo;
        while select crosscompany DataArea from companyInfo
        {
            DataAreaId inventDataAreaId = companyInfo.DataArea;
            RecId dataAreaRecId = companyInfo.RecId;

            changeCompany(inventDataAreaId)
            {
                RetailItemOnHandQuantity retailtemOnHandQuantity;
                TmpRetailItemOnHandQuantity tmpRetailItemOnHandQuantity;
                InventSum inventSum;
                EcoResTrackingDimensionGroupItem ecoResTrackingDimensionGroupItem;
                EcoResTrackingDimensionGroupFldSetup ecoResTrackingDimensionGroupFldSetup;

                tmpRetailItemOnHandQuantity.skipDatabaseLog(true);
                tmpRetailItemOnHandQuantity.skipEvents(true);
                retailtemOnHandQuantity.skipDatabaseLog(true);
                retailtemOnHandQuantity.skipEvents(true);

                eventSource.EventWriteRetailItemOnHandQuantityBatchInsertTempTableStart(tableStr(RetailItemOnHandQuantity), dataAreaRecId);
                this.startNewTiming(retailItemOnHandQuantityBatchJobStopWatch);

                insert_recordset tmpRetailItemOnHandQuantity(
                    ItemId,
                    InventDimId,
                    PhysicalInvent
                )
                select ItemId,
                    InventDimId,
                    PhysicalInvent
                from inventSum join ecoResTrackingDimensionGroupItem join ecoResTrackingDimensionGroupFldSetup
                    where ecoResTrackingDimensionGroupItem.TrackingDimensionGroup == ecoResTrackingDimensionGroupFldSetup.TrackingDimensionGroup
                    && ecoResTrackingDimensionGroupItem.ItemId == inventSum.ItemId
                    && ecoResTrackingDimensionGroupFldSetup.DimensionFieldId == fieldNum(InventDim, inventSerialId)
                    && ecoResTrackingDimensionGroupItem.ItemDataAreaId == inventDataAreaId
                    && ecoResTrackingDimensionGroupFldSetup.IsActive == NoYes::Yes
                    && inventSum.ClosedQty == NoYes::No;

                var rowsInsertedTmpTable = tmpRetailItemOnHandQuantity.RowCount();
                durationInMs = this.stopTimingAndGetDurationInMs(retailItemOnHandQuantityBatchJobStopWatch);
                eventSource.EventWriteRetailItemOnHandQuantityBatchInsertTempTableFinish(tableStr(RetailItemOnHandQuantity), dataAreaRecId, rowsInsertedTmpTable, durationInMs);

                this.startNewTiming(retailItemOnHandQuantityBatchJobStopWatch);
                eventSource.EventWriteRetailItemOnHandQuantityBatchUpdateTableStart(tableStr(RetailItemOnHandQuantity), dataAreaRecId);

                // Delete
                eventSource.EventWriteProductAvailabilityJobDeleteBegin(tableStr(RetailItemOnHandQuantity), dataAreaRecId);
                this.startNewTiming(unifiedSubJobStopWatch);

                delete_from retailtemOnHandQuantity
                notexists join tmpRetailItemOnHandQuantity
                    where retailtemOnHandQuantity.ItemId == tmpRetailItemOnHandQuantity.ItemId
                        && retailtemOnHandQuantity.InventDimId == tmpRetailItemOnHandQuantity.InventDimId;

                int64 rowsDeleted = retailtemOnHandQuantity.RowCount();
                dataAreaRowsDeleted += rowsDeleted;
                durationInMs = this.stopTimingAndGetDurationInMs(unifiedSubJobStopWatch);
                eventSource.EventWriteProductAvailabilityJobDeleteEnd(tableStr(RetailItemOnHandQuantity), dataAreaRecId, rowsDeleted, durationInMs);

                // Update
                eventSource.EventWriteProductAvailabilityJobUpdateBegin(tableStr(RetailItemOnHandQuantity), dataAreaRecId);
                this.startNewTiming(unifiedSubJobStopWatch);

                update_recordset retailtemOnHandQuantity
                setting
                    PhysicalInvent = tmpRetailItemOnHandQuantity.PhysicalInvent
                join PhysicalInvent from tmpRetailItemOnHandQuantity
                    where retailtemOnHandQuantity.ItemId == tmpRetailItemOnHandQuantity.ItemId
                        && retailtemOnHandQuantity.InventDimId == tmpRetailItemOnHandQuantity.InventDimId
                        && retailtemOnHandQuantity.PhysicalInvent != tmpRetailItemOnHandQuantity.PhysicalInvent;

                int64 rowsUpdated = retailtemOnHandQuantity.RowCount();
                dataAreaRowsUpdated += rowsUpdated;
                durationInMs = this.stopTimingAndGetDurationInMs(unifiedSubJobStopWatch);
                eventSource.EventWriteProductAvailabilityJobUpdateEnd(tableStr(RetailItemOnHandQuantity), dataAreaRecId, rowsUpdated, durationInMs);

                // Insert
                eventSource.EventWriteProductAvailabilityJobInsertBegin(tableStr(RetailItemOnHandQuantity), dataAreaRecId);
                this.startNewTiming(unifiedSubJobStopWatch);

                insert_recordset retailtemOnHandQuantity(
                    ItemId,
                    InventDimId,
                    PhysicalInvent
                )
                select
                    ItemId,
                    InventDimId,
                    PhysicalInvent
                from tmpRetailItemOnHandQuantity
                    notexists join retailtemOnHandQuantity
                        where retailtemOnHandQuantity.ItemId == tmpRetailItemOnHandQuantity.ItemId
                        && retailtemOnHandQuantity.InventDimId == tmpRetailItemOnHandQuantity.InventDimId;

                int64 rowsInserted = retailtemOnHandQuantity.RowCount();
                dataAreaRowsInserted += rowsInserted;
                durationInMs = this.stopTimingAndGetDurationInMs(unifiedSubJobStopWatch);
                eventSource.EventWriteProductAvailabilityJobInsertEnd(tableStr(RetailItemOnHandQuantity), dataAreaRecId, rowsInserted, durationInMs);

                var newRowCount = retailtemOnHandQuantity.RowCount();
                durationInMs = this.stopTimingAndGetDurationInMs(retailItemOnHandQuantityBatchJobStopWatch);
                eventSource.EventWriteRetailItemOnHandQuantityBatchUpdateTableFinish(tableStr(RetailItemOnHandQuantity), dataAreaRecId, newRowCount, durationInMs);
            }
        }

        this.updateRetailItemOnHandQuantityParameters();

        // Keep track of how many total rows are affected by the whole job
        totalRowsAffected = dataAreaRowsDeleted + dataAreaRowsUpdated + dataAreaRowsInserted;
        durationInMs = this.stopTimingAndGetDurationInMs(unifiedTotalJobStopWatch);
        eventSource.EventWriteProductAvailabilityJobEnd(tableStr(RetailItemOnHandQuantity), /* Use 0 for performance */ 0, totalRowsAffected, durationInMs);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailItemOnHandQuantityParameters</Name>
				<Source><![CDATA[
    private void updateRetailItemOnHandQuantityParameters()
    {
        // Assign the RetailInventAvailabilityParameter entry to hold the latest Inventory Transaction for this batch job.
        InventTrans inventTrans;
        select crosscompany maxof(RecId) from inventTrans;
        RetailInventAvailabilityParameters parameters = RetailInventAvailabilityParameters::find(true);
        parameters.LastItemOnhandQuantityInventTrans = inventTrans.RecId;
        parameters.LastItemOnHandQuantityBatchJobEndDateTime = DateTimeUtil::utcNow();
        parameters.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startNewTiming</Name>
				<Source><![CDATA[
    private void startNewTiming(System.Diagnostics.Stopwatch jobStopWatch)
    {
        jobStopWatch.Reset();
        jobStopWatch.Start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopTimingAndGetDurationInMs</Name>
				<Source><![CDATA[
    private int64 stopTimingAndGetDurationInMs(System.Diagnostics.Stopwatch jobStopWatch)
    {
        jobStopWatch.Stop();
        System.TimeSpan timeSpan = jobStopWatch.Elapsed;
        int64 durationInMs = timeSpan.TotalMilliseconds;
        return durationInMs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SysOperationServiceController controller = new RetailItemOnHandQuantityBatch();

        if (controller.prompt())
        {
            controller.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>