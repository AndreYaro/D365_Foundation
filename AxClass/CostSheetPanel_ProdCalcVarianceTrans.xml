<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetPanel_ProdCalcVarianceTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetPanel_ProdCalcVarianceTrans</c> class should be used by
///    <c>ProdCalcVarianceTrans</c> form.
/// </summary>
/// <remarks>
///    This class uses <c>ProdTable</c> record data to calculate variances for a particular production
///    order. The <c>details</c> member variable determines whether the variances should be calculated per
///    resource (details == <c>NoYes::Yes</c>) or per cost group (details == <c>NoYes::No</c>).
/// </remarks>
class CostSheetPanel_ProdCalcVarianceTrans extends CostSheetPanel
{
    NoYes                       details;
    ProdTable                   prodTable;
    LeanProductionFlowCosting   productionFlowCosting;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costRollupFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates which field group should be used to represent cost rollup data.
    /// </summary>
    /// <returns>
    /// The <c>CostTmpCostRollup</c> and <c>VariancesPerResource</c> field group names.
    /// </returns>
    protected str costRollupFieldGroup()
    {
        return tableFieldgroupStr(CostTmpCostRollup, VariancesPerResource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costTmpCostRollup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates data for a cost rollup data source.
    /// </summary>
    /// <returns>
    /// A <c>CostTmpCostRollup</c> table buffer.
    /// </returns>
    /// <remarks>
    /// The cost amount is divided by the quantity value that is selected in the header controls group.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// An unexpected <c>CostSheetPanelPer</c> value is used.
    /// </exception>
    protected CostTmpCostRollup costTmpCostRollup()
    {
        CostTmpCostRollup   costTmpCostRollup;

        if (per != CostSheetPanelPer::LotSize)
        {
            throw error("@SCM:UnexpectedCostSheetPanelPer");
        }

        while select VarianceResourceType,
                     VarianceResourceId,
                     VarianceResourceName,
                     VarianceOprNum,
                     CostGroupId,
                     sum(VarianceLotSize),
                     sum(VarianceCost),
                     sum(VarianceQty),
                     sum(VarianceSubstitution),
                     sum(RealConsump),
                     sum(RealCostAmount),
                     sum(StdQtyAllowed),
                     sum(StdCostAllowed)
            from sourceCostTmpCostRollup
            group by VarianceResourceType,
                     VarianceResourceId,
                     VarianceResourceName,
                     VarianceOprNum,
                     CostGroupId
                where #Level_Corresponds_To_RollupLevel
        {
            costTmpCostRollup.data(sourceCostTmpCostRollup);
            costTmpCostRollup.insert();
        }

        return costTmpCostRollup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fill</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills in the temporary data source with cost rollup and updates the grids.
    /// </summary>
    /// <remarks>
    /// This method calls the <c>packedRecordsList</c> method, which is overridden in the subclasses of the
    /// <c>CostSheetPanel</c> class.
    /// </remarks>
    public void fill()
    {
        super();

        if (tmpCostRollupDatasource)
        {
            FormDataSource formDataSource = formRun.dataSource(tmpCostRollupDatasourceNo);
            formDataSource.object(fieldNum(CostTmpCostRollup, VarianceResourceType)).visible(details);
            formDataSource.object(fieldNum(CostTmpCostRollup, VarianceResourceName)).visible(details);
            formDataSource.object(fieldNum(CostTmpCostRollup, VarianceResourceId)).visible(details);
            formDataSource.object(fieldNum(CostTmpCostRollup, VarianceOprNum)).visible(details);
            formDataSource.object(fieldNum(CostTmpCostRollup, RealConsump)).visible(details);
            formDataSource.object(fieldNum(CostTmpCostRollup, RealCostAmount)).visible(details);
            formDataSource.object(fieldNum(CostTmpCostRollup, StdQtyAllowed)).visible(details);
            formDataSource.object(fieldNum(CostTmpCostRollup, StdCostAllowed)).visible(details);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dynamically built controls.
    /// </summary>
    /// <remarks>
    /// This method should be executed before the <c>super</c> method call in the <c>init</c> method of the
    /// caller form.
    /// </remarks>
    public void init()
    {
        super();

        view = CostSheetPanelView::CostRollup;
        viewComboBox.selection(enum2int(view));
        viewComboBox.visible(false);

        per = CostSheetPanelPer::LotSize;
        perComboBox.selection(enum2int(per));
        perComboBox.visible(false);

        qty = 1;
        qtyReal.realValue(qty);
        qtyReal.allowEdit(this.allowEditQty());

        detailCheckBox.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDetails</Name>
				<Source><![CDATA[
    protected void modifiedDetails(NoYes _modifiedDetails)
    {
        details = _modifiedDetails;
        this.fill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnitIdAndLotSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the unit ID and the lot size values.
    /// </summary>
    /// <remarks>
    /// This method should be overridden in subclasses.
    /// </remarks>
    protected void initUnitIdAndLotSize()
    {
        lotSize = prodTable.reportedFinishedGood();

        if (lotSize == 0.00)
        {
            lotSize = 1.00;
        }

        qty = lotSize;

        if (renderInUI)
        {
            qtyReal.realValue(qty);

            unitIdString.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedRecordsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a packed <c>List</c> with cost rollup records that will later be used as a source for
    /// cost rollup or costing sheet grids.
    /// </summary>
    /// <returns>
    /// A container object.
    /// </returns>
    /// <remarks>
    /// This method should be overridden in subclasses.
    /// </remarks>
    protected container packedRecordsList()
    {
        if (prodTable)
        {
            return CostSheetPanel_ProdCalcVarianceTrans::packedServerProdTable(prodTable, details);
        }

        if (productionFlowCosting)
        {
            return CostSheetPanel_ProdCalcVarianceTrans::packedServerProductionFlowCosting(productionFlowCosting, details);
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetails</Name>
				<Source><![CDATA[
    public NoYes parmDetails(NoYes _details = details)
    {
        details = _details;

        return details;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    public ProdTable parmProdTable(ProdTable _prodTable = prodTable)
    {
        prodTable = _prodTable;

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductionFlowCosting</Name>
				<Source><![CDATA[
    public LeanProductionFlowCosting parmProductionFlowCosting(LeanProductionFlowCosting _productionFlowCosting = productionFlowCosting)
    {
        productionFlowCosting = _productionFlowCosting;

        return productionFlowCosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalContributorFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates which fields of the cost rollup table should be used to calculate the total amount.
    /// </summary>
    /// <returns>
    /// A <c>Set</c> object that contains field IDs.
    /// </returns>
    protected Set totalContributorFieldList()
    {
        Set fieldIdSet = new Set(typeName2Type(extendedTypeStr(FieldId)));
        fieldIdSet.add(fieldNum(CostTmpCostRollup, VarianceLotSize));
        fieldIdSet.add(fieldNum(CostTmpCostRollup, VarianceCost));
        fieldIdSet.add(fieldNum(CostTmpCostRollup, VarianceQty));
        fieldIdSet.add(fieldNum(CostTmpCostRollup, VarianceSubstitution));

        return fieldIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates what label should be used in front of the total value.
    /// </summary>
    /// <returns>
    /// The Total variance system label.
    /// </returns>
    protected str totalLabel()
    {
        return "@SYS111258";
    }

]]></Source>
			</Method>
			<Method>
				<Name>addList</Name>
				<Source><![CDATA[
    protected static void addList(
        TmpProdStandardVariance   _tmpProdStandardVariance,
        List                      _rollupList)
    {
        CostTmpCostRollup           costTmpCostRollup;

        while select CostGroupId,
                        Split,
                        InventCostLevel,
                        sum(LotSizeVariance),
                        sum(CostVariance),
                        sum(QtyVariance),
                        sum(SubstitutionVariance)
            from _tmpProdStandardVariance
            group by CostGroupId,
                        Split,
                        InventCostLevel
        {
            costTmpCostRollup.initFromTmpProdStandardVariance(_tmpProdStandardVariance);
            _rollupList.addEnd(costTmpCostRollup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addListDetail</Name>
				<Source><![CDATA[
    protected static void addListDetail(
        TmpProdStandardVariance   _tmpProdStandardVariance,
        List                      _rollupList)
    {
        CostTmpCostRollup           costTmpCostRollup;

        while select CalcType,
                        CostGroupId,
                        Resource,
                        OprId,
                        OprNum,
                        Split,
                        InventCostLevel,
                        sum(LotSizeVariance),
                        sum(CostVariance),
                        sum(QtyVariance),
                        sum(SubstitutionVariance),
                        sum(RealConsump),
                        sum(RealCostAmount),
                        sum(StdQty),
                        sum(StdCost)
            from _tmpProdStandardVariance
            group by CalcType,
                        Resource,
                        OprId,
                        OprNum,
                        CostGroupId,
                        Split,
                        InventCostLevel
        {
            costTmpCostRollup.initFromTmpProdStandardVariance(_tmpProdStandardVariance);
            _rollupList.addEnd(costTmpCostRollup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the class and adds controls to the caller form at runtime.
    /// </summary>
    /// <param name="_formRun">
    ///    The caller form.
    /// </param>
    /// <param name="_parentId">
    ///    The ID of the caller form tab page or group to which to add the complex control.
    /// </param>
    /// <returns>
    ///    The instance of the class.
    /// </returns>
    /// <remarks>
    ///    This method should be called before the <c>super</c> method call in the <c>init</c> method of the
    ///    caller form.
    /// </remarks>
    public static CostSheetPanel_ProdCalcVarianceTrans newForm(
        FormRun         _formRun,
        FormControlId   _parentId)
    {
        CostSheetPanel_ProdCalcVarianceTrans costSheetPanel = new CostSheetPanel_ProdCalcVarianceTrans();

        costSheetPanel.parmFormRun(_formRun);
        costSheetPanel.parmParentId(_parentId);
        costSheetPanel.build();

        return costSheetPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedServerProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses the <c>ProdStandardVariance</c> class to calculate variances and groups the records according
    /// to the level of details.
    /// </summary>
    /// <param name="_prodTable">
    /// A <c>ProdTable</c> record that determines what production order is taken for the variance
    /// calculation.
    /// </param>
    /// <param name="_details">
    /// A <c>NoYes</c> enumeration value that determines whether the variances should be calculated per
    /// resource or per cost group.
    /// </param>
    /// <returns>
    /// A packed <c>List</c> object that contains cost rollup records.
    /// </returns>
    protected static container packedServerProdTable(
        ProdTable   _prodTable,
        NoYes       _details)
    {
        TmpProdStandardVariance     tmpProdStandardVariance;
        TmpProdStandardVariance     emptyTmpProdStandardVariance;
        List                        list = new List(Types::Record);

        if (_prodTable.ProdStatus == ProdStatus::Completed)
        {
            ProdStandardVariance_Prod prodStandardVariance = ProdStandardVariance::construct(ProdTransRefType::Production);
            prodStandardVariance.calc(_prodTable.ProdId,
                                      ProdTransRefType::Production,
                                      _prodTable.CollectRefLevel,
                                      _prodTable.CollectRefProdId,
                                      _prodTable.RealDate);

            tmpProdStandardVariance.setTmpData(prodStandardVariance.parmTmpProdStandardVariance());
        }
        else
        {
            emptyTmpProdStandardVariance.clear();
            tmpProdStandardVariance.setTmpData(emptyTmpProdStandardVariance);
        }

        if (_details)
        {
            CostSheetPanel_ProdCalcVarianceTrans::addListDetail(tmpProdStandardVariance, list);
        }
        else
        {
            // ignore resource-specific details: CalcType, Resource and WrkCtrType
            CostSheetPanel_ProdCalcVarianceTrans::addList(tmpProdStandardVariance, list);
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedServerProductionFlowCosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses the <c>ProdStandardVariance</c> class to calculate variances and groups the records according
    /// to the level of details.
    /// </summary>
    /// <param name="_productionFLowCosting">
    /// A <c>LeanProductionFlowCosting</c> record that determines what production flow is taken for the variance
    /// calculation.
    /// </param>
    /// <param name="_details">
    /// A <c>NoYes</c> enumeration value that determines whether the variances should be calculated per
    /// resource or per cost group.
    /// </param>
    /// <returns>
    /// A packed <c>List</c> object that contains cost rollup records.
    /// </returns>
    protected static container packedServerProductionFlowCosting(
        LeanProductionFlowCosting   _productionFLowCosting,
        NoYes                       _details)
    {
        TmpProdStandardVariance     tmpProdStandardVariance;
        List                        list = new List(Types::Record);

        ProdStandardVariance prodStandardVariance = ProdStandardVariance::construct(ProdTransRefType::ProductionFlow);
        prodStandardVariance.calc(_productionFLowCosting.TransRefId,
                                  ProdTransRefType::BackflushCosting,
                                  InventCostLevel::Total,
                                  _productionFLowCosting.TransRefId,
                                  _productionFlowCosting.LeanCosting().ToDate);

        tmpProdStandardVariance.setTmpData(prodStandardVariance.parmTmpProdStandardVariance());

        if (_details)
        {
            CostSheetPanel_ProdCalcVarianceTrans::addListDetail(tmpProdStandardVariance, list);
        }
        else
        {
            // ignore resource-specific details: CalcType, Resource and WrkCtrType
            CostSheetPanel_ProdCalcVarianceTrans::addList(tmpProdStandardVariance, list);
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostSheetPanel_ProdCalcVarianceTrans construct()
    {
        return new CostSheetPanel_ProdCalcVarianceTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDataFromProductionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new <c>CostSheetPanel_ProdCalcVarianceTrans</c> class based on a production order.
    /// </summary>
    /// <param name="_productionOrder">
    /// A production order record.
    /// </param>
    /// <param name="_details">
    /// A boolean value that indicates if details should be shown.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostSheetPanel_ProdCalcVarianceTrans</c> class.
    /// </returns>
    public static CostSheetPanel_ProdCalcVarianceTrans newDataFromProductionOrder(
        ProdTable           _productionOrder,
        NoYes               _details)
    {
        var data = CostSheetPanel_ProdCalcVarianceTrans::construct();

        data.parmProdTable(_productionOrder);
        data.parmDetails(_details);
        data.parmRenderInUI(false);

        return data;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>