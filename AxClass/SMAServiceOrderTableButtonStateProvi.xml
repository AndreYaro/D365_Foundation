<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceOrderTableButtonStateProvi</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SMAServiceOrderTableButtonStateProvi</c> class provides the set of rules to manage behavior
///    of the buttons on service order list page and task form.
/// </summary>
/// <remarks>
///    This class implements the <c>ButtonStateProvi</c> interface.
/// </remarks>
class SmaServiceOrderTableButtonStateProvi implements ButtonStateProvider
{
    SMAServiceOrderTable    serviceOrderTable;
    SMAServiceOrderLine     serviceOrderLine;
    SMAStageTable           serviceOrderTable_stageTable;
    container               existTransTypesPosted;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRuleExistRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the service order header buffer is not empty.
    /// </summary>
    /// <returns>
    ///    true if the service order header buffer is not empty; otherwise, false.
    /// </returns>
    public boolean checkRuleExistRecord()
    {
        boolean ret = false;

        if (serviceOrderTable)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleLogisticsLocationSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the rule for the <c>LogisticsLocationSelect</c> menu item.
    /// </summary>
    /// <returns>
    /// true if rule is valid; otherwise, false.
    /// </returns>
    public boolean checkRuleLogisticsLocationSelect()
    {
        return (serviceOrderTable)
            && (serviceOrderTable.Progress == SMAServiceOrderProgress::InProcess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleProjInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>ProjInvoiceProposal</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleProjInvoiceProposal()
    {
        boolean             existPosted         = false;
        ProjTable           projTable;
        ProjStatusTypeRule  projStatusTypeRule;

        if (!serviceOrderTable)
        {
            return false;
        }
        else
        {
            existPosted = SMAServiceOrderLine::existServiceOrderLineStatus(serviceOrderTable.ServiceOrderId, SMAServiceOrderStatus::Posted);

            projTable = ProjTable::find(serviceOrderTable.ProjId);
            projStatusTypeRule = ProjStatusTypeRule::find(projTable.Status, projTable.Type, ProjStatusRule::CreateInvoiceProposal);

            return existPosted && (projStatusTypeRule);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleProjSalesItemReq</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>ProjSalesItemReq</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleProjSalesItemReq()
    {
        boolean     enableProjItemReq = false;
        ProjTable   projTable;
        ProjType    projType;

        if (!serviceOrderTable || !serviceOrderTable.ProjId)
        {
            return false;
        }
        else
        {
            projTable   = ProjTable::find(serviceOrderTable.ProjId);
            projType    = projTable.Type;

            return (projType == ProjType::TimeMaterial
                ||  projType == ProjType::FixedPrice
                ||  projType == ProjType::Internal
                ||  projType == ProjType::Investment
                ||  projType == ProjType::Cost)
                &&  serviceOrderTable.Progress      != SMAServiceOrderProgress::Canceled
                &&  serviceOrderTable.CustAccount   != '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleProjTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>ProjTransCost</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleProjTransCost()
    {
        if (!serviceOrderTable)
        {
            return false;
        }
        else
        {
            return conPeek(existTransTypesPosted, 4);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleProjTransEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>ProjTransEmpl</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleProjTransEmpl()
    {
        if (!serviceOrderTable)
        {
            return false;
        }
        else
        {
            return conPeek(existTransTypesPosted, 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleProjTransItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>ProjTransItem</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleProjTransItem()
    {
        if (!serviceOrderTable)
        {
            return false;
        }
        else
        {
            return conPeek(existTransTypesPosted, 2) || conPeek(existTransTypesPosted, 3);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleProjTransRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>ProjTransRevenue</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleProjTransRevenue()
    {
        if (!serviceOrderTable)
        {
            return false;
        }
        else
        {
            return conPeek(existTransTypesPosted, 5);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceLineBOMCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>ServiceLineBOMCalc</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceLineBOMCalc()
    {
        return (serviceOrderLine.RecId != 0)
            && (serviceOrderLine.TransactionType == SMATransactionType::Item)
            && (serviceOrderLine.ItemId != '')
            && (serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Created)
            && (InventTable::find(serviceOrderLine.ItemId).isProducedByDefault());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceLineCancelEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the enable rule for the <c>ServiceLineCancelEnabled</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceLineCancelEnabled()
    {
        return (serviceOrderTable)
            && (SMAStageTable::find(SMAServiceOrderTable::find(serviceOrderLine.ServiceOrderId).StageId).StageCanCancel)
            && (serviceOrderLine.ServiceOrderStatus != SMAServiceOrderStatus::Posted)
            && (serviceOrderLine.ServiceOrderStatus != SMAServiceOrderStatus::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceLineCancelVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the visible rule for the <c>ServiceLineCancelVisible</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceLineCancelVisible()
    {
        return (!serviceOrderLine)
            || (serviceOrderLine.ServiceOrderStatus != SMAServiceOrderStatus::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceLineExistRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the service order line buffer is not empty.
    /// </summary>
    /// <returns>
    ///    true if the service order line buffer is not empty; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceLineExistRecord()
    {
        return (serviceOrderLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceLineOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>ServiceLineOnHand</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceLineOnHand()
    {
        return (serviceOrderLine.RecId != 0)
            && (serviceOrderLine.TransactionType == SMATransactionType::Item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceLineRevokeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the enable rule for the <c>ServiceLineRevokeEnabled</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceLineRevokeEnabled()
    {
        return (serviceOrderLine)
            && (serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceLineRevokeVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the visible rule for the <c>ServiceLineRevokeVisible</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceLineRevokeVisible()
    {
        return (serviceOrderTable)
            && (serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceLineTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates rules for the <c>ServiceLineTransfer</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceLineTransfer()
    {
        return (serviceOrderLine.RecId != 0)
            && (SMAStageTable::find(SMAServiceOrderTable::find(serviceOrderLine.ServiceOrderId).StageId).StageCanTransfer)
            && (serviceOrderLine.ProjId != '')
            && (serviceOrderLine.SignOff)
            && (serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Created);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceOrderCancelEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the enable rule for the <c>ServiceOrderCancelEnabled</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceOrderCancelEnabled()
    {
        return (serviceOrderTable)
            && (serviceOrderTable_stageTable.StageCanCancel)
            && (serviceOrderTable.Progress != SMAServiceOrderProgress::Transferred)
            && (serviceOrderTable.Progress != SMAServiceOrderProgress::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceOrderDeleteEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the rule for the Delete Record command.
    /// </summary>
    /// <returns>
    /// true if the rule is valid; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceOrderDeleteEnabled()
    {
        return (serviceOrderTable)
            && (serviceOrderTable_stageTable.StageCanDelete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceOrderModifyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the rule for the <c>SMAServiceOrderTableTableForEdit</c> menu item.
    /// </summary>
    /// <returns>
    /// true if the rule is valid; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceOrderModifyEnabled()
    {
        if (!serviceOrderTable)
        {
            return true;
        }

        else
        {
            return (serviceOrderTable)
                && (serviceOrderTable_stageTable.StageCanModify);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceOrderRepairEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the rule for the <c>SMARepairLine</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceOrderRepairEnabled()
    {
        // If no service object relations exist for service order, disable the repair button.
        return (SMAServiceObjectRelation::existServiceRelations(serviceOrderTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceOrderRevokeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the enable rule for the <c>ServiceOrderRevokeEnabled</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation had passed; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceOrderRevokeEnabled()
    {
        return (serviceOrderTable)
            && (serviceOrderTable.Progress == SMAServiceOrderProgress::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleServiceOrderRevokeVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the visible rule for the <c>ServiceOrderRevokeVisible</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleServiceOrderRevokeVisible()
    {
        return (serviceOrderTable)
            && (serviceOrderTable.Progress == SMAServiceOrderProgress::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleShowInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the invoice lines can be shown.
    /// </summary>
    /// <returns>
    ///    true if the invoice lines can be shown; otherwise, false.
    /// </returns>
    public boolean checkRuleShowInvoiceLine()
    {
        return (serviceOrderLine.RecId != 0)
            && (serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Posted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMAServicePeriodic_Transfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the rule for the <c>SMAServicePeriodic_Transfer</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleSMAServicePeriodic_Transfer()
    {
        return (serviceOrderTable)
            && (serviceOrderTable_stageTable.StageCanTransfer)
            && (serviceOrderTable.ProjId != '')
            && (serviceOrderTable.SignOff)
            && (serviceOrderTable.Progress == SMAServiceOrderProgress::InProcess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMASLALog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the rule for the <c>SMASLALog</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleSMASLALog()
    {
        return (serviceOrderTable)
            && (serviceOrderTable.ServiceLevelAgreement != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMASLALog_Cancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the rule for the <c>SMASLALog_Cancel</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleSMASLALog_Cancel()
    {
        return (serviceOrderTable)
            && (serviceOrderTable.ServiceLevelAgreement != '')
            && (serviceOrderTable.ServiceLevelAgreementStatus != SMALogStatus::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMASLALog_Close</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the rule for the <c>SMASLALog_Close</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleSMASLALog_Close()
    {
        return (serviceOrderTable)
            && (serviceOrderTable.ServiceLevelAgreement != '')
            && (serviceOrderTable.ServiceLevelAgreementStatus == SMALogStatus::Open);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMASLALog_Open</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the rule for the <c>SMASLALog_Open</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleSMASLALog_Open()
    {
        return (serviceOrderTable)
            && (serviceOrderTable.ServiceLevelAgreement != '')
            && (serviceOrderTable.ServiceLevelAgreementStatus == SMALogStatus::Closed)
            && (SMAServiceLevelAgreementTable::find(serviceOrderTable.ServiceLevelAgreement).Suspended != NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMAStageEngine_Next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the rule for the <c>SMAStageEngine_Next</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleSMAStageEngine_Next()
    {
        return (serviceOrderTable) && (SMAStageTable::isParent(serviceOrderTable.StageId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSMAStageEngine_Prev</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the rule for the <c>SMAStageEngine_Prev</c> menu item.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    public boolean checkRuleSMAStageEngine_Prev()
    {
        return (serviceOrderTable) && (SMAStageTable::firstStage() != serviceOrderTable.StageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the advanced caching.
    /// </summary>
    void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements advanced caching for specific rules.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    A string that identifies the rule for which advanced caching is to be performed.
    /// </param>
    /// <remarks>
    ///    This method is called by the <c>FormButtonManager</c> on the rule class that implements the
    ///    <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set form data sources.
    /// </summary>
    /// <param name="datasources1">
    ///    The first form data source.
    /// </param>
    /// <param name="datasources2">
    ///    The second form data source; optional.
    /// </param>
    /// <param name="datasources3">
    ///    The third form data source; optional.
    /// </param>
    /// <param name="datasources4">
    ///    The fourth form data source; optional.
    /// </param>
    /// <param name="datasources5">
    ///    The fifth form data source; optional.
    /// </param>
    void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
        serviceOrderTable   = datasources1;
        if (serviceOrderTable)
        {
            serviceOrderTable_stageTable = SMAStageTable::find(serviceOrderTable.StageId);
            existTransTypesPosted = SMAServiceOrderLine::existTransTypePosted(serviceOrderTable.ServiceOrderId, NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::Yes);
        }
        serviceOrderLine    = datasources2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public SmaServiceOrderTableButtonStateProvi construct()
    {
        return new SMAServiceOrderTableButtonStateProvi();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>