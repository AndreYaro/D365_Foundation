<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDataFilterManagerBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCDXDataFilterManagerBase</c> class is the base class for data filter.
/// </summary>
public abstract class RetailCDXDataFilterManagerBase
{
    protected RetailCDXDataSyncContext dataSyncContext;
    internal RetailCDXDownloadSubjobSourceContext subjobContext;

    protected RetailCDXChangeRefTable1 changeTrackingTempTable;
    protected RetailCDXChangeRefTable2 legacyFilteredRecordsTempTable;
    protected RetailCDXChangeRefTable2 legacyFilteredRecordsTempTable_base;

    protected RetailCDXTargetChannel targetChannelTempTable;
    protected RetailCDXTargetChannel targetChannelTempTable_baseline;

    protected container legalEntityContainer;

    protected RetailCdxSessionLogger sessionLogger;

    #RetailCDXCodeGen

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>paramDataSyncContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of current data sync context.
    /// </summary>
    /// <param name="_dataSyncContext">
    /// Thev value of <c>RetailCDXDataSyncContext</c>.
    /// </param>
    /// <returns>
    /// Current data sync context.
    /// </returns>
    public RetailCDXDataSyncContext paramDataSyncContext(RetailCDXDataSyncContext _dataSyncContext)
    {
        dataSyncContext = _dataSyncContext;

        changeTrackingTempTable = dataSyncContext.openChangeRefTable1();
        legacyFilteredRecordsTempTable = dataSyncContext.openChangeRefTable2();
        legacyFilteredRecordsTempTable_base = dataSyncContext.openChangeRefTable2Base();

        targetChannelTempTable.linkPhysicalTableInstance(dataSyncContext.openTargetChannelTable());
        targetChannelTempTable_baseline.linkPhysicalTableInstance(dataSyncContext.openTargetChannelTableBaseline());

        sessionLogger = new RetailCdxSessionLogger();
        sessionLogger.setSessions(dataSyncContext.getSessionNumbers());
        sessionLogger.setCurrentSessions(dataSyncContext.getCurrentSessions());

        return dataSyncContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramSubjobSourceContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of current sub job source context context.
    /// </summary>
    /// <param name="_subjobContext">
    /// Thev value of <c>RetailCDXDownloadSubjobSourceContext</c>.
    /// </param>
    /// <returns>
    /// Current sub job source context.
    /// </returns>
    internal RetailCDXDownloadSubjobSourceContext paramSubjobSourceContext(RetailCDXDownloadSubjobSourceContext _subjobContext)
    {
        subjobContext = _subjobContext;

        return subjobContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramLEContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/Set container of companies that this data sync should go through.
    /// </summary>
    /// <param name="_legalEntityContainer">
    /// Container of companies that this data sync should go through.
    /// </param>
    /// <returns>
    /// Container of companies that this data sync should go through.
    /// </returns>
    public container paramLEContainer(container _legalEntityContainer = conNull())
    {
        legalEntityContainer = _legalEntityContainer;
        return legalEntityContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runQueryForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run channel data filtering query for table.
    /// </summary>
    /// <param name = "tableName">Table name.</param>
    /// <param name = "isInitSync">True if this is initial sync; otherwise, false.</param>
    /// <param name = "isBaselineFullSync">True if the query is being run to calculate baseline data set; otherwise, false. Optional, default false.</param>
    /// <remarks>
    /// The isBaselineFullSync argument name has nothing to do with the data sync type being full sync or delta sync, it is named incorrectly and the name is being kept for backward compatibility reasons.
    /// </remarks>
    public void runQueryForTable(TableName tableName, boolean isInitSync, boolean isBaselineFullSync = false)
    {
        boolean isBaselineSync = isBaselineFullSync; // assigning to a variable which has the proper name so as to make the code below easy to understand.

        TableId tableId = tableName2id(tableName);

        container dataDistributionQueryContainer = this.getDataDistributionQueries(tableId);

        if (conLen(dataDistributionQueryContainer) == 0)
        {
            throw error(strFmt("@Retail:NoValidQueries", tableName));
        }

        for (int j = 1; j <= conLen(dataDistributionQueryContainer); ++j)
        {
            RetailCdxDataDistributionQuery dataDistributionQuery;
            [dataDistributionQuery] = conPeek(dataDistributionQueryContainer, j);

            sessionLogger.logChannelDataFilteringStartTableQuery(tableName, dataDistributionQuery.QueryId, '', isInitSync, isBaselineSync);

            if (isInitSync)
            {
                RetailTmpCDXTargetLegalEntity targetLegalEntities = this.dataSyncContext.openTargetLegalEntityTempTable();
                this.runFullSyncQueryForTable(dataDistributionQuery, isBaselineSync, targetLegalEntities);
            }
            else if(!this.dataSyncContext.paramNewLESet().empty() & !isBaselineSync)
            {
                RetailTmpCDXTargetLegalEntity newLEs = this.dataSyncContext.openTargetLegalEntityTempTableNewLEs();
                this.runFullSyncQueryForTable(dataDistributionQuery, isBaselineSync, /*targetLegalEntities*/ newLEs);
                this.runDeltaQueryForTable(dataDistributionQuery, isBaselineSync);
            }
            else
            {
                this.runDeltaQueryForTable(dataDistributionQuery, isBaselineSync);
            }

            sessionLogger.logChannelDataFilteringFinishTableQuery(tableName, dataDistributionQuery.QueryId, '', isInitSync, isBaselineSync);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeBaselineDataSetExclusion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exclude baseline data from data set.
    /// </summary>
    /// <param name = "subJobAXSourceTables">The collection of the main table and its related tables for cases where the source table is a temp table.</param>
    internal abstract void executeBaselineDataSetExclusion(container subJobAXSourceTables = conNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDSDateFilterField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasource table date filter field with today's date.
    /// </summary>
    /// <param name = "ds">The datasource which will be set for date filter field.</param>
    internal void setDSDateFilterField(QueryBuildDataSource ds)
    {
        TableId tableId = ds.table();
        RetailCDXDateFilterField dateFilterField = RetailCDXDateFilterField::find(dataSyncContext.getChannelSchema(), tableId2Name(tableId));

        if (dateFilterField.DateFilterField != '' && fieldName2Id(tableId, dateFilterField.DateFilterField) != 0)
        {
            FieldId dateFilterFieldId = fieldName2Id(tableId, dateFilterField.DateFilterField);
            ds.addRange(dateFilterFieldId).value(strFmt('>%1', SysQuery::value(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - 1)));
            ds.addRange(dateFilterFieldId).value(SysQuery::value(DateTimeUtil::minValue())); // no need to filter a record if the its 'valid to' date is not set.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryDateFilterField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the query date filter field with today's date.
    /// </summary>
    /// <param name = "query">The query which will be set for date filter field.</param>
    internal void setQueryDateFilterField(Query query)
    {
        for (int i = 1; i <= query.dataSourceCount(); i++)
        {
            QueryBuildDataSource ds = query.dataSourceNo(i);
            this.setDSDateFilterField(ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert_QueryRecordset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the recordsets returned by the specified query into the specified target.
    /// </summary>
    /// <param name = "target">The target cursor.</param>
    /// <param name = "fieldMap">The target to source field map.</param>
    /// <param name = "queryRun">The query.</param>
    /// <param name = "targetLegalEntities">The <c>RetailTmpCDXTargetLegalEntity</c> table buffer.</param>
    /// <returns>The number of rows affected.</returns>
    internal int insert_QueryRecordset(Common target, Map fieldMap, QueryRun queryRun, RetailTmpCDXTargetLegalEntity targetLegalEntities = null)
    {
        if (!targetLegalEntities)
        {
            targetLegalEntities = this.dataSyncContext.openTargetLegalEntityTempTable();
        }

        int rowsAffected = 0;
        
        Query query = queryRun.query();

        if (RetailCDXCodeGen::isDataFilterQueryGlobal(query))
        {
            Query::insert_recordset(target, fieldMap, query);
            rowsAffected = target.RowCount();
        }
        else
        {
            if (RetailCdxFeatureControl::IsCrossCompanySetBasedOperationOnTempTableEnabled())
            {
                queryRun.allowCrossCompany(true);
                this.addTargetLegalEntityDS(queryRun, targetLegalEntities);

                // skipping alert events and datamethods is required when executing a cross company query
                target.skipDataMethods(true);
                target.skipDatabaseLog(true);
                target.skipEvents(true);

                Query::insert_recordset(target, fieldMap, queryRun.query());
                rowsAffected = target.RowCount();
            }
            else
            {
                while select TargetDataAreaId from targetLegalEntities
                {
                    changecompany(targetLegalEntities.TargetDataAreaId)
                    {
                        // Due to a kernel bug, the query object always use the first company and never changes its company context,
                        //  even if changecompany switches the x++ company context.
                        // To workaround this limitation, the LE specific table buffers of the query datasources has to be cleared
                        //  which forces the query to use the current company context.
                        this.clearLESpecificDataSourceBuffers(queryRun);

                        Query::insert_recordset(target, fieldMap, query);
                        rowsAffected = rowsAffected + target.RowCount();
                    }
                }
            }
        }

        return rowsAffected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLESpecificDataSourceBuffers</Name>
				<Source><![CDATA[
    private void clearLESpecificDataSourceBuffers(QueryRun queryRun)
    {
        Query q = queryRun.query();

        for (int dsCounter=1; dsCounter <= q.dataSourceCount(); dsCounter++)
        {
            TableId dsTableId = q.dataSourceNo(dsCounter).table();
            if (!RetailConnReplicationUtilities::isGlobalTable(tableId2Name(dsTableId)))
            {
                queryRun.getNo(dsCounter).clear();  // clear buffer
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTargetLegalEntityDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the RetailTmpCDXTargetLegalEntity datasource to the data filter query.
    /// </summary>
    /// <param name = "queryRun">The data filtering query.</param>
    /// <param name = "targetLegalEntities">
    /// The RetailTmpCDXTargetLegalEntity table buffer containing the list of target legal entities.
    /// </param>
    private void addTargetLegalEntityDS(QueryRun queryRun, RetailTmpCDXTargetLegalEntity targetLegalEntities)
    {
        Query query = queryRun.query();

        // add the RetailTmpCDXTargetLegalEntity datasource that is going to enable us to filter only the records from the LEs in the target legal entity list.
        // this is required when we use crosscompany feature. If we dont add a join to restrict which LEs to read from then 
        // the queries will return record from all LEs including the LEs not in the target legal entities list.
        QueryBuildDataSource leDS = query.dataSourceNo(query.dataSourceCount()).addDataSource(tableNum(RetailTmpCDXTargetLegalEntity), tableStr(RetailTmpCDXTargetLegalEntity));
        leDS.fields().dynamic(NoYes::No);
        leDS.joinMode(JoinMode::InnerJoin);
        leDS.relations(false);
        leDS.fields().clearFieldList();

        queryRun.setRecord(targetLegalEntities);

        for (int i=1; i < query.dataSourceCount(); i++)
        {
            QueryBuildDataSource ds = query.dataSourceNo(i);
            if (!RetailConnReplicationUtilities::isGlobalTable(tableId2Name(ds.table())))
            {
                leDS.addLink(fieldName2Id(ds.table(), 'DataAreaId'), fieldNum(RetailTmpCDXTargetLegalEntity, TargetDataAreaId), ds.name());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add fields to query for filtering data.
    /// </summary>
    /// <param name = "query">Query without fields.</param>
    /// <returns>Updated query with fields.</returns>
    protected abstract Query projectFields(Query query)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build field map for inserting the filtered result.
    /// </summary>
    /// <param name = "query">Query for filtering data.</param>
    /// <returns>Field map for inserting the filtered result.</returns>
    protected abstract Map buildFieldMapping(Query query)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInitQueryForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the full sync query for the table using the specified list of legal entities in the RetailTmpCDXTargetLegalEntity table buffer.
    /// </summary>
    /// <param name = "dataDistributionQuery">The <c>RetailCdxDataDistributionQuery</c> table buffer.</param>
    /// <param name = "isBaselineFullSync">If the full sync is for baseline data which will be used when handling new channels.</param>
    protected abstract void runInitQueryForTable(RetailCdxDataDistributionQuery dataDistributionQuery, boolean isBaselineFullSync)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFullSyncQueryForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the full sync query for the table using the specified list of legal entities in the RetailTmpCDXTargetLegalEntity table buffer.
    /// </summary>
    /// <param name = "dataDistributionQuery">The <c>RetailCdxDataDistributionQuery</c> table buffer.</param>
    /// <param name = "isBaselineFullSync">If the full sync is for baseline data which will be used when handling new channels.</param>
    /// <param name = "targetLegalEntities">The <c>RetailTmpCDXTargetLegalEntity</c> table buffer.</param>
    protected void runFullSyncQueryForTable(RetailCdxDataDistributionQuery dataDistributionQuery, boolean isBaselineFullSync, RetailTmpCDXTargetLegalEntity targetLegalEntities)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseCacheBasedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flag indicating whether should use cache based query.
    /// </summary>
    /// <returns>True if should use cache based query; false otherwise.</returns>
    protected abstract boolean shouldUseCacheBasedQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDeltaQueryForTable</Name>
				<Source><![CDATA[
    protected void runDeltaQueryForTable(RetailCdxDataDistributionQuery dataDistributionQuery, boolean isBaselineSync)
    {
        container packedQuery = dataDistributionQuery.PackedQuery;
        RetailCDXSqlQueryID queryID = dataDistributionQuery.QueryId;

        Query query = new Query(packedQuery);

        if (dataSyncContext.paramIsDateFilterEnabled())
        {
            this.setQueryDateFilterField(query);
        }

        // RetailCDXChangeRefTable1
        QueryBuildDataSource changeTrackingTempTableDS = query.dataSourceNo(query.dataSourceCount()).addDataSource(tableNum(RetailCDXChangeRefTable1), #Ref1DSName);
        changeTrackingTempTableDS.fields().dynamic(NoYes::No);
        changeTrackingTempTableDS.joinMode(JoinMode::InnerJoin);
        changeTrackingTempTableDS.relations(false);
        changeTrackingTempTableDS.addRange(fieldNum(RetailCDXChangeRefTable1, RefTableId));
        
        query = this.projectFields(query);
        query.skipAutoOrderBy(true);
        QueryRun queryRun = new QueryRun(query);

        QueryBuildDataSource targetChannelTempTableDS = queryRun.query().dataSourceName(#TargetChannelDSName);

        if (targetChannelTempTableDS)
        {
            if (isBaselineSync)
            {
                queryRun.setRecord(dataSyncContext.openTargetChannelTableBaseline());
            }
            else
            {
                queryRun.setRecord(targetChannelTempTable);
            }
        }

        queryRun.setRecord(changeTrackingTempTable);

        RetailCdxLinkSourceName linkSourceName;
        RetailCdxQueryFilter filter;
        RetailCdxQueryFilterId filterId;
        container dataDistributionQueryFilterContainer;
        RetailCDXDataDistributionQueryFilter dataDistributionQueryFilter;

        while select Filter, LinkSourceName, FilterId
            from dataDistributionQueryFilter
            order by dataDistributionQueryFilter.FilterID
            where dataDistributionQueryFilter.RetailConnChannelSchema == dataSyncContext.getChannelSchema()
               && dataDistributionQueryFilter.QueryID == queryID
        {
            // preload while select result to avoid timeout on RetailCDXDataDistributionQueryFilter cqlCursor
            dataDistributionQueryFilterContainer += [ [dataDistributionQueryFilter.LinkSourceName, dataDistributionQueryFilter.Filter, dataDistributionQueryFilter.FilterId] ];
        }

        QueryBuildDataSource queryRunChangeTrackingTempTableDS = queryRun.query().dataSourceName(#Ref1DSName);
        QueryBuildRange queryRunChangeTrackingTempTableDSRange = queryRunChangeTrackingTempTableDS.range(1);
        QueryBuildDataSource sourceTableDS = query.dataSourceNo(1);
        TableId sourceTableId = sourceTableDS.table();
        Map fieldMap = this.buildFieldMapping(query);

        for (int j = 1; j <= conLen(dataDistributionQueryFilterContainer); ++j)
        {
            [linkSourceName, filter, filterId] = conPeek(dataDistributionQueryFilterContainer, j);

            queryRunChangeTrackingTempTableDS.clearLinks();
            QueryBuildDataSource queryRunchangeTrackingSourceTableDS = queryRun.query().dataSourceName(linkSourceName);
            queryRunChangeTrackingTempTableDS.addLink(fieldName2id(queryRunchangeTrackingSourceTableDS.table(), 'RecId'), fieldNum(RetailCDXChangeRefTable1, RefRecId), linkSourceName);
            queryRunChangeTrackingTempTableDSRange.value(filter);

            sessionLogger.logChannelDataFilteringStartDeltaTableQueryFilter(tableId2Name(sourceTableId), queryID, curExt(), filterId);

            int rowsAffected = this.insert_QueryRecordset(legacyFilteredRecordsTempTable, fieldMap, queryRun);

            update_recordset legacyFilteredRecordsTempTable 
                setting RefTableID = sourceTableId,
                        SkipRecord = dataDistributionQuery.shouldSkipDataSync()
                where legacyFilteredRecordsTempTable.RefTableId == 0;

            sessionLogger.logChannelDataFilteringDeltaTableQueryFilterStop(tableId2Name(sourceTableId), queryID, curExt(), filterId, rowsAffected);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleNewlyMappedChannels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles data synchronization for channels that are mapped to an existing data group since the previous incremental sync.
    /// The channels are considered as newly mapped to a datagroup if
    ///    - they are added to an existing datastore for a given datagroup or
    ///    - new datastore containing the channels is added to an existing datagroup
    ///    - or an existing datastore is moved from one datagroup to another datagroup.
    /// </summary>
    /// <param name = "subJobAXSourceTables">A collection including the main source table for the data synchronization and all related tables if the source is a temp table.</param>
    internal abstract void handleNewlyMappedChannels(container subJobAXSourceTables)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataDistributionQueries</Name>
				<Source><![CDATA[
    internal abstract container getDataDistributionQueries(TableId tableId)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>