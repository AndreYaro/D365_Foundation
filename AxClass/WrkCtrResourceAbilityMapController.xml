<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrResourceAbilityMapController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WrkCtrResourceAbilityMapController</c> class loads and controls data for the
/// <c>WrkCtrResourceAbilityMap</c> form.
/// </summary>
public class WrkCtrResourceAbilityMapController
{
    WrkCtrGroupId       wrkCtrGroupIdFilter;

    // FormObservable attribute datefilter control gets updated, when binding is called from prev/next date controls
    [FormObservable]
    date                dateFilter;
    WrkCtrTypeFilter    wrkCtrTypeFilter;

    Set                 rowHeaders;

    Map                 abilityDataChanged;     // value=boolean
    Map                 abilityData;            // value=Map
    Map                 abilityColumnHeaders;   // value=set

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>abilityColumnHeaders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a set of column headers for a specific ability.
    /// </summary>
    /// <param name="_abilityType">
    /// The type of ability for which to get the columns.
    /// </param>
    /// <returns>
    /// A set of column headers for a specific ability.
    /// </returns>
    public Set abilityColumnHeaders(WrkCtrActivityRequirementType _abilityType)
    {
        return abilityColumnHeaders.lookup(_abilityType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>abilityData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a map that contains the cell data for a specific ability.
    /// </summary>
    /// <param name="_abilityType">
    /// The type of ability for which to get the data.
    /// </param>
    /// <returns>
    /// A map that contains cell data for a specific ability.
    /// </returns>
    public Map abilityData(WrkCtrActivityRequirementType _abilityType)
    {
        return abilityData.lookup(_abilityType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>abilityDataChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Boolean value that indicates whether the data for a specific ability has changed.
    /// </summary>
    /// <param name="_abilityType">
    /// The type of ability for which to get the columns.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether the data for a specific ability has changed.
    /// </returns>
    public boolean abilityDataChanged(WrkCtrActivityRequirementType _abilityType)
    {
        return abilityDataChanged.lookup(_abilityType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes all of the internal variables for each possible ability.
    /// </summary>
    protected void init()
    {
        DictEnum                        dictEnum = new DictEnum(enumnum(WrkCtrActivityRequirementType));
        WrkCtrActivityRequirementType   abilityType;
        int                             i;

        rowHeaders              = new Set(Types::String);

        abilityDataChanged      = new Map(Types::Enum, Types::Enum);
        abilityData             = new Map(Types::Enum, Types::Class);
        abilityColumnHeaders    = new Map(Types::Enum, Types::Class);

        for (i=0; i < dictEnum.values(); i++)
        {
            abilityType = dictEnum.index2Value(i);

            abilityDataChanged.insert(abilityType, NoYes::Yes);
            abilityData.insert(abilityType, new Map(Types::Container, Types::Record));
            abilityColumnHeaders.insert(abilityType, new Set(Types::String));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInsertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether cell data can be inserted into the internal maps.
    /// </summary>
    /// <param name = "_wrkCtrAbility">
    /// The <paramref name="_wrkCtrAbility"/> value that is used to determine if cell data can be inserted.
    /// </param>
    /// <returns>true if cell data can be inserted into the internal maps; otherwise, false.</returns>
    protected boolean canInsertData(WrkCtrAbility _wrkCtrAbility)
    {
        if (_wrkCtrAbility.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts cell data into the internal maps and makes sure that the column and row headers are updated.
    /// </summary>
    /// <param name="_wrkCtrTable">
    /// The resource for which to insert data.
    /// </param>
    /// <param name="_wrkCtrAbility">
    /// The <paramref name="_wrkCtrAbility"/> value indicates whether the method can insert.
    /// </param>
    protected void insertData( WrkCtrTable _wrkCtrTable, WrkCtrAbility _wrkCtrAbility)
    {
        WrkCtrAbility   existingRecord;
        container       key;
        boolean         insertValue = true;

        Set             columnHeaders;
        Map             data;
        str             columnIdentifier    = _wrkCtrAbility.AbilityName;
        str             rowIdentifier       = _wrkCtrTable.WrkCtrId;

        if (rowIdentifier && !rowHeaders.in(rowIdentifier))
        {
            rowHeaders.add(rowIdentifier);
        }

        if (!this.canInsertData(_wrkCtrAbility))
        {
            // No data to insert
            return;
        }

        key             = [columnidentifier, rowIdentifier];
        columnHeaders   = abilityColumnHeaders.lookup(_wrkCtrAbility.AbilityType);
        data            = abilityData.lookup(_wrkCtrAbility.AbilityType);

        if (columnIdentifier && !columnHeaders.in(columnIdentifier))
        {
            columnHeaders.add(columnIdentifier);
        }

        if (data.exists(key))
        {
            // Compare level values of existing and new record
            existingRecord = data.lookup(key);
            if (existingRecord.LevelValue >= _wrkCtrAbility.LevelValue )
            {
                insertValue = false;
            }
        }

        if (insertValue)
        {
            data.insert(key, _wrkCtrAbility);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the data for all of the abilities.
    /// </summary>
    public void loadData()
    {
        this.init();

        Query query = this.buildAbilitiesQuery();

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            this.insertData(queryRun.get(tablenum(WrkCtrTable)), queryRun.get(tablenum(WrkCtrAbility)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAbilitiesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to load the data for all of the abilities.
    /// </summary>
    /// <returns>The <c>Query</c> object.</returns>
    protected Query buildAbilitiesQuery()
    {
        Query query = new Query();

        query.recordLevelSecurity(true);
        query.validTimeStateDateRange(dateFilter, dateFilter);

        QueryBuildDataSource qbdsWrkCtrTable = query.addDataSource(tablenum(WrkCtrTable));
        qbdsWrkCtrTable.addOrderByField(fieldnum(WrkCtrTable,WrkCtrId));
        qbdsWrkCtrTable.addRange(fieldnum(WrkCtrTable,IsIndividualResource)).value(queryValue(NoYes::Yes));

        if (wrkCtrGroupIdFilter)
        {
            QueryBuildDataSource qbdsWrkCtrResourceGroupResource = qbdsWrkCtrTable.addDataSource(tablenum(WrkCtrResourceGroupResource));
            qbdsWrkCtrResourceGroupResource.joinMode(JoinMode::ExistsJoin);
            qbdsWrkCtrResourceGroupResource.addLink(fieldnum(WrkCtrTable,WrkCtrId),fieldnum(WrkCtrResourceGroupResource,WrkCtrId));

            QueryBuildDataSource qbdsWrkCtrResourceGroup = qbdsWrkCtrResourceGroupResource.addDataSource(tablenum(WrkCtrResourceGroup));
            qbdsWrkCtrResourceGroup.joinMode(JoinMode::ExistsJoin);
            qbdsWrkCtrResourceGroup.addLink(fieldnum(WrkCtrResourceGroupResource,ResourceGroup),fieldnum(WrkCtrResourceGroup,RecId));
            qbdsWrkCtrResourceGroup.addRange(fieldnum(WrkCtrResourceGroup,WrkCtrId)).value(queryValue(wrkCtrGroupIdFilter));
        }

        if (wrkCtrTypeFilter != WrkCtrTypeFilter::All)
        {
            qbdsWrkCtrTable.addRange(fieldnum(WrkCtrTable, WrkCtrType)).value(queryValue(wrkCtrTypeFilter));
        }

        QueryBuildDataSource qbdsWrkCtrAbility = qbdsWrkCtrTable.addDataSource(tablenum(WrkCtrAbility));
        qbdsWrkCtrAbility.joinMode(JoinMode::OuterJoin);
        qbdsWrkCtrAbility.addLink(fieldnum(WrkCtrTable,WrkCtrId),fieldnum(WrkCtrAbility,WrkCtrId));
        qbdsWrkCtrAbility.addRange(fieldnum(WrkCtrAbility, ValidFrom)).value(SysQuery::range(dateNull(),dateFilter));
        qbdsWrkCtrAbility.addRange(fieldnum(WrkCtrAbility, ValidTo)).value(SysQuery::range(dateFilter, dateNull()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        dateFilter = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        wrkCtrTypeFilter = WrkCtrTypeFilter::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFilter</Name>
				<Source><![CDATA[
    public TransDate parmDateFilter(TransDate _dateFilter = dateFilter)
    {
        if (!prmisdefault(_dateFilter))
        {
            dateFilter = _dateFilter;
        }

        return dateFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWrkCtrGroupIdFilter</Name>
				<Source><![CDATA[
    public WrkCtrGroupId parmWrkCtrGroupIdFilter(WrkCtrGroupId _wrkCtrGroupIdFilter = wrkCtrGroupIdFilter)
    {
        if (!prmisdefault(_wrkCtrGroupIdFilter))
        {
            wrkCtrGroupIdFilter = _wrkCtrGroupIdFilter;
        }

        return wrkCtrGroupIdFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWrkCtrTypeFilter</Name>
				<Source><![CDATA[
    public WrkCtrTypeFilter parmWrkCtrTypeFilter(WrkCtrTypeFilter _wrkCtrTypeFilter = wrkCtrTypeFilter)
    {
        if (!prmisdefault(_wrkCtrTypeFilter))
        {
            wrkCtrTypeFilter = _wrkCtrTypeFilter;
        }

        return wrkCtrTypeFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rowHeaders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a set of row headers that apply for all of the abilities.
    /// </summary>
    /// <returns>
    /// A set of row headers that apply for all of the abilities.
    /// </returns>
    public Set rowHeaders()
    {
        return rowHeaders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAbilityDataChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data for a specific ability to changed.
    /// </summary>
    /// <param name="_abilityType">
    /// The type of ability to set.
    /// </param>
    /// <param name="_changed">
    /// A Boolean value that indicates whether the data has been changed.
    /// </param>
    public void setAbilityDataChanged(WrkCtrActivityRequirementType _abilityType, boolean _changed)
    {
        abilityDataChanged.insert(_abilityType, _changed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WrkCtrResourceAbilityMapController construct()
    {
        return new WrkCtrResourceAbilityMapController();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>