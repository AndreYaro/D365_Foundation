<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankNegInstDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class BankNegInstDelete extends RunBase
{
    protected BankAccountID accountID;
    protected BankNegInstNum fromNegInstNum;
    protected BankNegInstNum toNeginstNum;

    protected DialogField dialogAccountId;
    protected DialogField dialogFromNegInstNum;
    protected DialogField dialogToNegInstNum;

    protected boolean makeAccountIdActive = true;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        accountID,
        fromNegInstNum,
        toNegInstNum
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteDocuments</Name>
				<Source><![CDATA[
    protected abstract void deleteDocuments()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogAccountId = dialog.addFieldValue(extendedTypeStr(CompanyBankAccountId), accountID);

        if (!makeAccountIdActive)
        {
            dialogAccountId.active(false);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        accountID = dialogAccountId.value();
        fromNegInstNum = dialogFromNegInstNum.value();
        toNeginstNum = dialogToNegInstNum.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBeDeleted</Name>
				<Source><![CDATA[
    protected abstract boolean mayBeDeleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountId</Name>
				<Source><![CDATA[
    public BankAccountID parmAccountId(BankAccount _accountId = accountID)
    {
        accountID = _accountId;

        return accountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromNegInstNum</Name>
				<Source><![CDATA[
    public BankNegInstNum parmFromNegInstNum(BankNegInstNum _fromNegInstNum = fromNegInstNum)
    {
        fromNegInstNum = _fromNegInstNum;

        return fromNegInstNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToNegInstNum</Name>
				<Source><![CDATA[
    public BankNegInstNum parmToNegInstNum(BankNegInstNum _toNegInstNum = toNegInstNum)
    {
        toNegInstNum = _toNegInstNum;

        return toNegInstNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;
            this.deleteDocuments();
            ttscommit;
            info(this.txtDocumentsDeletedOk());
        }

        catch (Exception::Error)
        {
            throw error("@SYS21628");
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDocumentsDeletedOk</Name>
				<Source><![CDATA[
    protected abstract str txtDocumentsDeletedOk()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        if (!accountID)
        {
            ret = checkFailed("@SYS24651");
        }

        ret = ret && this.validateNegInstRange();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNegInstRange</Name>
				<Source><![CDATA[
    private boolean validateNegInstRange()
    {
        const str digits = '0123456789';
        int maxInt64Length = strLen(int642Str(int64Max()));
        boolean isFromNegInstNumAnInt64;
        boolean isToNegInstNumAnInt64;
        boolean ret = true;

        isFromNegInstNumAnInt64 = strRem(fromNegInstNum, digits) == '' && strLen(fromNegInstNum) <= maxInt64Length;
        isToNegInstNumAnInt64 = strRem(toNeginstNum, digits) == '' && strLen(toNeginstNum) <= maxInt64Length;

        if (isFromNegInstNumAnInt64 && isToNegInstNumAnInt64)
        {
            if (str2Int64(fromNegInstNum) > str2Int64(toNeginstNum))
            {
                ret = false;
            }
        }
        else
        {
            if (fromNegInstNum > toNegInstNum)
            {
                ret = false;
            }
        }

        if (!ret)
        {
            checkFailed(strfmt("@SYS91558", "@SYS53942", "@SYS4083"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankNegInstDelete construct(BankNegInst _negInst)
    {
        BankNegInstDelete bankNegInstDelete;

        switch (_negInst)
        {
            case BankNegInst::Check:
                bankNegInstDelete = new BankChequeDelete();
                break;

            case BankNegInst::BillOfExchange:
                bankNegInstDelete = new BankBillOfExchangeDelete();
                break;

            case BankNegInst::PromissoryNote:
                bankNegInstDelete = new BankPromissoryNoteDelete();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return bankNegInstDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBankAccountTable</Name>
				<Source><![CDATA[
    public static BankNegInstDelete newBankAccountTable(BankNegInst _bankNegInst, BankAccountTable _bankAccountTable)
    {
        BankNegInstDelete negInstDelete;

        negInstDelete = BankNegInstDelete::construct(_bankNegInst);

        negInstDelete.getLast();

        negInstDelete.parmAccountId(_bankAccountTable.AccountID);
        negInstDelete.parmFromNegInstNum('');
        negInstDelete.parmToNegInstNum('');

        return negInstDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBankNegInstTableMap</Name>
				<Source><![CDATA[
    public static BankNegInstDelete newBankNegInstTableMap(BankNegInst _bankNegInst, BankNegInstTableMap _bankNegInstTableMap)
    {
        BankNegInstDelete negInstDelete;

        negInstDelete = BankNegInstDelete::construct(_bankNegInst);

        negInstDelete.getLast();

        negInstDelete.parmAccountId(_bankNegInstTableMap.CompanyBankAccountId);
        negInstDelete.parmFromNegInstNum('');
        negInstDelete.parmToNegInstNum('');

        return negInstDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountIdInactive</Name>
				<Source><![CDATA[
    protected void setAccountIdInactive()
    {
        makeAccountIdActive = false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>