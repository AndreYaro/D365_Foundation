<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransStatic</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustVendTransStatic
{
    fieldId transOpenFieldIdCashDiscDate;
    fieldId transOpenFieldIdCashDiscAmount;
    fieldId transPaymId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custVendSettlement</Name>
				<Source><![CDATA[
    abstract public CustVendSettlement custVendSettlement()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTable</Name>
				<Source><![CDATA[
    abstract CustVendTable custVendTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTrans</Name>
				<Source><![CDATA[
    abstract public CustVendTrans custVendTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransCashDisc</Name>
				<Source><![CDATA[
    abstract public CustVendTransCashDisc custVendTransCashDisc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransOpen</Name>
				<Source><![CDATA[
    abstract CustVendTransOpen custVendTransOpen()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherDate</Name>
				<Source><![CDATA[
    abstract CustVendTrans findVoucherDate(Voucher _voucher,
                                           TransDate _transDate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldId</Name>
				<Source><![CDATA[
    protected void initFieldId()
    {
        DictTable dictTable;
        DictField dictField;

        fieldId fieldId;
        int i;

        // CustVendTrans
        dictTable = new DictTable(this.custVendTrans().TableId);
        for (i = 1; i <= dictTable.fieldCnt(); i++)
        {
            fieldId = dictTable.fieldCnt2Id(i);
            dictField = dictTable.fieldObject(fieldId);

            switch (dictField.typeId())
            {
                case extendedtypenum(PaymId) :
                    transPaymId = dictField.id();
                    break;
            }
        }

        // CustVendTransOpen
        dictTable = new DictTable(this.custVendTransOpen().TableId);

        for (i=1; i <= dictTable.fieldCnt(); i++)
        {
            fieldId = dictTable.fieldCnt2Id(i);
            dictField = dictTable.fieldObject(fieldId);

            switch (dictField.typeId())
            {
                case extendedtypenum(CustCashDiscDate),
                     extendedtypenum(VendCashDiscDate) :
                    transOpenFieldIdCashDiscDate = dictField.id();
                    break;

                case extendedtypenum(CustCashDiscAmount),
                     extendedtypenum(VendCashDiscAmount) :
                    transOpenFieldIdCashDiscAmount = dictField.id();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleCustVend</Name>
				<Source><![CDATA[
    public ModuleCustVend moduleCustVend()
    {
        ModuleCustVend moduleCustVend;

        switch (this.sysModule())
        {
            case SysModule::Cust :
                moduleCustVend = ModuleCustVend::Cust;
                break;

            case SysModule::Vend :
                moduleCustVend = ModuleCustVend::Vend;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return moduleCustVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysModule</Name>
				<Source><![CDATA[
    abstract public SysModule sysModule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transMethodNameCustVendTableName</Name>
				<Source><![CDATA[
    abstract public str transMethodNameCustVendTableName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpenFieldIdCashDiscAmount</Name>
				<Source><![CDATA[
    public fieldId transOpenFieldIdCashDiscAmount()
    {
        if (!transOpenFieldIdCashDiscAmount)
            this.initFieldId();

        return transOpenFieldIdCashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpenFieldIdCashDiscDate</Name>
				<Source><![CDATA[
    public fieldId transOpenFieldIdCashDiscDate()
    {
        if (!transOpenFieldIdCashDiscDate)
            this.initFieldId();

        return transOpenFieldIdCashDiscDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendTransStatic construct(CustVendTrans _custVendTrans)
    {
        CustVendTransStatic custVendTransStatic;

        switch (_custVendTrans.TableId)
        {
            case tablenum(CustTrans) :
                custVendTransStatic = new CustTransStatic();
                break;

            case tablenum(VendTrans) :
                custVendTransStatic = new VendTransStatic();
                break;
        }

        return custVendTransStatic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newModuleCustVend</Name>
				<Source><![CDATA[
    static public CustVendTransStatic newModuleCustVend(ModuleCustVend _moduleCustVend)
    {
        CustVendTransStatic custVendTransStatic;
        CustVendTrans custVendTrans;
        CustTrans custTrans;
        VendTrans vendTrans;

        switch (_moduleCustVend)
        {
            case ModuleCustVend::Cust :
                custVendTrans = custTrans;
                break;

            case ModuleCustVend::Vend :
                custVendTrans = vendTrans;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        custVendTransStatic = CustVendTransStatic::construct(custVendTrans);

        return custVendTransStatic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTrans</Name>
				<Source><![CDATA[
    public static CustVendTransStatic newTrans(CustVendTrans _custVendTrans)
    {
        return CustVendTransStatic::construct(_custVendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransOpen</Name>
				<Source><![CDATA[
    public static CustVendTransStatic newTransOpen(CustVendTransOpen _custVendTransOpen)
    {
        CustTrans custTrans;
        VendTrans vendTrans;
        CustVendTrans custVendTrans;

        switch (_custVendTransOpen.TableId)
        {
            case tablenum(CustTransOpen):
                custVendTrans = custTrans;
                break;

            case tablenum(VendTransOpen):
                custVendTrans = vendTrans;
                break;
        }

        select firstonly custVendTrans
            where custVendTrans.RecId == _custVendTransOpen.RefRecId;

        return CustVendTransStatic::construct(custVendTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>