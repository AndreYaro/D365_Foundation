<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjGroupChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjGroupChange extends RunBase
{
    ProjTable           projTable;
    ProjGroup           projGroupTo;

    ProjGroupId         projGroupIdTo,
                        projGroupIdFrom;

    ProjInvoiceProjId   projInvoiceProjId;

    ProjId              projId;
    ProjWipId           projWipId;
    ProjType            projType;

    boolean             showChild;

    #define.WildcardCharacter('*')

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        projGroupIdTo,
        projId,
        projWIPId,
        projType,
        showChild,
        projInvoiceProjId,
        projGroupIdFrom
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCost</Name>
				<Source><![CDATA[
    private boolean checkCost()
    {
        boolean ret = true;

        ret = this.checkSubscription();

        if (ret)
        {
            ret = this.checkOnAcc();
        }

        if (ret)
        {
            ret = this.checkFee();
        }

        if (ret)
        {
            ret = this.checkSalesType(SalesType::Sales);
        }

        if (ret)
        {
            ret = this.checkCostPostToWIP();
        }

        if (ret)
        {
            ret = this.checkCostPostToNever();
        }

        if (ret)
        {
            ret = this.checkCostPostToNone();
        }

        if (ret)
        {
            ret = this.checkCostPostToBalance();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCostPostToBalance</Name>
				<Source><![CDATA[
    private boolean checkCostPostToBalance()
    {
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransCost       projEmplTransCost;
        ProjCostTrans           projCostTrans;
        ProjCostTransCost       projCostTransCost;
        ProjItemTransCost       projItemTransCost;
        boolean                 retValue;

        retValue = true;

        // Test for Hour transactions
        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly RecId from projEmplTrans
                    where projEmplTrans.ProjId like this.parmProjId()+ #WildcardCharacter
                        join RecId from projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
            }
            else
            {
                select firstonly RecId from projEmplTrans
                    where projEmplTrans.ProjId == this.parmProjId()
                        join RecId from projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly RecId from projEmplTrans
                join RecId from projEmplTransCost
                    where projEmplTransCost.TransId == projEmplTrans.TransId
                        && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet
                join RecId from projTable
                    where projTable.ProjId      == projEmplTrans.ProjId
                       && projTable.wipProject  == this.parmProjWIPId();
        }
        if (projEmplTrans.RecId)
        {
            retValue = checkFailed(strFmt("@SYS83495",tablePName(ProjEmplTrans)));
        }

        // Test for Expense transactions
        if (retValue)
        {
            if (this.parmProjId())
            {
                if (this.parmShowChild())
                {
                    select firstonly RecId from projCostTrans
                        where projCostTrans.ProjId like this.parmProjId()+ #WildcardCharacter
                            join RecId from projCostTransCost
                                where projCostTransCost.TransId == projCostTrans.TransId
                                    && projCostTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
                }
                else
                {
                    select firstonly RecId from projCostTrans
                        where projCostTrans.ProjId == this.parmProjId()
                            join RecId from projCostTransCost
                                where projCostTransCost.TransId == projCostTrans.TransId
                                    && projCostTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
                }
            }
            else if (this.parmProjWIPId())
            {
                select firstonly RecId from projCostTrans
                    join RecId from projCostTransCost
                        where projCostTransCost.TransId == projCostTrans.TransId
                            && projCostTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet
                    join RecId from projTable
                        where projTable.ProjId      == projCostTrans.ProjId
                           && projTable.wipProject  == this.parmProjWIPId();
            }
            if (projCostTrans.RecId)
            {
                retValue = checkFailed(strFmt("@SYS83495",tablePName(ProjCostTrans)));
            }
        }

        // Test for Item transactions
        if (retValue)
        {
            if (this.parmProjId())
            {
                if (this.parmShowChild())
                {
                    select firstonly RecId from projItemTransCost
                        where projItemTransCost.ProjId like this.parmProjId()+ #WildcardCharacter
                            && projItemTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
                }
                else
                {
                    select firstonly RecId from projItemTransCost
                        where projItemTransCost.ProjId == this.parmProjId()
                            && projItemTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
                }
            }
            else if (this.parmProjWIPId())
            {
                select firstonly RecId from projItemTransCost where
                        projItemTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet
                    join RecId from projTable
                        where projTable.ProjId      == projItemTransCost.ProjId
                           && projTable.wipProject  == this.parmProjWIPId();
            }
            if (projItemTransCost.RecId)
            {
                retValue = checkFailed(strFmt("@SYS83495",tablePName(ProjItemTransCost)));
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCostPostToNever</Name>
				<Source><![CDATA[
    private boolean checkCostPostToNever()
    {
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransCost       projEmplTransCost;
        boolean                 retValue;

        retValue = true;

        // Test for Hour transactions
        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly RecId from projEmplTrans
                    where projEmplTrans.ProjId like this.parmProjId()+ #WildcardCharacter
                        join RecId from projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::Never;
            }
            else
            {
                select firstonly RecId from projEmplTrans
                    where projEmplTrans.ProjId == this.parmProjId()
                        join RecId from projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::Never;
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly RecId from projEmplTrans
                join RecId from projEmplTransCost
                    where projEmplTransCost.TransId == projEmplTrans.TransId
                        && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::Never
                join RecId from projTable
                    where projTable.ProjId      == projEmplTrans.ProjId
                       && projTable.wipProject  == this.parmProjWIPId();
        }
        if (projEmplTrans.RecId)
        {
            retValue = checkFailed(strFmt("@SYS83497",tablePName(ProjEmplTrans), ProjLedgerStatus::Never));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCostPostToNone</Name>
				<Source><![CDATA[
    private boolean checkCostPostToNone()
    {
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransCost       projEmplTransCost;
        boolean                 retValue;

        retValue = true;

        // Test for Hour transactions
        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly RecId from projEmplTrans
                    where projEmplTrans.ProjId like this.parmProjId()+ #WildcardCharacter
                        join RecId from projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::None;
            }
            else
            {
                select firstonly RecId from projEmplTrans
                    where projEmplTrans.ProjId == this.parmProjId()
                        join RecId from projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::None;
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly RecId from projEmplTrans
                join RecId from projEmplTransCost
                    where projEmplTransCost.TransId == projEmplTrans.TransId
                        && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::None
                join RecId from projTable
                    where projTable.ProjId      == projEmplTrans.ProjId
                       && projTable.wipProject  == this.parmProjWIPId();
        }
        if (projEmplTrans.RecId)
        {
            retValue = checkFailed(strFmt("@SYS83497",tablePName(ProjEmplTrans), ProjLedgerStatus::None));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCostPostToWIP</Name>
				<Source><![CDATA[
    private boolean checkCostPostToWIP()
    {
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransSale       projEmplTransSale;
        ProjCostTrans           projCostTrans;
        ProjCostTransSale       projCostTransSale;
        ProjItemTrans           projItemTrans;
        ProjItemTransSale       projItemTransSale;
        boolean                 retValue;

        retValue = true;

        // Test for Hour transactions
        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly RecId from projEmplTrans
                    where projEmplTrans.ProjId like this.parmProjId()+ #WildcardCharacter
                        join RecId from projEmplTransSale
                            where projEmplTransSale.TransId == projEmplTrans.TransId
                                && projEmplTransSale.LedgerSalesPosted == NoYes::Yes;
            }
            else
            {
                select firstonly RecId from projEmplTrans
                    where projEmplTrans.ProjId == this.parmProjId()
                        join RecId from projEmplTransSale
                            where projEmplTransSale.TransId == projEmplTrans.TransId
                                && projEmplTransSale.LedgerSalesPosted == NoYes::Yes;
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly RecId from projEmplTrans
                join RecId from projEmplTransSale
                    where projEmplTransSale.TransId == projEmplTrans.TransId
                        && projEmplTransSale.LedgerSalesPosted == NoYes::Yes
                join RecId from projTable
                    where projTable.ProjId      == projEmplTrans.ProjId
                       && projTable.wipProject  == this.parmProjWIPId();
        }
        if (projEmplTrans.RecId)
        {
            retValue = checkFailed(strFmt("@SYS83494",tablePName(ProjEmplTrans)));
        }

        // Test for Expense transactions
        if (retValue)
        {
            if (this.parmProjId())
            {
                if (this.parmShowChild())
                {
                    select firstonly RecId from projCostTrans
                        where projCostTrans.ProjId like this.parmProjId()+ #WildcardCharacter
                            join RecId from projCostTransSale
                                where projCostTransSale.TransId == projCostTrans.TransId
                                    && projCostTransSale.LedgerSalesPosted == NoYes::Yes;
                }
                else
                {
                    select firstonly RecId from projCostTrans
                        where projCostTrans.ProjId == this.parmProjId()
                            join RecId from projCostTransSale
                                where projCostTransSale.TransId == projCostTrans.TransId
                                    && projCostTransSale.LedgerSalesPosted == NoYes::Yes;
                }
            }
            else if (this.parmProjWIPId())
            {
                select firstonly RecId from projCostTrans
                    join RecId from projCostTransSale
                        where projCostTransSale.TransId == projCostTrans.TransId
                            && projCostTransSale.LedgerSalesPosted == NoYes::Yes
                    join projTable
                        where projTable.ProjId      == projCostTrans.ProjId
                           && projTable.wipProject  == this.parmProjWIPId();
            }
            if (projCostTrans.RecId)
            {
                retValue = checkFailed(strFmt("@SYS83494",tablePName(ProjCostTrans)));
            }
        }

        // Test for Item transactions
        if (retValue)
        {
            if (this.parmProjId())
            {
                if (this.parmShowChild())
                {
                    select firstonly RecId from projItemTrans
                        where projItemTrans.ProjId like this.parmProjId()+ #WildcardCharacter
                            join RecId from projItemTransSale
                                where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                                    && projItemTransSale.LedgerSalesPosted == NoYes::Yes;
                }
                else
                {
                    select firstonly RecId from projItemTrans
                        where projItemTrans.ProjId == this.parmProjId()
                            join RecId from projItemTransSale
                                where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                                    && projItemTransSale.LedgerSalesPosted == NoYes::Yes;
                }
            }
            else if (this.parmProjWIPId())
            {
                select firstonly RecId from projItemTrans
                    join RecId from projItemTransSale
                        where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                            && projItemTransSale.LedgerSalesPosted == NoYes::Yes
                    join RecId from projTable
                        where projTable.ProjId      == projItemTrans.ProjId
                           && projTable.wipProject  == this.parmProjWIPId();
            }
            if (projItemTrans.RecId)
            {
                retValue = checkFailed(strFmt("@SYS83494",tablePName(ProjItemTrans)));
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmplStatusNotEqual</Name>
				<Source><![CDATA[
    private boolean checkEmplStatusNotEqual(ProjLedgerStatus ledgerStatus)
    {
        ProjEmplTrans       projEmplTrans;
        ProjEmplTransCost   projEmplTransCost;
        boolean             ret = true;

        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly RecId from projEmplTrans
                    where  projEmplTrans.ProjId like this.parmProjId() + #WildCardCharacter
                        join RecId from projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.LedgerStatusCost != ledgerStatus;
            }
            else
            {
                select firstonly RecId from projEmplTrans
                    where projEmplTrans.ProjId == this.parmProjId()
                        join RecId from projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.LedgerStatusCost != ledgerStatus;
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly RecId from projEmplTrans
                join RecId from projEmplTransCost
                    where projEmplTransCost.TransId == projEmplTrans.TransId
                        && projEmplTransCost.LedgerStatusCost != ledgerStatus
                join RecId from projTable
                    where projTable.ProjId == projEmplTrans.ProjId
                       && projTable.wipProject  == this.parmProjWIPId();
        }

        if (projEmplTrans.RecId)
        {
            ret = checkFailed(strFmt("@SYS91025",projGroupTo.ProjType,tablePName(ProjEmplTrans),projEmplTransCost.LedgerStatusCost));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExpense</Name>
				<Source><![CDATA[
    private boolean checkExpense()
    {
        ProjCostTrans       projCostTrans;
        boolean             ret = true;

        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly projCostTrans
                    where projCostTrans.ProjId like this.parmProjId()+ #WildcardCharacter;
            }
            else
            {
                select firstonly projCostTrans
                    where projCostTrans.ProjId == this.parmProjId();
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly projCostTrans
                join projTable
                    where projTable.ProjId      == projCostTrans.ProjId
                       && projTable.wipProject  == this.parmProjWIPId();
        }
        if (projCostTrans)
        {
            ret = checkFailed(strFmt("@SYS83397",projGroupTo.ProjType,tablePName(ProjCostTrans)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFee</Name>
				<Source><![CDATA[
    private boolean checkFee()
    {
        ProjRevenueTrans    projRevenueTrans;
        boolean             ret = true;

        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly projRevenueTrans
                    where projRevenueTrans.ProjId like this.parmProjId()+ #WildcardCharacter;
            }
            else
            {
                select firstonly projRevenueTrans
                    where projRevenueTrans.ProjId == this.parmProjId();
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly projRevenueTrans
                join projTable
                    where projTable.ProjId      == projRevenueTrans.ProjId
                       && projTable.wipProject  == this.parmProjWIPId();
        }
        if (projRevenueTrans)
        {
            ret = checkFailed(strFmt("@SYS83397",projGroupTo.ProjType,tablePName(ProjRevenueTrans)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixedPrice</Name>
				<Source><![CDATA[
    private boolean checkFixedPrice()
    {
        ProjGroup               projGroupFrom;

        ProjOnAccTrans          projOnAccTrans;
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        boolean                 onAcc   = false;

        boolean ret = true;

        #localMacro.checkOffset
        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstOnly %1
                    where %1.projId like this.parmProjId()+"*" && %1.TransactionOrigin;
            }
            else
            {
                select firstOnly %1
                    where %1.projId == this.parmProjId()&& %1.TransactionOrigin;
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstOnly %1
                      where %1.TransactionOrigin
                join ProjTable
                    where ProjTable.ProjId      == %1.ProjID
                       && ProjTable.WIPProject  == this.parmProjWIPId();
        }

    #endMacro

        #localMacro.checkAdjusted
        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstOnly %1
                    where %1.projId like this.parmProjId()+"*"
                        join %2
                            where %2.TransId == %1.TransId && %2.TransStatus != ProjTransStatus::Adjusted;
            }
            else
            {
                select firstOnly %1
                    where %1.projId == this.parmProjId()
                        join %2
                            where %2.TransId == %1.TransId && %2.TransStatus != ProjTransStatus::Adjusted;
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstOnly %1
                join %2
                    where %2.TransId == %1.TransId && %2.TransStatus != ProjTransStatus::Adjusted
                join ProjTable
                    where ProjTable.ProjId      == %1.ProjID
                       && ProjTable.WIPProject  == this.parmProjWIPId();
        }

    #endMacro

        ;
        projGroupFrom   = ProjGroup::find(this.parmProjGroupIdFrom());

        ret = this.checkSubscription(true);

        if (ret)
        {
            ret = this.checkOnAccStatus();
        }

        if (ret)
        {
            ret = this.checkCostPostToWIP();
        }

        if (ret)
        {
            onAcc    = true;

            #checkOffset(ProjOnAccTrans)
            if (projOnAccTrans.TransactionOrigin == ProjOrigin::Deduction)
            {
                ret = checkFailed(strFmt("@SYS83503",projGroupTo.ProjType,tablePName(ProjOnAccTrans)));
            }
                }

        if (ret)
        {
            #checkAdjusted(ProjRevenueTrans,ProjRevenueTransSale)
            if (projRevenueTrans)
            {
                ret = checkFailed(strFmt("@SYS83497",tablePName(ProjRevenueTrans),projRevenueTransSale.TransStatus));
            }
                }

        if (ret)
        {
            ret = this.checkSalesType(SalesType::Sales);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInternal</Name>
				<Source><![CDATA[
    private boolean checkInternal()
    {
        boolean ret = true;

        ret = this.checkSubscription();

        if (ret)
        {
            ret = this.checkOnAcc();
        }

        if (ret)
        {
            ret = this.checkFee();
        }

        if (ret)
        {
            ret = this.checkSalesType(SalesType::Sales);
        }

        if (ret)
        {
            ret = this.checkCostPostToWIP();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvestment</Name>
				<Source><![CDATA[
    private boolean checkInvestment()
    {
        boolean ret = true;

        ret = this.checkSubscription();

        if (ret)
        {
            ret = this.checkOnAcc();
        }

        if (ret)
        {
            ret = this.checkFee();
        }

        if (ret)
        {
            ret = this.checkSalesType(SalesType::Sales);
        }

        if (ret)
        {
            ret = this.checkCostPostToWIP();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItem</Name>
				<Source><![CDATA[
    private boolean checkItem()
    {
        ProjItemTrans       projItemTrans;
        boolean             ret = true;

        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly projItemTrans
                    where projItemTrans.ProjId like this.parmProjId()+ #WildcardCharacter;
            }
            else
            {
                select firstonly projItemTrans
                    where projItemTrans.ProjId == this.parmProjId();
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly projItemTrans
                join projTable
                    where projTable.ProjId      == projItemTrans.ProjId
                       && projTable.wipProject  == this.parmProjWIPId();
        }
        if (projItemTrans)
        {
            ret = checkFailed(strFmt("@SYS83397",projGroupTo.ProjType,tablePName(ProjItemTrans)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNeverLedger</Name>
				<Source><![CDATA[
    private boolean checkNeverLedger()
    {
        boolean             ret = true;
        ProjEmplTrans       projEmplTrans;
        ProjEmplTransCost   projEmplTransCost;
        ProjGroup           projGroupFrom = ProjGroup::find(this.parmProjGroupIdFrom());

        if (projGroupFrom.EmplTransCost == ProjLedgerStatus::Never &&
            projGroupTo.EmplTransCost   != ProjLedgerStatus::Never)
        {
            if (this.parmProjId())
            {
                if (this.parmShowChild())
                {
                    select firstonly RecId from projEmplTrans
                        where  projEmplTrans.ProjId like this.parmProjId()+ #WildcardCharacter
                            join RecId from projEmplTransCost
                                where projEmplTransCost.TransId == projEmplTrans.TransId
                                    && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::Never;
                }
                else
                {
                    select firstonly RecId from projEmplTrans
                        where projEmplTrans.ProjId == this.parmProjId()
                            join RecId from projEmplTransCost
                                where projEmplTransCost.TransId == projEmplTrans.TransId
                                    && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::Never;
                }
            }
            else if (this.parmProjWIPId())
            {
                select firstonly RecId from projEmplTrans
                    join RecId from projEmplTransCost
                        where projEmplTransCost.TransId == projEmplTrans.TransId
                            && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::Never
                    join RecId from projTable
                        where projTable.ProjId      == projEmplTrans.ProjId
                           && projTable.wipProject  == this.parmProjWIPId();
            }

            if (projEmplTrans.RecId)
            {
                ret = checkFailed(strFmt("@SYS83495",tablePName(ProjEmplTrans)));
            }
        }

        if (ret)
        {
            if (projGroupFrom.EmplTransCost != ProjLedgerStatus::Never &&
                projGroupTo.EmplTransCost   == ProjLedgerStatus::Never)
            {
                if (this.parmProjId())
                {
                    if (this.parmShowChild())
                    {
                        select firstonly RecId from projEmplTrans
                            where  projEmplTrans.ProjId like this.parmProjId()+ #WildcardCharacter
                                join RecId from projEmplTransCost
                                    where projEmplTransCost.TransId == projEmplTrans.TransId
                                        && projEmplTransCost.LedgerStatusCost != ProjLedgerStatus::Never;
                    }
                    else
                    {
                        select firstonly RecId from projEmplTrans
                            where projEmplTrans.ProjId == this.parmProjId()
                                join RecId from projEmplTransCost
                                    where projEmplTransCost.TransId == projEmplTrans.TransId
                                        && projEmplTransCost.LedgerStatusCost!= ProjLedgerStatus::Never;
                    }
                }
                else if (this.parmProjWIPId())
                {
                    select firstonly RecId from projEmplTrans
                        join RecId from projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.LedgerStatusCost != ProjLedgerStatus::Never
                        join RecId from projTable
                            where projTable.ProjId      == projEmplTrans.ProjId
                               && projTable.wipProject  == this.parmProjWIPId();
                }

                if (projEmplTrans.RecId)
                {
                    ret = checkFailed(strFmt("@SYS83495",tablePName(ProjEmplTrans)));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOnAcc</Name>
				<Source><![CDATA[
    private boolean checkOnAcc()
    {
        ProjOnAccTrans      projOnAccTrans;
        boolean             ret = true;

        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly projOnAccTrans
                    where projOnAccTrans.ProjID like this.parmProjId()+ #WildcardCharacter;
            }
            else
            {
                select firstonly projOnAccTrans
                    where projOnAccTrans.ProjID == this.parmProjId();
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly projOnAccTrans
                join projTable
                    where projTable.ProjId      == projOnAccTrans.ProjID
                       && projTable.wipProject  == this.parmProjWIPId();
        }
        if (projOnAccTrans)
        {
            ret = checkFailed(strFmt("@SYS83397",projGroupTo.ProjType,tablePName(ProjOnAccTrans)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOnAccStatus</Name>
				<Source><![CDATA[
    private boolean checkOnAccStatus()
    {
        ProjOnAccTrans      projOnAccTrans;
        ProjOnAccTransSale  projOnAccTransSale;

        boolean            ret = true;
        ProjGroup           projGroupFrom;

        #localMacro.checkStatusInvoiceCN
        (%1.TransStatus      == ProjTransStatus::Invoiced ||
         %1.TransStatus      == ProjTransStatus::CreditnoteProposal ||
         %1.TransStatus      == ProjTransStatus::MarkedCreditnote)
    #endMacro

        #localMacro.checkRegistedProposal
        (%1.TransStatus      == ProjTransStatus::Registered ||
         %1.TransStatus      == ProjTransStatus::InvoiceProposal)
    #endMacro

        #localMacro.checkStatus
        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstOnly %1
                    where %1.projId like this.parmProjId()+ '*'
                        join %2
                            where %2.TransId == %1.TransId &&
                                %3(%2);
            }
            else
            {
                select firstOnly %1
                    where %1.projId == this.parmProjId()
                        join %2
                            where %2.TransId == %1.TransId &&
                                %3(%2);
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstOnly %1
                join %2
                    where %2.TransId == %1.TransId &&
                        %3(%2)
                join ProjTable
                    where ProjTable.ProjId      == %1.ProjID
                       && ProjTable.WIPProject  == this.parmProjWIPId();
        }
    #endMacro

        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly projOnAccTrans
                    where projOnAccTrans.ProjID like this.parmProjId()+ '*';
            }
            else
            {
                select firstonly projOnAccTrans
                    where projOnAccTrans.ProjID == this.parmProjId();
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly projOnAccTrans
                join projTable
                    where projTable.ProjId      == projOnAccTrans.ProjID
                       && projTable.wipProject  == this.parmProjWIPId();
        }

        if (! projOnAccTrans)
        {
            return true;
        }

        projGroupFrom   = ProjGroup::find(this.parmProjGroupIdFrom());

        if (ret)
        {
            if (((projGroupFrom.InvoicePosting == ProjLedgerStatusOnAcc::BalanceSheet) && (projGroupTo.InvoicePosting   == ProjLedgerStatusOnAcc::BalanceSheet)) ||
                ((projGroupFrom.InvoicePosting == ProjLedgerStatusOnAcc::Operations)   && (projGroupTo.InvoicePosting   == ProjLedgerStatusOnAcc::Operations)))
            {
                ret = true;
            }
            else
            {
                #checkStatus(ProjOnAccTrans,ProjOnAccTransSale,#checkStatusInvoiceCN)
                if (projOnAccTrans)
                {
                    ret = checkFailed("@SYS83491");
            }
            }
        }

        if (ret)
        {
            if (((projGroupFrom.InvoicePosting == ProjLedgerStatusOnAcc::BalanceSheet) && (projGroupTo.InvoicePosting == ProjLedgerStatusOnAcc::None))  ||
                ((projGroupFrom.InvoicePosting == ProjLedgerStatusOnAcc::Operations)   && (projGroupTo.InvoicePosting == ProjLedgerStatusOnAcc::None)))
            {
                #checkStatus(ProjOnAccTrans,ProjOnAccTransSale,#checkRegistedProposal)
                if (projOnAccTrans)
                {
                    ret = checkFailed("@SYS83491");
            }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionForPostedTrxAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a ledger dimension number based on the specified project, category, and account type.
    /// </summary>
    /// <param name = "_projAccountType">
    ///     The posting account type for the transaction.
    /// </param>
    /// <param name = "_common">
    ///     The common buffer.
    /// </param>
    /// <returns>
    ///     The ledger dimension that is used by the transaction, based on the parameters for posting.
    /// </returns>
    [Wrappable(true)]
    protected final LedgerDimensionDefaultAccount getLedgerDimensionForPostedTrxAccounts(ProjAccountType _projAccountType, Common _common)
    {
        LedgerDimensionDefaultAccount ledgerDimension;
        switch (_common.TableId)
        {
            case(tableNum(ProjEmplTrans)):
                ProjEmplTrans projEmplTrans = _common as ProjEmplTrans;
                ledgerDimension = ProjPosting::getLedgerDimension(_projAccountType, projEmplTrans.ProjId, projEmplTrans.CategoryId, 0, false, false);
                break;

            case(tableNum(ProjCostTrans)):
                ProjCostTrans projCostTrans = _common as ProjCostTrans;
                ledgerDimension = ProjPosting::getLedgerDimension(_projAccountType, projCostTrans.ProjId, projCostTrans.CategoryId, 0, false, false);
                break;

            case(tableNum(ProjItemTrans)):
                ProjItemTrans projItemTrans = _common as ProjItemTrans;
                ledgerDimension = ProjPosting::getLedgerDimension(_projAccountType, projItemTrans.ProjId, projItemTrans.CategoryId, 0, false, false);
                break;
        }
        
        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostedTrxAccounts</Name>
				<Source><![CDATA[
    private boolean checkPostedTrxAccounts()
    {
        ProjEmplTrans projEmplTrans;
        ProjEmplTransCost projEmplTransCost;
        ProjCostTrans projCostTrans;
        ProjCostTransCost projCostTransCost;
        ProjItemTrans projItemTrans;
        ProjItemTransCost projItemTransCost;
        ProjTable projTable1;
        boolean retValue = false;
        LedgerDimensionDefaultAccount tmpStatusAccount;
        LedgerDimensionDefaultAccount tmpStatusAccountItem;
        LedgerDimensionDefaultAccount tmpWIPCostAccruals;
        LedgerDimensionDefaultAccount tmpSalesOffsetAccount;
        LedgerDimensionDefaultAccount tmpWIPProduction;
        LedgerDimensionDefaultAccount tmpWIPProfit;

        // Test for Hour transactions
        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                QueryRun queryRun = new QueryRun(this.buildQueryToGetHourTrans(true));

                while(queryRun.next())
                {
                    projEmplTrans = queryRun.get(tableNum(ProjEmplTrans));
                    projEmplTransCost = queryRun.get(tableNum(ProjEmplTransCost));

                    // Check the accounts for this category
                    // Funding Source parameter is set to zero, because Project group is not associated with Funding Source.
                    tmpStatusAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projEmplTrans);
                    tmpWIPCostAccruals = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projEmplTrans);
                    tmpSalesOffsetAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projEmplTrans);
                    tmpWIPProfit = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projEmplTrans);

                    // Temp change of proj group for testing
                    ttsbegin;
                    select forupdate projTable1 where projTable1.ProjId == projEmplTrans.ProjId;
                    projTable1.ProjGroupId = this.parmProjGroupIdTo();
                    projTable1.update();

                    if (tmpStatusAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projEmplTrans))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpWIPCostAccruals != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projEmplTrans)))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpSalesOffsetAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projEmplTrans)))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpWIPProfit != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projEmplTrans)))
                    {
                        retValue = true;
                    }

                    ttsabort;

                    if (retValue)
                    {
                        break;
                    }
                }
            }
            else
            {
                QueryRun queryRun = new QueryRun(this.buildQueryToGetHourTrans(false));

                while(queryRun.next())
                {
                    projEmplTrans = queryRun.get(tableNum(ProjEmplTrans));
                    projEmplTransCost = queryRun.get(tableNum(ProjEmplTransCost));

                    // Check the accounts for this category
                    tmpStatusAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projEmplTrans);
                    tmpWIPCostAccruals = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projEmplTrans);
                    tmpSalesOffsetAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projEmplTrans);
                    tmpWIPProfit = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projEmplTrans);

                    // Temp change of proj group for testing
                    ttsbegin;
                    select forupdate projTable1 where projTable1.ProjId == projEmplTrans.ProjId;
                    projTable1.ProjGroupId = this.parmProjGroupIdTo();
                    projTable1.update();

                    if (tmpStatusAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projEmplTrans))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpWIPCostAccruals != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projEmplTrans)))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpSalesOffsetAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projEmplTrans)))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpWIPProfit != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projEmplTrans)))
                    {
                        retValue = true;
                    }

                    ttsabort;

                    if (retValue)
                    {
                        break;
                    }
                }
            }
        }
        else if (this.parmProjWIPId())
        {
            QueryRun queryRun = new QueryRun(this.buildQueryToGetHourTransForEstimateProject());

            while(queryRun.next())
            {
                projEmplTrans = queryRun.get(tableNum(ProjEmplTrans));
                projEmplTransCost = queryRun.get(tableNum(ProjEmplTransCost));
                projTable = queryRun.get(tableNum(ProjTable));

                // Check the accounts for this category
                tmpStatusAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projEmplTrans);
                tmpWIPCostAccruals = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projEmplTrans);
                tmpSalesOffsetAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projEmplTrans);
                tmpWIPProfit = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projEmplTrans);

                // Temp change of proj group for testing
                ttsbegin;
                select forupdate projTable1 where projTable1.ProjId == projEmplTrans.ProjId;
                projTable1.ProjGroupId = this.parmProjGroupIdTo();
                projTable1.update();

                if (tmpStatusAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projEmplTrans))
                {
                    retValue = true;
                }

                if (!retValue && (tmpWIPCostAccruals != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projEmplTrans)))
                {
                    retValue = true;
                }

                if (!retValue && (tmpSalesOffsetAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projEmplTrans)))
                {
                    retValue = true;
                }

                if (!retValue && (tmpWIPProfit != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projEmplTrans)))
                {
                    retValue = true;
                }

                ttsabort;

                if (retValue)
                {
                    break;
                }
            }
        }

        // Test for Expense transactions
        if (!retValue)
        {
            if (this.parmProjId())
            {
                if (this.parmShowChild())
                {
                    QueryRun queryRun = new QueryRun(this.buildQueryToGetExpTrans(true));

                    while(queryRun.next())
                    {
                        projCostTrans = queryRun.get(tableNum(ProjCostTrans));
                        projCostTransCost = queryRun.get(tableNum(ProjCostTransCost));

                        // Check the accounts for this category
                        tmpStatusAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projCostTrans);
                        tmpWIPCostAccruals = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projCostTrans);
                        tmpSalesOffsetAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projCostTrans);
                        tmpWIPProfit = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projCostTrans);

                        // Temp change of proj group for testing
                        ttsbegin;
                        select forupdate projTable1 where projTable1.ProjId == projCostTrans.ProjId;
                        projTable1.ProjGroupId = this.parmProjGroupIdTo();
                        projTable1.update();

                        if (tmpStatusAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projCostTrans))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpWIPCostAccruals != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projCostTrans)))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpSalesOffsetAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projCostTrans)))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpWIPProfit != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projCostTrans)))
                        {
                            retValue = true;
                        }

                        ttsabort;

                        if (retValue)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    QueryRun queryRun = new QueryRun(this.buildQueryToGetExpTrans(false));

                    while(queryRun.next())
                    {
                        projCostTrans = queryRun.get(tableNum(ProjCostTrans));
                        projCostTransCost = queryRun.get(tableNum(ProjCostTransCost));

                        // Check the accounts for this category
                        tmpStatusAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projCostTrans);
                        tmpWIPCostAccruals = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projCostTrans);
                        tmpSalesOffsetAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projCostTrans);
                        tmpWIPProfit = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projCostTrans);

                        // Temp change of proj group for testing
                        ttsbegin;
                        select forupdate projTable1 where projTable1.ProjId == projCostTrans.ProjId;
                        projTable1.ProjGroupId = this.parmProjGroupIdTo();
                        projTable1.update();

                        if (tmpStatusAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projCostTrans))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpWIPCostAccruals != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projCostTrans)))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpSalesOffsetAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projCostTrans)))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpWIPProfit != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projCostTrans)))
                        {
                            retValue = true;
                        }

                        ttsabort;

                        if (retValue)
                        {
                            break;
                        }
                    }
                }
            }
            else if (this.parmProjWIPId())
            {
                QueryRun queryRun = new QueryRun(this.buildQueryToGetExpTransForEstimateProject());

                while(queryRun.next())
                {
                    projCostTrans = queryRun.get(tableNum(ProjCostTrans));
                    projCostTransCost = queryRun.get(tableNum(ProjCostTransCost));
                    projTable = queryRun.get(tableNum(ProjTable));

                    // Check the accounts for this category
                    tmpStatusAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projCostTrans);
                    tmpWIPCostAccruals = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projCostTrans);
                    tmpSalesOffsetAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projCostTrans);
                    tmpWIPProfit = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projCostTrans);

                    // Temp change of proj group for testing
                    ttsbegin;
                    select forupdate projTable1 where projTable1.ProjId == projCostTrans.ProjId;
                    projTable1.ProjGroupId = this.parmProjGroupIdTo();
                    projTable1.update();

                    if (tmpStatusAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccount, projCostTrans))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpWIPCostAccruals != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projCostTrans)))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpSalesOffsetAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projCostTrans)))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpWIPProfit != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projCostTrans)))
                    {
                        retValue = true;
                    }

                    ttsabort;

                    if (retValue)
                    {
                        break;
                    }
                }
            }
        }

        // Test for Item transactions
        if (!retValue)
        {
            if (this.parmProjId())
            {
                if (this.parmShowChild())
                {
                    QueryRun queryRun = new QueryRun(this.buildQueryToGetPostedItemTrans(true));

                    while(queryRun.next())
                    {
                        projItemTrans = queryRun.get(tableNum(ProjItemTrans));
                        projItemTransCost = queryRun.get(tableNum(ProjItemTransCost));

                        // Check the accounts for this category
                        tmpStatusAccountItem = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccountItem, projItemTrans);
                        tmpWIPCostAccruals = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projItemTrans);
                        tmpSalesOffsetAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projItemTrans);
                        tmpWIPProduction = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProduction, projItemTrans);
                        tmpWIPProfit = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projItemTrans);

                        // Temp change of proj group for testing
                        ttsbegin;
                        select forupdate projTable1 where projTable1.ProjId == projItemTrans.ProjId;
                        projTable1.ProjGroupId = this.parmProjGroupIdTo();
                        projTable1.update();

                        if (tmpStatusAccountItem != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccountItem, projItemTrans))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpWIPCostAccruals != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projItemTrans)))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpSalesOffsetAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projItemTrans)))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpWIPProduction != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProduction, projItemTrans)))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpWIPProfit != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projItemTrans)))
                        {
                            retValue = true;
                        }

                        ttsabort;

                        if (retValue)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    QueryRun queryRun = new QueryRun(this.buildQueryToGetPostedItemTrans(false));

                    while(queryRun.next())
                    {
                        projItemTrans = queryRun.get(tableNum(ProjItemTrans));
                        projItemTransCost = queryRun.get(tableNum(ProjItemTransCost));

                        // Check the accounts for this category
                        tmpStatusAccountItem = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccountItem, projItemTrans);
                        tmpWIPCostAccruals = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projItemTrans);
                        tmpSalesOffsetAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projItemTrans);
                        tmpWIPProduction = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProduction, projItemTrans);
                        tmpWIPProfit = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projItemTrans);

                        // Temp change of proj group for testing
                        ttsbegin;
                        select forupdate projTable1 where projTable1.ProjId == projItemTrans.ProjId;
                        projTable1.ProjGroupId = this.parmProjGroupIdTo();
                        projTable1.update();

                        if (tmpStatusAccountItem != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccountItem, projItemTrans))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpWIPCostAccruals != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projItemTrans)))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpSalesOffsetAccount !=this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projItemTrans)))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpWIPProduction != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProduction, projItemTrans)))
                        {
                            retValue = true;
                        }

                        if (!retValue && (tmpWIPProfit != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projItemTrans)))
                        {
                            retValue = true;
                        }

                        ttsabort;

                        if (retValue)
                        {
                            break;
                        }
                    }
                }
            }
            else if (this.parmProjWIPId())
            {
                QueryRun queryRun = new QueryRun(this.buildQueryToGetPostedItemTransForEstimateProject());

                while(queryRun.next())
                {
                    projItemTrans = queryRun.get(tableNum(ProjItemTrans));
                    projItemTransCost = queryRun.get(tableNum(ProjItemTransCost));
                    projTable = queryRun.get(tableNum(ProjTable));

                    // Check the accounts for this category
                    tmpStatusAccountItem = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccountItem, projItemTrans);
                    tmpWIPCostAccruals = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projItemTrans);
                    tmpSalesOffsetAccount = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projItemTrans);
                    tmpWIPProduction = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProduction, projItemTrans);
                    tmpWIPProfit = this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projItemTrans);

                    // Temp change of proj group for testing
                    ttsbegin;
                    select forupdate projTable1 where projTable1.ProjId == projItemTrans.ProjId;
                    projTable1.ProjGroupId = this.parmProjGroupIdTo();
                    projTable1.update();

                    if (tmpStatusAccountItem != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::StatusAccountItem, projItemTrans))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpWIPCostAccruals != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPCostAccruals, projItemTrans)))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpSalesOffsetAccount != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::SalesOffsetAccount, projItemTrans)))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpWIPProduction != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProduction, projItemTrans)))
                    {
                        retValue = true;
                    }

                    if (!retValue && (tmpWIPProfit != this.getLedgerDimensionForPostedTrxAccounts(ProjAccountType::WIPProfit, projItemTrans)))
                    {
                        retValue = true;
                    }

                    ttsabort;

                    if (retValue)
                    {
                        break;
                    }
                }
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingAccounts</Name>
				<Source><![CDATA[
    private boolean checkPostingAccounts()
    {
        ProjPosting                         projPostingFrom,
                                            projPostingTo;
        LedgerDimensionDefaultAccount       ledgerAccountFrom,
                                            ledgerAccountTo;
        boolean                             ret;
        boolean                             accountsDiffer;

        ret = true;
        accountsDiffer = false;

        //
        // Check for posted tranactions. If no transactions are posted to balancesheet,
        // group settings will not be affected by changing the group
        //
        if (this.checkTrxPostedBalancesheet())
        {
            //
            // Check existing project against to new project settings.
            // Only look at WIP Accounts
            //
            while select * from projPostingFrom
                where projPostingFrom.ProjCode == TableGroupAll::GroupId
                    && projPostingFrom.ProjRelation == this.parmProjGroupIdFrom()
                    && ( projPostingFrom.ProjAccountType == ProjAccountType::StatusAccount
                            || projPostingFrom.ProjAccountType == ProjAccountType::StatusAccountItem
                            || projPostingFrom.ProjAccountType == ProjAccountType::WIPCostAccruals
                            || projPostingFrom.ProjAccountType == ProjAccountType::SalesOffsetAccount
                            || projPostingFrom.ProjAccountType == ProjAccountType::WIPProduction
                            || projPostingFrom.ProjAccountType == ProjAccountType::WIPProfit)
            {
                ledgerAccountFrom = ProjPosting::find( projPostingFrom.ProjAccountType,
                                                       projPostingFrom.ProjCode,
                                                       this.parmProjGroupIdFrom(),
                                                       projPostingFrom.CategoryCode,
                                                       projPostingFrom.ProjCategoryRelation).LedgerDimension;
                ledgerAccountTo = ProjPosting::find( projPostingFrom.ProjAccountType,
                                                        projPostingFrom.ProjCode,
                                                        this.parmProjGroupIdTo(),
                                                        projPostingFrom.CategoryCode,
                                                        projPostingFrom.ProjCategoryRelation).LedgerDimension;
                if (LedgerDimensionFacade::getMainAccountFromLedgerDimension(ledgerAccountFrom).MainAccountId != LedgerDimensionFacade::getMainAccountFromLedgerDimension(ledgerAccountTo).MainAccountId)
                {
                    accountsDiffer = true;
                    break;
                }
            }

            if (!accountsDiffer)
            {
                // Check if problems exists with new project based on the existing settings.
                while select * from projPostingTo
                    where projPostingTo.ProjCode == TableGroupAll::GroupId
                        && projPostingTo.ProjRelation == this.parmProjGroupIdTo()
                        && ( projPostingTo.ProjAccountType == ProjAccountType::StatusAccount
                                || projPostingTo.ProjAccountType == ProjAccountType::StatusAccountItem
                                || projPostingTo.ProjAccountType == ProjAccountType::WIPCostAccruals
                                || projPostingTo.ProjAccountType == ProjAccountType::SalesOffsetAccount
                                || projPostingTo.ProjAccountType == ProjAccountType::WIPProduction
                                || projPostingTo.ProjAccountType == ProjAccountType::WIPProfit)
                {
                    ledgerAccountTo = ProjPosting::find( projPostingTo.ProjAccountType,
                                                         projPostingTo.ProjCode,
                                                         this.parmProjGroupIdTo(),
                                                         projPostingTo.CategoryCode,
                                                         projPostingTo.ProjCategoryRelation).LedgerDimension;

                    ledgerAccountFrom = ProjPosting::find( projPostingTo.ProjAccountType,
                                                           projPostingTo.ProjCode,
                                                           this.parmProjGroupIdFrom(),
                                                           projPostingTo.CategoryCode,
                                                           projPostingTo.ProjCategoryRelation).LedgerDimension;

                    if (LedgerDimensionFacade::getMainAccountFromLedgerDimension(ledgerAccountFrom).MainAccountId != LedgerDimensionFacade::getMainAccountFromLedgerDimension(ledgerAccountTo).MainAccountId)
                    {
                        accountsDiffer = true;
                        break;
                    }
                }
            }
            if (accountsDiffer)
            {
                // Validate any posted balance sheet transactions
                if (this.checkPostedTrxAccounts())
                {
                    ret = checkFailed("@SYS110242");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjectWIPFrom</Name>
				<Source><![CDATA[
    private boolean checkProjectWIPFrom()
    {
        ProjControlPeriodTable  projControlPeriodTable;
        boolean     ret = true;

        select firstonly projControlPeriodTable
            where projControlPeriodTable.ProjId == this.parmProjWIPId()
              && (projControlPeriodTable.PeriodStatus  == ProjControlPeriodStatus::Created
              ||  projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Posted
              ||  projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Eliminate);

        if (projControlPeriodTable)
        {
            ret = checkFailed("@SYS83402");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether there are existing purchase order transactions related to the project ID.
    /// </summary>
    /// <returns>
    ///    true if there are existing purchase order transactions related to the project ID; otherwise, false.
    /// </returns>
    private boolean checkPurchOrder()
    {
        PurchLine       purchLine;
        boolean         ret    = true;

        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly projTable
                    where projTable.ProjId == this.parmProjId() + #WildCardCharacter
                    join purchLine
                        where purchLine.ProjId == projTable.ProjId
                          && !purchLine.IsDeleted;
            }
            else
            {
                select firstonly projTable
                    where projTable.ProjId == this.parmProjId()
                    join purchLine
                        where purchLine.ProjId == projTable.ProjId;
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly projTable
                where projTable.wipProject == this.parmProjWIPId()
                join purchLine
                    where purchLine.ProjId == projTable.ProjId;
        }

        if (purchLine)
        {
            ret = checkFailed(strFmt("@SYS83397",projGroupTo.ProjType,tablePName(PurchLine)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesType</Name>
				<Source><![CDATA[
    private boolean checkSalesType(
        SalesType   _salesType)
    {
        SalesTable      salesTable;
        boolean         ret    = true;

        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly projTable
                    where projTable.ProjId      == this.parmProjId() + #WildCardCharacter
                    join salesTable
                        where salesTable.ProjId     == projTable.ProjId
                           && salesTable.SalesType  == _salesType;
            }

            else
            {
                select firstonly projTable
                    where projTable.ProjId    == this.parmProjId()
                    join salesTable
                        where salesTable.ProjId    == projTable.ProjId
                           && salesTable.SalesType == _salesType;
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly projTable
                where projTable.wipProject  == this.parmProjWIPId()
                join salesTable
                    where salesTable.ProjId     == projTable.ProjId
                       && salesTable.SalesType == _salesType;
        }

        if (salesTable)
        {
            ret = checkFailed(strFmt("@SYS83397",projGroupTo.ProjType,tablePName(SalesTable)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSubscription</Name>
				<Source><![CDATA[
    private boolean checkSubscription(
        boolean     _checkRevenue   = false)
    {
        SMASubscriptionTable    smaSubscriptionTable;
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        boolean                 ret = true;

        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly RecId from smaSubscriptionTable
                    where smaSubscriptionTable.ProjId like this.parmProjId()+ '*';
            }
            else
            {
                select firstonly RecId from smaSubscriptionTable
                    where smaSubscriptionTable.ProjId == this.parmProjId();
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly RecId from smaSubscriptionTable
                join RecId from projTable
                    where projTable.ProjId      == smaSubscriptionTable.ProjId
                       && projTable.wipProject  == this.parmProjWIPId();
        }

        if (smaSubscriptionTable.RecId)
        {
            ret = checkFailed("@SYS88321");
        }

        if (ret && _checkRevenue)
        {
            if (this.parmProjId())
            {
                if (this.parmShowChild())
                {
                    select firstonly RecId from projRevenueTrans
                        where projRevenueTrans.ProjId like this.parmProjId()+ '*'
                           && projRevenueTrans.TransactionOrigin == ProjOrigin::Subscription
                            join RecId from projRevenueTransSale
                                where projRevenueTransSale.TransId == projRevenueTrans.TransId
                                    && projRevenueTransSale.TransStatus  != ProjTransStatus::Adjusted;
                }
                else
                {
                    select firstonly RecId from projRevenueTrans
                        where projRevenueTrans.ProjId       == this.parmProjId()
                           && projRevenueTrans.TransactionOrigin == ProjOrigin::Subscription
                            join RecId from projRevenueTransSale
                                where projRevenueTransSale.TransId == projRevenueTrans.TransId
                                    && projRevenueTransSale.TransStatus  != ProjTransStatus::Adjusted;
                }
            }
            else if (this.parmProjWIPId())
            {
                select firstonly RecId from projRevenueTrans
                    where projRevenueTrans.TransactionOrigin == ProjOrigin::Subscription
                    join RecId from projRevenueTransSale
                        where projRevenueTransSale.TransId == projRevenueTrans.TransId
                            && projRevenueTransSale.TransStatus  != ProjTransStatus::Adjusted
                    join RecId from projTable
                        where projTable.ProjId      == projRevenueTrans.ProjId
                           && projTable.wipProject  == this.parmProjWIPId();
            }

            if (projRevenueTrans.RecId)
            {
                ret = checkFailed(strFmt("@SYS83497",tableId2pname(projRevenueTrans.TableId),projRevenueTransSale.TransStatus));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTime</Name>
				<Source><![CDATA[
    private boolean checkTime()
    {
        boolean ret = true;

        ret = this.checkSubscription();

        if (ret)
        {
            ret = this.checkExpense();
        }

        if (ret)
        {
            ret = this.checkFee();
        }

        if (ret)
        {
            ret = this.checkItem();
        }

        if (ret)
        {
            ret = this.checkSalesType(SalesType::ItemReq);
        }

        if (ret)
        {
            ret = this.checkSalesType(SalesType::Sales);
        }

        if (ret)
        {
            ret = this.checkOnAcc();
        }

        if (ret)
        {
            ret = this.checkEmplStatusNotEqual(ProjLedgerStatus::Never);
        }

        if (ret)
        {
            ret = this.checkPurchOrder();
        }

        if (ret)
        {
            ret = this.checkCostPostToWIP();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTimeMaterial</Name>
				<Source><![CDATA[
    private boolean checkTimeMaterial()
    {
        ProjGroup projGroupFrom;
        boolean ret = true;

        projGroupFrom = ProjGroup::find(this.parmProjGroupIdFrom());

        ret = this.checkOnAccStatus();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransactionStatus</Name>
				<Source><![CDATA[
    private boolean checkTransactionStatus()
    {
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransSale       projEmplTransSale;
        ProjCostTrans           projCostTrans;
        ProjCostTransSale       projCostTransSale;
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjItemTrans           projItemTrans;
        ProjItemTransSale       projItemTransSale;
        boolean                 ret = true;

        #localMacro.checkStatus
            ((projGroupTo.projType != ProjType::TimeMaterial
         &&  (%1.TransStatus == ProjTransStatus::CreditnoteProposal
         ||   %1.TransStatus == ProjTransStatus::Invoiced
         ||   %1.TransStatus == ProjTransStatus::InvoiceProposal
         ||   %1.TransStatus == ProjTransStatus::MarkedCreditnote))

         ||  (%1.TransStatus == ProjTransStatus::NoStatus
         ||   %1.TransStatus == ProjTransStatus::Registered))
    #endMacro

        #localMacro.checkTransactionStatus
        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstOnly %1
                    where %1.projId like this.parmProjId()+"*"
                        join %2
                            where %2.%3 == %1.%3
                                && #checkStatus(%2);
            }
            else
            {
                select firstOnly %1
                    where %1.projId == this.parmProjId()
                        join %2
                            where %2.%3 == %1.%3
                               && #checkStatus(%2);
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstOnly %1
                join %2
                    where %2.%3 == %1.%3
                        && #checkStatus(%2)
                join ProjTable
                    where ProjTable.ProjId      == %1.ProjID
                       && ProjTable.WIPProject  == this.parmProjWIPId();
        }

        if (%1)
        {
            ret = checkFailed(strfmt("@SYS83497",tablePName(%1),%2.TransStatus));
        }

    #endMacro

        #checkTransactionStatus(ProjEmplTrans, ProjEmplTransSale, TransId)

        if (ret)
        {
            #checkTransactionStatus(ProjCostTrans, ProjCostTransSale, TransId)
            if (ret)
            {
                #checkTransactionStatus(ProjRevenueTrans, ProjRevenueTransSale, TransId)
            if (ret)
            {
                #checkTransactionStatus(ProjItemTrans, ProjItemTransSale, ProjTransId)
            }
            }
            }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrxPostedBalancesheet</Name>
				<Source><![CDATA[
    private boolean checkTrxPostedBalancesheet()
    {
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransCost       projEmplTransCost;
        ProjCostTrans           projCostTrans;
        ProjCostTransCost       projCostTransCost;
        ProjItemTransCost       projItemTransCost;
        boolean                 retValue;

        retValue = false;

        // Test for Hour transactions
        if (this.parmProjId())
        {
            if (this.parmShowChild())
            {
                select firstonly RecId from projEmplTrans
                    where projEmplTrans.ProjId like this.parmProjId()+ #WildcardCharacter
                        join RecId from projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
            }
            else
            {
                select firstonly RecId from projEmplTrans
                    where projEmplTrans.ProjId == this.parmProjId()
                        join RecId from projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
            }
        }
        else if (this.parmProjWIPId())
        {
            select firstonly RecId from projEmplTrans
                join RecId from projEmplTransCost
                    where projEmplTransCost.TransId == projEmplTrans.TransId
                        && projEmplTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet
                join RecId from projTable
                    where projTable.ProjId      == projEmplTrans.ProjId
                       && projTable.wipProject  == this.parmProjWIPId();
        }
        if (projEmplTrans.RecId)
        {
            retValue = true;
        }

        // Test for Expense transactions
        if (!retValue)
        {
            if (this.parmProjId())
            {
                if (this.parmShowChild())
                {
                    select firstonly RecId from projCostTrans
                        where projCostTrans.ProjId like this.parmProjId()+ #WildcardCharacter
                            join RecId from projCostTransCost
                                where projCostTransCost.TransId == projCostTrans.TransId
                                    && projCostTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
                }
                else
                {
                    select firstonly RecId from projCostTrans
                        where projCostTrans.ProjId == this.parmProjId()
                            join RecId from projCostTransCost
                                where projCostTransCost.TransId == projCostTrans.TransId
                                    && projCostTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
                }
            }
            else if (this.parmProjWIPId())
            {
                select firstonly RecId from projCostTrans
                    join RecId from projCostTransCost
                        where projCostTransCost.TransId == projCostTrans.TransId
                            && projCostTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet
                    join RecId from projTable
                        where projTable.ProjId      == projCostTrans.ProjId
                           && projTable.wipProject  == this.parmProjWIPId();
            }
            if (projCostTrans.RecId)
            {
                retValue = true;
            }
        }

        // Test for Item transactions
        if (!retValue)
        {
            if (this.parmProjId())
            {
                if (this.parmShowChild())
                {
                    select firstonly RecId from projItemTransCost
                        where projItemTransCost.ProjId like this.parmProjId()+ #WildcardCharacter
                            && projItemTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
                }
                else
                {
                    select firstonly RecId from projItemTransCost
                        where projItemTransCost.ProjId == this.parmProjId()
                            && projItemTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet;
                }
            }
            else if (this.parmProjWIPId())
            {
                select firstonly RecId from projItemTransCost where
                        projItemTransCost.LedgerStatusCost == ProjLedgerStatus::BalanceSheet
                    join RecId from projTable
                        where projTable.ProjId      == projItemTransCost.ProjId
                           && projTable.wipProject  == this.parmProjWIPId();
            }
            if (projItemTransCost.RecId)
            {
                retValue = true;
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWIPProject</Name>
				<Source><![CDATA[
    private void createWIPProject()
    {
        ProjWIPTable    projWIPTable;

        projWIPTable.clear();
        projWIPTable.ProjId         = this.parmProjId();
        projWIPTable.ControlId      = projGroupTo.ControlId;
        projWIPTable.PeriodId       = projGroupTo.PeriodId;
        projWIPTable.Description    = this.parmProjId();
        projWIPTable.insert();

        this.parmProjWIPId(projWIPTable.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formStr(ProjGroupChange),this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableInvoiceProject</Name>
				<Source><![CDATA[
    public boolean enableInvoiceProject()
    {
        ProjType   typeFrom, typeTo;

        typeFrom    = ProjGroup::find(this.parmProjGroupIdFrom()).ProjType;

        if (typeFrom == ProjType::FixedPrice  ||
            typeFrom == ProjType::TimeMaterial)
        {
            return false;
        }

        typeTo      = ProjGroup::find(this.parmProjGroupIdTo()).ProjType;

        if (typeTo == ProjType::Cost     ||
            typeTo == ProjType::Internal ||
            typeTo == ProjType::Time     ||
            typeTo == ProjType::Investment)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsProjectTypeWithEstimates</Name>
				<Source><![CDATA[
    private boolean IsProjectTypeWithEstimates(ProjType _projType)
    {
        return  (_projType && (_projType == ProjType::Investment ||
                 _projType == ProjType::FixedPrice));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjGroupIdFrom</Name>
				<Source><![CDATA[
    public ProjGroupId parmProjGroupIdFrom(ProjGroupId _projGroupIdFrom  = projGroupIdFrom)
    {
        projGroupIdFrom = _projGroupIdFrom;

        return projGroupIdFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjGroupIdTo</Name>
				<Source><![CDATA[
    public ProjGroupId parmProjGroupIdTo(ProjGroupId _projGroupIdTo  = projGroupIdTo)
    {
        projGroupIdTo = _projGroupIdTo;

        return projGroupIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId  = projId)
    {
        projId = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceProjId</Name>
				<Source><![CDATA[
    public ProjInvoiceProjId parmProjInvoiceProjId(ProjInvoiceProjId _projInvoiceProjId  = projInvoiceProjId)
    {
        projInvoiceProjId = _projInvoiceProjId;

        if (! this.enableInvoiceProject())
        {
            return '';
        }

        return projInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjType</Name>
				<Source><![CDATA[
    public ProjType parmProjType(ProjType _projType  = projType)
    {
        projType = _projType;

        return projType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjWIPId</Name>
				<Source><![CDATA[
    public ProjWipId parmProjWIPId(ProjWipId _projWipId  = projWipId)
    {
        projWipId = _projWipId;

        return projWipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowChild</Name>
				<Source><![CDATA[
    public boolean parmShowChild(boolean _showChild = showChild)
    {
        showChild   = _showChild;

        return showChild;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the project type of a project.
    /// </summary>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An error occurred during the record update.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An error occurred during the record update.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The project group was not specified.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    Another user has already updated the same <c>ProjTable</c> record.
    /// </exception>

    public void run()
    {
        #OCCRetryCount
        ProjGroupId                     projGroupIdOrig;
        ProjTransPosting                projTransPosting;
        ProjTransBudget                 projTransBudget;
        CostControlTransCommittedCost   costControlTransCommittedCost;
        PurchLine                       purchLine;
        ProjPWPVendorRetentionSetting   projPWPVendorRetentionSetting;

        projGroupTo   = ProjGroup::find(this.parmProjGroupIdTo());

        if (!this.validate())
        {
            throw error("@SYS77613");
        }

        try
        {
            ttsbegin;

            select firstonly projTable
                where (this.parmProjWIPId()   && (projTable.wipProject  == this.parmProjWIPId()))
                   || (this.parmProjId() && (projTable.ProjId      == this.parmProjId()))
                   && projTable.ProjGroupId == this.parmProjGroupIdFrom();

            if (!projTable)
            {
                throw error(strFmt("@SYS99508", tablePName(ProjTable), tableStr(ProjTable)));
            }
            else
            {
                while select forupdate projTable
                    where (this.parmProjWIPId()   && (projTable.wipProject  == this.parmProjWIPId()))
                       || (this.parmShowChild()   && this.parmProjId() && (projTable.ProjId     like this.parmProjId()+ '*'))
                       || (! this.parmShowChild() && this.parmProjId() && (projTable.ProjId      == this.parmProjId()))
                       && projTable.ProjGroupId == this.parmProjGroupIdFrom()
                {
                    update_recordset projTransPosting
                        setting ProjType    = projGroupTo.ProjType
                        where projTransPosting.ProjId   == projTable.ProjId;

                    update_recordset projTransBudget
                        setting ProjType    = projGroupTo.ProjType
                        where projTransBudget.ProjId   == projTable.ProjId;

                    update_recordset costControlTransCommittedCost
                        setting ProjType    = projGroupTo.ProjType
                        where costControlTransCommittedCost.ProjId   == projTable.ProjId;

                    projGroupIdOrig         = projTable.ProjGroupId;
                    this.initializeProjTable();
                    projTable.update();

                    if (projTable.Type != ProjType::TimeMaterial)
                    {
                        PurchTable purchTable;
                        purchLine.skipDataMethods(true);
                        if (purchLine.shouldSkipEvents())
                        {
                            purchLine.skipEvents(true);
                        }

                        update_recordset purchLine
                            setting IsPwp = NoYes::No
                                where purchLine.ProjId == projTable.ProjId
                            join purchTable
                                where purchTable.PurchId == purchLine.PurchId
                                    && purchTable.PurchStatus != PurchStatus::Invoiced && purchTable.PurchStatus != PurchStatus::Canceled;

                        update_recordset projPWPVendorRetentionSetting
                            setting PwpThresholdPercent = 0
                                where projPWPVendorRetentionSetting.ProjId == projTable.ProjId;
                    }

                    info(strFmt("@SYS83400", projTable.ProjId, projTable.ProjGroupId, projGroupIdOrig));
                }
            }

            if (this.IsProjectTypeWithEstimates(projGroupTo.projType)   &&
                !this.parmProjWIPId()                                   &&
                projGroupTo.CompletePrincip != ProjCompletePrincip::NoWIP)
            {
                this.createWIPProject();
            }
            else if (this.parmProjWIPId())
            {
                this.updateWIPProject(projGroupTo.ProjType);
            }

            this.UpdateExistingForecasts();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes project table record based on the type of the project.
    /// </summary>
    protected void initializeProjTable()
    {
        projTable.ProjGroupId   = this.parmProjGroupIdTo();
        projTable.CheckBudget   = projTable.projGroup().CheckBudget;

        projTable.ProjLedgerPosting = projGroupTo.LedgerPosting;
        projTable.Type          = projGroupTo.ProjType;

        if (this.enableInvoiceProject())
        {
            projTable.ProjInvoiceProjId     = this.parmProjInvoiceProjId();
            projTable.CustAccount           = ProjFundingSource::findCustAccount(projTable.ProjInvoiceProjId).CustAccount;
        }

        switch (projTable.Type)
        {
            case ProjType::Time:
                projTable.CustAccount       = '';
                projTable.ProjInvoiceProjId = '';
                projTable.wipProject        = '';
                projTable.AssetId           = '';
                break;
            case ProjType::Cost:
                projTable.CustAccount       = '';
                projTable.ProjInvoiceProjId = '';
                projTable.wipProject        = '';
                break;
            case ProjType::Internal:
                projTable.CustAccount       = '';
                projTable.ProjInvoiceProjId = '';
                projTable.wipProject        = '';
                break;
            case ProjType::Investment:
                projTable.CustAccount       = '';
                projTable.ProjInvoiceProjId = '';
                break;
            case ProjType::TimeMaterial:
                projTable.wipProject        = '';
                projTable.AssetId           = '';
                break;
            case ProjType::FixedPrice:
                projTable.AssetId           = '';
                break;
            default:
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWIPProject</Name>
				<Source><![CDATA[
    private void updateWIPProject(ProjType  _projTypeTo)
    {
        ProjWIPTable    projWIPTable    = ProjWIPTable::find(this.parmProjWIPId(),true);

        if (projWIPTable)
        {
            if (this.IsProjectTypeWithEstimates(_projTypeTo) &&
                projGroupTo.CompletePrincip != ProjCompletePrincip::NoWIP)
            {
                projWIPTable.ControlId      = projGroupTo.ControlId;
                projWIPTable.PeriodId       = projGroupTo.PeriodId;
                projWIPTable.update();
            }
            else
            {
                projWIPTable.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        projGroupTo   = ProjGroup::find(this.parmProjGroupIdTo());

        ret = super();

        if (ret && !projGroupTo)
        {
            ret = checkFailed("@SYS50011");
        }

        if (ret && this.parmProjWIPId())
        {
            ret = this.checkProjectWIPFrom();
        }

        if (ret)
        {
            ret = this.checkNeverLedger();
        }

        if (ret)
        {
            ret = this.checkTransactionStatus();
        }

        if (ret)
        {
            switch (ProjGroup::find(this.parmProjGroupIdTo()).ProjType)
            {
                case ProjType::TimeMaterial :
                    ret = this.checkTimeMaterial();
                    break;

                case ProjType::FixedPrice :
                    ret = this.checkFixedPrice();
                    break;

                case ProjType::Investment :
                    ret = this.checkInvestment();
                    break;

                case ProjType::Cost :
                    ret = this.checkCost();
                    break;

                case ProjType::Internal :
                    ret = this.checkInternal();
                    break;

                case ProjType::Time :
                    ret = this.checkTime();
                    break;
            }
        }

        if (ret)
        {
            ret = this.checkPostingAccounts();
        }

        if (ret)
        {
            if (this.enableInvoiceProject())
            {
                if (! this.parmProjInvoiceProjId())
                {
                    ret = checkFailed("@SYS53031");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    protected static ClassDescription description()
    {
        return "@SYS83404";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args args)
    {
        ProjGroupChange projGroupChange;
        Common          currentRecord = args.record();

        if (!currentRecord)
        {
            throw error(strFmt("@SYS29104", classId2Name(classIdGet(projGroupChange))));
        }

        projGroupChange = ProjGroupChange::newFromForm(args, currentRecord);

        projGroupChange.init();

        if (projGroupChange.prompt())
        {
            projGroupChange.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    static ProjGroupChange newFromForm(Args _args, Common _record = null)
    {
        ProjTable       projTable;
        ProjWIPTable    projWIPTable;

        ProjGroupChange projGroupChange;

        projGroupChange = new ProjGroupChange();

        projGroupChange.getLast();
        projGroupChange.parmProjGroupIdTo("");
        projGroupChange.parmProjInvoiceProjId("");

        if (_record == null)
        {
            _record = _args.record();
        }

        switch (_args.dataset())
        {
            case tableNum(ProjTable):
                projTable       = _record;
                if (ProjWIPTable::exist(projTable.ProjId))
                {
                    projGroupChange.parmProjWIPId(projTable.ProjId);
                    projGroupChange.parmProjType(projTable.Type);
                    projGroupChange.parmProjGroupIdFrom(projTable.ProjGroupId);
                    projGroupChange.parmShowChild(false);
                    projGroupChange.parmProjId("");
                }
                else
                {
                    projGroupChange.parmProjId(projTable.ProjId);
                    projGroupChange.parmProjType(projTable.Type);
                    projGroupChange.parmProjGroupIdFrom(projTable.ProjGroupId);
                    projGroupChange.parmShowChild(true);
                    projGroupChange.parmProjWIPId("");
                }
                break;
            case tableNum(ProjWIPTable):
                projWIPTable    = _record;
                projGroupChange.parmProjWIPId(projWIPTable.ProjId);
                projGroupChange.parmProjType(projWIPTable.projType());
                projGroupChange.parmProjGroupIdFrom(projWIPTable.projTable().ProjGroupId);
                projGroupChange.parmShowChild(false);
                projGroupChange.parmProjId("");
                break;
            default:
                throw error(strFmt("@SYS19306",funcName()));
        }

        return projGroupChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingForecasts</Name>
				<Source><![CDATA[
    /// <summary>
    /// The existing forecasts associated with the current project are updated on modifying the project group
    /// associated with the project, which will in turn update the existing <c>ProjTransBudget</c> records.
    /// </summary>
    private void updateExistingForecasts()
    {
        ProjTable   projTableLoc;

        while select projId from projTableLoc
            where (this.parmProjWIPId() && (projTableLoc.wipProject == this.parmProjWIPId()))
                || (this.parmShowChild() && this.parmProjId() && (projTableLoc.ProjId like this.parmProjId()+ '*'))
                || (! this.parmShowChild() && this.parmProjId() && (projTableLoc.ProjId == this.parmProjId()))
                && projTableLoc.ProjGroupId == this.parmProjGroupIdTo()
        {
            ttsbegin;

            ForecastSales   forecastSales;

            while select forUpdate forecastSales
                where forecastSales.ProjId == projTableLoc.ProjId
            {
                forecastSales.update();
            }
        
            ProjForecastEmpl    projForecastEmpl;

            while select forUpdate projForecastEmpl
                where projForecastEmpl.ProjId == projTableLoc.ProjId
            {
                projForecastEmpl.update();
            }
        
            ProjForecastCost    projForecastCost;

            while select forUpdate projForecastCost
                where projForecastCost.ProjId == projTableLoc.ProjId
            {
                projForecastCost.update();
            }
        
            ProjForecastOnAcc   projForecastOnAcc;

            while select forUpdate projForecastOnAcc
                where projForecastOnAcc.ProjId == projTableLoc.ProjId
            {
                projForecastOnAcc.update();
            }
        
            ProjForecastRevenue     projForecastRevenue;

            while select forUpdate projForecastRevenue
                where projForecastRevenue.ProjId == projTableLoc.ProjId
            {
                projForecastRevenue.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryToGetHourTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get the hour transactions for the specified project.
    /// </summary>
    /// <param name = "_includeSubProjects">
    ///     A boolean value to check whether to include sub projects.
    /// </param>
    /// <returns>
    ///     A query to get the hour transactions for the specified project.
    /// </returns>
    protected query buildQueryToGetHourTrans(boolean _includeSubProjects)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsProjEmplTrans = query.addDataSource(tableNum(ProjEmplTrans));
        
        qbdsProjEmplTrans.addSelectionField(fieldNum(ProjEmplTrans, ProjId));
        qbdsProjEmplTrans.addSelectionField(fieldNum(ProjEmplTrans, CategoryId));

        qbdsProjEmplTrans.addGroupByField(fieldNum(ProjEmplTrans, ProjId));
        qbdsProjEmplTrans.addGroupByField(fieldNum(ProjEmplTrans, CategoryId));

        if(_includeSubProjects)
        {
            qbdsProjEmplTrans.addRange(fieldNum(ProjEmplTrans, ProjId)).value(SysQuery::valueLikeAfter(this.parmProjId()));
        }
        else
        {
            qbdsProjEmplTrans.addRange(fieldNum(ProjEmplTrans, ProjId)).value(SysQuery::value(this.parmProjId()));
        }

        QueryBuildDataSource qbdsProjEmplTransCost = qbdsProjEmplTrans.addDataSource(tableNum(ProjEmplTransCost));
        qbdsProjEmplTransCost.joinMode(JoinMode::ExistsJoin);
        qbdsProjEmplTransCost.fetchMode(QueryFetchMode::One2One);

        qbdsProjEmplTransCost.relations(true);
        qbdsProjEmplTransCost.addRange(fieldNum(ProjEmplTransCost, LedgerStatusCost)).value(SysQuery::value(ProjLedgerStatus::BalanceSheet));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryToGetHourTransForEstimateProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get the hour transactions for the specified estimate projects.
    /// </summary>
    /// <returns>
    ///     A query to get the hour transactions for the specified estimate projects.
    /// </returns>
    protected query buildQueryToGetHourTransForEstimateProject()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsProjEmplTrans = query.addDataSource(tableNum(ProjEmplTrans));
        
        qbdsProjEmplTrans.addSelectionField(fieldNum(ProjEmplTrans, ProjId));
        qbdsProjEmplTrans.addSelectionField(fieldNum(ProjEmplTrans, CategoryId));

        qbdsProjEmplTrans.addGroupByField(fieldNum(ProjEmplTrans, ProjId));
        qbdsProjEmplTrans.addGroupByField(fieldNum(ProjEmplTrans, CategoryId));

        QueryBuildDataSource qbdsProjEmplTransCost = qbdsProjEmplTrans.addDataSource(tableNum(ProjEmplTransCost));
        qbdsProjEmplTransCost.joinMode(JoinMode::ExistsJoin);
        qbdsProjEmplTransCost.fetchMode(QueryFetchMode::One2One);

        qbdsProjEmplTransCost.relations(true);
        qbdsProjEmplTransCost.addRange(fieldNum(ProjEmplTransCost, LedgerStatusCost)).value(SysQuery::value(ProjLedgerStatus::BalanceSheet));

        QueryBuildDataSource qbdsProjTable = qbdsProjEmplTrans.addDataSource(tableNum(ProjTable));
        qbdsProjTable.joinMode(JoinMode::ExistsJoin);
        qbdsProjTable.fetchMode(QueryFetchMode::One2One);

        qbdsProjTable.relations(true);
        qbdsProjTable.addRange(fieldNum(ProjTable, WIPProject)).value(SysQuery::value(this.parmProjWIPId()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryToGetExpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get the expense transactions for the specified project.
    /// </summary>
    /// <param name = "_includeSubProjects">
    ///     A boolean value to check whether to include sub projects.
    /// </param>
    /// <returns>
    ///     A query to get the expense transactions for the specified project.
    /// </returns>
    protected query buildQueryToGetExpTrans(boolean _includeSubProjects)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsProjCostTrans = query.addDataSource(tableNum(ProjCostTrans));
        
        qbdsProjCostTrans.addSelectionField(fieldNum(ProjCostTrans, ProjId));
        qbdsProjCostTrans.addSelectionField(fieldNum(ProjCostTrans, CategoryId));

        qbdsProjCostTrans.addGroupByField(fieldNum(ProjCostTrans, ProjId));
        qbdsProjCostTrans.addGroupByField(fieldNum(ProjCostTrans, CategoryId));

        if(_includeSubProjects)
        {
            qbdsProjCostTrans.addRange(fieldNum(ProjCostTrans, ProjId)).value(SysQuery::valueLikeAfter(this.parmProjId()));
        }
        else
        {
            qbdsProjCostTrans.addRange(fieldNum(ProjCostTrans, ProjId)).value(SysQuery::value(this.parmProjId()));
        }

        QueryBuildDataSource qbdsProjCostTransCost = qbdsProjCostTrans.addDataSource(tableNum(ProjCostTransCost));

        qbdsProjCostTransCost.joinMode(JoinMode::ExistsJoin);
        qbdsProjCostTransCost.fetchMode(QueryFetchMode::One2One);

        qbdsProjCostTransCost.relations(true);
        qbdsProjCostTransCost.addRange(fieldNum(ProjCostTransCost, LedgerStatusCost)).value(SysQuery::value(ProjLedgerStatus::BalanceSheet));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryToGetExpTransForEstimateProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get the expense transactions for the specified estimate project.
    /// </summary>
    /// <returns>
    ///     A query to get the expense transactions for the specified estimate project.
    /// </returns>
    protected query buildQueryToGetExpTransForEstimateProject()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsProjCostTrans = query.addDataSource(tableNum(ProjCostTrans));

        qbdsProjCostTrans.addSelectionField(fieldNum(ProjCostTrans, ProjId));
        qbdsProjCostTrans.addSelectionField(fieldNum(ProjCostTrans, CategoryId));

        qbdsProjCostTrans.addGroupByField(fieldNum(ProjCostTrans, ProjId));
        qbdsProjCostTrans.addGroupByField(fieldNum(ProjCostTrans, CategoryId));

        QueryBuildDataSource qbdsProjCostTransCost = qbdsProjCostTrans.addDataSource(tableNum(ProjCostTransCost));

        qbdsProjCostTransCost.joinMode(JoinMode::ExistsJoin);
        qbdsProjCostTransCost.fetchMode(QueryFetchMode::One2One);

        qbdsProjCostTransCost.relations(true);
        qbdsProjCostTransCost.addRange(fieldNum(ProjCostTransCost, LedgerStatusCost)).value(SysQuery::value(ProjLedgerStatus::BalanceSheet));

        QueryBuildDataSource qbdsProjTable = qbdsProjCostTrans.addDataSource(tableNum(ProjTable));
        qbdsProjTable.joinMode(JoinMode::ExistsJoin);
        qbdsProjTable.fetchMode(QueryFetchMode::One2One);

        qbdsProjTable.relations(true);
        qbdsProjTable.addRange(fieldNum(ProjTable, WIPProject)).value(SysQuery::value(this.parmProjWIPId()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryToGetPostedItemTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get posted item transactions for the specified project.
    /// </summary>
    /// <param name = "_includeSubProjects">
    ///     A boolean value to check whether to include sub projects.
    /// </param>
    /// <returns>
    ///     A query object to get posted item transactions for the specified project.
    /// </returns>
    protected query buildQueryToGetPostedItemTrans(boolean _includeSubProjects)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsProjItemTrans = query.addDataSource(tableNum(ProjItemTrans));
        
        qbdsProjItemTrans.addSelectionField(fieldNum(ProjItemTrans, ProjId));
        qbdsProjItemTrans.addSelectionField(fieldNum(ProjItemTrans, CategoryId));

        qbdsProjItemTrans.addGroupByField(fieldNum(ProjItemTrans, ProjId));
        qbdsProjItemTrans.addGroupByField(fieldNum(ProjItemTrans, CategoryId));

        if(_includeSubProjects)
        {
            qbdsProjItemTrans.addRange(fieldNum(ProjItemTrans, ProjId)).value(SysQuery::valueLikeAfter(this.parmProjId()));
        }
        else
        {
            qbdsProjItemTrans.addRange(fieldNum(ProjItemTrans, ProjId)).value(SysQuery::value(this.parmProjId()));
        }

        QueryBuildDataSource qbdsProjItemTransCost = qbdsProjItemTrans.addDataSource(tableNum(ProjItemTransCost));

        qbdsProjItemTransCost.joinMode(JoinMode::ExistsJoin);
        qbdsProjItemTransCost.fetchMode(QueryFetchMode::One2One);

        qbdsProjItemTransCost.relations(true);
        qbdsProjItemTransCost.addRange(fieldNum(ProjItemTransCost, LedgerStatusCost)).value(SysQuery::value(ProjLedgerStatus::BalanceSheet));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryToGetPostedItemTransForEstimateProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query to get posted item transactions for the specified estimate project.
    /// </summary>
    /// <returns>
    ///      A query object to get posted item transactions for the specified estimate project.
    /// </returns>
    protected query buildQueryToGetPostedItemTransForEstimateProject()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsProjItemTrans = query.addDataSource(tableNum(ProjItemTrans));
        
        qbdsProjItemTrans.addSelectionField(fieldNum(ProjItemTrans, ProjId));
        qbdsProjItemTrans.addSelectionField(fieldNum(ProjItemTrans, CategoryId));

        qbdsProjItemTrans.addGroupByField(fieldNum(ProjItemTrans, ProjId));
        qbdsProjItemTrans.addGroupByField(fieldNum(ProjItemTrans, CategoryId));

        QueryBuildDataSource qbdsProjItemTransCost = qbdsProjItemTrans.addDataSource(tableNum(ProjItemTransCost));

        qbdsProjItemTransCost.joinMode(JoinMode::ExistsJoin);
        qbdsProjItemTransCost.fetchMode(QueryFetchMode::One2One);

        qbdsProjItemTransCost.relations(true);
        qbdsProjItemTransCost.addRange(fieldNum(ProjItemTransCost, LedgerStatusCost)).value(SysQuery::value(ProjLedgerStatus::BalanceSheet));

        QueryBuildDataSource qbdsProjTable = qbdsProjItemTrans.addDataSource(tableNum(ProjTable));
        qbdsProjTable.joinMode(JoinMode::ExistsJoin);
        qbdsProjTable.fetchMode(QueryFetchMode::One2One);

        qbdsProjTable.relations(true);
        qbdsProjTable.addRange(fieldNum(ProjTable, WIPProject)).value(SysQuery::value(this.parmProjWIPId()));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>