<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteCycleCountQuantityValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecuteCycleCountQuantityValidator</c> class provides computed quantities for the cycle count form.
/// </summary>
internal class WHSWorkExecuteCycleCountQuantityValidator
{
    #WHSRF

    private WhsrfPassthrough pass;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        // empty
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalCountContainerQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total container quantity.
    /// </summary>
    /// <returns>The total container quantity.</returns>
    private real calculateTotalCountContainerQty()
    {
        container   cycleCountContainer = str2con(pass.lookupStr(WHSWorkExecuteDisplayPieceByPieceControls::CycleCountContainer));
        int         length = conLen(cycleCountContainer);
        int         i;
        Qty         totalQty;

        for (i = 1; i < length; i += 2)
        {
            InventDim productVariantInventDim = pass.createInventDimFromPass();
            
            totalQty += WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                               conPeek(cycleCountContainer, i),
                                                               conPeek(cycleCountContainer, i + 1),
                                                               productVariantInventDim.inventDimId);
        }
        
        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total counted quantity.
    /// </summary>
    /// <returns>
    /// The total counted quantity.
    /// </returns>
    [Hookable(false)]
    internal real calculateTotalQty()
    {
        Qty totalQty;

        if (pass.hasValue(WHSWorkExecuteDisplayPieceByPieceControls::CycleCountContainer))
        {
            totalQty = this.calculateTotalCountContainerQty();
        }
        else
        {
            InventDim productVariantInventDim = pass.createInventDimFromPass();
            Map cycleCountMap = new Map(Types::String, Types::String);

            cycleCountMap.insert(#CycleCountUOM1, #CycleCountQty1);
            cycleCountMap.insert(#CycleCountUOM2, #CycleCountQty2);
            cycleCountMap.insert(#CycleCountUOM3, #CycleCountQty3);
            cycleCountMap.insert(#CycleCountUOM4, #CycleCountQty4);

            MapEnumerator cycleCountEnumerator = cycleCountMap.getEnumerator();

            while (cycleCountEnumerator.moveNext())
            {
                if (pass.exists(cycleCountEnumerator.currentValue()))
                {
                    totalQty += WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                        pass.lookup(cycleCountEnumerator.currentKey()),
                        pass.lookupNum(cycleCountEnumerator.currentValue()),
                        productVariantInventDim.inventDimId);
                }
            }
        }

        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSWorkExecuteCycleCountQuantityValidator construct()
    {
        return new WHSWorkExecuteCycleCountQuantityValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>WHSWorkExecuteCycleCountQuantityValidator</c> class.
    /// </summary>
    /// <param name = "_pass">The state pass through values for the cycle count form.</param>
    /// <returns>An instance of the <c>WHSWorkExecuteCycleCountQuantityValidator</c> class.</returns>
    internal static WHSWorkExecuteCycleCountQuantityValidator newPass(WHSRFPassthrough _pass)
    {
        WHSWorkExecuteCycleCountQuantityValidator validator = WHSWorkExecuteCycleCountQuantityValidator::construct();

        validator.pass = _pass;

        return validator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>