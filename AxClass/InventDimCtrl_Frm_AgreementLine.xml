<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_AgreementLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventDimCtrl_Frm_AgreementLine extends InventDimCtrl_Frm_Editable
{
    InventDimParm   agreementInventDimParm;

    boolean         isCategoryBased;
    FieldId         moduleInventDimGridSetup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formActiveSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the <c>formActiveSetup</c> method to set the item dimensions for category based lines.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about dimension setup.
    /// </param>
    public void formActiveSetup(InventDimGroupSetup _inventDimGroupSetup = null)
    {
        InventDimParm   inventDimParmEnabled;

        super(_inventDimGroupSetup);

        // Enable only location and site for category based lines
        if (isCategoryBased)
        {
            inventDimParmEnabled.setActiveSiteAndWarehouseDimensions();
            this.parmDimParmEnabled(inventDimParmEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowGridField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to show a field in a grid.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID to show.
    /// </param>
    /// <returns>
    ///    true if the field must be shown; otherwise, false.
    /// </returns>
    protected NoYes mustShowGridField(FieldId _dimFieldId)
    {
        NoYes   ret;

        if (_dimFieldId && agreementInventDimParm.(InventDim::dim2dimParm(_dimFieldId)) == NoYes::Yes)
        {
            ret = InventDimSetupGrid::find(_dimFieldId).(moduleInventDimGridSetup);
        }
        else
        {
            ret = NoYes::No;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        List                 fields                 = InventDim::dimAgreementFieldList();
        ListEnumerator       enumerator             = fields.getEnumerator();

        super();

        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId = enumerator.current();
            agreementInventDimParm.(InventDim::dim2dimParm(inventDimFieldId)) = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimParmLockedRightClick</Name>
				<Source><![CDATA[
        public InventDimParm parmDimParmLockedRightClick(InventDimParm _dimParmLockedRightClick = dimParmLockedRightClick)
    {
        InventDimParm   inventDimParm;

        inventDimParm.setAllInventDim();

        inventDimParm = InventDimParm::xorParms(inventDimParm, agreementInventDimParm);

        return super(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleInventDimGridSetup</Name>
				<Source><![CDATA[
        public FieldId parmModuleInventDimGridSetup(FieldId _moduleInventDimGridSetup = moduleInventDimGridSetup)
    {
        // The separat inventory dimensions can be set editable or not which is determined by the
        // InventDimSetupGrid data. This parameter determines which setup to use.

        moduleInventDimGridSetup = _moduleInventDimGridSetup;
        return moduleInventDimGridSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>IsCategoryBased</c> variable according to the parameter.
    /// </summary>
    /// <param name="_isCategoryBased">
    ///    A Boolean that indicates whether an agreement line is category based.
    /// </param>
    public void setIsCategoryBased(boolean  _isCategoryBased)
    {
        isCategoryBased = _isCategoryBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventDimCtrl_Frm_AgreementLine construct()
    {
        return new InventDimCtrl_Frm_AgreementLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventDimCtrl_Frm_AgreementLine</c> class based on the specified form.
    /// </summary>
    /// <param name="_formRun">
    ///    The instance of the <c>formControl</c> class where the inventory dimensions should be controlled.
    /// </param>
    /// <param name="_moduleInventDimGridSetup">
    ///    A field number that indicates which inventory dimensions grid setup to use.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventDimCtrl_Frm_AgreementLine</c> class.
    /// </returns>
    static InventDimCtrl_Frm_AgreementLine newFromForm(FormRun _formRun,
                                                       FieldId  _moduleInventDimGridSetup)
    {
        InventDimCtrl_Frm_AgreementLine inventDimCtrl = InventDimCtrl_Frm_AgreementLine::construct();
        InventDimAxFormAdapter          adapter       = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmModuleInventDimGridSetup(_moduleInventDimGridSetup);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
