<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectAccDistRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjectAccDistRule</c> class is a delegate class that is used in the
/// <c>AccountingDistributionRule</c> classes to handle project related source document line items.
/// </summary>
public class ProjectAccDistRule
{
    AccountingDistributionRule  accountingDistributionRule;
    SourceDocumentLineItem      topSourceDocumentLineItem;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(AccountingDistributionRule _accountingDistributionRule)
    {
        accountingDistributionRule = _accountingDistributionRule;
        if (!accountingDistributionRule.parmSourceDocumentLineItem().parmSourceDocumentLine().ParentSourceDocumentLine)
        {
            topSourceDocumentLineItem = accountingDistributionRule.parmSourceDocumentLineItem();
        }
        else
        {
            topSourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(accountingDistributionRule.parmSourceDocumentLineItem().parmSourceDocumentLine().RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the source document line item of the accounting distribution rule is for a project.
    /// </summary>
    /// <returns>
    /// True if source document line item is project related.
    /// </returns>
    public boolean parmIsProject()
    {
        boolean                         isProject = true;
        ProjectAccountingDistribution   projectAccountingDistribution;

        isProject = ProjectSourceDocumentLineItemHelper::canProcessProject(topSourceDocumentLineItem);
        if (isProject && accountingDistributionRule.parmAccountingdistribution())
        {
            projectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(accountingDistributionRule.parmAccountingdistribution().RecId);
            if (!projectAccountingDistribution)
            {
                isProject = false;
            }
        }

        return isProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type from the project setup.
    /// </summary>
    /// <returns>
    /// A ledger posting type from the project setup.
    /// </returns>
    /// <remarks>
    /// Use the <c>parmIsProject</c> method prior to calling the <c>parmLedgerPostingType</c> method
    /// to determine whether the ledger posting type can be retrieved from project setup.
    /// </remarks>
    public LedgerPostingType parmLedgerPostingType()
    {
        ProjectAccountingDistribution   projectAccountingDistribution;
        ProjTable                       projTable;
        ProjCategory                    projCategory;
        ProjLineProperty                projLineProperty;
        LedgerPostingType               ledgerPostingType;
        SourceDocumentLineItemITimesheets iTimesheets;
        RefRecId                          legalEntityRecId;
        boolean                           isIntercompany;

        if (!this.parmIsProject())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            isIntercompany = ProjectSourceDocumentLineItemHelper::hasIntercompanyLedgerAccount(topSourceDocumentLineItem);
     
            if (accountingDistributionRule.parmAccountingdistribution())
            {
                projectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(accountingDistributionRule.parmAccountingdistribution().RecId);

                if (topSourceDocumentLineItem is SourceDocumentLineItemITimesheets)
                {
                    iTimesheets = topSourceDocumentLineItem as SourceDocumentLineItemITimesheets;
                    legalEntityRecId = iTimesheets.parmProjectLegalEntity();
                }
                else if (topSourceDocumentLineItem is ProjAdvancedJournalSourceDocumentLineItem)
                {
                    ProjAdvancedJournalSourceDocumentLineItem projAdvancedJournalSourceDocumentLineItem = topSourceDocumentLineItem as ProjAdvancedJournalSourceDocumentLineItem;
                    legalEntityRecId = projAdvancedJournalSourceDocumentLineItem.parmProjectLegalEntity();
                }
                else
                {
                    legalEntityRecId = accountingDistributionRule.parmAccountingdistribution().AccountingLegalEntity;
                }

                changecompany (CompanyInfo::findRecId(legalEntityRecId).DataArea)
                {
                    projTable = ProjTable::findRecId(projectAccountingDistribution.ProjTable);
                    projCategory = ProjCategory::findRecId(projectAccountingDistribution.ProjCategory);
                    projLineProperty = ProjLineProperty::findRecId(projectAccountingDistribution.ProjLineProperty);
                    ledgerPostingType = this.getLedgerPostingType(projTable, projCategory, projLineProperty, isIntercompany);
                }
            }
            else
            {
                projTable = ProjectSourceDocumentLineItemHelper::projTable(topSourceDocumentLineItem);
                projCategory = ProjectSourceDocumentLineItemHelper::projCategory(topSourceDocumentLineItem);
                projLineProperty = ProjectSourceDocumentLineItemHelper::projLineProperty(topSourceDocumentLineItem);

                changecompany (projTable.company())
                {
                    ledgerPostingType = this.getLedgerPostingType(projTable, projCategory, projLineProperty, isIntercompany);
                }
            }
        }
        else
        {
            projTable = ProjectSourceDocumentLineItemHelper::projTable(topSourceDocumentLineItem);
            projCategory = ProjectSourceDocumentLineItemHelper::projCategory(topSourceDocumentLineItem);
            projLineProperty = ProjectSourceDocumentLineItemHelper::projLineProperty(topSourceDocumentLineItem);

            changecompany (projTable.company())
            {
                if(this.topSourceDocumentLineItem is ProjAdvancedJournalSourceDocumentLineItem)
                {
                    ProjAdvancedJournalSourceDocumentLineItem projAdvJournalSourceDocumentLineItem = this.topSourceDocumentLineItem as ProjAdvancedJournalSourceDocumentLineItem;
                    ProjAdvancedJournalLine projAdvJournalLine = projAdvJournalSourceDocumentLineItem.parmProjAdvancedJournalLine();
                    if (projAdvJournalLine.shouldProcessSubcontractLineAsNeverLedger())
                    {
                        ledgerPostingType = LedgerPostingType::ProjNeverLedger;
                    }
                    else
                    {
                        ledgerPostingType = ProjectPosting::getProjectPostingTypeFromPSAContractLineItems(projTable, projCategory, projLineProperty, projAdvJournalSourceDocumentLineItem, ProjectSourceDocumentLineItemHelper::hasIntercompanyLedgerAccount(this.topSourceDocumentLineItem));
                    }
                }
                else if (this.topSourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
                {
                    if (ProjectSourceDocumentLineItemHelper::hasIntercompanyLedgerAccount(this.topSourceDocumentLineItem))
                    {
                        ledgerPostingType = LedgerPostingType::ProjCost;
                    }
                    else
                    {
                        ledgerPostingType = LedgerPostingType::ProjProcurementIntegration;
                    }
                }
                else
                {
                    ledgerPostingType = ProjectPosting::getProjectPostingTypeFromPSAContractLineItems(projTable, projCategory, projLineProperty, this.topSourceDocumentLineItem as ProjAdvancedJournalSourceDocumentLineItem, ProjectSourceDocumentLineItemHelper::hasIntercompanyLedgerAccount(this.topSourceDocumentLineItem));
                }
            }
        }
        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAccountingDistributionRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjectAccDistRule</c> class by using an
    /// <c>AccountingDistributionRule</c> instance.
    /// </summary>
    /// <param name="_accountingDistributionRule">
    /// An instance of the <c>AccountingDistributionRule</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>ProjectAccDistRule</c> class.
    /// </returns>
    public static ProjectAccDistRule newFromAccountingDistributionRule(AccountingDistributionRule _accountingDistributionRule)
    {
        return new ProjectAccDistRule(_accountingDistributionRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanUseProjectDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether purchase discounts can be posted to project for the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// True if purchase discounts can be posted to project for the source document line item; otherwise, false.
    /// </returns>
    public static boolean parmCanUseProjectDiscount(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean                         canUseProjectDiscount;
        ItemId                          itemId;
        ItemGroupId                     itemGroupId;
        EcoResCategory                  procurementCategory;
        CustVendTable                   invoiceAccount;
        TaxGroup                        taxGroup;
        Object                          sourceDocumentLineItem;
        Object                          parentSourceDocumentLineItem;
        Object                          sourceDocument;
        SourceDocumentLineItemIProduct  iProduct;
        SourceDocumentIParty            iParty;
        SourceDocumentLineItemITax      iTax;
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;

        sourceDocumentLineItem = _sourceDocumentLineItem;
        if (sourceDocumentLineItem is SourceDocumentLineItemIProduct)
        {
            iProduct            = sourceDocumentLineItem as SourceDocumentLineItemIProduct;
            itemId              = iProduct.parmItemId();
            procurementCategory = iProduct.parmCategory();
        }
        else
        {
            parentSourceDocumentLineItem = _sourceDocumentLineItem.parmParentSourceDocumentLineItem();
            if (parentSourceDocumentLineItem &&
                parentSourceDocumentLineItem is SourceDocumentLineItemIProduct)
            {
                iProduct            = parentSourceDocumentLineItem as SourceDocumentLineItemIProduct;
                itemId              = iProduct.parmItemId();
                procurementCategory = iProduct.parmCategory();
            }
        }

        if (sourceDocumentLineItem is SourceDocumentIParty)
        {
            iParty            = sourceDocumentLineItem as SourceDocumentIParty;
            invoiceAccount    = iParty.parmPartyAccount();
        }
        else
        {
            sourceDocument = sourceDocumentLineItem.parmSourceDocument();
            if (sourceDocument is SourceDocumentIParty)
            {
                iParty            = sourceDocument as SourceDocumentIParty;
                invoiceAccount    = iParty.parmPartyAccount();
            }
        }

        if (sourceDocumentLineItem is SourceDocumentLineItemITax)
        {
            iTax            = sourceDocumentLineItem as SourceDocumentLineItemITax;
            taxGroup        = iTax.parmTaxGroup();
        }

        if (itemId)
        {
            itemGroupId = InventTable::find(itemId).itemGroupId();
        }

        ledgerDimensionDefaultAccount = InventPosting::accountItemLedgerDimensionFromParameters(
            ProjectAccDistRule::buildAccountItemLedgerDimensionParameter(
                InventoryMainAccDimensionListProvider::ledgerPostingType2InventAccountType(LedgerPostingType::PurchDisc),
                itemId,
                itemGroupId,
                procurementCategory.RecId,
                invoiceAccount,
                taxGroup));

        canUseProjectDiscount = (ledgerDimensionDefaultAccount ? false : true);

        return canUseProjectDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingType</Name>
				<Source><![CDATA[
    protected LedgerPostingType getLedgerPostingType(
        ProjTable _projTable,
        ProjCategory _projCategory,
        ProjLineProperty _projLineProperty,
        boolean _isIntercompany = false)
    {
        LedgerPostingType ledgerPostingType = ProjectPosting::getProjectPostingType(_projTable, _projCategory, _projLineProperty, _isIntercompany);

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name="_accountType">An inventory account type.</param>
    /// <param name="_itemId">An item Id.</param>
    /// <param name="_itemGroupId">An item group Id.</param>
    /// <param name="_itemCategory">An item category.</param>
    /// <param name="_invoiceAccount">A customer to vendor map record.</param>
    /// <param name="_taxGroup">A sales tax group.</param>
    /// <returns>The built parameter instance.</returns>
    protected static InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(
        InventAccountType _accountType,
        ItemId _itemId,
        ItemGroupId _itemGroupId,
        InventCategoryRelation _itemCategory,
        CustVendTable _invoiceAccount,
        TaxGroup _taxGroup)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _accountType,
            _itemId,
            _itemGroupId,
            _itemCategory,
            _invoiceAccount.AccountNum,
            _invoiceAccount.GroupId,
            _taxGroup);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>