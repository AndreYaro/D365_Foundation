<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatReporting_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
#ISOCountryRegionCodes
/// <summary>
/// The <c>IntrastatReporting_FR</c> class is responsible for generating file and report for Intrastat France.
/// </summary>
[IntrastatCountryRegionAttribute(#isoFR)]
class IntrastatReporting_FR extends IntrastatReporting
{
    DialogField dialogCorrectionOnly;
    DialogField dialogReportDirection;
    private DialogField dialogAdditionalNumber;
    private DialogField dialogIntrastatReportLevel;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        correctionOnly,
        reportDirection
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        dialogCorrectionOnly = dialog.addFieldValue(extendedTypeStr(NoYesId), correctionOnly, "@SYS3966", "@SYS83434");
        dialogReportDirection = dialog.addFieldValue(enumStr(IntrastatReportDirection), reportDirection);

        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForIntrastat())
        {
            dialogAdditionalNumber = dialog.addFieldValue(extendedTypeStr(IntrastatExternalCode), intrastatExternalCode);
            dialogIntrastatReportLevel = dialog.addFieldValue(extendedTypeStr(Level), intrastatReportLevel, "@SYS73126");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        correctionOnly = dialogCorrectionOnly.value();
        reportDirection = dialogReportDirection.value();

        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForIntrastat())
        {
            intrastatExternalCode = dialogAdditionalNumber.value();
            intrastatReportLevel = dialogIntrastatReportLevel.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion, #CurrentList, super()];
        packed = this.appendVariableToPack(packed, varStr(intrastatExternalCode), intrastatExternalCode);
        packed = this.appendVariableToPack(packed, varStr(intrastatReportLevel), intrastatReportLevel);
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        prePostArgs.setReturnValue(_pack);
        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(IntrastatReporting_FR) + '.' + _variableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource prepareQuery()
    {
        QueryBuildDataSource dataSource = super();

        if (dataSource)
        {
            dataSource.addRange(fieldNum(Intrastat, Direction)).value(IntrastatReporting::reportDirection2DirectionRange(reportDirection));

            if (correctionOnly)
            {
                dataSource.addRange(fieldNum(Intrastat, Correct)).value(queryValue(NoYes::Yes));
            }
         }

        return dataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);
        container packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = packedClass;
                intrastatExternalCode = this.extractPackedVariable(packedClass, varStr(intrastatExternalCode));
                intrastatReportLevel = this.extractPackedVariable(packedClass, varStr(intrastatReportLevel));
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype value;
        [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>