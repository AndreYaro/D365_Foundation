<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalFormTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The classes which are post fixed with CFMJournalFormTable contains the code used to
///    control and manage the header and line forms.
/// </summary>
class CFMJournalFormTable extends JournalFormTable
{
    FormFunctionButtonControl ctrlCalcJournal;
    FormTabPageControl ctrlAggregationFields;
    FormTabPageControl ctrlOrgUnit;
    FormTabPageControl ctrlFilter;
    FormTabPageControl ctrlPaymAccountFilter;
    FormTabPageControl ctrlGeneral;
    FormTabPageControl ctrlCashBalanceControl;
    FormFunctionButtonControl ctrlApplyChanges;
    FormFunctionButtonControl ctrlRevertChanges;
    FormFunctionButtonControl ctrlDeleteLines;
    FormCheckBoxControl ctrlJournalUseCashDisc;

    FormDataSource sourceList_ds;
    FormDataSource paymAccList_ds;
    FormDataSource balanceControl_ds;

    // This is the option to show user-created journals only
    FormCheckBoxControl ctrlShowUserCreatedOnly;
    QueryBuildRange criteriaShowUserCreatedOnly;

    CFMJournalAggregationFieldListPanel aggregationFieldListPanel;
    CFMJournalOrgUnitPanel orgUnitPanel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cfmJournalTable</Name>
				<Source><![CDATA[
    private CFMJournalTable cfmJournalTable()
    {
        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePost</Name>
				<Source><![CDATA[
    public void datasourceCreatePost()
    {
        super();

        this.initDatasourceAllow();
        this.enableFieldsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an additional query range value before executing the query.
    /// </summary>
    void datasourceExecuteQueryPre()
    {
        super();

        // If show user-created only is checked, set the range values to the current user id
        criteriaShowUserCreatedOnly.value(ctrlShowUserCreatedOnly.checked() ? queryValue(curUserId()) : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    public void datasourceInitPost(JournalTableMap _journalTable)
    {
        super(_journalTable);

        if (formRun.args() && formRun.args().record() &&
            formRun.args().dataset() == tableNum(CFMPaymentRequestTable))
        {
            Query query = journalTable_ds.query();

            query.allowCrossCompany(true);

            QueryBuildDataSource qbds = query.dataSourceTable(tableNum(CFMJournalTable));
            qbds.clearDynalinks();

            qbds = qbds.addDataSource(tableNum(CFMJournalTransLog));
            qbds.addRange(fieldNum(CFMJournalTransLog, SourceHeader)).value(queryValue(CFMJournalTransSourceType::PaymentRequest));
            qbds.relations(true);
            qbds.addDynalink(fieldNum(CFMJournalTransLog, SourceHeader), formRun.args().record(), fieldNum(CFMPaymentRequestTable, RecId));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addRange(fieldNum(CFMJournalTransLog, Outdated)).value(queryValue(NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceValidateDeletePost</Name>
				<Source><![CDATA[
    public boolean datasourceValidateDeletePost(boolean _ret)
    {
        boolean ret = true;

        if (journalTable.Posted)
        {
            ret = checkFailed(strFmt("@SYS18421", journalTable.JournalId)) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>designSelectionChangeShowUserCreateOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the query when the show user-created only selection changes.
    /// </summary>
    void designSelectionChangeShowUserCreateOnly()
    {
        if (journalTable_ds)
        {
            journalTable_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    public void enableButtonsActive(boolean _enableInfolog = true)
    {
        boolean notSubmittedWF = this.isNotSubmittedWF();
        boolean enabled = journalTableData.blockLevel() == JournalBlockLevel::None  && ! formRunLines && journalTable.JournalNameId;

        super(_enableInfolog);

        journalTable_ds.allowDelete(!journalTable.Posted);

        ctrlPostJournal.enabled(ctrlPostJournal.enabled() && this.isApprovedWF());

        ctrlCalcJournal.enabled(!journalTable.Posted && notSubmittedWF);

        ctrlApplyChanges.enabled(enabled && notSubmittedWF);
        ctrlRevertChanges.enabled(enabled && notSubmittedWF);
        ctrlDeleteLines.enabled(!journalTable.Posted && enabled);

        ctrlJournalUseCashDisc.visible(CFMParameters::isPaymentRequestsEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFieldsActive</Name>
				<Source><![CDATA[
    public void enableFieldsActive()
    {
        boolean tabsEnabled = this.tabsEnabled();

        super();

        ctrlOverview.allowEdit(!journalTable.numOfLines());
        ctrlOverview.setFocus();
        ctrlAggregationFields.enabled(tabsEnabled);
        ctrlOrgUnit.enabled(tabsEnabled);
        ctrlFilter.enabled(tabsEnabled);
        ctrlPaymAccountFilter.enabled(tabsEnabled);

        ctrlGeneral.enabled(tabsEnabled);
        ctrlCashBalanceControl.enabled(tabsEnabled);

        journalTable_ds.object(fieldNum(CFMJournalTable, IncludeOverduePayment)).allowEdit(this.cfmJournalTable().JournalType == CFMJournalType::Plan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        super();

        aggregationFieldListPanel.init();
        orgUnitPanel.init();

        FormTabPageControl overviewTabPage = formRun.control(formRun.controlId(formControlStr(CFMJournalTable, OverviewTabPage)));
        overviewTabPage.pageActivated();

        aggregationFieldListPanel.parmOnlyViewAccess(journalTable.tableAccessRight() < AccessRight::Delete);
        orgUnitPanel.parmOnlyViewAccess(journalTable.tableAccessRight() < AccessRight::Delete);

        ctrlApplyChanges = formRun.control(formRun.controlId(formControlStr(CFMJournalTable, CFMAnalyticFormEditCommitChangesApply)));
        ctrlRevertChanges = formRun.control(formRun.controlId(formControlStr(CFMJournalTable, CFMAnalyticFormEditCommitChangesRevert)));
        ctrlDeleteLines = formRun.control(formRun.controlId(formControlStr(CFMJournalTable, CFMJournalDeleteLines)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPre</Name>
				<Source><![CDATA[
    public void formInitPre()
    {
        aggregationFieldListPanel = CFMJournalAggregationFieldListPanel::newForm(formRun, formRun.controlId(formControlStr(CFMJournalTable, AggregationFieldsGroup)));

        orgUnitPanel = CFMJournalOrgUnitPanel::newForm(formRun, formRun.controlId(formControlStr(CFMJournalTable, OrgUnitGroup)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    public void initDatasourceAllow()
    {
        super();

        journalTable_ds.allowDelete(this.isNotSubmittedWF());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApprovedWF</Name>
				<Source><![CDATA[
    private boolean isApprovedWF()
    {
        return this.cfmJournalTable().WorkflowStatus == CFMJournalWorkflowStatus::None || this.cfmJournalTable().WorkflowStatus == CFMJournalWorkflowStatus::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotSubmittedWF</Name>
				<Source><![CDATA[
    private boolean isNotSubmittedWF()
    {
        CFMJournalTable cFMJournalTable = journalTable;

        return cFMJournalTable.isNotSubmittedWF();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlAggregationFields</Name>
				<Source><![CDATA[
    public FormTabPageControl parmCtrlAggregationFields(FormTabPageControl _ctrlAggregationFields = ctrlAggregationFields)
    {
        ctrlAggregationFields = _ctrlAggregationFields;
        return ctrlAggregationFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCalcJournal</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlCalcJournal(FormFunctionButtonControl _ctrlCalcJournal = ctrlCalcJournal)
    {
        ctrlCalcJournal = _ctrlCalcJournal;
        return ctrlCalcJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCashBalanceControl</Name>
				<Source><![CDATA[
    public FormTabPageControl parmCtrlCashBalanceControl(FormTabPageControl _ctrlCashBalanceControl = ctrlCashBalanceControl)
    {
        ctrlCashBalanceControl = _ctrlCashBalanceControl;
        return ctrlCashBalanceControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlFilter</Name>
				<Source><![CDATA[
    public FormTabPageControl parmCtrlFilter(FormTabPageControl _ctrlFilter = ctrlFilter)
    {
        ctrlFilter = _ctrlFilter;
        return ctrlFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGeneral</Name>
				<Source><![CDATA[
    public FormTabPageControl parmCtrlGeneral(FormTabPageControl _ctrlGeneral = ctrlGeneral)
    {
        ctrlGeneral = _ctrlGeneral;
        return ctrlGeneral;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlJournalUseCashDisc</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmCtrlJournalUseCashDisc(FormCheckBoxControl _ctrlJournalUseCashDisc = ctrlJournalUseCashDisc)
    {
        ctrlJournalUseCashDisc = _ctrlJournalUseCashDisc;
        return ctrlJournalUseCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlOrgUnit</Name>
				<Source><![CDATA[
    public FormTabPageControl parmCtrlOrgUnit(FormTabPageControl _ctrlOrgUnit = ctrlOrgUnit)
    {
        ctrlOrgUnit = _ctrlOrgUnit;
        return ctrlOrgUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPaymAccountFilter</Name>
				<Source><![CDATA[
    public FormTabPageControl parmCtrlPaymAccountFilter(FormTabPageControl _ctrlPaymAccountFilter = ctrlPaymAccountFilter)
    {
        ctrlPaymAccountFilter = _ctrlPaymAccountFilter;
        return ctrlPaymAccountFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlShowUserCreatedOnly</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlShowUserCreatedOnly</c> field.
    /// </summary>
    /// <param name="_ctrlShowUserCreatedOnly">
    ///    The control to point the field to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlShowUserCreatedOnly</c> field.
    /// </returns>
    public FormCheckBoxControl parmCtrlShowUserCreatedOnly(FormCheckBoxControl _ctrlShowUserCreatedOnly = ctrlShowUserCreatedOnly)
    {
        ctrlShowUserCreatedOnly = _ctrlShowUserCreatedOnly;
        return ctrlShowUserCreatedOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an additional query range to the query.
    /// </summary>
    public void queryAddRange()
    {
        super();

        criteriaShowUserCreatedOnly = journalTable_ds.query().dataSourceNo(1).addRange(fieldNum(CFMJournalTable, CreatedBy));
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshListPanels</Name>
				<Source><![CDATA[
    public void refreshListPanels()
    {
        aggregationFieldListPanel.parmSource(this.journalTable());
        aggregationFieldListPanel.fill();

        orgUnitPanel.parmSource(this.journalTable());
        orgUnitPanel.fill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tabsEnabled</Name>
				<Source><![CDATA[
    private boolean tabsEnabled()
    {
        return !journalTable.numOfLines() && journalTable.RecId && journalTable_ds.allowEdit() && !journalTable.Posted;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>