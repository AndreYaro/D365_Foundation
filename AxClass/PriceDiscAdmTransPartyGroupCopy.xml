<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscAdmTransPartyGroupCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
[PriceDiscPartyCodeTypeFactoryAttribute(PriceDiscPartyCodeType::GroupId)]
class PriceDiscAdmTransPartyGroupCopy extends PriceDiscAdmTransPartyCopy
{
    PriceType                   priceType;
    PriceGroupType              priceGroupType;
    PriceDiscAccountRelation    accountRelation;
    PriceDiscAccountRelation    priceGroupId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAccountRelation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final PriceDiscAccountRelation parmAccountRelation(PriceDiscAccountRelation _accountRelation = accountRelation)
    {
        accountRelation = _accountRelation;
        return accountRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceGroupType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final PriceGroupType parmPriceGroupType(PriceGroupType _priceGroupType = priceGroupType)
    {
        priceGroupType = _priceGroupType;
        return priceGroupType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceGroupId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final PriceDiscAccountRelation parmPriceGroupId(PriceDiscAccountRelation _priceGroupId = priceGroupId)
    {
        priceGroupId = _priceGroupId;
        return priceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final PriceType parmPriceType(PriceType _priceType = priceType)
    {
        priceType = _priceType;
        return priceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFilters</Name>
				<Source><![CDATA[
    protected void applyFilters()
    {
        super();

        qbdsPriceDiscTable.addRange(fieldNum(PriceDiscTable, AccountCode)).value(queryValue(PriceDiscPartyCodeType::GroupId));

        qbdsPriceDiscTable.addRange(fieldNum(PriceDiscTable, Relation)).value(queryValue(priceType));
        
        if (accountRelation)
        {
            qbdsPriceDiscTable.addRange(fieldNum(PriceDiscTable, AccountRelation)).value(queryValue(accountRelation));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>addExistsJoins</Name>
				<Source><![CDATA[
    /// <summary>
    /// Joins <c>CustTable</c> to <c>PriceDiscTable</c>.
    /// </summary>
    /// <param name = "_qbdsPriceDiscTable">The <c>PriceDiscTable</c> datasource to modify.</param>
    protected void addExistsJoins()
    {
        super();
        if (!priceGroupId)
        {
            return;
        }
        
        QueryBuildDataSource                    qbds;
        Query                                   priceDiscGroupQuery;
        QueryRun                                priceDiscGroupQueryRun;
        PriceDiscGroup                          priceDiscGroup;
        PriceDiscTableItemAccountRelationTmp    itemAccountRelationTmp;

        priceDiscGroupQuery = new Query();
        priceDiscGroupQuery.addDataSource(tableNum(PriceDiscGroup));

        qbds = priceDiscGroupQuery.dataSourceTable(tableNum(PriceDiscGroup));
        qbds.addRange(fieldNum(PriceDiscGroup, Module)).value(SysQuery::value(this.parmPartyRoleModule()));

        qbds.addRange(fieldNum(PriceDiscGroup, GroupId)).value(priceGroupId);
        qbds.addRange(fieldNum(PriceDiscGroup, Type)).value(SysQuery::value(priceGroupType));

        priceDiscGroupQueryRun = new QueryRun(priceDiscGroupQuery);

        boolean recordsExist;
        while (priceDiscGroupQueryRun.next())
        {
            priceDiscGroup = priceDiscGroupQueryRun.get(tableNum(PriceDiscGroup));
            itemAccountRelationTmp.AccountItemRelation = priceDiscGroup.GroupId;
            itemAccountRelationTmp.insert();
            recordsExist = true;
        }

        QueryBuildDataSource qbdsItemRelationTmp = qbdsPriceDiscTable.addDataSource(tableNum(PriceDiscTableItemAccountRelationTmp));
        qbdsItemRelationTmp.cursor(itemAccountRelationTmp);
        qbdsItemRelationTmp.fetchMode(QueryFetchMode::One2One);
        qbdsItemRelationTmp.joinMode(JoinMode::ExistsJoin);
        qbdsItemRelationTmp.relations(false);
        if (priceGroupId)
        {
            qbdsItemRelationTmp.addLink(fieldNum(PriceDiscTable, AccountRelation), fieldnum(PriceDiscTableItemAccountRelationTmp, AccountItemRelation), qbdsPriceDiscTable.name());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>