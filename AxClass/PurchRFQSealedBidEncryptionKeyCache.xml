<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedBidEncryptionKeyCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQSealedBidEncryptionKeyCache</c> caches encryption key data of the sealed RFQ reply.
/// </summary>
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public final class PurchRFQSealedBidEncryptionKeyCache
{
    private SysGlobalObjectCache globalObjectCache;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    private GlobalObjectCacheScope cacheScope()
    {
        return classStr(PurchRFQSealedBidEncryptionKeyCache);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the cache.
    /// </summary>
    /// <param name = "_replyTableRecId">The <c>PurchRFQReplyTableRecId</c> of the <c>PurchRFQReplyTable</c> table.</param>
    [Hookable(false)]
    internal void resetCache(PurchRFQReplyTableRecId _replyTableRecId)
    {
        container cacheKey = this.makeCacheKey(_replyTableRecId);

        if (globalObjectCache.find(this.cacheScope(), cacheKey))
        {
            globalObjectCache.remove(this.cacheScope(), cacheKey);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Constructs the key for storing the results in the global object cache from parameters
    ///  passed to the <c>retrieveSealedBidEncryptionKey</c> method.
    /// </summary>
    /// <param name = "_replyTableRecId">The <c>PurchRFQReplyTableRecId</c> of the <c>PurchRFQReplyTable</c> table.</param>
    /// <returns></returns>
    private container makeCacheKey(PurchRFQReplyTableRecId _replyTableRecId)
    {
        str caller = strFmt('%1.%2'
                            , classStr(PurchRFQSealedBidEncryptionKeyCache)
                            , methodStr(PurchRFQSealedBidEncryptionKeyCache, retrieveSealedBidEncryptionKey));

        str arguments = strFmt('%1', _replyTableRecId);

        return [getcurrentpartition(), curExt(), curUserId(), caller, arguments];
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSealedBidEncryptionKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the sealed bid encryption utility.
    /// </summary>
    /// <param name = "_replyTableRecId">The <c>PurchRFQReplyTableRecId</c> of the <c>PurchRFQReplyTable</c> table.</param>
    /// <returns>Sealed bid encryption key data.</returns>
    [Hookable(false)]
    internal container retrieveSealedBidEncryptionKey(PurchRFQReplyTableRecId _replyTableRecId)
    {
        container cacheKey = this.makeCacheKey(_replyTableRecId);
        return globalObjectCache.find(this.cacheScope(), cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSealedBidEncryptionKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the sealed bid encryption key data.
    /// </summary>
    /// <param name = "_replyTableRecId">The <c>PurchRFQReplyTableRecId</c> of the <c>PurchRFQReplyTable</c> table.</param>
    /// <param name = "_encryptionKeyIdentifier">Sealed bid encryption key identifier.</param>
    [Hookable(false)]
    internal void setSealedBidEncryptionKey(PurchRFQReplyTableRecId _replyTableRecId, container _encryptionKeyIdentifier)
    {
        container cacheKey = this.makeCacheKey(_replyTableRecId);

        globalObjectCache.insert(this.cacheScope(), cacheKey, _encryptionKeyIdentifier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        globalObjectCache = classfactory.globalObjectCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>PurchRFQSealedBidEncryptionKeyCache</c> class.
    /// </summary>
    /// <returns> An instance of the <c>PurchRFQSealedBidEncryptionKeyCache</c> class. </returns>
    [Hookable(false)]
    internal static PurchRFQSealedBidEncryptionKeyCache construct()
    {
        return new PurchRFQSealedBidEncryptionKeyCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>