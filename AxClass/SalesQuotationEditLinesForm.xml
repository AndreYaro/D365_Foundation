<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationEditLinesForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesQuotationEditLinesForm extends RunBaseBatch
{
    QueryRun                        queryRun;

    container                       callerRecordsPackedMap;
    ModuleAxapta                    callerModuleAxapta;

    Counter                         progressCounter;

    Counter                         numberOfRecords;
    Counter                         recordsUpdated;

    boolean                         multiForm;

    ParmId                          parmId;
    TransDate                       transDate;

    QueryRun                        chooseLines;
    boolean                         showQueryForm;
    boolean                         showDialog;

    NoYes                           printFormletter;

    SalesQuotationTable             salesQuotationTable;
    SalesQuotationLine              salesQuotationLine;
    SalesQuotationParmTable         salesQuotationParmTable;
    SalesQuotationParmLine          salesQuotationParmLine;
    SalesQuotationParmUpdate        salesQuotationParmUpdate;

    SalesQuotationTable             originalQuotation;

    SalesTable                      salesTableCreated;

    QuotationIdBase                 quotationId;

    FormDataSource                  salesQuotationDatasource;

    container                       printerSettingsFormletter;

    Markup                          markup;

    SalesQuotationTotals            salesQuotationTotals;

    Tax                             tax;

    NoYes                           transferHours2Forecast;
    NoYes                           transferExpenses2Forecast;
    NoYes                           transferFees2Forecast;
    NoYes                           transferItems2Forecast;

    boolean                         skipQueryStatusFilter;

    NoYes                           usePrintManagement;

    smmQuotationReasonId            reasonCode;

    TmpTaxWorkTrans                 journalTmpTaxWorkTrans;

    LogisticsPostalAddressRecId     lineDeliveryPostalAddress;
    Name                            lineDeliveryName;
    CustDlvModeId                   lineDlvMode;

    InterCompanyPosted              interCompanyPosted;

    boolean                         parmUpdateOpportunity;

    Assessment                      quotationFormat;
    NoYes                           printNonCharge;

    #define.currentVersion(4)

    #LOCALMACRO.ParmList
        parmId,
        salesQuotationParmUpdate,
        printerSettingsFormletter,
        printFormletter,
        transferHours2Forecast,
        transferExpenses2Forecast,
        transferFees2Forecast,
        transferItems2Forecast,
        reasonCode,
        usePrintManagement,
        salesQuotationTable,
        callerRecordsPackedMap,
        callerModuleAxapta,
        transDate,
        multiForm,
        quotationFormat,
        printNonCharge
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditTransferLines</Name>
				<Source><![CDATA[
    boolean allowEditTransferLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerModuleAxapta</Name>
				<Source><![CDATA[
    ModuleAxapta callerModuleAxapta(ModuleAxapta _callerModuleAxapta = callerModuleAxapta)
    {
        callerModuleAxapta = _callerModuleAxapta;

        return callerModuleAxapta;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class two times with the
    /// same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    /// method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClientOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the destination for printing reports is set to screen.
    /// </summary>
    /// <returns>
    /// true if both the destination is screen; otherwise, false.
    /// </returns>
    protected boolean checkClientOutput()
    {
        return this.isClientOutput(printerSettingsFormletter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClientOutputPrintManagement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether selected printers in print management are AOS configured printers for printing
    /// original and copy reports.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method is used for finding the default printer setup in print management for the specific
    /// document. It always returns false so that the user can be warned when they print in batch.
    /// </remarks>
    protected boolean checkClientOutputPrintManagement()
    {
        FormLetterPrintManagementValidate formLetterPrintManagementValidate = new FormLetterPrintManagementValidate();
        return formLetterPrintManagementValidate.checkClientOutputPrintManagement(this.printMgmtDocumentType(), this.printMgmtNodeType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLateSelection</Name>
				<Source><![CDATA[
    protected boolean  checkLateSelection()
    {
        boolean  ok = true;

        if (salesQuotationParmUpdate.LateSelection  &&  !salesQuotationParmUpdate.LateSelectionQuery)
        {
            ok = checkFailed("@SYS72782");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrinterSettingsMultiThread</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the printers that are selected for printing journals are AOS configured printers.
    /// </summary>
    /// <returns>
    ///    true if the selected printers are AOS configured printers; otherwise, false.
    /// </returns>
    public boolean checkPrinterSettingsMultiThread()
    {
        if (printFormletter && this.batchInfo().parmBatchExecute())
        {
            FormLetterPrintManagementValidate formLetterPrintManagementValidate = new FormLetterPrintManagementValidate();
            return formLetterPrintManagementValidate.checkPrinterSettingsMultiThread(this.usePrintManagement(), false, this.checkClientOutput(), this.printMgmtDocumentType(), this.printMgmtNodeType());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    void  chooseLines(SalesQuotationParmTable     _salesQuotationParmTable = null)
    {
        while (chooseLines.next())
        {
            SalesQuotationTable localSalesQuotationTable = chooseLines.get(tableNum(SalesQuotationTable));
            SalesQuotationLine localSalesQuotationLine = chooseLines.get(tableNum(SalesQuotationLine));

            if (localSalesQuotationTable.isIntegrationOwnerDynamics365Sales()
                && ((localSalesQuotationTable.RecId == salesQuotationTable.RecId && salesQuotationTable.IsIntegration != TradeIntegrationType::Dynamics365Sales)
                    || localSalesQuotationTable.RecId != salesQuotationTable.RecId))
            {
                continue;
            }

            CustName deliveryName = localSalesQuotationTable.DeliveryName;
            LogisticsPostalAddressRecId deliveryAddress = localSalesQuotationTable.DeliveryPostalAddress;
            CustDlvModeId dlvMode = localSalesQuotationTable.DlvMode;

            if (!_salesQuotationParmTable.RecId                                                 ||
                _salesQuotationParmTable.QuotationId        !=  localSalesQuotationLine.QuotationId ||
                _salesQuotationParmTable.DlvMode            != dlvMode                          ||
                _salesQuotationParmTable.DeliveryPostalAddress != deliveryAddress               ||
                _salesQuotationParmTable.DeliveryName       != deliveryName)
            {
                _salesQuotationParmTable = SalesQuotationParmTable::findDeliveryInformation(salesQuotationParmUpdate.ParmId, localSalesQuotationLine.QuotationId, deliveryName, deliveryAddress, dlvMode);
            }

            if (!_salesQuotationParmTable)
            {
                _salesQuotationParmTable.clear();
                _salesQuotationParmTable.TableRefId = formletterParmData::getNewTableRefId();
            }

            if (this.createParmLine(localSalesQuotationLine,_salesQuotationParmTable))
            {
                if (!_salesQuotationParmTable)
                {
                    this.createParmTable(_salesQuotationParmTable,
                                         localSalesQuotationTable,
                                         deliveryName,
                                         deliveryAddress,
                                         dlvMode);

                    _salesQuotationParmTable.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up after a dialog box has been canceled.
    /// </summary>
    void  cleanupDialog()
    {
        SalesQuotationParmTable::deleteWithoutUpdate(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    abstract boolean createJournal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to create parmline.
    /// </summary>
    /// <param name = "_salesQuotationLine">
    /// Sales quotation line.
    /// </param>
    /// <param name = "_salesQuotationParmTable">
    /// A <c>SalesQuotationParmTable</c> record buffer.
    /// </param>
    /// <returns>
    /// true if the parmline must be created; otherwise, false.
    /// </returns>
    protected boolean mustCreateParmLine(SalesQuotationLine _salesQuotationLine, SalesQuotationParmTable _salesQuotationParmTable)
    {
        return (_salesQuotationLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductNotStopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a product is not stopped for the specific order setup type.
    /// </summary>
    /// <param name = "_itemId">ItemId of the item to check the stopped flag for.</param>   
    /// <param name = "_inventDim">Inventory dimensions record.</param>
    /// <param name = "_showSetupType">true if warning should include order setup type; Optional.</param>
    /// <returns>true if product is not stopped or if product doesn't have product dimensions fully specified; 
    /// otherwise, false.</returns>
    protected boolean checkProductNotStopped(ItemId _itemId,                                           
                                            InventDim _inventDim, 
                                            boolean _showSetupType = true)
    {
        boolean productNotStopped =  
            InventDistinctProductValidator::checkProductNotStopped(_itemId,
                InventItemOrderSetupType::Sales,
                _inventDim,
                _showSetupType);

        return productNotStopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    boolean  createParmLine(SalesQuotationLine         _salesQuotationLine,
                         SalesQuotationParmTable    _salesQuotationParmTable)
    {
        SalesQuotationParmLine      localSalesQuotationParmLine;
        boolean                     linecreated = false;

        if (this.mustCreateParmLine(_salesQuotationLine, _salesQuotationParmTable))
        {
            localSalesQuotationParmLine.clear();
            this.initParmLine(localSalesQuotationParmLine, _salesQuotationLine, _salesQuotationParmTable);
            localSalesQuotationParmLine.insert();

            linecreated = true;
        }

        return linecreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the passed <c>SalesQuotationParmLine</c> record with the passed arguments.
    /// </summary>
    /// <param name = "_salesQuotationParmLine">
    /// The <c>SalesQuotationParmLine</c> record to be initialized.
    /// </param>
    /// <param name = "_salesQuotationLine">
    /// The <c>SalesQuotationLine</c> record to initialize from.
    /// </param>
    /// <param name = "_salesQuotationParmTable">
    /// The <c>SalesQuotationParmTable</c> record to initialize from.
    /// </param>
    protected void initParmLine(SalesQuotationParmLine _salesQuotationParmLine,
                                SalesQuotationLine _salesQuotationLine,
                                SalesQuotationParmTable _salesQuotationParmTable)
    {
        _salesQuotationParmLine.initFromParmTable(_salesQuotationParmTable);
        _salesQuotationParmLine.initFromSalesQuotationLine(_salesQuotationLine);

        _salesQuotationParmLine.ParmId      = parmId;
        _salesQuotationParmLine.Transfer    = NoYes::Yes;

        this.setParmLineDeliverNow(_salesQuotationParmLine, _salesQuotationLine);

        this.setParmLineLineAmount(_salesQuotationParmLine, _salesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmLineDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the deliver now fields on <c>SalesQuotationParmLine</c> record.
    /// </summary>
    /// <param name = "_salesQuotationParmLine">
    /// The <c>SalesQuotationParmLine</c> record to be initialized.
    /// </param>
    /// <param name = "_salesQuotationLine">
    /// The <c>SalesQuotationLine</c> record to initialize from.
    /// </param>
    private void setParmLineDeliverNow(SalesQuotationParmLine _salesQuotationParmLine,
                                         SalesQuotationLine _salesQuotationLine)
    {
        _salesQuotationParmLine.DeliverNow  = _salesQuotationLine.SalesQty;
        _salesQuotationParmLine.setInventDeliverNow();
        _salesQuotationParmLine.PdsCWDeliverNow = _salesQuotationLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmLineLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the line amount on <c>SalesQuotationParmLine</c> record.
    /// </summary>
    /// <param name = "_salesQuotationParmLine">
    /// The <c>SalesQuotationParmLine</c> record to be initialized.
    /// </param>
    /// <param name = "_salesQuotationLine">
    /// The <c>SalesQuotationLine</c> record to initialize from.
    /// </param>
    private void setParmLineLineAmount(SalesQuotationParmLine _salesQuotationParmLine,
                                         SalesQuotationLine _salesQuotationLine)
    {
        _salesQuotationParmLine.setLineAmount(_salesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmTable</Name>
				<Source><![CDATA[
    void createParmTable(SalesQuotationParmTable    _salesQuotationParmTable,
                         SalesQuotationTable        _salesQuotationTable,
                         CustName                   _deliveryName       = _salesQuotationTable.DeliveryName,
                         LogisticsPostalAddressRecId _deliveryAddress    = _salesQuotationTable.DeliveryPostalAddress,
                         CustDlvModeId              _dlvMode            = _salesQuotationTable.DlvMode)
    {
        _salesQuotationParmTable.initFromSalesQuotationTable(_salesQuotationTable);

        _salesQuotationParmTable.DeliveryName           = _deliveryName;
        _salesQuotationParmTable.DeliveryPostalAddress  = _deliveryAddress;
        _salesQuotationParmTable.DlvMode                = _dlvMode;
        _salesQuotationParmTable.Transdate              = this.parmTransDate();
        _salesQuotationParmTable.QuotationExpiryDate    = _salesQuotationTable.QuotationExpiryDate;
        _salesQuotationParmTable.ParmId                 = parmId;
        _salesQuotationParmTable.Ordering               = this.documentStatus();
        _salesQuotationParmTable.BatchType              = SalesBatch::FormLetter;
        _salesQuotationParmTable.BatchAdministration    = multiForm;
        _salesQuotationParmTable.ParmJobStatus          = ParmJobStatus::Waiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    void  createParmUpdate(LateSelection _lateSelection = false, LateSelectionQuery _lateSelectionQuery = conNull())
    {
        salesQuotationParmUpdate.ParmId                     = this.parmId();
        salesQuotationParmUpdate.DocumentStatus             = this.documentStatus();
        salesQuotationParmUpdate.Storno                     = CustParameters::find().CreditError;
        salesQuotationParmUpdate.LateSelection              = _lateSelection;
        salesQuotationParmUpdate.LateSelectionQuery         = _lateSelectionQuery;
        salesQuotationParmUpdate.SumBy                      = this.sumByInit();

        salesQuotationParmUpdate.initFromSalesQuotationParameters();

        // When called from the batch dialog the record already exists
        if (! SalesQuotationParmUpdate::exist(salesQuotationParmUpdate.ParmId))
        {
            salesQuotationParmUpdate.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        FormRun salesQuotationEditLines = classfactory.formRunClass(SalesQuotationEditLinesForm::newClientArgs(formStr(SalesQuotationEditLines), this));

        salesQuotationEditLines.init();

        // benchmark start
        /*    if (BMMainControl::inAction())
            SalesQuotationEditLines.setTimeOut('CloseOK',10,true);*/
        // benchmark end

        if (showDialog)
            return salesQuotationEditLines;

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    abstract void displayProgress()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCaption</Name>
				<Source><![CDATA[
    str  formLetterCaption()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesQuery</Name>
				<Source><![CDATA[
    void  initLinesQuery()
    {
        this.updateQueryBuildSalesQuotationTable();

        if (chooseLines.prompt())
        {
            if (this.documentStatus() == DocumentStatus::Confirmation)
                this.restrictProspects();

            SalesQuotationParmTable::deleteWithoutUpdate(parmId);
            if (!salesQuotationParmUpdate.LateSelection)
            this.chooseLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void  initParameters(NoYes                  _printFormLetter            = printFormLetter,
                         NoYes                  _transferHours2Forecast     = transferHours2Forecast,
                         NoYes                  _transferExpenses2Forecast  = transferExpenses2Forecast,
                         NoYes                  _transferFees2Forecast      = transferFees2Forecast,
                         NoYes                  _transferItems2Forecast     = transferItems2Forecast,
                         smmQuotationReasonId   _reasonCode                 = reasonCode,
                         NoYes                  _usePrintManagement         = usePrintManagement,
                         SalesQuotationParmUpdate _salesQuotationParmUpdate = salesQuotationParmUpdate,
                         Assessment             _quotationFormat            = Assessment::FullQuote,
                         NoYes                  _printNonCharge             = printNonCharge)

    {
        printFormLetter             = _printFormLetter;

        transferHours2Forecast      = _transferHours2Forecast;
        transferExpenses2Forecast   = _transferExpenses2Forecast;
        transferFees2Forecast       = _transferFees2Forecast;
        transferItems2Forecast      = _transferItems2Forecast;
        reasonCode                  = _reasonCode;

        usePrintManagement          = _usePrintManagement;
        salesQuotationParmUpdate    = _salesQuotationParmUpdate;
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.parmPSAAssessment(_quotationFormat);
            printNonCharge              = _printNonCharge;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmSalesQuotationTable</Name>
				<Source><![CDATA[
    void  initParmSalesQuotationTable(SalesQuotationTable  _salesQuotationTable)
    {
        salesQuotationTable = _salesQuotationTable;

        if (! salesQuotationTable)
        {
            multiForm = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPosted</Name>
				<Source><![CDATA[
    public InterCompanyPosted interCompanyPosted(InterCompanyPosted _interCompanyPosted = interCompanyPosted)
    {
        interCompanyPosted = _interCompanyPosted;

        return interCompanyPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClientOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the destination is the screen.
    /// </summary>
    /// <param name="_printerSettings">
    /// A container that contains printer settings that are used to find the selected printer.
    /// </param>
    /// <returns>
    /// true if the selected destination is the screen; otherwise, false.
    /// </returns>
    protected boolean isClientOutput(container _printerSettings)
    {
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(_printerSettings);

        return printSettings.printMediumType() == SRSPrintMediumType::Screen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelectionRemoveLines</Name>
				<Source><![CDATA[
    boolean  lateSelectionRemoveLines()
    {
        boolean  ok = true;

        if (salesQuotationParmUpdate.LateSelection  &&  salesQuotationParmUpdate.numberOfTables() > 0)
        {
            if (Box::yesNo("@SYS72909", DialogButton::Yes))
            {
                SalesQuotationParmTable::deleteWithoutUpdate(salesQuotationParmUpdate.ParmId);
            }
            else
            {
                salesQuotationParmUpdate.LateSelection = false;
                ok = false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiForm</Name>
				<Source><![CDATA[
    boolean multiForm(boolean  _multiForm = multiForm)
    {
        multiForm = _multiForm;

        return multiForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(boolean  getParmId = true)
    {
        super();

        showQueryForm           = false;
        showDialog              = true;
        skipQueryStatusFilter   = false;

        if (getParmId)
        {
            parmId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfRecords</Name>
				<Source><![CDATA[
    Counter  numberOfRecords(Counter  _numberOfRecords = numberOfRecords)
    {
        numberOfRecords = _numberOfRecords;
        return numberOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#ParmList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    ParmId  parmId(ParmId  _parmId = parmId)
    {
        parmId = _parmId;

        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSAAssessment</Name>
				<Source><![CDATA[
    Assessment parmPSAAssessment(Assessment _quotationFormat = quotationFormat)
    {
        quotationFormat = _quotationFormat;

        return quotationFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSAPrintNonCharge</Name>
				<Source><![CDATA[
    NoYes parmPSAPrintNonCharge(NoYes _printNonCharge = printNonCharge)
    {
        printNonCharge = _printNonCharge;

        return printNonCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTableCreated</Name>
				<Source><![CDATA[
    SalesTable parmSalesTableCreated(SalesTable     _salesTable = salesTableCreated)
    {
        salesTableCreated  = _salesTable;

        return salesTableCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    TransDate parmTransDate(TransDate  _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateOpportunity</Name>
				<Source><![CDATA[
    public boolean  parmUpdateOpportunity(boolean  _parmUpdateOpportunity = parmUpdateOpportunity)
    {
        parmUpdateOpportunity = _parmUpdateOpportunity;
        return parmUpdateOpportunity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
    void  postUpdate()
    {
        SalesQuotationTable salesQuotationTableUpdate;

        if (this.documentStatus() == DocumentStatus::Confirmation)
        {
            select firstonly pessimisticlock salesQuotationTableUpdate
                   index hint QuotationIdx
                   where salesQuotationTableUpdate.QuotationId == salesQuotationParmTable.QuotationId;

            if (salesQuotationTableUpdate.QuotationStatus == SalesQuotationStatus::Confirmed
                && !salesQuotationTableUpdate.isIntegrationOwnerDynamics365Sales())
            {
                throw error(strFmt("@SYS100072",SalesQuotationStatus::Sent,SalesQuotationStatus::Created));
            }
        }
        else
        {
            salesQuotationTableUpdate = salesQuotationParmTable.salesQuotationTable(true);
        }
        
        ttsbegin;

        if (salesTableCreated.RecId != 0)
        {
            salesQuotationTableUpdate.SalesIdRef = salesTableCreated.SalesId;

            // If there is a LG for this quotation, transfer its LG to the new sales order.
            if (salesQuotationTableUpdate.isMarkedForBankLG())
            {
                salesQuotationTableUpdate.BankLGDocumentMap::transferGuarantee(salesTableCreated);

                salesTableCreated.BankDocumentType = BankDocumentType::LetterOfGuarantee;
                salesTableCreated.update();

                salesQuotationTableUpdate.BankDocumentType = BankLGDocumentType::None;
            }
        }

        this.initializeSalesQuotationTableFromDocumentStatus(salesQuotationTableUpdate);

        salesQuotationTableUpdate.update(true,this.isInBatch());

        SalesQuotationParmTable parmTable = SalesQuotationParmTable::find(salesQuotationParmTable.QuotationId,
                                                                          salesQuotationParmTable.ParmId,
                                                                          true);
        parmTable.updateParmJobStatusExecuted();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesQuotationTableFromDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the provided <c>SalesQuotationTable</c> by the document status.
    /// </summary>
    /// <param name = "_salesQuotationTable">A <c>SalesQuotationTable</c>.</param>
    protected void initializeSalesQuotationTableFromDocumentStatus(SalesQuotationTable _salesQuotationTable)
    {
        switch (this.documentStatus())
        {
            case DocumentStatus::Quotation:
                if (!_salesQuotationTable.isIntegrationOwnerDynamics365Sales())
                {
                    _salesQuotationTable.QuotationStatus = SalesQuotationStatus::Sent;
                }
                break;

            case DocumentStatus::Confirmation:
                _salesQuotationTable.ReasonId        = reasonCode;
                _salesQuotationTable.ConfirmDate     = salesQuotationTable.lastConfirmationDate();
                if (!_salesQuotationTable.isIntegrationOwnerDynamics365Sales())
                {
                    _salesQuotationTable.QuotationStatus = SalesQuotationStatus::Confirmed;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptInit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the job by creating a new <c>ParmUpdate</c> record. Also constructs and runs the query
    ///    to fill <c>ParmTable</c> and <c>ParmLine</c> tables
    /// </summary>
    void prePromptInit()
    {
        this.createParmUpdate();

        if (salesQuotationTable)
        {
            this.showQueryForm(false);
            this.initLinesQuery();
        }
        else
        {
            this.showQueryForm(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printerSettingsFormletter</Name>
				<Source><![CDATA[
    container printerSettingsFormletter()
    {
        return printerSettingsFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFormLetter</Name>
				<Source><![CDATA[
    boolean  printFormLetter(boolean  _printFormletter = printFormLetter)
    {
        printFormLetter = _printFormletter;
        return printFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the report.
    /// </summary>
    /// <remarks>
    /// Implemented in the derived classes.
    /// </remarks>
    protected void  printJournal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type.
    /// </returns>
    /// <remarks>
    /// The print management document type identifies to which document type print management the setup
    /// relates.
    /// </remarks>
    abstract protected PrintMgmtDocumentType printMgmtDocumentType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the print management node type.
    /// </summary>
    /// <returns>
    ///    The print management node type.
    /// </returns>
    /// <remarks>
    ///    The print management node type identifies to which module in Microsoft Dynamics AX the print
    ///    management relates. Node type <c>Sales</c> is selected to be default.
    /// </remarks>
    protected PrintMgmtNodeType printMgmtNodeType()
    {
        return PrintMgmtNodeType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    void progressUpdate(str text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildParmLine</Name>
				<Source><![CDATA[
    QueryRun  queryBuildParmLine()
    {
        Query query = new Query();
        QueryBuildDataSource dataSource = query.addDataSource(tableNum(SalesQuotationParmLine));
        dataSource.update(true);

        dataSource.addRange(fieldNum(SalesQuotationParmLine, QuotationId));
        if (salesQuotationTable)
        {
            dataSource.rangeField(fieldNum(SalesQuotationParmLine, QuotationId)).value(queryValue(salesQuotationTable.QuotationId));
        }

        dataSource.addRange(fieldNum(SalesQuotationParmLine, ParmId)).value(queryValue(parmId));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildParmTable</Name>
				<Source><![CDATA[
    QueryRun  queryBuildParmTable()
    {
        #query

        Query                query            = new Query();
        QueryBuildDataSource dataSourceUpdate = query.addDataSource(tableNum(SalesQuotationParmUpdate));
        QueryBuildDataSource dataSourceTable  = dataSourceUpdate.addDataSource(tableNum(SalesQuotationParmTable));
        dataSourceTable.relations(true);

        QueryRun localqueryRun = new QueryRun(query);
        localqueryRun.query().dataSourceTable(tableNum(SalesQuotationParmUpdate)).addRange(fieldNum(SalesQuotationParmUpdate, ParmId)).value(salesQuotationParmUpdate.ParmId);

        localqueryRun.query().dataSourceTable(tableNum(SalesQuotationParmTable)).addRange(fieldNum(SalesQuotationParmTable, ParmJobStatus)).value(queryValue(ParmJobStatus::Waiting));

        localqueryRun.literals(#queryForcePlaceholders);

        return localqueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildSalesQuotationTable</Name>
				<Source><![CDATA[
    abstract QueryRun queryBuildSalesQuotationTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryChooseLines</Name>
				<Source><![CDATA[
    QueryRun  queryChooseLines(QueryRun  _chooseLines = chooseLines)
    {
        chooseLines = _chooseLines;
        return chooseLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reasonCode</Name>
				<Source><![CDATA[
    smmQuotationReasonId reasonCode(smmQuotationReasonId    _reasonCode = reasonCode)
    {
        reasonCode = _reasonCode;

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restrictProspects</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures quotations for prospects are not included in the query.
    /// </summary>
    public void restrictProspects()
    {
        QueryBuildDataSource qbds = chooseLines.query().dataSourceTable(tableNum(SalesQuotationTable));

        // If no filter value entered for customer account, return only records which have a customer account value
        if (!SysQuery::findOrCreateRange(qbds, fieldNum(SalesQuotationTable, CustAccount)).value())
        {
            SysQuery::findOrCreateRange(qbds, fieldNum(SalesQuotationTable, CustAccount)).value(SysQuery::valueNotEmptyString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void  run()
    {
        #OCCRetryCount
        Counter                 infoLogCounter = infolog.num();

        //Progress total
        select count(RecId) from salesQuotationParmTable
            where salesQuotationParmTable.ParmId == parmId;

        this.progressInit("@SYS25781", salesQuotationParmTable.RecId, #AviFileDel);

        progress.setText("@SYS26577");

        setPrefix(strFmt("@SYS62814", enum2str(this.documentStatus())));

        if (salesQuotationParmUpdate.LateSelection)
        {
            if (salesQuotationParmUpdate.numberOfTables())
            {
                this.parmId(NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num());
                this.createParmUpdate(salesQuotationParmUpdate.LateSelection, salesQuotationParmUpdate.LateSelectionQuery);
            }

            chooseLines = new QueryRun(salesQuotationParmUpdate.LateSelectionQuery);
            this.chooseLines();

            if (salesQuotationParmUpdate.numberOfLines() < 1)
                checkFailed("@SYS26185");
        }

        QueryRun query = this.queryBuildParmTable();
        while (query.next())
        {
            salesQuotationParmTable = query.get(tableNum(SalesQuotationParmTable));
            salesQuotationTable     = salesQuotationParmTable.salesQuotationTable(true);

            if (salesQuotationTable)
            {
                numberOfRecords++;
                setPrefix(#PreFixField(SalesQuotationTable, quotationId));

                try
                {
                    ttsbegin;

                    if (this.createJournal())
                    {
                        ttscommit;

                        this.printJournal();
                    }
                    else
                    {
                        this.updateParmJobStatusContainErrors(infolog.copy(infoLogCounter+1,infolog.num()));
                        ttscommit;

                        infoLogCounter = infolog.num();
                    }

                    recordsUpdated++;
                }

                catch (Exception::Deadlock)
                {
                    retry;
                }

                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }

                catch (Exception::Error)
                {
                    this.updateParmJobStatusContainErrors(infolog.copy(infoLogCounter+1,infolog.num()));
                    infoLogCounter = infolog.num();
                }
            }
        }

        progress = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>SalesQuotationEditLinesForm</c> class can be used in the enhanced batch
    ///    framework.
    /// </summary>
    /// <returns>
    ///    true if the <c>SalesQuotationEditLinesForm</c> class can be used in the enhanced batch framework;
    ///    otherwise, false
    /// </returns>
    /// <remarks>
    ///    This method always returns true.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationExecuteQuery</Name>
				<Source><![CDATA[
    void salesQuotationExecuteQuery()
    {
        salesQuotationDatasource.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationParmUpdate</Name>
				<Source><![CDATA[
    SalesQuotationParmUpdate  salesQuotationParmUpdate(SalesQuotationParmUpdate  _salesQuotationParmUpdate = salesQuotationParmUpdate)
    {
        salesQuotationParmUpdate = _salesQuotationParmUpdate;
        return salesQuotationParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationTable</Name>
				<Source><![CDATA[
    SalesQuotationTable salesQuotationTable(SalesQuotationTable     _salesQuotationTable = salesQuotationTable)
    {
        salesQuotationTable = _salesQuotationTable;

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallerRecordsPackedMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the container by using a packed map of the records selected by the user on the caller form.
    /// </summary>
    /// <param name="_callerRecordsPackedMap">
    ///    A packed map of the records selected by the user on the caller form.
    /// </param>
    /// <remarks>
    ///    The map is used when updating query.
    /// </remarks>
    void setCallerRecordsPackedMap(container _callerRecordsPackedMap)
    {
        callerRecordsPackedMap = _callerRecordsPackedMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesQuotationDataSource</Name>
				<Source><![CDATA[
    void  setSalesQuotationDataSource(FormDataSource    _dataSource)
    {
        salesQuotationDatasource = _dataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProjTransferSelection</Name>
				<Source><![CDATA[
    boolean showProjTransferSelection()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryForm</Name>
				<Source><![CDATA[
    boolean  showQueryForm(boolean  _showQueryForm = showQueryForm)
    {
        showQueryForm = _showQueryForm;

        return showQueryForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showReasonCode</Name>
				<Source><![CDATA[
    boolean showReasonCode()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTransferLines</Name>
				<Source><![CDATA[
    boolean showTransferLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipQueryStatusFilter</Name>
				<Source><![CDATA[
    boolean skipQueryStatusFilter(boolean    _skipQueryStatusFilter = skipQueryStatusFilter)
    {
        skipQueryStatusFilter = _skipQueryStatusFilter;

        return skipQueryStatusFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByInit</Name>
				<Source><![CDATA[
    protected AccountOrder sumByInit()
    {
        return SalesParameters::find().SummaryUpdateBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    Tax tax(Tax _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    TmpTaxWorkTrans tmpTaxWorkTrans(RecId headingRecId)
    {
        TmpTaxWorkTrans tmpTaxWorkTrans;

        while select journalTmpTaxWorkTrans
              where journalTmpTaxWorkTrans.HeadingRecId == headingRecId
        {
            tmpTaxWorkTrans.clear();
            tmpTaxWorkTrans.data(journalTmpTaxWorkTrans);
            tmpTaxWorkTrans.insert();
        }

        return tmpTaxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    TransDate transDate(TransDate  _transDate = transDate)
    {
        if (!_transDate)
        {
            _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferExpenses2Forecast</Name>
				<Source><![CDATA[
    boolean transferExpenses2Forecast(boolean  _transferExpenses2Forecast = transferExpenses2Forecast)
    {
        transferExpenses2Forecast = _transferExpenses2Forecast;

        return transferExpenses2Forecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferFees2Forecast</Name>
				<Source><![CDATA[
    boolean transferFees2Forecast(boolean  _transferFees2Forecast = transferFees2Forecast)
    {
        transferFees2Forecast = _transferFees2Forecast;

        return transferFees2Forecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferHours2Forecast</Name>
				<Source><![CDATA[
    boolean transferHours2Forecast(boolean  _transferHours2Forecast = transferHours2Forecast)
    {
        transferHours2Forecast = _transferHours2Forecast;

        return transferHours2Forecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferItems2Forecast</Name>
				<Source><![CDATA[
    boolean transferItems2Forecast(boolean  _transferItems2Forecast = transferItems2Forecast)
    {
        transferItems2Forecast = _transferItems2Forecast;

        return transferItems2Forecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion  :
                [version,#ParmList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update(Common                  _source,
                TransDate               _transDate          = this.transDate(),
                NoYes                   _transferForecast   = NoYes::Yes,
                NoYes                   _printFormLetter    = printFormLetter,
                smmQuotationReasonId    _reasonCode         = reasonCode)
    {
        if (_source.TableId == tableNum(SalesQuotationTable))
        {
            this.salesQuotationTable(_source);
            this.initParmSalesQuotationTable(salesQuotationTable);
            this.skipQueryStatusFilter(true);
        }

        if (!_transDate)
            _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        this.transDate          (_transDate);
        this.printFormLetter    (_printFormLetter);
        this.createParmUpdate();

        this.initParameters(_printFormLetter,
                            _transferForecast,      // transfer hours to forecast
                            _transferForecast,      // transfer expenses to forecast
                            _transferForecast,      // transfer fees to forecast
                            _transferForecast,      // transfer items to forecast
                            _reasonCode);

        this.initLinesQuery();

        this.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    abstract boolean updateNow()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOpportunity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>smmOpportunityTable</c> records associated with the sales quotations.
    /// </summary>
    /// <remarks>
    /// This method is to be overridden in extending classes as needed.
    /// </remarks>
    public void updateOpportunity()
    {
        SalesQuotationParmUpdate salesQuotationParmUpdateTmp;
        SalesQuotationParmTable  salesQuotationParmTableTmp;

        if (this.documentStatus() == DocumentStatus::Confirmation)
        {
            while select salesQuotationParmTableTmp
                where salesQuotationParmTableTmp.ParmId        == this.parmId() &&
                      salesQuotationParmTableTmp.Ordering      == DocumentStatus::Confirmation &&
                      salesQuotationParmTableTmp.ParmJobStatus == ParmJobStatus::Executed
                    exists join salesQuotationParmUpdateTmp
                        where salesQuotationParmUpdateTmp.ParmId == salesQuotationParmTableTmp.ParmId
            {
                SalesQuotationTable salesQuotationTableTmp = salesQuotationParmTableTmp.salesQuotationTable();
                smmOpportunityTable smmOpportunityTable = smmOpportunityTable::find(salesQuotationTableTmp.OpportunityId, true);

                if (smmOpportunityTable && smmOpportunityTable.Status != smmOpportunityStatus::Won)
                {
                    ttsbegin;
                    smmOpportunityTable.Reason          = reasonCode;
                    smmOpportunityTable.ClosedByWorker  = smmUtility::getCurrentContactWorker();
                    smmOpportunityTable.ClosedDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    smmOpportunityTable.Status          = smmOpportunityStatus::Won;

                    smmOpportunityTable.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmJobStatusContainErrors</Name>
				<Source><![CDATA[
    void updateParmJobStatusContainErrors(container errorText)
    {
        ttsbegin;

        salesQuotationParmTable = SalesQuotationParmTable::find(salesQuotationParmTable.QuotationId,
                                                                salesQuotationParmTable.ParmId,
                                                                true);

        salesQuotationParmTable.Log = Info::infoCon2Str(errorText);
        salesQuotationParmTable.updateParmJobStatusContainErrors();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinterSettingsFormLetter</Name>
				<Source><![CDATA[
    void updatePrinterSettingsFormLetter(container   _printerSettings)
    {
        printerSettingsFormLetter = _printerSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildSalesQuotationTable</Name>
				<Source><![CDATA[
    void  updateQueryBuildSalesQuotationTable()
    {
        #query

        if (salesQuotationParmUpdate.LateSelection && salesQuotationParmUpdate.LateSelectionQuery!= conNull())
        {
            SysQueryRun sqr = new SysQueryRun(salesQuotationParmUpdate.LateSelectionQuery);
            sqr.promptLoadLastUsedQuery(false);
            chooseLines = sqr;
            return;
        }

        chooseLines = this.queryBuildSalesQuotationTable();

        chooseLines.query().interactive(showQueryForm);
        chooseLines.literals(#queryForcePlaceholders);
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePrintManagement</Name>
				<Source><![CDATA[
    boolean  usePrintManagement(boolean _usePrintManagement = usePrintManagement)
    {
        usePrintManagement = _usePrintManagement;
        return usePrintManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (! this.checkLateSelection())
            return false;

        int64 recordsSelected = (select count(RecId) from salesQuotationParmTable
            where salesQuotationParmTable.ParmId == parmId).RecId;

        if (!recordsSelected && !salesQuotationParmUpdate.LateSelection)
        {
            ret = checkFailed(strFmt("@SYS100072",SalesQuotationStatus::Sent,SalesQuotationStatus::Created));
        }

        // Validate lines
        if (! printFormLetter  &&  salesQuotationParmUpdate.Proforma  &&  !salesQuotationParmUpdate.LateSelection)
        {
            info("@SYS78888");
            return checkFailed("@SYS21533");
        }

        return  this.checkPrinterSettingsMultiThread() && ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalLine</Name>
				<Source><![CDATA[
    protected void writeJournalLine()
    {
        lineDeliveryPostalAddress = salesQuotationParmTable.DeliveryPostalAddress ? salesQuotationParmTable.DeliveryPostalAddress : salesQuotationLine.DeliveryPostalAddress;
        lineDeliveryName     = salesQuotationParmTable.DeliveryName ? salesQuotationParmTable.DeliveryName
                                                                    : salesQuotationLine.deliveryName();
        lineDlvMode          = salesQuotationParmTable.DlvMode ? salesQuotationParmTable.DlvMode
                                                               : (salesQuotationLine.DlvMode ? salesQuotationLine.DlvMode : salesQuotationLine.salesQuotationTable().DlvMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    [SysObsolete('The method has been deprecated, use TmpTaxWorkTrans.copyFromTax method instead.', false, 20\7\2020)]
    void writeTmpTaxWorkTrans(RecId headingRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrinterSettingsFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the user to modify the printer settings by using the standard printer settings dialog.
    /// </summary>
    /// <param name="_salesQuotationEditLinesForm">
    /// The <c>SalesQuotationEditLinesForm</c> class where the printer settings is being modified.
    /// </param>
    /// <returns>
    /// <c>true</c> if the settings were modified; otherwise, <c>false</c> .
    /// </returns>
    /// <remarks>
    /// The <c>callPrinterSettingsFormLetter</c> method is static so it is possible to select AOS printers.
    /// To select AOS printers, you must call <c>SysPrintForm</c> from the server.
    /// </remarks>
    static boolean  callPrinterSettingsFormletter(SalesQuotationEditLinesForm  _salesQuotationEditLinesForm)
    {
        #PrintMgmtSetup
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(_salesQuotationEditLinesForm.printerSettingsFormletter());
        boolean ok = SrsReportRunUtil::showSettingsDialog(printSettings, #SRSPrintDestinationTokenPrintMgmt, enum2Symbol(enumNum(PrintMgmtDocumentType), enum2int(PrintMgmtDocumentType::Quotation)));

        _salesQuotationEditLinesForm.updatePrinterSettingsFormLetter(printSettings.pack());

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyLogo</Name>
				<Source><![CDATA[
    static Bitmap  companyLogo()
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        return CompanyImage::findByRecord(companyInfo).Image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesQuotationEditLinesForm construct(DocumentStatus     _documentStatus,
                                                        str                _parm               = '',
                                                        boolean            _getParmId          = true)
    {
        ModuleAxapta moduleAxapta = SalesQuotationEditLinesForm::getCallerModuleFromParm(_parm);
        SalesQuotationEditLinesFormFactoryAttribute attribute       = new SalesQuotationEditLinesFormFactoryAttribute(moduleAxapta, _documentStatus);
        SysExtensionGenericInstantiation            instantiation   = new SysExtensionGenericInstantiation(_getParmId);
        SalesQuotationEditLinesForm                 instance        = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(SalesQuotationEditLinesForm), attribute, instantiation) as SalesQuotationEditLinesForm;

        if(!instance)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalListCopy</Name>
				<Source><![CDATA[
    static RecordSortedList createJournalListCopy(Common _record)
    {
        RecordSortedList    journalList;
        Common              common;
        FormDataSource      formDataSource;

        if (FormDataUtil::isFormDataSource(_record))
        {
            formDataSource = FormDataUtil::getFormDataSource(_record);
        }
        else
        {
            formDataSource = null;
        }

        if (!formDataSource && _record.RecId)
        {
            journalList = new RecordSortedList(_record.TableId);
            journalList.ins(_record);
            return journalList;
        }

        for (common = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : formDataSource.cursor(); common; common = formDataSource.getNext())
        {
            if (!journalList)
            {
                journalList = new RecordSortedList(common.TableId);
                journalList.sortOrder(fieldNum(Common, RecId));
            }

            journalList.ins(common);
        }

        return journalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallerModuleFromParm</Name>
				<Source><![CDATA[
    static ModuleAxapta getCallerModuleFromParm(str _parm)
    {
        #define.sales('Sales')
        #define.project('Project')

        switch (_parm)
        {
            case #sales   : return ModuleAxapta::SalesOrder;
            case #project : return ModuleAxapta::Project;
        }

        return ModuleAxapta::SalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterSettingsFormletter</Name>
				<Source><![CDATA[
    static container  getPrinterSettingsFormletter(DocumentStatus  document, PrintSetupOriginalCopy _originalCopy = PrintSetupOriginalCopy::Original)
    {
        SalesQuotationEditLinesForm salesFormLetterPrint = SalesQuotationEditLinesForm::construct(document);
        salesFormLetterPrint.getLast();

        return salesFormLetterPrint.printerSettingsFormletter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalExternalItemId</Name>
				<Source><![CDATA[
    static ExternalItemId  journalExternalItemId(ModuleInventPurchSales     module,
                                                 ExternalItemId             externalItemId)
    {
        return TradeModuleType::newFromModule(module).formLetterJournalExternalItemId(externalItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalItemId</Name>
				<Source><![CDATA[
    static ItemId  journalItemId(ModuleInventPurchSales module,
                                 ItemId                 itemId,
                                 ExternalItemId         externalItemId)
    {
        return TradeModuleType::newFromModule(module).formLetterJournalItemId(itemId, externalItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpdateOpportunityBasedOnCallerForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the update opportunity variable based on the caller form.
    /// </summary>
    /// <param name = "_parmSalesProj">A string represnting the caller form.</param>
    protected void setUpdateOpportunityBasedOnCallerForm(str _parmSalesProj)
    {
        switch (SalesQuotationEditLinesForm::getCallerModuleFromParm(_parmSalesProj))
        {
            case ModuleAxapta::SalesOrder :
                if (smmParameters::updateOpportunityForQuote(QuotationType::Sales))
                {
                    this.parmUpdateOpportunity(true);
                }
                break;

            case ModuleAxapta::Project :
                if (smmParameters::updateOpportunityForQuote(QuotationType::Project))
                {
                    this.parmUpdateOpportunity(true);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectOpportunity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the opportunity is a project opportunity.
    /// </summary>
    /// <param name = "_parmSalesProj">A string represnting the caller form.</param>
    /// <returns>true if the opportunity is a project opportunity; otherwise, false.</returns>
    protected boolean isProjectOpportunity(str _parmSalesProj)
    {
        return SalesQuotationEditLinesForm::getCallerModuleFromParm(_parmSalesProj) == ModuleAxapta::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void  main(Args  args)
    {
        if (!args)
        {
            throw error("@SYS25407");
        }

        DocumentStatus documentStatus = args.parmEnum();
        str parmSalesProj = args.parm();
        Common record = args.record();
        FormDataSource salesQuotationTable_ds;
        if (record && record.TableId == tableNum(SalesQuotationTable))
        {
            salesQuotationTable_ds  = FormDataUtil::getFormDataSource(record);
        }

        container callerRecordsPackedMap;
        if (salesQuotationTable_ds)
        {
            callerRecordsPackedMap = FormLetter::getFormRecord(salesQuotationTable_ds);
        }

        if (!RetailSalesQuotationCheckWorkflowRejectedLinesFlight::instance().isEnabled() &&
            salesQuotationTable_ds && documentStatus == DocumentStatus::Confirmation)
        {
            RetailPricingSalesDocumentHelper::validateQuotationsReadyForConfirm(callerRecordsPackedMap);
        }

        SalesQuotationEditLinesForm salesQuotationEditLinesForm = SalesQuotationEditLinesForm::newFromArgs(args);
        boolean promptedOk;
        boolean doExecuteQuery;
        QuotationIdBase origQuotationId;

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(args))
        {
            [promptedOk, doExecuteQuery, origQuotationId] 
                = salesQuotationEditLinesForm.initializeAndRun(documentStatus, parmSalesProj, record, callerRecordsPackedMap);

            if (promptedOk)
            {
                if (salesQuotationTable_ds)
                {
                    if (doExecuteQuery)
                    {
                        salesQuotationTable_ds.research(true);
                    }
                    else
                    {
                        salesQuotationTable_ds.reread();
                        salesQuotationTable_ds.refresh();
                    }
                }

                if (documentStatus == DocumentStatus::Confirmation)
                {
                    SalesQuotationEditLinesForm::updateAlternativeQuotations(args, origQuotationId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SalesQuotationEditLinesForm</c> class based on an <c>Args</c> object.
    /// </summary>
    /// <param name = "_args">The <c>Args</c> object based on which the class should be created.</param>
    /// <returns>An instance of the <c>SalesQuotationEditLinesForm</c> class.</returns>
    protected static SalesQuotationEditLinesForm newFromArgs(Args _args)
    {
        return SalesQuotationEditLinesForm::construct(_args.parmEnum(), _args.parm());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAndRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this class based on the parameters and perform posting.
    /// </summary>
    /// <param name = "_documentStatus">
    /// A <c>DocumentStatus</c> value.
    /// </param>
    /// <param name = "_parmSalesProj">
    /// A string represnting the caller form.
    /// </param>
    /// <param name = "_record">
    /// A record buffer selected by the user on the caller form.</param>
    /// <param name = "_callerRecordsPackedMap">
    /// A packed map of the records selected by the user on the caller form.
    /// </param>
    /// <returns>
    /// A container that contains the results of posting
    /// </returns>
    [Wrappable]
    final protected container initializeAndRun(DocumentStatus _documentStatus, str _parmSalesProj, Common _record, container _callerRecordsPackedMap)
    {
        ParmId parmIdLoc = this.parmId();
        this.getLast();

        QuotationIdBase origQuotationId;
        boolean opportunityExists = true;

        if (_parmSalesProj)
        {
            this.callerModuleAxapta(SalesQuotationEditLinesForm::getCallerModuleFromParm(_parmSalesProj));
        }
        else
        {
            throw error("@SYS25407");
        }

        if (_record)
        {
            if (_record.TableId == tableNum(SalesQuotationTable))
            {
                this.initParmSalesQuotationTable(_record);
                this.setCallerRecordsPackedMap(_callerRecordsPackedMap);
                opportunityExists = (salesQuotationTable.OpportunityId != '');
                origQuotationId = salesQuotationTable.QuotationId;
            }

            this.multiForm(true);
        }

        boolean isProjectOpportunity = false;
        if (_documentStatus == DocumentStatus::Confirmation && opportunityExists)
        {
            this.setUpdateOpportunityBasedOnCallerForm(_parmSalesProj);
            isProjectOpportunity = this.isProjectOpportunity(_parmSalesProj);
        }

        this.parmId(parmId);
        this.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        this.prePromptInit();
        boolean promptedOk;
        boolean doExecuteQuery;
        if (this.prompt())
        {
            this.runOperation();

            if (this.parmUpdateOpportunity())
            {
                if (!isProjectOpportunity)
                {
                    this.updateOpportunity();
                }
                else
                {
                    if (opportunityExists && this.isSalesQuotationConfirmed())
                    {
                        SmmOpportunityStatusUpdate::openForm(smmOpportunityTable::find(salesQuotationTable.OpportunityId, true), smmOpportunityStatus::Won);
                    }
                 }
            }

            promptedOk = true;
            doExecuteQuery = (this.numberOfRecords() > 1);
        }

        return [promptedOk, doExecuteQuery, origQuotationId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesQuotationConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether sales quotation status is confirmed.
    /// </summary>
    /// <returns>true if sales quotation status is confirmed; otherwise, false.</returns>
    protected boolean isSalesQuotationConfirmed()
    {
        return SalesQuotationTable::find(salesQuotationTable.QuotationId).QuotationStatus ==  SalesQuotationStatus::Confirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newClientArgs</Name>
				<Source><![CDATA[
    static Args  newClientArgs(str _formName, SalesQuotationEditLinesForm _salesQuotationEditLinesForm)
    {
        Args  args = new  Args();

        args.name(_formName);
        args.caller(_salesQuotationEditLinesForm);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAlternativeQuotations</Name>
				<Source><![CDATA[
    protected static void updateAlternativeQuotations(Args args, QuotationIdBase origQuotationId)
    {
        if (smmQuotationAlternativeQuotations::exist(origQuotationId))
        {
            args.record(SalesQuotationTable::find(origQuotationId));
            SalesQuotationUpdate::main(args, true);
        }
        else if (smmQuotationAlternativeQuotations::existLinked(origQuotationId))
        {
            args.record(SalesQuotationTable::find(origQuotationId));
            SalesQuotationUpdate::main(args, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentTypeProjectDefault</Name>
				<Source><![CDATA[
    [Replaceable]
    protected PrintMgmtDocumentType printMgmtDocumentTypeProjectDefault()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>