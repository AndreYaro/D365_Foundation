<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CollectionsInCashReportGenerate_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CollectionsInCashReportGenerate_ES</c> class generates Spanish collections in cash reports.
/// </summary>
public class CollectionsInCashReportGenerate_ES extends RunBaseBatch implements BatchRetryable
{
    const int CurrentVersion = 1;

    YearBase reportYear;
    TaxRep347PositiveAmountMST minimumAmountInCash;

    DialogField fieldReportYear;
    DialogField fieldMinimumAmountInCash;

    TransDate reportYearStartDate;
    TransDate reportYearEndDate;
    Map mapTaxGroupIsValid;
    KeySum cashKeySum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accumCashAmount</Name>
				<Source><![CDATA[
    private void accumCashAmount(
        CustTrans _invoiceCustTrans,
        CustSettlement _custSettlement)
    {
        CustInvoiceJour custInvoiceJour = CustInvoiceJour::findFromCustTrans(_invoiceCustTrans.Invoice, _invoiceCustTrans.TransDate, _invoiceCustTrans.AccountNum);

        if (custInvoiceJour)
        {
            cashKeySum.updateNow(_invoiceCustTrans.AccountNum, -_custSettlement.SettleAmountMST);
        }

        ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::find(_invoiceCustTrans.Invoice, _invoiceCustTrans.TransDate);

        if (projInvoiceJour)
        {
            cashKeySum.updateNow(_invoiceCustTrans.AccountNum, -_custSettlement.SettleAmountMST);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        fieldReportYear = dialog.addFieldValue(extendedTypeStr(YearBase), reportYear, "@SYS54380", "@SYS330268");
        fieldMinimumAmountInCash = dialog.addFieldValue(extendedTypeStr(TaxRep347PositiveAmountMST), minimumAmountInCash, strFmt("@SIITaxRelatedTransactions:MinimumAmount_CollectionsInCashReportGenerate", Ledger::accountingCurrency()), "@SYS319348");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateReportTable</Name>
				<Source><![CDATA[
    private void findOrCreateReportTable()
    {
        CollectionsInCashReportTable_ES collectionsInCashReportTable = CollectionsInCashReportTable_ES::find(reportYear);

        if (!collectionsInCashReportTable)
        {
            collectionsInCashReportTable.ReportYear = reportYear;
            collectionsInCashReportTable.SystemBlocked = NoYes::Yes;
            collectionsInCashReportTable.insert();
        }
        else
        {
            update_recordSet collectionsInCashReportTable
                setting SystemBlocked = NoYes::Yes
                where collectionsInCashReportTable.ReportYear == reportYear;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        reportYear = fieldReportYear.value();
        minimumAmountInCash = fieldMinimumAmountInCash.value();

        if (ret && reportYear)
        {
            CollectionsInCashReportTable_ES reportTable;

            select firstOnly ReportYear from reportTable
                order by ReportYear asc
                where reportTable.ReportYear > reportYear;

            if (reportTable && Box::yesNo(strfmt("@SIITaxRelatedTransactions:DialogBox_CollectionsInCashReportGenerate", reportTable.ReportYear), DialogButton::Yes, "@SYS6998") == DialogButton::No)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters()
    {
        reportYearStartDate = mkDate(1, 1, reportYear);
        reportYearEndDate   = mkDate(31, 12, reportYear);

        mapTaxGroupIsValid  = new Map(Types::Container, Types::Enum);
        cashKeySum = KeySum::construct(1,1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>oldPaymentsSearchStartDate</Name>
				<Source><![CDATA[
    private TransDate oldPaymentsSearchStartDate(CustAccount _custAccount)
    {
        const TransDate MinCollectionsInCashDate = 01\01\2017;

        CollectionsInCashReportTable_ES collectionsInCashReportTable;
        CollectionsInCashReportLine_ES collectionsInCashReportLine;

        select firstOnly ReportYear from collectionsInCashReportTable
            order by ReportYear desc
            exists join collectionsInCashReportLine
                where collectionsInCashReportLine.CustAccount == _custAccount;

        return collectionsInCashReportTable ? mkDate(1, 1, collectionsInCashReportTable.ReportYear) : MinCollectionsInCashDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, reportYear, minimumAmountInCash];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPayments</Name>
				<Source><![CDATA[
    private void processPayments()
    {
        const TransDate MinCashInvDate = 01\01\2008;

        CustTrans paymentCustTrans;
        CustTrans invoiceCustTrans;
        CustSettlement custSettlement;
        TaxReport347Account taxReport347Account;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        RecordSortedList rslProcessedCustSettlement = new RecordSortedList(tableNum(CustSettlement));
        rslProcessedCustSettlement.sortOrder(fieldNum(CustSettlement, RecId));
        TransDate oldPaymentsSearchEndDate = reportYearStartDate - 1;

        while select RecId from paymentCustTrans
            where paymentCustTrans.Invoice == ''
                && paymentCustTrans.Prepayment == NoYes::No
                && paymentCustTrans.TransDate >= reportYearStartDate
                && paymentCustTrans.TransDate <= reportYearEndDate
            join custSettlement
                where custSettlement.TransRecId == paymentCustTrans.RecId
            join Invoice, Voucher, TransDate, AccountNum from invoiceCustTrans
                where invoiceCustTrans.Invoice != ''
                    && invoiceCustTrans.RecId == custSettlement.OffsetRecid
                    && invoiceCustTrans.TransDate >= MinCashInvDate
                    && invoiceCustTrans.TransDate <= reportYearEndDate
            // Filter payments posted to cash accounts
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == paymentCustTrans.Voucher
                    && subledgerVoucherGeneralJournalEntry.AccountingDate == paymentCustTrans.TransDate
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
            exists join dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
            exists join taxReport347Account
                where taxReport347Account.MainAccount == dimensionAttributeValueCombination.MainAccount
        {
            if (this.taxGroupIsValid(invoiceCustTrans.Voucher, invoiceCustTrans.TransDate))
            {
                this.accumCashAmount(invoiceCustTrans, custSettlement);
                rslProcessedCustSettlement.ins(custSettlement);
                TransDate oldPaymentsSearchStartDate = this.oldPaymentsSearchStartDate(invoiceCustTrans.AccountNum);

                if (oldPaymentsSearchStartDate < reportYearStartDate)
                {
                    CustTrans oldPaymentCustTrans;
                    CustTrans oldInvoiceCustTrans;
                    CustSettlement oldCustSettlement;
                    TaxReport347Account oldTaxReport347Account;
                    GeneralJournalAccountEntry oldGeneralJournalAccountEntry;
                    SubledgerVoucherGeneralJournalEntry oldSubledgerVoucherGeneralJournalEntry;
                    DimensionAttributeValueCombination oldDimensionAttributeValueCombination;

                    while select RecId from oldPaymentCustTrans
                        where oldPaymentCustTrans.Invoice == ''
                            && oldPaymentCustTrans.Prepayment == NoYes::No
                            && oldPaymentCustTrans.TransDate >= oldPaymentsSearchStartDate
                            && oldPaymentCustTrans.TransDate <= oldPaymentsSearchEndDate
                        join oldCustSettlement
                            where oldCustSettlement.TransRecId == oldPaymentCustTrans.RecId
                        join Invoice, Voucher, TransDate, AccountNum from oldInvoiceCustTrans
                            where oldInvoiceCustTrans.Invoice == invoiceCustTrans.Invoice
                                && oldInvoiceCustTrans.RecId == oldCustSettlement.OffsetRecid
                                && oldInvoiceCustTrans.TransDate == invoiceCustTrans.TransDate
                        // Filter payments posted to cash accounts
                        exists join oldSubledgerVoucherGeneralJournalEntry
                            where oldSubledgerVoucherGeneralJournalEntry.Voucher == oldPaymentCustTrans.Voucher
                                && oldSubledgerVoucherGeneralJournalEntry.AccountingDate == oldPaymentCustTrans.TransDate
                        exists join oldGeneralJournalAccountEntry
                            where oldGeneralJournalAccountEntry.GeneralJournalEntry == oldSubledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                        exists join oldDimensionAttributeValueCombination
                            where oldDimensionAttributeValueCombination.RecId == oldGeneralJournalAccountEntry.LedgerDimension
                        exists join oldTaxReport347Account
                            where oldTaxReport347Account.MainAccount == oldDimensionAttributeValueCombination.MainAccount
                    {
                        if (!rslProcessedCustSettlement.find(oldCustSettlement) && this.taxGroupIsValid(oldInvoiceCustTrans.Voucher, oldInvoiceCustTrans.TransDate))
                        {
                            this.accumCashAmount(oldInvoiceCustTrans, oldCustSettlement);
                            rslProcessedCustSettlement.ins(oldCustSettlement);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPrepayments</Name>
				<Source><![CDATA[
    private void processPrepayments()
    {
        CustTrans prePaymentCustTrans;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        TaxReport347Account taxReport347Account;

        while select Voucher, TransDate, AccountNum, AmountMST from prePaymentCustTrans
            where prePaymentCustTrans.Invoice == ''
                && prePaymentCustTrans.Prepayment == NoYes::Yes
                && prePaymentCustTrans.TransDate >= reportYearStartDate
                && prePaymentCustTrans.TransDate <= reportYearEndDate
            // Filter payments posted to cash accounts
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == prePaymentCustTrans.Voucher
                    && subledgerVoucherGeneralJournalEntry.AccountingDate == prePaymentCustTrans.TransDate
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
            exists join dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
            exists join taxReport347Account
                where taxReport347Account.MainAccount == dimensionAttributeValueCombination.MainAccount
        {
            if (this.taxGroupIsValid(prePaymentCustTrans.Voucher, prePaymentCustTrans.TransDate))
            {
                cashKeySum.updateNow(prePaymentCustTrans.AccountNum, -prePaymentCustTrans.AmountMST);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        setPrefix(CollectionsInCashReportGenerate_ES::description());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }
        try
        {
            this.findOrCreateReportTable();

            ttsbegin;
            this.initParameters();
            this.processPayments();
            this.processPrepayments();
            this.saveData();
            ttscommit;

            this.unblockReportTable();

            info("@SYS9265");
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::UpdateConflict;
            }
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::DuplicateKeyException;
            }
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            retry;
        }
        catch
        {
            this.unblockReportTable();
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveData</Name>
				<Source><![CDATA[
    private void saveData()
    {
        Set linesToRemoveSet = new Set(Types::Int64);
        CollectionsInCashReportTable_ES collectionsInCashReportTable = CollectionsInCashReportTable_ES::find(reportYear);
        CollectionsInCashReportLine_ES collectionsInCashReportLine;

        while select RecId from collectionsInCashReportLine
            where collectionsInCashReportLine.CollectionsInCashReportTable == collectionsInCashReportTable.RecId
        {
            linesToRemoveSet.add(collectionsInCashReportLine.RecId);
        }

        int insertedQty;
        int updatedQty;
        int deletedQty;

        for (int idx = 1; idx <= cashKeySum.numOfTrans(); idx++)
        {
            CustAccount custAccount  = cashKeySum.index2Key(idx);
            TaxRep347PositiveAmountMST amountInCash = cashKeySum.index2Data(idx);

            select firstOnly collectionsInCashReportLine
                where collectionsInCashReportLine.CollectionsInCashReportTable == collectionsInCashReportTable.RecId
                    && collectionsInCashReportLine.CustAccount == custAccount;

            if (collectionsInCashReportLine)
            {
                if (amountInCash >= minimumAmountInCash)
                {
                    linesToRemoveSet.remove(collectionsInCashReportLine.RecId);

                    if (collectionsInCashReportLine.AmountInCash != amountInCash)
                    {
                        collectionsInCashReportLine.selectForUpdate(true);
                        collectionsInCashReportLine.AmountInCash = amountInCash;
                        collectionsInCashReportLine.update();
                        updatedQty++;
                    }
                }
            }
            else
            {
                if (amountInCash >= minimumAmountInCash)
                {
                    CustTable custTable = CustTable::find(custAccount);

                    collectionsInCashReportLine.CollectionsInCashReportTable = collectionsInCashReportTable.RecId;
                    collectionsInCashReportLine.CustAccount  = custAccount;
                    collectionsInCashReportLine.AmountInCash = amountInCash;
                    collectionsInCashReportLine.insert();
                    insertedQty++;
                }
            }
        }

        if (linesToRemoveSet.elements())
        {
            SetEnumerator se = linesToRemoveSet.getEnumerator();

            while (se.moveNext())
            {
                collectionsInCashReportLine = CollectionsInCashReportLine_ES::findRecId(se.current(), true);
                collectionsInCashReportLine.delete();
                deletedQty++;
            }
        }

        info(strFmt("%1: %2 %3", "@SYS77068", insertedQty, "@SYS2929"));
        info(strFmt("%1: %2 %3", "@SYS439",   updatedQty, "@SYS2929"));
        info(strFmt("%1: %2 %3", "@SYS4197",  deletedQty, "@SYS2929"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroupIsValid</Name>
				<Source><![CDATA[
    private boolean taxGroupIsValid(Voucher _voucher, TransDate _transDate)
    {
        boolean result;
        container cacheLookupKey = [_voucher, _transDate];

        if (mapTaxGroupIsValid.exists(cacheLookupKey))
        {
            result = mapTaxGroupIsValid.lookup(cacheLookupKey);
        }
        else
        {
            TaxTrans taxTrans;
            TaxReport347Validation taxReport347Validation;

            select firstonly RecId from taxTrans
                index hint VoucherDateIdx
                where  taxTrans.TransDate == _transDate
                    && taxTrans.Voucher == _voucher
                exists join taxReport347Validation
                    where taxReport347Validation.TaxGroup == taxTrans.TaxGroup;

            // If there is at least one taxTrans with TaxGroup from the validation list (TaxReport347Validation)
            // for the specified _voucher then the _voucher has an invalid taxGroup
            result = !taxTrans.RecId;

            mapTaxGroupIsValid.insert(cacheLookupKey, result ? NoYes::Yes : NoYes::No);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unblockReportTable</Name>
				<Source><![CDATA[
    private void unblockReportTable()
    {
        CollectionsInCashReportTable_ES collectionsInCashReportTable;

        update_recordSet collectionsInCashReportTable
            setting SystemBlocked = NoYes::No
            where collectionsInCashReportTable.ReportYear == reportYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, reportYear, minimumAmountInCash] = _packedClass;
                ret = true;
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (!reportYear)
        {
            ret = checkFailed(strFmt("@SYS84753", "@SYS107162"));
        }

        if (CollectionsInCashReportTable_ES::find(reportYear).SystemBlocked)
        {
            ret = checkFailed(strFmt("@SIITaxRelatedTransactions:ValidateReportYear_CollectionsInCashReportGenerate", reportYear));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CollectionsInCashReportGenerate_ES construct()
    {
        return new CollectionsInCashReportGenerate_ES();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static Name description()
    {
        return "@SIITaxRelatedTransactions:ReportDescription_CollectionsInCashReportGenerate";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        const str FeatureReference = 'ES-00027';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        CollectionsInCashReportGenerate_ES  runClass = CollectionsInCashReportGenerate_ES::construct();

        if (runClass.prompt())
        {
            runClass.runOperation();

            if (_args)
            {
                if (formHasMethod(_args.caller() as FormRun, identifierStr(rereadDatasource)))
                {
                    _args.caller().rereadDatasource();
                }
                else if (_args.record() && _args.record().isFormDataSource())
                {
                    FormDataSource formDatasource = _args.record().dataSource();
                    formDatasource.executeQuery();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>