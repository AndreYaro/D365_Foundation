<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMCreateTradeAgreements</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMCreateTradeAgreements</c> class to create trade agreements when a promotion is changed
/// to a status of customer approved.
/// </summary>
class TAMCreateTradeAgreements
{
    TAMMerchandisingEvent     tamMerchandisingEvent;
    TAMPromotionItem          tamPromotionItem;
    TAMMerchEventPricing      tamMerchEventPricing;
    PdsRebate                 pdsRebateTable;
    TAMTradePromotion         tamTradePromotion;
    TransDate                 rebateFromDate;
    TransDate                 rebateToDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts information into <c>MCRPriceDiscGroupItem</c> table for off invoice.
    /// </summary>
    /// <param name="_relation">
    /// The <c>PriceType</c> value to be set on the <c>MCRPriceDiscGroupCustomer</c> table record.
    /// </param>
    /// <remarks>
    /// The line discount amount will be created and passed on to the
    /// <c>SalesLine</c> when <c>PriceDisc</c> class in invoked.
    /// </remarks>
    void createItemGroup(PriceType _relation)
    {
        MCRPriceDiscGroupItem       mcrPriceDiscGroupItem;
        MCRPriceDiscGroupItem       mcrPriceDiscGroupItemJoin;
        TAMPromotionItem            tamPromotionItemLocal;
        PriceGroupType              priceGroupType;
        MCRMerchandisingEventID     mcrMerchandisingEventID;
        ModuleInventCustVend        module;

        mcrMerchandisingEventID = tamMerchandisingEvent.MerchandisingEventID;
        module                  = ModuleInventCustVend::Invent;
        priceGroupType          = PriceGroupType::LineDiscGroup;

        ttsBegin;
        insert_recordset mcrPriceDiscGroupItem (InventDimId, ItemId, UnitID, Module, Type, GroupId)
            select InventDimID, ItemID, UnitID, module, priceGroupType, mcrMerchandisingEventID from tamPromotionItemLocal
            where tamPromotionItemLocal.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
            notexists join mcrPriceDiscGroupItemJoin
            where mcrPriceDiscGroupItemJoin.GroupId == tamMerchandisingEvent.MerchandisingEventID
                && mcrPriceDiscGroupItemJoin.InventDimId == tamPromotionItemLocal.InventDimID
                && mcrPriceDiscGroupItemJoin.ItemId == tamPromotionItemLocal.ItemID
                && mcrPriceDiscGroupItemJoin.UnitID == tamPromotionItemLocal.UnitID
                && mcrPriceDiscGroupItemJoin.Module == ModuleInventCustVend::Invent
                && mcrPriceDiscGroupItemJoin.Type == priceGroupType;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventCategoriesForTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the event categories to create trade agreements for.
    /// </summary>
    /// <returns>A container with the event categories.</returns>
    protected container eventCategoriesForTradeAgreements()
    {
        return [MCRMerchandisingEventCategory::OffInvoice, MCRMerchandisingEventCategory::BillBack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the trade agreements based on the information
    /// provided on the discount tab of the merchandising event.
    /// </summary>
    public void createTradeAgreements()
    {
        MCRPriceDiscGroupItem priceDiscGroupItems;
        TAMPromotionCust      tamPromotionCust;

        select firstonly tamPromotionCust where tamPromotionCust.PromotionID == tamTradePromotion.PromotionID;
        if (!tamPromotionCust)
        {
            throw error(strFmt("@MCR38635", tamTradePromotion.PromotionID));
        }

        while select MerchandisingEventID from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID == tamTradePromotion.PromotionID
                && tamMerchandisingEvent.MerchandisingEventCategory in this.eventCategoriesForTradeAgreements()
            notexists join priceDiscGroupItems
                where priceDiscGroupItems.GroupId == tamMerchandisingEvent.MerchandisingEventID
        {
            TAMCreateTradeAgreements::validateDiscountSetup(tamMerchandisingEvent.MerchandisingEventID);
            this.getMerchEventPricing();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMerchEventPricing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>PriceDiscTable</c> records for off invoice.
    /// </summary>
    void getMerchEventPricing()
    {
        PriceType  relation;

        relation = PriceType::LineDiscSales;
        this.setTradeAgreements(relation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>TAMCreateTradeAgreements</c> class.
    /// </summary>
    /// <param name="_tamTradePromotion">
    /// A record in the <c>TAMTradePromotion</c> table.
    /// </param>
    public void new(TAMTradePromotion  _tamTradePromotion)
    {
        tamTradePromotion = _tamTradePromotion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates item groups.
    /// </summary>
    /// <param name="_relation">
    /// The <c>PriceType</c> to set on the item group.
    /// </param>
    void setTradeAgreements(PriceType _relation)
    {
        this.createItemGroup(_relation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes trade agreements based on the the promotion status.
    /// </summary>
    /// <param name="_merchandisingEventID">
    /// The <c>MCRMerchandisingEventID</c> value upon which to base the search.
    /// </param>
    /// <remarks>
    /// When the status of a promotion is changed to anything
    /// other than customer approved, delete all trade agreements.
    /// New trade agreements are created when the promotion is moved back to
    /// customer approved.
    /// </remarks>
    public static void deleteTradeAgreements(MCRMerchandisingEventID _merchandisingEventID)
    {
        MCRPriceDiscGroupItem priceDiscItems;

        ttsBegin;
        delete_from priceDiscItems where priceDiscItems.GroupId == _merchandisingEventID;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDiscountSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that each off invoice and bill back merchandising events have items and discounts set up
    /// before trying to create discount records.
    /// </summary>
    /// <param name="_merchEventID">
    /// The <c>MCRMerchandisingEventID</c> of the merchandising event to validate.
    /// </param>
    public static void validateDiscountSetup(MCRMerchandisingEventID _merchEventID)
    {
        TAMPromotionItem  tamPromotionItemValidate;
        TAMMerchEventPricing tamMerchEventPricingValidate;
        TAMMerchandisingEvent    tamMerchandisingEvent;

        tamMerchandisingEvent = TAMMerchandisingEvent::find(_merchEventID);

        // Only OffInvoices will feed into pricing engine. As this is just a discount.
        if (tamMerchandisingEvent.MerchandisingEventCategory != MCRMerchandisingEventCategory::OffInvoice)
        {
            return;
        }

        select firstonly RecId from tamPromotionItemValidate
            where tamPromotionItemValidate.MerchandisingEventID == _merchEventID;

        if (!tamPromotionItemValidate)
        {
            throw error(strFmt("@MCR26379", _merchEventID));
        }

        select firstonly RecId from tamMerchEventPricingValidate
            where tamMerchEventPricingValidate.MerchandisingEventID == _merchEventID;

        if (!tamMerchEventPricingValidate)
        {
            throw error (strFmt("@MCR26380", _merchEventID));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>