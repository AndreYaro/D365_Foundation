<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAdvanceInvoiceJourDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendAdvanceInvoiceJourDP</c> class is the report data provider class for the
/// <c>VendAdvanceInvoiceJour</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(VendAdvanceInvoiceJour))
]
class VendAdvanceInvoiceJourDP extends SRSReportDataProviderBase
{
    private const str LocalizationFeatureReference = 'EEU-00017';
    CzVendAdvanceInvoiceTable vendAdvanceInvoiceTable;
    CustVendAdvanceInvoiceJourTmp vendAdvanceInvoiceJourTmp;

    CurrencyCode accountingCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendAdvanceInvoiceJourTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>CustVendAdvanceInvoiceJourTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>CustVendAdvanceInvoiceJourTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(CustVendAdvanceInvoiceJourTmp))]
    public CustVendAdvanceInvoiceJourTmp getVendAdvanceInvoiceJourTmp()
    {
        select vendAdvanceInvoiceJourTmp;
        return vendAdvanceInvoiceJourTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendAdvanceInvoiceJourTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>CustVendAdvanceInvoiceJourTmp</c> table.
    /// </summary>
    private void insertVendAdvanceInvoiceJourTmp()
    {
        vendAdvanceInvoiceJourTmp.CurrencyCode = vendAdvanceInvoiceTable.CurrencyCode;
        vendAdvanceInvoiceJourTmp.DueDate = vendAdvanceInvoiceTable.DueDate;
        vendAdvanceInvoiceJourTmp.InvoiceAmount = vendAdvanceInvoiceTable.InvoiceAmount;
        vendAdvanceInvoiceJourTmp.InvoiceAccount = vendAdvanceInvoiceTable.InvoiceAccount;
        vendAdvanceInvoiceJourTmp.InvoiceDate = vendAdvanceInvoiceTable.InvoiceDate;
        vendAdvanceInvoiceJourTmp.InvoiceId = vendAdvanceInvoiceTable.InvoiceId;
        vendAdvanceInvoiceJourTmp.Name = vendAdvanceInvoiceTable.Name;
        vendAdvanceInvoiceJourTmp.VendInvoiceId = vendAdvanceInvoiceTable.VendInvoiceId;

        vendAdvanceInvoiceJourTmp.AccountingCurrency = accountingCurrency;
        vendAdvanceInvoiceJourTmp.AmountMST = vendAdvanceInvoiceTable.amountMST(vendAdvanceInvoiceTable.InvoiceAmount);

        vendAdvanceInvoiceJourTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method computes data and populates the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun qr;

        qr = new QueryRun(this.parmQuery());

        accountingCurrency = Ledger::accountingCurrencyByLedger(Ledger::current());

        while (qr.next())
        {
            vendAdvanceInvoiceTable = qr.get(tablenum(CzVendAdvanceInvoiceTable));

            this.insertVendAdvanceInvoiceJourTmp();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>