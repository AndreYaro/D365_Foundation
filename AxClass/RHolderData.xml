<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHolderData</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class RHolderData
{
    Map     map;

    int     keyLength;

    TempStr summability;
    TempStr emptyFieldKey;

    Set     setColumnAsOneColumn;

    boolean useAlterEmptyFieldKey;

#define.defaultEmptyValue("!!!!!!!!!")

#define.defaultEmptyFieldKey("")
#define.alterEmptyFieldKey("\"\"")

#define.CurrentVersion(1)
#localmacro.CurrentList
    keyLength,
    summability,
    emptyFieldKey,
    useAlterEmptyFieldKey
#endmacro

#define.posClassID(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSumInComplianceWithKey</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void addSumInComplianceWithKey(container  _key, anytype   _valueValue)
    {
        throw error(error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTopLevelKey</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container createTopLevelKey(container  _key)
    {
        container       topKey;
        int             cx, col;
        str             sz;
        SetIterator     it;

        ;

        sz = conpeek(_key, 1);

        if (sz == summability)
            // top key has no parent key
            return connull();

        // create parent key
        topKey = _key;

        for (cx = keyLength; cx >= 1; cx--)
        {
            sz = conpeek(topKey, cx);

            if (sz != summability)
            {
                if (setColumnAsOneColumn.in(cx))
                {
                    it = new SetIterator(setColumnAsOneColumn);

                    while (it.more())
                    {
                        col = it.value();

                        topKey = conpoke(topKey, col, summability);

                        it.next();
                    }
                }
                else
                    topKey = conpoke(topKey, cx, summability);

                break;
            }
        }

        return  topKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMap</Name>
				<Source><![CDATA[
        //Get Map with data
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map getMap()
    {
        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumKeyField</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TempStr getSumKeyField()
    {
        return summability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        //Insert data
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insert(container _key1,
                       anytype   _valueValue)
    {
        container topKey;
        container curKey = _key1;
        ;

        if (conlen(curKey) != keyLength)
            throw error(error::wrongUseOfFunction(funcname()));

        if (useAlterEmptyFieldKey)
        {
            curKey = this.replaceDefaultToAlterEmptyFieldKey(curKey);
        }

        if (map.exists(curKey))
        {
            this.addSumInComplianceWithKey(curKey, _valueValue);
        }
        else
        {
            this.insertValue(curKey, _valueValue);
        }

        topKey = this.transferToTop(curKey, _valueValue);

        while (topKey != connull())
        {
            topKey = this.transferToTop(topKey, _valueValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void insertValue(container _key,
                               anytype   _value)
    {
        ;
        map.insert(_key, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyIsSubNode</Name>
				<Source><![CDATA[
        // if _child key is subnode to _parent key
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean keyIsSubNode(container _parent,
                                container _child)
    {
        boolean     ret = false;
        container   key = _child;

        ;

        if (_parent == _child)
            return true;

        while (key != connull() && ! ret)
        {
            key = this.createTopLevelKey(key);

            if (key == _parent)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        // _keyLen                  -> Count elements into key (length container).
    // _valueTypes              -> Type stored value.
    // _conColumnAsOneColumn    -> There are column numbers used as one key (i.e. as one group).
    // _summability             -> This string is sign summation of key value.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(int         _keyLen,
                    Types       _valueTypes,
                    container   _conColumnAsOneColumn = connull(),
                    TempStr     _summability          = #defaultEmptyValue)
    {
        int     cx, iLen, col;

        ;

        if (_summability == #defaultEmptyFieldKey)
        {
            emptyFieldKey = #alterEmptyFieldKey;
            useAlterEmptyFieldKey = true;
        }
        else
        {
            emptyFieldKey = #defaultEmptyFieldKey;
            useAlterEmptyFieldKey = false;
        }

        keyLength   = _keyLen;
        summability = _summability;

        map                  = new Map(Types::Container, _valueTypes);
        setColumnAsOneColumn = new Set(Types::Integer);

        if (_conColumnAsOneColumn != connull())
        {
            iLen = conlen(_conColumnAsOneColumn);

            for (cx = 1; cx <= iLen; cx++)
            {
                col = conpeek(_conColumnAsOneColumn, cx);
                setColumnAsOneColumn.add(col);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container pack()
    {
        return [ #CurrentVersion, #CurrentList, setColumnAsOneColumn.pack(), map.pack() ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceDefaultToAlterEmptyFieldKey</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container replaceDefaultToAlterEmptyFieldKey(container  _key)
    {
        container   con;
        int         idx;

        ;

        con = _key;

        idx = confind(con, #defaultEmptyFieldKey);

        while (idx > 0)
        {
            con = conpoke(con, idx, #alterEmptyFieldKey);
            idx = confind(con, #defaultEmptyFieldKey);
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToTop</Name>
				<Source><![CDATA[
        //Transfer data to top into paretns key.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected  container transferToTop(container  _key, anytype   _valueValue)
    {
        container   topKey;

        ;

        topKey = this.createTopLevelKey(_key);

        if (topKey != connull())
        {
            if (map.exists(topKey))
                this.addSumInComplianceWithKey(topKey, _valueValue);
            else
                this.insertValue(topKey, _valueValue);
        }

        return topKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   conMap, conSet;

        switch (version)
        {
            case #CurrentVersion:

                [version, #CurrentList, conSet, conMap] = _packedClass;

                if ((conMap == connull()) || (conSet == connull()))
                    throw error(error::wrongUseOfFunction(funcname()));

                setColumnAsOneColumn = Set::create(conSet);
                map                  = Map::create(conMap);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packRHolderData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static container packRHolderData(RHolderData _holderData)
    {
        return [classidget(_holderData), _holderData.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackRHolderData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RHolderData unpackRHolderData(container _packedClass)
    {
    #define.defaultKeyLen(1)

        RHolderData holderData;
        classId     classId = conpeek(_packedClass, #posClassID);
        container   conData;

        ;

        switch (classId)
        {
            case classnum(RHolderData_ActAdjustCustVend):
                holderData = new RHolderData_ActAdjustCustVend(#defaultKeyLen);
                break;

            case classnum(RHolderData_RCustVendTurnoverHolder):
                holderData = new RHolderData_RCustVendTurnoverHolder(#defaultKeyLen);
                break;

            default :
                throw error(error::wrongUseOfFunction(funcname()));
        }

        conData = conpeek(_packedClass, #posClassID + 1);

        holderData.unpack(conData);

        return holderData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>