<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailChannelWorkerExplodeJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// This class is used to push data from <c>RetailStoreAddressBook</c> table and <c>DirAddressBookParty</c> table
/// into <c>etailChannelWorkerExploded</c> table.
/// </summary>
[SysObsoleteAttribute('RetailChannelWorkerExplodeJob have been deprecated.', true, 13\04\2021)]
class RetailChannelWorkerExplodeJob extends RunBaseBatch implements BatchRetryable
{
    private const int RetryNum = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the main logic of the job.
    /// </summary>
    public void run()
    {
        // Explode channel and worker pairs
        try
        {
            ApplicationEventSource::EventWriteRetailChannelWorkerExplodeJobStart();

            ttsBegin;
            this.explodeChannelWorkers();
            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            ApplicationEventSource::EventWriteRetailChannelWorkerExplodeJobFailure('explodeChannelWorkers', 'Exception::Deadlock, retry explodeChannelWorkers');
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    ApplicationEventSource::EventWriteRetailChannelWorkerExplodeJobFailure('explodeChannelWorkers', 'Exception::UpdateConflict, retry explodeChannelWorkers');
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        finally
        {
            ApplicationEventSource::EventWriteRetailChannelWorkerExplodeJobStop();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>The class description.</returns>
    public static ClassDescription description()
    {
        return "@Retail:ProcessChannelWorkerJobMenu";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The main method of the job.
    /// </summary>
    /// <param name = "_args">The job arguments.</param>
    public static void main(Args _args)
    {
        RetailChannelWorkerExplodeJob job = new RetailChannelWorkerExplodeJob();

        if (job.prompt())
        {
            job.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailChannelWorkerExplodeJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>False.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>explodeChannelWorkers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Explodes the channel worker associations.
    /// </summary>
    private void explodeChannelWorkers()
    {
        RetailChannelWorkerExploded newChannelWorker, existingChannelWorker;
        RetailChannelTable channel;
        RetailStoreAddressBook channelAddressBook;
        DirAddressBookParty addressBookParty;
        HcmWorker worker;
        NoYes active;
        
        // If a recently added association does not exist in the exploded table yet,
        // Add the new associations by inserting a row.
        ApplicationEventSource::EventWriteRetailChannelWorkerExplodeJobInfoLog(funcName(), 'Inserting recently added channel workers...');
        active = NoYes::Yes;
        insert_recordset newChannelWorker (IsActive, RetailChannelId, PersonnelNumber)
            select active, RetailChannelId from channel
                join channelAddressBook
                    where channelAddressBook.StoreRecId == channel.RecId
                       && channelAddressBook.AddressBookType == RetailAddressBookType::Employee
                join addressBookParty
                    where addressBookParty.AddressBook == channelAddressBook.AddressBook
                join PersonnelNumber from worker
                    group by channel.RetailChannelId, worker.PersonnelNumber
                    where worker.Person == addressBookParty.Party
                notexists join existingChannelWorker
                    where existingChannelWorker.RetailChannelId == channel.RetailChannelId
                       && existingChannelWorker.PersonnelNumber == worker.PersonnelNumber;

        // If a recently added association already exists in the exploded table, but it was not Active,
        // Update the association by changing IsActive to Yes.
        ApplicationEventSource::EventWriteRetailChannelWorkerExplodeJobInfoLog(funcName(), 'Marking recently added channel workers as Active...');
        update_recordset existingChannelWorker
            setting
                IsActive = NoYes::Yes
            where existingChannelWorker.IsActive == NoYes::No
                exists join channel
                    where channel.RetailChannelId == existingChannelWorker.RetailChannelId
                exists join channelAddressBook
                    where channelAddressBook.StoreRecId == channel.RecId
                       && channelAddressBook.AddressBookType == RetailAddressBookType::Employee
                exists join addressBookParty
                    where addressBookParty.AddressBook == channelAddressBook.AddressBook
                exists join worker
                    where worker.Person == addressBookParty.Party
                       && worker.PersonnelNumber == existingChannelWorker.PersonnelNumber;

        // If a recently removed association exists in the exploded table,
        // Update the association by changing IsActive to No.
        ApplicationEventSource::EventWriteRetailChannelWorkerExplodeJobInfoLog(funcName(), 'Marking recently removed channel workers as Inactive...');
        update_recordset existingChannelWorker
            setting
                IsActive = NoYes::No
            where existingChannelWorker.IsActive == NoYes::Yes
                notexists join channel
                    where channel.RetailChannelId == existingChannelWorker.RetailChannelId
                join channelAddressBook
                    where channelAddressBook.StoreRecId == channel.RecId
                       && channelAddressBook.AddressBookType == RetailAddressBookType::Employee
                join addressBookParty
                    where addressBookParty.AddressBook == channelAddressBook.AddressBook
                join worker
                    where worker.Person == addressBookParty.Party
                       && worker.PersonnelNumber == existingChannelWorker.PersonnelNumber;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>