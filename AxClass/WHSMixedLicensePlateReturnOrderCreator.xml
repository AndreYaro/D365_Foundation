<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMixedLicensePlateReturnOrderCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMixedLicensePlateReturnOrderCreator</c> class is responsible for creating the return order and lines from <c>WHSMixedLicensePlateReceiptPlannedLine</c> records.
/// </summary>
internal final class WHSMixedLicensePlateReturnOrderCreator extends WHSMixedLicensePlateReturnsProcessSourceOrderCreator
{
    private Map items = new Map(Types::String, Types::Record);
    private Map customerReturnOrders = new Map(Types::String, Types::Record);
    private Map returnDispositionCodes = new Map(Types::String, Types::String);
    private Map itemInventoryUnits = new Map(Types::String, Types::String);
    private Map lastReturnLineNumbers = new Map(Types::String, Types::Real);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSMixedLicensePlateReturnsProcessSourceOrderCreator construct()
    {
        return new WHSMixedLicensePlateReturnOrderCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceOrderAndLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create return order, return line and related data.
    /// </summary>
    /// <returns>
    /// True if return order and lines were created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The <c>WHSMixedLicensePlateReceiptPlannedLine</c> records used to create the return data will be deleted afterwards.
    /// </remarks>
    internal boolean createSourceOrderAndLines()
    {
        boolean returnOrderCreated;

        if (isReturnOrderCreationFromMobileDeviceEnabled)
        {
            ttsbegin;
            WHSReturnOrderCreator returnOrderCreator = new WHSReturnOrderCreator();

            WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;
            WHSMixedLicensePlateReceiptPlannedLine mixedLicensePlateReceiptPlannedLine;

            while select mixedLicensePlateReceiptLine
                order by mixedLicensePlateReceiptLine.LineNum asc
                where mixedLicensePlateReceiptLine.MixedLPReceivingTable == mixedLicensePlateReceipt.RecId
                join forupdate mixedLicensePlateReceiptPlannedLine
                    where mixedLicensePlateReceiptPlannedLine.MixedLicensePlateReceiptLineRecId == mixedLicensePlateReceiptLine.RecId
            {
                SalesTable returnOrder = this.findOrCreateReturnOrder(returnOrderCreator, mixedLicensePlateReceiptPlannedLine.AccountNum);
                SalesLine returnLine = this.createReturnLine(returnOrderCreator, returnOrder, mixedLicensePlateReceiptLine, mixedLicensePlateReceiptPlannedLine);
                mixedLicensePlateReceiptPlannedLine.delete();

                returnOrderCreated = true;
            }

            ttscommit;
        }

        return returnOrderCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateReturnOrder</Name>
				<Source><![CDATA[
    private SalesTable findOrCreateReturnOrder(WHSReturnOrderCreator _returnOrderCreator, CustVendAC _accountNum)
    {
        if (!customerReturnOrders.exists(_accountNum))
        {
            if (WHSUseReturnOrderCreatorFlight::instance().isEnabled())
            {
                SalesTable returnOrder = _returnOrderCreator.createReturnHeader(_accountNum);
                customerReturnOrders.add(_accountNum, returnOrder);
            }
            else
            {
                SalesTable returnOrder;
                returnOrder.CustAccount = _accountNum;
                returnOrder.initFromCustTable();
                returnOrder.SalesId = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
                returnOrder.ReturnItemNum = NumberSeq::newGetNum(SalesParameters::numRefReturnItemNum()).num();
                returnOrder.SalesType = SalesType::ReturnItem;
                returnOrder.ReturnStatus = ReturnStatusHeader::Created;
                returnOrder.insert();

                customerReturnOrders.add(_accountNum, returnOrder);
            }
        }

        return customerReturnOrders.lookup(_accountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>item</Name>
				<Source><![CDATA[
    private InventTable item(ItemId _itemId)
    {
        if (!items.exists(_itemId))
        {
            InventTable item = InventTable::find(_itemId);

            items.add(_itemId, item);
        }

        return items.lookup(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnLine</Name>
				<Source><![CDATA[
    private SalesLine createReturnLine(
        WHSReturnOrderCreator                   _returnOrderCreator,
        SalesTable                              _returnOrder,
        WHSMixedLicensePlateReceiptLine         _mixedLicensePlateReceiptLine,
        WHSMixedLicensePlateReceiptPlannedLine  _mixedLicensePlateReceiptPlannedLine)
    {
        if (WHSUseReturnOrderCreatorFlight::instance().isEnabled())
        {
            InventTable item = InventTable::find(_mixedLicensePlateReceiptPlannedLine.ItemId);

            WHSReturnOrderLineCreatorParameters parameters = WHSReturnOrderLineCreatorParameters::createFromParameters(
                _returnOrder,
                item,
                dispositionCode ? dispositionCode : _mixedLicensePlateReceiptPlannedLine.DispositionCode,
                this.itemReceiptLineAboveLocationInventDimId(item, _mixedLicensePlateReceiptLine.InventDimId),
                -_mixedLicensePlateReceiptLine.InventQty,
                true,
                _mixedLicensePlateReceiptLine.InventTransId);

            return _returnOrderCreator.createReturnLine(parameters);
        }
        else
        {
            SalesLine returnLine;
            returnLine.initFromSalesTable(_returnOrder);
            returnLine.InventTransId = _mixedLicensePlateReceiptLine.InventTransId;
            returnLine.SkipAssignInventTransId = NoYes::Yes;
            returnLine.ReturnDispositionCodeId = this.returnDispositionCode(dispositionCode ? dispositionCode : _mixedLicensePlateReceiptPlannedLine.DispositionCode);
            returnLine.ItemId = _mixedLicensePlateReceiptPlannedLine.ItemId;

            InventTable item = this.item(returnLine.ItemId);
            returnLine.initFromInventTable(item);
            returnLine.InventDimId = this.itemReceiptLineAboveLocationInventDimId(item, _mixedLicensePlateReceiptLine.InventDimId);
            returnLine.SalesQty = -_mixedLicensePlateReceiptLine.InventQty;
            returnLine.QtyOrdered = returnLine.SalesQty;
            returnLine.ExpectedRetQty = returnLine.SalesQty;
            returnLine.SalesUnit = this.itemInventoryUnit(item);
            returnLine.ReturnStatus = ReturnStatusLine::Awaiting;
            returnLine.LineNum = this.nextReturnLineNumber(returnLine.SalesId);
            returnLine.insert();

            return returnLine;
        } 
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnDispositionCode</Name>
				<Source><![CDATA[
    private ReturnDispositionCodeId returnDispositionCode(WHSDispositionCode _dispositionCode)
    {
        if (!returnDispositionCodes.exists(_dispositionCode))
        {
            ReturnDispositionCodeId returnDispositionCode = WHSDispositionTable::find(_dispositionCode).ReturnDispositionCodeId;

            returnDispositionCodes.add(_dispositionCode, returnDispositionCode);
        }

        return returnDispositionCodes.lookup(_dispositionCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemInventoryUnit</Name>
				<Source><![CDATA[
    private UnitOfMeasureSymbol itemInventoryUnit(InventTable _item)
    {
        if (!itemInventoryUnits.exists(_item.ItemId))
        {
            UnitOfMeasureSymbol inventoryUnit = _item.inventUnitId();

            itemInventoryUnits.add(_item.ItemId, inventoryUnit);
        }

        return itemInventoryUnits.lookup(_item.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextReturnLineNumber</Name>
				<Source><![CDATA[
    private LineNum nextReturnLineNumber(SalesId _salesId)
    {
        LineNum lastLineNum = lastReturnLineNumbers.exists(_salesId) ? lastReturnLineNumbers.lookup(_salesId) : SalesLine::lastLineNum(_salesId);
        LineNum nextLineNum = lastLineNum + 1;

        lastReturnLineNumbers.add(_salesId, nextLineNum);

        return nextLineNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>