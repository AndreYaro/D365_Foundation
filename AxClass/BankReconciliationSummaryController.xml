<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationSummaryController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationSummaryController</c> class is the controller class for the
/// <c>BankReconciliationSummary</c> report.
/// </summary>
public class BankReconciliationSummaryController extends SrsReportRunController implements BatchRetryable
{
    private BankAccountStatement bankAccountStatement;
    private BankReconciliationSummaryTmp bankReconciliationSummaryTmp;
    private BankTransactionTypeGroup bankTransactionTypeGroup;
    private DetailSummary detailSummary;
    private AmountCur clearedAmountCur;
    private Counter lines;
    private AmountCur registerBalanceCur;
    private AmountMST previousBalance;
    private AmountMST endBalance;
    private TransDate transDate;
    private Description referenceNum;
    private Name payee;
    private TransTxt transTxt;
    private Name bankTransTypeName;
    private AmountCur amountCur;
    private TransDate checkingDate;
    private ListIterator it;
    private str chequeMark;
    private int currentSessionId;
    private int newPage;
    private int voucherVisibility;
    private int table_NewPageVisibility;
    private int visibility;
    private str queryKeyStr;

    private const Timezone GMT = Timezone::GMT_DUBLIN_EDINBURGH_LISBON_LONDON;
    private const str SummaryParameter = 'ReconciliationSummary';
    private const str CheckDateParameter = 'CheckingDate';
    private const str ClearDetailsParameter = 'ClearedTransactionDetails';
    private const str UnClearDetailsParameter = 'UnClearedTransactionDetails';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateClearedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the cleared transactions records.
    /// </summary>
    /// <remarks>
    /// The <c>visibility</c> and <c>table_NewPageVisibility</c> values are used to control the design at
    /// the SSRS.
    /// </remarks>
    [Hookable(true)]
    protected final void generateClearedTransactions()
    {
        BankAccountTrans bankAccountTrans;
        BankTransTypeGroupDetails bankTransTypeGroupDetails;
        AmountCur totalClearedAmountCur;
        Counter totalClearedItems;

        bankTransactionTypeGroup = '';
        lines = 0;
        clearedAmountCur = 0;
        table_NewPageVisibility = 2;

        it.begin();

        while (it.more())
        {
            bankTransTypeGroupDetails = it.value();

            while select AmountCur, AmountCorrect, DepositNum, AccountId, ChequeNum, Voucher, TransDate, Txt, BankTransType
                from bankAccountTrans
                order by ChequeNum, DepositNum
                where bankTransTypeGroupDetails.BankTransactionType == bankAccountTrans.BankTransType
                    && bankAccountTrans.AccountId == bankAccountStatement.AccountId
                    && bankAccountTrans.AccountStatementDate == bankAccountStatement.AccountStatementDate
                    && ((bankAccountStatement.ReconcileDate)
                        || (!bankAccountStatement.ReconcileDate
                        && bankAccountTrans.Included == true
                        && !bankAccountTrans.Reconciled))
            {
                totalClearedAmountCur += bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect;
                totalClearedItems++;

                this.generateClearedTransactionDetails(bankAccountTrans, bankTransTypeGroupDetails);
            }

            it.next();
        }

        this.generateClearedTransactionsTotals(totalClearedAmountCur, totalClearedItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateClearedTransactionDetails</Name>
				<Source><![CDATA[
    [Hookable(true)]
    protected final void generateClearedTransactionDetails(BankAccountTrans _bankAccountTrans, BankTransTypeGroupDetails _bankTransTypeGroupDetails)
    {
        BankChequeTable bankChequeTable;
        BankDeposit bankDeposit;
        BankChequeNum chequeNum;

        if (bankTransactionTypeGroup
            && bankTransactionTypeGroup != _bankTransTypeGroupDetails.BankTransactionTypeGroup)
        {
            visibility = 52;
            this.insertBankReconciliationSummaryTmp();
            clearedAmountCur = 0;
            chequeNum = '';
            lines = 0;
            bankTransactionTypeGroup = _bankTransTypeGroupDetails.BankTransactionTypeGroup;
            visibility = 11;
            this.insertBankReconciliationSummaryTmp();
        }

        if (!bankTransactionTypeGroup)
        {
            bankTransactionTypeGroup = _bankTransTypeGroupDetails.BankTransactionTypeGroup;
            visibility = 12;
            this.insertBankReconciliationSummaryTmp();
        }

        clearedAmountCur += _bankAccountTrans.AmountCur + _bankAccountTrans.AmountCorrect;
        lines += 1;

        referenceNum = '';
        payee = '';

        if (_bankAccountTrans.DepositNum)
        {
            visibility = 42;
            this.insertBankReconciliationSummaryTmp();

            while select BankTransType, TransDate, AmountCur, Txt, CustAccount from bankDeposit
                where bankDeposit.AccountId == _bankAccountTrans.AccountId
                    && bankDeposit.DepositNum == _bankAccountTrans.DepositNum
            {
                bankTransTypeName = BankTransType::find(bankDeposit.BankTransType).Name;
                transDate = bankDeposit.TransDate;
                referenceNum = _bankAccountTrans.DepositNum;
                amountCur = bankDeposit.AmountCur;
                transTxt = bankDeposit.Txt;
                payee = CustTable::find(bankDeposit.CustAccount).name();
                visibility = 54;
                this.insertBankReconciliationSummaryTmp();
            }

            visibility = 43;
            this.insertBankReconciliationSummaryTmp();
            payee = '';
            referenceNum = _bankAccountTrans.DepositNum;
        }

        chequeMark = '';

        if (_bankAccountTrans.ChequeNum)
        {
            select firstonly bankChequeTable
                where bankChequeTable.AccountID == _bankAccountTrans.AccountId
                    && bankChequeTable.ChequeNum == _bankAccountTrans.ChequeNum
                    && bankChequeTable.Voucher == _bankAccountTrans.Voucher
                    && bankChequeTable.TransDate == _bankAccountTrans.TransDate;

            if (bankChequeTable)
            {
                if (chequeNum && _bankAccountTrans.ChequeNum
                    && (NumberSeq::numRemoveFormat(chequeNum, '') + 1) != NumberSeq::numRemoveFormat(_bankAccountTrans.ChequeNum, ''))
                {
                    chequeMark = '*';
                }
                else
                {
                    chequeMark = '';
                }

                chequeNum = _bankAccountTrans.ChequeNum;
                referenceNum = _bankAccountTrans.ChequeNum;

                switch (bankChequeTable.RecipientType)
                {
                    case BankChequeRecipientType::Vend,
                         BankChequeRecipientType::Ledger,
                         BankChequeRecipientType::Bank:

                        if (bankChequeTable.RecipientCompany)
                        {
                            payee = VendTable::findByCompany(bankChequeTable.RecipientCompany,
                                    bankChequeTable.RecipientAccountNum).name();
                        }
                        else
                        {
                            payee = VendTable::find(bankChequeTable.RecipientAccountNum).name();
                        }
                        break;

                    case BankChequeRecipientType::Cust:

                        if (bankChequeTable.RecipientCompany)
                        {
                            payee = CustTable::findByCompany(bankChequeTable.RecipientCompany,
                                    bankChequeTable.RecipientAccountNum).name();
                        }
                        else
                        {
                            payee = CustTable::find(bankChequeTable.RecipientAccountNum).name();
                        }
                        break;

                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }

        transDate = _bankAccountTrans.TransDate;
        transTxt = _bankAccountTrans.Txt;
        bankTransTypeName = BankTransType::find(_bankAccountTrans.BankTransType).Name;
        amountCur = _bankAccountTrans.AmountCur + _bankAccountTrans.AmountCorrect;
        visibility = 51;
        this.insertBankReconciliationSummaryTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateClearedTransactionsTotals</Name>
				<Source><![CDATA[
    private void generateClearedTransactionsTotals(AmountCur _totalClearedAmount, Counter _totalClearedItems)
    {
        const int ClearedTransactionsTotal = 41;
        const int ClearedTransactionsGrandTotal = 61;

        visibility = ClearedTransactionsTotal;
        this.insertBankReconciliationSummaryTmp();

        clearedAmountCur = _totalClearedAmount;
        lines = _totalClearedItems;

        visibility = ClearedTransactionsGrandTotal;
        this.insertBankReconciliationSummaryTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankTransTypeGroupDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BankTransTypeGroupDetailsList</c> object by using the fetched values from the
    /// <c>BankTransTypeGroupDetails</c> table.
    /// </summary>
    private void initBankTransTypeGroupDetail()
    {
        BankTransTypeGroupDetails bankTransTypeGroupDetails;
        BankTransTypeGroupDetails bankTransTypeGroupDetails2;
        BankTransType bankTransType;
        BankTransType bankTransType2;
        BankAccountTrans bankAccountTrans;
        BankAccountTrans bankAccountTrans2;
        List bankTransTypeGroupDetailsList = new List(Types::Record);

        while select bankTransTypeGroupDetails
            order by BankTransactionTypeGroup
            exists join bankTransType
                where bankTransTypeGroupDetails.BankTransactionType == bankTransType.BankTransType
            exists join bankAccountTrans
                where bankAccountTrans.AccountId == bankAccountStatement.AccountId
                    && bankAccountTrans.BankTransType == bankTransType.BankTransType
        {
            bankTransTypeGroupDetailsList.addEnd(bankTransTypeGroupDetails);
        }

        while select BankTransType from bankTransType2
            exists join bankAccountTrans2
                where bankAccountTrans2.AccountId == bankAccountStatement.AccountId
                    && bankAccountTrans2.BankTransType == bankTransType2.BankTransType
            notexists join bankTransTypeGroupDetails2
                where bankTransTypeGroupDetails2.BankTransactionType == bankTransType2.BankTransType
        {
            bankTransTypeGroupDetails.clear();
            bankTransTypeGroupDetails.BankTransactionType = bankTransType2.BankTransType;
            bankTransTypeGroupDetailsList.addEnd(bankTransTypeGroupDetails);
        }

        bankTransTypeGroupDetails.clear();
        bankTransTypeGroupDetailsList.addEnd(bankTransTypeGroupDetails);

        it = new ListIterator(bankTransTypeGroupDetailsList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankReconciliationSummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the records into the <c>bankReconciliationSummaryTmp</c> table.
    /// </summary>
    private void insertBankReconciliationSummaryTmp()
    {
        bankReconciliationSummaryTmp.CheckingDate = checkingDate;
        bankReconciliationSummaryTmp.AccountId = bankAccountStatement.AccountId;
        bankReconciliationSummaryTmp.AccountName = BankAccountTable::find(bankAccountStatement.AccountId).Name;
        bankReconciliationSummaryTmp.AccountStatementDate = bankAccountStatement.AccountStatementDate;
        bankReconciliationSummaryTmp.AccountStatementNum = bankAccountStatement.AccountStatementNum;
        bankReconciliationSummaryTmp.ReconcileDate = bankAccountStatement.ReconcileDate;
        bankReconciliationSummaryTmp.PreviousBalance = previousBalance;
        bankReconciliationSummaryTmp.EndingBalance = endBalance;
        bankReconciliationSummaryTmp.BankTransTypeDescription = BankTransactionTypeGroupHeader::find(bankTransactionTypeGroup).Description;
        bankReconciliationSummaryTmp.RegisterBalanceCur = registerBalanceCur;
        bankReconciliationSummaryTmp.TransDate = transDate;
        bankReconciliationSummaryTmp.ChequeMark = chequeMark;
        bankReconciliationSummaryTmp.ReferenceNum = referenceNum;
        bankReconciliationSummaryTmp.Payee = payee;
        bankReconciliationSummaryTmp.TransTxt = transTxt;
        bankReconciliationSummaryTmp.BankTransTypeName = bankTransTypeName;
        bankReconciliationSummaryTmp.AmountCur = amountCur;
        bankReconciliationSummaryTmp.ClearedAmountCur = clearedAmountCur;
        bankReconciliationSummaryTmp.Lines = lines;
        bankReconciliationSummaryTmp.Visibility = visibility;
        bankReconciliationSummaryTmp.Table_NewPageVisibility = table_NewPageVisibility;
        bankReconciliationSummaryTmp.DateOfCreation = DateTimeUtil::getToday(GMT);
        bankReconciliationSummaryTmp.SessionId = currentSessionId;
        bankReconciliationSummaryTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        if (this.parmArgs())
        {
            if (this.parmArgs().dataset() == tableNum(BankAccountTrans)
                && this.parmArgs().caller().name() == formStr(BankReconciliation))
            {
                bankAccountStatement = this.parmArgs().caller().bankAccountStatement();
            }

            if (this.parmArgs().dataset()== tableNum(BankAccountStatement)
                && this.parmArgs().caller().name() == formStr(BankAccountStatement))
            {
                bankAccountStatement = this.parmArgs().caller().bankAccountStatement();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method to change report contract before running report.
    /// </summary>
    protected void preRunModifyContract()
    {
        Query reportQuery;
        SrsReportRdlDataContract rdlContract;

        rdlContract = this.parmReportContract().parmRdlContract();

        this.processReport(rdlContract);

        reportQuery = this.getFirstQuery();

        SrsReportHelper::addParameterValueRangeToQuery(
            reportQuery,
            tableNum(BankReconciliationSummaryTmp),
            fieldNum(BankReconciliationSummaryTmp, SessionId),
            queryValue(currentSessionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    private void processReport(SrsReportRdlDataContract _rdlContract)
    {
        // Reset the register balance amount before running the report.
        registerBalanceCur = 0;
        checkingDate = _rdlContract.getValue(CheckDateParameter);

        this.reconcileBankTrans(_rdlContract.getValue(SummaryParameter),
            _rdlContract.getValue(ClearDetailsParameter),
            _rdlContract.getValue(UnClearDetailsParameter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reconcileBankTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the methods that correspond to the passed arguments.
    /// </summary>
    /// <param name="_summaryParam">
    /// A Boolean value that specifies whether the reconciliation summary details are required.
    /// </param>
    /// <param name="_clearedParam">
    /// A Boolean value that specifies whether the cleared transaction details are required.
    /// </param>
    /// <param name="_unClearedParam">
    /// A Boolean value that represents whether the uncleared transaction details are required.
    /// </param>
    public void reconcileBankTrans(boolean _summaryParam, boolean _clearedParam, boolean _unClearedParam)
    {
        boolean summaryParam, clearedParam, unClearedParam;
        boolean ret;
        summaryParam = _summaryParam;
        clearedParam = _clearedParam;
        unClearedParam = _unClearedParam;

        currentSessionId = new xSession().sessionId();
        //delete the previous records if there are existing record corresponding to the current session or there are existing records
        // more than two days old.
        delete_from bankReconciliationSummaryTmp
            where ((bankReconciliationSummaryTmp.SessionId == currentSessionId)
                || (bankReconciliationSummaryTmp.DateOfCreation < DateTimeUtil::getToday(GMT) - 2));

        if (summaryParam)
        {
            this.summary();
            ret = true;
        }

        if (clearedParam || unClearedParam)
        {
            this.initBankTransTypeGroupDetail();
        }

        if (clearedParam)
        {
            if (ret)
            {
                table_NewPageVisibility = 10;
                this.insertBankReconciliationSummaryTmp();
            }

            this.generateClearedTransactions();
            ret = true;
        }

        if (unClearedParam)
        {
            if (ret)
            {
                table_NewPageVisibility = 11;
                this.insertBankReconciliationSummaryTmp();
            }

            this.generateUnclearedTransactions();
            ret= true;
        }

        if (!ret)
        {
            table_NewPageVisibility = 20;
            this.insertBankReconciliationSummaryTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the summary records.
    /// </summary>
    /// <remarks>
    /// The <c>visibility</c> and <c>table_NewPageVisibility</c> values are used to control the design at
    /// the SSRS.
    /// </remarks>
    private void summary()
    {
        BankAccountTrans bankAccountTrans;
        BankTransTypeGroupDetails bankTransTypeGroupDetails;
        table_NewPageVisibility = 1;
        previousBalance = bankAccountStatement.openingBalance();
        visibility = 1;
        this.insertBankReconciliationSummaryTmp();

        if (!checkingDate)
        {
            checkingDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (!bankAccountStatement)
        {
            select bankAccountStatement;
        }

        while select sum(AmountCur), sum(AmountCorrect), count(RecId) from bankAccountTrans
            where bankAccountTrans.AccountId == bankAccountStatement.AccountId
                && bankAccountTrans.AccountStatement == bankAccountStatement.AccountStatementNum
                && bankAccountTrans.AccountStatementDate == bankAccountStatement.AccountStatementDate
                && bankAccountTrans.Included == true
            outer join bankTransTypeGroupDetails
                group by BankTransactionTypeGroup
                where bankTransTypeGroupDetails.BankTransactionType == bankAccountTrans.BankTransType
        {
            bankTransactionTypeGroup = bankTransTypeGroupDetails.BankTransactionTypeGroup;
            clearedAmountCur = bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect;
            lines = any2int(bankAccountTrans.RecId);
            registerBalanceCur += clearedAmountCur;
            visibility = 100;
            this.insertBankReconciliationSummaryTmp();
        }

        endBalance = registerBalanceCur;
        registerBalanceCur = (endBalance + previousBalance);
        visibility = 33;
        this.insertBankReconciliationSummaryTmp();
        endBalance = (bankAccountStatement.EndingBalance - registerBalanceCur);
        visibility = 6;
        this.insertBankReconciliationSummaryTmp();
        endBalance = bankAccountStatement.EndingBalance;
        visibility = 5;
        this.insertBankReconciliationSummaryTmp();

        while select sum(AmountCur), sum(AmountCorrect), count(RecId) from bankAccountTrans
            where bankAccountTrans.AccountId == bankAccountStatement.AccountId
                && ((!bankAccountTrans.Reconciled)
                    || (bankAccountTrans.Reconciled
                    && bankAccountTrans.AccountStatementDate > checkingDate))
                && ((!bankAccountTrans.Included)
                    || (bankAccountTrans.Included
                    && bankAccountTrans.AccountStatementDate > checkingDate))
                && bankAccountTrans.TransDate <= checkingDate
            outer join bankTransTypeGroupDetails
                group by BankTransactionTypeGroup
                where bankTransTypeGroupDetails.BankTransactionType == bankAccountTrans.BankTransType
        {
            bankTransactionTypeGroup = bankTransTypeGroupDetails.BankTransactionTypeGroup;
            clearedAmountCur = bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect;
            lines = any2int(bankAccountTrans.RecId);
            registerBalanceCur += clearedAmountCur;
            visibility = 101;
            this.insertBankReconciliationSummaryTmp();
        }

        visibility = 32;
        this.insertBankReconciliationSummaryTmp();

        while select sum(AmountCur), sum(AmountCorrect), count(RecId) from bankAccountTrans
            where bankAccountTrans.AccountId == bankAccountStatement.AccountId
                && ((!bankAccountTrans.Reconciled)
                    || (bankAccountTrans.Reconciled
                    && bankAccountTrans.AccountStatementDate > checkingDate))
                && ((!bankAccountTrans.Included)
                    || (bankAccountTrans.Included
                    && bankAccountTrans.AccountStatementDate > checkingDate))
                && bankAccountTrans.TransDate > checkingDate
            outer join bankTransTypeGroupDetails
                group by BankTransactionTypeGroup
                where bankTransTypeGroupDetails.BankTransactionType == bankAccountTrans.BankTransType
        {
            bankTransactionTypeGroup = bankTransTypeGroupDetails.BankTransactionTypeGroup;
            clearedAmountCur = bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect;
            lines = any2int(bankAccountTrans.RecId);
            registerBalanceCur += clearedAmountCur;
            visibility = 103;
            this.insertBankReconciliationSummaryTmp();
        }
        visibility = 133;
        this.insertBankReconciliationSummaryTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateUnclearedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the uncleared transaction records.
    /// </summary>
    /// <remarks>
    /// The <c>visibility</c> and <c>table_NewPageVisibility</c> values are used to control the design at
    /// the SSRS.
    /// </remarks>
    [Hookable(true)]
    protected final void generateUnclearedTransactions()
    {
        BankAccountTrans bankAccountTrans;
        BankTransTypeGroupDetails bankTransTypeGroupDetails;

        AmountCur totalUnclearedAmountCur;
        Counter totalUnclearedItems;

        bankTransactionTypeGroup = '';
        lines = 0;
        clearedAmountCur = 0;
        table_NewPageVisibility = 3;

        if (!checkingDate)
        {
            checkingDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }

        it.begin();

        while (it.more())
        {
            bankTransTypeGroupDetails = it.value();

            while select AmountCur, AmountCorrect, DepositNum, AccountId, ChequeNum, Voucher, TransDate, Txt, BankTransType, PaymReference, SourceTableId, SourceRecId from bankAccountTrans
                order by TransDate
                where bankTransTypeGroupDetails.BankTransactionType == bankAccountTrans.BankTransType
                    && bankAccountTrans.AccountId == bankAccountStatement.AccountId
                    && ((!bankAccountTrans.Included)
                        || (bankAccountTrans.Included
                        && bankAccountTrans.AccountStatementDate > checkingDate))
                    && bankAccountTrans.TransDate <= checkingDate
                    && ((!bankAccountTrans.Reconciled)
                        || (bankAccountTrans.Reconciled
                        && bankAccountTrans.AccountStatementDate > checkingDate))
            {
                totalUnclearedAmountCur += bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect;
                totalUnclearedItems += 1;

                this.generateUnclearedTransactionDetails(bankAccountTrans, bankTransTypeGroupDetails);
            }

            it.next();
        }

        this.generateUnclearedTransactionsTotals(totalUnclearedAmountCur, totalUnclearedItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateUnclearedTransactionDetails</Name>
				<Source><![CDATA[
    [Hookable(true)]
    protected final void generateUnclearedTransactionDetails(BankAccountTrans _bankAccountTrans, BankTransTypeGroupDetails _bankTransTypeGroupDetails)
    {
        BankChequeTable bankChequeTable;
        BankDeposit bankDeposit;

        if (bankTransactionTypeGroup
            && bankTransactionTypeGroup != _bankTransTypeGroupDetails.BankTransactionTypeGroup)
        {
            visibility = 152;
            this.insertBankReconciliationSummaryTmp();
            clearedAmountCur = 0;
            lines = 0;
            bankTransactionTypeGroup = _bankTransTypeGroupDetails.BankTransactionTypeGroup;
            visibility = 111;
            this.insertBankReconciliationSummaryTmp();
        }

        if (!bankTransactionTypeGroup)
        {
            bankTransactionTypeGroup = _bankTransTypeGroupDetails.BankTransactionTypeGroup;
            visibility = 112;
            this.insertBankReconciliationSummaryTmp();
        }

        clearedAmountCur += _bankAccountTrans.AmountCur + _bankAccountTrans.AmountCorrect;
        lines += 1;

        referenceNum = '';
        payee = '';

        if (_bankAccountTrans.DepositNum)
        {
            visibility = 142;
            this.insertBankReconciliationSummaryTmp();

            while select BankTransType, TransDate, AmountCur, Txt, CustAccount, PaymReference from bankDeposit
                where bankDeposit.AccountId == _bankAccountTrans.AccountId
                    && bankDeposit.DepositNum == _bankAccountTrans.DepositNum
            {
                bankTransTypeName = BankTransType::find(bankDeposit.BankTransType).Name;
                transDate = bankDeposit.TransDate;
                referenceNum = bankDeposit.PaymReference ? bankDeposit.PaymReference : _bankAccountTrans.DepositNum;
                amountCur = bankDeposit.AmountCur;
                transTxt = bankDeposit.Txt;
                payee = CustTable::find(bankDeposit.CustAccount).name();
                visibility = 154;
                this.insertBankReconciliationSummaryTmp();
            }

            visibility = 143;
            this.insertBankReconciliationSummaryTmp();
            payee = '';
            referenceNum = _bankAccountTrans.DepositNum;
        }

        if (_bankAccountTrans.ChequeNum)
        {
            select firstonly bankChequeTable
                where bankChequeTable.AccountID == _bankAccountTrans.AccountId
                    && bankChequeTable.ChequeNum == _bankAccountTrans.ChequeNum
                    && bankChequeTable.Voucher == _bankAccountTrans.Voucher
                    && bankChequeTable.TransDate == _bankAccountTrans.TransDate;

            if (bankChequeTable)
            {
                referenceNum = _bankAccountTrans.ChequeNum;

                switch (bankChequeTable.RecipientType)
                {
                    case BankChequeRecipientType::Vend,
                         BankChequeRecipientType::Ledger,
                         BankChequeRecipientType::Bank:

                        if (bankChequeTable.RecipientCompany)
                        {
                            payee = VendTable::findByCompany(bankChequeTable.RecipientCompany,
                                        bankChequeTable.RecipientAccountNum).name();
                        }
                        else
                        {
                            payee = VendTable::find(bankChequeTable.RecipientAccountNum).name();
                        }
                        break;

                    case BankChequeRecipientType::Cust:

                        if (bankChequeTable.RecipientCompany)
                        {
                            payee = CustTable::findByCompany(bankChequeTable.RecipientCompany, bankChequeTable.RecipientAccountNum).name();
                        }
                        else
                        {
                            payee = CustTable::find(bankChequeTable.RecipientAccountNum).name();
                        }
                        break;

                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }

        if (payee == '' && referenceNum == '')
        {
            payee = _bankAccountTrans.findRelatedCustVendAccountInfo().AccountName;
            referenceNum = _bankAccountTrans.PaymReference;
        }

        transDate = _bankAccountTrans.TransDate;
        transTxt = _bankAccountTrans.Txt;
        bankTransTypeName = BankTransType::find(_bankAccountTrans.BankTransType).Name;
        amountCur = _bankAccountTrans.AmountCur + _bankAccountTrans.AmountCorrect;
        visibility = 151;
        this.insertBankReconciliationSummaryTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateUnclearedTransactionsTotals</Name>
				<Source><![CDATA[
    private void generateUnclearedTransactionsTotals(AmountCur _totalUnclearedAmount, Counter _totalUnclearedItems)
    {
        const int UnclearedTransactionsTotal = 141;
        const int UnclearedTransactionsGrandTotal = 153;

        visibility = UnclearedTransactionsTotal;
        this.insertBankReconciliationSummaryTmp();

        clearedAmountCur = _totalUnclearedAmount;
        lines = _totalUnclearedItems;

        visibility = UnclearedTransactionsGrandTotal;
        this.insertBankReconciliationSummaryTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController controller = new BankReconciliationSummaryController();
        controller.parmReportName(ssrsReportStr(BankReconciliationSummary, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>