<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationISVTaxPostUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using System.IO.Compression;
using Newtonsoft.Json;
using TaxServiceAPI = Microsoft.Dynamics.TaxCalculation.ApiContracts;

/// <summary>
/// The <c>TaxIntegrationISVTaxPostUtil</c> class provides utility method for sending posted tax to ISV.
/// </summary>
internal final class TaxIntegrationISVTaxPostUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>shouldPersistTaxCalculationInput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the tax calculation input should persit.
    /// </summary>
    /// <param name = "_taxIntegrationDocument">The <c>TaxIntegrationDocumentObject</c> instace.</param>
    /// <returns>true if the tax calculation input should persit; otherwise, false.</returns>
    internal static boolean shouldPersistTaxCalculationInput(TaxIntegrationDocumentObject _taxIntegrationDocument)
    {
        if (_taxIntegrationDocument.getSolutionProviderType() != TaxSolutionProviderType::ISV
            || !TaxIntegrationISVApiType::exist(TaxServiceISVApiTypes::PostTax)
            || !_taxIntegrationDocument.countAllTaxLines())
        {
            return false;
        }

        boolean ret;

        switch (_taxIntegrationDocument.getLocalTableId())
        {
            case tableNum(SalesParmTable):
                SalesParmTable salesParmTable = TaxIntegrationISVTaxPostUtil::getLocalRecord(_taxIntegrationDocument);
                SalesParmUpdate salesParmUpdate = salesParmTable.salesParmUpdate();
                ret = (!salesParmUpdate.Proforma && salesParmUpdate.DocumentStatus == DocumentStatus::Invoice);
                break;

            case tableNum(VendInvoiceInfoTable):
                VendInvoiceInfoTable vendInvoiceInfoTable = TaxIntegrationISVTaxPostUtil::getLocalRecord(_taxIntegrationDocument);
                PurchParmUpdate purchParmUpdate = vendInvoiceInfoTable.purchParmUpdate();
                ret = (!purchParmUpdate.Proforma && (purchParmUpdate.DocumentStatus == DocumentStatus::Invoice || purchParmUpdate.DocumentStatus == DocumentStatus::ApproveJournal));
                break;

            case tableNum(CustInvoiceTable):
            case tableNum(LedgerJournalTable):
            case tableNum(InventTransferJour):
            case tableNum(ProjAdvancedJournal):
            case tableNum(ProjProposalJour):
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeTaxCalculationInput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the tax calculation input to a container.
    /// </summary>
    /// <param name = "_taxCalculationInput">The <c>TaxCalculationInput</c> instance to be serialized.</param>
    /// <returns>The container contains the serialized tax calculation input.</returns>
    internal static container serializeTaxCalculationInput(
        TaxServiceAPI.TaxCalculationInput _taxCalculationInput)
    {
        MemoryStream ms = new MemoryStream();

        using (GZipStream zipStream = new GZipStream(ms, CompressionLevel::Fastest, true))
        using (StreamWriter streamWriter = new StreamWriter(zipStream))
        using (JsonTextWriter jtw = new JsonTextWriter(streamWriter))
        {
            Newtonsoft.Json.JsonSerializer serializer = new Newtonsoft.Json.JsonSerializer();
            serializer.Serialize(jtw, _taxCalculationInput);
        }

        return Binary::constructFromMemoryStream(ms).getContainer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserializeTaxCalculationInput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the tax calculation input from a container.
    /// </summary>
    /// <param name = "_packedTaxCalculationInput">The container contains the serialized tax calculation input..</param>
    /// <returns>The <c>TaxIntegrationDocumentObject</c> instace.</returns>
    internal static TaxServiceAPI.TaxCalculationInput deserializeTaxCalculationInput(
        container _packedTaxCalculationInput)
    {
        if (!_packedTaxCalculationInput)
        {
            return null;
        }

        MemoryStream ms = Binary::constructFromContainer(_packedTaxCalculationInput).getMemoryStream();

        using (GZipStream zipStream = new GZipStream(ms, CompressionMode::Decompress))
        using (StreamReader streamReader = new StreamReader(zipStream))
        using (JsonTextReader jtr = new JsonTextReader(streamReader))
        {
            TaxServiceAPI.TaxCalculationInput taxCalculationInput = new TaxServiceAPI.TaxCalculationInput();
            str json = streamReader.ReadToEnd();
            return Newtonsoft.Json.JsonConvert::DeserializeObject(json, taxCalculationInput.GetType());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalRecord</Name>
				<Source><![CDATA[
    private static Common getLocalRecord(TaxIntegrationDocumentObject _taxIntegrationDocument)
    {
        if (_taxIntegrationDocument.getLocalRecord())
        {
            return _taxIntegrationDocument.getLocalRecord();
        }

        DictTable dictTable = new DictTable(_taxIntegrationDocument.getLocalTableId());
        Common localRecord = dictTable.makeRecord();

        select firstonly localRecord
            where localRecord.RecId == _taxIntegrationDocument.getLocalRecId();

        return localRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first journal line <c>LedgerJournalTrans</c> for all unique tax documents for the journal and voucher.
    /// </summary>
    /// <param name = "_journalNum">The journal number of general journal.</param>
    /// <param name = "_voucher">The voucher number.</param>
    /// <returns>The record of <c>LedgerJournalTrans</c>.</returns>
    public static LedgerJournalTrans getMainLedgerJournalTrans(JournalId _journalNum, Voucher _voucher)
    {
        LedgerJournalTrans ledgerJournalTransMain;

        select firstonly ledgerJournalTransMain
            where ledgerJournalTransMain.JournalNum == _journalNum
                && ledgerJournalTransMain.Voucher == _voucher
                && (ledgerJournalTransMain.AccountType == LedgerJournalACType::Cust
                    || ledgerJournalTransMain.AccountType == LedgerJournalACType::Vend
                    || ledgerJournalTransMain.OffsetAccountType == LedgerJournalACType::Cust
                    || ledgerJournalTransMain.OffsetAccountType == LedgerJournalACType::Vend);

        if (!ledgerJournalTransMain.RecId)
        {
            // If no Cust/Vend line, get the first line of the voucher.
            ledgerJournalTransMain = LedgerJournalTrans::find(_journalNum, _voucher, false);
        }

        return ledgerJournalTransMain;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>