<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HierarchyTemplateCopying_CRM</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    HierarchyCreateAttribute(HierarchyType::Campaign),
    HierarchyCreateAttribute(HierarchyType::Lead),
    HierarchyCreateAttribute(HierarchyType::Opportunity)
]
class HierarchyTemplateCopying_CRM extends HierarchyTemplateCopying
{
    boolean isHierarchyTypeCRM;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyToDestination</Name>
				<Source><![CDATA[
    public HierarchyTreeTable copyToDestination(HierarchyTreeTable _srcTable , HierarchyTreeTable _destTable)
    {
        _destTable.MSPID = _srcTable.MSPID;
        return _destTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performtasks</Name>
				<Source><![CDATA[
    void performtasks(Hierarchy _destHierarchy)
    {
        if (isHierarchyTypeCRM)
        {
            HierarchyTemplateCopying_CRM::copyResponsibilities(srcHierarchy, destHierarchy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyResponsibilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the details from source responsibility table to destination responsibility table.
    /// </summary>
    /// <param name = "_srcHierarchy">Source hierarchy record</param>
    /// <param name = "_destHierarchy">Destination hierarchy record</param>
    public static void copyResponsibilities(Hierarchy _srcHierarchy, Hierarchy _destHierarchy)
    {
        smmResponsibilitiesTable    srcResponsibilitiesTable, dstResponsibilitiesTable;

        while select srcResponsibilitiesTable
        where srcResponsibilitiesTable.HierarchyId == _srcHierarchy.HierarchyId
        {
            dstResponsibilitiesTable.clear();
            dstResponsibilitiesTable.data(srcResponsibilitiesTable);
            dstResponsibilitiesTable.HierarchyId = _destHierarchy.HierarchyId;
            dstResponsibilitiesTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hierarchyTemplateCopyResponsibilities</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(HierarchyTemplateCopying), delegateStr(HierarchyTemplateCopying, copyResponsibilitiesToDestination))]
    public static void hierarchyTemplateCopyResponsibilities(Hierarchy _srcHierarchy, Hierarchy _destHierarchy)
    {
        HierarchyTemplateCopying_CRM::copyResponsibilities(_srcHierarchy, _destHierarchy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyActivity</Name>
				<Source><![CDATA[
    RecId copyActivity()
    {
        this.initFromTemplate();

        destActivities.insert();

        this.copyAdditionalFields();

        return destActivities.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an activity from the template.
    /// </summary>
    protected void initFromTemplate()
    {
        this.initializeSrcAndDestActivities();

        if (srcHierarchy.IsTemplate != destHierarchy.IsTemplate || !destHierarchy.IsTemplate)
        {
            // If source activity is a template and destination is not a template
            if (!destHierarchy.IsTemplate)
            {
                if (Hierarchy::isHierarchyTypeCRM(destHierarchy.HierarchyType))
                {
                    Common common = HierarchyLinkTable::findAssociation(destHierarchyTreeTable.HierarchyId, Hierarchy::hierarchyType2tableId(destHierarchy.HierarchyType));
                    destActivities.initFromCommonUsingTemplate(common,srcActivities);
                }
            }
            else
            {
                destActivities.initTemplateDates();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAdditionalFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies additional fields for the activity.
    /// </summary>
    protected void copyAdditionalFields()
    {
        // Copy attendees if it is a organizer appointment
        this.copyAttendees();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static HierarchyTemplateCopying_CRM construct()
    {
        return new HierarchyTemplateCopying_CRM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromHierarchyCopyingDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>HierarchyTemplateCopying</c> object from a <c>HierarchyTemplateCopyingDialog</c> object.
    /// </summary>
    /// <param name="_hierarchyTemplateCopyingDialog">
    /// The <c>HierarchyTemplateCopyingDialog</c> object.
    /// </param>
    /// <returns>
    /// The <c>HierarchyTemplateCopying</c> object.
    /// </returns>
    public static HierarchyTemplateCopying_CRM constructFromHierarchyCopyingDialog(HierarchyTemplateCopyingDialog _hierarchyTemplateCopyingDialog)
    {
        Hierarchy                   hierarchy;
        HierarchyTreeTable          selectedHierarchyTreeTable;
        HierarchyTemplateCopying_CRM    hierarchyTemplateCopying;

        hierarchy                   = Hierarchy::find(_hierarchyTemplateCopyingDialog.parmHierarchyId());
        selectedHierarchyTreeTable  = HierarchyTreeTable::findElementNumber(_hierarchyTemplateCopyingDialog.parmHierarchyId(),
                                                                        _hierarchyTemplateCopyingDialog.parmSelectedElementNumber());
        hierarchyTemplateCopying = HierarchyTemplateCopying_CRM::construct();
        hierarchyTemplateCopying.init(_hierarchyTemplateCopyingDialog.parmHierarchyName(),
                                  buf2Con(hierarchy),
                                  _hierarchyTemplateCopyingDialog.parmIsImport(),
                                  true,
                                  buf2Con(selectedHierarchyTreeTable),
                                  _hierarchyTemplateCopyingDialog.parmDescription(),
                                  _hierarchyTemplateCopyingDialog.parmIsActive(),
                                  _hierarchyTemplateCopyingDialog.parmShowOnlyTemplates(),
                                  _hierarchyTemplateCopyingDialog.parmCaller());
        return hierarchyTemplateCopying;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeShowInfoLog</Name>
				<Source><![CDATA[
    void changeShowInfoLog()
    {
        isHierarchyTypeCRM = Hierarchy::isHierarchyTypeCRM(this.parmHierarchyType());
        if (!isHierarchyTypeCRM)
        {
            this.parmShowInfolog(!isImport);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>