<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReservationHierarchyLevelStrategyTypesProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSReservationHierarchyLevelStrategyTypesProvider</c> class provides the reservation strategy types for a movement.
/// </summary>
public class WHSReservationHierarchyLevelStrategyTypesProvider
{
    protected InventMovement    movement;
    protected InventDim         inventDimReservationCriteria;
    private boolean             hasCachedIsInventDimForWHSEnabledWarehouse;
    private boolean             isInventDimForWHSEnabledWarehouse;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSReservationHierarchyLevelStrategyTypesProvider construct()
    {
        return new WHSReservationHierarchyLevelStrategyTypesProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the class based on the parameters.
    /// </summary>
    /// <param name="_movement">
    /// An <c>InventMovement</c> instance.
    /// </param>
    /// <param name="_inventDimReservationCriteria">
    /// The dimensions that are used for reservation.
    /// </param>    
    /// <returns>
    /// A new <c>WHSReservationHierarchyLevelStrategyTypesProvider</c> instance.
    /// </returns>
    public static WHSReservationHierarchyLevelStrategyTypesProvider newFromParameters(
        InventMovement  _movement,
        InventDim       _inventDimReservationCriteria)
    {
        if (!_movement)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        WHSReservationHierarchyLevelStrategyTypesProvider provider = WHSReservationHierarchyLevelStrategyTypesProvider::construct();

        provider.movement = _movement;
        provider.inventDimReservationCriteria = _inventDimReservationCriteria;

        return provider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineStrategyTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the strategy types.
    /// </summary>
    /// <param name="_isPhysicalReservation">
    /// A boolean indicating if the reservation should only be against physical inventory.
    /// </param>
    /// <returns>
    /// A container with <c>WHSReservationHierarchyLevelStrategyType</c> enumeration values.
    /// </returns>
    public container determineStrategyTypes(boolean _isPhysicalReservation)
    {
        container strategyTypes;

        if (!movement.isItemWHSEnabled())
        {
            return [this.strategyTypeForNonWHSItem()];
        }

        if (_isPhysicalReservation)
        {
            strategyTypes = this.determinePhysicalStrategyTypes();
        }
        else
        {
            strategyTypes = this.determineOrderedResStrategyTypes();
        }

        return strategyTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strategyTypeForNonWHSItem</Name>
				<Source><![CDATA[
    private WHSReservationHierarchyLevelStrategyType strategyTypeForNonWHSItem()
    {
        return WHSReservationHierarchyLevelStrategyType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allStrategiesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a List with the reservation strategies.
    /// </summary>
    /// <returns>
    /// A list containing all the <c>WHSReservationHierarchyLevelStrategy</c> strategies.
    /// </returns>
    public List allStrategiesList()
    {
        List reservationStrategyList = new List(Types::Class);

        this.addStrategiesToList(reservationStrategyList);

        return reservationStrategyList;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalReservationStrategiesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a List with the physical reservation strategies.
    /// </summary>
    /// <returns>
    /// A list containing all the physical <c>WHSReservationHierarchyLevelStrategy</c> strategies.
    /// </returns>
    public List physicalReservationStrategiesList()
    {
        List reservationStrategyList = new List(Types::Class);

        this.addPhysicalReservationStrategiesToList(reservationStrategyList);

        return reservationStrategyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedReservationStrategiesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a List with the reservation strategies used for Ordered reservations.
    /// </summary>
    /// <returns>
    /// A List with the <c>WHSReservationHierarchyLevelStrategy</c> strategies used for Ordered reservations.
    /// </returns>
    public List orderedReservationStrategiesList()
    {
        List reservationStrategyList = new List(Types::Class);

        this.addOrderedReservationStrategiesToList(reservationStrategyList);

        return reservationStrategyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStrategiesToList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the reservation strategies to the list.
    /// </summary>
    /// <param name="_strategyList">
    /// A list to which the strategies will be added to.
    /// </param>
    private void addStrategiesToList(List _strategyList)
    {
        this.addPhysicalReservationStrategiesToList(_strategyList);
        this.addOrderedReservationStrategiesToList(_strategyList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPhysicalReservationStrategiesToList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the physical reservation strategies to the list.
    /// </summary>
    /// <param name="_strategyList">
    /// A list to which the strategies will be added to.
    /// </param>
    protected void addPhysicalReservationStrategiesToList(List _strategyList)
    {
        container strategyTypes = this.determinePhysicalStrategyTypes();
        
        this.addStrategiesToListFromTypes(_strategyList, strategyTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrderedReservationStrategiesToList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the Ordered reservation strategies to the list.
    /// </summary>
    /// <param name="_strategyList">
    /// A list to which the strategies will be added to.
    /// </param>
    protected void addOrderedReservationStrategiesToList(List _strategyList)
    {
        container strategyTypes = this.determineOrderedResStrategyTypes();
        
        this.addStrategiesToListFromTypes(_strategyList, strategyTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStrategiesToListFromTypes</Name>
				<Source><![CDATA[
    private void addStrategiesToListFromTypes(
        List            _strategyList, 
        container       _strategyTypes)
    {
        int conLenght = conLen(_strategyTypes);

        for (Counter i = 1; i <= conLenght; i++)
        {
            this.addStrategyTypeToList(_strategyList, conPeek(_strategyTypes, i));
        }    
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStrategyTypeToList</Name>
				<Source><![CDATA[
    private void addStrategyTypeToList(
        List                                        _strategyList,
        WHSReservationHierarchyLevelStrategyType    _strategyType)
    {
        _strategyList.addEnd(WHSReservationHierarchyLevelStrategy::newFromStrategyType(_strategyType, movement.inventTable(), inventDimReservationCriteria, movement.inventDimGroupSetup()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineOrderedResStrategyTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the strategy types used to do Ordered reservations.
    /// </summary>
    /// <returns>
    /// A container of <c>WHSReservationHierarchyLevelStrategyType</c> enumeration values.
    /// </returns>
    public container determineOrderedResStrategyTypes()
    {
        container strategyTypes;

        if (movement.whsMustConsiderBatchProcessing())
        {
            return this.determineOrderedResStrategyTypesForBatchProcessing();
        }
        else if (WHSReservationLevelStrategyAllNoBlnkReserveOrderedFlight::instance().isEnabled()
              && !this.isInventDimForWHSEnabledWarehouse()
              && movement.isItemWHSEnabled())
        {
            return [WHSReservationHierarchyLevelStrategyType::AllNotAllowedBlankReserveOrdered, WHSReservationHierarchyLevelStrategyType::None];
        }
        
        return [WHSReservationHierarchyLevelStrategyType::None];
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineOrderedResStrategyTypesForBatchProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the strategy types used to do Ordered reservations for items that must consider batch number processing.
    /// </summary>
    /// <returns>
    /// A container of <c>WHSReservationHierarchyLevelStrategyType</c> enumeration values.
    /// </returns>
    protected container determineOrderedResStrategyTypesForBatchProcessing()
    {
        if (WHSReservationHierarchyInventDimUtil::isBatchAboveOwner(movement.inventTable()))
        {
            return [WHSReservationHierarchyLevelStrategyType::BatchOwnerLevel, WHSReservationHierarchyLevelStrategyType::None];
        }
        
        return [WHSReservationHierarchyLevelStrategyType::BatchLevel, WHSReservationHierarchyLevelStrategyType::None];        
    }

]]></Source>
			</Method>
			<Method>
				<Name>useStrategyEnablingWorkCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a strategy that enables work creating should be used.
    /// </summary>
    /// <returns>true if a strategy that enables work creating should be used; otherwise, false.</returns>
    protected boolean useStrategyEnablingWorkCreation()
    {
        return movement.canHaveReservedWork()
            && (!inventDimReservationCriteria.InventLocationId || this.isInventDimForWHSEnabledWarehouse());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimForWHSEnabledWarehouse</Name>
				<Source><![CDATA[
    private boolean isInventDimForWHSEnabledWarehouse()
    {
        if (!hasCachedIsInventDimForWHSEnabledWarehouse)
        {
            hasCachedIsInventDimForWHSEnabledWarehouse = true;
            isInventDimForWHSEnabledWarehouse = InventLocation::find(inventDimReservationCriteria.InventLocationId).whsEnabled;
        }

        return isInventDimForWHSEnabledWarehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePhysicalStrategyTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the strategy types used to do physical reservations.
    /// </summary>
    /// <returns>
    /// A container with <c>WHSReservationHierarchyLevelStrategyType</c> enumeration values.
    /// </returns>
    public container determinePhysicalStrategyTypes()
    {
        container strategyTypes;

        if (!movement.isItemWHSEnabled())
        {
            return [this.strategyTypeForNonWHSItem()];
        }

        if (this.useStrategyEnablingWorkCreation())
        {
            strategyTypes = [WHSReservationHierarchyLevelStrategyType::AboveLocation];
        }
        else
        {
            // For non-WHS warehouses we expect that LP is not being populated, so if it's the case and it is at the bottom in the hierarchy, we do not need to evaluate the All strategy
            if (!this.isInventDimForWHSEnabledWarehouse()
                && this.isInventDimLicensePlateNotSetAndLPLowestInHierarchy())
            {
                strategyTypes = [WHSReservationHierarchyLevelStrategyType::AllNotAllowedBlank];
            }
            //we are on a WHS warehouse and a location is specified so we can optimize to avoid looking for All if the location is not LP controlled.
            else if (this.isInventDimForWHSEnabledWarehouse() 
                && inventDimReservationCriteria.wMSLocationId 
                && !inventDimReservationCriteria.wmsLocation().whsLocationIsLPControlled()
                && this.isInventDimLicensePlateNotSetAndLPLowestInHierarchy())
            {
                strategyTypes = [WHSReservationHierarchyLevelStrategyType::AllNotAllowedBlank];
            }
            else
            {
                strategyTypes = [WHSReservationHierarchyLevelStrategyType::All, WHSReservationHierarchyLevelStrategyType::AllNotAllowedBlank];
            }
        }

        return strategyTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimLicensePlateNotSetAndLPLowestInHierarchy</Name>
				<Source><![CDATA[
    private boolean isInventDimLicensePlateNotSetAndLPLowestInHierarchy()
    {
        return (!inventDimReservationCriteria.LicensePlateId
            && fieldNum(InventDim, LicensePlateId) == WhsReservationHierarchyProvider::construct().getDimFieldIdForBottomHierarchyLevel(movement.inventTable()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPrimaryStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the primary <c>WHSReservationHierarchyLevelStrategy</c> instance.
    /// </summary>
    /// <param name="_isPhysicalReservation">
    /// A boolean indicating if the reservation should only be against physical inventory.
    /// </param>
    /// <returns>
    /// The primary <c>WHSReservationHierarchyLevelStrategy</c> instance.
    /// </returns>
    public WHSReservationHierarchyLevelStrategy newPrimaryStrategy(boolean _isPhysicalReservation)
    {
        container strategyTypes = this.determineStrategyTypes(_isPhysicalReservation);

        WHSReservationHierarchyLevelStrategyType whsReservationHierarchyLevelStrategyType = conPeek(strategyTypes, 1);
        
        return WHSReservationHierarchyLevelStrategy::newFromStrategyType(whsReservationHierarchyLevelStrategyType, movement.inventTable(), inventDimReservationCriteria, movement.inventDimGroupSetup());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>