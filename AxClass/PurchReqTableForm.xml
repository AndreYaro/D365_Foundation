<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchReqTableForm</c> class controls the behavior of the <c>PurchReqTable</c> form.
/// mary>
class PurchReqTableForm implements SysSaveable
{
    PurchReqTable               purchReqTable;
    PurchReqId                  newPurchReqId;
    PurchReqLine                newlyCreatedPurchReqLine;
    PurchReqShowRequisitions    showRequisitions;
    RecId                       requisitionerRecId;
    HcmWorkerName               requisitionerName;
    PurchReqRequisitionStatus   status;
    NoYes                       statusAll;
    QueryBuildRange             rangeRequisitioner;
    QueryBuildRange             rangeStatus;
    QueryBuildDataSource        joinWorkFlowItemTable;
    FormDataSource              queryPurchReqTable;
    FormDataSource              queryPurchReqLine;
    boolean                     isFormLoading;
    QueryBuildDataSource        purchReqTableFilterDataSource;
    boolean                     isFilterHeaderOriginator;

    PurchReqFormMode            purchReqFormMode;
    container                   packedClasses;
    ProjTable                   projTable;

    PurchReqShowRequisitionsFilter  purchReqShowRequisitionsFilter;
    AccountingDistributionView      distributionView;
    Object                          purchReqTableFormRun;


    #define.CurrentVersion(4)
    #localmacro.CurrentList
        showRequisitions,
        status,
        statusAll,
        requisitionerRecId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    boolean create()
    {
        Args            args = new Args();
        FormRun         purchReqCreateOrder;

        args.name(this.createForm());
        args.caller(this);

        purchReqCreateOrder = classfactory.formRunClass(args);
        purchReqCreateOrder.init();
        purchReqCreateOrder.run();
        purchReqCreateOrder.wait();

        if (purchReqCreateOrder.closedOk())
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForm</Name>
				<Source><![CDATA[
    str createForm()
    {
        return formStr(PurchReqCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributionFormViewClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called upon closing of the <c>AccountingDistribution</c> form.
    /// </summary>
    public void distributionFormViewClosed()
    {
        purchReqTableFormRun.distributionFormClosed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromTableSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class from the source table record.
    /// </summary>
    /// <param name = "_tableSource">The source table record from which to initialize the class variables.</param>
    protected void initializeFromTableSource(Common _tableSource)
    {
        switch (_tableSource.TableId)
        {
            case tableNum(ProjTable):
                projTable = _tableSource;
                break;

            case tableNum(PurchReqTable):
                purchReqTable = _tableSource;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        showRequisitions    = PurchReqShowRequisitions::MyRequisitions;
        requisitionerRecId  = HcmWorker::userId2Worker(curUserId());
        status              = PurchReqRequisitionStatus::Draft;
        statusAll           = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    public void initValues()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId lastValueDataAreaId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueElementName()
    {
        return formStr(PurchReqTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActive</Name>
				<Source><![CDATA[
    public boolean linkActive()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _tableSource, anytype _parmEnum)
    {
        this.initializeFromTableSource(_tableSource);

        purchReqFormMode = _parmEnum;
        isFormLoading    = true;

        xSysLastValue::getLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchReqId</Name>
				<Source><![CDATA[
    public PurchReqId newPurchReqId(PurchReqId _newPurchReqId = newPurchReqId)
    {
        newPurchReqId = _newPurchReqId;

        return newPurchReqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        //Package stores values for two possible form behaviors (show all and normal).
        //Actually we store conatainer of containers, each of which is a standart packed class.

        //Avoid peeking from empty containers
        if (conLen(packedClasses) != 3)
        {
            packedClasses = [#CurrentVersion, [0], [0]];
        }

        //Pack to appropriate container
        switch (purchReqFormMode)
        {
            case PurchReqFormMode::ShowAll :
                packedClasses = [
                                    #CurrentVersion,
                conPeek(packedClasses,2),
                                    [#CurrentVersion, #CurrentList]
                ];
                break;

            default :
                packedClasses = [
                                    #CurrentVersion,
                [#CurrentVersion, #CurrentList],
                                    conPeek(packedClasses,3)
                                ];
                break;
        }

        return packedClasses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project of the purchase requisition transaction.
    /// </summary>
    /// <param name="_projTable">
    ///    The project of the purchase requisition transaction; optional.
    /// </param>
    /// <returns>
    ///    The project of the purchase requisition transaction.
    /// </returns>
    public ProjTable parmProjTable(ProjTable _projTable = projTable)
    {
        projTable = _projTable;

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqTableFormRun</Name>
				<Source><![CDATA[
    public Object parmPurchReqTableFormRun(Object _purchReqTableFormRun = purchReqTableFormRun)
    {
        purchReqTableFormRun = _purchReqTableFormRun;

        return purchReqTableFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>project</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the purchase requisition is for a project.
    /// </summary>
    /// <returns>
    /// <c>true</c> if the purchase requisition is for a project; otherwise, <c>false</c>.
    /// </returns>
    /// <remarks>
    /// This is overridden by the <c>PurchReqTableForm_Project</c> class.
    /// </remarks>
    public boolean project()
    {
        boolean ret = false;

        if (projTable)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqLine_Create</Name>
				<Source><![CDATA[
    public void purchReqLine_Create(PurchReqLine _purchReqLine)
    {
        this.setNewlyCreatedPurchLine(_purchReqLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqTable</Name>
				<Source><![CDATA[
    public PurchReqTable purchReqTable(PurchReqTable _purchReqTable = purchReqTable)
    {
        purchReqTable = _purchReqTable;

        return purchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryPurchTable</Name>
				<Source><![CDATA[
    public Query queryPurchTable(FormDataSource _queryPurchReqTable, FormDataSource _queryPurchReqLine, boolean _isFilterHeaderOriginator)
    {
        QueryBuildDataSource    qbdsTable = _queryPurchReqTable.query().dataSourceTable(tableNum(PurchReqTable));
        QueryBuildDataSource    qbdsLine  = _queryPurchReqLine.query().dataSourceTable(tableNum(PurchReqLine));

        rangeRequisitioner      = qbdsLine.addRange(fieldNum(PurchReqLine, Requisitioner));
        rangeRequisitioner.status(RangeStatus::Locked);
        rangeRequisitioner.enabled(false);

        rangeStatus             = qbdsTable.addRange(fieldNum(PurchReqTable, RequisitionStatus));
        rangeStatus.status(RangeStatus::Locked);

        this.setStatus(status, statusAll);

        queryPurchReqTable          = _queryPurchReqTable;
        queryPurchReqLine           = _queryPurchReqLine;
        isFilterHeaderOriginator    = _isFilterHeaderOriginator;

        purchReqShowRequisitionsFilter = PurchReqShowRequisitionsFilter::newPurchReqTable(qbdsTable, qbdsLine, fieldNum(PurchReqLine,Requisitioner), isFilterHeaderOriginator);
        purchReqShowRequisitionsFilter.applyFilter(showRequisitions);

        purchReqTableFilterDataSource = qbdsTable.addDataSource(tableNum(PurchReqLine));
        purchReqTableFilterDataSource.enabled(false);
        purchReqTableFilterDataSource.addLink(fieldNum(PurchReqTable, RecId), fieldNum(PurchReqLine, PurchReqTable));
        purchReqTableFilterDataSource.joinMode(JoinMode::ExistsJoin);

        return _queryPurchReqTable.query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>requisitionerName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the requisitioner that corresponds to the <c>PurchReqLine</c> record that is
    ///    being processed.
    /// </summary>
    /// <returns>
    ///    The name of the requisitioner.
    /// </returns>

    HcmWorkerName requisitionerName()
    {
        if (requisitionerName == "" && requisitionerRecId)
        {
            requisitionerName = HcmWorker::find(requisitionerRecId).name();
        }

        return requisitionerName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requisitionerRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the record ID of the requisitioner.
    /// </summary>
    /// <param name="_requisitionerRecId">
    /// The record ID of the requisitioner.
    /// </param>

    public void requisitionerRecId(RecId _requisitionerRecId = requisitionerRecId)
    {
        QueryBuildRange         qbr;

        if (_requisitionerRecId != requisitionerRecId)
        {
            rangeRequisitioner.enabled(true);

            requisitionerRecId = _requisitionerRecId;
            requisitionerName  = "";

            if (showRequisitions != PurchReqShowRequisitions::MyRequisitions && requisitionerRecId != 0 && isFilterHeaderOriginator)
            {
                purchReqTableFilterDataSource.enabled(true);
                qbr = SysQuery::findOrCreateRange(purchReqTableFilterDataSource, fieldNum(PurchReqLine, Requisitioner));
                qbr.value(queryValue(requisitionerRecId));
                qbr.status(RangeStatus::Locked);
            }
            else
            {
                purchReqTableFilterDataSource.enabled(false);
            }

            if (rangeRequisitioner)
            {
                rangeRequisitioner.value(queryValue(_requisitionerRecId));

                if (queryPurchReqTable)
                {
                    queryPurchReqTable.executeQuery();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPurchReqLine</Name>
				<Source><![CDATA[
    public void resetPurchReqLine(PurchReqLine _purchReqLine)
    {
        _purchReqLine.data(newlyCreatedPurchReqLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultParameters</Name>
				<Source><![CDATA[
    public void setDefaultParameters()
    {
        this.initParmDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormLoading</Name>
				<Source><![CDATA[
    public void setFormLoading()
    {
        isFormLoading = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewlyCreatedPurchLine</Name>
				<Source><![CDATA[
    protected void setNewlyCreatedPurchLine(PurchReqLine _newlyCreatedPurchReqLine)
    {
        newlyCreatedPurchReqLine.data(_newlyCreatedPurchReqLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    private void setStatus(PurchReqRequisitionStatus _status, NoYes _statusAll)
    {
        if (rangeStatus)
        {
            if (_statusAll)
            {
                rangeStatus.value('');
            }
            else
            {
                rangeStatus.value(queryValue(_status));
            }
            if (queryPurchReqTable)
            {
                queryPurchReqTable.executeQuery();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRequisitions</Name>
				<Source><![CDATA[
    public PurchReqShowRequisitions showRequisitions(PurchReqShowRequisitions _showRequisitions = showRequisitions)
    {
        if (rangeRequisitioner && (showRequisitions != _showRequisitions || isFormLoading))
        {
            isFormLoading = false;

            if (_showRequisitions == PurchReqShowRequisitions::MyRequisitions)
            {
                requisitionerRecId = HcmWorker::userId2Worker(curUserId());
                requisitionerName  = "";
                purchReqTableFilterDataSource.enabled(false);
                rangeRequisitioner.enabled(true);
                rangeRequisitioner.value(queryValue(requisitionerRecId));
            }
            else
            {
                requisitionerRecId = 0;
                rangeRequisitioner.enabled(false);
                requisitionerName  = "";
                rangeStatus.value('');
            }

            if (requisitionerRecId != 0)
            {
                rangeRequisitioner.value(queryValue(requisitionerRecId));
            }

            purchReqShowRequisitionsFilter.applyFilter(_showRequisitions);

            if (queryPurchReqTable)
            {
                queryPurchReqTable.executeQuery();
            }
        }

        showRequisitions = _showRequisitions;

        return showRequisitions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    public PurchReqRequisitionStatus status(PurchReqRequisitionStatus _status = status)
    {
        if (status != _status)
        {
            this.setStatus(_status, statusAll);
        }

        status = _status;

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAll</Name>
				<Source><![CDATA[
    public NoYes statusAll(NoYes _statusAll = statusAll)
    {
        if (statusAll != _statusAll)
        {
            this.setStatus(status, _statusAll);
        }

        statusAll = _statusAll;

        return statusAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribeToAccDistViewEvents</Name>
				<Source><![CDATA[
    public void subscribeToAccDistViewEvents(AccountingDistributionView  _accountingDistributionView)
    {
        distributionView = _accountingDistributionView;

        distributionView.closedViewEventHandler += eventhandler(this.distributionFormViewClosed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClasses)
    {
        //Package stores values for two possible form behaviors (show all and normal).
        //Actually we store conatainer of containers, each of which is a standart packed form.
        container       packedClass;
        Integer         globalVersion;
        Integer         localVersion;
        boolean         ret     = false;

        //We need to store packed class information for other callers
        packedClasses = _packedClasses;

        globalVersion = conPeek(packedClasses, 1);

        if (globalVersion == #CurrentVersion)
        {
            //Peek appropriate package
            switch (purchReqFormMode)
            {
                case PurchReqFormMode::ShowAll :
                    packedClass = conPeek(packedClasses, 3);
                    break;

                default :
                    packedClass = conPeek(packedClasses, 2);
                    break;
            }

            localVersion = conPeek(packedClass,1);

            //Unpack
            if (localVersion == #CurrentVersion)
            {
                [localVersion, #CurrentList]  = packedClass;
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReqTableForm construct(
        Common  _tableSource,
        anytype _parmEnum = PurchReqFormMode::Normal,
        str     _module   = '')
    {
        PurchReqTableForm tableForm;

        switch (_module)
        {
            default :
                tableForm = new PurchReqTableForm(_tableSource, _parmEnum);
        }

        return tableForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectBudgetControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>EnableBudgetCheckOnLineSave</c> field of the <c>ProjParameters</c> table
    /// project budget check should be performed when a purchase requisition line is saved.
    /// </summary>
    /// <returns>
    /// true if project budget check must be performed; otherwise, false.
    /// </returns>
    public static boolean isProjectBudgetControlEnabled()
    {
        boolean isProjectBudgetControlEnabled;

        isProjectBudgetControlEnabled = (ProjParameters::find().EnableBudgetCheckOnLineSave == NoYes::Yes ? true : false);

        return isProjectBudgetControlEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchReqLineBudgetControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to perform a budget check when a purchase requisition line is saved by checking
    /// the <c>DoPurchaseRequisitionBudgetCheckOnEntry</c> field of the <c>BudgetControlConfiguration</c>
    /// table.
    /// </summary>
    /// <returns>
    /// true if budget check must be performed; otherwise, false.
    /// </returns>
    public static boolean isPurchReqLineBudgetControlEnabled()
    {
        return BudgetControlConfiguration::doBudgetCheckOnEntryForSourceIntegrator(Ledger::current(), BudgetControlSourceIntegrator::PurchaseRequisition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransDateVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transaction date field should be visible on forms.
    /// </summary>
    /// <param name="_dataArea">
    /// The legal entity to check the policy for
    /// </param>
    /// <returns>
    ///    false if the requirement date is to be treated as transaction date or advanced ledger budget
    ///    configuration key is disabled; otherwise, true.
    /// </returns>

    static boolean isTransDateVisible(DataAreaId _dataArea = curext())
    {
        int64      orgArray[];

        orgArray[1] = CompanyInfo::findDataArea(_dataArea).RecId;

        if (PurchReqControlRule::findPurchReqControlRuleParameters(orgArray).IsReqDateTransDate || !isConfigurationkeyEnabled(configurationKeyNum(LedgerAdv2BudgetCtrl)))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransDateVisibleForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction date field should be visible on forms for the line.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The requisition line to check.
    /// </param>
    /// <returns>
    /// false if the requirement date is to be treated as accounting date or advanced ledger budget
    /// configuration key is disabled; otherwise, true.
    /// </returns>
    public static boolean isTransDateVisibleForLine(PurchReqLine _purchReqLine)
    {
        DataAreaId dataArea;

        if (_purchReqLine.BuyingLegalEntity)
        {
            dataArea = _purchReqLine.buyingLegalEntity2DataArea();
        }
        else
        {
            dataArea = curext();
        }

        return PurchReqTableForm::isTransDateVisible(dataArea);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowVisibleForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the workflow drop dialog menu and icon should be visible for the line.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The requisition line to check.
    /// </param>
    /// <returns>
    /// true, if there is a pending work item for current user or workflow history available for current line; otherwise, true.
    /// </returns>
    public static boolean isWorkflowVisibleForLine(PurchReqLine _purchReqLine)
    {
        boolean ret;

        if (_purchReqLine.canSubmit())
        {
            // if we can submit the purchase requisition we should not see the lines workflow drop dialog menu button and icon
            ret = false;
        }
        else
        {
            //If there is a pending work item for current user or workflow history available, we should see the drop dialog menu button and icon
            if (Workflow::findWorkItemsForCurrentUser(_purchReqLine).elements()
            ||  Workflow::findTrackingStatusForDocument(_purchReqLine))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowVisibleForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the header workflow drop dialog menu should be visible for the purchase requisition.
    /// </summary>
    /// <param name="_purchReqTable">
    /// The requisition to check.
    /// </param>
    /// <returns>
    /// true, if the user can submit the purchase requisition document or if there is a pending work item for current user or workflow history available
    /// if there is a pending work item for current user or workflow history available; otherwise, true.
    /// </returns>
    public static boolean isWorkflowVisibleForHeader(PurchReqTable _purchReqTable)
    {
        boolean ret;

        if (_purchReqTable.canSubmit())
        {
            //If we are able to submit, show drop dialog menu button
            ret = true;
        }
        else
        {
            if (Workflow::findWorkItemsForCurrentUser(_purchReqTable).elements()
            ||  Workflow::findTrackingStatusForDocument(_purchReqTable))
            {
                //If there is a pending work item for current user or workflow history available, show the drop dialog menu button
                ret = true;
            }
            else
            {
                //Hide drop dialog menu button
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetReservationLineIsEnabledForReq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>PurchReqTable</c> table record parameter is in a state that would allow the budget reservation line reference
    /// to be enabled for a <c>PurchReqLine</c> table record.
    /// </summary>
    /// <param name="_purchReqTable">
    /// The <c>PurchReqTable</c> table record to validate.
    /// </param>
    /// <returns>
    /// true if the field can potentially be edited; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The final determination for whether the reservation line field is updateable also depends on where you are trying to update the line from, the 
    /// <c>BudgetReservationLineSelector_PSN</c> form or <c>PurchReqTable</c> form, and depending upon the form, whether there is a GBR already associated to a requisition line.
    /// </remarks>
    public static final boolean budgetReservationLineIsEnabledForReq(PurchReqTable _purchReqTable)
    {
        return (_purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::Draft || _purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::InReview)
            && _purchReqTable.RequisitionPurpose != RequisitionPurpose::Replenishment
            && PublicSectorUtils::isBudgetReservationEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBudgetReservationLineBeEdited_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not the budget reservation line field for a purchase requisition can be edited by the
    /// <c>BudgetReservationLineSelector_PSN</c> form.
    /// </summary>
    /// <param name="_dataSource">
    /// The data source representing the purchase requisition line.
    /// </param>
    /// <returns>
    /// true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean canBudgetReservationLineBeEdited_PSN(FormDataSource _dataSource)
    {
        boolean canLineRefBeEdited = false;

        if (_dataSource.numberOfRowsLoaded() > 0)
        {
            PurchReqLine purchReqLine = _dataSource.cursor();
            canLineRefBeEdited = PurchReqTableForm::budgetReservationLineIsEnabledForReq(PurchReqTable::find(purchReqLine.PurchReqTable));
        }

        return canLineRefBeEdited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableBudgetReservationFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the budget reservation fields on the purchase requisition form.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The current purchase requisition line.
    /// </param>
    public void enableBudgetReservationFields(PurchReqLine _purchReqLine)
    {
        boolean enableBudgetReservationLine = _purchReqLine.BudgetReservationLine_PSN == 0 && PurchReqTableForm::budgetReservationLineIsEnabledForReq(purchReqTable);

        enableDSField(_purchReqLine.dataSource(), fieldNum(PurchReqLine, BudgetReservationLine_PSN), enableBudgetReservationLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>