<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesConfirmDatesAsyncStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesConfirmDatesAsyncStrategy</c> class implements logic to set confirmed dates for a
/// <c>SalesDeliveryDateControlMap</c> map.
/// </summary>
/// <remarks>
/// Notice that the class will only set the confirmed dates. If the new dates have to be written to the
/// database they must be handled after usage of the class.
/// </remarks>
public class SalesConfirmDatesAsyncStrategy extends SalesConfirmDatesStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSetConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the confirmed dates can be set.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map representing a record for which confirmed dates might be
    /// set.
    /// </param>
    /// <returns>
    /// true if confirmed dates should be set; otherwise, false.
    /// </returns>
    protected boolean canSetConfirmedDates(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        return    ! _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed
               || ! _salesDeliveryDateControlMapCaller.ShippingDateConfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the logic to handle a conflict regarding the confirmed dates.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates exceeds
    /// the requested dates.
    /// </param>
    protected void handleConflict(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        Common                                  actualTable = _salesDeliveryDateControlMapCaller;

        try
        {
            ttsbegin;
            if (actualTable is SalesLine)
            {
                SalesLine salesLine = actualTable as SalesLine;
                if (salesLine.ShippingDateConfirmed > salesLine.ShippingDateRequested)
                {
                    EventNotification_SalesLineResponsible::sendNotification(   salesLine,
                                                                                "@SYS322676",
                                                                                strfmt("@SYS322677",salesLine.ShippingDateConfirmed,salesLine.SalesId,salesLine.ItemId,salesLine.ShippingDateRequested),
                                                                                EventNotificationType::Action);
                }
                else
                {
                    EventNotification_SalesLineResponsible::sendNotification(   salesLine,
                                                                                "@SYS322676",
                                                                                strfmt("@SYS322678", _salesDeliveryDateControlMapCaller.ShippingDateRequested,
                                                                                                    _salesDeliveryDateControlMapCaller.ReceiptDateRequested,
                                                                                                    _salesDeliveryDateControlMapCaller.ShippingDateConfirmed,
                                                                                                    _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed),
                                                                                EventNotificationType::Action);
                }
            }
            else
            {
                EventNotification_SalesLineResponsible notification = EventNotification_SalesLineResponsible::newStandard( curuserid(),
                                                                                                                           "@SYS322676",
                                                                                                                           strfmt("@SYS322678", _salesDeliveryDateControlMapCaller.ShippingDateRequested,
                                                                                                                                               _salesDeliveryDateControlMapCaller.ReceiptDateRequested,
                                                                                                                                               _salesDeliveryDateControlMapCaller.ShippingDateConfirmed,
                                                                                                                                               _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed),
                                                                                                                           EventNotificationType::Action,
                                                                                                                           actualTable);
                notification.create();
            }
            ttscommit;
        }
        catch
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the confirmed dates must be set.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates might
    /// be set.
    /// </param>
    /// <returns>
    /// true if the confirmed dates must be set; otherwise, false.
    /// </returns>
    public boolean mustSetConfirmedDates(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        return MpsDeliveryDateControlTypeCTPHelper::isDeliveryDateControlTypeClassicCTP(_salesDeliveryDateControlMapCaller.DeliveryDateControlType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current <c>SalesDeliveryDateControlMap</c> map with new confirmed dates.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A  <c>SalesDeliveryDateControlMap</c> map representing a record for which confirmed dates must be set.
    /// </param>
    /// <param name="_shipDate">
    /// A date value that holds the new shipping date.
    /// </param>
    /// <param name="_receiptDate">
    /// A date value that holds the new receipt date.
    /// </param>
    protected void setConfirmedDates(
        SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller,
        TransDate                   _shipDate       = earliestShippingDate,
        TransDate                   _receiptDate    = earliestReceiptDate)
    {
        TransDate shipDate = max(_shipDate,    _salesDeliveryDateControlMapCaller.ShippingDateRequested);
        TransDate receiptDate = max(_receiptDate, _salesDeliveryDateControlMapCaller.ReceiptDateRequested);

        super(_salesDeliveryDateControlMapCaller, shipDate, receiptDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesConfirmDatesAsyncStrategy</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>SalesConfirmDatesAsyncStrategy</c> class.
    /// </returns>
    public static SalesConfirmDatesAsyncStrategy construct()
    {
        return new SalesConfirmDatesAsyncStrategy();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>