<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The retail data is encoded to provide the security purposes.
/// </summary>
class RetailData
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DataProtectionInvokeMethod</Name>
				<Source><![CDATA[
    private static str DataProtectionInvokeMethod(str methodName, System.Object[] args)
    {
        System.Reflection.Assembly assembly;
        System.Type dataProtectionType;
        System.Reflection.BindingFlags bindingFlags;
        System.Exception netExcepn;
        anytype result;

        new InteropPermission(InteropKind::CLRInterop).assert();

        try
        {
            bindingFlags = CLRInterop::parseClrEnum('System.Reflection.BindingFlags', 'InvokeMethod, Default');
            assembly = System.Reflection.Assembly::Load('Microsoft.Dynamics.Retail.Security, PublicKeyToken=31bf3856ad364e35');
            dataProtectionType = assembly.GetType('Microsoft.Dynamics.Retail.Security.DataProtection');

            result = dataProtectionType.InvokeMember(methodName, bindingFlags, null, null, args);
        }
        catch
        {
            netExcepn = CLRInterop::getLastException();
            info(netExcepn.ToString());
        }

        CodeAccessPermission::revertAssert();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DecryptData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method converts the encrypted data back to its original form.
    /// </summary>
    /// <param name="data">
    /// The data string.
    /// </param>
    /// <param name="algorithmName">
    /// The algorithm name.
    /// </param>
    /// <param name="invariant">
    /// The variant info.
    /// </param>
    /// <param name="context">
    /// The context of the text message.
    /// </param>
    /// <param name="cell">
    /// Remote location cell info.
    /// </param>
    /// <returns>
    /// Converted string.
    /// </returns>
    public static str DecryptData(str data, str algorithmName, str invariant, str context, str cell)
    {
        str result;
        System.Object[] args;

        args = new System.Object[5]();
        args.SetValue(data, 0);
        args.SetValue(algorithmName, 1);
        args.SetValue(invariant, 2);
        args.SetValue(context, 3);
        args.SetValue(cell, 4);

        result = RetailData::DataProtectionInvokeMethod('DecryptData', args);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DecryptDataAX5</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the encrypted data back to its original form (AX5 version).
    /// </summary>
    /// <param name="data">
    /// The data string.
    /// </param>
    /// <param name="invariant">
    /// The variant info.
    /// </param>
    /// <param name="context">
    /// The context of the text message.
    /// </param>
    /// <param name="cell">
    /// Remote location cell info.
    /// </param>
    /// <returns>
    /// Converted string.
    /// </returns>
    public static str DecryptDataAX5(str data, str invariant, str context, str cell)
    {
        str text1;
        str text2;
        str result;
        str local;
        str remote;
        int keyLength;
        int ivLength;
        int bufferSize, readCount;

        System.Text.Encoding encoder;
        System.Security.Cryptography.PasswordDeriveBytes key;
        System.Security.Cryptography.RijndaelManaged rijndael;
        System.Security.Cryptography.ICryptoTransform transform;
        System.IO.MemoryStream memoryStream;
        System.Security.Cryptography.CryptoStream cryptoStream;
        System.Exception clrException;

        System.Byte[] cipherData;
        System.Byte[] decryptedData;
        ;

        new InteropPermission(InteropKind::CLRInterop).assert();

        keyLength = RetailData::Size();
        ivLength = RetailData::Length();

        local = RetailData::Local();
        remote = RetailData::GetRemote(cell);
        text1 = local + context + remote;
        text2 = local + invariant + remote;

        try
        {
            encoder = System.Text.Encoding::get_Unicode();

            key = new System.Security.Cryptography.PasswordDeriveBytes(
                encoder.GetBytes(text1),
                encoder.GetBytes(text2));

            rijndael = new System.Security.Cryptography.RijndaelManaged();
            rijndael.set_KeySize(RetailData::Size() * 8);
            rijndael.set_Mode(System.Security.Cryptography.CipherMode::CBC);
            rijndael.set_Key(key.GetBytes(keyLength));
            rijndael.set_IV(key.GetBytes(ivLength));

            cipherData = System.Convert::FromBase64String(data);
            memoryStream = new System.IO.MemoryStream(cipherData);

            transform = rijndael.CreateDecryptor();

            cryptoStream = new System.Security.Cryptography.CryptoStream(
                memoryStream,
                transform,
                System.Security.Cryptography.CryptoStreamMode::Read);

            bufferSize = cipherData.get_Length();
            decryptedData = new System.Byte[bufferSize]();
            readCount = cryptoStream.Read(decryptedData, 0, bufferSize);

            result = encoder.GetString(decryptedData);
            cryptoStream.Clear();

            rijndael.Clear();
            memoryStream.Close();
            cryptoStream.Close();
        }
        catch (Exception::CLRError)
        {
            clrException = CLRInterop::getLastException();
            info(clrException.ToString());

            throw Exception::Error;
        }

        CodeAccessPermission::revertAssert();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DecryptDataAX61</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the encrypted data back to its original form (AX6.1 version).
    /// </summary>
    /// <param name="data">
    /// The data string.
    /// </param>
    /// <param name="invariant">
    /// The variant info.
    /// </param>
    /// <param name="context">
    /// The context of the text message.
    /// </param>
    /// <param name="cell">
    /// Remote location cell info.
    /// </param>
    /// <returns>
    /// Converted string.
    /// </returns>
    public static str DecryptDataAX61(str data, str invariant, str context, str cell)
    {
        str password;
        str salt;
        str result;
        str local;
        str remote;
        int keyLength;
        int ivLength;
        int bufferSize, readCount;

        System.Text.Encoding encoder;
        System.Security.Cryptography.Rfc2898DeriveBytes deriveBytes;
        System.Security.Cryptography.SymmetricAlgorithm provider;
        System.Security.Cryptography.ICryptoTransform transform;
        System.IO.MemoryStream memoryStream;
        System.Security.Cryptography.CryptoStream cryptoStream;
        System.Exception clrException;

        System.Byte[] cipherData;
        System.Byte[] decryptedData;
        ;

        new InteropPermission(InteropKind::CLRInterop).assert();

        keyLength = RetailData::Size();
        ivLength = RetailData::Length();

        local = RetailData::Local();
        remote = RetailData::GetRemote(cell);
        password = local + context + remote;
        salt = local + invariant + remote;

        try
        {
            encoder = System.Text.Encoding::get_Unicode();

            deriveBytes = new System.Security.Cryptography.Rfc2898DeriveBytes(
                password,
                encoder.GetBytes(salt));

            provider = System.Security.Cryptography.SymmetricAlgorithm::Create('AesCryptoServiceProvider');

            provider.set_Key(deriveBytes.GetBytes(keyLength));
            provider.set_IV(deriveBytes.GetBytes(ivLength));

            cipherData = System.Convert::FromBase64String(data);
            memoryStream = new System.IO.MemoryStream(cipherData);
            transform = provider.CreateDecryptor();

            cryptoStream = new System.Security.Cryptography.CryptoStream(
                memoryStream,
                transform,
                System.Security.Cryptography.CryptoStreamMode::Read);

            bufferSize = cipherData.get_Length();
            decryptedData = new System.Byte[bufferSize]();
            readCount = cryptoStream.Read(decryptedData, 0, bufferSize);

            result = encoder.GetString(decryptedData, 0, readCount);
            cryptoStream.Clear();

            provider.Clear();
            memoryStream.Close();
            cryptoStream.Close();
        }
        catch (Exception::CLRError)
        {
            clrException = CLRInterop::getLastException();
            info(clrException.ToString());

            throw Exception::Error;
        }

        CodeAccessPermission::revertAssert();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EncryptData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the encoded string to the required format.
    /// </summary>
    /// <param name="data">
    /// The data string.
    /// </param>
    /// <param name="algorithmName">
    /// The algorithm name.
    /// </param>
    /// <param name="invariant">
    /// The variant info.
    /// </param>
    /// <param name="context">
    /// The context of the text message.
    /// </param>
    /// <param name="cell">
    /// Remote location cell info.
    /// </param>
    /// <returns>
    /// Converted string.
    /// </returns>
    public static str EncryptData(str data, str algorithmName, str invariant, str context, str cell)
    {
        str result;
        System.Object[] args;

        args = new System.Object[5]();
        args.SetValue(data, 0);
        args.SetValue(algorithmName, 1);
        args.SetValue(invariant, 2);
        args.SetValue(context, 3);
        args.SetValue(cell, 4);

        result = RetailData::DataProtectionInvokeMethod('EncryptData', args);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EncryptDataAX5</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the encoded string to the required format(AX5 version).
    /// </summary>
    /// <param name="data">
    /// The data string.
    /// </param>
    /// <param name="invariant">
    /// The variant info.
    /// </param>
    /// <param name="context">
    /// The context of the text message.
    /// </param>
    /// <param name="cell">
    /// Remote location cell info.
    /// </param>
    /// <returns>
    /// Converted string.
    /// </returns>
    public static str EncryptDataAX5(str data, str invariant, str context, str cell)
    {
        str text1;
        str text2;
        str result;
        str local;
        str remote;
        int keyLength;
        int ivLength;

        System.Text.Encoding encoder;
        System.Security.Cryptography.PasswordDeriveBytes key;
        System.Security.Cryptography.RijndaelManaged rijndael;
        System.Security.Cryptography.ICryptoTransform transform;
        System.IO.MemoryStream memoryStream;
        System.Security.Cryptography.CryptoStream cryptoStream;

        System.Byte[] binaryData;
        ;

        new InteropPermission(InteropKind::CLRInterop).assert();

        keyLength = RetailData::Size();
        ivLength = RetailData::Length();

        local = RetailData::Local();
        remote = RetailData::GetRemote(cell);
        text1 = local + context + remote;
        text2 = local + invariant + remote;

        encoder = System.Text.Encoding::get_Unicode();

        key = new System.Security.Cryptography.PasswordDeriveBytes(
            encoder.GetBytes(text1),
            encoder.GetBytes(text2));

        rijndael = new System.Security.Cryptography.RijndaelManaged();
        rijndael.set_KeySize(RetailData::Size() * 8);
        rijndael.set_Mode(System.Security.Cryptography.CipherMode::CBC);
        rijndael.set_Key(key.GetBytes(keyLength));
        rijndael.set_IV(key.GetBytes(ivLength));

        memoryStream = new System.IO.MemoryStream();
        transform = rijndael.CreateEncryptor();
        cryptoStream = new System.Security.Cryptography.CryptoStream(
            memoryStream,
            transform,
            System.Security.Cryptography.CryptoStreamMode::Write);

        binaryData = encoder.GetBytes(data);
        cryptoStream.Write(binaryData, 0, binaryData.get_Length());
        cryptoStream.FlushFinalBlock();
        memoryStream.set_Position(0);

        result = System.Convert::ToBase64String(memoryStream.ToArray());

        rijndael.Clear();
        memoryStream.Close();
        cryptoStream.Close();

        CodeAccessPermission::revertAssert();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EncryptDataAX61</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the encoded string to the required format(AX6.1 version).
    /// </summary>
    /// <param name="data">
    /// The data string.
    /// </param>
    /// <param name="invariant">
    /// The variant info.
    /// </param>
    /// <param name="context">
    /// The context of the text message.
    /// </param>
    /// <param name="cell">
    /// Remote location cell info.
    /// </param>
    /// <returns>
    /// Converted string.
    /// </returns>
    public static str EncryptDataAX61(str data, str invariant, str context, str cell)
    {
        str password;
        str salt;
        str result;
        str local;
        str remote;
        int keyLength;
        int ivLength;

        System.Text.Encoding encoder;
        System.Security.Cryptography.Rfc2898DeriveBytes deriveBytes;
        System.Security.Cryptography.SymmetricAlgorithm provider;
        System.Security.Cryptography.ICryptoTransform transform;
        System.IO.MemoryStream memoryStream;
        System.Security.Cryptography.CryptoStream cryptoStream;

        System.Byte[] binaryData;
        ;

        new InteropPermission(InteropKind::CLRInterop).assert();

        keyLength = RetailData::Size();
        ivLength = RetailData::Length();

        local = RetailData::Local();
        remote = RetailData::GetRemote(cell);
        password = local + context + remote;
        salt = local + invariant + remote;

        encoder = System.Text.Encoding::get_Unicode();

        deriveBytes = new System.Security.Cryptography.Rfc2898DeriveBytes(
            password,
            encoder.GetBytes(salt));

        provider = System.Security.Cryptography.SymmetricAlgorithm::Create('AesCryptoServiceProvider');

        provider.set_Key(deriveBytes.GetBytes(keyLength));
        provider.set_IV(deriveBytes.GetBytes(ivLength));

        memoryStream = new System.IO.MemoryStream();
        transform = provider.CreateEncryptor();
        cryptoStream = new System.Security.Cryptography.CryptoStream(
            memoryStream,
            transform,
            System.Security.Cryptography.CryptoStreamMode::Write);

        binaryData = encoder.GetBytes(data);
        cryptoStream.Write(binaryData, 0, binaryData.get_Length());
        cryptoStream.FlushFinalBlock();
        memoryStream.set_Position(0);

        result = System.Convert::ToBase64String(memoryStream.ToArray());

        provider.Clear();
        memoryStream.Close();
        cryptoStream.Close();

        CodeAccessPermission::revertAssert();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetRemote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invokes the <c>GetRegistryContext</c> using the arguments.
    /// </summary>
    /// <param name="key">
    /// The data string.
    /// </param>
    /// <returns>
    /// An string representing the return value of the invoked member.
    /// </returns>
    public static str GetRemote(str key)
    {
        str result;
        System.Object[] args;

        args = new System.Object[1]();
        args.SetValue(key, 0);

        result = RetailData::DataProtectionInvokeMethod('GetRegistryContext', args);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HashData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encodes the data for security purposes.
    /// </summary>
    /// <param name="data">
    /// The actual data.
    /// </param>
    /// <param name="algorithmName">
    /// The algorithm name.
    /// </param>
    /// <param name="invariant">
    /// The variant info.
    /// </param>
    /// <param name="context">
    /// The context of the text message.
    /// </param>
    /// <param name="cell">
    /// Remote location cell info.
    /// </param>
    /// <returns>
    /// The encoded text.
    /// </returns>
    public static str HashData(str data, str algorithmName, str invariant, str context, str cell)
    {
        str result;
        System.Object[] args;

        args = new System.Object[5]();
        args.SetValue(data, 0);
        args.SetValue(algorithmName, 1);
        args.SetValue(invariant, 2);
        args.SetValue(context, 3);
        args.SetValue(cell, 4);

        result = RetailData::DataProtectionInvokeMethod('HashData', args);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HashData2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encodes the data for security purposes.
    /// </summary>
    /// <param name="data">
    /// The actual data.
    /// </param>
    /// <param name="algorithmName">
    /// The algorithm name.
    /// </param>
    /// <param name="invariant">
    /// The variant info.
    /// </param>
    /// <param name="salt">
    /// Salt for hash.
    /// </param>
    /// <returns>
    /// The encoded text.
    /// </returns>
    public static str HashData2(str data, str algorithmName, str invariant,  str salt)
    {
        str result;
        System.Object[] args;

        args = new System.Object[4]();
        args.SetValue(data, 0);
        args.SetValue(algorithmName, 1);
        args.SetValue(invariant, 2);
        args.SetValue(salt, 3);

        result = RetailData::DataProtectionInvokeMethod('HashData2', args);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HashLegacy2012</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encodes the data for security purposes using AX2012 style hash for N-1 channel.
    /// </summary>
    /// <param name="data">
    /// The actual data.
    /// </param>
    /// <param name="algorithmName">
    /// The algorithm name.
    /// </param>
    /// <param name="invariant">
    /// The variant info.
    /// </param>
    /// <param name="localContext">
    /// The local context.
    /// </param>
    /// <returns>
    /// The encoded text.
    /// </returns>
    public static str HashLegacy2012(str data, str algorithmName, str invariant, str localContext)
    {
        str result;

        result = RetailData::HashUnified(data, algorithmName, invariant, localContext, RetailData::Local(), RetailSharedParameters::TryGetLegacyRegKeyData2Value());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HashUnified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encodes the data for security purposes using unified form that
    /// provides superset of standard AX7x hash with invariant prefix and
    /// salt postfix for backwards compatibility with AX2012 style hash.
    /// </summary>
    /// <param name="data">
    /// The actual data.
    /// </param>
    /// <param name="algorithmName">
    /// The algorithm name.
    /// </param>
    /// <param name="invariant">
    /// The variant info.
    /// </param>
    /// <param name="salt">
    /// Salt for hash.
    /// </param>
    /// <param name="legacyLocalContext">
    /// Legacy Local Context (optional).
    /// </param>
    /// <param name="legacyRegKeyData2Value">
    /// Legacy registry key Data2 value (optional).
    /// </param>
    /// <returns>
    /// The encoded text.
    /// </returns>
    public static str HashUnified(str data, str algorithmName, str invariant,  str salt, str legacyLocalContext = '', str legacyRegKeyData2Value = '')
    {
        str unifiedInvariant;
        str unifiedSalt;
        str result;

        unifiedInvariant = legacyLocalContext + invariant;
        unifiedSalt = salt + legacyRegKeyData2Value;

        result = RetailData::HashData2(data, algorithmName, unifiedInvariant, unifiedSalt);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateRandomSalt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns random salt for hashing purposes.
    /// </summary>
    /// <returns>
    /// Random salt.
    /// </returns>
    public static str GenerateRandomSalt()
    {
        str result;

        result = RetailData::DataProtectionInvokeMethod('GenerateRandomSalt', null);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRandomBase32Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generating a random base32 string.
    /// 1. Generating the random byte array.
    /// 2. Converting the byte array to base32.
    /// Converting Algorithm:
    /// Each byte is 8 bit which has the value between 0 - 255.
    /// Getting the last the 5 bit by ( & 00011111) which has the value between 0 - 31.
    /// Get the relative Characeter in the base32str.
    /// </summary>
    /// <param name = "length">The length of the string.</param>
    /// <returns>
    /// The base32 string.
    /// </returns>
    internal static str generateRandomBase32Str(int length)
    {
        System.Byte[] cryptoBytes = new System.Byte[length]();
        using (System.Security.Cryptography.RNGCryptoServiceProvider rngCryptoServiceProvider = new System.Security.Cryptography.RNGCryptoServiceProvider())
        {
            rngCryptoServiceProvider.GetBytes(cryptoBytes);
        }

        str result;
        str base32 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
        for (int i = 0; i < cryptoBytes.Length; i++)
        {
            int sig = cryptoBytes.GetValue(i);
            result += subStr(base32, sig & 31, 1);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsValidEncryptionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invokes the <c>IsValidEncryptionName</c> using the arguments.
    /// </summary>
    /// <param name="algorithmName">
    /// The algorithm name.
    /// </param>
    /// <returns>
    /// An boolean value.
    /// </returns>
    public static boolean IsValidEncryptionName(str algorithmName)
    {
        str result;
        System.Object[] args;

        args = new System.Object[1]();
        args.SetValue(algorithmName, 0);

        result = RetailData::DataProtectionInvokeMethod('IsValidEncryptionName', args);

        return result == '1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsValidHashName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invokes the <c>IsValidHashName</c> using the arguments.
    /// </summary>
    /// <param name="algorithmName">
    /// The algorithm name.
    /// </param>
    /// <returns>
    /// An boolean value.
    /// </returns>
    public static boolean IsValidHashName(str algorithmName)
    {
        str result;
        System.Object[] args;

        args = new System.Object[1]();
        args.SetValue(algorithmName, 0);

        result = RetailData::DataProtectionInvokeMethod('IsValidHashName', args);

        return result == '1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>Length</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the length.
    /// </summary>
    /// <returns>
    /// <c>Length</c>
    /// </returns>
    public static int Length()
    {
        // consider reading from registry
        return 16; // 128 / 8
    }

]]></Source>
			</Method>
			<Method>
				<Name>Local</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the unique identification number.
    /// </summary>
    /// <returns>
    /// The unique identification number.
    /// </returns>
    public static str Local()
    {
        return '293329F3BBCE4a4cBAF3AE473B2F3E51C49D9DF4535347c1878ACC58F0FBBA43';
    }

]]></Source>
			</Method>
			<Method>
				<Name>Noise</Name>
				<Source><![CDATA[
    private static str Noise()
    {
        return 'DFA8952F757247c2AA4F73AB7A0C93ABE839AD148A4044b0BBAA6871E498476B';
    }

]]></Source>
			</Method>
			<Method>
				<Name>Size</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the size.
    /// </summary>
    /// <returns>
    /// <c>Size</c>
    /// </returns>
    public static int Size()
    {
        // consider reading from registry
        return 32; // 256 / 8;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>