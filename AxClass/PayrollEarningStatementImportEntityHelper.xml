<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningStatementImportEntityHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PayrollEarningStatementImportEntityHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeEarningStatementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize the earning statement line buffer
    /// </summary>
    /// <param name="_statementLine">
    ///     The <c>PayrollEarningStatementLine</c> buffer.
    /// </param>
    /// <param name="_worker">
    ///     The <c>HcmWorker</c> record id.
    /// </param>
    /// <param name="_position">
    ///     The <c>HcmPosition</c> record id.
    /// </param>
    /// <param name="_earningCodeId">
    ///     The <c>PayrollEarningCode</c> earning code id.
    /// </param>
    /// <param name="_taxRegionName">
    ///     The <c>LogisticsLocation</c> descritopn.
    /// </param>
    public void initializeEarningStatementLine(
        PayrollEarningStatementLine _statementLine,
        HcmWorkerRecId _worker,
        HcmPositionRecId _position,
        PayrollEarningCodeId _earningCodeId,
        Description _taxRegionName
        )
    {
        #PayrollConstants

        if (!_statementLine.Position)
        {
            _statementLine.Position = _position;
        }

        if (_taxRegionName == "")
        {
            _statementLine.WorkerTaxRegion = PayrollPositionWorkerDefaultTaxRgn::findByWorkerPosition(_position, _worker).WorkerTaxRegion;
        }
        else
        {
            _statementLine.WorkerTaxRegion = PayrollEarningStatementImportEntityHelper::resolveWorkerTaxRegion(_taxRegionName, _worker).RecId;
        }

        if (_statementLine.EarningRate == 0)
        {
            if (!_statementLine.EarningCode)
            {
                _statementLine.EarningCode = PayrollEarningCode::findByEarningCode(_earningCodeId).RecId;
            }

            _statementLine.EarningRate = _statementLine.computeRate();
        }

        _statementLine.AccountingCurrencyAmount = CurrencyExchange::round(_statementLine.Quantity * _statementLine.EarningRate, PayrollSetup::currencyCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set default values for PayrollEarningStatementLine if not spcified
    /// </summary>
    /// <param name="_statementLine">
    ///     The <c>PayrollEarningStatementLine</c> buffer.
    /// </param>
    public void setDefaultValues(PayrollEarningStatementLine _statementLine)
    {
        if (!_statementLine.WorkerCompensationBenefit)
        {
            _statementLine.initFromPayrollPosWorkerCompensation();
        }

        if (!_statementLine.WorkerGLIBenefit)
        {
            _statementLine.initFromPayrollPositionDetails();
        }

        if (!_statementLine.AccountingDistributionTemplate)
        {
            _statementLine.setAccountingDistributionTemplate();
        }

        if (!_statementLine.DefaultDimension)
        {
            _statementLine.setDefaultDimension();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleEarningStatementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create payroll earning statement header if not exist
    /// </summary>
    /// <param name="_statementLine">
    ///     The <c>PayrollEarningStatementLine</c> buffer.
    /// </param>
    /// <param name="_worker">
    ///     The <c>HcmWorker</c> record id.
    /// </param>
    /// <param name="_payPeriod">
    ///     The <c>PayrollPayPeriod</c> record id.
    /// </param>
    public void handleEarningStatementHeader(
        PayrollEarningStatementLine _statementLine,
        HcmWorkerRecId _worker,
        PayrollPayPeriodRecId _payPeriod
        )
    {
        PayrollEarningStatement statementHeader;

        select firstonly statementHeader
            where statementHeader.Worker == _worker
                && statementHeader.PayPeriod == _payPeriod;

        if (statementHeader.RecId == 0)
        {
            // insert a new earning statement hearder
            statementHeader = this.insertEarningStatementHeader(_worker, _payPeriod);
        }
        _statementLine.EarningStatement = statementHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEarningStatementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verify the fields in <c>PayrollEarningStatementLine</c>
    /// </summary>
    /// <param name="_statementLine">
    ///     The <c>PayrollEarningStatementLine</c> buffer.
    /// </param>
    /// <param name="_workerRecId">
    ///     The <c>HcmWorker</c> record id.
    /// </param>
    /// <param name="_positionRecId">
    ///     The <c>HcmPosition</c> record id.
    /// </param>
    /// <param name="_payPeriod">
    ///     The <c>PayrollPayPeriod</c> buffer.
    /// </param>
    /// <param name="_taxRegionName">
    ///     The <c>LogisticsLocation</c> descritopn.
    /// </param>
    /// <param name="_workerCompensationBenefit">
    ///    The <c>HcmBenefit</c> worker compensation benefit id.
    /// </param>
    /// <param name="_earningCodeId">
    ///     The <c>PayrollEarningCode</c> earning code id.
    /// </param>
    /// <param name="_projectId">
    ///    The <c>ProjTable</c> project id.
    /// </param>
    /// <param name="ProjCategory">
    ///    The <c>ProjCategory</c> project category id.
    /// </param>
    /// <returns>
    ///     true if <c>PayrollEarningStatementLine</c> contains valid fields; otherwise false.
    /// </returns>
    public boolean validateEarningStatementLine(
        PayrollEarningStatementLine _statementLine,
        HcmWorkerRecId _workerRecId,
        HcmPositionRecId _positionRecId,
        PayrollPayPeriod _payPeriod,
        Description _taxRegionName,
        HcmBenefitId _workerCompensationBenefit,
        PayrollEarningCodeId _earningCodeId,
        ProjId _projectId,
        ProjCategoryId _projectCategoryId
        )
    {
        boolean ret;

        _statementLine.EarningCode = PayrollEarningCode::findByEarningCode(_earningCodeId).RecId;

        ret = _statementLine.validatePosition(_positionRecId)
                && this.validatePositionWorkerAssignment(_workerRecId, _positionRecId, _payPeriod)
                && PayrollEarningStatementLine::validateProjCategoryId(_projectId, _projectCategoryId, _statementLine.EarningCode);

        if (PayrollEarningCodeDetail::findByEarningCode(_statementLine.EarningCode).RateBasis != PayrollRateBasis::FlatAmount)
        {
            ret = ret && _statementLine.validateEarningPositionCompensation(_positionRecId);
        }

        PayrollWorkerTaxRegionRecId workerTaxRegionRecId;
        if (_taxRegionName != "")
        {
            PayrollWorkerTaxRegion workerTaxRegion = PayrollEarningStatementImportEntityHelper::resolveWorkerTaxRegion(_taxRegionName, _workerRecId);
            workerTaxRegionRecId = workerTaxRegion.RecId;

            if (workerTaxRegion.RecId == 0)
            {
                ret = checkFailed(strFmt("@SYS316757", tableStr(PayrollTaxRegion)));
            }
        }

        if (_workerCompensationBenefit != "")
        {
            if (_taxRegionName == "")
            {
                workerTaxRegionRecId = PayrollPositionWorkerDefaultTaxRgn::findByWorkerPosition(_positionRecId, _workerRecId).WorkerTaxRegion;
            }

            HcmBenefit benefit = HcmBenefit::findByBenefitId(_workerCompensationBenefit);
            ret = ret && _statementLine.validateWorkerCompensationBenefit(_positionRecId, workerTaxRegionRecId, benefit.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveWorkerTaxRegion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieve the <c>PayrollWorkerTaxRegion</c> record for specified worker and tax region
    /// </summary>
    /// <param name="_taxRegionName">
    ///     The <c>LogisticsLocation</c> descritopn.
    /// </param>
    /// <param name="_workerRecId">
    ///     The <c>HcmWorker</c> record id.
    /// </param>
    /// <returns>
    ///     A <c>PayrollWorkerTaxRegion</c> record.
    /// </returns>
    public static PayrollWorkerTaxRegion resolveWorkerTaxRegion(Description _taxRegionName, HcmWorkerRecId _workerRecId)
    {
        PayrollTaxRegion taxRegion;
        LogisticsLocation location;
        PayrollWorkerTaxRegion workerTaxRegion;

        select firstonly workerTaxRegion
            join LogisticsLocation from taxRegion
            where workerTaxRegion.TaxRegion == taxRegion.RecId
                && workerTaxRegion.Worker == _workerRecId
            join Description from location
            where location.RecId == taxRegion.LogisticsLocation
                && location.Description == _taxRegionName;

        return workerTaxRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPayPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollPayPeriod</c> table for specified position and earning date.
    /// </summary>
    /// <param name="_positionRecId">
    ///     The <c>HcmPosition</c> record id.
    /// </param>
    /// <param name="_earningDate">
    ///    The earning date.
    /// </param>
    /// <returns>
    ///    A record in the <c>PayrollPayPeriod</c> table; otherwise, an empty record.
    /// </returns>
    public PayrollPayPeriod findPayPeriod(HcmPositionRecId _position, TransDate _earningDate)
    {
        PayrollPositionDetails payrollPositionDetails = PayrollPositionDetails::findByPosition(_position, _earningDate);

        PayrollPayPeriod payPeriod = PayrollPayPeriod::findByPayCycleAndDateRange(payrollPositionDetails.PayCycle, _earningDate);

        return payPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePositionWorkerAssignment</Name>
				<Source><![CDATA[
    private boolean validatePositionWorkerAssignment(HcmWorkerRecId _workerRecId, HcmPositionRecId _positionRecId, PayrollPayPeriod _payPeriod)
    {
        boolean                     ret;
        utcdatetime                 companyEndOfPayPeriod;
        HcmPositionWorkerAssignment hcmPositionWorkerAssignment;

        companyEndOfPayPeriod = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(_payPeriod.PeriodEndDate, timeMax()),
            DateTimeUtil::getCompanyTimeZone());

        ret = PayrollEarningStatementGeneration::validatePayrollPositionDetail(_positionRecId, companyEndOfPayPeriod, _payPeriod.PayCycle);

        if (ret)
        {
            select ValidTimeState(companyEndOfPayPeriod, companyEndOfPayPeriod) count(RecId)
                from hcmPositionWorkerAssignment
                where hcmPositionWorkerAssignment.Position == _positionRecId
                    && hcmPositionWorkerAssignment.Worker == _workerRecId;

            if (hcmPositionWorkerAssignment.RecId == 0)
            {
                ret = ret && checkFailed("@Payroll:ThePositionIsNotAssignedToAWorkerForThisPayPeriodAssignThePo");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEarningStatementHeader</Name>
				<Source><![CDATA[
    private PayrollEarningStatement insertEarningStatementHeader(HcmWorkerRecId _worker,  PayrollPayPeriodRecId _payPeriod)
    {
        PayrollEarningStatement earningStatement;

        NumberSeq numberSeq = NumberSeq::newGetNum(PayrollParameters::numRefEarningStatDocumentNumber());

        //create a statement
        earningStatement.DocumentNumber = numberSeq.num();
        earningStatement.Worker = _worker;
        earningStatement.PayPeriod = _payPeriod;
        earningStatement.AutoGeneratedSalary = PayrollAutoGenerateSalary::Inactive;

        if (earningStatement.validateWrite())
        {
            earningStatement.insert();
        }

        return earningStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>