<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>eInvoiceReportDP_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceReportDP_MX</c> class is a report data provider (RDP) class for the associated
/// <c>EInvoiceReport_MX</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(EInvoiceReportContract_MX))
]
public class eInvoiceReportDP_MX extends SRSReportDataProviderBase
{
    EInvoiceReportTmp_MX                    eInvoiceReportTmp_MX;

    CompanyInfo                             companyInfo;
    EInvoiceJourBaseMap_MX                  eInvoiceJourMapping;
    EInvoiceTransBaseMap_MX                 eInvoiceTransMapping;
    EInvoiceXMLDocReader_MX                 xmlEInvReader;

    SalesFormLetter                         salesFormLetter;
    ProjFormLetter                          projFormLetter;

    SalesFormLetterReport_Invoice           salesFormLetterReport;
    SalesFormLetterReport_FreeText          salesFormLetterFreeTxt;
    SalesFormLetterReport_InvoiceProject    projFormLetterReport;

    CustInvoiceJour                         custInvoiceJour;
    ProjInvoiceJour                         projInvoiceJour;
    CustPostInvoice                         custPostInvoice;

    boolean                                 salesInvoice;
    boolean                                 freeTextInvoice;
    boolean                                 projectInvoice;
    boolean                                 isCustInvoiceJour;

    EInvoiceMail_MX                         eInvoiceMail;

    EInvoiceParameters_MX                   eInvoiceParameters;

    PrintCopyOriginal                       printCopyOriginal;

    Filename                                filename;
    recId                                   recId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountInWords</Name>
				<Source><![CDATA[
    private str amountInWords()
    {
        #define.SpanishMX('es-mx')
        return companyInfo.LanguageId == #SpanishMX
                ? numeralsToTxt_ES(this.totalAmount())
                : numeralsToTxt_EN(this.totalAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCityZipStateCountry</Name>
				<Source><![CDATA[
    private str companyCityZipStateCountry()
    {
        str companyAddress;

        if (eInvoiceJourMapping.emitentCity())
        {
            companyAddress += eInvoiceJourMapping.emitentCity();
        }

        if (eInvoiceJourMapping.emitentZipCode())
        {
            companyAddress += ', ' + eInvoiceJourMapping.emitentZipCode();
        }

        if (eInvoiceJourMapping.emitentState())
        {
            companyAddress +=  ', ' + eInvoiceJourMapping.emitentState();
        }

        if (eInvoiceJourMapping.emitentCountryRegion())
        {
            companyAddress +=  ', ' + eInvoiceJourMapping.emitentCountryRegion();
        }

        return companyAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCountryRegion</Name>
				<Source><![CDATA[
    private LogisticsAddressCountryRegionShortName companyCountryRegion()
    {
        return eInvoiceJourMapping.emitentCountryRegion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCounty</Name>
				<Source><![CDATA[
    private LogisticsAddressStateId companyCounty()
    {
        return eInvoiceJourMapping.emitentCounty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    private str companyName()
    {
        return companyInfo.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyState</Name>
				<Source><![CDATA[
    private LogisticsAddressStatename companyState()
    {
        return eInvoiceJourMapping.emitentState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyStreet</Name>
				<Source><![CDATA[
    private LogisticsAddressStreet companyStreet()
    {
        return eInvoiceJourMapping.emitentStreet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyStreetAndCounty</Name>
				<Source><![CDATA[
    private str companyStreetAndCounty()
    {
        str companyAddress;

        if (this.companyStreet())
        {
            companyAddress += this.companyStreet();
        }

        if (this.companyCounty())
        {
            companyAddress += ', '  + this.companyCounty();
        }

        return this.formatAddress(companyAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyZipCode</Name>
				<Source><![CDATA[
    private LogisticsAddressZipCodeId companyZipCode()
    {
        return eInvoiceJourMapping.emitentZipCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructMap</Name>
				<Source><![CDATA[
    protected EInvoiceJourBaseMap_MX constructMap(EInvoiceJour_MX _electronicInvoiceJour_MX)
    {
        return EInvoiceJourBaseMap_MX::construct(_electronicInvoiceJour_MX);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromMarkup</Name>
				<Source><![CDATA[
    private void createLinesFromMarkup(List _list)
    {
        ListEnumerator  listEnumerator;

        if (!_list)
        {
            return;
        }

        listEnumerator = _list.getEnumerator();

        while (listEnumerator.moveNext())
        {
            this.insertLinesFromMarkup(listEnumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the company address.
    /// </summary>
    /// <param name="companyAddress">
    /// The company address to format.
    /// </param>
    /// <returns>
    /// The formatted address.
    /// </returns>
    public str formatAddress(str companyAddress)
    {
        while (strFind(companyAddress, '\n', 0, strLen(companyAddress)))
        {
            companyAddress = strIns(companyAddress, ' ', strFind(companyAddress, '\n', 0, strLen(companyAddress)));
            companyAddress = strDel(companyAddress, strFind(companyAddress, '\n', 0, strLen(companyAddress)), 1);
        }

        return companyAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoiceReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>SalesInvoiceTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>SalesInvoiceTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(EInvoiceReportTmp_MX))]
    public EInvoiceReportTmp_MX getEInvoiceReportTmp()
    {
        select * from eInvoiceReportTmp_MX;
        return eInvoiceReportTmp_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLinesFromMarkup</Name>
				<Source><![CDATA[
    private void insertLinesFromMarkup(MarkupTrans _markupTrans)
    {
        eInvoiceReportTmp_MX.CertificateSerialNumber = eInvoiceJourMapping.certificateSerialNumber();
        eInvoiceReportTmp_MX.CompanyCity  =eInvoiceJourMapping.emitentCity();
        eInvoiceReportTmp_MX.DeliveryCounty = eInvoiceJourMapping.deliveryCounty();
        eInvoiceReportTmp_MX.InvoiceId = eInvoiceJourMapping.invoiceId();
        eInvoiceReportTmp_MX.InvoicingName = eInvoiceJourMapping.invoicingName();
        eInvoiceReportTmp_MX.InvoiceSeries = eInvoiceJourMapping.invoiceSeries();
        eInvoiceReportTmp_MX.AuthorizationYear = eInvoiceJourMapping.authorizationYear();
        eInvoiceReportTmp_MX.AuthorizationCode = eInvoiceJourMapping.authorizationCode();
        eInvoiceReportTmp_MX.DeliveryCompanyRFC = eInvoiceJourMapping.invoiceRFC();
        eInvoiceReportTmp_MX.DeliveryCity = eInvoiceJourMapping.deliveryCity();
        eInvoiceReportTmp_MX.DeliveryZipCode = eInvoiceJourMapping.deliveryZipCode();
        eInvoiceReportTmp_MX.DeliveryStreet = this.formatAddress(eInvoiceJourMapping.deliveryStreet());
        eInvoiceReportTmp_MX.InvoiceDateTime = DateTimeUtil::toStr(eInvoiceJourMapping.documentDateTime());
        eInvoiceReportTmp_MX.CompanyRFC = companyInfo.Rfc_MX;
        eInvoiceReportTmp_MX.CompanyStreetAndCounty = this.companyStreetAndCounty();
        eInvoiceReportTmp_MX.CompanyState = this.companyState();
        eInvoiceReportTmp_MX.CompanyCountryRegion = this.companyCountryRegion();
        eInvoiceReportTmp_MX.CompanyCityZipStateCountry = this.companyCityZipStateCountry();
        eInvoiceReportTmp_MX.CompanyStreet = this.companyStreet();
        eInvoiceReportTmp_MX.CompanyZipCode = this.companyZipCode();
        eInvoiceReportTmp_MX.CompanyCounty = this.companyCounty();
        eInvoiceReportTmp_MX.DigitalStamp = xmlEInvReader.getSello();
        eInvoiceReportTmp_MX.OriginalString = xmlEInvReader.getOriginalChain();
        eInvoiceReportTmp_MX.Discounts = abs(eInvoiceJourMapping.totalDiscountAmountMST());
        eInvoiceReportTmp_MX.ieps = abs(eInvoiceJourMapping.totalTaxAmountRegular(TaxType_MX::IEPS));
        eInvoiceReportTmp_MX.ivaWithheld = abs(eInvoiceJourMapping.totalTaxAmountRetained(TaxType_MX::IVA));
        eInvoiceReportTmp_MX.isrWithheld = abs(eInvoiceJourMapping.totalTaxAmountRetained(TaxType_MX::ISR));
        eInvoiceReportTmp_MX.ivaTax = abs(eInvoiceJourMapping.totalTaxAmountRegular(TaxType_MX::IVA));
        eInvoiceReportTmp_MX.TotalAmount = this.totalAmount();
        eInvoiceReportTmp_MX.SubTotal = abs(eInvoiceJourMapping.subTotal());
        eInvoiceReportTmp_MX.AmountInWords = this.amountInWords();
        eInvoiceReportTmp_MX.LineAmount = abs(_markupTrans.CalculatedAmount);
        eInvoiceReportTmp_MX.UnitPrice = abs(_markupTrans.CalculatedAmount);
        eInvoiceReportTmp_MX.Description = _markupTrans.markupTable().Txt;
        eInvoiceReportTmp_MX.Quantity = 1;
        eInvoiceReportTmp_MX.TypeOfPrint = this.typeOfPrint();
        eInvoiceReportTmp_MX.CompanyName = this.companyName();

        eInvoiceReportTmp_MX.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    private void insertRecord()
    {
        eInvoiceReportTmp_MX.CertificateSerialNumber = eInvoiceJourMapping.certificateSerialNumber();
        eInvoiceReportTmp_MX.CompanyCity =  eInvoiceJourMapping.emitentCity();
        eInvoiceReportTmp_MX.DeliveryCounty = eInvoiceJourMapping.deliveryCounty();
        eInvoiceReportTmp_MX.InvoiceId = eInvoiceJourMapping.invoiceId();
        eInvoiceReportTmp_MX.InvoicingName = eInvoiceJourMapping.invoicingName();
        eInvoiceReportTmp_MX.InvoiceSeries = eInvoiceJourMapping.invoiceSeries();
        eInvoiceReportTmp_MX.AuthorizationYear = eInvoiceJourMapping.authorizationYear();
        eInvoiceReportTmp_MX.AuthorizationCode = eInvoiceJourMapping.authorizationCode();
        eInvoiceReportTmp_MX.DeliveryCompanyRFC = eInvoiceJourMapping.invoiceRFC();
        eInvoiceReportTmp_MX.DeliveryCity = eInvoiceJourMapping.deliveryCity();
        eInvoiceReportTmp_MX.DeliveryZipCode = eInvoiceJourMapping.deliveryZipCode();
        eInvoiceReportTmp_MX.DeliveryStreet = this.formatAddress(eInvoiceJourMapping.deliveryStreet());
        eInvoiceReportTmp_MX.InvoiceDateTime = DateTimeUtil::toStr(eInvoiceJourMapping.documentDateTime());
        eInvoiceReportTmp_MX.CompanyRFC = companyInfo.Rfc_MX;
        eInvoiceReportTmp_MX.CompanyStreetAndCounty = this.companyStreetAndCounty();
        eInvoiceReportTmp_MX.CompanyState = this.companyState();
        eInvoiceReportTmp_MX.CompanyCountryRegion = this.companyCountryRegion();
        eInvoiceReportTmp_MX.CompanyCityZipStateCountry = this.companyCityZipStateCountry();
        eInvoiceReportTmp_MX.CompanyStreet = this.companyStreet();
        eInvoiceReportTmp_MX.CompanyZipCode = this.companyZipCode();
        eInvoiceReportTmp_MX.CompanyCounty = this.companyCounty();
        eInvoiceReportTmp_MX.DigitalStamp = xmlEInvReader.getSello();
        eInvoiceReportTmp_MX.OriginalString = xmlEInvReader.getOriginalChain();
        eInvoiceReportTmp_MX.Discounts = abs(eInvoiceJourMapping.totalDiscountAmountMST());
        eInvoiceReportTmp_MX.ieps = abs(eInvoiceJourMapping.totalTaxAmountRegular(TaxType_MX::IEPS));
        eInvoiceReportTmp_MX.ivaWithheld = abs(eInvoiceJourMapping.totalTaxAmountRetained(TaxType_MX::IVA));
        eInvoiceReportTmp_MX.isrWithheld = abs(eInvoiceJourMapping.totalTaxAmountRetained(TaxType_MX::ISR));
        eInvoiceReportTmp_MX.ivaTax = abs(eInvoiceJourMapping.totalTaxAmountRegular(TaxType_MX::IVA));
        eInvoiceReportTmp_MX.TotalAmount = this.totalAmount();
        eInvoiceReportTmp_MX.SubTotal = abs(eInvoiceJourMapping.subTotal());
        eInvoiceReportTmp_MX.AmountInWords = this.amountInWords();
        eInvoiceReportTmp_MX.LineAmount = abs(eInvoiceTransMapping.amount());
        eInvoiceReportTmp_MX.UnitPrice = abs(eInvoiceTransMapping.unitPrice());
        eInvoiceReportTmp_MX.Description = eInvoiceTransMapping.itemName();
        eInvoiceReportTmp_MX.Quantity = eInvoiceTransMapping.qty();
        eInvoiceReportTmp_MX.TypeOfPrint = this.typeOfPrint();
        eInvoiceReportTmp_MX.CompanyName = this.companyName();

        eInvoiceReportTmp_MX.insert();

        this.createLinesFromMarkup(eInvoiceTransMapping.markupTransList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    private void processRecord()
    {
        EInvoiceJour_MX electronicInvoiceJour_MX;

        electronicInvoiceJour_MX = EInvoiceJour_MX::find(recId);
        eInvoiceJourMapping = this.constructMap(electronicInvoiceJour_MX);

        xmlEInvReader = EInvoiceXMLDocReader_MX::construct(electronicInvoiceJour_MX);

        while (eInvoiceJourMapping.nextLine())
        {
            eInvoiceTransMapping = eInvoiceJourMapping.currentLine();
            this.insertRecord();
        }

        this.createLinesFromMarkup(eInvoiceJourMapping.markupTransList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by  at runtime.
    /// The method should compute data and populate the data tables that will be returned to . Note that
    /// this is a framework class. Customizing this class may cause problems with future upgrades to the
    /// software.
    /// </remarks>
    public void processReport()
    {
        EInvoiceReportContract_MX contract;

        companyInfo = CompanyInfo::find();
        contract = this.parmDataContract() as EInvoiceReportContract_MX;
        recId = contract.parmRecordId();
        printCopyOriginal =  contract.parmPrintCopyOriginal();

        this.processRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    private Amount totalAmount()
    {
        return abs(eInvoiceJourMapping.totalAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeOfPrint</Name>
				<Source><![CDATA[
    private str typeOfPrint()
    {
        if (printCopyOriginal == PrintCopyOriginal::Copy)
        {
            return "@SYS35043";
        }
        else
        {
            return "@SYS5301";
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
