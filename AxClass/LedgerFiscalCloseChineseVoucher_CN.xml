<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFiscalCloseChineseVoucher_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerFiscalCloseChineseVoucher_CN</c> class is consumed by general ledger year-end close processing to
/// perform operations related to the chinese voucher feature.
/// </summary>
internal final class LedgerFiscalCloseChineseVoucher_CN
{
    private Voucher_CN voucherNumber_CN;
    private LedgerVoucherTypeId_CN ledgerVoucherTypeId_CN;
    private FiscalCalendarYear fiscalCalendarYear;
    private LedgerParameters ledgerParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForFiscalYearClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>LedgerFiscalCloseChineseVoucher_CN</c> class.
    /// </summary>
    /// <param name = "_voucherNumber_CN">The chinese voucher number.</param>
    /// <param name = "_ledgerVoucherTypeId_CN">The <c>LedgerVoucherType_CN</c> table record id for the chinese voucher type associated
    /// with the chinese voucher number.
    /// </param>
    /// <param name = "_fiscalCalendarYear">The <c>FiscalCalendarYear</c> table record of the closing year.</param>
    /// <param name = "_ledgerParameters">The <c>LedgerParameters></c>LedgerParameters> table record for the current company.</param>
    /// <returns>An instance of the <c>LedgerFiscalCloseChineseVoucher_CN</c> class.</returns>
    public static LedgerFiscalCloseChineseVoucher_CN newForFiscalYearClose(
        Voucher_CN _voucherNumber_CN,
        LedgerVoucherTypeId_CN _ledgerVoucherTypeId_CN,
        FiscalCalendarYear _fiscalCalendarYear,
        LedgerParameters _ledgerParameters)
    {
        return new LedgerFiscalCloseChineseVoucher_CN(
            _voucherNumber_CN,
            _ledgerVoucherTypeId_CN,
            _fiscalCalendarYear,
            _ledgerParameters
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        Voucher_CN _voucherNumber_CN,
        LedgerVoucherTypeId_CN _ledgerVoucherTypeId_CN,
        FiscalCalendarYear _fiscalCalendarYear,
        LedgerParameters _ledgerParameters)
    {
        this.voucherNumber_CN = _voucherNumber_CN;
        this.ledgerVoucherTypeId_CN = _ledgerVoucherTypeId_CN;
        this.fiscalCalendarYear = _fiscalCalendarYear;
        this.ledgerParameters = _ledgerParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChineseVoucher</Name>
				<Source><![CDATA[
    public boolean validateChineseVoucher(OpeningMethod _openingMethod)
    {
        boolean isValid = true;

        if (!ledgerVoucherTypeId_CN)
        {
            // Voucher type must be filled in
            isValid = checkFailed(strfmt("@SYS26332", "@GLS54929"));
        }

        LedgerVoucherTypeRefRecId_CN ledgerVoucherTypeRecId_CN = LedgerVoucherType_CN::findByNaturalKey(ledgerVoucherTypeId_CN).RecId;

        if (!ledgerVoucherTypeRecId_CN)
        {
            // Voucher type does not exist
            isValid = checkFailed(strfmt("@GLS54460", ledgerVoucherTypeId_CN));
        }
   
        if (!voucherNumber_CN)
        {
            // Chinese voucher number must be filled in
            isValid = checkFailed(strfmt("@SYS26332", "@GLS60245"));
        }
   
        if (!NumberSeq::numCheckFormat(
            voucherNumber_CN,
            NumberSequenceTable::find(LedgerVoucherType_CN::find(ledgerVoucherTypeRecId_CN).NumberSequenceTable)))
        {
            isValid = false;
        }

        FiscalCalendarPeriod openingFiscalCalendarPeriod = LedgerFiscalCalendar::findNextPeriodByClosingPeriodStartDate(
            Ledger::fiscalCalendar(),
            fiscalCalendarYear.EndDate);

        GeneralJournalEntry generalJournalEntry = GeneralLedgerExtension::findVoucher_CN(
            ledgerVoucherTypeRecId_CN,
            voucherNumber_CN,
            openingFiscalCalendarPeriod.StartDate,
            FiscalPeriodType::Opening);

        if (generalJournalEntry && !ledgerParameters.DeleteOpening && (_openingMethod != OpeningMethod::Reset))
        {
            // Voucher number already been used
            isValid = checkFailed(strfmt("@GLS60257", voucherNumber_CN));
        }

        if (ledgerParameters.PeriodClosingPosting
            && _openingMethod != OpeningMethod::Reset
            && !ledgerParameters.DeleteOpening)
        {
            generalJournalEntry = GeneralLedgerExtension::findVoucher_CN(
                ledgerVoucherTypeRecId_CN,
                voucherNumber_CN,
                fiscalCalendarYear.EndDate,
                FiscalPeriodType::Closing);

            if (FeatureStateProvider::isFeatureEnabled(LedgerFiscalCloseAvoidDupErrForVoucher_CNFlight::instance()))
            {
                if (generalJournalEntry)
                {
                    // Voucher number already been used
                    isValid = checkFailed(strfmt("@GLS60257", voucherNumber_CN));
                }
            }
            else
            {
                if (!generalJournalEntry)
                {
                    // Voucher number already been used
                    isValid = checkFailed(strfmt("@GLS60257", voucherNumber_CN));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChineseVoucherUsedForClosingPeriod</Name>
				<Source><![CDATA[
    public void setChineseVoucherUsedForClosingPeriod()
    {
        if (LedgerParameters::isChineseVoucher_CN())
        {
            if (ledgerParameters.PeriodClosingPosting)
            {
                GeneralJournalEntry generalJournalEntry;
                GeneralJournalEntry_W generalJournalEntryW;
                FiscalCalendarPeriod fiscalCalendarPeriod;

                LedgerVoucherTypeRefRecId_CN ledgerVoucherTypeRecId_CN = LedgerVoucherType_CN::findByNaturalKey(ledgerVoucherTypeId_CN).RecId;

                select firstOnly RecId from generalJournalEntry
                    where generalJournalEntry.AccountingDate == fiscalCalendarYear.EndDate
                        && generalJournalEntry.Ledger == Ledger::current()
                    exists join generalJournalEntryW
                        where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
                            && generalJournalEntryW.LedgerVoucherType_CN == ledgerVoucherTypeRecId_CN
                            && generalJournalEntryW.Voucher_CN == voucherNumber_CN
                    exists join recId from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                            && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating;

                if (generalJournalEntry)
                {
                    NumberSeq_Voucher_CN::isUsed(
                        LedgerVoucherType_CN::find(ledgerVoucherTypeRecId_CN).NumberSequenceTable,
                        voucherNumber_CN,
                        fiscalCalendarYear.EndDate,
                        FiscalPeriodType::Closing);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>