<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>tamVendRebateTableStatusType_Approved</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMVendRebateTableStatusType_Approved</c> class holds the rebate processes specific to rebate with status 'Approved'.
/// </summary>
public class tamVendRebateTableStatusType_Approved extends TAMVendRebateTableStatusType
{
    TAMVendRebatePaymentPost    tamVendRebatePaymentPost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ledgerPostingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate corrected amount.
    /// </summary>
    /// <returns>
    /// The corrected rebate amount.
    /// </returns>
    public Amount ledgerPostingAmount()
    {
        return tamVendRebateTable.CorrectedRebateAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the rebate deletion process.
    /// </summary>
    public void runDeleted()
    {
        TAMVendRebateTable tamVendRebateTableLocal;
        #OCCRetryCount

        try
        {
            ttsbegin;

            tamVendRebateTableLocal = TAMVendRebateTable::findByRecId(tamVendRebateTable.RecId, true);

            tamVendRebateTableLocal.rebateTableProcess().runDeleted();

            tamVendRebateTableLocal.doDelete();

            ttscommit;
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the rebate payment process.
    /// </summary>
    public void runPayment()
    {
        TAMVendRebateTable tamVendRebateTableLocal;
        ttsbegin;

        tamVendRebateTableLocal = TAMVendRebateTable::findByRecId(tamVendRebateTable.RecId, true);

        tamVendRebateTableLocal.rebateTableProcess().runPayment();

        if (tamVendRebateTableLocal.RebateBalance == 0)
        {
            this.setFinalStatus();
        }

        if (tamVendRebateTableLocal.validateWrite())
        {
            tamVendRebateTableLocal.update();
        }
        else
        {
            error("@SYS104318");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the rebate status as 'Processed'.
    /// </summary>
    public void setNextStatus()
    {
        tamVendRebateTable.RebateStatus = TAMVendRebateStatus::Processed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamVendRebateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate status as 'Approved'.
    /// </summary>
    /// <returns>
    /// The rebate status.
    /// </returns>
    public TAMVendRebateStatus tamVendRebateStatus()
    {
        return TAMVendRebateStatus::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates changes to a field in the <c>TAMVendRebateTable</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name to Validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = true;

        ret = ret && super(_fieldName, _arrayIndex);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class.
    /// </summary>
    /// <returns>
    /// A class instance.
    /// </returns>
    public static TAMVendRebateTableStatusType_Approved construct()
    {
        return new TAMVendRebateTableStatusType_Approved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeProcessed</Name>
				<Source><![CDATA[
    public void finalizeProcessed()
    {
        if (tamVendRebatePaymentPost.parmInvoiceId())
        {
            tamVendRebatePaymentPost.postVendorInvoice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        tamVendRebatePaymentPost =  new TAMVendRebatePaymentPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessed</Name>
				<Source><![CDATA[
    public void runProcessed(boolean _forAdjustment = false)
    {
        tamVendRebatePaymentPost.main(tamVendRebateTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>