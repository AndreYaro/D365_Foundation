<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB70_JmgPinCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReleaseUpdateDB70_JmgPinCode</c> class contains upgrade scripts related to JmgEmployee.PINCode encryption.
/// </summary>
class ReleaseUpdateDB70_JmgPinCode extends ReleaseUpdateDB
{
    private const str upgradeTableName = 'JmgEmployee_PINCodeUpgrade';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>moduleName</Name>
				<Source><![CDATA[
    public ReleaseUpdateModule moduleName()
    {
        return "@SYS135671";
    }

]]></Source>
			</Method>
			<Method>
				<Name>myVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// The script runs in any system having version <= CTP8.
    /// </summary>
    /// <returns>Script version.</returns>
    public sysReleasedVersion myVersion()
    {
        return sysReleasedVersion::R1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preSyncHashPINCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes before DB sync process. Reads employee`s PIN codes, hashes them and stores in separate table JmgEmployee_PINCodeUpgrade for later consumption by post-sync script.
    /// </summary>
    [
        UpgradeScriptDescriptionAttribute(classStr(ReleaseUpdateDB70_JmgPinCode)),
        UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
        UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript), // Shared script runs only once; Partition script runs in every Partition; Standard script runs in every Company.
        UpgradeScriptTableAttribute(tableStr(JmgEmployee), false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void preSyncHashPINCode()
    {
        Connection sessionConn = new Connection();

        // To protect against undesirable behavior when script executes several times.
        if (this.pinCodeColumnExists(sessionConn))
        {
            // Create a table in database which holds hashed PIN codes.
            this.dropJmgEmployeeUpgradeTable(sessionConn);
            this.createJmgEmployeeUpgradeTable(sessionConn);

            // JmgEmployee.PINCodeHash.
            str hashFieldName = new DictField(tableNum(JmgEmployee), fieldNum(JmgEmployee, PINCodeHash)).name(DbBackend::Sql);
            int hashEdtSize   = new DictType(extendedTypeNum(JmgEmployeePINCodeHash)).stringLen();

            // JmgEmployee.PINCodeSalt.
            str saltFieldName = new DictField(tableNum(JmgEmployee), fieldNum(JmgEmployee, PINCodeSalt)).name(DbBackend::Sql);
            int saltEdtSize   = new DictType(extendedTypeNum(JmgEmployeePINCodeSalt)).stringLen();

            // JmgEmployee.PINCodeIterations.
            str iterationsFieldName = new DictField(tableNum(JmgEmployee), fieldNum(JmgEmployee, PINCodeIterations)).name(DbBackend::Sql);

            // Create new columns in JmgEmployee_PINCodeUpgrade table.
            this.createStrColumn(sessionConn, upgradeTableName, hashFieldName, hashEdtSize);
            this.createStrColumn(sessionConn, upgradeTableName, saltFieldName, saltEdtSize);
            this.createIntColumn(sessionConn, upgradeTableName, iterationsFieldName);

            // Read JmgEmployee records and perform update.
            str sqlSelectStatement = 'SELECT RECID, PINCODE FROM JMGEMPLOYEE';            

            ResultSet resultSet = this.executeSelectStatement(sessionConn, sqlSelectStatement);
            while (resultSet.next())
            {
                // Values from DB.
                RecId       recId   = resultSet.getInt64(1);
                JmgPINCode  pinCode = resultSet.getString(2);

                // Generate hashed PIN code.
                JmgEmployeePINCodeIterations    iterations  = 1000;
                JmgEmployeePINCodeSalt          salt        = CryptoServiceProvider::generateSalt();
                JmgEmployeePINCodeHash          hash        = CryptoServiceProvider::computeSaltedHash(pinCode, salt, iterations);

                // Insert hashed PIN codes in upgrade table.
                str insertPINCodeStatement = strFmt('INSERT %1 (RECID, %2, %3, %4) VALUES (%5, N\'%6\', N\'%7\', %8)',
                    upgradeTableName,
                    hashFieldName,
                    saltFieldName,
                    iterationsFieldName,
                    recId,
                    hash,
                    salt,
                    iterations);

                this.executeUpdateStatement(sessionConn, insertPINCodeStatement);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncHashPINCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after DB sync process executed. Reads hashed employee`s passwords from JmgEmployee_PINCodeUpgrade table and puts them into JmgEmployee table (which now has corresponding columns generated).
    /// </summary>
    [
        UpgradeScriptDescriptionAttribute(classStr(ReleaseUpdateDB70_JmgPinCode)),
        UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
        UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript), // Shared script runs only once; Partition script runs in every Partition; Standard script runs in every Company.
        UpgradeScriptTableAttribute(tableStr(JmgEmployee), false, false, true, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncHashPINCode()
    {
        Connection sessionConn = new Connection();

        // JmgEmployee field names.
        str hashFieldName = new DictField(tableNum(JmgEmployee), fieldNum(JmgEmployee, PINCodeHash)).name(DbBackend::Sql);
        str saltFieldName = new DictField(tableNum(JmgEmployee), fieldNum(JmgEmployee, PINCodeSalt)).name(DbBackend::Sql);
        str iterationsFieldName = new DictField(tableNum(JmgEmployee), fieldNum(JmgEmployee, PINCodeIterations)).name(DbBackend::Sql);

        // Read hashed PIN codes.
        str sqlSelectStatement = strFmt('SELECT RECID, %1, %2, %3 FROM %4', hashFieldName, saltFieldName, iterationsFieldName, upgradeTableName);

        ResultSet resultSet = this.executeSelectStatement(sessionConn, sqlSelectStatement);
        while (resultSet.next())
        {
            // Values from DB.
            RecId recId = resultSet.getInt64(1);
            JmgEmployeePinCodeHash hash = resultSet.getString(2);
            JmgEmployeePinCodeSalt salt = resultSet.getString(3);
            JmgEmployeePinCodeIterations iterations = resultSet.getInt(4);

            str updatePINCodeStatement = strFmt('UPDATE JMGEMPLOYEE SET %1 = N\'%2\', %3 = N\'%4\', %5 = %6 WHERE RECID = %7',
                hashFieldName,
                hash,
                saltFieldName,
                salt,
                iterationsFieldName,
                iterations,
                recId);

            this.executeUpdateStatement(sessionConn, updatePINCodeStatement);
        }

        this.dropJmgEmployeeUpgradeTable(sessionConn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pinCodeColumnExists</Name>
				<Source><![CDATA[
    private boolean pinCodeColumnExists(Connection _connection)
    {
        str tableName = new DictTable(tableNum(JmgEmployee)).name(DbBackend::Sql);

        str sqlSelectStatement = strFmt('SELECT * FROM sys.columns where Name = N\'%1\' AND Object_ID = OBJECT_ID(N\'%2\')', 'PINCODE', tableName);
        ResultSet resultSet = this.executeSelectStatement(_connection, sqlSelectStatement);

        return resultSet.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJmgEmployeeUpgradeTable</Name>
				<Source><![CDATA[
    private void createJmgEmployeeUpgradeTable(Connection _connection)
    {
        str sqlStatement = strFmt('IF NOT EXISTS (SELECT * FROM sys.tables where Name = N\'%1\') BEGIN CREATE TABLE %1 ([RECID] [bigint] NOT NULL) END', upgradeTableName);

        this.executeUpdateStatement(_connection, sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropJmgEmployeeUpgradeTable</Name>
				<Source><![CDATA[
    private void dropJmgEmployeeUpgradeTable(Connection _connection)
    {
        str sqlStatement = strFmt('IF EXISTS (SELECT * FROM sys.tables where Name = N\'%1\') BEGIN DROP TABLE %1 END', upgradeTableName);

        this.executeUpdateStatement(_connection, sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStrColumn</Name>
				<Source><![CDATA[
    private void createStrColumn(Connection _connection, str _tableName, str _fieldName, int _edtSize)
    {
        str sqlStatement = strFmt('IF NOT EXISTS (SELECT * FROM sys.columns where Name = N\'%1\' AND Object_ID = OBJECT_ID(N\'%2\')) BEGIN ALTER TABLE %2 ADD %1 nvarchar(%3) NOT NULL DEFAULT 0 END', _fieldName, _tableName, _edtSize);

        this.executeUpdateStatement(_connection, sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIntColumn</Name>
				<Source><![CDATA[
    private void createIntColumn(Connection _connection, str _tableName, str _fieldName)
    {
        str sqlStatement = strFmt('IF NOT EXISTS (SELECT * FROM sys.columns where Name = N\'%1\' AND Object_ID = OBJECT_ID(N\'%2\')) BEGIN ALTER TABLE %2 ADD %1 int NOT NULL DEFAULT 0 END', _fieldName, _tableName);

        this.executeUpdateStatement(_connection, sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeUpdateStatement</Name>
				<Source><![CDATA[
    private void executeUpdateStatement(Connection _connection, str _sqlStatement)
    {
        Statement statement = _connection.createStatement();

        new SqlStatementExecutePermission(_sqlStatement).assert();
        statement.executeUpdate(_sqlStatement);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSelectStatement</Name>
				<Source><![CDATA[
    private ResultSet executeSelectStatement(Connection _connection, str _sqlStatement)
    {
        Statement statement = _connection.createStatement();

        new SqlStatementExecutePermission(_sqlStatement).assert();
        ResultSet resultSet = statement.executeQuery(_sqlStatement);
        CodeAccessPermission::revertAssert();

        return resultSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>