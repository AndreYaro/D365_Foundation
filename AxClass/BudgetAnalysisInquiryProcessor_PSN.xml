<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAnalysisInquiryProcessor_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetAnalysisInquiryProcessor_PSN</c> class contains the main queries and calculation logic for retrieving budget amounts.
/// </summary>
public class BudgetAnalysisInquiryProcessor_PSN
{
    BudgetAnalysisInquiryHelper_PSN         budgetAnalysisInquiryHelper;

    // TempDB tables buffers
    BudgetAnalysisSummaryTmp_PSN            budgetAnalysisSummaryTmp;
    BudgetAnalysisDimProcessingTmp_PSN      budgetAnalysisDimProcessingTmp;
    BudgetAnalysisAmountProcessingTmp_PSN   budgetAnalysisAmountProcessingTmp,
                                            budgetAnalysisAmountProcessingTmpForCF;
    RefRecId                                ledgerRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAttributeValueIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an exists joined datasource of the <c>DimensionAttributeLevelValue</c> table to the passed in query and sets a
    /// range on the <c>DimensionAttributeValue</c> field.
    /// </summary>
    /// <param name="_query">
    /// The query to add the range to.
    /// </param>
    /// <param name="_attributeValueRecId">
    /// The value of the range to add to the query.
    /// </param>
    /// <remarks>
    /// It is expected that the query passed in contains a datasource of the <c>DimensionAttributeLevelValueAllView</c> view.
    /// </remarks>
    private void addAttributeValueIdRange(Query _query, RecId _attributeValueRecId)
    {
        QueryBuildDataSource qbdsAttrLevelValueAllView;
        QueryBuildDataSource qbdsAttrLevelValue;

        qbdsAttrLevelValueAllView = _query.dataSourceTable(tableNum(DimensionAttributeLevelValueAllView));

        if (qbdsAttrLevelValueAllView)
        {
            qbdsAttrLevelValue = qbdsAttrLevelValueAllView.addDataSource(tableNum(DimensionAttributeLevelValue));
            qbdsAttrLevelValue.joinMode(JoinMode::ExistsJoin);
            qbdsAttrLevelValue.addLink(fieldNum(DimensionAttributeLevelValueAllView, DimensionAttributeValueGroup), fieldNum(DimensionAttributeLevelValue, DimensionAttributeValueGroup));
            qbdsAttrLevelValue.addRange(fieldNum(DimensionAttributeLevelValue, DimensionAttributeValue)).value(int642str(_attributeValueRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualsByAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisSummaryTmp_PSN</c> table with aggregated actuals associated with actual expenditure transactions from ledger.
    /// </summary>
    /// <param name="_accountType">
    /// The <c>DimensionLedgerAccountType</c> base enumaration value to indicate which main account type the transactions should be filtered for.
    /// </param>
    private void getActualsByAccountType(DimensionLedgerAccountType _accountType)
    {
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalEntry         generalJournalEntry;
        MainAccount                 mainAccount;

        insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp
            group by budgetAnalysisDimProcessingTmp.DimensionAttributeValue
            where budgetAnalysisDimProcessingTmp.LedgerDimensionType == LedgerDimensionType::Account

            join sum(AccountingCurrencyAmount)
            from generalJournalAccountEntry
            where
                generalJournalAccountEntry.LedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension

            join mainAccount
            where
                mainAccount.RecId == budgetAnalysisDimProcessingTmp.MainAccount &&
                mainAccount.Type  == _accountType

            join generalJournalEntry
            where
                generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                generalJournalEntry.AccountingDate             >= budgetAnalysisInquiryHelper.parmStartDate() &&
                generalJournalEntry.AccountingDate             <= budgetAnalysisInquiryHelper.parmEndDate() &&
                generalJournalEntry.PostingLayer               == budgetAnalysisInquiryHelper.parmPostingLayer() &&
                generalJournalEntry.Ledger                     == ledgerRecId;

        // populate summary tmpDB table for the grid
        switch (_accountType)
        {
            case DimensionLedgerAccountType::Expense:
                update_recordset budgetAnalysisSummaryTmp
                setting ExpenseActuals = budgetAnalysisAmountProcessingTmp.Amount
                join budgetAnalysisAmountProcessingTmp
                where budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmp.DimensionAttributeValue;
                break;

            case DimensionLedgerAccountType::Revenue:
                update_recordset budgetAnalysisSummaryTmp
                setting RevenueActuals = (budgetAnalysisAmountProcessingTmp.Amount * -1)
                join budgetAnalysisAmountProcessingTmp
                where budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmp.DimensionAttributeValue;
                break;
        }

        delete_from budgetAnalysisAmountProcessingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualsCarryForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisSummaryTmp_PSN</c> table with aggregated actuals associated with actual expenditure transactions from budget control.
    /// </summary>
    private void getActualsCarryForward()
    {
        BudgetSourceTracking                budgetSourceTracking;
        BudgetSourceTrackingDetail          budgetSourceTrackingDetail;

        // retrieve sum of budget source tracking transaction
        insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp
            group by budgetAnalysisDimProcessingTmp.DimensionAttributeValue

            join sum(AccountingCurrencyAmount)
            from budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.IsCarryForward              == NoYes::Yes &&
                budgetSourceTrackingDetail.PrimaryLedger               == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId        == budgetSourceTrackingDetail.BudgetSourceTracking &&
                budgetSourceTracking.Category     == BudgetControlCategory::ActualExpenditure &&
                budgetSourceTracking.Status       == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate();

        // populate summary tmpDB table for the grid
        update_recordset budgetAnalysisSummaryTmp
            setting RevenueActuals = budgetAnalysisAmountProcessingTmp.Amount
            join budgetAnalysisAmountProcessingTmp
            where
                budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmp.DimensionAttributeValue;

        delete_from budgetAnalysisAmountProcessingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualsLessCarryForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisSummaryTmp_PSN</c> table with aggregated actual amounts by financial dimensions filter by budget category less carry-forward.
    /// </summary>
    private void getActualsLessCarryForward()
    {
        BudgetSourceTracking                budgetSourceTracking;
        BudgetSourceTrackingDetail          budgetSourceTrackingDetail;

        // retrieve sum of budget source tracking transaction
        insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp
            group by budgetAnalysisDimProcessingTmp.DimensionAttributeValue

            join sum(AccountingCurrencyAmount)
            from budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.IsCarryForward              == NoYes::No &&
                budgetSourceTrackingDetail.PrimaryLedger               == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId        == budgetSourceTrackingDetail.BudgetSourceTracking &&
                budgetSourceTracking.Category     == BudgetControlCategory::ActualExpenditure &&
                budgetSourceTracking.Status       == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate();

        // populate summary tmpDB table for the grid
        update_recordset budgetAnalysisSummaryTmp
            setting ExpenseActuals = budgetAnalysisAmountProcessingTmp.Amount
            join budgetAnalysisAmountProcessingTmp
            where
                budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmp.DimensionAttributeValue;

        //Clean the temp buffer
        delete_from budgetAnalysisAmountProcessingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetAnalysisBalanceSummaryList</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates and returns a list of <c>BudgetAnalysisBalance_PSN</c> object lists from <c>BudgetAnalysisSummaryTmp_PSN</c> table buffer.
    /// </summary>
    /// <returns>
    /// A list of <c>BudgetAnalysisBalance_PSN</c> objects.
    /// </returns>
    private List getBudgetAnalysisBalanceSummaryList()
    {
        BudgetAnalysisBalance_PSN   budgetAnalysisBalance;
        List                        budgetAnalysisBalancesList;

        budgetAnalysisBalancesList = new List(Types::Class);

        while select budgetAnalysisSummaryTmp
        {
            budgetAnalysisBalance = new BudgetAnalysisBalance_PSN();
            budgetAnalysisBalance.parmDimensionName(budgetAnalysisSummaryTmp.DimensionName);
            budgetAnalysisBalance.parmDimensionValue(budgetAnalysisSummaryTmp.DimensionValue);
            budgetAnalysisBalance.parmDimensionAttributeValueRecId(budgetAnalysisSummaryTmp.DimensionAttributeValue);
            budgetAnalysisBalance.parmOriginalBudget(budgetAnalysisSummaryTmp.OriginalBudget);
            budgetAnalysisBalance.parmRevisedBudget(budgetAnalysisSummaryTmp.RevisedBudget);
            budgetAnalysisBalance.parmEncumbrance(budgetAnalysisSummaryTmp.Encumbrance);
            budgetAnalysisBalance.parmPreEncumbrance(budgetAnalysisSummaryTmp.PreEncumbrance);
            budgetAnalysisBalance.parmExpenseActuals(budgetAnalysisSummaryTmp.ExpenseActuals);
            budgetAnalysisBalance.parmRevenueActuals(budgetAnalysisSummaryTmp.RevenueActuals);
            budgetAnalysisBalance.parmRemainingBudget(budgetAnalysisSummaryTmp.RemainingBudget);
            budgetAnalysisBalance.parmPercentUsed(budgetAnalysisSummaryTmp.PercentUsed);
            budgetAnalysisBalancesList.addEnd(budgetAnalysisBalance);
        }

        return budgetAnalysisBalancesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetAnalysisLedgerDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisDimProcessingTmp_PSN</c> table with ledger dimensions by building and executing the query based on given parent attributes.
    /// </summary>
    /// <param name="_budgetAnalysisDimensionNode">
    /// A <c>BudgetAnalysisDimensionNode_PSN</c> class instance representing the currently selected node in the tree.
    /// </param>
    protected void getBudgetAnalysisLedgerDimensions(BudgetAnalysisDimensionNode_PSN _budgetAnalysisDimensionNode)
    {
        ListEnumerator                      attributeIDsListEnumerator;
        QueryBuildDataSource                qbdsDimensionAttributeValueCombination, qbdsDimensionAttributeLevelValueAllView, qbdsDimensionHierarchyLevel;
        QueryBuildRange                     qbrDimensionHierarchyLevel;
        Query                               dimensionQuery;
        QueryRun                            queryRun;
        DimensionAttributeLevelValueAllView dimensionAttributeLevelValueAllView;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        RecordInsertList                    dimensionsInsertList = new RecordInsertList(tableNum(BudgetAnalysisDimProcessingTmp_PSN), false, false, false, false, true, budgetAnalysisDimProcessingTmp);

        delete_from budgetAnalysisDimProcessingTmp;

        dimensionQuery = new Query();

        qbdsDimensionAttributeValueCombination = dimensionQuery.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbdsDimensionAttributeValueCombination.addSelectionField(fieldNum(DimensionAttributeValueCombination, RecId));
        qbdsDimensionAttributeValueCombination.addSelectionField(fieldNum(DimensionAttributeValueCombination, LedgerDimensionType));
        qbdsDimensionAttributeValueCombination.addSelectionField(fieldNum(DimensionAttributeValueCombination, MainAccount));
        qbdsDimensionAttributeValueCombination.addRange(fieldNum(DimensionAttributeValueCombination, LedgerDimensionType)).value(strFmt('((LedgerDimensionType == %1) || (LedgerDimensionType == %2) || (LedgerDimensionType == %3))',
                                                                                                                                                    enum2int(LedgerDimensionType::Budget), enum2int(LedgerDimensionType::BudgetControl), enum2int(LedgerDimensionType::Account)));
        qbdsDimensionAttributeLevelValueAllView = qbdsDimensionAttributeValueCombination.addDataSource(tableNum(DimensionAttributeLevelValueAllView));
        qbdsDimensionAttributeLevelValueAllView.addSelectionField(fieldNum(DimensionAttributeLevelValueAllView, AttributeValueRecId));
        qbdsDimensionAttributeLevelValueAllView.joinMode(JoinMode::InnerJoin);
        qbdsDimensionAttributeLevelValueAllView.addLink(fieldNum(DimensionAttributeValueCombination, RecId), fieldNum(DimensionAttributeLevelValueAllView, ValueCombinationRecId));

        // Filter the results to the selected dimension set.
        qbdsDimensionHierarchyLevel = qbdsDimensionAttributeLevelValueAllView.addDataSource(tableNum(DimensionHierarchyLevel));
        qbdsDimensionHierarchyLevel.joinMode(JoinMode::ExistsJoin);
        qbdsDimensionHierarchyLevel.addLink(fieldNum(DimensionAttributeLevelValueAllView, DimensionAttribute), fieldNum(DimensionHierarchyLevel, DimensionAttribute));
        qbdsDimensionHierarchyLevel.addRange(fieldNum(DimensionHierarchyLevel, DimensionHierarchy)).value(int642str(budgetAnalysisInquiryHelper.parmDimensionHierarchyRecId()));
        qbrDimensionHierarchyLevel = qbdsDimensionHierarchyLevel.addRange(fieldNum(DimensionHierarchyLevel, Level));

        if (_budgetAnalysisDimensionNode.parmIsLeafNode())
        {
            qbrDimensionHierarchyLevel.value(int2str(_budgetAnalysisDimensionNode.parmCurrentLevel()));
        }
        else
        {
            qbrDimensionHierarchyLevel.value(int2str(_budgetAnalysisDimensionNode.parmCurrentLevel() + 1));
        }

        if (!_budgetAnalysisDimensionNode.parmParentageList().empty())
        {
            // Filter the results to only return ledgerDimension combinations
            // that contain the parent node(s) of the selected node.
            attributeIDsListEnumerator = _budgetAnalysisDimensionNode.parmParentageList().getEnumerator();
            while (attributeIDsListEnumerator.moveNext())
            {
                this.addAttributeValueIdRange(dimensionQuery, attributeIDsListEnumerator.current());
            }
        }

        queryRun = new QueryRun(dimensionQuery);

        while (queryRun.next())
        {
            dimensionAttributeLevelValueAllView = queryRun.get(tableNum(DimensionAttributeLevelValueAllView));
            dimensionAttributeValueCombination  = queryRun.get(tableNum(DimensionAttributeValueCombination));

            if (_budgetAnalysisDimensionNode.parmIsLeafNode()
                || _budgetAnalysisDimensionNode.parmChildMap().exists(dimensionAttributeLevelValueAllView.AttributeValueRecId))
            {
                budgetAnalysisDimProcessingTmp.DimensionAttributeValue  = dimensionAttributeLevelValueAllView.AttributeValueRecId;
                budgetAnalysisDimProcessingTmp.LedgerDimension          = dimensionAttributeValueCombination.RecId;
                budgetAnalysisDimProcessingTmp.LedgerDimensionType      = dimensionAttributeValueCombination.LedgerDimensionType;
                budgetAnalysisDimProcessingTmp.MainAccount              = dimensionAttributeValueCombination.MainAccount;
                dimensionsInsertList.add(budgetAnalysisDimProcessingTmp);
            }
        }

        dimensionsInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetAnalysisSummaryFromServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates a packed list of the <c>BudgetPeriodBalance</c> objects which have the aggregated
    ///  <c>AmountMST</c> values by executing queries on database.
    /// </summary>
    /// <param name="_budgetAnalysisDimensionNodeCon">
    /// A container with a packed instances of the <c>BudgetAnalysisDimensionNode_PSN</c> class.
    /// </param>
    /// <returns>
    /// A container with a packed list of instances of the <c>BudgetAnalysisBalance_PSN</c> class.
    /// </returns>
    public container getBudgetAnalysisSummaryFromServer(container _budgetAnalysisDimensionNodeCon)
    {
        MapEnumerator                       childAttributesMapEnumerator;
        BudgetAnalysisDimensionNode_PSN     budgetAnalysisDimensionNode;
        RecordInsertList                    budgetAnalysisSummaryTmpList;

        budgetAnalysisDimensionNode = BudgetAnalysisDimensionNode_PSN::create(_budgetAnalysisDimensionNodeCon);

        budgetAnalysisSummaryTmpList = new RecordInsertList(tableNum(BudgetAnalysisSummaryTmp_PSN), false, false, false, false, true, budgetAnalysisSummaryTmp);

        if (budgetAnalysisInquiryHelper != null && budgetAnalysisDimensionNode != null)
        {
            budgetAnalysisSummaryTmp.recordLevelSecurity(false);
            delete_from budgetAnalysisSummaryTmp;

            if (!budgetAnalysisDimensionNode.parmIsLeafNode())
            {
                //get top level attribute values
                childAttributesMapEnumerator    =   budgetAnalysisDimensionNode.parmChildMap().getEnumerator();

                // set up summary tempDB table
                while (childAttributesMapEnumerator.moveNext())
                {
                    budgetAnalysisSummaryTmp.DimensionAttributeValue = childAttributesMapEnumerator.currentKey();
                    budgetAnalysisSummaryTmp.DimensionValue = conPeek(childAttributesMapEnumerator.currentValue(), 1);
                    budgetAnalysisSummaryTmp.DimensionName = conPeek(childAttributesMapEnumerator.currentValue(), 2);
                    budgetAnalysisSummaryTmpList.add(budgetAnalysisSummaryTmp);
                }
                budgetAnalysisSummaryTmpList.insertDatabase();
            }
            else
            {
                budgetAnalysisSummaryTmp.DimensionAttributeValue = budgetAnalysisDimensionNode.parmDimAttributeValueRecId();
                budgetAnalysisSummaryTmp.DimensionValue = budgetAnalysisDimensionNode.parmDimAttributeValue();
                budgetAnalysisSummaryTmp.DimensionName = budgetAnalysisDimensionNode.parmDimAttributeName();
                budgetAnalysisSummaryTmp.doInsert();
            }

            // get the ledger dimensions in the temp buffer
            this.getBudgetAnalysisLedgerDimensions(budgetAnalysisDimensionNode);

            // get summarized values by dimensions basd on selected column set
            switch (budgetAnalysisInquiryHelper.parmColumnSet())
            {
                case BudgetAnalysisColumnSet_PSN::ExpenseBudget:
                    this.getOriginalBudget(BudgetType::Expense);
                    this.getRevisedBudget(BudgetType::Expense);
                    this.getActualsByAccountType(DimensionLedgerAccountType::Expense);
                    this.getEncumbrance();
                    this.getPreEncumbrance();
                    this.getCalculatedColumns();
                    break;

                case BudgetAnalysisColumnSet_PSN::RevenueBudget:
                    this.getOriginalBudget(BudgetType::Revenue);
                    this.getRevisedBudget(BudgetType::Revenue);
                    this.getActualsByAccountType(DimensionLedgerAccountType::Revenue);
                    this.getCalculatedColumns();
                    break;

                case BudgetAnalysisColumnSet_PSN::OperatingResults:
                    this.getActualsByAccountType(DimensionLedgerAccountType::Expense);
                    this.getActualsByAccountType(DimensionLedgerAccountType::Revenue);
                    this.getCalculatedColumns();
                    break;

                case BudgetAnalysisColumnSet_PSN::ExpenseBudgetWithCarryForward:
                    this.getRevisedBudgetLessCarryForward();
                    this.getActualsLessCarryForward();
                    this.getEncumbranceForExpenseWithCarryForward(NoYes::No);
                    this.getCarryForwardBudget();
                    this.getActualsCarryForward();
                    this.getEncumbranceForExpenseWithCarryForward(NoYes::Yes);
                    this.getCalculatedColumns();
                    break;
            }
        }

        // list containing BudgetAnalysisBalance instances with aggregated AmountMST.
        return this.getBudgetAnalysisBalanceSummaryList().pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculatedColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisSummaryTmp_PSN</c> table with calculated columns by selected column set.
    /// </summary>
    private void getCalculatedColumns()
    {
        switch (budgetAnalysisInquiryHelper.parmColumnSet())
        {
            case BudgetAnalysisColumnSet_PSN::ExpenseBudget:
                update_recordset budgetAnalysisSummaryTmp
                    setting RemainingBudget = (budgetAnalysisSummaryTmp.RevisedBudget - budgetAnalysisSummaryTmp.ExpenseActuals - budgetAnalysisSummaryTmp.Encumbrance - budgetAnalysisSummaryTmp.PreEncumbrance);

                update_recordset budgetAnalysisSummaryTmp
                    setting PercentUsed = (1 - budgetAnalysisSummaryTmp.RemainingBudget / budgetAnalysisSummaryTmp.RevisedBudget) * 100
                    where
                        budgetAnalysisSummaryTmp.RevisedBudget != 0;
                break;

            case BudgetAnalysisColumnSet_PSN::RevenueBudget:
                update_recordset budgetAnalysisSummaryTmp
                    setting
                        RemainingBudget = (budgetAnalysisSummaryTmp.RevisedBudget - budgetAnalysisSummaryTmp.RevenueActuals);

                update_recordset budgetAnalysisSummaryTmp
                    setting PercentUsed = (budgetAnalysisSummaryTmp.RevenueActuals / budgetAnalysisSummaryTmp.RevisedBudget * 100)
                    where
                        budgetAnalysisSummaryTmp.RevisedBudget != 0;
                break;

            case BudgetAnalysisColumnSet_PSN::OperatingResults:
                update_recordset budgetAnalysisSummaryTmp
                    setting RemainingBudget = (budgetAnalysisSummaryTmp.RevenueActuals - budgetAnalysisSummaryTmp.ExpenseActuals);
                break;

            case BudgetAnalysisColumnSet_PSN::ExpenseBudgetWithCarryForward:
                update_recordset budgetAnalysisSummaryTmp
                    setting RemainingBudget = (budgetAnalysisSummaryTmp.OriginalBudget - budgetAnalysisSummaryTmp.ExpenseActuals - budgetAnalysisSummaryTmp.Encumbrance);

                update_recordset budgetAnalysisSummaryTmp
                    setting PercentUsed = (budgetAnalysisSummaryTmp.RevisedBudget - budgetAnalysisSummaryTmp.RevenueActuals - budgetAnalysisSummaryTmp.PreEncumbrance);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCarryForwardBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisSummaryTmp_PSN</c> table with aggregated budget amount associated with carry forward budget transactions.
    /// </summary>
    private void getCarryForwardBudget()
    {
        BudgetTransactionHeader             budgetTransactionHeader;
        BudgetTransactionLine               budgetTransactionLine;

        insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp
            group by budgetAnalysisDimProcessingTmp.DimensionAttributeValue
            where
                budgetAnalysisDimProcessingTmp.LedgerDimensionType == LedgerDimensionType::Budget

            join sum(AccountingCurrencyAmount)
            from budgetTransactionLine
            where
                budgetTransactionLine.LedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetTransactionLine.Date            >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetTransactionLine.Date            <= budgetAnalysisInquiryHelper.parmEndDate() &&
                budgetTransactionLine.BudgetType      == BudgetType::Expense

            join budgetTransactionHeader
            where
                budgetTransactionHeader.RecId                 == budgetTransactionLine.BudgetTransactionHeader &&
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::CarryForwardBudget &&
                budgetTransactionHeader.TransactionStatus     == BudgetTransactionStatus::Completed &&
                budgetTransactionHeader.PrimaryLedger         == ledgerRecId;

        // populate summary tmpDB table for the grid
        update_recordset budgetAnalysisSummaryTmp
            setting RevisedBudget = budgetAnalysisAmountProcessingTmp.Amount
            join budgetAnalysisAmountProcessingTmp
            where
                budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmp.DimensionAttributeValue;

        delete_from budgetAnalysisAmountProcessingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncumbrance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisSummaryTmp_PSN</c> table with aggregated encumbrances by financial dimensions.
    /// </summary>
    private void getEncumbrance()
    {
        BudgetSourceTracking                budgetSourceTracking;
        BudgetSourceTracking                budgetSourceTrackingRelieving;
        BudgetSourceTrackingDetail          budgetSourceTrackingDetail;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
        BudgetSourceTrackingDetailClosing   budgetSourceTrackingDetailClosing;

        if (budgetAnalysisInquiryHelper.parmDoIncludeClosingEntries())
        {
            // retrieve sum of budget source tracking transaction
            insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp

            join AccountingCurrencyAmount
            from budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.PrimaryLedger               == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId        == budgetSourceTrackingDetail.BudgetSourceTracking &&
                (budgetSourceTracking.Category    == BudgetControlCategory::Encumbrance ||
                budgetSourceTracking.Category     == BudgetControlCategory::EncumbranceReduction) &&
                budgetSourceTracking.Status       == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate();

            // retrieve sum of confirmed relieving transaction (exclude draft entries).
            insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp

            join budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.PrimaryLedger               == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId        == budgetSourceTrackingDetail.BudgetSourceTracking &&
                (budgetSourceTracking.Category    == BudgetControlCategory::Encumbrance ||
                budgetSourceTracking.Category     == BudgetControlCategory::EncumbranceReduction) &&
                budgetSourceTracking.Status       == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate()

            join AccountingCurrencyAmount
            from  budgetSourceTrackingRelievingDetail
            where
                budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId

            exists join budgetSourceTrackingRelieving
            where budgetSourceTrackingRelieving.RecId == budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking &&
                budgetSourceTrackingRelieving.Status  == BudgetSourceTrackingStatus::Confirmed;
        }
        else // Do not include closing entries.
        {
            // retrieve sum of budget source tracking transaction.
            insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp

            join AccountingCurrencyAmount
            from budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.PrimaryLedger == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                (budgetSourceTracking.Category == BudgetControlCategory::Encumbrance || budgetSourceTracking.Category == BudgetControlCategory::EncumbranceReduction) &&
                budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate()

            notExists join budgetSourceTrackingDetailClosing
            where
                budgetSourceTrackingDetailClosing.BudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId;

            // retrieve sum of confirmed relieving transaction (exclude draft entries).
            insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp

            join budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.PrimaryLedger == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                (budgetSourceTracking.Category == BudgetControlCategory::Encumbrance || budgetSourceTracking.Category == BudgetControlCategory::EncumbranceReduction) &&
                budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate()

            join AccountingCurrencyAmount
            from  budgetSourceTrackingRelievingDetail
            where
                budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId

            join budgetSourceTrackingRelieving
            where budgetSourceTrackingRelieving.RecId == budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking &&
                budgetSourceTrackingRelieving.Status == BudgetSourceTrackingStatus::Confirmed

            notExists join budgetSourceTrackingDetailClosing
            where
                budgetSourceTrackingDetailClosing.BudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId;
        }

        // populate another temp buffer to get the aggregated sum
        insert_recordset budgetAnalysisAmountProcessingTmpForCF
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue, sum(Amount)
            from budgetAnalysisAmountProcessingTmp
            group by budgetAnalysisAmountProcessingTmp.DimensionAttributeValue;

        // populate summary tmpDB table for the grid
        update_recordset budgetAnalysisSummaryTmp
            setting Encumbrance = budgetAnalysisAmountProcessingTmpForCF.Amount
            join budgetAnalysisAmountProcessingTmpForCF
            where
                budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmpForCF.DimensionAttributeValue;

        //Clean the temp buffers
        delete_from budgetAnalysisAmountProcessingTmp;
        delete_from budgetAnalysisAmountProcessingTmpForCF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncumbranceForExpenseWithCarryForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisSummaryTmp_PSN</c> table with aggregated encumbrances amount associated with carry forward transactions only from budget control.
    /// </summary>
    /// <param name="_isCarryForward">
    /// The <c>NoYes</c> base enumaration value to indicate whether encumbrances should be filtered for carry-forward or not.
    /// </param>
    private void getEncumbranceForExpenseWithCarryForward(NoYes _isCarryForward)
    {
        BudgetSourceTracking                budgetSourceTracking;
        BudgetSourceTracking                budgetSourceTrackingRelieving;
        BudgetSourceTrackingDetail          budgetSourceTrackingDetail;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
        BudgetSourceTrackingDetailClosing   budgetSourceTrackingDetailClosing;

        if (budgetAnalysisInquiryHelper.parmDoIncludeClosingEntries())
        {
        // retrieve sum of budget source tracking transaction
        insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp

            join AccountingCurrencyAmount
            from budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.IsCarryForward              == _isCarryForward &&
                budgetSourceTrackingDetail.PrimaryLedger               == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId        == budgetSourceTrackingDetail.BudgetSourceTracking &&
                (budgetSourceTracking.Category == BudgetControlCategory::Encumbrance || budgetSourceTracking.Category == BudgetControlCategory::EncumbranceReduction) &&
                budgetSourceTracking.Status       == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate();

        // retrieve sum of confirmed relieving transaction (exclude draft entries).
        insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp

            join budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.IsCarryForward              == _isCarryForward &&
                budgetSourceTrackingDetail.PrimaryLedger               == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId        == budgetSourceTrackingDetail.BudgetSourceTracking &&
                (budgetSourceTracking.Category == BudgetControlCategory::Encumbrance || budgetSourceTracking.Category == BudgetControlCategory::EncumbranceReduction) &&
                budgetSourceTracking.Status       == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate()

            join AccountingCurrencyAmount
            from  budgetSourceTrackingRelievingDetail
            where
                budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId

            exists join budgetSourceTrackingRelieving
            where budgetSourceTrackingRelieving.RecId == budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking &&
                budgetSourceTrackingRelieving.Status  == BudgetSourceTrackingStatus::Confirmed;
        }
        else // Do not include closing entries.
        {
            // retrieve sum of budget source tracking transaction.
            insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp

            join AccountingCurrencyAmount
            from budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.IsCarryForward == _isCarryForward &&
                budgetSourceTrackingDetail.PrimaryLedger == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                (budgetSourceTracking.Category == BudgetControlCategory::Encumbrance || budgetSourceTracking.Category == BudgetControlCategory::EncumbranceReduction) &&
                budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate()

            notExists join budgetSourceTrackingDetailClosing
            where
                budgetSourceTrackingDetailClosing.BudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId;

            // retrieve sum of confirmed relieving transaction (exclude draft entries).
            insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp

            join budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.IsCarryForward == _isCarryForward &&
                budgetSourceTrackingDetail.PrimaryLedger == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                (budgetSourceTracking.Category == BudgetControlCategory::Encumbrance || budgetSourceTracking.Category == BudgetControlCategory::EncumbranceReduction) &&
                budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate()

            join AccountingCurrencyAmount
            from  budgetSourceTrackingRelievingDetail
            where
                budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId

            join budgetSourceTrackingRelieving
            where budgetSourceTrackingRelieving.RecId == budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking &&
                budgetSourceTrackingRelieving.Status == BudgetSourceTrackingStatus::Confirmed

            notExists join budgetSourceTrackingDetailClosing
            where
                budgetSourceTrackingDetailClosing.BudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId;
        }

        // populate another temp buffer to get the aggregated sum
        insert_recordset budgetAnalysisAmountProcessingTmpForCF
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue, sum(Amount)
            from budgetAnalysisAmountProcessingTmp
            group by budgetAnalysisAmountProcessingTmp.DimensionAttributeValue;

        // populate summary tmpDB table for the grid
        if (_isCarryForward == NoYes::Yes)
        {
            update_recordset budgetAnalysisSummaryTmp
                setting PreEncumbrance = budgetAnalysisAmountProcessingTmpForCF.Amount
                join budgetAnalysisAmountProcessingTmpForCF
                where
                    budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmpForCF.DimensionAttributeValue;
        }
        else if (_isCarryForward == NoYes::No)
        {
            update_recordset budgetAnalysisSummaryTmp
                setting Encumbrance = budgetAnalysisAmountProcessingTmpForCF.Amount
                join budgetAnalysisAmountProcessingTmpForCF
                where
                    budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmpForCF.DimensionAttributeValue;
        }

        //Clean the temp buffers
        delete_from budgetAnalysisAmountProcessingTmp;
        delete_from budgetAnalysisAmountProcessingTmpForCF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisSummaryTmp_PSN</c> table with aggregated original budget by financial dimensions.
    /// </summary>
    /// <param name="_budgetType">
    /// The <c>BudgetType</c> base enumaration value to indicate which budget transaction type the transactions should be filtered for.
    /// </param>
    private void getOriginalBudget(BudgetType _budgetType)
    {
        BudgetTransactionHeader             budgetTransactionHeader;
        BudgetTransactionLine               budgetTransactionLine;
        BudgetTransactionLineClosing        budgetTransactionLineClosing;

        if (budgetAnalysisInquiryHelper.parmDoIncludeClosingEntries())
        {
        insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount, BudgetType)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp
            where
                budgetAnalysisDimProcessingTmp.LedgerDimensionType == LedgerDimensionType::Budget

            join AccountingCurrencyAmount, BudgetType
            from budgetTransactionLine
            where
                budgetTransactionLine.LedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetTransactionLine.Date            >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetTransactionLine.Date            <= budgetAnalysisInquiryHelper.parmEndDate() &&
                budgetTransactionLine.BudgetType      == _budgetType

            join budgetTransactionHeader
            where
                budgetTransactionHeader.RecId                  == budgetTransactionLine.BudgetTransactionHeader &&
                (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::OriginalBudget ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::CarryForwardBudget ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Project) &&
                budgetTransactionHeader.TransactionStatus      == BudgetTransactionStatus::Completed &&
                budgetTransactionHeader.PrimaryLedger          == ledgerRecId;
        }
        else // Do not include closing entries.
        {
            insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount, BudgetType)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp
            where
                budgetAnalysisDimProcessingTmp.LedgerDimensionType == LedgerDimensionType::Budget

            join AccountingCurrencyAmount, BudgetType
            from budgetTransactionLine
            where
                budgetTransactionLine.LedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetTransactionLine.Date >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetTransactionLine.Date <= budgetAnalysisInquiryHelper.parmEndDate() &&
                budgetTransactionLine.BudgetType == _budgetType

            join budgetTransactionHeader
            where
                budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::OriginalBudget ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::CarryForwardBudget ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Project) &&
                budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Completed &&
                budgetTransactionHeader.PrimaryLedger == ledgerRecId

            notExists join budgetTransactionLineClosing
            where budgetTransactionLineClosing.BudgetTransactionLine == budgetTransactionLine.RecId;
        }

        update_recordset budgetAnalysisAmountProcessingTmp
            setting Amount = (-1 * budgetAnalysisAmountProcessingTmp.Amount)
            where budgetAnalysisAmountProcessingTmp.BudgetType == BudgetType::Revenue;

        // populate another temp buffer to get the aggregated sum
        insert_recordset budgetAnalysisAmountProcessingTmpForCF
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue, sum(Amount)
            from budgetAnalysisAmountProcessingTmp
            group by budgetAnalysisAmountProcessingTmp.DimensionAttributeValue;

        // populate summary tmpDB table for the grid
        update_recordset budgetAnalysisSummaryTmp
            setting OriginalBudget = budgetAnalysisAmountProcessingTmpForCF.Amount
            join budgetAnalysisAmountProcessingTmpForCF
            where
                budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmpForCF.DimensionAttributeValue;

        delete_from budgetAnalysisAmountProcessingTmp;
        delete_from budgetAnalysisAmountProcessingTmpForCF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreEncumbrance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisSummaryTmp_PSN</c> table with aggregated encumbrances by financial dimensions.
    /// </summary>
    private void getPreEncumbrance()
    {
        BudgetSourceTracking                budgetSourceTracking;
        BudgetSourceTracking                budgetSourceTrackingRelieving;
        BudgetSourceTrackingDetail          budgetSourceTrackingDetail;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        // retrieve sum of budget source tracking transaction
        insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp

            join AccountingCurrencyAmount
            from budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.PrimaryLedger               == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId        == budgetSourceTrackingDetail.BudgetSourceTracking &&
                budgetSourceTracking.Category     == BudgetControlCategory::PreEncumbrance &&
                budgetSourceTracking.Status       == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate();

        // retrieve sum of relieving transaction
        insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp

            join budgetSourceTrackingDetail
            where
                budgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetSourceTrackingDetail.PrimaryLedger               == ledgerRecId

            join budgetSourceTracking
            where
                budgetSourceTracking.RecId        == budgetSourceTrackingDetail.BudgetSourceTracking &&
                budgetSourceTracking.Category     == BudgetControlCategory::PreEncumbrance &&
                budgetSourceTracking.Status       == BudgetSourceTrackingStatus::Confirmed &&
                budgetSourceTracking.TrackingDate >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetSourceTracking.TrackingDate <= budgetAnalysisInquiryHelper.parmEndDate()

            join AccountingCurrencyAmount
            from  budgetSourceTrackingRelievingDetail
            where
                budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId

            exists join budgetSourceTrackingRelieving
            where budgetSourceTrackingRelieving.RecId == budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking &&
                budgetSourceTrackingRelieving.Status  == BudgetSourceTrackingStatus::Confirmed;

        // populate another temp buffer to get the aggregated sum
        insert_recordset budgetAnalysisAmountProcessingTmpForCF
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue, sum(Amount)
            from budgetAnalysisAmountProcessingTmp
            group by budgetAnalysisAmountProcessingTmp.DimensionAttributeValue;

        // populate summary tmpDB table for the grid
        update_recordset budgetAnalysisSummaryTmp
            setting PreEncumbrance = budgetAnalysisAmountProcessingTmpForCF.Amount
            join budgetAnalysisAmountProcessingTmpForCF
            where
                budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmpForCF.DimensionAttributeValue;

        //Clean the temp buffers
        delete_from budgetAnalysisAmountProcessingTmp;
        delete_from budgetAnalysisAmountProcessingTmpForCF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevisedBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisSummaryTmp_PSN</c> table with aggregated revised budget by financial dimensions.
    /// </summary>
    /// <param name="_budgetType">
    /// The <c>BudgetType</c> base enumaration value to indicate which budget transaction type the transactions should be filtered for.
    /// </param>
    private void getRevisedBudget(BudgetType _budgetType)
    {
        BudgetTransactionHeader             budgetTransactionHeader;
        BudgetTransactionLine               budgetTransactionLine;
        BudgetTransactionLineClosing        budgetTransactionLineClosing;

        if (budgetAnalysisInquiryHelper.parmDoIncludeClosingEntries())
        {
        insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount, BudgetType)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp
            where
                budgetAnalysisDimProcessingTmp.LedgerDimensionType == LedgerDimensionType::Budget

            join AccountingCurrencyAmount, BudgetType
            from budgetTransactionLine
            where
                budgetTransactionLine.LedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetTransactionLine.Date            >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetTransactionLine.Date            <= budgetAnalysisInquiryHelper.parmEndDate() &&
                budgetTransactionLine.BudgetType      == _budgetType

            join budgetTransactionHeader
            where
                budgetTransactionHeader.RecId                  == budgetTransactionLine.BudgetTransactionHeader &&
                (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::OriginalBudget ||
                budgetTransactionHeader.BudgetTransactionType  == BudgetTransactionType::Transfer ||
                budgetTransactionHeader.BudgetTransactionType  == BudgetTransactionType::CarryForwardBudget ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Amendment ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Project) &&
                budgetTransactionHeader.TransactionStatus      == BudgetTransactionStatus::Completed &&
                budgetTransactionHeader.PrimaryLedger          == ledgerRecId;
        }
        else // Do not include closing entries.
        {
            insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount, BudgetType)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp
            where
                budgetAnalysisDimProcessingTmp.LedgerDimensionType == LedgerDimensionType::Budget

            join AccountingCurrencyAmount, BudgetType
            from budgetTransactionLine
            where
                budgetTransactionLine.LedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetTransactionLine.Date >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetTransactionLine.Date <= budgetAnalysisInquiryHelper.parmEndDate() &&
                budgetTransactionLine.BudgetType == _budgetType

            join budgetTransactionHeader
            where
                budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::OriginalBudget ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Transfer ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::CarryForwardBudget ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Amendment ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Project) &&
                 budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Completed &&
                budgetTransactionHeader.PrimaryLedger == ledgerRecId

           notExists join budgetTransactionLineClosing
           where budgetTransactionLineClosing.BudgetTransactionLine == budgetTransactionLine.RecId;
        }

        update_recordset budgetAnalysisAmountProcessingTmp
            setting Amount = (-1 * budgetAnalysisAmountProcessingTmp.Amount)
            where budgetAnalysisAmountProcessingTmp.BudgetType == BudgetType::Revenue;

        // populate another temp buffer to get the aggregated sum
        insert_recordset budgetAnalysisAmountProcessingTmpForCF
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue, sum(Amount)
            from budgetAnalysisAmountProcessingTmp
            group by budgetAnalysisAmountProcessingTmp.DimensionAttributeValue;

        // populate summary tmpDB table for the grid
        update_recordset budgetAnalysisSummaryTmp
            setting RevisedBudget = budgetAnalysisAmountProcessingTmpForCF.Amount
            join budgetAnalysisAmountProcessingTmpForCF
            where
                budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmpForCF.DimensionAttributeValue;

        delete_from budgetAnalysisAmountProcessingTmp;
        delete_from budgetAnalysisAmountProcessingTmpForCF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevisedBudgetLessCarryForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>BudgetAnalysisSummaryTmp_PSN</c> table with aggregated revised budget less amounts associated with carry forward budget transactions.
    /// </summary>
    private void getRevisedBudgetLessCarryForward()
    {
        BudgetTransactionHeader             budgetTransactionHeader;
        BudgetTransactionLine               budgetTransactionLine;
        BudgetTransactionLineClosing        budgetTransactionLineClosing;

        if (budgetAnalysisInquiryHelper.parmDoIncludeClosingEntries())
        {
        insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp
            group by budgetAnalysisDimProcessingTmp.DimensionAttributeValue
            where
                budgetAnalysisDimProcessingTmp.LedgerDimensionType == LedgerDimensionType::Budget

            join sum(AccountingCurrencyAmount)
            from budgetTransactionLine
            where
                budgetTransactionLine.LedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetTransactionLine.Date            >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetTransactionLine.Date            <= budgetAnalysisInquiryHelper.parmEndDate() &&
                budgetTransactionLine.BudgetType      == BudgetType::Expense

            join budgetTransactionHeader
            where
                budgetTransactionHeader.RecId                  == budgetTransactionLine.BudgetTransactionHeader &&
                (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::OriginalBudget ||
                budgetTransactionHeader.BudgetTransactionType  == BudgetTransactionType::Transfer ||
                budgetTransactionHeader.BudgetTransactionType  == BudgetTransactionType::Amendment) &&
                budgetTransactionHeader.TransactionStatus      == BudgetTransactionStatus::Completed &&
                budgetTransactionHeader.PrimaryLedger          == ledgerRecId;
        }
        else // Do not include closing entries.
        {
            insert_recordset budgetAnalysisAmountProcessingTmp
            (DimensionAttributeValue, Amount)

            select DimensionAttributeValue
            from budgetAnalysisDimProcessingTmp
            group by budgetAnalysisDimProcessingTmp.DimensionAttributeValue
            where
                budgetAnalysisDimProcessingTmp.LedgerDimensionType == LedgerDimensionType::Budget

            join sum(AccountingCurrencyAmount)
            from budgetTransactionLine
            where
                budgetTransactionLine.LedgerDimension == budgetAnalysisDimProcessingTmp.LedgerDimension &&
                budgetTransactionLine.Date >= budgetAnalysisInquiryHelper.parmStartDate() &&
                budgetTransactionLine.Date <= budgetAnalysisInquiryHelper.parmEndDate() &&
                budgetTransactionLine.BudgetType == BudgetType::Expense

            join budgetTransactionHeader
            where
                budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::OriginalBudget ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Transfer ||
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Amendment) &&
                budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Completed &&
                budgetTransactionHeader.PrimaryLedger == ledgerRecId

            notExists join budgetTransactionLineClosing
            where budgetTransactionLineClosing.BudgetTransactionLine == budgetTransactionLine.RecId;
        }

        // populate summary tmpDB table for the grid
        update_recordset budgetAnalysisSummaryTmp
            setting OriginalBudget = budgetAnalysisAmountProcessingTmp.Amount
            join budgetAnalysisAmountProcessingTmp
            where
                budgetAnalysisSummaryTmp.DimensionAttributeValue == budgetAnalysisAmountProcessingTmp.DimensionAttributeValue;

        delete_from budgetAnalysisAmountProcessingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the newly created object of this class.
    /// </summary>
    /// <param name="_budgetAnalysisInquiryHelper">
    /// A container with a packed instances of the <c>BudgetAnalysisInquiryHelper_PSN</c> class.
    /// </param>
    public void new(container _budgetAnalysisInquiryHelper)
    {
        budgetAnalysisInquiryHelper = new BudgetAnalysisInquiryHelper_PSN();
        budgetAnalysisInquiryHelper.unpack(_budgetAnalysisInquiryHelper);
        ledgerRecId = Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetAnalysisSummaryTmp</Name>
				<Source><![CDATA[
    public BudgetAnalysisSummaryTmp_PSN parmBudgetAnalysisSummaryTmp(BudgetAnalysisSummaryTmp_PSN _budgetAnalysisSummaryTmp = budgetAnalysisSummaryTmp)
    {
        budgetAnalysisSummaryTmp = _budgetAnalysisSummaryTmp;

        return budgetAnalysisSummaryTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>