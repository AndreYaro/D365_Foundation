<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPickedButNotDeliveredUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRPickedButNotDeliveredUIBuilder</c> prompts
/// the user for the warehouse to be used in the picked but not delivered report.
/// </summary>
public class MCRPickedButNotDeliveredUIBuilder extends SrsReportDataContractUIBuilder
{
    MCRPickedButNotDeliveredContract    contract;
    DialogField                         warehouseField;
    DialogField                         throughDateField;
    DialogField                         transTypeField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>Dialog</c> object for the <c>MCRPickedButNotDeliveredUIBuilder</c> class.
    /// </summary>
    public void build()
    {
        Dialog  dialogLocal;

        dialogLocal = this.dialog();
        contract = this.dataContractObject() as MCRPickedButNotDeliveredContract;
        transTypeField = dialogLocal.addFieldValue(enumStr(MCRInventTransType), contract.parmTransactionType(), "@SYS480", "");
        warehouseField = this.addDialogField(methodStr(MCRPickedButNotDeliveredContract, parmWarehouse), contract);
        warehouseField.lookupButton(FormLookupButton::Always);

        throughDateField = dialogLocal.addFieldValue(extendedTypeStr(TransDate),contract.parmThroughDate(), "@MCR36543","");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public void getFromDialog()
    {
        LedgerRecId     ledgerRecIdLoc;
        CurrencyCode    companyCurrency;

        ledgerRecIdLoc  = Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId);
        companyCurrency = Ledger::find(ledgerRecIdLoc).AccountingCurrency;

        contract.parmCompanyCurrency(companyCurrency);
        contract.parmTransactionType(transTypeField.value());
        contract.parmWarehouse(SrsReportHelper::ConvertStrToList(warehouseField.value()));
        contract.parmThroughDate(throughDateField.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers method override in order to capture dialog events.
    /// </summary>
    public void postRun()
    {
        dialog.dialogForm().formRun().controlMethodOverload(false);
        this.warehouseLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>warehouseLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the UI modified event for the dialog fields.
    /// </summary>
    public void warehouseLookup()
    {
        Query       query = new Query(querystr(InventLocationsrs));
        container   selectedFields;
        int         mutiSelectTableNum = tablenum(InventLocation);

        selectedFields = [mutiSelectTableNum, fieldname2id(mutiSelectTableNum, fieldstr(InventLocation, InventLocationId))];
        SysLookupMultiSelectCtrl::constructWithQuery(this.dialog().dialogForm().formRun(), warehouseField.control(), query, false, selectedFields);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>