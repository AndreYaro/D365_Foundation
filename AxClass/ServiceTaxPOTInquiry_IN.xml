<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ServiceTaxPOTInquiry_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is the direct descendant of the abstract class ServiceTaxPOTInquiryBase_IN,
/// and fires the manual (not thru Batch) reversal and reclaim functionality, for user selected vendor transacion.
/// </summary>
class ServiceTaxPOTInquiry_IN extends ServiceTaxPOTInquiryBase_IN implements BatchRetryable
{
    ServiceTaxPOTInquiry_Reversal_IN serviceTaxPOTInquiryReversal;
    ServiceTaxPOTInquiry_Reclaim_IN  serviceTaxPOTInquiryReclaim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performReclaim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fires the reclaim process.
    /// </summary>
    /// <param name="_tmpVendTransServiceTaxExtLinkTable">
    /// TmpVendTransServiceTaxExtLinkTable_IN record for which reclaimis to be run.
    /// </param>
    /// <param name="_reclaimDate">
    /// Date of reclaim.
    /// </param>
    public void performReclaim(TmpVendTransServiceTaxExtLinkTable_IN _tmpVendTransServiceTaxExtLinkTable, TransDate _reclaimDate)
    {
        Name menuItemName = menuitemActionStr(ServiceTaxPOTInquiryBatch_Reclaim_IN);

        if (TaxParameters::isServiceTaxEnable_IN() == false)
        {
            throw error(strFmt("@SYS4082391", "@GLS5006"));
        }
        serviceTaxPOTInquiryReclaim = ServiceTaxPOTInquiry_IN::construct(menuItemName);
        serviceTaxPOTInquiryReclaim.parmTmpData(_tmpVendTransServiceTaxExtLinkTable);
        serviceTaxPOTInquiryReclaim.parmReverseReclaimDate(_reclaimDate);
        serviceTaxPOTInquiryReclaim.getLast();
        serviceTaxPOTInquiryReclaim.reclaimSelectedLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fires the reversal of taxes.
    /// </summary>
    /// <param name="_tmpVendTransServiceTaxExtLinkTable">
    /// TmpVendTransServiceTaxExtLinkTable_IN buffer for which reversal to be one.
    /// </param>
    /// <param name="_reversalDate">
    /// The reversal date.
    /// </param>
    public void performReversal(TmpVendTransServiceTaxExtLinkTable_IN _tmpVendTransServiceTaxExtLinkTable, TransDate _reversalDate)
    {
        Name menuItemName = menuitemActionStr(ServiceTaxPOTInquiryBatch_Reversal_IN);

        if (TaxParameters::isServiceTaxEnable_IN() == false)
        {
            throw error(strFmt("@SYS4082391", "@GLS5006"));
        }
        serviceTaxPOTInquiryReversal = ServiceTaxPOTInquiry_IN::construct(menuItemName);
        serviceTaxPOTInquiryReversal.parmTmpData(_tmpVendTransServiceTaxExtLinkTable);
        serviceTaxPOTInquiryReversal.parmReverseReclaimDate(_reversalDate);
        serviceTaxPOTInquiryReversal.getLast();
        serviceTaxPOTInquiryReversal.reverseSelectedLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The construct method creaes the object of appropriate child.
    /// </summary>
    /// <param name="_callerMenu">
    /// The action menu initiating the proces of reclaim/reversal.
    /// </param>
    /// <returns>
    /// Return the correct chil object of ServiceTaxPOTInquiryBase_IN.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws exception if no object can be created.
    /// </exception>
    public static ServiceTaxPOTInquiryBase_IN construct(Name _callerMenu)
    {
        ServiceTaxPOTInquiryBase_IN serviceTaxPOTInquiryBase;

        switch (_callerMenu)
        {
            case menuitemActionStr(ServiceTaxPOTInquiryBase_IN) : serviceTaxPOTInquiryBase = new ServiceTaxPOTInquiry_IN();
                                                                  break;
            case menuitemActionStr(ServiceTaxPOTInquiryBatch_Reversal_IN) : serviceTaxPOTInquiryBase = new ServiceTaxPOTInquiry_Reversal_IN();
                                                                           serviceTaxPOTInquiryBase.parmIsBatchMode(true);
                                                                  break;
            case menuitemActionStr(ServiceTaxPOTInquiryBatch_Reclaim_IN) : serviceTaxPOTInquiryBase = new ServiceTaxPOTInquiry_Reclaim_IN();
                                                                           serviceTaxPOTInquiryBase.parmIsBatchMode(true);
                                                                  break;
            default                                                       : throw error(strfmt("@SYS19306", funcname()));
        }

        return serviceTaxPOTInquiryBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>