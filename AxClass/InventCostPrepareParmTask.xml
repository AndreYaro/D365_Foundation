<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostPrepareParmTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Prepares parameters for all the items that are included in the calculation.
/// </summary>
/// <remarks>
/// The parameters are used to optimize the calculation. The parameters determine which processing steps are necessary for an item.
/// </remarks>
public class InventCostPrepareParmTask extends InventCostTaskBase implements BatchRetryable
{
    // <GEERU>
    boolean                     countryRegion_RU;
    // </GEERU>
    #ISOcountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares parameters for all the items that are included in the calculation.
    /// </summary>
    protected void doRun()
    {
        InventCostListParm          inventCostListParm;
        InventCostListParmView      inventCostListParmView;
        InventCostListParmView_RU   inventCostListParmView_RU;
        InventCostList              inventCostList;

        InventClosingRefRecId inventClosingRecId = inventClosing.RecId;

        ttsbegin;

        if (countryRegion_RU && inventClosing.InventTransCurrency_RU == InventTransCurrency_RU::SecondaryCur)
        {
            insert_recordset inventCostListParm(InventClosing, ItemId, HasReturn, HasMarking, MinOfDateStatus, HasReceipts, HasIssues)
                select inventClosingRecId, ItemId, HasReturn, HasMarking, MinOfDateStatus, HasReceipts, HasIssues
                from inventCostListParmView_RU
                    exists join inventCostList
                        where inventCostList.ItemId == inventCostListParmView_RU.ItemId
                           && inventCostList.Voucher == inventClosing.Voucher;
        }
        else
        {
            insert_recordset inventCostListParm(InventClosing, ItemId, HasReturn, HasMarking, MinOfDateStatus, HasReceipts, HasIssues)
                select inventClosingRecId, ItemId, HasReturn, HasMarking, MinOfDateStatus, HasReceipts, HasIssues
                from inventCostListParmView
                    exists join inventCostList
                        where inventCostList.ItemId == inventCostListParmView.ItemId
                           && inventCostList.Voucher == inventClosing.Voucher;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    protected ClassDescription getTaskDescription()
    {
        return InventCostPrepareParmTask::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventCostPrepareParmTask construct()
    {
        return new InventCostPrepareParmTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYS4001035";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventCostPrepareParmTask</c> class.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of the inventory closing.
    /// </param>
    /// <param name="_transDate">
    /// The date of the inventory closing.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventCostPrepareParmTask</c> class.
    /// </returns>
    public static InventCostPrepareParmTask newTask(
        Voucher             _voucher,
        TransDate           _transDate
        )
    {
        InventCostPrepareParmTask inventCostPrepareParmTask = InventCostPrepareParmTask::construct();

        inventCostPrepareParmTask.parmVoucher(_voucher);
        inventCostPrepareParmTask.parmTransDate(_transDate);

        return inventCostPrepareParmTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
