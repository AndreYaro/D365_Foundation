<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceRefIdentitiesProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceRefIdentitiesProvider</c> class loads free text invoice reference identities
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_CustomerInvoice), SourceDocument_CustomerInvoice::CustomerFreeTextInvoice)]
class CustInvoiceRefIdentitiesProvider extends SourceDocReferenceIdentitiesProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        typeEnumName = enumStr(SourceDocument_CustomerInvoice);
        typeEnumValue = SourceDocument_CustomerInvoice::CustomerFreeTextInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReferenceIdentities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into <c>SourceDocumentAcctEventReferenceIdentity</c> and <c>SourceDocumentLineReferenceIdentity</c> tables with free text invoice reference identities.
    /// </summary>
    protected void populateReferenceIdentities()
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
            SourceDocumentInstrumentationConstants::SourceDocReferenceIdentitiesProvider,
            classStr(CustInvoiceRefIdentitiesProvider),
            SourceDocumentInstrumentationConstants::CustInvoiceRefIdentitiesProvider))
        {
            int64 startTime, curTime = 0;

            startTime = activityContext.getElapsedMilliseconds();
            // Process the main source document reference identities for the header and lines
            this.insertSourceDocAccEventRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertAcctEventRefIdentities,
                int642Str(curTime - startTime));

            startTime = activityContext.getElapsedMilliseconds();
            // Process the related line reference identities
            this.insertSourceDocLineRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertLineRefIdentities,
                int642Str(curTime - startTime));

            startTime = activityContext.getElapsedMilliseconds();
            // Process the related misc charge reference identities
            this.insertChargeSourceDocLineRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertChargeRefIdentities,
                int642Str(curTime - startTime));

            startTime = activityContext.getElapsedMilliseconds();
            // Process the related tax reference identities
            this.insertTaxSourceDocLineRefIdentities();
            curTime = activityContext.getElapsedMilliseconds();
            activityContext.addCustomProperty(
                SourceDocumentInstrumentationConstants::TimeToInsertTaxRefIdentities,
                int642Str(curTime - startTime));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocAccEventRefIdentities</Name>
				<Source><![CDATA[
    private void insertSourceDocAccEventRefIdentities()
    {
        if (!CustInvoiceRefIdentitiesProviderQueryHelperFlight::instance().isEnabled())
        {
            SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
            SourceDocumentAcctEventReferenceIdentity sourceDocumentAcctEventReferenceIdentity, sourceDocumentAcctEventReferenceIdentityNotExists;
            CustInvoiceJour custInvoiceJour;
            AccountingEvent accountingEvent;
            SubledgerJournalTransferId refIdentityTransferId;
            CustTrans custTrans;
            CustTable custTable;
            DirPartyTable dirPartyTable;

            refIdentityTransferId = this.parmReferenceIdentityTransferId();

            if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
            {
                sourceDocumentAcctEventReferenceIdentity.skipDataMethods(true);
                sourceDocumentAcctEventReferenceIdentity.skipBusinessEvents(true);
                sourceDocumentAcctEventReferenceIdentity.skipEvents(true);
            }

            insert_recordset sourceDocumentAcctEventReferenceIdentity(
                DocumentNumber,
                DocumentDate,
                PartyNumber,
                SourceDocumentHeader,
                AccountingEvent,
                PartyName)
            select
                InvoiceId,
                InvoiceDate,
                InvoiceAccount,
                SourceDocumentHeader from custInvoiceJour
            join AccountingEvent from custTrans
                where custTrans.Invoice == custInvoiceJour.InvoiceId &&
                    custTrans.AccountNum == custInvoiceJour.InvoiceAccount &&
                    custTrans.TransDate == custInvoiceJour.InvoiceDate &&
                    custTrans.Voucher == custInvoiceJour.LedgerVoucher &&
                    custTrans.AccountingEvent != 0
            join custTable
                where custTable.AccountNum == custInvoiceJour.InvoiceAccount
            join Name from dirPartyTable
                where dirPartyTable.RecId == custTable.Party
            exists join accountingEvent
                where accountingEvent.SourceDocumentHeader == custInvoiceJour.SourceDocumentHeader
                    && accountingEvent.RecId == custTrans.AccountingEvent
            exists join subledgerJournalEntryIdentityInProcess
                where subledgerJournalEntryIdentityInProcess.AccountingEvent == accountingEvent.RecId
                    && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
            notExists join sourceDocumentAcctEventReferenceIdentityNotExists
                where sourceDocumentAcctEventReferenceIdentityNotExists.SourceDocumentHeader == custInvoiceJour.SourceDocumentHeader
                    && sourceDocumentAcctEventReferenceIdentityNotExists.AccountingEvent == accountingEvent.RecId;
        }
        else
        {
            this.insertSourceDocAccEventRefIdentitiesUpdatedQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocAccEventRefIdentitiesUpdatedQuery</Name>
				<Source><![CDATA[
    private void insertSourceDocAccEventRefIdentitiesUpdatedQuery()
    {
        SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity sourceDocumentAcctEventReferenceIdentity, sourceDocumentAcctEventReferenceIdentityNotExists;
        CustInvoiceJour custInvoiceJour;
        AccountingEvent accountingEvent;
        SubledgerJournalTransferId refIdentityTransferId;
        CustTrans custTrans;
        CustTable custTable;
        DirPartyTable dirPartyTable;

        refIdentityTransferId = this.parmReferenceIdentityTransferId();

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentAcctEventReferenceIdentity.skipDataMethods(true);
            sourceDocumentAcctEventReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentAcctEventReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentAcctEventReferenceIdentity(
                AccountingEvent,
                DocumentNumber,
                DocumentDate,
                PartyNumber,
                SourceDocumentHeader,
                PartyName)
        select AccountingEvent from subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent != 0 &&
                subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        join custTrans
            where custTrans.AccountingEvent == subledgerJournalEntryIdentityInProcess.AccountingEvent
        join InvoiceId,
            InvoiceDate,
            InvoiceAccount,
            SourceDocumentHeader from custInvoiceJour
            where custInvoiceJour.InvoiceId == custTrans.Invoice &&
                custInvoiceJour.InvoiceAccount == custTrans.AccountNum &&
                custInvoiceJour.InvoiceDate == custTrans.TransDate &&
                custInvoiceJour.LedgerVoucher == custTrans.Voucher
        join custTable
            where custTable.AccountNum == custInvoiceJour.InvoiceAccount
        join Name from dirPartyTable
            where dirPartyTable.RecId == custTable.Party
        exists join accountingEvent
            where accountingEvent.SourceDocumentHeader == custInvoiceJour.SourceDocumentHeader
                && accountingEvent.RecId == custTrans.AccountingEvent
        notExists join sourceDocumentAcctEventReferenceIdentityNotExists
            where sourceDocumentAcctEventReferenceIdentityNotExists.SourceDocumentHeader == custInvoiceJour.SourceDocumentHeader
                && sourceDocumentAcctEventReferenceIdentityNotExists.AccountingEvent == accountingEvent.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocLineRefIdentities</Name>
				<Source><![CDATA[
    private void insertSourceDocLineRefIdentities()
    {
        SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity sourceDocumentAcctEventReferenceIdentity;
        SourceDocumentLineReferenceIdentity sourceDocumentLineReferenceIdentity, sourceDocumentLineReferenceIdentityNotExists;
        AccountingEvent accountingEvent;
        SourceDocumentHeader sourceDocumentHeader;
        SourceDocumentLine sourceDocumentLine;
        AccountingDistribution accountingDistribution;
        CustInvoiceLine custInvoiceLine;
        SubledgerJournalTransferId refIdentityTransferId;

        refIdentityTransferId = this.parmReferenceIdentityTransferId();

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentLineReferenceIdentity.skipDataMethods(true);
            sourceDocumentLineReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentLineReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentLineReferenceIdentity(
            SourceDocumentLine,
            Quantity,
            LineNumber,
            LineDescription,
            SourceDocumentAcctEventReferenceIdentity)
        select
            SourceDocumentLine,
            Quantity,
            LineNum,
            Description from custInvoiceLine
        group by
            sourceDocumentLine.RecId,
            accountingEvent.RecId,
            custInvoiceLine.SourceDocumentLine,
            custInvoiceLine.Quantity,
            custInvoiceLine.LineNum,
            custInvoiceLine.Description,
            sourceDocumentAcctEventReferenceIdentity.RecId
        join sourceDocumentLine
            where sourceDocumentLine.RecId == custInvoiceLine.SourceDocumentLine
        join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
        join accountingDistribution
            where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
               && accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
               && accountingDistribution.AccountingEvent == accountingEvent.RecId
        join RecId from sourceDocumentAcctEventReferenceIdentity
            where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
               && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        notExists join sourceDocumentLineReferenceIdentityNotExists
            where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == custInvoiceLine.SourceDocumentLine
               && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChargeSourceDocLineRefIdentities</Name>
				<Source><![CDATA[
    private void insertChargeSourceDocLineRefIdentities()
    {
        SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity sourceDocumentAcctEventReferenceIdentity;
        SourceDocumentLineReferenceIdentity sourceDocumentLineReferenceIdentity, sourceDocumentLineReferenceIdentityNotExists;
        AccountingEvent accountingEvent;
        SourceDocumentHeader sourceDocumentHeader;
        SourceDocumentLine sourceDocumentLine;
        AccountingDistribution accountingDistribution;
        MarkupTrans markupTrans;
        TableId custInvoiceJourTableId;
        SubledgerJournalTransferId refIdentityTransferId;

        custInvoiceJourTableId = tableNum(CustInvoiceJour);

        refIdentityTransferId = this.parmReferenceIdentityTransferId();

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentLineReferenceIdentity.skipDataMethods(true);
            sourceDocumentLineReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentLineReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentLineReferenceIdentity(
            SourceDocumentLine,
            ProductNumber,
            LineNumber,
            LineText,
            SourceDocumentAcctEventReferenceIdentity)
        select
            SourceDocumentLine,
            MarkupCode,
            LineNum,
            Txt
        from markupTrans
            group by
                sourceDocumentLine.RecId,
                accountingEvent.RecId,
                markupTrans.SourceDocumentLine,
                markupTrans.MarkupCode,
                markupTrans.LineNum,
                markupTrans.Txt,
                sourceDocumentAcctEventReferenceIdentity.RecId
            where markupTrans.TransTableId == custInvoiceJourTableId
        join sourceDocumentLine
            where sourceDocumentLine.RecId == markupTrans.SourceDocumentLine
        join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
        join accountingDistribution
            where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
               && accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
               && accountingDistribution.AccountingEvent == accountingEvent.RecId
        join RecId from sourceDocumentAcctEventReferenceIdentity
            where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
               && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        notExists join sourceDocumentLineReferenceIdentityNotExists
            where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == markupTrans.SourceDocumentLine
               && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxSourceDocLineRefIdentities</Name>
				<Source><![CDATA[
    private void insertTaxSourceDocLineRefIdentities()
    {
        SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
        SourceDocumentAcctEventReferenceIdentity sourceDocumentAcctEventReferenceIdentity;
        SourceDocumentLineReferenceIdentity sourceDocumentLineReferenceIdentity, sourceDocumentLineReferenceIdentityNotExists;
        AccountingEvent accountingEvent;
        SourceDocumentHeader sourceDocumentHeader;
        SourceDocumentLine sourceDocumentLine;
        AccountingDistribution accountingDistribution;
        TaxTrans taxTrans;
        TableId custInvoiceTransTableId;
        TableId markupTransTableId;
        SubledgerJournalTransferId refIdentityTransferId;

        custInvoiceTransTableId = tableNum(CustInvoiceTrans);
        markupTransTableId = tableNum(MarkupTrans);

        refIdentityTransferId = this.parmReferenceIdentityTransferId();

        if (SourceDocumentRefIdentitiesProviderSkipMethodsFlight::instance().isEnabled())
        {
            sourceDocumentLineReferenceIdentity.skipDataMethods(true);
            sourceDocumentLineReferenceIdentity.skipBusinessEvents(true);
            sourceDocumentLineReferenceIdentity.skipEvents(true);
        }

        insert_recordset sourceDocumentLineReferenceIdentity(
            SourceDocumentLine,
            ProductNumber,
            Quantity,
            LineText,
            LineDescription,
            SourceDocumentAcctEventReferenceIdentity)
        select
            SourceDocumentLine,
            TaxCode,
            TaxValue,
            TaxItemGroup,
            TaxGroup
        from taxTrans
            group by
                sourceDocumentLine.RecId,
                accountingEvent.RecId,
                taxTrans.SourceDocumentLine,
                taxTrans.TaxCode,
                taxTrans.TaxValue,
                taxTrans.TaxItemGroup,
                taxTrans.TaxGroup,
                sourceDocumentAcctEventReferenceIdentity.RecId
            where (taxTrans.SourceTableId == custInvoiceTransTableId || taxTrans.SourceTableId == markupTransTableId)
        join sourceDocumentLine
            where sourceDocumentLine.RecId == taxTrans.SourceDocumentLine
        join sourceDocumentHeader
            where sourceDocumentHeader.RecId == sourceDocumentLine.SourceDocumentHeader
        join accountingEvent
            where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId
        join accountingDistribution
            where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
               && accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
               && accountingDistribution.AccountingEvent == accountingEvent.RecId
        join RecId from sourceDocumentAcctEventReferenceIdentity
            where sourceDocumentAcctEventReferenceIdentity.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
               && sourceDocumentAcctEventReferenceIdentity.AccountingEvent == accountingEvent.RecId
        join subledgerJournalEntryIdentityInProcess
            where subledgerJournalEntryIdentityInProcess.AccountingEvent == sourceDocumentAcctEventReferenceIdentity.AccountingEvent
               && subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == refIdentityTransferId
        notExists join sourceDocumentLineReferenceIdentityNotExists
            where sourceDocumentLineReferenceIdentityNotExists.SourceDocumentLine == taxTrans.SourceDocumentLine
               && sourceDocumentLineReferenceIdentityNotExists.SourceDocumentAcctEventReferenceIdentity == sourceDocumentAcctEventReferenceIdentity.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>