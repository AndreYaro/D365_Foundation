<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOperationProcessorAdjustInventoryService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using DM = Microsoft.Dynamics.Commerce.Runtime.DataModel;

internal final class RetailOperationProcessorAdjustInventoryService extends RetailDocumentOperationProcessorBase
{
    private const str OnHandChangeEventIdPrefix = "ohce~";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailOperationProcessorAdjustInventoryService construct(RetailDocumentOperationProcessorParameters _parameters)
    {
        return new RetailOperationProcessorAdjustInventoryService(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    protected container processInternal()
    {
        str inventoryAdjustmentCommitDocumentStr = conPeek(this.requestContainer, 1);

        DM.InventoryAdjustmentCommitDocument inventoryAdjustmentCommitDocument = RetailTransactionServiceJsonHelper::DeserializeInventoryAdjustmentCommitDocumentFromJSON(inventoryAdjustmentCommitDocumentStr);

        IEnumerator inventoryAdjustmentEnumerator = inventoryAdjustmentCommitDocument.Adjustments.GetEnumerator();
        while (inventoryAdjustmentEnumerator.MoveNext())
        {
            DM.InventoryAdjustment inventoryAdjustment = inventoryAdjustmentEnumerator.Current as DM.InventoryAdjustment;

            InventDim inventDim;
            inventDim.InventColorId     = inventoryAdjustment.ColorId;
            inventDim.InventSizeId      = inventoryAdjustment.SizeId;
            inventDim.InventStyleId     = inventoryAdjustment.StyleId;
            inventDim.configId          = inventoryAdjustment.ConfigurationId;
            inventDim.InventLocationId  = inventoryAdjustment.InventoryLocationId;
            inventDim.InventSiteId      = inventoryAdjustment.InventorySiteId;
            inventDim = InventDim::FindOrCreate(inventDim);

            IEnumerator measureQuantityEmulator = inventoryAdjustment.MeasureQuantities.GetEnumerator();
            while (measureQuantityEmulator.MoveNext())
            {
                InventInventoryDataServiceOnhandAdjustmentQueue adjustmentQueue;

                ttsbegin;

                adjustmentQueue.ItemId      = inventoryAdjustment.ItemId;
                adjustmentQueue.InventDimId = inventDim.inventDimId;
                adjustmentQueue.Company     = curExt();
                adjustmentQueue.EventId     = OnHandChangeEventIdPrefix + inventoryAdjustment.Id;
                adjustmentQueue.Datasource  = InventInventoryDataServiceCommerceIntegrationHelper::Datasource;

                DM.InventoryAdjustmentMeasureQuantity measureQuantity = measureQuantityEmulator.Current as DM.InventoryAdjustmentMeasureQuantity;
                adjustmentQueue.Qty = measureQuantity.Quantity;
                switch (measureQuantity.InventoryMeasure)
                {
                    case DM.InventoryMeasure::OnOrder:
                        adjustmentQueue.PhysicalMeasure = 'onorder';
                        break;
                    case DM.InventoryMeasure::ReservePhysical:
                        adjustmentQueue.PhysicalMeasure = 'reservphysical';
                        break;
                    case DM.InventoryMeasure::PostedQuantity:
                        adjustmentQueue.PhysicalMeasure = 'postedqty';
                        break;
                    default:
                        throw error('@RetailInventory:InvalidInventoryMeasureError');
                }

                adjustmentQueue.insert();

                ttscommit;
            }
        }

        return ['success'];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>