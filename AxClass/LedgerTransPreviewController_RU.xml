<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransPreviewController_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller <c>LedgerTransPreviewController_RU</c> class for <c>LedgerTransPreview_RU</c> report.
/// </summary>
class LedgerTransPreviewController_RU  extends SrsReportRunController implements BatchRetryable
{
    TmpLedgerTransPreview_RU    tmpLedgerTransPreview;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00006, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the report controller query.
    /// </summary>
    /// <returns>
    ///     The report controller query.
    /// </returns>
    public Query getQuery()
    {
        return this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpLedgerTransPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the parameter tmpLedgerTransPreview.
    /// </summary>
    /// <param name="_tmpLedgerTransPreview">
    /// The new value of the parameter tmpLedgerTransPreview.
    /// </param>
    /// <returns>
    ///  The current value of parameter tmpLedgerTransPreview.
    /// </returns>
    public TmpLedgerTransPreview_RU parmTmpLedgerTransPreview(TmpLedgerTransPreview_RU _tmpLedgerTransPreview = tmpLedgerTransPreview)
    {
        tmpLedgerTransPreview = _tmpLedgerTransPreview;
        return tmpLedgerTransPreview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides ability to modify the report contract before dialog is shown to the user for the <c>TmpLedgerTransPreview_RU</c> report.
    /// </summary>
    public void prePromptModifyContract()
    {
        Query query;
        QueryBuildDataSource ds;
        QueryBuildRange range;

        if (this.parmArgs().dataset() == tablenum(TmpLedgerTransPreview_RU))
        {
            this.parmTmpLedgerTransPreview(this.parmArgs().record() as TmpLedgerTransPreview_RU);
        }

        query = this.getQuery();
        ds = query.dataSourceTable(tableNum(TmpLedgerTransPreview_RU));
        range = SysQuery::findOrCreateRange(ds, fieldNum(TmpLedgerTransPreview_RU, IsCredit));
        range.value(SysQuery::value(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method change report contract before run the report.
    /// </summary>
    public void preRunModifyContract()
    {
        LedgerTransPreviewContract_RU   contract;
        RecId                           tmpTableDataRecId;      // Record ID that identies the marshalled memory table used for unposted journals.

        super();

        contract = this.parmReportContract().parmRdpContract() as LedgerTransPreviewContract_RU;
        tmpTableDataRecId = this.storeTmpTable(this.parmTmpLedgerTransPreview());
        contract.parmTmpTableDataRecId(tmpTableDataRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the memory table into a physical table and makes it available to the report.
    /// </summary>
    /// <param name="_tmpLedgerTransPreview">
    /// The table buffer of the memory table.
    /// </param>
    /// <returns>
    /// The record ID that identifies the marshalled data.
    /// </returns>
    private RecId storeTmpTable(TmpLedgerTransPreview_RU _tmpLedgerTransPreview)
    {
        RecId                       recId;
        SRSReportRunPermission      permission;
        TmpLedgerTransPreview_RU    tmpLedgerTransPreviewLocal;

        permission = new SRSReportRunPermission();
        permission.assert();

        tmpLedgerTransPreviewLocal.setTmpData(_tmpLedgerTransPreview);
        select tmpLedgerTransPreviewLocal;

        recId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(tmpLedgerTransPreviewLocal);
        CodeAccessPermission::revertAssert();
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an entry point for the <c>LedgerTransPreviewController_RU</c> class when it is called from a menu item.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>LedgerTransPreviewController_RU</c> class.
    /// </param>
    public static void main(Args _args)
    {
        LedgerTransPreviewController_RU  controller;

        if (!_args || _args.dataset()!= tablenum(TmpLedgerTransPreview_RU))
        {
            throw error(Error::missingRecord(funcname()));
        }

        controller = new LedgerTransPreviewController_RU();
        controller.parmReportName(ssrsReportStr(LedgerTransPreview_RU, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>