<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdMultiSplit</c> class shows the user dialog box to split the production order.
/// </summary>
/// <remarks>
/// Several production orders can be selected in the user dialog box. Each production order will be
/// split by using the <c>ProdUpdSplit</c> class.
/// </remarks>
class ProdMultiSplit extends ProdMulti implements BatchRetryable
{
    ProdParmSplit  standardParmSplit;

    #define.currentVersion(1)
    #LOCALMACRO.CurrentList
        standardParmSplit
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    boolean checkBuffer(Common _prodTable)
    {
        ProdTable prodTable = _prodTable as ProdTable;
        return !ProdParmSplit::exist(parmId, prodTable.ProdId) && prodTable.status().runSplit(null,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables you to perform any clean up that you want after a dialog box has been canceled.
    /// </summary>
    /// <remarks>
    ///    Override this method if any clean-up is necessary after a dialog box has been canceled.
    /// </remarks>
    void cleanupDialog()
    {
        super();

        ProdParmSplit::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        ProdParmSplit  prodParmSplit;

        return prodParmSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the form that is provided with a user interface for specifying parameters for
    ///    update of production.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    formName formName()
    {
        return formstr(ProdParmSplit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer _prodParmSplit)
    {
        ProdParmSplit prodParmSplit = _prodParmSplit;
        ProdParmSplit saveProdParmSplit;
        saveProdParmSplit.data(prodParmSplit);
        prodParmSplit.data(standardParmSplit);

        prodParmSplit.ParmId           = saveProdParmSplit.ParmId;
        prodParmSplit.RecId            = saveProdParmSplit.RecId;
        prodParmSplit.LineNum          = saveProdParmSplit.LineNum;
        prodParmSplit.ProdId           = saveProdParmSplit.ProdId;
        prodParmSplit.JobStatus        = saveProdParmSplit.JobStatus;
        prodParmSplit.ExecutedDateTime = saveProdParmSplit.ExecutedDateTime;

        prodParmSplit.AutoUpdate       = autoUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(
        Common               _prodTable,
        ParmBuffer           _prodParmSplit
        )
    {
        ProdTable prodTable = _prodTable as ProdTable;
        ProdParmSplit prodParmSplit = _prodParmSplit;
        super(prodTable,prodParmSplit);

        prodParmSplit.initFromProdTable(prodTable);
        prodParmSplit.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return ProdParmSplit::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>ProdMultiSplit</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>ProdMultiSplit</c> class.
    /// </returns>
    /// <remarks>
    ///    All variables that are required to re-initialize the class after construction must be packed.
    ///    Typically, a macro in the class declaration lists the variables to pack. Another macro holds a
    ///    version number that refers to the version of the variable list. When a new variable is introduced,
    ///    follow these steps:
    ///    <list type="number">
    ///       <item>
    ///          <description>Increment the version number in the version macro.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Copy the current list to the <c>unpack</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the new variable to the bottom of the list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Recompile the class.</description>
    ///       </item>
    ///    </list>
    ///     When the
    ///    <c>
    ///       isSwappingPrompt
    ///    </c>
    ///     method returns true, you may have to pack some prompt-related variables.
    /// </remarks>
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer _standard  = standardParmSplit)
    {
        standardParmSplit = _standard;

        return standardParmSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        QueryRun qr = new QueryRun(querystr(ProdMultiSelectSplit));
        QueryBuildRange qbr =
            SysQuery::findOrCreateRange(
                qr.query().dataSourceTable(tablenum(ProdTable)),
                fieldnum(ProdTable, ProdType));

        qbr.status(RangeStatus::Locked);
        qbr.value(SysQuery::valueNot(ProdType::Process));

        return qr.query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        ProdParmSplit prodParmSplit;

        using(var activityContext = ProdInstrumentationLogger::createLogger(classStr(ProdMultiSplit)).prodOrder().multiSplit())
        {
            super();

            select prodParmSplit
            index NumLineNumIdx
            where prodParmSplit.ParmId  == this.parmId();

            while (prodParmSplit)
            {
                try
                {
                    ProdTable::find(prodParmSplit.ProdId).status().runSplit(prodParmSplit,false,this);
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    exceptionTextFallThrough();
                }
                next prodParmSplit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter value to an instance of the
    ///    <c>ProdMultiSplit</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns true, you may have to unpack some prompt-related
    ///    variables.
    /// </remarks>
    boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conpeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                ret = super(base);
                break;
            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdMultiSplit construct(Args _args)
    {
        ProdMultiSplit prodMultiSplit = new ProdMultiSplit();

        return prodMultiSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@SYS24089";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.parmEnum() == RunChoose::Run)
        {
            ProdMultiSplit prodMultiSplit = ProdMultiSplit::construct(_args);
            RunBaseMultiParm::initFromForm(prodMultiSplit,_args);

            if (! prodMultiSplit.prompt())
            {
                return;
            }

            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
            {
                prodMultiSplit.runOnServer();
            }

            prodMultiSplit.refreshCaller(_args);
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>