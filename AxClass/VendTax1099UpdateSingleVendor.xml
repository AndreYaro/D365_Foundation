<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTax1099UpdateSingleVendor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendTax1099UpdateSingleVendor</c> class provides a method for updating 1099 box and transactions of a single vendor.
/// </summary>
internal final class VendTax1099UpdateSingleVendor
{
    private VendTable vendTable;
    private VendTax1099UpdateMultipleVendorsContract contract;
    private static SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(VendTax1099UpdateSingleVendor));

    // Telemetry Custom Properties
    private const str ProcessingVendorRecId = 'Processing Vendor RecId';
    private const str ErrorProcessingVendorRecid = 'Error: %1 Processing Vendor RecId: %2';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processUpdate</Name>
				<Source><![CDATA[
    internal boolean processUpdate()
    {
        #OCCRetryCount
        boolean isSuccess;

        using (SysInstrumentationActivityContext activityContext = this.logProcessUpdateContext())
        {
            try
            {
                ttsbegin;

                if (contract.parmDoUpdateVendorBox())
                {
                    this.updateTax1099FieldsInVendTable();
                }

                if (contract.parmDoUpdateTransaction1099())
                {
                    this.updateTax1099Transactions();
                }

                ttscommit;
                isSuccess = true;
            }
            catch (Exception::Deadlock)
            {
                if ((appl.ttsLevel() == 0) && (xSession::currentRetryCount() < #RetryNum))
                {
                    sleep(VendTax1099UpdateSingleVendor::exponentialBackOffRetryDelay(xSession::currentRetryCount()));
                    retry;
                }
                else
                {
                    this.logException(Exception::Deadlock);
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        this.logException(Exception::UpdateConflictNotRecovered);
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    this.logException(Exception::UpdateConflict);
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    this.logException(Exception::TransientSqlConnectionError);
                }
            }
            catch (Exception::Error)
            {
                this.logException(Exception::Error);
            }
        }
        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exponentialBackOffRetryDelay</Name>
				<Source><![CDATA[
    private static int exponentialBackOffRetryDelay(int _retryCount)
    {
        const int transientFaultRetryDelayInMilliseconds = 200;
        return real2int(transientFaultRetryDelayInMilliseconds * power(2, _retryCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099FieldsInVendTable</Name>
				<Source><![CDATA[
    private void updateTax1099FieldsInVendTable()
    {
        Tax1099Fields tax1099Fields;

        select firstonly RecId from tax1099Fields
            where tax1099Fields.Tax1099Box == contract.parmNewTax1099Box();

        ttsbegin;
        vendTable.selectForUpdate(true);
        vendTable.Tax1099Fields = tax1099Fields.RecId;
        vendTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099Transactions</Name>
				<Source><![CDATA[
    private void updateTax1099Transactions()
    {
        VendTax1099Update vendTax1099Update = VendTax1099Update::construct();

        vendTax1099Update.parmVendorNum(vendTable.AccountNum);
        vendTax1099Update.parmFromDate(contract.parmFromDate());
        vendTax1099Update.parmToDate(contract.parmToDate());
        vendTax1099Update.parmSetAll1099(contract.parmDoSetAll1099());
        vendTax1099Update.parmRecalcAmounts(contract.parmDoRecalcAmounts());

        // stateFor1099 was not included in this
        // as this contract handles updating tax1099 information for multiple vendors over statFor1099.
        // If stateFor1099 is explosed in UI, options to handle stateFor1099 would be
        // 1. pre-check stateFor1099 before running and inform the user about vendors that won't be included. Or we could error out.
        // 2. Handle this at runtime and "log" the results somewhere user can look at later.
        // 3. let the errors output to batch.

        vendTax1099Update.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendTax1099UpdateSingleVendor construct(VendTable _vendTable, VendTax1099UpdateMultipleVendorsContract _contract)
    {
        VendTax1099UpdateSingleVendor vendTax1099UpdateSingleVendor = new VendTax1099UpdateSingleVendor();
        vendTax1099UpdateSingleVendor.vendTable = _vendTable;
        vendTax1099UpdateSingleVendor.contract = _contract;

        return vendTax1099UpdateSingleVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logException</Name>
				<Source><![CDATA[
    private void logException(Exception _exception)
    {
        error(strFmt("@AccountsPayable:Tax1099UpdateVendorError", vendTable.AccountNum));
        logger.logError(strFmt(ErrorProcessingVendorRecId, enum2Str(_exception), any2Str(vendTable.RecId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessUpdateContext</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext logProcessUpdateContext()
    {
        SysInstrumentationActivityContext activityContext = logger.activityContext(classStr(VendTax1099UpdateSingleVendor), methodStr(VendTax1099UpdateSingleVendor, processUpdate));

        activityContext.addCustomProperty(ProcessingVendorRecId, any2Str(vendTable.recId));

        return activityContext;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>