<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendInvoiceDocument</c> class is the workflow document class for the
///    <c>VendInvoiceInfoTable</c> table.
/// </summary>
/// <remarks>
///    This class is required in order to provide a unique workflow document for a vendor invoice.
/// </remarks>
[WorkflowDocIsQueueEnabledAttribute(true, "@SYS313557"),
ExpressionCurrencyFieldMapAttribute(methodStr(VendInvoiceDocument, parmInvoiceAmount), fieldStr(VendInvoiceInfoTable, CurrencyCode)),
ExpressionHierarchyProviderAttribute(classStr(PurchReqExpressionProvider), tableStr(VendInvoiceInfoLine), fieldStr(VendInvoiceInfoLine,ProcurementCategory))]
class VendInvoiceDocument extends WorkflowDocument
{
    VendInvoiceInfoTable vendInvoiceInfoTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotals</Name>
				<Source><![CDATA[
    private container calcTotals()
    {
        PurchTotals purchTotals;
        container displayFields;
        purchTotals = PurchTotals::newParmTable(
            vendInvoiceInfoTable,
            PurchUpdate::All,
            vendInvoiceInfoTable.ParmId,
            '',
            vendInvoiceInfoTable.Ordering);

        purchTotals.parmKeepEndDisc(true);

        purchTotals.calc();

        displayFields = purchTotals.displayFields([PurchTotals::posTotalAmount()]);

        return displayFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the query to use for the document.
    /// </summary>
    /// <returns>
    ///    The name of the query to use for the document.
    /// </returns>
    queryName getQueryName()
    {
        return querystr(VendInvoiceDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    private VendInvoiceInfoTable getVendInvoiceInfoTable(recId _recId)
    {
        if (!vendInvoiceInfoTable)
        {
            vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_recId);
        }

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetSourceCheckResult</c> for the vendor invoice workflow instance.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// The <c>BudgetSourceCheckResult</c>.
    /// </returns>
    public BudgetSourceCheckResult parmBudgetCheckResult(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        BudgetSourceCheckResult budgetSourceCheckResult;

        Debug::assert(_companyId != '');

        changecompany(_companyId)
        {
            this.getVendInvoiceInfoTable(_recId);

            if (vendInvoiceInfoTable)
            {
                budgetSourceCheckResult = vendInvoiceInfoTable.getBudgetCheckResult();
            }
        }

        return budgetSourceCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckIfInvoiceHeaderHasAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the vendor invoice header has attachments or not.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// True if the vendor invoice header has an attachment; otherwise, false.
    /// </returns>
    public VendInvoiceHasAttachment parmCheckIfInvoiceHeaderHasAttachments(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        VendInvoiceHasAttachment hasAttachments;

        Debug::assert(_companyId != '');

        changecompany(_companyId)
        {
            this.getVendInvoiceInfoTable(_recId);

            if (vendInvoiceInfoTable)
            {
                hasAttachments = vendInvoiceInfoTable.checkIfHeaderHasAttachments();
            }
        }

        return hasAttachments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckIfVendorInvoiceHasAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the vendor invoice header or any of the lines have attachments or not.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// True if the vendor invoice header has an attachment; otherwise, false.
    /// </returns>
    public VendInvoiceHasAnyAttachments parmCheckIfVendorInvoiceHasAttachments(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        VendInvoiceHasAnyAttachments hasAnyAttachments;

        Debug::assert(_companyId != '');

        changecompany(_companyId)
        {
            this.getVendInvoiceInfoTable(_recId);

            if (vendInvoiceInfoTable)
            {
                hasAnyAttachments = vendInvoiceInfoTable.checkIfHeaderHasAttachments() || vendInvoiceInfoTable.checkIfLinesHaveAttachments();
            }
        }

        return hasAnyAttachments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the invoice total for the invoice document.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// The total amount of the invoice.
    /// </returns>
    public VendInvoiceAmount parmInvoiceAmount(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        container displayFields;

        this.getVendInvoiceInfoTable(_recId);

        if (vendInvoiceInfoTable)
        {
            displayFields = this.calcTotals();
        }

        return (conpeek(displayFields, PurchTotals::posTotalAmount()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchingPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the matching policy for the invoice document.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// A <c>PurchMatchingPolicyOption::ThreeWayMatch</c> or <c>PurchMatchingPolicyOption::TwoWayMatch</c>
    /// or <c>PurchMatchingPolicyOption::NoMatch</c> enumeration value, depending on the <c>PurchLine</c>
    /// records that is referenced by the invoice lines.
    /// </returns>
    public VendInvoiceMatchingPolicy parmMatchingPolicy(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        this.getVendInvoiceInfoTable(_recId);

        return VendInvoiceDocument::calculateMatchingPolicy(vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchingTaskPossible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the matching task has enough data to run for the invoice document.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    <c>NoYes::Yes</c> if the matching task has sufficient data to run; otherwise <c>NoYes::No</c>.
    /// </returns>
    public VendInvoiceMatchingTaskPossible parmMatchingTaskPossible(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        NoYes matchingTaskPossible;

        this.getVendInvoiceInfoTable(_recId);
        if (VendInvoiceInfoSubLine::existUnmatched('', vendInvoiceInfoTable.TableRefId))
        {
            matchingTaskPossible = NoYes::Yes;
        }
        else
        {
            matchingTaskPossible = NoYes::No;
        }

        return matchingTaskPossible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateMarkupMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the invoice total miscellaneous charges are within tolerance from those recorded
    ///    on the purchase order.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    A <c>NoYes::No</c> or <c>NoYes::Yes</c> enumeration value that identifies whether the invoice is
    ///    within all miscellaneous charge code tolerances, a warning icon, the total invoice miscellaneous
    ///    charge, and the total miscellaneous charge of the connected purchase order.
    /// </returns>
    public VendInvoiceValidateMarkupMatch parmValidateMarkupMatch(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        VendInvoiceValidateMarkupMatch isValidMarkupMatch = NoYes::No;
        boolean isMatched;

        this.getVendInvoiceInfoTable(_recId);

        if (vendInvoiceInfoTable)
        {
            [isMatched] = MarkupTmpTotals::totalInvoiceMatchingInfo(vendInvoiceInfoTable, NoYes::Yes);
        }

        if (isMatched)
        {
            isValidMarkupMatch = NoYes::Yes;
        }

        return isValidMarkupMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any of the enabled variance tolerances for the vendor invoice are out of
    /// tolerance.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value when the invoice is matched and the invoice has either a
    /// quantity or price variance; otherwise, the <c>NoYes::No</c> enumeration value.
    /// </returns>
    public VendInvoiceValidateMatch parmValidateMatch(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        VendInvoiceValidateMatch isValidMatch = NoYes::No;
        LastMatchVarianceOptions isMatched;

        this.getVendInvoiceInfoTable(_recId);

        if (vendInvoiceInfoTable)
        {
            isMatched = vendInvoiceInfoTable.checkIfMatched(false, true);
        }

        if (isMatched == LastMatchVarianceOptions::OK)
        {
            isValidMatch = NoYes::Yes;
        }

        return isValidMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateTotalsMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the difference between the expected totals and the invoice totals exceeds the
    ///    allowed percentage.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    true if all totals match; otherwise, false.
    /// </returns>
    public VendInvoiceValidateTotalsMatch parmValidateTotalsMatch(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        VendInvoiceValidateTotalsMatch isValidateTotalsMatch = NoYes::No;
        boolean isMatched;

        this.getVendInvoiceInfoTable(_recId);

        if (vendInvoiceInfoTable)
        {
            isMatched = vendInvoiceInfoTable.checkIfMatchedTotals();
        }

        if (isMatched)
        {
            isValidateTotalsMatch = NoYes::Yes;
        }

        return isValidateTotalsMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMatchingPolicy</Name>
				<Source><![CDATA[
    private static VendInvoiceMatchingPolicy calculateMatchingPolicy(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        PurchMatchingPolicyOption vendInvoicePolicy = PurchMatchingPolicyOption::NoMatch;

        // Search for Vend Invoice Matching Policy
        if (_vendInvoiceInfoTable)
        {
            if (VendInvoiceDocument::existLineForMatchingPolicy(PurchMatchingPolicyOption::ThreeWayMatch, _vendInvoiceInfoTable.TableRefId))
            {
                vendInvoicePolicy = PurchMatchingPolicyOption::ThreeWayMatch;
            }
            else if (VendInvoiceDocument::existLineForMatchingPolicy(PurchMatchingPolicyOption::TwoWayMatch, _vendInvoiceInfoTable.TableRefId))
            {
                vendInvoicePolicy = PurchMatchingPolicyOption::TwoWayMatch;
            }
        }

        return vendInvoicePolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendInvoiceDocument construct()
    {
        return new VendInvoiceDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLineForMatchingPolicy</Name>
				<Source><![CDATA[
    private static boolean existLineForMatchingPolicy(PurchMatchingPolicyOption _policy, TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchLine purchLine;

        select firstonly RecId from purchLine
            exists join RecId, TableRefId, ParmId from vendInvoiceInfoLine
                where purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
                && purchLine.PurchId == vendInvoiceInfoLine.OrigPurchId
                && vendInvoiceInfoLine.TableRefId == _tableRefId
                && purchLine.MatchingPolicy == _policy;

        return purchLine ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the due date for the invoice document.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// If payment schedule is not set on either the Invoice/PO then due date from vendor invoice is returned.
    /// If payment schedule is set on either the Invoice/PO and payment schedule lines are created,
    /// the earliest due date from payment schedule lines is returned.
    /// If payment schedule is set on either the Invoice/PO and payment schedule lines aren't created,
    /// then payment schedule will be created on Invoice and the earliest due date from payment schedule line is returned.
    /// </returns>
    public DueDate parmDueDate(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        VendPaymSched vendPaymentSched;
        VendPaymSchedLine vendPaymentSchedLine;
        PurchTable purchTable;

        this.getVendInvoiceInfoTable(_recId);
        purchTable = PurchTable::find(vendInvoiceInfoTable.PurchId);

        if (vendInvoiceInfoTable.paymentSched || purchTable.paymentSched)
        {
            // Check on the Invoice if payment Schedule has been created
            vendPaymentSched = VendPaymSched::find(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.Recid);

            // If it's a PO Invoice and payment schedule hasn't been created check for the payment schedule on PO
            if (!vendInvoiceInfoTable.isnonPO() && !vendPaymentSched)
            {
                vendPaymentSched = VendPaymSched::find(purchTable.TableId, purchTable.Recid);
            }

            // If payment schedule is unavailable then create payment schedule lines for VendorInvoice
            if (!vendPaymentSched)
            {
                vendInvoiceInfoTable.createPaymentSched();
                vendPaymentSched = VendPaymSched::find(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.Recid);
            }

            // Return the earliest due date from the Payment Schedule lines
            select firstOnly DueDate from vendPaymentSchedLine
                order by vendPaymentSchedLine.Duedate
                where vendPaymentSchedLine.FatherRecId == vendPaymentSched.RecID;

            return vendPaymentSchedLine.Duedate;
        }
        else
        {
            return vendInvoiceInfoTable.FixedDuedate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoesVendorInvoiceReferenceBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified vendor invoice has line references to a budget reservation.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the vendor invoice table.
    /// </param>
    /// <param name="_vendInvoiceInfoTableTableId">
    /// The table ID that corresponds to the vendor invoice table.
    /// </param>
    /// <param name="_vendInvoiceInfoTableRecId">
    /// The record ID that corresponds to the vendor invoice table record.
    /// </param>
    /// <returns>
    /// Yes if the current document references a budget reservation; otherwise, no.
    /// </returns>
    public BudgetReservationReferenced_PSN parmDoesVendorInvoiceReferenceBudgetReservation(CompanyId _companyId, tableId _vendInvoiceInfoTableTableId, VendInvoiceInfoTableRecId _vendInvoiceInfoTableRecId)
    {
        BudgetReservationReferenced_PSN isBudgetReservationReferenced;
        
        if (_vendInvoiceInfoTableTableId != tableNum(VendInvoiceInfoTable))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            Debug::assert(_companyId != '');

            changecompany(_companyId)
            {
                VendInvoiceInfoTable vendInvoiceInfoTableLocal = this.getVendInvoiceInfoTable(_vendInvoiceInfoTableRecId);

                VendInvoiceInfoLine vendInvoiceInfoLine;
                select firstOnly RecId from vendInvoiceInfoLine
                where vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTableLocal.TableRefId
                    && vendInvoiceInfoLine.ParmId == vendInvoiceInfoTableLocal.ParmId
                    && vendInvoiceInfoLine.BudgetReservationLine_PSN != 0;

                if (vendInvoiceInfoLine.RecId)
                {
                    isBudgetReservationReferenced = NoYes::Yes;
                }
                else
                {
                    isBudgetReservationReferenced = NoYes::No;
                }
            }
        }

        return isBudgetReservationReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasOwnership</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true when the user provided is considered an owner of the workflow instance or the invoice is submitted to workflow through automation and the user is an Accounts payable clerk.
    /// </summary>
    /// <param name = "_user">Workflow user id</param>
    /// <param name = "_workflowTrackingStatusTable">An instance of <c>WorkflowTrackingStatusTable</c> table</param>
    /// <returns></returns>
    public boolean userHasOwnership(WorkflowUser _user, WorkflowTrackingStatusTable _workflowTrackingStatusTable)
    {
        boolean userIsOwner;
        boolean invoiceSubmittedToWorkflowByAutomation;

        userIsOwner = super(_user, _workflowTrackingStatusTable);

        //Checks if the user is Accounts payable clerk to be able to recall, resume, resubmit the vendor invoice to workflow
        if (!userIsOwner && this.hasAccessToWorkflowActions())
        {
            SysWorkflowTable sysWorkFlowTable = SysWorkflowTable::find(_workflowTrackingStatusTable.CorrelationId);
            if (sysWorkFlowTable.ContextTableId == tableNum(VendInvoiceInfoTable))
            {
                VendInvoiceInfoTable vendInvoiceHeader = VendInvoiceInfoTable::findRecId(sysWorkFlowTable.ContextRecId);

                //Checks if the invoice is submitted by the automation process
                invoiceSubmittedToWorkflowByAutomation = VendInvoiceAutomationStateManagement::isInvoiceSubmittedToWorkflowByAutomation(vendInvoiceHeader);
            }
        }

        return userIsOwner || invoiceSubmittedToWorkflowByAutomation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAccessToWorkflowActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the user has access to workflow action menu items to recall/resume workflow.
    /// </summary>
    /// <returns>True, if the user has access; false, otherwise.</returns>
    private boolean hasAccessToWorkflowActions()
    {
        SecurityRights rights = SecurityRights::construct();

       return (rights.hasMenuItemAccess(SecurableType::MenuItemAction, menuitemactionstr(VendInvoiceHeaderWorkflowCancel))
            || rights.hasMenuItemAccess(SecurableType::MenuItemAction, menuitemactionstr(WorkflowStatusResume)));

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>