<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimension</c> class is the base class for inventory dimensions.
/// </summary>
/// <remarks>Subclasses must be stateless, as a singleton pattern is used by the factory.</remarks>
abstract class InventDimension
{
    static private Set dimensions;
    static private Set sharedExtendedDataTypes;
    static private Map fieldIdInTable = new Map(Types::String, Types::Integer);
    private const str CacheClassScope = 'InventDimension';

    FieldId                 inventDimFieldId;
    FieldId                 inventDimParmFieldId;

    private SysDictField    inventDimDictField;

    LabelString             inventDimFieldLabel;
    UnknownNoYes            inventDimFieldHasTableRelation;

    private UnknownNoYes    isEnabled;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInventDimFieldId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FieldId parmInventDimFieldId()
    {
        return inventDimFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParmFieldId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FieldId parmInventDimParmFieldId()
    {
        return inventDimParmFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the configuration key for the dimension is enabled.
    /// </summary>
    /// <returns>true if enabled; otherwise, false.</returns>
    [Hookable(false)]
    public final boolean isEnabled()
    {
        if (isEnabled == UnknownNoYes::Unknown)
        {
            isEnabled = UnknownNoYes::No;
            DictType dictType = new DictType(this.extendedDataTypeId());

            if (dictType)
            {
                ConfigurationKeyId configKey = dictType.configurationKeyId();
                if (!configKey ||
                   isConfigurationkeyEnabled(configKey))
                {
                    isEnabled = UnknownNoYes::Yes;
                }
            }
        }
        return isEnabled == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendedDataTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Id for the extended data type defining the dimension.
    /// </summary>
    /// <returns>The extended data type's Id.</returns>
    [Hookable(false)]
    protected ExtendedTypeId extendedDataTypeId()
    {
        return this.dictField().typeId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>compatibleExtendedDataTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a collection of extended data types that are compatible with this dimension.
    /// </summary>
    /// <returns>A collection of extended data type Ids</returns>
    /// <remarks>The collection also contains eventual shared extended data types.</remarks>
    private Set compatibleExtendedDataTypes()
    {
        Set extendedDataTypes = new Set(Types::Integer);
        // Include InventDim field's EDT - could be InventDimension1
        extendedDataTypes.add(this.dictField().typeId());

        // Include the hierarchy for the specialized dimension EDT.
        DictType dictType = new DictType(this.extendedDataTypeId());
        if (dictType)
        {
            extendedDataTypes.add(dictType.id());
            while (dictType.extend())
            {
                extendedDataTypes.add(dictType.extend());
                dictType = new dictType(dictType.extend());
            }
        }
        return extendedDataTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sharedExtendedDataTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a collection of extended data types shared between dimensions.
    /// </summary>
    /// <returns>A collection of extended data type Ids</returns>
    /// <remarks><c>InventBatchSerialId</c> is a shared extended data type.</remarks>
    private static Set sharedExtendedDataTypes()
    {
        if (!sharedExtendedDataTypes)
        {
            sharedExtendedDataTypes = new Set(Types::Integer);

            Set usedExtendedDataTypes = new Set(Types::Integer);

            Enumerator enum = InventDimension::getEnumerator();
            while (enum.moveNext())
            {
                InventDimension inventDimension = enum.current() as InventDimension;

                Set edtsForDim = inventDimension.compatibleExtendedDataTypes();
                sharedExtendedDataTypes = Set::union(sharedExtendedDataTypes, Set::intersection(edtsForDim, usedExtendedDataTypes));
                usedExtendedDataTypes = Set::union(usedExtendedDataTypes, edtsForDim);
            }
        }
        return sharedExtendedDataTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>className</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the class.
    /// </summary>
    /// <returns>The class name.</returns>
    [Hookable(false)]
    public final ClassName className()
    {
        return classId2Name(classIdGet(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFieldIdViaInventDimFieldsMap</Name>
				<Source><![CDATA[
    private FieldId findFieldIdViaInventDimFieldsMap(TableName _tableName)
    {
        FieldId fieldIdOnMap = SysDictField::findMappingFieldId(tableNum(InventDim), this.parmInventDimFieldId(), tableNum(InventDimFieldsMap));
        return SysDictField::findMappedFieldId(tableNum(InventDimFieldsMap), fieldIdOnMap, tableName2id(_tableName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIdentifyingExtendedDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given <c>ExtendedTypeId</c> is identifying the inventory dimension.
    /// </summary>
    /// <param name = "_extendedTypeId">
    /// The <c>ExtendedTypeId</c> to check for.
    /// </param>
    /// <returns>
    /// true if the given <c>ExtendedTypeId</c> identifies the current inventory dimension; otherwise, false.
    /// </returns>
    public boolean isIdentifyingExtendedDataType(ExtendedTypeId _extendedTypeId)
    {
        Set identifyingEDTs = Set::difference(this.compatibleExtendedDataTypes(), InventDimension::sharedExtendedDataTypes());
        return identifyingEDTs.in(_extendedTypeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFieldIdViaExtendedDataTypes</Name>
				<Source><![CDATA[
    private FieldId findFieldIdViaExtendedDataTypes(TableName _tableName)
    {
        SysDictTable dictTable = SysDictTable::newName(_tableName);
        Set acceptableEDTs = Set::difference(this.compatibleExtendedDataTypes(), InventDimension::sharedExtendedDataTypes());
        Set foundFields = new Set(Types::Integer);

        const boolean includeNonSavedFields = false;
        const boolean includeInheritedFields = true;
        const boolean includeArrayFields = false;
        Enumerator fields = dictTable.fields(includeNonSavedFields, includeInheritedFields, includeArrayFields).getEnumerator();

        FieldId lastFoundFieldId;

        while (fields.moveNext())
        {
            SysDictField dictField = fields.current() as SysDictField;
            if (acceptableEDTs.in(dictField.typeId()))
            {
                lastFoundFieldId = dictField.id();
                foundFields.add(lastFoundFieldId);
            }
        }
    
        switch (foundFields.elements())
        {
            case 0:
                return 0;

            case 1:
                return lastFoundFieldId;

            default:
                // Multiple fields are mapping the dimension for the table.
                // Consider if meta data is correct, alternatively override this method for special cases.

                // Do not cache this error state
                throw error(strfmt("@SCM:MultipleDimensionMappingsForTable", this.className(), dictTable.name()));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdInTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field Id for the dimension in a given table.
    /// </summary>
    /// <param name = "_tableName">The name of the table.</param>
    /// <returns>The field Id when found; otherwise, zero.</returns>
    public FieldId fieldIdInTable(TableName _tableName)
    {
        ClassName dimensionClassName = this.className();
        str cacheKey = _tableName+';'+dimensionClassName;

        if (!fieldIdInTable.exists(cacheKey))
        {
            FieldId fieldId = this.findFieldIdViaInventDimFieldsMap(_tableName);

            if (!fieldId)
            {
                fieldId = this.findFieldIdViaExtendedDataTypes(_tableName);
            }

            fieldIdInTable.insert(cacheKey, fieldId);
        }

        return fieldIdInTable.lookup(cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes the base type of the dimension.
    /// </summary>
    /// <returns>The base type.</returns>
    public final Types baseType()
    {
        return this.dictField().baseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the label for the corresponding inventory dimension table field.
    /// </summary>
    /// <returns>Inventory dimension field label.</returns>
    public final LabelString label()
    {
        if (!inventDimFieldLabel)
        {
            inventDimFieldLabel = this.dictField().label();
        }

        return inventDimFieldLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dictField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the singleton instance of the <c>SysDictField</c> class corresponding to the inventory dimension field.
    /// </summary>
    /// <returns>A <c>SysDictField</c> class instance.</returns>
    protected final SysDictField dictField()
    {
        if (!inventDimDictField)
        {
            inventDimDictField = new SysDictField(tableNum(InventDim), this.parmInventDimFieldId());
        }
        return inventDimDictField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTableRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this inventory dimension field has a relation to a master data table.
    /// </summary>
    /// <returns>true, if the inventory dimension field is a foreign key to a master data table; otherwise, false.</returns>
    public final boolean hasTableRelation()
    {
        if (inventDimFieldHasTableRelation == UnknownNoYes::Unknown)
        {
            if (this.baseType() == Types::String
                && new DictRelation(tableNum(InventDim)).loadFieldRelation(this.parmInventDimFieldId()))
            {
                inventDimFieldHasTableRelation = UnknownNoYes::Yes;
            }
            else
            {
                inventDimFieldHasTableRelation = UnknownNoYes::No;
            }
        }

        return inventDimFieldHasTableRelation == UnknownNoYes::Yes ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        ClassName className = classId2Name(classIdGet(this));
        inventDimFieldId = InventDim::fieldIdForDimension(className);
        inventDimParmFieldId = InventDimParm::fieldIdForDimension(className);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSelective</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the dimension is selective.
    /// </summary>
    /// <returns>
    ///    true if the dimension is selective; otherwise, false.
    /// </returns>
    /// <remarks>
    ///   A dimension is considered selective when its value qualifies a relatively small number of records in the <c>InventDim</c> table.
    ///   For example: Serial number is selective, as few records will share the same value; whereas Site is not.
    /// </remarks>
    public boolean isSelective()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAffectingPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the dimension affects the price calculation.
    /// </summary>
    /// <returns>
    ///    true if the dimension affects prices; otherwise, false.
    /// </returns>
    public boolean isAffectingPrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConsistent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the dimension is consistent.
    /// </summary>
    /// <returns>
    ///    true if the dimension is consistent; otherwise, false.
    /// </returns>
    public boolean isConsistent()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventItemSetupRelevant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the dimension is relevant for InventItemSetup.
    /// </summary>
    /// <returns>
    ///    true if the dimension is relevant for InventItemSetup; otherwise, false.
    /// </returns>
    public boolean isInventItemSetupRelevant()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemCoverageDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the dimension is a coverage dimension.
    /// </summary>
    /// <returns>
    ///    true if the dimension is a coverage dimension; otherwise, false.
    /// </returns>
    public boolean isItemCoverageDimension()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferReceiptMergeable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the dimension is mergeable for transfer receipts.
    /// </summary>
    /// <returns>
    ///    true if the dimension is mergeable; otherwise, false.
    /// </returns>
    public boolean isTransferReceiptMergeable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferTransitReceiptMergeable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the dimension is mergeable for transfer transit receipts.
    /// </summary>
    /// <returns>
    ///    true if the dimension is mergeable; otherwise, false.
    /// </returns>
    public boolean isTransferTransitReceiptMergeable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportingFlexibleReservationsOfDemandOrders</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the dimension can be used for flexible reservation of demand orders.
    /// </summary>
    /// <returns>
    ///    true if the dimension is can be used; otherwise, false.
    /// </returns>
    public boolean isSupportingFlexibleReservationsOfDemandOrders()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventDimFieldId</Name>
				<Source><![CDATA[
    static private InventDimension newFromInventDimFieldId(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(InventDim, InventColorId):
                return new InventProductDimensionColor();
            case fieldNum(InventDim, InventSizeId):
                return new InventProductDimensionSize();
            case fieldNum(InventDim, InventStyleId):
                return new InventProductDimensionStyle();
            case fieldNum(InventDim, InventVersionId):
                return new InventProductDimensionVersion();
            case fieldNum(InventDim, ConfigId):
                return new InventProductDimensionConfig();
        
            case fieldNum(InventDim, InventBatchId):
                return new InventTrackingDimensionBatch();
            case fieldNum(InventDim, InventSerialId):
                return new InventTrackingDimensionSerial();
            case fieldNum(InventDim, InventOwnerId_RU):
                return new InventTrackingDimensionOwner();
            case fieldNum(InventDim, InventGTDId_RU):
                return new InventTrackingDimensionGTD_RU();
            case fieldNum(InventDim, InventProfileId_RU):
                return new InventTrackingDimensionProfile_RU();        
        }

        ClassName className = InventDimFieldBinding::findOrCreateByFieldName(fieldId2Name(tableNum(InventDim), _fieldId)).ClassName;

        if (className)
        {
            SysDictClass dictClass = SysDictClass::newName(className);
            if (dictClass)
            {
                return dictClass.makeObject() as InventDimension;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singletonFromInventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance for the dimension based on a <c>FieldId</c> value from the <c>InventDim</c> table.
    /// </summary>
    /// <param name = "_fieldId">The field Id.</param>
    /// <returns>An instance, or null</returns>
    [Hookable(false)]
    static public InventDimension singletonFromInventDimFieldId(FieldId _fieldId)
    {
        SysGlobalCache sysGlobalCache = classfactory.globalCache();

        if (sysGlobalCache.isSet(CacheClassScope, _fieldId))
        {
            return sysGlobalCache.get(CacheClassScope, _fieldId);
        }

        InventDimension instance = InventDimension::newFromInventDimFieldId(_fieldId);

        if (instance)
        {
            instance.init();
        }
        sysGlobalCache.set(CacheClassScope, _fieldId, instance);
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flush</Name>
				<Source><![CDATA[
    [Hookable(false)]
    static internal void flush()
    {
        classfactory.globalCache().clear(CacheClassScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator of inventory dimensions.
    /// </summary>
    /// <returns>An enumerator of inventory dimensions.</returns>
    /// <remarks>Only dimensions that are supported by this class hierarchy, i.e. product and tracking dimensions, are included.</remarks>
    static private Enumerator getEnumerator()
    {
        return InventDimension::dimensions().getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a collection of inventory dimensions.
    /// </summary>
    /// <returns>A collection of inventory dimensions.</returns>
    static private Set dimensions()
    {
        if (!dimensions)
        {
            dimensions = new Set(Types::Class);
            var enum = InventDim::dimFieldListEnumerator();

            while (enum.moveNext())
            {
                InventDimension dim = InventDimension::singletonFromInventDimFieldId(enum.current());
                if (dim)
                {
                    dimensions.add(dim);
                }
            }
        }

        return dimensions;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>