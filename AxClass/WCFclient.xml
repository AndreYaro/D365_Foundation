<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WCFclient</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
using System.Xml;

public class WcfClient
{
    private str assemblyName;
    private str typeName;
    private URL url;
    protected X509Certificate2 certificate;

    private System.Type wcfClientType;
    private System.Object wcfClient;
    private Map methods;
    private const str EndpointPropertyName = 'Endpoint';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>request</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls a remote method.
    /// </summary>
    /// <param name="message">
    /// The message to be sent to a Mexican PAC service.
    /// </param>
    /// <returns>The response string.</returns>
    /// <exception><c>Exception::CLRError</c> relate the <c>System.Reflection</c> namespace.</exception>
    public str request(str methodName, str message, container otherArgs)
    {
        System.Reflection.MethodInfo method = this.getMethod(MethodName);
        container methodArgs = this.getMethodArgs(method, message, otherArgs);

        System.Object clientInstance = this.get();
        System.Reflection.PropertyInfo property = this.getProperty(EndpointPropertyName) as System.Reflection.PropertyInfo;
        System.ServiceModel.Description.ServiceEndpoint endPoint;

        if (property)
        {
            endPoint = property.GetValue(clientInstance);
        }

        if (this is EInvoiceInterfacturaWCF && endPoint)
        {
            System.ServiceModel.BasicHttpsBinding binding = endPoint.Binding;
            XmlDictionaryReaderQuotas readerQuotas = binding.get_ReaderQuotas();
            readerQuotas.set_MaxStringContentLength(EInvoiceInterfacturaWCF::maxExpectedContentStringLength(strLen(message)));
            binding.set_MaxReceivedMessageSize(EInvoiceInterfacturaWCF::maxExpectedResponseMessageSize(message));
        }

        System.Object result = method.Invoke(clientInstance, methodArgs);

        return result.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMethodArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rearrange arguments before invoke wcf method.
    /// </summary>
    /// <param name = "methodName">A method name.</param>
    /// <param name = "message">A message.</param>
    /// <param name = "otherArgs">Other args.</param>
    /// <returns>A container with message and other aruments for all methods.</returns>
    /// <remarks>
    /// This is extension point to rearrange or adjustment arguments.
    /// The <c>method</c> argument is not used in this implementation. It reserved for extends classes.
    /// </remarks>
    protected container getMethodArgs(System.Reflection.MethodInfo method, str message, container otherArgs)
    {
        return [message] + otherArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a WCF client.
    /// </summary>
    /// <returns>The WCF client object.</returns>
    /// <remarks>It creates a WCF client due a first call only. Otherwise returns a stored value.</remarks>
    /// <exceptions><c>Exception::CLRError</c> relate the <c>System.Reflection</c> namespace.</exceptions>
    public System.Object get()
    {
        if (!wcfClient)
        {
            wcfClient = this.createWcfClient();
            this.SetCertificate();
        }

        return wcfClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBinding</Name>
				<Source><![CDATA[
    protected System.ServiceModel.Channels.Binding createBinding()
    {
        System.ServiceModel.Channels.Binding result;

        if (this.isHttps())
        {
            result = new System.ServiceModel.BasicHttpsBinding();
        }
        else
        {
            result = new System.ServiceModel.BasicHttpBinding();
        }

        return result;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createEndpointAddress</Name>
				<Source><![CDATA[
    protected System.ServiceModel.EndpointAddress createEndpointAddress()
    {
        System.ServiceModel.EndpointAddress address = new System.ServiceModel.EndpointAddress(this.getUrl());

        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWcfClient</Name>
				<Source><![CDATA[
    protected System.Object createWcfClient()
    {
        System.ServiceModel.Channels.Binding binding = this.createBinding();
        System.ServiceModel.EndpointAddress address = this.createEndpointAddress();

        wcfClient = System.Activator::CreateInstance(this.getWcfClientType(), [binding, address]);

        if (!wcfClient)
        {
            setPrefix(url);
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return wcfClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHttps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the callee webservice is secure.
    /// </summary>
    /// <returns>
    /// true if the webservice is secure; false otherwise.
    /// </returns>
    protected boolean isHttps()
    {
        return strStartsWith(strLTrim(this.getUrl()), 'https://');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCertificate</Name>
				<Source><![CDATA[
    protected void setCertificate()
    {
        if (certificate)
        {
            const str methodName = 'ClientCredentials';
            System.Reflection.PropertyInfo method = this.getWcfClientType().GetProperty(methodName);
            if (method == null)
            {
                throw error(strfmt("@SYS60360", methodName));
            }

            System.ServiceModel.Description.ClientCredentials clientCredentials = method.GetValue(this.get());
            System.ServiceModel.Security.X509CertificateInitiatorClientCredential clientCertificate = clientCredentials.get_ClientCertificate();
            clientCertificate.set_Certificate(certificate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a method object in the sored messages <c>Map</c> or gets a method object from a <c>WcfClientType</c>.
    /// </summary>
    /// <param name = "methodName">A method name.</param>
    /// <returns>A <c>System.Reflection.MethodInfo</c> object if method fouded. Otherwise throws <c>Exception::Error</c>.</returns>
    /// <exception><c>Exception::Error</c> if method no found.</exception>
    protected System.Reflection.MethodInfo getMethod(str methodName)
    {
        if (!methods || typeOf(methods) != Types::Class || !(methods is Map))
        {
            methods = new Map(Types::String, Types::Class);
        }

        System.Reflection.MethodInfo method;
        if (methods.exists(MethodName))
        {
            method = methods.lookup(methodName);
        }
        else
        {
            method = this.getWcfClientType().GetMethod(methodName);
        }

        if (!method)
        {
            setPrefix(url);
            throw error(strfmt("@GLS62920", methodName));
        }

        return method;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProperty</Name>
				<Source><![CDATA[
    private System.Reflection.PropertyInfo getProperty(str _propertyName)
    {
        System.Reflection.PropertyInfo property = this.getWcfClientType().GetProperty(_propertyName);

        if (!property)
        {
            setPrefix(url);
            throw error(strfmt("@GLS62920", _propertyName));
        }

        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssemblyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an assembly name.
    /// </summary>
    /// <returns>An assembly name.</returns>
    public str getAssemblyName()
    {
        return assemblyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a fully qualified type name.
    /// </summary>
    /// <returns>A fully qualified type name.</returns>
    public str getTypeName()
    {
        return typeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a PAC service url.
    /// </summary>
    /// <returns>A PAC service url.</returns>
    public URL getUrl()
    {
        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWcfClientType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>System.Type</c> object for a WCF client.
    /// </summary>
    /// <returns>A <c>System.Type</c> object.</returns>
    /// <remarks>It loads a type info from assembly due a first call only. Otherwise returns a stored value.</remarks>
    /// <exceptions><c>Exception::CLRError</c> relate the <c>System.Reflection</c> namespace.</exceptions>
    public System.Type getWcfClientType()
    {
        if (!wcfClientType)
        {
            System.Reflection.Assembly assembly = System.Reflection.Assembly::Load(this.getAssemblyName());
            wcfClientType = assembly.GetType(this.getTypeName());

            if (!wcfClientType)
            {
                setPrefix(strFmt('%1, %2', assemblyName, typeName));
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        return wcfClientType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a certificate.
    /// </summary>
    /// <retuns>
    /// <returns>
    /// A certificate.
    /// </returns>
    public X509Certificate2 getCertificate()
    {
        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(str _assemblyName, str _typeName, URL _url, X509Certificate2 _certificate = null)
    {
        assemblyName = _assemblyName;
        typeName = _typeName;
        url = _url;
        certificate = _certificate;

        this.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        if( !assemblyName || !typeName || !url )
        {
            setPrefix(url);
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs a new object of the <c>EInvoiceInterfacturaWCF</c> class.
    /// </summary>
    /// <param name = "_assemblyName">An assembly name.</param>
    /// <param name = "_fullQualifiedTypeName">A full qualified type name.</param>
    /// <param name = "_url">A PAC service url.</param>
    /// <param name = "_certificate">A certificate</param>
    /// <returns>An object of the <c>EInvoiceInterfacturaWCF</c> class.</returns>
    public static WcfClient construct(
        str _assemblyName,
        str _fullQualifiedTypeName,
        URL _url,
        X509Certificate2 _certificate = null)
    {
        WcfClient wcfClient = new WcfClient(_assemblyName, _fullQualifiedTypeName, _url, _certificate);

        if (!wcfClient)
        {
            setPrefix(_fullQualifiedTypeName);
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return wcfClient;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>