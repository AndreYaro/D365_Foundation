<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionDetailsEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionDetailsEventHandler</c> class subscribes to events involving <c>DimensionDetails</c>.
/// </summary>
public static class DimensionDetailsEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DimensionAttribute_OnSelectionChanged</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(DimensionDetails, DimensionAttribute), FormDataSourceEventType::SelectionChanged)]
    public static void DimensionAttribute_OnSelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            DimensionAttribute dimensionAttribute = sender.cursor() as DimensionAttribute;
            DimensionDetailsEventHandler::setBalancingEnablement_PSN(sender.formRun(), dimensionAttribute.IsBalancing_PSN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Extension_IsBalancing_PSN_OnModified</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DimensionDetails, Extension_IsBalancing_PSN), FormControlEventType::Modified)]
    public static void Extension_IsBalancing_PSN_OnModified(FormControl sender, FormControlEventArgs e)
    {
        const RecId EmptyRecId = 0;

        FormDataSource dimensionAttribute_ds = sender.dataSourceObject();
        DimensionAttribute dimensionAttribute = dimensionAttribute_ds.cursor() as DimensionAttribute;

        if (!dimensionAttribute.IsBalancing_PSN && dimensionAttribute.BalancingDimension_PSN)
        {
            FormDataObject balancingDimensionField = dimensionAttribute_ds.object(fieldNum(DimensionAttribute, BalancingDimension_PSN));
            balancingDimensionField.setValue(EmptyRecId);
        }

        DimensionDetailsEventHandler::setBalancingEnablement_PSN(sender.formRun(), dimensionAttribute.IsBalancing_PSN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Extension_IsBalancing_PSN_OnValidating</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DimensionDetails, Extension_IsBalancing_PSN), FormControlEventType::Validating)]
    public static void Extension_IsBalancing_PSN_OnValidating(FormControl sender, FormControlEventArgs e)
    {
        FormCheckBoxControl checkBoxControl = sender as FormCheckBoxControl;

        if (!checkBoxControl.checked())
        {
            if (Box::yesNo("@SPS1166", DialogButton::No) == DialogButton::No)
            {
                checkBoxControl.checked(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Extension_BalancingDimension_PSN_OnLookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(DimensionDetails, Extension_BalancingDimension_PSN), FormControlEventType::Lookup)]
    public static void Extension_BalancingDimension_PSN_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        FormReferenceControl referenceControl = sender as FormReferenceControl;

        // Instantiate SysReferenceTableLookup object using table.
        SysReferenceTableLookup dimensionAttributelookup = SysReferenceTableLookup::newParameters(
            tableNum(DimensionAttribute),
            referenceControl,
            true);

        // Create the query. Select dimensions attribute that are marked for balancing.
        Query query = new Query();
        QueryBuildDataSource qdbsDimensionAttribute = query.addDataSource(tableNum(DimensionAttribute));
        qdbsDimensionAttribute.addRange(fieldNum(DimensionAttribute, IsBalancing_PSN)).value(queryValue(enum2int(NoYes::Yes)));
        qdbsDimensionAttribute.addRange(fieldNum(DimensionAttribute, BalancingDimension_PSN)).value(queryValue(0));
        qdbsDimensionAttribute.addRange(fieldNum(DimensionAttribute, RecId)).value(SysQuery::valueNot(sender.dataSourceObject().cursor().RecId));

        // Set the query to be used by the lookup form
        dimensionAttributelookup.parmQuery(query);

        // Specify the fields to show in the form.We have chosen Name.
        dimensionAttributelookup.addLookupfield(fieldNum(DimensionAttribute, Name));

        // Perform the lookup
        dimensionAttributelookup.performFormLookup();

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Extension_BalancingDimension_PSN_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(DimensionDetails, DimensionAttribute, BalancingDimension_PSN), FormDataFieldEventType::Modified)]
    public static void Extension_BalancingDimension_PSN_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        DimensionAttribute dimensionAttribute = sender.dataSource().cursor();

        DimensionAttributeRecId origBalancingDimension = dimensionAttribute.orig().BalancingDimension_PSN;

        if (!dimensionAttribute.BalancingDimension_PSN && dimensionAttribute.IsBalancing_PSN == NoYes::Yes)
        {
            // User has emptied out the BalancingDimension_PSN field without unchecking the IsBalancing checkbox
            if (Box::yesNo("@SPS1168", DialogButton::No) == DialogButton::No)
            {
                dimensionAttribute.BalancingDimension_PSN = origBalancingDimension;
            }
        }
        else if (dimensionAttribute.IsBalancing_PSN && dimensionAttribute.BalancingDimension_PSN != origBalancingDimension)
        {
            DimensionAttribute existingDimensionAttribute;

            select firstonly RecId from existingDimensionAttribute
                where existingDimensionAttribute.BalancingDimension_PSN == dimensionAttribute.BalancingDimension_PSN;

            if (existingDimensionAttribute.RecId)
            {
                checkFailed(strfmt("@SPS1167", DimensionAttribute::find(dimensionAttribute.BalancingDimension_PSN).Name));
                dimensionAttribute.BalancingDimension_PSN = origBalancingDimension;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBalancingEnablement_PSN</Name>
				<Source><![CDATA[
    private static void setBalancingEnablement_PSN(FormRun _formRun, boolean _isBalancing)
    {
        if (_formRun)
        {
            FormControl balancingDimensionControl = _formRun.control(_formRun.controlId(identifierStr(Extension_BalancingDimension_PSN)));

            if (balancingDimensionControl)
            {
                balancingDimensionControl.allowEdit(_isBalancing);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>