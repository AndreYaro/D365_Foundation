<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UniqueCertificationFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
/// <summary>
/// Represents a Unique Certification feature for integration with Feature Management.
/// </summary>
[Export(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class UniqueCertificationFeature implements
    Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata,
    Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureLifecycle,
    IFeatureRuntimeToggle,
    IFeaturePrerequisites,
    IFeatureMetadataEnablementNotifiable
{
    private static UniqueCertificationFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new UniqueCertificationFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>An <c>UniqueCertificationFeature</c> instance.</returns>
    [Hookable(false)]
    public static UniqueCertificationFeature instance()
    {
        return UniqueCertificationFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@ExtendedItallianLocalization:ItalyUniqueCertificationFeatureName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@ExtendedItallianLocalization:UniqueCertificationFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2112708&clcid=0x409';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return ThirdPartyFeatureModelChecker::checkContextApplicability(EXILFeature::Exil4001);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canEnable()
    {
        return !ThirdPartyFeatureModelChecker::EXILFeatureEnabled(EXILFeature::Exil4001) && ThirdPartyFeatureModelChecker::EXILDataUpgradePerformed(EXILFeature::Exil4001);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotEnableMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LabelString cannotEnableMessage()
    {
        return ThirdPartyFeatureModelChecker::getCannotEnableMessage(EXILFeature::Exil4001);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        this.refreshFeatureExposureState();
        NumberSeqModuleLedger ledgerModule = new NumberSeqModuleLedger();
        ledgerModule.load();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFeatureExposureState</Name>
				<Source><![CDATA[
    private void refreshFeatureExposureState()
    {
        int originalTTSLevel = 0;
        
        // Commit the whole transaction so state change is visible in db
        while (appl.ttsLevel() > 0)
        {
            ++originalTTSLevel;
            ttscommit;
        }

        // Refresh feature state for session based on new value
        Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureStateProvider::ClearFeatureStateCacheForSession(this);
        Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureStateProvider::RefreshDatabaseCache();

        // Restore transaction level
        while (originalTTSLevel > 0)
        {
            --originalTTSLevel;
            ttsbegin;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>