<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Commission_Settlement_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains the logic of commission settlement.
/// </summary>
public class Commission_Settlement_IT extends Commission_Sales
{
    public real settlementAdj;
    public real settlementThreshold;
    public real alreadySettled;
    public CommissionAccruing_IT accruing;
    public voucher paymentVoucher;
    public InvoiceId invoiceId;
    public CommissionPerson person;
    public Dimension dimension;
    public InventTransId inventTransId;
    public boolean somethingInserted;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountCommission</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ledger dimension from inventory setup.
    /// </summary>
    /// <returns></returns>
    public LedgerDimensionDefaultAccount accountCommission()
    {
        InventTable inventTable = InventTable::find(itemId_IT);

        return InventPosting::accountItemLedgerDimensionFromParameters(
            InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
                InventAccountType::SalesCommission,
                itemId_IT,
                inventTable.itemGroupId(),
                inventTable.Product,
                orderAccount,
                custTableGroupId_IT,
                custInvoiceJour.taxGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the base amount.
    /// </summary>
    /// <param name = "_commissionCalc">The <c>CommissionCalc</c> record.</param>
    /// <param name = "_base">The amount to adjust.</param>
    /// <returns>The adjusted amount.</returns>
    protected AmountCur adjustBaseAmount(CommissionCalc _commissionCalc, AmountCur _base)
    {
        real adjustment = min(max(0, SettlementAdj), 1);

        AmountCur base = _base * adjustment;
        return base;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current value of <c>CommissionTrans</c> record's adjusted amount.
    /// </summary>
    /// <returns>The adjusted amount.</returns>
    public AmountCur calcCurrencyAmount()
    {
        real adjustment = min(max(0, SettlementAdj), 1);
        return CurrencyExchangeHelper::amount(commissionTrans.AmountCur * adjustment, commissionTrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commissionInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if commission record was inserted.
    /// </summary>
    /// <returns>true if commission was inserted, otherwise false.</returns>
    public boolean commissionInserted()
    {
        return somethingInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        endFactor = ((100 - SalesTable::find(custInvoiceJour.salesId).discPercent) / 100);
        custGroup = SalesTable::find(custInvoiceJour.salesId).commissionGroup;
        orderAccount = custInvoiceJour.orderAccount;
        languageId = custInvoiceJour.languageId;
        triangulation = custInvoiceJour.triangulation;
        exchRate = custInvoiceJour.exchRate;
        exchrateSecondary = custInvoiceJour.exchRateSecondary;
        commissionType_IT = custInvoiceJour.CommissionType_IT;
        InvoiceId = custInvoiceJour.InvoiceId;
        custTableGroupId_IT = custInvoiceJour.custTable_InvoiceAccount().CustGroup;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates voucher transactions.
    /// </summary>
    /// <param name = "_debitAC">The debit account.</param>
    /// <param name = "_creditAccount">The credit account.</param>
    /// <param name = "_amountToPost">The amount to post.</param>
    public void ledgerVoucherTrans(
        LedgerDimensionDefaultAccount _debitAC = debitAC,
        LedgerDimensionDefaultAccount _creditAccount = creditAccount,
        AmountCur _amountToPost = commissionTrans.amountCur)

    {
        TransTxt transTxt = ledgerVoucher.findLedgerVoucherObject().lastTransTxt();

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setLanguage (languageId);
        transactionTxt.setType (LedgerTransTxt::SalesCommission);
        transactionTxt.setVoucher (ledgerVoucher.lastVoucher());
        transactionTxt.setKey1 (DirPerson::find(commissionTrans.Person).NameAlias);

        this.addLedgerVoucherTrans_IT(
                ledgerVoucher,
                LedgerPostingType::SalesCommission,
                LedgerDimensionFacade::serviceCreateLedgerDimension(_debitAC, commissionTrans.DefaultDimension),
                accruing.currencyCode,
                accruing.TableId,
                accruing.RecId,
                _amountToPost,
                transactionTxt.txt(),
                true);

        this.addLedgerVoucherTrans_IT(
                ledgerVoucher,
                LedgerPostingType::SalesOffsetAccountCommission,
                LedgerDimensionFacade::serviceCreateLedgerDimension(_creditAccount, commissionTrans.DefaultDimension),
                accruing.currencyCode,
                accruing.TableId,
                accruing.RecId,
                -_amountToPost,
                transactionTxt.txt(),
                true);

        ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetaccountCommission</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the offset account from inventory setup.
    /// </summary>
    /// <returns>The offset account.</returns>
    public LedgerDimensionDefaultAccount offsetaccountCommission()
    {
        return InventPosting::accountItemLedgerDimensionFromParameters(
            InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
                InventAccountType::SalesCommissionOffsetAccount,
                itemId_IT,
                InventTable::find(itemId_IT).itemGroupId(),
                InventTable::find(itemId_IT).Product,
                orderAccount,
                custTableGroupId_IT,
                custInvoiceJour.taxGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommissionAccruing</Name>
				<Source><![CDATA[
    public CommissionAccruing_IT parmCommissionAccruing(CommissionAccruing_IT _commissionAccruing = accruing)
    {
        accruing = _commissionAccruing;

        return accruing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommissionTrans</Name>
				<Source><![CDATA[
    public CommissionTrans parmCommissionTrans(CommissionTrans _commissionTrans = commissionTrans, boolean _set = false)
    {
        commissionTrans = _commissionTrans;

        if (_set)
        {
            itemId_IT = commissionTrans.ItemId;
            person = commissionTrans.Person;

            commissionType_IT = commissionTrans.CommissionType_IT;
            InvoiceId = commissionTrans.InvoiceId;
        }

        return commissionTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceJour</Name>
				<Source><![CDATA[
    public CustVendInvoiceJour parmInvoiceJour(CustInvoiceJour _custInvoiceJour = custInvoiceJour, boolean _set = false)
    {
        custInvoiceJour = _custInvoiceJour;
        if (_set)
        {
            custGroup = SalesTable::find(custInvoiceJour.salesId).commissionGroup;
            orderAccount = custInvoiceJour.orderAccount;
            languageId = custInvoiceJour.languageId;

            custTableGroupId_IT = custInvoiceJour.custTable_InvoiceAccount().CustGroup;
        }
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentVoucher</Name>
				<Source><![CDATA[
    public Voucher parmPaymentVoucher(Voucher _paymentVoucher = paymentVoucher)
    {
        paymentVoucher = _paymentVoucher;
        return paymentVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettlementAdj</Name>
				<Source><![CDATA[
    public real parmSettlementAdj(real _adjustment = settlementAdj)
    {
        SettlementAdj = _adjustment;
        return SettlementAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettlementThreshold</Name>
				<Source><![CDATA[
    public real parmSettlementThreshold(real _threshold = settlementThreshold)
    {
        settlementThreshold = _threshold;
        return settlementThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsbegin;

        while select commissionTrans
            where commissionTrans.InvoiceId == InvoiceId
        {
            itemId_IT = commissionTrans.itemId;
            debitAC = this.accountCommission();
            creditAccount = this.offsetAccountCommission();

            CommissionAccruing_IT existingAccruing = CommissionAccruing_IT::findFromCommissionTrans(
                commissionTrans,
                paymentVoucher,
                true);

            if (!existingAccruing)
            {
                accruing.clear();
                accruing.initFromCommissionTrans(commissionTrans);
            }
            else
            {
                accruing.data(existingAccruing);
            }

            if (commissionTrans && commissionTrans.AmountMST)
            {
                accruing.AmountCur += this.calcCurrencyAmount();

                AmountMST mstAmount = CurrencyExchangeHelper::mstAmount(
                    Accruing.AmountCur,
                    commissionTrans.currencyCode,
                    commissionTrans.invoiceDate,
                    Currency::noYes2UnknownNoYes(triangulation),
                    exchRate,
                    exchrateSecondary);


                // Checks for rounding errors when the last settlement occurs and correct them
                // to make the accrued amount not greater than the commission expected one.
                AmountCur amountBufCur = commissionTrans.AccruedAmountCur_IT(true, paymentVoucher);

                if (abs(accruing.AmountCur + amountBufCur) > abs(commissionTrans.AmountCur))
                {
                    accruing.AmountCur = abs(commissionTrans.AmountCur - amountBufCur);

                    mstAmount = CurrencyExchangeHelper::mstAmount(
                        accruing.AmountCur,
                        commissionTrans.currencyCode,
                        commissionTrans.invoiceDate,
                        Currency::noYes2UnknownNoYes(triangulation),
                        exchRate,
                        exchrateSecondary);
                }

                Accruing.AmountMST = MSTamount;
                Accruing.Voucher = ledgerVoucher.lastVoucher();
                Accruing.PaymentVoucher = paymentVoucher;
                AmountCur amountToPost;

                if (commissionTrans.UseThresholds_IT) // threshold adjustment
                {
                    AmountCur accruedAmount = commissionTrans.AccruedAmountCur_IT(true);
                    amountToPost = commissionTrans.applyThreshold_IT(accruedAmount + Accruing.AmountCur, false) -
                        commissionTrans.postedAmountCur_IT();

                }
                else
                {
                    amountToPost = accruing.AmountCur;
                }

                amountToPost = CurrencyExchangeHelper::amount(amountToPost, commissionTrans.CurrencyCode);

                Accruing.PostedAmount += amountToPost;
                if (accruing.amountMST)
                {
                    if (!existingAccruing || existingAccruing.PaymentVoucher != paymentVoucher)
                    {
                        accruing.insert();
                    }
                    else
                    {
                        accruing.update();
                    }

                    if (ledgerVoucher)
                    {
                        this.ledgerVoucherTrans(debitAC, creditAccount, amountToPost);
                        accruing.TransDate = ledgerVoucher.lastTransDate();
                        accruing.update();

                    }
                    somethingInserted = true;
                }
            }
        }

        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>setThresholds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the thresholds.
    /// </summary>
    /// <param name = "_commissionSalesRep">The <c>CommissionSalesRep</c> record.</param>
    /// <param name = "_commissionCalc">The <c>CommissionCalc</c> record.</param>
    public void setThresholds(CommissionSalesRep _commissionSalesRep, CommissionCalc _commissionCalc)
    {
        if (_commissionCalc.UseThresholds_IT && !_commissionCalc.SearchAgain)
        {
            commissionTrans.UseThresholds_IT = _commissionCalc.UseThresholds_IT;
            commissionTrans.LowerThreshold_IT = _commissionCalc.LowerThreshold_IT;
            commissionTrans.UpperThreshold_IT = _commissionCalc.UpperThreshold_IT;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static Commission construct()
    {
        return new Commission_Settlement_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCommission</Name>
				<Source><![CDATA[
    public static Commission newCommission(
        LedgerVoucher _ledgerVoucher,
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans )
    {
        Commission_Settlement_IT commission_Settlement;

        commission_Settlement = Commission_Settlement_IT::construct();

        commission_Settlement.parmLedgerVoucher(_ledgerVoucher);
        commission_Settlement.parmInvoiceJour(_custInvoiceJour);
        commission_Settlement.parmInvoiceTrans(_custInvoiceTrans);
        commission_Settlement.init();

        return commission_Settlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseAccruing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses accruing commissions.
    /// </summary>
    /// <param name = "_ledgerVoucher">The ledger voucher.</param>
    /// <param name = "_paymentVoucher">The payment voucher.</param>
    /// <param name = "_custInvoiceJour">The <c>CustInvoiceJour</c> record.</param>
    /// <param name = "_forceAddLedgerTransactions">Determines if ledger transactions must me added.</param>
    /// <returns>true if transactions were posted, otherwise false.</returns>
    public static boolean reverseAccruing(
        LedgerVoucher _ledgerVoucher,
        Voucher _paymentVoucher,
        CustInvoiceJour _custInvoiceJour,
        boolean _forceAddLedgerTransactions = false)
    {
        boolean somethingPosted;
        CommissionAccruing_IT accruing;

        ttsbegin;

        while select forupdate accruing
            where accruing.InvoiceId == _custInvoiceJour.InvoiceId
                && accruing.PaymentVoucher == _paymentVoucher
                && accruing.Reversed == NoYes::No
        {
            accruing.Reversed = NoYes::Yes;
            accruing.update();

            CommissionTrans commissionTrans = accruing.CommissionTrans();
            Commission_Settlement_IT commission = Commission_Settlement_IT::newCommission(
                _ledgerVoucher,
                _custInvoiceJour,
                null);

            commission.parmCommissionTrans(commissionTrans, true);
            commission.parmCommissionAccruing(accruing);


            LedgerDimensionDefaultAccount debitAC = commission.accountCommission();
            LedgerDimensionDefaultAccount creditAccount = commission.offsetAccountCommission();

            accruing.AmountCur = - accruing.AmountCur;
            AmountCur amountToPost;

            if (commissionTrans.UseThresholds_IT) // threshold adjustment
            {
                AmountCur accruedAmount = commissionTrans.accruedAmountCur_IT(true);
                amountToPost = commissionTrans.applyThreshold_IT(accruedAmount + Accruing.AmountCur, false) -
                    commissionTrans.postedAmountCur_IT();

            }
            else
            {
                amountToPost = Accruing.AmountCur;
            }

            accruing.AmountMST = - accruing.AmountMST;
            accruing.PostedAmount = amountToPost;
            accruing.Voucher = _ledgerVoucher.lastVoucher();

            if (accruing.amountMST)
            {
                somethingPosted = true;

                if (_ledgerVoucher)
                {
                    if (_forceAddLedgerTransactions)
                    {
                        commission.ledgerVoucherTrans(
                            debitAC,
                            creditAccount,
                            amountToPost);
                    }

                    accruing.TransDate = _ledgerVoucher.lastTransDate();
                }

                accruing.insert();
            }
        }

        ttscommit;

        return somethingPosted;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>