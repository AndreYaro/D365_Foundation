<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetter</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class  FormLetter
extends         RunBaseBatch
{
    Counter                 progressTotal;
    Counter                 progressCounter;

    boolean                 multiForm;
    NoYes                   editing;

    CurrencyCode            currency;
    CustVendAC              orderAccount;
    CustVendAC              invoiceAccount;
    Dimension               dimension;

    Printout                printout;
    RecordSortedList        journalList;

    RecordSortedList        journalTransList;

    TransDate               transDate;
    NoYes                   queryCriteria;
    str                     reportParm;

    ParmId                  parmId;
    ParmId                  parmIdSynched;

    Num                     number;
    Voucher                 voucher;
    Counter                 numberOfRecords;

    SysQueryRun             chooseLines;
    boolean                 showQueryForm;
    boolean                 showDialog;
    boolean                 allowEmptyTable;
    boolean                 initAllowEmptyTable;
    boolean                 allowCreateParmTable;
    container               printerSettingsFormletter;
    container               printerSettingsFormletterCopy;

    NoYes                   printFormletter;
    NoYes                   usePrintManagement;
    NoYes                   printPosting;

    boolean                 emptyParmTableAllowed;
    boolean                 createFromLines;
    boolean                 createFromProject;

    boolean                 reArrangeNow;
    boolean                 validateAll;

    AmountCur               totalAmount;
    NoYes                   backorder;

    Tax                     tax;
    TmpTaxWorkTrans         journalTmpTaxWorkTrans;

    ParmId                  interCompanyParmId;
    dataAreaId              interCompanyCompanyId;
    Map                     interCompanyMap;
    FormLetter              interCompanyCalledFromFormLetter;
    FormLetter              interCompanyCreatedFormLetter;

    boolean                 interCompanySelectFromJournal;

    InterCompanyPosted      interCompanyPosted;
    BatchHeader             batchHeader;
    Common                  parmTable2Update;
    boolean                 printerSetupError;

    container               datasourceRecordsPacked;
    container               packedLineIdSet;
    container               packedLineList;
    boolean                 specQtyIsSet;
    Common                  journalRecord;

    container               packedHistoryList;
    boolean                 createFromHistory;
    container               formletterProformaPrintPacked;
    Query                   queryUsed;

    boolean                 useUserDefinedDestinations;

    // <GIN>
    boolean                 printGoodsReceiptNote;
    // </GIN>

    // The caller form name is used as a differentiator for SysLastValue retrieval.
    identifierName          callerFormName;
    RefRecId                batchJobId;
    BatchGroupId            batchGroupId;

    // <GEERU>
    boolean                 printFacture;
    boolean                 printAcceptanceReport;
    boolean                 printReimbursementSlip;
    boolean                 printBillOfLading;
    boolean                 printInventBaileeReport;
    // </GEERU>

    UserId                  batchCreatedBy;

    #localmacro.LinePrefix
        setPrefix(#PreFixField(%1, ItemId)  + ' '
                + %2 );
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEmptyTable</Name>
				<Source><![CDATA[
    boolean  allowEmptyTable(boolean  _allowEmptyTable = allowEmptyTable)
    {
        allowEmptyTable = _allowEmptyTable;
        return _allowEmptyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMultiThread</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the selected records can be posted in the enhanced batch framework.
    /// </summary>
    /// <returns>
    ///    true if the selected records can be posted in the enhanced batch framework; otherwise, false.
    /// </returns>
    public boolean canMultiThread()
    {
        return this.parmBatchJobId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClientOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the destination for printing the original report or a copy of a report is
    /// client-based.
    /// </summary>
    /// <returns>
    /// true if the destination for either the original report or copy of a report is client-based;
    /// otherwise, false.
    /// </returns>
    protected boolean checkClientOutput()
    {
        return FormLetter::isClientOutput(printerSettingsFormletter) || FormLetter::isClientOutput(printerSettingsFormletterCopy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClientOutputPrintManagement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the selected printers in print management that are used for printing the original
    /// reports and the copies of reports are using client output options.
    /// </summary>
    /// <returns>
    /// true if the selected printers are using client output options; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is used for finding the default printer setup in print management for the specific
    /// document.
    /// </remarks>
    protected boolean checkClientOutputPrintManagement()
    {
        FormLetterPrintManagementValidate formLetterPrintManagementValidate = new FormLetterPrintManagementValidate();
        return formLetterPrintManagementValidate.checkClientOutputPrintManagement(this.printMgmtDocumentType(), this.printMgmtNodeType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDocumentData_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the document date.
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    protected boolean checkDocumentData_W()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrinterSettingsMultiThread</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies if the selected printers for printing journals are Application Object Server (AOS)
    ///    configured printers.
    /// </summary>
    /// <returns>
    ///    true if the selected printers are AOS configured printers; otherwise, false.
    /// </returns>
    public boolean checkPrinterSettingsMultiThread()
    {
        if (printFormletter && this.batchInfo().parmBatchExecute())
        {
            FormLetterPrintManagementValidate formLetterPrintManagementValidate = new FormLetterPrintManagementValidate();
            return formLetterPrintManagementValidate.checkPrinterSettingsMultiThread(this.usePrintManagement(), printerSetupError, this.checkClientOutput(), this.printMgmtDocumentType(), this.printMgmtNodeType());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesQuery</Name>
				<Source><![CDATA[
    SysQueryRun  chooseLinesQuery(SysQueryRun  _chooseLines = chooseLines)
    {
        chooseLines = _chooseLines;
        return chooseLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromLines</Name>
				<Source><![CDATA[
    public boolean createFromLines(boolean _createFromLines = createFromLines)
    {
        createFromLines = _createFromLines;
        return createFromLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterSorting</Name>
				<Source><![CDATA[
    public container formLetterSorting(TableId    _sortingTableId,
                                       FieldId    _recIdField,
                                       TableId    _sortingSubTableId = 0)
    {
        return FormLetterSortingParameters::formLetterSorting(_sortingTableId, _recIdField, _sortingSubTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastFromCallerFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>SysLastValue</c> value for the <c>FormLetter</c> form with the caller form name as a
    /// differentiator.
    /// </summary>
    /// <remarks>
    /// If no caller form name is specified then the regular retrieval is performed.
    /// </remarks>
    protected void getLastFromCallerFormName()
    {
        str tmpCallerFormName;

        // Retrieve SysLastValue also based on caller form name
        if (callerFormName)
        {
            if (xSysLastValue::existLast(this))
            {
                // getLast() calls this.lastValueDesignName() which returns the caller form name.
                this.getLast();
            }
            else
            {
                // If the retrieval failed, then try without the caller form name to get legacy values.
                tmpCallerFormName   = callerFormName;
                callerFormName      = '';
                this.getLast();
                callerFormName      = tmpCallerFormName;
            }
        }
        else
        {
            // For normal retrieval when no caller form is specified.
            this.getLast();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    public container  getNumAndVoucher()
    {
        return [number, voucher];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllowEmptyTable</Name>
				<Source><![CDATA[
    public boolean  initAllowEmptyTable(boolean  _initAllowEmptyTable = initAllowEmptyTable)
    {
        initAllowEmptyTable = _initAllowEmptyTable;
        return _initAllowEmptyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCalledFromFormletter</Name>
				<Source><![CDATA[
    public FormLetter interCompanyCalledFromFormletter(FormLetter _formLetter = interCompanyCalledFromFormLetter)
    {
        interCompanyCalledFromFormLetter = _formLetter;

        return interCompanyCalledFromFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCreatedFormletter</Name>
				<Source><![CDATA[
    public FormLetter interCompanyCreatedFormletter(FormLetter _formLetter = interCompanyCreatedFormLetter)
    {
        interCompanyCreatedFormLetter = _formLetter;

        return interCompanyCreatedFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMap</Name>
				<Source><![CDATA[
    public Map interCompanyMap(Map _map = interCompanyMap)
    {
        interCompanyMap = _map;
        return interCompanyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyParmId</Name>
				<Source><![CDATA[
    public ParmId  interCompanyParmId(ParmId _interCompanyParmId = interCompanyParmId)
    {
        interCompanyParmId = _interCompanyParmId;
        return interCompanyParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyParmSelectFromJournal</Name>
				<Source><![CDATA[
    public boolean interCompanyParmSelectFromJournal(boolean _selectFromJournal = interCompanySelectFromJournal)
    {
        interCompanySelectFromJournal = _selectFromJournal;

        return interCompanySelectFromJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPosted</Name>
				<Source><![CDATA[
    public InterCompanyPosted interCompanyPosted(InterCompanyPosted _interCompanyPosted = interCompanyPosted)
    {
        interCompanyPosted = _interCompanyPosted;

        return interCompanyPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySelectFromJournal</Name>
				<Source><![CDATA[
    boolean interCompanySelectFromJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTransList</Name>
				<Source><![CDATA[
    RecordSortedList journalTransList()
    {
        return journalTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the design name that is used as a differentiator for the retrieval of a
    ///    <c>SysLastValue</c> value.
    /// </summary>
    /// <returns>
    ///    The caller form name for the form letter, if one is specified.
    /// </returns>
    /// <remarks>
    ///    If the caller form name is empty then the retrieval differentiates based on the class name.
    /// </remarks>
    public IdentifierName lastValueDesignName()
    {
        return callerFormName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelection</Name>
				<Source><![CDATA[
    public boolean lateSelection()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiForm</Name>
				<Source><![CDATA[
    public boolean  multiForm(boolean  _multiForm = multiForm)
    {
        multiForm = _multiForm;
        return multiForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new()
    {
        super();

        showQueryForm           = false;
        showDialog              = true;
        initAllowEmptyTable     = false;
        allowEmptyTable         = initAllowEmptyTable;
        allowCreateParmTable    = allowEmptyTable;
        numberOfRecords         = 0;
        validateAll             = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a record sorted list.
    /// </summary>
    /// <returns>
    ///    The constructed record sorted list.
    /// </returns>
    abstract public RecordSortedList newJournalList()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfRecords</Name>
				<Source><![CDATA[
    public Counter  numberOfRecords(Counter  _numberOfRecords = numberOfRecords)
    {
        numberOfRecords = _numberOfRecords;
        return numberOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchCreatedBy</Name>
				<Source><![CDATA[
    public UserId parmBatchCreatedBy(UserId _batchCreatedBy = batchCreatedBy)
    {
        batchCreatedBy = _batchCreatedBy;

        return batchCreatedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchGroupId</Name>
				<Source><![CDATA[
    public BatchGroupId parmBatchGroupId(BatchGroupId _batchGroupId = batchGroupId)
    {
        batchGroupId = _batchGroupId;

        return batchGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchJobId</Name>
				<Source><![CDATA[
    public RefRecId parmBatchJobId(RefRecId _batchJobId = batchJobId)
    {
        batchJobId = _batchJobId;

        return batchJobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerFormName</Name>
				<Source><![CDATA[
    public IdentifierName parmCallerFormName(IdentifierName _callerFormName = callerFormName)
    {
        callerFormName = _callerFormName;

        return callerFormName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateFromHistory</Name>
				<Source><![CDATA[
    public boolean parmCreateFromHistory(boolean _createFromHistory = createFromHistory)
    {
        createFromHistory = _createFromHistory;
        return createFromHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSourceRecordsPacked</Name>
				<Source><![CDATA[
    public container parmDataSourceRecordsPacked(container _dataSourceRecordsPacked = dataSourceRecordsPacked)
    {
        dataSourceRecordsPacked = _dataSourceRecordsPacked;
        return dataSourceRecordsPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormletterProformaPrintPacked</Name>
				<Source><![CDATA[
    public container parmFormletterProformaPrintPacked(container _formletterProformaPrintPacked = formletterProformaPrintPacked)
    {
        formletterProformaPrintPacked = _formletterProformaPrintPacked;

        return formletterProformaPrintPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHistoryList</Name>
				<Source><![CDATA[
    public container parmHistoryList(container _packedHistoryList = packedHistoryList)
    {
        packedHistoryList = _packedHistoryList;
        return packedHistoryList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    ParmId  parmId(ParmId  _parmId = parmId)
    {
        parmId = _parmId;
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIdSynched</Name>
				<Source><![CDATA[
    ParmId  parmIdSynched(ParmId  _parmIdSynched = parmIdSynched)
    {
        parmIdSynched = _parmIdSynched;
        return parmIdSynched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyCompanyId</Name>
				<Source><![CDATA[
    public DataAreaId  parmInterCompanyCompanyId(DataAreaId _interCompanyCompanyId = interCompanyCompanyId)
    {
        interCompanyCompanyId = _interCompanyCompanyId;
        return interCompanyCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalRecord</Name>
				<Source><![CDATA[
    public Common parmJournalRecord(Common _journalRecord = journalRecord)
    {
        journalRecord = _journalRecord;

        return journalRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineIdSet</Name>
				<Source><![CDATA[
    public container parmLineIdSet(container _packedLineIdSet = packedLineIdSet)
    {
        packedLineIdSet = _packedLineIdSet;
        return packedLineIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineList</Name>
				<Source><![CDATA[
    public container parmLineList(container _packedLineList = packedLineList)
    {
        packedLineList = _packedLineList;
        return packedLineList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintAcceptanceReport_RU</Name>
				<Source><![CDATA[
    final public boolean parmPrintAcceptanceReport_RU(boolean _printAcceptanceReport = printAcceptanceReport)
    {
        printAcceptanceReport = _printAcceptanceReport;
        return printAcceptanceReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintBillOfLading_RU</Name>
				<Source><![CDATA[
    final public boolean parmPrintBillOfLading_RU(boolean _printBillOfLading = printBillOfLading)
    {
        printBillOfLading = _printBillOfLading;
        return printBillOfLading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFacture_RU</Name>
				<Source><![CDATA[
    final public boolean parmPrintFacture_RU(boolean _printFacture = printFacture)
    {
        printFacture = _printFacture;
        return printFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintInventBaileeReport_RU</Name>
				<Source><![CDATA[
    final public boolean parmPrintInventBaileeReport_RU(boolean _printInventBaileeReport = printInventBaileeReport)
    {
        printInventBaileeReport = _printInventBaileeReport;
        return printInventBaileeReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintPosting</Name>
				<Source><![CDATA[
    public NoYes parmPrintPosting(NoYes _printPosting = printPosting)
    {
        printPosting = _printPosting;

        return printPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryUsed</Name>
				<Source><![CDATA[
    public Query parmQueryUsed(Query _queryUsed = queryUsed)
    {
        queryUsed = _queryUsed;
        return queryUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmspecQtyIsSet</Name>
				<Source><![CDATA[
    public boolean parmspecQtyIsSet(boolean _specQtyIsSet = specQtyIsSet)
    {
        specQtyIsSet = _specQtyIsSet;
        return specQtyIsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseUserDefinedDestinations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>UseUserDefinedDestinations</c> field.
    /// </summary>
    /// <param name="_useUserDefinedDestinations">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>UseUserDefinedDestinations</c> field.
    /// </returns>
    /// <remarks>
    ///    If the value of the <c>UseUserDefinedDestinations</c> field is true, print management printer
    ///    destinations for this report will be retrieved from user-defined printer destinations. If the value
    ///    of the <c>UseUserDefinedDestinations</c> field is false, the destination for this report will be
    ///    screen.If the value of the <c>usePrintManagement</c> field is true, the user-defined printer
    ///    destinations will be ignored and print management printer destinations for this class will be
    ///    retrieved from default print management printer destinations.
    /// </remarks>
    public boolean parmUseUserDefinedDestinations(boolean _useUserDefinedDestinations = useUserDefinedDestinations)
    {
        useUserDefinedDestinations = _useUserDefinedDestinations;
        return useUserDefinedDestinations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printerSettingsFormletter</Name>
				<Source><![CDATA[
    public container printerSettingsFormletter(PrintSetupOriginalCopy _originalCopy = PrintSetupOriginalCopy::Original)
    {
        if (_originalCopy == PrintSetupOriginalCopy::Copy)
        {
            return printerSettingsFormLetterCopy;
        }
        else
        {
            return printerSettingsFormLetter;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFormLetter</Name>
				<Source><![CDATA[
    public boolean  printFormLetter(boolean  _printFormletter = printFormletter)
    {
        printFormletter = _printFormletter;
        return printFormletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printGRN_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets prints goods receipt note.
    /// </summary>
    /// <param name="_printGoodsReceiptNote">
    /// If 'True', the goods receipt note will print.
    /// </param>
    /// <returns>
    /// If 'True', the goods receipt note will print.
    /// </returns>
    public boolean printGRN_IN(boolean _printGoodsReceiptNote = printGoodsReceiptNote)
    {
        printGoodsReceiptNote = _printGoodsReceiptNote;

        return printGoodsReceiptNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    abstract void  printJournal(Set _journalList = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the print management document type.
    /// </summary>
    /// <returns>
    ///    The print management document type.
    /// </returns>
    /// <remarks>
    ///    The print management document type identifies which document type relates to print management the
    ///    setup relates.
    /// </remarks>
    abstract protected PrintMgmtDocumentType printMgmtDocumentType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the print management node type.
    /// </summary>
    /// <returns>
    ///    The print management node type.
    /// </returns>
    abstract protected PrintMgmtNodeType printMgmtNodeType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    Printout  printout()
    {
        return printout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPostingReport</Name>
				<Source><![CDATA[
    void printPostingReport(Set _journalList = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    public boolean proforma()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    void progressUpdate(str text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeNow</Name>
				<Source><![CDATA[
    boolean  reArrangeNow(boolean  _reArrangeNow = reArrangeNow)
    {
        reArrangeNow = _reArrangeNow;
        return reArrangeNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>FormLetter</c> class can be used in the enhanced batch framework.
    /// </summary>
    /// <returns>
    ///    true if the <c>FormLetter</c> class can be used in the enhanced batch framework; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method always returns true.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFromJournal</Name>
				<Source><![CDATA[
    public void selectFromJournal(container _packedTmpFrmVirtualList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFromJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates document lines based on the specified records.
    /// </summary>
    /// <param name="_packedRecordList">
    ///    A packed set of records which describes how the document lines should be updated.
    /// </param>
    public void selectFromJournalLines(container _packedRecordList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryForm</Name>
				<Source><![CDATA[
    public boolean  showQueryForm(boolean  _showQueryForm = showQueryForm)
    {
        showQueryForm = _showQueryForm;

        return showQueryForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate(TransDate  _transDate = transDate)
    {
        if (!_transDate)
        {
            _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinterSettingsFormLetter</Name>
				<Source><![CDATA[
    void updatePrinterSettingsFormLetter(container   _printerSettings, PrintSetupOriginalCopy _originalCopy = PrintSetupOriginalCopy::Original)
    {
        if (_originalCopy == PrintSetupOriginalCopy::Copy)
        {
            printerSettingsFormLetterCopy = _printerSettings;
        }
        else
        {
            printerSettingsFormLetter     = _printerSettings;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePrintManagement</Name>
				<Source><![CDATA[
    boolean  usePrintManagement(boolean _usePrintManagement = usePrintManagement)
    {
        usePrintManagement = _usePrintManagement;
        return usePrintManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if it is okay to continue.
    /// </summary>
    /// <param name="_calledFrom">
    ///    Identifies the object from which this method is called. Default value is null.
    /// </param>
    /// <returns>
    ///    true if it is okay to continue; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        return this.checkPrinterSettingsMultiThread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAll</Name>
				<Source><![CDATA[
    boolean  validateAll(boolean  _validateAll = validateAll)
    {
        validateAll = _validateAll;
        return validateAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyLogo</Name>
				<Source><![CDATA[
    static Bitmap  companyLogo()
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        return CompanyImage::findByRecord(companyInfo).Image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalListCopy</Name>
				<Source><![CDATA[
    static RecordSortedList createJournalListCopy(Common _record)
    {
        RecordSortedList    journalList;
        Common              common;
        FormDataSource      formDataSource;

        if (FormDataUtil::isFormDataSource(_record))
        {
            formDataSource = FormDataUtil::getFormDataSource(_record);
        }
        else
        {
            formDataSource = null;
        }

        if (!formDataSource && _record.RecId)
        {
            journalList = new RecordSortedList(_record.TableId);
            journalList.ins(_record);
            return journalList;
        }

        for (common = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : formDataSource.cursor(); common; common = formDataSource.getNext())
        {
            if (!journalList)
            {
                journalList = new RecordSortedList(common.TableId);
                journalList.sortOrder(fieldNum(Common, RecId));
            }

            journalList.ins(common);
        }

        return journalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>descriptionHeight</Name>
				<Source><![CDATA[
    static Integer  descriptionHeight(ItemFreeTxtBase  description)
    {
        int height  =  0;
        int pos     = -1;

        while (pos)
        {
            pos = strScan(description, '\n', pos+1, 255);
            height++;
        }

        height = max(height, strLen(description) div 20);

        return height;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormRecord</Name>
				<Source><![CDATA[
    static container getFormRecord(FormDataSource tradeRecord_ds)
    {
        Common      tradeRecord;
        Map         mapTradeRecord = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);

        for (tradeRecord = tradeRecord_ds.getFirst(true) ? tradeRecord_ds.getFirst(true) : tradeRecord_ds.cursor(); tradeRecord; tradeRecord = tradeRecord_ds.getNext())
        {
            mapTradeRecord.insert(tradeRecord.RecId,tradeRecord);
        }

        return mapTradeRecord.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimReport</Name>
				<Source><![CDATA[
    static str inventDimReport( InventDim  _inventDim,
                                container  _dimfields,
                                LanguageId _languageId)
    {
        return InventDim::dimReportStrAll(_inventDim,_dimfields,_languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimReportString</Name>
				<Source><![CDATA[
    static str inventDimReportString(InventDim      _inventDim,
                                     FieldId        _fieldId,
                                     LanguageId     _languageId
                                    )
    {
        return InventDim::dimReportStr(_inventDim,_fieldId,_languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClientOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether that the output must be delivered to the screen.
    /// </summary>
    /// <param name="_packedSettings">
    /// A container that contains the printer settings from which to find the selected printer.
    /// </param>
    /// <returns>
    /// true if the output must occur on the client; otherwise, false.
    /// </returns>
    public static boolean isClientOutput(container _packedSettings)
    {
        return new SRSPrintDestinationSettings(_packedSettings).printMediumType() == SRSPrintMediumType::Screen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalExternalItemId</Name>
				<Source><![CDATA[
    public static ExternalItemId journalExternalItemId(ModuleInventPurchSales _module,
                                                       ExternalItemId         _externalItemId)
    {
        TradeModuleType moduleType = TradeModuleType::newFromModule(_module);

        return moduleType.formLetterJournalExternalItemId(_externalItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalItemId</Name>
				<Source><![CDATA[
    public static ItemId journalItemId(ModuleInventPurchSales _module,
                                       ItemId                 _itemId,
                                       ExternalItemId         _externalItemId)
    {
        TradeModuleType moduleType = TradeModuleType::newFromModule(_module);

        return moduleType.formLetterJournalItemId(_itemId, _externalItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newClientArgs</Name>
				<Source><![CDATA[
    static Args  newClientArgs(str _formName, FormLetter _formLetter)
    {
        Args  args = new  Args();

        args.name(_formName);
        args.caller(_formLetter);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reFreshCallerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the calling form data source.
    /// </summary>
    /// <param name="_callerFormDataSource">
    /// The calling form data source.
    /// </param>
    /// <param name="_recordExists">
    /// A Boolean value that specifies whether the updated record occurs in the form data source.
    /// </param>
    /// <param name="_doReSearch">
    /// A Boolean value that specifies whether <c>reSearch</c> parameter should be executed on the form
    /// data source.
    /// </param>
    /// <remarks>
    /// Method set to client static to be run on the client to minimize the interaction between tiers.
    /// </remarks>
    public  static void reFreshCallerDataSource(Object          _callerFormDataSource,
                                                         boolean         _recordExists,
                                                         boolean         _doReSearch)
    {
        if (_recordExists)
        {
            if (_doReSearch)
            {
                _callerFormDataSource.reSearch(true);
            }
            else
            {
                _callerFormDataSource.reRead();
                _callerFormDataSource.reFresh();
                if (formDataSourceHasMethod(_callerFormDataSource, identifierStr(reReadLines)))
                {
                    _callerFormDataSource.reReadLines();
                }
                _callerFormDataSource.active();
            }
        }
        else
        {
            _callerFormDataSource.reSearch();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>