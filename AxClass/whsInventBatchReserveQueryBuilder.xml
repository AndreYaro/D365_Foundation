<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsInventBatchReserveQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventBatchReserveQueryBuilder</c> class is used to build a<c>Query</c> sorted by batch values for selecting quantities and dimensions for reservation from the <c>WHSInventReserve</c> table.
/// </summary>
class whsInventBatchReserveQueryBuilder extends WHSInventReserveQueryBuilder
{
    boolean                 groupByBatchId;
    InventOnHandCriteria    advancedCriteria;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addGroupByFields</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds batch id field as groupby field in the query.
	/// </summary>
        protected void addGroupByFields()
    {
        if (this.parmGroupByBatchId())
        {
            query.dataSourceTable(tableNum(InventDim)).addGroupByField(fieldNum(InventDim, InventBatchId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSelectionFields</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds ordered available quantity and physical avaiable quantity fields to query as selection fields.
	/// </summary>
        protected void addSelectionFields()
    {
        QueryBuildDataSource dsInventReserve;

        if (this.parmGroupByBatchId())
        {
            dsInventReserve = query.dataSourceTable(tableNum(WHSInventReserve));
            dsInventReserve.addSelectionField(fieldNum(WHSInventReserve, AvailPhysical), SelectionField::Sum);
            dsInventReserve.addSelectionField(fieldNum(WHSInventReserve, AvailOrdered), SelectionField::Sum);

            if (this.parmIsCWItem())
            {
                dsInventReserve.addSelectionField(fieldNum(WHSInventReserve, CWAvailPhysical), SelectionField::Sum);
                dsInventReserve.addSelectionField(fieldNum(WHSInventReserve, CWAvailOrdered), SelectionField::Sum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOnHandQuery</Name>
				<Source><![CDATA[
        public Query buildOnHandQuery()
    {
        QueryBuildDataSource            qbdsInventBatch;
        QueryBuildDataSource            qbdsWHSInventReserve;
        QueryBuildDataSource            qbdsInventDim;
        InventOnHandQueryWHSStandard    onHandQuery;

        this.initQuery();

        qbdsInventBatch = query.addDataSource(tableNum(InventBatch));
        qbdsInventBatch.addRange(fieldNum(InventBatch, ItemId)).value(queryValue(itemId));

        this.addShelfLifeCriteriaRanges(qbdsInventBatch);

        qbdsWHSInventReserve = qbdsInventBatch.addDataSource(tableNum(WHSInventReserve));
        qbdsWHSInventReserve.joinMode(JoinMode::InnerJoin);
        qbdsWHSInventReserve.addLink(fieldNum(InventBatch, ItemId),fieldNum(WHSInventReserve, ItemId), qbdsInventBatch.name());

        this.addRangesToInventReserveQBDS(qbdsWHSInventReserve);

        //add ordering on batch
        this.addBatchOrderByFields(qbdsInventBatch);

        qbdsInventDim = this.addInventDimDS(qbdsWHSInventReserve);
        qbdsInventDim.addLink(fieldNum(InventBatch, InventBatchId),fieldNum(InventDim,InventBatchId), qbdsInventBatch.name());

        if (advancedCriteria && advancedCriteria.mustBeApplied())
        {
            onHandQuery = InventOnHandQueryWHSStandard::newFromQuery(query);
            onHandQuery.parmInventTable(InventTable::find(itemId));
            advancedCriteria.applyToOnHandQuery(onHandQuery);
        }

        this.addGroupByFields();
        this.addSelectionFields();

        if (this.parmExcludeSumWithDeltaRecords())
        {
            this.addWHSInventReserveDeltaDSNotExist(qbdsWHSInventReserve);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShelfLifeCriteriaRanges</Name>
				<Source><![CDATA[
    private void addShelfLifeCriteriaRanges(QueryBuildDataSource _dsInventBatch)
    {
        WHSInventBatchReservationPolicy policy = WHSInventReserveExpiredBatchContext::getBatchReservationPolicy();
        
        if (policy)
        {
            InventBatchExpDate minAllowedExpiryDate = policy.parmMinAllowedExpiryDate();
            PdsBestBeforeDate minAllowedBestBeforeDate = policy.parmMinAllowedBestBeforeDate();

            if (minAllowedExpiryDate)
            {
                this.addOnOrAfterDateRange(_dsInventBatch, fieldNum(InventBatch, ExpDate), minAllowedExpiryDate);
            }
            else if (minAllowedBestBeforeDate)
            {
                this.addOnOrAfterDateRange(_dsInventBatch, fieldNum(InventBatch, PdsBestBeforeDate), minAllowedBestBeforeDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOnOrAfterDateRange</Name>
				<Source><![CDATA[
    private void addOnOrAfterDateRange(QueryBuildDataSource _dsInventBatch, FieldId _fieldId, date _upperLimitDate)
    {
        FieldName fieldName = fieldId2name(tableNum(InventBatch), _fieldId);
        str expiryFilter = strFmt('(%1.%2 >= %3)', _dsInventBatch.name(), fieldName, date2StrXpp(_upperLimitDate));

        _dsInventBatch.addRange(_fieldId).value(expiryFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvancedCriteria</Name>
				<Source><![CDATA[
        public InventOnHandCriteria parmAdvancedCriteria(InventOnHandCriteria _advancedCriteria = advancedCriteria)
    {
        advancedCriteria = _advancedCriteria;
        return advancedCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupByBatchId</Name>
				<Source><![CDATA[
        public boolean parmGroupByBatchId(boolean _groupByBatchId = groupByBatchId)
    {
        groupByBatchId = _groupByBatchId;
        return _groupByBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WHSInventBatchReserveQueryBuilder construct()
    {
        return new WHSInventBatchReserveQueryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExcludeSumWithDeltaRecords</Name>
				<Source><![CDATA[
	/// <summary>
	/// Initiates a new instance of this class based on the arguments together with excludeSumWithDeltaRecords field set to true.
	/// </summary>
	/// <param name="_itemId">
	/// The item ID to select on-hand for.
	/// </param>
	/// <param name="_inventDimCriteria">
	/// An <c>InventDim</c> buffer that will be used to filter the on-hand.
	/// </param>
	/// <param name="_inventDimParmCriteria">
	/// An <c>InventDimParm</c> buffer that will be used to filter the on-hand.
	/// </param>
	/// <param name="_reservationHierarchyLevel">
	/// The reservation level that should be used when selecting on-hand.
	/// </param>
	/// <param name="_ttsId">
	/// Created transaction id.
	/// </param>
	/// <param name="_includeOrdered">
	/// A boolean indicating of available ordered should be included.
	/// </param>
	/// <param name="_includePhysical">
	/// A boolean indicating if available physical should be included.
	/// </param>
	/// <param name="_minAvailQty">
	/// The minimum qty availablity to be used as a filter on the query.
	/// </param>
    /// <param name="_onlyReserveOnWHSEnabledWarehouses">
    /// Whether to allow reservation on non-WHS enabled warehouses.
    /// </param>
	/// <returns>
	/// A new instance of this class based on the arguments.
	/// </returns>
        public static WHSInventBatchReserveQueryBuilder newExcludeSumWithDeltaRecords(
        ItemId                          _itemId,
        InventDim                       _inventDimCriteria,
        InventDimParm                   _inventDimParmCriteria,
        WHSReservationHierarchyLevel    _reservationHierarchyLevel,
        CreatedTransactionId            _ttsId,
        boolean                         _includeOrdered,
        boolean                         _includePhysical,
        InventQty                       _minAvailQty,
        boolean                         _onlyReserveOnWHSEnabledWarehouses = false)
    {
        WHSInventBatchReserveQueryBuilder whsInventBatchReserveQueryBuilder;

        whsInventBatchReserveQueryBuilder = WHSInventBatchReserveQueryBuilder::newFromParameters(_itemId,
                                                                                                 _inventDimCriteria,
                                                                                                 _inventDimParmCriteria,
                                                                                                 _reservationHierarchyLevel,
                                                                                                 _includeOrdered,
                                                                                                 _includePhysical,
                                                                                                 _minAvailQty);
        whsInventBatchReserveQueryBuilder.parmTtsId(_ttsId);
        whsInventBatchReserveQueryBuilder.parmExcludeSumWithDeltaRecords(true);
        whsInventBatchReserveQueryBuilder.parmOnlyReserveOnWHSEnabledWarehouses(_onlyReserveOnWHSEnabledWarehouses);

        return whsInventBatchReserveQueryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of this class based on the arguments.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID to select on-hand for.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// An <c>InventDimParm</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_reservationHierarchyLevel">
    /// The reservation level that should be used when selecting on-hand.
    /// </param>
    /// <param name="_includeOrdered">
    /// A boolean indicating of available ordered should be included.
    /// </param>
    /// <param name="_includePhysical">
    /// A boolean indicating if available physical should be included.
    /// </param>
    /// <param name="_minAvailQty">
    /// The minimum qty availablity to be used as a filter on the query.
    /// Note that the query only can filter availablity at the _reservationHierarchLevel and not up the hierarchy.
    /// </param>
    /// <returns>
    /// A new instance of this class based on the arguments.
    /// </returns>
    public static WHSInventBatchReserveQueryBuilder newFromParameters(
        ItemId                          _itemId,
        InventDim                       _inventDimCriteria,
        InventDimParm                   _inventDimParmCriteria,
        WHSReservationHierarchyLevel    _reservationHierarchyLevel,
        boolean                         _includeOrdered,
        boolean                         _includePhysical,
        InventQty                       _minAvailQty)
    {
        WHSInventBatchReserveQueryBuilder whsInventBatchReserveQueryBuilder;

        whsInventBatchReserveQueryBuilder = WHSInventBatchReserveQueryBuilder::construct();
        whsInventBatchReserveQueryBuilder.parmItemId(_itemId);
        whsInventBatchReserveQueryBuilder.parmInventDimCriteria(_inventDimCriteria);
        whsInventBatchReserveQueryBuilder.parmInventDimParmCriteria(_inventDimParmCriteria);
        whsInventBatchReserveQueryBuilder.parmReservationHierarchyLevel(_reservationHierarchyLevel);
        whsInventBatchReserveQueryBuilder.parmIncludeOrdered(_includeOrdered);
        whsInventBatchReserveQueryBuilder.parmExcludeSumWithDeltaRecords(false);
        whsInventBatchReserveQueryBuilder.parmIncludePhysical(_includePhysical);
        whsInventBatchReserveQueryBuilder.parmMinAvailQty(_minAvailQty);

        return whsInventBatchReserveQueryBuilder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>