<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportController_SE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportController_SE</c> class is the controller class for the <c>TaxReport_SE</c> report.
/// </summary>
[SysObsolete('This class is no longer used.', true, 01\12\2022)]
public class TaxReportController_SE extends SrsReportRunController implements BatchRetryable
{
    private const SRSCatalogItemName ReportNameSE = ssrsReportStr(TaxReport_SE, Report);

    TaxReport taxReport;
    TaxReportVoucher taxReportVoucher;

    TmpTaxReportById tmpTaxReportById;
    TaxReportCollection taxReportCollection;
    TaxReportTmp_SE taxReportTmp_SE;

    FromDate fromDate;
    ToDate toDate;
    Yr toYear;
    TaxBase amount;
    TaxBase amount2;

    CurrencyCode taxCurrencyCode, reportingCurrencyCode;
    boolean currencyRateOnReportingDate;
    TransDate reportingDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceSE00011, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TaxReport_SE</c> report.
    /// </summary>
    /// <param name="_args">
    ///    The context.
    /// </param>
    public void init(Args _args)
    {
        TaxReportPropertiesBag_W propertiesBag = TaxReportPropertiesBag_W::construct();

        propertiesBag.parmTaxCurrencyCode(taxCurrencyCode);
        propertiesBag.parmReportingCurrencyCode(reportingCurrencyCode);
        propertiesBag.parmCurrencyRateOnReportingDate(currencyRateOnReportingDate);
        propertiesBag.parmReportingDate(reportingDate);

        if (taxReportVoucher)
        {
            tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(fromDate,
                                                                   toDate,
                                                                   taxReportVoucher.TaxPeriod,
                                                                   taxReportVoucher.TaxRepVersion,
                                                                   taxReportVoucher.TaxRepCounter,
                                                                   NoYes::No,
                                                                   DebCredProposal::None,
                                                                   propertiesBag.pack());
        }
        else if (taxReport)
        {
            tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(fromDate,
                                                                   toDate,
                                                                   taxReport.taxPeriod(),
                                                                   taxReport.taxRepVersion(),
                                                                   0,
                                                                   taxReport.update(),
                                                                   DebCredProposal::None,
                                                                   propertiesBag.pack());
        }
        toYear = year(toDate);

        while select tmpTaxReportById order by TaxReportField asc
              join
              taxReportCollection where tmpTaxReportById.TaxReportField == taxReportCollection.TaxReportField &&
              taxReportCollection.TaxReportLayout == TaxReportLayout::Sweden
        {
            if (toYear >= 2007)
            {
                if (tmpTaxReportById.TaxReportField == 48
                ||  tmpTaxReportById.TaxReportField == 10
                ||  tmpTaxReportById.TaxReportField == 11
                ||  tmpTaxReportById.TaxReportField == 12
                ||  tmpTaxReportById.TaxReportField == 30
                ||  tmpTaxReportById.TaxReportField == 31
                ||  tmpTaxReportById.TaxReportField == 32
                ||	tmpTaxReportById.TaxReportField == 60
                ||	tmpTaxReportById.TaxReportField == 61
                ||	tmpTaxReportById.TaxReportField == 62)
                {
                    amount  += tmpTaxReportById.Amount;
                    amount2 += tmpTaxReportById.TaxInCostPrice;
                }
            }
            else
            {
                if (tmpTaxReportById.TaxReportField >= 30 && tmpTaxReportById.TaxReportField <= 38)
                {
                    amount  += tmpTaxReportById.Amount;
                    amount2 += tmpTaxReportById.TaxInCostPrice;
                }
            }

            taxReportTmp_SE.TmpTaxReportById_TaxReportField = tmpTaxReportById.TaxReportField;
            taxReportTmp_SE.TmpTaxReportById_Amount = tmpTaxReportById.Amount - tmpTaxReportById.TaxInCostPrice;
            taxReportTmp_SE.TaxReportCollection_Name = taxReportCollection.Name;
            taxReportTmp_SE.insert();
        }

        tmpTaxReportById.Amount = amount;
        tmpTaxReportById.TaxInCostPrice = amount2;
        tmpTaxReportById.TaxReportField = 39;

        if (toYear >= 2007)
        {
            tmpTaxReportById.TaxReportField = 49;
            taxReportCollection.TaxReportField = 49;
        }
        else
        {
            tmpTaxReportById.TaxReportField = 39;
            taxReportCollection.TaxReportField = 39;
        }
        taxReportCollection.Name = "@SYS55180";
        taxReportTmp_SE.TmpTaxReportById_TaxReportField = tmpTaxReportById.TaxReportField;
        taxReportTmp_SE.TmpTaxReportById_Amount = tmpTaxReportById.Amount - tmpTaxReportById.TaxInCostPrice;
        taxReportTmp_SE.TaxReportCollection_Name = taxReportCollection.Name;
        taxReportTmp_SE.FromDate = fromDate;
        taxReportTmp_SE.ToDate = toDate;
        taxReportTmp_SE.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes varibles from args.
    /// </summary>
    private void initFromArgs()
    {
        args argsLocal = this.parmArgs();

        if (argsLocal && argsLocal.dataset() == tablenum(TaxReportVoucher))
        {
            taxReportVoucher = argsLocal.record();
        }
        if (argsLocal && classidget(argsLocal.parmObject()) == classnum(TaxReport))
        {
            taxReport = argsLocal.parmObject();
        }

        if (taxReportVoucher)
        {
            fromDate = taxReportVoucher.FromDate;
            toDate = taxReportVoucher.ToDate;
        }
        else if (taxReport)
        {
            fromDate = taxReport.fromDate();
            toDate = taxReport.toDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets dates from the caller and sets the ToDate field in the dialog.
    /// </summary>
    protected void prePromptModifyContract()
    {
        TaxReportContract_W contract = this.parmReportContract().parmRdpContract() as TaxReportContract_W;

        super();

        this.initFromArgs();

        contract.parmReportingDate(toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs actions before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        TaxReportContract_W  contract;
        RecId recId;

        contract = this.parmReportContract().parmRdpContract() as TaxReportContract_W;

        taxCurrencyCode = contract.parmTaxCurrencyCode();
        reportingCurrencyCode = contract.parmReportingCurrencyCode();
        currencyRateOnReportingDate = contract.parmCurrencyRateOnReportingDate();
        reportingDate = contract.parmReportingDate();

        this.init(this.parmArgs());

        recId = this.storeTmpTable();

        contract.parmSrsTmpTblMarshallerContract().parmTmpTableDataRecId(recId);

        const str FromDateParameterName = 'TaxReport_SE_FromDate';
        const str ToDateParameterName = 'TaxReport_SE_ToDate';
        SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();
        if (rdlContract)
        {
            rdlContract.setValue(FromDateParameterName, fromDate);
            rdlContract.setValue(ToDateParameterName, toDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores the temporary table by using the <c>SRSTmpTblMarshaller</c> class.
    /// </summary>
    /// <returns>
    ///    The record ID of the stored temporary table.
    /// </returns>
    public RecId storeTmpTable()
    {
        RecId reportParamRecId;
        SRSReportRunPermission srsPermission;

        srsPermission = new SRSReportRunPermission();
        srsPermission.assert();
        reportParamRecId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(taxReportTmp_SE);
        CodeAccessPermission::revertAssert();

        delete_from taxReportTmp_SE;

        return reportParamRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        SrsReportRunController controller = new TaxReportController_SE();
        controller.parmReportName(ReportNameSE);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>