<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostOnAccProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjPostOnAccProposal extends ProjPost
{
    ProjInvoiceOnAcc    newProjInvoiceOnAcc;
    ProjProposalOnAcc   projProposalOnAcc;
    ProjOnAccTrans      projOnAccTrans;
    ProjGroup projGroup;
    ProjRevenueProfile revProfile;
    boolean multipleContractLinesEnabled;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isValidMainAccountForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the main account type is valid for posting.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account that needs to be checked to ensure it is valid.
    /// </param>
    /// <returns>
    /// True if the account is valid for posting; Otherwise, false.
    /// </returns>
	protected boolean isValidMainAccountForPosting(MainAccount _mainAccount)
    {
        boolean returnValue = true;

        if ((  _mainAccount.isProfitAndLossAccount()  && this.getInvoicePosting() == ProjLedgerStatusOnAcc::BalanceSheet) ||
            (! _mainAccount.isProfitAndLossAccount() && this.getInvoicePosting() == ProjLedgerStatusOnAcc::Operations))
        {
            returnValue = false;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMainAccountCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not to execute the mainAccountCheck() logic.
    /// </summary>
    /// <returns>
    /// True if the system should perform the main acount check; Otherwise, false.
    /// </returns>
	protected boolean performMainAccountCheck()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccount</Name>
				<Source><![CDATA[
    protected void checkAccount()
    {
        ListEnumerator         enumerator;
        MainAccount             mainAccount;

		if (this.performMainAccountCheck())
        {
            if (this.isTypeFixedPrice())
            {
                enumerator = ProjFundingSource::getFundingSources( projTrans ).getEnumerator();
                while ( enumerator.moveNext() )
                {
                    mainAccount = MainAccount::findByMainAccountId(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.creditAccountTurnoverLedgerDimension(enumerator.current())));

                    if (!this.isValidMainAccountForPosting(mainAccount))
                    {
                        throw error(strFmt("@SYS55610",this.creditAccountTurnoverLedgerDimension( enumerator.current() ), this.getInvoicePosting()));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountTurnoverLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that is used for posting the revenue amounts.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension that is used for posting the revenue amounts.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountTurnoverLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        if (this.getInvoicePosting() == ProjLedgerStatusOnAcc::BalanceSheet)
        {
            return projTrans.wipInvoicedOnAccountLedgerDimension(_fundingSourceId);
        }

        return projTrans.accountOnAccountLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjPostOnAccProposal</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The table for the transaction type.
    /// </param>
    public void new(Common _buffer)
    {
        projProposalOnAcc   = _buffer;
        projTrans           = ProjTrans::newProjProposalOnAcc(projProposalOnAcc);

        multipleContractLinesEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
        ProjTable projTable = ProjTable::find(projTrans.projId());

        if (multipleContractLinesEnabled)
        {
            ProjContractBillingMethod billingMethod = projProposalOnAcc.projOnAccTrans().TransactionOrigin == ProjOrigin::Milestone ?
                                                    ProjContractBillingMethod::FixedPrice :
                                                    ProjContractBillingMethod::TimeMaterial;
            revProfile = ProjRevRecHelper::getRevProfile(projTable, billingMethod);
        }
        else
        {
            projGroup = ProjGroup::find(projTable.ProjGroupId);
        }

        this.parmTransIdCost(projTrans.transId());
        this.parmTransIdSales(projTrans.transId());

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTrans</Name>
				<Source><![CDATA[
    public Common newTrans()
    {
        return newProjInvoiceOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransStatus</Name>
				<Source><![CDATA[
    public ProjTransStatus parmTransStatus(ProjTransStatus  _transStatus = ProjTransStatus::NoStatus)
    {
        // Description: If update is done more than once the transaction status should not become 'Invoiced'
        return projTrans.transStatus() == ProjTransStatus::CreditnoteProposal || projTrans.transStatus() == ProjTransStatus::Registered ? ProjTransStatus::Registered : ProjTransStatus::Invoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>LedgerPostingType::ProjTurnover</c> enumeration value.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::ProjTurnover</c> enumeration value.
    /// </returns>
    protected LedgerPostingType postingTypeTurnover()
    {
        if (this.getInvoicePosting() == ProjLedgerStatusOnAcc::BalanceSheet)
        {
            return LedgerPostingType::ProjWIPInvoicedOnAccount;
        }

        return LedgerPostingType::ProjOnAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the on account trasaction.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjInvoiceTransTaxWithholdGroups_BR projInvoiceTransTaxWithholdGroups_BR;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.checkAccount();
        }

        newProjInvoiceOnAcc.clear();
        newProjInvoiceOnAcc = ProjInvoiceOnAcc::initInvoiceFromProposale(projProposalOnAcc);
        newProjInvoiceOnAcc.ProjInvoiceId   = projProposalOnAcc.projProposalJour().ProjInvoiceId;
        newProjInvoiceOnAcc.InvoiceDate     = projProposalOnAcc.projProposalJour().InvoiceDate;

        if (!newProjInvoiceOnAcc.validateWrite())
        {
            // Update has been aborted due to an error.
            throw error("@SYS21628");
        }

        newProjInvoiceOnAcc.insert();

        Docu::copy(projProposalOnAcc,newProjInvoiceOnAcc);

        if (BrazilParameters::isEnabled())
        {
            projInvoiceTransTaxWithholdGroups_BR.ProjInvoiceJour = newProjInvoiceOnAcc.projInvoiceJour().RecId;
            projInvoiceTransTaxWithholdGroups_BR.LineAmountCur = projProposalOnAcc.lineAmount();
            projInvoiceTransTaxWithholdGroups_BR.TaxWithholdItemGroupHeading_TH = projProposalOnAcc.projOnAccTrans().TaxWithholdItemGroupHeading_TH;
            projInvoiceTransTaxWithholdGroups_BR.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        ProjOnAccTrans  projOnAccTransUpd  = ProjOnAccTrans::find(projTrans.transId(),true);

        // If <c>TransDate</c> is null invoice date should be considered.
        if (!projOnAccTransUpd.TransDate)
        {
            ProjProposalId projProposalId = projOnAccTransUpd.proposalId();
            if (projProposalId)
            {
                projOnAccTransUpd.TransDate = ProjProposalJour::find(projProposalId).InvoiceDate;
            }
        }

        projOnAccTransUpd.Description = projTrans.txt();

        projOnAccTransUpd.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicePosting</Name>
				<Source><![CDATA[
    private ProjLedgerStatusOnAcc getInvoicePosting()
    {
        return multipleContractLinesEnabled ? revProfile.OnAccLedgerStatus : projGroup.InvoicePosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTypeFixedPrice</Name>
				<Source><![CDATA[
    private boolean isTypeFixedPrice()
    {
        return multipleContractLinesEnabled ? 
            (revProfile.BillingMethod == ProjContractBillingMethod::FixedPrice) : 
            (projGroup.ProjType == ProjType::FixedPrice);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>