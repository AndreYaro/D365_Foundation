<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerMatrixDimensionDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerMatrixDimensionDP_CN</c> class is the Report Data Provider class for the<c>LedgerMatrixDimension_CN</c> Overview Report.
/// </summary>
/// <remarks>
/// This is the RDP class for the <c>LedgerVoucher_CN</c> SRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(LedgerMatrixDimensionContract_CN))
]
class LedgerMatrixDimensionDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    LedgerMatrixDimensionContract_CN    contract;

    DimensionMatrixId_CN                dimensionMatrixId;
    FromDate                            fromDate;
    ToDate                              toDate;
    MainAccountNum                      mainAccountNum;

    LedgerMatrixReportTmp_CN            ledgerMatrixReportTmp;
    LedgerMatrixReportTmpParameter_CN   ledgerMatrixReportTmpParameter;

    boolean                             isChineseVoucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerMatrixReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>LedgerMatrixReportTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>LedgerMatrixReportTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerMatrixReportTmp_CN))
    ]
    public LedgerMatrixReportTmp_CN getLedgerMatrixReportTmp()
    {
        return ledgerMatrixReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerMatrixReportTmpParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>LedgerMatrixReportParameterTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>LedgerMatrixReportParameterTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerMatrixReportTmpParameter_CN))
    ]
    public LedgerMatrixReportTmpParameter_CN getLedgerMatrixReportTmpParameter()
    {
        return ledgerMatrixReportTmpParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes parameters
    /// </summary>
    protected void initParameters()
    {
        //Initializes contract class
        contract = this.parmDataContract();

        dimensionMatrixId = contract.parmDimensionMatrixId();
        fromDate = contract.parmFromDate();
        toDate   = contract.parmToDate();
        mainAccountNum = contract.parmMainAccountNum();

        isChineseVoucher = LedgerParameters::isChineseVoucher_CN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMatrixParametersTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the LedgerMatrixReportParameterTmp temporary table.
    /// </summary>
    protected void insertMatrixParametersTmpTable()
    {
        DimensionMatrixTable_CN dimensionMatrixTableLocal = DimensionMatrixTable_CN::findByDimensionMatrixId(dimensionMatrixId);

        ledgerMatrixReportTmpParameter.DimensionMatrixId    = dimensionMatrixId;
        ledgerMatrixReportTmpParameter.FromDate             = fromDate;
        ledgerMatrixReportTmpParameter.ToDate               = toDate;
        ledgerMatrixReportTmpParameter.IsChineseVoucher     = isChineseVoucher;
        ledgerMatrixReportTmpParameter.DimensionType        = DimensionAttribute::find(dimensionMatrixTableLocal.DimensionAttribute).Name;
        ledgerMatrixReportTmpParameter.MainAccountId        = mainAccountNum;
        ledgerMatrixReportTmpParameter.MainAccountName      = MainAccount::getLocalizedNameByMainAccountId(mainAccountNum);

        ledgerMatrixReportTmpParameter.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMatrixReportTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes query and get datas to initializes the LedgerMatrixReportTmp_CN temporary table.
    /// </summary>
    protected void insertMatrixReportTmpTable()
    {
        Query                           query;
        QueryRun                        queryRun;

        DimensionMatrixTable_CN         dimensionMatrixTable;
        DimensionMatrixLine_CN          dimensionMatrixLine;
        LedgerMatrixDimensionView_CN    dimensionMatrixView;

        VoucherJournal                  voucherField;
        Name                            dimensionValueName;

        query = new Query(queryStr(LedgerMatrixDimension_CN));
        query = LedgerMatrixDimensionDP_CN::initQueryByMatrixDimension(query, contract);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(DimensionMatrixTable_CN)))
            {
                dimensionMatrixTable = queryRun.get(tableNum(DimensionMatrixTable_CN));
            }
            if (queryRun.changed(tableNum(DimensionMatrixLine_CN)))
            {
                dimensionMatrixLine = queryRun.get(tableNum(DimensionMatrixLine_CN));
            }
            if (queryRun.changed(tableNum(LedgerMatrixDimensionView_CN)))
            {
                dimensionMatrixView = queryRun.get(tableNum(LedgerMatrixDimensionView_CN));
            }

            dimensionValueName = dimensionMatrixLine.getDimensionName();

            ledgerMatrixReportTmp.clear();

            ledgerMatrixReportTmp.DimensionValue  = dimensionMatrixLine.DimensionValue;
            ledgerMatrixReportTmp.Name          = dimensionValueName;
            ledgerMatrixReportTmp.SubLevelFor   = dimensionMatrixTable.SignDisplay;

            ledgerMatrixReportTmp.insert();

            if (isChineseVoucher)
            {
                voucherField = dimensionMatrixView.Voucher_CN;
            }
            else
            {
                voucherField = dimensionMatrixView.Voucher;
            }
            ledgerMatrixReportTmp.TransDate     = dimensionMatrixView.AccountingDate;
            ledgerMatrixReportTmp.Month         = mthOfYr(ledgerMatrixReportTmp.TransDate);
            ledgerMatrixReportTmp.Day           = dayOfMth(ledgerMatrixReportTmp.TransDate);
            ledgerMatrixReportTmp.Voucher       = voucherField;
            ledgerMatrixReportTmp.Description   = dimensionMatrixView.Text;

            if (dimensionMatrixTable.SignDisplay == AmountDisplaySign_CN::Credit)
            {
                ledgerMatrixReportTmp.AmountMST = -1 * dimensionMatrixView.AmountMST;
            }
            else
            {
                ledgerMatrixReportTmp.AmountMST = dimensionMatrixView.AmountMST;
            }

            ledgerMatrixReportTmp.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTemporaryTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes all the temporary tables.
    /// </summary>
    protected void insertTemporaryTables()
    {
        this.insertMatrixParametersTmpTable();

        this.insertMatrixReportTmpTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        //Initializes parameters
        this.initParameters();

        [fromDate, toDate] = LedgerMatrixReportHelper_CN::getFromToDateForYear(fromDate, toDate);

        this.insertTemporaryTables();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryByMatrixDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize query by matrix dimension.
    /// </summary>
    /// <param name="_query">
    /// The query information.
    /// </param>
    /// <param name="_contract">
    /// The ledger matrix dimension contract information.
    /// </param>
    /// <returns>
    /// The instance of the <c>Query</c> class.
    /// </returns>
    public static Query initQueryByMatrixDimension(Query _query, LedgerMatrixDimensionContract_CN _contract)
    {
        DimensionMatrixId_CN    dimensionMatrixId;
        FromDate                fromDate;
        ToDate                  toDate;
        CurrentOperationsTax    postingLayer;
        MainAccountNum          mainAccountNum;
        RecId                   mainAccountRecId;

        dimensionMatrixId   = _contract.parmDimensionMatrixId();
        fromDate            = _contract.parmFromDate();
        toDate              = _contract.parmToDate();
        postingLayer        = _contract.parmPostingLayer();
        mainAccountNum      = _contract.parmMainAccountNum();

        mainAccountRecId = MainAccount::findByMainAccountId(mainAccountNum).RecId;

        [fromDate, toDate] = LedgerMatrixReportHelper_CN::getFromToDateForYear(fromDate, toDate);

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(DimensionMatrixTable_CN)),
            fieldNum(DimensionMatrixTable_CN, MatrixId)).value(dimensionMatrixId);

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(LedgerMatrixDimensionView_CN)),
            fieldNum(LedgerMatrixDimensionView_CN, AccountingDate)).value(queryRange(fromDate, toDate));

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(LedgerMatrixDimensionView_CN)),
            fieldNum(LedgerMatrixDimensionView_CN, PostingLayer)).value(SysQuery::value(postingLayer));

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(LedgerMatrixDimensionView_CN)),
            fieldNum(LedgerMatrixDimensionView_CN, MainAccount)).value(queryValue(mainAccountRecId));

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(LedgerMatrixDimensionView_CN)),
            fieldNum(LedgerMatrixDimensionView_CN, Ledger)).value(queryValue(Ledger::current()));

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>