<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountTableMainDataChangeEnablement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAccountTableMainDataChange</c> class is the implementation of main data change framework for <c>BankAccountTable</c>.
/// </summary>
[MainDataChangeTable(tableStr(BankAccountTable))]
internal final class BankAccountTableMainDataChangeEnablement implements
    IMainDataChangeEnablement,
    IMainDataChangeDependency,
    IMainDataChangeHistorical,
    IMainDataChangeEntityChangeApproval,
    IMainDataChangeCustomizedAction
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPredefinedProtectedFieldList</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MainDataChangePredefinedProtectedFieldList getPredefinedProtectedFieldList()
    {
        return new MainDataChangePredefinedProtectedFieldList(tableNum(BankAccountTable))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, BankAccountStatus), 0, 0, 0, true)
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, BankCodeType))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, RegistrationNum))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, BankCompanyStatementName))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, BankDestinationName))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, BankGroupId))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, CurrencyCode))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, BankCIN))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, SWIFTNo))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, IBAN))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, QRIBAN_CH))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, CompanyPaymId))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, BankSortCode))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, GiroContractAccount))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, GiroContract))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, DebitDirectId))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, ActiveFrom))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, ActiveTo))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, OverDraftLimit))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, PaymForeignExportPath_LT))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, PaymLocalExportPath_LT))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, Rfc_MX))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, CFMBankBalanceMinimum))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, CorrAccount_W))
            .addPredefinedProtectedField(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNameKana_JP))
            .addPredefinedProtectedField(
                tableNum(BankAccountTable),
                fieldNum(BankAccountTable, BridgingAccountLedgerDimension),
                tableNum(DimensionAttributeValueCombination),
                fieldNum(DimensionAttributeValueCombination, RecId),
                fieldNum(DimensionAttributeValueCombination, DisplayValue))
            .addPredefinedProtectedField(
                tableNum(BankAccountTable),
                fieldNum(BankAccountTable, LedgerDimension),
                tableNum(DimensionAttributeValueCombination),
                fieldNum(DimensionAttributeValueCombination, RecId),
                fieldNum(DimensionAttributeValueCombination, DisplayValue))
            .addPredefinedProtectedField(tableNum(BankAccountSigner), fieldNum(BankAccountSigner, EffectiveStartDate))
            .addPredefinedProtectedField(tableNum(BankAccountSigner), fieldNum(BankAccountSigner, EffectiveEndDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formNameSet</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MainDataChangeFormSet formNameSet()
    {
        return new MainDataChangeFormSet()
            .addForm(formStr(BankAccountTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::Bank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusParentControlStr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MainDataChangeStatusParentControlMap getStatusParentControlStr()
    {
        return new MainDataChangeStatusParentControlMap()
            .addParentControl(formStr(BankAccountTable), formControlStr(BankAccountTable, Identification))
            .addParentControl(formStr(BankAccountTable), formControlStr(BankAccountTable, Grid));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableCreationApproval</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canEnableCreationApproval()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreationTrackingFields</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MainDataChangeCreationTrackingFieldMap getCreationTrackingFields()
    {
        return new MainDataChangeCreationTrackingFieldMap()
            .addTrackingField(tableNum(BankAccountTable), fieldNum(BankAccountTable, BankAccountStatus), BankAccountHoldStatus::InactiveForAllTransactions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefaultForHistory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefaultForHistory()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisableHistory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisableHistory()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCompleteAction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void postCompleteAction(TableId _tableId, RecId _recId)
    {
        BankAccountTable bankAccountTable = BankAccountTable::findByRecId(_recId, true);
        BankAccountSigner::ActiveBankAccountSigner(bankAccountTable.AccountID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDependencies</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean checkDependencies()
    {
        return FeatureStateProvider::isFeatureEnabled(BankAccountLifecycleManagementFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityList</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MainDataChangeEntityList getEntityList()
    {
        return new MainDataChangeEntityList(tableNum(BankAccountTable))
            .addEntity(tableNum(BankAccountEntity), dataEntityDataSourceStr(BankAccountEntity, BankAccountTable));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>