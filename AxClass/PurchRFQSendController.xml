<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSendController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQSendController</c> class is the helper class for the associated SRS Report.
/// </summary>
public class PurchRFQSendController extends TradeDocumentReportController implements BatchRetryable
{
    PurchRFQJournalPrint                formletterJournalPrint;
    VendRFQJour                         vendRFQJour;

    private PurchRFQInstrumentationLogger instrumentationEmailLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales confirmation document title.
    /// </summary>
    /// <returns>
    /// The document title.
    /// </returns>
    protected str documentTitle()
    {
        PurchRFQUpdateTypeModel model = PurchRFQUpdateTypeModel::newFromType(vendRFQJour.rfqUpdateType);

        if (model)
        {
            return model.documentTitle();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentIdentifier</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected str documentIdentifier()
    {
        return vendRFQJour.RFQDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReportExceptions</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean handleReportExceptions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextTableId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected TableId reportExceptionContextTableId()
    {
        return vendRFQJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextRecordId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected RecId reportExceptionContextRecordId()
    {
        return vendRFQJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns record id of the journal record that should be passed to the contract.
    /// </summary>
    /// <returns>
    /// The record id of the journal record.
    /// </returns>
    protected RecId getRecordId()
    {
        return vendRFQJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        SRSPrintDestinationSettings destinationSetting = new SRSPrintDestinationSettings();

        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchRFQJournalPrint))
        {
            // Set the caller
            formletterJournalPrint = this.parmArgs().caller();
        }

        if (!journalList)
        {
            if (this.parmArgs().record())
            {
                // Get journal list from the selected record/s
                journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
            }
            else
            {
                journalList = this.parmArgs().object();
            }
        }

        PurchRFQUpdateTypeModel model = PurchRFQUpdateTypeModel::newFromType(vendRFQJour.rfqUpdateType);
        if (model)
        {
            formLetterReport = model.newPurchRFQFormLetterReport();
        }
        
        if (!formLetterReport)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        formLetterReport.parmPrintType(printCopyOriginal);

        if (formletterJournalPrint)
        {
            // Get the print settings
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(formletterJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(formletterJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(formletterJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchRFQAmendmendEmailNotifier))
        {
            VendRFQJour                     vendRFQJournal = this.parmArgs().record() as VendRFQJour;
            PurchRFQAmendmendEmailNotifier  emailNotifier = this.parmArgs().caller() as PurchRFQAmendmendEmailNotifier;
            SysEmailMessageTable            emailMessage = PurchRFQAmendmendEmailNotifier::getEmailMessageTable(emailNotifier);
            Map                             vendorsEmails = emailNotifier.parmRFQVendorsEmails();
            str                             emailAddresses = vendorsEmails.lookup(vendRFQJournal.VendAccount);
            PurchRFQSendEmailMethod         emailMethod = emailNotifier.getSendEmailMethod();

            using (var activityContext = this.instrumentationEmailLogger().amendmentEmailNotifier().initFormLetterReport(emailMethod))
            {
                destinationSetting = PurchRFQAmendmendEmailNotifier::getPrintDestinationSettings(vendRFQJournal);

                if (emailMethod == PurchRFQSendEmailMethod::SSRSReport)
                {
                    destinationSetting.emailTo(emailAddresses);
                    destinationSetting.emailSubject(emailMessage.Subject);
                    destinationSetting.parmEMailContract().parmBody(PurchRFQAmendmendEmailNotifier::getEmailMessageBody(emailNotifier, emailMessage));
                    destinationSetting.parmEMailContract().parmTo(emailAddresses);
                }

                formLetterReport.parmDefaultOriginalPrintJobSettings(destinationSetting);
                formLetterReport.parmDefaultCopyPrintJobSettings(destinationSetting);
                formLetterReport.parmPrintType(printCopyOriginal::Original);
                formLetterReport.parmUseUserDefinedDestinations(true);
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    protected void output()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().documentReport().output(this.reportExceptionContextTableId(), this.reportExceptionContextRecordId()))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SRSReportParameters</c> values to the report contract.
    /// </summary>
    protected void modifyContract()
    {
        SRSTmpDataStore             srsTmpDataStore;
        PurchRFQSendContract        purchRFQSendContract = contract as PurchRFQSendContract;

        if (purchRFQSendContract)
        {
            purchRFQSendContract.parmDocumentTitle(this.documentTitle());
        }

        if (formletterJournalPrint)
        {
            // Pack the class and insert into the temporary store.
            srsTmpDataStore.Value = formletterJournalPrint.pack();
            srsTmpDataStore.insert();

            // Set the rec id to contract parameter
            purchRFQSendContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        PurchRFQSendContract    purchRFQSendContract;
        Common                  transTable;
        VendTable               vendTable;
        LanguageId              reportLanguage;

        if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(vendRFQJour);

        do
        {
            if (!vendRFQJour)
            {
                throw error("@SYS26348");
            }

            this.initFormLetterReport();

            purchRFQSendContract = this.parmReportContract().parmRdpContract() as PurchRFQSendContract;

            if (vendRFQJour.rfqUpdateType == PurchRFQUpdateType::Sent)
            {
                transTable = PurchRFQVendLink::find(vendRFQJour.rfqCaseId, vendRFQJour.VendAccount);
            }
            else
            {
                transTable = PurchRFQTable::find(vendRFQJour.rfqId);
            }

            reportLanguage = vendRFQJour.LanguageId != "" ? vendRFQJour.LanguageId : VendTable::find(vendRFQJour.VendAccount).languageId();

            //setting the value to 'No'
            purchRFQSendContract.parmNoYesId(NoYes::No);
            //setting values for the report parameters
            purchRFQSendContract.parmPurchInternalRFQId(vendRFQJour.InternalRFQId);

            formLetterReport.loadPrintSettings(vendRFQJour, transTable, reportLanguage);
            this.parmReportContract().parmRdlContract().parmLanguageId(reportLanguage);
            this.parmReportContract().parmRdlContract().parmLabelLanguageId(reportLanguage);

            purchRFQSendContract = this.parmReportContract().parmRdpContract();

            this.outputReports();

            if (vendRFQJour.PrintReplySheet && vendRFQJour.rfqUpdateType == PurchRFQUpdateType::Sent)
            {
                //setting the value to 'Yes', inorder to display the Request for quote reply sheet report.
                purchRFQSendContract.parmNoYesId(NoYes::Yes);

                formLetterReport.loadPrintSettings(vendRFQJour, transTable, reportLanguage);
                this.parmReportContract().parmRdlContract().parmLanguageId(reportLanguage);
                this.parmReportContract().parmRdlContract().parmLabelLanguageId(reportLanguage);
                this.outputReports();
            }
        }
        while (journalList.next(vendRFQJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataContractRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>CustConfirmJour</c>.
    /// </summary>
    /// <param name="_common">
    /// A <c>CustConfirmJour</c> record.
    /// </param>
    protected void setDataContractRecord(Common _common)
    {
        vendRFQJour = args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQSendController construct()
    {
        return new PurchRFQSendController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        SrsReportRunController formLetterController = PurchRFQSendController::construct();
        PurchRFQSendController controller;

        controller = formLetterController;
        controller.initArgs(_args, ssrsReportStr(RFQSend, Report));

        formLetterController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PurchRFQSendController</c> class and initialize it based on passed arguments.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> object used for <c>PurchRFQSendController</c> class initialization.
    /// </param>
    /// <returns>
    /// A <c>PurchRFQSendController</c> class instance.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The function has been incorrectly called.
    /// </exception>
    public static SrsReportDataContract newDataContract(Args _args)
    {
        PurchRFQSendController formLetterController = PurchRFQSendController::construct();

        if (_args.dataset() != tableNum(VendRFQJour))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        formLetterController.initDataContract(_args, ssrsReportStr(RFQSend, Report));

        return formLetterController.parmReportContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationEmailLogger</Name>
				<Source><![CDATA[
    private PurchRFQInstrumentationLogger instrumentationEmailLogger()
    {
        if (!instrumentationEmailLogger)
        {
            instrumentationEmailLogger = PurchRFQInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationEmailLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>