<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostUpdateGlobal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventCostUpdateGlobal</c> class handles the different instances of the
/// <c>inventCostUpdate</c> class that exist for the different <c>dataAreaId</c> values and sets the
/// transaction begin time.
/// </summary>
public class InventCostUpdateGlobal
{
    #define.TransBeginTime('transBeginTime')

    // Mapping DataAreaId -> instance of the InventCostUpdate class
    Map inventCostUpdateMap;

    private static InventCostUpdateGlobal singleton;

    // Set containing dataAreaId's for which the corresponding InventCostUpdate instance need to be invoked upon ttsCommit
    Set activatedDataAreaIdSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>dataAreaId</c> to the <c>activeDataAreaIdSet</c>.
    /// </summary>
    /// <param name="_dataAreaId">
    /// The <c>dataareaid</c> that has to be opened; optional.
    /// </param>
    /// <remarks>
    /// Every <c>dataAreaId</c> will be stored in a set, which can then be used to determine for which
    /// <c>dataAreas</c> the <c>inventCostUpdate.TTSPreCommit</c> method has to be called.
    /// </remarks>
    public void activateDataAreaId(DataAreaId _dataAreaId = curext())
    {
        // Only the dataareaIds that have not already been activated needs to be added
        if (!activatedDataAreaIdSet.in(_dataAreaId))
        {
            activatedDataAreaIdSet.add(_dataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and returns an instance of the <c>inventCostUpdate</c> class.
    /// </summary>
    /// <param name="_dataAreaId">
    ///    The <c>dataAreaId</c> for which an instance of the <c>inventCostUpdate</c> class should be
    ///    returned; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>inventCostUpdate</c> class.
    /// </returns>
    /// <remarks>
    ///    If, for the given <c>dataAreaId,</c> no instance of the <c>inventCostUpdate</c> class exists in the
    ///    global map, a new instance will be created and saved in the map. Then the instance will be looked
    ///    up and returned.
    /// </remarks>
    public InventCostUpdate inventCostUpdate(DataAreaId _dataAreaId = curext())
    {
        // Only one instance of the inventCostUpdate class per dataareaId
        if (!inventCostUpdateMap.exists(_dataAreaId))
        {
            // No instance has been created ==> create it
            inventCostUpdateMap.insert(_dataAreaId,InventCostUpdate::construct(_dataAreaId));
        }

        return inventCostUpdateMap.lookup(_dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of this class.
    /// </summary>
    /// <remarks>
    ///    This method is stated as protected to make sure that the construct method will be used.The global
    ///    map that stores the different <c>inventCostUpdate</c> class instances will be initialized.
    /// </remarks>
    protected void new()
    {
        // Initialize the Map to store the different instances of the inventCostUpdate class
        // One instance per dataareaId
        inventCostUpdateMap = new Map(Types::String,Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransBeginTime</Name>
				<Source><![CDATA[
    public TransBeginTime parmTransBeginTime()
    {
        TransBeginTime  transBeginTime;

        if (appl.globalCache().isSet(classStr(inventCostUpdateGlobal), #TransBeginTime))
        {
            transBeginTime = appl.globalCache().get(classStr(inventCostUpdateGlobal), #TransBeginTime, DateTimeUtil::utcNow());
        }
        return transBeginTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyAbort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through the global map and calls the <c>inventCostUpdate.ttsNotifyAbort</c> method for
    /// each instance.
    /// </summary>
    /// <remarks>
    /// This method will be called if a transaction is aborted. The <c>inventCostUpdate.ttsNotifyAbort</c>
    /// method will be called for all the instances of the <c>inventCostUpdate</c> class that are stored in
    /// the map. <c>Changecompany</c> is not required because the call of the method
    /// <c>inventCostUpdate.ttsNotifyAbort</c> will only reset the variables of the <c>inventCostUpdate</c>
    /// class.
    /// </remarks>
    public void ttsNotifyAbort()
    {
        MapEnumerator       me = inventCostUpdateMap.getEnumerator();

        // Reset the set of datareaids for which I have been activated
        // so that with a new transaction the activation process starts again
        activatedDataAreaIdSet = new Set(Types::String);

        // Now reset the variables of all the stored instances
        while (me.moveNext())
        {
            // ChangeCompany not necessary because this is only a reset of internal variables
            InventCostUpdate inventCostUpdate = me.currentValue();
            inventCostUpdate.ttsNotifyAbort();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyPostBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the global map and calls the <c>ttsNotifyPostBegin</c> method for each instance and sets
    /// the transaction begin time.
    /// </summary>
    public void ttsNotifyPostBegin()
    {
        MapEnumerator       me = inventCostUpdateMap.getEnumerator();

        // Reset the set of datareaids for which I have been activated
        // because this is the start of a new transaction
        activatedDataAreaIdSet = new Set(Types::String);

        // Now reset the variables of all the stored instances
        // to ensure, that we start with empty memory structures
        while (me.moveNext())
        {
            // ChangeCompany not necessary because this is only a reset of internal variables
            InventCostUpdate inventCostUpdate = me.currentValue();
            inventCostUpdate.ttsNotifyPostBegin();
        }
        // Need to store the transaction beging time in global cache - adding new class variable crashes the AOS when xpo is imported.
        appl.globalCache().set(classStr(inventCostUpdateGlobal), #TransBeginTime, DateTimeUtil::getSystemDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyPreCommit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through the global map, changes the company, and calls the
    /// <c>inventCostUpdate.ttsNotifyPreCommit</c> method for each instance.
    /// </summary>
    /// <remarks>
    /// This method will be called when a transaction is committed.
    /// </remarks>
    public void ttsNotifyPreCommit()
    {
        SetEnumerator       se = activatedDataAreaIdSet.getEnumerator();
        InventCostUpdate    inventCostUpdate;

        // Iterate over all activated dataareaid's
        // to write the memory structures to the Db
        while (se.moveNext())
        {
            DataAreaId newExt = se.current();
            if (newExt != curext() && newExt != '')
            {
                // Switch company to the dataareaid that is currently processed
                changecompany(newExt)
                {
                    inventCostUpdate = inventCostUpdateMap.lookup(newExt);
                    inventCostUpdate.ttsNotifyPreCommit();
                }
            }
            else
            {
                if (newExt != '')
                {
                    inventCostUpdate = inventCostUpdateMap.lookup(newExt);
                    inventCostUpdate.ttsNotifyPreCommit();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates if needed and returns the singleton instance of the <c>InventCostUpdateGlobal</c> class.
    /// </summary>
    /// <returns>The singleton instance of the <c>InventCostUpdateGlobal</c> class.</returns>
    public static InventCostUpdateGlobal instance()
    {
        if (InventCostUpdateGlobal::singleton == null)
        {
            InventCostUpdateGlobal::singleton = InventCostUpdateGlobal::construct();
        }
        return InventCostUpdateGlobal::singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostUpdateGlobal construct()
    {
        return new InventCostUpdateGlobal();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
