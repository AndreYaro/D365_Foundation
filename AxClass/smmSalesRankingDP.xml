<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmSalesRankingDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>smmSalesRankingDP</c> class is the report data provider class for the
/// <c>smmSalesRanking</c>Microsoft SQL Server Reporting Services report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(smmSalesRankingContract)),
    SRSReportQueryAttribute(QueryStr(smmSalesRanking))
]
public class smmSalesRankingDP extends SrsReportDataProviderPreProcessTempDB
{
    smmSalesRankingTmp          temp;
    RecordSortedList            sortArray;
    Counter                     outputQty;
    SalesQty                    qty;
    AmountMST                   revenue;
    SalesContributionMarginMST  contributionMargin;
    QueryRun                    queryRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getsmmSalesRankingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>smmSalesRankingTmp</c> table.
    /// </summary>
    /// <returns>
    /// The <c>smmSalesRankingTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(smmSalesRankingTmp))
    ]
    public smmSalesRankingTmp getsmmSalesRankingTmp()
    {
        select * from temp;
        return temp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSortArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>smmSalesRankingTmp</c> table with data.
    /// </summary>
    private void  writeSortArray(CustAccount  _orderAccount, DirPartyRecId _party)
    {
        temp.AccountNum         = _orderAccount;
        temp.Revenue            = -revenue;
        temp.ContMargin         = -contributionMargin;
        temp.Quantity           = -qty;
        temp.Name               = DirPartyTable::findRec(_party).Name;
        temp.insert();

        sortArray.ins(temp);

        qty                         = 0;
        revenue                     = 0;
        contributionMargin          = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTable</Name>
				<Source><![CDATA[
    private void insertIntoTmpTable()
    {
        int counter = 0;
        smmSalesRankingTmp smmSalesTmp;

        delete_from temp;

        if (sortArray.len() > 0)
        {
            sortArray.first(smmSalesTmp);

            do
            {
                temp.AccountNum = smmSalesTmp.AccountNum;
                temp.ContMargin = -smmSalesTmp.ContMargin;
                temp.Name       = smmSalesTmp.Name;
                temp.Quantity   = -smmSalesTmp.Quantity;
                temp.Revenue    = -smmSalesTmp.Revenue;
                temp.insert();
                counter++;
            }
            while (sortArray.next(smmSalesTmp) && counter < outputQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method calls helper methods and inserts data to temporary table.This method will be called by
    /// Microsoft SQL Server Reporting Services at runtime. The method will compute data and populate the
    /// data tables that will be returned to Microsoft SQL Server Reporting Services.
    /// </remarks>
    public void processReport()
    {
        CustAccount                 oldOrderAccount     = '';
        ProjInvoiceJour             projInvoiceJour;
        boolean                     journalFound    = false;
        CustInvoiceJour             custInvoiceJour;
        DirPartyRecId               party;
        CustTable                   custTable;

        revenue                     = 0;
        contributionMargin          = 0;
        qty                         = 0;
        sortArray   = new RecordSortedList(tablenum(smmSalesRankingTmp));
        smmSalesRankingContract     contract    = this.parmDataContract() as smmSalesRankingContract;
        outputQty   = contract.parmOutputQty();

        switch (contract.parmOutputSorting())
        {
            case SalesRanking::Revenue:
                sortArray.sortOrder(fieldnum(smmSalesRankingTmp, Revenue), fieldnum(smmSalesRankingTmp, AccountNum));
                break;
            case SalesRanking::Margin:
                sortArray.sortOrder(fieldnum(smmSalesRankingTmp, ContMargin), fieldnum(smmSalesRankingTmp, AccountNum));
                break;
            case SalesRanking::Qty:
                sortArray.sortOrder(fieldnum(smmSalesRankingTmp, Quantity), fieldnum(smmSalesRankingTmp, AccountNum));
                break;
            default:
                sortArray.sortOrder(fieldnum(smmSalesRankingTmp, AccountNum));
                break;
        }
       
        this.updateTotals();

        smmSalesRankingTmp smmSalesRankingTmpLocal;
        smmSalesRankingTotal smmSalesRankingTotal;              
        insert_recordset smmSalesRankingTmpLocal (AccountNum, ContMargin, Name, Quantity, Revenue)
            select AccountNum, ContMargin, Name, Quantity, Revenue from smmSalesRankingTotal;

        update_recordset smmSalesRankingTmpLocal
        setting ContMargin = smmSalesRankingTmpLocal.ContMargin * -1,
            Quantity = smmSalesRankingTmpLocal.Quantity * -1,
            Revenue = smmSalesRankingTmpLocal.Revenue * -1;

        // Move to sorting array
        while select smmSalesRankingTmpLocal
        {
            sortArray.ins(smmSalesRankingTmpLocal);
        }

        this.insertIntoTmpTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    private void updateTotals()
    {
        System.Collections.Generic.List<System.Threading.Tasks.Task> tasks = new System.Collections.Generic.List<System.Threading.Tasks.Task>();
        tasks.Add(runAsync(classNum(smmSalesRankingDP),  staticMethodStr(smmSalesRankingDP, updateTotalsAsync), conNull()));
        this.waitForAsyncTasks(tasks.ToArray());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotalsAsync</Name>
				<Source><![CDATA[
    private static void updateTotalsAsync(container _container, System.Threading.CancellationToken _cancellationToken)
    {
        smmSalesRankingTotal::updateTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAsyncTasks</Name>
				<Source><![CDATA[
    private void waitForAsyncTasks(System.Threading.Tasks.Task[] _threadTasklist)
    {
        const int ConnectionKeepAlivePingIntervalInMilliSec = 15*60*1000; // 15 minutes in ms.
        
        while (!System.Threading.Tasks.Task::WaitAll(_threadTasklist, ConnectionKeepAlivePingIntervalInMilliSec))
        {
            if (this.parmUserConnection())
            {
                var statement = this.parmUserConnection().createStatement();
                var sqlKeepAlive = 'select SYSDATETIME();';
        
                ResultSet resultset = statement.executeQuery(sqlKeepAlive);
                resultset.next();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>