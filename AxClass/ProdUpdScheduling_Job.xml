<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdScheduling_Job</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdUpdScheduling_Job</c> class is used for production job scheduling.
/// </summary>
/// <remarks>
///    This class is based on <see cref="T:ProdUpdScheduling" />.
/// </remarks>
class ProdUpdScheduling_Job extends ProdUpdScheduling
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The run method creates the scheduling engine, passes the scheduling parameters and then invokes the
    ///    base class which has to take care of invoking the engine.
    /// </summary>
    public void run()
    {
        setprefix(ProdMultiSchedulingJob::description());

        using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::UpdateJobSchedulingRun, prodParmScheduling.RecId))
        {
            // invoke scheduling
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    static ProdUpdScheduling_Job newParmBuffer(ProdParmScheduling prodParmScheduling)
    {
        if (! prodParmScheduling.ParmId)
        {
            prodParmScheduling.skipTTSCheck(true);
            prodParmScheduling.ParmBuffer::initParmId();
            prodParmScheduling.write();
        }

        ProdUpdScheduling_Job prodUpdScheduling_Job = ProdUpdScheduling::construct(ProdSchedMethod::JobScheduling);
        prodUpdScheduling_Job.parmParmBuffer(prodParmScheduling);

        return prodUpdScheduling_Job;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>