<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_OC4_Base</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class rAssetReport_OC4_Base extends RAssetReport implements ERIReportPostProcessingSupported
{
    protected Map mapScrap;
    protected Amount scrapTotal;
    protected Struct structScrapBlokCoordinate;
    protected EmployeeTable_RU emplTable;
    protected Query queryScrap;
    protected RAssetTrans rAssetTrans;

    protected const str ScrapDocNumber = 'DocNumber';
    protected const str ScrapDocDate = 'DocDate';
    protected const str ScrapItemName = 'ItemName';
    protected const str ScrapItemID = 'ItemID';
    protected const str ScrapQty = 'Qty';
    protected const str ScrapCostPrice = 'CostPrice';
    protected const str ScrapCostAmount = 'CostAmount';
    protected const str Unit = 'unit';
    protected const str AccountNumDeb = 'AccNumDeb';
    protected const str AccountNumCred = 'AccNumCred';

    protected const str RowNumber = 'rowNumber';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cntScrapRowIntoReport</Name>
				<Source><![CDATA[
    protected abstract Integer cntScrapRowIntoReport()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetName</Name>
				<Source><![CDATA[
    protected abstract TempStr getAssetName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapScrap</Name>
				<Source><![CDATA[
    protected Map initMapScrap()
    {
        int key = 0;

        Map mapRet = new Map(Types::Integer, Types::Class);

        Struct templateStruct = new Struct(Types::String,  ScrapDocNumber,
            Types::Date, ScrapDocDate,
            Types::String, ScrapItemName,
            Types::String, ScrapItemID,
            Types::Real, ScrapQty,
            Types::Real, ScrapCostPrice,
            Types::Real, ScrapCostAmount,
            Types::String, Unit,
            Types::String, AccountNumCred,
            Types::String, AccountNumDeb);

        templateStruct.value(ScrapDocNumber, '');
        templateStruct.value(ScrapDocDate, dateNull());
        templateStruct.value(ScrapItemName, '');
        templateStruct.value(ScrapItemID, '');
        templateStruct.value(ScrapQty, 0.0);
        templateStruct.value(ScrapCostPrice, 0.0);
        templateStruct.value(ScrapCostAmount, 0.0);
        templateStruct.value(Unit, '');
        templateStruct.value(AccountNumCred, '');
        templateStruct.value(AccountNumDeb, '');

        container con = templateStruct.pack();

        QueryRun queryRun = new QueryRun(queryScrap);
        while (queryRun.next())
        {
            RAssetScrap rAssetScrap = queryRun.get(tableNum(RAssetScrap));

            key++;

            Struct struct = Struct::create(con);

            str strTmp = rAssetScrap.InventTransId;
            struct.value(ScrapDocNumber, strTmp);
            struct.value(ScrapDocDate, rAssetScrap.TransDate);

            InventTable inventTable = InventTable::find(rAssetScrap.ItemId);

            struct.value(ScrapItemName, inventTable.itemName());

            struct.value(ScrapItemID, rAssetScrap.ItemId);
            struct.value(ScrapQty, rAssetScrap.Qty);
            struct.value(ScrapCostPrice, rAssetScrap.CostPrice);
            struct.value(ScrapCostAmount, rAssetScrap.CostAmount);

            InventTableModule inventTableModule = InventTableModule::find(rAssetScrap.ItemId, ModuleInventPurchSales::Invent);
            struct.value(Unit, inventTableModule.UnitId);

            strTmp = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(rAssetStandards.assetOffsetLedgerDimension(rAssetStandards.AssetStandardId, rAssetStandards.postingProfile(this.transDate()), RAssetTransType::DisposalScrap, this.transDate()));

            struct.value(AccountNumCred, strTmp);
            strTmp = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::PurchReceipt, rAssetScrap, inventTable)));
            struct.value(AccountNumDeb, strTmp);
            mapRet.insert(key, struct);
            scrapTotal += rAssetScrap.CostAmount;
        }

        return mapRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <param name="_rAssetScrap">An <c>RAssetScrap</c> record.</param>
    /// <param name="_inventTable">An item.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(
        InventAccountType   _inventAccountType,
        RAssetScrap         _rAssetScrap,
        InventTable         _inventTable)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            _rAssetScrap.ItemId,
            _inventTable.itemGroupId());

        searchParameters.InventDim_RU = _rAssetScrap.inventDim();

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReport</Name>
				<Source><![CDATA[
    protected boolean initReport()
    {
        boolean ret = super();

        this.employee(this.transDate());
        emplTable.data(newEmployee);
        structScrapBlokCoordinate = this.initStructScrapBlokCoordinate();

        queryScrap = new Query();
        QueryBuildDataSource queryDataSource = queryScrap.addDataSource(tableNum(RAssetScrap));
        queryDataSource.addRange(fieldNum(RAssetScrap, AssetId)).value(queryValue(rAssetTable.AccountNum));
        queryDataSource.addRange(fieldNum(RAssetScrap, Assembling)).value(queryValue(NoYes::No));
        queryDataSource.addRange(fieldNum(RAssetScrap, Voucher)).value(queryValue(rAssetTrans.Voucher));
        queryDataSource.addRange(fieldNum(RAssetScrap, TransDate)).value(queryValue(rAssetTrans.TransDate));
        queryDataSource.addRange(fieldNum(RAssetScrap, StornoRecId)).value(queryValue(0));

        mapScrap = this.initMapScrap();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStructScrapBlokCoordinate</Name>
				<Source><![CDATA[
    protected Struct initStructScrapBlokCoordinate()
    {
        Struct struct =  new Struct(Types::Integer, RowNumber,
            Types::String, ScrapDocNumber,
            Types::String, ScrapItemName,
            Types::String, ScrapItemID,
            Types::String, ScrapQty,
            Types::String, ScrapCostPrice,
            Types::String, ScrapCostAmount,
            Types::String, Unit,
            Types::String, AccountNumCred,
            Types::String, AccountNumDeb);

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args _args)
    {
        if (!_args.record())
        {
            throw error(Error::missingRecord(funcName()));
        }

        super(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputUnPostingInvent</Name>
				<Source><![CDATA[
    protected abstract boolean outputUnPostingInvent()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>outScrapBlok</Name>
				<Source><![CDATA[
    protected void outScrapBlok()
    {
        RNumDateInWordConverter     converter = RNumDateInWordConverter::construct();
        
        this.outScrapTable();

        this.insertValueIntoDoc(ConstChiefAccountantName, OfficialsTable_RU::findAccountant().getFIO());

        this.insertValueIntoDoc(ConstScrapTotal, scrapTotal);
        this.insertValueIntoDoc(ConstSalesProceeds, converter.numeralsToCurrency(scrapTotal, CompanyInfoHelper::standardCurrency()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>outValue</Name>
				<Source><![CDATA[
    private void outValue(Struct _struct, str _strValue, int _curentRow)
    {
        str curentColumnName = structScrapBlokCoordinate.value(_strValue);

        str strCellName = strFmt("@GLS116884", curentColumnName, _curentRow);

        this.insertValueIntoDoc(strCellName, _struct.value(_strValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>outScrapTable</Name>
				<Source><![CDATA[
    protected void outScrapTable()
    {
        int curentRow;

        if (mapScrap.elements() > 0)
        {
            int row = this.cntScrapRowIntoReport();

            if (mapScrap.elements() > row)
            {
                curentRow = structScrapBlokCoordinate.value(RowNumber) + 1;

                for (int cx = row; cx < mapScrap.elements(); cx++)
                {
                    excelDocument.insertRow(curentRow, curWorkSheetNum);
                }
            }

            curentRow = structScrapBlokCoordinate.value(RowNumber);

            MapIterator it = new MapIterator(mapScrap);

            while (it.more())
            {
                Struct struct = it.value();

                str curentColumnName = structScrapBlokCoordinate.value(ScrapDocNumber);
                str strCellName = strFmt("@GLS116884", curentColumnName, curentRow);

                str strTmp = struct.value(ScrapDocNumber);
                date dt = struct.value(ScrapDocDate);

                strTmp = this.mergeStr(strFmt("@GLS106745", dt), strTmp);

                this.insertValueIntoDoc(strCellName, strTmp);

                this.outValue(struct, ScrapItemName, curentRow);
                this.outValue(struct, ScrapItemID, curentRow);
                this.outValue(struct, ScrapQty, curentRow);
                this.outValue(struct, ScrapCostPrice, curentRow);
                this.outValue(struct, ScrapCostAmount, curentRow);
                this.outValue(struct, Unit, curentRow);
                this.outValue(struct, AccountNumDeb, curentRow);
                this.outValue(struct, AccountNumCred, curentRow);

                curentRow++;

                it.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outSection_2</Name>
				<Source><![CDATA[
    protected void outSection_2()
    {
        const int NoOfRows = 4;
        const int StartNumber = 7;

        int curentRow;

        if (mapScrap.elements() > 0)
        {
            if (mapScrap.elements() > NoOfRows)
            {
                curentRow = StartNumber + 1;

                for (int cx = NoOfRows; cx < mapScrap.elements(); cx++)
                {
                    excelDocument.insertRow(curentRow, curWorkSheetNum);
                }
            }

            curentRow = StartNumber;

            MapIterator it = new MapIterator(mapScrap);

            while (it.more())
            {
                Struct struct = it.value();

                this.insertValueIntoDoc(strFmt("@GLS116884", 'A', curentRow), struct.value(ScrapItemID));
                this.insertValueIntoDoc(strFmt("@GLS116884", 'AD', curentRow), struct.value(ScrapQty));

                curentRow++;
                it.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage01</Name>
				<Source><![CDATA[
    protected void printPage01()
    {
        this.insertValueIntoDoc(ConstCompanyName, companyInfo.name());
        this.insertValueIntoDoc(ConstCodeOKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, this.transDate()));

        this.insertValueIntoDoc(ConstDepartamentName, RAssetLocation::find(this.location(this.transDate())).Name);

        this.insertDateIntoDoc (ConstFromBusinessAccount, this.transDate());

        this.insertValueIntoDoc(ConstEmplName, emplTable.worker().getFIO_RU());

        this.insertValueIntoDoc(ConstEmplID, emplTable.EmployeeId);
        this.insertValueIntoDoc(ConstChiefPost, OfficialsTable_RU::findDirector().Title);
        this.insertValueIntoDoc(ConstChiefName, OfficialsTable_RU::findDirector().getFIO());

        this.insertValueIntoDoc(ConstDateChiefSignature, this.dateAsStr(max(this.transDate(), this.documentDate())));

        this.insertValueIntoDoc(ConstActNumber, this.documentNumber());
        this.insertDateIntoDoc (ConstActDate, this.documentDate());
 
        this.insertValueIntoDoc(ConstAssetName, this.getAssetName());

        this.insertValueIntoDoc(ConstAssetAccountNum, rAssetTable.AccountNum);
        this.insertValueIntoDoc(ConstAssetSerialNum, rAssetTable.SerialNum);

        if (rAssetTable.GuaranteeDate)
        {
            this.insertValueIntoDoc(ConstAssetGuaranteeDate, rAssetTable.GuaranteeDate);
        }

        this.insertValueIntoDoc(ConstToBusinessAccount, acquisitionFirstTrans.TransDate);

        this.insertValueIntoDoc(ConstAcquisitionPrice, this.acquisition(this.transDate()));
        this.insertValueIntoDoc(ConstAmountDepreciation, -this.depreciation(this.transDate()));
        this.insertValueIntoDoc(ConstDeprCost, this.acquisition(this.transDate()) + this.depreciation(this.transDate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage02</Name>
				<Source><![CDATA[
    protected void printPage02()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage03</Name>
				<Source><![CDATA[
    protected void printPage03()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    protected void run()
    {
        curWorkSheetNum = 1;
        this.printPage01();

        curWorkSheetNum = 2;
        this.printPage02();

        curWorkSheetNum = 3;
        this.printPage03();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return documentPath + "@SYS34952" + this.documentNumber() + "@SYS34953";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'FA4';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>