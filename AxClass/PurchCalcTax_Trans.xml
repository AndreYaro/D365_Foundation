<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
[PurchCalcTaxFactoryAttribute(tableStr(PurchTable))]
class       PurchCalcTax_Trans
extends     PurchCalcTax_Purch
{
    PurchParmTable      parmTable;

    TradeTotalsIQueryRun    markupQueryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createMarkupQueryRun</Name>
				<Source><![CDATA[
    protected TradeTotalsIQueryRun createMarkupQueryRun(tableId      tableId, recId        recId)
    {
        return TradeTotalsCommonEnumerator::newFromCommonEnumerator(
                this.parmEnumerableFactory().createMarkupEnumerableProvider().markupEnumerable(tableId, recId, update).getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an exchange rate to use for tax calculation.
    /// </summary>
    /// <param name="_date">
    ///    A date for which to retrieve an exchange rate.
    /// </param>
    /// <returns>
    ///    The exchange rate.
    /// </returns>
    VendExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return parmTable.FixedExchRate ? parmTable.ExchRate : super(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a secondary exchange rate to use for tax calculation.
    /// </summary>
    /// <param name="_date">
    ///    A date for which to retrieve a secondary exchange rate.
    /// </param>
    /// <returns>
    ///    The secondary exchange rate.
    /// </returns>
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return parmTable.FixedExchRate ? parmTable.ExchRateSecondary : super(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate reportingCurrencyExchangeRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return parmTable.FixedExchRate == NoYes::Yes ? parmTable.ReportingCurrencyExchangeRate : super(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkup</Name>
				<Source><![CDATA[
    void  initCursorMarkup(tableId      tableId,
                           recId        recId)
    {
        markupQueryRun = this.createMarkupQueryRun(tableId, recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the date to use for tax calculation.
    /// </summary>
    /// <returns>
    ///    The tax caluclation date.
    /// </returns>
    TransDate  invoiceDate()
    {
        return parmTable ? parmTable.updateDate() : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupQueryRunGet</Name>
				<Source><![CDATA[
    protected Common markupQueryRunGet(TradeTotalsIQueryRun _markupQueryRun)
    {
        TradeTotalsCommonEnumerator commonEnumerator = _markupQueryRun as TradeTotalsCommonEnumerator;
        MarkupTrans markupTransStatement;

        markupTransStatement = commonEnumerator.parmCommonEnumerator().current();

        return markupTransStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupQueryRunNext</Name>
				<Source><![CDATA[
    protected boolean markupQueryRunNext(TradeTotalsIQueryRun _markupQueryRun)
    {
        TradeTotalsCommonEnumerator queryRun = _markupQueryRun as TradeTotalsCommonEnumerator;
        return queryRun.parmCommonEnumerator().moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(PurchTable _purchTable)
    {
        super(_purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextMarkupLine</Name>
				<Source><![CDATA[
    MarkupTrans  nextMarkupLine()
    {
        this.markupQueryRunNext(markupQueryRun);

        markupTrans = this.markupQueryRunGet(markupQueryRun);

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract parmContract()
    {
        return PurchTotalsTransContract::newFromPurchTable(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public PurchParmTable parmParmTable(PurchParmTable _parmTable = parmTable)
    {
        parmTable = _parmTable;

        return parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    Object  queryBuild()
    {
        QueryRun  build;

        build = new QueryRun(queryStr(PurchLine));
        build.query().dataSourceTable(tableNum(PurchLine)).rangeField(fieldNum(PurchLine, PurchId)).value(queryValue(purchTable.PurchId));

        return build;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    Common queryGet(QueryRun  transact)
    {
        return transact.get(tableNum(PurchLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the line quantity for the current line to use for tax calculation.
    /// </summary>
    /// <returns>
    ///    The line quantity.
    /// </returns>
    PurchQty    transQty()
    {
        DocumentStatus  documentStatus = DocumentStatus::PurchaseOrder;

        if (! parmTable && specQty == PurchUpdate::PackingSlip)
        {
            documentStatus = DocumentStatus::None;
        }

        return PurchQuantity::construct(documentStatus, true).calcPurchQty(purchLine, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if Euro triangulation should be used for tax calculation.
    /// </summary>
    /// <param name="_date">
    ///    A date for which to perform the check.
    /// </param>
    /// <returns>
    ///    The <c>NoYes::Yes</c> enumeration value if Euro triangulation is used; otherwise the
    ///    <c>NoYes::No</c> enumeration value.
    /// </returns>
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return parmTable.FixedExchRate ? parmTable.euroTriangulation : super(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether Subledger Journal Lines should be generated.
    /// </summary>
    /// <returns>
    /// true if Subledger Journal lines should be generated; otherwise, false.
    /// </returns>
    boolean useSubLedgerJournalLines()
    {
        boolean ret;

        if (parmTable)
        {
            ret = true;
        }
        else if (specQty == PurchUpdate::PackingSlip)
        {
            ret = false;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>TaxUncommitted</c> table should be used to persist tax amounts.
    /// </summary>
    /// <returns>
    ///    true if the <c>TaxUncomitted</c> table should be used; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        boolean ret;

        if (parmTable)
        {
            ret = true;
        }
        else if (specQty == PurchUpdate::PackingSlip)
        {
            ret = false;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>