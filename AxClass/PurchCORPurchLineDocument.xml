<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCORPurchLineDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchCORPurchLineDocument extends WorkflowDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query name for this workflow document.
    /// </summary>
    /// <returns>
    /// The query name from the AOT.
    /// </returns>
    queryName getQueryName()
    {
        return querystr(PurchCORPurchLineDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCORPolicyReceivingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the receiving method of the COR Policy for the <c>PurchLine</c> record that is being
    ///    submitted to the workflow.
    /// </summary>
    /// <param name="_dataAreaId">
    ///    The <c>DataAreaId</c> value of the <c>PurchLine</c> record that is being submitted.
    /// </param>
    /// <param name="_tableId">
    ///    The <c>TableId</c> value of the <c>PurchLine</c> record that is being submitted.
    /// </param>
    /// <param name="_recId">
    ///    The <c>RecId</c> value of the <c>PurchLine</c> record that is being submitted.
    /// </param>
    /// <returns>
    ///    The COR Policy receiving method.
    /// </returns>
    public PurchCORReceivingMethodEx parmCORPolicyReceivingMethod(dataAreaId _dataAreaId, tableId _tableId, RecId _recId)
    {
        PurchLine purchLine = PurchLine::findRecId(_recId);

        if (PurchCORPolicyTable::decentralized(purchLine))
        {
            return PurchCORReceivingMethod::Decentralized;
        }

        return PurchCORReceivingMethod::Centralized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkItemsForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds all the work items for the workflow enabled record.
    /// </summary>
    /// <param name="_workflowEnabledRecord">
    ///    The workflow enabled record.
    /// </param>
    /// <returns>
    ///    A list of work item ID values.
    /// </returns>
    public static List findWorkItemsForDocument(Common _workflowEnabledRecord)
    {
        WorkflowWorkItemTable   workflowWorkItemTable;
        List workItems = new List(Types::Guid);

        while select Id from workflowWorkItemTable where
            workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending &&
            workflowWorkItemTable.RefRecId == _workflowEnabledRecord.RecId &&
            workflowWorkItemTable.RefTableId == _workflowEnabledRecord.TableId
        {
            workItems.addEnd(workflowWorkItemTable.Id);
        }

        return workItems;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>