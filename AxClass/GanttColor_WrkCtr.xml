<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttColor_WrkCtr</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttColor_WrkCtr extends GanttColor
{
    // General
    NoYes                               useThemeColors;

    OLE_Color                           activeNodeColor;
    OLE_Color                           passiveNodeColor;
    OLE_Color                           highlightNodeColor;
    GanttColorId                        deliveryDateColor;
    GanttColorId                        materialAvailabilityMarkerColor;
    
    NoYes                               generalColorChanged;

    // Production
    // production job types
    GanttColorSchemeWrkCtrProd          prodJobColorScheme;

    OLE_Color                           prodJobTypeQueueBeforeColor;
    OLE_Color                           prodJobTypeSetupColor;
    OLE_Color                           prodJobTypeProcessColor;
    OLE_Color                           prodJobTypeOverlapColor;
    OLE_Color                           prodJobTypeTransportColor;
    OLE_Color                           prodJobTypeQueueAfterColor;

    // production job statuses
    OLE_Color                           prodJobStatusComingColor;
    OLE_Color                           prodJobStatusWaitingColor;
    OLE_Color                           prodJobStatusStoppedColor;
    OLE_Color                           prodJobStatusStartedColor;
    OLE_Color                           prodJobStatusCompletedColor;

    NoYes                               prodJobColorChanged;

    // Planned production
    GanttColorSchemeWrkCtrPlannedProd   plannedProdJobColorScheme;

    OLE_Color                           plannedProdJobTypeQueueBeforeColor;
    OLE_Color                           plannedProdJobTypeSetupColor;
    OLE_Color                           plannedProdJobTypeProcessColor;
    OLE_Color                           plannedProdJobTypeOverlapColor;
    OLE_Color                           plannedProdJobTypeTransportColor;
    OLE_Color                           plannedProdJobTypeQueueAfterColor;

    NoYes                               plannedProdJobColorChanged;

    // Project
    GanttColorSchemeWrkCtrProj          projColorScheme;

    OLE_Color                           projActivityColor;

    NoYes                               projColorChanged;

    #localmacro.Version1List
        // General
        activeNodeColor,
        passiveNodeColor,

        // Production
        prodJobColorScheme,

        prodJobTypeQueueBeforeColor,
        prodJobTypeSetupColor,
        prodJobTypeProcessColor,
        prodJobTypeOverlapColor,
        prodJobTypeTransportColor,
        prodJobTypeQueueAfterColor,

        prodJobStatusComingColor,
        prodJobStatusWaitingColor,
        prodJobStatusStoppedColor,
        prodJobStatusStartedColor,
        prodJobStatusCompletedColor,

        // Planned production
        plannedProdJobColorScheme,

        plannedProdJobTypeQueueBeforeColor,
        plannedProdJobTypeSetupColor,
        plannedProdJobTypeProcessColor,
        plannedProdJobTypeOverlapColor,
        plannedProdJobTypeTransportColor,
        plannedProdJobTypeQueueAfterColor,

        // Project
        projColorScheme,

        projActivityColor
    #endmacro

    #define.CurrentVersion(5)
    #localmacro.CurrentList
        // General
        useThemeColors,
        activeNodeColor,
        passiveNodeColor,
        highlightNodeColor,
        deliveryDateColor,
        materialAvailabilityMarkerColor,
        
        // Production
        prodJobColorScheme,

        prodJobTypeQueueBeforeColor,
        prodJobTypeSetupColor,
        prodJobTypeProcessColor,
        prodJobTypeOverlapColor,
        prodJobTypeTransportColor,
        prodJobTypeQueueAfterColor,

        prodJobStatusComingColor,
        prodJobStatusWaitingColor,
        prodJobStatusStoppedColor,
        prodJobStatusStartedColor,
        prodJobStatusCompletedColor,

        // Planned production
        plannedProdJobColorScheme,

        plannedProdJobTypeQueueBeforeColor,
        plannedProdJobTypeSetupColor,
        plannedProdJobTypeProcessColor,
        plannedProdJobTypeOverlapColor,
        plannedProdJobTypeTransportColor,
        plannedProdJobTypeQueueAfterColor,

        // Project
        projColorScheme,

        projActivityColor
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyChangedValues</Name>
				<Source><![CDATA[
    protected boolean applyChangedValues()
    {
        if (!super())
        {
            return false;
        }

        if (generalColorChanged || prodJobColorChanged || plannedProdJobColorChanged || projColorChanged)
        {
            GanttData_WrkCtr ganttData = this.parmGanttClient().parmGanttData();
            ganttData.updateColors();
            this.parmGanttClient().parmGanttVisualization().refresh();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultActiveColor</Name>
				<Source><![CDATA[
    public int defaultActiveColor()
    {
        return this.rgb2int(#defaultThemeAccent1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        FormRun formRun;
        Args    args = new Args(formstr(ganttWrkCtrColor));
        args.caller(this);

        formRun = classfactory.formRunClass(args);
        formRun.init();

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveWrkCtrJobNodeColorDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the color for a <c>GanttTmpWrkCtrJob</c> record.
    /// </summary>
    /// <param name="_ganttColor_WrkCtr">The Gantt color class.</param>
    /// <param name="_ganttTmpWrkCtrJob">The <c>GanttTmpWrkCtrJob</c> record.</param>
    /// <param name="_result"><c>EventHandlerResult</c> with the color.</param>
    [SubscribesTo(classStr(GanttColor_WrkCtr), delegateStr(GanttColor_WrkCtr, retrieveWrkCtrJobNodeColorDelegate))]
    public static void retrieveWrkCtrJobNodeColorDelegateHandler(GanttColor_WrkCtr _ganttColor_WrkCtr, GanttTmpWrkCtrJob _ganttTmpWrkCtrJob, EventHandlerResult _result)
    {
        switch (_ganttTmpWrkCtrJob.RefType)
        {
            case WrkCtrCapRefType::Production:
                _result.result(_ganttColor_WrkCtr.getProdJobNodeColor(_ganttTmpWrkCtrJob));
                break;

            case WrkCtrCapRefType::PlannedOrder:
                _result.result(_ganttColor_WrkCtr.getPlannedProdJobNodeColor(_ganttTmpWrkCtrJob));
                break;

            case WrkCtrCapRefType::Project:
                _result.result(_ganttColor_WrkCtr.getProjNodeColor(_ganttTmpWrkCtrJob));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveWrkCtrJobNodeColorDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for retrieving the color for a <c>GanttTmpWrkCtrJob</c> record.
    /// </summary>
    /// <param name="_ganttColor_WrkCtr">The Gantt color class.</param>
    /// <param name="_ganttTmpWrkCtrJob">The <c>GanttTmpWrkCtrJob</c> record.</param>
    /// <param name="_result"><c>EventHandlerResult</c> with the color</param>
    delegate void retrieveWrkCtrJobNodeColorDelegate(GanttColor_WrkCtr _ganttColor_WrkCtr, GanttTmpWrkCtrJob _ganttTmpWrkCtrJob, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveWrkCtrJobNodeColor</Name>
				<Source><![CDATA[
    private OLE_Color retrieveWrkCtrJobNodeColor(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        this.retrieveWrkCtrJobNodeColorDelegate(this, _ganttTmpWrkCtrJob, result);

        if (!result.hasResult())
        {
            throw error(strfmt("@SYS89080", _ganttTmpWrkCtrJob.RefType));
        }

        return result.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeColor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the color that will be used for painting a specific Gantt node.
    /// </summary>
    /// <param name="_tableName">
    ///    A string that identifies the table name where the node information is stored.
    /// </param>
    /// <param name="_recId">
    ///    Node record identifier.
    /// </param>
    /// <param name="_record">
    ///    Table buffer that contains the cached node data. Optional; optional.
    /// </param>
    /// <returns>
    ///    An <c>OLE_Color</c> value that represents the node color.
    /// </returns>
    /// <remarks>
    ///    If the node is highlighted the highlight color is returned.Otherwise the color is computed based on
    ///    the type of the order (production order, planned production order or project).
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The order type for the node is incorrect.
    /// </exception>
    public OLE_Color getNodeColor(TableName _tableName,
                                  RecId     _recId,
                                  Common    _record = null)
    {
        GanttTmpWrkCtrJob   ganttTmpWrkCtrJob;

        OLE_Color           color = 0;

        if (prmisdefault(_record))
        {
            _record = this.parmGanttClient().parmGanttData().getRecordByRecId(_tableName, _recId);
        }

        ganttTmpWrkCtrJob = _record;

        // check if the order is highlighted
        if (ganttTmpWrkCtrJob.Highlighted)
        {
            color = this.parmHighlightNodeColor();
        }
        else
        {
            color = this.retrieveWrkCtrJobNodeColor(ganttTmpWrkCtrJob);
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeColorActivePassive</Name>
				<Source><![CDATA[
    protected OLE_Color getNodeColorActivePassive(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        OLE_Color   color   = 0;

        if (this.parmGanttClient().parmSetLoadIds().in(_ganttTmpWrkCtrJob.RefId))
        {
            color = this.parmActiveNodeColor();
        }
        else
        {
            color = this.parmPassiveNodeColor();
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeColorPlannedProdJobType</Name>
				<Source><![CDATA[
    protected OLE_Color getNodeColorPlannedProdJobType(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        OLE_Color   color       = 0;
        ReqRouteJob reqRouteJob = ReqRouteJob::findRecId(str2recId(_ganttTmpWrkCtrJob.JobId));

        if (reqRouteJob.RecId)
        {
            switch (reqRouteJob.JobType)
            {
                case RouteJobType::QueueBefore:

                    color = this.parmPlannedProdJobTypeQueueBeforeColor();
                    break;

                case RouteJobType::Setup        :

                    color = this.parmPlannedProdJobTypeSetupColor();
                    break;

                case RouteJobType::Process      :

                    color = this.parmPlannedProdJobTypeProcessColor();
                    break;

                case RouteJobType::Overlap      :

                    color = this.parmPlannedProdJobTypeOverlapColor();
                    break;

                case RouteJobType::Transport    :

                    color = this.parmPlannedProdJobTypeTransportColor();
                    break;

                case RouteJobType::QueueAfter   :

                    color = this.parmPlannedProdJobTypeQueueAfterColor();
                    break;

                default                         :
                    throw error(strfmt("@SYS89080", reqRouteJob.JobType));
            }
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeColorProdJobStatus</Name>
				<Source><![CDATA[
    protected OLE_Color getNodeColorProdJobStatus(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        OLE_Color       color           = 0;
        ProdRouteJob    prodRouteJob    = ProdRouteJob::findJobId(_ganttTmpWrkCtrJob.JobId);

        if (prodRouteJob.RecId)
        {
            switch (prodRouteJob.JobStatus)
            {
                case ProdJobStatus::Coming      :

                    color = this.parmProdJobStatusComingColor();
                    break;

                case ProdJobStatus::Waiting     :

                    color = this.parmProdJobStatusWaitingColor();
                    break;

                case ProdJobStatus::Stopped     :

                    color = this.parmProdJobStatusStoppedColor();
                    break;

                case ProdJobStatus::Started     :

                    color = this.parmProdJobStatusStartedColor();
                    break;

                case ProdJobStatus::Completed   :

                    color = this.parmProdJobStatusCompletedColor();
                    break;

                default                         :
                    throw error(strfmt("@SYS89080", prodRouteJob.JobStatus));
            }
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeColorProdJobType</Name>
				<Source><![CDATA[
    protected OLE_Color getNodeColorProdJobType(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        OLE_Color       color           = 0;
        ProdRouteJob    prodRouteJob    = ProdRouteJob::findJobId(_ganttTmpWrkCtrJob.JobId);

        if (prodRouteJob.RecId)
        {
            switch (prodRouteJob.JobType)
            {
                case RouteJobType::QueueBefore:

                    color = this.parmProdJobTypeQueueBeforeColor();
                    break;

                case RouteJobType::Setup        :

                    color = this.parmProdJobTypeSetupColor();
                    break;

                case RouteJobType::Process      :

                    color = this.parmProdJobTypeProcessColor();
                    break;

                case RouteJobType::Overlap      :

                    color = this.parmProdJobTypeOverlapColor();
                    break;

                case RouteJobType::Transport    :

                    color = this.parmProdJobTypeTransportColor();
                    break;

                case RouteJobType::QueueAfter   :

                    color = this.parmProdJobTypeQueueAfterColor();
                    break;

                default                         :
                    throw error(strfmt("@SYS89080", prodRouteJob.JobType));
            }
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeColorProduction</Name>
				<Source><![CDATA[
    protected OLE_Color getNodeColorProduction(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        OLE_Color   color       = 0;
        ProdTable   prodTable   = ProdTable::find(_ganttTmpWrkCtrJob.RefId);

        if (prodTable.RecId)
        {
            color = prodTable.GanttColorId;
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlannedProdJobNodeColor</Name>
				<Source><![CDATA[
    protected OLE_Color getPlannedProdJobNodeColor(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        OLE_Color color = 0;
        switch (this.parmPlannedProdJobColorScheme())
        {
            case GanttColorSchemeWrkCtrPlannedProd::ActivePassive  :

                color = this.getNodeColorActivePassive(_ganttTmpWrkCtrJob);
                break;

            case GanttColorSchemeWrkCtrPlannedProd::ProdJobType     :

                color = this.getNodeColorPlannedProdJobType(_ganttTmpWrkCtrJob);
                break;

            default                                         :
                throw error(strfmt("@SYS89080", this.parmPlannedProdJobColorScheme()));
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdJobNodeColor</Name>
				<Source><![CDATA[
    protected OLE_Color getProdJobNodeColor(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        OLE_Color color = 0;
        switch (this.parmProdJobColorScheme())
        {
            case GanttColorSchemeWrkCtrProd::ActivePassive  :

                color = this.getNodeColorActivePassive(_ganttTmpWrkCtrJob);
                break;

            case GanttColorSchemeWrkCtrProd::Production     :

                color = this.getNodeColorProduction(_ganttTmpWrkCtrJob);
                break;

            case GanttColorSchemeWrkCtrProd::ProdJobType    :

                color = this.getNodeColorProdJobType(_ganttTmpWrkCtrJob);
                break;

            case GanttColorSchemeWrkCtrProd::ProdJobStatus  :

                color = this.getNodeColorProdJobStatus(_ganttTmpWrkCtrJob);
                break;

            default                                         :
                throw error(strfmt("@SYS89080", this.parmProdJobColorScheme()));
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjNodeColor</Name>
				<Source><![CDATA[
    protected OLE_Color getProjNodeColor(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        OLE_Color color = 0;

        switch (this.parmProjColorScheme())
        {
            case GanttColorSchemeWrkCtrProj::ActivePassive  :

                color = this.getNodeColorActivePassive(_ganttTmpWrkCtrJob);
                break;

            case GanttColorSchemeWrkCtrProj::Activity       :

                color = this.parmProjActivityColor();
                break;

            default                                         :
                throw error(strfmt("@SYS89080", this.parmProjColorScheme()));
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when you call the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        this.initParmDefaultProd();
        this.initParmDefaultPlannedProd();
        this.initParmDefaultProj();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultPlannedProd</Name>
				<Source><![CDATA[
    protected void initParmDefaultPlannedProd()
    {
        plannedProdJobColorScheme = GanttColorSchemeWrkCtrPlannedProd::ActivePassive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultProd</Name>
				<Source><![CDATA[
    protected void initParmDefaultProd()
    {
        prodJobColorScheme = GanttColorSchemeWrkCtrProd::ActivePassive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultProj</Name>
				<Source><![CDATA[
    protected void initParmDefaultProj()
    {
        projColorScheme = GanttColorSchemeWrkCtrProj::ActivePassive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifiername lastValueDesignName()
    {
        GanttClient_WrkCtr localGanttClient = this.parmGanttClient() as GanttClient_WrkCtr;
        return localGanttClient.lastValueDesignName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveNodeColor</Name>
				<Source><![CDATA[
    public OLE_Color parmActiveNodeColor(OLE_Color _activeNodeColor = activeNodeColor)
    {
        if (activeNodeColor != _activeNodeColor)
        {
            generalColorChanged = NoYes::Yes;
            activeNodeColor     = _activeNodeColor;
        }

        return activeNodeColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseThemeColors</Name>
				<Source><![CDATA[
    public NoYes parmUseThemeColors(NoYes _useThemeColors = useThemeColors)
    {
        if (useThemeColors != _useThemeColors)
        {
            generalColorChanged = NoYes::Yes;
            useThemeColors = _useThemeColors;
        }

        return useThemeColors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttClient</Name>
				<Source><![CDATA[
    public GanttClient parmGanttClient(GanttClient _ganttClient = ganttClient)
    {
        return super(_ganttClient);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHighlightNodeColor</Name>
				<Source><![CDATA[
    public OLE_Color parmHighlightNodeColor(OLE_Color _highlightNodeColor = highlightNodeColor)
    {
        if (highlightNodeColor != _highlightNodeColor)
        {
            generalColorChanged = NoYes::Yes;
            highlightNodeColor     = _highlightNodeColor;
        }

        return highlightNodeColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPassiveNodeColor</Name>
				<Source><![CDATA[
    public OLE_Color parmPassiveNodeColor(OLE_Color _passiveNodeColor = passiveNodeColor)
    {
        if (passiveNodeColor != _passiveNodeColor)
        {
            generalColorChanged = NoYes::Yes;
            passiveNodeColor    = _passiveNodeColor;
        }

        return passiveNodeColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedProdJobColorScheme</Name>
				<Source><![CDATA[
    public GanttColorSchemeWrkCtrPlannedProd parmPlannedProdJobColorScheme(GanttColorSchemeWrkCtrPlannedProd _plannedProdJobColorScheme = plannedProdJobColorScheme)
    {
        if (plannedProdJobColorScheme != _plannedProdJobColorScheme)
        {
            plannedProdJobColorChanged  = NoYes::Yes;
            plannedProdJobColorScheme   = _plannedProdJobColorScheme;
        }

        return plannedProdJobColorScheme;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedProdJobTypeOverlapColor</Name>
				<Source><![CDATA[
    public OLE_Color parmPlannedProdJobTypeOverlapColor(OLE_Color _plannedProdJobTypeOverlapColor = plannedProdJobTypeOverlapColor)
    {
        if (plannedProdJobTypeOverlapColor != _plannedProdJobTypeOverlapColor)
        {
            plannedProdJobColorChanged      = NoYes::Yes;
            plannedProdJobTypeOverlapColor  = _plannedProdJobTypeOverlapColor;
        }

        return plannedProdJobTypeOverlapColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedProdJobTypeProcessColor</Name>
				<Source><![CDATA[
    public OLE_Color parmPlannedProdJobTypeProcessColor(OLE_Color _plannedProdJobTypeProcessColor = plannedProdJobTypeProcessColor)
    {
        if (plannedProdJobTypeProcessColor != _plannedProdJobTypeProcessColor)
        {
            plannedProdJobColorChanged      = NoYes::Yes;
            plannedProdJobTypeProcessColor  = _plannedProdJobTypeProcessColor;
        }

        return plannedProdJobTypeProcessColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedProdJobTypeQueueAfterColor</Name>
				<Source><![CDATA[
    public OLE_Color parmPlannedProdJobTypeQueueAfterColor(OLE_Color _plannedProdJobTypeQueueAfterColor = plannedProdJobTypeQueueAfterColor)
    {
        if (plannedProdJobTypeQueueAfterColor != _plannedProdJobTypeQueueAfterColor)
        {
            plannedProdJobColorChanged          = NoYes::Yes;
            plannedProdJobTypeQueueAfterColor   = _plannedProdJobTypeQueueAfterColor;
        }

        return plannedProdJobTypeQueueAfterColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedProdJobTypeQueueBeforeColor</Name>
				<Source><![CDATA[
    public OLE_Color parmPlannedProdJobTypeQueueBeforeColor(OLE_Color _plannedProdJobTypeQueueBeforeColor = plannedProdJobTypeQueueBeforeColor)
    {
        if (plannedProdJobTypeQueueBeforeColor != _plannedProdJobTypeQueueBeforeColor)
        {
            plannedProdJobColorChanged          = NoYes::Yes;
            plannedProdJobTypeQueueBeforeColor  = _plannedProdJobTypeQueueBeforeColor;
        }

        return plannedProdJobTypeQueueBeforeColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedProdJobTypeSetupColor</Name>
				<Source><![CDATA[
    public OLE_Color parmPlannedProdJobTypeSetupColor(OLE_Color _plannedProdJobTypeSetupColor = plannedProdJobTypeSetupColor)
    {
        if (plannedProdJobTypeSetupColor != _plannedProdJobTypeSetupColor)
        {
            plannedProdJobColorChanged      = NoYes::Yes;
            plannedProdJobTypeSetupColor    = _plannedProdJobTypeSetupColor;
        }

        return plannedProdJobTypeSetupColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedProdJobTypeTransportColor</Name>
				<Source><![CDATA[
    public OLE_Color parmPlannedProdJobTypeTransportColor(OLE_Color _plannedProdJobTypeTransportColor = plannedProdJobTypeTransportColor)
    {
        if (plannedProdJobTypeTransportColor != _plannedProdJobTypeTransportColor)
        {
            plannedProdJobColorChanged          = NoYes::Yes;
            plannedProdJobTypeTransportColor    = _plannedProdJobTypeTransportColor;
        }

        return plannedProdJobTypeTransportColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobColorScheme</Name>
				<Source><![CDATA[
    public GanttColorSchemeWrkCtrProd parmProdJobColorScheme(GanttColorSchemeWrkCtrProd _prodJobColorScheme = prodJobColorScheme)
    {
        if (prodJobColorScheme != _prodJobColorScheme)
        {
            prodJobColorChanged = NoYes::Yes;
            prodJobColorScheme  = _prodJobColorScheme;
        }

        return prodJobColorScheme;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobStatusComingColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdJobStatusComingColor(OLE_Color _prodJobStatusComingColor = prodJobStatusComingColor)
    {
        if (prodJobStatusComingColor != _prodJobStatusComingColor)
        {
            prodJobColorChanged         = NoYes::Yes;
            prodJobStatusComingColor    = _prodJobStatusComingColor;
        }

        return prodJobStatusComingColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobStatusCompletedColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdJobStatusCompletedColor(OLE_Color _prodJobStatusCompletedColor = prodJobStatusCompletedColor)
    {
        if (prodJobStatusCompletedColor != _prodJobStatusCompletedColor)
        {
            prodJobColorChanged         = NoYes::Yes;
            prodJobStatusCompletedColor = _prodJobStatusCompletedColor;
        }

        return prodJobStatusCompletedColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobStatusStartedColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdJobStatusStartedColor(OLE_Color _prodJobStatusStartedColor = prodJobStatusStartedColor)
    {
        if (prodJobStatusStartedColor != _prodJobStatusStartedColor)
        {
            prodJobColorChanged         = NoYes::Yes;
            prodJobStatusStartedColor   = _prodJobStatusStartedColor;
        }

        return prodJobStatusStartedColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobStatusStoppedColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdJobStatusStoppedColor(OLE_Color _prodJobStatusStoppedColor = prodJobStatusStoppedColor)
    {
        if (prodJobStatusStoppedColor != _prodJobStatusStoppedColor)
        {
            prodJobColorChanged         = NoYes::Yes;
            prodJobStatusStoppedColor   = _prodJobStatusStoppedColor;
        }

        return prodJobStatusStoppedColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobStatusWaitingColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdJobStatusWaitingColor(OLE_Color _prodJobStatusWaitingColor = prodJobStatusWaitingColor)
    {
        if (prodJobStatusWaitingColor != _prodJobStatusWaitingColor)
        {
            prodJobColorChanged         = NoYes::Yes;
            prodJobStatusWaitingColor   = _prodJobStatusWaitingColor;
        }

        return prodJobStatusWaitingColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobTypeOverlapColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdJobTypeOverlapColor(OLE_Color _prodJobTypeOverlapColor = prodJobTypeOverlapColor)
    {
        if (prodJobTypeOverlapColor != _prodJobTypeOverlapColor)
        {
            prodJobColorChanged     = NoYes::Yes;
            prodJobTypeOverlapColor = _prodJobTypeOverlapColor;
        }

        return prodJobTypeOverlapColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobTypeProcessColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdJobTypeProcessColor(OLE_Color _prodJobTypeProcessColor = prodJobTypeProcessColor)
    {
        if (prodJobTypeProcessColor != _prodJobTypeProcessColor)
        {
            prodJobColorChanged     = NoYes::Yes;
            prodJobTypeProcessColor = _prodJobTypeProcessColor;
        }

        return prodJobTypeProcessColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobTypeQueueAfterColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdJobTypeQueueAfterColor(OLE_Color _prodJobTypeQueueAfterColor = prodJobTypeQueueAfterColor)
    {
        if (prodJobTypeQueueAfterColor != _prodJobTypeQueueAfterColor)
        {
            prodJobColorChanged         = NoYes::Yes;
            prodJobTypeQueueAfterColor  = _prodJobTypeQueueAfterColor;
        }

        return prodJobTypeQueueAfterColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobTypeQueueBeforeColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdJobTypeQueueBeforeColor(OLE_Color _prodJobTypeQueueBeforeColor = prodJobTypeQueueBeforeColor)
    {
        if (prodJobTypeQueueBeforeColor != _prodJobTypeQueueBeforeColor)
        {
            prodJobColorChanged         = NoYes::Yes;
            prodJobTypeQueueBeforeColor = _prodJobTypeQueueBeforeColor;
        }

        return prodJobTypeQueueBeforeColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobTypeSetupColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdJobTypeSetupColor(OLE_Color _prodJobTypeSetupColor = prodJobTypeSetupColor)
    {
        if (prodJobTypeSetupColor != _prodJobTypeSetupColor)
        {
            prodJobColorChanged     = NoYes::Yes;
            prodJobTypeSetupColor   = _prodJobTypeSetupColor;
        }

        return prodJobTypeSetupColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJobTypeTransportColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdJobTypeTransportColor(OLE_Color _prodJobTypeTransportColor = prodJobTypeTransportColor)
    {
        if (prodJobTypeTransportColor != _prodJobTypeTransportColor)
        {
            prodJobColorChanged         = NoYes::Yes;
            prodJobTypeTransportColor   = _prodJobTypeTransportColor;
        }

        return prodJobTypeTransportColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjActivityColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProjActivityColor(OLE_Color _projActivityColor = projActivityColor)
    {
        if (projActivityColor != _projActivityColor)
        {
            projColorChanged    = NoYes::Yes;
            projActivityColor   = _projActivityColor;
        }

        return projActivityColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjColorScheme</Name>
				<Source><![CDATA[
    public GanttColorSchemeWrkCtrProj parmProjColorScheme(GanttColorSchemeWrkCtrProj _projColorScheme = projColorScheme)
    {
        if (projColorScheme != _projColorScheme)
        {
            projColorChanged    = NoYes::Yes;
            projColorScheme     = _projColorScheme;
        }

        return projColorScheme;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryDateColor</Name>
				<Source><![CDATA[
    public GanttColorId parmDeliveryDateColor(GanttColorId _deliveryDateColor = deliveryDateColor)
    {
        if (deliveryDateColor != _deliveryDateColor)
        {
            generalColorChanged = NoYes::Yes;
            deliveryDateColor = _deliveryDateColor;
        }
        return deliveryDateColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaterialAvailabilityMarkerColor</Name>
				<Source><![CDATA[
    public GanttColorId parmMaterialAvailabilityMarkerColor(GanttColorId _materialAvailabilityMarkerColor = materialAvailabilityMarkerColor)
    {
        if (materialAvailabilityMarkerColor != _materialAvailabilityMarkerColor)
        {
            generalColorChanged = NoYes::Yes;
            materialAvailabilityMarkerColor = _materialAvailabilityMarkerColor;
        }
        return materialAvailabilityMarkerColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetChangedValues</Name>
				<Source><![CDATA[
    protected void resetChangedValues()
    {
        // General
        generalColorChanged   = NoYes::No;

        // Production
        prodJobColorChanged             = NoYes::No;

        // Planned production
        plannedProdJobColorChanged      = NoYes::No;

        // Project
        projColorChanged                = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultColors</Name>
				<Source><![CDATA[
    public void setDefaultColors()
    {
        this.setDefaultColorsGeneral();
        this.setDefaultColorsProd();
        this.setDefaultColorsPlannedProd();
        this.setDefaultColorsProj();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultColorsGeneral</Name>
				<Source><![CDATA[
    protected void setDefaultColorsGeneral()
    {
        useThemeColors = true;

        activeNodeColor     = this.defaultActiveColor();
        passiveNodeColor    = defaultNodeColor;
        highlightNodeColor  = this.rgb2int(#defaultThemeAccentComplementaryColor);

        deliveryDateColor   = this.rgb2int(#defaultThemeSecondaryColor1);
        materialAvailabilityMarkerColor = this.rgb2int(#defaultThemeSecondaryColor1);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultColorsPlannedProd</Name>
				<Source><![CDATA[
    protected void setDefaultColorsPlannedProd()
    {
        plannedProdJobTypeQueueBeforeColor  = defaultNodeColor;
        plannedProdJobTypeSetupColor        = defaultNodeColor;
        plannedProdJobTypeProcessColor      = defaultNodeColor;
        plannedProdJobTypeOverlapColor      = defaultNodeColor;
        plannedProdJobTypeTransportColor    = defaultNodeColor;
        plannedProdJobTypeQueueAfterColor   = defaultNodeColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultColorsProd</Name>
				<Source><![CDATA[
    protected void setDefaultColorsProd()
    {
        // job types
        prodJobTypeQueueBeforeColor = defaultNodeColor;
        prodJobTypeSetupColor       = defaultNodeColor;
        prodJobTypeProcessColor     = defaultNodeColor;
        prodJobTypeOverlapColor     = defaultNodeColor;
        prodJobTypeTransportColor   = defaultNodeColor;
        prodJobTypeQueueAfterColor  = defaultNodeColor;

        // job statuses
        prodJobStatusComingColor    = defaultNodeColor;
        prodJobStatusWaitingColor   = defaultNodeColor;
        prodJobStatusStoppedColor   = defaultNodeColor;
        prodJobStatusStartedColor   = defaultNodeColor;
        prodJobStatusCompletedColor = defaultNodeColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultColorsProj</Name>
				<Source><![CDATA[
    protected void setDefaultColorsProj()
    {
        projActivityColor = defaultNodeColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean     ret;
        Integer     version    = conpeek(packedClass,1);

        switch (version)
        {
            case 1:
                [version, #Version1List] = packedClass;
                ret = true;
                break;

            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttColor_WrkCtr construct()
    {
        return new GanttColor_WrkCtr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        #define.ganttClient('ganttClient')

        GanttClient_WrkCtr  ganttClient;
        GanttColor_WrkCtr   ganttColor;

        if (!args || !args.caller())
        {
            throw error(strfmt("@SYS53926", classstr(GanttColor_WrkCtr)));
        }

        Object caller = args.caller();

        if (args.caller() is FormRun)
        {
            if (!SysFormRun::hasMethod(args.caller(), #ganttClient))
            {
                throw error(strfmt("@SYS73945",args.caller().name(), #ganttClient));
            }

            ganttClient = args.caller().ganttClient();
        }
        else
        {
            ganttClient = args.caller();
        }

        ganttColor = ganttClient.parmGanttColor();

        ganttColor.prompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttClient</Name>
				<Source><![CDATA[
    public static GanttColor_WrkCtr newGanttClient(GanttClient_WrkCtr _ganttClient)
    {
        GanttColor_WrkCtr ganttColor = GanttColor_WrkCtr::construct();
        ganttColor.parmGanttClient(_ganttClient);

        return ganttColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>