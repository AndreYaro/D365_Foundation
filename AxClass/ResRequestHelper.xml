<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResRequestHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A helper class for resource request operations.
/// </summary>
[SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
class ResRequestHelper
{
    #OCCRetryCount
    private static const str LoggerRetryExceptionMsg = 'Max %1 retries exceeded for %2 method. ResRequest: %3, ActivityResource: %4, Activity: %5';
    private static const str LoggerRetryExceptionMsgForComplete = 'Max %1 retries exceeded for %2 method. ResRequest: %3';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isWorkflowEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if resource request workflow is enabled by user.
    /// </summary>
    /// <returns>
    /// True if workflow is enabled by user.
    /// </returns>
    public static boolean isWorkflowEnabled()
    {
        return PSAParameters::find().EnableSchedulingWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkflowConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if resource workflow has been set up for a specific workflow type.
    /// </summary>
    public static void validateWorkflowConfiguration()
    {
        WorkflowTable               workflowTable;
        WorkflowVersionTable        versionTable;

        const str resRequestWorkflowTypeStr = workflowTypeStr(ResRequest);

        select firstonly RecId from workflowTable
            where workflowTable.Type == WorkflowConfigurationType::Definition
                && workflowTable.TemplateName == resRequestWorkflowTypeStr
        exists join versionTable
            where versionTable.WorkflowTable == workflowTable.RecId
                && versionTable.Enabled == NoYes::Yes;

        if (!workflowTable)
        {
            throw error(strFmt("@Res:WorkflowNotConfigured", resRequestWorkflowTypeStr));
        }

        const str resRequestLineWorkflowTypeStr = workflowTypeStr(ResRequestLine);

        WorkflowTable.clear();
        select firstonly RecId from workflowTable
            where workflowTable.Type == WorkflowConfigurationType::Definition
                && workflowTable.TemplateName == resRequestLineWorkflowTypeStr
        exists join versionTable
            where versionTable.WorkflowTable == workflowTable.RecId
                && versionTable.Enabled == NoYes::Yes;

        if (!workflowTable)
        {
            throw error(strFmt("@Res:WorkflowNotConfigured", resRequestLineWorkflowTypeStr));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowWorkflowDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if an item should allow deletion.
    /// </summary>
    /// <param name = "_resApprovalStatus">The approval status of the item being checked.</param>
    /// <returns>true if deletion is allowed.</returns>
    public static boolean allowWorkflowDelete(ResApprovalStatus _resApprovalStatus)
    {
        return _resApprovalStatus == ResApprovalStatus::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableWorkflowButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable workflow button.
    /// </summary>
    /// <param name = "_table">Workflow document table.</param>
    /// <param name = "_approvalStatus">Workflow approval status.</param>
    /// <returns>True/false of whether the workflow button should be enabled.</returns>
    public static boolean enableWorkflowButton(Common _table, ResApprovalStatus _approvalStatus)
    {
        // If there is a pending work item for current user or workflow history available, enable the drop dialog menu button.

        return (Workflow::findWorkItemsForCurrentUser(_table).elements()
                || Workflow::findTrackingStatusForDocument(_table)
                || ResRequestHelper::canSubmitToWorkflow(_approvalStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if an item can be submitted to workflow.
    /// </summary>
    /// <param name = "_status">The approval status of the item being checked.
    /// </param>
    /// <returns>True if the item can be submitted to workflow.
    /// </returns>
    public static boolean canSubmitToWorkflow(ResApprovalStatus _status)
    {
        return _status == ResApprovalStatus::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submit workflow to add record to SysWorkflowTable.
    /// </summary>
    /// <param name = "_dataEntityRecId">Workflow document table record rec Id.</param>
    /// <param name = "_workflowType">Workflow type</param>
    /// <param name="_skipComment">true will bypass the comment dialog form.</param>
    /// <param name="_workflowComment">This workflow comment will be applied if _skipComment is set to true.</param>
    /// <returns>Whether submit has been succeed.</returns>
    public static boolean submitWorkflow(RecId _dataEntityRecId, str _workflowType, boolean _skipComment = false, WorkflowComment _workflowComment = '')
    {
        if (!_dataEntityRecId)
        {
            throw error(strFmt("@SYS54195",funcName()));
        }

        ResRequestHelper::validateWorkflowConfiguration();

        if (!ResRequestHelper::isWorkflowEnabled())
        {
            throw error(strFmt("@Res:WorkflowNotEnabled", _workflowType));
        }

        WorkflowVersionTable workflowVersionTable = Workflow::findWorkflowConfigToActivateForType(_workflowType, _dataEntityRecId, tableNum(ResRequest));

        Debug::assert(workflowVersionTable.RecId != 0);

        boolean         doneSubmitDialog = _skipComment;
        WorkflowComment userSubmitComment;

        if (!_skipComment)
        {
            [doneSubmitDialog, userSubmitComment] = ResRequestHelper::submitDialog(workflowVersionTable);
        }

        if (doneSubmitDialog)
        {
            ResRequestHelper::promoteByResRequest(_dataEntityRecId, ResApprovalStatus::InReview);
            ResRequestHelper::updateLineApprovalStatus(_dataEntityRecId, ResApprovalStatus::InReview);
            if (_skipComment && _workflowComment)
            {
                userSubmitComment = _workflowComment;
            }
            Workflow::activateFromWorkflowConfigurationId(workflowVersionTable.ConfigurationId, _dataEntityRecId, userSubmitComment, NoYes::No);
        }

        return doneSubmitDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineApprovalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update line approval status by the specified <c>ResRequest</c> record ID.
    /// </summary>
    /// <param name = "_requestRecId"><c>ResRequest</c> record ID.</param>
    /// <param name = "_approvalStatus">Resource request approval status.</param>
    private static void updateLineApprovalStatus(ResRequestRecId _requestRecId, ResApprovalStatus _approvalStatus)
    {
        ResRequestLine resRequestLine;
        ResUtil::skipDatabaseLogAndEvent(resRequestLine);

        ttsbegin;
        // Update lines to in review state.
        update_recordset resRequestLine
            setting ApprovalStatus = _approvalStatus
            where resRequestLine.Request == _requestRecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the submit validation dialog.
    /// </summary>
    /// <param name="_workflowVersionTable">
    /// <c>WorkFlowVersionTable</c> record.
    /// </param>
    /// <returns>
    /// Container of done submit dialog as boolean and workflow comment string.
    /// </returns>
    private static container submitDialog(WorkflowVersionTable _workflowVersionTable)
    {
        WorkflowComment         workflowComment;
        boolean                 done;

        WorkflowSubmitDialog workflowSubmitDialog = WorkflowSubmitDialog::construct(_workflowVersionTable);
        workflowSubmitDialog.run();

        if (workflowSubmitDialog.parmIsClosedOK())
        {
            done = true;
            workflowComment =  workflowSubmitDialog.parmWorkflowComment();
        }

        return [done, workflowComment];
    }

]]></Source>
			</Method>
			<Method>
				<Name>promoteByResRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transition a <c>ResRequest</c> record to another approval status.
    /// </summary>
    /// <param name = "_ResRequestRecId">The resource request record identifier.</param>
    /// <param name = "_approvalStatus">Approval status.</param>
    static private void promoteByResRequest(ResRequestRecId _ResRequestRecId, ResApprovalStatus _approvalStatus)
    {
        ttsbegin;
        ResRequest request = ResRequest::find(_ResRequestRecId, true);

        request.ApprovalStatus = _approvalStatus;
        request.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promoteByResRequestLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transition a <c>ResRequestLine</c> record to another approval status.
    /// </summary>
    /// <param name = "_ResRequestLineRecId">The resource request line record identifier.</param>
    /// <param name = "_approvalStatus">Approval status.</param>
    static public void promoteByResRequestLine(ResRequestLineRecId _ResRequestLineRecId, ResApprovalStatus _approvalStatus)
    {
        ttsbegin;
        ResRequestLine requestLine = ResRequestLine::find(_ResRequestLineRecId, true);

        requestLine.ApprovalStatus = _approvalStatus;
        requestLine.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Complete request by inserting approved request line to reservation tables.
    /// </summary>
    /// <param name = "_resRequestRecId"><c>ResRequest</c> record ID.</param>
    static public void completeRequest(ResRequestRecId _resRequestRecId)
    {
        ResRequestLine  resRequestLine;
        ResBooking      resBooking;
        ResBooking      existingBooking;
        ResAssignment   resAssignment;

        ResUtil::skipDatabaseLogAndEvent(resBooking);
        ResUtil::skipDatabaseLogAndEvent(resAssignment);
        ResUtil::skipDatabaseLogAndEvent(resRequestLine);

        ResRequest resRequest = ResRequest::find(_resRequestRecId);
        ActivityRecId rootActivity;

        if (resRequest)
        {
            try
            {
                // Inserted all approved request line to reservation tables.
                ttsbegin;

                ResCommitType commitType = ResCommitType::HardBook;

                // Add booking records which does not already exists in the existing booking table
                // or the start end time are not overlapping.
                insert_recordset resBooking
                    (ActivityResource, Activity, CommitType, Start, End,
                        Hour, Day, Week, Month, Quarter, HalfYear)
                select
                    ActivityResource, Activity, commitType, Start, End,
                        Hour, Day, Week, Month, Quarter, HalfYear
                    from resRequestLine
                    where resRequestLine.Request == _resRequestRecId
                        && resRequestLine.ApprovalStatus == ResApprovalStatus::Approved
                        && resRequestLine.ReservationType == ResReservationType::Booking
                notexists join existingBooking
                    where existingBooking.ActivityResource == resRequestLine.ActivityResource
                        && existingBooking.Activity == resRequestLine.Activity
                        && existingBooking.CommitType == ResCommitType::HardBook
                        && existingBooking.Start == resRequestLine.Start
                        && existingBooking.Hour == resRequestLine.Hour;

                // Update booking records which overlap with request line but the end time in request is larger
                // than the existing record end time.
                resBooking.clear();
                update_recordset resBooking
                    setting End = resRequestLine.End
                where 
                    resBooking.CommitType == ResCommitType::HardBook
                join resRequestLine
                    where resRequestLine.Request == _resRequestRecId
                        && resRequestLine.ApprovalStatus == ResApprovalStatus::Approved
                        && resRequestLine.ReservationType == ResReservationType::Booking
                        && resRequestLine.ActivityResource == resBooking.ActivityResource
                        && resRequestLine.Activity == resBooking.Activity
                        && resRequestLine.Start == resBooking.Start
                        && resRequestLine.End > resBooking.End
                        && resRequestLine.Hour == resBooking.Hour;

                // Insert all assignment records from request lines.
                insert_recordset resAssignment
                    (ActivityResource, Activity, CommitType, Start, End,
                        Hour, Day, Week, Month, Quarter, HalfYear)
                select
                    ActivityResource, Activity, commitType, Start, End,
                        Hour, Day, Week, Month, Quarter, HalfYear
                    from resRequestLine
                    where resRequestLine.Request == _resRequestRecId
                        && resRequestLine.ApprovalStatus == ResApprovalStatus::Approved
                        && resRequestLine.ReservationType == ResReservationType::Assignment;

                if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
                {
                    // Update resource roll up table for each approved requested activity resource.
                    while select Activity, AssignedResource, ActivityResource from resRequestLine
                    group by resRequestLine.Activity, resRequestLine.AssignedResource, resRequestLine.ActivityResource
                    where resRequestLine.Request == _resRequestRecId
                        && resRequestLine.ApprovalStatus == ResApprovalStatus::Approved
                        && resRequestLine.ReservationType == ResReservationType::Booking
                    {
                        rootActivity = resRequestLine.Activity;

                        ActivityResourceId collectionKeyId = strFmt(ResUtil::activityResourceIdStrFormat,
                            rootActivity, resRequestLine.AssignedResource, resRequestLine.ActivityResource);

                        ResRollUpWriter::updateRollUpForSpecificActivityResourceId(collectionKeyId,
                            ActivityResourcefacade::getEarliestApprovedRequestBookingDateTime(
                                resRequestLine.ActivityResource, _resRequestRecId),
                            ActivityResourcefacade::getLatestApprovedRequestBookingDateTime(
                                resRequestLine.ActivityResource, _resRequestRecId));
                    }
                }

                // Update team info and scheduling status
                ResUtil::updateTeamInfo(rootActivity);

                // Update WBS tasks scheduling status
                resRequestLine.clear();
                while select Activity from resRequestLine
                    group by resRequestLine.Activity
                    where resRequestLine.Request == _resRequestRecId
                        && resRequestLine.ApprovalStatus == ResApprovalStatus::Approved
                {
                    ProjActivityCapacity::updateScheduleStatusByActivity(resRequestLine.Activity);
                }

                ResRequestHelper::promoteByResRequest(_resRequestRecId, ResApprovalStatus::Completed);

                // Update request line ActivityResource to zero to remove the restricted on delete constraint to PSAProjSchedRole table.
                resRequestLine.clear();
                update_recordset resRequestLine
                    setting ActivityResource = 0
                    where resRequestLine.Request == _resRequestRecId
                    exists join resRequest
                    where resRequest.RecId == _resRequestRecId
                        && resRequest.ApprovalStatus == ResApprovalStatus::Completed;

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                    logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsgForComplete, 'Deadlock', 'ResRequestHelper.completeRequest()', resRequest));
                    throw Exception::Deadlock;
                }
                else
                {
                    sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                        logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsgForComplete, 'UpdateConflict', 'ResRequestHelper.completeRequest()', resRequest));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                    logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsgForComplete, 'TransientSqlConnectionError', 'ResRequestHelper.completeRequest()', resRequest));
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (Exception::Error)
            {
                throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchWorkflowItemDialogBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches workflow item dialog box and get the user input values.
    /// </summary>
    /// <param name = "_args">The action menu Args instance.</param>
    /// <param name = "_workflowActionType">Workflow action type.</param>
    /// <returns><c>WorkflowWorkItemActionDialog</c> object.</returns>
    public static WorkflowWorkItemActionDialog launchWorkflowItemDialogBox(
        Args _args, WorkflowWorkItemActionType _workflowActionType = WorkflowWorkItemActionType::None)
    {
        WorkflowWorkItemActionType workflowActionType = _workflowActionType;
        Object caller = _args.caller();

        // Launch workflow item dialog form.
        WorkflowWorkItemTable workItemTable = caller.getActiveWorkflowWorkItem();

        if (_workflowActionType == WorkflowWorkItemActionType::None)
        {
            workflowActionType =
                WorkflowWorkItemActionManager::findActionTypeForMenuItem(workItemTable, _args.menuItemName());
        }

        WorkflowWorkItemActionDialog workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(
            workItemTable, workflowActionType, new MenuFunction(_args.menuItemName(), _args.menuItemType()));

        workflowWorkItemActionDialog.run();

        return workflowWorkItemActionDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWorkItemActionManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes <c>ResWorkflowWorkItemActionManager</c> class main method for each request line.
    /// </summary>
    /// <param name = "_workflowWorkItemActionDialog">The Workflow work item action dialog form object.</param>
    /// <param name = "_args">The action menu Args instance.</param>
    /// <param name = "_requestLinesMapEnum">Request lines map enumerator.</param>
    /// <param name = "_workflowActionType">Workflow work item action type.</param>
    public static void executeWorkItemActionManager(WorkflowWorkItemActionDialog _workflowWorkItemActionDialog,
        Args _args, MapEnumerator _requestLinesMapEnum, WorkflowWorkItemActionType _workflowActionType = WorkflowWorkItemActionType::None)
    {
        Object caller = _args.caller();
        caller.parmWorkflowComment(_workflowWorkItemActionDialog.parmWorkflowComment());
        caller.parmTargetUser(_workflowWorkItemActionDialog.parmTargetUser());
        caller.parmTargetQueue(_workflowWorkItemActionDialog.parmTargetQueue());
        caller.parmWorkflowWorkItemActionType(_workflowActionType);

        _requestLinesMapEnum.reset();
        while (_requestLinesMapEnum.moveNext())
        {
            ResRequestLineSelectionContext requestLineContext = _requestLinesMapEnum.currentValue();
            ResRequestLine requestLine = ResRequestLine::find(requestLineContext.parmBookingRequestLine(), true);
            ResRequestHelper::executeWorkItemActionManagerProcess(_args, requestLine, caller, _workflowActionType);

            if (requestLineContext.parmAssignmentRequestLine())
            {
                requestLine = ResRequestLine::find(requestLineContext.parmAssignmentRequestLine(), true);
                ResRequestHelper::executeWorkItemActionManagerProcess(_args, requestLine, caller, _workflowActionType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWorkItemActionManagerProcess</Name>
				<Source><![CDATA[
    private static void executeWorkItemActionManagerProcess(Args _args, ResRequestLine _requestLine, Object _caller, WorkflowWorkItemActionType _workflowActionType)
    {
        Args args = new Args();
        args.record(_requestLine);
        args.caller(_caller);
        args.menuItemName(_args.menuItemName());
        args.menuItemType(_args.menuItemType());
        ResWorkflowWorkItemActionManager::main(args);

        switch (_workflowActionType)
        {
            case WorkflowWorkItemActionType::CancelLineItem:
                ResRequestHelper::promoteByResRequestLine(_requestLine.RecId, ResApprovalStatus::Canceled);
                break;
            case WorkflowWorkItemActionType::RecallLineItem:
                ResRequestHelper::promoteByResRequestLine(_requestLine.RecId, ResApprovalStatus::Draft);
                break;
            case WorkflowWorkItemActionType::Resubmit:
                ResRequestHelper::promoteByResRequestLine(_requestLine.RecId, ResApprovalStatus::InReview);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeCanceledWorkflowWorkItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove canceled workflow work items from <c>WorkfloWorktItemTable</c>.
    /// </summary>
    /// <param name = "_requestLine"><c>ResRequestLine</c> tabl buffer.</param>
    public static void completeCanceledWorkflowWorkItem(ResRequestLine _requestLine)
    {
        if (_requestLine.ApprovalStatus == ResApprovalStatus::Canceled)
        {
            Args args = new Args();

            Object caller = new ResRequestLineWorkflowContext();
            caller.parmWorkflowComment('');
            caller.parmTargetUser('');
            caller.parmTargetQueue('');
            caller.parmWorkflowWorkItemActionType(WorkflowWorkItemActionType::Complete);
            caller.parmFindWorkflowForAnyUser(true);

            args.record(_requestLine);
            args.caller(caller);
            args.menuItemName(menuItemActionStr(ResRequestLineCancelMenuItem));
            args.menuItemType(menuItemType::Action);
            ResWorkflowWorkItemActionManager::main(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResourceRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a resource request record to <c>ResRequest</c> table.
    /// </summary>
    /// <returns>The newly added <c>ResRequest</c> record table buffer.</returns>
    public static ResRequest addResourceRequest()
    {
        ttsbegin;
        // Add resource request.
        ResRequest      request;
        ResApprovalStatus draftState = ResApprovalStatus::Draft;
        request.ApprovalStatus = draftState;
        request.insert();
        ttscommit;

        return request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResourceRequestLineForBooking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add <c>ResRequestLine</c> table records from the existing <c>ResBooking</c> table records.
    /// </summary>
    /// <param name = "_request"><c>ResRequest</c> table buffer.</param>
    /// <param name = "_activityResource"><c>PSAProjSchedRole</c> record ID.</param>
    /// <param name = "_activity"><c>smmActivities</c> record ID for the WBS task.</param>
    /// <param name = "_start">Assignment start date time.</param>
    /// <param name = "_end">Assignment end date time.</param>
    public static void addResourceRequestLineForBooking(ResRequest _request, activityresourcerecid _activityResource,
        ActivityRecId _activity, utcdatetime _start, utcdatetime _end)
    {
        if (_request && _activityResource && _activity)
        {
            try
            {
                ttsbegin;
                ResRequestLine      resRequestLine;
                ResBooking          resBooking;
                PSAProjSchedRole    teamTable;
                ResApprovalStatus   draftState = ResApprovalStatus::Draft;
                ResReservationType  bookingType = ResReservationType::Booking;
                ResRequestRecId     requestRecId = _request.RecId;
                ResRequestId        requestId = _request.RequestId;
                ResUtil::skipDatabaseLogAndEvent(resRequestLine);

                // Associate request booking records to ResRequestLine
                insert_recordset resRequestLine(Request, RequestId, ReservationType, ActivityResource, Activity,
                        Start, End, Hour, Day, Week, Month, Quarter, HalfYear, ApprovalStatus,
                        OriginalRequestedResource, AssignedResource, ResourceName)
                    select requestRecId, requestId, bookingType, ActivityResource, Activity,
                        Start, End, Hour, Day, Week, Month, Quarter, HalfYear, draftState
                    from resBooking where resBooking.Activity ==_activity
                        && resBooking.ActivityResource == _activityResource
                        && resBooking.CommitType == ResCommitType::SoftBook
                        && resBooking.Hour >= _start
                        && resBooking.Hour <= _end
                    join Resource, Resource, Name from teamTable
                        where teamTable.RecId == resBooking.ActivityResource
                            && teamTable.Resource != 0;
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                    logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsg, 'Deadlock', 'ResRequestHelper.addResourceRequestLineForBooking()', 
                        _request, _activityResource, _activity));
                    throw Exception::Deadlock;
                }
                else
                {
                    sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                        logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsg, 'UpdateConflict', 'ResRequestHelper.addResourceRequestLineForBooking()', 
                            _request, _activityResource, _activity));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                    logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsg, 'TransientSqlConnectionError', 'ResRequestHelper.addResourceRequestLineForBooking()',
                            _request, _activityResource, _activity));
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (Exception::Error)
            {
                throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResourceRequestLineForAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add <c>ResRequestLine</c> table records from the existing <c>ResAssignment</c> table records.
    /// </summary>
    /// <param name = "_request"><c>ResRequest</c> table buffer.</param>
    /// <param name = "_activityResource"><c>PSAProjSchedRole</c> record ID.</param>
    /// <param name = "_activity"><c>smmActivities</c> record ID for the WBS task.</param>
    /// <param name = "_start">Assignment start date time.</param>
    /// <param name = "_end">Assignment end date time.</param>
    /// <param name = "_commitTypeToConvert">Target assingment commit type to be converted.</param>
    /// <param name = "_assignmentCreationTimeIdentifier">Time variable which is used to identifier the newly created assignment records.</param>
    public static void addResourceRequestLineForAssignment(ResRequest _request, activityresourcerecid _activityResource,
        ActivityRecId _activity, utcdatetime _start, utcdatetime _end, ResCommitType _commitTypeToConvert = ResCommitType::SoftBook,
        utcdatetime _assignmentCreationTimeIdentifier = DateTimeUtil::minValue())
    {
        if (_request && _activityResource && _activity)
        {
            try
            {
                ttsbegin;
                ResReservationType  bookingType = ResReservationType::Booking;
                ResReservationType  assignmentType = ResReservationType::Assignment;
                ResRequestRecId     requestRecId = _request.RecId;
                ResRequestId        requestId = _request.RequestId;
                PSAProjSchedRole    teamTable;
                ResRequestLine      resRequestLine;
                ResBooking          resBooking;
                ResAssignment       resAssignment;
                ResApprovalStatus   draftState = ResApprovalStatus::Draft;
                ResUtil::skipDatabaseLogAndEvent(resRequestLine);

                // This is an assignment reservation type since it has task name
                ActivityRecId rootActivity = ActivityFacade::getRootProjectActivity(_activity);

                // Add matching booking reservation request records according to assignment reservation to ResRequestLine.
                insert_recordset resRequestLine(Request, RequestId, ReservationType, ActivityResource, Activity,
                        Start, End, Hour, Day, Week, Month, Quarter, HalfYear, ApprovalStatus,
                        OriginalRequestedResource, AssignedResource, ResourceName)
                    select requestRecId, requestId, bookingType, ActivityResource, rootActivity,
                        Start, End, Hour, Day, Week, Month, Quarter, HalfYear, draftState
                    from resAssignment where resAssignment.Activity == _activity
                        && resAssignment.ActivityResource == _activityResource
                        && resAssignment.CommitType == _commitTypeToConvert
                        && resAssignment.Hour >= _start
                        && resAssignment.Hour <= _end
                        && (_assignmentCreationTimeIdentifier == DateTimeUtil::minValue() || resAssignment.CreatedDateTime >= _assignmentCreationTimeIdentifier)
                    join Resource, Resource, Name from teamTable
                        where teamTable.RecId == _activityResource
                            && teamTable.Resource != 0
                notexists join resBooking
                    where resBooking.Activity == rootActivity
                        && resBooking.ActivityResource == _activityResource
                        && resBooking.CommitType == ResCommitType::HardBook
                        && resBooking.Hour == resAssignment.Hour;

                // Add assignment reservation request records to ResRequestLine.
                insert_recordset resRequestLine(Request, RequestId, ReservationType, ActivityResource, Activity,
                        Start, End, Hour, Day, Week, Month, Quarter, HalfYear, ApprovalStatus,
                        OriginalRequestedResource, AssignedResource, ResourceName)
                    select requestRecId, requestId, assignmentType, ActivityResource, Activity,
                        Start, End, Hour, Day, Week, Month, Quarter, HalfYear, draftState
                    from resAssignment
                    where resAssignment.Activity == _activity
                        && resAssignment.ActivityResource == _activityResource
                        && resAssignment.CommitType == _commitTypeToConvert
                        && resAssignment.Hour >= _start
                        && resAssignment.Hour <= _end
                        && (_assignmentCreationTimeIdentifier == DateTimeUtil::minValue() || resAssignment.CreatedDateTime >= _assignmentCreationTimeIdentifier)
                    join Resource, Resource, Name from teamTable
                        where teamTable.RecId == resAssignment.ActivityResource
                            && teamTable.Resource != 0;
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                    logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsg, 'Deadlock', 'ResRequestHelper.addResourceRequestLineForAssignment()', 
                        _request, _activityResource, _activity));
                    throw Exception::Deadlock;
                }
                else
                {
                    sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                        logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsg, 'UpdateConflict', 'ResRequestHelper.addResourceRequestLineForAssignment()', 
                            _request, _activityResource, _activity));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                    logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsg, 'TransientSqlConnectionError', 'ResRequestHelper.addResourceRequestLineForAssignment()',
                        _request, _activityResource, _activity));
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (Exception::Error)
            {
                throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rollBackResourceRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the user cancel resource request submission feedback scenario, the records in <c>ResRequestLine</c> are needed to be roll back.
    /// The roll back process includes adding reservation tables records from <c>ResRequestLine</c> table records.  Then it will
    /// delete the assoicated <c>ResRequestLine</c> and <c>RequestLine</c> records.
    /// </summary>
    /// <param name = "_request"><c>ResRequest</c> table buffer.</param>
    /// <param name = "_activityResource"><c>PSAProjSchedRole</c> record ID.</param>
    /// <param name = "_activity"><c>smmActivities</c> record ID for the WBS task.</param>
    /// <param name = "_start">Assignment start date time.</param>
    /// <param name = "_end">Assignment end date time.</param>
    /// <param name = "_assignmentScenario">Whether this is an assignment scenario.</param>
    public static void rollBackResourceRequest(ResRequest _request, activityresourcerecid _activityResource,
        ActivityRecId _activity, utcdatetime _start, utcdatetime _end, boolean _assignmentScenario = true)
    {
        if (_request && _activityResource && _activity)
        {
            try
            {
                ttsbegin;
                ResRequestRecId requestRecId = _request.RecId;
                ResRequestLine  resRequestLine;
                ResCommitType   softCommitType = ResCommitType::SoftBook;

                if (_assignmentScenario)
                {
                    ResAssignment   resAssignment;
                    ResUtil::skipDatabaseLogAndEvent(resAssignment);
                    resAssignment   existingResAssignment;

                    // Add soft assignment records from resource request line.
                    insert_recordset resAssignment(ActivityResource, Activity, CommitType,
                            Start, End, Hour, Day, Week, Month, Quarter, HalfYear)
                        select ActivityResource, Activity, softCommitType,
                            Start, End, Hour, Day, Week, Month, Quarter, HalfYear
                        from resRequestLine
                        where resRequestLine.Request == requestRecId
                            && resRequestLine.Activity == _activity
                            && resRequestLine.ActivityResource == _activityResource
                            && resRequestLine.ReservationType == ResReservationType::Assignment
                            && resRequestLine.Hour >= _start
                            && resRequestLine.Hour <= _end
                        notexists join existingResAssignment
                            where existingResAssignment.Activity == resRequestLine.Activity
                                && existingResAssignment.ActivityResource == resRequestLine.ActivityResource
                                && existingResAssignment.CommitType == ResCommitType::SoftBook
                                && existingResAssignment.Hour == resRequestLine.Hour;
                }
                else
                {
                    ResBooking   resBooking;
                    ResUtil::skipDatabaseLogAndEvent(resBooking);
                    ResBooking   existingResBooking;

                    // Add soft booking records from resource request line.
                    insert_recordset resBooking(ActivityResource, Activity, CommitType,
                            Start, End, Hour, Day, Week, Month, Quarter, HalfYear)
                        select ActivityResource, Activity, softCommitType,
                            Start, End, Hour, Day, Week, Month, Quarter, HalfYear
                        from resRequestLine
                        where resRequestLine.Request == requestRecId
                            && resRequestLine.Activity == _activity
                            && resRequestLine.ActivityResource == _activityResource
                            && resRequestLine.ReservationType == ResReservationType::Booking
                            && resRequestLine.Hour >= _start
                            && resRequestLine.Hour <= _end
                        notexists join existingResBooking
                            where existingResBooking.Activity == resRequestLine.Activity
                                && existingResBooking.ActivityResource == resRequestLine.ActivityResource
                                && existingResBooking.CommitType == ResCommitType::SoftBook
                                && existingResBooking.Hour == resRequestLine.Hour;
                }

                // Remove request line.
                resRequestLine.clear();
                delete_from resRequestLine
                    where resRequestLine.Request == requestRecId;

                // Remove request table.
                ResRequest resRequest;
                delete_from resRequest
                    where resRequest.RecId == requestRecId;
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                    logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsg, 'Deadlock', 'ResRequestHelper.rollBackResourceRequest()', _request, _activityResource, _activity));
                    throw Exception::Deadlock;
                }
                else
                {
                    sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                        logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsg, 'UpdateConflict', 'ResRequestHelper.rollBackResourceRequest()', _request, _activityResource, _activity));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResRequestHelper));
                    logger.logError(strFmt(ResRequestHelper::LoggerRetryExceptionMsg, 'TransientSqlConnectionError', 'ResRequestHelper.rollBackResourceRequest()', _request, _activityResource, _activity));
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (Exception::Error)
            {
                throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectWBSTaskDateChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if any tasks in WBS to be published has different start date than the existing published tasks.
    /// This method should be called before WBS is being published.
    /// </summary>
    /// <param name = "_leafNodeTaskChangesList">
    /// List of class <c>ResWBSTaskDateChangeContext</c> that holds leaf node WBS tasks parameters if date change is detected.
    /// </param>
    /// <param name = "_projId">Project ID.</param>
    /// <param name = "_projVersionId">WBS project version ID.</param>
    /// <returns>true if this WBS version has updated tasks with different date; otherwise, fasle.</returns>
    public static boolean isProjectWBSTaskDateChanged(List _leafNodeTaskChangesList, ProjId _projId, ProjVersionId _projVersionId)
    {
        HierarchyTreeTable          hierarchyTreeTable;
        ProjPlanVersion             projPlanNewVersion, projPlanExistingVersion;
        ProjPlanVersionDetail       projPlanNewDetail, projPlanExistingDetail;
        ResAssignment               resAssignment;
        ProjPlanVersionAssignment   projPlanVersionAssignment;
        PSAProjSchedRole            teamMember;

        if (_projVersionId > 1)
        {
            ProjVersionId lastVersion = _projVersionId - 1;

            // Only look for task which has staffed resource assigned to it.
            while select RefRecId from hierarchyTreeTable
                group by hierarchyTreeTable.RefRecId, teamMember.Name, projPlanNewVersion.TaskName, projPlanNewVersion.TaskStartDate,
                    projPlanNewVersion.TaskFinishDate, projPlanExistingVersion.TaskStartDate, projPlanExistingVersion.TaskFinishDate,
                    projPlanNewVersion.HierarchyID, projPlanNewVersion.HierarchyTaskId
                join HierarchyTaskId, TaskName, TaskStartDate, TaskFinishDate, HierarchyId from projPlanNewVersion
                    where projPlanNewVersion.HierarchyTreeTableRefRecID == hierarchyTreeTable.RecId
                        && projPlanNewVersion.HierarchyTaskID != 1
                join RecId from projPlanNewDetail
                    where projPlanNewDetail.HierarchyId == projPlanNewVersion.HierarchyId
                        && projPlanNewDetail.ProjId == _projId
                        && projPlanNewDetail.VersionID == _projVersionId
                join TaskStartDate, TaskFinishDate from projPlanExistingVersion
                    where projPlanExistingVersion.HierarchyTreeTableRefRecID == hierarchyTreeTable.RecId
                        && projPlanExistingVersion.HierarchyTreeTableRefRecID == projPlanNewVersion.HierarchyTreeTableRefRecID
                        && projPlanExistingVersion.TaskStartDate != projPlanNewVersion.TaskStartDate
                join RecId from projPlanExistingDetail
                    where projPlanExistingDetail.HierarchyId == projPlanExistingVersion.HierarchyId
                        && projPlanExistingDetail.ProjId == _projId
                        && projPlanExistingDetail.VersionID == lastVersion
                join RecId from resAssignment
                    where resAssignment.Activity == hierarchyTreeTable.RefRecId
                join Name from teamMember
                    where teamMember.RecId == resAssignment.ActivityResource
                        && teamMember.Resource != 0
                notexists join projPlanVersionAssignment
                    where projPlanVersionAssignment.ProjPlanVersion == projPlanNewVersion.RecId
            {
                ResWBSTaskDateChangeContext dataChangeContextTask = ResWBSTaskDateChangeContext::construct();
                dataChangeContextTask.parmActivity(hierarchyTreeTable.RefRecId);
                dataChangeContextTask.parmHierarchyTaskId(projPlanNewVersion.HierarchyTaskId);
                dataChangeContextTask.parmTaskName(projPlanNewVersion.TaskName);
                dataChangeContextTask.parmResourceName(teamMember.Name);
                dataChangeContextTask.parmNewTaskStartDate(projPlanNewVersion.TaskStartDate);
                dataChangeContextTask.parmNewTaskEndDate(projPlanNewVersion.TaskFinishDate);
                dataChangeContextTask.parmExistingTaskStartDate(projPlanExistingVersion.TaskStartDate);
                dataChangeContextTask.parmExistingTaskEndDate(projPlanExistingVersion.TaskFinishDate);
                dataChangeContextTask.parmHierarchyId(projPlanNewVersion.HierarchyId);
                _leafNodeTaskChangesList.addEnd(dataChangeContextTask);
            }
        }

        return (!_leafNodeTaskChangesList.empty());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>