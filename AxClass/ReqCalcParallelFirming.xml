<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcParallelFirming</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqCalcParallelFirming</c> class is responsible for running
/// a parallel firming run.
/// </summary>
internal class ReqCalcParallelFirming extends ReqCalc implements BatchRetryable
{
    private ReqScheduleParallelFirmingContract scheduleParallelFirmingContract;

    private const int ReqCalcParallelFirmingCurrentThreadVersion = 102;

    #Req

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SYS23798";
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReqLog</Name>
				<Source><![CDATA[
    protected void insertReqLog(boolean _cancelled)
    {
        // Do not insert to ReqLog on a firming run
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqLog</Name>
				<Source><![CDATA[
    protected void updateReqLog()
    {
        // Do not update ReqLog on a firming run
    }

]]></Source>
			</Method>
			<Method>
				<Name>packThreadData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes per thread data for the <c>ReqCalcParallelFirming</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>container</c> class.
    /// </returns>
    public container packThreadData()
    {
        return [
            ReqCalcParallelFirmingCurrentThreadVersion,
            super(),
            this.parmReqScheduleParallelFirmingContract().pack()
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleRunError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles error situations that occurred during reqCalc. Run method.
    /// In case the thread is a helper thread it will release the tasks that is currently in progress so other helpers can pick it up.
    /// In case it is the main thread it will delete all bundles, tasks and ReqProcessList related records.
    /// </summary>
    protected void handleRunError()
    {
        this.cleanUp();

        if (reqTransCache)
        {
            reqTransCache.endProcess();
        }

        throw Exception::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReqTransPoMarkFirm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ReqTransPoMarkFirm</c> class that is used for firming planned orders.
    /// </summary>
    /// <param name="_mapReqTransMark">
    ///    The requirement transactions that indicate which planned orders to firm.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>ReqTransPoMarkFirm</c> class.
    /// </returns>
    protected ReqTransPoMarkFirm createReqTransPoMarkFirm(Map _mapReqTransMark)
    {
        ReqTransPoMarkFirm ret = super(_mapReqTransMark);

        ret.setParametersFromReqScheduleParallelFirmingContract(this.parmReqScheduleParallelFirmingContract());
        ret.parmStartMultiThreadedRun(NoYes::No);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateInstrumentationContext</Name>
				<Source><![CDATA[
    protected SysInstrumentationActivityContext initiateInstrumentationContext()
    {
        return this.reqInstrumentationLogger().calc().parallelFirming();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        var instrumentationLogger = ReqInstrumentationLogger::createLogger(classStr(ReqCalcParallelFirming));
        using (var activityContext = instrumentationLogger.parallelFirming().runThread())
        {
            this.setFirmingRunId();
            instrumentationLogger.parallelFirming().firmingRunId(activityContext, firmingRunId);
            thisIsPeriodicProcess = true;
        
            progress = null;

            try
            {
                if (BatchHeader::isExecutingInBatch())
                {
                    this.handlePossibleBatchRestart(instrumentationLogger);
                }

                super();
            }
            catch
            {
                this.handleRunError();
            }
            finally
            {
                this.dispose();
            }

            instrumentationLogger.parallelFirming().hasErrors(activityContext, hasErrors);
            if (hasErrors)
            {
                ReqProcessAutoFirmingRun::setHasErrors(processId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePossibleBatchRestart</Name>
				<Source><![CDATA[
    private void handlePossibleBatchRestart(ReqInstrumentationLogger _reqInstrumentationLogger)
    {
        Batch batch = BatchHeader::getCurrentBatchTask();

        if (ReqCalcRestartResumeNativeToggle::isEnabled() && batch.retryCount > 0)
        {
            ReqCalcRestartResumeNative reqCalcRestartResume = ReqCalcRestartResumeNative::construct(
                processId,
                reqCalcUpdate,
                batch,
                this.reqInstrumentationLogger());

            if (!reqCalcRestartResume.resumeChildThread())
            {
                throw error("@SCMPlanning:ReqCalcResumeRetryCountExceeded");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTtsLevelValid</Name>
				<Source><![CDATA[
    private boolean isTtsLevelValid()
    {
        return appl.ttsLevel() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsbegin</Name>
				<Source><![CDATA[
    protected void ttsbegin()
    {
        if (!this.isTtsLevelValid())
        {
            throw error("@SCMPlanning:ReqParallelFirmingWithinTransactionError");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackThreadData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes per thread data for the <c>ReqCalcParallelFirming</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    A <c>container</c> that holds the serialized state of the <c>ReqCalcParallelFirming</c> class.
    /// </param>
    /// <returns>
    ///    True if the container can be deserialized, false otherwise.
    /// </returns>
    public boolean unpackThreadData(container _packedClass)
    {
        Integer   version = conPeek(_packedClass, 1);
        container base;
        boolean   result;
        container packedContract;

        switch (version)
        {
            case ReqCalcParallelFirmingCurrentThreadVersion:
                [version, base, packedContract] = _packedClass;

                ReqScheduleParallelFirmingContract contract = new ReqScheduleParallelFirmingContract();
                contract.unpack(packedContract);
                this.parmReqScheduleParallelFirmingContract(contract);

                result = super(base);
                break;
            case 101:
                base = this.setParmReqScheduleParallelFirmingContractFromPacked(_packedClass);
                result = super(base);
                break;
            default:
                result = false;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmReqScheduleParallelFirmingContractFromPacked</Name>
				<Source><![CDATA[
    private container setParmReqScheduleParallelFirmingContractFromPacked(container _packed)
    {
        Integer version;
        container base;
        ReqPOCollectPerVendor collectPerVendor;
        ReqPOCollectPerBuyer collectPerBuyer;
        ReqPOCollectPerPurchAgreement collectPerPurchAgreement;
        ReqPoCollectPerPeriod collectPerPeriodPurch;
        ReqPoCollectPerPeriod collectPerPeriodJournal;
        PurchId callerPurchId;
        ReqMarkUpdate reqMarkUpdate;
        ReqPOSearchPurchAgreement searchPurchAgreement;
        ReqRefType refType;

        [
            version,
            base,
            collectPerVendor,
            collectPerBuyer,
            collectPerPeriodPurch,
            collectPerPeriodJournal,
            callerPurchId,
            reqMarkUpdate,
            collectPerPurchAgreement,
            searchPurchAgreement,
            refType
        ] = _packed;

        ReqScheduleParallelFirmingContract contract = new ReqScheduleParallelFirmingContract();
        contract.parmCollectPerVendor(collectPerVendor);
        contract.parmCollectPerBuyer(collectPerBuyer);
        contract.parmCollectPerPeriodPurch(collectPerPeriodPurch);
        contract.parmCollectPerPeriodJournal(collectPerPeriodJournal);
        contract.parmCallerPurchId(callerPurchId);
        contract.parmReqMarkUpdate(reqMarkUpdate);
        contract.parmCollectPerPurchAgreement(collectPerPurchAgreement);
        contract.parmSearchPurchAgreement(searchPurchAgreement);
        contract.parmReqRefType(refType);

        this.parmReqScheduleParallelFirmingContract(contract);

        return base;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ReqCalcParallelFirming construct()
    {
        ReqCalcParallelFirming reqCalcParallelFirming = new ReqCalcParallelFirming();
        ReqScheduleParallelFirmingContract contract = new ReqScheduleParallelFirmingContract();
        reqCalcParallelFirming.parmReqScheduleParallelFirmingContract(contract);

        return reqCalcParallelFirming;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS23798";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static ReqCalcParallelFirming newStandard()
    {
        return ReqCalcParallelFirming::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>ReqCalcParallelFirming</c>.
    /// </summary>
    /// <param name = "_parameters">The parameters for running parallel firming.</param>
    /// <returns>An instance of <c>ReqCalcParallelFirming</c>.</returns>
    internal static ReqCalcParallelFirming newFromParameters(ReqCalcParallelFirmingParameters _parameters)
    {
        var reqCalcParallelFirming = ReqCalcParallelFirming::newStandard();

        reqCalcParallelFirming.parmReqPlanId(_parameters.planId);
        reqCalcParallelFirming.parmReqCalcUpdate(ReqCalcUpdate::Regeneration);
        reqCalcParallelFirming.parmMaxChildThreads(_parameters.numberOfThreads);
        
        reqCalcParallelFirming.parmRecalculateBomLevels(false);
        reqCalcParallelFirming.parmApplyFuturesToEventKanban(false);
        reqCalcParallelFirming.parmIsTaskTraceEnabled(false);

        reqCalcParallelFirming.sourcePlanVersion = _parameters.planVersion;
        reqCalcParallelFirming.targetPlanVersion = _parameters.planVersion;
        
        reqCalcParallelFirming.parmProcessId(ReqCalcParallelFirming.getProcessId());
        reqCalcParallelFirming.parmTodaysDate(_parameters.todaysDate);

        reqCalcParallelFirming.parmReqScheduleParallelFirmingContract(_parameters.contract);

        return reqCalcParallelFirming;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqScheduleParallelFirmingContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqScheduleParallelFirmingContract parmReqScheduleParallelFirmingContract(
        ReqScheduleParallelFirmingContract _scheduleParallelFirmingContract = scheduleParallelFirmingContract)
    {
        scheduleParallelFirmingContract = _scheduleParallelFirmingContract;
        return scheduleParallelFirmingContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTodaysDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal TodaysDate parmTodaysDate(TodaysDate _todaysDate = todaysDate)
    {
        todaysDate = _todaysDate;

        return todaysDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqProcessId parmProcessId(ReqProcessId _processId = processId)
    {
        processId = _processId;

        return processId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>