<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuantity_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactory(DocumentStatus::Invoice)]
[DocumentStatusFactory(DocumentStatus::FreeTextInvoice)]
[DocumentStatusFactory(DocumentStatus::Note)]
[DocumentStatusFactory(DocumentStatus::ApproveJournal)]
[DocumentStatusFactory(DocumentStatus::Facture_RU)]
public class SalesQuantity_Invoice extends SalesQuantity
{
    InventTransIdSum inventTransIdSum;
    recId salesLineRecId;
    // <GEERU>
    boolean countryRegion_RU;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateQtyUpdateInventDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for inventory.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyUpdateInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>QtyUpdate</c> for inventory.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_salesLineRemainInventPhysical">The physical remaining inventory quantity.</param>
    /// <param name = "_qty">The quantity. If provided, use this instead of calculating the new inventory quantity.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_calcRemaining">A Boolean value indicating whether the remaining quantity should be calculated</param>
    /// <param name = "_packingSlips">The packing slip identifier for update.</param>
    /// <returns>The <c>QtyUpdate</c> for inventory.</returns>
    protected InventQty calcQtyUpdateInvent(
        SalesLine _salesLine,
        InventQty _salesLineRemainInventPhysical,
        InventQty _qty,
        SalesUpdate _specQty,
        boolean _calcRemaining,
        PackingSlipIdForUpdate_W _packingSlips)
    {
        if (_qty != naReal())
        {
            return _qty;
        }

        InventQty qtyUpdate;

        switch (_specQty)
        {
            case SalesUpdate::DeliverNow:
                qtyUpdate = this.inventDeliverNow(_salesLine);
                break;

            case SalesUpdate::All:
                // Test on calcRemaining = true - then normal posting situation - else we ask for totals
                if (_salesLine.DeliveryType == TradeLineDlvType::DropShip && _calcRemaining)
                {
                    if (this.inventDeliverNow(_salesLine))
                    {
                        qtyUpdate = this.inventDeliverNow(_salesLine);
                    }
                    else
                    {
                        qtyUpdate = -inventTransIdSum.physical();
                    }
                }
                else
                {
                    // <GEERU>
                    if (countryRegion_RU)
                    {
                        if (_salesLineRemainInventPhysical * -inventTransIdSum.physical() < 0)
                        {
                            qtyUpdate = -inventTransIdSum.physical();
                        }
                        else
                        {
                            qtyUpdate = _salesLineRemainInventPhysical - inventTransIdSum.physical();
                        }
                    }
                    else
                    {
                        // </GEERU>
                        if (_salesLine.RemainInventPhysical * -inventTransIdSum.physical() < 0)
                        {
                            qtyUpdate = -inventTransIdSum.physical();
                        }
                        else
                        {
                            qtyUpdate = _salesLine.RemainInventPhysical - inventTransIdSum.physical();
                        }
                        // <GEERU>
                    }
                    // </GEERU>
                }
                break;

            case SalesUpdate::PackingSlip:
                // <GEERU>
                if (countryRegion_RU && _packingSlips)
                {
                    qtyUpdate = - this.packingSlips_W(_salesLine, _packingSlips);
                }
                else
                    // </GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
                {
                    qtyUpdate = -(inventTransIdSum.physical()
                            - inventTransIdSum.physicalAfterDate(this.parmTransDate()));
                }
                else
                {
                    qtyUpdate = -inventTransIdSum.physical();
                }
                break;

            case SalesUpdate::PickingList,
                SalesUpdate::PickingListAndNonInventoried:
                    qtyUpdate = -inventTransIdSum.picked();
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.calculateQtyUpdateInventDelegate(_salesLine, _specQty, result);
                if (result.hasResult())
                {
                    qtyUpdate = result.result();
                }
                break;
        }

        return qtyUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    protected container calcQtyInvent(
        Common _common,
        SalesUpdate _specQty = SalesUpdate::All,
        InventQty _qty = naReal(),
        boolean _creditRemaining = false,
        boolean _calcRemaining = true,
        PackingSlipIdForUpdate_W _packingSlips = "")
    {
        InventQty numOfRemainOri;
        InventQty qtyRemainNew;
        NoYes remainOk = NoYes::No;
        SalesLine salesLine = _common;
        // <GEERU>
        InventQty salesLineRemainInventPhysical;
        // </GEERU>

        if (!salesLine.isStocked())
        {
            return [0,0,0];
        }

        inventTransIdSum = this.getInventTransIdSum(salesLine);

        // <GEERU>
        if (countryRegion_RU)
        {
            salesLineRemainInventPhysical = salesLine.remainInventPhysical_RU(inventDimCriteria, inventDimParm);
            inventTransIdSum.parmInventDimCriteria(inventDimCriteria);
            inventTransIdSum.parmInventDimParmCriteria(inventDimParm);
        }
        // </GEERU>

        InventQty qtyUpdate = this.calcQtyUpdateInvent(salesLine, salesLineRemainInventPhysical, _qty, _specQty, _calcRemaining, _packingSlips);

        if (_calcRemaining)
        {
            // <GEERU>
            if (countryRegion_RU)
            {
                 numOfRemainOri = salesLineRemainInventPhysical - inventTransIdSum.physical();
            }
            else
            {
            // </GEERU>
                numOfRemainOri = salesLine.RemainInventPhysical - inventTransIdSum.physical();
            // <GEERU>
            }
            // </GEERU>

            remainOk = salesLine.type().setInvoiceRemainOk(qtyUpdate, _creditRemaining, numOfRemainOri);

            if (remainOk)
            {
                // <GEERU>
                if (countryRegion_RU)
                {
                    qtyRemainNew = salesLineRemainInventPhysical;
                }
                else
                {
                // </GEERU>
                    qtyRemainNew = salesLine.RemainInventPhysical;
                // <GEERU>
                }
                // </GEERU>
            }
            else
            {
                if (qtyUpdate > 0)
                {
                    if (salesLine.QtyOrdered < 0 && salesLine.RemainSalesFinancial <0)
                    {
                        qtyRemainNew = max(qtyUpdate,0);
                    }
                    else
                    {
                        qtyRemainNew = max(qtyUpdate + inventTransIdSum.physical(),0);
                    }
                }
                else if (qtyUpdate < 0)
                {
                    if (salesLine.QtyOrdered > 0 && salesLine.RemainSalesFinancial > 0)
                    {
                        qtyRemainNew = min(qtyUpdate,0);
                    }
                    else
                    {
                        qtyRemainNew = min(qtyUpdate + inventTransIdSum.physical(),0);
                    }
                }
                else
                {
                    qtyRemainNew = 0;
                }

                qtyRemainNew = numOfRemainOri + inventTransIdSum.physical() - qtyRemainNew;

                if (qtyRemainNew * salesLine.SalesQty <= 0)
                {
                    qtyRemainNew = 0;
                }
                else
                {
                    if (qtyUpdate * salesLine.SalesQty < 0)
                    {
                        if (qtyRemainNew > 0)
                        {
                            qtyRemainNew = min(qtyRemainNew,salesLine.QtyOrdered);
                        }
                        else
                        {
                            qtyRemainNew = max(qtyRemainNew,salesLine.QtyOrdered);
                        }
                    }
                }
            }
        }

        return [qtyUpdate,numOfRemainOri,qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateSalesDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for sales.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateSalesDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostingDirectDeliveryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified parameters indicate that sales quantity is being used for a direct delivery line in connection with an actual (non-proforma) posting.
    /// </summary>
    /// <param name = "_deliveryType">The sales line delivery type</param>
    /// <param name = "_posting">true if called in connection with posting (as opposed to for example calling to calculate totals)</param>
    /// <returns>true if called for a posting of a direct delivery line; otherwise, false</returns>
    protected boolean isPostingDirectDeliveryLine(TradeLineDlvType _deliveryType, boolean _posting)
    {
        return _deliveryType == TradeLineDlvType::DropShip
            && _posting
            && !this.proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyUpdateSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>QtyUpdate</c> for sales.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_salesLineRemainInventPhysical">The physical remaining inventory quantity.</param>
    /// <param name = "_qty">The quantity. If provided, use this instead of calculating the new inventory quantity.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_calcRemaining">A Boolean value indicating whether the remaining quantity should be calculated</param>
    /// <param name = "_packingSlips">The packing slip identifier for update.</param>
    /// <returns>The <c>QtyUpdate</c> for sales.</returns>
    protected SalesQty calcQtyUpdateSales(
        SalesLine _salesLine,
        InventQty _salesLineRemainInventPhysical,
        SalesQty _qty,
        SalesUpdate _specQty,
        boolean _calcRemaining,
        PackingSlipIdForUpdate_W _packingSlips)
    {
        if (_qty != naReal())
        {
            return _qty;
        }

        SalesQty qtyUpdate;

        switch (_specQty)
        {
            case SalesUpdate::DeliverNow:
                qtyUpdate = this.salesDeliverNow(_salesLine);
                break;

            case SalesUpdate::All:
                // Test on calcRemaining = true - then normal posting situation - else we ask for totals
                if (this.isPostingDirectDeliveryLine(_salesLine.DeliveryType, _calcRemaining))
                {
                    if (this.salesDeliverNow(_salesLine))
                    {
                        qtyUpdate = this.salesDeliverNow(_salesLine);
                    }
                    else
                    {
                        qtyUpdate = _salesLine.RemainSalesFinancial;
                    }
                }
                else
                {
                    SalesTable salesTable = _salesLine.salesTable();
                    // Look at the expected return qty field and deduct the invoiced qty.
                    if (salesTable.SalesType == SalesType::ReturnItem
                            && salesTable.mcrIsCallCenter())
                    {
                        qtyUpdate = _salesLine.ExpectedRetQty - _salesLine.invoicedInTotal();
                    }
                    else
                        // <GEERU>
                    if (countryRegion_RU && _salesLine.isStocked())
                    {
                        if (_salesLineRemainInventPhysical * -inventTransIdSum.physical() < 0)
                        {
                            qtyUpdate = -inventTransIdSum.physical();
                        }
                        else
                        {
                            qtyUpdate = _salesLineRemainInventPhysical - inventTransIdSum.physical();
                        }

                        qtyUpdate = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
                                                                                                          _salesLine.InventDimId,
                                                                                                          qtyUpdate,
                                                                                                          _salesLine.inventTable().inventUnitId(),
                                                                                                          _salesLine.SalesUnit,
                                                                                                          NoYes::Yes);
                    }
                    else
                    {
                        // </GEERU>
                        if (_salesLine.RemainSalesFinancial * _salesLine.RemainSalesPhysical < 0)
                        {
                            qtyUpdate = _salesLine.RemainSalesFinancial;
                        }
                        else
                        {
                            qtyUpdate = _salesLine.RemainSalesPhysical + _salesLine.RemainSalesFinancial;
                        }
                        // <GEERU>
                    }
                    // </GEERU>
                }
                break;

            case SalesUpdate::PackingSlip:
                // <GEERU>
                if (countryRegion_RU && _packingSlips)
                {
                    qtyUpdate = - this.packingSlips_W(_salesLine, _packingSlips);
                }
                else
                // </GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
                {
                    inventTransIdSum = this.getInventTransIdSum(_salesLine);
                    if (inventTransIdSum.parmTransOriginId() != 0)
                    {
                        qtyUpdate = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                            _salesLine.ItemId,
                                            _salesLine.InventDimId,
                                            -(inventTransIdSum.physical() - inventTransIdSum.physicalAfterDate(this.parmTransDate())),
                                            InventTableModule::find(_salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                            _salesLine.SalesUnit,
                                            NoYes::Yes);
                    }
                    else
                    {
                        qtyUpdate = _salesLine.RemainSalesFinancial;
                    }
                }
                else
                {
                    qtyUpdate = _salesLine.RemainSalesFinancial;
                }
                break;

            case SalesUpdate::PickingListAndNonInventoried:
                if (!_salesLine.isStocked())
                {
                    if (_salesLine.RemainSalesFinancial * _salesLine.RemainSalesPhysical < 0
                        || this.isPostingDirectDeliveryLine(_salesLine.DeliveryType, _calcRemaining))
                    {
                        qtyUpdate = _salesLine.RemainSalesFinancial;
                    }
                    else
                    {
                        qtyUpdate = _salesLine.RemainSalesPhysical + _salesLine.RemainSalesFinancial;
                    }
                }
            //Fall through
            case SalesUpdate::PickingList:
                if (_salesLine.isStocked())
                {
                    // <GEERU>
                    if (countryRegion_RU)
                    {
                        qtyUpdate = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                            _salesLine.ItemId,
                                            _salesLine.InventDimId,
                                            -inventTransIdSum.picked(),
                                            InventTableModule::find(_salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                            _salesLine.SalesUnit,
                                            NoYes::Yes);
                    }
                    else
                    {
                        // </GEERU>
                        qtyUpdate = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                            _salesLine.ItemId,
                                            _salesLine.InventDimId,
                                            -InventTransIdSumSingleStatus::qtyPicked(InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId)),
                                            InventTableModule::find(_salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                            _salesLine.SalesUnit,
                                            NoYes::Yes);
                        // <GEERU>
                    }
                    // </GEERU>
                }
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.calculateQtyUpdateSalesDelegate(_salesLine, _specQty, result);
                if (result.hasResult())
                {
                    qtyUpdate = result.result();
                }
                break;
        }

        return qtyUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtySales</Name>
				<Source><![CDATA[
    protected container calcQtySales(
        Common _common,
        SalesUpdate _specQty = SalesUpdate::All,
        SalesQty _qty = naReal(),
        boolean _creditRemaining = false,
        boolean _calcRemaining = true,
        PackingSlipIdForUpdate_W _packingSlips = "")
    {
        SalesQty numOfRemainOri;
        SalesQty qtyRemainNew = 0;
        NoYes remainOk = NoYes::No;
        SalesLine salesLine = _common;
        // <GEERU>
        InventQty salesLineRemainInventPhysical, salesLineRemainSalesFinancial;

        if (countryRegion_RU)
        {
            salesLineRemainInventPhysical = salesLine.remainInventPhysical_RU(inventDimCriteria, inventDimParm);
            inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId));
            inventTransIdSum.parmInventDimCriteria(inventDimCriteria);
            inventTransIdSum.parmInventDimParmCriteria(inventDimParm);
            salesLineRemainSalesFinancial = salesLine.remainSalesFinancial_RU(inventDimCriteria, inventDimParm);
        }
        // </GEERU>

        SalesQty qtyUpdate = this.calcQtyUpdateSales(salesLine, salesLineRemainInventPhysical, _qty, _specQty, _calcRemaining, _packingSlips);

        if (_calcRemaining)
        {
            // <GEERU>
            if (countryRegion_RU && salesLine.isStocked())
            {
                numOfRemainOri = salesLine.remainSalesPhysical_RU(inventDimCriteria, inventDimParm)
                               + salesLine.remainSalesFinancial_RU(inventDimCriteria, inventDimParm);
            }
            else
            {
            // </GEERU>
                numOfRemainOri = salesLine.RemainSalesPhysical + salesLine.RemainSalesFinancial;
            // <GEERU>
            }
            // </GEERU>

            remainOk = salesLine.type().setInvoiceRemainOk(qtyUpdate, _creditRemaining, numOfRemainOri);

            if (remainOk)
            {
                // <GEERU>
                if (countryRegion_RU)
                {
                    qtyRemainNew = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                         salesLine.InventDimId,
                                                                                                         salesLineRemainInventPhysical,
                                                                                                         salesLine.inventTable().inventUnitId(),
                                                                                                         salesLine.SalesUnit,
                                                                                                         NoYes::Yes);
                }
                else
                {
                // </GEERU>
                    qtyRemainNew = salesLine.RemainSalesPhysical;
                // <GEERU>
                }
                // </GEERU>
            }
            else
            {
                if (qtyUpdate > 0)
                {
                    if (salesLine.SalesQty < 0 && salesLine.RemainSalesFinancial < 0)
                    {
                        qtyRemainNew = max(qtyUpdate,0);
                    }
                    else
                    // <GEERU>
                    {
                        if (countryRegion_RU)
                        {
                            qtyRemainNew = max(qtyUpdate - salesLineRemainSalesFinancial, 0);
                        }
                        else
                        {
                    // </GEERU>
                        qtyRemainNew = max(qtyUpdate - salesLine.RemainSalesFinancial,0);
                    // <GEERU>
                        }
                    }
                    // </GEERU>
                }
                else if (qtyUpdate < 0)
                {
                    if (salesLine.SalesQty > 0 && salesLine.RemainSalesFinancial > 0)
                    {
                        qtyRemainNew = min(qtyUpdate,0);
                    }
                    else
                    {
                        // <GEERU>
                        if (countryRegion_RU)
                        {
                            qtyRemainNew = min(qtyUpdate - salesLineRemainSalesFinancial, 0);
                        }
                        else
                        {
                        // </GEERU>
                        qtyRemainNew = min(qtyUpdate - salesLine.RemainSalesFinancial,0);
                        // <GEERU>
                        }
                        // </GEERU>
                    }
                }
                else
                {
                    qtyRemainNew = 0;
                }

                // <GEERU>
                if (countryRegion_RU)
                {
                    qtyRemainNew = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                         salesLine.InventDimId,
                                                                                                         salesLineRemainInventPhysical,
                                                                                                         salesLine.inventTable().inventUnitId(),
                                                                                                         salesLine.SalesUnit,
                                                                                                         NoYes::Yes) - qtyRemainNew;
                                   
                }
                else
                {
                // </GEERU>
                    qtyRemainNew = salesLine.RemainSalesPhysical - qtyRemainNew;
                // <GEERU>
                }
                // </GEERU>

                if (qtyRemainNew * salesLine.SalesQty <= 0)
                {
                    qtyRemainNew = 0;
                }
                else
                {
                    if (qtyUpdate * salesLine.SalesQty < 0)
                    {
                        if (qtyRemainNew > 0)
                        {
                            qtyRemainNew = min(qtyRemainNew,salesLine.SalesQty);
                        }
                        else
                        {
                            qtyRemainNew = max(qtyRemainNew,salesLine.SalesQty);
                        }
                    }
                }
            }
        }

        return [qtyUpdate,numOfRemainOri,qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransIdSum</Name>
				<Source><![CDATA[
    public InventTransIdSum getInventTransIdSum(SalesLine _salesLine)
    {
        if (!inventTransIdSum || salesLineRecId != _salesLine.RecId)
        {
            inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));
            salesLineRecId = _salesLine.RecId;
        }

        return inventTransIdSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDeliverNow</Name>
				<Source><![CDATA[
    protected InventQty inventDeliverNow(SalesLine _salesLine)
    {
        // <GEERU>
        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;
        InventDim inventDim;
        InventQty transQty = _salesLine.InventDeliverNow;
        InventQty inventDeliverNow;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            ! inventDimParm.isAllFlagNo())
        {
            while select RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == _salesLine.InventTransId
            join Qty from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                   && ((transQty < 0 &&
                        inventTrans.StatusIssue == StatusIssue::Sold &&
                        inventTrans.ReturnInventTransOrigin == 0) ||
                       (transQty > 0 &&
                        inventTrans.StatusIssue > StatusIssue::Sold))
            join inventDim
                where inventDim.InventDimId == inventTrans.InventDimId
            {
                if (_salesLine.InventDeliverNow > 0)
                {
                    if (transQty > -inventTrans.Qty)
                    {
                        transQty -= -inventTrans.Qty;
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            inventDeliverNow += -inventTrans.Qty;
                        }
                    }
                    else
                    {
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            inventDeliverNow += transQty;
                        }
                        transQty = 0;
                    }
                }
                else
                {
                    if (transQty < inventTrans.Qty)
                    {
                        transQty -= inventTrans.Qty;
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            inventDeliverNow += inventTrans.Qty;
                        }
                    }
                    else
                    {
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            inventDeliverNow += transQty;
                        }
                        transQty = 0;
                    }
                }

                if (! transQty)
                {
                    break;
                }
            }
            return inventDeliverNow;
        }
        // </GEERU>
        return _salesLine.InventDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        //<GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        //</GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlips_W</Name>
				<Source><![CDATA[
    private InventQty packingSlips_W(SalesLine _salesLine, PackingSlipIdForUpdate_W _packingSlips)
    {
        Query query = new Query();
        InventDimParm inventDimParmGroupBy;

        QueryBuildDataSource qbds = query.addDataSource(tableNum(InventTransOrigin));
        qbds.addRange(fieldNum(InventTransOrigin, InventTransId)).value(_salesLine.InventTransId);

        qbds = qbds.addDataSource(tableNum(InventTrans));
        qbds.relations(true);
        qbds.addRange(fieldNum(InventTrans, PackingSlipId)).value(_packingSlips);

        if (_salesLine.RemainSalesFinancial > 0)
        {
            qbds.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::Deducted));
            qbds.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::None));
        }
        else
        {
            qbds.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Received));
            qbds.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::None));
        }

        qbds.addSelectionField(fieldNum(InventTrans, Qty), SelectionField::Sum);
        qbds.orderMode(OrderMode::GroupBy);

        if (!inventDimParm.isAllFlagNo())
        {
            QueryBuildDataSource qbdsInventDim = qbds.addDataSource(tableNum(InventDim));
            qbdsInventDim.relations(true);
            qbdsInventDim.fetchMode(QueryFetchMode::One2One);
            InventDim::queryDatasourceAddRangeSortFromParms(qbdsInventDim, true, inventDimCriteria, inventDimParm, inventDimParmGroupBy);
        }

        QueryRun queryRun = new QueryRun(query);
        queryRun.next();
        InventTrans inventTrans = queryRun.get(tableNum(InventTrans));

        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateInventCWDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for catch weight inventory.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventCWDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates catch weight inventory quantity when you post an invoice.
    /// </summary>
    /// <param name="_common">
    /// A sales line record.
    /// </param>
    /// <param name="_specQty">
    /// A sales quantity to process.
    /// </param>
    /// <param name="_qty">
    /// A sales catch weight quantity.
    /// </param>
    /// <param name="_creditRemaining">
    /// A Boolean value that indicates whether there is credit remaining.
    /// </param>
    /// <param name="_calcRemaining">
    /// A Boolean value that indicates whether there are any remaining quantities to calculate.
    /// </param>
    /// <returns>
    /// The catch weight quantities.
    /// </returns>
    protected container pdsCWCalcQtyInvent(
        Common _common,
        SalesUpdate _specQty = SalesUpdate::All,
        PdsCWInventQty _qty = naReal(),
        boolean _creditRemaining = false,
        boolean _calcRemaining = true)
    {
        PdsCWInventQty qtyUpdate;
        PdsCWInventQty numOfRemainOri;
        PdsCWInventQty qtyRemainNew;
        NoYes remainOk = NoYes::No;
        NoYes remainCalculated = NoYes::No;
        SalesLine salesLine = _common;

        // <GEERU>
        InventQty cwRemainPhysical, cwRemainFinancial;
        // </GEERU>

        inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOrigin::findByInventTransId(salesLine.InventTransId).RecId);
        // <GEERU>
        if (countryRegion_RU)
        {
            cwRemainPhysical = salesLine.pdsCWRemainInventPhysical_RU(inventDimCriteria, inventDimParm);
            inventTransIdSum.parmInventDimCriteria(inventDimCriteria);
            inventTransIdSum.parmInventDimParmCriteria(inventDimParm);
            cwRemainFinancial = salesLine.pdsCWRemainInventFinancial_RU(inventDimCriteria, inventDimParm);
        }
        // </GEERU>

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = this.pdsCWInventDeliverNow(salesLine);
                    break;
                    // Test on calcRemaining = true - then normal posting situation - else we ask for totals
                case SalesUpdate::All :
                    if (salesLine.DeliveryType == TradeLineDlvType::DropShip && _calcRemaining)
                    {
                        if (this.salesDeliverNow(salesLine))
                        {
                            qtyUpdate = this.pdsCWInventDeliverNow(salesLine);
                        }
                        else
                        {
                            qtyUpdate = -inventTransIdSum.pdsCWPhysical();
                        }
                    }
                    else
                    {
                        // <GEERU>
                        if (countryRegion_RU && salesLine.isStocked())
                        {
                            if (cwRemainPhysical * -inventTransIdSum.pdsCWPhysical() < 0)
                            {
                                qtyUpdate = -inventTransIdSum.pdsCWPhysical();
                            }
                            else
                            {
                                qtyUpdate = cwRemainPhysical - inventTransIdSum.pdsCWPhysical();
                            }
                        }
                        else
                        {
                        // </GEERU>
                            if (salesLine.PdsCWRemainInventPhysical * -inventTransIdSum.pdsCWPhysical() < 0)
                            {
                                qtyUpdate = -inventTransIdSum.pdsCWPhysical();
                            }
                            else
                            {
                                qtyUpdate = salesLine.PdsCWRemainInventPhysical - inventTransIdSum.pdsCWPhysical();
                            }
                        // <GEERU>
                        }
                        // </GEERU>
                    }

                    break;

                case SalesUpdate::PackingSlip:
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
                    {
                        qtyUpdate = -(inventTransIdSum.pdsCWPhysical() - inventTransIdSum.pdsCWPhysicalAfterDate(this.parmTransDate()));
                    }
                    else
                    {
                        qtyUpdate = -inventTransIdSum.pdsCWPhysical();
                    }
                    break;

                case SalesUpdate::PickingList:
                    qtyUpdate = -inventTransIdSum.pdsCWPicked();
                    break;

                case SalesUpdate::PickingListAndNonInventoried:
                    if (salesLine.isStocked())
                    {
                        qtyUpdate = -inventTransIdSum.pdsCWPicked();
                    }
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventCWDelegate(salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            // <GEERU>
            if (countryRegion_RU)
            {
                numOfRemainOri = cwRemainPhysical - inventTransIdSum.pdsCWPhysical();
            }
            else
            {
            // </GEERU>
                numOfRemainOri = salesLine.PdsCWRemainInventPhysical -inventTransIdSum.pdsCWPhysical();
            // <GEERU>
            }
            // </GEERU>

            remainOk = salesLine.type().pdsCWSetInvoiceRemainOk(qtyUpdate, _creditRemaining, numOfRemainOri);

            if (remainOk)
            {
                // <GEERU>
                if (countryRegion_RU)
                {
                    qtyRemainNew = cwRemainPhysical;
                }
                else
                {
                // </GEERU>
                    qtyRemainNew = salesLine.PdsCWRemainInventPhysical;
                // <GEERU>
                }
                // </GEERU>
            }
            else
            {
                if (qtyUpdate > 0)
                {
                    if (salesLine.PdsCWQty < 0)
                    {
                        qtyRemainNew = salesLine.PdsCWRemainInventPhysical;

                        if ((_specQty == SalesUpdate::DeliverNow
                                || _specQty == SalesUpdate::All
                                || _specQty == SalesUpdate::PackingSlip)
                            && _creditRemaining)
                        {
                            if (salesLine.PdsCWRemainInventFinancial < qtyUpdate)
                            {
                                qtyRemainNew = qtyRemainNew - (qtyUpdate - salesLine.PdsCWRemainInventFinancial);
                            }
                        }
                        remainCalculated = NoYes::Yes;
                    }
                    else
                    {
                        qtyRemainNew = max(qtyUpdate + inventTransIdSum.pdsCWPhysical(), 0);
                    }
                }
                else if (qtyUpdate < 0)
                {
                    if (salesLine.PdsCWQty > 0)
                    {
                        qtyRemainNew = salesLine.PdsCWRemainInventPhysical;

                        if ((_specQty == SalesUpdate::DeliverNow
                                || _specQty == SalesUpdate::All
                                || _specQty == SalesUpdate::PackingSlip)
                            && _creditRemaining)
                        {
                            if (salesLine.PdsCWRemainInventFinancial > qtyUpdate)
                            {
                                qtyRemainNew = qtyRemainNew - (qtyUpdate - salesLine.PdsCWRemainInventFinancial);
                            }
                        }
                        remainCalculated = NoYes::Yes;
                    }
                    else
                    {
                        qtyRemainNew = min(qtyUpdate + inventTransIdSum.pdsCWPhysical(), 0);
                    }
                }
                else
                {
                    qtyRemainNew = 0;
                }

                if (!remainCalculated)
                {
                    qtyRemainNew = numOfRemainOri
                        + inventTransIdSum.pdsCWPhysical() - qtyRemainNew;
                }

                if (qtyRemainNew * salesLine.PdsCWQty <= 0)
                {
                    qtyRemainNew = 0;
                }
                else
                {
                    if (qtyUpdate * salesLine.PdsCWQty < 0)
                    {
                        if (qtyRemainNew > 0)
                        {
                            qtyRemainNew = min(qtyRemainNew, salesLine.PdsCWQty);
                        }
                        else
                        {
                            qtyRemainNew = max(qtyRemainNew, salesLine.PdsCWQty);
                        }
                    }
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWInventDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>PdsCWInventDeliverNow</c> value when you post an invoice.
    /// </summary>
    /// <param name="_salesLine">
    /// A sales line record.
    /// </param>
    /// <returns>
    /// The <c>PdsCWInventDeliverNow</c> value.
    /// </returns>
    protected PdsCWInventQty pdsCWInventDeliverNow(SalesLine _salesLine)
    {
        // <GEERU>
        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;
        InventDim inventDim;
        pdsCWInventQty cwTransQty = _salesLine.PdsCWInventDeliverNow;
        pdsCWInventQty cwInventDeliverNow;

        if (countryRegion_RU && !inventDimParm.isAllFlagNo())
        {
            while select RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == _salesLine.InventTransId
            join Qty from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                   && ((cwTransQty < 0 &&
                        inventTrans.StatusIssue == StatusIssue::Sold &&
                        inventTrans.ReturnInventTransOrigin == 0) ||
                       (cwTransQty > 0 &&
                        inventTrans.StatusIssue > StatusIssue::Sold))
            join inventDim
                where inventDim.InventDimId == inventTrans.InventDimId
            {
                if (_salesLine.PdsCWInventDeliverNow > 0)
                {
                    if (cwTransQty > -inventTrans.PdsCWQty)
                    {
                        cwTransQty -= -inventTrans.PdsCWQty;
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            cwInventDeliverNow += -inventTrans.PdsCWQty;
                        }
                    }
                    else
                    {
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            cwInventDeliverNow += cwTransQty;
                        }
                        cwTransQty = 0;
                    }
                }
                else
                {
                    if (cwTransQty < inventTrans.PdsCWQty)
                    {
                        cwTransQty -= inventTrans.PdsCWQty;
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            cwInventDeliverNow += inventTrans.PdsCWQty;
                        }
                    }
                    else
                    {
                        if (InventDim::isInventDimEqual(inventDim, inventDimCriteria, inventDimParm.selectedDimFields()))
                        {
                            cwInventDeliverNow += cwTransQty;
                        }
                        cwTransQty = 0;
                    }
                }

                if (!cwTransQty)
                {
                    break;
                }
            }
            return cwInventDeliverNow;
        }
        // </GEERU>
        return _salesLine.PdsCWInventDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in catch weight units.
    /// </summary>
    /// <param name="_salesLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in catch weight units.
    /// </returns>
    public PdsCWInventQty pdsCWQtyRemainPhysical(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        PdsCWInventQty remain = _salesLine.PdsCWRemainInventFinancial;

        if (_salesParmLine.PdsCWDeliverNow - remain > 0)
        {
            return _salesParmLine.PdsCWDeliverNow - remain;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainInventPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in inventory units.
    /// </summary>
    /// <param name="_salesLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in inventory units.
    /// </returns>
    InventQty qtyRemainInventPhysical(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        InventQty remainInvent = _salesLine.RemainInventFinancial;

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            remainInvent = _salesLine.remainInventFinancial_RU(inventDimCriteria, inventDimParm);
        }
        // </GEERU>

        if (_salesParmLine.InventNow - remainInvent > 0)
        {
            return _salesParmLine.InventNow - remainInvent;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainSalesPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in sales units.
    /// </summary>
    /// <param name="_salesLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in sales units.
    /// </returns>
    SalesQty qtyRemainSalesPhysical(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        SalesQty remain = _salesLine.RemainSalesFinancial;

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            remain = _salesLine.remainSalesFinancial_RU(inventDimCriteria, inventDimParm);
        }
        // </GEERU>

        if (_salesParmLine.DeliverNow - remain > 0)
        {
            return _salesParmLine.DeliverNow - remain;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesDeliverNow</Name>
				<Source><![CDATA[
    protected SalesQty salesDeliverNow(SalesLine _salesLine)
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && !inventDimParm.isAllFlagNo())
        {
            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
                                                                                         _salesLine.InventDimId,
                                                                                         this.inventDeliverNow(_salesLine),
                                                                                         _salesLine.inventTable().inventUnitId(),
                                                                                         _salesLine.SalesUnit,
                                                                                         NoYes::Yes);
        }
        // </GEERU>
        return _salesLine.SalesDeliverNow;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>