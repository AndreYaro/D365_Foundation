<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQQuantity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchRFQQuantity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcInventQty</Name>
				<Source><![CDATA[
    public InventQty calcInventQty(PurchRFQLineMap   _purchRFQLineMap,
                                   PurchRFQReplyLine _purchRFQReplyLine,
                                   PurchRFQUpdate    _specQty             = PurchRFQUpdate::All)
    {
        return conpeek(this.calcQtyInvent(_purchRFQLineMap, _purchRFQReplyLine, _specQty, naReal()), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPurchQty</Name>
				<Source><![CDATA[
    public PurchQty calcPurchQty(PurchRFQLineMap    _purchRFQLineMap,
                                 PurchRFQReplyLine  _purchRFQReplyLine,
                                 PurchRFQUpdate     _specQty             = PurchRFQUpdate::All)
    {
        return conpeek(this.calcQtyPurch(_purchRFQLineMap, _purchRFQReplyLine, _specQty, naReal()), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    protected container calcQtyInvent(PurchRFQLineMap    _purchRFQLineMap,
                                      PurchRFQReplyLine  _purchRFQReplyLine,
                                      PurchRFQUpdate    _specQty    = PurchRFQUpdate::All,
                                      InventQty         _qty        = naReal())
    {
        InventQty   qtyUpdate;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchRFQUpdate::All  :
                    if (_purchRFQReplyLine.RecId)
                        qtyUpdate   = _purchRFQReplyLine.QtyOrdered;
                    else
                        qtyUpdate   = _purchRFQLineMap.QtyOrdered;
                    break;
                case PurchRFQUpdate::Marked   :
                    if (_purchRFQReplyLine.RecId)
                    {
                        if (_purchRFQReplyLine.rfqMark)
                            qtyUpdate = _purchRFQReplyLine.QtyOrdered;
                    }
                    else
                        if (PurchRFQReplyLine::findRFQLine(_purchRFQLineMap.RecId).rfqMark)
                            qtyUpdate   = _purchRFQLineMap.QtyOrdered;
                    break;
                case PurchRFQUpdate::Received :
                    if (_purchRFQLineMap.Status == PurchRFQStatus::Received)
                        if (_purchRFQReplyLine.RecId)
                            qtyUpdate = _purchRFQReplyLine.QtyOrdered;
                        else
                            qtyUpdate   = _purchRFQLineMap.QtyOrdered;
                    break;
                case PurchRFQUpdate::Sent :
                    if (_purchRFQLineMap.Status == PurchRFQStatus::Sent)
                        if (_purchRFQReplyLine.RecId)
                            qtyUpdate = _purchRFQReplyLine.QtyOrdered;
                        else
                            qtyUpdate   = _purchRFQLineMap.QtyOrdered;
                    break;
            }
        }

        return [qtyUpdate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurch</Name>
				<Source><![CDATA[
    protected container calcQtyPurch(PurchRFQLineMap    _purchRFQLineMap,
                                     PurchRFQReplyLine  _purchRFQReplyLine,
                                     PurchRFQUpdate     _specQty             = PurchRFQUpdate::All,
                                     PurchQty           _qty                 = naReal())
    {
        PurchQty            qtyUpdate;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchRFQUpdate::All  :
                        if (_purchRFQReplyLine.RecId)
                            qtyUpdate = _purchRFQReplyLine.PurchQty;
                        else
                            qtyUpdate = _purchRFQLineMap.PurchQty;
                    break;
                case PurchRFQUpdate::Marked  :
                    if (_purchRFQReplyLine.RecId)
                    {
                        if (_purchRFQReplyLine.rfqMark)
                            qtyUpdate = _purchRFQReplyLine.PurchQty;
                    }
                    else
                        if (PurchRFQReplyLine::findRFQLine(_purchRFQLineMap.RecId).rfqMark)
                            qtyUpdate = _purchRFQLineMap.PurchQty;
                    break;
                case PurchRFQUpdate::Received  :
                    if (_purchRFQLineMap.Status == PurchRFQStatus::Received)
                        if (_purchRFQReplyLine.RecId)
                            qtyUpdate = _purchRFQReplyLine.PurchQty;
                        else
                            qtyUpdate = _purchRFQLineMap.PurchQty;
                    break;
                case PurchRFQUpdate::Sent :
                    if (_purchRFQLineMap.Status == PurchRFQStatus::Sent)
                        if (_purchRFQReplyLine.RecId)
                            qtyUpdate = _purchRFQReplyLine.PurchQty;
                        else
                            qtyUpdate = _purchRFQLineMap.PurchQty;
                    break;
            }
        }

        return [qtyUpdate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCalcCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets CW quantity.
    /// </summary>
    /// <param name="_purchRFQLineMap">Trans map record.</param>
    /// <param name="_purchRFQReplyLine">Trans line record.</param>
    /// <param name="_specQty">Update quantity type of operation.</param>
    /// <returns>CW quantity.</returns>
    public PdsCWInventQty pdsCalcCWQty(
        PurchRFQLineMap   _purchRFQLineMap,
        PurchRFQReplyLine _purchRFQReplyLine,
        PurchRFQUpdate    _specQty = PurchRFQUpdate::All)
    {
        return conpeek(this.pdsCalcQtyCW(_purchRFQLineMap, _purchRFQReplyLine,
            _specQty, naReal()), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCalcQtyCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates CW quantity.
    /// </summary>
    /// <param name="_purchRFQLineMap">Trans map record.</param>
    /// <param name="_purchRFQReplyLine">Trans line record.</param>
    /// <param name="_specQty">Update quantity type of operation.</param>
    /// <param name="_qty">CW quantity.</param>
    /// <returns>CW quantities.</returns>
    protected container pdsCalcQtyCW(
        PurchRFQLineMap    _purchRFQLineMap,
        PurchRFQReplyLine  _purchRFQReplyLine,
        PurchRFQUpdate     _specQty  = PurchRFQUpdate::All,
        PdsCWInventQty     _qty      = naReal())
    {
        PdsCWInventQty      qtyUpdate;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchRFQUpdate::All  :
                    if (_purchRFQReplyLine.RecId)
                    {
                        qtyUpdate = _purchRFQReplyLine.PdsCWQty;
                    }
                    else
                    {
                        qtyUpdate = _purchRFQLineMap.PdsCWQty;
                    }
                    break;
                case PurchRFQUpdate::Marked  :
                    if (_purchRFQReplyLine.RecId)
                    {
                        if (_purchRFQReplyLine.rfqMark)
                        {
                            qtyUpdate = _purchRFQReplyLine.PdsCWQty;
                        }
                    }
                    else if (PurchRFQReplyLine::findRFQLine(_purchRFQLineMap.RecId)
                        .rfqMark)
                    {
                        qtyUpdate = _purchRFQLineMap.PdsCWQty;
                    }
                    break;
                case PurchRFQUpdate::Received  :
                    if (_purchRFQLineMap.Status == PurchRFQStatus::Received)
                    {
                        if (_purchRFQReplyLine.RecId)
                        {
                            qtyUpdate = _purchRFQReplyLine.PdsCWQty;
                        }
                        else
                        {
                            qtyUpdate = _purchRFQLineMap.PdsCWQty;
                        }
                    }
                    break;
                case PurchRFQUpdate::Sent :
                    if (_purchRFQLineMap.Status == PurchRFQStatus::Sent)
                    {
                        if (_purchRFQReplyLine.RecId)
                        {
                            qtyUpdate = _purchRFQReplyLine.PdsCWQty;
                        }
                        else
                        {
                            qtyUpdate = _purchRFQLineMap.PdsCWQty;
                        }
                    }
                    break;
            }
        }

        return [qtyUpdate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    public container qtyInvent(PurchRFQLineMap      _purchRFQLineMap,
                               PurchRFQReplyLine    _purchRFQReplyLine,
                               PurchRFQUpdate       _specQty             = PurchRFQUpdate::All,
                               InventQty            _qty                 = naReal())
    {
        return this.calcQtyInvent(_purchRFQLineMap, _purchRFQReplyLine, _specQty, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPurch</Name>
				<Source><![CDATA[
    public container qtyPurch(PurchRFQLine      _purchRFQLine,
                              PurchRFQReplyLine _purchRFQReplyLine,
                              PurchRFQUpdate    _specQty             = PurchRFQUpdate::All,
                              PurchQty          _qty                 = naReal())
    {
        return this.calcQtyPurch(_purchRFQLine, _purchRFQReplyLine, _specQty, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQQuantity  construct()
    {
        return new PurchRFQQuantity();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>