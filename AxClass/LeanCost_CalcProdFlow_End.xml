<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCost_CalcProdFlow_End</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCost_CalcProdFlow_End</c> class represents the work item for consolidating the data from the <c>LeanCost_CalcProdFlowBase</c>
///    tasks, finishing the variance calculation and posting to ledger.
/// </summary>
/// <remarks>
///    For each production flow that must be backflush costed, a separate instance of this class will be
///    created to trigger it.
/// </remarks>
public class LeanCost_CalcProdFlow_End extends LeanCost_CalcProdFlow_Single implements BatchRetryable
{
    private CostManagementInstrumentationLogger LeanCost_CalcProdFlow_End_Logger;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInstrumentationEndLogger</Name>
				<Source><![CDATA[
    final internal CostManagementInstrumentationLogger getInstrumentationEndLogger()
    {
        if (!LeanCost_CalcProdFlow_End_Logger)
        {
            LeanCost_CalcProdFlow_End_Logger = CostManagementInstrumentationLogger::createLogger(classStr(LeanCost_CalcProdFlow_End));
        }

        return LeanCost_CalcProdFlow_End_Logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDirectMaterialConsumptionIndirectCosts</Name>
				<Source><![CDATA[
    private void addDirectMaterialConsumptionIndirectCosts()
    {
        LeanCostTmpDirectMaterialConsumption tmpIssueDirectMaterialConsumption;

        while select sum(Qty) from tmpIssueDirectMaterialConsumption
            group by tmpIssueDirectMaterialConsumption.InventItemPrice
            where tmpIssueDirectMaterialConsumption.LeanProductionFlowCosting == leanProductionFlowCostingRecId
        {
            costUpd.addDirectMaterialConsumption(InventItemPrice::findRecId(tmpIssueDirectMaterialConsumption.InventItemPrice), tmpIssueDirectMaterialConsumption.Qty);
        }

        // Clear the processed data from the table
        delete_from tmpIssueDirectMaterialConsumption
            where tmpIssueDirectMaterialConsumption.LeanProductionFlowCosting == leanProductionFlowCostingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOutsourcingRouteTransConsumptionIndirectCosts</Name>
				<Source><![CDATA[
    private void addOutsourcingRouteTransConsumptionIndirectCosts()
    {
        LeanCostTmpOutsourcingRouteTransConsumption tmpOutsourcingRouteTransConsumption;
        ProdRouteTrans prodRouteTrans;

        while select tmpOutsourcingRouteTransConsumption
            where tmpOutsourcingRouteTransConsumption.LeanProductionFlowCosting == leanProductionFlowCostingRecId
            join prodRouteTrans
                where prodRouteTrans.RecId == tmpOutsourcingRouteTransConsumption.ProdRouteTrans
        {
            costUpd.addProdRouteTransConsumption(tmpOutsourcingRouteTransConsumption.InventSiteId, prodRouteTrans);
        }

        // Clear the processed data from the table
        delete_from tmpOutsourcingRouteTransConsumption
            where tmpOutsourcingRouteTransConsumption.LeanProductionFlowCosting == leanProductionFlowCostingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@CostManagement:Class_LeanCost_CalcProdFlow_End";
    }

]]></Source>
			</Method>
			<Method>
				<Name>postIndirectCosts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves and posts the indirect cost for the unused materials and services
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postIndirectCosts()
    {
        using (var backflushCostingActivityContext = this.getInstrumentationEndLogger().backflushCostingActivities().postIndirectCosts(classStr(LeanCost_CalcProdFlow_End), leanProductionFlowCostingRecId))
        {
            this.addDirectMaterialConsumptionIndirectCosts();

            this.addOutsourcingRouteTransConsumptionIndirectCosts();

            // Now post the indirect cost for the unused materials and services
            costUpd.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the backflush costing.
    /// </summary>
    protected void execute()
    {
        this.initLedgerVoucher();

        // 1.) Post indirect costs
        this.postIndirectCosts();

        // 2.) Calc net usage
        this.calcNetRealized();

        // 3.) Calc variances
        this.calcVariances();

        // 4.) Clear WIP accounts
        this.clearWIPAccounts();

        // 5.) Post the voucher transactions
        this.endLedgerVoucher();

        // 6.) Update the productionFlowCosting record
        this.updateStatus();

        // 7.) After calculation and clearing, reflect this in WIP
        this.updateWIPFinal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LedgerVoucher</c> class.
    /// </summary>
    protected void initLedgerVoucher()
    {
        using (var backflushCostingActivityContext = this.getInstrumentationEndLogger().backflushCostingActivities().initLedgerVoucher(leanProductionFlowCostingRecId, classStr(LeanCost_CalcProdFlow_End)))
        {
            ledgerVoucher = LedgerVoucherPostPersistable::newFromPersistedLedgerPostPersistable(leanProductionFlowCosting);

            // Initialize the indirect cost handling
            costUpd = LeanConversionCostUpd_CalcProdFlow::newFromParameters(ledgerVoucher, leanProductionFlowReference, this.getLeanCostingFacade());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>LeanCost_CalcProdFlow_End</c> class.
    /// </summary>
    /// <param name="_leanCostingFacade">
    /// The instance of the <c>LeanCostingFacadeBase</c> class to use.
    /// </param>
    /// <returns>
    /// The new instance of the <c>LeanCost_CalcProdFlow_End</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCost_CalcProdFlow_End construct(LeanCostingFacadeBase _leanCostingFacade)
    {
        LeanCost_CalcProdFlow_End leanCostCalcProdFlow = new LeanCost_CalcProdFlow_End();
        leanCostCalcProdFlow.parmLeanCostingFacade(_leanCostingFacade);
        return leanCostCalcProdFlow;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>