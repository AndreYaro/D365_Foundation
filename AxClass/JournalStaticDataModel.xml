<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalStaticDataModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JournalStaticDataModel</c> class contains static information about the journal's data model.
/// </summary>
final public class JournalStaticDataModel
{
    public FieldId  NameFieldIdjournalNameId;
    public FieldId  NameFieldIdjournalType;
    public FieldId  NameFieldIdDescription;
    public FieldId  NameFieldIdBlockUserGroupId;
    
    public FieldId  TableFieldIdJournalId;
    public FieldId  TableFieldIdPosted;
    public FieldId  TableFieldIdSigned;
    public FieldId  TableFieldIdBlockUserId;
    public FieldId  TableFieldIdBlockUserGroupId;
    public FieldId  TableFieldIdJournalType;
    public FieldId  TableFieldIdJournalNameId;
    public FieldId  TableFieldIdSystemBlocked;
    
    public FieldId  TransFieldIdJournalId;
    public FieldId  TransFieldIdLineNum;
    public FieldId  TransFieldIdVoucher;

    static Map cache = new Map(Types::String, Types::Class);
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class for a given journal.
    /// </summary>
    /// <param name = "_journalNameTableId">The table id for the journal name table.</param>
    /// <param name = "_journalTableTableId">The table id for the journal table.</param>
    /// <param name = "_journalTransTableId">The table id for the journal trans table.</param>
    private void initialize(
        TableId _journalNameTableId,
        TableId _journalTableTableId,
        TableId _journalTransTableId)
    {
        this.initializeJournalNameFields(_journalNameTableId);
        this.initializeJournalTableFields(_journalTableTableId);
        this.initializeJournalTransFields(_journalTransTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalNameFields</Name>
				<Source><![CDATA[
    private void initializeJournalNameFields(TableId _journalNameTableId)
    {
        DictTable dictTable = new DictTable(_journalNameTableId);
        int fieldCnt = dictTable.fieldCnt();

        for (int i=1; i<=fieldCnt; i++)
        {
            FieldId fieldId = dictTable.fieldCnt2Id(i);
            DictField dictField = dictTable.fieldObject(fieldId);

            switch (dictField.typeId())
            {
                case extendedTypeNum(JournalNameId) :
                    nameFieldIdjournalNameId = dictField.id();
                    break;
                case extendedTypeNum(JournalDescription) :
                    nameFieldIdDescription = dictField.id();
                    break;
                case extendedTypeNum(JournalBlockUserGroupId) :
                    nameFieldIdBlockUserGroupId = dictField.id();
                    break;
            }

            switch (dictField.name())
            {
                case identifierStr(JournalType):
                    nameFieldIdjournalType = dictField.id();
                    break;
                case identifierStr(JournalName):
                case identifierStr(JournalNameId):
                    nameFieldIdjournalNameId = dictField.id();
                    break;               
            }                        
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the table fields of the journal.
    /// </summary>
    /// <param name = "_journalTableTableId">The table identifier of the journal.</param>
    protected void initializeJournalTableFields(TableId _journalTableTableId)
    {
        DictTable dictTable = new DictTable(_journalTableTableId);
        int fieldCnt = dictTable.fieldCnt();

        for (int i=1; i<=fieldCnt; i++)
        {
            FieldId fieldId = dictTable.fieldCnt2Id(i);
            DictField dictField = dictTable.fieldObject(fieldId);

            switch (dictField.typeId())
            {
                case extendedTypeNum(JournalPosted) :
                    tableFieldIdPosted = dictField.id();
                    break;
                case extendedTypeNum(JournalBlockUserId) :
                    tableFieldIdBlockUserId = dictField.id();
                    break;
                case extendedTypeNum(JournalBlockUserGroupId) :
                    tableFieldIdBlockUserGroupId = dictField.id();
                    break;
                case extendedTypeNum(ProjJournalSigned) :
                    tableFieldIdSigned = dictField.id();
                    break;
                case extendedTypeNum(JournalSystemBlocked) :
                    tableFieldIdSystemBlocked = dictField.id();
                    break;
            }
            switch (dictField.name())
            {
                case fieldStr(JournalTableMap, JournalType):
                    tableFieldIdJournalType = dictField.id();
                    break;
                case fieldStr(JournalTableMap, JournalId):
                    tableFieldIdJournalId = dictField.id();
                    break;
                case fieldStr(JournalTableMap, JournalNameId):
                case identifierStr(JournalName):
                    tableFieldIdJournalNameId = dictField.id();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalTransFields</Name>
				<Source><![CDATA[
    private void initializeJournalTransFields(TableId _journalTransTableId)
    {
        DictTable dictTable = new DictTable(_journalTransTableId);
        int fieldCnt = dictTable.fieldCnt();
        for (int i=1; i<=fieldCnt; i++)
        {
            Fieldid fieldId = dictTable.fieldCnt2Id(i);
            DictField dictField = dictTable.fieldObject(fieldId);

            switch (dictField.typeId())
            {
                case extendedTypeNum(Voucher) :
                    transFieldIdVoucher = dictField.id();
                    break;
                case extendedTypeNum(LineNum) :
                    transFieldIdLineNum = dictField.id();
                    break;
            }

            if (dictField.name() == identifierStr(JournalId))
            {
                transFieldIdJournalId = dictField.id();
            }

            if (! transFieldIdVoucher && dictField.name() == identifierStr(Voucher))
            {
                transFieldIdVoucher = dictField.id();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the singleton instance for a given journal.
    /// </summary>
    /// <param name = "_journalNameTableId">The table id for the journal name table.</param>
    /// <param name = "_journalTableTableId">The table id for the journal table.</param>
    /// <param name = "_journalTransTableId">The table id for the journal trans table.</param>
    public static JournalStaticDataModel getInstance(
        TableId _journalNameTableId,
        TableId _journalTableTableId,
        TableId _journalTransTableId)
    {
        str cacheKey =
            int2str(_journalNameTableId)+';'+
            int2str(_journalTableTableId)+';'+
            int2str(_journalTransTableId)+';';

        if (cache.exists(cacheKey))
        {
            return cache.lookup(cacheKey);
        }

        JournalStaticDataModel dataModel = new JournalStaticDataModel();
        dataModel.initialize(_journalNameTableId, _journalTableTableId, _journalTransTableId);

        cache.insert(cacheKey, dataModel);

        return dataModel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>