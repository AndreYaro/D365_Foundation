<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCalcReportBEFields</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxCalcReportBEFields</c> class is used to calculate the fields used in Belgian tax reporting.
/// </summary>
class TaxCalcReportBEFields
{
    TmpTaxReportById    tmpTaxReportById;

    TransDate             fromDate;
    TransDate             toDate;
    TaxPeriod             taxPeriod;
    TaxRepVersion         taxRepVersion;
    TaxVersion            taxRepCounter;
    TransDate             taxDueDate;
    TransDate             transDate;
    Voucher               voucher;
    boolean               updated;
    NoYes                 reImbursement;
    NoYes                 paymentFormOrder;
    VATDisbursement       VATDisbursement;
    NoYes                 nihilAnnualListing;
    TaxIntervatPercentage adjustedValue;
    TaxIntervatPercentage boxNumberB1;
    TaxIntervatPercentage boxNumberB2;
    TaxIntervatPercentage boxNumberB3;
    TaxIntervatPercentage boxNumberB4;
    TaxIntervatPercentage boxNumberB5;

    #TaxReportingCodesBE

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the tax fields.
    /// </summary>
    /// <param name="_check">
    ///    A flag that ndicates whether to validate tax fields.
    /// </param>
    /// <returns>
    ///    true, if the calculated tax fields are valid, or if <paramref name="_check" /> was false. Otherwise, false.
    /// </returns>
    public boolean calc(boolean _check = true)
    {
        boolean checkStatus = true;

        tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(fromDate,
                                                               toDate,
                                                               taxPeriod,
                                                               taxRepVersion,
                                                               taxRepCounter,
                                                               updated);
        this.calcAdjustments(updated);
        this.calcExtraFields();
        this.calcTotalsAndRound();

        if (_check)
        {
            checkStatus = this.checkTaxFields();
        }

        return checkStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaxReport_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a <c>TaxCalcReportBEFields</c> object.
    /// </summary>
    /// <param name="_taxReport_BE">
    ///    The <c>TaxReport_BE</c> object upon which the calculation should be based.
    /// </param>
    /// <returns>
    ///    A <c>TaxCalcReportBEFields</c> object.
    /// </returns>
    public static TaxCalcReportBEFields newTaxReport_BE(TaxReportAdjustTrans _taxReport_BE)
    {
        TaxCalcReportBEFields taxCalcReportBEFields = new TaxCalcReportBEFields();

        taxCalcReportBEFields.parmTaxRepVerison(_taxReport_BE.taxRepVersion());
        taxCalcReportBEFields.parmTaxPeriod(_taxReport_BE.taxPeriod());
        taxCalcReportBEFields.parmFromDate(_taxReport_BE.fromDate());
        taxCalcReportBEFields.parmToDate(_taxReport_BE.toDate());
        taxCalcReportBEFields.parmTransDate(_taxReport_BE.transDate());
        taxCalcReportBEFields.parmVoucher(_taxReport_BE.voucher());
        taxCalcReportBEFields.parmUpdated(_taxReport_BE.update());

        taxCalcReportBEFields.parmTaxRepCounter(0);

        return taxCalcReportBEFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaxReportExtraFieldsBE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a <c>TaxCalcReportBEFields</c> object.
    /// </summary>
    /// <param name="_taxReportExtraFieldsBE">
    ///    The <c>TaxReportExtraFieldsBE</c> record upon which the calculation should be based.
    /// </param>
    /// <returns>
    ///    A <c>TaxCalcReportBEFields</c> object.
    /// </returns>
    public static TaxCalcReportBEFields newTaxReportExtraFieldsBE(TaxReportExtraFieldsBE _taxReportExtraFieldsBE)
    {
        TaxCalcReportBEFields taxCalcReportBEFields = new TaxCalcReportBEFields();

        taxCalcReportBEFields.parmTaxPeriod(_taxReportExtraFieldsBE.TaxPeriod);
        taxCalcReportBEFields.parmFromDate(_taxReportExtraFieldsBE.FromDate);
        taxCalcReportBEFields.parmToDate(_taxReportExtraFieldsBE.ToDate);
        taxCalcReportBEFields.parmTransDate(_taxReportExtraFieldsBE.TransDate);
        taxCalcReportBEFields.parmVoucher(_taxReportExtraFieldsBE.Voucher);

        if (_taxReportExtraFieldsBE.Voucher)
        {
            taxCalcReportBEFields.parmUpdated(true);
        }
        else
        {
            taxCalcReportBEFields.parmUpdated(false);
        }

        taxCalcReportBEFields.parmTaxRepCounter(0);
        taxCalcReportBEFields.parmTaxRepVerison(TaxRepVersion::Original);

        return taxCalcReportBEFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaxReportVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a <c>TaxCalcReportBEFields</c> object.
    /// </summary>
    /// <param name="_taxReportVoucher">
    ///    The <c>TaxReportVoucher</c> record upon which the calculation should be based.
    /// </param>
    /// <returns>
    ///    A <c>TaxCalcReportBEFields</c> object.
    /// </returns>
    public static TaxCalcReportBEFields newTaxReportVoucher(TaxReportVoucher _taxReportVoucher)
    {
        TaxCalcReportBEFields  taxCalcReportBEFields = new TaxCalcReportBEFields();

        taxCalcReportBEFields.parmTaxRepVerison(_taxReportVoucher.TaxRepVersion);
        taxCalcReportBEFields.parmTaxPeriod(_taxReportVoucher.TaxPeriod);
        taxCalcReportBEFields.parmFromDate(_taxReportVoucher.FromDate);
        taxCalcReportBEFields.parmToDate(_taxReportVoucher.ToDate);
        taxCalcReportBEFields.parmTaxRepCounter(_taxReportVoucher.TaxRepCounter);
        taxCalcReportBEFields.parmTransDate(_taxReportVoucher.TransDate);
        taxCalcReportBEFields.parmVoucher(_taxReportVoucher.Voucher);
        taxCalcReportBEFields.parmUpdated(true);

        return taxCalcReportBEFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVATDisbursement</Name>
				<Source><![CDATA[
    public VATDisbursement parmVATDisbursement(VATDisbursement _VATDisbursement = VATDisbursement)
    {
        VATDisbursement = _VATDisbursement;
        return VATDisbursement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNihilAnnualListing</Name>
				<Source><![CDATA[
    public NoYes parmNihilAnnualListing(NoYes _nihilAnnualListing = nihilAnnualListing)
    {
        nihilAnnualListing = _nihilAnnualListing;
        return nihilAnnualListing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    public TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRepCounter</Name>
				<Source><![CDATA[
    public TaxVersion parmTaxRepCounter(TaxVersion _taxRepCounter = taxRepCounter)
    {
        taxRepCounter = _taxRepCounter;
        return taxRepCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRepVerison</Name>
				<Source><![CDATA[
    public TaxRepVersion parmTaxRepVerison(TaxRepVersion _taxRepVersion = taxRepVersion)
    {
        taxRepVersion = _taxRepVersion;
        return taxRepVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpTaxReportById</Name>
				<Source><![CDATA[
    public TmpTaxReportById parmTmpTaxReportById(TmpTaxReportById _tmpTaxReportById = tmpTaxReportById)
    {
        tmpTaxReportById = _tmpTaxReportById;
        return tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdated</Name>
				<Source><![CDATA[
    public boolean parmUpdated(boolean _updated = updated)
    {
        updated = _updated;
        return updated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustedValue</Name>
				<Source><![CDATA[
    public TaxIntervatPercentage parmAdjustedValue(TaxIntervatPercentage _adjustedValue = adjustedValue)
    {
        adjustedValue = _adjustedValue;
        return adjustedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBoxNumberB1</Name>
				<Source><![CDATA[
    public TaxIntervatPercentage parmBoxNumberB1(TaxIntervatPercentage _boxNumberB1 = boxNumberB1)
    {
        boxNumberB1 = _boxNumberB1;
        return boxNumberB1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBoxNumberB2</Name>
				<Source><![CDATA[
    public TaxIntervatPercentage parmBoxNumberB2(TaxIntervatPercentage _boxNumberB2 = boxNumberB2)
    {
        boxNumberB2 = _boxNumberB2;
        return boxNumberB2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBoxNumberB3</Name>
				<Source><![CDATA[
    public TaxIntervatPercentage parmBoxNumberB3(TaxIntervatPercentage _boxNumberB3 = boxNumberB3)
    {
        boxNumberB3 = _boxNumberB3;
        return boxNumberB3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBoxNumberB4</Name>
				<Source><![CDATA[
    public TaxIntervatPercentage parmBoxNumberB4(TaxIntervatPercentage _boxNumberB4 = boxNumberB4)
    {
        boxNumberB4 = _boxNumberB4;
        return boxNumberB4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBoxNumberB5</Name>
				<Source><![CDATA[
    public TaxIntervatPercentage parmBoxNumberB5(TaxIntervatPercentage _boxNumberB5 = boxNumberB5)
    {
        boxNumberB5 = _boxNumberB5;
        return boxNumberB5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentFormOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether deposit forms are ordered with sales tax settlement.
    /// </summary>
    /// <returns>
    ///    <c>NoYes::Yes</c> if deposit forms are ordered with sales tax settlement; otherwise <c>NoYes::No</c>.
    /// </returns>
    public NoYes parmPaymentFormOrder(NoYes _paymentFormOrder = paymentFormOrder)
    {
        paymentFormOrder = _paymentFormOrder;
        return paymentFormOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReImbursement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether repayment of sales tax reclaimed is requested.
    /// </summary>
    /// <returns>
    ///    <c>NoYes::Yes</c> if repayment of sales tax reclaimed is requested; otherwise, <c>NoYes::No</c>.
    /// </returns>
    public NoYes parmReImbursement(NoYes _reImbursement = reImbursement)
    {
        reImbursement = _reImbursement;
        return reImbursement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdjustment</Name>
				<Source><![CDATA[
    protected void addAdjustment(TmpTaxReportById   _tmpTaxReportById,
                                 DebCredProposal    _debitCredit)
    {
        while select _tmpTaxReportById
        {
            this.insertInTmpTaxReportById(_tmpTaxReportById.TaxReportField,
                                          _tmpTaxReportById.Amount,
                                          _tmpTaxReportById.TaxInCostPrice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustments</Name>
				<Source><![CDATA[
    /* Calculates adjustments from specified previous periods, and fills these into tmpTaxTeportById */
    protected void calcAdjustments(boolean    _reported = false)
    {
        TmpTaxReportById            adjustments;
        TaxReportAdjustmentTrans    taxReportAdjustmentTrans;
        TaxReportPeriod             taxReportPeriodPrevious;

        /* If the tax is not reported, no registration of adjustment periods exist, meaning that
           this is determined here, the same way as in the tax reporting class
           When tax is reported, a  list of adjustments and periods exist */

        if (_reported)
        {
            while select FromDate, ToDate, TaxPeriod, TaxVersion, Voucher, TransDate
                from taxReportAdjustmentTrans
                    where taxReportAdjustmentTrans.Voucher   == voucher
                        && taxReportAdjustmentTrans.TransDate == transDate
                        && taxReportAdjustmentTrans.TaxPeriod == taxPeriod
            {
                adjustments = null;
                adjustments = TaxTrans::taxAmountByReportId_Table(taxReportAdjustmentTrans.FromDate,
                                                                  taxReportAdjustmentTrans.ToDate,
                                                                  taxReportAdjustmentTrans.TaxPeriod,
                                                                  TaxRepVersion::Correct,
                                                                  taxReportAdjustmentTrans.TaxVersion,_reported,
                                                                  DebCredProposal::Debit);
                this.addAdjustment(adjustments,DebCredProposal::Debit);
                adjustments = null;
                adjustments = TaxTrans::taxAmountByReportId_Table(taxReportAdjustmentTrans.FromDate,
                                                                  taxReportAdjustmentTrans.ToDate,
                                                                  taxReportAdjustmentTrans.TaxPeriod,
                                                                  TaxRepVersion::Correct,
                                                                  taxReportAdjustmentTrans.TaxVersion,_reported,
                                                                  DebCredProposal::Credit);
                this.addAdjustment(adjustments,DebCredProposal::Credit);
            }
        }
        else
        {
            while select FromDate, ToDate, TaxPeriod, VersionNum
                from taxReportPeriodPrevious
                    where taxReportPeriodPrevious.TaxPeriod  == taxPeriod
                        && taxReportPeriodPrevious.FromDate   < fromDate
                        && taxReportPeriodPrevious.VersionNum > 0
            {
                adjustments = null;
                adjustments = TaxTrans::taxAmountByReportId_Table(taxReportPeriodPrevious.FromDate,
                                                                  taxReportPeriodPrevious.ToDate,
                                                                  taxReportPeriodPrevious.TaxPeriod,
                                                                  TaxRepVersion::Correct,
                                                                  taxReportPeriodPrevious.VersionNum,_reported,
                                                                  DebCredProposal::Debit);
                this.addAdjustment(adjustments,DebCredProposal::Debit);
                adjustments = null;
                adjustments = TaxTrans::taxAmountByReportId_Table(taxReportPeriodPrevious.FromDate,
                                                                  taxReportPeriodPrevious.ToDate,
                                                                  taxReportPeriodPrevious.TaxPeriod,
                                                                  TaxRepVersion::Correct,
                                                                  taxReportPeriodPrevious.VersionNum,_reported,
                                                                  DebCredProposal::Credit);
                this.addAdjustment(adjustments,DebCredProposal::Credit);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExtraFields</Name>
				<Source><![CDATA[
    protected void calcExtraFields()
    {
        TaxReportExtraFieldsBE      taxReportExtraFieldsBE;
        int                         intDummy, decDummy, strpos;

        taxReportExtraFieldsBE = TaxReportExtraFieldsBE::findByTaxPeriod(taxPeriod, fromDate, toDate);

        if (taxReportExtraFieldsBE)
        {
            // ordering fields
            reImbursement       = taxReportExtraFieldsBE.Reimbursement;
            paymentFormOrder    = taxReportExtraFieldsBE.PaymentFormOrder;
            vaTdisbursement     = taxReportExtraFieldsBE.vatDisbursement;
            nihilAnnualListing  = taxReportExtraFieldsBE.NihilAnnualListing;
            adjustedValue       = taxReportExtraFieldsBE.AdjustedValue;
            boxNumberB1         = taxReportExtraFieldsBE.SpecialPercentageB1;
            boxNumberB2         = taxReportExtraFieldsBE.SpecialPercentageB2;
            boxNumberB3         = taxReportExtraFieldsBE.SpecialPercentageB3;
            boxNumberB4         = taxReportExtraFieldsBE.SpecialPercentageB4;
            boxNumberB5         = taxReportExtraFieldsBE.SpecialPercentageB5;

            // Extra amounts
            intDummy =  str2int(taxReportExtraFieldsBE.vatDisbursement);
            strpos = strFind(taxReportExtraFieldsBE.vatDisbursement,',',1,strLen(taxReportExtraFieldsBE.vatDisbursement));
            if (strpos == 0)
            {
                strpos = strFind(taxReportExtraFieldsBE.vatDisbursement,'.',1,strLen(taxReportExtraFieldsBE.vatDisbursement));
            }
            if (strpos != 0)
            {
                decDummy = str2int(subStr(taxReportExtraFieldsBE.vatDisbursement,strpos+1,2));
            }
            else
            {
                decDummy = 0;
            }
            this.insertInTmpTaxReportById(#field_91,intDummy+(decDummy/100));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalsAndRound</Name>
				<Source><![CDATA[
    /*
        Completes the calculations after all amounts are input in the tample tmpTaxReportById
    */
    protected void calcTotalsAndRound()
    {
        TaxAmount           amount_XX;
        TaxAmount           amount_YY;
        TaxAmount           taxAmount;
        TmpTaxReportById    tmpTaxReportByIdCopy;

        // Split amounts in double fields
        tmpTaxReportByIdCopy.setTmpData(tmpTaxReportById);
        while select sum(Amount), sum(TaxInCostPrice) from tmpTaxReportByIdCopy
            group by TaxReportField
            where tmpTaxReportByIdCopy.TaxReportField > 100 &&
                  tmpTaxReportByIdCopy.TaxReportField < 1000000
        {
            this.splitAmount(tmpTaxReportByIdCopy.TaxReportField,
                             tmpTaxReportByIdCopy.Amount,
                             tmpTaxReportByIdCopy.TaxInCostPrice);
        }

        // Subtract non deductible part on receivable VAT amounts
        while select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_59 ||
                  tmpTaxReportById.TaxReportField == #field_61 ||
                  tmpTaxReportById.TaxReportField == #field_62 ||
                  tmpTaxReportById.TaxReportField == #field_63
        {
            tmpTaxReportById.Amount -= tmpTaxReportById.TaxInCostPrice;
            tmpTaxReportById.update();
        }

        // Add non deductible part on receivable VAT base amounts
        while select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_81 ||
                  tmpTaxReportById.TaxReportField == #field_82 ||
                  tmpTaxReportById.TaxReportField == #field_83
        {
            tmpTaxReportById.Amount += tmpTaxReportById.TaxInCostPrice;
            tmpTaxReportById.update();
        }

        // Reverse signs
        while select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_00 ||
                  tmpTaxReportById.TaxReportField == #field_01 ||
                  tmpTaxReportById.TaxReportField == #field_02 ||
                  tmpTaxReportById.TaxReportField == #field_03 ||
                  tmpTaxReportById.TaxReportField == #field_44 ||
                  tmpTaxReportById.TaxReportField == #field_45 ||
                  tmpTaxReportById.TaxReportField == #field_46 ||
                  tmpTaxReportById.TaxReportField == #field_47 ||
                  tmpTaxReportById.TaxReportField == #field_86 ||
                  tmpTaxReportById.TaxReportField == #field_87 ||
                  tmpTaxReportById.TaxReportField == #field_88 ||
                  tmpTaxReportById.TaxReportField == #field_54 ||
                  tmpTaxReportById.TaxReportField == #field_55 ||
                  tmpTaxReportById.TaxReportField == #field_56 ||
                  tmpTaxReportById.TaxReportField == #field_57 ||
                  tmpTaxReportById.TaxReportField == #field_61 ||
                  tmpTaxReportById.TaxReportField == #field_63 ||
                  tmpTaxReportById.TaxReportField == #field_65
        {
            tmpTaxReportById.Amount = -tmpTaxReportById.Amount;
            tmpTaxReportById.update();
        }

        // Field XX = Field 54 + Field 55 + Field 56 + Field 57 + field 61 + field 63 + field 65
        select sum(Amount) from tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_54 ||
                  tmpTaxReportById.TaxReportField == #field_55 ||
                  tmpTaxReportById.TaxReportField == #field_56 ||
                  tmpTaxReportById.TaxReportField == #field_57 ||
                  tmpTaxReportById.TaxReportField == #field_61 ||
                  tmpTaxReportById.TaxReportField == #field_63 ||
                  tmpTaxReportById.TaxReportField == #field_65;

        amount_XX = tmpTaxReportById.Amount;

        select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_XX;

        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount = amount_XX;
            tmpTaxReportById.update();
        }
        else
        {
            this.insertInTmpTaxReportById(#field_XX, amount_XX);
        }

        // Field YY = Field 59 + Field 62 + Field 64 + Field 66
        select sum(Amount) from tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_59 ||
                  tmpTaxReportById.TaxReportField == #field_62 ||
                  tmpTaxReportById.TaxReportField == #field_64 ||
                  tmpTaxReportById.TaxReportField == #field_66;

        amount_YY = tmpTaxReportById.Amount;

        select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_YY;

        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount = amount_YY;
            tmpTaxReportById.update();
        }
        else
        {
            this.insertInTmpTaxReportById(#field_YY, amount_YY);
        }

        taxAmount = amount_XX - amount_YY;

        if (taxAmount < 0)
        {
            tmpTaxReportById.TaxReportField = #field_72;
            tmpTaxReportById.Amount         = -taxAmount;
            tmpTaxReportById.insert();
        }
        else
        {
            tmpTaxReportById.TaxReportField = #field_71;
            tmpTaxReportById.Amount         = taxAmount;
            tmpTaxReportById.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxFields</Name>
				<Source><![CDATA[
    //Validation rules for Belgian VAT declaration
    protected boolean checkTaxFields()
    {
        TaxCorrectionsBE            taxCorrectionsBE;
        TmpTaxReportById            tmpTaxReport;
        Dialog                      goDialog;
        Array                       taxValues;
        boolean                     checkTaxStatus = true;
        int                         i,warningCount=0;
        real                        xx, yy, dummy;

        tmpTaxReport.setTmpData(this.parmTmpTaxReportById());

        //create and initialize new array taxValues
        taxValues = new Array(Types::Real);
        for (i=1;i<101;i++)
        {
            taxValues.value(i,0.00);
        }

        //Select the values of the tax fields and put them in the array 'taxValues'
        while select * from tmpTaxReport
        order by TaxReportField
           where tmpTaxReport.TaxReportField < 101 && tmpTaxReport.Amount != 0
        {
            taxValues.value(tmpTaxReport.TaxReportField, tmpTaxReport.Amount);
        }
        //Select all corrections for this taxperiod and between the given startday, and endday, and update the array 'taxValues'
        while select TaxPeriod, StartDate, EndDate, Field, Amount
            from taxCorrectionsBE
                order by Field
                    where taxCorrectionsBE.TaxPeriod  == taxPeriod
                        && taxCorrectionsBE.StartDate >= fromDate
                        && taxCorrectionsBE.EndDate   <= toDate
        {
            dummy = taxValues.value(str2int(taxCorrectionsBE.Field)) + taxCorrectionsBE.Amount;
            taxValues.value(str2int(taxCorrectionsBE.Field),dummy);
        }

        //Check for negative values
        for (i=1;i<101;i++)
        {
            if (taxValues.value(i) < 0) taxValues.value(i,0.00);
        }
        //recalculate totals with taxcorrections included
        xx = taxValues.value(54) + taxValues.value(55) +taxValues.value(56) + taxValues.value(57) + taxValues.value(61) + taxValues.value(63);
        yy = taxValues.value(59) + taxValues.value(62) +taxValues.value(64);

        if (xx > yy)
        {
            taxValues.value(71,xx-yy);
            taxValues.value(72,0.00);
        }
        else if (yy > xx)
        {
            taxValues.value(71,0.00);
            taxValues.value(72,yy-xx);
        }
        else
        {
            taxValues.value(71,0.00);
            taxValues.value(72,0.00);
        }

        //ERRORs

        //rule 1
        if (mthOfYr(fromDate) != 12 && taxValues.value(91) != 0)
        {
            error("@SYS79708");
            checkTaxStatus = false;
        }

        //WARNINGs

        setPrefix("@SYS79712");

        //rule 1
        if ((taxValues.value(1) != 0 || taxValues.value(2) != 0 || taxValues.value(3) != 0) && taxValues.value(54) == 0)
        {
            warning("@SYS79698");
            warningCount+=1;
        }

        //rule 2
        if ((taxValues.value(54) != 0) && (taxValues.value(1) == 0 && taxValues.value(2) == 0 && taxValues.value(3) == 0))
        {
            warning("@SYS79699");
            warningCount+=1;
        }

        //rule 3
        if ((taxValues.value(86) != 0 || taxValues.value(88) != 0) && (taxValues.value(55) == 0))
        {
            warning("@SYS333607");
            warningCount+=1;
        }

        //rule 4
        if (taxValues.value(87) != 0 && (taxValues.value(56) == 0 && taxValues.value(57) == 0))
        {
            warning("@SYS79701");
            warningCount+=1;
        }

        //rule 5
        if (abs(taxValues.value(54) - (taxValues.value(1) * 0.06 + taxValues.value(2) * 0.12 + taxValues.value(3) * 0.21)) > 61.97)
        {
            warning("@SYS79702");
            warningCount+=1;
        }

        //rule 6
        if (taxValues.value(55) - (taxValues.value(84) * 0.21 + taxValues.value(86) * 0.21 + taxValues.value(88) * 0.21) > 62.00)
        {
            warning("@SYS333608");
            warningCount+=1;
        }

        //rule 7
        if (taxValues.value(56) + taxValues.value(57) - (taxValues.value(85) * 0.21 + taxValues.value(87) * 0.21) > 61.97)
        {
            warning("@SYS79704");
            warningCount+=1;
        }

        //rule 8
        if (taxValues.value(59) != 0 && (taxValues.value(59) - 0.5 * (taxValues.value(81) + taxValues.value(82) + taxValues.value(83) + taxValues.value(84) + taxValues.value(85)) > 0))
        {
            warning("@SYS333609");
            warningCount+=1;
        }

        //rule 9
        if (taxValues.value(63) != 0 && taxValues.value(85) != 0 && (taxValues.value(63) - (taxValues.value(85) * 0.21) > 61.97))
        {
            warning("@SYS79706");
            warningCount+=1;
        }

        //rule 10
        if (taxValues.value(64) != 0 && taxValues.value(49) != 0 && (taxValues.value(64) - (taxValues.value(49) * 0.21) > 61.97))
        {
            warning("@SYS79707");
            warningCount+=1;
        }

        if (checkTaxStatus == true && warningCount > 0)
        {
            //PostR1TODO
            //infolog.viewUpdate();
            goDialog = new Dialog("@SYS79710");
            goDialog.addText(strFmt("@SYS79709", int2str(warningCount)));
            goDialog.addText("@SYS79711");
            if (!goDialog.run())
            {
                checkTaxStatus = false;
            }
        }

        return checkTaxStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportById</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a tax report field in table TmpTaxReportById.
    /// </summary>
    /// <param name="_field">
    ///    The field to insert.
    /// </param>
    /// <param name="_taxAmount">
    ///    The calculated tax amount.
    /// </param>
    /// <param name="_taxInCostPrice">
    ///    The calculated tax in cost price; optional.
    /// </param>
    /// <param name="_txt">
    ///    The text, if the field is a text field; optional.
    /// </param>
    protected void insertInTmpTaxReportById(TaxReportField _field,
                                  TaxAmount      _taxAmount,
                                  TaxAmount      _taxInCostPrice = 0,
                                  str            _txt = '')
    {
        select forupdate tmpTaxReportById
        where tmpTaxReportById.TaxReportField == _field;

        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount         += _taxAmount;
            tmpTaxReportById.TaxInCostPrice += _taxInCostPrice;
            tmpTaxReportById.update();
        }
        else
        {
            tmpTaxReportById.TaxReportField = _field;
            tmpTaxReportById.Amount         = _taxAmount;
            tmpTaxReportById.TaxInCostPrice = _taxInCostPrice;
            tmpTaxReportById.Description    = _txt;

            tmpTaxReportById.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitAmount</Name>
				<Source><![CDATA[
    /*
      split amounts, when special report fields are used

        Rules are
        100 < original field < 1000000
        Fields are specified with 2 digits
        the leftmost 2 digits = fieldPart 1. The amount is subtracted from the amount in field part 1
        the rigthmost 2 digits = field part 2. The amount is added to the amount in field part 2
        the eventual middle 2 digits = fieldpart 3. The amount is added to the amount in field part 3

    */
    protected void splitAmount(TaxReportField _taxReportField,
                               Amount         _amount,
                               Amount         _taxInCostPrice)
    {
        TaxReportField  original;
        TaxReportField  fieldPart1;
        TaxReportField  fieldPart2;
        TaxReportField  fieldPart3;

        original = _taxReportField;
        if (original > 100 &&
            original < 1000000)
        {
            fieldPart1 = original mod 100;
            original = original div 100;
            fieldPart2 = original mod 100;
            original = original div 100;
            if (original > 0)
            {
                fieldPart3 = fieldPart2;
                fieldPart2 = original;
            }
        }
        if (fieldPart1)
        {
            this.insertInTmpTaxReportById(fieldPart1, -_amount, -_taxInCostPrice);
        }
        if (fieldPart2)
        {
            this.insertInTmpTaxReportById(fieldPart2, _amount, _taxInCostPrice);
        }
        if (fieldPart3)
        {
            this.insertInTmpTaxReportById(fieldPart3, _amount, _taxInCostPrice);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>