<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransferOrderCreationLineOnhandDimensionCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSTransferOrderCreationLineOnhandDimensionCollection</c> class contains information about the physical onhand for an item by inventory dimensions.
/// </summary>
internal class WHSTransferOrderCreationLineOnhandDimensionCollection
{
    private Map onhandElements;
    private Map licensePlates;
    private MapEnumerator onhandElementEnumerator;
    private WHSTransferOrderCreationLineOnhandElement currentOnhandElement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>WHSTransferOrderCreationLineOnhandElement</c> class that contains onhand information to the collection.
    /// </summary>
    /// <param name = "_onhandElement">The onhand information.</param>
    /// <param name = "_licensePlateId">The license plate associated with the onhand information.</param>
    public void addOnhand(WHSTransferOrderCreationLineOnhandElement _onhandElement, WHSLicensePlateId _licensePlateId)
    {
        this.addOnhandElement(_onhandElement);
        this.addLicensePlate(_onhandElement.key(), _licensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOnhandElement</Name>
				<Source><![CDATA[
    private void addOnhandElement(WHSTransferOrderCreationLineOnhandElement _onhandElement)
    {
        str key = _onhandElement.key();
        WHSTransferOrderCreationLineOnhandElement onhandElement;

        if (onhandElements.exists(key))
        {
            onhandElement = onhandElements.lookup(key);
            onhandElements.remove(key);
        }
        else
        {
            onhandElement = WHSTransferOrderCreationLineOnhandElement::construct();
            onhandElement.initDimensionsFromElement(_onhandElement);
        }

        onhandElement.addOnhand(_onhandElement);

        onhandElements.insert(key, onhandElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLicensePlate</Name>
				<Source><![CDATA[
    private void addLicensePlate(str _key, WHSLicensePlateId _licensePlateId)
    {
        Set onhandElementLicensePlates;

        if (licensePlates.exists(_key))
        {
            onhandElementLicensePlates = licensePlates.lookup(_key);
        }
        else
        {
            onhandElementLicensePlates = new Set(Types::String);

            licensePlates.insert(_key, onhandElementLicensePlates);
        }

        if (_licensePlateId &&
            !onhandElementLicensePlates.in(_licensePlateId))
        {
            onhandElementLicensePlates.add(_licensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOnhandCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a collection of <c>WHSTransferOrderCreationLineOnhandElement</c> classes that contains onhand information to the collection.
    /// </summary>
    /// <param name = "_onhandCollection">The collection of onhand information.</param>
    public void addOnhandCollection(WHSTransferOrderCreationLineOnhandDimensionCollection _onhandCollection)
    {
        _onhandCollection.initializeEnumerator();
        
        while (_onhandCollection.moveNext())
        {
            WHSTransferOrderCreationLineOnhandElement onhandElement = _onhandCollection.currentTransferOrderCreationLineOnhandElement();
            str key = onhandElement.key();

            this.addOnhandElement(onhandElement);

            if (_onhandCollection.licensePlates.exists(key))
            {
                Set onhandLicensePlates = _onhandCollection.licensePlates.lookup(key);
                var onhandLicensePlateEnumerator = onhandLicensePlates.getEnumerator();

                while (onhandLicensePlateEnumerator.moveNext())
                {
                    this.addLicensePlate(key, onhandLicensePlateEnumerator.current());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentTransferOrderCreationLineOnhandElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WHSTransferOrderCreationLineOnhandElement</c> class instance that the enumerator currently positions in the collection.
    /// </summary>
    /// <returns>A <c>WHSTransferOrderCreationLineOnhandElement</c> class instance.</returns>
    public WHSTransferOrderCreationLineOnhandElement currentTransferOrderCreationLineOnhandElement()
    {
        return currentOnhandElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentTransferOrderCreationLineOnhandLicensePlates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the license plates associated with the <c>WHSTransferOrderCreationLineOnhandElement</c> class instance that the enumerator currently positions in the collection.
    /// </summary>
    /// <returns>A collection of license plates.</returns>
    public Set currentTransferOrderCreationLineOnhandLicensePlates()
    {
        if (currentOnhandElement != null)
        {
            var key = currentOnhandElement.key();

            if (licensePlates.exists(key))
            {
                return licensePlates.lookup(key);
            }
        }

        return new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of <c>WHSTransferOrderCreationLineOnhandElement</c> class instances in the collection.
    /// </summary>
    /// <returns>An integer that indicates the number of <c>WHSTransferOrderCreationLineOnhandElement</c> class instances in the collection.</returns>
    public int elements()
    {
        return onhandElements.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the enumerator of the collection.
    /// </summary>
    /// <remarks>The enumerator can be used to enumerate through the collection.</remarks>
    public void initializeEnumerator()
    {
        onhandElementEnumerator = onhandElements.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the enumerator to the next <c>WHSTransferOrderCreationLineOnhandElement</c> class instance in the collection.
    /// </summary>
    /// <returns>A Boolean that indicates whether the enumerator successfully advances to the next <c>WHSTransferOrderCreationLineOnhandElement</c> class instance in the collection.</returns>
    public boolean moveNext()
    {
        boolean hasItem;

        if (onhandElementEnumerator)
        {
            hasItem = onhandElementEnumerator.moveNext();
        }
        else
        {
            hasItem = false;
        }

        if (hasItem)
        {
            currentOnhandElement = onhandElementEnumerator.currentValue();
        }

        return hasItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the enumerator to the first <c>WHSTransferOrderCreationLineOnhandElement</c> class instance in the collection.
    /// </summary>
    public void reset()
    {
        if (onhandElementEnumerator)
        {
            onhandElementEnumerator.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        onhandElements = new Map(Types::String, Types::Class);
        licensePlates = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSTransferOrderCreationLineOnhandDimensionCollection construct()
    {
        return new WHSTransferOrderCreationLineOnhandDimensionCollection();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>