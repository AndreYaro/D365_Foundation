<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsDocumentRoutingTranslator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Text.RegularExpressions;
using System.Reflection;
using System.Globalization;
using Newtonsoft.Json;

/// <summary>
/// The <c>WhsDocumentRoutingTranslator</c> is used to translate a label layout string into a final string to be printed using a table buffer to provide replacement values.
/// </summary>
public class WhsDocumentRoutingTranslator
{
    private static const str FieldRegexString = '\\$(?:(?<record>[a-zA-Z0-9_]+?)\\.)?(?<field>[a-zA-Z0-9_]+?)(?<methodIndicator>\\(\\))?(?:\\[(?<lineIndex>[0-9]{1,3})\\])?(?::(?<format>.*?))?\\$';
    private static const str RecordCapturingGroup = 'record';
    private static const str FieldCapturingGroup = 'field';
    private static const str MethodIndicatorCapturingGroup = 'methodIndicator';
    private static const str LineIndexCapturingGroup = 'lineIndex';
    private static const str FormatCapturingGroup = 'format';

    private static const str VerbatimFormatString = 'verbatim';
    private static const str Base64FormatString = 'base64';

    private static const str StringFormatStringRegexString = '^([0-9]+)?\.\.([0-9]+)?$';
    
    private static Regex FieldRegex = new Regex(WhsDocumentRoutingTranslator::FieldRegexString);
    private static Regex StringFormatStringRegex = new Regex(WhsDocumentRoutingTranslator::StringFormatStringRegexString);
    private static System.Reflection.MethodInfo TranslateMatchEvaluatorMethodInfo = System.Type::GetType(identifierstr(Dynamics.AX.Application.WhsDocumentRoutingTranslator)).GetMethod(methodStr(WhsDocumentRoutingTranslator, translateMatchEvaluator));
    private static System.Type MatchEvaluatorType = System.Type::GetType('System.Text.RegularExpressions.MatchEvaluator, System');
    
    private static Map TableIdToFieldsNameToIdMap = new Map(Types::Integer, Types::Class); // maps table ids to maps of field names to field Ids. Static because it is metadata.
    private static Map TableIdToDisplayMethodsMap = new Map(Types::Integer, Types::Class); // maps table ids to lists of display methods. Static because it is metadata.
    private static Map TableIdToDisplayMethodsWithSelfParmeterMap = new Map(Types::Integer, Types::Class); // maps table ids to lists of display methods which have a table for a parameter. Static because it is metadata.        
    private static boolean TableIdToDisplayMethodsWithSelfParmeterFlightIsEnabled = WhsDocumentRoutingTranslatorDisplayMethodWithSelfParameterFlight::instance().isEnabled();

    private Map recordNameToTableIdMap = new Map(Types::String, Types::Integer); // maps record names to table ids (for later lookup to tableFieldsNameToIdMap)
    private Map recordsUnderTranslation = new Map(Types::String, Types::Record); // maps record names to buffers

    private static const str DefaultParametersName = 'parameters';
    private Map recordNameToParameterMapMap = new Map(Types::String, Types::Class); // maps record names to key/value map classes

    private System.Globalization.CultureInfo translationCulture;

    private WhsDocumentRoutingFormat labelFormat;

    private static boolean WHSPrintLabelPerfOptimizationsFlightEnabled = WHSPrintLabelPerfOptimizationsFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()                   
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTranslationCulture</Name>
				<Source><![CDATA[
    private System.Globalization.CultureInfo getTranslationCulture()
    {
        if (!translationCulture)
        {
            translationCulture = new System.Globalization.CultureInfo(WHSParameters::getCurrentUserDateCulture());
        }

        return translationCulture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>WhsDocumentRoutingTranslator</c>.
    /// </summary>
    /// <returns>A new instance of <c>WhsDocumentRoutingTranslator</c>.</returns>
    [Hookable(false)]
    public static WhsDocumentRoutingTranslator construct()
    {
        return new WhsDocumentRoutingTranslator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>withLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the language used when formatting.
    /// </summary>
    /// <param name = "_languageId">Language ID to be used.</param>
    /// <returns>The current <c>WhsDocumentRoutingTranslator</c> instance.</returns>
    [Hookable(false)]
    public WhsDocumentRoutingTranslator withLanguage(LanguageId _languageId = '')
    {
        if (!_languageId)
        {
            translationCulture = null;
        }
        else
        {
            translationCulture = new System.Globalization.CultureInfo(_languageId);
            Debug::assert(translationCulture.LCID != 0x1000); // Get some telemetry in case of creative languages
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the format of the label used when formatting.
    /// </summary>
    /// <param name = "_format">Format of the label to be used.</param>
    /// <returns>The current <c>WhsDocumentRoutingTranslator</c> instance.</returns>
    [Hookable(false)]
    public WhsDocumentRoutingTranslator withFormat(WhsDocumentRoutingFormat _format)
    {
        labelFormat = _format;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the record for use in translating the label.
    /// </summary>
    /// <param name = "_record">Record used to translate the label.</param>
    /// <param name = "_recordName">The name of the record inside the label.</param>
    /// <returns>The current <c>WhsDocumentRoutingTranslator</c> instance.</returns>
    [Hookable(false)]    
    public WhsDocumentRoutingTranslator withRecord(Common _record, TableName _recordName = '')
    {
        if (!_record.TableId)
        {
            if (recordsUnderTranslation.exists(_recordName))
            {
                recordsUnderTranslation.remove(_recordName);
            }
            
            return this;           
        }

        this.ensureRecordMetadata(_recordName, _record.TableId);
        recordsUnderTranslation.insert(_recordName, _record);
        
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withRecordsFromQueryRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WhsDocumentRoutingTranslator withRecordsFromQueryRun(QueryRun _queryRun)
    {
        int	dataSourceCount = _queryRun.query().dataSourceCount();

        for (int i = 1; i <= dataSourceCount; i++)
        {
            QueryBuildDataSource qbds = _queryRun.query().dataSourceNo(i);
            if (qbds && qbds.enabled())
            {
                if (!WhsDocumentRoutingTranslator::WHSPrintLabelPerfOptimizationsFlightEnabled)
                {
                    Common record = _queryRun.getNo(qbds.id());
                }
                this.withRecord(_queryRun.getNo(i), qbds.name());
            }
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureRecordMetadata</Name>
				<Source><![CDATA[
    private void ensureRecordMetadata(TableName _recordName, TableId _tableId)
    {
        if (!_tableId)
        {
            return;
        }
                
        if (recordNameToTableIdMap.exists(_recordName) && recordNameToTableIdMap.lookup(_recordName) == _tableId)
        {            
            return;
        }

        if (!TableIdToFieldsNameToIdMap.exists(_tableId)
            || !TableIdToDisplayMethodsMap.exists(_tableId) 
            || (TableIdToDisplayMethodsWithSelfParmeterFlightIsEnabled && !TableIdToDisplayMethodsWithSelfParmeterMap.exists(_tableId)))
        {
            DictTable dictTable = new DictTable(_tableId);
            this.initTableFieldNameToIdMap(dictTable);
            this.initTableDisplayMethodListMap(dictTable);

            Debug::assert(TableIdToFieldsNameToIdMap.exists(_tableId) && TableIdToDisplayMethodsMap.exists(_tableId) && (TableIdToDisplayMethodsWithSelfParmeterMap.exists(_tableId) || !TableIdToDisplayMethodsWithSelfParmeterFlightIsEnabled));
        }
        
        recordNameToTableIdMap.insert(_recordName, _tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableFieldNameToIdMap</Name>
				<Source><![CDATA[
    private void initTableFieldNameToIdMap(DictTable _dictTable)
    {        
        int length = _dictTable.fieldCnt();
        
        Map tableFieldNameToIdMap = new Map(Types::String, Types::Int64);

        if (WhsDocumentRoutingTranslatorBaseTableFieldNameToIdMapFlight::instance().isEnabled())
        {
            for (FieldId fieldId = _dictTable.fieldNext(0, TableScope::IncludeBaseTables); 
                fieldId; 
                fieldId = _dictTable.fieldNext(fieldId, TableScope::IncludeBaseTables))
            {
                DictField dictField = _dictTable.fieldObject(fieldId);
            
                if (!dictField.isSystem() && dictField.visible())
                {
                    var fieldAdded = tableFieldNameToIdMap.insert(dictField.name(), dictField.id());
                    Debug::assert(fieldAdded);
                }
            }
        }
        else
        {
            for (FieldId fieldId = _dictTable.fieldNext(0); fieldId; fieldId = _dictTable.fieldNext(fieldId))
            {
                DictField dictField = _dictTable.fieldObject(fieldId);
            
                if (!dictField.isSystem() && dictField.visible())
                {
                    var fieldAdded = tableFieldNameToIdMap.insert(dictField.name(), dictField.id());
                    Debug::assert(fieldAdded);
                }
            }
        }

        TableIdToFieldsNameToIdMap.insert(_dictTable.id(), tableFieldNameToIdMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableDisplayMethodListMap</Name>
				<Source><![CDATA[
    private void initTableDisplayMethodListMap(DictTable _dictTable)
    {
        int length = _dictTable.objectMethodCnt();

        // We have two sets of display methods based on how we need to invoke them:
        // - without parameters (which covers also display methods with only optional parameters)
        // - with "self" parameter, where the first parameter is mandatory and of the same type as the table (and the rest can be optional) that will be called with the table cursor as the only parameter
        // Other options: we don't know how to invoke them, so they should be ignored not to caused runtime errors

        Set displayMethodWithoutParametersSet = new Set(Types::String);
        Set displayMethodWithSelfParameterSet = new Set(Types::String);

        for (int i = 1; i <= length; ++i)
        {
            DictMethod method = _dictTable.objectMethodObject(i);
            if (method.displayType() == DisplayFunctionType::Get || method.displayType() == DisplayFunctionType::Set)
            {
                Set displayMethodSetToUse;

                switch (true)
                {
                    case this.displayMethodCanBeInvokedWithoutParameters(method):
                        displayMethodSetToUse = displayMethodWithoutParametersSet;
                        break;

                    case this.displayMethodNeedsOnlySelfParameter(method, _dictTable):
                        displayMethodSetToUse = displayMethodWithSelfParameterSet;
                        break;
                }

                if (displayMethodSetToUse)
                {
                    var displayMethodAdded = displayMethodSetToUse.add(method.name());
                    Debug::assert(displayMethodAdded);
                }
            }
        }

        TableIdToDisplayMethodsMap.insert(_dictTable.id(), displayMethodWithoutParametersSet);
        
        if (TableIdToDisplayMethodsWithSelfParmeterFlightIsEnabled)
        {
            TableIdToDisplayMethodsWithSelfParmeterMap.insert(_dictTable.id(), displayMethodWithSelfParameterSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMethodCanBeInvokedWithoutParameters</Name>
				<Source><![CDATA[
    private boolean displayMethodCanBeInvokedWithoutParameters(DictMethod _displayMethod)
    {
        // Mandatory parameters can't follow optional ones
        return _displayMethod.parameterCnt() == 0 ||
               _displayMethod.parameterOptional(1) ||
               !TableIdToDisplayMethodsWithSelfParmeterFlightIsEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMethodNeedsOnlySelfParameter</Name>
				<Source><![CDATA[
    private boolean displayMethodNeedsOnlySelfParameter(DictMethod _displayMethod, DictTable _table)
    {
        return TableIdToDisplayMethodsWithSelfParmeterFlightIsEnabled &&
               _displayMethod.parameterCnt() >= 1 &&
               !_displayMethod.parameterOptional(1) &&
               _displayMethod.parameterType(1) == Types::Record &&
               _displayMethod.parameterTypeName(1) == _table.name() &&
               (_displayMethod.parameterCnt() == 1 || _displayMethod.parameterOptional(2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>withParameterMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a map for use in translating a label.
    /// </summary>
    /// <param name = "_keyValueMap">A String -> String map.</param>
    /// <param name = "_parameterMapName">Name of the map for use in the label.</param>
    /// <returns></returns>
    [Hookable(false)]
    public WhsDocumentRoutingTranslator withParameterMap(Map _keyValueMap, str _parameterMapName = WhsDocumentRoutingTranslator::DefaultParametersName)
    {
        if (_keyValueMap.keyType() != Types::String || _keyValueMap.valueType() != Types::String)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        recordNameToParameterMapMap.insert(_parameterMapName, _keyValueMap);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>translate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the translation of placeholders in the input parameter using records supplied to the current instance.
    /// </summary>
    /// <param name = "_inputStr">Label that contains placeholders for values to be inserted to the input string.</param>
    /// <returns>The generated string with placeholders replaced.</returns>
    [Hookable(false)]
    public str translate(str _inputStr)
    {
        if (!_inputStr)
        {
            return _inputStr;
        }

        MatchEvaluator matchEvaluator = TranslateMatchEvaluatorMethodInfo.CreateDelegate(MatchEvaluatorType, this);
        Debug::assert(matchEvaluator != null);
        Debug::assert(FieldRegex != null);

        return FieldRegex.Replace(_inputStr, matchEvaluator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValueToMap</Name>
				<Source><![CDATA[
    private static void addValueToMap(Map _map, str _key, anytype _value)
    {
        // Track that all fields are needed by storing null
        if (_value == null)
        {
            _map.add(_key, null);
        }

        if (!_map.exists(_key))
        {       
            Set set = new Set(Types::String);            
            _map.add(_key, set);
        }

        Set set = _map.lookup(_key);
        
        // Do not allow storing new fields if it is already null
        if (set)
        {
            set.add(_value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsRequiredToTranslate</Name>
				<Source><![CDATA[
    internal static Map fieldsRequiredToTranslate(str _inputStr)
    {
        Map result = new Map(Types::String, Types::Class);
        
        if (_inputStr)
        {
            Debug::assert(FieldRegex != null);

            MatchCollection matches = FieldRegex.Matches(_inputStr);
            System.Collections.IEnumerator enum = matches.GetEnumerator();

            while (enum.MoveNext())
            {
                System.Text.RegularExpressions.Match match = enum.Current;

                System.Text.RegularExpressions.Group recordGroup = match.Groups.get_Item(RecordCapturingGroup);
                System.Text.RegularExpressions.Group fieldGroup = match.Groups.get_Item(FieldCapturingGroup);

                if (recordGroup.Success && fieldGroup.Success)
                {
                    str record = recordGroup.Value;
                    System.Text.RegularExpressions.Group methodIndicatorGroup = match.Groups.get_Item(MethodIndicatorCapturingGroup);

                    if (methodIndicatorGroup.Success)
                    {
                        // All fields are needed to ensure display method(s) will work
                        WhsDocumentRoutingTranslator::addValueToMap(result, record, null);                            
                    }
                    else
                    {
                        WhsDocumentRoutingTranslator::addValueToMap(result, record, fieldGroup.Value);
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateMatchEvaluator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates a match inside translateRecord FieldRegex.Replace.
    /// </summary>
    /// <param name = "_regexMatch">Match from the regular expression.</param>
    /// <returns>String to be substituted for the match.</returns>
    /// <remarks>
    /// Method is decorated internal for the X++ compiler to create an IL method of the same name to allow calls from .NET.
    /// </remarks>
    [Hookable(false)]
    internal str translateMatchEvaluator(System.Text.RegularExpressions.Match _regexMatch)
    {        
        str translatedString = this.translateMatches(_regexMatch);

        System.Text.RegularExpressions.Group formatStringGroup = _regexMatch.Groups.get_Item(FormatCapturingGroup);
        if (formatStringGroup.Success && formatStringGroup.Value == VerbatimFormatString)
        {
            return translatedString;
        }
        
        return this.escapeFormattedString(translatedString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateMatches</Name>
				<Source><![CDATA[
    private str translateMatches(System.Text.RegularExpressions.Match _regexMatch)
    {
        boolean skipEscaping = false;

        System.Text.RegularExpressions.Group recordGroup = _regexMatch.Groups.get_Item(RecordCapturingGroup);
        System.Text.RegularExpressions.Group fieldGroup = _regexMatch.Groups.get_Item(FieldCapturingGroup);
        System.Text.RegularExpressions.Group methodIndicatorGroup = _regexMatch.Groups.get_Item(MethodIndicatorCapturingGroup);
        System.Text.RegularExpressions.Group lineIndexGroup = _regexMatch.Groups.get_Item(LineIndexCapturingGroup);
        System.Text.RegularExpressions.Group formatStringGroup = _regexMatch.Groups.get_Item(FormatCapturingGroup);

        // Do not touch $$, as in current behavior
        if (!fieldGroup.Success)
        {
            return _regexMatch.Value;
        }
        
        str recordName = '';
        if (recordGroup.Success)
        {
            recordName = recordGroup.Value;
        }

        if ((!recordNameToTableIdMap.exists(recordName) || !recordsUnderTranslation.exists(recordName)) &&
            (!recordNameToParameterMapMap.exists(recordName)))
        {
            return _regexMatch.Value;
        }

        str fieldName = fieldGroup.Value;
        anytype fieldValue;

        if (recordName && recordNameToParameterMapMap.exists(recordName))
        {
            if (methodIndicatorGroup.Success)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            Map parameterMap = recordNameToParameterMapMap.lookup(recordName);

            if (!parameterMap.exists(fieldName))
            {
                return _regexMatch.Value;
            }

            fieldValue = parameterMap.lookup(fieldName);
        }
        else
        {
            TableId recordTableId = recordNameToTableIdMap.lookup(recordName);
            Common recordUnderTranslation = recordsUnderTranslation.lookup(recordName);

            Debug::assert(recordTableId != 0);
            Debug::assert(TableIdToDisplayMethodsMap.exists(recordTableId));
            if (TableIdToDisplayMethodsWithSelfParmeterFlightIsEnabled)
            {
                Debug::assert(TableIdToDisplayMethodsWithSelfParmeterMap.exists(recordTableId));
            }
            Debug::assert(TableIdToFieldsNameToIdMap.exists(recordTableId));

            if (methodIndicatorGroup.Success)
            {
                switch (true)
                {
                    case TableIdToDisplayMethodsMap.lookup(recordTableId).in(fieldName):
                        fieldValue = new DictTable(recordTableId).callObject(fieldName, recordUnderTranslation);
                        break;

                    case TableIdToDisplayMethodsWithSelfParmeterFlightIsEnabled && TableIdToDisplayMethodsWithSelfParmeterMap.lookup(recordTableId).in(fieldName):
                        fieldValue = new DictTable(recordTableId).callObject(fieldName, recordUnderTranslation, recordUnderTranslation);
                        break;

                    default:
                        return _regexMatch.Value;
                }
            }
            else
            {
                Map tableFieldNameToIdMap = TableIdToFieldsNameToIdMap.lookup(recordTableId);

                if (!tableFieldNameToIdMap.exists(fieldName))
                {
                    return _regexMatch.Value;
                }

                fieldValue = recordUnderTranslation.(tableFieldNameToIdMap.lookup(fieldName));
            }
        }
                
        // If line number index is provided, split the string on newlines and continue with only the selected line index
        if (fieldValue is System.String && lineIndexGroup.Success)
        {
            int lineIndex = str2Int(lineIndexGroup.Value);

            if (lineIndex == 0)
            {
                fieldValue = '';
            }

            container lines = str2con(fieldValue, '\n', false);
            if (lineIndex > conLen(lines))
            {
                fieldValue = '';
            }
            else 
            {
                fieldValue = conPeek(lines, lineIndex);
            }
        }

        // Shortcut string values without format strings
        if (fieldValue is System.String && !formatStringGroup.Success)
        {           
            return fieldValue;
        }

        if (formatStringGroup.Success)
        {
            str formatString = formatStringGroup.Value;            
            
            if (fieldValue is System.String)
            {
                return this.formatString(fieldValue, formatString);
            }
            else if (fieldValue is System.IFormattable)
            {
                System.IFormattable formattable = fieldValue as System.IFormattable;                
                return formattable.ToString(formatString, this.getTranslationCulture());
            }
        }

        return strFmt('%1', fieldValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>escapeFormattedString</Name>
				<Source><![CDATA[
    private str escapeFormattedString(str _formattedString)
    {
        switch (labelFormat)
        {
            case WhsDocumentRoutingFormat::PlainText:
                return _formattedString;

            case WhsDocumentRoutingFormat::JSON:
                return JsonConvert::ToString(_formattedString);

            case WhsDocumentRoutingFormat::XML:
                return System.Security.SecurityElement::Escape(_formattedString);
        }

        throw Error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles formatting of strings. Supports format string [N]..[M] which trims the first N characters and the last M characters.
    /// Useful to strip off AIs and check digits.
    /// </summary>
    /// <param name = "_stringToFormat">String to format.</param>
    /// <param name = "_formatString">Format to use to format the string.</param>
    /// <returns>A formatted string.</returns>
    private str formatString(str _stringToFormat, str _formatString)
    {
        if (_formatString == Base64FormatString)
        {
            return System.Convert::ToBase64String(System.Text.Encoding::UTF8.GetBytes(_stringToFormat));
        }

        var match = StringFormatStringRegex.Match(_formatString);

        if (!match.Success)
        {
            return _stringToFormat;
        }

        var trimLeftGroup = match.Groups.get_Item(1);
        var trimRightGroup = match.Groups.get_Item(2);
 
        int trimLeft, trimRight;

        if (trimLeftGroup.Success)
        {
            trimLeft = str2Int(trimLeftGroup.Value);
        }

        if (trimRightGroup.Success)
        {
            trimRight = str2Int(trimRightGroup.Value);
        }

        return subStr(_stringToFormat, trimLeft + 1, strLen(_stringToFormat) - trimLeft - trimRight);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>