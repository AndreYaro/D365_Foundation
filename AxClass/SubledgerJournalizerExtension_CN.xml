<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerExtension_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalizerExtension_CN</c> class is extension of <c>functionalit</c> class
/// handles China specific functionality.
/// </summary>
[SourceDocumentExtensionAttribute()]
class SubledgerJournalizerExtension_CN extends SubledgerJournalizerExtension
{
    FormLetterJournalPostCaller     journalPostCaller;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether to subscribe the journalizer event.
    /// </summary>
    /// <returns>
    /// True if we can subscribe the journalizer event; otherwise, false.
    /// </returns>
    protected boolean canSubscribe()
    {
        boolean canSubscribe = false;

        journalPostCaller = subledgerJournalizer.parmCaller() as FormLetterJournalPostCaller;

        if (LedgerParameters::isChineseVoucher_CN()
            && journalPostCaller != null
            && journalPostCaller.parmLedgerVoucher() != null
            && SourceDocumentCompletionRule::recognizeVoucherInSubledger())
        {
            canSubscribe = true;
        }

        return canSubscribe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SourceDocumentHeader_CN</c> record.
    /// </summary>
    /// <param name="_subledgerJournalAccountEntryTmpDetail">
    /// The temporary table <c>SubledgerJournalAccountEntryTmpDetail</c> buffer.
    /// </param>
    /// <param name="_sourceDocument">
    /// The <c>SourceDocument</c> object.
    /// </param>
    /// <param name="_accountingEvent">
    /// An <c>AccountingEvent</c> record.
    /// </param>
    protected void createSourceDocumentHeader(
        SubledgerJournalAccountEntryTmpDetail   _subledgerJournalAccountEntryTmpDetail,
        SourceDocument                          _sourceDocument,
        AccountingEvent                         _accountingEvent)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubledgerJournalEntryExtCN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SubledgerJournalEntryExt_CN</c> record.
    /// </summary>
    /// <param name="_subledgerJournalAccountEntryTmpDetail">
    /// The temporary table <c>SubledgerJournalAccountEntryTmpDetail</c> buffer.
    /// </param>
    /// <param name="_accountingEvent">
    /// An <c>AccountingEvent</c> record.
    /// </param>
    protected void createSubledgerJournalEntryExtCN(
        SubledgerJournalAccountEntryTmpDetail   _subledgerJournalAccountEntryTmpDetail,
        AccountingEvent                         _accountingEvent)
    {
        DataAreaId                          dataAreaId;
        LedgerVoucherType_CN                ledgerVoucherTypeCN;
        RecId                               ledgerVoucherTypeCNId;
        Voucher_CN                          voucherCN;
        Map                                 ledgerVoucherTypeCNIdMap;
        Map                                 voucherCNMap;
        SourceDocumentHeader                sourceDocumentHeader;
        SourceDocumentClassId               sourceDocumentClassId;
        SubledgerJournalEntry               subledgerJournalEntry;
        SubledgerJournalTransferRule        subledgerJournalTransferRule;
        LedgerVoucher                       ledgerVoucher;

        ledgerVoucherTypeCNIdMap = new Map(Types::String, Types::Int64);
        voucherCNMap = new Map(Types::String, Types::String);
        ledgerVoucher = journalPostCaller.parmLedgerVoucher();

        // When transfer rule is not summarizing accounting entries, create Chinese voucher number per company and save it in SubledgerJournalEntryExt_CN
        while select VoucherDataAreaId, Ledger from subledgerJournalEntry
            where subledgerJournalEntry.AccountingEvent == _accountingEvent.RecId
            join sourceDocumentHeader
                where sourceDocumentHeader.RecId == _accountingEvent.SourceDocumentHeader
        {
            sourceDocumentClassId = classIdGet(SourceDocument::newFromSourceDocumentHeader(sourceDocumentHeader) as Object);
            subledgerJournalTransferRule = SubledgerJournalTransferRule::findBestMatchRule(sourceDocumentClassId, subledgerJournalEntry.Ledger);
            if (!subledgerJournalTransferRule.IsSummarizationEnabled)
            {
                dataAreaId = subledgerJournalEntry.VoucherDataAreaId;
                if (!voucherCNMap.exists(dataAreaId))
                {
                    changeCompany(dataAreaId)
                    {
                        ledgerVoucherTypeCN = SubledgerVoucherHelper_CN::getVoucherTypeFromSubledgerAccEntryTemp(_subledgerJournalAccountEntryTmpDetail);
                        voucherCN = ledgerVoucherTypeCN.getVoucherNumber(_accountingEvent.AccountingDate);

                        ledgerVoucherTypeCNId = ledgerVoucherTypeCN.RecId;
                        ledgerVoucherTypeCNIdMap.insert(dataAreaId, ledgerVoucherTypeCNId);
                        voucherCNMap.insert(dataAreaId, voucherCN);
                    }
                }
                else
                {
                    ledgerVoucherTypeCNId = ledgerVoucherTypeCNIdMap.lookup(dataAreaId);
                    voucherCN = voucherCNMap.lookup(dataAreaId);
                }

                SubledgerJournalEntryExt_CN::createOrUpdateSubledgerJournalEntry(
                    subledgerJournalEntry.RecId,
                    voucherCN,
                    ledgerVoucherTypeCNId);
                ledgerVoucher.parmVoucher_CN(voucherCN);
                ledgerVoucher.parmLedgerVoucherType_CN(ledgerVoucherTypeCNId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insSubledgerJourAccEntryDistEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs after the <c>insertedSubledgerJourAccEntryDistr</c> method for the action is called.
    /// </summary>
    /// <param name="_subledgerJournalAccountEntryTmpDetail">
    /// The temporary table <c>SubledgerJournalAccountEntryTmpDetail</c> buffer.
    /// </param>
    /// <param name="_accountingEvent">
    /// An <c>AccountingEvent</c> record.
    /// </param>
    public void insSubledgerJourAccEntryDistEventHandler(
        SubledgerJournalAccountEntryTmpDetail _subledgerJournalAccountEntryTmpDetail,
        AccountingEvent                       _accountingEvent)
    {
        this.createSubledgerJournalEntryExtCN(_subledgerJournalAccountEntryTmpDetail, _accountingEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
        protected void subscribe()
    {
        super();

        if (this.canSubscribe())
        {
            subledgerJournalizer.insertedSubledgerJourAccEntryDistr += eventhandler(this.insSubledgerJourAccEntryDistEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static SubledgerJournalizerExtension_CN construct()
    {
        return new SubledgerJournalizerExtension_CN();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>