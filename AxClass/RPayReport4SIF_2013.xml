<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport4SIF_2013</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayReport4SIF_2013 extends RPayReport4SIF
{
    Set             mainEmplsNotAcceptableSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCostType</Name>
				<Source><![CDATA[
    protected container calcCostType(str             _period,
                                     RPayCounterUnit _fund,
                                     str             _payCType,
                                     str             _payGroup = '',
                                     Range           _sortOfWork = '',
                                     boolean         _rPayEmplPeriodUniqueCount = false)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds  = query.addDataSource(tablenum(RPayTrans));
        Query                   query1;
        QueryBuildDataSource    qbds2, qbdsPerson, qbdsEmpl;
        RPayTrans               rPayTrans;
        RPayTrans               rPayTrans1;
        QueryRun                qr;
        int                     rPayEmplPeriodUniqueCount;
        container               ret;

        if (! _payCType)
        {
            return [0, 0, 0];
        }

        qbds.addSelectionField(fieldnum(RPayTrans, Amount), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(RPayTrans, QtyDay), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(RPayTrans, RecId), SelectionField::Count);

        if (correcting)
        {
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(_period);
        }
        else
        {
            qbds.addRange(fieldnum(RPayTrans, PayPeriod)).value(_period);
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(fromYearStart);
        }

        qbds.addRange(fieldnum(RPayTrans, PayCType)).value(_payCType);

        if (_payGroup)
        {
            if (RPayGroupTable::find(_payGroup).Type == RPayGroupType::Employee)
            {
                qbds2 = qbds.addDataSource(tablenum(RPayGroupMember));
                qbds2.addLink(fieldnum(RPayTrans, EmplId), fieldnum(RPayGroupMember, PersonEmplId));
            }
            else
            {
                qbdsEmpl = qbds.addDataSource(tablenum(RHRMEmplTable));
                qbdsEmpl.addLink(fieldnum(RPayTrans, EmplId), fieldnum(RHRMEmplTable, EmployeeId));

                qbdsPerson = qbdsEmpl.addDataSource(tablenum(RHRMPersonTable));
                qbdsPerson.addLink(fieldnum(RHRMPersonTable, RecId), fieldnum(RHRMEmplTable, RHRMPersonTable));

                qbds2 = qbdsPerson.addDataSource(tablenum(RPayGroupMember));
                qbds2.addLink(fieldnum(RHRMPersonTable, PersonnelNumber), fieldnum(RPayGroupMember, PersonEmplId));
            }

            qbds2.addRange(fieldnum(RPayGroupMember, PayGroup)).value(_payGroup);
            qbds2.fetchMode(QueryFetchMode::One2One);
            qbds2.joinMode(JoinMode::ExistsJoin);
        }

        if (_sortOfWork)
        {
            qbds2 = qbds.addDataSource(tablenum(RHRMEmplTable));
            qbds2.joinMode(JoinMode::ExistsJoin);
            qbds2.addLink(fieldnum(RPayTrans, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
            qbds2.fetchMode(QueryFetchMode::One2One);
            qbds2.addRange(fieldnum(RHRMEmplTable, SortOfWork)).value(_sortOfWork);
        }

        query1 = new Query(query.pack());

        qbds = query.dataSourceTable(tablenum(RPayTrans));
        qbds = qbds.addDataSource(tablenum(RpayFundEmplSum));
        qbds.addLink(fieldnum(RPayTrans, EmplId), fieldnum(RpayFundEmplSum, EmplId));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds.addRange(fieldnum(RpayFundEmplSum, RpayCounterUnit)).value(_fund);

        if (correcting)
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(_period);
        }
        else
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, PayPeriod)).value(_period);
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
        }

        qbds = query.dataSourceTable(tablenum(RPayTrans));
        qbds = qbds.addDataSource(tablenum(RPayFundMember));
        qbds.addLink(fieldnum(RPayTrans, PayCType), fieldnum(RPayFundMember, PayCostType));
        qbds.addRange(fieldnum(RPayFundMember, CounterUnit)).value(con2str([fundSocialPayments, fundSick]));
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        rPayTrans = RPayReport4SIF_2013::executeQuery(query, tablenum(RPayTrans));

        qbds = query1.dataSourceTable(tablenum(RPayTrans));
        qbds = qbds.addDataSource(tablenum(RPayFundMember));
        qbds.addLink(fieldnum(RPayTrans, PayCType), fieldnum(RPayFundMember, PayCostType));
        qbds.addRange(fieldnum(RPayFundMember, CounterUnit)).value(fundSocialPayments);
        qbds.addRange(fieldnum(RPayFundMember, CounterUnit)).value(fundSick);
        qbds.joinMode(JoinMode::ExistsJoin);

        rPayTrans1 = RPayReport4SIF_2013::executeQuery(query1, tablenum(RPayTrans));

        ret = [rPayTrans.Amount + rPayTrans1.Amount,
                rPayTrans.QtyDay + rPayTrans1.QtyDay,
                rPayTrans.RecId  + rPayTrans1.RecId];

        if (_rPayEmplPeriodUniqueCount)
        {
            query1.dataSourceTable(tableNum(RPayTrans)).addSelectionField(fieldnum(RPayTrans, SourceRecId), SelectionField::Count);
            query1.dataSourceTable(tableNum(RPayTrans)).addRange(fieldNum(RPayTrans, SourceTableId)).value(queryValue(tableNum(RPayEmplPeriodTrans)));
            query1.dataSourceTable(tableNum(RPayTrans)).addGroupByField(fieldNum(RPayTrans, SourceRecId));

            qr = new QueryRun(query1);

            while (qr.next())
            {
                rPayEmplPeriodUniqueCount++;
            }

            ret += rPayEmplPeriodUniqueCount;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostTypeFromFund</Name>
				<Source><![CDATA[
    protected container calcCostTypeFromFund(str             _period,
                                             RPayCounterUnit _fund,
                                             Range           _sortOfWork = '')
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RPayTrans));
        QueryBuildDataSource    qbds2;
        RPayTrans               rPayTrans;

        if (! _fund)
        {
            return [0, 0, 0];
        }

        qbds.addSelectionField(fieldnum(RPayTrans, Amount), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(RPayTrans, QtyDay), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(RPayTrans, RecId), SelectionField::Count);

        if (correcting)
        {
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(_period);
        }
        else
        {
            qbds.addRange(fieldnum(RPayTrans, PayPeriod)).value(_period);
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(fromYearStart);
        }

        if (_sortOfWork)
        {
            qbds2 = qbds.addDataSource(tablenum(RHRMEmplTable));
            qbds2.joinMode(JoinMode::ExistsJoin);
            qbds2.addLink(fieldnum(RPayTrans, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
            qbds2.fetchMode(QueryFetchMode::One2One);
            qbds2.addRange(fieldnum(RHRMEmplTable, SortOfWork)).value(_sortOfWork);
        }

        qbds = qbds.addDataSource(tablenum(RPayFundMember));
        qbds.addLink(fieldnum(RPayTrans, PayCType), fieldnum(RPayFundMember, PayCostType));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addRange(fieldnum(RPayFundMember, CounterUnit)).value(_fund);

        rPayTrans = RPayReport4SIF_2013::executeQuery(query, tablenum(RPayTrans));

        return [rPayTrans.Amount,
                rPayTrans.QtyDay,
                rPayTrans.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFundBase</Name>
				<Source><![CDATA[
    protected RPayAmount calcFundBase(str _period,
                                      str _fundToInclude,
                                      str _fundToExclude = "")
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RPayTrans));
        QueryBuildDataSource    qbds2;
        RPayTrans               rPayTrans;

        if (! _fundToInclude)
        {
            return 0;
        }

        qbds.addSelectionField(fieldnum(RPayTrans, Amount), SelectionField::Sum);

        if (correcting)
        {
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(_period);
        }
        else
        {
            qbds.addRange(fieldnum(RPayTrans, PayPeriod)).value(_period);
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(fromYearStart);
        }

        qbds2 = qbds.addDataSource(tablenum(RPayFundMember));
        qbds2.addLink(fieldnum(RPayTrans, PayCType), fieldnum(RPayFundMember, PayCostType));
        qbds2.addRange(fieldnum(RPayFundMember, CounterUnit)).value(_fundToInclude + (_fundToExclude ? ',!' + _fundToExclude : ''));
        qbds2.joinMode(JoinMode::ExistsJoin);

        rPayTrans = RPayReport4SIF_2013::executeQuery(query, tablenum(RPayTrans));

        return rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvalids</Name>
				<Source><![CDATA[
    protected void calcInvalids()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPayment</Name>
				<Source><![CDATA[
    protected int calcPayment(str             _dates,
                              RPayCounterUnit _fund,
                              str             _payCType)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RHRMEmplTable));

        if (! _payCType)
        {
            return 0;
        }

        qbds.addSelectionField(fieldnum(RHRMEmplTable, RecId), SelectionField::Count);
        qbds = qbds.addDataSource(tablenum(RPayTrans));
        qbds.addLink(fieldnum(RHRMEmplTable, EmployeeId), fieldnum(RPayTrans, EmplId));

        if (correcting)
        {
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(_dates);
        }
        else
        {
            qbds.addRange(fieldnum(RPayTrans, PayPeriod)).value(_dates);
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(fromYearStart);
        }

        qbds.addRange(fieldnum(RPayTrans, PayCType)).value(_payCType);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds = query.dataSourceTable(tablenum(RHRMEmplTable));
        qbds = qbds.addDataSource(tablenum(RpayFundEmplSum));
        qbds.addLink(fieldnum(RHRMEmplTable, EmployeeId), fieldnum(RpayFundEmplSum, EmplId));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds.addRange(fieldnum(RpayFundEmplSum, RpayCounterUnit)).value(_fund);

        if (correcting)
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(_dates);
        }
        else
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, PayPeriod)).value(_dates);
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
        }

        return any2Int(RPayReport4SIF_2013::executeQuery(query, tablenum(RHRMEmplTable)).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStaffPositions</Name>
				<Source><![CDATA[
    protected void calcStaffPositions()
    {
        RHRMStaffList           rhrmStaffList;
        RHRMStaffListHistory    rhrmStaffListHistory,
                                rhrmStaffListHistoryExists;
        TransDate               transDate;
        RHRMStaffListFactor     totalFactorToCertify,
                                totalFactorCertified,
                                totalFactorCertifiedHarmful,
                                totalFactorCertifiedDangerous;
        int                     totalEmplNotAccetable,
                                totalEmplNotAccetableWithMedical;
        container               staffListEmploy;

        transDate = dateStartYr(payYear);
        while select RecId from rhrmStaffList
        exists join rhrmStaffListHistoryExists
            where rhrmStaffListHistoryExists.StaffListRefRecId == rhrmStaffList.RecId &&
                  rhrmStaffListHistoryExists.StartDate <= transDate &&
                  rhrmStaffListHistoryExists.Certified == NoYes::Yes
        {
            rhrmStaffListHistory = RHRMStaffListHistory::findLast(rhrmStaffList.RecId, transDate);

            if (rhrmStaffListHistory.Certified)
            {
                totalFactorToCertify += rhrmStaffListHistory.StaffListFactor;

                if (rhrmStaffListHistory.Class != RHRMClassOfWorkConditions::None)
                {
                    totalFactorCertified += rhrmStaffListHistory.StaffListFactor;

                    if (rhrmStaffListHistory.Class == RHRMClassOfWorkConditions::Harmful ||
                        rhrmStaffListHistory.Class == RHRMClassOfWorkConditions::Dangerous)
                    {
                        staffListEmploy = this.getStaffListEmploy(rhrmStaffList.RecId, transDate);

                        totalEmplNotAccetable            += conpeek(staffListEmploy, 1);
                        totalEmplNotAccetableWithMedical += conpeek(staffListEmploy, 2);

                        if (rhrmStaffListHistory.Class == RHRMClassOfWorkConditions::Harmful)
                        {
                            totalFactorCertifiedHarmful += rhrmStaffListHistory.StaffListFactor;
                        }
                        else
                        {
                            totalFactorCertifiedDangerous += rhrmStaffListHistory.StaffListFactor;
                        }
                    }
                }
            }
        }

        staffPositionsData = [totalFactorToCertify,
                totalFactorCertified,
                totalFactorCertifiedHarmful,
                totalFactorCertifiedDangerous,
                totalEmplNotAccetable,
                totalEmplNotAccetableWithMedical];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    protected void checkAndPrepareParameters()
    {
        mainEmplsNotAcceptableSet = new Set(Types::String);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCalculatedAvgQty</Name>
				<Source><![CDATA[
    protected void checkCalculatedAvgQty()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplAvgQtyByGroup</Name>
				<Source><![CDATA[
    protected RPayAverageQty emplAvgQtyByGroup(RPayGroup _payGroup)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RPayAverageQuantity));
        QueryBuildDatasource    qbdsFund, qbdsMember, qbdsPerson, qbdsEmpl;
        RPayAverageQuantity     rPayAverageQuantity;

        qbds.addSelectionField(fieldnum(RPayAverageQuantity, AverageQty), SelectionField::Avg);
        qbds.addRange(fieldnum(RPayAverageQuantity, PayPeriod)).value(fromYearStart);
        qbds.addRange(fieldnum(RPayAverageQuantity, PayGroup)).value(_payGroup);

        qbdsMember = qbds.addDataSource(tablenum(RPayGroupMember));
        qbdsMember.addLink(fieldnum(RPayAverageQuantity, PayGroup), fieldnum(RPayGroupMember, PayGroup));

        if (RPayGroupTable::find(_payGroup).Type == RPayGroupType::Employee)
        {
            qbdsFund = qbdsMember.addDataSource(tablenum(RPayFundEmplSum));
            qbdsFund.addLink(fieldnum(RPayGroupMember, PersonEmplId), fieldnum(RPayFundEmplSum, EmplId));
        }
        else
        {
            qbdsPerson = qbdsMember.addDataSource(tableNum(RHRMPersonTable));
            qbdsPerson.addLink(fieldnum(RPayGroupMember, PersonEmplId), fieldnum(RHRMPersonTable, PersonnelNumber));
            qbdsPerson.addSelectionField(fieldNum(RHRMPersonTable, RecId));

            qbdsEmpl = qbdsPerson.addDataSource(tableNum(RHRMEmplTable));
            qbdsEmpl.addLink(fieldnum(RHRMPersonTable, RecId), fieldnum(RHRMEmplTable, RHRMPersonTable));
            qbdsEmpl.addRange(fieldNum(RHRMEmplTable, EmployeeId)).value(strFmt('(%1 == %2)',
                fieldstr(RHRMEmplTable, PayMainEmplId),
                fieldstr(RHRMEmplTable, EmployeeId)));

            qbdsFund = qbdsEmpl.addDataSource(tablenum(RPayFundEmplSum));
            qbdsFund.addLink(fieldnum(RHRMEmplTable, PayMainEmplId), fieldnum(RPayFundEmplSum, EmplId));
        }

        if (reportPeriod == RPayReportSocialTaxPeriod::Year || !correcting)
        {
            qbdsFund.addRange(fieldnum(RPayFundEmplSum, PayPeriod)).value(fromYearStart);
        }
        else
        {
            qbdsFund.addRange(fieldnum(RPayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
        }

        rPayAverageQuantity = RPayReport4SIF_2013::executeQuery(query, tablenum(RPayAverageQuantity));

        return this.round(rPayAverageQuantity.AverageQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAddress</Name>
				<Source><![CDATA[
    protected void fillAddress()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    #AviFiles
    protected void fillDocument()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillEmplQty</Name>
				<Source><![CDATA[
    protected void fillEmplQty()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOfficials</Name>
				<Source><![CDATA[
    protected void fillOfficials()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRegularCells</Name>
				<Source><![CDATA[
    protected void fillRegularCells(Bookmark _bookmark,
                                    str      _text,
                                    int      _maxLen,
                                    int      _cellSpace = #cellSpace,
                                    int      _workSheet = 0,
                                    boolean  _horizontal = true,
                                    boolean  _alignRight = false)
    {
        super(_bookmark, _text, _maxLen, _cellSpace, _workSheet, _horizontal, _alignRight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSheetCommon</Name>
				<Source><![CDATA[
    protected void fillSheetCommon()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable1</Name>
				<Source><![CDATA[
    protected void fillTable1()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable10</Name>
				<Source><![CDATA[
    protected boolean fillTable10()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable2</Name>
				<Source><![CDATA[
    protected boolean fillTable2()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable3</Name>
				<Source><![CDATA[
    protected void fillTable3()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable31</Name>
				<Source><![CDATA[
    protected boolean fillTable31()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable5</Name>
				<Source><![CDATA[
    protected boolean fillTable5()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable6</Name>
				<Source><![CDATA[
    protected void fillTable6()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable7</Name>
				<Source><![CDATA[
    protected void fillTable7()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable8</Name>
				<Source><![CDATA[
    protected boolean fillTable8()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable9</Name>
				<Source><![CDATA[
    protected void fillTable9()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTitle</Name>
				<Source><![CDATA[
    protected void fillTitle()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillWomen</Name>
				<Source><![CDATA[
    protected void fillWomen()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDisRate</Name>
				<Source><![CDATA[
    protected RPayRateTrans findDisRate(RPayRateCode _payRateCode, RHRMEmplId _emplId)
    {
        return super(_payRateCode, _emplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnDisRate</Name>
				<Source><![CDATA[
    protected  TransDate findUnDisRate(RPayRateCode _payRateCode,
                                     RHRMEmplId   _emplId,
                                     TransDate    _startDate)
    {
        return super(_payRateCode, _emplId, _startDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplAvgQty</Name>
				<Source><![CDATA[
    protected RPayAverageQty getEmplAvgQty(RPayCounterUnit _fund, RPayCounterUnit _payGroup)
    {
        return super(_fund, _payGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplQty</Name>
				<Source><![CDATA[
    protected Counter getEmplQty(RPayCounterUnit _payGroup)
    {
        return super(_payGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundAmountSum</Name>
				<Source><![CDATA[
    protected RPayAmount getFundAmountSum(RPayCounterUnit _fund, str _dates)
    {
        return super(_fund, _dates);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundTotalAmountSum</Name>
				<Source><![CDATA[
    protected RPayAmount getFundTotalAmountSum(str             _dates,
                                               RPayCounterUnit _fund,
                                               boolean         _useGroup     = false,
                                               RPayGroup       _group        = '',
                                               RHRMEmplId      _emplId       = '')
    {
        return super(_dates, _fund, _useGroup, _group, _emplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundTotalDeductionAmount</Name>
				<Source><![CDATA[
    protected RPayAmount getFundTotalDeductionAmount(str             _period,
                                                     RPayCounterUnit _fund,
                                                     str             _deductionCodesToInclude = '',
                                                     str             _deductionCodesToExclude = '',
                                                     RHRMEmplId      _emplId                  = '',
                                                     boolean         _excludeDeductionPercent = false)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RpayFundEmplDeduction)), qbdsDeductionCodePct;
        RpayFundEmplDeduction   rpayFundEmplDeduction;

        if ( ! (_fund && (_deductionCodesToInclude || _deductionCodesToExclude)))
        {
            return 0;
        }

        qbds.addSelectionField(fieldnum(RpayFundEmplDeduction, DeductionAmount), SelectionField::Sum);
        qbds.addRange(fieldnum(RpayFundEmplDeduction, RpayCounterUnit)).value(_fund);

        if (correcting)
        {
            qbds.addRange(fieldnum(RpayFundEmplDeduction, CorrectedPeriod)).value(_period);
        }
        else
        {
            qbds.addRange(fieldnum(RpayFundEmplDeduction, PayPeriod)).value(_period);
            qbds.addRange(fieldnum(RpayFundEmplDeduction, CorrectedPeriod)).value(fromYearStart);
        }

        if (_deductionCodesToInclude)
        {
            qbds.addRange(fieldnum(RpayFundEmplDeduction, RpayFundDeductionCode)).value(_deductionCodesToInclude);
        }

        if (_deductionCodesToExclude)
        {
            _deductionCodesToExclude = '!' + strreplace(_deductionCodesToExclude, ',', ',!');
            qbds.addRange(fieldnum(RpayFundEmplDeduction, RpayFundDeductionCode)).value(_deductionCodesToExclude);
        }

        if (_emplId)
        {
            qbds.addRange(fieldnum(RpayFundEmplDeduction, EmplId)).value(_emplId);
        }

        if (_excludeDeductionPercent)
        {
            qbdsDeductionCodePct = qbds.addDataSource(tablenum(RPayFundDeductionTable));
            qbdsDeductionCodePct.addLink(fieldnum(RpayFundEmplDeduction, RpayFundDeductionCode), fieldnum(RPayFundDeductionTable, RpayFundDeductionCode));
            qbdsDeductionCodePct.joinMode(JoinMode::ExistsJoin);
            qbdsDeductionCodePct.addRange(fieldnum(RPayFundDeductionTable, RpayRateTaxValue)).value(Sysquery::valueEmptyString());
        }

        rpayFundEmplDeduction = RPayReport4SIF_2013::executeQuery(query, tablenum(rpayFundEmplDeduction));

        return rpayFundEmplDeduction.DeductionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    RPayReportName getReportName()
    {
        return RPayReportName::RPayReport4SIF_2013;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStaffListEmploy</Name>
				<Source><![CDATA[
    protected container getStaffListEmploy(RHRMStaffListRefRecId _rhrmStaffListRecId, TransDate _transDate)
    {
        RHRMStaffListHistoryCheck   rhrmStaffListHistoryCheck;
        Set                         emplByPositionSet;
        SetEnumerator               se;
        RHRMEmplId                  emplId;
        RPayRateTable               medInspecRateTable;
        RHRMEmplTable               emplTable;
        int                         emplsWithMedical;
        int                         emplsNotAcceptable;

        medInspecRateTable = RPayRateTable::find(medInspectionRate);

        rhrmStaffListHistoryCheck = new RHRMStaffListHistoryCheck(_rhrmStaffListRecId, _transDate, true);

        emplByPositionSet = Set::create(rhrmStaffListHistoryCheck.getStaffListEmploySet());
        se = emplByPositionSet.getEnumerator();

        while (se.moveNext())
        {
            emplId = se.current();
            emplTable = RHRMEmplTable::find(emplId);

            if (!mainEmplsNotAcceptableSet.in(emplTable.PayMainEmplId) &&
                medInspecRateTable.getValue(RPayRateCallContext::construct(_transDate, emplTable.PayMainEmplId)) == NoYes::Yes)
            {
                emplsWithMedical ++;
            }

            if (!mainEmplsNotAcceptableSet.in(emplTable.PayMainEmplId))
            {
                mainEmplsNotAcceptableSet.add(emplTable.PayMainEmplId);
                emplsNotAcceptable++;
            }
        }

        return [emplsNotAcceptable,
                emplsWithMedical];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmployed</Name>
				<Source><![CDATA[
    protected boolean isEmployed(RHRMEmplId _mainEmplId)
    {
        return super(_mainEmplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvalid</Name>
				<Source><![CDATA[
    protected TransDate isInvalid(RHRMEmplId _emplId)
    {
        return super(_emplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    protected boolean makeDocument()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList,''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNum2str</Name>
				<Source><![CDATA[
    protected str pageNum2str()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportPeriod2Str</Name>
				<Source><![CDATA[
    protected str reportPeriod2Str()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceName</Name>
				<Source><![CDATA[
    protected str resourceName()
    {
        return resourceStr(RPayReport4SIF_2013);
    }

]]></Source>
			</Method>
			<Method>
				<Name>round</Name>
				<Source><![CDATA[
    protected RPayAmount round(RPayAmount _amount, RoundOff _round = 0)
    {
        return super(_amount, _round);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    #define.reportName('F4-FSS_2013.xlt')
    public str templateName()
    {
        return #reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP3527";
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    public static Common executeQuery(Query _query, tableId _tableId)
    {
        QueryRun qr = new QueryRun(_query);

        qr.next();

        return qr.get(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTemplateName</Name>
				<Source><![CDATA[
    public static str fullTemplateName()
    {
        resourceNode rn = SysResource::getResourceNode(resourceStr(RPayReport4SIF_2013));
        rn.AOTload();
        return SysResource::saveToTempFile(rn, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayReport4SIF_2013 report = new RPayReport4SIF_2013();
        ;
        report.init();

        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>