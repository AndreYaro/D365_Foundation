<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdReportDP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retrieves data for <c>TaxWithholdReport_BR</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(TaxWithholdReport_BR)),
    SRSReportParameterAttribute(classStr(TaxWithholdReportContract_BR))
]
public class TaxWithholdReportDP_BR extends SrsReportDataProviderPreProcessTempDB
{
    TaxWithholdReportTmp_BR         taxWithholdTmp;
    TaxWithholdTrans                taxWithholdTrans;
    TaxRepVersion                   taxRepVersion;
    TaxWithholdPeriod               taxWithholdPeriod;
    TransDate                       fromDate;
    TransDate                       toDate;
    TransDate                       transDate;
    TaxReportPeriod                 taxReportPeriod;
    Name                            taxVersionParam;
    TaxVersion                      taxRepCounter;
    Voucher                         voucher;
    NoYes                           taxReported;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createQueryRanges</Name>
				<Source><![CDATA[
        private void createQueryRanges(Query _query)
    {
        if (taxWithholdPeriod && fromDate && toDate)
        {
            // TaxWithholdPeriod_BR Range
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).addRange(fieldNum(TaxWithholdTrans, TaxWithholdPeriod_BR));
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).rangeField(fieldNum(TaxWithholdTrans, TaxWithholdPeriod_BR)).value(strFmt('%1', taxWithholdPeriod));

            // TaxWithholdTrans Range
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).addRange(fieldNum(TaxWithholdTrans, TransDate));
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).rangeField(fieldNum(TaxWithholdTrans, TransDate)).value(queryRange(fromDate, toDate));

            // TaxWithholdTrans Posted
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).addRange(fieldNum(TaxWithholdTrans, Posted));
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).rangeField(fieldNum(TaxWithholdTrans, Posted)).value(strFmt('%1', 1));

            // TaxWithholdTrans CanBeReversed_BR
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).addRange(fieldNum(TaxWithholdTrans, CanBeReversed_BR));
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).rangeField(fieldNum(TaxWithholdTrans, CanBeReversed_BR)).value(strFmt('%1', 1));

            if (voucher && transDate)
            {
                taxVersionParam =  strFmt('%1', taxRepCounter);
            }
            else
            {
                taxVersionParam = TaxReport::taxVersion(taxRepVersion, taxWithholdPeriod, fromDate, taxReported);
            }

            // TaxRepCounter_BR Range
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).addRange(fieldNum(TaxWithholdTrans, TaxRepCounter_BR));
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).rangeField(fieldNum(TaxWithholdTrans, TaxRepCounter_BR)).value(strFmt('%1', taxVersionParam));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>TaxWithholdReportTmp_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxWithholdReportTmp_BR))
    ]
    public TaxWithholdReportTmp_BR getTaxWithholdReportTmp()
    {
        select * from taxWithholdTmp;
        return taxWithholdTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxWithholdTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records to the <c>TaxWithholdReportTmp_BR</c> temporary table
    /// </summary>
    protected void insertTaxWithholdTmp()
    {
        taxWithholdTmp.clear();

        taxWithholdTmp.Address                  = TaxAuthorityAddress::address(TaxPeriodHead::find(taxWithholdPeriod).TaxAuthority);
        taxWithholdTmp.CompanyAddress           = CompanyInfo::find().postalAddress().Address;
        taxWithholdTmp.CompanyName              = CompanyInfo::find().name();
        taxWithholdTmp.CompanyPhone             = CompanyInfo::find().phone();
        taxWithholdTmp.CompanyCNPJ              = CompanyInfo::find().cnpjCPFNumber_BR();
        taxWithholdTmp.TaxAuthorityName         = TaxAuthorityAddress::taxAuthorityName(TaxPeriodHead::find(taxWithholdPeriod).TaxAuthority);
        taxWithholdTmp.TaxPeriodName            = TaxPeriodHead::find(taxWithholdPeriod).Name;
        taxWithholdTmp.FromDate                 = fromDate;
        taxWithholdTmp.ToDate                   = toDate;
        taxWithholdTmp.TransDate                = taxWithholdTrans.TransDate;
        taxWithholdTmp.VendAccount              = taxWithholdTrans.VendAccount;
        taxWithholdTmp.TaxWithholdCode          = taxWithholdTrans.TaxWithholdCode;
        taxWithholdTmp.TaxWithholdCurrency      = taxWithholdTrans.TaxWithholdCurrency;
        taxWithholdTmp.CompetenceDate           = taxWithholdTrans.CompetenceDate;
        taxWithholdTmp.WithholdBaseAmount       = taxWithholdTrans.WithholdBaseAmount;
        taxWithholdTmp.TaxTaxWithholdAmount     = taxWithholdTrans.TaxTaxWithholdAmount;
        taxWithholdTmp.TaxWithholdBaseAmount    = taxWithholdTrans.TaxWithholdBaseAmount;
        taxWithholdTmp.TaxWithholdAmount        = taxWithholdTrans.TaxWithholdAmount;

        taxWithholdTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the TaxWithholdReport_BR report
    /// </summary>
    public void processReport()
    {
        Query                               query;
        QueryRun                            queryRun;
        TaxWithholdReportContract_BR        contract;

        contract = this.parmDataContract() as TaxWithholdReportContract_BR;

        // Get TaxWithholdReport_BR Query
        query = new Query(this.parmQuery());

        // Set Values from Contract
        this.setValuesFromContract(contract);

        // Create Query Ranges
        this.createQueryRanges(query);

        // Run the Query
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            taxWithholdTrans = queryRun.get(tableNum(TaxWithholdTrans));

            if (taxWithholdTrans)
            {
                this.insertTaxWithholdTmp();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValuesFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set <c>TaxWithholdReportDP_BR</c> attributes with values from <c>TaxWithholdReportContract_BR</c>
    /// </summary>
    /// <param name="_contract">
    /// The <c>TaxWithholdReportContract_BR</c> object
    /// </param>
    protected void setValuesFromContract(TaxWithholdReportContract_BR _contract)
    {
        taxRepVersion       = _contract.parmTaxRepVersion();
        taxWithholdPeriod   = _contract.parmTaxWithholdPeriod();
        fromDate            = _contract.parmFromDate();
        toDate              = _contract.parmToDate();
        taxRepCounter       = _contract.parmTaxRepCounter();
        transDate           = _contract.parmTransDate();
        voucher             = _contract.parmVoucher();
        taxReported         = _contract.parmTaxReported();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>