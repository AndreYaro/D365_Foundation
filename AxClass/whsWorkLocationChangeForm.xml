<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsWorkLocationChangeForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>whsWorkLocationChangeForm</c> class contains the business logic of the <c>whsWorkLocationChange</c> form.
/// </summary>
class whsWorkLocationChangeForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates load location when OK button is clicked.
    /// </summary>
    /// <param name="_stagingLocation">
    /// Newly defined staging location of the load/shipment.
    /// </param>
    /// <param name="_finalLocationId">
    /// Newly defined final shipping location of the load/shipment.
    /// </param>
    /// <param name="_argsLoadTable">
    /// The load record that the location of it is meant to change.
    /// </param>
    /// <param name="_argsShipmentTable">
    /// The shipment record that the location of it is meant to change.
    /// </param>
    /// <param name="_whsUserId">
    /// New user to be set on work.
    /// </param>
    /// <param name="_whsWorkPriority">
    /// New work priority to be set on work.
    /// </param>
    /// <param name="_whsUnfreezeWork">
    /// true if work should be unfrozen; otherwise, false.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown when staging or final shipping location is not defined.
    /// </exception>
    public void closeOk(str _stagingLocation,
                 str _finalLocationId,
                 WHSLoadTable _argsLoadTable,
                 WHSShipmentTable _argsShipmentTable,
                 WHSUserId _whsUserId,
                 WHSWorkPriority _whsWorkPriority,
                 WHSUnfreezeWork _whsUnfreezeWork)
    {
        if (!_stagingLocation && !_finalLocationId)
        {
            throw error("@WAX1964");
        }

        if (_argsLoadTable && _argsShipmentTable
        || (!_argsLoadTable && !_argsShipmentTable))
        {
            throw error(strFmt("@SYS112535", funcName(), varStr(_argsLoadTable)));
        }

        ttsbegin;

        if (_stagingLocation)
        {
            if (_argsLoadTable.RecId > 0)
            {
                WHSLoadTable::changeLocation(_argsLoadTable.LoadId,
                                             _argsLoadTable.InventLocationId,
                                             _stagingLocation,
                                             WHSParameters::find().StageLocType);
            }
            else
            {
                WHSShipmentTable::changeLocation(_argsShipmentTable.ShipmentId,
                                                 _argsShipmentTable.InventLocationId,
                                                 _stagingLocation,
                                                 WHSParameters::find().StageLocType);
            }
        }

        if (_finalLocationId)
        {
            if (_argsLoadTable.RecId > 0)
            {
                WHSLoadTable::changeLocation(_argsLoadTable.LoadId,
                                             _argsLoadTable.InventLocationId,
                                             _finalLocationId,
                                             WHSParameters::find().ShipFinalLocType);
            }
            else
            {
                WHSShipmentTable::changeLocation(_argsShipmentTable.ShipmentId,
                                                 _argsShipmentTable.InventLocationId,
                                                 _finalLocationId,
                                                 WHSParameters::find().ShipFinalLocType);
            }
        }

        if (_whsUserId != '')
        {
            if (_argsLoadTable.RecId > 0)
            {
                WHSLoadTable::changeWorkUser(_argsLoadTable.LoadId, _whsUserId);
            }
            else
            {
                WHSShipmentTable::changeWorkUser(_argsShipmentTable.ShipmentId, _whsUserId);
            }
        }

        if (_whsWorkPriority != 0)
        {
            if (_argsLoadTable.RecId > 0)
            {
                WHSLoadTable::changeWorkPriority(_argsLoadTable.LoadId, _whsWorkPriority);
            }
            else
            {
                WHSShipmentTable::changeWorkPriority(_argsShipmentTable.ShipmentId, _whsWorkPriority);
            }
        }

        this.freezeOrUnfreezeWorks(_whsUnfreezeWork, _argsLoadTable, _argsShipmentTable);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>freezeOrUnfreezeWorks</Name>
				<Source><![CDATA[
	/// <summary>
    /// Freezes or unfreezes works related to the passes load or shipment parameters.
    /// </summary>
    /// <param name = "_unfreezeWork">true if work should be unfrozen; otherwise, false.</param>
    /// <param name = "_loadTable">The load record that the location of it is meant to change.</param>
    /// <param name = "_shipmentTable">The shipment record that the location of it is meant to change.</param>
    private void freezeOrUnfreezeWorks(
        WHSUnfreezeWork  _unfreezeWork,
        WHSLoadTable     _loadTable,
        WHSShipmentTable _shipmentTable)
    {
        if (_unfreezeWork)
        {
            WHSWorkTable workTable;

            if (_loadTable.RecId > 0)
            {
                while select WorkId, Frozen  from workTable
                    where workTable.Frozen      == NoYes::Yes
                        && workTable.WorkStatus != WHSWorkStatus::Cancelled
                        && workTable.LoadId     == _loadTable.LoadId
                {
                    whsWorkLocationChangeForm::tryUnblockWorkThrowWhenUnblockingFails(workTable.WorkId);
                }
            }
            else
            {
                while select WorkId, Frozen from workTable
                    where workTable.Frozen       == NoYes::Yes
                       && workTable.WorkStatus   != WHSWorkStatus::Cancelled
                        && workTable.ShipmentId  == _shipmentTable.ShipmentId
                {
                    whsWorkLocationChangeForm::tryUnblockWorkThrowWhenUnblockingFails(workTable.WorkId);                                        
                }
            }
        }
	}

]]></Source>
			</Method>
			<Method>
				<Name>tryUnblockWorkThrowWhenUnblockingFails</Name>
				<Source><![CDATA[
    private static void tryUnblockWorkThrowWhenUnblockingFails(WHSWorkId _workId)
    {
        ttsbegin;

        WHSWorkBlocking workBlocking = WHSWorkBlocking::newAllowManualUnBlockFromWorkId(_workId);            
        WHSWorkUnBlockingValidationResult unblockingResult = workBlocking.tryUnblockReasonTypeList(WHSWorkManualUnblock::getManualOverrideUnblockReasonTypes());
       
        if (!unblockingResult.parmCanUnBlockResult())
        {
            throw error(unblockingResult.errorMessage());
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>curFinalLocation_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the current final location details form.
    /// </summary>
    /// <param name="_value">
    /// Location id.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id.
    /// </param>
    public void curFinalLocation_jumpRef(str _value, InventLocationId _inventLocationId)
    {
        MenuFunction    menuFunction;
        Args            args = new Args();

        menuFunction = new MenuFunction(menuitemDisplayStr(WHSLocation), MenuItemType::Display);

        if (_value)
        {
            args.lookupRecord(WMSLocation::find(_value, _inventLocationId));
        }

        // Make sure no queries get passed to the jumpRef form
        menuFunction.copyCallerQuery(CopyCallerQuery::No);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>curStagingLocation_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the current staging location details form.
    /// </summary>
    /// <param name="_value">
    /// Location id.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id.
    /// </param>
    public void curStagingLocation_jumpRef(str _value, InventLocationId _inventLocationId)
    {
        MenuFunction    menuFunction;
        Args            args = new Args();

        menuFunction = new MenuFunction(menuitemDisplayStr(WHSLocation), MenuItemType::Display);

        if (_value)
        {
            args.lookupRecord(WMSLocation::find(_value, _inventLocationId));
        }

        // Make sure no queries get passed to the jumpRef form
        menuFunction.copyCallerQuery(CopyCallerQuery::No);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalLocationId_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens new final location id details form.
    /// </summary>
    /// <param name="_value">
    /// Location id.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id.
    /// </param>
    public void finalLocationId_jumpRef(str _value, InventLocationId _inventLocationId)
    {
        MenuFunction    menuFunction;
        Args            args = new Args();

        menuFunction = new MenuFunction(menuitemDisplayStr(WHSLocation), MenuItemType::Display);

        if (_value)
        {
            args.lookupRecord(WMSLocation::find(_value, _inventLocationId));
        }

        // Make sure no queries get passed to the jumpRef form
        menuFunction.copyCallerQuery(CopyCallerQuery::No);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalLocationId_validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the final location id is valid.
    /// </summary>
    /// <param name="_value">
    /// Location id.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id.
    /// </param>
    /// <returns>
    /// True if the location is valid, false otherwise.
    /// </returns>
    public boolean finalLocationId_validate(str _value, InventLocationId _inventLocationId)
    {
        boolean ret = true;

        if (!WMSLocation::exist(_value, _inventLocationId))
        {
            ret = checkFailed("@WAX1160");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds current final location.
    /// </summary>
    /// <param name="_argsLoadTable">
    /// Load record in args, if the form is opened from a load.
    /// </param>
    /// <param name="_argsShipmentTable">
    /// Shipment record in args, if the form is opened from a shipment.
    /// </param>
    /// <returns>
    /// Current final location id.
    /// </returns>
    public WMSLocationId getFinalLoc(WHSLoadTable _argsLoadTable, WHSShipmentTable _argsShipmentTable)
    {
        WMSLocationId finalLocation;

        if (_argsLoadTable.RecId > 0)
        {
            finalLocation = _argsLoadTable.getFinalLoc();
        }
        else
        {
            finalLocation = _argsShipmentTable.displayFinalLoc();
        }

        return finalLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStagingLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds current staging location.
    /// </summary>
    /// <param name="_argsLoadTable">
    /// Load record in args, if the form is opened from a load.
    /// </param>
    /// <param name="_argsShipmentTable">
    /// Shipment record in args, if the form is opened from a shipment.
    /// </param>
    /// <returns>
    /// Current staging location id.
    /// </returns>
    public WMSLocationId getStagingLoc(WHSLoadTable _argsLoadTable, WHSShipmentTable _argsShipmentTable)
    {
        WMSLocationId stagingLocation;

        if (_argsLoadTable.RecId > 0)
        {
            stagingLocation = _argsLoadTable.getStagingLoc();
        }
        else
        {
            stagingLocation = _argsShipmentTable.displayStagingLoc();
        }

        return stagingLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stagingLocationId_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens new staging location id details form.
    /// </summary>
    /// <param name="_value">
    /// Location id.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id.
    /// </param>
    public void stagingLocationId_jumpRef(str _value, InventLocationId _inventLocationId)
    {
        MenuFunction    menuFunction;
        Args            args = new Args();

        menuFunction = new MenuFunction(menuitemDisplayStr(WHSLocation), MenuItemType::Display);

        if (_value)
        {
            args.lookupRecord(WMSLocation::find(_value, _inventLocationId));
        }

        // Make sure no queries get passed to the jumpRef form
        menuFunction.copyCallerQuery(CopyCallerQuery::No);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>stagingLocationId_validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the staging location id is valid.
    /// </summary>
    /// <param name="_value">
    /// Location id.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id.
    /// </param>
    /// <returns>
    /// True if the location is valid, false otherwise.
    /// </returns>
    public boolean stagingLocationId_validate(str _value, InventLocationId _inventLocationId)
    {
        boolean     ret = true;

        if (!WMSLocation::exist(_value, _inventLocationId))
        {
            ret = checkFailed("@WAX1160");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>