<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentFinalizeStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SourceDocumentFinalizeStrategy</c> class provides the ability to override creation of finalizing subledger journal entries.
/// </summary>
public class SourceDocumentFinalizeStrategy
{
    BusinessEvent businessEvent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doCreateSubledgerJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if finalizing journal entries should be created.
    /// </summary>
    /// <param name="_ledgerPostingType">
    /// The ledger posting type of the subledger journal line entry.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean doCreateSubledgerJournalLine(LedgerPostingType _ledgerPostingType)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current class instance.
    /// </summary>
    /// <param name="_businessEvent">
    /// The business event to use for initialization.
    /// </param>
    private void initialize(BusinessEvent _businessEvent)
    {
        businessEvent = _businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SourceDocumentFinalizeStrategy</c> class based on the passed in business event.
    /// </summary>
    /// <param name="_businessEvent">
    /// The business event to use when creating a new instance of the class.
    /// </param>
    /// <returns>
    /// A new instance of the <c>SourceDocumentFinalizeStrategy</c> class.
    /// </returns>
    public static SourceDocumentFinalizeStrategy newFromBusinessEvent(BusinessEvent _businessEvent)
    {
        SourceDocumentFinalizeStrategy sourceDocumentFinalizeStrategy;

        container cacheKey = [_businessEvent.parmBusinessEventClass(), _businessEvent.parmBusinessEvent()];

        sourceDocumentFinalizeStrategy = SysTransactionScopeCache::get(classStr(SourceDocumentFinalizeStrategy), cacheKey, null);

        if (!sourceDocumentFinalizeStrategy)
        {
            sourceDocumentFinalizeStrategy = SourceDocumentExtensionFactory::newObject(classNum(SourceDocumentFinalizeStrategy), cacheKey);

            Debug::assert(SourceDocumentFinalizeStrategy != null);

            SysTransactionScopeCache::set(classStr(SourceDocumentFinalizeStrategy), cacheKey, sourceDocumentFinalizeStrategy);

            sourceDocumentFinalizeStrategy.initialize(_businessEvent);
        }

        return sourceDocumentFinalizeStrategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>