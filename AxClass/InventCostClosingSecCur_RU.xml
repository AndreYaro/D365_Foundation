<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostClosingSecCur_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventTransCurrencyCostClosingFactoryAttribute(InventTransCurrency_RU::SecondaryCur)]
class InventCostClosingSecCur_RU extends InventCostClosing implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInventCostList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the initial work list for the inventory closing.
    /// </summary>
    protected void createInventCostList()
    {
        InventCostList          inventCostList;
        RecordInsertList        recordInsertList = new RecordInsertList(tableNum(InventCostList),true,true);

        // Recompute BOM levels from scratch

        BOMLevelCalc::construct().runOperation();

        // Create query to find the items for the initial work list:

        Query query = this.queryRun().query();

        // InventTable: sort in order of descending BOM level
        QueryBuildDataSource inventTableDS = query.dataSourceTable(tableNum(InventTable));
        if (!inventTableDS)
            inventTableDS = query.addDataSource(tableNum(InventTable));
        inventTableDS.addSortField(fieldNum(InventTable,bomLevel),SortOrder::Descending);

        // InventTrans: only items with open transactions
        QueryBuildDataSource inventTransDS = query.dataSourceTable(tableNum(InventTable)).addDataSource(tableNum(InventTrans));
        inventTransDS.addRange(fieldNum(InventTrans, ValueOpenSecCur_RU)).value(queryValue(InventTransOpen::Yes));
        inventTransDS.joinMode(JoinMode::ExistsJoin);
        inventTransDS.relations(true);

        // InventModelGroup: only items which have an Inventory Model Type that requires inventory closing
        QueryBuildDataSource inventModelGroupDS = query.dataSourceTable(tableNum(InventTable)).addDataSource(tableNum(InventModelGroup));
        inventModelGroupDS.addRange(fieldNum(InventModelGroup, InventModelSecCur_RU)).value(InventModelType::queryValueMustBeClosed());
        inventModelGroupDS.joinMode(JoinMode::ExistsJoin);
        inventModelGroupDS.relations(true);

        // Execute query and create the initial work list

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            InventTable inventTable = queryRun.get(tableNum(InventTable));

            inventCostList.ItemId            = inventTable.ItemId;
            inventCostList.Voucher           = inventClosing.Voucher;
            inventCostList.NumOfIteration    = 0;
            inventCostList.bomLevel          = inventTable.bomLevel;

            inventCostList.insertUsingInsertList(recordInsertList);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventCostListRecordSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the initial work list for the inventory closing.
    /// </summary>
    protected void createInventCostListRecordSet()
    {
        InventCostList          inventCostList;
        InventTable             inventTable;
        InventCostClosingUpdateView_RU  updateView;
        InventModelGroupItem    inventModelGroupItem;
        InventModelGroup        inventModelGroup;
        Voucher                 voucherNumber = inventClosing.Voucher;

        // Recompute BOM levels from scratch
        BOMLevelCalc::construct().runOperation();

        InventClosing prevInventClosing = InventClosing::findPrevClosingDate(inventClosing.TransDate, inventClosing.InventTransCurrency_RU);

        insert_recordset inventCostList
            (ItemId, bomLevel, Voucher)
            select  ItemId, bomLevel, voucherNumber
                from inventTable
                exists join updateView
                    where updateView.ItemId == inventTable.ItemId
                       && updateView.TransDate > prevInventClosing.TransDate
                       && updateView.TransDate <= inventClosing.TransDate
                exists join inventModelGroupItem
                exists join inventModelGroup
                where   inventTable.DataAreaId == inventModelGroupItem.ItemDataAreaId &&
                        inventTable.ItemId == inventModelGroupItem.ItemId &&
                        inventModelGroupItem.ModelGroupDataAreaId == inventModelGroup.DataAreaId &&
                        inventModelGroupItem.ModelGroupId == inventModelGroup.ModelGroupId &&
                        (   inventModelGroup.InventModelSecCur_RU >= InventModel::FIFO &&
                            inventModelGroup.InventModelSecCur_RU <= InventModel::AverageCostDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS102314";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>