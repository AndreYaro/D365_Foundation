<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBalanceListDP_MY</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustBalanceListDP_MY</c> class is the report data provider class for the
///    <c>CustBalanceList_MY</c> SSRS report.
/// </summary>
/// <remarks>
///    This is the RDP class for the <c>CustBalanceList_MY</c> SSRS report.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(CustBalanceList_MY)),
    SRSReportParameterAttribute(classStr(CustBalanceListContract_MY))
]
class CustBalanceListDP_MY extends SRSReportDataProviderBase
{
    CustTrans               custTrans;
    CustTable               custTable;
    LedgerJournalTrans      ledgerJournalTrans;
    CustBalanceListTmp_MY   custBalanceList_MYTmp;

    AmountMST               nowBalance;

    ExchAdjustment          exchAdj;

    TransDate               perDate;
    NoYes                   printEmpty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpCustBalanceList_MY</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>TmpCustBalanceList_MY</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TmpCustBalanceList_MY</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('CustBalanceListTmp_MY')]
    public CustBalanceListTmp_MY getTmpCustBalanceList_MY()
    {
        select * from custBalanceList_MYTmp;
        return custBalanceList_MYTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic.This method will be called by SSRS at
    ///    runtime.This method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00001, funcName());

        QueryRun                            queryRun;
        boolean                             hasLedgerJourTrans;
        str                                 accountTitle;
        str                                 voucherTitle;
        DimensionAttributeValueCombination  dimAttrValueCombo;
        CustBalanceListContract_MY          contract;

        contract = this.parmDataContract() as CustBalanceListContract_MY;

        perDate = contract.parmPerDate();
        printEmpty = contract.parmPrintEmpty();

        hasLedgerJourTrans = false;
        accountTitle = 'Yes';
        voucherTitle = 'Yes';

        custTable.recordLevelSecurity(true);

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            custTable = queryRun.get(tablenum(CustTable));

            nowBalance = custTable.balanceMST(dateNull(), perDate);

            if (nowBalance || printEmpty)
            {
                custBalanceList_MYTmp.CustTable_AccountNum = custTable.AccountNum;
                custBalanceList_MYTmp.CustTable_Name = custTable.name();
                custBalanceList_MYTmp.CustTable_MandatoryCreditLimit = custTable.MandatoryCreditLimit;
                custBalanceList_MYTmp.CustTable_CreditRating = custTable.CreditRating;
                custBalanceList_MYTmp.CustTable_CreditMax = custTable.CreditMax;
                custBalanceList_MYTmp.NowBalance = nowBalance;
                custBalanceList_MYTmp.ExceedMax = custTable.exceedMax(nowBalance);
                custBalanceList_MYTmp.HeaderTitle = accountTitle;

                while select ledgerJournalTrans where
                    ledgerJournalTrans.AccountType   == LedgerJournalACType::Cust &&
                   (ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed ||
                   ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Recieved)
                join RecId from dimAttrValueCombo where
                    dimAttrValueCombo.RecId          == ledgerJournalTrans.LedgerDimension &&
                    dimAttrValueCombo.DisplayValue   == custTable.AccountNum
                {
                    hasLedgerJourTrans = true;
                    custBalanceList_MYTmp.LedgerJournalTrans_Voucher = ledgerJournalTrans.Voucher;
                    custBalanceList_MYTmp.LedgerJournalTrans_TransDate = ledgerJournalTrans.TransDate;
                    custBalanceList_MYTmp.LedgerJournalTrans_Due = ledgerJournalTrans.Due;
                    custBalanceList_MYTmp.LedgerJournalTrans_AmountCurCredit = ledgerJournalTrans.AmountCurCredit;
                    custBalanceList_MYTmp.LedgerJournalTrans_OffsetAccountType = ledgerJournalTrans.OffsetAccountType;
                    custBalanceList_MYTmp.LedgerJournalTrans_OffsetLedgerDimension = ledgerJournalTrans.parmOffsetLedgerDimension();
                    custBalanceList_MYTmp.LineTitle = voucherTitle;
                    voucherTitle = 'No';
                    custBalanceList_MYTmp.insert();
                    custBalanceList_MYTmp.CustTable_CreditMax = 0;
                    custBalanceList_MYTmp.NowBalance = 0;
                    custBalanceList_MYTmp.ExceedMax = 0;
                } //while select

                if (!hasLedgerJourTrans)
                {
                    custBalanceList_MYTmp.LineTitle = 'No';
                    custBalanceList_MYTmp.insert();
                } //if
            } //if
            custBalanceList_MYTmp.clear();
            voucherTitle = 'Yes';
            if (hasLedgerJourTrans)
            {
                accountTitle = 'Yes';
            }
            else
            {
                accountTitle = 'No';
            }
            hasLedgerJourTrans = false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>