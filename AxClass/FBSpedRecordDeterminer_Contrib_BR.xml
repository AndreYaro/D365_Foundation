<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedRecordDeterminer_Contrib_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>FBSpedRecordDeterminer_Contrib_BR</c> class determines the type of record for a fiscal document related to sped contributions.
/// </summary>
class FBSpedRecordDeterminer_Contrib_BR extends FBSpedRecordDeterminer_BR
{
    protected FiscalOrganization_BR fiscalOrganization;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the type of record the fiscal document should be exported to in the Sped Contributions file.
    /// </summary>
    /// <returns>
    ///     The <c>FBSpedFileRecordIdentification_BR</c> representing the Sped Contributions record where the fiscal document should be exported to.
    /// </returns>
    public FBSpedFileRecordIdentification_BR determineRecord()
    {
        FBSpedFileRecordIdentification_BR    record;
        FiscalDocumentModel_BR               model = fiscalDocument.Model;
        FiscalDocDirection_BR                direction = fiscalDocument.Direction;
        boolean                              isElectricEnergyFiscalDocument = this.isElectricEnergyCFOP(fiscalDocument.getDefaultCFOP().CFOPId);

        if (fbBookingPeriodFiscalDocument.HasCofins || fbBookingPeriodFiscalDocument.HasPis || this.parmHasPisCofins())
        {
            if (model == #FiscalDocModel_01
                || model == #FiscalDocModel_1B
                || model == #FiscalDocModel_04
                || (model == #FiscalDocModel_55 && !isElectricEnergyFiscalDocument)
                || model == #FiscalDocModel_65)
            {
                if (this.shouldExportDocumentByDocument(direction))
                {
                    record = #SpedRecord_C100;
                }
                else
                {
                    record = '';
                }
            }
            else if (fiscalDocument.Model == #FiscalDocModel_02 && fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing)
            {
                record = #SpedRecord_C380;
            }
            else if (model  == #FiscalDocModel_06
                || model == #FiscalDocModel_28
                || model == #FiscalDocModel_29
                || (model == #FiscalDocModel_55 && isElectricEnergyFiscalDocument)
                || model == FiscalBooksConstants_BR::FiscalDocModel_66)
            {
                if (this.shouldExportDocumentByDocument(direction))
                {
                    record = #SpedRecord_C500;
                }
                else
                {
                    record = '';
                }
            }
            else if (model == #FiscalDocModel_SE)
            {
                record = #SpedRecord_A100;
            }
            else if (model == #FiscalDocModel_07
                || model == #FiscalDocModel_08
                || model == #FiscalDocModel_8B
                || model == #FiscalDocModel_09
                || model == #FiscalDocModel_10
                || model == #FiscalDocModel_11
                || model == #FiscalDocModel_26
                || model == #FiscalDocModel_27
                || model == #FiscalDocModel_57
                || model == FiscalBooksConstants_BR::FiscalDocModel_63
                || model == FiscalBooksConstants_BR::FiscalDocModel_67)
            {
                record = #SpedRecord_D100;
            }
            else if (model == #FiscalDocModel_21
                || model == #FiscalDocModel_22)
            {
                record = #SpedRecord_D500;
            }
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isElectricEnergyCFOP</Name>
				<Source><![CDATA[
        private boolean isElectricEnergyCFOP(CFOPId_BR _cfopId)
    {
        container electricEnergyCFOPs      = [FiscalBooksConstants_BR::CFOP_1250, FiscalBooksConstants_BR::CFOP_1251, FiscalBooksConstants_BR::CFOP_1252, FiscalBooksConstants_BR::CFOP_1253, FiscalBooksConstants_BR::CFOP_1254, FiscalBooksConstants_BR::CFOP_1255, FiscalBooksConstants_BR::CFOP_1256, FiscalBooksConstants_BR::CFOP_1257, 
                                              FiscalBooksConstants_BR::CFOP_2250, FiscalBooksConstants_BR::CFOP_2251, FiscalBooksConstants_BR::CFOP_2252, FiscalBooksConstants_BR::CFOP_2253, FiscalBooksConstants_BR::CFOP_2254, FiscalBooksConstants_BR::CFOP_2255, FiscalBooksConstants_BR::CFOP_2256, FiscalBooksConstants_BR::CFOP_2257, 
                                              FiscalBooksConstants_BR::CFOP_3250, FiscalBooksConstants_BR::CFOP_3251, FiscalBooksConstants_BR::CFOP_3254, FiscalBooksConstants_BR::CFOP_3255, FiscalBooksConstants_BR::CFOP_3256, FiscalBooksConstants_BR::CFOP_3257, FiscalBooksConstants_BR::CFOP_1207, FiscalBooksConstants_BR::CFOP_2207, FiscalBooksConstants_BR::CFOP_3207];
        CFOPId_BR normalizedCFOPId         = strKeep(_cfopId, '0123456789');

        return conFind(electricEnergyCFOPs, normalizedCFOPId) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>FBSpedRecordDeterminer_Contrib_BR</c> class.
    /// </summary>
    /// <param name="_fiscalDocument">
    ///     A <c>FiscalDocument_BR</c> table buffer representing the fiscal document for which the record will be determined.
    /// </param>
    public void new(FiscalDocument_BR _fiscalDocument)
    {
        FiscalEstablishment_BR fiscalEstablishment;

        super(_fiscalDocument);

        fiscalEstablishment = fbBookingPeriodFiscalDocument.bookingPeriod().fiscalEstablishment();
        fiscalOrganization  = FiscalOrganization_BR::find(fiscalEstablishment.FiscalOrganization_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldExportDocumentByDocument</Name>
				<Source><![CDATA[
        private boolean shouldExportDocumentByDocument(FiscalDocDirection_BR _direction)
    {
        if (!(fiscalOrganization.AssessmentRegimen == FBContribAssessmentRegimen_BR::Cumulative && _direction == FiscalDocDirection_BR::Incoming))
        {
            return true;
        }
        else
        {
            // When the fiscal organization assessment regimen is cumulative and the fiscal document direction is incoming, so this fiscal document should not be exported.
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalOrganization</Name>
				<Source><![CDATA[
    internal FiscalOrganization_BR parmFiscalOrganization(FiscalOrganization_BR _fiscalOrganization = fiscalOrganization)
    {
        fiscalOrganization = _fiscalOrganization;
        return fiscalOrganization;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>