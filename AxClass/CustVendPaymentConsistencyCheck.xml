<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymentConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.CashManagement.Instrumentation;
/// <summary>
/// The <c>CustVendPaymentConsistencyCheck</c> performs data consistency checks for customer and vendor payment data.
/// </summary>
public class CustVendPaymentConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
    const int LogDetailLimit = 25;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the configuration key number for the consistency check.
    /// </summary>
    /// <returns>
    /// The configuration key number for the consistency check.
    /// </returns>
    public configurationKeyId configurationKey()
    {
        return configurationKeyNum(LedgerBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an integer representing when in the order of execution this consistency check should run.
    /// </summary>
    /// <returns>An integer representing when in the order of execution this consistency check should run.</returns>
    public Integer executionOrder()
    {
        return 150;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.checkFixCustVendPaymProposalLine();

        this.checkFixSpecTransSpecSide();

        this.checkFixSpecTransRefSide();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the consistency check to be used in the dialog.
    /// </summary>
    /// <returns>The name of the consistency check to be used in the dialog.</returns>
    public static ClassDescription description()
    {
        return "@SYS333881";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the help text of the consistency check to be used in the dialog.
    /// </summary>
    /// <returns>The help text of the consistency check to be used in the dialog.</returns>
    public static HelpTxt helpText()
    {
        return "@CashManagement:PaymentConsistencyCheckHelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SysConsistencyCheckJob consistencyCheckJob = new SysConsistencyCheckJob(classnum(CustVendPaymentConsistencyCheck));

        if (!consistencyCheckJob.prompt())
        {
            return;
        }

        consistencyCheckJob.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixSpecTransSpecSide</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>SpecTrans</c> records that are referencing nonexistent originating records.
    /// </summary>
    private void checkFixSpecTransSpecSide()
    {
        ttsbegin;

        SpecTrans specTransTableIdSelect;
        SpecTrans specTransSelect;
        TmpDataAreaRecIdFilter tmpSpecTrans;
        int numberOfErrors;

        SpecTransLogger logger = new SpecTransLogger();
        RecordInsertList insertList = new RecordInsertList(tableNum(TmpDataAreaRecIdFilter), true, true, true, true, true, tmpSpecTrans);

        while select SpecTableId from specTransTableIdSelect
            group by SpecTableId
        {
            DictTable dictTable = new DictTable(specTransTableIdSelect.SpecTableId);
            Common originator = dictTable.makeRecord();

            numberOfErrors = 0;

            while select crosscompany specTransSelect
                where specTransSelect.SpecTableId == dictTable.id()
                notexists join originator
                    where originator.DataAreaId == specTransSelect.SpecCompany
                        && originator.RecId == specTransSelect.SpecRecId
                        && originator.TableId == specTransSelect.SpecTableId
            {
                numberOfErrors++;
              
                tmpSpecTrans.RefRecId = specTransSelect.RecId;
                insertList.add(tmpSpecTrans);

                if (numberOfErrors < LogDetailLimit)
                {
                    logger.logSpecTransConsistencyCheckDetails(specTransSelect);
                }

                this.infoMessageForSpecTrans(specTransSelect, dictTable);
            }
            
            this.logNumberOfErrors(numberOfErrors);
        }

        insertList.insertDatabase();

        this.deleteSpecTrans(specTransSelect, tmpSpecTrans);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixSpecTransRefSide</Name>
				<Source><![CDATA[
    private void checkFixSpecTransRefSide()
    {
        ttsbegin;

        SpecTrans specTransTableIdSelect;
        SpecTrans specTransSelect;
        TmpDataAreaRecIdFilter tmpSpecTrans;
        int numberOfErrors;

        SpecTransLogger logger = new SpecTransLogger();
        RecordInsertList insertList = new RecordInsertList(tableNum(TmpDataAreaRecIdFilter), true, true, true, true, true, tmpSpecTrans);

        while select RefTableId from specTransTableIdSelect
            group by RefTableId
        {
            DictTable dictTable = new DictTable(specTransTableIdSelect.RefTableId);
            Common originator = dictTable.makeRecord();

            numberOfErrors = 0;

            while select crosscompany specTransSelect
                where specTransSelect.RefTableId == dictTable.id()
                notexists join originator
                    where originator.DataAreaId == specTransSelect.RefCompany
                        && originator.RecId == specTransSelect.RefRecId
                        && originator.TableId == specTransSelect.RefTableId
            {
                numberOfErrors++;
              
                tmpSpecTrans.RefRecId = specTransSelect.RecId;
                insertList.add(tmpSpecTrans);

                if (numberOfErrors < LogDetailLimit)
                {
                    logger.logSpecTransConsistencyCheckDetails(specTransSelect);
                }

                this.infoMessageForSpecTrans(specTransSelect, dictTable);
            }
            
            this.logNumberOfErrors(numberOfErrors);
        }

        insertList.insertDatabase();

        this.deleteSpecTrans(specTransSelect, tmpSpecTrans);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixCustVendPaymProposalLine</Name>
				<Source><![CDATA[
    private void checkFixCustVendPaymProposalLine()
    {
        this.checkFixCustVendPaymProposalLineForDeletedJournal();
        this.checkFixCustVendPaymProposalLineForPostedJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixCustVendPaymProposalLineForDeletedJournal</Name>
				<Source><![CDATA[
    private void checkFixCustVendPaymProposalLineForDeletedJournal()
    {
        ttsbegin;

        CustVendPaymProposalLine custVendPaymProposalLine;
        LedgerJournalTable ledgerJournalTable;
        TmpDataAreaRecIdFilter tmpCustVendPaymentProposalLine;

        int numberOfErrors = 0;
        int numberOfSpecTransFound = 0;

        RecordInsertList insertList = new RecordInsertList(tableNum(TmpDataAreaRecIdFilter), true, true, true, true, true, tmpCustVendPaymentProposalLine);

        while select custVendPaymProposalLine
            where custVendPaymProposalLine.JournalId != ''
            notexists join ledgerJournalTable
                where ledgerJournalTable.DataAreaId == custVendPaymProposalLine.DataAreaId
                    && ledgerJournalTable.JournalNum == custVendPaymProposalLine.JournalId
        {
            numberOfErrors++;

            tmpCustVendPaymentProposalLine.RefRecId = custVendPaymProposalLine.RecId;
            insertList.add(tmpCustVendPaymentProposalLine);

            if (numberOfSpecTransFound < LogDetailLimit)
            {
                boolean hasBeenLogged = this.logSpecTrans(custVendPaymProposalLine);

                if (hasBeenLogged)
                {
                    numberOfSpecTransFound++;
                }
            }

            this.infoMessageForCustVendPaymProposalLine(custVendPaymProposalLine);
        }

        insertList.insertDatabase();

        this.deleteCustVendPaymentProposalLine(custVendPaymProposalLine, tmpCustVendPaymentProposalLine);

        this.logNumberOfErrors(numberOfErrors);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSpecTransFromPaymentProposalLine</Name>
				<Source><![CDATA[
    private SpecTrans findSpecTransFromPaymentProposalLine(CustVendPaymProposalLine _custVendPaymProposalLine)
    {
        SpecTrans specTrans;

        specTrans = SpecTrans::findBySpec(_custVendPaymProposalLine.DataAreaId, tableNum(CustVendPaymProposalLine), _custVendPaymProposalLine.RecId);

        if (!specTrans)
        {
            specTrans = SpecTrans::findByRef(_custVendPaymProposalLine.DataAreaId, tableNum(CustVendPaymProposalLine), _custVendPaymProposalLine.RecId);
        }

        return specTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTrackingNumbers</Name>
				<Source><![CDATA[
    private void updateTrackingNumbers(int _numberOfErrors)
    {
        this.updateNotCorrected();

        if (this.isFixMode())
        {
            this.updateCorrected(_numberOfErrors);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixCustVendPaymProposalLineForPostedJournal</Name>
				<Source><![CDATA[
    private void checkFixCustVendPaymProposalLineForPostedJournal()
    {
        ttsbegin;

        CustVendPaymProposalLine custVendPaymProposalLine;
        LedgerJournalTable ledgerJournalTable;
        TmpDataAreaRecIdFilter tmpCustVendPaymentProposalLine;

        RecordInsertList insertList = new RecordInsertList(tableNum(TmpDataAreaRecIdFilter), true, true, true, true, true, tmpCustVendPaymentProposalLine);

        int numberOfErrors = 0;
        int numberOfSpecTransFound = 0;

        while select custVendPaymProposalLine
            where custVendPaymProposalLine.JournalId != ''
            exists join ledgerJournalTable
                where ledgerJournalTable.DataAreaId == custVendPaymProposalLine.DataAreaId
                    && ledgerJournalTable.JournalNum == custVendPaymProposalLine.JournalId
                    && ledgerJournalTable.Posted == NoYes::Yes
        {
            numberOfErrors++;

            tmpCustVendPaymentProposalLine.RefRecId = custVendPaymProposalLine.RecId;
            insertList.add(tmpCustVendPaymentProposalLine);

            if (numberOfSpecTransFound < LogDetailLimit)
            {
                boolean hasBeenLogged = this.logSpecTrans(custVendPaymProposalLine);

                if (hasBeenLogged)
                {
                    numberOfSpecTransFound++;
                }
            }

            this.infoMessageForCustVendPaymProposalLine(custVendPaymProposalLine);
        }

        insertList.insertDatabase();

        this.deleteCustVendPaymentProposalLine(custVendPaymProposalLine, tmpCustVendPaymentProposalLine);

        this.logNumberOfErrors(numberOfErrors);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSpecTrans</Name>
				<Source><![CDATA[
    private boolean logSpecTrans(CustVendPaymProposalLine _custVendPaymProposalLine)
    {
        SpecTransLogger logger = new SpecTransLogger();
        SpecTrans specTrans = this.findSpecTransFromPaymentProposalLine(_custVendPaymProposalLine);

        boolean hasBeenLogged = false;

        if (specTrans)
        {
            hasBeenLogged = true;

            logger.logSpecTransConsistencyCheckDetails(specTrans);
        }

        return hasBeenLogged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoMessageForCustVendPaymProposalLine</Name>
				<Source><![CDATA[
    private void infoMessageForCustVendPaymProposalLine(CustVendPaymProposalLine _custVendPaymProposalLine)
    {
        warning(strFmt("@CashManagement:PaymentConsistencyCheckPaymProposalLineWarning",
            tableStr(CustVendPaymProposalLine),
            fieldStr(CustVendPaymProposalLine, RecId),
            _custVendPaymProposalLine.RecId,
            fieldStr(CustVendPaymProposalLine, JournalId),
            _custVendPaymProposalLine.JournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoMessageForSpecTrans</Name>
				<Source><![CDATA[
    private void infoMessageForSpecTrans(SpecTrans _specTrans, DictTable dictTable)
    {
        warning(strFmt("@CashManagement:PaymentConsistencyCheckSpecTransWarning",
            tableStr(SpecTrans),
            fieldStr(SpecTrans, RecId),
            _specTrans.RecId,
            dictTable.name()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustVendPaymentProposalLine</Name>
				<Source><![CDATA[
    private void deleteCustVendPaymentProposalLine(CustVendPaymProposalLine _custVendPaymProposalLine, TmpDataAreaRecIdFilter _tmpCustVendPaymProposalLine)
    {
        if (this.isFixMode())
        {
            _custVendPaymProposalLine.skipDataMethods(true);
            _custVendPaymProposalLine.skipDatabaseLog(true);
            _custVendPaymProposalLine.skipEvents(true);
            _custVendPaymProposalLine.skipNumberSequenceCheck(true);
            _custVendPaymProposalLine.skipPostLoad(true);
            _custVendPaymProposalLine.skipTTSCheck(true);
            _custVendPaymProposalLine.skipDeleteActions(true);

            delete_from _custVendPaymProposalLine
                exists join _tmpCustVendPaymProposalLine
                where _custVendPaymProposalLine.RecId == _tmpCustVendPaymProposalLine.RefRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTrans</Name>
				<Source><![CDATA[
    private void deleteSpecTrans(SpecTrans _specTrans, TmpDataAreaRecIdFilter _tmpSpecTrans)
    {
        if (this.isFixMode())
        {
            _specTrans.skipDataMethods(true);
            _specTrans.skipDatabaseLog(true);
            _specTrans.skipEvents(true);
            _specTrans.skipNumberSequenceCheck(true);
            _specTrans.skipPostLoad(true);
            _specTrans.skipTTSCheck(true);
            _specTrans.skipDeleteActions(true);

            delete_from _specTrans
                exists join _tmpSpecTrans
                where _specTrans.RecId == _tmpSpecTrans.RefRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logNumberOfErrors</Name>
				<Source><![CDATA[
    private void logNumberOfErrors(int _numberOfErrors)
    {
        if (_numberOfErrors > 0) 
        {
            CashManagementEventSource eventSource = CashManagementEventSource::Log;
            eventSource.EventWritePaymProposalLineConsistencyCheck(_numberOfErrors);
            this.updateTrackingNumbers(_numberOfErrors);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixMode</Name>
				<Source><![CDATA[
    private boolean isFixMode()
    {        
        return (this.checkFix() == CheckFix::Fix);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>