<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInternalOrgTreeDatasource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailInternalOrgTreeDatasource</c> class is used to build the tree for the forms showing retail internal organization hierarchy.
/// </summary>
class RetailInternalOrgTreeDatasource
{
    #MACROLIB.resAppl
    Map      treeRecIdIdxMap;
    Map      treeBaseParentDataMap;
    RefRecId treeNodeIdIdx[,1];
    int      currParentNodeId[];
    int      currIdx;
    int64    baseParentData[];
    str      baseDataName[];
    int64    baseData[];
    int      enabledData[];
    int      orgNodeColor;
    int64    treeSelectedData;
    boolean  isCatalog;

    ImageListAppl_Prod imageListAppl_Prod;
    OMInternalOrganization  omInternalOrganization;
    Formtreecontrol         hierarchyTreeCtrl;
    OMHierarchyType         omHierarchyType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the Organization hierarchy tree.
    /// </summary>
    /// <remarks>
    /// This function is used to build Internal organization, Assortment and RetailPOSPosting view in a tree.
    /// </remarks>
    public void buildTree()
    {
        FormTreeItem    treeItem;
        FormTreeItem    parentTreeItem;
        int     newId   = 0;
        int     selectedItem = 0;
        int     i = 0;
        int     arrayLength;
        boolean flag;
        int     parentCount;
        int64   parentBaseData;
        OMHierarchyRelationship omHierarchyRelationship;

        orgNodeColor  = #ImageItem;// 7690

        // Fetch the topmost organization- will return 1-record
        select firstonly RecId, Name from omInternalOrganization
            join RecId from omHierarchyRelationship
                where omHierarchyRelationship.ChildOrganization == omInternalOrganization.RecId
                    && omHierarchyRelationship.ParentOrganization == 0
                    && omHierarchyRelationship.HierarchyType == omHierarchyType.RecId;

        arrayLength = this.getOrgTreeData(omInternalOrganization);

        if (arrayLength < 1)
        {
            return;
        }

        treeRecIdIdxMap = new Map(Types::Int64, Types::Integer);
        treeNodeIdIdx[0]        = 0;
        currParentNodeId[0]     = 0;
        currIdx                 = 0;

        hierarchyTreeCtrl.deleteAll();

        for (i = 1; i <= arrayLength; i++)
        {
            if (baseParentData[i] == 0)
            {
                newId = SysFormTreeControl::addTreeItem(hierarchyTreeCtrl,
                                                baseDataName[i],
                                                0,
                                                baseData[i],
                                                enabledData[i] == 0 ? 0 : this.nodeImage(orgNodeColor),
                                                true);
                treeItem = hierarchyTreeCtrl.getItem(newId);

                if (enabledData[i] != 0)
                {
                    treeItem.stateBold(true);
                }

                hierarchyTreeCtrl.setItem(treeItem);

                currIdx++;
                currParentNodeId[currIdx]           = newId;
                this.treeRecIdIdx(true, baseData[i], newId);
            }
            else
            {
                parentTreeItem = hierarchyTreeCtrl.getItem(treeRecIdIdxMap.lookup(baseParentData[i]));
                flag = true;

                newId = SysFormTreeControl::addTreeItem(hierarchyTreeCtrl,
                                                        baseDataName[i],
                                                        treeRecIdIdxMap.lookup(baseParentData[i]),
                                                        baseData[i],
                                                        this.nodeImage(orgNodeColor),
                                                        false);

                treeItem = hierarchyTreeCtrl.getItem(newId);
                treeItem.data(baseData[i]);
                treeItem.stateBold(true);
                treeItem.selectedImage(this.nodeImage(orgNodeColor));
                treeItem.overlayImage(this.nodeImage(orgNodeColor));
                parentCount = 1;
                parentTreeItem.children(1);
                hierarchyTreeCtrl.setItem(parentTreeItem);

                while (flag)
                {
                    if (parentCount > 1)
                    {
                        if (treeBaseParentDataMap.lookup(parentBaseData) > 0)
                        {
                            parentTreeItem = hierarchyTreeCtrl.getItem(treeRecIdIdxMap.lookup(treeBaseParentDataMap.lookup(parentBaseData)));

                            if (treeBaseParentDataMap.lookup(parentBaseData))
                            {
                                parentBaseData = treeBaseParentDataMap.lookup(parentBaseData);
                            }
                            else
                            {
                                flag = false;
                            }
                        }
                        else
                        {
                            flag = false;
                        }
                    }
                    else
                    {
                        parentBaseData = parentTreeItem.data();
                    }

                    parentCount++;
                }

                treeItem.children(0);

                hierarchyTreeCtrl.setItem(treeItem);
                this.treeRecIdIdx(true, baseData[i], newId);
            }
        }
        // Expand all the nodes in the tree to make the whole thing visible to the user
        for (i = 1; i <= arrayLength; i++)
        {
            hierarchyTreeCtrl.expand(treeRecIdIdxMap.lookup(baseData[i]), FormTreeExpand::Expand);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrgTreeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns internal orgainzation tree nodes.
    /// </summary>
    /// <param name="_omInternalOrganization">
    /// A buffer for table <c>OMInternalOrganization</c> to find out the tree nodes.
    /// </param>
    /// <returns>
    /// Returns total tree nodes.
    /// </returns>
    int getOrgTreeData(OMInternalOrganization _omInternalOrganization)
    {
        OMExplodedOrganizationSecurityGraph     explodedOrg;
        OMExplodedOrganizationSecurityGraph     distanceFromRoot;
        OMInternalOrganization                  localOMInternalOrg;
        int cnt = 0;
        RecId prevOrgId = 0;

        if (_omInternalOrganization.RecId)
        {
            cnt++;
            baseData[cnt]       = _omInternalOrganization.RecId;
            baseDataName[cnt]   = _omInternalOrganization.Name;
            baseParentData[cnt] = 0;
            enabledData[cnt]    = 1;

            this.treeBaseParentData(true, baseData[cnt], baseParentData[cnt]);
        }
        else // No root org was found
        {
            return 0;
        }

        // Find all child organizations, and sort by level in the tree to guarantee that
        // parents appear BEFORE their children in the array for the buildTree method
        while select RecId, AncestorOrganization, Organization from explodedOrg
            where explodedOrg.Distance == 1
                && explodedOrg.omHierarchyType == omHierarchyType.RecId
            join RecId, Name from localOMInternalOrg
                where explodedOrg.Organization == localOMInternalOrg.RecId
            join Distance from distanceFromRoot
                order by distanceFromRoot.Distance
                where distanceFromRoot.AncestorOrganization == baseData[1]
                    && distanceFromRoot.Organization == explodedOrg.Organization
                    && distanceFromRoot.omHierarchyType == omHierarchyType.RecId
        {
            if (prevOrgId != localOMInternalOrg.RecId)
            {
                cnt++;
                baseData[cnt]       = explodedOrg.Organization;
                baseDataName[cnt]   = localOMInternalOrg.Name;
                baseParentData[cnt] = explodedOrg.AncestorOrganization;
                this.treeBaseParentData(true, baseData[cnt], baseParentData[cnt]);
                enabledData[cnt]    = 1;
            }
            prevOrgId = localOMInternalOrg.RecId;
        }

        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the organization hierarchy tree and it's image.
    /// </summary>
    /// <param name="_formTreeControl">
    /// An instance of <c>FormTreeControl</c>.
    /// </param>
    /// <param name="_omHierarchyType">
    /// An record of <c>OmHierarchyType</c> table.
    /// </param>
    protected void new(FormTreeControl _formTreeControl,
                        OMHierarchyType _omHierarchyType)
    {
        // Initializes tree
        treeBaseParentDataMap = new Map(Types::Int64, Types::Int64);

        // Initializes the image on the tree node.
        imageListAppl_Prod = new ImageListAppl_Prod();
        _formTreeControl.setImagelist(imageListAppl_Prod.imageList());

        hierarchyTreeCtrl   = _formTreeControl;
        omHierarchyType     = _omHierarchyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Organization hierarchy node image.
    /// </summary>
    /// <param name="imageNumber">
    /// A image number for organization node.
    /// </param>
    /// <returns>
    /// An organization node image number.
    /// </returns>
    int nodeImage(int imageNumber)
    {
        int     ret;
        if (imageNumber != -1)
        {
            ret = imageListAppl_Prod.image(imageNumber);
        }
        else
        {
            ret = -1;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectOrg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the tree node with the specified data value.
    /// </summary>
    /// <param name="_omInternalOrgRecId">
    /// The organization id of the node to be selected.
    /// </param>
    public void selectOrg(RefRecId _omInternalOrgRecId)
    {
        anytype treeElementData;
        anytype currentRecordId;
        int idx;

        OMOperatingUnit omOperatingUnitSelect = OMOperatingUnit::find(_omInternalOrgRecId, OMOperatingUnitType::RetailChannel);

        hierarchyTreeCtrl.lockWindowUpdate(true);

        if (omOperatingUnitSelect)
        {
            idx = hierarchyTreeCtrl.getRoot();
            treeElementData = hierarchyTreeCtrl.getItem(idx).data();
            currentRecordId = omOperatingUnitSelect.RecId;

            while (treeElementData != currentRecordId)
            {
                idx = hierarchyTreeCtrl.getNextVisible(idx);
                if (idx)
                {
                    treeElementData = hierarchyTreeCtrl.getItem(idx).data();
                }
                else
                {
                    throw error("@SYS22539");
                }
            }

            hierarchyTreeCtrl.select(idx);
            hierarchyTreeCtrl.setFocus();
        }

        hierarchyTreeCtrl.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeBaseParentData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds selected organization into tree map.
    /// </summary>
    /// <param name="_set">
    /// The value which is currently selected in tree.
    /// </param>
    /// <param name="_refRecId">
    /// The record id of selected organization node.
    /// </param>
    /// <param name="_idx">
    /// An Id of selected record.
    /// </param>
    /// <returns>
    /// returns the Id from map if found.
    /// </returns>
    RefRecId treeBaseParentData(boolean _set, RefRecId _refRecId, RefRecId _idx )
    {
        if (treeBaseParentDataMap)
        {
            if (_set)
            {
                treeBaseParentDataMap.insert(_refRecId, _idx);
                return _idx;
            }
            else
            {
                if (treeBaseParentDataMap.exists(_refRecId))
                {
                    return treeBaseParentDataMap.lookup(_refRecId);
                }
            }
        }

        return _idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeRecIdIdx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the organization node into tree.
    /// </summary>
    /// <param name="_set">
    /// Sets the value in tree.
    /// </param>
    /// <param name="_refRecId">
    /// An record id of base parent node.
    /// </param>
    /// <param name="_idx">
    /// An record Id of node to be insert.
    /// </param>
    /// <returns>
    /// A tree node.
    /// </returns>
    int treeRecIdIdx(boolean _set, RefRecId _refRecId, int _idx = 0)
    {
        if (treeRecIdIdxMap)
        {
            if (_set)
            {
                treeRecIdIdxMap.insert(_refRecId, _idx);
                return _idx;
            }
            else
            {
                if (treeRecIdIdxMap.exists(_refRecId))
                {
                    return treeRecIdIdxMap.lookup(_refRecId);
                }
            }
        }

        return _idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of this class.
    /// </summary>
    /// <param name="_formTreeControl">
    /// A instance of form tree control.
    /// </param>
    /// <param name="_omHierarchyType">
    /// A record of <c>OMHierarchyType</c> table.
    /// </param>
    /// <returns>
    ///  An instance of this class.
    /// </returns>
    static public RetailInternalOrgTreeDatasource construct(FormTreeControl _formTreeControl,
                                                            OMHierarchyType _omHierarchyType)
    {
        return new RetailInternalOrgTreeDatasource(_formTreeControl, _omHierarchyType);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>