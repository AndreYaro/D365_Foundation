<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLabelPrinterSelector</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class WHSLabelPrinterSelector
{
    private WHSInstrumentationLogger instrumentationLogger;   

    private WHSUserId currentUserId;
    private InventLocationId currentWarehouse;
    private WHSPrinterName fallbackPrinterName;

    private WMSLocationId currentLocationId;
    private WHSZoneId currentZoneId;
    
    private WHSMobileAppDeviceId currentDeviceId;

    private boolean forceUseOfFallbackPrinter = true;

    internal static boolean IsWHSLabelPrintSelectorDeviceSupportFlightEnabled = WHSLabelPrintSelectorDeviceSupportFlight::instance().isEnabled();
    internal static boolean IsWHSDocumentRoutingUseSpecifiedPrinterFlightEnabled = WHSDocumentRoutingUseSpecifiedPrinterFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSLabelPrinterSelector construct()
    {
        return new WHSLabelPrinterSelector();
    }

]]></Source>
			</Method>
			<Method>
				<Name>withUserId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSLabelPrinterSelector withUserId(WHSUserId _userId)
    {
        currentUserId = _userId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withWarehouseId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSLabelPrinterSelector withWarehouseId(InventLocationId _warehouseId)
    {
        currentWarehouse = _warehouseId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withLocationId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSLabelPrinterSelector withLocationId(WMSLocationId _locationId)
    {
        currentLocationId = _locationId;

        WMSLocation location = WMSLocation::find(_locationId, currentWarehouse);    
        currentZoneId = location.ZoneId;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withDeviceId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSLabelPrinterSelector withDeviceId(WHSMobileAppDeviceId _deviceId)
    {
        currentDeviceId = _deviceId;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withFallbackPrinter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSLabelPrinterSelector withFallbackPrinter(WHSPrinterName _printerName)
    {
        fallbackPrinterName = _printerName;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withForceUseOfFallbackPrinter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSLabelPrinterSelector withForceUseOfFallbackPrinter(boolean _forceUseOfFallbackPrinter)
    {
        forceUseOfFallbackPrinter = _forceUseOfFallbackPrinter || !IsWHSDocumentRoutingUseSpecifiedPrinterFlightEnabled;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPrinterForPrinterStockType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSPrinterName selectPrinterForPrinterStockType(WHSPrinterStockTypeName _printerStockTypeName)
    {
        using (var activityContext = this.instrumentationLogger().labelPrinterSelectorActivities().selectPrinterForPrinterStockType())
        {
            if (fallbackPrinterName && forceUseOfFallbackPrinter)
            {
                this.instrumentationLogger().labelPrinterSelectorActivities().foundFallbackPrinter(activityContext, true, true);

                return fallbackPrinterName;
            }

            WHSPrinterName printerName;

            if (currentUserId)
            {
                printerName = WHSWorkUserOverriddenLabelPrinter::findPrinterForWorkUserAndPrinterStockType(currentUserId, _printerStockTypeName);
            
                this.instrumentationLogger().labelPrinterSelectorActivities().foundWorkUserOverriddenPrinter(activityContext, printerName != '');
            }

            if (!printerName && currentLocationId)
            {
                printerName = WHSLocationDefaultLabelPrinter::findDefaultPrinterName(currentLocationId, currentZoneId, currentWarehouse, _printerStockTypeName);
            
                this.instrumentationLogger().labelPrinterSelectorActivities().foundLocationDefaultPrinter(activityContext, printerName != '');
            }

            if (!printerName && currentDeviceId && IsWHSLabelPrintSelectorDeviceSupportFlightEnabled)
            {
                printerName = WHSMobileDeviceDefaultLabelPrinter::findDefaultPrinterName(currentDeviceId, _printerStockTypeName);

                this.instrumentationLogger().labelPrinterSelectorActivities().foundDeviceDefaultPrinter(activityContext, printerName != '');
            }
        
            if (!printerName && currentUserId)
            {
                printerName = WHSWorkUserDefaultLabelPrinterTable::findDefaultPrinterName(currentUserId, currentWarehouse, _printerStockTypeName);
            
                this.instrumentationLogger().labelPrinterSelectorActivities().foundWorkUserDefaultPrinter(activityContext, printerName != '');
            }

            if (!printerName && fallbackPrinterName)
            {
                this.instrumentationLogger().labelPrinterSelectorActivities().foundFallbackPrinter(activityContext, true, false);

                return fallbackPrinterName;
            }

            return printerName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>