<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityMgmtCreateNonInvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventQualityMgmtCreateNonInvent</c> class is a specialized version of the
///    <c>InventQualityManagementCreate</c> class that is responsible for quality order generation during
///    business processes that do not perform a physical inventory update.
/// </summary>
class InventQualityMgmtCreateNonInvent extends InventQualityManagementCreate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildSampleDimensionQtyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a list of inventory dimensions and quantities from which quality orders can be created.
    /// </summary>
    /// <param name="_quantityToSample">
    /// The quantity that dimensions must be found.
    /// </param>
    /// <param name="_cwQuantityToSample">
    /// The catch weight quantity that dimensions must be found.
    /// </param>
    /// <returns>
    /// A list of containers that contain a <c>InventDimId</c> value, a quantity, and a catch weight
    /// quantity.
    /// </returns>
    /// <remarks>
    /// Each container holds two elements: an inventory dimension ID and a quantity.
    /// </remarks>
    protected List buildSampleDimensionQtyList(InventQty _quantityToSample, PdsCWInventQty _cwQuantityToSample)
    {
        InventQty       quantityToSample        = _quantityToSample;
        PdsCWInventQty  cwQuantityToSample = _cwQuantityToSample;
        boolean         isCWItem = PdsGlobal::pdsIsCWItem(referenceType.itemId());
        InventQty       minInventQty;
        InventDimParm   inventDimParm;
        List            result                  = new List(Types::Container);
        Set             inventDimIdSet          = new Set(Types::String);

        // Get the query for inventory transactions related to the lot
        inventDimParm.initFromInventDimFixed(inventItemSampling.DiscriminatingInventoryDimensions);

        // Parm all active product dimensions
        inventDimParm.setActiveProductDim(EcoResProductDimGroupSetup::newItemId(referenceType.itemId()));

        if (isCWItem)
        {
            minInventQty = PdsCatchWeight::minInventQty(referenceType.itemId(),1);
        }

        container packedResult, packedInventDimIdSet;

        if (!InventQualityOrderPreferUnblockedInventTransToggle::instance().isEnabled())
        {
            // Iterate all inventory transactions
            [quantityToSample, cwQuantityToSample, packedResult, packedInventDimIdSet] = 
                this.processInventTrans(
                    inventDimParm,
                    isCWItem,
                    quantityToSample,
                    cwQuantityToSample,
                    minInventQty,
                    result,
                    inventDimIdSet);
        }
        else
        {
            [quantityToSample, cwQuantityToSample, packedResult, packedInventDimIdSet] =
                this.processInventTrans(
                    inventDimParm,
                    isCWItem,
                    quantityToSample,
                    cwQuantityToSample,
                    minInventQty,
                    result,
                    inventDimIdSet,
                    DefaultNoYes::No);

            if ((isCWItem && cwQuantityToSample > 0) || (!isCWItem && quantityToSample > 0))
            {
                result = List::create(packedResult);
                inventDimIdSet = Set::create(packedInventDimIdSet);

                [quantityToSample, cwQuantityToSample, packedResult, packedInventDimIdSet] =
                    this.processInventTrans(
                        inventDimParm,
                        isCWItem,
                        quantityToSample,
                        cwQuantityToSample,
                        minInventQty,
                        result,
                        inventDimIdSet,
                        DefaultNoYes::Yes);
            }
        }

        if (isCWItem)
        {
            Debug::assert(cwQuantityToSample <= 0);
        }
        else
        {
            Debug::assert(quantityToSample <= 0);
        }

        result = List::create(packedResult);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventTrans</Name>
				<Source><![CDATA[
    private container processInventTrans(
        InventDimParm   _inventDimParm,
        boolean         _isCWItem,
        InventQty       _quantityToSample,
        PdsCWInventQty  _cwQuantityToSample,
        InventQty       _minInventQty,
        List            _result,
        Set             _inventDimIdSet,
        DefaultNoYes    _queryBlockedInventTrans = DefaultNoYes::Default)
    {
        InventQty       quantityToSample = _quantityToSample;
        PdsCWInventQty  cwQuantityToSample = _cwQuantityToSample;
        List            result = _result;
        Set             inventDimIdSet = _inventDimIdSet;

        PdsCWInventQty  cwInventTransQty;
        InventQty       inventTransQtyTemp;
        InventDimId     inventDimIdTemp;
        PdsCWInventQty  cwInventTransQtyTemp;

        Query queryInventTrans = referenceType.queryInventTrans(
            documentStatus,
            execution,
            _inventDimParm.inventDimFixed());

        if (_queryBlockedInventTrans == DefaultNoYes::No)
        {
            QueryBuildDataSource qdsInventTrans = queryInventTrans.dataSourceTable(tablenum(InventTrans));

            QueryBuildDataSource  qdsInventTransOrigin = qdsInventTrans.addDataSource(tablenum(InventTransOrigin));
            qdsInventTransOrigin.joinMode(JoinMode::NoExistsJoin);
            qdsInventTransOrigin.addLink(fieldNum(InventTrans, MarkingRefInventTransOrigin), fieldNum(InventTransOrigin, RecId));
            qdsInventTransOrigin.addRange(fieldnum(InventTransOrigin, ReferenceCategory)).value(queryValue(queryValue(InventTransType::Blocking)));
        }
        else if (_queryBlockedInventTrans == DefaultNoYes::Yes)
        {
            QueryBuildDataSource qdsInventTrans = queryInventTrans.dataSourceTable(tablenum(InventTrans));

            QueryBuildDataSource  qdsInventTransOrigin = qdsInventTrans.addDataSource(tablenum(InventTransOrigin));
            qdsInventTransOrigin.joinMode(JoinMode::ExistsJoin);
            qdsInventTransOrigin.addLink(fieldNum(InventTrans, MarkingRefInventTransOrigin), fieldNum(InventTransOrigin, RecId));
            qdsInventTransOrigin.addRange(fieldnum(InventTransOrigin, ReferenceCategory)).value(queryValue(queryValue(InventTransType::Blocking)));
        }

        QueryRun queryRun = new QueryRun(queryInventTrans);

        InventQualityOrderPhysicalVoucherContext context = InventQualityOrderPhysicalVoucherContext::current();
        boolean inventDimParmEnable = context && context.parmInventDim();
        ListEnumerator le;
        if (inventDimParmEnable)
        {
            List listInventTrans = new List(Types::Container);

            while (queryRun.next())
            {
                InventTrans inventTrans = queryRun.get(tableNum(InventTrans));
                InventDim inventTransInventDim = queryRun.get(tableNum(InventDim));

                // Merge basic lot dimensions with inventory transaction dimensions
                InventDim inventDim = InventDim::find(
                    this.adjustedReferenceInventDimId()
                    );
                inventDim.initFromInventDim(
                        inventTransInventDim,
                        _inventDimParm.selectedDimFields());
                inventDim = InventDim::findOrCreate(inventDim);

                if (InventDim::isInventDimEqual(inventDim, context.parmInventDim(), _inventDimParm.selectedDimFields()))
                {
                    listInventTrans.addStart([inventTrans, inventDim]);
                }
                else
                {
                    listInventTrans.addEnd([inventTrans, inventDim]);
                }
            }
            le = listInventTrans.getEnumerator();
        }

        while (((!inventDimParmEnable && queryRun.next()) || (inventDimParmEnable && le.moveNext()))
            && ((_isCWItem && cwQuantityToSample > 0) || (!_isCWItem && quantityToSample > 0)))
        {
            InventTrans inventTrans;
            InventDim inventDim;

            if (inventDimParmEnable)
            {
                container curContainer = le.current();
                inventTrans = conPeek(curContainer, 1);
                inventDim = conPeek(curContainer, 2);
            }
            else
            {
                inventTrans = queryRun.get(tableNum(InventTrans));
                InventDim inventTransInventDim = queryRun.get(tableNum(InventDim));

                // Merge basic lot dimensions with inventory transaction dimensions
                inventDim = InventDim::find(
                    this.adjustedReferenceInventDimId()
                    );
                inventDim.initFromInventDim(
                        inventTransInventDim,
                        _inventDimParm.selectedDimFields());
                inventDim = InventDim::findOrCreate(inventDim);
            }

            InventQty inventTransQty = min(abs(inventTrans.Qty), quantityToSample);

            if (_isCWItem)
            {
                cwInventTransQty = min(abs(inventTrans.PdsCWQty), cwQuantityToSample);
                // There can be inventory transactions that have 0 CW quantity (because of the reservation).
                // They shouldn't be sampled.
                if (cwInventTransQty == 0)
                {
                    continue;
                }

                inventTransQty = max(inventTransQty, _minInventQty);
            }
            else
            {
                cwInventTransQty = 0;
            }

            if (inventDimIdSet.in(inventDim.InventDimId))
            {
                // Dimension already seen - probably with other dates. Update the quantity, but keep order
                List resultTemp = List::create(result.pack());
                ListEnumerator resultEnumerator = resultTemp.getEnumerator();
                result = new List(Types::Container);
                while (resultEnumerator.moveNext())
                {
                    [inventDimIdTemp, inventTransQtyTemp, cwInventTransQtyTemp] = resultEnumerator.current();
                    if (inventDimIdTemp == inventDim.InventDimId)
                    {
                        // Adjust quantity for dimension
                        inventTransQtyTemp += inventTransQty;
                        cwInventTransQtyTemp += cwInventTransQty;
                    }
                    if ((_isCWItem && cwInventTransQtyTemp != 0)
                        || (!_isCWItem && inventTransQtyTemp != 0))
                    {
                        // Insert in list  again with new quantity
                        result.addEnd([inventDimIdTemp, inventTransQtyTemp, cwInventTransQtyTemp]);
                    }
                    else
                    {
                        // Don't insert in list, but also remove from set.
                        inventDimIdSet.remove(inventDimIdTemp);
                    }
                }
            }
            else
            {
                result.addEnd([inventDim.InventDimId, inventTransQty, cwInventTransQty]);
                inventDimIdSet.add(inventDim.InventDimId);
            }

            quantityToSample -= inventTransQty;
            cwQuantityToSample -= cwInventTransQty;
        }

        return [quantityToSample, cwQuantityToSample, result.pack(), inventDimIdSet.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustedReferenceInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventory dimensions for the referenced document taking into account
    /// the actual inventory dimension values specified on the inventory transactions.
    /// </summary>
    protected void calcAdjustedReferenceInventDimId()
    {
        InventDimParm   inventDimParm;

        InventDim inventDimBase = InventDim::find(referenceType.inventDimId());
        inventDimParm.initFromInventDim(inventDimBase);
        // Parm all active product dimensions
        inventDimParm.setActiveProductDim(EcoResProductDimGroupSetup::newItemId(referenceType.itemId()));

        QueryRun queryRun = new QueryRun(referenceType.queryInventTrans(
            documentStatus,
            execution,
            inventDimParm.inventDimFixed()
            ));

        while (queryRun.next())
        {
            InventDim inventDimInventTrans = queryRun.get(tableNum(InventDim));
            inventDimBase.clearMismatchingDimensions(inventDimInventTrans);
        }

        adjustedReferenceInventDimId = InventDim::findOrCreate(inventDimBase).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQualityOrdersWithDiscrimination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates separate quality orders based on the quality association for each combination of the
    /// inventory dimension subset that is specified in the related item sampling.
    /// </summary>
    /// <param name="_inventTestAssociationTable">
    /// A quality association.
    /// </param>
    /// <param name="_quantityToSample">
    /// A total quantity to be sampled.
    /// </param>
    /// <param name="_cwQuantityToSample">
    /// A total catch weight quantity to be sampled.
    /// </param>
    protected void generateQualityOrdersWithDiscrimination(
        InventTestAssociationTable  _inventTestAssociationTable,
        InventQty                   _quantityToSample,
        PdsCWInventQty              _cwQuantityToSample)
    {
        InventQty       inventTransQty;
        InventDimId     inventDimId;
        PdsCWInventQty  cwInventTransQty;

        boolean isCreatingInspectionOrderForAvailableOnhand = referenceType is PdsInventQualityReferenceTypeInventBatch;

        List dimensionQtyList = this.buildSampleDimensionQtyList(_quantityToSample, _cwQuantityToSample);
        ListEnumerator dimensionQtyListEnumerator = dimensionQtyList.getEnumerator();
        while (dimensionQtyListEnumerator.moveNext())
        {
            [inventDimId, inventTransQty, cwInventTransQty] = dimensionQtyListEnumerator.current();

            // Inspection order will sum up both issue and receipt transaction.
            // Negative value should be skipped when item allows negative onhand.
            if (isCreatingInspectionOrderForAvailableOnhand && inventTransQty <= 0)
            {
                continue;
            }

            // Check if we need to create Quality assocaiation
            if (referenceType.isItemAndWarehouseQualityManagementProcessEnabled())
            {
                this.setMaxAllowedQuantity(inventDimId);

                if (maxAllowedQty > 0 && this.trackLP(_inventTestAssociationTable, InventDim::find(inventDimId)))
                {
                    this.createQualityOrder(
                        _inventTestAssociationTable,
                        inventTransQty,
                        inventDimId,
                        cwInventTransQty);
    
                    // Create Quality Item Sampling work
                    this.createQualityItemSamplingWork(_inventTestAssociationTable);
                }
            }
            else if (this.mustCreateQualityOrderForInventDim(_inventTestAssociationTable, inventTransQty, inventDimId, cwInventTransQty))
            {
                // Generate quality order
                this.createQualityOrder(_inventTestAssociationTable,
                                        inventTransQty,
                                        inventDimId,
                                        cwInventTransQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQualityMgmtCreateNonInvent construct()
    {
        return new InventQualityMgmtCreateNonInvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQualityItemSamplingWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected void createQualityItemSamplingWork(InventTestAssociationTable _inventTestAssociationTable)
    {
        WHSInstrumentationLogger whsInstrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = whsInstrumentationLogger.qualityItemSamplingActivities().createSamplingWork())
        {
            whsInstrumentationLogger.logRecordInformation(_inventTestAssociationTable);
            
            int     samplingWorkCount;
            boolean createSamplingWork = this.shouldInboundQualityOrderWorkBeCreated(_inventTestAssociationTable);

            if (createSamplingWork)
            {
                inventItemSampling  itemSampling    = _inventTestAssociationTable.InventItemSampling();
                InventQty           runningQty      = workCreateQty;
                boolean             isCWItem        = PdsGlobal::pdsIsCWItem(referenceType.itemId());
    
                // Always select full dim
                InventDimParm inventDimParm;
                inventDimParm.setAllInventDim();
    
                QueryRun qr = new QueryRun(referenceType.queryInventTrans(documentStatus, execution, InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParm)));
    
                // Reference specified dimensions and discriminated dimensions must match the transactions work is created for.
                inventDimParm.clear();
                inventDimParm.initFromInventDim(InventDim::find(referenceType.inventDimId()));

                InventDimParm   inventDimParmDiscrim;
                InventDimFixedClass::inventDimFixed2InventDimParm(itemSampling.DiscriminatingInventoryDimensions, inventDimParmDiscrim);
                inventDimParm = inventDimParm::orParms(inventDimParm, inventDimParmDiscrim);
    
                QueryBuildDataSource inventDimDataSource = qr.query().dataSourceTable(tableNum(inventDim));
                inventDimParm.queryAddRange(inventDimDataSource, workInventDim);
    
                WHSWorkCreateQualityItemSampling    workCreate = WHSWorkCreateQualityItemSampling::newFromParms(_inventTestAssociationTable);
                workCreate.parmReferenceType(referenceType);
                workCreate.parmRelatedQualityOrderId(lastCreatedQualityOrder);
    
                RecordInsertList    qualityOrderInventoryList = new RecordInsertList(tableNum(WHSQualityOrderInventory));
        
                while (qr.next())
                {
                    if (runningQty <= 0)
                    {
                        break;
                    }
    
                    InventDim   inventDim = qr.get(tableNum(inventDim));
                    InventDimId inventDimId = inventDim::findOrCreate(inventDim).inventDimId;
                    InventTrans inventTrans = qr.get(tableNum(InventTrans));
    
                    InventQty workDiffQty;
                        
                    boolean keepLocationAndBelowDim = WhsQOItemSamplingAndProductionPutawayWorkCreationFlight::instance().isEnabled()
                                                        && itemSampling.CreatePerUpdatedQuantity
                                                        && this.isItemSerialOrBatchActivated();

                    workDiffQty = (isCWItem ? inventTrans.PdsCWQty : inventTrans.Qty)
                        - WHSWorkTable::calculateTotalQualityItemSamplingWork(referenceType.inventTransId(), inventDimId, referenceType.itemId(), keepLocationAndBelowDim, inventDim.LicensePlateId == "" ? lastCreatedQualityOrder : "");

                    if (workDiffQty <= 0)
                    {
                        break;
                    }

                    if (workDiffQty > runningQty)
                    {
                        workDiffQty = runningQty;
                        runningQty = 0;
                    }
                    else
                    {
                        runningQty -= workDiffQty;
                    }
    
                    workCreate.parmUpdateQty(workDiffQty);
                    workCreate.parmStartInventDim(InventDimId);
    
                    WHSWorkBuildId workBuildId; 

                    if (!inventDim.LicensePlateId)
                    {
                        workBuildId = WHSWorkTable::findQualityItemSamplingWorkBuildId("", lastCreatedQualityOrder);
                    }
                    else 
                    {
                        // Try to find workBuildId for exiting quality item sampling Work if it's be created for part of this LP already.
                        workBuildId = WHSWorkTable::findQualityItemSamplingWorkBuildId(inventDim.LicensePlateId);

                        // Next try to find any cross docking work for this LP and use it's workBuildId
                        if (!workBuildId)
                        {
                            workBuildId = WHSWorkTable::findCrossDockWorkBuildId(inventDim.LicensePlateId);
                        }
                    }
    
                    if (workBuildId)
                    {
                        workCreate.parmWorkCreateId(workBuildId);
                    }

                    workBuildId = workCreate.createWork();
    
                    // Store location of current inventory for the quality order.
                    WHSQualityOrderInventory qualityOrderInventory;
                    qualityOrderInventory.QualityOrderId    = lastCreatedQualityOrder;
                    qualityOrderInventory.InventDimId       = inventDimId;
                    qualityOrderInventory.InventHandlingQty = workDiffQty;

                    qualityOrderInventoryList.add(qualityOrderInventory);
                    samplingWorkCount++;
                }

                qualityOrderInventoryList.insertDatabase();
            }

            whsInstrumentationLogger.qualityItemSamplingActivities().createdSamplingWork(activityContext, createSamplingWork, samplingWorkCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemSerialOrBatchActivated</Name>
				<Source><![CDATA[
    private boolean isItemSerialOrBatchActivated()
    {
        InventTable item = InventTable::find(referenceType.itemId());

        return item.isItemSerialNumberActivated() || item.isItemBatchActivated();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>