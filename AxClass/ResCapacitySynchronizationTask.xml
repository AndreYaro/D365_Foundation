<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCapacitySynchronizationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A base class for capacity synchronization tasks.
/// </summary>
abstract class ResCapacitySynchronizationTask extends RunBaseBatch
{
    private const int recommendedLengthOfYearsLimitationWithoutHourScheduling = 5;
    private const int recommendedLengthOfYearsLimitationWithHourScheduling = 3;

    TransDate fromDate, toDate;
    TransDate previousFromDate, previousToDate;
    DateCode periodCode;
    boolean removeExistingRecords;
    private boolean checkRollupDateRange;

    DialogField dialogFromDate;
    DialogField dialogToDate;
    DialogField dialogPeriodCode;
    DialogField dialogRemoveExistingRecords;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRemoveExistingRecords</Name>
				<Source><![CDATA[
    public boolean parmRemoveExistingRecords(boolean _removeExistingRecords = removeExistingRecords)
    {
        removeExistingRecords = _removeExistingRecords;
        return removeExistingRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodCode</Name>
				<Source><![CDATA[
    public DateCode parmPeriodCode(DateCode _periodCode = periodCode)
    {
        periodCode = _periodCode;
        return periodCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckRollupDateRange</Name>
				<Source><![CDATA[
    protected boolean parmCheckRollupDateRange(boolean _checkRollupDateRange = checkRollupDateRange)
    {
        checkRollupDateRange = _checkRollupDateRange;
        return checkRollupDateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes date range according to selected date perod code.
    /// </summary>
    /// <param name = "_updateUI">Determines if dialog controls should be updated.</param>
    protected void initDates(boolean _updateUI)
    {
        if (periodCode != '')
        {
            LedgerPeriodCode ledgerPeriodCode = LedgerPeriodCode::find(periodCode);
            if (ledgerPeriodCode.RecId)
            {
                toDate = ledgerPeriodCode.toDate();
                fromDate = ledgerPeriodCode.fromDate();

                if (_updateUI)
                {
                    dialogToDate.value(toDate);
                    dialogFromDate.value(fromDate);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDay</Name>
				<Source><![CDATA[
    private utcdatetime getDay(TransDate _date)
    {
        return DateTimeUtil::newDateTime(_date, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDateUtc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the beginning of the date range in UTC format.
    /// </summary>
    /// <returns>FromDate in UTC format.</returns>
    protected utcdatetime getFromDateUtc()
    {
        return this.getDay(fromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDateUtc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the end of the date range in UTC format.
    /// </summary>
    /// <returns>ToDate in UTC format.</returns>
    protected utcdatetime getToDateUtc()
    {
        return this.getDay(toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns dialog object to get user input.
    /// </summary>
    /// <returns>Returns dialog object.</returns>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        this.addControlsToDialog(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlsToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates dialog with controls.
    /// </summary>
    /// <param name = "_dialog">Dialog to add controls to.</param>
    protected void addControlsToDialog(DialogRunbase _dialog)
    {
        previousFromDate = fromDate;
        previousToDate = toDate;

        dialogRemoveExistingRecords = _dialog.addField(extendedTypeStr(NoYesId), "@Res:RemoveExistingCapacityRecords");
        dialogPeriodCode = _dialog.addField(extendedTypeStr(DateCode), "@SYS22717");
        dialogFromDate = _dialog.addFieldValue(extendedTypeStr(TransDate), fromDate, "@Res:FromDate");
        dialogToDate = _dialog.addFieldValue(extendedTypeStr(TransDate), toDate, "@Res:ToDate");

        FormBuildCheckBoxControl formCheckboxControlRemoveRecords = dialogRemoveExistingRecords.control();
        formCheckboxControlRemoveRecords.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodstr(ResCapacitySynchronizationTask, removeExistingRecords_modified),
            this);

        FormBuildStringControl formStringControlPeriodCode = dialogPeriodCode.control();
        formStringControlPeriodCode.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodstr(ResCapacitySynchronizationTask, periodCode_modified),
            this);

        formStringControlPeriodCode.registerOverrideMethod(
            methodStr(FormStringControl, validate),
            methodstr(ResCapacitySynchronizationTask, periodCode_validate),
            this);
        dialogPeriodCode.value(periodCode);

        FormBuildDateControl formDateControlFromDate = dialogFromDate.control();
        formDateControlFromDate.registerOverrideMethod(
            methodStr(FormDateControl, validate),
            methodstr(ResCapacitySynchronizationTask, fromDate_validate),
            this);

        FormBuildDateControl formDateControlToDate = dialogToDate.control();
        formDateControlToDate.registerOverrideMethod(
            methodStr(FormDateControl, validate),
            methodstr(ResCapacitySynchronizationTask, toDate_validate),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExistingRecords_modified</Name>
				<Source><![CDATA[
    private boolean removeExistingRecords_modified(FormCheckBoxControl _dialogRemoveExistingRecords)
    {
        _dialogRemoveExistingRecords.modified();

        removeExistingRecords = _dialogRemoveExistingRecords.value();
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodCode_modified</Name>
				<Source><![CDATA[
    private boolean periodCode_modified(FormStringControl _dialogPeriodCode)
    {
        _dialogPeriodCode.modified();

        periodCode = _dialogPeriodCode.valueStr();
        boolean datePeriodCodeIsSet = (periodCode != '');

        this.initDates(true);

        dialogToDate.allowEdit(!datePeriodCodeIsSet);
        dialogFromDate.allowEdit(!datePeriodCodeIsSet);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodCode_validate</Name>
				<Source><![CDATA[
    private boolean periodCode_validate(FormStringControl _dialogPeriodCode)
    {
        boolean result = true;

        DateCode dateCode = _dialogPeriodCode.valueStr();
        if (dateCode != '')
        {
            LedgerPeriodCode ledgerPeriodCode = LedgerPeriodCode::find(dateCode);
            if (!ledgerPeriodCode.RecId)
            {
                result = checkFailed(strFmt("@SYS312171", dateCode));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate_validate</Name>
				<Source><![CDATA[
    private boolean fromDate_validate(FormDateControl _dialogFromDate)
    {
        boolean result = true;

        TransDate fromDateValue = _dialogFromDate.dateValue();
        TransDate toDateValue = dialogToDate.value();

        if (fromDateValue == dateNull())
        {
            result = checkFailed("@SYS77971");
        }
        else if (fromDateValue > toDateValue)
        {
            result = checkFailed("@SYS4005406");
        }

        if (result)
        {
            if(!this.validateLengthOfResRollupDates(dialogRemoveExistingRecords.value(), fromDateValue, toDateValue))
            {
                _dialogFromDate.dateValue(previousFromDate);
            }
            previousFromDate = _dialogFromDate.dateValue();
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate_validate</Name>
				<Source><![CDATA[
    private boolean toDate_validate(FormDateControl _dialogToDate)
    {
        boolean result = true;

        TransDate fromDateValue = dialogFromDate.value();
        TransDate toDateValue = _dialogToDate.dateValue();
        
        if (toDateValue == dateNull())
        {
            result = checkFailed("@SYS77972");
        }
        else if (toDateValue < fromDateValue)
        {
            result = checkFailed("@SYS4005407");
        }

        if (result)
        {
            if(!this.validateLengthOfResRollupDates(dialogRemoveExistingRecords.value(), fromDateValue, toDateValue))
            {
                _dialogToDate.dateValue(previousToDate);
            }
            previousToDate = _dialogToDate.dateValue();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLengthOfResRollupDates</Name>
				<Source><![CDATA[
    private boolean validateLengthOfResRollupDates(
        boolean _removeExistingRollupData,
        date _userDefinedStartDate,
        date _userDefinedEndDate)
    {
        boolean result = true;

        if (checkRollupDateRange)
        {
            ResRollUp resRollup;

            int startYear = year(_userDefinedStartDate);
            int endYear = year(_userDefinedEndDate);
            
            if (!_removeExistingRollupData)
            {
                select minof(Timeframe) from resRollup
                where resRollup.TimeScale == AVTimeframeType::Day;
            
                if (resRollup.Timeframe != DateTimeUtil::minValue())
                {
                    int rollupStartYear = DateTimeUtil::year(resRollup.TimeFrame);
                    startYear = rollupStartYear < startYear ? rollupStartYear : startYear;
                }

                select maxof(Timeframe) from resRollup
                where resRollup.TimeScale == AVTimeframeType::Day;

                if (resRollup.Timeframe != DateTimeUtil::minValue())
                {
                    int rollupEndYear = DateTimeUtil::year(resRollup.TimeFrame);
                    endYear = rollupEndYear > endYear ? rollupEndYear : endYear;
                }
            }
        
            int diffYears = endYear - startYear;

            boolean enableHourScheduling = ResUtil::getEnableHourSchedulingSetting();
            str enableHourSchedulingEnumStr = enableHourScheduling ? enum2Str(NoYes::Yes) : enum2Str(NoYes::No);
            int recommendedLengthOfYearsLimitaion = enableHourScheduling ?
            recommendedLengthOfYearsLimitationWithHourScheduling :
            recommendedLengthOfYearsLimitationWithoutHourScheduling;

            // Make recommendation for the lenght of years limitiation depeneding on if hour scheduling is turned on.
            if (diffYears > recommendedLengthOfYearsLimitaion)
            {
                result = (Box::yesNo((
                strfmt("@Res:ValidateLengthOfRollUpData",
                    int2Str(diffYears),
                    int2Str(startYear),
                    int2Str(endYear),
                    enableHourSchedulingEnumStr,
                    recommendedLengthOfYearsLimitationWithHourScheduling)
                ), DialogButton::No) == DialogButton::Yes);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        // force batch
        this.batchInfo().parmBatchExecute(true);

        this.readFromDialog();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads values from the dialog controls into local variables of the class.
    /// </summary>
    protected void readFromDialog()
    {
        periodCode = dialogPeriodCode.value();
        fromDate = dialogFromDate.value();
        toDate = dialogToDate.value();
        removeExistingRecords = dialogRemoveExistingRecords.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (fromDate > toDate)
        {
            error("@SYS30562");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>