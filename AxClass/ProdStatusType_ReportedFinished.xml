<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdStatusType_ReportedFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdStatusType_ReportedFinished</c> class encapsulates the behavior of a finished production
///    order.
/// </summary>
/// <remarks>
///    A production order is said to be finished or reported as finished if the class implements
///    <c>ProdStatusType.currentProdStatus</c> method by returning the
///    <c>ProdStatusAll::ReportedFinished</c> value.
/// </remarks>
public class ProdStatusType_ReportedFinished extends ProdStatusType
{
    #ISOCountryRegionCodes
    boolean     isIsoIN;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether production Bills of materials can be edited.
    /// </summary>
    /// <returns>
    ///     Always returns false.
    /// </returns>
    public boolean bomAllowEdit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeWMSRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a finished production order can be registered in a Warehouse Management System.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canBeWMSRegistered()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether journal posting is enabled for a finished production order.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean checkPostJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentProdStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines a specific status for a production order.
    /// </summary>
    /// <returns>
    ///    Always returns the <c>ProdStatusAll::ReportedFinished</c> value.
    /// </returns>
    public ProdStatusAll currentProdStatus()
    {
        return ProdStatusAll::ReportedFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    public void deleting()
    {
        throw error(strFmt(
            "@SYS22042",
            prodTable.ProdStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formFieldsActive</Name>
				<Source><![CDATA[
    public boolean formFieldsActive()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(ProdTable _prodTable)
    {
        // <GIN>
        isIsoIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>
        super(_prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousProdStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the previous status for a finished production order.
    /// </summary>
    /// <returns>
    ///    Always returns <c>ProdStatus::StartedUp</c> value.
    /// </returns>
    public ProdStatus previousProdStatus()
    {
        return ProdStatus::StartedUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodNumLookupJournal</Name>
				<Source><![CDATA[
    public boolean prodNumLookupJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a production route can be edited.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean routeAllowEdit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBOMCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a price calculation of a finished production order.
    /// </summary>
    /// <param name="_prodParmBOMCalc">
    ///    The production bill of materials calculation parameter. This parameters is disregarded by the
    ///    method.
    /// </param>
    /// <param name="_ask">
    ///    A Boolean value that indicates whether the method is only asked if price calculation is enabled;
    ///    optional.
    /// </param>
    /// <param name="_multi">
    ///    A <c>RunbaseRecsMapable</c> parameter. This parameter is disregarded by the method; optional.
    /// </param>
    /// <returns>
    ///    false if the <paramref name="_ask" /> parameter is true; otherwise, throws an exception.
    /// </returns>
    /// <remarks>
    ///    When a price calculation is being performed for a finished production order, this method always
    ///    throws an exception, because as soon as the production order is reported as finished, price
    ///    calculation is no longer enabled.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A finished production order does not allow price calculation.
    /// </exception>
    public boolean runBOMCalc(
        ProdParmBOMCalc     _prodParmBOMCalc,
        boolean             _ask                = false,
        RunbaseRecsMapable  _multi              = null
        )
    {
        if (!_ask)
        {
            throw error(strFmt(
                "@SYS22234",
                prodTable.ProdStatus));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCostEstimation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a cost estimation of a finished production order.
    /// </summary>
    /// <param name="_prodParmCostEstimation">
    ///    The production cost estimation parameter. This parameter is disregarded by the method.
    /// </param>
    /// <param name="_ask">
    ///    A Boolean value that indicates whether the method is only asked if cost estimation is enabled;
    ///    optional.
    /// </param>
    /// <param name="_prodPurch">
    ///    The production purchase parameter. This parameter is disregarded by the method; optional.
    /// </param>
    /// <param name="_multi">
    ///    A RunbaseRecsMapable parameter. This parameter is disregarded by the method; optional.
    /// </param>
    /// <param name="_runningPreviousJob">
    ///     Indicates if this method has been triggered by a change to a higher status: optional.
    /// </param>
    /// <returns>
    ///    false if the <paramref name="_ask" /> parameter is true; otherwise, throws an exception.
    /// </returns>
    /// <remarks>
    ///    When cost estimation is being performed for a finished production order this method always throws
    ///    an exception because when the production order is reported as finished cost estimation is no longer
    ///    enabled.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A finished production order does not enable cost estimation.
    /// </exception>
    public boolean runCostEstimation(
        ProdParmCostEstimation      _prodParmCostEstimation,
        boolean                     _ask                = false,
        ProdPurch                   _prodPurch          = null,
        RunbaseRecsMapable          _multi              = null,
        boolean                     _runningPreviousJob = false)
    {
        if (!_ask && !_runningPreviousJob)
        {
            throw error(strFmt(
                "@SYS22233",
                prodTable.ProdStatus));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runJobScheduling</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs job scheduling of a finished production order.
    /// </summary>
    /// <param name="_prodParmScheduling">
    ///     This parameter is disregarded by the method.
    /// </param>
    /// <param name="_ask">
    ///     If this parameter is true, then method is only asked if job scheduling is allowed; optional.
    /// </param>
    /// <param name="_prodPurch">
    ///     This parameter is disregarded by the method; optional.
    /// </param>
    /// <param name="_multi">
    ///     This parameter is disregarded by the method; optional.
    /// </param>
    /// <param name="_wrkCtrScheduler">
    ///     A job scheduler instance that can be reused when performing scheduling; optional.
    /// </param>
    /// <param name="_runningPreviousJob">
    ///     Indicates if this method has been triggered by a change to a higher status: optional.
    /// </param>
    /// <returns>
    ///     If <paramref name="_ask"/> parameter is true, then method returns false; otherwise, throws an exception.
    /// </returns>
    /// <remarks>
    ///     When job scheduling is being performed for a finished production order, this method always throws an exception,
    ///     because once the production order is reported as finished, job scheduling is no longer allowed.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///     A finished production order does not allow job scheduling.
    /// </exception>
    public boolean runJobScheduling(
        ProdParmScheduling      _prodParmScheduling,
        boolean                 _ask                    = false,
        ProdPurch               _prodPurch              = null,
        RunbaseRecsMapable      _multi                  = null,
        WrkCtrScheduler_Prod    _wrkCtrScheduler        = null,
        boolean                 _runningPreviousJob     = false)
    {
        if (!_ask && !_runningPreviousJob)
        {
            throw error(strFmt(
                "@SYS22097",
                prodTable.ProdStatus));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runJobUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether job update is enabled for a finished production order.
    /// </summary>
    /// <param name="_ask">
    ///    A Boolean value that indicates whether the method is asked if job update is enabled; optional.
    /// </param>
    /// <returns>
    ///    true if <paramref name="_ask" /> is false; otherwise, false.
    /// </returns>
    public boolean runJobUpdate(boolean _ask = false)
    {
        if (_ask)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationScheduling</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs operation scheduling of a finished production order.
    /// </summary>
    /// <param name="_prodParmScheduling">
    ///     This parameter is disregarded by the method.
    /// </param>
    /// <param name="_ask">
    ///     If this parameter is true, then method is only asked if operation scheduling is allowed; optional.
    /// </param>
    /// <param name="_prodPurch">
    ///     This parameter is disregarded by the method; optional.
    /// </param>
    /// <param name="_multi">
    ///     This parameter is disregarded by the method; optional.
    /// </param>
    /// <param name="_wrkCtrScheduler">
    ///     A job scheduler instance that can be reused when performing scheduling; optional.
    /// </param>
    /// <param name="_runningPreviousJob">
    ///     Indicates if this method has been triggered by a change to a higher status: optional.
    /// </param>
    /// <returns>
    ///     If <paramref name="_ask"/> parameter is true, then method returns false; otherwise, throws an exception.
    /// </returns>
    /// <remarks>
    ///     When operation scheduling is being performed for a finished production order, this method always throws an exception,
    ///     because once the production order is reported as finished, operation scheduling is no longer allowed.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///     A finished production order does not allow operation scheduling.
    /// </exception>
    public boolean runOperationScheduling(
        ProdParmScheduling      _prodParmScheduling,
        boolean                 _ask                = false,
        ProdPurch               _prodPurch          = null,
        RunbaseRecsMapable      _multi              = null,
        WrkCtrScheduler_Prod    _wrkCtrScheduler    = null,
        boolean                 _runningPreviousJob = false)
    {
        if (!_ask && !_runningPreviousJob)
        {
            throw error(strFmt(
                "@SYS22098",
                prodTable.ProdStatus));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRelease</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases a finished production order.
    /// </summary>
    /// <param name="_prodParmRelease">
    ///    This parameter is disregarded by the method.
    /// </param>
    /// <param name="_ask">
    ///    A Boolean value that indicates whether this method is only asked if releasing is enabled; optional.
    /// </param>
    /// <param name="_prodPurch">
    ///    This parameter is disregarded by the method; optional.
    /// </param>
    /// <param name="_multi">
    ///    This parameter is disregarded by the method; optional.
    /// </param>
    /// <param name="_runningPreviousJob">
    ///     Indicates if this method has been triggered by a change to a higher status: optional.
    /// </param>
    /// <returns>
    ///    false if the <paramref name="_ask" /> parameter is true; otherwise throws an exception.
    /// </returns>
    /// <remarks>
    ///    When a finished production order is being released, this method always throws an exception because
    ///    as soon as the production order is reported as finished, releasing is no longer enabled.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A finished production order does not enable releasing.
    /// </exception>
    public boolean runRelease(
        ProdParmRelease     _prodParmRelease,
        boolean             _ask                = false,
        ProdPurch           _prodPurch          = null,
        RunbaseRecsMapable  _multi              = null,
        boolean             _runningPreviousJob = false)
    {
        if (!_ask && !_runningPreviousJob)
        {
            throw error(strFmt(
                "@SYS22094",
                prodTable.ProdStatus));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRouteUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether route update is enabled for a finished production order.
    /// </summary>
    /// <param name="_ask">
    ///    A Boolean value that indicates whether the method is asked if route update is enabled; optional.
    /// </param>
    /// <returns>
    ///    true if the <paramref name="_ask" /> parameter is false; otherwise, false.
    /// </returns>
    public boolean runRouteUpdate(boolean _ask = false)
    {
        if (_ask)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSplit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Splits a finished production order.
    /// </summary>
    /// <param name="_prodParmSplit">
    ///    The production split parameter. This parameter is disregarded by the method.
    /// </param>
    /// <param name="_ask">
    ///    A Boolean value that indicates whether the method is only asked if splitting is enabled; optional.
    /// </param>
    /// <param name="_multi">
    ///    The <c>RunbaseRecsMapable</c> parameter. This parameter is disregarded by the method; optional.
    /// </param>
    /// <returns>
    ///    false if the <paramref name="_ask" /> parameter is true; otherwise, throws an exception.
    /// </returns>
    /// <remarks>
    ///    When splitting is being performed for a finished production order this method always throws an
    ///    exception because when the production order is reported as finished, splitting is no longer enabled.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A finished production order does not enable splitting.
    /// </exception>
    public boolean runSplit(
        ProdParmSplit       _prodParmSplit,
        boolean             _ask            = false,
        RunbaseRecsMapable  _multi          = null
        )
    {
        if (!_ask)
        {
            throw error(strFmt(
                "@SYS67855",
                prodTable.ProdStatus));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStartUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Starts a finished production order.
    /// </summary>
    /// <param name="_prodParmStartUp">
    ///    The product start up parameter. This parameter is disregarded by the method.
    /// </param>
    /// <param name="_ask">
    ///    A Boolean value that indicates whether the method is only asked if starting is enabled; optional.
    /// </param>
    /// <param name="_prodPurch">
    ///    The product purchase parameter. This parameter is disregarded by the method; optional.
    /// </param>
    /// <param name="_multi">
    ///    A <c>RunbaseRecsMapable</c> parameter. This parameter is disregarded by the method; optional.
    /// </param>
    /// <param name="_runningPreviousJob">
    ///     Indicates if this method has been triggered by a change to a higher status: optional.
    /// </param>
    /// <returns>
    ///    false if the <paramref name="_ask" /> parameter is true; otherwise, throws an exception.
    /// </returns>
    /// <remarks>
    ///    When a finished production order is being started, this method always throws an exception, because
    ///    as soon as the production order is reported as finished, starting is no longer enabled.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A finished production order does not enable starting.
    /// </exception>
    public boolean runStartUp(
        ProdParmStartUp     _prodParmStartUp,
        boolean             _ask                = false,
        ProdPurch           _prodPurch          = null,
        RunbaseRecsMapable  _multi              = null,
        boolean             _runningPreviousJob = false)
    {
        if (!_ask && !_runningPreviousJob)
        {
            throw error(strFmt(
                "@SYS22096",
                prodTable.ProdStatus));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusDecrease</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decreases the status of a completed production order.
    /// </summary>
    /// <param name="_prodParmStatusDecrease">
    ///    The production status decrease parameter. This parameter is disregarded by the method.
    /// </param>
    /// <param name="_ask">
    ///    A Boolean value that indicates whether the method is only asked if status decreasing is allowed;
    ///    optional.
    /// </param>
    /// <param name="_multi">
    ///    A <c>RunbaseRecsMapable</c> parameter. This parameter is disregarded by the method; optional.
    /// </param>
    /// <returns>
    ///    false if the <paramref name="_ask" /> parameter is true; otherwise, throws an exception.
    /// </returns>
    /// <remarks>
    ///    When status of a completed production order is being decreased, this method always throws an
    ///    exception, because as soon as the production order is completed, status decreasing is no longer
    ///    allowed.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A completed production order does not allow status decreasing.
    /// </exception>
    public boolean runStatusDecrease(
        ProdParmStatusDecrease  _prodParmStatusDecrease,
        boolean                 _ask                    = false,
        RunbaseRecsMapable      _multi                  = null
        )
    {
        boolean     ret = super(_prodParmStatusDecrease, _ask, _multi);

        // <GIN>
        if (isIsoIN)
        {
            ret = ret && prodTable.isProdStatusDecreasable_IN();
        }
        // </GIN>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtySched</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a scheduled quantity of items to produce.
    /// </summary>
    /// <param name="_qty">
    ///    The scheduled quantity of items to produce.
    /// </param>
    public void setQtySched(ProdQty _qty)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarnings</Name>
				<Source><![CDATA[
    public void updateWarnings()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a finished production order can be deleted.
    /// </summary>
    /// <returns>
    ///    Always returns false because a finished production order cannot be deleted.
    /// </returns>
    public boolean validateDelete()
    {
        return checkFailed("@SYS18511");
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether production bills of materials can be deleted from a finished production order.
    /// </summary>
    /// <param name="_prodBOM">
    ///    The production bills of materials parameter. This parameter is disregarded by the method.
    /// </param>
    /// <returns>
    ///    Always returns false because production bills of materials cannot be removed from a finished
    ///    production order.
    /// </returns>
    public boolean validateDeleteProdBOM(ProdBOM _prodBOM)
    {
        return checkFailed(strFmt(
            "@SYS22042",
            prodTable.ProdStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a production route can be deleted from a finished production order.
    /// </summary>
    /// <param name="_prodRoute">
    ///    The production route parameter. This parameter is disregarded by the method.
    /// </param>
    /// <returns>
    ///    Always returns false because a production route cannot be removed from a finished production order.
    /// </returns>
    public boolean validateDeleteProdRoute(ProdRoute _prodRoute)
    {
        return checkFailed(strFmt(
            "@SYS22042",
            prodTable.ProdStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProdBOM</Name>
				<Source><![CDATA[
    public boolean validateWriteProdBOM(ProdBOM _prodBOM)
    {
        if (_prodBOM.pdsPotencyFieldModified())
        {
            return checkFailed(strFmt("@PSC33", prodTable.ProdStatus));
        }

        return super(_prodBOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdStatusType_ReportedFinished construct(ProdTable _prodTable)
    {
        return new ProdStatusType_ReportedFinished(_prodTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>