<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentLineInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// Base class providing an interface to common functionality applicable for tables mapped to the <c>VendDocumentLineMap</c> table map.
/// </summary>
[ExportInterfaceAttribute()]
abstract class VendDocumentLineInterface
{
    protected VendDocumentLineMap vendDocumentLineMap;
    private VendDocumentLineInterface origInstance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeVendDocumentLine</Name>
				<Source><![CDATA[
    private void initializeVendDocumentLine(VendDocumentLineMap _vendDocumentLineMap = vendDocumentLineMap)
    {
        vendDocumentLineMap = _vendDocumentLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the local instance of the <c>VendDocuementLineMap</c> map.
    /// </summary>
    /// <returns>The local instance of the <c>VendDocuementLineMap</c> map.</returns>
    public final VendDocumentLineMap parmVendDocumentLine()
    {
        return vendDocumentLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>VendDocumentLineInterface</c> object based on the provided <c>VendDocumentLineMap</c> record.
    /// </summary>
    /// <param name = "_vendDocumentLineMap">A <c>VendDocumentLineMap</c> record from which to create a <c>VendDocumentLineInterface</c> instance.</param>
    /// <returns>The instantiated <c>VendDocumentLineInterface</c> object.</returns>
    public static VendDocumentLineInterface createInstance(VendDocumentLineMap _vendDocumentLineMap)
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();

        metadataCollection.SetManagedValue(classStr(VendDocumentLineInterface), tableId2Name(_vendDocumentLineMap.tableId));
        VendDocumentLineInterface instance = SysPluginFactory::Instance(identifierStr(Dynamics.AX.Application), classStr(VendDocumentLineInterface), metadataCollection);

        if (!instance)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        instance.initializeVendDocumentLine(_vendDocumentLineMap);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a <c>VendDocumentLineInterface</c> object based on the <c>VendDocumentLineMap</c> orig-record.
    /// </summary>
    /// <returns>
    /// The instantiated <c>VendDocumentLineInterface</c> object.
    /// </returns>
    final public VendDocumentLineInterface origInstance()
    {
        if (!origInstance)
        {
            origInstance = VendDocumentLineInterface::createInstance(this.parmVendDocumentLine().orig());
        }

        return origInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    public AmountCur amountExclTax(AmountCur _amountCur, Qty _qty, TransDate _transDate, Tax _tax = null, boolean _skipRounding = false)
    {
        return this.amountExcludingTax(_amountCur, _qty, _transDate, _tax, null, false, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExcludingTax</Name>
				<Source><![CDATA[
    public AmountCur amountExcludingTax(AmountCur _amountCur, Qty _qty, TransDate _transDate, Tax _tax = null, VendDocumentTableMap _parmTable = null, boolean _keepEndDisc = false, boolean _skipRounding = false)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineAmount</Name>
				<Source><![CDATA[
    public AmountCur calculateLineAmount(Qty _qty = vendDocumentLineMap.ReceiveNow, PurchLine _purchLine = null)
    {
        return this.calculatePrice2LineAmount(_qty, false, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineAmountForced</Name>
				<Source><![CDATA[
    public AmountCur calculateLineAmountForced(Qty _qty = vendDocumentLineMap.ReceiveNow, PriceDiscPolicyCheckPolicy _checkPolicy = null)
    {
        return this.calculatePrice2LineAmount(_qty, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePrice2LineAmount</Name>
				<Source><![CDATA[
    public AmountCur calculatePrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation, PurchLine _purchLine = null)
    {
        AmountCur lineAmount;
        
        if (_qty)
        {
            if (this.isNonPO())
            {
                lineAmount = PriceDisc::price2Amount(vendDocumentLineMap.PurchPrice,
                                                     vendDocumentLineMap.PriceUnit,
                                                     this.discAmount(),
                                                     _qty, // deliver now
                                                     _qty,
                                                     vendDocumentLineMap.PurchMarkup,
                                                     this.discPercent(),
                                                     vendDocumentLineMap.CurrencyCode,
                                                     vendDocumentLineMap.LineAmount,
                                                     _forceLineAmountCalculation);
            }
            else
            {
                if (!_purchLine)
                {
                    _purchLine = this.purchLine();
                }

                PurchTable purchTable = _purchLine.purchTable();

                if (purchTable 
                    && PriceDisc::isIntercompanyPLFlightEnabled()
                    && purchTable.InterCompanyOrder == NoYes::Yes)
                {
                    DataAreaId targetDataAreaIdToSwitchTo = IntercompanyDiscCalculationHelper_PL::getIntercompanyPurchaseOrderRootDataAreaId(purchTable);

                    lineAmount = IntercompanyDiscCalculationHelper_PL::calculateLineAmountForPolIntercompanyOrder(this.pdsPurchPrice(_forceLineAmountCalculation),
                                                         vendDocumentLineMap.PriceUnit,
                                                         this.discAmount(),
                                                         _qty, // deliver now
                                                         _purchLine.PurchQty,
                                                         vendDocumentLineMap.PurchMarkup,
                                                         this.discPercent(),
                                                         vendDocumentLineMap.CurrencyCode,
                                                         _purchLine.LineAmount,
                                                         _forceLineAmountCalculation,
                                                         targetDataAreaIdToSwitchTo);
                }
                else
                {
                    lineAmount = PriceDisc::price2Amount(this.pdsPurchPrice(_forceLineAmountCalculation),
                                                         vendDocumentLineMap.PriceUnit,
                                                         this.discAmount(),
                                                         _qty, // deliver now
                                                         _purchLine.PurchQty,
                                                         vendDocumentLineMap.PurchMarkup,
                                                         this.discPercent(),
                                                         vendDocumentLineMap.CurrencyCode,
                                                         _purchLine.LineAmount,
                                                         _forceLineAmountCalculation);
                }
            }
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId, Common _sourceDocumentLineImplementation = null)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public void defaultRow(
        PurchLine _purchLine = null,
        PurchParmUpdate _purchParmUpdate = null,
        PurchQty _receiveNow = naReal(),
        InventQty _inventNow = naReal(),
        PdsCWInventQty _cwReceiveNow = naReal(),
        Set _tableToLineFields	= null,
        PurchUpdate _specQty = _purchParmUpdate.SpecQty)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    public LogisticsAddressing deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(vendDocumentLineMap.DeliveryPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    public DiscAmount discAmount()
    {
        return PriceDisc::discAmount(PurchParameters::find().Disc, vendDocumentLineMap.LineDisc, vendDocumentLineMap.MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    public DiscPct discPercent()
    {
        return PriceDisc::discPercent(PurchParameters::find().Disc, vendDocumentLineMap.LinePercent, vendDocumentLineMap.MultiLnPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the reason code by using a <c>ReasonCodeMap</c> object.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the reason code is set.
    /// </param>
    /// <param name="_reasonCode">
    ///    The new reason code when the <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        return vendDocumentLineMap.ReasonCodeMap::editReasonCode(_set, _reasonCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the reason comment using a <c>ReasonCodeMap</c> object.
    /// </summary>
    /// <param name="_set">
    ///    a Boolean value that specifies whether the reason comment is set.
    /// </param>
    /// <param name="_reasonComment">
    ///    The new reason comment the when <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        return vendDocumentLineMap.ReasonCodeMap::editReasonComment(_set, _reasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvancedPricingInvoiceCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the attribute-based calculation ID in the table buffer mapped.
    /// </summary>
    /// <returns>
    /// The ID of the attribute-based calculation used.
    /// </returns>
    public PDSCalculationId getAdvancedPricingInvoiceCalculationId()
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>ItemType</c> value for the item.
    /// </summary>
    /// <returns>
    ///    The <c>ItemType</c> value for the item.
    /// </returns>
    public ItemType getItemType()
    {
        return InventTable::find(vendDocumentLineMap.ItemId).ItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdsPurchPrice</Name>
				<Source><![CDATA[
    protected PurchPrice getPdsPurchPrice(boolean _force = false)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossAmount</Name>
				<Source><![CDATA[
    public AmountCur grossAmount()
    {
        AmountCur grossAmount = 0;
        
        if (vendDocumentLineMap.ReceiveNow)
        {
            grossAmount = PriceDisc::price2Amount(this.pdsPurchPrice(),
                                                  vendDocumentLineMap.PriceUnit,
                                                  0.0,
                                                  vendDocumentLineMap.ReceiveNow,
                                                  vendDocumentLineMap.ReceiveNow,
                                                  vendDocumentLineMap.PurchMarkup,
                                                  0.0,
                                                  vendDocumentLineMap.CurrencyCode,
                                                  vendDocumentLineMap.LineAmount);
        }

        return grossAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the <c>VendInvoiceInfoTable</c> or <c>PurchParmTable</c> record for the given
    ///    record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A single <c>VendInvoiceInfoTable</c> or <c>PurchParmTable</c> record if it exists; otherwise, an
    ///    empty <c>VendInvoiceInfoTable</c> or <c>PurchParmTable</c> record.
    /// </returns>
    public VendDocumentTableMap header(boolean _forUpdate = false)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this invoice line includes tax in the line amount.
    /// </summary>
    /// <param name="_purchTable">
    /// Corresponding purchase order header record; optional.
    /// </param>
    /// <param name="_header">
    /// Corresponding document header record; optional.
    /// </param>
    /// <returns>
    /// True if the line is tax included; otherwise, false.
    /// </returns>
    public boolean includeTax(PurchTable _purchTable = null, Common _header = null)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeTaxGeneralTax</Name>
				<Source><![CDATA[
    protected boolean includeTaxGeneralTax(boolean _inclTax)
    {
        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            SalesPurchJournalLine salesPurchJournalLine = SalesPurchJournalLine::findRecId(vendDocumentLineMap.TableId, vendDocumentLineMap.RecId);
            TaxModelTaxable taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(salesPurchJournalLine);
            if (taxModelTaxable)
            {
                _inclTax = taxModelTaxable.isPriceInclTax();
            }
        }
        // </GTE>

        return _inclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultAdvancedPricingCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default value of attribute-based calculation ID in the table buffer mapped.
    /// </summary>
    public void initDefaultAdvancedPricingCalculationId()
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    public void initFromPurchLine(PurchLine purchLine)
    {
        PurchTable purchTable = purchLine.purchTable();
        
        //<GEERU>
        #isoCountryRegionCodes
        //</GEERU>

        //<GEERU>
        PurchLine_W purchLine_W;

        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        //</GEERU>
        vendDocumentLineMap.OrigPurchId = purchLine.PurchId;
        vendDocumentLineMap.InventTransId = purchLine.InventTransId;
        vendDocumentLineMap.OrderAccount = purchTable.OrderAccount;
        vendDocumentLineMap.InvoiceAccount = purchTable.InvoiceAccount;
        vendDocumentLineMap.PurchaseLineLineNumber = purchLine.LineNumber;
        vendDocumentLineMap.LineNum = any2real(purchLine.LineNumber);
        vendDocumentLineMap.ItemId = purchLine.ItemId;
        vendDocumentLineMap.ProcurementCategory = purchLine.ProcurementCategory;
        vendDocumentLineMap.PurchLineRecId = purchLine.RecId;
        vendDocumentLineMap.PurchMarkup = purchLine.PurchMarkup;
        vendDocumentLineMap.PriceUnit = purchLine.PriceUnit;
        vendDocumentLineMap.MultiLnDisc = purchLine.MultiLnDisc;
        vendDocumentLineMap.MultiLnPercent = purchLine.MultiLnPercent;
        vendDocumentLineMap.LineDisc = purchLine.LineDisc;
        vendDocumentLineMap.LinePercent = purchLine.LinePercent;
        vendDocumentLineMap.PurchPrice = purchLine.PurchPrice;
        vendDocumentLineMap.CurrencyCode = purchLine.CurrencyCode;
        vendDocumentLineMap.InventDimId = purchLine.InventDimId;
        vendDocumentLineMap.DeliveryName = purchLine.DeliveryName;

        vendDocumentLineMap.DeliveryPostalAddress = purchLine.DeliveryPostalAddress;

        vendDocumentLineMap.RemainBeforeInventPhysical = purchLine.RemainInventPhysical;
        vendDocumentLineMap.PdsCWRemainBefore = purchLine.PdsCWRemainInventPhysical;
        this.setAdvancedPricingInvoiceCalculationId(purchLine.pdsCalculationId);

        // <GEERU>
        if (countryRegion_RU)
        {
            purchLine_W = purchLine.purchLine_W();
            this.parmDeviationQty_RU(purchLine_W.DeviationQty_RU);
            this.parmPostingProfile_RU(purchLine_W.PostingProfile_RU ? purchLine_W.PostingProfile_RU : purchTable.PostingProfile);
            this.parmInventProfileType_RU(purchLine.inventDim().InventProfileId_RU ? purchLine.inventDim().inventProfile_RU().InventProfileType : InventProfileType_RU::General);
        }
        // </GEERU>
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            this.parmMaximumRetailPrice_IN(purchLine.purchLine_IN().MaximumRetailPrice);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoried</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the item is tracked in inventory.
    /// </summary>
    /// <returns>
    ///    <c>NoYes::Yes</c> if the object is tracked in inventory; otherwise, <c>NoYes::No</c>.
    /// </returns>
    public NoYes inventoried()
    {
        if (this.isNonPO() || this.isAdvance())
        {
            // Non-PO lines can only be non-inventoried
            return false;
        }

        return PurchLine::findRecId(vendDocumentLineMap.PurchLineRecId).isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean _update = false)
    {
        return InventDim::find(vendDocumentLineMap.InventDimId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(ItemId _itemId = vendDocumentLineMap.ItemId, boolean _update = false)
    {
        return InventTable::find(_itemId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an invoice is advance.
    /// </summary>
    /// <returns>
    ///    true if the invoice is advance; otherwise, false.
    /// </returns>
    public boolean isAdvance()
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonPO</Name>
				<Source><![CDATA[
    public boolean isNonPO()
    {
        return (vendDocumentLineMap.OrigPurchId == '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrepaymentApplication</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an invoice is prepayment application or not.
    /// </summary>
    /// <returns>
    /// true if invoice is prepayment application; otherwise, false.
    /// </returns>
    public boolean isPrepaymentApplication()
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public PurchLineShowItemName itemName()
    {
        return this.inventTable().itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExcludingTax</Name>
				<Source><![CDATA[
    public AmountCur lineAmountExcludingTax(
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        Tax _tax = null,
        VendDocumentTableMap _parmTable = null,
        boolean _keepEndDisc = false)
    {
        if (this.includeTax(null, _parmTable))
        {
            return this.amountExcludingTax(vendDocumentLineMap.LineAmount, vendDocumentLineMap.ReceiveNow, this.taxDate(_transDate), _tax, _parmTable, _keepEndDisc);
        }

        return vendDocumentLineMap.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountInclTax_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return line amount including taxes
    /// </summary>
    /// <param name="_transDate">
    /// Date on which taxes are calculated
    /// </param>
    /// <returns>
    /// Line amount including taxes
    /// </returns>
    public AmountCur lineAmountInclTax_RU(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PurchLine purchLine = this.purchLine();
        
        if (this.includeTax())
        {
            return vendDocumentLineMap.LineAmount;
        }
        else
        {
            return vendDocumentLineMap.LineAmount +
                Tax::calcTaxAmount(purchLine.TaxGroup,
                    purchLine.TaxItemGroup,
                    this.taxDate(_transDate),
                    purchLine.CurrencyCode,
                    vendDocumentLineMap.LineAmount,
                    TaxModuleType::Purch,
                    vendDocumentLineMap.ReceiveNow,
                    purchLine.PurchUnit,
                    purchLine.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAsset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the asset line record that corresponds to the purchase document line record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the asset line record should be retrieved for update.
    /// </param>
    /// <returns>
    ///    An asset line record that corresponds to the line record.
    /// </returns>
    public VendDocumentLineAssetMap lineAsset(boolean _forUpdate)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscExclTax</Name>
				<Source><![CDATA[
    public DiscAmount lineDiscExclTax(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.grossAmount() - vendDocumentLineMap.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedClosed</Name>
				<Source><![CDATA[
    public void modifiedClosed()
    {
        if (vendDocumentLineMap.Closed)
        {
            vendDocumentLineMap.RemainAfter = 0;
            vendDocumentLineMap.PdsCWRemainAfter = 0;
            this.setRemainAfterInvent();
        }
        else
        {
            PurchParmUpdate purchParmUpdate = this.purchParmUpdate();
            this.setQty(this.header().Ordering, purchParmUpdate.CreditRemaining, false);

            if (PdsGlobal::pdsIsCWItem(vendDocumentLineMap.ItemId))
            {
                this.pdsCWSetQty(this.header().Ordering, purchParmUpdate.CreditRemaining);
            }

            this.setLineAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedReceiveNow</Name>
				<Source><![CDATA[
    public void modifiedReceiveNow(boolean _setCWQuantities = false)
    {
        this.modifiedReceiveNowWithPromptDefault(_setCWQuantities);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedReceiveNowWithPromptDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements additional logic after <c>ReceiveNow</c> quantity has been changed.
    /// </summary>
    /// <param name = "_setCWQuantities">
    /// Determines if catch weight quantities should be updated. Default is no update.   
    /// </param>
    /// <param name = "_setSubLineReceiveNowPromptResult">
    /// Determines if a prompt is shown to a user in case the record is connected to
    /// a product receipt sub line and the modified <c>ReceiveNow</c> quantity deviates from the
    /// received quantity. Default is to show the prompt. 
    /// </param>
    public void modifiedReceiveNowWithPromptDefault(
        boolean      _setCWQuantities = false,
        UnknownNoYes _setSubLineReceiveNowPromptResult = UnknownNoYes::Unknown)
    {
        this.modifiedReceiveNowWithPromptDefaultByDocumentStatus(
            _setCWQuantities,
            _setSubLineReceiveNowPromptResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedReceiveNowWithPromptDefaultByDocumentStatus</Name>
				<Source><![CDATA[
    internal void modifiedReceiveNowWithPromptDefaultByDocumentStatus(
        boolean      _setCWQuantities = false,
        UnknownNoYes _setSubLineReceiveNowPromptResult = UnknownNoYes::Unknown,
        DocumentStatus _documentStatus = this.header().Ordering)
    {
        boolean updateInventQty;
        VendInvoiceInfoSubLine subLine;
        PurchParmUpdate purchParmUpdate = this.purchParmUpdate();

        //<GEERU>
        #isoCountryRegionCodes
        //</GEERU>

        if (_documentStatus == DocumentStatus::Invoice || _documentStatus == DocumentStatus::ApproveJournal
        // <GEERU>
        || (_documentStatus == DocumentStatus::Facture_RU && SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        // </GEERU>
        // <GEEPL>
        || (_documentStatus == DocumentStatus::PlSAD && SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoPL ]))
        // </GEEPL>
        )
        {
            if (VendInvoiceInfoSubLine::existForLine(vendDocumentLineMap.RecId))
            {
                // the document is an invoice or approval journal and there is a subline, we want to update only the Purch Quantities
                updateInventQty = false;

                select sum(ReceiveNow) from subLine
                where subLine.LineRefRecId == vendDocumentLineMap.RecId
                   && subLine.JournalRefTableId == tableNum(VendPackingSlipTrans);

                if (abs(vendDocumentLineMap.ReceiveNow) < abs(subLine.ReceiveNow))
                {
                    if (_setSubLineReceiveNowPromptResult == UnknownNoYes::No
                        || (_setSubLineReceiveNowPromptResult == UnknownNoYes::Unknown
                            && VendDocumentLineInterface::promptUpdateInventQty() == false))
                    {
                        vendDocumentLineMap.ReceiveNow = subLine.ReceiveNow;
                    }
                }
            }
            else
            {
                // the document is an invoice or approval journal and there is no subline, we want to update the Purch and Invent Quantities
                updateInventQty = true;
            }
        }
        else
        {
            // the document is not an invoice or approval journal, update the Purch Quantities and the Invent Quantities
            updateInventQty = true;
        }

        if (_setCWQuantities)
        {
            this.pdsCWSetQty(_documentStatus, purchParmUpdate.CreditRemaining);
        }

        if (updateInventQty)
        {
            this.setQty(_documentStatus, purchParmUpdate.CreditRemaining);
            this.setInventReceiveNow();
        }
        else
        {
            this.setQty(_documentStatus, purchParmUpdate.CreditRemaining, false, false);
        }

        this.setLineAmount();//Always set the lineAmount

        if (vendDocumentLineMap.Closed)
        {
            vendDocumentLineMap.RemainAfter = 0;
            this.setRemainAfterInvent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedReceiveNow_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the record just received.
    /// </summary>
    public void modifiedReceiveNow_IN()
    {
        boolean updateInventQty;
        DocumentStatus documentStatus = this.header().Ordering;
        VendInvoiceInfoSubLine subLine;
        RealBase factor;
        RealBase assessableValueAccountingCurr;
        PurchParmUpdate purchParmUpdate = this.purchParmUpdate();
        PurchTable purchTable = this.purchTable();
        CustomsVendBOETrans_IN              custVendBOETrans;
        CustomsVendBOEJour_IN               custVendBOEJour;
        CustomsBillOfEntryNumberTable_IN    customsBillOfEntryNumberTableIn;
        VendInvoiceInfoSubLine              vendInvoiceInfoSubLine;

        if (documentStatus == DocumentStatus::Invoice || documentStatus == DocumentStatus::ApproveJournal)
        {
            if (TaxParameters::isCustomsEnable_IN() && VendDocumentLineInterface::isTransactionRelatedToBOE_IN(purchTable, purchParmUpdate))
            {
                if (VendInvoiceInfoSubLine::existForLine(vendDocumentLineMap.RecId))
                {
                    // the document is an invoice or approval journal and there is a subline, we want to update only the Purch Quantities
                    updateInventQty = false;

                    select sum(ReceiveNow) from subLine
                    where subLine.LineRefRecId == vendDocumentLineMap.RecId
                       && subLine.JournalRefTableId == tableNum(VendPackingSlipTrans);

                    if (abs(vendDocumentLineMap.ReceiveNow) < abs(subLine.ReceiveNow))
                    {
                        if (!VendDocumentLineInterface::promptUpdateInventQty())
                        {
                            vendDocumentLineMap.ReceiveNow = subLine.ReceiveNow;
                        }
                    }
                    else
                    {
                        // the document is an invoice or approval journal and there is subline for Customs, we want to update the Purch and Invent Quantities
                        updateInventQty = true;
                    }
                }
                else
                {
                    // the document is an invoice or approval journal and there is no subline, we want to update the Purch and Invent Quantities
                    updateInventQty = true;
                }
            }
        }
        else
        {
            // the document is not an invoice or approval journal, update the Purch Quantities and the Invent Quantities
            updateInventQty = true;
        }

        this.setQty_IN(this.header().Ordering, purchParmUpdate.CreditRemaining, updateInventQty);
        this.setInventReceiveNow();
        this.setLineAmount();

        if (!purchTable.purchTable_W().CustomsImportOrder_IN
            || documentStatus == DocumentStatus::BillOfEntry_IN
            || documentStatus == DocumentStatus::Invoice)
        {
            select firstOnly assessableValue, BillOfEntryQty, BillOfEntryDate from custVendBOETrans
                        join customsBillOfEntryNumberTableIn
                            where customsBillOfEntryNumberTableIn.RecId == custVendBOETrans.CustomsBillOfEntryNumberTable
                        exists join vendInvoiceInfoSubLine
                            where vendInvoiceInfoSubLine.LineRefRecId       == vendDocumentLineMap.RecId
                                && vendInvoiceInfoSubLine.JournalRefTableId == tableNum(CustomsVendBOETrans_IN)
                                && vendInvoiceInfoSubLine.JournalRefRecId   == custVendBOETrans.RecId;
            
            if (custVendBOETrans.BillOfEntryQty && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                factor = custVendBOETrans.AssessableValue / custVendBOETrans.BillOfEntryQty;
                this.parmAssessableValue_IN(factor * vendDocumentLineMap.ReceiveNow);

                assessableValueAccountingCurr = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(this.parmAssessableValue_IN(), vendDocumentLineMap.orig().currencyCode, custVendBOETrans.BillOfEntryDate);
            }
            else
            {
                factor = this.origInstance().parmAssessableValue_IN() / vendDocumentLineMap.orig().ReceiveNow;
                this.parmAssessableValue_IN(factor * vendDocumentLineMap.ReceiveNow);
                assessableValueAccountingCurr = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(this.parmAssessableValue_IN(), vendDocumentLineMap.orig().currencyCode);
            }

            vendDocumentLineMap.VendDocumentLineMap::parmAssessableValueAccountingCurrency(assessableValueAccountingCurr);
        }

        if (vendDocumentLineMap.Closed)
        {
            vendDocumentLineMap.RemainAfter = 0;
            this.setRemainAfterInvent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the name field from the order line because this is relevant for category based lines.
    /// </summary>
    /// <returns>
    ///    The name field from the order line.
    /// </returns>
    public ItemFreeTxt name()
    {
        if (this.isNonPO())
        {
            return vendDocumentLineMap.Description;
        }

        return this.purchLine().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>AssessableValue_IN</c> field.
    /// </summary>
    /// <param name="_assessableValue_IN">
    /// The value of <c>AssessableValue_IN</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>AssessableValue_IN</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public PurchLineAmount parmAssessableValue_IN(PurchLineAmount _assessableValue_IN = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssessableValueAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>AssessableValue_IN</c> field.
    /// </summary>
    /// <param name="_assessableValueAccountingCurrency">
    /// The value of <c>AssessableValueAccountingCurrency</c> field to set.
    /// </param>
    /// <returns>
    /// <c>AssessableValueAccountingCurrency</c> from table
    /// </returns>
    public AmountMST parmAssessableValueAccountingCurrency(AmountMST _assessableValueAccountingCurrency)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCFOPTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>CFOPTable_BR</c> field.
    /// </summary>
    /// <param name="_cfopTable_BR">
    /// The value of <c>CFOPTable_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>CFOPTable_BR</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public RefRecId parmCFOPTable_BR(RefRecId _cfopTable_BR = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFreightNature_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>CFOPTable_BR</c> field.
    /// </summary>
    /// <param name="_cfopTable_BR">
    /// The value of <c>CFOPTable_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>CFOPTable_BR</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public FreightNature_BR parmFreightNature_BR(FreightNature_BR _freightNature_BR = FreightNature_BR::Blank)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegionName_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>CountryRegionName_RU</c> field.
    /// </summary>
    /// <param name="_countryRegionName_RU">
    /// The value of <c>CountryRegionName_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>CountryRegionName_RU</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public AddressCountryRegionName parmCountryRegionName_RU(AddressCountryRegionName _countryRegionName_RU = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsBillOfEntryNumberTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>CustomsBillOfEntryNumberTable_IN</c> field.
    /// </summary>
    /// <param name="_customsBillOfEntryNumberTable_IN">
    /// The value of <c>CustomsBillOfEntryNumberTable_IN</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>CustomsBillOfEntryNumberTable_IN</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public RefRecId parmCustomsBillOfEntryNumberTable_IN(RefRecId _customsBillOfEntryNumberTable_IN = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsImportInvoiceNumberTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>CustomsImportInvoiceNumberTable_IN</c> field.
    /// </summary>
    /// <param name="_customsImportInvoiceNumberTable_IN">
    /// The value of <c>CustomsImportInvoiceNumberTable_IN</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>CustomsImportInvoiceNumberTable_IN</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public RefRecId parmCustomsImportInvoiceNumberTable_IN(RefRecId _customsImportInvoiceNumberTable_IN = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsInvoiceRegnRecId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>CustomsInvoiceRegnRecId_IN</c> field.
    /// </summary>
    /// <param name="_customsInvoiceRegnRecId_IN">
    /// The value of <c>CustomsInvoiceRegnRecId_IN</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>CustomsInvoiceRegnRecId_IN</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public RefRecId parmCustomsInvoiceRegnRecId_IN(RefRecId _customsInvoiceRegnRecId_IN = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviationQty_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>DeviationQty_RU</c> field.
    /// </summary>
    /// <param name="_purchDeviationQty_RU">
    /// The value of <c>DeviationQty_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>DeviationQty_RU</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public PurchDeviationQty_RU parmDeviationQty_RU(PurchDeviationQty_RU _purchDeviationQty_RU = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntrastatFulfillmentDate_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>IntrastatFulfillmentDate_HU</c> field.
    /// </summary>
    /// <param name="_intrastatFulfillmentDate_HU">
    /// The value of <c>IntrastatFulfillmentDate_HU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>IntrastatFulfillmentDate_HU</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public IntrastatFulfillmentDate_HU parmIntrastatFulfillmentDate_HU(IntrastatFulfillmentDate_HU _intrastatFulfillmentDate_HU = dateNull())
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>InventProfileType_RU</c> field.
    /// </summary>
    /// <param name="_inventProfileType_RU">
    /// The value of <c>InventProfileType_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>InventProfileType_RU</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public InventProfileType_RU parmInventProfileType_RU(InventProfileType_RU _inventProfileType_RU = InventProfileType_RU::NotSpecified)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceGTDId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>InvoiceGTDId_RU</c> field.
    /// </summary>
    /// <param name="_invoiceGTDId_RU">
    /// The value of <c>InvoiceGTDId_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>InvoiceGTDId_RU</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public CustFreeInvoiceGTDId_RU parmInvoiceGTDId_RU(CustFreeInvoiceGTDId_RU _invoiceGTDId_RU = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>MarkupCode_RU</c> field.
    /// </summary>
    /// <param name="_markupCode_RU">
    /// The value of <c>MarkupCode_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>MarkupCode_RU</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public MarkupCodeVend_RU parmMarkupCode_RU(MarkupCodeVend_RU _markupCode_RU = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaximumRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>MaximumRetailPrice_IN</c> field.
    /// </summary>
    /// <param name="_maximumRetailPrice_IN">
    /// The value of <c>MaximumRetailPrice_IN</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>MaximumRetailPrice_IN</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public MaximumRetailPrice_IN parmMaximumRetailPrice_IN(MaximumRetailPrice_IN _maximumRetailPrice_IN = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>PostingProfile_RU</c> field.
    /// </summary>
    /// <param name="_postingProfile_RU">
    /// The value of <c>PostingProfile_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>PostingProfile_RU</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public VendPostingProfile parmPostingProfile_RU(VendPostingProfile _postingProfile_RU = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxServiceCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>TaxServiceCode_BR</c> field.
    /// </summary>
    /// <param name="_taxServiceCodeId_BR">
    /// The value of <c>TaxServiceCode_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>TaxServiceCode_BR</c> from table <c>VendInvoiceInfoLine_W</c>.
    /// </returns>
    public TaxServiceCodeId_BR parmTaxServiceCode_BR(TaxServiceCodeId_BR _taxServiceCodeId_BR = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets the catch weight quantity fields.
    /// </summary>
    /// <param name="_documentStatus">
    /// The status of the vendor document line.
    /// </param>
    /// <param name="_creditRemaining">
    /// Boolean variable to determine whether the remaining quantity should be credited.
    /// </param>
    public void pdsCWSetQty(DocumentStatus _documentStatus, boolean _creditRemaining)
    {
        PurchLine purchLine = this.purchLine();
        PurchQuantity purchQuantity = PurchQuantity::construct(_documentStatus);

        purchLine.PdsCWInventReceivedNow = vendDocumentLineMap.PdsCWReceiveNow;

        [vendDocumentLineMap.PdsCWReceiveNow, vendDocumentLineMap.PdsCWRemainBefore, vendDocumentLineMap.PdsCWRemainAfter] =
            purchQuantity.pdsCWQtyInvent(purchLine, PurchUpdate::All, purchLine.PdsCWInventReceivedNow, _creditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsPurchPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or computes the effective purchase price for the line.
    /// </summary>
    /// <param name="_force">
    ///     Determines whether to force recalculation of the advanced price; optional.
    /// </param>
    /// <returns>
    ///     The effective purchase price for the line.
    /// </returns>
    public PurchPrice pdsPurchPrice(boolean _force = false)
    {
        PurchPrice price = this.getPdsPurchPrice(_force);

        if (!price)
        {
            price = vendDocumentLineMap.PurchPrice;
        }

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptUpdateInventQty</Name>
				<Source><![CDATA[
    protected static boolean promptUpdateInventQty()
    {
        if (Box::okCancel("@SCM:InvoiceUpdateQuantityLessThanMatchedProductReceipts", DialogButton::Cancel) == DialogButton::Ok)
        {
            return (Box::yesNo("@SCM:MatchedProductReceiptQuantityInvoiced", DialogButton::Yes) == DialogButton::Yes);
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the <c>PurchParmUpdate</c> record for the given record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>PurchParmUpdate</c> record if it exists; otherwise, an empty <c>PurchParmUpdate</c> record.
    /// </returns>
    public PurchParmUpdate purchParmUpdate(boolean _forUpdate = false)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    public PurchLine purchLine(boolean _forUpdate = false)
    {
        PurchLine purchLine;

        if (vendDocumentLineMap.PurchLineRecId != 0)
        {
            purchLine = PurchLine::findRecId(vendDocumentLineMap.PurchLineRecId, _forUpdate);
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    public PurchTable purchTable(boolean _update = false)
    {
        PurchTable purchTable;

        if (vendDocumentLineMap.OrigPurchId)
        {
            purchTable = PurchTable::find(vendDocumentLineMap.OrigPurchId, _update);
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchaseInventReceiveNow</Name>
				<Source><![CDATA[
    protected void setPurchaseInventReceiveNow(boolean setInventNow = true)
    {
        PurchLine purchLine;
        InventQty delta;

        purchLine = this.purchLine();
        if (!purchLine.isStocked())
        {
            vendDocumentLineMap.InventNow = 0.0;
        }
        else if (setInventNow)
        {
            EcoResProductUnitConverter productUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                purchLine.ItemId,
                purchLine.InventDimId,
                purchLine.PurchUnit,
                purchLine.inventTable().inventUnitId(),
                NoYes::Yes);

            vendDocumentLineMap.InventNow = productUnitConverter.convertValue(vendDocumentLineMap.ReceiveNow);

            //Check if any delta between ordered inventory qty and PS received invent qty on the invoicing window.
            if (vendDocumentLineMap.Ordering == DocumentStatus::Invoice)
            {
                delta = purchLine.RemainInventFinancial - productUnitConverter.convertValue(purchLine.RemainPurchFinancial);
                vendDocumentLineMap.InventNow += delta;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdvancedPricingInvoiceCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the attribute-based calculation ID in the table buffer mapped.
    /// </summary>
    /// <param name="_calculationId">
    /// The calculation ID to set; optional.
    /// </param>
    public void setAdvancedPricingInvoiceCalculationId(PDSCalculationId _calculationId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventReceiveNow</Name>
				<Source><![CDATA[
    public void setInventReceiveNow(boolean setInventNow = true)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmount</Name>
				<Source><![CDATA[
    public void setLineAmount(Qty _qty = vendDocumentLineMap.ReceiveNow, PurchLine _purchLine = null)
    {
        vendDocumentLineMap.LineAmount = this.calculateLineAmount(_qty, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchaseQty</Name>
				<Source><![CDATA[
    protected void setPurchaseQty(DocumentStatus _documentStatus,
        boolean _creditRemaining,
        boolean _setInventNow = true,
        boolean _setInventQtys = true)
    {
        PurchQuantity purchQuantity = this.createPurchQuantity(_documentStatus, _creditRemaining, _setInventNow, _setInventQtys);

        PurchLine purchLine = this.purchLine();

        this.revertPreviousPurchParmLineChanges(purchLine);

        purchLine.PurchReceivedNow = vendDocumentLineMap.ReceiveNow;

        boolean purchRevicedNowChanged = false;

        if (vendDocumentLineMap.orig().RecId
            && (vendDocumentLineMap.orig().ReceiveNow != vendDocumentLineMap.ReceiveNow
                || vendDocumentLineMap.orig().RemainAfterInvent != vendDocumentLineMap.RemainAfterInvent))
        {
            purchRevicedNowChanged = true;
        }

        if (purchLine.isStocked() && vendDocumentLineMap.InventNow && !purchRevicedNowChanged)
        {
            purchLine.InventReceivedNow = vendDocumentLineMap.InventNow;
        }
        else
        {
            purchLine.setInventReceivedNow();
        }

        vendDocumentLineMap.RemainBeforeInventPhysical = purchLine.RemainInventPhysical;

        [vendDocumentLineMap.ReceiveNow, vendDocumentLineMap.RemainBefore, vendDocumentLineMap.RemainAfter] =
            purchQuantity.qtyPurch(
                purchLine,
                PurchUpdate::All,
                purchLine.PurchReceivedNow,
                _creditRemaining
            );

        InventQty inventNow;
        if (_setInventQtys)
        {
            [inventNow, vendDocumentLineMap.RemainBeforeInvent, vendDocumentLineMap.RemainAfterInvent] =
                purchQuantity.qtyInvent(
                    purchLine,
                    PurchUpdate::All,
                    purchLine.InventReceivedNow,
                    _creditRemaining
                );

            if (_setInventNow)
            {
                vendDocumentLineMap.InventNow = inventNow;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PurchQuantity</c> instance.
    /// </summary>
    /// <param name = "_documentStatus">
    /// A <c>DocumentStatus</c> enumeration value.
    /// </param>
    /// <param name = "_creditRemaining">
    /// A boolean that specifies if credit is remaining.
    /// </param>
    /// <param name = "_setInventNow">
    /// A boolean that determines if the <c>InventNow</c> field is set.
    /// </param>
    /// <param name = "_setInventQtys">
    /// A boolean that determines if the inventory quantities are set.
    /// </param>
    /// <returns>
    /// A <c>PurchQuantity</c> instance.
    /// </returns>
    /// <remarks>
    /// Additional parameters provided for extensibility.
    /// </remarks>
    protected PurchQuantity createPurchQuantity(DocumentStatus _documentStatus,
        boolean _creditRemaining,
        boolean _setInventNow,
        boolean _setInventQtys)
    {
        return PurchQuantity::construct(_documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQty</Name>
				<Source><![CDATA[
    public void setQty(DocumentStatus _documentStatus, boolean _creditRemaining, boolean _setInventNow = true, boolean _setInventQtys = true)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertPreviousPurchParmLineChanges</Name>
				<Source><![CDATA[
    protected PurchParmLine revertPreviousPurchParmLineChanges(PurchLine _purchLine)
    {
        PurchParmLine purchParmLine;
        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQty_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the quantity information.
    /// </summary>
    /// <param name="documentStatus">
    /// The document status.
    /// </param>
    /// <param name="creditRemaining">
    /// True if there is any credit remaining.
    /// </param>
    /// <param name="setInventNow">
    /// True if the invent should be set now.
    /// </param>
    public void setQty_IN(DocumentStatus documentStatus, boolean creditRemaining, boolean setInventNow = true)
    {
        PurchQuantity purchQuantity;
        PurchLine purchLine;
        InventQty inventNow;
        PurchParmLine purchParmLineLoc;
        boolean isCustomsMarked = TaxParameters::isCustomsEnable_IN();
        PurchTable purchTableCopy = this.purchTable();
        PurchParmUpdate purchParmUpdateCopy = this.purchParmUpdate();

        VendDocumentLineMap vendDocumentLineMapCopy;
        if (this.isNonPO())
        {
            return;
        }

        purchQuantity = PurchQuantity::construct(documentStatus);
        purchQuantity.parmCustomsImporterInvoiceNumber_IN(this.parmCustomsImportInvoiceNumberTable_IN());
        purchQuantity.parmCustomsVendBOETrans_IN(VendDocumentLineInterface::getCustomsVendBOETrans_IN(vendDocumentLineMap.RecId, vendDocumentLineMap.ParmId, vendDocumentLineMap.TableId).RecId);
        purchLine = this.purchLine();
        
        purchParmLineLoc = this.revertPreviousPurchParmLineChanges(purchLine);
        

        purchLine.PurchReceivedNow = vendDocumentLineMap.ReceiveNow;
        purchLine.setInventReceivedNow();

        vendDocumentLineMap.RemainBeforeInventPhysical = purchLine.RemainInventPhysical;

        if (VendDocumentLineInterface::isTransactionRelatedToBOE_IN(purchTableCopy, purchParmUpdateCopy) && purchParmLineLoc.purchParmTable().VendPackingSlipJour)
        {
            [vendDocumentLineMap.ReceiveNow, vendDocumentLineMap.RemainBefore, vendDocumentLineMap.RemainAfter] =
                purchQuantity.qtyPurch(purchLine, PurchUpdate::All, purchLine.PurchReceivedNow, creditRemaining);
        }
        else
        {
            [vendDocumentLineMap.ReceiveNow, vendDocumentLineMap.RemainBefore, vendDocumentLineMap.RemainAfter] =
                purchQuantity.calcQtyPurchOnModification_IN(purchLine, vendDocumentLineMap.ReceiveNow, PurchUpdate::All, purchLine.PurchReceivedNow, creditRemaining);
        }
        [inventNow, vendDocumentLineMap.RemainBeforeInvent, vendDocumentLineMap.RemainAfterInvent] =
            purchQuantity.qtyInvent(purchLine, PurchUpdate::All, purchLine.InventReceivedNow, creditRemaining);

        if (setInventNow)
        {
            vendDocumentLineMap.InventNow = inventNow;
        }

        if (isCustomsMarked && VendDocumentLineInterface::isTransactionRelatedToBOE_IN(purchTableCopy, purchParmUpdateCopy))
        {
            VendDocumentLineInterface::createInstance(vendDocumentLineMapCopy).updateLinkedParmline_IN(
                documentStatus, vendDocumentLineMap.ParmId, vendDocumentLineMap.PurchLineRecId, vendDocumentLineMap.TableRefId, creditRemaining, setInventNow, vendDocumentLineMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainAfterInvent</Name>
				<Source><![CDATA[
    public void setRemainAfterInvent()
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchaseRemainAfterInvent</Name>
				<Source><![CDATA[
    protected void setPurchaseRemainAfterInvent()
    {
        PurchLine purchLine = this.purchLine();

        if (this.isNonPO() || !purchLine.isStocked())
        {
            vendDocumentLineMap.RemainAfterInvent = 0.0;
        }
        else
        {
            vendDocumentLineMap.RemainAfterInvent = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                vendDocumentLineMap.ItemId,
                vendDocumentLineMap.InventDimId,
                vendDocumentLineMap.RemainAfter,
                purchLine.PurchUnit,
                purchLine.inventTable().inventUnitId(),
                NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    public TransDate taxDate(TransDate transDate)
    {
        if (this.isNonPO())
        {
            return transDate;
        }

        return TaxParameters::find().TaxCalculationDateType == TaxCalculationDateType::DeliveryDate ? this.purchLine().deliveryDate(transDate) : transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinkedParmline_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the linked parm line.
    /// </summary>
    /// <param name="_documentStatus">
    /// The document status.
    /// </param>
    /// <param name="_parmId">
    /// The parm id.
    /// </param>
    /// <param name="_purchlineRecId">
    /// The purch line rec id.
    /// </param>
    /// <param name="_tradeLineRefId">
    /// The trade line reference id.
    /// </param>
    /// <param name="_creditRemaining">
    /// True if there is any credit remaining.
    /// </param>
    /// <param name="setInventNow">
    /// True if the invent should be set now.
    /// </param>
    /// <param name="curvendDocumentLineMap">
    /// The current vend document line map.
    /// </param>
    public void updateLinkedParmline_IN(
        DocumentStatus _documentStatus,
        ParmId _parmId,
        RefRecId _purchlineRecId,
        TradeLineRefId _tradeLineRefId,
        boolean _creditRemaining,
        boolean setInventNow = true,
        VendDocumentLineMap curvendDocumentLineMap = null)
    {
        PurchQty remainAfter;
        PurchQty receiveNowCopy;
        InventQty inventNow;
        InventQty inventNowCopy;
        InventQty remainAfterInvent;

        VendDocumentLineMap vendDocumentLineMapCopy;
        PurchParmLine purchParmLineCopy;
        PurchParmLine purchParmLineLoc;
        VendInvoiceInfoLine vendInvoiceInfoLineCopy;
        PurchParmSubLine purchParmSubLineCopy;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLineCopy;
        CustomsVendBOETrans_IN customsVendBOETrans;

        PurchParmUpdate purchParmUpdateCopy = PurchParmUpdate::find(_parmId);

        boolean isPurchParmline;
        boolean isVendInvoiceInfoLine;

        if (!_purchlineRecId)
        {
            return;
        }

        PurchQuantity purchQuantity = PurchQuantity::construct(_documentStatus);
        PurchLine purchLine = PurchLine::findRecId(_purchlineRecId);

        if (PurchParmTable::find(_parmId, _tradeLineRefId))
        {
            vendDocumentLineMapCopy = purchParmLineCopy;
            isPurchParmline = true;
        }

        if (VendInvoiceInfoTable::find(_parmId, _tradeLineRefId))
        {
            vendDocumentLineMapCopy = vendInvoiceInfoLineCopy;
            isVendInvoiceInfoLine = true;
        }

        ttsbegin;
        while select forupdate vendDocumentLineMapCopy
            where vendDocumentLineMapCopy.ParmId == _parmId &&
                  vendDocumentLineMapCopy.TableRefId == _tradeLineRefId &&
                  vendDocumentLineMapCopy.PurchLineRecId == _purchlineRecId
        {
            purchParmSubLineCopy.clear();
            vendInvoiceInfoSubLineCopy.clear();

            customsVendBOETrans = VendDocumentLineInterface::getCustomsVendBOETrans_IN(vendDocumentLineMapCopy.RecId, vendDocumentLineMapCopy.ParmId, vendDocumentLineMapCopy.TableId);

            if (purchParmUpdateCopy.SpecQty == PurchUpdate::BillOfEntryQuantity_IN
                && purchParmUpdateCopy.DocumentStatus == DocumentStatus::PackingSlip
                && remainAfter
                && remainAfterInvent)
            {
                purchLine.RemainPurchPhysical = remainAfter;
                purchLine.RemainInventPhysical = remainAfterInvent;
            }

            if ((purchParmUpdateCopy.SpecQty == PurchUpdate::PackingSlip
                || purchParmUpdateCopy.SpecQty == PurchUpdate::BillOfEntryQuantity_IN)
                && purchParmUpdateCopy.DocumentStatus == DocumentStatus::Invoice
                && (remainAfter
                || remainAfterInvent))
            {
                if (purchParmUpdateCopy.SpecQty == PurchUpdate::PackingSlip)
                {
                    purchLine.RemainPurchFinancial = 0;
                    purchLine.RemainInventFinancial = 0;
                }
                else
                {
                    purchLine.RemainPurchFinancial = max(purchLine.RemainPurchFinancial - receiveNowCopy, 0);
                    purchLine.RemainInventFinancial = max(purchLine.RemainInventFinancial - inventNowCopy, 0);
                }
                purchLine.RemainPurchPhysical = remainAfter;
                purchLine.RemainInventPhysical = remainAfterInvent;
            }

            purchQuantity.parmCustomsVendBOETrans_IN(customsVendBOETrans.RecId);

            if (isPurchParmline)
            {
                purchParmLineLoc = vendDocumentLineMapCopy.data();
            }

            if (isPurchParmline && purchParmLineLoc.purchParmTable().VendPackingSlipJour)
            {
                purchParmLineLoc.revertPreviousVersionChanges(purchLine);

                [vendDocumentLineMapCopy.ReceiveNow, vendDocumentLineMapCopy.RemainBefore, vendDocumentLineMapCopy.RemainAfter] = purchQuantity.qtyPurch(purchLine,
                                                                                                    PurchUpdate::All,
                                                                                                    vendDocumentLineMapCopy.RecId == curvendDocumentLineMap.RecId ? curvendDocumentLineMap.ReceiveNow : vendDocumentLineMapCopy.ReceiveNow,
                                                                                                    _creditRemaining
                                                                                                    );
            }
            // when invoice based on boe
            else if (purchParmUpdateCopy.SpecQty == PurchUpdate::BillOfEntryQuantity_IN
                     && purchParmUpdateCopy.DocumentStatus == DocumentStatus::Invoice)
            {
                [vendDocumentLineMapCopy.ReceiveNow, vendDocumentLineMapCopy.RemainBefore, vendDocumentLineMapCopy.RemainAfter] = purchQuantity.qtyPurch(
                                                                                                                                    purchLine
                                                                                                                                    ,PurchUpdate::BillOfEntryQuantity_IN
                                                                                                                                    ,vendDocumentLineMapCopy.RecId == curvendDocumentLineMap.RecId ? curvendDocumentLineMap.ReceiveNow : vendDocumentLineMapCopy.ReceiveNow
                                                                                                                                    ,_creditRemaining);
            }
            else
            {
                [vendDocumentLineMapCopy.ReceiveNow, vendDocumentLineMapCopy.RemainBefore, vendDocumentLineMapCopy.RemainAfter] = purchQuantity.calcQtyPurchOnModification_IN(purchLine,
                                                                                                                        vendDocumentLineMapCopy.RecId == curvendDocumentLineMap.RecId ? curvendDocumentLineMap.ReceiveNow : vendDocumentLineMapCopy.ReceiveNow,
                                                                                                                        PurchUpdate::All,
                                                                                                                        vendDocumentLineMapCopy.ReceiveNow,
                                                                                                                        _creditRemaining);
            }

            if (purchParmUpdateCopy.SpecQty == PurchUpdate::BillOfEntryQuantity_IN && purchParmUpdateCopy.DocumentStatus == DocumentStatus::Invoice)
            {
                // when invoice based on boe
                [inventNow, vendDocumentLineMapCopy.RemainBeforeInvent, vendDocumentLineMapCopy.RemainAfterInvent] = purchQuantity.qtyInvent(purchLine,
                                                                                                       PurchUpdate::BillOfEntryQuantity_IN,
                                                                                                       vendDocumentLineMapCopy.RecId == curvendDocumentLineMap.RecId ? curvendDocumentLineMap.ReceiveNow : vendDocumentLineMapCopy.ReceiveNow,
                                                                                                       _creditRemaining);
            }
            else
            {
                [inventNow, vendDocumentLineMapCopy.RemainBeforeInvent, vendDocumentLineMapCopy.RemainAfterInvent] = purchQuantity.qtyInvent(purchLine,
                                                                                                       PurchUpdate::All,
                                                                                                       vendDocumentLineMapCopy.RecId == curvendDocumentLineMap.RecId ? curvendDocumentLineMap.ReceiveNow : vendDocumentLineMapCopy.ReceiveNow,
                                                                                                       _creditRemaining);
            }
            if (purchParmUpdateCopy.SpecQty == PurchUpdate::BillOfEntryQuantity_IN
                && purchParmUpdateCopy.DocumentStatus == DocumentStatus::PackingSlip
                && (vendDocumentLineMapCopy.RemainAfter
                && vendDocumentLineMapCopy.RemainAfterInvent))
            {
                remainAfter = vendDocumentLineMapCopy.RemainAfter;
                remainAfterInvent = vendDocumentLineMapCopy.RemainAfterInvent;
            }

            if ((purchParmUpdateCopy.SpecQty == PurchUpdate::PackingSlip
                || purchParmUpdateCopy.SpecQty == PurchUpdate::BillOfEntryQuantity_IN)
                && purchParmUpdateCopy.DocumentStatus == DocumentStatus::Invoice
                && (vendDocumentLineMapCopy.RemainAfter
                || vendDocumentLineMapCopy.RemainAfterInvent))
            {
                remainAfter = vendDocumentLineMapCopy.RemainAfter;
                remainAfterInvent = vendDocumentLineMapCopy.RemainAfterInvent;
                receiveNowCopy = vendDocumentLineMapCopy.ReceiveNow;
                inventNowCopy = inventNow;
            }

            if (setInventNow)
            {
                vendDocumentLineMapCopy.InventNow = inventNow;
            }

            // update the PurchParmSubline/VendInvoiceInfoSublines for the corresponding transaction
            if (isPurchParmline)
            {
                purchParmSubLineCopy = PurchParmSubLine::find(vendDocumentLineMapCopy.RecId, customsVendBOETrans.TableId, customsVendBOETrans.RecId, true);
                if (purchParmSubLineCopy)
                {
                    purchParmSubLineCopy.ReceiveNow = vendDocumentLineMapCopy.ReceiveNow;
                    purchParmSubLineCopy.InventNow = vendDocumentLineMapCopy.InventNow;
                    purchParmSubLineCopy.update();
                }
            }
            else if (isVendInvoiceInfoLine)
            {
                vendInvoiceInfoSubLineCopy = VendInvoiceInfoSubLine::find(vendDocumentLineMapCopy.RecId, customsVendBOETrans.TableId, customsVendBOETrans.RecId, true);
                if (vendInvoiceInfoSubLineCopy)
                {
                    vendInvoiceInfoSubLineCopy.ReceiveNow = vendDocumentLineMapCopy.ReceiveNow;
                    vendInvoiceInfoSubLineCopy.InventNow = vendDocumentLineMapCopy.InventNow;
                    vendInvoiceInfoSubLineCopy.update();
                }
            }

            if (curvendDocumentLineMap)
            {
                if (vendDocumentLineMapCopy.RecId == curvendDocumentLineMap.RecId)
                {
                    [curvendDocumentLineMap.ReceiveNow, curvendDocumentLineMap.RemainBefore, curvendDocumentLineMap.RemainAfter] = [vendDocumentLineMapCopy.ReceiveNow, vendDocumentLineMapCopy.RemainBefore, vendDocumentLineMapCopy.RemainAfter];

                    [inventNow, curvendDocumentLineMap.RemainBeforeInvent, curvendDocumentLineMap.RemainAfterInvent] = [inventNow, vendDocumentLineMapCopy.RemainBeforeInvent, vendDocumentLineMapCopy.RemainAfterInvent];
                }

                if (vendDocumentLineMapCopy.RecId != curvendDocumentLineMap.RecId)
                {
                    vendDocumentLineMapCopy.doUpdate();
                }
            }
            else
            {
                vendDocumentLineMapCopy.doUpdate();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQtyAndAmount</Name>
				<Source><![CDATA[
    public boolean validateQtyAndAmount()
    {
        #VendInvoiceFaults
        boolean isValid = true;

        if (vendDocumentLineMap.ReceiveNow * vendDocumentLineMap.LineAmount < 0)
        {
            AifFault::checkFailedLogFault("@SYS78848", #QtyAndNetAmountHaveOppositeSigns);
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsVendBOETrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customs vend BOE transaction.
    /// </summary>
    /// <param name="_parmLineRecId">
    /// The parm line rec id.
    /// </param>
    /// <param name="_parmLineParmId">
    /// The parm line parm id.
    /// </param>
    /// <param name="_parmLineTableId">
    /// The parm line table id.
    /// </param>
    /// <returns>
    /// The customs vend BOE transaction.
    /// </returns>
    public static CustomsVendBOETrans_IN getCustomsVendBOETrans_IN(RecId _parmLineRecId, ParmId _parmLineParmId, TableId _parmLineTableId)
    {
        CustomsVendBOETrans_IN customsVendBOETrans;

        switch (_parmLineTableId)
        {
            case tableNum(PurchParmLine):
                
                return PurchParmLineVendDocumentLine::getCustomsVendBOETrans_IN(_parmLineRecId, _parmLineParmId);

            case tableNum(VendInvoiceInfoLine):
                
                return VendInvoiceInfoLineVendDocumentLine::getCustomsVendBOETrans_IN(_parmLineRecId, _parmLineParmId);
        }

        return customsVendBOETrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionRelatedToBOE_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transaction related to BOE.
    /// </summary>
    /// <param name="_purchTable">
    /// The purch table information.
    /// </param>
    /// <param name="_purchParmUpdate">
    /// The purch parm update information.
    /// </param>
    /// <returns>
    /// Returns true if the transaction is related to BOE.
    /// </returns>
    public static boolean isTransactionRelatedToBOE_IN(PurchTable _purchTable, PurchParmUpdate _purchParmUpdate)
    {
        boolean ret = false;

        if (_purchTable && _purchParmUpdate)
        {
            if (_purchParmUpdate.CustomsImportOrderType_IN == CustomsImportOrderType_IN::ImportOrder && _purchTable.purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
            {
                // If user is posting a packing slip and the Quantities being selected as Bill Of Entry
                if ((_purchParmUpdate.DocumentStatus == DocumentStatus::PackingSlip
                && _purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN)
                ||
                // If user is posting an Invoice and the Quantities being selected either Bill Of Entry or Packing slip
                (_purchParmUpdate.DocumentStatus == DocumentStatus::Invoice
                && (_purchParmUpdate.SpecQty == PurchUpdate::BillOfEntryQuantity_IN
                || _purchParmUpdate.SpecQty == PurchUpdate::PackingSlip)))

                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineFromHeader</Name>
				<Source><![CDATA[
    protected static VendDocumentLineMap getLineFromHeader(VendDocumentTableMap _header)
    {
        VendDocumentLineMap parmLine;

        switch (_header.TableId)
        {
            case tableNum(VendInvoiceInfoTable):
                VendInvoiceInfoLine vendInvoiceInfoLine;
                parmLine = vendInvoiceInfoLine;
                break;

            case tableNum(PurchParmTable):
                PurchParmLine purchParmLine;
                parmLine = purchParmLine;
                break;

            case tableNum(ConsignmentDraftReplenishmentOrderJournalHeader):
                ConsignmentDraftReplenishmentOrderJournalLine consignmentDraftReplenishmentOrderJournalLine;
                parmLine = consignmentDraftReplenishmentOrderJournalLine;
                break;
        }

        return parmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromHeader</Name>
				<Source><![CDATA[
    public static VendDocumentLineMap newFromHeader(VendDocumentTableMap _header)
    {
        VendDocumentLineMap parmLine = VendDocumentLineInterface::getLineFromHeader(_header);

        if (!parmLine.TableId)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        return parmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the <c>VendInvoiceInfoSubTable</c> or <c>PurchParmSubTable</c> record for the
    ///    given record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A single <c>VendInvoiceInfoSubTable</c> or <c>PurchParmSubTable</c> record if it exists; otherwise,
    ///    an empty <c>VendInvoiceInfoSubTable</c> or <c>PurchParmSubTable</c> record.
    /// </returns>
    public VendDocumentSubTableMap subHeader(boolean _forUpdate = false)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>