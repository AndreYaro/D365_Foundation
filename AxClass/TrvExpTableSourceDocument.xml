<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpTableSourceDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TrvExpTableSourceDocument</c> class provides the information to handle the
///    distributions and sub-ledger journal lines of a <c>TrvExpTable</c> record that is generated
///    from a travel expense report.
/// </summary>

[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ExpenseReport), SourceDocument_ExpenseReport::ExpenseReport, tableStr(TrvExpTable))]
public class TrvExpTableSourceDocument extends SourceDocument
    implements SourceDocumentIDataProvider,
               SourceDocumentILineVoucher
{
    TrvExpTable trvExpTable;
    private Voucher currentLineVoucher;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the documented business event.
    /// </summary>
    /// <returns>
    /// A <c>BusinessEvent</c> class.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent       businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_ExpenseReport), BusinessEvent_ExpenseReport::PurchaseOfExpensedProducts);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentLineVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line voucher number.
    /// </summary>
    /// <param name = "_accountingEvent">
    /// Accounting event details.
    /// </param>
    /// <returns>
    /// Voucher number for the expense line distribution.
    /// </returns>
    public Voucher parmCurrentLineVoucher(AccountingEvent _accountingEvent)
    {
        TrvAccountingEventVoucher   trvAccountingEventVoucher;

        select firstonly Voucher from trvAccountingEventVoucher
            where trvAccountingEventVoucher.SourceDocumentHeader == this.parmSourceDocumentHeader().RecId
                && trvAccountingEventVoucher.AccountingEvent == _accountingEvent.RecId;

        currentLineVoucher = trvAccountingEventVoucher.Voucher;

        return trvAccountingEventVoucher.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentImplementation">
    /// A source document implementation table.
    /// </param>
    protected void initializeImplementation(SourceDocumentHeaderImplementation    _sourceDocumentImplementation)
    {
        trvExpTable = _sourceDocumentImplementation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        AccountingDate accountingDate;

        accountingDate = super();

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        DocumentDate documentDate;

        documentDate = super();

        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentVoucher</Name>
				<Source><![CDATA[
    public Voucher parmCurrentVoucher(DataAreaId _dataAreaId)
    {
        TrvExpTrans                 trvExpTrans;
        SourceDocumentLine          sourceDocumentLine;
        MapEnumerator               lineEnumerator;

        SourceDocumentLineRecId     sourceDocumentLineRecId;

        if (sourceDocumentLinesForCurrentVoucher && !sourceDocumentLinesForCurrentVoucher.empty())
        {
            lineEnumerator = sourceDocumentLinesForCurrentVoucher.getEnumerator();
            while (lineEnumerator.moveNext())
            {
                if (lineEnumerator.currentValue() is TrvExpTransSourceDocLineItem)
                {
                    sourceDocumentLineRecId = lineEnumerator.currentKey();
                    break;
                }
            }
        }

        if (sourceDocumentLineRecId)
        {
            select firstonly Voucher from trvExpTrans join sourceDocumentLine
                where trvExpTrans.TrvExpTable == trvExpTable.RecId &&
                      trvExpTrans.SourceDocumentLine == sourceDocumentLineRecId &&
                    sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed;
        }
        else
        {
            // Fallback code to get voucher from any line
            select firstOnly Voucher from trvExpTrans
                exists join sourceDocumentLine
                where  trvExpTrans.TrvExpTable == trvExpTable.RecId
                    && trvExpTrans.SourceDocumentLine == sourceDocumentLine.RecId
                    && sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed;
        }

        return trvExpTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        return trvExpTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscountIncludesTax</Name>
				<Source><![CDATA[
    public boolean parmDiscountIncludesTax()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets map containing voucher numbers.
    /// </summary>
    /// <returns>
    /// Map with voucher numbers.
    /// </returns>
    public Map parmLineVouchers()
    {
        Map vouchersMap = new Map(Types::String, Types::String);
        return vouchersMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSupportMultipleVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds out whether mulitple voucher numbers are supported.
    /// </summary>
    public boolean parmSupportMultipleVoucher()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        AccountingDistributionTemplateRecId  accountingDistributionTemplateRecId;

        return accountingDistributionTemplateRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentDate</Name>
				<Source><![CDATA[
    public DocumentDate parmDocumentDate()
    {
        return trvExpTable.trvReportDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNumber</Name>
				<Source><![CDATA[
    public DocumentNum parmDocumentNumber()
    {
        return trvExpTable.ExpNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentEditable</Name>
				<Source><![CDATA[
    public boolean parmIsDocumentEditable()
    {
        boolean             isDistributionEditable;
        TrvParameters       trvParameters = TrvParameters::find();

        if (trvExpTable.isEditable())
        {
            isDistributionEditable = true;
        }
        else if ( trvExpTable.ApprovalStatus == TrvAppStatus::Approved &&  trvParameters.AllowEditDistributions)
        {
            isDistributionEditable = true;
        }

        return isDistributionEditable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceDocumentNumber</Name>
				<Source><![CDATA[
    public DocumentNum parmReferenceDocumentNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates transaction text to use when generating <c>TrvExpenseEntity</c>
    ///     records from a given expense transaction.
    /// </summary>
    /// <param name="_trvExpTrans">
    ///     An expense transaction.
    /// </param>
    /// <returns>
    ///     The transaction text.
    /// </returns>
    public static TransactionTextLarge getTransactionTxt(TrvExpTrans _trvExpTrans)
    {
        TransactionTxt          transactionTxt;
        TransactionTextLarge    transTxt;
        TrvExpTrans             trvExpTrans = _trvExpTrans;

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        transactionTxt.setFormLetter("@SYS101289");
        transactionTxt.setVoucher(trvExpTrans.Voucher);
        transactionTxt.setKey1(trvExpTrans.ExpNumber);
        transactionTxt.setKey2(HcmWorker::find(trvExpTrans.CreatingWorker).PersonnelNumber);
        transactionTxt.setKey3(trvExpTrans.Description);
        transactionTxt.setType(LedgerTransTxt::Expense);

        transTxt = transactionTxt.txt();

        return transTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionText</Name>
				<Source><![CDATA[
    public str parmTransactionText()
    {
        TrvExpTrans trvExpTrans;
        TransactionTextLarge transactionText;

        if (currentLineVoucher)
        {
            select firstonly trvExpTrans where trvExpTrans.TrvExpTable == trvExpTable.RecId
                && trvExpTrans.Voucher == currentLineVoucher;
        }
        else
        {
            select firstonly trvExpTrans where trvExpTrans.TrvExpTable == trvExpTable.RecId;
        }

        if (trvExpTrans)
        {
            transactionText = TrvExpTableSourceDocument::getTransactionTxt(trvExpTrans);
        }

        return transactionText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of <c>LegalEntity</c>s for the document.
    /// </summary>
    /// <returns>A <c>List</c> containing the RecIds of the <c>LegalEntity</c>s.</returns>
    protected List getLegalEntities()
    {
        var legalEntityList = new List(Types::Int64);
        TrvExpTrans trvExpTrans;

        while select LegalEntity from trvExpTrans
            group by LegalEntity
            where trvExpTrans.TrvExpTable == trvExpTable.RecId
        {
            legalEntityList.addEnd(trvExpTrans.LegalEntity);
        }

        // add intercompany LEs that are not already in list
        while select InterCompanyLE from trvExpTrans
            group by InterCompanyLE
            where trvExpTrans.TrvExpTable == trvExpTable.RecId && CompanyInfo::current(trvExptrans.InterCompanyLE) != trvExpTrans.LegalEntity
        {
            legalEntityList.addEnd(CompanyInfo::findDataArea(trvExpTrans.InterCompanyLE).RecId);
        }

        return legalEntityList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>