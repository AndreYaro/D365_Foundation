<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdVendStmtCISDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdVendStmtCISDP</c> class is the report data provider class for the <c>TaxWithholdVendStmtCISDP</c> SQL Server Reporting Services Report.
/// </summary>
[SRSReportParameterAttribute(classStr(TaxWithholdVendStmtCISContract))]
public class TaxWithholdVendStmtCISDP extends SrsReportDataProviderBase
{
    TaxWithholdVendStmtCISTmp taxWithholdVendStmtCISTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxWithholdSlipTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the temporary <c>TaxWithholdSlipTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data in the <c>TaxWithholdSlipTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxWithholdVendStmtCISTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdVendStmtCISTmp getTaxWithholdSlipTmp()
    {
        select taxWithholdVendStmtCISTmp;

        return taxWithholdVendStmtCISTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the SQL Server Reporting Services report business logic
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic.This method will be called by
    /// SSRS at runtime.The method should compute data and populate the data tables that will be returned
    /// to SSRS.
    /// </remarks>
    public void processReport()
    {
        TaxWithholdTrans taxWithholdTrans;
        TaxWithholdVendStmtCISContract taxWithholdVendStmtCISContract = this.parmDataContract() as TaxWithholdVendStmtCISContract;

        TransDate fromDate = taxWithholdVendStmtCISContract.parmFromDate();
        TransDate toDate = taxWithholdVendStmtCISContract.parmToDate();

        CompanyInfo companyInfo = CompanyInfo::find();
        CompanyName companyName = companyInfo.Name;
        LogisticsAddressing companyAddress = companyInfo.postalAddress().Address;
        AccountOfficeRefNum companyAccountOfficeRefNum = companyInfo.AccountOfficeRefNum;
        TaxRegistrationNumber companyUniqueTaxPayerRef = TaxRegistration::getPrimaryAddressTaxRegistration(
            companyInfo,
            TaxRegistrationTypesList::WithholdingTaxPayerReference,
            toDate).RegistrationNumber;

        while select taxWithholdTrans
        group by taxWithholdTrans.vendAccount
            where taxWithholdTrans.TransDate >= fromDate
                && taxWithholdTrans.TransDate <= toDate
                && taxWithholdTrans.vendAccount
        {
            taxWithholdVendStmtCISTmp.data(TaxWithholdVendStmtCISTmp::makeRecord(taxWithholdTrans.vendAccount, fromDate, toDate));
            taxWithholdVendStmtCISTmp.CompanyName = companyName;
            taxWithholdVendStmtCISTmp.CompanyAddress = companyAddress;
            taxWithholdVendStmtCISTmp.CompanyAccountOfficeRefNum = companyAccountOfficeRefNum;
            taxWithholdVendStmtCISTmp.CompanyUniqueTaxPayerRef = companyUniqueTaxPayerRef;
            taxWithholdVendStmtCISTmp.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>