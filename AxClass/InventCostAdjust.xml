<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostAdjust</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostAdjust</c> class creates adjustments for <c>inventCostTrans</c> records.
/// </summary>
/// <remarks>
///    This class will create <c>inventCostTrans</c> records for adjustments.
/// </remarks>

class InventCostAdjust
{
    // Global objects
    LedgerVoucher                   ledgerVoucher;
    InventCostTransVarianceList     inventCostTransVarianceList;
    InventCostTransList             inventCostTransList;
    InventCostTransVarianceMap      inventCostTransVarianceMap;

    // Caller variables
    InventTransOrigin               inventTransOrigin;
    InventTrans                     inventTrans;
    Voucher                         voucher;
    TransDate                       transDate;
    CostAmount                      adjustment;

    // Variables initialized from inventTrans
    InventItemPrice                 inventItemPrice;
    InventTable                     inventTable;
    DimensionDefault                dimension;
    InventDim                       inventDim;

    // Variables that will be filled by processing on inventTrans record and
    // creating the corresponding inventCostTrans record
    InventCostTrans                 costTrans;
    InventTransCurrency_RU          inventTransCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToCostTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes and adds the <c>InventCostTrans</c> record to the list.
    /// </summary>
    /// <remarks>
    ///    The <c>InventCostTrans</c> record will be initialized and then added to the
    ///    <c>InventCostTransList</c>.
    /// </remarks>
    protected void addToCostTransList()
    {
        InventCostTrans inventCostTrans = InventCostTrans::initInventCostTrans(InventCostTransState::Financial,
                                                                               inventItemPrice,
                                                                               inventTable,
                                                                               voucher,
                                                                               transDate,
                                                                               dimension,
                                                                               inventTrans,
                                                                               inventDim,
                                                                               inventTransOrigin,
                                                                               InventCostTransType::Adjustment);

        inventCostTransList.add(inventCostTrans);

        // Now set the costTrans record, so that it can be reused for the insertion
        // of the keyCostTransVarianceMap
        costTrans = inventCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCostTransVarianceMap</Name>
				<Source><![CDATA[
    protected void addToCostTransVarianceMap()
    {
        str                            parmKey;

        // Check if I have a inventCostTrans record to which the variance has to be assigned
        // Voucher can be checked, not the recid or the inventTransId
        // because record is not written to DB yet and it might not have an inventTransId
        if (!costTrans.Voucher)
        {
            // Assert: should not occur
            throw error("@SYS111327");
        }
        else
        {
            parmKey = InventCostTransVarianceMap::buildKey(costTrans);
        }

        // Calculate the variance
        InventCostTransVarianceList varianceList = InventCostTransVarianceList::newFromList(inventCostTransVarianceList,
                                                                                            inventTrans.Qty,
                                                                                            dimension);

        // This variance list belongs to the currently processed inventTrans, which itself belongs
        // to a inventCostTrans record

        if (varianceList && varianceList.length() != 0)
        {
            // Now add for this inventCostTrans record the variance to the keyCostTransVarianceMap
            inventCostTransVarianceMap.add(parmKey, varianceList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the main flow of the processing of the adjustment.
    /// </summary>
    /// <param name="_inventAdjustmentSpec">
    /// Specifies how the adjustment is summarized in general ledger. The default is total.
    /// </param>
    /// <remarks>
    /// If no variance list is given (for all cases except production adjustments),
    /// build the variance list based on the std cost.
    /// </remarks>

    protected void adjust(InventAdjustmentSpec _inventAdjustmentSpec = InventAdjustmentSpec::Total)
    {
        // Records
        InventCostTransVariance   inventCostTransVariance;

        ttsbegin;

        // Add the records to the costTransList
        this.addToCostTransList();

        // Now create the variance for this record
        if (!inventCostTransVarianceList || inventCostTransVarianceList.length() == 0)
        {
            // No variance has been added
            // create an entry with the item cost group
            inventCostTransVarianceList = InventCostTransVarianceList::construct();

            // For single adjustments not from the production, the cost amount is given (this is belonging to the quantity of
            // the inventTrans record, so it has to be divided, otherwise it will multiplied by the
            // inventTrans quantity, because from the production I aspect a costTransVarianceList, that will hold the costAmount
            // per unit
            inventCostTransVariance.initInventCostTransVariance(inventTable.costGroup(), this.varianceType(), dimension, adjustment / (inventTrans.Qty ? inventTrans.Qty : 1));
            inventCostTransVarianceList.insert(inventCostTransVariance, true);
        }

        // Now add the record to the keyVarianceMap
        this.addToCostTransVarianceMap();

        // Post the variance
        // <GEERU>
        InventCostPost::post(ledgerVoucher, inventTable, inventCostTransList, inventCostTransVarianceMap, _inventAdjustmentSpec, inventTransCurrency);
        // </GEERU>

        // Hand over the record sorted lists to the costUpdate framework
        InventCostUpdateGlobal::Instance().inventCostUpdate().finalizeCostTransVariance(inventCostTransList, inventCostTransVarianceMap);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostAdjust</Name>
				<Source><![CDATA[
    protected void initCostAdjust(Voucher           _voucher,
                               TransDate         _transDate)
    {
        // Check if voucher and trans date has been specified
        if (!_voucher ||
            !_transDate)
        {
            throw error("@SYS111328");
        }

        // Set parameters
        voucher = _voucher;
        transDate = _transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    protected void initFromInventTrans(InventTrans _inventTrans)
    {
        // Set the caller record
        inventTrans  = _inventTrans;

        // Initialize the variables from the inventTrans
        inventTable       = _inventTrans.inventTable();
        dimension         = _inventTrans.dimensionFinancialDefaultDimension();
        inventDim         = _inventTrans.inventDim();
        inventTransOrigin = _inventTrans.inventTransOrigin();

        // Initialize the item price
        this.initInventItemPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an <c>InventItemPrice</c> record.
    /// </summary>
    /// <remarks>
    ///    The transaction date is used to find the corresponding price.
    /// </remarks>

    protected void initInventItemPrice()
    {
        inventItemPrice = InventItemPrice::stdCostFindDate(inventTable,
                                                           transDate,
                                                           '',
                                                           inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventCostAdjust</c> class.
    /// </summary>
    /// <remarks>
    ///    This method is protected to make sure that that the <c>construct</c> method is used.
    /// </remarks>

    protected void new()
    {
        // Initialize the local trans and variance lists
        inventCostTransVarianceList   = InventCostTransVarianceList::construct();
        inventCostTransList           = InventCostTransList::construct();
        inventCostTransVarianceMap    = InventCostTransVarianceMap::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustment</Name>
				<Source><![CDATA[
    protected CostAmount parmAdjustment(CostAmount _adjustment = adjustment)
    {
        adjustment = _adjustment;

        return adjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostTransVarianceList</Name>
				<Source><![CDATA[
    protected InventCostTransVarianceList parmCostTransVarianceList(InventCostTransVarianceList _inventCostTransVarianceList = inventCostTransVarianceList)
    {
        inventCostTransVarianceList = _inventCostTransVarianceList;

        return inventCostTransVarianceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency_RU</Name>
				<Source><![CDATA[
    protected InventTransCurrency_RU parmInventTransCurrency_RU(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;

        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    protected LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ledgerVoucher = _ledgerVoucher;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>varianceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the variance type based on the <c>InventTrans</c> type.
    /// </summary>
    /// <returns>
    ///    The variance type that belongs to the transaction type.
    /// </returns>
    /// <remarks>
    ///    For purchase order adjustments, return <c>purchasePrice</c>, for all the other return
    ///    <c>costChange</c>.
    /// </remarks>

    protected InventCostVarianceType varianceType()
    {
        if (inventTransOrigin.ReferenceCategory == InventTransType::Purch)
        {
            return InventCostVarianceType::PurchPrice;
        }
        else
        {
            return InventCostVarianceType::CostChange;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Triggers the adjustment in the inventCost framework for an inventTrans record.
    /// </summary>
    /// <param name="_inventTrans">
    /// The inventTrans record to which the adjustment belongs.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher that is currently processed.
    /// </param>
    /// <param name="_voucher">
    /// The voucher that is used to post the adjustment.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date for the adjustment.
    /// </param>
    /// <param name="_adjustment">
    /// The adjustment amount.
    /// </param>
    /// <param name="_inventCostTransVarianceList">
    /// The adjustment broken down on costgroups.
    /// </param>
    /// <param name="_inventAdjustmentSpec">
    /// Specifies how the adjustment is summarized in general ledger. The default is total.
    /// </param>
    /// <param name="_inventTransCurrency">
    /// The transaction currency: primary (default) or secondary - used for Dual Warehousing
    /// </param>
    /// <remarks>
    /// For production adjustments, the variance list will be given without an adjustment amount.
    /// </remarks>

    public static void adjustFromInventTrans(InventTrans                 _inventTrans,
                                             LedgerVoucher               _ledgerVoucher,
                                             Voucher                     _voucher,
                                             TransDate                   _transDate,
                                             CostAmount                  _adjustment,                          // CostAmount belonging to this inventTrans
                                             InventCostTransVarianceList _inventCostTransVarianceList = null,  // Variance belonging to ONE unit of inventTrans record
                                             InventAdjustmentSpec        _inventAdjustmentSpec = InventAdjustmentSpec::Total,
                                             InventTransCurrency_RU      _inventTransCurrency  = InventTransCurrency_RU::PrimaryCur)
    {
        InventCostAdjust     inventCostAdjust;

        // Check if I have something to adjust
        if (_adjustment != 0 || (_inventCostTransVarianceList && _inventCostTransVarianceList.length() != 0))
        {
            // Initialize instance
            inventCostAdjust = InventCostAdjust::construct();

            // Set parameters
            inventCostAdjust.initCostAdjust(_voucher, _transDate);

            // Initialize parameters
            inventCostAdjust.initFromInventTrans(_inventTrans);
            inventCostAdjust.parmLedgerVoucher(_ledgerVoucher);
            inventCostAdjust.parmAdjustment(_adjustment);
            inventCostAdjust.parmCostTransVarianceList(_inventCostTransVarianceList);
            // <GEERU>
            inventCostAdjust.parmInventTransCurrency_RU(_inventTransCurrency);
            // </GEERU>

            // Create closing records
            inventCostAdjust.adjust(_inventAdjustmentSpec);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostAdjust construct()
    {
        return new InventCostAdjust();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
