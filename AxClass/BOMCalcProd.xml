<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomCalcProd extends BOMCalcBase
{
    ProdTable                           prodTable;
    ProdBOM                             prodBOM;
    PmfProdCalcTransMap                 prodCalcTrans;
    InventSiteId                        siteId;

    NoYes                               calcReferences;

    CostCalcTransData                   costCalcTransData;

    Map                                 topBOMStopExplosionCostBreakdownMap;
    PmfCostAllocationPct                pmfCostAllocationPct;

    PmfRecycledBpParentCalcState        parentState;
    
    private Set dupProdId;
    private Set refProdId;
    private boolean isBomCalcProdSameRefProdIdAvoidUpdateConflictFlightEnabled = BomCalcProdSameRefProdIdAvoidUpdateConflictFlight::instance().isEnabled();
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDupProdId</Name>
				<Source><![CDATA[
    public Set parmDupProdId(Set _dupProdId = dupProdId)
    {
        dupProdId = _dupProdId;
        return dupProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefProdId</Name>
				<Source><![CDATA[
    public Set parmRefProdId(Set _refProdId = refProdId)
    {
        refProdId = _refProdId;
        return refProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bufferCalcTrans</Name>
				<Source><![CDATA[
    Common bufferCalcTrans()
    {
        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        try
        {
            setPrefix(BOMCalcProd::description());

            if (!this.validate())
            {
                throw Exception::Error;
            }

            setPrefix(#PreFixField(prodTable,ProdId));

            this.cleanOldCalcTrans();

            this.init();

            this.calcBOM();

            if (level == 0)
            {
                if (this.parmExistTradeAgreements())
                {
                    this.calcTradeAgreements();
                }

                this.setProgressTotals();
                this.recalcBOM();
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS19457");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBOM</Name>
				<Source><![CDATA[
    protected void calcBOM()
    {
        ListEnumerator  listEnumerator;
        BOMCalcProdLine bomCalcProdLine;

        setPrefix("@SYS28550");

        listEnumerator = listBOM.getEnumerator();

        // Calculate BOM lines (do not insert transactions now)
        if (listEnumerator)
        {
            while (listEnumerator.moveNext())
            {
                bomCalcProdLine = listEnumerator.current();
                bomCalcProdLine.calc();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectProductionItemCalcTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the indirect item calculation types for production.
    /// </summary>
    /// <returns>A container with the item calculation types.</returns>
    protected container indirectProductionItemCalcTypes()
    {
        return [ItemCalcType::IndirectRate, 
                ItemCalcType::IndirectSurcharge, 
                ItemCalcType::IndirectInUnitBased, 
                ItemCalcType::IndirectOutUnitBased];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostSheet</Name>
				<Source><![CDATA[
    protected void calcCostSheet()
    {

        costCalcTransData.setLevel(this.parmLevel() + 1);
        costCalcTransData.setInventSiteId(siteId);

        CostSheet costSheet = CostSheetFactory::construct().createCostSheet(CostSheetModeStrategyCalculate::newParameter(CostPriceType::COGM, costCalcTransData));
        boolean costSheetCalculated = costSheet.calc(costCalcTransData);

        if (costSheetCalculated)
        {
            ListEnumerator calculationNodeEnumerator = costSheet.getNodeEnumerator(CostSheetNodeListType::IndirectCalculation);
            while (calculationNodeEnumerator.moveNext())
            {
                CostSheetNodeCalculation calculationNode = calculationNodeEnumerator.current();
                ProdCalcTrans indirectProdCalcTrans = calculationNode.toProdCalcTrans(CostSheetProdCalcMode::Estimation, profitSet, calcDate);

                if (indirectProdCalcTrans.costPriceSum() != 0.00)
                {
                    ProdCalcTrans prodCalcTransCheck;

                    // Check if the record already exists
                    select forupdate firstonly prodCalcTransCheck
                        where prodCalcTransCheck.TransRefId   == prodTable.ProdId
                           && prodCalcTransCheck.TransRefType == ProdTransRefType::Production
                           && prodCalcTransCheck.Resource     == indirectProdCalcTrans.Resource
                           && prodCalcTransCheck.CalcType in this.indirectProductionItemCalcTypes();

                    prodCalcTransCheck.Qty = prodTable.QtyCalc;

                    if (prodCalcTransCheck)
                    {
                        //record already exists, so update it
                        prodCalcTransCheck.CostGroupId = indirectProdCalcTrans.CostGroupId;
                        prodCalcTransCheck.ConsumpVariable = indirectProdCalcTrans.ConsumpVariable;
                        prodCalcTransCheck.CostAmount = indirectProdCalcTrans.CostAmount;
                        prodCalcTransCheck.SalesAmount = indirectProdCalcTrans.SalesAmount;
                        prodCalcTransCheck.CostMarkup = indirectProdCalcTrans.CostMarkup;
                        prodCalcTransCheck.SalesMarkup = indirectProdCalcTrans.SalesMarkup;

                        prodCalcTransCheck.update();
                    }
                    else
                    {
                        indirectProdCalcTrans.CollectRefProdId = prodTable.CollectRefProdId;
                        indirectProdCalcTrans.TransRefId = prodTable.ProdId;
                        indirectProdCalcTrans.TransRefType = ProdTransRefType::Production;
                        indirectProdCalcTrans.LineNum = this.getLineNum();
                        indirectProdCalcTrans.insert();
                    }

                    this.updateCalcAmount(indirectProdCalcTrans);
                    this.updateCostCalcTransData(indirectProdCalcTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTradeAgreements</Name>
				<Source><![CDATA[
    void calcTradeAgreements()
    {
        ListEnumerator  listEnumerator;

        listEnumerator = listBOM.getEnumerator();

        // Calculate prices for trade agreements
        if (listEnumerator)
        {
            if (listEnumerator.moveNext())
            {
                listEnumerator.current().calcTradeAgreements();
                while (listEnumerator.moveNext())
                {
                    listEnumerator.current().calcTradeAgreements();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanOldCalcTrans</Name>
				<Source><![CDATA[
    public void cleanOldCalcTrans()
    {
        ProdUpdBOMCalc::cleanOldProdCalcTransNew(prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecycledBpConsumptionCalc</Name>
				<Source><![CDATA[
    public IPmfRecycledBpConsumptionCalc createRecycledBpConsumptionCalc(BOMCalcLine _bomCalcLine)
    {
        PmfRecycledBpConsumptionCalc_ProdEst calc = PmfRecycledBpConsumptionCalc_ProdEst::construct();
        PmfRecycledBpProdCalcCreator         prodCalcCreator = PmfRecycledBpProdCalcCreator::construct();

        calc.parmParentState(pmfRecycledBpParentCalcState);

        calc.parmParentBomLine(_bomCalcLine);
        calc.parmProdId(this.parmProdTable().ProdId);
        prodCalcCreator.parmParentBomCalc(this);

        calc.parmCalcCreator(prodCalcCreator);

        return calc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNum</Name>
				<Source><![CDATA[
    LineNum getLineNum()
    {
        // Only per production order
        globalLineNum++;

        return globalLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        this.initProdCalcTrans();

        this.initParameters();

        this.initListBOM();

        costCalcTransData = CostCalcTransData::construct(itemId, prodTable.QtyCalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListBOM</Name>
				<Source><![CDATA[
    protected void initListBOM()
    {
        ProdBOM   prodBOMTmp;
        BOMCalcProdLine bomCalcProdLine;

        if (listBOM.elements())
            return;

        while select prodBOMTmp
            index hint NumIdx
            where prodBOMTmp.ProdId        == prodTable.ProdId   &&
                  prodBOMTmp.QtyInventCalc != 0                  &&
                  prodBOMTmp.Calculation   == NoYes::Yes
        {
            if (isBomCalcProdSameRefProdIdAvoidUpdateConflictFlightEnabled)
            {
                if (prodBOMTmp.InventRefType == InventRefType::Production && prodBOMTmp.InventRefId)
                {
                    if (refProdId != null && dupProdId != null)
                    {
                        if (refProdId.in(prodBOMTmp.InventRefId))
                        {
                            dupProdId.add(prodBOMTmp.InventRefId);
                        }
                        else
                        {
                            refProdId.add(prodBOMTmp.InventRefId);
                        }
                    }
                }

                bomCalcProdLine = BOMCalcProdLine::newBOMCalcProdWithRefProd(prodBOMTmp, this, this.getLineNum(), this.parmSiteId(), refProdId, dupProdId);
            }
            else
            {
                bomCalcProdLine = BOMCalcProdLine::newBOMCalcProd(prodBOMTmp, this, this.getLineNum(), this.parmSiteId());
            }

            bomCalcProdLine.parmPmfRecycledBpConsumptionCalc(this.createRecycledBpConsumptionCalc(bomCalcProdLine));

            listBOM.addEnd(bomCalcProdLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of Route operations current production order.
    /// </summary>
    /// <returns>
    /// The initialized list.
    /// </returns>
    protected List initListRoute()
    {
        ProdRoute   prodRouteTmp;
        RouteGroup  routeGroupTmp;
        LineNum     lineNumTmp = 0;
        List        listRoute = new List(Types::Class);

        while select forupdate prodRouteTmp
            index hint NumOprNumIdx
            where prodRouteTmp.ProdId   == prodTable.ProdId
        {
            routeGroupTmp  = RouteGroup::find(prodRouteTmp.RouteGroupId);

            if (routeGroupTmp.CalcSetUp && prodRouteTmp.CalcSetUp)
            {
                lineNumTmp = this.getLineNum();
            }

            if (routeGroupTmp.CalcProc && prodRouteTmp.CalcProc)
            {
                lineNumTmp = this.getLineNum();
            }

            if (routeGroupTmp.CalcQty && prodRouteTmp.CalcQty)
            {
                lineNumTmp = this.getLineNum();
            }

            if (lineNumTmp)
            {
                listRoute.addEnd(BOMCalcProdOper::newProdRoute(prodRouteTmp, this, lineNumTmp));
            }
        }

        return listRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected void initParameters()
    {
        super();

        this.initSeriesSize();

        this.setLineNum();

        this.initProgressBar();
        this.incProgressTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdCalcTrans</Name>
				<Source><![CDATA[
    public void initProdCalcTrans()
    {
        prodCalcTrans.clear();
        prodCalcTrans = ProdCalcTrans::findIdRef(prodTable.TableId, prodTable.RecId, true);

        if (prodCalcTrans.RecId)
        {
            this.resetCalcValues();

            itemId          = prodCalcTrans.Resource    ? prodCalcTrans.Resource    : itemId;
            inventUnitId    = prodCalcTrans.UnitId      ? prodCalcTrans.UnitId      : inventUnitId;
            inventDimId     = prodCalcTrans.InventDimId ? prodCalcTrans.InventDimId : inventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdTable</Name>
				<Source><![CDATA[
    void initProdTable()
    {
        if (!prodTable)
        {
            if (prodBOM.type().isPeggedSupply()
                || (prodBOM.ProdLineType == BOMType::Item && CostTakeMarkedItemAsPeggedSupplyFlight::instance().isEnabled()))
            {
                if (   prodBOM.InventRefType == InventRefType::Production
                    && prodBOM.InventRefId)
                {
                    prodTable = ProdTable::find(prodBOM.InventRefId);
                    if (!prodTable)
                    {
                        throw error(strFmt(ProdTable::txtNotExist(), prodBOM.InventRefId));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSeriesSize</Name>
				<Source><![CDATA[
    void initSeriesSize()
    {
        seriesSize = prodTable.QtySched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdCalcTrans</Name>
				<Source><![CDATA[
    void insertProdCalcTrans()
    {
        InventTable inventTable = this.parmInventTable();

        if (!prodCalcTrans.RecId)
        {
            prodCalcTrans.initFromProdTable(prodTable, ItemCalcType::Production);
            prodCalcTrans.Production    = NoYes::Yes;
            prodCalcTrans.bom           = NoYes::Yes;

            prodCalcTrans.Resource      = itemId;
            prodCalcTrans.UnitId        = inventUnitId;
            prodCalcTrans.OprId         = '';
            prodCalcTrans.BOMCalcTransMap::setInventDimStr(inventDimId);
            prodCalcTrans.InventDimId   = inventDimId;
        }
        else if (dupProdId != null && isBomCalcProdSameRefProdIdAvoidUpdateConflictFlightEnabled)
        {
            if (dupProdId.in(prodCalcTrans.TransRefId))
            {
                ProdCalcTrans prodCalcTransLocal;
                select firstonly RecVersion from prodCalcTransLocal
                    where prodCalcTransLocal.RecId == prodCalcTrans.RecId;

                if (prodCalcTrans.RecVersion != prodCalcTransLocal.RecVersion)
                {
                    prodCalcTrans.reread();
                }
            }
        }

        prodCalcTrans.Qty               = seriesSize;
        prodCalcTrans.TransDate         = calcDate;
        prodCalcTrans.LineNum           = lineNum;

        prodCalcTrans.CalcGroupId       = bomCalcGroup.CalcGroupId;
        prodCalcTrans.CostGroupId       = inventTable.costGroup();

        if (!BOMCalcGroup::stopExplodePrice(bomCalcGroup, inventTable, inventDimId, siteId))
        {
            prodCalcTrans.CostPriceModelUsed    = BOMCalcCostPriceUsed::None;
            prodCalcTrans.SalesPriceModelUsed   = BOMCalcSalesPriceUsed::None;
        }

        prodCalcTrans.write();

        this.insertProdCalcTransCostBreakdown();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdCalcTransCostBreakdown</Name>
				<Source><![CDATA[
    public void insertProdCalcTransCostBreakdown()
    {
        ProdCalcTrans   prodCalcTransCostBreakdown;
        LineNum         lineNumBreakdown;
        MapEnumerator   stdCostBreakdownEnumerator;

        if (topBOMStopExplosionCostBreakdownMap && topBOMStopExplosionCostBreakdownMap.elements())
        {
            lineNumBreakdown = prodCalcTrans.LineNum;

            stdCostBreakdownEnumerator = topBOMStopExplosionCostBreakdownMap.getEnumerator();

            prodCalcTrans.bom = NoYes::Yes;
            prodCalcTrans.update();

            delete_from prodCalcTransCostBreakdown
                where prodCalcTransCostBreakdown.TransRefId         == prodCalcTrans.TransRefId
                   && prodCalcTransCostBreakdown.TransRefType       == prodCalcTrans.TransRefType
                   && prodCalcTransCostBreakdown.Resource           == prodCalcTrans.Resource
                   && prodCalcTransCostBreakdown.IdRefTableId       == prodCalcTrans.IdRefTableId
                   && prodCalcTransCostBreakdown.IdRefRecId         == prodCalcTrans.IdRefRecId
                   && prodCalcTransCostBreakdown.CollectRefProdId   == prodCalcTrans.CollectRefProdId
                   && prodCalcTransCostBreakdown.CollectRefLevel    == prodCalcTrans.CollectRefLevel + 1
                   && prodCalcTransCostBreakdown.CalcType           == ItemCalcType::CostGroup
                   && prodCalcTransCostBreakdown.LineNum            >  prodCalcTrans.LineNum
                   && prodCalcTransCostBreakdown.LineNum            <  prodCalcTrans.LineNum + 1;

            while (stdCostBreakdownEnumerator.moveNext())
            {
                lineNumBreakdown += 0.00001;

                prodCalcTransCostBreakdown.initCostBreakdown(prodCalcTrans);
                prodCalcTransCostBreakdown.LineNum      = lineNumBreakdown;
                prodCalcTransCostBreakdown.CostGroupId  = stdCostBreakdownEnumerator.currentKey();
                prodCalcTransCostBreakdown.CostAmount   = stdCostBreakdownEnumerator.currentValue();
                prodCalcTransCostBreakdown.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        calcReferences = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcReferences</Name>
				<Source><![CDATA[
    NoYes parmCalcReferences(NoYes _calcReferences = calcReferences)
    {
        calcReferences = _calcReferences;
        return calcReferences;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostCalcTransData</Name>
				<Source><![CDATA[
    public CostCalcTransData parmCostCalcTransData(CostCalcTransData _costCalcTransData = costCalcTransData)
    {
        costCalcTransData = _costCalcTransData;

        return costCalcTransData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfCostAllocationPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and returns the cost allocation percentage.
    /// </summary>
    /// <param name="_pmfCostAllocationPct">
    /// Cost allocation to bet set.  This parameter is optional.</param>
    /// <returns>
    /// The set cost allocation percentage.
    /// </returns>
    /// <example>
    /// PmfCostAllocationPercentage alloc = BOMCalcProd.parmPmfCostAllocationPct();
    /// </example>
    public PmfCostAllocationPct parmPmfCostAllocationPct(
        PmfCostAllocationPct    _pmfCostAllocationPct = pmfCostAllocationPct)
    {
        pmfCostAllocationPct = _pmfCostAllocationPct;
        return pmfCostAllocationPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdBOM</Name>
				<Source><![CDATA[
    ProdBOM parmProdBOM(ProdBOM _prodBOM = prodBOM)
    {
        prodBOM = _prodBOM;
        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdCalcTrans</Name>
				<Source><![CDATA[
    ProdCalcTrans parmProdCalcTrans(ProdCalcTrans _prodCalcTrans = prodCalcTrans)
    {
        prodCalcTrans = _prodCalcTrans;
        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    ProdTable parmProdTable(ProdTable _prodTable = prodTable)
    {
        prodTable = _prodTable;
        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSiteId</Name>
				<Source><![CDATA[
    InventSiteId parmSiteId(InventSiteId _siteId = siteId)
    {
        siteId = _siteId;
        return siteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCalcBurden</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates burden cost.
    /// </summary>
    protected void pmfCalcBurden()
    {
        PmfProdCoBy                 burdenItems;
        BOMCalcProdLine_PmfBurden   burden;

        if (!#PmfEnabled)
        {
            return;
        }

        while select burdenItems
            where  burdenItems.ProdId       == prodTable.ProdId
                && burdenItems.ProductType  == PmfProductType::By_Product
                && burdenItems.BurdenType   != PmfBurdenType::None
                && burdenItems.BurdenType   != PmfBurdenType::Recycled
        {
            burden = BOMCalcProdLine_PmfBurden::newBurdenCalcProd(burdenItems,
                this,
                this.getLineNum(),
                this.parmSiteId());
            burden.calc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcBOM</Name>
				<Source><![CDATA[
    void recalcBOM()
    {
        ListEnumerator  listEnumerator;

        this.updateProgress();

        listEnumerator = listBOM.getEnumerator();

        // insert calculation transactions for BOM lines
        if (listEnumerator)
        {
            if (listEnumerator.moveNext())
            {
                listEnumerator.current().recalc();
                while (listEnumerator.moveNext())
                {
                    listEnumerator.current().recalc();
                }
            }
        }

        // calculate route operations and insert transactions
        this.calcRoute();

        this.pmfCalcBurden();
        this.calcCostSheet();

        this.updateProdCalcTrans();

        this.insertProdCalcTrans();

        this.recalculateRealizedCosts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateRealizedCosts</Name>
				<Source><![CDATA[
    private void recalculateRealizedCosts()
    {
        ProdParameters          prodParameters = ProdParameters::find();
        InventCostProdRecalc    prodRecalc;

        if (prodParameters.SkipUpdateOfProdCalcTransWhenPosting)
        {
            prodRecalc = InventCostProdRecalc::newFromProdTable(prodTable);
            prodRecalc.parmRecalculateRouteTransactions(true);
            prodRecalc.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCalcValues</Name>
				<Source><![CDATA[
    void resetCalcValues()
    {
        prodCalcTrans.ConsumpVariable   = 0;
        prodCalcTrans.ConsumpConstant   = 0;

        prodCalcTrans.CostAmount        = 0;
        prodCalcTrans.CostMarkup        = 0;
        prodCalcTrans.SalesAmount       = 0;
        prodCalcTrans.SalesMarkup       = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalcAmount</Name>
				<Source><![CDATA[
    void updateCalcAmount(PmfProdCalcTransMap _prodCalcTrans)
    {
        prodCalcTrans.CostAmount    += _prodCalcTrans.CostAmount;
        prodCalcTrans.CostMarkup    += _prodCalcTrans.CostMarkup;
        prodCalcTrans.SalesAmount   += _prodCalcTrans.SalesAmount;
        prodCalcTrans.SalesMarkup   += _prodCalcTrans.SalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConsumption</Name>
				<Source><![CDATA[
    void updateConsumption()
    {
        prodCalcTrans.ConsumpVariable   = seriesSize;
        prodCalcTrans.ConsumpConstant   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostCalcTransData</Name>
				<Source><![CDATA[
    void updateCostCalcTransData(PmfProdCalcTransMap _prodCalcTrans)
    {
        if (_prodCalcTrans.CalcType != ItemCalcType::Production)
        {
            costCalcTransData.addProdCalcTrans(_prodCalcTrans, CostSheetProdCalcMode::Estimation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdCalcTrans</Name>
				<Source><![CDATA[
    void updateProdCalcTrans()
    {
        this.updateConsumption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProgress</Name>
				<Source><![CDATA[
    void updateProgress()
    {
        if (!progressBar)
        {
            return;
        }

        progressBar.setText(strFmt("@SYS90210", prodTable.ProdId));
        progressBar.incCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        boolean ret;

        ret = super();

        if (!prodTable)
        {
            ret = checkFailed(strFmt("@SYS26126", classStr(BOMCalcProd)));
        }

        if (level != 0)
        {
            if (!prodBOM)
            {
                ret = checkFailed(strFmt("@SYS29104", classStr(BOMCalcProd)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMCalcProd construct()
    {
        return new BOMCalcProd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@SYS5681";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdBOM</Name>
				<Source><![CDATA[
    static BOMCalcProd newProdBOM(ProdBOM     _prodBOM,
                                         BOMCalcProd _parentBOMCalcProd)
    {
        BOMCalcProd bomCalcProd = BOMCalcProd::construct();

        bomCalcProd.parmProdBOM(_prodBOM.data());
        bomCalcProd.parmParentBOMCalc(_parentBOMCalcProd);

        bomCalcProd.parmItemId(_prodBOM.ItemId);
        bomCalcProd.parmInventDimId(_prodBOM.InventDimId);

        bomCalcProd.parmProfitSet(_parentBOMCalcProd.parmProfitSet());
        bomCalcProd.parmCalcDate(_parentBOMCalcProd.parmCalcDate());
        bomCalcProd.parmCalcReferences(_parentBOMCalcProd.parmCalcReferences());

        bomCalcProd.parmProgressBar(_parentBOMCalcProd.parmProgressBar());

        bomCalcProd.parmLevel(_parentBOMCalcProd.parmLevel() + 1);
        bomCalcProd.parmSiteId(_parentBOMCalcProd.parmSiteId());

        bomCalcProd.initProdTable();

        if (bomCalcProd.parmProdTable() && bomCalcProd.parmProdTable().ProdType == ProdType::Process)
        {
            bomCalcProd.parmPmfCostAllocationPct(bomCalcProd.parmProdTable().pmfRemainCostAlloc());
        }

        return bomCalcProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdBOMWithRefProd</Name>
				<Source><![CDATA[
    static BOMCalcProd newProdBOMWithRefProd(ProdBOM _prodBOM,
                                         BOMCalcProd _parentBOMCalcProd,
                                         Set _refProdId,
                                         Set _dupProdId)
    {
        BOMCalcProd bomCalcProd = BOMCalcProd::construct();

        bomCalcProd.parmProdBOM(_prodBOM.data());
        bomCalcProd.parmParentBOMCalc(_parentBOMCalcProd);

        bomCalcProd.parmItemId(_prodBOM.ItemId);
        bomCalcProd.parmInventDimId(_prodBOM.InventDimId);

        bomCalcProd.parmProfitSet(_parentBOMCalcProd.parmProfitSet());
        bomCalcProd.parmCalcDate(_parentBOMCalcProd.parmCalcDate());
        bomCalcProd.parmCalcReferences(_parentBOMCalcProd.parmCalcReferences());

        bomCalcProd.parmProgressBar(_parentBOMCalcProd.parmProgressBar());

        bomCalcProd.parmLevel(_parentBOMCalcProd.parmLevel() + 1);
        bomCalcProd.parmSiteId(_parentBOMCalcProd.parmSiteId());

        bomCalcProd.parmRefProdId(_refProdId);
        bomCalcProd.parmDupProdId(_dupProdId);

        bomCalcProd.initProdTable();

        if (bomCalcProd.parmProdTable() && bomCalcProd.parmProdTable().ProdType == ProdType::Process)
        {
            bomCalcProd.parmPmfCostAllocationPct(bomCalcProd.parmProdTable().pmfRemainCostAlloc());
        }

        return bomCalcProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdTable</Name>
				<Source><![CDATA[
    static BOMCalcProd newProdTable(ProdTable     _prodTable,
                                           CostProfitSet _profitSet      = ProdParameters::find().ProfitSet,
                                           TransDate     _calcDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                           NoYes         _calcReferences = NoYes::Yes,
                                           boolean       _showProgress   = false)
    {
        BOMCalcProd bomCalcProd = BOMCalcProd::construct();
        bomCalcProd.parmProdTable(_prodTable.data());

        bomCalcProd.parmItemId(_prodTable.ItemId);
        bomCalcProd.parmInventDimId(_prodTable.InventDimId);

        bomCalcProd.parmProfitSet(_profitSet);

        bomCalcProd.parmCalcDate(_calcDate);
        bomCalcProd.parmCalcReferences(_calcReferences);
        bomCalcProd.parmShowProgress(_showProgress);
        bomCalcProd.parmSiteId(InventDim::find(_prodTable.InventDimId).InventSiteId);

        if (_prodTable.ProdType == ProdType::Process)
        {
            bomCalcProd.parmPmfCostAllocationPct(_prodTable.pmfRemainCostAlloc());
        }

        return bomCalcProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdTableWithRefProd</Name>
				<Source><![CDATA[
    static BOMCalcProd newProdTableWithRefProd(ProdTable _prodTable,
                                            Set _refProdId,
                                            Set _dupProdId,
                                            CostProfitSet _profitSet = ProdParameters::find().ProfitSet,
                                            TransDate _calcDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                            NoYes _calcReferences = NoYes::Yes,
                                            boolean _showProgress = false)
    {
        BOMCalcProd bomCalcProd = BOMCalcProd::construct();
        bomCalcProd.parmProdTable(_prodTable.data());

        bomCalcProd.parmItemId(_prodTable.ItemId);
        bomCalcProd.parmInventDimId(_prodTable.InventDimId);

        bomCalcProd.parmProfitSet(_profitSet);

        bomCalcProd.parmCalcDate(_calcDate);
        bomCalcProd.parmCalcReferences(_calcReferences);
        bomCalcProd.parmShowProgress(_showProgress);
        bomCalcProd.parmSiteId(InventDim::find(_prodTable.InventDimId).InventSiteId);

        bomCalcProd.parmRefProdId(_refProdId);
        bomCalcProd.parmDupProdId(_dupProdId);

        if (_prodTable.ProdType == ProdType::Process)
        {
            bomCalcProd.parmPmfCostAllocationPct(_prodTable.pmfRemainCostAlloc());
        }

        return bomCalcProd;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>