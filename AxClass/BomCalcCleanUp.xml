<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BomCalcCleanUp</c> class cleans up BOM calculations.
/// </summary>
/// <remarks>
/// The <c>BomCalcCleanUp</c> class removes relations to BOM calculations from active and
/// pending prices. BOM calculations without relations are then deleted.
/// </remarks>
class BomCalcCleanUp extends RunBaseBatch implements BatchRetryable
{
    NoYes                   cleanUpSalesLinePriceCalculation;
    NoYes                   cleanUpCrossCostingVersion;
    TransDate               cleanUpSalesLinePriceDate;
    BomCalcCleanupPrice     cleanUpPlannedPriceCalculation;
    TransDate               cleanUpPlannedPriceDate;
    BomCalcCleanupPrice     cleanUpStandardPriceCalculation;
    TransDate               cleanUpStandardPriceDate;

    // Dialog
    DialogField             dialogCleanUpSalesLinePriceCalculation;
    DialogField             dialogCleanUpSalesLinePriceDate;
    DialogField             dialogCleanUpPlannedPriceCalculation;
    DialogField             dialogCleanUpPlannedPriceDate;
    DialogField             dialogCleanUpStandardPriceCalculation;
    DialogField             dialogCleanUpStandardPriceDate;
    DialogField             dialogCleanUpCrossCostingVersion;

    boolean bomCalcCleanUpUsePriceCalcIdFlightEnabled = true;

    #DEFINE.CurrentVersion(2)
    #DEFINE.Version1(1)

    #LOCALMACRO.ParmListV1
        cleanUpSalesLinePriceCalculation,
        cleanUpSalesLinePriceDate,
        cleanUpPlannedPriceCalculation,
        cleanUpPlannedPriceDate,
        cleanUpStandardPriceCalculation,
        cleanUpStandardPriceDate
    #ENDMACRO

    #LOCALMACRO.CurrentList
        cleanUpSalesLinePriceCalculation,
        cleanUpSalesLinePriceDate,
        cleanUpPlannedPriceCalculation,
        cleanUpPlannedPriceDate,
        cleanUpStandardPriceCalculation,
        cleanUpStandardPriceDate,
        cleanUpCrossCostingVersion
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUpDateValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the UI validate event for the cleanUp date dialog fields.
    /// </summary>
    /// <param name="_control">
    /// The control behind the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value is valid; otherwise, false.
    /// </returns>
    public boolean cleanUpDateValidate(FormDateControl _control)
    {
        return _control.validate() && this.validateCleanUpDate(_control.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpPlannedPriceCalculationModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the UI modified event for the dialogCleanUpPlannedPriceCalculation dialog field.
    /// </summary>
    /// <param name="_control">
    /// The control behind the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean cleanUpPlannedPriceCalculationModified(FormComboBoxControl _control)
    {
        dialogCleanUpPlannedPriceDate.enabled(this.enableCleanUpPlannedPriceDate());

        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpSalesLinePriceCalculationModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the UI modified event for the purgeSalesLinePriceCalculation dialog field.
    /// </summary>
    /// <param name="_control">
    /// The control behind the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean cleanUpSalesLinePriceCalculationModified(FormCheckBoxControl _control)
    {
        dialogCleanUpSalesLinePriceDate.enabled(this.enableCleanUpSalesLinePriceDate());

        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpStandardPriceCalculationModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the UI modified event for the dialogCleanUpStandardPriceCalculation dialog field.
    /// </summary>
    /// <param name="_control">
    /// The control behind the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean cleanUpStandardPriceCalculationModified(FormComboBoxControl _control)
    {
        dialogCleanUpStandardPriceDate.enabled(this.enableCleanUpStandardPriceDate());

        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list with batches of record ID's to be deleted.
    /// </summary>
    /// <param name="_cleanUpDate">
    /// The cleanup date.
    /// </param>
    /// <returns>
    /// A list with batches of record ID's to be deleted.
    /// </returns>
    private List getRecIdList(TransDate _cleanUpDate)
    {
        BOMCalcTable        bomCalcTable;
        InventItemPrices    inventItemPrices;
        List                list = new List(Types::Container);
        int                 records = 0;
        boolean             firstRecId = true;
        RecId               minRecId;
        RecId               maxRecId;
        const int           deleteRecordBatchSize = 100;

        while select RecId from bomCalcTable
            order by bomCalcTable.RecId
            where bomCalcTable.bomCalcType == BOMCalcType::Version
               && bomCalcTable.TransDate   <= _cleanUpDate
            notexists join inventItemPrices
                where inventItemPrices.ItemId      == bomCalcTable.ItemId
                   && inventItemPrices.PriceCalcId == bomCalcTable.PriceCalcId
        {
            ++records;
            if (firstRecId)
            {
                minRecId = bomCalcTable.RecId;
                firstRecId =false;
            }
            maxRecId = bomCalcTable.RecId;
            if (records == deleteRecordBatchSize)
            {
                firstRecId = true;
                records = 0;
                list.addEnd([minRecId, maxRecId]);
            }
        }
        if (records > 0)
        {
            list.addEnd([minRecId, maxRecId]);
        }
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceCalcIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list with batches of record PriceCalcID's to be deleted.
    /// PriceCalcId is the alternative key and also the clustered index key of BOMCalcTable.
    /// </summary>
    /// <param name="_cleanUpDate">
    /// The cleanup date.
    /// </param>
    /// <returns>
    /// A list with batches of record PriceCalcID's to be deleted.
    /// </returns>
    private List getPriceCalcIdList(TransDate _cleanUpDate)
    {
        BOMCalcTable        bomCalcTable;
        InventItemPrices    inventItemPrices;
        List                list = new List(Types::Container);
        int                 records = 0;
        boolean             firstPriceCalcId = true;
        PriceCalcId         minPriceCalcId;
        PriceCalcId         maxPriceCalcId;
        const int           deleteRecordBatchSize = 100;

        while select PriceCalcId from bomCalcTable
            order by bomCalcTable.PriceCalcId
            where bomCalcTable.bomCalcType == BOMCalcType::Version
               && bomCalcTable.TransDate   <= _cleanUpDate
            notexists join inventItemPrices
                where inventItemPrices.ItemId      == bomCalcTable.ItemId
                   && inventItemPrices.PriceCalcId == bomCalcTable.PriceCalcId
        {
            ++records;
            if (firstPriceCalcId)
            {
                minPriceCalcId = bomCalcTable.PriceCalcId;
                firstPriceCalcId = false;
            }
            maxPriceCalcId = bomCalcTable.PriceCalcId;
            if (records == deleteRecordBatchSize)
            {
                firstPriceCalcId = true;
                records = 0;
                list.addEnd([minPriceCalcId, maxPriceCalcId]);
            }
        }
        if (records > 0)
        {
            list.addEnd([minPriceCalcId, maxPriceCalcId]);
        }
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBomCalcTableWithoutRelatedPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>BOMCalcTable</c> records without a related price.
    /// </summary>
    /// <remarks>
    /// Deletion of <c>BOMCalcTable</c> records cascades to <c>BOMCalcTrans</c>.
    /// </remarks>
    private void deleteBomCalcTableWithoutRelatedPrice()
    {
        BOMCalcTable        bomCalcTable;
        InventItemPrices    inventItemPrices;
        RecId               minRecId;
        RecId               maxRecId;

        if (cleanUpPlannedPriceCalculation || cleanUpStandardPriceCalculation)
        {
            var cleanUpDate = max(cleanUpPlannedPriceDate, cleanUpStandardPriceDate);
            var list = this.getRecIdList(cleanUpDate);
            var le = list.getEnumerator();
            while (le.moveNext())
            {
                [minRecId, maxRecId] = le.current();
                ttsbegin;
                delete_from bomCalcTable
                    where bomCalcTable.bomCalcType == BOMCalcType::Version
                       && bomCalcTable.TransDate   <= cleanUpDate
                       && bomCalcTable.RecId       >= minRecId
                       && bomCalcTable.RecId       <= maxRecId
                    notexists join inventItemPrices
                        where inventItemPrices.ItemId == bomCalcTable.ItemId
                           && inventItemPrices.PriceCalcId == bomCalcTable.PriceCalcId;
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBomCalcTableWithoutRelatedPriceByPriceCalcId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>BOMCalcTable</c> records without a related price.
    /// Use PriceCalcId as batch filter than unindexed RecId.
    /// </summary>
    /// <remarks>
    /// Deletion of <c>BOMCalcTable</c> records cascades to <c>BOMCalcTrans</c>.
    /// </remarks>
    private void deleteBomCalcTableWithoutRelatedPriceByPriceCalcId()
    {
        BOMCalcTable        bomCalcTable;
        InventItemPrices    inventItemPrices;
        PriceCalcId         minPriceCalcId;
        PriceCalcId         maxPriceCalcId;

        if (cleanUpPlannedPriceCalculation || cleanUpStandardPriceCalculation)
        {
            var cleanUpDate = max(cleanUpPlannedPriceDate, cleanUpStandardPriceDate);
            var list = this.getPriceCalcIdList(cleanUpDate);
            var le = list.getEnumerator();
            while (le.moveNext())
            {
                [minPriceCalcId, maxPriceCalcId] = le.current();
                ttsbegin;
                delete_from bomCalcTable
                    where bomCalcTable.bomCalcType == BOMCalcType::Version
                       && bomCalcTable.TransDate   <= cleanUpDate
                       && bomCalcTable.PriceCalcId >= minPriceCalcId
                       && bomCalcTable.PriceCalcId <= maxPriceCalcId
                    notexists join inventItemPrices
                        where inventItemPrices.ItemId == bomCalcTable.ItemId
                           && inventItemPrices.PriceCalcId == bomCalcTable.PriceCalcId;
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSalesLinePriceCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>BOMCalcTable</c> records related to sales orders.
    /// </summary>
    private void deleteSalesLinePriceCalculation()
    {
        BOMCalcTable        bomCalcTable;

        if (cleanUpSalesLinePriceCalculation)
        {
            ttsbegin;

            delete_from bomCalcTable
                where bomCalcTable.bomCalcType == BOMCalcType::Order
                   && bomCalcTable.TransDate   <= cleanUpSalesLinePriceDate;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase           dialog;

        dialog = super();

        dialogCleanUpCrossCostingVersion = dialog.addField(enumStr(NoYes),"@SCM:BomCalcCleanUp_CrossCostingVersions", "@SCM:BomCalcCleanUp_CrossCostingVersions");
        dialogCleanUpCrossCostingVersion.visible(true);

        dialog.addGroup("@SYP4882077");
        dialogCleanUpSalesLinePriceCalculation = dialog.addField(enumStr(NoYes),"@SYP4882078", "@SYP4882079");
        dialogCleanUpSalesLinePriceCalculation.value(cleanUpSalesLinePriceCalculation);
        dialogCleanUpSalesLinePriceDate = dialog.addField(extendedTypeStr(TransDate),"@SYP4882080", "@SYP4882081");
        dialogCleanUpSalesLinePriceDate.value(cleanUpSalesLinePriceDate);

        dialog.addGroup("@SYP4882090");
        dialogCleanUpPlannedPriceCalculation = dialog.addField(enumStr(BomCalcCleanupPrice),"@SYP4882082", "@SYP4882083");

        dialogCleanUpPlannedPriceCalculation.value(cleanUpPlannedPriceCalculation);
        dialogCleanUpPlannedPriceDate = dialog.addField(extendedTypeStr(TransDate),"@SYP4882080", "@SYP4882081");
        dialogCleanUpPlannedPriceDate.value(cleanUpPlannedPriceDate);

        dialog.addGroup("@SYP4882084");
        dialogCleanUpStandardPriceCalculation = dialog.addField(enumStr(BomCalcCleanupPrice),"@SYP4882085", "@SYP4882083");
        dialogCleanUpStandardPriceCalculation.value(cleanUpStandardPriceCalculation);
        dialogCleanUpStandardPriceDate = dialog.addField(extendedTypeStr(TransDate),"@SYP4882080", "@SYP4882081");
        dialogCleanUpStandardPriceDate.value(cleanUpStandardPriceDate);

        this.registerOverrideMethods();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCleanUpPlannedPriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the dialog field <c>dialogCleanUpPlannedPriceDate</c> should be enabled.
    /// </summary>
    /// <returns>
    /// true if the dialog field should be enabled; otherwise, false.
    /// </returns>
    private boolean enableCleanUpPlannedPriceDate()
    {
        return dialogCleanUpPlannedPriceCalculation.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCleanUpSalesLinePriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the dialog field <c>dialogCleanUpSalesLinePriceDate</c> should be enabled.
    /// </summary>
    /// <returns>
    /// true if the dialog field should be enabled; otherwise, false.
    /// </returns>
    private boolean enableCleanUpSalesLinePriceDate()
    {
        return dialogCleanUpSalesLinePriceCalculation.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCleanUpStandardPriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the dialog field <c>dialogCleanUpStandardPriceDate</c> should be enabled.
    /// </summary>
    /// <returns>
    /// true if the dialog field should be enabled; otherwise, false.
    /// </returns>
    private boolean enableCleanUpStandardPriceDate()
    {
        return dialogCleanUpStandardPriceCalculation.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        cleanUpSalesLinePriceCalculation = dialogCleanUpSalesLinePriceCalculation.value();
        cleanUpSalesLinePriceDate = dialogCleanUpSalesLinePriceDate.value();
        cleanUpPlannedPriceCalculation = dialogCleanUpPlannedPriceCalculation.value();
        cleanUpPlannedPriceDate = dialogCleanUpPlannedPriceDate.value();
        cleanUpStandardPriceCalculation = dialogCleanUpStandardPriceCalculation.value();
        cleanUpStandardPriceDate = dialogCleanUpStandardPriceDate.value();
        cleanUpCrossCostingVersion = dialogCleanUpCrossCostingVersion.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nullifyPriceCalcIdForPlannedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Nullifies the calculation ID for planning cost.
    /// </summary>
    private void nullifyPriceCalcIdForPlannedCost()
    {
        switch (cleanUpPlannedPriceCalculation)
        {
            case BomCalcCleanupPrice::PendingAndActive:
                this.nullifyPriceCalcIdOnInventItemPrice(CostingVersionCostingType::Normal, cleanUpPlannedPriceDate);
                //fall through

            case BomCalcCleanupPrice::Pending:
                this.nullifyPriceCalcIdOnInventItemPriceSim(CostingVersionCostingType::Normal, cleanUpPlannedPriceDate);
                // Do not cleanUp prices for conversion
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nullifyPriceCalcIdForStandardCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Nullifies the calculation ID for standard cost.
    /// </summary>
    private void nullifyPriceCalcIdForStandardCost()
    {
        switch (cleanUpStandardPriceCalculation)
        {
            case BomCalcCleanupPrice::PendingAndActive:
                this.nullifyPriceCalcIdOnInventItemPrice(CostingVersionCostingType::Standard, cleanUpStandardPriceDate);
                this.nullifyPriceCalcIdOnInventItemPrice(CostingVersionCostingType::Conversion, cleanUpPlannedPriceDate);
                 //fall through

            case BomCalcCleanupPrice::Pending:
                this.nullifyPriceCalcIdOnInventItemPriceSim(CostingVersionCostingType::Standard, cleanUpStandardPriceDate);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nullifyPriceCalcIdOnInventItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Nullifies the calculation ID on the <c>InventItemPrice</c> table.
    /// </summary>
    /// <param name="_costingType">
    /// The costing type to nullify.
    /// </param>
    /// <param name="_purgeDate">
    /// The purge date.
    /// </param>
    private void nullifyPriceCalcIdOnInventItemPrice(CostingVersionCostingType _costingType, TransDate _purgeDate)
    {
        CostingVersion                  costingVersion;
        InventItemPrice                 inventItemPrice;
        InventItemPriceCurrentActive    inventItemPriceCurrentActive;
        InventItemPriceCrossCostingVersionCurrentActive inventItemPriceCrossCostingVersionCurrentActive;

        ttsbegin;

        if (cleanUpCrossCostingVersion)
        {
            update_recordset inventItemPrice
                    setting PriceCalcId = ''
                where inventItemPrice.ActivationDate <= _purgeDate
                   && inventItemPrice.PriceCalcId    != ''
                exists join costingVersion
                    where costingVersion.VersionId == inventItemPrice.VersionId
                       && costingVersion.CostingType == _costingType
                notexists join inventItemPriceCrossCostingVersionCurrentActive
                    where inventItemPriceCrossCostingVersionCurrentActive.ItemId == inventItemPrice.ItemId
                       && inventItemPriceCrossCostingVersionCurrentActive.InventDimId == inventItemPrice.InventDimId
                       && inventItemPriceCrossCostingVersionCurrentActive.PriceType == inventItemPrice.PriceType
                       && inventItemPriceCrossCostingVersionCurrentActive.MaxActivationDate == inventItemPrice.ActivationDate
                       && inventItemPriceCrossCostingVersionCurrentActive.MaxCreatedDateTime == inventItemPrice.CreatedDateTime;
        }
        else
        {
            update_recordset inventItemPrice
                    setting PriceCalcId = ''
                where inventItemPrice.ActivationDate <= _purgeDate
                   && inventItemPrice.PriceCalcId != ''
                exists join costingVersion
                    where costingVersion.VersionId == inventItemPrice.VersionId
                       && costingVersion.CostingType == _costingType
                notexists join inventItemPriceCurrentActive
                    where inventItemPriceCurrentActive.ItemId == inventItemPrice.ItemId
                       && inventItemPriceCurrentActive.InventDimId == inventItemPrice.InventDimId
                       && inventItemPriceCurrentActive.PriceType == inventItemPrice.PriceType
                       && inventItemPriceCurrentActive.MaxActivationDate == inventItemPrice.ActivationDate
                       && inventItemPriceCurrentActive.MaxCreatedDateTime == inventItemPrice.CreatedDateTime;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nullifyPriceCalcIdOnInventItemPriceSim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Nullifies the calculation ID on the <c>InventItemPriceSim</c> table.
    /// </summary>
    /// <param name="_costingType">
    /// The costing type to nullify.
    /// </param>
    /// <param name="_purgeDate">
    /// The purge date.
    /// </param>
    private void nullifyPriceCalcIdOnInventItemPriceSim(CostingVersionCostingType _costingType, TransDate _purgeDate)
    {
        CostingVersion                  costingVersion;
        InventItemPriceSim              inventItemPriceSim;

        ttsbegin;

        update_recordset inventItemPriceSim
            setting PriceCalcId = ''
        where inventItemPriceSim.FromDate <= _purgeDate
            && inventItemPriceSim.PriceCalcId != ''
        exists join costingVersion
        where costingVersion.VersionId == inventItemPriceSim.VersionId
           && costingVersion.CostingType == _costingType;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForRun</Name>
				<Source><![CDATA[
    protected void prepareForRun(Object _dialog)
    {
        super(_dialog);

        dialogCleanUpSalesLinePriceDate.enabled(this.enableCleanUpSalesLinePriceDate());
        dialogCleanUpPlannedPriceDate.enabled(this.enableCleanUpPlannedPriceDate());
        dialogCleanUpStandardPriceDate.enabled(this.enableCleanUpStandardPriceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOverrideMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers override methods for controls in the dialog.
    /// </summary>
    protected void registerOverrideMethods()
    {
        dialogCleanUpSalesLinePriceCalculation.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), methodStr(BomCalcCleanUp, cleanUpSalesLinePriceCalculationModified), this);
        dialogCleanUpPlannedPriceCalculation.registerOverrideMethod(methodStr(FormComboBoxControl, modified), methodStr(BomCalcCleanUp, cleanUpPlannedPriceCalculationModified), this);
        dialogCleanUpStandardPriceCalculation.registerOverrideMethod(methodStr(FormComboBoxControl, modified), methodStr(BomCalcCleanUp, cleanUpStandardPriceCalculationModified), this);

        dialogCleanUpSalesLinePriceDate.registerOverrideMethod(methodStr(FormDateControl, validate), methodStr(BomCalcCleanUp, cleanUpDateValidate), this);
        dialogCleanUpPlannedPriceDate.registerOverrideMethod(methodStr(FormDateControl, validate), methodStr(BomCalcCleanUp, cleanUpDateValidate), this);
        dialogCleanUpStandardPriceDate.registerOverrideMethod(methodStr(FormDateControl, validate), methodStr(BomCalcCleanUp, cleanUpDateValidate), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        int     steps = 4;
        int     step = 1;

        setPrefix(InventCostCleanUp::description());

        this.progressInit(InventCostCleanUp::description(), steps, #AviUpdate);

        try
        {
            while (step <= steps)
            {
                switch (step)
                {
                    case 1:
                        this.deleteSalesLinePriceCalculation();
                        break;
                    case 2:
                        this.nullifyPriceCalcIdForPlannedCost();
                        break;
                    case 3:
                        this.nullifyPriceCalcIdForStandardCost();
                        break;
                    case 4:
                        if (bomCalcCleanUpUsePriceCalcIdFlightEnabled)
                        {
                            this.deleteBomCalcTableWithoutRelatedPriceByPriceCalcId();
                        }
                        else
                        {
                            this.deleteBomCalcTableWithoutRelatedPrice();
                        }
                        break;
                    default:
                        throw error(strFmt("@SYS19378",funcName()));
                }
                step++;
                progress.incCount();
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Communicates to the batch framework that this class can impersonate the user who requested the task
    /// </summary>
    /// <returns>
    /// true because this class has been validated to be able to use impersonation.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;
            case #Version1:
                [version, #ParmListV1] = _packedClass;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCleanUpDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the clean up date.
    /// </summary>
    /// <param name="_cleanUpDate">
    /// The cleanUp date.
    /// </param>
    /// <returns>
    /// true if the cleanUp date is valid; otherwise, false.
    /// </returns>
    protected boolean validateCleanUpDate(TransDate _cleanUpDate)
    {
        if (_cleanUpDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            return checkFailed("@SYP4882086");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BomCalcCleanUp construct()
    {
        BomCalcCleanUp  bomCalcCleanUp = new BomCalcCleanUp();

        bomCalcCleanUp.getLast();
        bomCalcCleanUp.init();

        return bomCalcCleanUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYP4882087";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        BomCalcCleanUp  bomCalcCleanUp;

        bomCalcCleanUp = BomCalcCleanUp::construct();

        if (bomCalcCleanUp.prompt())
        {
            bomCalcCleanUp.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>