<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceMail_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceMail_MX</c> class populates the <c>SysEmailTable</c> table and related tables.
/// </summary>
public class EInvoiceMail_MX
{
    SysEmailTable           emailTable;
    SysEmailMessageTable    emailMessage;
    SysEmailParameters      emailParameters;

    SysEmailId              emailId;
    LanguageId              languageId;

    SysEmailRecipients      toEmailAddr;
    SysEmailDescriptionType emailIdentifier;

    FileName                attachmentName;
    BinData                 attachmentContent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInvoiceNumberToMailSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the invoice number to the mail subject.
    /// </summary>
    /// <param name="_invoiceNumber">
    /// The invoice number to add.
    /// </param>
    Public void addInvoiceNumberToMailSubject(str _invoiceNumber)
    {
        #define.separator(' - ')

        emailMessage.Subject = emailMessage.Subject + #separator + _invoiceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters from electronic invoice parameters.
    /// </summary>
    protected void initParameters()
    {
        emailParameters = SysEmailParameters::find();

        languageId = xUserInfo::find().language;

        emailTable = SysEmailTable::find(EInvoiceCFDIParameters_MX::find().EmailId);

        if (!languageId)
        {
            languageId = emailTable.DefaultLanguage;
        }

        emailMessage = SysEmailMessageTable::find(emailTable.EmailId, languageId);

        if (!emailMessage)
        {
            // Message not found for this language.
            emailMessage = SysEmailMessageTable::find(emailTable.EmailId, emailTable.DefaultLanguage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        FileName                _attachmentName,
        BinData                 _attachmentContent,
        SysEmailRecipients      _toEmailAddr,
        SysEmailDescriptionType _emailIdentifier)
    {
        attachmentName      = _attachmentName;
        attachmentContent   = _attachmentContent;
        toEmailAddr         = _toEmailAddr;
        emailIdentifier     = _emailIdentifier;
        this.initParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the mail with related invoice number subject.
    /// </summary>
    public void sendMail()
    {
        #File

        SysEmailContents        messageBody;

        Filename                filePath;
        Filename                filename;
        Filename                fileExtension;

        SysEmailItemId          nextEmailItemId;

        SysOutgoingEmailTable   outgoingEmailTable;
        SysOutgoingEmailData    outgoingEmailData;

        if (emailMessage)
        {
            messageBody = emailMessage.Mail;
            ttsbegin;

            nextEmailItemId = EventInbox::nextEventId();

            outgoingEmailTable.EmailItemId      = nextEmailItemId;
            outgoingEmailTable.TemplateId       = emailTable.EmailId;
            outgoingEmailTable.IsSystemEmail    = NoYes::No;

            outgoingEmailTable.Sender           = emailTable.SenderAddr;
            outgoingEmailTable.SenderName       = emailTable.SenderName;
            outgoingEmailTable.Recipient        = toEmailAddr;
            outgoingEmailTable.Origin           = emailIdentifier;

            //note: first do the xml transform if needed, params are substitued after that
            messageBody                         = SysEmailMessage::stringExpand(messageBody, null);

            outgoingEmailTable.Subject      = emailMessage.Subject;
            outgoingEmailTable.Priority     = emailTable.Priority;
            outgoingEmailTable.WithRetries  = true;
            outgoingEmailTable.RetryNum     = 0;
            outgoingEmailTable.UserId       = curuserid();
            outgoingEmailTable.Status       = SysEmailStatus::Unsent;
            outgoingEmailTable.Message      = messageBody;

            if (this.attachmentName)
            {
                if (attachmentContent.size() < (emailParameters.MaxEmailAttachmentSize * 1000000))
                {
                    [filePath, filename, fileExtension] = Global::fileNameSplit(this.attachmentName);
                    outgoingEmailData.EmailItemId       = nextEmailItemId;
                    outgoingEmailData.DataId            = 1;
                    outgoingEmailData.EmailDataType     = SysEmailDataType::Attachment;
                    outgoingEmailData.Data              = attachmentContent.getData();
                    outgoingEmailData.FileName          = filename;
                    outgoingEmailData.FileExtension     = fileExtension;
                    outgoingEmailData.insert();
                }
            }

            CodeAccessPermission::revertAssert();

            outgoingEmailTable.LatestStatusChangeDateTime = DateTimeUtil::getSystemDateTime();
            outgoingEmailTable.insert();

            ttscommit;
        }
        else
        {
            throw error(strfmt("@SYS74260", languageId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>EInvoiceMail_MX</c> class
    /// </summary>
    /// <param name="_attachmentName">
    /// The name of the attachment file
    /// </param>
    /// <param name="_attachmentContent">
    /// The content of the attachment file
    /// </param>
    /// <param name="_toEmailAddr">
    /// The e-mail recipients.
    /// </param>
    /// <param name="_emailIdentifier">
    /// The e-mail identifier.
    /// </param>
    /// <returns>
    /// A new instance of the <c>EInvoiceMail_MX</c> class.
    /// </returns>
    /// <remarks>
    ///  Use the following procedure to customize or extend the
    ///  <c>
    ///  EInvoiceMail_MX
    ///  </c>
    ///   class.
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    Create a new class that derives from the <c>EInvoiceMail_MX</c> class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Overlayer the <c>construct</c> method on the <c>EInvoiceMail_MX</c> class so that it returns an
    ///    instance of the derived class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Override the methods from the <c>EInvoiceMail_MX</c> class that you want to customize or extend in
    ///    your derived class.
    ///    </description>
    ///   </item>
    ///  </list>
    ///   This procedure helps to ensure that your customizations are maintained if the base version of the
    ///  <c>
    ///  EInvoiceMail_MX
    ///  </c>
    ///   class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for Static Construct Methods" />
    ///  .
    /// </remarks>
    public static EInvoiceMail_MX construct(
        FileName                _attachmentName,
        BinData                 _attachmentContent,
        SysEmailRecipients      _toEmailAddr,
        SysEmailDescriptionType _emailIdentifier)
    {
        EInvoiceMail_MX   eInvoiceMail;
        eInvoiceMail = new EInvoiceMail_MX(_attachmentName, _attachmentContent, _toEmailAddr, _emailIdentifier);

        return eInvoiceMail;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>