<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentParmDataAmountCalc_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the charges total amount, taxes total amount, product total amount and fiscal document total amount
/// for a given header parm data
/// </summary>
public class FiscalDocumentParmDataAmountCalc_BR
{
    TaxAmount                  sumIcmsTotalAmount;
    TaxAmount                  sumIcmsStTotalAmount;
    TaxAmount                  sumIpiTotalAmount;
    TaxAmount                  sumIcmsBaseAmount;
    TaxAmount                  sumIcmsStBaseAmount;
    MarkupSum                  sumFreight;
    MarkupSum                  sumInsurance;
    MarkupSum                  sumOthers;
    AmountMST                  fiscalDocumentTotalAmount;
    AmountMST                  sumFiscalDocumentTotalProductsAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToTotalMiscCharges</Name>
				<Source><![CDATA[
    private void addToTotalMiscCharges(FiscalDocumentMiscChargeParmData_BR _charge)
    {
        switch (_charge.parmType())
        {
            case MarkupClassification_BR::Freight:
                sumFreight    += _charge.parmAmount();
                break;
            case MarkupClassification_BR::Insurance:
                sumInsurance  += _charge.parmAmount();
                break;
            case MarkupClassification_BR::SISCOMEX:
            case MarkupClassification_BR::Others:
                sumOthers     += _charge.parmAmount();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToTotalTaxes</Name>
				<Source><![CDATA[
    private void addToTotalTaxes(FiscalDocumentTaxTransParmData_BR _tax)
    {
        switch (_tax.parmType())
        {
            case TaxType_BR::ICMS:
                sumIcmsTotalAmount += _tax.parmTaxAmount() + _tax.parmTaxAmountOther();
                if (_tax.parmTaxReductionPct() > 0)
                {
                    sumIcmsBaseAmount +=  _tax.parmTaxBaseAmount() + _tax.parmTaxBaseAmountOther();
                }
                else
                {
                    sumIcmsBaseAmount +=  _tax.parmTaxBaseAmount() + _tax.parmTaxBaseAmountOther() + _tax.parmTaxBaseAmountExempt();
                }
                break;
            case TaxType_BR::ICMSST:
                sumIcmsStTotalAmount += _tax.parmTaxAmount() + _tax.parmTaxAmountOther();
                sumIcmsStBaseAmount +=  _tax.parmTaxBaseAmount() + _tax.parmTaxBaseAmountOther() + _tax.parmTaxBaseAmountExempt();
                break;
            case TaxType_BR::IPI:
                sumIpiTotalAmount += _tax.parmTaxAmount() + _tax.parmTaxAmountOther();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFiscalDocumentAmounts</Name>
				<Source><![CDATA[
    private void calculateFiscalDocumentAmounts(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        ListEnumerator                      linesEnumerator, taxesEnumerator, chargesEnumerator;
        FiscalDocumentLineParmData_BR       line;
        FiscalDocumentTaxTransParmData_BR   tax;
        FiscalDocumentMiscChargeParmData_BR charge;

        linesEnumerator = _fiscalDocumentParmData.parmLines().getEnumerator();

        fiscalDocumentTotalAmount = _fiscalDocumentParmData.parmTotalAmount();

        while (linesEnumerator.moveNext())
        {
            line = linesEnumerator.current();
            taxesEnumerator = line.parmListOfTaxes().getEnumerator();

            sumFiscalDocumentTotalProductsAmount += line.parmLineAmount();

            while (taxesEnumerator.moveNext())
            {
                tax = taxesEnumerator.current();
                this.addToTotalTaxes(tax);
            }

            chargesEnumerator = line.parmListOfMiscCharges().getEnumerator();
            while (chargesEnumerator.moveNext())
            {
                charge = chargesEnumerator.current();
                this.addToTotalMiscCharges(charge);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of the fiscal document parm
    /// </summary>
    /// <returns>
    /// The total amount
    /// </returns>
    public AmountMST getFiscalDocumentTotalAmount()
    {
        return fiscalDocumentTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumFiscalDocumentTotalProductsAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of prodcut amount from all lines of the fiscal document parm
    /// </summary>
    /// <returns>
    /// The total product amount
    /// </returns>
    public AmountMST getSumFiscalDocumentTotalProductsAmount()
    {
        return sumFiscalDocumentTotalProductsAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumFreight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of freight charge from all lines of the fiscal document parm
    /// </summary>
    /// <returns>
    /// The freight charge total amount
    /// </returns>
    public MarkupSum getSumFreight()
    {
        return sumFreight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumIcmsBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of icms base from all lines of the fiscal document parm
    /// </summary>
    /// <returns>
    /// The icms base total amount
    /// </returns>
    public TaxAmount getSumIcmsBaseAmount()
    {
        return sumIcmsBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumIcmsStBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of icms st base from all lines of the fiscal document parm
    /// </summary>
    /// <returns>
    /// The icms st base total amount
    /// </returns>
    public TaxAmount getSumIcmsStBaseAmount()
    {
        return sumIcmsStBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumIcmsStTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of icms st from all lines of the fiscal document parm
    /// </summary>
    /// <returns>
    /// The icms st total amount
    /// </returns>
    public TaxAmount getSumIcmsStTotalAmount()
    {
        return sumIcmsStTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumIcmsTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of icms from all lines of the fiscal document parm
    /// </summary>
    /// <returns>
    /// The icms total amount
    /// </returns>
    public TaxAmount getSumIcmsTotalAmount()
    {
        return sumIcmsTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumInsurance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of insurance charge from all lines of the fiscal document parm
    /// </summary>
    /// <returns>
    /// The insurance charge total amount
    /// </returns>
    public MarkupSum getSumInsurance()
    {
        return sumInsurance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumIpiTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of ipi from all lines of the fiscal document parm
    /// </summary>
    /// <returns>
    /// The ipi total amount
    /// </returns>
    public TaxAmount getSumIpiTotalAmount()
    {
        return sumIpiTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumOthers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of others charge from all lines of the fiscal document parm
    /// </summary>
    /// <returns>
    /// The others charge total amount
    /// </returns>
    public MarkupSum getSumOthers()
    {
        return sumOthers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the calculator for the given fiscal document header parm
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// The fiscal document header parm
    /// </param>
    public void new(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        this.calculateFiscalDocumentAmounts(_fiscalDocumentParmData);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>