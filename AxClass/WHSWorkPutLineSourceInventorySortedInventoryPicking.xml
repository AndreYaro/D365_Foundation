<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkPutLineSourceInventorySortedInventoryPicking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkPutLineSourceInventorySortedInventoryPicking</c> class extends the <c>WHSWorkPutLineSourceInventoryPicking</c>
/// class and provides functionality specific to sorted inventory picking.
/// </summary>
[WHSWorkPutLineSourceInventoryPickingAttribute(WHSWorkTransType::SortedInventoryPicking)]
internal class WHSWorkPutLineSourceInventorySortedInventoryPicking extends WHSWorkPutLineSourceInventoryPicking
{
    private Set inventTransParentSet = new Set(Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pickInventoryQuantities</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void pickInventoryQuantities(WHSWorkPutLineSourceInventoryPickingParameters _parameters)
    {
        if (!inventTransParentSet.in(_parameters.inventTransIdParent))
        {
            if (this.canUpdateLoadLinePickedQty())
            {
                this.updateLoadLinePickedQtyForSorting(_parameters.inventTransIdParent, putWorkLineNum);
            }

            inventTransParentSet.add(_parameters.inventTransIdParent);
        }

        if (this.canUpdateInventoryTransactions())
        {            
            WhsOutboundSortingInventTransPickIdAllocator outboundSortingPickIdAllocator = this.outboundSortingPickIdAllocator();
            if (outboundSortingPickIdAllocator)
            {
                if (!_parameters.workInventTransRecId)
                {
                    throw error(error::wrongUseOfFunction(funcName()));
                }

                outboundSortingPickIdAllocator.parmCurrentWorkInventTransRecId(_parameters.workInventTransRecId);
            }
            
            using (WhsInventPickingContext context = WhsInventPickingContext::newFromPickIdAllocator(outboundSortingPickIdAllocator))
            {
                
                WHSInvent::pickQuantities(
                    WHSInvent::getCommonFromWorkTransType(work.WorkTransType, _parameters.inventTransIdParent, true),
                    _parameters.inventDimId,
                    _parameters.qty,
                    _parameters.pdsCWQty,
                    _parameters.inventDimParmAboveLocation);
            
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLinePickedQtyForSorting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the load line picked qty when doing sorting work.
    /// </summary>
    /// <param name = "_inventTransId">The inventory transaction ID for the load Line to be updated.</param>
    /// <param name = "_workLineNum">The line number of the work inventory transaction.</param>    
    private void updateLoadLinePickedQtyForSorting(InventTransId _inventTransId, WHSLineNum _workLineNum)
    {
        ttsbegin;

        WHSOutboundSortPosition sortPosition;
        WHSWorkTable sortWorkTable;

        // Outbound sorting work groups all Pick and Put line, so it does not have any reference to the loadlines.
        // So, fetch all work which has the TargetLicensePlate same as the the sort position license plate.
             
        WHSOutboundSortPositionTrans outboundSortPositionTrans;
        WHSLoadLine loadLineLocal;

        select firstonly RecId from sortPosition
        exists join sortWorkTable
            where  sortWorkTable.TargetLicensePlateId   == sortPosition.LicensePlateId
                && sortWorkTable.InventLocationId       == sortPosition.InventLocationId
                && sortWorkTable.WorkBuildId            == work.WorkBuildId
                && sortWorkTable.WorkTransType          == WHSWorkTransType::SortedInventoryPicking
        exists join outboundSortPositionTrans
            where outboundSortPositionTrans.OutboundSortPosition == sortPosition.RecId
        exists join loadLineLocal
            where  outboundSortPositionTrans.LoadLine   == loadLineLocal.RecId
                && loadLineLocal.InventTransId          == _inventTransId;
      

        WhsOutboundSortingInventTransPickIdAllocator outboundSortingPickIdAllocator = this.outboundSortingPickIdAllocator();

        if (sortPosition.RecId)
        {            
            WHSWorkInventTrans  workInventTrans;

            while select ItemId, Qty, InventDimIdFrom, InventDimIdTo, InventTransIdParent, TransactionWeight from workInventTrans
                where  workInventTrans.WorkId  == work.WorkId
                    && workInventTrans.LineNum == _workLineNum
                    && workInventTrans.InventTransIdParent == _inventTransId
            {
                InventDim workInventTransInventDim = InventDim::find(workInventTrans.InventDimIdFrom);
                workInventTransInventDim.clearLocationAndBelowDim(workInventTrans.ItemId);

                WHSOutboundSortPositionTrans sortPositionTrans;
                WHSLoadLine loadLine;

                // Fetch the LoadLines based on the inventory transaction reference and the reference from the sort position transactions.
                while select forupdate loadLine
                    where loadLine.InventTransId == workInventTrans.InventTransIdParent
                    exists join sortPositionTrans
                        where sortPositionTrans.OutboundSortPosition == sortPosition.RecId
                            && sortPositionTrans.LoadLine == loadLine.RecId
                {
                    InventDim loadLineInventDim = loadLine.inventDim();
                    loadLineInventDim.clearLocationAndBelowDim(workInventTrans.ItemId);

                    if (InventDim::isInventDimEqual(loadLineInventDim, workInventTransInventDim))
                    {
                        loadLine.PickedQty += workInventTrans.Qty;
                        loadLine.PickedWeight += workInventTrans.TransactionWeight;

                        loadLine.update();

                        if (outboundSortingPickIdAllocator && !PdsGlobal::pdsIsCWItem(loadLine.ItemId))
                        {
                            outboundSortingPickIdAllocator.assignSortWorkInventTransAndLoadLine(workInventTrans, loadLine);
                        }                                               
                    }                    
                }
            }            
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundSortingPickIdAllocator</Name>
				<Source><![CDATA[
    private WhsOutboundSortingInventTransPickIdAllocator outboundSortingPickIdAllocator()
    {        
        if (pickIdAllocator && !(pickIdAllocator is WhsOutboundSortingInventTransPickIdAllocator))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return (pickIdAllocator as WhsOutboundSortingInventTransPickIdAllocator);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>