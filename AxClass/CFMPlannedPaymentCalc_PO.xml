<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPlannedPaymentCalc_PO</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CFMPlannedPaymentSourceAttribute(tableStr(PurchTable))]
public class CFMPlannedPaymentCalc_PO extends CFMPlannedPaymentCalc
{
    PurchTotals purchTotals;
    boolean countryRegion_W;

    AmountCur dueAmount;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPaymSched</Name>
				<Source><![CDATA[
    protected CustVendPaymentSched createPaymSched()
    {
        CustVendPaymSched custVendPaymSched = CustVendPaymSched::construct(SysModule::Vend, this.purchTable());
        custVendPaymSched.setPurchTotals(this.purchTotals());
        custVendPaymSched.parmSkipVersionChangeCheck(true);
        custVendPaymSched.createPaymSched(PaymSched::find(this.purchTable().PaymentSched));

        return this.findPaymSched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlannedPayment</Name>
				<Source><![CDATA[
    protected void createPlannedPayment()
    {
        super();

        this.settlePlannedPaymentWithPrepayments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymSched</Name>
				<Source><![CDATA[
    protected CustVendPaymentSched findPaymSched()
    {
        return VendPaymSched::find(this.purchTable().TableId, this.purchTable().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(Common _source)
    {
        #EECountryRegionCodes

        super(_source);

        countryRegion_W = SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU);

        select sum(Amount) from distributionPercentTmpTable;

        dueAmount = distributionPercentTmpTable.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymSchedLineInstance</Name>
				<Source><![CDATA[
    protected CustVendPaymentSchedLine paymSchedLineInstance()
    {
        VendPaymSchedLine ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plannedPaymentRequired</Name>
				<Source><![CDATA[
    protected boolean plannedPaymentRequired()
    {
        return this.purchTable().PurchStatus  != PurchStatus::Invoiced
        && this.purchTable().PurchStatus  != PurchStatus::Canceled
        && this.purchTable().PurchaseType != PurchaseType::Journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    private PurchTable purchTable()
    {
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTotals</Name>
				<Source><![CDATA[
    private PurchTotals purchTotals()
    {
        if (!purchTotals)
        {
            purchTotals = PurchTotals_TransLedgerCov::construct(this.purchTable(), PurchUpdate::All);
            purchTotals.calc();
        }

        return purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlePlannedPaymentWithPrepayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decreases the amounts of created planned payments with the existsing prepayments for source.
    /// </summary>
    protected void settlePlannedPaymentWithPrepayments()
    {
        CFMDistributionDocument prepaymentDocument;

        if (this.sourceDueAmount() > 0)
        {
            prepaymentDocument = CFMDistributionDocument::newForPrepayment(this.purchTable());
            plannedPaymentDocument.settleWithDistributionDocument(prepaymentDocument);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sign</Name>
				<Source><![CDATA[
    protected Sign sign()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceAccountNum</Name>
				<Source><![CDATA[
    protected CFMAccountNum sourceAccountNum()
    {
        if (countryRegion_W &&
            this.purchTable().purchTable_W().EmplAccount_RU)
        {
            return this.purchTable().purchTable_W().EmplAccount_RU;
        }
        else
        {
            return this.purchTable().OrderAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceAccountType</Name>
				<Source><![CDATA[
    protected CFMAccountType sourceAccountType()
    {
        if (countryRegion_W &&
            this.purchTable().purchTable_W().EmplAccount_RU)
        {
            return CFMAccountType::Worker;
        }
        else
        {
            return CFMAccountType::Vend;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode sourceCurrencyCode()
    {
        return this.purchTable().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDataAreaId</Name>
				<Source><![CDATA[
    protected DataAreaId sourceDataAreaId()
    {
        return this.purchTable().DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDiscAmount</Name>
				<Source><![CDATA[
    protected DiscAmount sourceDiscAmount()
    {
        return this.purchTotals().purchCashDiscAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDiscDate</Name>
				<Source><![CDATA[
    protected DiscDate sourceDiscDate()
    {
        return this.purchTotals().purchCashDiscDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDueAmount</Name>
				<Source><![CDATA[
    protected AmountCur sourceDueAmount()
    {
        return dueAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDueDate</Name>
				<Source><![CDATA[
    protected DueDate sourceDueDate()
    {
        DueDate dueDate;

        if (this.purchTable().FixedDueDate)
        {
            dueDate = this.purchTable().FixedDueDate;
        }
        else
        {
            dueDate = this.purchTable().ConfirmedDlv ?
                this.purchTable().ConfirmedDlv :
                this.purchTable().DeliveryDate;

            if (!dueDate)
            {
                dueDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }

            if (dueDate && this.purchTable().Payment)
            {
                dueDate = PaymTerm::advanceDate(this.purchTable().Payment, dueDate);
            }
        }

        if (!dueDate || dueDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            dueDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceInvoiceAccountNum</Name>
				<Source><![CDATA[
    protected CFMAccountNum sourceInvoiceAccountNum()
    {
        if (this.purchTable().purchTable_W().EmplAccount_RU)
        {
            return this.purchTable().purchTable_W().EmplAccount_RU;
        }
        else
        {
            return this.purchTable().InvoiceAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourcePaymMode</Name>
				<Source><![CDATA[
    protected PaymMode sourcePaymMode()
    {
        return this.purchTable().PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourcePaymModeType</Name>
				<Source><![CDATA[
    protected CustVendACType sourcePaymModeType()
    {
        return CustVendACType::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourcePaymTerm</Name>
				<Source><![CDATA[
    protected PaymTermId sourcePaymTerm()
    {
        return this.purchTable().Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceType</Name>
				<Source><![CDATA[
    protected CFMPlannedPaymentSourceType sourceType()
    {
        return CFMPlannedPaymentSourceType::PurchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePaymentSchedule</Name>
				<Source><![CDATA[
    protected boolean usePaymentSchedule()
    {
        return this.purchTable().PaymentSched != "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>