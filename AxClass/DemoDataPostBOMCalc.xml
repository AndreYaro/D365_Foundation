<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostBOMCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DemoDataPostBOMCalc</c> class calculates item prices based on run document parameters.
/// </summary>
[DemoDataPostBaseFactoryAttribute(DemoDataPostDocument::PriceCalculation)]
class DemoDataPostBOMCalc extends DemoDataPostBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    private void calculate(List _prices)
    {
        if (!_prices)
        {
            return;
        }

        ListEnumerator pricesEnumerator = _prices.getEnumerator();

        while (pricesEnumerator.moveNext())
        {
            CostingVersion costingVersion = CostingVersion::find(pricesEnumerator.current());

            if (costingVersion.RecId)
            {
                this.calculatePricesForAllSites(costingVersion);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePricesForAllSites</Name>
				<Source><![CDATA[
    private void calculatePricesForAllSites(CostingVersion _costingVersion)
    {
        DemoDataPostRunDocumentStatus runDocumentStatus = DemoDataPostRunDocumentStatus::addDocumentForProcessing(
            runId,
            demoDataPostRunDocument.RecId,
            _costingVersion.RecId,
            _costingVersion.TableId,
            _costingVersion.VersionId);

        InventSite inventSite;
        DemoDataPostDocumentStatus status = DemoDataPostDocumentStatus::Success;

        while select siteId
            from inventSite
        {
            _costingVersion.InventSiteId = inventSite.SiteId;

            try
            {
                BOMCalcJob_All bomCalc = BOMCalcJob::newAll(_costingVersion);
                this.initParameters(bomCalc, _costingVersion);
                bomCalc.runOperation();
            }
            catch
            {
                status = DemoDataPostDocumentStatus::Failed;
            }
        }

        ttsbegin;

        runDocumentStatus.DocumentStatus = status;
        runDocumentStatus.CompletionTime = DateTimeUtil::getSystemDateTime();
        runDocumentStatus.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters(BOMCalcJob_All _bomCalc, CostingVersion _costingVersion)
    {
        _bomCalc.parmItemProcurementMode(ItemProcurementMode::ProductionOrder);
        _bomCalc.parmCalcDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        _bomCalc.parmBOMCalcExplosionMode(_costingVersion.bomCalcExplosionMode);
        _bomCalc.parmBOMCalcFallBack(_costingVersion.bomCalcFallBack);

        _bomCalc.parmProfitSet(_costingVersion.bomCostProfitSet);
        _bomCalc.parmCalcCostingVersionUpdate(BOMCalcCostingVersionUpdate::Overwrite);

        // Cost
        _bomCalc.parmCostPriceTransfer(_costingVersion.AllowCost);
        _bomCalc.parmCostPriceInclInUnitPrice(_costingVersion.PriceAllocateMarkup);
        _bomCalc.parmCostPriceRoundOff(_costingVersion.RoundOffCalculation);

        // Sales
        _bomCalc.parmSalesPriceTransfer(_costingVersion.AllowSales);
        _bomCalc.parmSalesPriceInclInUnitPrice(_costingVersion.PriceAllocateMarkup);
        _bomCalc.parmSalesPriceRoundOff(_costingVersion.RoundOffCalculation);

        // Price models
        _bomCalc.parmPurchPriceModel(_costingVersion.PurchPriceModel);

        if (_costingVersion.CostingType == CostingVersionCostingType::Standard || _costingVersion.CostingType == CostingVersionCostingType::Conversion)
        {
            _bomCalc.parmCostPriceModel(BOMCostPriceModel::ItemCostPrice);
        }
        else
        {
            _bomCalc.parmCostPriceModel(_costingVersion.bomCostPriceModel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    public DemoDataPostDocument getDocument()
    {
        return DemoDataPostDocument::PriceCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process()
    {
        List costVersions = DemoDataPostInventHelper::findCostingVersions(demoDataPostRunDocument);

        this.calculate(costVersions);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>