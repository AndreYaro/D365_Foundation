<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IFrameControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The runtime class for the Credit Card control.
/// </summary>
[FormControlAttribute("IFrameControl", "/resources/html/IFrameControl", classstr(BuildIFrameControl))]
class IFrameControl extends FormTemplateControl
{
    private static Set approvedDownloadUrls;
    private const str environmentSubDomainRemoveRegex = @"(((crm\d{0,2}\.\w+\.)|((?!crm\d{0,2})\w+\.){1,3})(com|us|cn|de))$";
    private FormProperty Url;
    private FormProperty Title;
    private FormProperty AllowDownload;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormBuildControl _build, FormRun _formRun)
    {
        super(_build, _formRun);

        this.setTemplateId(classStr(IFrameControl));
        this.setResourceBundleName('/Resources/HTML/IFrameControl');
        
        Url = properties.addProperty(methodStr(IFrameControl, url), Types::String);
        Title = properties.addProperty(methodStr(IFrameControl, title), Types::String);
        AllowDownload = properties.addProperty(methodStr(IFrameControl, allowDownload), Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>url</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::BindableValue, identifierStr(Url), true)]
    public str url(str _url = Url.parmValue())
    {
        if (!prmIsDefault(_url))
        {
            Url.parmValue(_url);
            this.setAllowDownload();
        }

        return Url.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>title</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::BindableValue, identifierStr(Title), true)]
    public str title(str _title = Title.parmValue())
    {
        if (!prmIsDefault(_title))
        {
            Title.parmValue(_title);
        }

        return Title.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDownload</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::BindableValue, identifierStr(AllowDownload), true)]
    internal boolean allowDownload()
    {
        return AllowDownload.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBuild</Name>
				<Source><![CDATA[
    public void applyBuild()
    {
        super();

        var build = this.build() as BuildIFrameControl;

        if (build)
        {
            this.url(build.url());
            this.title(build.title());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApprovedDownloadUrls</Name>
				<Source><![CDATA[
    private static Set getApprovedDownloadUrls()
    {
        if (!IFrameControl::approvedDownloadUrls)
        {
            IFrameControl::approvedDownloadUrls = new Set(Types::String);
            approvedDownloadUrls.add('daily.powerbi.com');        // Region: Daily
            approvedDownloadUrls.add('dxt.powerbi.com');          // Region: DXT
            approvedDownloadUrls.add('msit.powerbi.com');         // Region: MSIT
            approvedDownloadUrls.add('app.powerbi.com');          // Region: PROD
            approvedDownloadUrls.add('app.powerbi.cn');           // Region: Mooncake
            approvedDownloadUrls.add('app.powerbi.de');           // Region: BlackForest
            approvedDownloadUrls.add('app.powerbigov.us');        // Region: Fairfax
            approvedDownloadUrls.add('app.high.powerbigov.us');   // Region: Trailblazer
            approvedDownloadUrls.add('app.mil.powerbigov.us');    // Region: Pathfinder
            approvedDownloadUrls.add('crm.microsoftdynamics.de'); // Region: DEU
            approvedDownloadUrls.add('crm.microsoftdynamics.us'); // Region: GCC High
            approvedDownloadUrls.add('crm.dynamics.cn');          // Region: Mooncake
            approvedDownloadUrls.add('crm.dynamics.com');         // Region: NAM
            approvedDownloadUrls.add('crm2.dynamics.com');        // Region: SAM
            approvedDownloadUrls.add('crm3.dynamics.com');        // Region: CAN
            approvedDownloadUrls.add('crm4.dynamics.com');        // Region: EUR
            approvedDownloadUrls.add('crm5.dynamics.com');        // Region: APJ
            approvedDownloadUrls.add('crm6.dynamics.com');        // Region: OCE
            approvedDownloadUrls.add('crm7.dynamics.com');        // Region: JPN
            approvedDownloadUrls.add('crm8.dynamics.com');        // Region: IND
            approvedDownloadUrls.add('crm9.dynamics.com');        // Region: GCC
            approvedDownloadUrls.add('crm11.dynamics.com');       // Region: GBR
            approvedDownloadUrls.add('crm12.dynamics.com');       // Region: FRA
            approvedDownloadUrls.add('crm14.dynamics.com');       // Region: ZAF
            approvedDownloadUrls.add('crm15.dynamics.com');       // Region: UAE
            approvedDownloadUrls.add('crm16.dynamics.com');       // Region: GER
            approvedDownloadUrls.add('crm17.dynamics.com');       // Region: CHE
        }

        return IFrameControl::approvedDownloadUrls;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowDownload</Name>
				<Source><![CDATA[
    private void setAllowDownload()
    {
        System.Uri webHostUri;
        boolean canDownload = false;
        if (System.Uri::TryCreate(Url.parmValue(), System.UriKind::Absolute, byref webHostUri))
        {
            // Remove environment subdomain from crm urls to match again approved urls
            var matchUrl = System.Text.RegularExpressions.Regex::Match(webHostUri.Host, environmentSubDomainRemoveRegex);
            canDownload = IFrameControl::getApprovedDownloadUrls().in(matchUrl.Value);
        }

        if (AllowDownload.parmValue() != canDownload)
        {
            AllowDownload.parmValue(canDownload);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>