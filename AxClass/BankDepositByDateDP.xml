<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDepositByDateDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankDepositByDateDP</c> class handles the business logic for the <c>BankDepositByDate</c>
///    report.
/// </summary>
[SRSReportQueryAttribute(querystr(BankDepositByDate))]
public class BankDepositByDateDP extends SRSReportDataProviderBase
{
    CustAccount custAccount;
    CustName custName;
    PaymReference paymReference;
    CurrencyCode currencyCode;
    AmountCur amountCur;
    BankDepositNum depositNum;
    TransDate transDatePrev;
    AmountCur amountPrDate;
    BankAccountTable bankAccountTable;
    BankAccountTrans bankAccountTrans;
    BankDeposit bankDeposit;
    BankDepositByDateTmp bankDepositByDateTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankDepositByDateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>BankDepositByDateTmp</c> temporary table to SSRS report.
    /// </summary>
    /// <returns>
    ///    The <c>BankDepositByDateTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(BankDepositByDateTmp))]
    public BankDepositByDateTmp getBankDepositByDateTmp()
    {
        select bankDepositByDateTmp;
        return bankDepositByDateTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankDepositByDateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the <c>BankDepositByDateTmp</c> temporary table.
    /// </summary>
    private void insertBankDepositByDateTmp()
    {
        bankDepositByDateTmp.BankAccountID = bankAccountTable.AccountID;
        bankDepositByDateTmp.BankAccountName = bankAccountTable.Name;
        bankDepositByDateTmp.TransDate = bankAccountTrans.TransDate;
        bankDepositByDateTmp.CustAccount = custAccount;
        bankDepositByDateTmp.CustName = CustTable::find(custAccount).name();
        bankDepositByDateTmp.PaymReference = paymReference;
        bankDepositByDateTmp.DepositNum = depositNum;
        bankDepositByDateTmp.CurrencyCode = currencyCode;
        bankDepositByDateTmp.AmountCur = amountCur;
        bankDepositByDateTmp.TransDate_Total = transDatePrev;
        bankDepositByDateTmp.AmountCur_Total = amountPrDate;
        bankDepositByDateTmp.Cancel = bankAccountTrans.Cancel;
        bankDepositByDateTmp.BankDeposit_Date = bankDeposit.TransDate;

        bankDepositByDateTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic that is used to populate a temporary table.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;
        int bankAccountCounter;
        str bankAccountId;
        SetEnumerator enumerator;
        Set bankAccounts = new Set(types::String);
        queryRun = new QueryRun(this.parmQuery());
        while (queryRun.next())
        {
            bankAccountTrans = queryRun.get(tablenum(BankAccountTrans));
            bankDeposit = queryRun.get(tablenum(BankDeposit));
            bankAccountTable  = queryRun.get(tablenum(BankAccountTable));
            if (bankAccountTrans.DepositNum
                || (bankAccountTrans.AmountCur > 0 && !bankAccountTrans.ChequeNum)
                || (bankAccountTrans.AmountCur < 0 && bankAccountTrans.Cancel)
                || bankAccountTrans.isRelatedCustomerPaymentJournal())
            {
                if (bankAccountId != bankAccountTable.AccountID)
                {
                    bankAccountId = bankAccountTable.AccountID;
                    bankAccountCounter = 1;
                }
                else
                {
                    bankAccountCounter++;
                }

                if (bankAccountCounter == 2)
                {
                    bankAccounts.add(bankAccountId);
                }

                if (bankAccountTrans.DepositNum && !bankAccountTrans.Cancel)
                {
                    paymReference = bankDeposit.PaymReference;
                    currencyCode = bankDeposit.CurrencyCode;
                    amountCur = bankDeposit.AmountCur;
                    depositNum = bankDeposit.DepositNum;
                    custAccount = bankDeposit.CustAccount;
                    this.insertBankDepositByDateTmp();
                }
                else
                {
                    if (SysReportRun::changed(queryRun,tablenum(BankAccountTrans)))
                    {
                        paymReference = bankAccountTrans.PaymReference;
                        currencyCode = bankAccountTrans.CurrencyCode;
                        amountCur = bankAccountTrans.AmountCur;
                        depositNum = bankAccountTrans.DepositNum;
                        custAccount = bankAccountTrans.custAccount();
                        this.insertBankDepositByDateTmp();
                    }
                }
            }
        }
        enumerator = bankAccounts.getEnumerator();
        while (enumerator.moveNext())
        {
            while select forupdate bankDepositByDateTmp where bankDepositByDateTmp.BankAccountID == enumerator.current()
            {
                bankDepositByDateTmp.RowCounter = 1;
                bankDepositByDateTmp.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>