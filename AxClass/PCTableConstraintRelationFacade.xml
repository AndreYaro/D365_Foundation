<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCTableConstraintRelationFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCTableConstraintRelationFacade</c> class is a facade for table constraint relations and
/// their references to column and attribute paths.
/// </summary>
class PCTableConstraintRelationFacade
{
    RefRecId tableConstraintRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getColumnAssignments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a map of all constraint relations for the current table constraint and the paths to their attributes.
    /// </summary>
    /// <returns>
    /// A map of all constraint relations for the current table constraint and the paths to their attributes.
    /// </returns>
    public Map getColumnAssignments()
    {
        return Map::create(PCTableConstraintRelationFacade::getColumnAssignmentsServer(tableConstraintRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConstraintRelationFromColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a constraint relation record ID from a column definition record ID.
    /// </summary>
    /// <param name="_columnDefinitionRecId">
    /// The column definition record ID.
    /// </param>
    /// <returns>
    /// A constraint relation record ID.
    /// </returns>
    public PCTableConstraintColumnCatAttrRecId getConstraintRelationFromColumn(PCTableConstraintColumnDefinitionRecId _columnDefinitionRecId)
    {
        return PCTableConstraintColumnCategoryAttribute::findByTableConstraintColumnDefinition(tableConstraintRecId, _columnDefinitionRecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the column selected in a constraint relation.
    /// </summary>
    /// <param name="_constraintRelationRecId">
    /// The constraint relation record ID.
    /// </param>
    /// <returns>
    /// The column selected in a constraint relation.
    /// </returns>
    public PCTableConstraintColumnDefinitionRecId getSelectedColumn(PCTableConstraintColumnCatAttrRecId _constraintRelationRecId)
    {
        return PCTableConstraintColumnCategoryAttribute::find(_constraintRelationRecId).TableConstraintColumnDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableConstraintRecId</Name>
				<Source><![CDATA[
        public RecId parmTableConstraintRecId(RecId _tableConstraintRecId = tableConstraintRecId)
    {
        tableConstraintRecId = _tableConstraintRecId;

        return tableConstraintRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveColumnSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves a column selection as a constraint relation which points to an attribute on a sub-component
    /// through intermediate sub-components.
    /// </summary>
    /// <param name="_path">
    /// The path of a sub-component attribute.
    /// </param>
    /// <param name="_columnDefinitionRecId">
    /// The column definition which should be assigned to the attribute.
    /// </param>
    /// <param name="_existingConstraintRelationRecId">
    /// The record ID of an existing constraint relation which should be updated or deleted.
    /// </param>
    /// <returns>
    /// The new or updated constraint relation.
    /// </returns>
    /// <remarks>
    /// Passing in 0 as the record ID for the column will delete an existing table constraint relation.
    /// </remarks>
    public PCTableConstraintColumnCategoryAttribute saveColumnSelection(List _path, PCTableConstraintColumnDefinitionRecId _columnDefinitionRecId, PCTableConstraintColumnCatAttrRecId _existingConstraintRelationRecId)
    {
        return PCTableConstraintRelationFacade::saveColumnSelectionServer(tableConstraintRecId, _path.pack(), _columnDefinitionRecId, _existingConstraintRelationRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a column assignment.
    /// </summary>
    /// <param name="_path">
    /// The path to the attribute to assign the column to.
    /// </param>
    /// <param name="_constraintRelationRecId">
    /// The record ID for the constraint relation which shall be assigned the column; will be 0 for a new constraint relation.
    /// </param>
    /// <param name="_columnDefinitionRecId">
    /// The column to assign to the attribute.
    /// </param>
    /// <param name="_categoryAttribute">
    /// The selected category attribute.
    /// </param>
    /// <returns>
    /// true if the assignment is valid; otherwise, false.
    /// </returns>
    public boolean validate(List _path, PCTableConstraintColumnCatAttrRecId _constraintRelationRecId, PCTableConstraintColumnDefinitionRecId _columnDefinitionRecId, EcoResCategoryAttribute _categoryAttribute)
    {
        return this.validateAttributeType(_categoryAttribute, _columnDefinitionRecId)
            && this.validateColumnAssignment(_constraintRelationRecId, _columnDefinitionRecId)
            && this.validateDBTableConstraintAttribute(PCAttributePathFacade::getLastSubComponent(_path), _columnDefinitionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the attribute type of the attribute and the column definition matches.
    /// </summary>
    /// <param name="_categoryAttribute">
    /// The component attribute.
    /// </param>
    /// <param name="_columnDefinitionRecId">
    /// The column definition record ID.
    /// </param>
    /// <returns>
    /// true if the attribute type of the attribute and the column definition matches; otherwise, false.
    /// </returns>
    protected boolean validateAttributeType(EcoResCategoryAttribute _categoryAttribute, PCTableConstraintColumnDefinitionRecId _columnDefinitionRecId)
    {
        boolean ret = true;

        if (_columnDefinitionRecId
            && EcoResAttribute::find(_categoryAttribute.Attribute).AttributeType != PCTableConstraintColumnDefinition::find(_columnDefinitionRecId).AttributeType)
        {
            ret = checkFailed("@SYS4000180");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateColumnAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a column is not assigned to multiple attributes in a table constraint.
    /// </summary>
    /// <param name="_constraintRelationRecId">
    /// The record ID for the constraint relation which shall be assigned the column; will be <c>0</c> for
    /// a new constraint relation.
    /// </param>
    /// <param name="_columnDefinitionRecId">
    /// The column record ID.
    /// </param>
    /// <returns>
    /// true if the assignment is valid; otherwise, false.
    /// </returns>
    protected boolean validateColumnAssignment(PCTableConstraintColumnCatAttrRecId _constraintRelationRecId, PCTableConstraintColumnDefinitionRecId _columnDefinitionRecId)
    {
        PCTableConstraintColumnCategoryAttribute    existingConstraintRelation;
        boolean                                     ret = true;

        existingConstraintRelation = PCTableConstraintColumnCategoryAttribute::findByTableConstraintColumnDefinition(tableConstraintRecId, _columnDefinitionRecId);

        if (existingConstraintRelation.RecId
            && existingConstraintRelation.RecId != _constraintRelationRecId)
        {
            ret = checkFailed("@GLS180405");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDBTableConstraintAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether assigning a column to an attribute of a sub-component will not cause a system
    /// defined table constraint to reference an attribute on a sub-component which is used multiple times
    /// on the same level of a model.
    /// </summary>
    /// <param name="_subComponentWithAttribute">
    /// The sub-component that has the attribute of a constraint relation.
    /// </param>
    /// <param name="_columnDefinitionRecId">
    /// The column to assign to the attribute.
    /// </param>
    /// <returns>
    /// true if the assignment is valid; otherwise, false.
    /// </returns>
    protected boolean validateDBTableConstraintAttribute(PCSubComponent _subComponentWithAttribute, PCTableConstraintColumnDefinitionRecId _columnDefinitionRecId)
    {
        boolean ret = true;

        // If the relation is to an attribute on a subcomponent
        if (_subComponentWithAttribute.RecId)
        {
            // and it is a system defined table constraint
            if (PCTableConstraintColumnDefinition::find(_columnDefinitionRecId) is PCTableConstraintDatabaseColumnDef)
            {
                // then the same component cannot be present multiple times on the same level in the tree.
                // The OML will only be generated once for the subcomponent and the constraint will result in different domains for the attributes which is invalid.
                if ((select firstonly RecId from pcSubComponent
                    where pcSubComponent.ChildComponentClass == _subComponentWithAttribute.ChildComponentClass
                        && pcSubComponent.ParentComponentClass == _subComponentWithAttribute.ParentComponentClass
                        && pcSubComponent.RecId != _subComponentWithAttribute.RecId).RecId != 0)
                {
                    ret = checkFailed("@GLS180406");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCTableConstraintRelationFacade construct()
    {
        return new PCTableConstraintRelationFacade();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnAssignmentsServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a packed map of all constraint relations for the current table constraint and the paths to their attributes.
    /// </summary>
    /// <param name="_tableConstraintRecId">
    /// The table constraint record ID.
    /// </param>
    /// <returns>
    /// A packed map of all constraint relations for the current table constraint and the paths to their attributes.
    /// </returns>
    protected static container getColumnAssignmentsServer(RefRecId _tableConstraintRecId)
    {
        PCTableConstraintColumnCategoryAttribute    constraintRelation;
        Map                                         map = new Map(Types::Record, Types::Class);

        while select constraintRelation
            where constraintRelation.TableConstraint == _tableConstraintRecId
        {
            map.insert(constraintRelation, PCAttributePathFacade::getPath(constraintRelation));
        }

        return map.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDBTableConstraintRelationSubComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table constraint relations which reference an attribute on the component in the
    /// context of the path.
    /// </summary>
    /// <param name="_component">
    /// The component to get table constraint relations for.
    /// </param>
    /// <param name="_path">
    /// The path which gives the context.
    /// </param>
    /// <returns>
    /// A map from the <c>EcoResCategoryAttribute</c> records IDs to the
    /// <c>PCTableConstraintColumnCategoryAttribute</c> records.
    /// </returns>
    public static Map getDBTableConstraintRelationSubComponent(PCClass _component, StackBase _path)
    {
        Map                                         tableConstraintRelationMap = new Map(Types::Int64, Types::Record);
        PCTableConstraintColumnCategoryAttribute    tableConstraintColumnCategoryAttribute;
        EcoResCategoryAttribute                     categoryAttribute;
        PCTableConstraintDatabaseColumnDef          tableConstraintDatabaseColumnDef;

        while select tableConstraintColumnCategoryAttribute
            join RecId from categoryAttribute
            where categoryAttribute.RecId       == tableConstraintColumnCategoryAttribute.CategoryAttribute
            &&    categoryAttribute.Category    == _component.RecId
                join RecId from tableConstraintDatabaseColumnDef
                where tableConstraintDatabaseColumnDef.RecId == tableConstraintColumnCategoryAttribute.TableConstraintColumnDefinition
        {
            // if the table constraint relation is for the current path in the model, then it should be added.
            if (PCAttributePathFacade::pathIsSuffixPathRecId(_path, tableConstraintColumnCategoryAttribute.SubComponentPath))
            {
                tableConstraintRelationMap.insert(categoryAttribute.RecId, tableConstraintColumnCategoryAttribute);
            }
        }

        return tableConstraintRelationMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveColumnSelectionServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves a column selection as a constraint relation which points to an attribute on a sub-component
    /// through intermediate sub-components.
    /// </summary>
    /// <param name="_tableConstraintRecId">
    /// The table constraint record ID.
    /// </param>
    /// <param name="_packedPath">
    /// The packed path of a sub-component attribute.
    /// </param>
    /// <param name="_columnDefinitionRecId">
    /// The column definition which should be assigned to the attribute.
    /// </param>
    /// <param name="_existingConstraintRelationRecId">
    /// The record ID of an existing constraint relation which should be updated or deleted.
    /// </param>
    /// <returns>
    /// The new or updated constraint relation.
    /// </returns>
    /// <remarks>
    /// Passing in <c>0</c> as the record ID for the column will delete an existing table constraint
    /// relation.
    /// </remarks>
    protected static PCTableConstraintColumnCategoryAttribute saveColumnSelectionServer(RefRecId _tableConstraintRecId, container _packedPath, PCTableConstraintColumnDefinitionRecId _columnDefinitionRecId, PCTableConstraintColumnCatAttrRecId _existingConstraintRelationRecId)
    {
        PCTableConstraintColumnCategoryAttribute    constraintRelation;
        PCTableConstraintColumnCatAttrRecId         newConstraintRelationRecId;

        ttsbegin;

        if (!_columnDefinitionRecId)
        {
            // Delete existing assignment if any
            if (_existingConstraintRelationRecId)
            {
                PCTableConstraintColumnCategoryAttribute::find(_existingConstraintRelationRecId, true).delete();
            }
        }
        else
        {
            // Reuse old path - an existing constraintRelation should always point to the same path.
            if (_existingConstraintRelationRecId)
            {
                newConstraintRelationRecId  = _existingConstraintRelationRecId;
                constraintRelation          = PCTableConstraintColumnCategoryAttribute::find(newConstraintRelationRecId, true);
            }
            else
            {
                constraintRelation.TableConstraint = _tableConstraintRecId;
                PCAttributePathFacade::savePackedPath(constraintRelation, _packedPath);
            }

            constraintRelation.TableConstraintColumnDefinition = _columnDefinitionRecId;

            constraintRelation.write();
        }
        ttscommit;

        return constraintRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDatabaseTableConstraints</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sub-componene is valid.
    /// </summary>
    /// <param name="_subComponentRecId">
    /// The sub-component record ID which is created or modified.
    /// </param>
    /// <param name="_parentComponent">
    /// The parent of the sub-component.
    /// </param>
    /// <param name="_childComponentRecId">
    /// The record ID of the component the sub-component will reference.
    /// </param>
    /// <returns>
    /// true if the sub-component is valid; otherwise, false.
    /// </returns>
    public static boolean validateDatabaseTableConstraints(PCSubComponentRecId _subComponentRecId, PCClassRecId _parentComponent, PCClassRecId _childComponentRecId)
    {
        PCTableConstraintColumnCategoryAttribute    constraintRelation;
        PCTableConstraintDatabaseColumnDef          systemDefinedColumnDefinition;
        EcoResCategoryAttribute                     categoryAttribute;

        boolean ret = true;

        if (_childComponentRecId)
        {
            // If a sub-component is used more than once by the same parent
            if ((select firstonly RecId from pcSubComponent
                where pcSubComponent.RecId != _subComponentRecId
                    && pcSubComponent.ParentComponentClass == _parentComponent
                    && pcSubComponent.ChildComponentClass == _childComponentRecId).RecId != 0)
            {
                // Then a system defined table constraint column cannot refernece an attribute on either of those sub-components
                select firstonly RecId from constraintRelation
                    exists join systemDefinedColumnDefinition
                        where systemDefinedColumnDefinition.RecId == constraintRelation.TableConstraintColumnDefinition
                    exists join categoryAttribute
                        where categoryAttribute.Category == _childComponentRecId
                            && categoryAttribute.RecId == constraintRelation.CategoryAttribute;
                if (constraintRelation.RecId)
                {
                    ret = checkFailed("@GLS180407");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>