<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayPostalTransferList</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayPostalTransferList extends XMLExcelReport_RU implements BatchRetryable
{
    DialogField             fieldStartPeriod, fieldEndPeriod, fieldResponsibleEmployee;
    ReportPeriod_RU         m_StartPeriod, m_EndPeriod;
    RHRMEmplId              m_ResponsibleEmplId;
    Query                   query;
    QueryRun                queryRun;
    RNumDateInWordConverter converter;

    Counter                 transfersCount;
    RPayAmount              transferSum, transferCharge, totalSum;
    RPayAmount              recieverTransferSum, recieverTransferCharge;
    Name                    name;
    Addressing              address;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        m_StartPeriod,
        m_EndPeriod,
        m_ResponsibleEmplId
    #ENDMACRO

    #define.FileName('Postal transfer list')

    #define.Header('Header')
    #define.Body('Body')
    #define.Footer('Footer')
    #define.PageWidth(6)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return 12.75;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        converter = RNumDateInWordConverter::construct(infolog.language());
        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #PageWidth);
        this.execute(#Header);
        this.fillDocument();
        this.execute(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();

        dialog.addGroup("@RUP937");
        fieldStartPeriod = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@SYS4083");
        fieldEndPeriod = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@SYS5418");
        fieldResponsibleEmployee = dialog.addField(extendedTypeStr(RHRMEmplId), "@GLS106047");

        fieldStartPeriod.value(m_StartPeriod ? m_StartPeriod : RPayParameters::payPeriod());
        fieldEndPeriod.value(m_EndPeriod ? m_EndPeriod : RPayParameters::payPeriod());
        fieldResponsibleEmployee.value(m_ResponsibleEmplId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + curUserId() + '_' + strRem(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        this.insertValueToSection('RecNum', transfersCount);
        this.insertValueToSection('FIO', name);
        this.insertValueToSection('RecAddress', address);
        this.insertValueToSection('TransAmount', recieverTransferSum);
        this.insertValueToSection('PostCharge', recieverTransferCharge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Header:
                this.fillHeader();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Footer:
                this.fillFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    private void fillDocument()
    {
        RPayEmplStandardDeductionTable      emplDeductionTable;
        RPayTrans                           payTrans;
        str                                 receiver, prevReceiver = '';
        RPayStandardDeductionRecipientType  oldRecipientType = 0;
        CustTable                           custTable;
        RHRMEmplTable                       emplTable;
        VendTable                           vendTable;
        RPaySequence                        seqAlimony, seqPostalTransfer;

        void handleState()
        {
            switch (oldRecipientType)
            {
                case RPayStandardDeductionRecipientType::Cust:
                    custTable = CustTable::find(prevReceiver);
                    name      = custTable.name();
                    address   = custTable.address();
                    break;

                case RPayStandardDeductionRecipientType::Vend:
                    vendTable = VendTable::find(prevReceiver);
                    name      = vendTable.name();
                    address   = vendTable.postalAddress().Address;
                    break;

                default :
                    emplTable = RHRMEmplTable::find(prevReceiver);
                    name      = emplTable.name();
                    address   = emplTable.personTable().primaryAddress();
                    break;
            }

            if (recieverTransferSum >= 0)
            {
                transfersCount++;

                transferSum    += recieverTransferSum;
                transferCharge += recieverTransferCharge;
                this.execute(#Body);
            }
            else
            {
                info(strFmt("@RUP6218", recieverTransferSum, recieverTransferCharge, oldRecipientType, name));
            }
        }

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(RPayEmplStandardDeductionTable)))
            {
                emplDeductionTable = queryRun.get(tableNum(RPayEmplStandardDeductionTable));
                seqAlimony         = emplDeductionTable.PaySequence;
                seqPostalTransfer  = emplDeductionTable.AlimonyPostSequence;

                receiver = emplDeductionTable.Recipient;
                if (prevReceiver != receiver || emplDeductionTable.RecipientType != oldRecipientType)
                {
                    if (prevReceiver && recieverTransferSum)
                    {
                        handleState();
                    }

                    recieverTransferSum = 0;
                    recieverTransferCharge = 0;

                    prevReceiver     = receiver;
                    oldRecipientType = emplDeductionTable.RecipientType;
                }
            }

            payTrans = queryRun.get(tableNum(RPayTrans));

            switch (payTrans.Scanning)
            {
                case seqAlimony:
                    recieverTransferSum += -payTrans.Amount;
                    break;

                case seqPostalTransfer:
                    recieverTransferCharge += -payTrans.Amount;
                    break;
            }
        }

        if (prevReceiver && recieverTransferSum)
        {
            handleState();
        }

        totalSum = transferSum + transferCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    private void fillFooter()
    {
        this.insertValueToSection('TransfersCount', transfersCount);
        this.insertValueToSection('TransfersCountInWords', '(' + converter.numeralsToTxt(transfersCount) + ')');

        this.insertValueToSection('TransferSum1', transferSum);
        this.insertValueToSection('TransferSum', transferSum);
        this.insertValueToSection('TransferSumInWords', converter.numeralsToCurrency(transferSum, CompanyInfoHelper::standardCurrency()));

        this.insertValueToSection('TransferCharge1', transferCharge);
        this.insertValueToSection('TransferCharge', transferCharge);
        this.insertValueToSection('TransferChargeInWords', converter.numeralsToCurrency(transferCharge, CompanyInfoHelper::standardCurrency()));

        this.insertValueToSection('TotalSum', totalSum);
        this.insertValueToSection('TotalSumInWords', converter.numeralsToCurrency(totalSum, CompanyInfoHelper::standardCurrency()));

        this.insertValueToSection('ResponsibleName', RHRMEmplTable::find(m_ResponsibleEmplId).personTable().fio());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    private void fillHeader()
    {
        CompanyInfo                         companyInfo = CompanyInfo::find();

        this.insertValueToSection('CompanyName',    companyInfo.Name);
        this.insertValueToSection('CompanyAddress', companyInfo.postalAddress().Address);
        this.insertValueToSection('CompanyPhone',   companyInfo.phone());
        this.insertValueToSection('Period', strFmt(new Label(infolog.language()).extractString(literalStr("@GLS111025")),
                                                     strLwr(converter.date2strMonth(m_StartPeriod)),
                                                     int2str(year(m_StartPeriod)),
                                                     strLwr(mthName(mthOfYr(m_EndPeriod))),
                                                     int2str(year(m_EndPeriod))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (! fieldStartPeriod.value())
            {
                return checkFailed("@RUP881");
            }

            if (! fieldEndPeriod.value())
            {
                return checkFailed("@RUP882");
            }

            if (fieldStartPeriod.value() > fieldEndPeriod.value())
            {
                return checkFailed("@SYS16982");
            }

            m_StartPeriod = endmth(prevMth(fieldStartPeriod.value())) + 1;
            m_EndPeriod = endmth(fieldEndPeriod.value());
            m_ResponsibleEmplId = fieldResponsibleEmployee.value();
            this.updateQuery();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Header);
        this.addSection(#Body);
        this.addSection(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        QueryBuildRange             range;
        QueryBuildDataSource        dataSource;

        super();

        query = new Query("@RUP951");

        dataSource = query.addDataSource(tableNum(RPayStandardDeductionTable));
        range      = dataSource.addRange(fieldNum(RPayStandardDeductionTable,DeductionType));
        range.value(queryValue(RPayStandardDeductionType::Alimony));
        range.status(RangeStatus::Hidden);

        dataSource = dataSource.addDataSource(tableNum(RPayEmplStandardDeductionTable));
        dataSource.addSortField(fieldNum(RPayEmplStandardDeductionTable, Recipient),SortOrder::Ascending);
        dataSource.orderMode(OrderMode::OrderBy);
        dataSource.joinMode(JoinMode::InnerJoin);
        dataSource.fetchMode(1);
        dataSource.relations(true);
        range = dataSource.addRange(fieldNum(RPayEmplStandardDeductionTable,AlimonyPaymentType));
        range.value(queryValue(RPayAlimPaymentType::Post));
        range.status(RangeStatus::Hidden);

        dataSource = dataSource.addDataSource(tableNum(RPayTrans));
        dataSource.orderMode(OrderMode::OrderBy);
        dataSource.joinMode(JoinMode::InnerJoin);
        dataSource.fetchMode(1);
        dataSource.addLink(fieldNum(RPayEmplStandardDeductionTable,RecId),fieldNum(RPayTrans,SourceRecId));
        dataSource.addLink(fieldNum(RPayEmplStandardDeductionTable,TableId),fieldNum(RPayTrans,SourceTableId));
        range = dataSource.addRange(fieldNum(RPayTrans,PayPeriod));
        range.status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    // can not be run on server because displays ms office report
    public boolean runsImpersonated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayPostalTransferList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        return SysQuery::countTotal(this.queryRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        QueryBuildDataSource    dataSource;

        dataSource = queryRun.query().dataSourceTable(tableNum(RPayTrans));
        dataSource.findRange(fieldNum(RPayTrans,PayPeriod)).value(SysQuery::range(m_StartPeriod,m_EndPeriod));
        dataSource = queryRun.query().dataSourceTable(tableNum(RPayEmplStandardDeductionTable));
        dataSource.sortClear();
        dataSource.addSortField(fieldNum(RPayEmplStandardDeductionTable,Recipient),SortOrder::Ascending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP951";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayPostalTransferList postalTransferList = new RPayPostalTransferList();

        if (postalTransferList.prompt())
        {
            postalTransferList.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>