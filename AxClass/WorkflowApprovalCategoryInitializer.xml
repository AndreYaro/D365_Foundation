<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkflowApprovalCategoryInitializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class WorkflowApprovalCategoryInitializer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approvalCategoryTableId</Name>
				<Source><![CDATA[
    public abstract TableId approvalCategoryTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvalCategorySourceTableIds</Name>
				<Source><![CDATA[
    public List approvalCategorySourceTableIds()
    {
        List approvalSourceTableIds = new List(Types::Integer);
        approvalSourceTableIds.addEnd(this.approvalCategoryTableId());

        return approvalSourceTableIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvalCategoryTableName</Name>
				<Source><![CDATA[
    public TableName approvalCategoryTableName()
    {
        return tableId2Name(this.approvalCategoryTableId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    public boolean isEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalApprovalItemCount</Name>
				<Source><![CDATA[
    public int calculateTotalApprovalItemCount()
    {
        WorkflowWorkItemTable workItemTable;

        SysDaQueryObject query = WorkflowApprovalHelper::buildQueryGetApprovalCount(workItemTable, false, this.approvalCategorySourceTableIds());
        SysDaSearchObject searchObject = new SysDaSearchObject(query);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        searchStatement.findNext(searchObject);

        return workItemTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePendingApprovalItemCount</Name>
				<Source><![CDATA[
    public int calculatePendingApprovalItemCount()
    {
        WorkflowWorkItemTable workItemTable;

        SysDaQueryObject query = WorkflowApprovalHelper::buildQueryGetApprovalCount(workItemTable, true, this.approvalCategorySourceTableIds());
        SysDaSearchObject searchObject = new SysDaSearchObject(query);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        searchStatement.findNext(searchObject);

        return workItemTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitializerInstances</Name>
				<Source><![CDATA[
    public static Map getInitializerInstances()
    {
        SysGlobalCache cache = classFactory.globalCache();
        const str cacheScope = classStr(WorkflowApprovalCategoryInitializer);
        const str cacheKey = 'InstancesMap';

        if (cache.isSet(cacheScope, cacheKey))
        {
            return cache.get(cacheScope, cacheKey);
        }
        else
        {
            Map categoryMap = WorkflowApprovalCategoryInitializer::createInitializerInstances();
            cache.set(cacheScope, cacheKey, categoryMap);
            return categoryMap;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInitializerInstances</Name>
				<Source><![CDATA[
    private static Map createInitializerInstances()
    {
        List categoryList = SysExtensionAppClassFactory::getClassInstanceListFromSysAttribute(
                                                            classStr(WorkflowApprovalCategoryInitializer),
                                                            new WorkflowApprovalCategoryDiscoveryFactoryAttribute());
        Map initializerInstancesMap = new Map(Types::Integer, Types::Class);
        ListEnumerator enumerator = categoryList.getEnumerator();
        while (enumerator.moveNext())
        {
            WorkflowApprovalCategoryInitializer initializer = enumerator.current();
            if (initializer.isEnabled())
            {
                initializerInstancesMap.add(initializer.approvalCategoryTableId(), initializer);
            }
        }

        return initializerInstancesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>regenerateApprovalCategories</Name>
				<Source><![CDATA[
    private static void regenerateApprovalCategories()
    {
        WorkflowApprovalCategoryTable approvalCategoryTable;
        WorkflowApprovalCategoryInitializer initializer;
        RecordInsertList list = new RecordInsertlist(tableNum(WorkflowApprovalCategoryTable));

        Map initializerInstancesMap = WorkflowApprovalCategoryInitializer::getInitializerInstances();
        MapEnumerator enumerator = initializerInstancesMap.getEnumerator();

        while (enumerator.moveNext())
        {
            approvalCategoryTable.RefTableId = enumerator.currentKey();

            list.add(approvalCategoryTable);
        }

        ttsbegin;

        delete_from approvalCategoryTable;

        list.insertDataBase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRegenerateCategories</Name>
				<Source><![CDATA[
    private static boolean shouldRegenerateCategories()
    {
        boolean ret = false;

        WorkflowApprovalCategoryTable categoryTable;
        select count(RecId) from categoryTable;

        Map initializerInstancesMap = WorkflowApprovalCategoryInitializer::getInitializerInstances();

        if (categoryTable.RecId != initializerInstancesMap.elements())
        {
            ret = true;
        }
        else
        {
            while select RefTableId from categoryTable
            {
                if (!initializerInstancesMap.exists(categoryTable.RefTableId))
                {
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllApprovalSourceTableIds</Name>
				<Source><![CDATA[
    public static List getAllApprovalSourceTableIds()
    {
        List tableIdList = new List(Types::Integer);

        Map initializerInstancesMap = WorkflowApprovalCategoryInitializer::getInitializerInstances();
        MapEnumerator enumerator = initializerInstancesMap.getEnumerator();

        while (enumerator.moveNext())
        {
            tableIdList.appendList(enumerator.currentValue().approvalCategorySourceTableIds());
        }

        return tableIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndRegenerateApprovalCategories</Name>
				<Source><![CDATA[
    public static void checkAndRegenerateApprovalCategories()
    {
        if (WorkflowApprovalCategoryInitializer::shouldRegenerateCategories())
        {
            WorkflowApprovalCategoryInitializer::regenerateApprovalCategories();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WorkflowApprovalCategoryInitializer::checkAndRegenerateApprovalCategories();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>