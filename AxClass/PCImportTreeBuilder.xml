<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportTreeBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PCImportTreeBuilder
{
    Map                             handlers;
    PCImportXmlDocumentHandler      rootHandler;
    XmlDocument                     tree;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHandler</Name>
				<Source><![CDATA[
    protected void addHandler(PCImportModelNodeHandler _handler)
    {
        handlers.insert(_handler.nodeType(), _handler);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHandlerByClass</Name>
				<Source><![CDATA[
    protected void addHandlerByClass(PCImportModelNodeHandler _handler)
    {
        handlers.insert(classId2Name(classIdGet(_handler)), _handler);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildHandlerTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the map of XML node types to the corresponding handlers, obtains the definition of
    /// the handler tree and builds it.
    /// </summary>
    /// <returns>
    /// The root handler of the tree.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If the initialized map and the tree schema don't match each other and on some step the next handler
    /// can not be found.
    /// </exception>
    public PCImportXmlDocumentHandler buildHandlerTree()
    {
        rootHandler = this.getRootHandler();
        tree        = this.getSchema();
        handlers    = new Map(Types::String, Types::Class);

        this.initializeMap();

        this.buildSubtree(tree);

        return rootHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSubtree</Name>
				<Source><![CDATA[
    private void buildSubtree(XmlNode _root)
    {
        PCImportModelNodeHandler    currentHandler  = this.lookupHandler(_root);
        PCImportModelNodeHandler    childHandler;
        XmlNodeList                 children        = _root.childNodes();
        XmlNode                     child           = children.nextNode();

        boolean isPCImportPriceModelSelectionCriteriaFlightEnabled = PCImportPriceModelSelectionCriteriaV2Flight::instance().isEnabled();
        boolean isPCImportModelDefinitionHandlerCrossCompanyUpdateFlightEnabled = PCImportModelDefinitionHandlerCrossCompanyUpdateFlight::instance().isEnabled();

        while (child)
        {
            if (child.nodeType() != XmlNodeType::Text
                // This below is necessary as adding the handler node for PCPriceModelSelectionCriteria (added in PCHandlerTreeDefinition) cannot be flighted, 
                // so if the PCImportPriceModelSelectionCriteriaFlight flight is off, the handler node will cause an error.
                && (!isPCImportModelDefinitionHandlerCrossCompanyUpdateFlightEnabled 
                    || isPCImportPriceModelSelectionCriteriaFlightEnabled 
                    || child.name() != tableStr(PCPriceModelSelectionCriteria)))
            {
                childHandler = this.lookupHandler(child);

                currentHandler.addChild(childHandler.nodeType(), childHandler);
                this.buildSubtree(child);
            }

            child = children.nextNode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootHandler</Name>
				<Source><![CDATA[
    protected PCImportXmlDocumentHandler getRootHandler()
    {
        return PCImportXmlDocumentHandler::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchema</Name>
				<Source><![CDATA[
    protected XmlDocument getSchema()
    {
        Xml schema;

        [schema] = SysResource::getResourceNodeData(SysResource::getResourceNode(resourceStr(PCHandlerTreeDefinition_xml)));

        return XmlDocument::newXml(schema);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMap</Name>
				<Source><![CDATA[
    protected void initializeMap()
    {
        PCImportTemplateSubComponentHandler   templateSubComponentHandler = PCImportTemplateSubComponentHandler::construct();
        PCImportTemplateComponentHandler      templateComponentHandler    = PCImportTemplateComponentHandler::construct();

        PCImportBasePriceHandler              basePriceHandler            = PCImportBasePriceHandler::construct();
        PCImportPriceExpressionRuleHandler    priceExpressionRuleHandler  = PCImportPriceExpressionRuleHandler::construct();

        boolean isPCImportPriceModelSelectionCriteriaFlightEnabled = PCImportPriceModelSelectionCriteriaV2Flight::instance().isEnabled();

        this.addHandler(rootHandler);
        this.addHandler(PCImportModelVersionHandler::construct());

        this.addHandler(PCImportAttributeTypeHandler::construct());
        this.addHandler(PCImportEnumerationValueHandler::construct());
        this.addHandler(PCImportEnumValueTranslationHandler::construct());
        this.addHandler(PCImportIntegerBoundsHandler::construct());
        this.addHandler(PCImportAttributeTypesHandler::construct());

        this.addHandler(PCImportTableCnstrntDfntnsHnder::construct());
        this.addHandler(PCImportQueryHandler::construct());

        if (isPCImportPriceModelSelectionCriteriaFlightEnabled)
        {
            this.addHandler(PCImportCriteriaQueryHandler::construct());
        }

        this.addHandler(PCImportSystemDfndTableCnstrntHndlr::construct());
        this.addHandler(PCImportUserDefinedTblCnstrntHndlr::construct());
        this.addHandler(PCImportUserConstraintCellHandler::construct());
        this.addHandler(PCImportUserConstraintRowHandler::construct());
        this.addHandler(PCImportUserConstraintColumnHandler::construct());
        this.addHandler(PCImportSystemCnstrntColumnHndlr::construct());

        this.addHandler(PCImportComponentsHandler::construct());
        this.addHandler(PCImportComponentHandler::construct());
        this.addHandler(PCImportComponentTranslationHandler::construct());
        this.addHandler(PCImportComponentAttributeHandler::construct());
        this.addHandler(PCImportComponentAttributeHandler::construct());
        this.addHandler(PCImportCmpnntAttrTranslationHandler::construct());
        this.addHandler(PCImportAttributeDefaultValueHandler::construct());
        this.addHandler(PCImportAttributeModifierHandler::construct());
        this.addHandlerByClass(PCImportAttributeConstraintHandler::construct());
        this.addHandler(PCImportSubComponentHandler::construct());
        this.addHandler(PCImportSubCmpnntTranslationHndlr::construct());
        this.addHandler(PCImportSubComponentControlHandler::construct());
        this.addHandlerByClass(PCImportSubCmpntExprCnstrntHndlr::construct());

        this.initTemplateHandler(templateComponentHandler);
        this.initTemplateHandler(templateSubComponentHandler);

        this.addHandlerByClass(templateComponentHandler);
        this.addHandlerByClass(templateSubComponentHandler);

        this.addHandler(PCImportCalculationHandler::construct());
        this.addHandler(PCImportComponentConstraintHandler::construct());
        this.addHandlerByClass(PCImportCmpntExprConstraintHandler::construct());
        this.addHandler(PCImportCalculationHandler::construct());
        this.addHandler(PCImportTableConstraintHandler::construct());
        this.addHandler(PCImportConstraintBindingHandler::construct());

        this.addHandler(PCImportModelDefinitionHandler::construct());
        this.addHandler(PCImportModelTranslationHandler::construct());
        this.addHandler(PCImportConfigurationControlHandler::construct());
        this.addHandler(PCImportComponentControlHandler::construct());

        this.addHandler(PCImportPriceModelHandler::construct());

        if (isPCImportPriceModelSelectionCriteriaFlightEnabled)
        {
            this.addHandler(PCImportPriceModelSelectionCriteriaHandler::construct());
        }

        this.addHandler(PCImportPriceComponentHandler::construct());

        this.initPriceElementHandler(basePriceHandler);
        this.initPriceElementHandler(priceExpressionRuleHandler);

        this.addHandler(basePriceHandler);
        this.addHandler(priceExpressionRuleHandler);

        this.addHandler(PCImportComponentNomenclatureHandler::construct());
        this.addHandler(PCImportConfigurationNomenclatureHandler::construct());
        this.addHandler(PCImportNomenclatureSegmentAttributeValueHandler::construct());
        this.addHandler(PCImportNomenclatureSegmentNumberSequenceHandler::construct());
        this.addHandler(PCImportNomenclatureSegmentTextConstantHandler::construct());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceElementHandler</Name>
				<Source><![CDATA[
    private void initPriceElementHandler(PCImportModelNodeHandler _targetHandler)
    {
        _targetHandler.addChildWithType(PCImportPriceExpressionValueHandler::construct());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTemplateHandler</Name>
				<Source><![CDATA[
    private void initTemplateHandler(PCImportTemplateComponentHandler _targetHandler)
    {
        PCImportRouteOprtnActivityHndlr routeOperationHandler = PCImportRouteOprtnActivityHndlr::construct();

        routeOperationHandler.addChildWithType(PCImportResourceRequirementHandler::construct());
        routeOperationHandler.addChildWithType(PCImportResourceGrpRqrmntHandler::construct());
        routeOperationHandler.addChildWithType(PCImportCapabilityRequirementHandler::construct());
        routeOperationHandler.addChildWithType(PCImportPersonTitleRqrmntHandler::construct());
        routeOperationHandler.addChildWithType(PCImportCourseRequirementHandler::construct());
        routeOperationHandler.addChildWithType(PCImportCertificateRqrmntHandler::construct());
        routeOperationHandler.addChildWithType(PCImportResourceTypeRqrmntHandler::construct());

        _targetHandler.addChildWithType(routeOperationHandler);
        _targetHandler.addChildWithType(PCImportTemplateAttributeHandler::construct());
        _targetHandler.addChildWithType(PCImportTemplateConstantHandler::construct());
        _targetHandler.addChildWithType(PCImportTemplateConstraintHandler::construct());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupHandler</Name>
				<Source><![CDATA[
    private PCImportModelNodeHandler lookupHandler(XmlNode _node)
    {
        str                         name = _node.name();
        PCImportModelNodeHandler    handler;

        if (handlers.exists(name))
        {
            handler = handlers.lookup(name);

            return handler;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCImportTreeBuilder construct()
    {
        return new PCImportTreeBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>