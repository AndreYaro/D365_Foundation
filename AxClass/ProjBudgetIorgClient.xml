<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetIorgClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using Microsoft.Dynamics.DataverseSdk;
using Microsoft.Dynamics.HttpCommunication;
using Microsoft.Dynamics.HttpCommunication.S2SAuthentication;
using Microsoft.Dynamics.DataverseSdk;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm;
using System.IO;
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics365.LocalizationFramework;

 

/// <summary>
/// Iorg client will support execution of Query Expression using the Iorganization service instance that got created as part of new method
/// Constructor uses an API which uses the FnO logged in user uuid to impersonate when making call to Dataverse
/// </summary>
internal class ProjBudgetIorgClient
{
    private SysInstrumentationLogger logger= SysInstrumentationLoggerFactory::CreateLogger('ProjBudgetIorgClient');

    private IOrganizationService organizationService;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor method for the ProjBudgetIorgClient class.
    /// It initializes the OrganizationService for the current user using the "Project Budget Integration" name.
    /// The method handles and logs errors that occur during this process, including .NET CLR errors and
    /// Dataverse API-specific errors, and throws appropriate exceptions.
    /// </summary>
    /// <exception cref="Error">Throws a NotSupportedException if the environment is not linked to the Dataverse.
    /// Throws a general error if the initialization fails for other reasons or if the OrganizationService is null after initialization,
    /// indicating that the impersonation feature might not be enabled in the Power Platform Admin Center (PPAC).</exception>
    public void new()
    {
        using (var context = logger.activityContext('ProjBudgetIorgClient.new', 'ProjBudgetIorgClient.newMetricNameSpace'))
        {
            try
            {
                organizationService = SysDataverseUtility::GetOrganizationServiceForCurrentUser("Project Budget Integration");
            }
            catch (Exception::CLRError)
            {
                var ex = ClrInterop::getLastException() as System.Exception;

                logger.logError(strFmt("Iorganization api failed with error message: %1", ex.message));

                if (ex is System.NotSupportedException)
                {
                    throw Error("@proj:ProjBudgetEnvNotLinkedError");
                }
                else
                {
                    throw Error("@proj:ProjBudgetGenericApiError");
                }

            }
            catch (Exception::Error)
            {
                var ex = ClrInterop::getLastException() as System.Exception;

                logger.logError(strFmt("Iorganization api failed with error message: %1", ex.message));
                throw Error("@proj:ProjBudgetGenericApiError");
            }
            

            if(!organizationService)
            {
                logger.logError("Iorgnization service api returned null, make sure impersonation feature is enabled in PPAC");
                throw Error("@proj:ProjBudgetConsentError");
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the provided QueryExpression against the organization service and retrieves a collection of entities.
    /// This method handles various types of exceptions including System.ServiceModel.FaultException, System.Net.WebException,
    /// System.TimeoutException and others, logging error messages accordingly and throwing appropriate errors.
    /// </summary>
    /// <param name="_queryExpression">A QueryExpression object that defines the conditions for the entities to retrieve.</param>
    /// <returns>A collection of entities that match the conditions defined in the QueryExpression object.</returns>
    /// <exception cref="Error">Throws a variety of different exceptions based on the type of failure encountered when executing the query.</exception>
    private ICollection executeQuery(QueryExpression _queryExpression)
    {
        using (var context = logger.activityContext('executeQuery', 'executeQueryMetricNamespace'))
        {
            ICollection ret = null;
            try
            {
                var entityCollection = organizationService.RetrieveMultiple(_queryExpression);
                ret = entityCollection.Entities;
            }
            catch (Exception::CLRError)
            {
                var ex = ClrInterop::getLastException() as System.Exception;

                logger.logError(strFmt("error while executing the query, error message: %1", ex.message));

                if(ex is System.ServiceModel.FaultException)
                {
                    throw error("@proj:ProjBudgetQueryException");
                }
                else if(ex is System.Net.WebException)
                {
                    throw error("@proj:ProjBudgetQueryException");
                }
                else if(ex is System.TimeoutException)
                {
                    throw error("@proj:ProjBudgetTimeOutException");
                }
                else
                {
                    throw error("@proj:ProjBudgetGenericQueryException");
                }

            }
            catch (Exception::Error)
            {
                var ex = ClrInterop::getLastException() as System.Exception;

                logger.logError(strFmt("error while executing the query, error message: %1", ex.message));
                throw error("@proj:ProjBudgetGenericQueryException");
            }

            return ret;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the input QueryExpression object to ensure it is correctly formed and non-null.
    /// It checks that the QueryExpression, EntityName, and ColumnSet are non-null and that the ColumnSet contains at least one column.
    /// </summary>
    /// <param name="_queryExpression">A QueryExpression object to validate.</param>
    /// <returns>A boolean value representing the validity of the input QueryExpression object. Returns true if the query is valid; false otherwise.</returns>
    public boolean validateQuery(QueryExpression _queryExpression)
    {
        boolean ret = true;

        if(_queryExpression == null)
        {
            ret = checkFailed("@Proj:ProjBudgetNullQueryExpression");
        }

        if(_queryExpression.EntityName == null)
        {
            ret = checkFailed("@Proj:ProjBudgetNullEntity");
        }

        if (_queryExpression.ColumnSet == null || _queryExpression.ColumnSet.Columns.Count == 0)
        {
            ret = checkFailed("@Proj:ProjBudgetNullColumnSet");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubmissionResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a collection of submission results based on the provided query expression.
    /// This method validates the input query expression and then executes it. If the query is invalid,
    /// it logs an error and throws an exception.
    /// </summary>
    /// <param name="_queryExpression">A QueryExpression object that defines the conditions for the submissions to retrieve.</param>
    /// <returns>A collection of Entity results that match the conditions defined in the query expression.</returns>
    /// <exception cref="Error">Throws an error with a message 'ProjBudgetInvalidQuery' if the input query expression is invalid.</exception>
    public ICollection getSubmissionResult(QueryExpression _queryExpression)
    {
        using (var context = logger.activityContext('getSubmissionResult', 'getSubmissionResultMetricNamespace'))
        {
            if (!this.validateQuery(_queryExpression))
            {
                logger.logError(strFmt("Validation on Query Expression with Entity %1 failed", _queryExpression.EntityName));
                throw Error("@proj:ProjBudgetInvalidQuery");
            }

            return this.executeQuery(_queryExpression);
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>