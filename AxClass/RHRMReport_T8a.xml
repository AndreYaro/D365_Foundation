<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHRMReport_T8a</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RHRMReport_T8a extends RHRMReport implements BatchRetryable
{
    RHRMOrderTable           orderTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    public str animationBoxCaption()
    {
        return "@RUP1725";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    public str animationBoxText()
    {
        return "@RUP1822";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    public void initData(Args _args)
    {
        super(_args);
        orderTable = _args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RHRMOrderTrans   orderTrans;
        int              countPass = #Value4;
        RPayHistory      payHistory;

        wordDocument.insertFieldValue(#CI_Name,              CompanyInfo::find().Name);

        wordDocument.insertFieldValue(#CI_CodeOKPO_RU,       CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), orderTable.TransDate));

        wordDocument.insertFieldValue(#OT_OrderNum,          orderTable.OrderNum);

        wordDocument.insertFieldValue(#OT_TransDate,         this.dateInNumber(orderTable.TransDate));

        wordDocument.insertFieldValue(#OTR_title,            OfficialsTable_RU::findDirector().Title);
        wordDocument.insertFieldValue(#OTR_name,             OfficialsTable_RU::findDirector().Name);

        if (orderTable.AttachDocDate)
            wordDocument.insertFieldValue(#PH_attachDocDate, this.dateInWord(orderTable.AttachDocDate));

        wordDocument.insertFieldValue(#PH_attachDocNum,      orderTable.AttachDocNum);

        wordDocument.tableGoToCell(countPass, 1, #Table);

        while select orderTrans
            where orderTrans.OrderTableRecId == orderTable.RecId
        {
            wordDocument.tableGoToCell(countPass, 1);
            wordDocument.tableInsertRowsBelow();

            wordDocument.tableInsertValue(countPass, 1, orderTrans.emplName());

            wordDocument.tableInsertValue(countPass, #Value2, orderTrans.EmplId);

            payHistory = RPayHistory::findLastSignOnMove(orderTrans.EmplId, orderTrans.StartDate, orderTrans.RecId);

            wordDocument.tableInsertValue(countPass, #Value3, payHistory.organizationFull());

            wordDocument.tableInsertValue(countPass, #Value4, this.positionAndCategory(payHistory.titleId(), payHistory.TradeCategory));

            payHistory = RPayHistory::findLastOperation(orderTrans.EmplId,
                                                        RHRMJournalType::Receive,
                                                        orderTrans.StartDate);

            wordDocument.tableInsertValue(countPass, #Value5, this.dateInNumber(payHistory.AttachDocDate));

            wordDocument.tableInsertValue(countPass, #Value6, payHistory.AttachDocNum);

            wordDocument.tableInsertValue(countPass, #Value7, this.dateInNumber(orderTrans.StartDate));

            wordDocument.tableInsertValue(countPass, #Value8, RHRMReasonCode::find(orderTrans.ReasonCodeId, RHRMReasonType::Resign).Description);
            wordDocument.tableInsertValue(countPass, #Value9, this.delimiterN([orderTrans.docArgName(),
                     orderTrans.docArgNumber(), this.dateInNumber(orderTrans.docArgDate())]));
            countPass++;
        }
        wordDocument.tableDeleteRow();
        wordDocument.unlinkFields();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>