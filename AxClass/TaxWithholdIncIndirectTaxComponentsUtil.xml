<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdIncIndirectTaxComponentsUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Tax withhold include indirect tax components utilities.
/// </summary>
class TaxWithholdIncIndirectTaxComponentsUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCacheObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>SysGlobalCache</c> object.
    /// </summary>
    /// <returns><c>SysGlobalCache</c> object.</returns>
    public static server SysGlobalCache getCacheObject()
    {
        SysGlobalCache cache;
        if (classFactory)
        {
            cache = classFactory.globalCache();
        }
        else
        {
            // The classFactory is null in the interpreter when called from IL.
            cache = SysGlobalCache::construct();
        }

        return cache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncludedTaxComponentsContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax components those are included for the TDS or TCS calculation.
    /// </summary>
    /// <param name="_taxWithholdGroupHeadingRecId">
    /// The TaxWithholdGroup attached for the transaction.
    /// </param>
    /// <returns>
    /// Returns tax components those are excluded for the TDS or TCS calculation.
    /// </returns>
    public static container getIncludedTaxComponentsContainer(RefRecId _taxWithholdGroupHeadingRecId)
    {
        container                               taxComponentNameContainer;
        container                               selectedTaxComponentContainer;
        TaxWithholdIncIndirectTaxComponent_IN   taxWithholdIncTaxComponent;
        TaxRuntimeComponent                     taxRuntimeComponent;

        while select TaxRuntimeComponent from taxWithholdIncTaxComponent
            where taxWithholdIncTaxComponent.TaxWithholdGroupHeading == _taxWithholdGroupHeadingRecId
            join Name from taxRuntimeComponent
                where taxRuntimeComponent.RecId == taxWithholdIncTaxComponent.TaxRuntimeComponent
        {
            selectedTaxComponentContainer   += taxWithholdIncTaxComponent.TaxRuntimeComponent;
            taxComponentNameContainer       += taxRuntimeComponent.Name;
        }

        return [selectedTaxComponentContainer, taxComponentNameContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncTaxComponentsForWithholdGroup</Name>
				<Source><![CDATA[
    public static Map getIncTaxComponentsForWithholdGroup(RecId _taxWithholdGroupHeadingRecId)
    {
        container                               result;
        TaxWithholdIncIndirectTaxComponent_IN   taxWithholdIncIndirectTaxComponent;
        TaxRuntimeTaxType                       taxRuntimeTaxType;
        TaxRuntimeComponent                     taxRuntimeComponent;
        Name                                    previousTaxTypeName;

        Map             resultMap;
        SysGlobalCache  cache       = TaxWithholdIncIndirectTaxComponentsUtil::getCacheObject();

        #TaxWithhold_IN

        // Remove setCache inner method when remove TaxWithholdPerfImprove_INFlight
        void setCache()
        {
            while select taxRuntimeTaxType from taxWithholdIncIndirectTaxComponent
                order by taxWithholdIncIndirectTaxComponent.TaxRuntimeTaxType
                    where taxWithholdIncIndirectTaxComponent.TaxWithholdGroupHeading == _taxWithholdGroupHeadingRecId
                        join Name from taxRuntimeTaxType
                            where taxRuntimeTaxType.RecId == taxWithholdIncIndirectTaxComponent.TaxRuntimeTaxType
                        join Name from taxRuntimeComponent
                            where taxRuntimeComponent.RecId == taxWithholdIncIndirectTaxComponent.TaxRuntimeComponent
            {
                if (previousTaxTypeName == '')
                {
                    previousTaxTypeName = taxRuntimeTaxType.Name;
                }

                if (previousTaxTypeName == taxRuntimeTaxType.Name)
                {
                    result += taxRuntimeComponent.Name;
                }
                else
                {
                    resultMap.insert(previousTaxTypeName, result);
                    result = conNull();
                    previousTaxTypeName = taxRuntimeTaxType.Name;
                }
            }

            if (previousTaxTypeName != '')
            {
                resultMap.insert(previousTaxTypeName, result);
            }

            cache.set(
                #TaxWithholdTaxComponentIncluded,
                _taxWithholdGroupHeadingRecId,
                resultMap);
        }

        if (!_taxWithholdGroupHeadingRecId)
        {
            resultMap = new Map(Types::String, Types::Container);
        }
        else
        {
            resultMap = cache.get(
                #TaxWithholdTaxComponentIncluded,
                _taxWithholdGroupHeadingRecId,
                resultMap);

            if (!resultMap)
            {
                resultMap = new Map(Types::String, Types::Container);

                setCache();
            }
        }       

        return resultMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>