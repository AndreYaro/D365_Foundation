<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

/// <summary>
/// The <c>RetailTransactionValidationBase</c> class should be extended to create new validations for RetailTransactionTable.
/// </summary>
public abstract class RetailTransactionValidationBase
{
    CustomerOrderInfo   customerOrderInfo;
    CustAccount         storeDefaultCustomer;
    List                validationErrorTypeList;    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCustomerOrderInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update and return <c>CustomerOrderInfo</c> object (that represents the Retail transaction) to be validated.
    /// </summary>
    /// <param name = "_customerOrderInfo">Retail transaction object representation.</param>
    /// <returns>A <c>CustomerOrderInfo</c> object (that represents the Retail transaction) to be validated.</returns>
    public CustomerOrderInfo parmCustomerOrderInfo(CustomerOrderInfo _customerOrderInfo = customerOrderInfo)
    {
        if (!prmIsDefault(_customerOrderInfo))
        {
            customerOrderInfo = _customerOrderInfo;
        }

        return customerOrderInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStoreDefaultCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update and return the default customer of the store whose transactions are being validated.
    /// </summary>
    /// <param name = "_storeDefaultCustomer">Store default customer.</param>
    /// <returns>The default customer of the store whose transactions are being validated.</returns>
    public CustAccount parmStoreDefaultCustomer(CustAccount _storeDefaultCustomer = storeDefaultCustomer)
    {
        if (!prmIsDefault(_storeDefaultCustomer))
        {
            storeDefaultCustomer = _storeDefaultCustomer;
        }

        return storeDefaultCustomer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidationErrorTypeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update and return the list of validation errors associated to the current transaction.
    /// </summary>
    /// <param name = "_validationErrorTypeList">Validation error type list.</param>
    /// <returns>Validation error type list.</returns>
    public List parmValidationErrorTypeList(List _validationErrorTypeList = validationErrorTypeList)
    {
        if (!prmIsDefault(_validationErrorTypeList))
        {
            validationErrorTypeList = _validationErrorTypeList;
        }

        return validationErrorTypeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValidationErrorForTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert a new validation error for the current transaction.
    /// </summary>
    /// <param name = "_validationType">Validation type.</param>
    /// <param name = "_errorMessage">Error description.</param>
    protected void insertValidationErrorForTransaction(RetailTransactionValidationType _validationType, RetailTransactionValidationErrorMessage _errorMessage)
    {
        this.addNewValidationError([_validationType, _errorMessage, 0]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValidationErrorForTransactionWithLineReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert a new validation error for the current transaction with a reference for a line number.
    /// </summary>
    /// <param name = "_validationType">Validation type.</param>
    /// <param name = "_errorMessage">Error description.</param>
    /// <param name = "_lineNum">Line number associated with the error.</param>
    protected void insertValidationErrorForTransactionWithLineReference(RetailTransactionValidationType _validationType, RetailTransactionValidationErrorMessage _errorMessage, LineNum _lineNum)
    {
        this.addNewValidationError([_validationType, _errorMessage, _lineNum]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewValidationError</Name>
				<Source><![CDATA[
    internal void addNewValidationError(container _validationError)
    {
        if (validationErrorTypeList == null)
        {
            validationErrorTypeList = new List(Types::Container);
        }

        validationErrorTypeList.addEnd(_validationError);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>