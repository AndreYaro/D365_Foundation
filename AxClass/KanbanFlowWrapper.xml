<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFlowWrapper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanFlowWrapper</c> class is a wrapper class around a newly found <c>KanbanFlow</c> object.
/// </summary>
public class KanbanFlowWrapper implements SysPackable
{
    List            kanbanFlowActivityRelationsList;
    KanbanFlow      kanbanFlow;
    LeanKanbanType  kanbanType;
    boolean         multiActivityKanbanFlow;

    ListEnumerator  leRelationsListPlanActivity;
    ListEnumerator  leRelationsListWrapper;

    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a relation to the collection of <c>KanbanFlow</c> relations that is wrapped by the current
    ///    instance.
    /// </summary>
    /// <param name="_leanActivityRelationshipWrapper">
    ///    The relation wrapper object to add to the kanban flow wrapper collection.
    /// </param>
    /// <returns>
    ///    The index in the list of the newly added link.
    /// </returns>
    public int addRelation(LeanActivityRelationshipWrapper _leanActivityRelationshipWrapper)
    {
        // check input parameters
        if (   !_leanActivityRelationshipWrapper
            || !kanbanFlowActivityRelationsList)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        kanbanFlowActivityRelationsList.addEnd(_leanActivityRelationshipWrapper);

        return kanbanFlowActivityRelationsList.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLoadRelations</Name>
				<Source><![CDATA[
    private void checkLoadRelations()
    {
        // if this is an existing KanbanFlow and its links haven't been loaded,
        // then we need to load them so that validation can be done
        if (!kanbanFlowActivityRelationsList.elements())
        {
            this.load();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstLeanActivityRelationshipWrapper</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an enumerator, pointed to the first element of the list of instances of the
    ///    <c>LeanActivityRelationshipWrapper</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>LeanActivityRelationshipWrapper</c> class.
    /// </returns>
    public LeanActivityRelationshipWrapper firstLeanActivityRelationshipWrapper()
    {
        LeanActivityRelationshipWrapper leanActivityRelationshipWrapper;

        this.checkLoadRelations();
        leRelationsListWrapper = kanbanFlowActivityRelationsList.getEnumerator();

        if (leRelationsListWrapper.moveNext())
        {
            leanActivityRelationshipWrapper = leRelationsListWrapper.current();
        }

        return leanActivityRelationshipWrapper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an enumerator for a list of records in the <c>PlanActivity</c> table.
    /// </summary>
    /// <returns>
    ///    The first <c>PlanActivity</c> record.
    /// </returns>
    /// <remarks>
    ///    The first record is not element of the list. It is determined through the <c>KanbanFlow</c>
    ///    record.If no first activity is present there will not be any elements in the list. The only
    ///    activity in this case will be defined on the <c>KanbanFlow</c> record.
    /// </remarks>
    public PlanActivity firstPlanActivity()
    {
        this.checkLoadRelations();
        leRelationsListPlanActivity = kanbanFlowActivityRelationsList.getEnumerator();

        return kanbanFlow.FirstPlanPlanActivity ? kanbanFlow.firstPlanActivity() : kanbanFlow.lastPlanActivity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the state of the object.
    /// </summary>
    protected void init()
    {
        kanbanFlowActivityRelationsList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanFlowWrapper</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the state of the object from an already existing instance.
    /// </summary>
    /// <param name="_kanbanFlowWrapper">
    ///    The <c>KanbanFlowWrapper</c> object to use for initialization.
    /// </param>
    public void initFromKanbanFlowWrapper(KanbanFlowWrapper _kanbanFlowWrapper)
    {
        kanbanFlow.data(_kanbanFlowWrapper.parmKanbanFlow());

        this.init();
        this.refreshMultiActivityState();

        kanbanFlowActivityRelationsList = _kanbanFlowWrapper.relationsList();
        kanbanType                      = _kanbanFlowWrapper.parmKanbanType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFlowDefined</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>KanbanFlow</c> record is already defined or there is a new flow that is
    ///    valid and ready to be saved.
    /// </summary>
    /// <returns>
    ///    true if the record is defined or if it is new and is ready to be saved; otherwise, false.
    /// </returns>
    public boolean isFlowDefined()
    {
        return (   kanbanFlow.RecId
                || this.relationsCount() > 0
                || kanbanFlow.isSingleActivityFlow()
                || kanbanFlow.IsBridge == NoYes::Yes)
                && this.isValidFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiActivityKanbanFlow</Name>
				<Source><![CDATA[
    public boolean isMultiActivityKanbanFlow()
    {
        return multiActivityKanbanFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban flow is valid.
    /// </summary>
    /// <returns>
    ///    true if the flow is valid; otherwise, false.
    /// </returns>
    private boolean isValidFlow()
    {
        // make sure the object's state is fully loaded
        this.checkLoadRelations();

        return LeanProductionFlowTraverser::validateKanbanFlow(this, kanbanType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the <c>KanbanFlowActivityRelationship</c> records from the database.
    /// </summary>
    /// <remarks>
    /// As the object supports lazy loading, the initialization is abstracted in this method.
    /// </remarks>
    private void load()
    {
        KanbanFlowActivityRelationship  kanbanFlowActivityRelationship;

        // validate input parameters
        if (   !kanbanFlow.RecId
            || !kanbanFlow.isMultiActivityFlow())
        {
            return;
        }

        // iterate over all KanbanFlowActivityRelationship records that belong to the KanbanFlow
        while select kanbanFlowActivityRelationship
            order by kanbanFlowActivityRelationship.Sequence
            where kanbanFlowActivityRelationship.KanbanFlow == kanbanFlow.RecId
        {
            this.addRelation(LeanActivityRelationshipWrapper::newKanbanFlowActRelationship(kanbanFlowActivityRelationship));
        }

        // make sure the flow is not invalid
        if (kanbanFlowActivityRelationsList.elements() < 1)
        {
            // Invalid data for KanbanFlow with record Id %1
            throw error(strFmt("@SYS134774", kanbanFlow.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsFinancialTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if financial transactions will be created for the
    /// jobs created by the rule.
    /// </summary>
    /// <returns>
    /// true if financial transactions will be created; otherwise false.
    /// </returns>
    /// <remarks>
    /// True is returned in the following cases:
    /// - the kanban type is Manufacturing OR
    /// - the kanban type is withdrawal => it's single Withdraw activity flow AND
    /// - the flow needs inventory transactions AND
    ///     - the issue and receipt locations are managed by different vendors OR
    ///     - the issue and receipt locations belong to different sites OR
    ///     - the pick and receive atomic activities have different OnHandUpdate values
    /// </remarks>
    public KanbanNeedsFinancialTransactions needsFinancialTransactions()
    {
        return    kanbanType == LeanKanbanType::Manufacturing
               || kanbanFlow.needsFinancialTransactions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether inventory transactions will be created for the jobs that are created by the rule.
    /// </summary>
    /// <returns>
    ///    true if inventory transactions will be created; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    true is returned only when the source or destination are inventory controlled.
    /// </remarks>
    public boolean needsInventoryTransactions()
    {
        boolean         result;

        if (   kanbanFlow.RecId
            || kanbanFlow.isSingleActivityFlow() )
        {
            result = kanbanFlow.needsInventoryTransactions();
        }
        else
        {
            PlanActivity planActivity = this.firstPlanActivity();

            // try to find an activity that belongs to the flow that has an atomic activity
            // of type receive/pick with OnHandUpdate set to true
            while (!result && planActivity.RecId != 0)
            {
                result =    planActivity.onHandUpdate(PlanActivityType::Pick)
                         || planActivity.onHandUpdate(PlanActivityType::Receive);

                planActivity = this.nextPlanActivity();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLeanActivityRelationshipWrapper</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the enumerator to the next instance of the <c>LeanActivityRelationshipWrapper</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>LeanActivityRelationshipWrapper</c> class; otherwise, null.
    /// </returns>
    public LeanActivityRelationshipWrapper nextLeanActivityRelationshipWrapper()
    {
        LeanActivityRelationshipWrapper leanActivityRelationshipWrapper;

        if (!leRelationsListWrapper)
        {
            leanActivityRelationshipWrapper = this.firstLeanActivityRelationshipWrapper();
        }
        else
        {
            if (leRelationsListWrapper.moveNext())
            {
                leanActivityRelationshipWrapper = leRelationsListWrapper.current();
            }
        }

        return leanActivityRelationshipWrapper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the enumerator to the next <c>PlanActivity</c> record.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivity</c> record; otherwise, a blank record.
    /// </returns>
    public PlanActivity nextPlanActivity()
    {
        PlanActivity                    planActivity;

        if (!leRelationsListPlanActivity)
        {
            planActivity = this.firstPlanActivity();
        }
        else
        {
            if (leRelationsListPlanActivity.moveNext())
            {
                LeanActivityRelationshipWrapper leanActivityRelationshipWrapper = leRelationsListPlanActivity.current();
                planActivity = PlanActivity::find(leanActivityRelationshipWrapper.parmDependentActivityRecId());
            }
        }

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onKanbanFlowChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles changes in the <c>KanbanFlow</c> buffer that is wrapped by the instance of this class.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The <c>LeanRuleData</c> object.
    /// </param>
    /// <param name="_multiActivityKanbanFlow">
    ///    A Boolean value that indicates if the kanbban flow consists of multiple activities.
    /// </param>
    /// <remarks>
    ///    This method may display the <c>KanbanFlowSelection</c> form.
    /// </remarks>
    public void onKanbanFlowChanged(
        LeanRuleData _leanRuleData,
        boolean      _multiActivityKanbanFlow = multiActivityKanbanFlow)
    {
        if (!_leanRuleData)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // in case we switch a flow from single to multi activities, we need
        // to reset the last activity
        if (   !(_multiActivityKanbanFlow
            &&   multiActivityKanbanFlow)
            && _multiActivityKanbanFlow)
        {
            KanbanRule kanbanRule = _leanRuleData.parmKanbanRule().replacedRule();

            // in case of replacing rule we need to default to the last activity of
            // the kanban flow, otherwise we just reset it
            if (kanbanRule.RecId)
            {
                kanbanFlow.initFromFirstPlanPlanActivity(0);
                kanbanFlow.initFromLastPlanPlanActivity(kanbanRule.kanbanFlow().LastPlanPlanActivity);
            }
            else
            {
                kanbanFlow.initFromLastPlanPlanActivity(0);
            }
        }

        // in case of single-activity flow, we always need to set the last
        // activity to be the same as the first, because first can be altered
        // from UI
        if (!_multiActivityKanbanFlow)
        {
            kanbanFlow.initFromLastPlanPlanActivity(kanbanFlow.FirstPlanPlanActivity);
        }

        // when an existing KanbanFlow is modified, we have to reset the state
        if (kanbanFlow.RecId)
        {
            kanbanFlow.RecId = 0;
            this.init();
        }

        multiActivityKanbanFlow = _multiActivityKanbanFlow;

        // we don't have to process anything here in case of single activity flow
        if (multiActivityKanbanFlow)
        {
            // if both activities have been filled in
            // then we should check for a kanbanFlow
            if (   kanbanFlow.FirstPlanPlanActivity
                && kanbanFlow.LastPlanPlanActivity)
            {
                KanbanFlowWrapper::showKanbanFlowSelectionForm(_leanRuleData);
            }
            else
            {
                this.reset(false);
            }
        }

        // let the status handle the kanban flow change, eventually initializing
        // some fields
        LeanRuleStatusBase::newLeanRuleData(_leanRuleData).onKanbanFlowChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container                       result = conNull();
        container                       packedKanbanFlowWrapperRelations = conNull();

        // if the flow is untouched or is a single kanban flow, we don't have to
        // serialize the wrapped relations
        boolean shouldSerializeRelations = !(kanbanFlow.RecId || kanbanFlow.isSingleActivityFlow());

        if (shouldSerializeRelations)
        {
            int elementsCount = kanbanFlowActivityRelationsList.elements();
            ListEnumerator eList = kanbanFlowActivityRelationsList.getEnumerator();

            packedKanbanFlowWrapperRelations += elementsCount;

            while (eList.moveNext())
            {
                LeanActivityRelationshipWrapper leanActivityRelationshipWrapper = eList.current();
                packedKanbanFlowWrapperRelations += [leanActivityRelationshipWrapper.pack()];
            }
        }

        result = [#CurrentVersion, kanbanType, kanbanFlow, shouldSerializeRelations, packedKanbanFlowWrapperRelations];

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanFlow</Name>
				<Source><![CDATA[
    public KanbanFlow parmKanbanFlow(KanbanFlow _kanbanFlow = kanbanFlow)
    {
        kanbanFlow = _kanbanFlow;

        return kanbanFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanType</Name>
				<Source><![CDATA[
    public LeanKanbanType parmKanbanType(LeanKanbanType _kanbanType = kanbanType)
    {
        kanbanType = _kanbanType;

        return kanbanType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMultiActivityState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the multi activity Boolean value from the current kanban flow buffer.
    /// </summary>
    protected void refreshMultiActivityState()
    {
        multiActivityKanbanFlow = kanbanFlow.isMultiActivityFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationsCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of links that are currently in the flow wrapper.
    /// </summary>
    /// <returns>
    ///    The number of links that are currently in the flow.
    /// </returns>
    public int relationsCount()
    {
        return this.relationsList().elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationsList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the internal list storage of the wrapper class.
    /// </summary>
    /// <returns>
    ///    A list that contains instances of the <c>LeanActivityRelationshipWrapper</c> class.
    /// </returns>
    public List relationsList()
    {
        this.checkLoadRelations();

        return kanbanFlowActivityRelationsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationsNames2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a string that is used for visual representation of a KanbanFlow.
    /// </summary>
    /// <returns>
    /// A string that represents visually a KanbanFlow.
    /// </returns>
    /// <remarks>
    /// The returned string has the following form:
    /// “Relation1_Source_Name > Relation1_Dest_Name > Relation2_Dest_Name > … > LastRelation_Dest_Name”
    /// </remarks>
    public str relationsNames2Str()
    {
        str                             result;
        boolean                         firstActivityAdded = true;

        this.checkLoadRelations();

        if (kanbanFlowActivityRelationsList.elements() < 1)
        {
            error(Error::wrongUseOfFunction(funcName()));
            return result;
        }

        // get enumerator
        ListEnumerator enumerator = kanbanFlowActivityRelationsList.getEnumerator();

        // set it to first element so we spin the do-while
        while (enumerator.moveNext())
        {
            // get current element
            LeanActivityRelationshipWrapper leanActivityRelationshipWrapper = enumerator.current();

            // for the first element we also need to append the start
            if (firstActivityAdded)
            {
                result = leanActivityRelationshipWrapper.parmIndependentActivityName();
                firstActivityAdded = false;
            }

            // prepend current element's destination
            result = strFmt('%1 > %2', result, leanActivityRelationshipWrapper.parmDependentActivityName());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replenishmentLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the replenishment lead time for the specified <c>KanbanFlow</c> table.
    /// </summary>
    /// <param name="_itemId">
    ///    An <c>ItemId</c> variable that is used to determine conversion factors in the calculation.
    /// </param>
    /// <param name="_inventQty">
    ///    The quantity for which to calculate the time.
    /// </param>
    /// <param name="_timeUnitOfMeasure">
    ///    The unit in which the replenishment lead time is measured.
    /// </param>
    /// <param name="_inventDimId">
    ///    The product dimensions.
    /// </param>
    /// <returns>
    ///    The replenishment lead time for the wrapped <c>KanbanFlow</c> table.
    /// </returns>
    public real replenishmentLeadTime(
        ItemId      _itemId,
        InventQty   _inventQty,
        RefRecId    _timeUnitOfMeasure,
        InventDimId _inventDimId = InventDim::findOrCreateBlank().inventDimId)
    {
        if (!_timeUnitOfMeasure)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        real leadTimeSeconds = KanbanDateCalculation::newKanbanFlow(kanbanFlow,_itemId,_inventQty,_inventDimId).replenishmentLeadTimeSeconds();

		if (_itemId)
        {
            return EcoResProductUnitConverter::convertForReleasedProduct(_itemId,
                                                                         _inventDimId,
                                                                         leadTimeSeconds,
                                                                         ProdTimeUnitOfMeasure::unitOfMeasureByType(ProdTimeUnitType::Seconds),
                                                                         _timeUnitOfMeasure,
                                                                         NoYes::No);
        }

		else
        {
            return UnitOfMeasureConverter::convert(leadTimeSeconds,
                                                   ProdTimeUnitOfMeasure::unitOfMeasureByType(ProdTimeUnitType::Seconds),
                                                   _timeUnitOfMeasure,
                                                   NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the state of this instance of the <c>KanbanFlowWrapper</c> class.
    /// </summary>
    /// <param name="_cleanHeader">
    ///    The parameter that indicates if the <c>KanbanFlow</c> header is cleaned in case the flow is not yet
    ///    persisted.
    /// </param>
    /// <remarks>
    ///    If an existing flow was wrapped, the header is reread and the relations list is cleaned; otherwise
    ///    the <c>KanbanFlow</c> header is cleaned.
    /// </remarks>
    public void reset(boolean _cleanHeader = true)
    {
        if (_cleanHeader)
        {
            if (kanbanFlow.RecId)
            {
                kanbanFlow.reread();
            }
            else
            {
                kanbanFlow.clearAndInit();
            }

            this.refreshMultiActivityState();
        }

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the <c>KanbanFlow</c> record in the database.
    /// </summary>
    /// <returns>
    ///    true if the operation was successful; otherwise, false.
    /// </returns>
    public boolean save()
    {
        boolean                 result = false;
        KanbanFlow              resultKanbanFlow;

        // check if there's something to be saved
        if (this.isFlowDefined())
        {
            if (kanbanFlow.RecId == 0)
            {
                if (kanbanFlow.isSingleActivityFlow())
                {
                    KanbanFlowsCollection kanbanFlowsCollection = KanbanFlow::findAllFlows(kanbanFlow.FirstPlanPlanActivity, kanbanFlow.LastPlanPlanActivity);
                    int kanbanFlowsCount = kanbanFlowsCollection.kanbanFlowsCount();

                    if (kanbanFlowsCount > 1)
                    {
                        // There can't be multiple flows with the same first/last activity
                        throw error(Error::wrongUseOfFunction(funcName()));
                    }

                    if (kanbanFlowsCount == 1)
                    {
                        resultKanbanFlow = kanbanFlowsCollection.getKanbanFlowWrapper().parmKanbanFlow();
                        result = true;
                    }
                }

                if (!resultKanbanFlow)
                {
                    resultKanbanFlow = KanbanFlow::createFromKanbanFlowWrapper(this);

                    // maintain the result
                    result = resultKanbanFlow.RecId != 0;
                }
            }
            else
            {
                return true;
            }
        }
        else
        {
            // the wrapped KanbanFlow is invalid
            result = false;
            error("@SYS135044");
        }

        if (result)
        {
            kanbanFlow.data(resultKanbanFlow);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean                         shouldDeserializeRelations = false;
        container                       result = conNull();
        container                       packedKanbanFlowWrapperRelations = conNull();
        int                             i;
        int                             version     = RunBase::getVersion(_packedClass);

        // validate version
        if (version != #CurrentVersion)
        {
            return false;
        }

        this.init();

        // unpack the data
        [version, kanbanType, kanbanFlow, shouldDeserializeRelations, packedKanbanFlowWrapperRelations] = _packedClass;

        // make sure the state is consistent
        if (shouldDeserializeRelations
            && ( kanbanFlow.RecId
              || kanbanFlow.isSingleActivityFlow()))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (shouldDeserializeRelations)
        {
            int elementsCount = conPeek(packedKanbanFlowWrapperRelations, 1);

            for (i = 2; i <= elementsCount + 1; ++i)
            {
                LeanActivityRelationshipWrapper leanActivityRelationshipWrapper = LeanActivityRelationshipWrapper::construct();
                leanActivityRelationshipWrapper.unpack(conPeek(packedKanbanFlowWrapperRelations, i));
                this.addRelation(leanActivityRelationshipWrapper);
            }
        }

        this.refreshMultiActivityState();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanFlowWrapper construct()
    {
        KanbanFlowWrapper kanbanFlowWrapper = new KanbanFlowWrapper();

        return kanbanFlowWrapper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanFlowWrapper</c> class that holds the required database
    ///    representation of a <c>KanbanFlow</c> record in memory.
    /// </summary>
    /// <param name="_kanbanFlow">
    ///    The <c>KanbanFlow</c> record to load.
    /// </param>
    /// <param name="_kanbanType">
    ///    The type of kanban for which the instance of the <c>KanbanFlowWrapper</c> class will be used.
    /// </param>
    /// <param name="_forceInitialization">
    ///    A Boolean value that indicates whether full initialization of the object is forced.
    /// </param>
    /// <param name="_copyInputKanbanFlow">
    ///    A Boolean value that indicates whether the specified <c>KanbanFlow</c> should be copied by
    ///    reference or by value.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanFlowWrapper</c> class.
    /// </returns>
    /// <remarks>
    ///    By default, objects of this class support lazy initialization. To force initial loading the
    ///    <paramref name="_forceInitialization" /> parameter should be set to true.
    /// </remarks>
    public static KanbanFlowWrapper newKanbanFlow(
        KanbanFlow     _kanbanFlow,
        LeanKanbanType _kanbanType          = LeanKanbanType::Manufacturing,
        boolean        _forceInitialization = false,
        boolean        _copyInputKanbanFlow = false)
    {
        KanbanFlowWrapper            kanbanFlowWrapper = KanbanFlowWrapper::construct();
        KanbanFlow                   kanbanFlow;

        // validate input parameters
        if (!_kanbanFlow.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_copyInputKanbanFlow)
        {
            kanbanFlow.data(_kanbanFlow);
        }
        else
        {
            kanbanFlow = _kanbanFlow;
        }

        // set the kanbanFlow to the wrapper
        kanbanFlowWrapper.parmKanbanFlow(kanbanFlow);
        kanbanFlowWrapper.parmKanbanType(_kanbanType);
        kanbanFlowWrapper.init();
        kanbanFlowWrapper.refreshMultiActivityState();

        if (_forceInitialization)
        {
            kanbanFlowWrapper.load();
        }

        return kanbanFlowWrapper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanFlowWrapper</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>KanbanFlowWrapper</c> class.
    /// </returns>
    public static KanbanFlowWrapper newStandard()
    {
        KanbanFlowWrapper   kanbanFlowWrapper = KanbanFlowWrapper::construct();

        kanbanFlowWrapper.init();
        kanbanFlowWrapper.refreshMultiActivityState();

        return kanbanFlowWrapper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showKanbanFlowSelectionForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the <c>KanbanFlow</c> selection form.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The <c>LeanRuleData</c> object.
    /// </param>
    public static void showKanbanFlowSelectionForm(LeanRuleData _leanRuleData)
    {
        Args    args = new Args();

        // populate necessary data for the class factory to create the form
        args.name(formStr(KanbanFlowSelection));

        FormRun formRun = classfactory.formRunClass(args);

        // get an object reference, so we can do proper initialization
        Object kanbanFlowSelectionForm = formRun;

        if (formHasMethod(formRun, 'parmLeanRuleData'))
        {
            kanbanFlowSelectionForm.parmLeanRuleData(_leanRuleData);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // initialize and run the form as a modal dialog
        formRun.init();
        formRun.run();
        formRun.wait(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>