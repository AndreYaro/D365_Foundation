<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjListProjTrans implements SysPackable
{
    DialogField             dialogProjFromDate;
    DialogField             dialogProjToDate;
    DialogField             dialogProjBreakDate;
    DialogField             dialogLedgerBreakDate;
    DialogField             dialogLedgerFromDate;
    DialogField             dialogLedgerToDate;
    DialogField             dialogColumnData;
    DialogField             dialogForecastModelId;
    DialogField             dialogActualVsBudget;

    TransDate               projFromDate;
    TransDate               projToDate;
    TransDate               projBreakDate;
    TransDate               ledgerBreakDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    ProjListColumnData      columnData;
    ForecastModelId         forecastModelId;
    projActualVsBudget      actualVsBudget;

    ProjListStateId         listStateId;

    boolean                 dontShowdialog;
    boolean                 showDeviance;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        columnData,
        forecastModelId,
        actualVsBudget,
        projFromDate,
        projBreakDate,
        projToDate,
        ledgerFromDate,
        ledgerBreakDate,
        ledgerToDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
Object dialog(Object _dialog)
    {
        #define.two(2)

        Dialog          dialog = _dialog;
        DialogGroup     dialogProjectDate,
                        dialogProjGroup;

        if (! dontShowdialog)
        {
            dialogProjectDate = dialog.addGroup("@SYS12896");
            dialogProjectDate.columns(#two);
            dialogProjectDate.frameType(FormFrameType::None);

            dialog.addGroup("@SYS54242",dialogProjectDate);
            dialogProjFromDate      = dialog.addFieldValue(extendedTypeStr(TransDate),projFromDate,   "@SYS24050","@SYS90467");
            if (showDeviance)
            {
                dialogProjBreakDate = dialog.addFieldValue(extendedTypeStr(TransDate),projBreakDate,  "@SYS83773","@SYS90526");
            }
            dialogProjToDate        = dialog.addFieldValue(extendedTypeStr(TransDate),projToDate,     "@SYS80934","@SYS90468");

            dialog.addGroup("@SYS23410",dialogProjectDate);
            dialogLedgerFromDate    = dialog.addFieldValue(extendedTypeStr(TransDate),ledgerFromDate, "@SYS24050","@SYS90469");
            if (showDeviance)
            {
                dialogLedgerBreakDate = dialog.addFieldValue(extendedTypeStr(TransDate),ledgerBreakDate,  "@SYS83773","@SYS90526");
            }
            dialogLedgerToDate      = dialog.addFieldValue(extendedTypeStr(TransDate),ledgerToDate,   "@SYS80934","@SYS90470");

            dialogProjGroup         = dialog.addGroup("@SYS7403");
            dialogProjGroup.columns(#two);

            if (showDeviance)
            {
                dialogActualVsBudget    = dialog.addFieldValue(enumStr(projActualVsBudget), actualVsBudget);
            }
            else
            {
                dialogColumnData        = dialog.addFieldValue(enumStr(ProjListColumnData),  columnData);
            }
            dialogForecastModelId       = dialog.addFieldValue(extendedTypeStr(ProjForecastModelId), forecastModelId,"@SYS82923","@SYS90481");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPeriodLabel</Name>
				<Source><![CDATA[
        str formatPeriodLabel(str _prefixLabel = '', DateFlags _dateFlags = DateFlags::FormatAll)
    {
        str sReturn = '';
        ;
        if (ledgerFromDate || ledgerToDate || (!projFromDate && !projToDate))
        {
            if (sReturn)
            {
                sReturn += ', ';
            }
            sReturn += this.formatPeriodLabelHelper("@SYS180643", "@SYS180716", "@SYS91012", this.parmLedgerFromDate(), this.parmLedgerToDate(), _dateFlags);
        }

        if (projFromDate || projToDate)
        {
            if (sReturn)
            {
                sReturn += ', ';
            }
            sReturn += this.formatPeriodLabelHelper("@SYS180738", "@SYS180480", "@SYS91013", this.parmProjFromDate(), this.parmProjToDate(), _dateFlags);
        }
        return _prefixLabel + (_prefixLabel ? ': ' : '') + sReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPeriodLabelHelper</Name>
				<Source><![CDATA[
        private str formatPeriodLabelHelper(str _labelFrom, str _labelTo, str _labelFromTo, TransDate _dateFrom, TransDate _dateTo, DateFlags _dateFlags = DateFlags::FormatAll)
    {
        str strReturn = '';
        if ((_dateFrom) && (_dateFrom != dateNull()))
        {
            if ((_dateTo) && (_dateTo != dateNull()) && (_dateTo != dateMax()))
            {
                strReturn = strFmt(_labelFromTo, date2StrUsr(_dateFrom, _dateFlags),
                                                date2StrUsr(_dateTo, _dateFlags));
            }
            else
            {
                strReturn = strFmt('%1 %2', _labelFrom, date2StrUsr(_dateFrom, _dateFlags));
            }
        }
        else
        {
            if ((_dateTo) && (_dateTo != dateNull()) && (_dateTo != dateMax()))
            {
                strReturn = strFmt('%1 %2', _labelTo, date2StrUsr(_dateTo, _dateFlags));
            }
            else
            {
                strReturn = strFmt(_labelFromTo, '', '');
            }
        }
        return strReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatSelection</Name>
				<Source><![CDATA[
        ProjListSelection formatSelection(ProjShowAmount showAmount, boolean useColData = true)
    {
        str s;

        if (useColData)
        {
            if (this.parmColumnData() == ProjListColumnData::Actual)
            {
                s = strFmt('%1',this.parmColumnData());
            }
            else
            {
                s = strFmt('%1 %2',this.parmColumnData(),this.parmForecastModelId());
            }
        }
        else
        {
            s = strFmt('%1 %2',"@SYS80981",this.parmForecastModelId());
        }

        if (showAmount == ProjShowAmount::Amount1000 || showAmount == ProjShowAmount::Amount1000000)
        {
            s += strFmt(', %1',showAmount);
        }

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        if (!dontShowdialog)
        {
            projFromDate    = dialogProjFromDate.value();
            projToDate      = dialogProjToDate.value();
            ledgerFromDate  = dialogLedgerFromDate.value();
            ledgerToDate    = dialogLedgerToDate.value();

            if (showDeviance)
            {
                actualVsBudget  = dialogActualVsBudget.value();
                projBreakDate   = dialogProjBreakDate.value();
                ledgerBreakDate = dialogLedgerBreakDate.value();
            }
            else
            {
                columnData      = dialogColumnData.value();
            }

            forecastModelId = dialogForecastModelId.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listStateId</Name>
				<Source><![CDATA[
        ProjListStateId listStateId()
    {
        return listStateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowAmount</Name>
				<Source><![CDATA[
        // Tells if the Show amount should show in the dialog
    boolean mustShowAmount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowBlankId</Name>
				<Source><![CDATA[
        // Tells if the Show blan Id show in the dialog
    boolean mustShowBlankId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowHourQty</Name>
				<Source><![CDATA[
        // Tells if the Hour - qty should show in the dialog
    boolean mustShowHourQty()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new(ProjListStateId    _listStateId)
    {
        listStateId = _listStateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualVsBudget</Name>
				<Source><![CDATA[
        public projActualVsBudget parmActualVsBudget(projActualVsBudget _actualVsBudget = actualVsBudget)
    {
        actualVsBudget = _actualVsBudget;

        return actualVsBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmColumnData</Name>
				<Source><![CDATA[
        public ProjListColumnData parmColumnData(ProjListColumnData _columnData = columnData)
    {
        columnData = _columnData;

        return columnData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDontShowBaseDialog</Name>
				<Source><![CDATA[
        public boolean parmDontShowBaseDialog(boolean _dontShow = dontShowdialog)
    {
        dontShowdialog = _dontShow;

        return dontShowdialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelId</Name>
				<Source><![CDATA[
        public ForecastModelId parmForecastModelId(ForecastModelId _forecastModelId = forecastModelId)
    {
        forecastModelId = _forecastModelId;

        return forecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerBreakDate</Name>
				<Source><![CDATA[
        public TransDate parmLedgerBreakDate(TransDate _ledgerBreakDate = ledgerBreakDate)
    {
        ledgerBreakDate = _ledgerBreakDate;

        if (ledgerBreakDate)
        {
            return ledgerBreakDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerFromDate</Name>
				<Source><![CDATA[
        public TransDate parmLedgerFromDate(TransDate _ledgerfromDate = ledgerfromDate)
    {
        ledgerfromDate = _ledgerfromDate;

        if (ledgerfromDate)
        {
            return ledgerfromDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerToDate</Name>
				<Source><![CDATA[
        public TransDate parmLedgerToDate(TransDate _ledgerToDate = ledgerToDate)
    {
        ledgerToDate = _ledgerToDate;

        if (ledgerToDate)
        {
            return ledgerToDate;
        }

        return dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBreakDate</Name>
				<Source><![CDATA[
        public TransDate parmProjBreakDate(TransDate _projBreakDate = projBreakDate)
    {
        projBreakDate = _projBreakDate;

        if (projBreakDate)
        {
            return projBreakDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjFromDate</Name>
				<Source><![CDATA[
        public TransDate parmProjFromDate(TransDate _projfromDate = projfromDate)
    {
        projfromDate = _projfromDate;

        if (projfromDate)
        {
            return projfromDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjToDate</Name>
				<Source><![CDATA[
        public TransDate parmProjToDate(TransDate _projToDate = projToDate)
    {
        projToDate = _projToDate;

        if (projToDate)
        {
            return projToDate;
        }

        return dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDeviance</Name>
				<Source><![CDATA[
        public boolean parmShowDeviance(boolean _showDeviance = showDeviance)
    {
        showDeviance = _showDeviance;

        return showDeviance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerProjDate</Name>
				<Source><![CDATA[
        container setLedgerProjDate(ProjActualBudget _actualBudget)
    {
        TransDate   pFromDate, pToDate, ledFromDate, ledToDate;

        if (this.parmActualVsBudget() == projActualVsBudget::Sum_)
        {
            if (_actualBudget   == ProjActualBudget::Actual)
            {
                ledFromDate = this.parmLedgerFromDate();
                if (this.parmLedgerBreakDate() != dateNull())
                {
                    ledToDate = this.parmLedgerBreakDate();
                }
                else
                {
                    ledToDate = this.parmLedgerToDate();
                }

                pFromDate   = this.parmProjFromDate();
                if (this.parmProjBreakDate() != dateNull())
                {
                    pToDate = this.parmProjBreakDate();
                }
                else
                {
                    pToDate = this.parmProjToDate();
                }
            }
            else if (_actualBudget   == ProjActualBudget::Budget)
            {
                ledToDate = this.parmLedgerToDate();

                if (this.parmLedgerBreakDate() != dateNull())
                {
                    ledFromDate = this.parmLedgerBreakDate() + 1;
                }
                else
                {
                    ledFromDate = this.parmLedgerFromDate();
                }

                pToDate     = this.parmProjToDate();
                if (this.parmProjBreakDate() != dateNull())
                {
                    pFromDate   = this.parmProjBreakDate() + 1;
                }
                else
                {
                    pFromDate   = this.parmProjFromDate();
                }
            }
        }
        else
        {
            pFromDate       = this.parmProjFromDate();
            pToDate         = this.parmProjToDate();
            ledFromDate     = this.parmLedgerFromDate();
            ledToDate       = this.parmLedgerToDate();
        }

        return [pFromDate, pToDate, ledFromDate, ledToDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNoOfDecimals</Name>
				<Source><![CDATA[
        container setNoOfDecimals(ProjShowAmount _showAmount)
    {
        System.Globalization.NumberFormatInfo fi;
        ProjParameters  projParameters = ProjParameters::find();
        int             hourQtyDecimals;
        int             valueAddedDecimals;
        int             grossMarginDecimals;
        int             amountDecimals;

        switch (_showAmount)
        {
            case ProjShowAmount::WithDec:
                fi = new System.Globalization.NumberFormatInfo();
                amountDecimals = fi.get_CurrencyDecimalDigits();
                break;

            case ProjShowAmount::WithoutDec:
                amountDecimals = 0;
                break;

            case ProjShowAmount::Amount1000:
                amountDecimals = projParameters.Amount1000Decimals;
                break;

            case ProjShowAmount::Amount1000000:
                amountDecimals = projParameters.Amount1000000Decimals;
                break;
        }

        hourQtyDecimals  = projParameters.HourQtyDecimals;
        valueAddedDecimals = projParameters.ValueAddedDecimals;
        grossMarginDecimals = projParameters.GrossMarginDecimals;

        return [hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList] = _packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        boolean validate()
    {
        boolean ret;

        ret = true;

        if ((columnData  == ProjListColumnData::Budget) || showDeviance)
        {
            if (!forecastModelId)
            {
                ret = checkFailed("@SYS87707");
            }
        }

        if ((actualVsBudget == projActualVsBudget::Sum_)
            && (
                (projBreakDate < projfromDate || (projToDate && projBreakDate > projToDate))
                || (ledgerBreakDate < ledgerfromDate || (ledgerToDate && ledgerBreakDate > ledgerToDate))
            ))
        {
            // Break date falls outside date interval and actualvsbudget::sum is selected.
            ret = checkFailed("@SYS90850");
        }

        if ((projfromDate > projToDate && projToDate)
            || (ledgerfromDate > ledgerToDate && ledgerToDate))
        {
            // Invalid date interval
            ret = checkFailed("@SYS91020");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        // This has to be Called from it is called when building the dialog
    static ProjListProjTrans construct(ProjListStateType _listStateType, ProjListStateId _projListStateId)
    {
        switch (_listStateType)
        {
            case ProjListStateType::WIP :
                return new ProjListProjTrans_WIP(_projListStateId);

            case ProjListStateType::ProfitLoss :
                return new ProjListProjTrans_ProfitLoss(_projListStateId);

            case ProjListStateType::Payroll :
                return new ProjListProjTrans_PayRoll(_projListStateId);

            case ProjListStateType::OnAccount :
                return new ProjListProjTrans_OnAccount(_projListStateId);

            case ProjListStateType::Consumption :
                return new ProjListProjTrans_Consumption(_projListStateId);

            case ProjListStateType::HourRate :
                return new ProjListProjTrans_HourRate(_projListStateId);

            case ProjListStateType::CommittedCost :
                return new ProjListProjTrans_CommittedCost(_projListStateId);

            case ProjListStateType::ProfitLossActivity:
                return new ProjListProjTrans_ProfitLossActivity(_projListStateId);

            case ProjListStateType::WIPActivity:
                return new ProjListProjTrans_WIPActivity(_projListStateId);

            case ProjListStateType::ConsumptionActivity:
                return new ProjListProjTransConsumptionActivity(_projListStateId);
        }

        return new ProjListProjTrans(_projListStateId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>