<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>TrvExpenseEmployeeController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>TrvExpenseEmployeeController</c> class is the controller class for the <c>TrvExpense</c> report.
/// </summary>
public class TrvExpenseEmployeeController extends SrsReportRunController implements BatchRetryable
{
    TrvExpTable trvExpTable;
    TrvExpTrans trvExpTrans;
    str         caption;
    // TrvExpenseEmployee report parameter
    public static const str parmCaption = "Caption";

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>prePromptModifyContract</Name>
        <Source><![CDATA[
    /// <summary>
    /// Modifies the report query and parameters by using the caller settings.
    /// </summary>
    protected void prePromptModifyContract()
    {
        QueryBuildDataSource qbdsTrvExpTable;
        QueryBuildDataSource qbdsTrvExpTrans;
        QueryBuildRange      qbrExpNumber;
        QueryBuildRange      qbrReferenceDataAreaId;
        QueryBuildRange      qbrRecId;
        Query                query;
        boolean              isItemizedLine;

        if (this.parmArgs().record())
        {
            this.setRecord();
            query = this.getFirstQuery();
            isItemizedLine = trvExpTrans.LineType == TrvExpLineType::ItemizedLine;
            caption = TrvExpenseTransHelper::generateExpenseReportCaption(TrvExpTable, isItemizedLine);
            this.parmDialogCaption(caption);

            if (this.parmReportContract() && this.parmReportContract().parmRdlContract())
            {
                this.parmReportContract().parmRdlContract().setValue(parmCaption, caption);
            }

            if (query)
            {
                qbdsTrvExpTable = query.dataSourceTable(tablenum(TrvExpTable));
                qbdsTrvExpTrans = query.dataSourceTable(tablenum(TrvExpTrans));

                qbdsTrvExpTable.clearRanges();
                qbdsTrvExpTrans.clearRanges();

                qbrExpNumber = SysQuery::findOrCreateRange(qbdsTrvExpTable, fieldnum(TrvExpTable, ExpNumber));
                qbrExpNumber.value(trvExpTable.ExpNumber);
                qbrExpNumber.status(RangeStatus::Locked);

                qbrReferenceDataAreaId = SysQuery::findOrCreateRange(qbdsTrvExpTable, fieldnum(TrvExpTable, ReferenceDataAreaId));
                qbrReferenceDataAreaId.value(trvExpTable.ReferenceDataAreaId);
                qbrReferenceDataAreaId.status(RangeStatus::Locked);

                if (trvExpTrans.RecId)
                {
                    qbrRecId = SysQuery::findOrCreateRange(qbdsTrvExpTrans, fieldnum(TrvExpTrans, RecId));
                    qbrRecId.value(queryValue(trvExpTrans.RecId));
                    qbrRecId.status(RangeStatus::Hidden);
                }
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>setRecord</Name>
        <Source><![CDATA[
    private void setRecord()
    {
        switch (this.parmArgs().record().TableId)
        {
            case tableNum(TrvExpTable):
                trvExpTable = this.parmArgs().record();
                break;

            case tableNum(TrvExpTrans):
                trvExpTrans = this.parmArgs().record();
                trvExpTable = TrvExpTable::find(trvExpTrans.ExpNumber);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
   public static void main(Args _args)
    {
        SrsReportRunController controller  = new TrvExpenseEmployeeController();
        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(TrvExpenseEmployee, Report));
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>