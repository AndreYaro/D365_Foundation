<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetGroupTableMethod_SLP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the depreciation amount for depreciaton table by an asset group with SLP method.
/// </summary>
public class AssetGroupTableMethod_SLP_IN extends AssetGroupTableMethod_IN
{
    AssetDepreciationTime   periods;
    AssetAmount             assetAmount;
    AssetTransDate          previousDepreciationDate;
    boolean                 theEnd;

//  Properties required for the depreciation conventions
    AssetTableDepConv       deprConv;
    AssetAmount             prevDepAmountPriorYears;
    AssetAmount             prevDepAmountThisYear;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the the amount to depreciate this interval.
    /// </summary>
    /// <returns>
    /// Returns the amount to depreciate this interval.
    /// </returns>
    public AssetAmount calc()
    {
        AssetTransDate          startOfPeriod;
        AssetAmount             extraordinaryDepAmount;
        AssetTransDate          orgPeriodEnd;
        AssetAmount             basisForDepreciation,totalAmount,finalAmount; // Value used for depreciation convention calculation.
        AssetBook               assetBookLoc;
        int                     counter = 1;
        container               assetGroupId,assetLessGroupId;
        AssetTransType          assetTransType;
        ;

        startOfPeriod = deprInterval.startOfPeriod(periodstart);
        orgPeriodEnd  = periodEnd;

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();
            this.setAmountToDepreciate();
            extraordinaryDepAmount = - AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBook.AssetGroup, periodEnd, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation, assetBook.AssetId);

            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }

            if (previousDepreciationDate &&
                deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                prevDepAmount = this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal;
                prevPeriods = 0;
                if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
                {
                    prevDepAmountPriorYears += prevDepAmountThisYear;
                    prevDepAmountPriorYears += prevDepAmountExternal;
                    prevDepAmountExternal = 0;
                    prevDepAmountThisYear = 0;
                }
            }

            while select * from assetBookLoc
                where assetBookLoc.AssetGroup   == assetBook.AssetGroup
                   && assetBookLoc.BookId       == assetBook.BookId
                   && assetBookLoc.Status       != AssetStatus::NoAcquisition
            {
                if (assetBookLoc.DepreciationStartDate < orgPeriodEnd)
                {
                    if (AssetParameters::find().DepreciationThreshold_IN < (orgPeriodEnd - assetBookLoc.DepreciationStartDate + 1))
                    {
                        assetGroupId    = conpoke(assetGroupId,counter,assetBookLoc.AssetId);
                        if (assetBookLoc.Status == AssetStatus::Sold || assetBookLoc.Status == AssetStatus::Scrapped)
                        {
                            if (assetBookLoc.Status == AssetStatus::Sold)
                            {
                                assetTransType = AssetTransType::DisposalSale;
                            }
                            else
                            {
                                assetTransType = AssetTransType::DisposalScrap;
                            }
                            totalAmount     += assetBookLoc.AcquisitionPrice + AssetGroupInformation_IN::find(AssetGroupTrans_IN::findByAssetId(
                                               assetBookLoc.AssetId,assetBookLoc.AssetGroup,assetBookLoc.BookId,assetTransType).AssetGroupInformation).AmountMst;
                        }
                        else
                        {
                            totalAmount     += assetBookLoc.AcquisitionPrice;
                        }
                    }
                    else
                    {
                        assetLessGroupId = conpoke(assetLessGroupId,counter,assetBookLoc.AssetId);
                        if (assetBookLoc.Status == AssetStatus::Sold || assetBookLoc.Status == AssetStatus::Scrapped)
                        {
                            if (assetBookLoc.Status == AssetStatus::Sold)
                            {
                                assetTransType = AssetTransType::DisposalSale;
                            }
                            else
                            {
                                assetTransType = AssetTransType::DisposalScrap;
                            }
                            finalAmount     += assetBookLoc.AcquisitionPrice + AssetGroupInformation_IN::find(AssetGroupTrans_IN::findByAssetId(
                                               assetBookLoc.AssetId,assetBookLoc.AssetGroup,assetBookLoc.BookId,assetTransType).AssetGroupInformation).AmountMst;
                        }
                        else
                        {
                            finalAmount     += assetBookLoc.AcquisitionPrice;
                        }
                    }
                    counter ++;
                }
            }

            if (deprInterval.assetDepreciationTime(depreciationDate))
            {
                //  This code branch ensures the accuracy of the original calculated amount.
                if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                {
                    if ((conlen(assetGroupId) == counter-1))
                        {
                            assetAmount = ((amountToDepreciate-extraordinaryDepAmount) *
                                            this.percentage() / 100) /
                                            deprInterval.assetDepreciationTime(depreciationDate);
                        }
                        else
                        {
                            if (conlen(assetLessGroupId) == counter-1)
                            {
                                assetAmount = ((amountToDepreciate-extraordinaryDepAmount) *
                                                (this.percentage() / 100) *
                                                (AssetParameters::find().ThresholdPercentage_IN / 100));
                            }
                        }
                        if (conlen(assetGroupId) < counter-1 && conlen(assetLessGroupId) < counter-1)
                        {
                            assetAmount += ((totalAmount-extraordinaryDepAmount) *
                                            this.percentage() / 100) /
                                            deprInterval.assetDepreciationTime(depreciationDate);

                            assetAmount += ((finalAmount-extraordinaryDepAmount) *
                                            (this.percentage() / 100) *
                                            (AssetParameters::find().ThresholdPercentage_IN / 100));
                        }
                }
                else
                {
                    //  Depreciation conventions require an assetBook.serviceLife value.
                    if (assetBook.ServiceLife)
                    {
                            basisForDepreciation = amountToDepreciate -
                                                   extraordinaryDepAmount;

                            assetAmount = deprConv.calc_RB((basisForDepreciation * this.percentage() / 100),
                                                           prevDepAmountThisYear,
                                                           periodEnd,
                                                           round(periods + prevPeriods,0));
                    }
                    else
                    {
                        assetAmount = 0;
                        if (! dualDepreciation)
                            theEnd = true;
                    }
                }
            }
            else
            {
                assetAmount = 0;
            }

            this.calcRestPeriod(startOfPeriod);

            //  Code added because RB was not updating the assetBook.lifeTimeRest property.
            periods -= restPeriod;

            assetAmount = CurrencyExchangeHelper::amount(assetAmount * this.revaluationFactor());

            // Correction for minimal depreciation
            if (assetAmount < AssetParameters::find().DepreciationMin)
            {
                //  This code branch ensures the accuracy of the original calculated amount.
                if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                {
                    assetAmount = min(AssetParameters::find().DepreciationMin,amountToDepreciate-prevDepAmount-extraordinaryDepAmount);
                }
                else
                {
                    assetAmount = min(AssetParameters::find().DepreciationMin,amountToDepreciate-prevDepAmountPriorYears-prevDepAmountThisYear-extraordinaryDepAmount);
                }
            }

            periodEnd++;
            periodstart = periodEnd;
            periodEnd   = deprInterval.endPeriod(periodstart);

            previousDepreciationDate = depreciationDate;

            if (! prevPeriods)
            {
                assetAmount = assetBook.roundOffDepreciation(assetAmount);
            }

            depreciationThisRun += assetAmount;
            if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
            {
                prevDepAmountThisYear += assetAmount;
            }
        }

        //  This code branch ensures the accuracy of the original calculated amount.
        if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
        {
            if (! prevPeriods &&
                this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount >= amountToDepreciate)
            {
                assetAmount -= this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                prevDepAmount = amountToDepreciate - extraordinaryDepAmount;
                depreciationThisRun = amountToDepreciate - this.prvDepreciationAmount(periodstart) - prevDepAmountExternal - extraordinaryDepAmount;
                theEnd = true;
            }
            else
            {
                if ((assetDepreciationProfile.AssetEndDependOnServiceLife == true) && (periods < 1))
                {
                    if (orgPeriodEnd <= parmRunDate)
                    {
                        assetAmount -= this.prvDepreciationAmount(parmRunDate,true) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                        theEnd = true;
                    }
                }
            }
        }
        else
        {
            if (! prevPeriods &&
                prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount >= amountToDepreciate)
            {
                assetAmount -= prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                theEnd = true;
            }
            else
            {
                if ((assetDepreciationProfile.AssetEndDependOnServiceLife == true) && (periods < 1))
                {
                    if (orgPeriodEnd <= parmRunDate)
                    {
                        assetAmount -= prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                        theEnd = true;
                    }
                }
            }
        }
        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the rest period.
    /// </summary>
    /// <param name="_startOfPeriod">
    /// Period start date.
    /// </param>
    protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        super(_startOfPeriod);
        if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            //
            //  The restPeriod may be updated based on the assets depreciation convention or
            //  will be returned unchanged.
            //
            restPeriod = deprConv.calcRestPeriod(restPeriod, periodstart, periods);
        }

        if (calculatePrevPeriods && ! amountToDepreciate)
        {
            prevPeriods += restPeriod;
        }
        else
        {
            calculatePrevPeriods = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

    //
    //  This property is required to get the asset completely depreciatiate based on service life
    //  and must be initialized from the assetBook.LifeTimeRest property and updated based on the
    //  restPeriod value.
    //
        periods  = assetBook.LifeTimeRest;

        prevDepAmount = this.prvDepreciationAmount(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);
        if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            // Construct an asset depreciation convention class.
            deprConv = AssetTableDepConv::newCalcAssetAmount(assetBook, deprInterval, assetDepreciationProfile);

            //  Calculate any depreciations taken the previous years.
            prevDepAmountPriorYears = this.prevDepAmountPriorYears(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);

            if (assetBook.RevaluationGroupId)
            {
                prevDepAmountPriorYears -= assetSumCalc_Trans.depreciationRevaluationValue();
            }

            //  Calculate any depreciations taken this year.
            prevDepAmountThisYear = this.prevDepAmountThisYear(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
    //
    //  This is to prevent divide by zeros errors during the percentage() method
    //  if the assetBook.ServiceLife property is zero. It will cause the asset to
    //  be ignored during the depreciation "Profile" or "Proposal" process.
    //
        switch (assetDepreciationProfile.Method)
        {
            //
            //  These "Reducing Balance" depreciation methods require a "ServiceLife"
            //  value order to provide a correct precentage value to the calculation process.
            //
            //  The standard reducing balance depreciation method does not require
            //  a "ServiceLife" to provide a correct percentage value so therefore
            //  it is not included in this validation.
            //
            case AssetDepreciationMethod::ReducingBalance125:
            case AssetDepreciationMethod::ReducingBalance150:
            case AssetDepreciationMethod::ReducingBalance175:
            case AssetDepreciationMethod::ReducingBalance200:
                if (!assetBook.ServiceLife)
                {
                    return false;
                }
        }

        if (theEnd)
        {
            return false;
        }
        if (parmRunDate <= baseDate)
        {
            return false;
        }

        this.setDepDate();

    //
    //  This prevents depreciations with invalid dates from
    //  being handled.
    //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the Asset depreciation percentage.
    /// </summary>
    /// <returns>
    /// Returns the Asset depreciation percentage.
    /// </returns>
    protected AssetDepreciationPercentage percentage()
    {
        #DEFINE.RB125_Factor(1.25)
        #DEFINE.RB150_Factor(1.50)
        #DEFINE.RB175_Factor(1.75)
        #DEFINE.RB200_Factor(2.00)

        AssetDepreciationPercentage percentage;

        switch (assetDepreciationProfile.Method)
        {
            case AssetDepreciationMethod::ReducingBalance125:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB125_Factor, assetBook.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance150:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB150_Factor, assetBook.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance175:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB175_Factor, assetBook.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance200:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(#RB200_Factor, assetBook.ServiceLife);
                break;

            default:
                //  Call the parent class method in order to maintain original code.
                percentage = super();
                break;
        }

        return percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDepAmountPriorYears</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method caculates the assets total amount of depreciation for all years prior to the current year.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// Returns the total amount of depreciation for all years prior to the current year.
    /// </returns>
    private AssetAmount prevDepAmountPriorYears(AssetTransDate _assetTransDate)
    {
        AssetSumCalc_Trans_IN   assetSumCalc_Trans_PriorYears;
        AssetTransDate          toDate;
        AssetAmount             retValue;
        ;

        //  The depreciation year used for the asset is "Calendar"
        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
        {
            //
            //  Set the to date to the date prior to the begining
            //  of the year for the passed in date.
            //  This date is the last day of the previous year.
            //
            toDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate) - 1;
        }
        else
        {
            //
            //  The depreciation year is either Fiscal-GL Periods or Fiscal-Asset Calendar
            //
            //  Set the to date to the date prior to the begining
            //  of the year for the passed in date.
            //  This date is the last day of the previous year.
            //
            toDate = deprInterval.openingPeriodDate(_assetTransDate) - 1;
        }

        //
        //  Create a period based AssetSumCalc_Trans for the current asset
        //  using the lowest date value dateNull() (01/01/1900) and the
        //  to date as the date range.
        //  This date range represents the earliest transaction date possible to the
        //  last day of the previous year.
        //
        assetSumCalc_Trans_PriorYears = AssetSumCalc_Trans_IN::newAssetPeriod(assetBook.AssetGroup, assetBook.BookId, dateNull(), toDate);

        //
        //  Create a total for all the asset depreciations and
        //  depreciation adjustments between (including) the two (2) dates.
        //
        retValue = -(assetSumCalc_Trans_PriorYears.depreciationValue()  +
                     assetSumCalc_Trans_PriorYears.depreciationAdjValue());

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDepAmountThisYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method caculates the assets total amount of depreciation for the current year.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The asset transaction date.
    /// </param>
    /// <returns>
    /// Returns the total amount of depreciation for the current year.
    /// </returns>
    private AssetAmount prevDepAmountThisYear(AssetTransDate _assetTransDate)
    {
        AssetSumCalc_Trans_IN  assetSumCalc_Trans_ThisYear;
        AssetTransDate      fromDate;
        AssetTransDate      toDate;
        AssetAmount         retValue;
        ;

        //  The depreciation year used for the asset is "Calendar"
        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
        {
            //  Set the from date to the begining of the year for the passed in date.
            fromDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate);
        }
        else
        {
            //
            //  The depreciation year is either Fiscal-GL Periods or Fiscal-Asset Calendar
            //  Set the from date to the begining of the fiscal year for the passed in date.
            //
            fromDate = deprInterval.openingPeriodDate(_assetTransDate);
        }

        //  Set the to date to the end of the depreciation period for the passed in date.
            toDate = deprInterval.endPeriod(_assetTransDate);

        //
        //  Create a period based AssetSumCalc_Trans for the current asset
        //  using the from date and the to date as the date range.
        //  This date range represents the beginning of this year to the
        //  date the of the next depreciation.
        //
        assetSumCalc_Trans_ThisYear = AssetSumCalc_Trans_IN::newAssetPeriod(assetBook.AssetGroup, assetBook.BookId, fromDate, toDate);

        //
        //  Create a total for all the asset depreciations and
        //  depreciation adjustments between (including) the two (2) dates.
        //
        retValue = -(assetSumCalc_Trans_ThisYear.depreciationValue() +
                     assetSumCalc_Trans_ThisYear.depreciationAdjValue());

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the previous year depreciation amount.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The transaction date.
    /// </param>
    /// <param name="_fixedDate">
    /// A boolean value whether the depreciation calendar follows the asset calendar.
    /// </param>
    /// <returns>
    /// Returns the previous year depreciation amount.
    /// </returns>
    private AssetAmount prvDepreciationAmount(AssetTransDate _assetTransDate, boolean _fixedDate = false)
    {
        AssetTransDate  depYearStart;
        AssetAmount     prvDepreciationAmount;
        ;

        if (! _fixedDate)
        {
            if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
            {
                depYearStart = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate);
            }
            else
            {
                depYearStart = deprInterval.openingPeriodDate(_assetTransDate);
            }
        }
        else
        {
            depYearStart = _assetTransDate;
        }

        prvDepreciationAmount = -(AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBook.AssetGroup, depYearStart - 1, assetBook.BookId, AssetTransType::Depreciation, assetBook.AssetId) +
                                  AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBook.AssetGroup, depYearStart - 1, assetBook.BookId, AssetTransType::DepreciationAdj, assetBook.AssetId));
        return prvDepreciationAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>