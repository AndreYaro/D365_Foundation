<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxAverageVATAdjust</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>TaxAverageVATAdjust_TH</c> class provides the adjustment of
///     sales tax, inventory cost and related fixed asset due to the VAT ratio
///     is changed when invoice is settled.
/// </summary>
public class TaxAverageVATAdjust
{
    TaxTrans                taxTrans;
    TmpTaxWorkTrans         taxWorkTrans;
    TaxAmount               adjustAmountMST;
    TaxAmountCur            adjustAmountCur;

    boolean                 isAdjusted;
    VendTrans               vendTrans;
    InventTrans             inventTrans;
    Voucher                 assetVoucher;
    TransDate               assetDate;
    LedgerDimensionAccount  ledgerDimensionId;

    LedgerPostingController ledgerPostingController;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method does adjustment for sales tax, inventory cost and
    ///     fixed asset when invoice is settled.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void adjustNow()
    {
        LedgerVoucher   ledgerVoucher;

        adjustAmountCur = this.getAdjustAmount();
        if (this.isAdjusted())
        {
            this.setData();

            ttsbegin;
            this.updateTaxTrans();
            this.updateLedger();

            if (vendTrans.RecId)
            {
                ledgerVoucher = ledgerPostingController.getJournal();
                if (inventTrans.RecId)
                {
                    TaxAverageVATAdjust::updateInvent(
                        ledgerVoucher,
                        inventTrans,
                        taxWorkTrans.TransDate,
                        ledgerPostingController.getReference().parmVoucher(),
                        adjustAmountMST);
                }
            }

            TaxAverageVATAdjust::updateAsset(
                assetVoucher,
                assetDate,
                taxWorkTrans.TransDate,
                ledgerVoucher,
                adjustAmountCur,
                adjustAmountMST);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method calculates and sets adjustment amount based on the active <c>TaxData</c>.
    /// </summary>
    /// <returns>
    ///     Adjustment amount.
    /// </returns>
    private TaxAmountCur getAdjustAmount()
    {
        TaxData                 taxData;
        TaxData                 origTaxData;
        TaxAmount               amount;

        if (this.isAdjustType())
        {
            taxData = this.getTaxData();
            origTaxData = this.getOrigTaxData();
            if (taxData.RecId
                && origTaxData.TaxValue
                && (taxData.TaxValue != origTaxData.TaxValue
                    || taxData.VATExemptPct != origTaxData.VATExemptPct))
            {
                amount = CurrencyExchangeHelper::amount(taxWorkTrans.SourceBaseAmountCur * origTaxData.TaxValue / 100 * taxData.vatExemptPct / 100) - taxWorkTrans.TaxInCostPrice;
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigTaxData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method finds the original tax data record according to invoice date.
    /// </summary>
    /// <returns>
    ///     The original tax data.
    /// </returns>
    private TaxData getOrigTaxData()
    {
        return TaxData::find(taxTrans.TaxCode, taxTrans.TransDate, taxTrans.TaxBaseAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method finds the active <c>TaxData</c> according to settlement date.
    /// </summary>
    /// <returns>
    ///     The active <c>TaxData</c>.
    /// </returns>
    private TaxData getTaxData()
    {
        return TaxData::find(taxWorkTrans.TaxCode, taxWorkTrans.TransDate, taxWorkTrans.TaxBaseAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdjusted</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method indicates whether the adjustment is made.
    /// </summary>
    /// <returns>
    ///     Returns true if the adjustment amount is not zero. Otherwise, returns faluse.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isAdjusted()
    {
        return (adjustAmountCur != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdjustType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method indicates whether the original <c>TaxTrans</c> is incoming tax.
    /// </summary>
    /// <returns>
    ///     Returns true when the original <c>TaxTrans</c> is incoming tax. Otherwise, returns false.
    /// </returns>
    private boolean isAdjustType()
    {
        return (taxTrans.TaxDirection == TaxDirection::IncomingTax
            && !TaxTable::isNormalVAT(taxTrans.TaxCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Merges the ledger dimension default account and the default dimensions to create a ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    ///    The ledger dimension default account.
    /// </param>
    /// <param name="_defaultDimension">
    ///    The default dimensions.
    /// </param>
    /// <returns>
    ///    A ledger dimension.
    /// </returns>
    private LedgerDimensionAccount mergeDimension(
        LedgerDimensionDefaultAccount   _ledgerDimension,
        DimensionDefault                _defaultDimension)
    {
        LedgerDimensionAccount  mergedLedgerDimension;
        List                    dimensionSources;

        dimensionSources = new List(Types::Class);

        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_defaultDimension));
        mergedLedgerDimension = LedgerDimensionDefaultingEngine::createLedgerDimension(_ledgerDimension, dimensionSources);

        return mergedLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingController</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerPostingController parmLedgerPostingController(LedgerPostingController _ledgerPostingController = ledgerPostingController)
    {
        ledgerPostingController = _ledgerPostingController;
        return ledgerPostingController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxTrans parmTaxTrans(TaxTrans _taxTrans = taxTrans)
    {
        taxTrans = _taxTrans;
        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWorkTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpTaxWorkTrans parmTaxWorkTrans(TmpTaxWorkTrans _taxWorkTrans = taxWorkTrans)
    {
        taxWorkTrans = _taxWorkTrans;
        return taxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method sets the data according to source table Id.
    /// </summary>
    private void setData()
    {
        VendInvoiceTrans    vendInvoiceTrans;
        VendInvoiceJour     vendInvoiceJour;
        LedgerJournalTrans  ledgerJournalTrans;
        AssetTrans          assetTrans;
        InventAccountType   inventAccountType = InventAccountType::PurchExpense;

        switch (taxTrans.SourceTableId)
        {
            case tableNum(VendInvoiceTrans)     :
                vendInvoiceTrans = VendInvoiceTrans::findRecId(taxTrans.SourceRecId);
                vendInvoiceJour = vendInvoiceTrans.vendInvoiceJour();
                vendTrans = vendInvoiceJour.vendTrans();
                if (vendInvoiceTrans.InventTransId)
                {
                    inventTrans = InventTrans::findTransId(vendInvoiceTrans.InventTransId);
                }

                if (inventTrans.RecId)
                {
                    assetVoucher = inventTrans.Voucher;
                    assetDate    = inventTrans.DateFinancial;
                    inventAccountType = InventAccountType::PurchConsump;
                    ledgerDimensionId = inventTrans.accountBalanceSheetLedgerDimension();
                }

                // Need to reset the voucher since currently it is InventTrans voucher.
                if (AssetParameters::find().DeductCashDisc)
                {
                    assetVoucher        = vendTrans.Voucher;
                    assetDate           = vendTrans.TransDate;
                }

                // Currently ledgerDimension is not stored in InventTransPosting table when purchasing an item with Service type.
                // In this case, LedgerDimension is required to be found to generate adjustment entry.
                if (!ledgerDimensionId)
                {
                    ledgerDimensionId = InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(inventAccountType, vendInvoiceTrans));
                    ledgerDimensionId = this.mergeDimension(ledgerDimensionId, vendInvoiceTrans.DefaultDimension);
                }
                break;

            case tableNum(LedgerJournalTrans)   :
                ledgerJournalTrans = LedgerJournalTrans::findRecId(taxTrans.SourceRecId, false);

                if (ledgerJournalTrans.OffsetLedgerDimension
                    || ledgerJournalTrans.OffsetLedgerDimension)
                {
                    // Gets dimension from offset account.
                    switch (ledgerJournalTrans.OffsetAccountType)
                    {
                        case LedgerJournalACType::Ledger:
                            ledgerDimensionId = ledgerJournalTrans.OffsetLedgerDimension;
                            break;

                        case LedgerJournalACType::FixedAssets:
                            if (ledgerJournalTrans.VendTransId)
                            {
                                vendTrans = VendTrans::find(ledgerJournalTrans.VendTransId);
                                assetVoucher = vendTrans.Voucher;
                                assetDate    = vendTrans.TransDate;

                                assetTrans = AssetTrans::findByVoucher(assetVoucher, assetDate);
                                ledgerDimensionId = AssetLedgerAccounts::assetLedgerDimension(assetTrans.AssetId, assetTrans.BookId, assetTrans.TransType, assetTrans.PostingProfile);
                                ledgerDimensionId = this.mergeDimension(ledgerDimensionId, assetTrans.DefaultDimension);
                            }
                            break;

                        default:
                            ledgerDimensionId = ledgerJournalTrans.OffsetDefaultDimension;
                    }
                }

                if (!ledgerDimensionId)
                {
                    // Tries to get dimension from account.
                    switch (ledgerJournalTrans.AccountType)
                    {
                        case LedgerJournalACType::Ledger:
                            ledgerDimensionId = ledgerJournalTrans.LedgerDimension;
                            break;

                        case LedgerJournalACType::FixedAssets:
                            break;

                        default:
                            ledgerDimensionId = ledgerJournalTrans.DefaultDimension;
                    }
                }
                break;
        }

        if (!ledgerDimensionId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">An inventory account type.</param>
    /// <param name="_vendInvoiceTrans">A posted vendor invoice line.</param>
    /// <returns>The built parameter instance.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(
        InventAccountType   _inventAccountType,
        VendInvoiceTrans    _vendInvoiceTrans)
    {
        return InventPostingItemLedgerDimensionParameters::newFromParameters(_inventAccountType, _vendInvoiceTrans.itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method creates new sales tax transaction for adjustment amount due to the VAT ratio is changed.
    /// </summary>
    private void updateLedger()
    {
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        CurrencyExchangeHelper      exchangeRateHelper;

        exchangeRateHelper  = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), taxWorkTrans.TransDate);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(
            ledgerPostingController.getReference(),
            LedgerPostingType::Tax,
            ledgerDimensionId,
            taxWorkTrans.SourceCurrencyCode,
            adjustAmountCur,
            adjustAmountMST,
            exchangeRateHelper.calculateTransactionCurrencyToReportingCurrency(taxWorkTrans.CurrencyCode, adjustAmountCur));

        ledgerPostingController.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method updates realized <c>TmpTaxWorkTrans</c> with additional adjustment amount.
    /// </summary>
    private void updateTaxTrans()
    {
        if (taxWorkTrans.SourceCurrencyCode == taxWorkTrans.CurrencyCode)
        {
            adjustAmountMST                     = adjustAmountCur;
        }
        else
        {
            adjustAmountMST                     = CurrencyExchangeHelper::amountCur2MST(adjustAmountCur, taxWorkTrans.SourceCurrencyCode);
        }

        taxWorkTrans.TaxInCostPrice             += adjustAmountCur;
        taxWorkTrans.TaxInCostPriceMST          += adjustAmountMST;
        taxWorkTrans.TaxInCostPriceCur          += adjustAmountMST;
        taxWorkTrans.TaxInCostPriceRegulated    += adjustAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessConditionalSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the conditional sales tax process will be employed.
    /// </summary>
    /// <param name="_voucher">
    ///     The voucher of invoice.
    /// </param>
    /// <param name="_invoiceDate">
    ///     The invoice date.
    /// </param>
    /// <param name="_settleDate">
    ///     The settlement date.
    /// </param>
    /// <returns>
    ///     Returns false only when:
    ///     1) Tax is incoming tax.
    ///     2) Tax type is Average realized.
    ///     3) Exempt percentage is not changed between invoice and settlement.
    ///     Otherwise, returns true.
    /// </returns>
    /// <remarks>
    ///     This method is called before custVendSettle.taxSettlement is processed,
    ///     to avoid duplicate entries being generated when exempt percentage is not changed
    ///     during invoice and settlement.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canProcessConditionalSalesTax(
        Voucher     _voucher,
        TransDate   _invoiceDate,
        TransDate   _settleDate)
    {
        TaxTrans                taxTrans;
        TaxTransExtensionTH     taxTransExtensionTH;
        TaxTable                taxTable;
        TaxData                 invoiceTaxData;
        TaxData                 settleTaxData;
        boolean                 ret;

        while select TaxCode, TaxBaseAmountCur, TaxDirection from taxTrans
            where taxTrans.Voucher          == _voucher
                && taxTrans.TransDate       == _invoiceDate
                && taxTrans.ExemptTax       == NoYes::No
                && (taxTrans.TaxOrigin      == TaxOrigin::Tax
                || taxTrans.TaxOrigin       == TaxOrigin::Transfer)
                && (taxTrans.TaxDirection   == TaxDirection::IncomingTax
                || taxTrans.TaxDirection    == TaxDirection::OutgoingTax
                || taxTrans.TaxDirection    == TaxDirection::UseTax)
            join PaymTaxCode from taxTransExtensionTH
                where taxTransExtensionTH.TaxTrans == taxTrans.RecId
            join PaymentTaxCode, TaxType_TH from taxTable
                where taxTable.TaxCode       == taxTrans.TaxCode           &&
                    taxTable.PaymentTaxCode  != ''    &&
                    taxTable.TaxBase         != TaxBaseType::AmountByUnit
        {
            if (taxTrans.TaxDirection == TaxDirection::IncomingTax
                && taxTable.TaxType_TH == TaxType_TH::AverageRealized)
            {
                invoiceTaxData = TaxData::find(taxTrans.TaxCode, _invoiceDate, taxTrans.TaxBaseAmountCur);
                settleTaxData = TaxData::find(taxTransExtensionTH.PaymTaxCode, _settleDate, taxTrans.TaxBaseAmountCur);
                if (invoiceTaxData.vatExemptPct != settleTaxData.vatExemptPct
                    && invoiceTaxData.TaxCode != settleTaxData.TaxCode)
                {
                    ret = true;
                    break;
                }
            }
            else
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method creates an instance of <c>TaxAverageVATAdjust</c>.
    /// </summary>
    /// <param name="_taxTransForConditional">
    ///     The <c>TaxTrans</c> record for conditional sales tax which is created when invoice is posted.
    /// </param>
    /// <param name="_taxWorkTransForPayment">
    ///     The <c>TmpTaxWorkTrans</c> record for payment sales tax which is created when invoice is settled.
    /// </param>
    /// <param name="_ledgerPostingController">
    ///     The instance of <c>LedgerPostingController</c> for payment journal.
    /// </param>
    /// <returns>
    ///     The instance of <c>TaxAverageVATAdjust</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxAverageVATAdjust construct(
        TaxTrans                _taxTransForConditional,
        TmpTaxWorkTrans         _taxWorkTransForPayment,
        LedgerPostingController _ledgerPostingController)
    {
        TaxAverageVATAdjust  taxAverageVATAdjust = new TaxAverageVATAdjust();

        taxAverageVATAdjust.parmTaxTrans(_taxTransForConditional);
        taxAverageVATAdjust.parmTaxWorkTrans(_taxWorkTransForPayment);
        taxAverageVATAdjust.parmLedgerPostingController(_ledgerPostingController);

        return taxAverageVATAdjust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsset</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method updates new fixed asset transaction for adjustment amount due to the VAT ratio is changed.
    /// </summary>
    /// <param name="_assetVoucher">
    ///     The voucher of asset transaction which is to be adjusted.
    /// </param>
    /// <param name="_assetDate">
    ///     The date of asset transaction which is to be adjusted.
    /// </param>
    /// <param name="_settlementDate">
    ///     The transaction date for settlement.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///     The instance of <c>LedgerVoucher</c> for settlement.
    /// </param>
    /// <param name="_amountCur">
    ///     The currency amount for adjustment.
    /// </param>
    /// <param name="_amountMST">
    ///     The accounting amount for adjustment.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateAsset(
        Voucher         _assetVoucher,
        TransDate       _assetDate,
        TransDate       _settlementDate,
        LedgerVoucher   _ledgerVoucher,
        AmountCur       _amountCur,
        AmountMST       _amountMST)
    {
        AssetTrans                          assetTrans;
        AssetTrans                          assetTransGrp;
        AssetBookTableDerived               assetBookTableDerived;
        AssetPost_TaxAverageVATAdjust       assetPost;

        while select AssetId, BookId from assetTransGrp
            group by AssetId, BookId
            where assetTransGrp.Voucher     == _assetVoucher
                && assetTransGrp.TransDate  == _assetDate
                && (assetTransGrp.TransType == AssetTransType::Acquisition
                || assetTransGrp.TransType  == AssetTransType::AcquisitionAdj)
                notexists join assetBookTableDerived
                    where assetBookTableDerived.BookIdDerived == assetTransGrp.BookId
        {
            select firstonly assetTrans
                where assetTrans.AssetId        == assetTransGrp.AssetId
                    && assetTrans.BookId        == assetTransGrp.BookId
                    && assetTrans.Voucher       == _assetVoucher
                    && assetTrans.TransDate     == _assetDate
                    && (assetTrans.TransType    == AssetTransType::Acquisition
                    || assetTrans.TransType     == AssetTransType::AcquisitionAdj);
            if (assetTrans)
            {
                assetPost = AssetPost_TaxAverageVATAdjust::newTaxAverageVATAdjust(_ledgerVoucher, assetTrans, _settlementDate, _amountCur, _amountMST);
                if (assetPost.check())
                {
                    assetPost.post(true, true);
                    assetPost.addAssetAdjustOffsetTrans();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method updates inventory cost for adjustment amount due to the VAT ratio is changed.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///     The instance of <c>LedgerVoucher</c> for settlement.
    /// </param>
    /// <param name="_inventTrans">
    ///     The orginal <c>InventTrans</c> record which is to be adjusted.
    /// </param>
    /// <param name="_settlementDate">
    ///     The transaction date for settlement.
    /// </param>
    /// <param name="_settlementVoucher">
    ///     The voucher for settlement.
    /// </param>
    /// <param name="_amount">
    ///     The accounting amount for adjustment.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateInvent(
        LedgerVoucher           _ledgerVoucher,
        InventTrans             _inventTrans,
        TransDate               _settlementDate,
        Voucher                 _settlementVoucher,
        AmountMST               _amount)
    {
        LedgerDimensionAccount  accountBalanceSheet;
        LedgerPostingType       postingBalanceSheet;
        InventTransAdjust       transAdjust;

        transAdjust = new InventTransAdjust(_settlementDate, _settlementVoucher);

        accountBalanceSheet = _inventTrans.accountBalanceSheetLedgerDimension();
        postingBalanceSheet = _inventTrans.postingBalanceSheet();

        if (!accountBalanceSheet || !postingBalanceSheet)
        {
            postingBalanceSheet = InventAdj::errorPostingBalanceSheet(_inventTrans.Qty);
            accountBalanceSheet = InventAdj::errorAccountBalanceSheet(
                _inventTrans.ItemId,
                InventTable::itemGroupIdByItemId(_inventTrans.ItemId),
                _inventTrans.Qty);
        }

        _inventTrans.selectForUpdate(true);
        transAdjust.updateNow(
            _inventTrans,
            NoYes::No,
            NoYes::Yes,
            _amount,
            !_inventTrans.ProjId,
            _inventTrans.postingLossProfit(_amount),
            _inventTrans.accountLossProfitLedgerDimension(_amount),
            true,
            postingBalanceSheet,
            accountBalanceSheet,
            false,
            _ledgerVoucher,
            InventAdjustmentSpec::ItemNum);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>