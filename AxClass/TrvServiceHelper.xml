<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvServiceHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TrvServiceHelper</c> has APIs to facilitate getting errors and warnings from the infolog and logging them.
/// </summary>
class TrvServiceHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInfolog</Name>
				<Source><![CDATA[
/// <summary>
    /// Throws an AifFault exception if errors are found in the infolog. Otherwise, a list of warnings found in the infolog is returned
    /// </summary>
    /// <param name="_code">
    /// The error code to provide if there are errors in the infolog
    /// </param>
    /// <param name="_reason">
    /// A general description of the error occurred in the user's language
    /// </param>
    /// <param name="_throwException">
    /// Throws exception without checking if there are only warnings or not; optional.
    /// </param>
    /// <param name="_includeInfolog">
    /// Determines whether to include the contents of the infolog in the reason; optional.
    /// </param>
    /// <param name="_loggingLevel">
    /// Determines the level of messages from the infolog that are included in the reason.
    /// Set to Error, Warning, or Info. Defaults to Error. Warning will include errors and warnings,
    /// and Info will include all types: info, warnings, and errors.
    /// </param>
    /// <returns>
    /// A list of warnings found in the infolog.
    /// </returns>
    /// <remarks>
    /// Note that if _throwException = true, the method will throw even if there are only warnings in the infolog.
    /// Hence, _throwException should be set only when the code needs to explicitly throw an exception
    /// even if infolog contains only warnings.
    /// </remarks>
    public static List processInfolog(str _code, str _reason, boolean _throwException = false, boolean _includeInfolog = true, Exception _loggingLevel = Exception::Info)
    {
        str message;
        InfologData infologData;
        SysInfologEnumerator enum;

        List warningList = new List(Types::String);
        str reason = _reason;
        str errorStr = enum2str(Exception::Error);
        str warningStr = enum2str(Exception::Warning);
        str infoStr = enum2str(Exception::Info);
        str concatMessage = ' | %1: %2';

        infologData = infolog.copy(1, infologLine());
        enum = SysInfologEnumerator::newData(infologData);
        reason = _reason;

        // Loop through all the infolog messages
        while (enum.moveNext())
        {
            // For some reason we get 5 horizontal tab characters at the beginning of each message
            message = strLRTrim(enum.currentMessage());

            // 1) AIF-log errors & warnings
            // 2) Build the warning return list
            // 3) Build up the reason to return in a thrown fault
            if (enum.currentException() == Exception::Error)
            {
                AifFault::logError(message);
                reason += _includeInfolog ? strFmt(concatMessage, errorStr, message) : "";
            }
            else if (enum.currentException() == Exception::Warning)
            {
                AifFault::logWarning(message);
                warningList.addEnd(message);

                if (_loggingLevel == Exception::Warning || _loggingLevel == Exception::Info)
                {
                    reason += _includeInfolog ? strFmt(concatMessage, warningStr, message) : "";
                }
            }
            else if (enum.currentException() == Exception::Info && _loggingLevel == Exception::Info)
            {
                reason += _includeInfolog ? strFmt(concatMessage, infoStr, message) : "";
            }
        }

        // Always throw if there are any errors found in the infolog
        if (_throwException || infolog.num(Exception::Error) > 0)
        {
            throw AifFault::faultList(reason, _code);
        }

        return warningList;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>