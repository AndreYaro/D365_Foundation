<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAdvanceInvoiceApplication</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendAdvanceInvoiceApplication</c> class is a class that is used for prepayment application on a standard invoice.
/// </summary>
class VendAdvanceInvoiceApplication
{
    VendInvoiceInfoTable vendInvoiceInfoTable;
    Map advanceInvoiceMap;
    private Amount totalPrepaymentAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    public VendInvoiceInfoTable parmVendInvoiceInfoTable(vendInvoiceInfoTable _vendInvoiceInfoTable = vendInvoiceInfoTable)
    {
        vendInvoiceInfoTable = _vendInvoiceInfoTable;
        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalPrepaymentAmount</Name>
				<Source><![CDATA[
    internal Amount getTotalPrepaymentAmount()
    {
        return totalPrepaymentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        advanceInvoiceMap = new Map(Types::Record, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method instantiates an object of this class.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> record for which prepayment application needs to be done.
    /// </param>
    /// <returns>
    /// The <c>VendAdvanceInvoiceApplication</c> object.
    /// </returns>
    public static VendAdvanceInvoiceApplication construct(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendAdvanceInvoiceApplication vendAdvanceInvoiceApplication = new VendAdvanceInvoiceApplication();
        vendAdvanceInvoiceApplication.parmVendInvoiceInfoTable(_vendInvoiceInfoTable);
        return vendAdvanceInvoiceApplication;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTotalAmount</Name>
				<Source><![CDATA[
    public AmountCur getInvoiceTotalAmount()
    {
        PurchTotals localPurchTotals = PurchTotals::newParmTable(vendInvoiceInfoTable, PurchUpdate::All, vendInvoiceInfoTable.ParmId, '', DocumentStatus::Invoice);
        localPurchTotals.calc(true);

        return localPurchTotals.purchTotalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrepaymentApplicationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates prepayment application lines for a standard invoice.
    /// </summary>
    public void createPrepaymentApplicationLines()
    {
        VendInvoiceJour advanceVendInvoiceJour;
        AmountCur advanceRemaining;

        if (advanceInvoiceMap)
        {
            MapEnumerator advanceInvoiceMapEnumerator = advanceInvoiceMap.getEnumerator();
            AmountCur totalInvoiceAmount = this.getInvoiceTotalAmount();

            ttsbegin;
            while (advanceInvoiceMapEnumerator.moveNext() && (totalInvoiceAmount > 0))
            {
                advanceVendInvoiceJour = advanceInvoiceMapEnumerator.currentKey();
                advanceRemaining = advanceInvoiceMapEnumerator.currentValue();

                if (totalInvoiceAmount >= advanceRemaining)
                {
                    VendInvoiceInfoLine createdPrepaymentVendInvoiceInfoLine = this.createPrepaymentLine(vendInvoiceInfoTable, advanceVendInvoiceJour, advanceRemaining);
                    this.createAdvanceApplicationTrans(vendInvoiceInfoTable, advanceVendInvoiceJour, advanceRemaining, createdPrepaymentVendInvoiceInfoLine);
                }
                else
                {
                    VendInvoiceInfoLine createdPrepaymentVendInvoiceInfoLine = this.createPrepaymentLine(vendInvoiceInfoTable, advanceVendInvoiceJour, totalInvoiceAmount);
                    this.createAdvanceApplicationTrans(vendInvoiceInfoTable, advanceVendInvoiceJour, totalInvoiceAmount, createdPrepaymentVendInvoiceInfoLine);
                }

                totalInvoiceAmount -= advanceRemaining;
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendInvoiceAutomationPrepaymentApplicationLines</Name>
				<Source><![CDATA[
    internal boolean createVendInvoiceAutomationPrepaymentApplicationLines()
    {
        boolean ret;

        if (advanceInvoiceMap && VendAutomateVendorInvoicesFeature::isEnabled()
            && VendParameters::find().AutomationPrepaymentApplication == NoYes::Yes)
        {
            if (this.getTotalPrepaymentAmount() <= this.getInvoiceTotalAmount())
            {
                this.createPrepaymentApplicationLines();
                ret = true;
            }
            else
            {
                ret = checkFailed("@AccountsPayable:AutomationPrepaymentApplicationFailure");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdvanceApplicationTrans</Name>
				<Source><![CDATA[
    private void createAdvanceApplicationTrans(VendInvoiceInfoTable _vendInvoiceInfoTable, VendInvoiceJour _vendInvoiceJour, Amount _advanceAmount, VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        VendAdvanceApplicationTrans vendAdvanceApplicationTrans;
        vendAdvanceApplicationTrans.InvoiceId = _vendInvoiceInfoTable.RecId;
        vendAdvanceApplicationTrans.AdvanceInvoiceId = _vendInvoiceJour.RecId;
        vendAdvanceApplicationTrans.UnpostedInvoiceRecId = _vendInvoiceInfoTable.RecId;
        vendAdvanceApplicationTrans.AdvancedInvoiceHeaderRecId = _vendInvoiceJour.RecId;
        vendAdvanceApplicationTrans.AppliedAmount = (-_advanceAmount);
        vendAdvanceApplicationTrans.AdvanceApplicationId = _vendInvoiceInfoLine.RecId;
        vendAdvanceApplicationTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrepaymentLine</Name>
				<Source><![CDATA[
    private VendInvoiceInfoLine createPrepaymentLine(VendInvoiceInfoTable _vendInvoiceInfoTable, VendInvoiceJour _advanceVendInvoiceJour, Amount _advanceAmount)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        vendInvoiceInfoTable advanceVendInvoiceInfoTable;
        VendInvoiceJour advanceVendInvoiceJour;
        AccountingDistribution accountingDistribution;
        VendInvoiceTrans advanceVendInvoiceTransLine;
        boolean isProjEnabled;
        AmountCur prepaymentApplicationAmount = (-1 * _advanceAmount);

        select firstonly SourceDocumentLine, ProcurementCategory from advanceVendInvoiceTransLine
            exists join advanceVendInvoiceJour
                where advanceVendInvoiceJour.RecId == _advanceVendInvoiceJour.RecId
                && advanceVendInvoiceJour.PurchID == advanceVendInvoiceTransLine.PurchId
                && advanceVendInvoiceJour.InvoiceId == advanceVendInvoiceTransLine.InvoiceId
                && advanceVendInvoiceJour.InvoiceDate == advanceVendInvoiceTransLine.InvoiceDate
                && advanceVendInvoiceJour.NumberSequenceGroup == advanceVendInvoiceTransLine.NumberSequenceGroup
                && advanceVendInvoiceJour.InternalInvoiceId == advanceVendInvoiceTransLine.InternalInvoiceId;

        if (advanceVendInvoiceTransLine)
        {
            PurchCategory procurementCategory = advanceVendInvoiceTransLine.ProcurementCategory;

            //retrieves ledger dimension for posted prepayment invoice
            select firstonly LedgerDimension from accountingDistribution
                    where accountingDistribution.SourceDocumentLine == advanceVendInvoiceTransLine.SourceDocumentLine;

            vendInvoiceInfoLine.ParmId = _vendInvoiceInfoTable.ParmId;
            vendInvoiceInfoLine.TableRefId = _vendInvoiceInfoTable.TableRefId;
            vendInvoiceInfoLine.InvoiceAccount = _vendInvoiceInfoTable.InvoiceAccount;
            vendInvoiceInfoLine.ProcurementCategory = procurementCategory;
            vendInvoiceInfoLine.OrderAccount = _vendInvoiceInfoTable.InvoiceAccount;
            vendInvoiceInfoLine.CurrencyCode = _vendInvoiceInfoTable.CurrencyCode;
            vendInvoiceInfoLine.AdvanceApplicationId = _advanceVendInvoiceJour.RecId;
            vendInvoiceInfoLine.LineType = PurchInvoiceLineType::AdvanceApplication;

            vendInvoiceInfoLine.defaultRow(null, null, -1.0);

            vendInvoiceInfoLine.DefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(accountingDistribution.LedgerDimension);
            vendInvoiceInfoLine.LineAmount = prepaymentApplicationAmount;
            vendInvoiceInfoLine.ReceiveNow = 1.0;

            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                VendInvoiceInfoLineTaxExtension_IN vendInvoiceInfoLineTaxExtension_IN = vendInvoiceInfoLine.vendInvoiceInfoLineTaxExtension_IN();
                vendInvoiceInfoLine.packVendInvoiceInfoLineTaxExtension_IN(vendInvoiceInfoLineTaxExtension_IN);
            }

            if (PurchTable::find(_vendInvoiceInfoTable.PurchId).ProjId)
            {
                if (!vendInvoiceInfoLine.InventTransId)
                {
                    NumberSeq numberSeq = NumberSeq::newGetNum(InventParameters::numRefInventTransId());
                    vendInvoiceInfoLine.InventTransId = numberSeq.num();
                }
                vendInvoiceInfoLine.ReceiveNow = (prepaymentApplicationAmount < 0)? -1 : 1;
                vendInvoiceInfoLine.PurchPrice = abs(prepaymentApplicationAmount);
                isProjEnabled = true;
            }

            vendInvoiceInfoLine.insert(false);

            if (isProjEnabled)
            {
                VendInvoiceInfoLine_project::createFromVendInvoiceInfoLine(vendInvoiceInfoLine, vendInvoiceInfoTable.PurchId, procurementCategory);
            }
        }

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPrepaymentApplicationPending</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method determines of there is any prepayment invoice that can be applied to the standard invoice.
    /// </summary>
    /// <param name="_processAllPurchaseOrders">
    /// This boolean value determines if we need to process all the purchase orders related to the invoice.
    /// </param>
    /// <returns>
    /// True if there is a pending prepayment application; otherwise false.
    /// </returns>
    public boolean hasPrepaymentApplicationPending(boolean _processAllPurchaseOrders = false)
    {
        boolean hasPrepaymentApplicationPending;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VendInvoiceJour localVendInvoiceJour;
        VendTrans vendTrans, vendTransOffset;
        PurchPrepayTable purchPrepayTable;
        VendInvoiceTrans vendInvoiceTransApplication, vendInvoiceTransReversal;
        Amount appliedAdvanceAmount, reverseApplicationAmount, advanceRemaining;

        while select OrigPurchId from vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == vendInvoiceInfoTable.ParmId
                && vendInvoiceInfoSubTable.TableRefId == vendInvoiceInfoTable.TableRefId
                && vendInvoiceInfoSubTable.OrigPurchId != ''
        {
            while select localVendInvoiceJour
                order by localVendInvoiceJour.InvoiceDate
                where localVendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance
                    && localVendInvoiceJour.InvoiceAccount == vendInvoiceInfoTable.InvoiceAccount
                    && localVendInvoiceJour.PurchId == vendInvoiceInfoSubTable.OrigPurchId
                    && localVendInvoiceJour.CurrencyCode == vendInvoiceInfoTable.CurrencyCode
                join AmountCur, SettleAmountCur, OffsetRecid from vendTrans
                    where vendTrans.Voucher == localVendInvoiceJour.LedgerVoucher
                join PrepayApplicationRemaining from purchPrepayTable
                    where purchPrepayTable.PurchTable == localVendInvoiceJour.PurchId
                    && purchPrepayTable.PrepayApplicationRemaining > 0
            {
                if (VendAdvanceInvoice_Application::getVendTransNotReversed(vendTrans))
                {
                    if (abs(vendTrans.AmountCur) == abs(vendTrans.SettleAmountCur))
                    {
                        appliedAdvanceAmount = 0.0; //initialize amounts as total applied or reverse amount for each partial prepayment is required
                        reverseApplicationAmount = 0.0;

                        //sums up the prepayment application amounts
                        while select RecId, LineAmount from vendInvoiceTransApplication
                            where vendInvoiceTransApplication.LineType == PurchInvoiceLineType::AdvanceApplication
                            && vendInvoiceTransApplication.AdvanceApplicationId == localVendInvoiceJour.RecId
                        {
                            appliedAdvanceAmount += vendInvoiceTransApplication.LineAmount;

                            //sums up the prepayment reverse application amounts
                            select sum(LineAmount) from vendInvoiceTransReversal
                                            where vendInvoiceTransReversal.LineType == PurchInvoiceLineType::ReverseAdvanceApplication
                                            && vendInvoiceTransReversal.AdvanceApplicationId == vendInvoiceTransApplication.RecId;

                            reverseApplicationAmount += vendInvoiceTransReversal.LineAmount;
                        }

                        //prepayment application remaining is prepayment application amount which was settled minus any previously applied prepayment amount
                        //plus any prepayment application reversal amount
                        advanceRemaining = abs(vendTrans.SettleAmountCur) - abs(appliedAdvanceAmount) + abs(reverseApplicationAmount);

                        // <GIN>
                        // Include India withholding tax amount into prepayment application remaining amount.
                        if (TaxWithholdParameters_IN::checkTaxParameters())
                        {
                            advanceRemaining -= TaxWithholdTrans_IN::getWithholdingTaxAmountCur_IN(vendInvoiceInfoSubTable.OrigPurchId, localVendInvoiceJour.LedgerVoucher, localVendInvoiceJour.InvoiceDate);
                        }
                        // </GIN>

                        if (advanceRemaining > 0)
                        {
                            // If any amount of the current prepayment invoice has been applied to pending invoice(s), the amount available for automatic
                            // application needs to be decreased by the sum of the total amount applied to pending invoice(s).
                            advanceRemaining -= abs(VendAdvanceInvoice_Application::totalUnpostedAdvanceAppliedAmountForPrepayInvoice(localVendInvoiceJour.RecId));
                        }

                        if (advanceRemaining > 0)
                        {
                            hasPrepaymentApplicationPending = true;
                            advanceInvoiceMap.insert(localVendInvoiceJour, advanceRemaining);
                            totalPrepaymentAmount += advanceRemaining;
                        }

                        if (!_processAllPurchaseOrders && hasPrepaymentApplicationPending)
                        {
                            break;
                        }
                    }
                }
            }
        }
        return hasPrepaymentApplicationPending;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>