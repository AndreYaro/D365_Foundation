<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcRestartResume</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles restart or resume of master planning batch runs.
/// </summary>
internal final class ReqCalcRestartResume
{
    private ReqProcessId processId;
    private RefRecId batchJobRecId;
    private DataAreaId dataAreaId;
    private List terminatedBatches;

    private ReqProcessList reqProcessList;
    private ReqCalcUpdate updateMode;
    private Batch terminatedMainThreadBatch;
    private ReqCalcScheduleItemTable mainThreadReqCalc;
       
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqCalcRestartResume construct(ReqProcessId _processId, RefRecId _batchJobRecId, DataAreaId _dataAreaId, List _terminatedBatches)
    {
        ReqCalcRestartResume restartResume = new ReqCalcRestartResume();
        restartResume.setProcessId(_processId);
        restartResume.setBatchJobRecId(_batchJobRecId);
        restartResume.setDataAreaId(_dataAreaId);
        restartResume.setTerminatedBatches(_terminatedBatches);

        return restartResume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the resume or restart.
    /// </summary>
    public void run()
    {
        changecompany(dataAreaId)
        {
            this.initReqProcessList();
            this.initMainThreadInfo();
            
            if (this.isMRPMarkedAsCancelled())
            {
                using (var tel = this.createInstrumentation(ReqInstrumentationActivities::ResumeProcessCancelled))
                {
                    this.markTerminatedHelperBatchesAsEnded();
                    this.preventAutoRestartOfMainBatch();
                }
            }
            else
            {
                if (this.useResume())
                {
                    this.resumeMRP();
                }
                else
                {
                    this.restartMRP();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReqProcessList</Name>
				<Source><![CDATA[
    private void initReqProcessList()
    {
        reqProcessList = ReqProcessList::findWithCacheDisabled(processId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMainThreadInfo</Name>
				<Source><![CDATA[
    private void initMainThreadInfo()
    {
        terminatedMainThreadBatch = this.getExecutingBatchForMainThread();
        if (terminatedMainThreadBatch)
        {
            mainThreadReqCalc = terminatedMainThreadBatch.object() as ReqCalcScheduleItemTable;
            if (mainThreadReqCalc)
            {
                mainThreadReqCalc.unpack(terminatedMainThreadBatch.Parameters);
            }
        }

        ReqCalc reqCalc = ReqCalcScheduleItemTable::newStandard();
        reqCalc.unpackThreadData(reqProcessList.Parameters);
        updateMode = ReqCalc.parmReqCalcUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMRPMarkedAsCancelled</Name>
				<Source><![CDATA[
    private boolean isMRPMarkedAsCancelled()
    {
        return !reqProcessList || reqProcessList.Cancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTerminatedHelperBatchesAsEnded</Name>
				<Source><![CDATA[
    private boolean markTerminatedHelperBatchesAsEnded()
    {
        boolean helperTerminated = false;
        
        ttsbegin;
        
        ListEnumerator batchEnumerator = terminatedBatches.getEnumerator();
        while (batchEnumerator.moveNext())
        {
            Batch batch = batchEnumerator.current();            
            if (batch.ClassNumber == classNum(ReqProcessExternThread))
            {
                this.updateBatchAsFinished(batch.RecId);                
                helperTerminated = true;
            }
        }
        
        ttscommit;

        return helperTerminated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preventAutoRestartOfMainBatch</Name>
				<Source><![CDATA[
    private void preventAutoRestartOfMainBatch()
    {
        if (terminatedMainThreadBatch)
        {
            this.updateBatchAsFinished(terminatedMainThreadBatch.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBatchAsFinished</Name>
				<Source><![CDATA[
    private void updateBatchAsFinished(RefRecId terminatedBatchThreadRecId)
    {
        Batch batch;
        Batch terminatedBatchThreadBeforeUpdate;
        Batch terminatedBatchThreadAfterUpdate;

        var logger = SysInstrumentationLoggerFactory::createLogger(classStr(ReqCalcRestartResume));
        terminatedBatchThreadBeforeUpdate = Batch::findRecId(terminatedBatchThreadRecId);

        batch.skipAosValidation(true);

        logger.logInformation(strFmt('Updating the status of the terminated Batch task with RecId: %1 to Finished during RestartResume', terminatedBatchThreadRecId));
        ttsbegin;
        update_recordset batch
            setting Status = batchStatus::Finished, EndDateTime = DateTimeUtil::utcNow()
            where batch.RecId == terminatedBatchThreadBeforeUpdate.RecId
                && batch.RecVersion == terminatedBatchThreadBeforeUpdate.RecVersion;
        ttscommit;

        terminatedBatchThreadAfterUpdate = Batch::findRecId(terminatedBatchThreadRecId);

        if (terminatedBatchThreadAfterUpdate.Status == BatchStatus::Finished)
        {
            logger.logInformation('Successfully updated the status of the terminated Batch task to Finished during RestartResume');
            return;
        }

        if (terminatedBatchThreadBeforeUpdate.RecVersion != terminatedBatchThreadAfterUpdate.RecVersion)
        {
            logger.logError('An update conflict occured while trying to update the status of the terminated Batch task to Finished during RestartResume');
            throw Exception::UpdateConflict;
        }

        logger.logError('An error occured while trying to update the status of the terminated Batch task to Finished during RestartResume');
        throw Exception::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutingBatchForMainThread</Name>
				<Source><![CDATA[
    private Batch getExecutingBatchForMainThread()
    {
        ListEnumerator batchEnumerator = terminatedBatches.getEnumerator();
        while (batchEnumerator.moveNext())
        {
            Batch batch = batchEnumerator.current();
            if (batch.ClassNumber == classNum(ReqCalcScheduleItemTable))
            {
                return batch;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useResume</Name>
				<Source><![CDATA[
    private boolean useResume()
    {
        return (updateMode == ReqCalcUpdate::Regeneration && reqProcessList.status >= ReqProcessStatus::PreCoverage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isResumeDisabledForOriginalMainThreadBatch</Name>
				<Source><![CDATA[
    private boolean isResumeDisabledForOriginalMainThreadBatch()
    {
        // After first resume, task for MainThreadBatch is recreated as runtime job with retry logic disabled.
        // So original main thread job is not runtime,. It also be available only during first restart.
        return terminatedMainThreadBatch.RunTimeTask == NoYes::No && terminatedMainThreadBatch.RetriesOnFailure == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resumeMRP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resume the MRP, by reset the executing tasks for the dead thread(s) and adding a new ReqCalcScheduleItemTable runtime task in resume mode.
    /// </summary>
    private void resumeMRP()
    {
        using (var resumeTel = this.createInstrumentation(ReqInstrumentationActivities::ResumeBatch))
        {
            boolean retryCountExceeded = false;
        
            ttsbegin;

            this.resetExecutingTasksForTerminatedThreads();

            if (terminatedMainThreadBatch)
            {
                if (terminatedMainThreadBatch.RetryCount < terminatedMainThreadBatch.RetriesOnFailure)
                {
                    using (var tel = this.createInstrumentation(ReqInstrumentationActivities::ResumeCreateNewMainThread))
                    {
                        this.preventAutoRestartOfMainBatch();
                        this.addNewReqCalcRuntimeTask();
                        this.markReqLogWithFailure("@SCMPlanning:ReqCalcWasResumed");
                    }
                }
                else
                {
                    using (var tel = this.createInstrumentation(ReqInstrumentationActivities::ResumeRetryCountExceeded))
                    {
                        retryCountExceeded = true;
                        ReqTransCache::cancelFailedProcess(processId);

                        str logWarningMessage;

                        if (RecCalcRestartResumeDisabledRetryWarningFlight::instance().isEnabled() 
                            && this.isResumeDisabledForOriginalMainThreadBatch())
                        {
                            logWarningMessage = "@SCMPlanning:ReqCalcResumeDisabled";
                        }
                        else
                        {
                            logWarningMessage = "@SCMPlanning:ReqCalcResumeRetryCountExceeded";
                        }

                        this.markReqLogWithFailure(logWarningMessage);
                    }
                }
            }
        
            if (this.markTerminatedHelperBatchesAsEnded() && !retryCountExceeded)
            {
                using (var tel = this.createInstrumentation(ReqInstrumentationActivities::ResumeHelpersEnded))
                {
                    // Record that the error happened. MRP will just continue with one less helper.
                    this.markReqLogWithFailure("@SCMPlanning:ReqCalcHelperFailure");
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstrumentation</Name>
				<Source><![CDATA[
    private SysInstrumentationSegment createInstrumentation(str _event)
    {
        SysInstrumentationAdditionalParameters parameters = SysInstrumentationAdditionalParameters::construct();
        parameters.add(ReqInstrumentationActivities::ParmProcessId, processId);
        parameters.add(ReqInstrumentationActivities::ParmBatchJobId, int642Str(batchJobRecId));
        parameters.add(ReqInstrumentationActivities::parmDataAreaId, int642Str(CompanyInfo::findDataArea(dataAreaId).RecId));

        SysInstrumentationSegment segment = ReqInstrumentationSegmentFactory::create(_event, ReqInstrumentationActivities::DefaultActivityId, parameters);

        return segment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewReqCalcRuntimeTask</Name>
				<Source><![CDATA[
    private void addNewReqCalcRuntimeTask()
    {
        if (mainThreadReqCalc)
        {
            mainThreadReqCalc.parmResumeProcessId(processId);
            mainThreadReqCalc.batchInfo().resetBatchHeader();                       

            RunAsPermission perm = new RunAsPermission(terminatedMainThreadBatch.CreatedBy);
            perm.assert();
               
            runAs(terminatedMainThreadBatch.CreatedBy, classnum(ReqCalcRestartResume), staticMethodStr(ReqCalcRestartResume,addNewReqCalcRuntimeTaskToBatchJob), [batchJobRecId, terminatedMainThreadBatch.RecId, mainThreadReqCalc.pack()], dataAreaId);

            CodeAccessPermission::revertAssert();                    
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewReqCalcRuntimeTaskToBatchJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new ReqCalcScheduleItemTable and adds it to a runtime job.
    /// </summary>
    /// <param name = "_args">A container with the format: RecId of BatchJob, RecId of main batch task, packed ReqCalc class.</param>
    public static void addNewReqCalcRuntimeTaskToBatchJob(container _args)
    {
        RecId batchJobRecId;
        RecId terminatedMainThreadBatchRecId;
        container reqCalcPacked;

        [batchJobRecId, terminatedMainThreadBatchRecId, reqCalcPacked] = _args;

        ReqCalcScheduleItemTable reqCalc = ReqCalcScheduleItemTable::construct();
        reqcalc.unpack(reqCalcPacked);
        
        BatchHeader batchHeader = BatchHeader::construct(batchJobRecId);
        batchHeader.addRuntimeTask(reqCalc, terminatedMainThreadBatchRecId);
        reqCalc.batchInfo().parmRetriesOnFailure(0);
        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markReqLogWithFailure</Name>
				<Source><![CDATA[
    private void markReqLogWithFailure(str _warningMessage)
    {
        ReqPlanData reqPlanData = ReqPlanData::newReqPlanId(reqProcessList.ReqPlanId);
        reqPlanData.parmProcessId(processId);

        reqPlanData.initReqLog(ReqCalcUpdate::Regeneration, processId, true);
        reqPlanData.initReqLogCoverage(processId);

        warning(_warningMessage);

        reqPlanData.insertReqLog(false,
                                 true,
                                 true,
                                 0,
                                 processId,
                                 null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetExecutingTasksForTerminatedThreads</Name>
				<Source><![CDATA[
    private void resetExecutingTasksForTerminatedThreads()
    {
        ListEnumerator batchEnumerator = terminatedBatches.getEnumerator();
        while (batchEnumerator.moveNext())
        {
            Batch batch = batchEnumerator.current();
            SessionId sessionId = batch.SessionIdx;

            ReqProcessThreadList thread = ReqProcessThreadList::findByProcessIdAndSessionId(processId, sessionId);
            while (thread)
            {
                ReqCalcTaskController::resetAssignedNotCompletedBundlesProcessThread(processId, thread.ThreadId);
                
                // In case of multiple resumes of the same process, multiple records could exist in the thread list for a session.
                next thread;
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>restartMRP</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the main thread is still alive, it will take care of cleaning up after itself.
    /// If the main thread was killed, batch server will restart it, but we need to clean up the process data after the failed one.
    /// </summary>
    private void restartMRP()
    {
        using (var restartTel = this.createInstrumentation(ReqInstrumentationActivities::RestartingBatch))
        {
            ttsbegin;

            // Mark current process as cancelled due to infrastructure failure
            ReqTransCache::cancelFailedProcess(processId);
                
            if (terminatedMainThreadBatch)
            {
                Batch recoveryBatch;
                boolean recoveryScheduled = false;

                while select recoveryBatch
                where recoveryBatch.BatchJobId == batchJobRecId
                   && recoveryBatch.ClassNumber == classNum(ReqCalcFailureRecovery)
                {
                    ReqCalcFailureRecovery scheduledRecovery = recoveryBatch.object();
                    scheduledRecovery.unpack(recoveryBatch.Parameters);

                    if (scheduledRecovery.parmProcessId() == processId)
                    {
                        recoveryScheduled = true;
                    }
                }

                if (!recoveryScheduled)
                {
                    using (var tel = this.createInstrumentation(ReqInstrumentationActivities::RestartAddReqCalcFailureRecovery))
                    {
                        RunAsPermission perm = new RunAsPermission(terminatedMainThreadBatch.CreatedBy);
                        perm.assert();
                
                        runAs(terminatedMainThreadBatch.CreatedBy, classnum(ReqCalcFailureRecovery), staticMethodStr(ReqCalcFailureRecovery,scheduleCleanupTask ), [batchJobRecId, processId, terminatedMainThreadBatch.RecId], dataAreaId);

                        CodeAccessPermission::revertAssert();
                    }
                }
            }

            this.markTerminatedHelperBatchesAsEnded();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcessId</Name>
				<Source><![CDATA[
    protected void setProcessId(ReqProcessId _processId)
    {
        processId = _processId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBatchJobRecId</Name>
				<Source><![CDATA[
    protected void setBatchJobRecId(RefRecId _batchJobRecId)
    {
        batchJobRecId = _batchJobRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataAreaId</Name>
				<Source><![CDATA[
    protected void setDataAreaId(DataAreaId _dataAreaId)
    {
        dataAreaId = _dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTerminatedBatches</Name>
				<Source><![CDATA[
    protected void setTerminatedBatches(List _terminatedBatches)
    {
        terminatedBatches = _terminatedBatches;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>