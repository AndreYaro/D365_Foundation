<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCleanupInventSumService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCleanupInventSumService</c> class provides the service operation for
///    cleaning up closed tracking dimension associated <c>InventSum</c> records.
/// </summary>
public abstract class InventCleanupInventSumService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addModifiedDateTimeFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies a not updated within number of days filter to the <c>ModifiedDateTime</c> field on the <c>InventSum</c> table.
    /// </summary>
    /// <param name="_query">
    ///    A <c>Query</c> object containing a query range on the <c>ModifiedDateTime</c> field.
    /// </param>
    /// <param name="_deleteWhenNotUpdatedForDays">
    ///    The number of not updated days.
    /// </param>
    protected void addModifiedDateTimeFilter(Query _query, PositiveDays _deleteWhenNotUpdatedForDays)
    {
        _query.dataSourceTable(tableNum(InventSum)).findRange(fieldNum(InventSum, ModifiedDateTime)).value(this.modifiedDateTimeQueryExpression(_deleteWhenNotUpdatedForDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cleans up the specified <c>InventSum</c> record.
    /// </summary>
    /// <param name="_inventSum">
    ///    The <c>InventSum</c> record to be cleaned up.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record associated with the <c>InventSum</c> record.
    /// </param>
    /// <returns>
    ///    true if <c>InventSum</c> record was cleaned up; otherwise, false.
    /// </returns>
    protected abstract boolean cleanUpInventSum(InventSum _inventSum, InventDim _inventDim)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the specified <c>InventSum</c> record.
    /// </summary>
    /// <param name="_inventSum">
    ///    The <c>InventSum</c> record to be deleted.
    /// </param>
    protected void deleteInventSum(InventSum _inventSum)
    {
        _inventSum.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertClosedInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Insert a new closed <c>InventSum</c> record.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID to insert an <c>InventSum</c> record for.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID to insert an <c>InventSum</c> record for.
    /// </param>
    protected void insertClosedInventSum(ItemId _itemId, InventDimId _inventDimId)
    {
        InventSum   newInventSum;

        newInventSum.initValue();
        newInventSum.ItemId         = _itemId;
        newInventSum.InventDimId    = _inventDimId;

        newInventSum.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventSumExisting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries whether an <c>InventSum</c> record exists matching the specified parameters.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID to query for.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID to query for.
    /// </param>
    /// <returns>
    ///    true if <c>InventSum</c> record exists; otherwise, false.
    /// </returns>
    protected boolean isInventSumExisting(ItemId _itemId, InventDimId _inventDimId)
    {
        return InventSum::exist(_itemId, _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDateTimeQueryExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a not updated within number of days filter.
    /// </summary>
    /// <param name = "_deleteWhenNotUpdatedForDays">The number of not updated days.</param>
    /// <returns>Date filter as a string.</returns>
    protected str modifiedDateTimeQueryExpression(PositiveDays _deleteWhenNotUpdatedForDays)
    {
        if (!_deleteWhenNotUpdatedForDays)
        {
            return '';
        }

        return SysQuery::range(DateTimeUtil::minValue(), DateTimeUtil::addDays(DateTimeUtil::utcNow(), -_deleteWhenNotUpdatedForDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>readInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads an <c>InventDim</c> record from the specified query.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object to read from.
    /// </param>
    /// <returns>
    ///    An <c>InventDim</c> record.
    /// </returns>
    protected InventDim readInventDim(QueryRun _queryRun)
    {
        return _queryRun.get(tableNum(InventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>readInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads an <c>InventSum</c> record from the specified query.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object to read from.
    /// </param>
    /// <returns>
    ///    An <c>InventSum</c> record.
    /// </returns>
    protected InventSum readInventSum(QueryRun _queryRun)
    {
        return _queryRun.get(tableNum(InventSum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>readInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads an <c>InventTable</c> record from the specified query.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object to read from.
    /// </param>
    /// <returns>
    ///    An <c>InventTable</c> record.
    /// </returns>
    protected InventTable readInventTable(QueryRun _queryRun)
    {
        return _queryRun.get(tableNum(InventTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProgress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and displays a progress bar.
    /// </summary>
    /// <returns>
    ///    A <c>SysOperationProgress</c> progress bar object.
    /// </returns>
    protected SysOperationProgress showProgress()
    {
        #AviFiles

        SysOperationProgress progress = new SysOperationProgress(0);

        progress.setCaption("@SYS4006021");
        progress.update(true);

        return progress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventSumDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified <c>InventSum</c> record may be deleted.
    /// </summary>
    /// <param name="_inventSum">
    ///    The <c>InventSum</c> record to validate.
    /// </param>
    /// <returns>
    ///    true if the <c>InventSum</c> record may be deleted; otherwise, false.
    /// </returns>
    protected boolean validateInventSumDelete(InventSum _inventSum)
    {
        return _inventSum.validateDelete();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
