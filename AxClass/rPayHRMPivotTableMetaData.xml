<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayHRMPivotTableMetaData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayHRMPivotTableMetaData
{
    Set                             setMeasureFields;     //fieldName
    Set                             setDimensionFields;   //fieldName
    Map                             mapFieldNameCaption;  //fieldName->caption
    Map                             mapRecordsetFields;   //fieldName->[type, len]
    Map                             mapCodeNameFields;    //codeField->[nameField, fieldLabel, showNameCode]
    TmpRPayHRMPivotCodeNameSettings codeNameSettingsTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCodeNameField</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void addCodeNameField(str _fieldCode,str _fieldName, FieldLabel _fieldLabel)
    {
        ;
        mapCodeNameFields.insert(_fieldCode,[_fieldName,_fieldLabel,RPayHRMPivotShowNameCode::Code]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFields</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void addFields(Map _metaDataMap)
    {
        MapIterator                  it = new MapIterator(_metaDataMap);
        FieldName                    fieldName;
        container                    metaDataMapValue;
        FieldLabel                   label;
        RPayHRMPivotTableFieldsGroup pivotTableFieldsGroup;
        Types                        baseType;
        int                          stingLen;
        FieldName                    nameField;
        FieldLabel                   fieldLabel;
        RPayHRMPivotShowNameCode     showNameCode;

        void addField(Set _set)
        {
            if (mapCodeNameFields.exists(fieldName))
            {
                [nameField, fieldLabel, showNameCode] = mapCodeNameFields.lookup(fieldName);
                if (showNameCode == RPayHRMPivotShowNameCode::CodeName ||
                    showNameCode == RPayHRMPivotShowNameCode::NameCode)
                {
                    stingLen += conPeek(_metaDataMap.lookup(nameField), 4);
                }
            }

            mapFieldNameCaption.insert(fieldName, label);
            _set.add(fieldName);
            mapRecordsetFields.insert(fieldName, [baseType, stingLen]);
        }

        while (it.more())
        {
            fieldName             = it.key();
            metaDataMapValue      = it.value();
            label                 = conPeek(metaDataMapValue, 1);
            pivotTableFieldsGroup = conPeek(metaDataMapValue, 2);
            baseType              = conPeek(metaDataMapValue, 3);
            stingLen              = conPeek(metaDataMapValue, 4);

            switch (pivotTableFieldsGroup)
            {
                case RPayHRMPivotTableFieldsGroup::DimensionFields:
                    addField(setDimensionFields);
                break;
                case RPayHRMPivotTableFieldsGroup::MeasureFields:
                    addField(setMeasureFields);
                break;
            }
            it.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCodeNameSettingsTable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void buildCodeNameSettingsTable()
    {
        MapIterator              it = new MapIterator(mapCodeNameFields);

        RPayHRMPivotShowNameCode showNameCode;
        FieldName                codeField;
        FieldName                nameField;
        FieldLabel               fieldLabel;
        ;

        delete_from codeNameSettingsTable;

        while (it.more())
        {
            codeField = it.key();
            [nameField, fieldLabel, showNameCode] = it.value();

            codeNameSettingsTable.NameField     = nameField;
            codeNameSettingsTable.CodeField     = codeField;
            codeNameSettingsTable.ShowNameCode  = showNameCode;
            codeNameSettingsTable.FieldLabel    = fieldLabel;
            codeNameSettingsTable.insert();

            it.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeNameFields</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Map codeNameFields()
    {
        ;
        return mapCodeNameFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeNameSettingsTable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TmpRPayHRMPivotCodeNameSettings codeNameSettingsTable()
    {
        ;
        return codeNameSettingsTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNameCaption</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Map fieldNameCaption()
    {
        ;
        return mapFieldNameCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>measureFields</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Set measureFields()
    {
        ;
        return setMeasureFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void new()
    {
        ;
        setMeasureFields    = new Set(Types::String);
        setDimensionFields  = new Set(Types::String);
        mapFieldNameCaption = new Map(Types::String, Types::String);
        mapRecordsetFields  = new Map(Types::String, Types::Container);
        mapCodeNameFields   = new Map(Types::String, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordsetFields</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Map recordsetFields()
    {
        ;
        return mapRecordsetFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackCodeNameSettings</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void unpackCodeNameSettings(container _conCodeNameSettings)
    {
        Map                      mapCodeNameSettings = Map::create(_conCodeNameSettings);
        MapIterator              it = new MapIterator(mapCodeNameSettings);
        RPayHRMPivotShowNameCode showNameCode, showNameCodeSettings;
        FieldName                codeField;
        FieldName                nameField, nameFieldSettings;
        FieldLabel               fieldLabel, fieldLabelSettings;

        ;
        while (it.more())
        {
            codeField = it.key();
            [nameFieldSettings,fieldLabelSettings,showNameCodeSettings] = it.value();

            if (mapCodeNameFields.exists(codeField))
            {
                [nameField,fieldLabel,showNameCode] = mapCodeNameFields.lookup(codeField);

                if ((nameFieldSettings == nameField) && (showNameCodeSettings != showNameCode))
                {
                    mapCodeNameFields.remove(codeField);
                    mapCodeNameFields.insert(codeField, [nameFieldSettings, fieldLabelSettings, showNameCodeSettings]);
                }
            }
            it.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCodeNameSettingsFromTable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void updateCodeNameSettingsFromTable()
    {
        Map     mapSettings = new Map(Types::String, Types::Container);
        ;

        while select codeNameSettingsTable
        {
            mapSettings.insert(codeNameSettingsTable.CodeField, [codeNameSettingsTable.NameField, codeNameSettingsTable.FieldLabel, codeNameSettingsTable.ShowNameCode]);
        }

        this.unpackCodeNameSettings(mapSettings.pack());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>