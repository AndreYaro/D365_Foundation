<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateRequestByChildren</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetPlanAllocateRequestByChildren</c> class is used to capture the information
///    that is required to allocate budget plans by children budget plans.
/// </summary>
public class BudgetPlanAllocateRequestByChildren extends BudgetPlanAllocateRequestByPlan
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBudgetPlanAllocateType</Name>
				<Source><![CDATA[
    public BudgetPlanAllocateType getBudgetPlanAllocateType()
    {
        return BudgetPlanAllocateType::AllocateByChildren;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean isValid;

        isValid = super();

        // Skip validation when called during allocation schedule event.
        if (this.parmIsCalledFromForm()
            && isValid
            && !BudgetPlanLayoutHelper::canEditBudgetPlanForScenario(parentBudgetPlanHeaderRecId, targetBudgetPlanScenarioRecId))
        {
            // Target scenario MUST be editable for all children plans' layout elements
            throw error("@Budget:UneditableDestinationPlan");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanAllocateRequestByChildren construct()
    {
        return new BudgetPlanAllocateRequestByChildren();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanLineRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets set of source <c>BudgetPlanLine</c> record IDs to allocate.
    /// </summary>
    /// <param name="_parentBudgetPlanHeaderRecId">
    ///    The parent <c>BudgetPlanHeader</c> record ID.
    /// </param>
    /// <param name="_sourceBudgetPlanScenarioRecId">
    ///    The source <c>BudgetPlanScenario</c> record ID to allocate the budget plan lines from.
    /// </param>
    /// <returns>
    ///    The set of source <c>BudgetPlanLine</c> record IDs to allocate.
    /// </returns>
    public static Set getBudgetPlanLineRecIds(
        BudgetPlanHeaderRecId   _parentBudgetPlanHeaderRecId,
        BudgetPlanScenarioRecId _sourceBudgetPlanScenarioRecId)
    {
        BudgetPlanHeader childBudgetPlanHeader;
        BudgetPlanLine   childBudgetPlanLine;
        Set              selectedPlanLines = new Set(typeName2Type(extendedTypeStr(BudgetPlanLineRecId)));

        if (BudgetPlan::doesBudgetPlanHaveChild(_parentBudgetPlanHeaderRecId))
        {
            while select RecId from childBudgetPlanLine
                where childBudgetPlanLine.BudgetPlanScenario == _sourceBudgetPlanScenarioRecId
                exists join childBudgetPlanHeader
                    where childBudgetPlanHeader.RecId == childBudgetPlanLine.BudgetPlanHeader
                        && childBudgetPlanHeader.ParentBudgetPlanHeader == _parentBudgetPlanHeaderRecId
            {
                selectedPlanLines.add(childBudgetPlanLine.RecId);
            }
        }
        else
        {
            error("@Budget:NoAssociatedPlansForAggregationWarning");
        }

        return selectedPlanLines;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>