<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleProjAdvancedJournalExtendedPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     An accounting journalizing rule for project advanced journal source document.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity, MonetaryAmount::ExtendedPrice),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity, MonetaryAmount::Tax),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity, MonetaryAmount::TaxNonRecoverable)]
public class AccJourRuleProjAdvancedJournalExtendedPrice extends AccountingJournalizingRule
{
    ProjAdvancedJournal             projAdvancedJournal;
    ProjAdvancedJournalLine         projAdvancedJournalLine;
    private TaxDirection taxDirection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getJournalAccountEntryLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the ledger account to use to enter a subledger journal entry.
    /// </summary>
    /// <param name="_defaultLedgerDimension">
    ///     The default ledger dimension.
    /// </param>
    /// <param name="_accountingDistributionLedgerDimension">
    ///     The accounting distribution ledger dimension.
    /// </param>
    /// <returns>
    ///     A <c>LedgerDimensionAccount</c> object.
    /// </returns>
    public LedgerDimensionAccount getJournalAccountEntryLedgerDimension(LedgerDimensionDefaultAccount _defaultLedgerDimension, LedgerDimensionAccount _accountingDistributionLedgerDimension)
    {
        return LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(_defaultLedgerDimension, _accountingDistributionLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the accounting rule.
    /// </summary>
    protected void initialize()
    {
        super();

        SourceDocumentLineRecId sourceDocumentLineRecId = sourceDocumentLineItem.parmSourceDocumentLine().RecId;

        if (sourceDocumentLineItem is SourceDocumentLineItemITax)
        {
            sourceDocumentLineRecId = sourceDocumentLineItem.parmParentSourceDocumentLine().RecId;
            SourceDocumentLineItemITax iTax = sourceDocumentLineItem as SourceDocumentLineItemITax;
            taxDirection = iTax.parmTaxDirection();
        }

        projAdvancedJournalLine = ProjAdvancedJournalLine::findBySourceDocumentLine(sourceDocumentLineRecId);
        projAdvancedJournal = ProjAdvancedJournal::find(projAdvancedJournalLine.projAdvancedJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcurementIntegrationPostingType</Name>
				<Source><![CDATA[
    private boolean isProcurementIntegrationPostingType()
    {
        boolean isValidPostingType;
        
        if (projAdvancedJournalLine.DocumentType == ProjAdvancedJournalLineDocType::Purchase
            && projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Ledger
            && ProjProjectOperationsIntegrationFeatureHelper::isProcurementIntegrationEnabledWithProjOps())
        {
            ProjCDSActualsImport import = ProjCDSActualsImport::findByAdvancedJournalLine(projAdvancedJournalLine.RecId);
            
            if (ProjVendInvIntegrationAdvJournalPostingTypeFlight::instance().isEnabled())
            {
                isValidPostingType = this.isProcurementIntegrationEligibleTransType(import);
            }
            else if (import && import.TransType == ProjCDSTransType::Cost)
            {
                isValidPostingType =  true;
            }
        }

        return isValidPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcurementIntegrationEligibleTransType</Name>
				<Source><![CDATA[
    protected boolean isProcurementIntegrationEligibleTransType(ProjCDSActualsImport _import)
    {
        //Returning a default value as false in this method as the logic lies in the extension class in Project Operations model.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        LedgerPostingType ledgerPostingType;

        if (taxDirection == TaxDirection::UseTax && ProjAdvancedJournalUseTaxFlight::instance().isEnabled())
        {
            ledgerPostingType = LedgerPostingType::Tax;
        }
        else
        {
            switch (projAdvancedJournalLine.TransType)
            {
                case (ProjTransType::Hour):
                    ledgerPostingType = this.assignLedgerPostingTypeForHour();
                    break;

                case (ProjTranstype::Cost):
                    ledgerPostingType = this.assignLedgerPostingTypeForCost();
                    break;
        
                case (ProjTranstype::Item):
                    ledgerPostingType = this.assignLedgerPostingTypeForItem();
                    break;

                default:
                    ledgerPostingType = LedgerPostingType::ProjCost;
                    break;
            }
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignLedgerPostingTypeForCost</Name>
				<Source><![CDATA[
    private LedgerPostingType assignLedgerPostingTypeForCost()
    {
        LedgerPostingType               ledgerPostingType = LedgerPostingType::LedgerJournal;
        LedgerDimensionAccount          ledgerDimension;

        switch (projAdvancedJournalLine.OffsetAccountType)
        {
            case LedgerJournalACType::Bank :
                ledgerPostingType = LedgerPostingType::Bank;
                break;

            case LedgerJournalACType::Cust :
                ledgerPostingType = LedgerPostingType::CustBalance;
                break;

            case LedgerJournalACType::Vend:
                ledgerPostingType = LedgerPostingType::VendBalance;
                break;

            case LedgerJournalACType::Ledger:
                if (this.isProcurementIntegrationPostingType())
                {
                    ledgerPostingType = LedgerPostingType::ProjProcurementIntegration;
                }
                else
                {
                    ledgerPostingType = LedgerPostingType::LedgerJournal;
                }
                break;

            case LedgerJournalACType::Project:
            case LedgerJournalACType::FixedAssets:
            default:
                throw error(strFmt("@Proj:AccountTypeIsNotSupported", projAdvancedJournalLine.OffsetAccountType));
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignLedgerPostingtypeForHour</Name>
				<Source><![CDATA[
    private LedgerPostingType assignLedgerPostingtypeForHour()
    {
        LedgerPostingType ledgerPostingType = LedgerPostingType::ProjPayrollAllocation;

        if (this.isProcurementIntegrationPostingType())
        {
            ledgerPostingType = LedgerPostingType::ProjProcurementIntegration;
        }
        

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignLedgerPostingTypeForItem</Name>
				<Source><![CDATA[
    private LedgerPostingType assignLedgerPostingTypeForItem()
    {
        LedgerPostingType   ledgerPostingType = LedgerPostingType::LedgerJournal;

        if (projAdvancedJournalLine.DocumentType == ProjAdvancedJournalLineDocType::Usage)
        {
            ledgerPostingType = LedgerPostingType::InventIssue;
        }
        else if (this.isProcurementIntegrationPostingType())
        {
            ledgerPostingType = LedgerPostingType::ProjProcurementIntegration;
        }
        else
        {
            ledgerPostingType = LedgerPostingType::ProjCost;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        if (this.parmAmount() >= 0)
        {
            return DebitCredit::Credit;
        }
        else
        {
            return DebitCredit::Debit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>