<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceListParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailPriceListParameters</c> class contains parameters to update and generate report.
/// </summary>
class RetailPriceListParameters
{
    date dateFrom;
    date dateTo;
    str storeId;
    str displayStore;
    str operatingUnitNumber;
    boolean calculateVariant;
    boolean checkInventoryAvailability;
    boolean displayPriceChangesOnly;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiate a new parameter object based on the name of the report.
    /// </summary>
    public void new(str _reportName)
    {
        dateFrom = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        dateTo = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>untouched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Untouched.
    /// </summary>
    /// <returns>A boolean value.</returns>
    public boolean untouched()
    {
        return dateFrom == dateTo &&
            dateFrom == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) &&
            !storeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets from date.
    /// </summary>
    /// <param name = "_dateFrom">From date.</param>
    /// <returns>Date.</returns>
    public date parmDateFrom(date _dateFrom = dateFrom)
    {
        dateFrom = _dateFrom;
        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets to date.
    /// </summary>
    /// <param name = "_dateTo">To date.</param>
    /// <returns>Date.</returns>
    public date parmDateTo(date _dateTo = dateTo)
    {
        dateTo = _dateTo;
        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStoreId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets store id.
    /// </summary>
    /// <param name = "_storeId">Store id.</param>
    /// <returns>Store id.</returns>
    public str parmStoreId(str _storeId = storeId)
    {
        storeId = (_storeId == "@Retail:RetailReportDefaultStoreDisplay") ? '' : _storeId;
        displayStore = System.String::IsNullOrWhiteSpace(storeId) ? "@Retail:RetailReportDefaultStoreDisplay" : storeId;
        return storeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display store.
    /// </summary>
    /// <param name = "_displayStore">A display store value.</param>
    /// <returns>Store.</returns>
    public str parmDisplayStore(str _displayStore = displayStore)
    {
        displayStore = _displayStore;
        return displayStore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOperatingUnitNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the value of the store operating unit number parameter.
    /// </summary>
    /// <returns>Operating unit number for the selected store.</returns>
    public str parmOperatingUnitNumber(str _operatingUnitNumber = operatingUnitNumber)
    {
        operatingUnitNumber = _operatingUnitNumber;
        return operatingUnitNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculateVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate variant.
    /// </summary>
    /// <param name = "_calculateVariant">Enable variant calculation.</param>
    /// <returns>A boolean value.</returns>
    public boolean parmCalculateVariant(boolean _calculateVariant = calculateVariant)
    {
        calculateVariant = _calculateVariant;
        return calculateVariant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckInventoryAvailability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable inventory availability check.
    /// </summary>
    /// <param name = "_checkInventoryAvailability">Enable inventory availability check.</param>
    /// <returns>A boolean value.</returns>
    public boolean parmCheckInventoryAvailability(boolean _checkInventoryAvailability = checkInventoryAvailability)
    {
        checkInventoryAvailability = _checkInventoryAvailability;
        return checkInventoryAvailability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayPriceChangesOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable price changes only.
    /// </summary>
    /// <param name = "_displayPriceChangesOnly">Enable price changes only.</param>
    /// <returns>A boolean value.</returns>
    public boolean parmDisplayPriceChangesOnly(boolean _displayPriceChangesOnly = displayPriceChangesOnly)
    {
        displayPriceChangesOnly = _displayPriceChangesOnly;
        return displayPriceChangesOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventoryAvailabilityForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether there is available inventory for a given channel and product.
    /// </summary>
    /// <param name = "localChannelTable">target channel</param>
    /// <param name = "localInventTable">target product</param>
    /// <param name = "localInventDim">target product dimension</param>
    /// <returns>true if there is available inventory for a given channel and product; otherwise, false.</returns>
    public static boolean checkInventoryAvailabilityForProduct(RetailChannelTable localChannelTable, InventTable localInventTable, InventDIM localInventDim)
    {
        InventDim inventAvaDim, inventAvaDimCopy;
        InventSum inventSum;
        boolean inventResult = false;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select InventColorId, InventSizeId, InventStyleId, InventVersionId, configId, AvailPhysical from inventSum
            where  inventSum.ItemId == localInventTable.ItemId
                && inventSum.InventLocationId == localChannelTable.inventLocation
                && inventSum.DataAreaId == localChannelTable.inventLocationDataAreaId
                && inventSum.ClosedQty == NoYes::No
                && inventSum.AvailPhysical > 0
            {
                inventAvaDimCopy.InventColorId = inventSum.InventColorId;
                inventAvaDimCopy.InventSizeId = inventSum.InventSizeId;
                inventAvaDimCopy.InventStyleId = inventSum.InventStyleId;
                inventAvaDimCopy.InventVersionId = inventSum.InventVersionId;
                inventAvaDimCopy.configId = inventSum.configId;

                if (!localInventDim.anyProductDimensionSpecified() || InventDim::isInventDimContain(inventAvaDimCopy, localInventDim))
                {
                    inventResult = true;
                }
            }
        }
        else
        {
            while select inventAvaDim join inventSum where  inventAvaDim.inventDimId == inventSum.InventDimId
            && inventSum.ItemId == localInventTable.ItemId
            && inventSum.ClosedQty == NoYes::No
            && inventSum.AvailPhysical > 0
            && inventAvaDim.InventLocationId == localChannelTable.inventLocation
            && inventAvaDim.DataAreaId == localChannelTable.inventLocationDataAreaId
            {
                inventAvaDimCopy.InventColorId = inventAvaDim.InventColorId;
                inventAvaDimCopy.InventSizeId = inventAvaDim.InventSizeId;
                inventAvaDimCopy.InventStyleId = inventAvaDim.InventStyleId;
                inventAvaDimCopy.InventVersionId = inventAvaDim.InventVersionId;
                inventAvaDimCopy.configId = inventAvaDim.configId;

                if (!localInventDim.anyProductDimensionSpecified() || InventDim::isInventDimContain(inventAvaDimCopy, localInventDim))
                {
                    inventResult = true;
                }
            }
        }

        return inventResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>