<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportAdjustTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxReportAdjustTrans extends TaxReport
{
    // variables that do not need to be packed/unpacked
    TaxVersion  adjustmentVersion[];
    TransDate   adjustmentfromDate[];
    TransDate   adjustmentToDate[];
    Counter     numOfPeriods;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase(this.dialogHeader(), this);

        updateNow = false;

        // <GIN>
        if (countryRegion_IN)
        {
            dialogTaxRegistrationGroupName = dialog.addField(extendedtypestr(TaxRegistrationGroupNameRecID_IN));
            dialogTaxRegistrationNumber    = dialog.addField(extendedtypestr(TaxRegistrationNumberRecId_IN));
        }
        // </GIN>

        dialogTaxPeriod = dialog.addFieldValue(extendedtypestr(TaxPeriod), taxPeriod);
        dialogTaxPeriod.control().registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(TaxReport, dialogTaxPeriod_modified),
            this);

        // <GIN>
        if (countryRegion_IN)
        {
            dialogFromDate  = dialog.addField(extendedtypestr(TaxPeriodDate), "@SYS7402", "@SYS12292");
        }
        else
        {
            // </GIN>
            dialogFromDate  = dialog.addField(extendedtypestr(TaxPeriodDate), "@SYS5209", "@SYS12292");
            // <GIN>
        }
        // </GIN>

        dialogFromDate.control().registerOverrideMethod(
            methodStr(FormDateControl, modified),
            methodStr(TaxReport, dialogFromDate_modified),
            this);

        dialogTransDate =  dialog.addFieldValue(extendedtypestr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS67", "@SYS60729");

        dialogTransDate.control().registerOverrideMethod(
            methodStr(FormDateControl, modified),
            methodStr(TaxReport, dialogTransDate_modified),
            this);

        // <GIN>
        if (countryRegion_IN)
        {
            if (TaxParameters::find().Excise_IN)
            {
                dialogPostToInterimPLA  = dialog.addField(enumstr(NoYes), "@GLS6226", "@GLS6260");
            }
        }
        // </GIN>
        dialogUpdate    = dialog.addField(enumstr(NoYes), "@SYS2934", "@SYS17200");

        dialogPrintReport = dialog.addFieldValue(
            enumStr(NoYes),
            printReport,
            "@Tax_ReportSalesTaxForSettlementPeriod:PrintReport",
            "@Tax_ReportSalesTaxForSettlementPeriod:PrintReportHelpText");
        this.updatePrintReportControl(taxPeriod);

        this.dialogSettlementAccountMenuItem(dialog);

        settlementAccountButton = dialog.dialogForm().control('MnuItm_1');

        dialog.allowUpdateOnSelectCtrl(true);

        dialog.addText("@TaxReport:EnableBatchModeMessage", 175);

        dialogCopy = dialog;

        this.dialogSelectCtrl();

        // <GIN>
        if (countryRegion_IN)
        {
            dialog.addMenuItemButton(MenuItemType::Display, menuitemdisplaystr(TaxRegistrationGroup_IN), DialogMenuItemGroup::RightGrp);
        }
        // </GIN>

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header of this dialog.
    /// </summary>
    /// <returns>
    /// Returns the header of this dialog.
    /// </returns>
    protected Caption dialogHeader()
    {
        return "@SYS65243";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        updateNow       = dialogUpdate.value();
        taxPeriod       = dialogTaxPeriod.value();
        fromDate        = dialogFromDate.value();
        transactionDate = dialogTransDate.value();
        taxRepVersion   = TaxRepVersion::Original;
        printReport     = dialogPrintReport.value();
        // <GIN>
        if (countryRegion_IN)
        {
            isCorrections                 = true;
            taxRegistrationGroupName      = dialogTaxRegistrationGroupName.value();
            taxRegistrationNumber         = dialogTaxRegistrationNumber.value();
            if (TaxParameters::find().Excise_IN)
            {
                postToInterimPLA          = dialogPostToInterimPLA.value();
            }
            taxRegistrationDate           = dialogFromDate.value();
        }
        // </GIN>
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDialogValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets values from the dialog.
    /// </summary>
    /// <param name = "_updateNow">Parameter of updateNow.</param>
    /// <param name = "_taxPeriod">Parameter of taxPeriod.</param>
    /// <param name = "_fromDate">Parameter of fromDate.</param>
    /// <param name = "_transactionDate">Parameter of transactionDate.</param>
    void getDialogValues(NoYes                  _updateNow,
                         TaxPeriod              _taxPeriod,
                         TaxPeriodDate          _fromDate,
                         TransDate              _transactionDate)
    {
        updateNow        = _updateNow;
        taxPeriod        = _taxPeriod;
        fromDate         = _fromDate;
        transactionDate  = _transactionDate;
        taxRepVersion    = TaxRepVersion::Original;

        taxReportPeriod  = TaxReportPeriod::find(taxPeriod, fromDate);
        if (taxReportPeriod)
        {
            fromDate         = taxReportPeriod.FromDate;
            toDate           = taxReportPeriod.ToDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToInterimPLA_IN</Name>
				<Source><![CDATA[
    NoYes postToInterimPLA_IN()
    {
        return postToInterimPLA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report.
    /// </summary>
    void printout()
    {
        Args            args;
        ;

        args = new Args();
        args.parmObject(this);
        args.record(taxReportPeriod);

        TaxReportPrintOut::printout(taxPeriod, args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingVersionUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>TaxReportPeriod::versionSumUp</c> on the <c>TaxReportPeriod</c> table.
    /// </summary>
    void reportingVersionUpdate()
    {
        Counter                     periods;
        TaxReportAdjustmentTrans    taxReportAdjustmentTrans;
        ;
        super();
        /* updates previous versions too */
        for (periods = 1; periods <= numOfPeriods; periods++)
        {
            taxReportAdjustmentTrans.TransDate = transactionDate;
            taxReportAdjustmentTrans.Voucher   = voucher;
            taxReportAdjustmentTrans.TaxPeriod = taxPeriod;
            taxReportAdjustmentTrans.TaxVersion = adjustmentVersion[periods];
            taxReportAdjustmentTrans.FromDate  = adjustmentfromDate[periods];
            taxReportAdjustmentTrans.ToDate    = adjustmentToDate[periods];
            taxReportAdjustmentTrans.insert();
            // <GIN>
            if (isIndirectTax)
            {
                TaxReportPeriod_IN::versionSumUp(taxPeriod, taxRegistrationNumber, taxReportAdjustmentTrans.FromDate);
            }
            else
            {
                // </GIN>
                TaxReportPeriod::versionSumUp(taxPeriod,taxReportAdjustmentTrans.FromDate);
                // <GIN>
            }
            // </GIN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxReported</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the report is set for updating.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> enumeration value if the report is set for updating; otherwise,
    ///    <c>NoYes::No</c> .
    /// </returns>
    NoYes taxReported()
    {
        NoYes taxReported;

        taxReported = super();
        if (!taxReported)
        {
            if (taxReportPeriod.VersionNum > 0)
                taxReported = NoYes::Yes;
        }

        return taxReported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxReportVoucher</Name>
				<Source><![CDATA[
    TaxReportVoucher taxReportVoucher()
    {
        TaxReportVoucher taxReportVoucher;
        ;
        taxReportVoucher = super();
        taxReportVoucher.Corrections = NoYes::Yes;

        return taxReportVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the <c>transactionDate</c> variable.
    /// </summary>
    /// <returns>
    ///    The value of the <c>transactionDate</c> variable.
    /// </returns>
    TransDate transDate()
    {
        TaxReportVoucher    taxReportVoucher;
        TransDate           transDate;
        ;
        transDate = super();
        if (TaxAuthorityAddress::find(TaxPeriodHead::find(taxPeriod).TaxAuthority).TaxReportLayout != TaxReportLayout::Belgium)
        {
            if (this.taxReported())
            {
                select firstonly TransDate from taxReportVoucher
                    where taxReportVoucher.TaxPeriod    == this.taxPeriod() &&
                          taxReportVoucher.FromDate     == this.fromDate()  &&
                          taxReportVoucher.ToDate       == this.toDate();

                if (taxReportVoucher)
                {
                    transDate = taxReportVoucher.TransDate;
                }

            }
        }
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /* Method adds adjustments from previous reporting periods */
    Counter updateAndPost()
    {
        Counter         transactionsInTax;
        TaxReportPeriod taxReportPeriodPrevious;
        Counter         previousTrans;
        // <GIN>
        TaxReportPeriod_IN  taxReportPeriodLoc;
        // </GIN>
        ;
        transactionsInTax = super();
        // <GIN>
        if (countryRegion_IN && taxRegistrationGroupName && taxRegistrationNumber)
        {
            while select VersionNum, FromDate, ToDate from taxReportPeriodLoc
               where taxReportPeriodLoc.TaxPeriod == taxPeriod
                  && taxReportPeriodLoc.FromDate  <  fromDate
                  && taxReportPeriodLoc.TaxRegistrationNumberTable == taxRegistrationNumber
            {
                if (this.parmPreviousTransaction_IN())
                {
                    numOfPeriods++;
                    adjustmentVersion[numOfPeriods]     = taxReportPeriodLoc.VersionNum;
                    adjustmentfromDate[numOfPeriods]    = taxReportPeriodLoc.FromDate;
                    adjustmentToDate[numOfPeriods]      = taxReportPeriodLoc.ToDate;
                }
                transactionsInTax += previousTrans;
            }
        }
        else
        {
            // </GIN>
            while select FromDate, ToDate, VersionNum from taxReportPeriodPrevious
            where taxReportPeriodPrevious.TaxPeriod == taxPeriod &&
                  taxReportPeriodPrevious.FromDate   < fromDate   &&
                  taxReportPeriodPrevious.VersionNum > 0
            {
                previousTrans = this.updateAndPostTaxtrans(taxReportPeriodPrevious.FromDate,
                                                           taxReportPeriodPrevious.ToDate,
                                                           taxReportPeriodPrevious.VersionNum,
                                                           taxReportPeriodPrevious.VersionNum);
                if (previousTrans)
                {
                    numOfPeriods++;
                    adjustmentVersion[numOfPeriods] = taxReportPeriodPrevious.VersionNum;
                    adjustmentfromDate[numOfPeriods] = taxReportPeriodPrevious.FromDate;
                    adjustmentToDate[numOfPeriods] = taxReportPeriodPrevious.ToDate;
                }
                transactionsInTax += previousTrans;
            }
            // <GIN>
        }
        // </GIN>
        return transactionsInTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the voucher variable.
    /// </summary>
    /// <returns>
    ///    The voucher variable.
    /// </returns>
    Voucher voucher()
    {
        TaxReportVoucher    taxReportVoucher;
        ;
        voucher = super();
        if (this.taxReported())
        {
            select firstonly Voucher from taxReportVoucher
                where taxReportVoucher.TaxPeriod    == this.taxPeriod() &&
                      taxReportVoucher.FromDate     == this.fromDate()  &&
                      taxReportVoucher.ToDate       == this.toDate();
            if (taxReportVoucher.Voucher)
                voucher = taxReportVoucher.Voucher;
        }
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePostRunOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extension point to allow customization of <c>TaxReport</c>. This code is run after the run method is called.
    /// </summary>
    public void executePostRunOperations()
    {
        // <GIN>
        if (countryRegion_IN)
        {
            this.updateTaxRegistrationGroup_IN(this.taxRegistrationGroupName_IN());
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  _args)
    {
        TaxReport               taxReport  = new TaxReportAdjustTrans();

        if (taxReport.runDialogParametersAndParseArgs(_args))
        {
            taxReport.executePreRunOperations();

            if (taxReport.canRunBatch())
            {
                taxReport.runBatch();
            }
            else
            {
                taxReport.runOperation();

                if (taxReport.canDisplayReport())
                {
                    taxReport.printout();
                }
            }
        }

        if (!taxReport.isBatchScheduled())
        {
            taxReport.executePostRunOperations();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>