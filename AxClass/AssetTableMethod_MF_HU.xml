<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_MF_HU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetTableMethod_MF_HU extends AssetTableMethod
{
    boolean        theEnd;
    AssetTransDate previousDepreciationDate;
    AssetTransDate assetLifeTimeEnd;
    AssetTransDate nextYearChange;
    Counter        totalDepreciationYears;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        public AssetAmount calc()
    {
        AssetAmount    assetAmount;
        AssetTransDate startOfPeriod;
        AssetAmount    extraDepAmount;
        AssetAmount    splitDepAmount;
        Days           splitDays, numOfThisYear;
        AssetParameters assetParameters = AssetParameters::find();

        startOfPeriod = deprInterval.startOfPeriod(periodstart);
        numOfThisYear = assetLifeTimeEnd < nextYearChange         ?
                        assetLifeTimeEnd - prevYr(nextYearChange) :
                        nextYearChange - prevYr(nextYearChange);
        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();
            depreciationDate = min(assetLifeTimeEnd, periodEnd);
            depreciationDate = min(parmRunDate,      periodEnd);
            this.setAmountToDepreciate();
            extraDepAmount = - AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId,
                                                                     periodEnd,
                                                                     assetBook.BookId,
                                                                     AssetTransType::ExtraordinaryDepreciation);

            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }
            if (previousDepreciationDate &&
                deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                prevDepAmount = this.prvDepreciationAmount(periodstart) +
                                depreciationThisRun                     +
                                prevDepAmountExternal;
                prevPeriods = 0;
            }
            restPeriod = (periodEnd - periodstart + 1)/(periodEnd - startOfPeriod + 1);

            if (calculatePrevPeriods && ! amountToDepreciate)
            {
                prevPeriods += restPeriod;
            }
            else
            {
                if (deprInterval.assetDepreciationTime(depreciationDate))
                {
                    if (depreciationDate         > nextYearChange &&
                        previousDepreciationDate < nextYearChange)
                    {
                        numOfThisYear  = nextYearChange - AssetTableMethod::dateMthFwd_HU(nextYearChange, -12);
                        splitDays      = nextYearChange - periodstart + 1;
                        splitDepAmount = (amountToDepreciate - extraDepAmount) * this.percentage() / 100;
                        splitDepAmount = splitDepAmount / numOfThisYear * splitDays;
                        currentInterval++;
                        nextYearChange = AssetTableMethod::dateMthFwd_HU(nextYearChange, 12);
                        numOfThisYear  = nextYearChange - AssetTableMethod::dateMthFwd_HU(nextYearChange, -12);
                        splitDays      = periodEnd - periodstart + 1 - splitDays;
                        assetAmount    = (amountToDepreciate - extraDepAmount) * this.percentage() / 100;
                        assetAmount    = assetAmount / numOfThisYear * splitDays;
                        assetAmount   += splitDepAmount;
                        splitDepAmount = 0;
                    }
                    else
                    {
                        assetAmount = (amountToDepreciate - extraDepAmount) * this.percentage() / 100;
                        assetAmount = assetAmount / numOfThisYear * (periodEnd - periodstart + 1);
                    }
                }
                else
                {
                    assetAmount = 0;
                }
                assetAmount = assetBook.roundOffDepreciation(assetAmount);
                calculatePrevPeriods = false;
                prevDepAmount += assetAmount;
            }

            if (assetAmount < assetParameters.DepreciationMin)
            {
                assetAmount = min(assetParameters.DepreciationMin,
                                  amountToDepreciate - extraDepAmount);
            }

            periodEnd++;
            periodstart = periodEnd;
            periodEnd   = min(deprInterval.endPeriod(periodstart), assetLifeTimeEnd);
            if (periodstart > nextYearChange)
            {
                 nextYearChange = AssetTableMethod::dateMthFwd_HU(nextYearChange, 12);
                 currentInterval++;
            }

            previousDepreciationDate = depreciationDate;

            depreciationThisRun += assetAmount;
        }

        if (! prevPeriods &&
            this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraDepAmount >= amountToDepreciate)
        {
            assetAmount -= this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraDepAmount - amountToDepreciate;
            prevDepAmount = amountToDepreciate - extraDepAmount;
            depreciationThisRun = amountToDepreciate - this.prvDepreciationAmount(periodstart) - prevDepAmountExternal - extraDepAmount;
            theEnd = true;
        }

        if (periodEnd < periodstart &&
            this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraDepAmount < amountToDepreciate)
        {
            assetAmount -= this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraDepAmount - amountToDepreciate;
        }

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        int h, periodFactor, number;
        const int Monthly = 1;
        const int Quarterly = 3;
        const int HalfYearly = 6;
        const int Yearly = 12;

        super();

        switch (assetDepreciationProfile.Accrual)
        {
            case AssetAccrual::Monthly:    periodFactor = Monthly; break;
            case AssetAccrual::Quarterly:  periodFactor = Quarterly; break;
            case AssetAccrual::HalfYearly: periodFactor = HalfYearly; break;
            case AssetAccrual::Yearly:     periodFactor = Yearly; break;
            default:                       periodFactor =  1;
        }

        if (assetDepreciationProfile.Accrual == AssetAccrual::FiscalPeriod)
        {
            number = deprInterval.numOfPeriodsPerYear();

            if (number > 0)
            {
                periodFactor = any2Int(Yearly / number);
            }
        }

        periodFactor = assetBook.LifeTime * periodFactor;
        totalDepreciationYears = periodFactor div Yearly;
        if (periodFactor mod Yearly)
        {
            totalDepreciationYears ++;
        }
        assetLifeTimeEnd = assetBook.DepreciationStartDate - 1;

        nextYearChange   = AssetTableMethod::dateMthFwd_HU(assetLifeTimeEnd, Yearly);

        for (h = 1; h <= periodFactor; h ++)
        {
            assetLifeTimeEnd = AssetTableMethod::dateMthFwd_HU(assetLifeTimeEnd, Monthly);

            if (!(h mod Yearly)                                     &&
                 (assetBook.LastDepreciationDate < assetLifeTimeEnd) &&
                 (assetBook.LastDepreciationDate > prevYr(assetLifeTimeEnd)))
            {
                nextYearChange = assetLifeTimeEnd;
            }
            if (assetBook.LastDepreciationDate + 1 > assetLifeTimeEnd)
            {
                currentInterval = h div Yearly;
            }
        }
        periodEnd = min(periodEnd, assetLifeTimeEnd);
        periodEnd = min(periodEnd, parmRunDate);

        prevDepAmount = this.prvDepreciationAmount(assetBook.LastDepreciationDate     ?
                                                   assetBook.LastDepreciationDate + 1 :
                                                   assetBook.DepreciationStartDate);
        previousDepreciationDate = assetBook.LastDepreciationDate ?
                                   assetBook.LastDepreciationDate :
                                   assetBook.DepreciationStartDate - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(AssetBook _assetBook, AssetTransDate _assetTransDate, boolean _dualDepreciation, boolean _depreciationAltProfile, boolean _depreciationExtProfile, AssetBudgetModelId _assetBudgetModelId)
    {
        // Needed to instantiate correct type when running under CIL
        super(_assetBook, _assetTransDate, _dualDepreciation, _depreciationAltProfile, _depreciationExtProfile, _assetBudgetModelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
        public boolean next()
    {
        if (theEnd)
            return false;

        if (parmRunDate <= baseDate)
            return false;

        this.setDepDate();

    //
    //  This prevents depreciations with invalid dates from
    //  being handled.
    //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentage</Name>
				<Source><![CDATA[
    public AssetDepreciationPercentage percentage()
    {
        AssetDepreciationPercentage currPercentage;

        if (totalDepreciationYears != 0)
        {
            currPercentage = AssetDepreciationProfileSpec::find(assetDepreciationProfile.Profile, currentInterval + 1).Percentage;
        }

        return currPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmount</Name>
				<Source><![CDATA[
        public AssetAmount prvDepreciationAmount(AssetTransDate _assetTransDate)
    {
        AssetTransDate  depYearStart;
        AssetAmount     prvDepreciationAmount;
        AssetBookTable   assetBookTable = AssetBookTable::find(assetBook.BookId);

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
        {
            depYearStart = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate);
        }
        else
        {
            depYearStart = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(assetBookTable.getFiscalCalendar(), _assetTransDate);
        }

        prvDepreciationAmount = -(AssetTrans::amountMSTPerDateTransTypes(
            assetBook.AssetId,
            assetBook.BookId,
            [AssetTransType::Depreciation, AssetTransType::DepreciationAdj],
            dateNull(),
            depYearStart - 1));
        return prvDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentInterval</Name>
				<Source><![CDATA[
    public AssetInterval parmCurrentInterval(AssetInterval _interval = currentInterval)
    {
        currentInterval = _interval;

        return currentInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalDepreciationYears</Name>
				<Source><![CDATA[
    public Counter parmTotalDepreciationYears(Counter _totalDepreciationYears = totalDepreciationYears)
    {
        totalDepreciationYears = _totalDepreciationYears;

        return totalDepreciationYears;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>