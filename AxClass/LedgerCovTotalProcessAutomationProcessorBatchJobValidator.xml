<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovTotalProcessAutomationProcessorBatchJobValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerCovTotalProcessAutomationProcessorBatchJobValidator extends CashFlowBatchJobValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal final static LedgerCovTotalProcessAutomationProcessorBatchJobValidator construct()
    {
        LedgerCovTotalProcessAutomationProcessorBatchJobValidator validator = new LedgerCovTotalProcessAutomationProcessorBatchJobValidator();
        validator.init();

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchClassId</Name>
				<Source><![CDATA[
    protected ClassId getBatchClassId()
    {
        return classNum(ProcessAutomationPollingEngine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchJobCompanySpecific</Name>
				<Source><![CDATA[
    protected boolean isBatchJobCompanySpecific()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FinanceInsightsPipelineValidatorResult validate()
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(LedgerCovTotalProcessAutomationProcessorBatchJobValidator), funcName());

        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(activity))
        {
            if (this.isActive() && LedgerLiquidity::existForCompany())
            {
                if (!this.doesProcessScheduleExist())
                {
                    this.logBatchJobDoesNotExist();
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesProcessScheduleExist</Name>
				<Source><![CDATA[
    private boolean doesProcessScheduleExist()
    {
        ProcessScheduleSeriesPattern processScheduleSeriesPattern;
        ProcessScheduleSeries processScheduleSeries;
        ProcessScheduleSeriesCompany processScheduleSeriesCompany;
        ProcessScheduleType processScheduleType;

        select firstonly processScheduleSeriesPattern
            where processScheduleSeriesPattern.EndDate == DateTimeUtil::minValue()
                || processScheduleSeriesPattern.EndDate >= DateTimeUtil::utcNow()
            exists join processScheduleSeriesCompany
                where processScheduleSeriesCompany.LegalEntityId == curExt()
            exists join processScheduleSeries
                where processScheduleSeries.RecId == processScheduleSeriesCompany.processScheduleSeries
                    && processScheduleSeries.IsEnabled == NoYes::Yes
                    && processScheduleSeries.RecId == processScheduleSeriesPattern.ProcessScheduleSeries
            exists join processScheduleType
                where processScheduleType.RecId == processScheduleSeries.ProcessScheduleType
                    && processScheduleType.Name == LedgerCovTotalProcessAutomationConstants::RegisteredTypeName
                    && processScheduleType.IsEnabled == NoYes::Yes;

        return processScheduleSeriesPattern.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessScheduleDoesNotExist</Name>
				<Source><![CDATA[
    private void logProcessScheduleDoesNotExist()
    {
        logger.logWarning(strFmt('The %1 process automation configuration does not exist for company %2', LedgerCovTotalProcessAutomationConstants::RegisteredTypeName, curExt()));

        result.addMessage(FinanceInsightsPipelineMessage::newWarningMessage(strFmt("@CashFlowManagement:LedgerCovTotalProcessAutomationConfigurationDoesNotExist", curExt())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    protected boolean isActive()
    {
        return FeatureStateProvider::isFeatureEnabled(LedgerCovTotalProcessAutomationFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logBatchJobDoesNotExist</Name>
				<Source><![CDATA[
    protected void logBatchJobDoesNotExist()
    {
        return;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>