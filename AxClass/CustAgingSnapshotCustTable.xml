<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAgingSnapshotCustTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Creates an aging snapshot for a <c>CustTable</c> record.
/// </summary>
/// <remarks>
///    Assumes the caller has a <c>parmSelectedAgingPeriodDef</c> method that returns the aging period
///    definition used to calculate the snapshot.
/// </remarks>
class CustAgingSnapshotCustTable extends CustAgingSnapshot implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustAgingSnapshotCustTable aging;
        int companyCount;
        int companyIndex;
        container companies;

        Debug::assert(args && args.record());

        if (args.record().TableId != tablenum(CustTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        aging = new CustAgingSnapshotCustTable();

        aging.parmCustAccount(args.record().(fieldnum(CustTable, AccountNum)));
        aging.parmAgedBy(DateTransactionDuedate::DueDate);
        aging.parmAgingDateType(CustAgingDateType::CurrentDate);
        aging.parmAgingPeriodDef(args.caller().parmSelectedAgingPeriodDef());
        aging.parmUpdateCollectionsStatus(true);
        aging.parmShowResults(true);
        aging.parmManualUpdate(NoYes::Yes);

        if (formHasMethod(args.caller(), 'parmSelectedCompanies'))
        {
            companies = args.caller().parmSelectedCompanies();
        }
        else
        {
            companies = [curext()];
        }

        companyCount = conlen(companies);
        for (companyIndex = 1; companyIndex <= companyCount; companyIndex++)
        {
            aging.addSourceCompany(conpeek(companies, companyIndex));
        }

        aging.runOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>