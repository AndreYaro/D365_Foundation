<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankChequeCancel_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The BankChequeCancel_BR class cancels a check posted by bank or vendor
/// and all its related information in the system.
/// </summary>
public class BankChequeCancel_BR extends BankChequeCancel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates canceling transactions for all vendor transactions associated with a check.
    /// </summary>
    protected void cancelCustVendTrans()
    {
        container               recipientCompany;
        VendTrans               vendTransLoc;
        ;

        if (chequeToCancel.RecipientCompany == '')
        {
            recipientCompany += curext();
        }
        else
        {
            recipientCompany += chequeToCancel.RecipientCompany;
        }

        // If cheque was intercompany, create LedgerVoucher for intercompany transactions
        if (isChequeInterCompany)
        {
            this.createCancelInterCompanyLedgerVoucher();
        }

        while select crossCompany:recipientCompany vendTransLoc order by RecId asc
                    where (vendTransLoc.Voucher                 == chequeToCancel.RecipientTransVoucher ||
                          (vendTransLoc.Voucher                 == chequeToCancel.Voucher &&
                          vendTransLoc.TransType                == LedgerTransType::Payment &&
                          chequeToCancel.RecipientTransVoucher  == '')) &&
                          vendTransLoc.PaymReference            == chequeToCancel.ChequeNum &&
                          vendTransLoc.TransDate                == chequeToCancel.TransDate
        {
            custVendTransToCancel = vendTransLoc;

            // Get intercompany LedgerTrans
            this.getInterCompanyLedgerToCancel();

            if (this.validateToCancelCustVendTrans())
            {
                // If check was intercompany, create LedgerVoucher for intercompany transactions
                if (isChequeInterCompany && custVendTransToCancel.company() != curext())
                {
                    this.createCancellingInterCompanyTrans();
                }

                this.createCancellingCustVendTrans();

                if (custVendTransToCancel.RecId != 0)
                {
                    // Get recipient customer/vendor - will be used for reversals & settlements
                    recipientCustVendTable = VendTable::findByCompany(custVendTransToCancel.company(), custVendTransToCancel.AccountNum);

                    // Reverse settlements involving the payment being cancelled
                    this.reverseSettlement();

                    // Settle cancelled & cancelling transactions
                    this.settleCancellingCustVendTrans();

                    // Set the reason on the cancelled customer/vendor transaction
                    this.updateCustVendTransCancelReason();
                }
            }
        }

        // Delete BankChequePaymTrans records linking cheques with transactions paid by cheque
        this.deleteBankChequePaymTrans();

        // Delete further posting records from bridging not yet transferred to bank transactions
        this.deleteLedgerTransFurtherPosting();

        // Remove cheque number from journal transactions
        this.removeChequeNumLedgerJournalTrans();

        // Update status on cancelled cheque
        this.updateChequeStatus();

        // Update status on cancelled bank transaction
        if (bankAccountTransToCancel.RecId != 0)
        {
            this.updateBankAccountTransStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCancellingCashBridgeLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a new transaction to the current <c>LedgerVoucher</c> object that cancels the cash or
    ///    cash-in-transit account posting.
    /// </summary>
    protected void createCancellingCashBridgeLedgerTrans()
    {
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        LedgerEntry                 ledgerEntry;
        LedgerEntryJournal          ledgerEntryJournal;
        GeneralJournalEntry         generalJournalEntry;
        LedgerJournalTable          journalToCancel;
        LedgerVoucherTransObject    postingTransaction;

        [generalJournalAccountEntry, ledgerEntryJournal, generalJournalEntry, ledgerEntry] =
            GeneralLedgerExtension::findRelated(cashBridgeGeneralJournalAccountEntryToCancel);

        // Find the original journal voucher series
        select firstonly NumberSequenceTable from journalToCancel
            where journalToCancel.JournalNum == ledgerEntryJournal.JournalNumber;

        if (journalToCancel == null)
        {
            cancelLedgerVoucherObject.parmLedgerPostingJournalId(generalJournalEntry.LedgerPostingJournal);
        }
        else
        {
            cancelLedgerVoucher.parmVoucherSeriesCode(NumberSequenceTable::find(journalToCancel.NumberSequenceTable).NumberSequence);
        }

        // For each GeneralJournalAccountEntry record related
        while select generalJournalAccountEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                && generalJournalAccountEntry.PaymentReference == chequeToCancel.ChequeNum
                && (generalJournalAccountEntry.PostingType == LedgerPostingType::Bank
                    || generalJournalAccountEntry.PostingType == LedgerPostingType::LedgerJournal
                    || ledgerEntry.IsBridgingPosting == NoYes::Yes)
        {
            postingTransaction = LedgerVoucherTransObject::newBasicDefault(
            cancelLedgerVoucherObject,
            generalJournalAccountEntry.PostingType,
            generalJournalAccountEntry.LedgerDimension,
            generalJournalAccountEntry.TransactionCurrencyCode,
            -generalJournalAccountEntry.TransactionCurrencyAmount,
            -generalJournalAccountEntry.AccountingCurrencyAmount,
            -generalJournalAccountEntry.ReportingCurrencyAmount);

            postingTransaction.parmSourceTableId(generalJournalAccountEntry.TableId);
            postingTransaction.parmSourceRecId(generalJournalAccountEntry.RecId);
            postingTransaction.parmQuantity(-generalJournalAccountEntry.Quantity);

            // Add transaction to LedgerVoucher
            cancelLedgerVoucher.addTrans(postingTransaction);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCancellingTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the transactions that cancel the transactions that correspond to the check.
    /// </summary>
    protected void createCancellingTrans()
    {
        ;

        // Create LedgerVoucherGroup
        cancelLedgerVoucherGroup = LedgerVoucherGroup::construct();

        // Create LedgerVoucher & LedgerVoucherObject for cheque company transactions
        this.createCancelLedgerVoucher();

        // Create cancelling bank account transaction, if needed
        if (bankAccountTransToCancel.RecId != 0)
        {
            this.createCancellingBankAccountTrans();
        }

        // Create cancelling cash or bridging ledger transaction as cancelling does not use BankVoucher
        this.createCancellingCashBridgeLedgerTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBankChequePaymTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>BankChequePaymTrans</c> records created when settling the cancelled customer or vendor transactions.
    /// </summary>
    protected void deleteBankChequePaymTrans()
    {
        BankChequePaymTrans deleteBankChequePaymTrans;
        ;

        // Delete records linking the cancelled and cancelling transactions
        delete_from deleteBankChequePaymTrans
            where (deleteBankChequePaymTrans.TransDate == chequeToCancel.TransDate &&
                deleteBankChequePaymTrans.ChequeNum == chequeToCancel.ChequeNum) ||
                (deleteBankChequePaymTrans.TransDate == cancellingCustVendTrans.TransDate &&
                deleteBankChequePaymTrans.Voucher == cancellingCustVendTrans.Voucher &&
                deleteBankChequePaymTrans.ChequeNum == chequeToCancel.ChequeNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInterCompanyLedgerToCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the general journal transactions for the intercompany account postings for the check.
    /// </summary>
    protected void getInterCompanyLedgerToCancel()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        container recipientCompany;

        Debug::assert(chequeToCancel != null);

        if (isChequeInterCompany)
        {
            select firstonly RecId from subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == chequeToCancel.Voucher &&
                    subledgerVoucherGeneralJournalEntry.AccountingDate == chequeToCancel.TransDate &&
                    subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == chequeToCancel.DataAreaId
            join RecId from generalJournalEntry
                where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry &&
                      generalJournalEntry.Ledger == Ledger::current()
            join RecId from generalJournalAccountEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry &&
                    generalJournalAccountEntry.PostingType == LedgerPostingType::InterCompany &&
                    generalJournalAccountEntry.IsCredit == false &&
                    generalJournalAccountEntry.TransactionCurrencyAmount == custVendTransToCancel.AmountCur;

            interCompanyDebitGeneralJournalAccountEntryToCancel = generalJournalAccountEntry.RecId;

            recipientCompany += [chequeToCancel.RecipientCompany];

            select firstonly crossCompany:recipientCompany RecId from subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == chequeToCancel.RecipientTransVoucher &&
                    subledgerVoucherGeneralJournalEntry.AccountingDate == chequeToCancel.TransDate &&
                    subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == chequeToCancel.RecipientCompany
            join RecId from generalJournalEntry
                where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry &&
                    generalJournalEntry.Ledger == Ledger::primaryLedger(CompanyInfo::findDataArea(chequeToCancel.RecipientCompany).RecId)
            join RecId from generalJournalAccountEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry &&
                    generalJournalAccountEntry.PostingType == LedgerPostingType::InterCompany &&
                    generalJournalAccountEntry.IsCredit == true &&
                    generalJournalAccountEntry.TransactionCurrencyAmount == -custVendTransToCancel.AmountCur;

            interCompanyCreditGeneralJournalAccountEntryToCancel = generalJournalAccountEntry.RecId;
        }
        else
        {
            interCompanyDebitGeneralJournalAccountEntryToCancel = 0;
            interCompanyCreditGeneralJournalAccountEntryToCancel = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransToCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the transactions to cancel that correspond to the check.
    /// </summary>
    protected void getTransToCancel()
    {
        ;

        // Get BankChequeTable
        chequeToCancel = BankChequeTable::find(accountID, chequeNum, true);

        if (chequeToCancel.RecipientCompany != '' && chequeToCancel.company() != chequeToCancel.RecipientCompany)
        {
            isChequeInterCompany = true;
        }
        else
        {
            isChequeInterCompany = false;
        }

        // Get BankAccountTrans
        bankAccountTransToCancel = BankAccountTrans::findByAccountIDAndChequeNum(accountID, chequeNum, true);

        // Get cash or bridging LedgerTrans
        this.getCashBridgeLedgerTransToCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        setprefix(BankChequeCancel::description());

        if (ChequeReversalValidateClearedFlight::instance().isEnabled()
            && BankAccountTrans::findByAccountIDAndChequeNum(accountID, chequeNum).Included)
        {
            throw error("@CashManagement:BankChequeReconciled");
        }

        if (journalName != "")
        {
            // The process will occur through a bank cheque reversal journal.
            BankChequeCreateReversalJour::newChequeReversalJournal(accountID,
                                                                   chequeNum,
                                                                   cancelDate,
                                                                   reconcileBankTrans,
                                                                   journalName,
                                                                   reason,
                                                                   reasonComment);
        }
        else
        {
            try
            {
                custVendTransModule = SysModule::Vend;

                // Get records to be cancelled
                this.getTransToCancel();

                // Validate records for reversal
                if (this.validateToCancelCheque())
                {
                    ttsbegin;

                    // Get vouchers for cancel process
                    this.getVouchersForCancellingTrans();

                    // Get transaction text for cancel process
                    this.getCancelTransTxt();

                    // Get reason code reference for cancel process
                    cancelReasonRef = ReasonTableRef::createReasonTableRef(reason, reasonComment);

                    // Create cancelling transactions
                    this.createCancellingTrans();

                    // Reverse CustVendTrans and settlements
                    this.cancelCustVendTrans();

                    // Finalize cancellation - post cancelling transactions
                    this.postCancellingTrans();

                    TransactionLog::create(TransactionLogType::PaymReversal, strfmt("@SYS82243", chequeNum));

                    // create audit trail records for other companies.
                    cancelLedgerVoucherGroup.createTransactionLog(TransactionLogType::PaymReversal, "@SYS82247");

                    ttscommit;

                    // Add messages to infolog - Payment cancelled & cheque voided
                    info("@SYS26915");
                    info("@SYS53490");
                }
                else
                {
                    throw error("@SYS18447");
                }
            }
            catch (Exception::Error)
            {
                throw error("@SYS21628");
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateToCancelCheque</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the check can be canceled.
    /// </summary>
    /// <returns>
    ///    true if the check can be canceled; otherwise, false.
    /// </returns>
    protected boolean validateToCancelCheque()
    {
        LedgerEntry ledgerEntry;
        LedgerEntry payToLedgerAccountLedgerEntry;
        GeneralJournalEntry generalJournalEntry;
        boolean isValid = true;
        TransDate originalTransDate;
        boolean isBridgingUsed;

        if (accountID)
        {
            isValid = BankAccountTable::checkIsActive(accountID, bankAccountTransToCancel.TransDate);
        }

        // Transaction & offset sub-ledger transactions must exist
        if (cashBridgeGeneralJournalAccountEntryToCancel == 0)
        {
            isValid = checkFailed("@SYS120316");
        }

        // There will not be a BankAccountTrans if a bridging method of payment was used and
        // the transaction has not been transferred from the cash-in-transit account.
        if (bankAccountTransToCancel.RecId == 0)
        {
            ledgerEntry = LedgerEntry::findByGeneralJournalAccountEntry(cashBridgeGeneralJournalAccountEntryToCancel);
            if (!ledgerEntry.IsBridgingPosting)
            {
                isBridgingUsed = true;
                if (payToLedgerAccountTransToCancel != 0)
                {
                    payToLedgerAccountLedgerEntry = LedgerEntry::findByGeneralJournalAccountEntry(payToLedgerAccountTransToCancel);
                    if (!payToLedgerAccountLedgerEntry.IsBridgingPosting)
                    {
                        isBridgingUsed = false;
                    }
                }
                else
                {
                    isBridgingUsed = false;
                }

                if (isBridgingUsed == false)
                {
                    isValid = checkFailed("@SYS120320");
                }
            }
        }

        // Get original transaction date
        if (bankAccountTransToCancel.RecId != 0)
        {
            // BankAccountTrans will have the latest original date if bridging posting has been transferred.
            originalTransDate = bankAccountTransToCancel.TransDate;
        }
        else if (cashBridgeGeneralJournalAccountEntryToCancel != 0)
        {
            // The general journal transaction from original cash/bridging posting will
            // have the original date if bridging posting has not been transferred.
            generalJournalEntry = GeneralJournalEntry::findByGeneralJournalAccountEntry(cashBridgeGeneralJournalAccountEntryToCancel);

            originalTransDate = generalJournalEntry.AccountingDate;
        }

        // Latest posting date cannot be before cancellation date
        if (originalTransDate > cancelDate)
        {
            isValid = checkFailed("@SYS91442");
        }

        // Bank transaction cannot be in a reconciled state.
        if (bankAccountTransToCancel.RecId != 0 && bankAccountTransToCancel.Reconciled == NoYes::Yes)
        {
            if (bankAccountTransToCancel.ChequeNum)
            {
                isValid = checkFailed(strfmt("@SYS23526", bankAccountTransToCancel.ChequeNum));
            }
            else
            {
                isValid = checkFailed("@GLS222233");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateToCancelCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the check can be cancelled.
    /// </summary>
    /// <returns>
    /// true if the check can be cancelled; otherwise false.
    /// </returns>
    protected boolean validateToCancelCustVendTrans()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        boolean isValid = true;

        if (custVendTransToCancel.RecId == 0)
        {
            // If the offset sub-ledger transaction is not a cust or vend trans,
            // look for general journal offset to the bank transaction
            select firstonly RecId from subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher ==  chequeToCancel.Voucher &&
                      subledgerVoucherGeneralJournalEntry.AccountingDate == chequeToCancel.TransDate &&
                      subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == chequeToCancel.DataAreaId
            join RecId from generalJournalEntry
                where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry &&
                      generalJournalEntry.Ledger == Ledger::current()
            join RecId from generalJournalAccountEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry &&
                    generalJournalAccountEntry.PostingType == LedgerPostingType::LedgerJournal &&
                    generalJournalAccountEntry.PaymentReference == chequeToCancel.ChequeNum;

            offsetGeneralJournalAccountEntryToCancel = generalJournalAccountEntry.RecId;

            if (offsetGeneralJournalAccountEntryToCancel == 0)
            {
                if (chequeToCancel.RecipientType == BankChequeRecipientType::Cust)
                {
                    isValid = checkFailed("@SYS120326");
                }
                else if (chequeToCancel.RecipientType == BankChequeRecipientType::Vend)
                {
                    isValid = checkFailed("@SYS120327");
                }

                isValid = checkFailed("@SYS120350");
            }
        }

        // If the check & recipient are in different companies, intercompany transactions have to be found
        if (isChequeInterCompany)
        {
            if (interCompanyDebitGeneralJournalAccountEntryToCancel == 0 || interCompanyCreditGeneralJournalAccountEntryToCancel == 0)
            {
                isValid = checkFailed("@SYS120325");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBankChequeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the BankChequeCancel class and initializes
    /// several internal variables with information from a Cheque definition.
    /// </summary>
    /// <param name="_chequeTable">
    /// The BankChequeTable record buffer that represents the Cheque definition.
    /// </param>
    /// <returns>
    /// A new instance of BankChequeCancel_BR that is initialized with values
    /// from the passed in record buffer.
    /// </returns>
    public static BankChequeCancel_BR newBankChequeTable(BankChequeTable _chequeTable)
    {
        BankChequeCancel_BR    chequeCancel;
        ;

        chequeCancel = new BankChequeCancel_BR();

        chequeCancel.parmAccountId(_chequeTable.AccountID);
        chequeCancel.parmChequeNum(_chequeTable.ChequeNum);
        chequeCancel.parmRecipientType(_chequeTable.RecipientType);
        chequeCancel.parmReconcile(true);
        chequeCancel.parmTransDate(_chequeTable.TransDate);

        return chequeCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serverRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankChequeCancel_BR</c> from a pack and calls its Run method on the server tier.
    /// </summary>
    /// <param name="args">
    /// The arguments that contain the <c>BankChequeTable</c> record and an instance of <c>BankChequeCancel_BR</c>.
    /// </param>
    public static void serverRun(Args args)
    {
        BankChequeCancel_BR chequeCancel_BR;
        ;

        // Handle reversal of checks posted by bank or vendor
        chequeCancel_BR = BankChequeCancel_BR::newBankChequeTable(args.record());
        chequeCancel_BR.unpack(args.caller().pack());
        chequeCancel_BR.runOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>