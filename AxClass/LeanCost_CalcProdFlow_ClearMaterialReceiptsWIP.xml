<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP</c> class is the task responsible for the clearing material receipts from the WIP during lean backflush costing for a
/// specific production flow and a specific item.
/// </summary>
public class LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP extends LeanCost_CalcProdFlow_ClearMaterialWIP implements BatchRetryable
{
    int64   runTimeClearMaterialReceiptsWIP;
    int64   nbInventTransClearMaterialReceiptsWIP;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP</c> class with the specified parameters.
    /// </summary>
    /// <param name = "_leanProductionFlowCostingRecId">The record ID of a production flow costing.</param>
    /// <param name = "_itemId">The item ID.</param>
    /// <param name = "_leanCostingToDate">The backflush costing date.</param>
    /// <param name = "_planReferenceName">The production flow name.</param>
    /// <param name = "_planDefaultDimensions">The default dimensions.</param>
    /// <param name = "_currencyCode">The currency code.</param>
    /// <returns>A new instance of the <c>LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP</c> class.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP newFromParameters(
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        ItemId                              _itemId,
        ToDate                              _leanCostingToDate,
        PlanName                            _planReferenceName,
        DimensionDefault                    _planDefaultDimensions,
        CurrencyCode                        _currencyCode)
    {
        LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP task = LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP::construct();

        task.itemId = _itemId;
        task.leanCostingDate = _leanCostingToDate;
        task.planReferenceName = _planReferenceName;
        task.planDefaultDimensions = _planDefaultDimensions;
        task.currencyCode = _currencyCode;
        task.leanProductionFlowCostingRecId = _leanProductionFlowCostingRecId;

        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP construct()
    {
        return new LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    protected void execute()
    {
        InventTrans                             inventTrans;
        InventTransOrigin                       inventTransOrigin;
        InventCostTrans                         inventCostTrans;
        InventDim                               inventDim;
        InventDim                               inventItemDim;
        InventItemPrice                         inventItemPrice;
        
        InventDim                               prevProductDim;
        InventSiteId							prevSiteId;
                
        InventCostOnhandCache                   inventCostOnHandCache = InventCostOnhandCache::construct();

        const UtilElementName NumberOfInventTransClearMaterialReceiptsWIP = 'NumberOfInventTransClearMaterialReceiptsWIP';
        CostManagementInstrumentationLogger     instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP));

        using (var backflushCostingActivityContext = instrumentationLogger.backflushCostingActivities().ClearMaterialReceiptsWIP(
                                                        classStr(LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP),
                                                        inventTable.RecId,
                                                        leanCostingDate,
                                                        PlanReference::findPlanName(planReferenceName).RecId,
                                                        leanProductionFlowCostingRecId,
                                                        planDefaultDimensions))
        {
            // Finished goods
            while select forupdate * from inventTrans
            where inventTrans.itemId == itemId
               && inventTrans.DateStatus      <= leanCostingDate
               && ((inventTrans.StatusIssue   == StatusIssue::Deducted
                    && inventTrans.StatusReceipt == StatusReceipt::None) ||
                   (inventTrans.StatusIssue   == StatusIssue::None
                    && inventTrans.StatusReceipt == StatusReceipt::Received))
            join inventDim
                where inventDim.InventDimId == inventTrans.InventDimId
            join Tableid from inventTransOrigin
                order by ItemInventDimId, inventTrans.DatePhysical desc
                where inventTrans.InventTransOrigin    == inventTransOrigin.RecId
                   && inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobProcess
            exists join inventCostTrans
                where inventCostTrans.InventTransId    == inventTransOrigin.InventTransId
                   && inventCostTrans.CostTransRefType == InventCostTransRefType::ProductionFlow
                   && inventCostTrans.TransRefId       == planReferenceName
            {
                nbInventTransClearMaterialReceiptsWIP++;

                if (prevSiteId   != inventDim.InventSiteId      ||
                InventDim::getModifiedProductDimensionFields(prevProductDim, inventDim).elements() > 0)
                {
                    prevProductDim.inventDimFieldsMap::initProductDimensionsFrom(inventDim);
                    prevSiteId = inventDim.InventSiteId;
                
                    inventItemPrice = this.findItemPriceOrThrowError(leanCostingDate, inventDim);
                }

                InventMovement movement = InventMovement::construct(inventTrans);

                InventUpd_Financial inventUpd_Financial = InventUpd_Financial::newKanbanMovement(
                                                                                    movement,
                                                                                    ledgerVoucher,
                                                                                    inventTrans.Qty,
                                                                                    0,
                                                                                    CurrencyExchangeHelper::amount(inventTrans.Qty * inventItemPrice.pcsPrice()));
                inventUpd_Financial.parmInventCostOnhandCache(inventCostOnHandCache);
                inventUpd_Financial.updateNow();

                if (movement.mustBeBookedFinancially())
                {
                    this.clearMaterialWIPAccount(movement, inventItemPrice, -inventTrans.Qty);
                }
            }

            ledgerVoucher.persistState();
            this.transferConflictingRevaluationsFromParallelSession();

            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = instrumentationLogger.properties();
            instrumentationPropertyCollection.add(loggerProperties.addCount(NumberOfInventTransClearMaterialReceiptsWIP, nbInventTransClearMaterialReceiptsWIP));
            instrumentationLogger.logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@CostManagement:Class_LeanCost_CalcProdFlow_ClearMaterialReceiptsWIP";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>