<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalExtraordinary</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetProposalExtraordinary extends AssetProposal implements BatchRetryable
{
    private const str FeatureReferenceJP31 = 'JP-00031';

    AssetTransDate      assetDateFrom;

    DialogField         dialogDateFrom;
    DialogField         dialogDepDate;

    #DEFINE.CurrentVersion(5)

    #LOCALMACRO.CurrentList
        assetDateFrom,
        runDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    AssetTransTypeJournal assetTransType()
    {
        return AssetTransTypeJournal::ExtraordinaryDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@SYS71140");

        dialog.addGroup("@SYS22526");

        if (this.budgetJournal())
        {
            dialogDateFrom = dialog.addField(extendedtypestr(AssetTransDate),"@SYS5209","@SYS71141");
            dialogDateFrom.value(assetDateFrom);
        }

        dialogDepDate = dialog.addField(extendedtypestr(AssetTransDate),"@SYS14656","@SYS71141");
        dialogDepDate.value(runDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            runDate = dialogDepDate.value();

            ret = this.checkDateIsValid(runDate);

            if (this.budgetJournal())
                assetDateFrom  = dialogDateFrom.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        Query               query = new Query(querystr(assetproposal));
        QueryBuildRange     qr_Range;

        super();

        query.name("@FixedAssets:FA_QueryTitle_ValueModelExtraOrdinaryDepreciation");
        query.dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook,Depreciation)).value(queryValue(NoYes::Yes));

        qr_Range = query.dataSourceTable(tablenum(AssetBookTable)).addRange(fieldnum(AssetBookTable,CurrentOperationsTax));
        qr_Range.status(1);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        AssetTableMethod            assetTableMethodExtraordinary;
        AssetTableMethod            assetTableMethodExtraordinaryReportingCurrency;
        AmountCur                   amountCur;
        AssetAmountReportingCurrency amountReportingCurrency;
        real                        depPeriod;

        AssetJournal                assetJournal;
        AssetTable                  assetTable;
        AssetBook                   assetBook;
        AssetTransDate              transDate;

        AssetDepreciationProfile    depreciationExtProfile;
        // <GCN><GJP>
        AssetAllocator_CN           allocator;
        boolean                     isCNorJPRegion = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN, #isoJP]);
        // </GJP></GCN>
	    // <GJP>
	    boolean                         isJPRegion = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
	    AssetTransDate                  specialDepReserveEndDate;
	    AssetTransDate                  specialDepAllocationStartDate;
	    AssetDocumentType_JP            assetDocumentType;

	    AssetDepreciationProfile        depreciationProfile;
	    AssetTrans                      assetTrans;
	    AssetTransDate                  reserveEffectiveDate;
	    AssetDepTableMethodInterface_JP assetDepTableMethodInterface;
	    container                       reserveInfo;
	    List                            reserveLedgerJournals;
	    ListEnumerator                  reserveEnumerator;
	    RecordInsertList                recordInsertList;
	    AssetDepDistributionLine_JP     assetDepDistributionLine;
	    TransactionReversalTrans        transReversal;

	    //info for additional reserve
	    AssetTransDate                  reserveDate;
	    AssetAmount                     reserveAmount;
	    RefRecId                        reserveRecId;
	    RefTableId                      reserveTableId;
	    AssetDocumentType_JP            reserveDocType;
	    real                            signOfReserve;

        AssetTableInterval              assetTableInterval;
        boolean                         isIdlePeriodActive;
        int                             numOfIdlePeriods;
        AssetDepTableMethodInterface_JP assetDepTableMethodInterfaceLoc;

	    #AssetDepCalculation_JP
	    // </GJP>
        #avifiles

        assetJournal = new AssetJournal(journalNum,this.assetTransType());

        // <GJP>
        if (isJPRegion)
        {
             reserveLedgerJournals = new List(Types::Container);
        }
        // </GJP>

        // <GCN><GJP>
        if (isCNorJPRegion)
        {
            allocator = new AssetAllocator_CN();
        }
        // </GJP></GCN>
        // <GCN>
        if (assetJournal && LedgerParameters::isChineseVoucher_CN())
        {
            // Set the voucher type for asset journal with the value user selected.
            assetJournal.parmVoucherType_CN(voucherType_CN);
        }
        // </GCN>
        if (!assetBudgetModelId)
        {
            queryRun.query().dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook,Status)).value(queryValue(AssetStatus::Open));
        }
        else
        {
            queryRun.query().dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook,Status)).value(queryValue(AssetStatus::Open)+','+queryValue(AssetStatus::NoAcquisition));
        }

        ttsbegin;

        // <GJP>
        // Delete distribution line without reference to distribution
        // Suppose there should be no such records, but in case there is bad data
        delete_from assetDepDistributionLine
            where assetDepDistributionLine.AssetDepDistribution_JP == 0;
        // </GJP>

        boolean isIdlePeriodActiveAny;

        boolean hasSameAccoutingAndReportingCurrency = Ledger::reportingCurrency() == Ledger::accountingCurrency();
        boolean executeReportingCurrencyLogic;

        if (!hasSameAccoutingAndReportingCurrency)
        {
            executeReportingCurrencyLogic = Ledger::reportingCurrency() != '';
        }

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(AssetBook)))
            {
                assetBook = queryRun.get(tablenum(AssetBook));

                AssetCacheManager::removeCacheAssetTrans(assetBook.AssetId, assetBook.BookId);

                fiscalCalendarPeriod = null;

                depreciationProfile = assetBook.depreciationProfile();

                // <GJP>
                if (isJPRegion 
                    && depreciationProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP
                    && assetBook.SpecialDepStartDate_JP == dateNull())
                {
                    checkFailed(strFmt("@FixedAsset_AcceleratedAdditionalDepreciation:FA_Message_Validation_CheckExtraOrdinaryDepreciationProposal", assetBook.AssetId, assetBook.BookId));
                    continue;
                }
                // </GJP>

                depreciationExtProfile = assetBook.depreciationExtProfile();

                // For additional depreciation with reserve, it will only calculate reserve part
                if (depreciationExtProfile &&
	                (depreciationExtProfile.Method == AssetDepreciationMethod::Manual
	                    // <GJP>
	                    || depreciationExtProfile.Method == AssetDepreciationMethod::SpecialDepreciation_JP
	                    || (depreciationExtProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP
	                        && AssetDepreciationProfile::isDepMethodAllowAdditionalDep_JP(depreciationProfile.Method))
	                    // </GJP>
	                ))
                {
                    assetTableMethodExtraordinary = AssetTableMethod::construct(assetBook, runDate, assetBudgetModelId, false, false, true);

                    if (executeReportingCurrencyLogic)
                    {
                        assetTableMethodExtraordinaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(assetBook, runDate, assetBudgetModelId, false, false, true);
                    }
	                // <GJP>
	                if (isJPRegion
	                    && depreciationExtProfile.Method == AssetDepreciationMethod::SpecialDepreciation_JP
	                    && depreciationExtProfile.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::Reserve)
	                {
	                    [specialDepReserveEndDate, specialDepAllocationStartDate] = AssetSpecialDepHelper_JP::calcAllocationStartDate(assetBook);
	                }
	                // </GJP>

                    // <GJP>
                    if (isJPRegion
                        && depreciationExtProfile.Method == AssetDepreciationMethod::SpecialDepreciation_JP
                        && depreciationExtProfile.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::Reserve)
                    {
                        [specialDepReserveEndDate, specialDepAllocationStartDate] = AssetSpecialDepHelper_JP::calcAllocationStartDate(assetBook);
                    }
                    // </GJP>

                    amountCur = 0;
                    amountReportingCurrency = 0;
                    depPeriod = 0;
                    while (assetTableMethodExtraordinary.next())
                    {
                        // <GJP>
                        if (isJPRegion)
                        {
                            assetTableInterval = assetTableMethodExtraordinary.getAssetTableInterval_JP();
                            isIdlePeriodActive = AssetIdlePeriodTable_JP::exists(assetBook.AssetId, assetBook.BookId, assetTableMethodExtraordinary.parmPeriodEnd());
                            numOfIdlePeriods   = AssetIdlePeriodAssign_JP::findNumOfIdlePeriods(assetBook.AssetId, assetBook.BookId, assetTableInterval, assetTableMethodExtraordinary.parmPeriodEnd());

                            if (isIdlePeriodActive)
                            {
                                isIdlePeriodActiveAny = true;
                            }

                            if (assetTableMethodExtraordinary is AssetDepTableMethodInterface_JP)
                            {
                                assetDepTableMethodInterfaceloc = assetTableMethodExtraordinary as Object;
                                assetDepTableMethodInterfaceloc.parmAssetIdlePeriods(numOfIdlePeriods);
                                assetDepTableMethodInterfaceloc.parmIsAssetIdlePeriodActive(isIdlePeriodActive);
                            }
                        }
                        // </GJP>

                        amountCur += -assetTableMethodExtraordinary.calc();
                        depPeriod += assetTableMethodExtraordinary.depPeriod();

                        if (executeReportingCurrencyLogic && assetTableMethodExtraordinaryReportingCurrency.next())
                        {
                            amountReportingCurrency = -assetTableMethodExtraordinaryReportingCurrency.calc();                            
                        }
						else if (hasSameAccoutingAndReportingCurrency)
                        {
                            amountReportingCurrency = amountCur;
                        }

                        if (amountCur)
                        {
                            transDate = this.initFirstDate(assetTableMethodExtraordinary.depDate(),assetTable.AssetId);
                            if (!this.budgetJournal() || (this.budgetJournal() && transDate >= assetDateFrom))
                            {
                                // <GJP>
                                if (isJPRegion
                                    && AssetDepreciationProfile::isSpecialDepMethod_JP(depreciationExtProfile.Method))
                                {
                                    assetDocumentType = AssetSpecialDepHelper_JP::calcAssetDocumentType(depreciationExtProfile, transDate, specialDepAllocationStartDate);
                                }
                                if (assetDocumentType == AssetDocumentType_JP::SpecialDepReserveAllocation)
                                {
                                    amountCur = -amountCur;
                                }
                                // </GJP>
                                // <GCN><GJP>
                                if (isCNorJPRegion && !this.budgetJournal())
                                {
                                	allocator.createTransJournal(assetJournal, amountCur,assetBook,transDate,assetBudgetModelId,assetTableMethodExtraordinary.depPeriod(), 0, false, 0, 0, dateNull(), false, false, assetDocumentType, 0, reserveLedgerJournals);
                                }
                                else
                                {
                                // </GCN></GJP>
									assetJournal.parmReportingCurrencyAmount(amountReportingCurrency);
	                                assetJournal.createTrans(amountCur,assetBook,transDate,assetBudgetModelId,assetTableMethodExtraordinary.depPeriod(), 0, false, 0, 0, dateNull(), false, false
	                                // <GJP>
	                                    , assetDocumentType,
	                                    0,
	                                    reserveLedgerJournals
	                                // </GJP>
	                                );
                                // <GCN><GJP>
                                }
                                // </GCN></GJP>
                            }
                            amountCur = 0;
                        }
                    }
                }
	            // <GJP>
	            // For additional depreciation with reserve, it will calculate allocation part
                if (isJPRegion
                    && depreciationExtProfile
                    && depreciationExtProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP
                    && depreciationExtProfile.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::Reserve
                    && AssetDepreciationProfile::isDepMethodAllowAdditionalDep_JP(depreciationProfile.Method))
	            {
	                reserveEffectiveDate = AssetSpecialDepHelper_JP::calcReserveEffectiveDate(assetBook);
	
                    // Firstly, all reserve trans will be considered
	                while select TransDate, AmountMST, RecId from assetTrans
	                    where assetTrans.AssetId == assetBook.AssetId
	                        && assetTrans.BookId == assetBook.BookId
	                        && assetTrans.TransType == AssetTransType::AdditionalDepReserve_JP
	                        && assetTrans.TransDate >= reserveEffectiveDate
	                    notExists join transReversal
	                        where transReversal.RefRecId == assetTrans.RecId
	                            && transReversal.RefTableId == tableNum(AssetTrans)
	                            && transReversal.Reversed == true
	                {
	                    reserveInfo = conNull();
	                    reserveInfo = conIns(reserveInfo, #PosForReserveDate, assetTrans.TransDate);
	                    reserveInfo = conIns(reserveInfo, #PosForReserveAmount, assetTrans.AmountMST);
	                    reserveInfo = conIns(reserveInfo, #PosForReserveRecId, assetTrans.RecId);
	                    reserveInfo = conIns(reserveInfo, #PosForReserveTableId, tableNum(AssetTrans));
	                    reserveInfo = conIns(reserveInfo, #PosForReserveDocType, AssetDocumentType_JP::AdditionalDepReserve);
	                    reserveLedgerJournals.addEnd(reserveInfo);
	                }
	
                    recordInsertList = new RecordInsertList(tableNum(AssetDepDistributionLine_JP));
	                reserveEnumerator = reserveLedgerJournals.getEnumerator();
	                // For each special reserve, calcualtion corresponding allocation
	                while (reserveEnumerator.moveNext())
	                {
	                    reserveInfo     = reserveEnumerator.current();
	                    reserveDate     = conPeek(reserveInfo, #PosForReserveDate);
	                    reserveAmount   = conPeek(reserveInfo, #PosForReserveAmount);
	                    reserveRecId    = conPeek(reserveInfo, #PosForReserveRecId);
	                    reserveTableId  = conPeek(reserveInfo, #PosForReserveTableId);
	                    reserveDocType  = conPeek(reserveInfo, #PosForReserveDocType);
	                    signOfReserve   = sign(reserveAmount);
                        assetTableMethodExtraordinary = AssetTableMethod::construct(assetBook, runDate, assetBudgetModelId, false, false, true);
	
                      if (assetTableMethodExtraordinary is AssetDepTableMethodInterface_JP)
	                    {
	                        assetDepTableMethodInterface = assetTableMethodExtraordinary as AssetDepTableMethodInterface_JP;
	                        assetDepTableMethodInterface.parmSpecialDepReserveDate(reserveDate);
	                        assetDepTableMethodInterface.parmSpecialDepReserveAmount(abs(reserveAmount));
	                        assetDepTableMethodInterface.parmSpecialDepReserveRecId(reserveRecId);
	                        assetDepTableMethodInterface.parmSpecialDepReserveTableId(reserveTableId);
	                        assetDepTableMethodInterface.initAdditional();
	                    }
	
                      amountCur = 0;
	                    depPeriod = 0;
	                    while (assetDepTableMethodInterface.next())
	                    {
	                        transDate = assetDepTableMethodInterface.parmPeriodEnd_JP();
	                        amountCur = -1 * signOfReserve * assetDepTableMethodInterface.calc();
	
                          if (amountCur)
	                        {
	                            assetDepDistributionLine.clear();
	                            assetDepDistributionLine.TransDate              = transDate;
	                            assetDepDistributionLine.AmountCur              = amountCur;
	                            assetDepDistributionLine.RefReserveDate         = reserveDate;
	                            assetDepDistributionLine.RefReserveAmount       = reserveAmount;
	                            assetDepDistributionLine.RefReserveRecId        = reserveRecId;
	                            assetDepDistributionLine.RefReserveTableId      = reserveTableId;
	                            assetDepDistributionLine.RefReserveDocType      = reserveDocType;
	                            assetDepDistributionLine.TransType              = AssetTransType::ExtraordinaryDepreciation;
	                            if (assetDepDistributionLine.RefReserveDocType == AssetDocumentType_JP::AdditionalDepReserve)
	                            {
	                                assetDepDistributionLine.DocmentType = AssetDocumentType_JP::AdditionalDepReserveAllocation;
	                            }
	                            else if (assetDepDistributionLine.RefReserveDocType == AssetDocumentType_JP::SpecialDepReserve)
	                            {
	                                assetDepDistributionLine.DocmentType = AssetDocumentType_JP::SpecialDepReserveAllocation;
	                            }
	                            recordInsertList.add(assetDepDistributionLine);
	                            amountCur = 0;
	                        }
	                    }
	                }

	                recordInsertList.insertDatabase();

	                while select sum(AmountCur), TransDate from assetDepDistributionLine
	                    group by assetDepDistributionLine.TransDate, assetDepDistributionLine.DocmentType
	                    where assetDepDistributionLine.AssetDepDistribution_JP == 0
	                {
	                    if (!this.budgetJournal())
	                    {
	                        allocator.createTransJournal(
	                            assetJournal,
	                            assetDepDistributionLine.AmountCur,
	                            assetBook,
	                            assetDepDistributionLine.TransDate,
	                            assetBudgetModelId,
	                            0,
	                            0,
	                            false,
	                            0,
	                            0,
	                            dateNull(),
	                            false,
	                            false,
	                            assetDepDistributionLine.DocmentType);
	                    }
	                    else
	                    {
	                         assetJournal.createTrans(
	                            assetDepDistributionLine.AmountCur,
	                            assetBook,
	                            assetDepDistributionLine.TransDate,
	                            '',
	                            0,
	                            0,
	                            false,
	                            0,
	                            0,
	                            dateNull(),
	                            false,
	                            false,
	                            assetDepDistributionLine.DocmentType);
	                    }
	                }
	            }
	            // </GJP>
            }
        }
        ttscommit;

        if (isIdlePeriodActiveAny)
        {
            GlobalizationInstrumentationHelper::featureRun(FeatureReferenceJP31, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>