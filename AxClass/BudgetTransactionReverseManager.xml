<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransactionReverseManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetTransactionReverseManager</c> class manages the budget transaction reversal process.
/// </summary>
class BudgetTransactionReverseManager implements SysPackable
{
    BudgetCode reversingTransactionCode;
    BudgetModelId reversingBudgetModelId;
    Set transactionLinesToReverse;
    boolean useTodayDateToReversePreliminaryBudget;

    BudgetTransactionHeader reversingTransactionHeader;
    BudgetTransactionPost budgetTransactionPost;

    int numOfLines;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        reversingTransactionCode,
        reversingBudgetModelId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTransactionLineToReverse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the <c>BudgetTransactionLine</c> record ID to the set of <c>BudgetTransactionLine</c> record
    ///    IDs to reverse.
    /// </summary>
    /// <param name="_budgetTransactionLineRecId">
    ///    The <c>BudgetTransactionLine</c> record ID to reverse.
    /// </param>
    public void addTransactionLineToReverse(RecId _budgetTransactionLineRecId)
    {
        transactionLinesToReverse.add(_budgetTransactionLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseTodayDateToReversePreliminaryBudget</Name>
				<Source><![CDATA[
    internal boolean parmUseTodayDateToReversePreliminaryBudget(boolean _useTodayDateToReversePreliminaryBudget = useTodayDateToReversePreliminaryBudget)
    {
        useTodayDateToReversePreliminaryBudget = _useTodayDateToReversePreliminaryBudget;

        return useTodayDateToReversePreliminaryBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversingTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>BudgetTransactionLine</c> record that will be reversed.
    /// </summary>
    /// <param name="_reversedTransactionLine">
    ///    The <c>BudgetTransactionLine</c> record to reverse.
    /// </param>
    /// <remarks>
    ///    The <c>BudgetTransactionLineReverse</c> record will also be created to associate the reversed and
    ///    reversing <c>BudgetTransactionLine</c> records.
    /// </remarks>
    protected void createReversingTransactionLine(BudgetTransactionLine _reversedTransactionLine)
    {
        BudgetTransactionHeader reversedTransactionHeader;
        BudgetTransactionLine reversingTransactionLine;
        BudgetTransactionLineReverse budgetTransactionLineReverse;

        ttsbegin;

        // Get the reversed transaction header.
        reversedTransactionHeader = BudgetTransactionHeader::find(_reversedTransactionLine.BudgetTransactionHeader);

        // Create the reversing budget transaction line.
        // Default the data to match the reversed transaction line.
        reversingTransactionLine = _reversedTransactionLine.data();

        // Increment the number of reversing transaction lines and assign the value to LineNumber.
        numOfLines += 1;
        reversingTransactionLine.LineNumber = numOfLines;

        // Associate the reversing transaction line to the reversing transaction header.
        reversingTransactionLine.BudgetTransactionHeader = reversingTransactionHeader.RecId;

        // Set the reversing amounts to the opposite of the reversed transaction line.
        // This will offset the original budget amounts.
        reversingTransactionLine.TransactionCurrencyAmount = -1 * _reversedTransactionLine.TransactionCurrencyAmount;
        reversingTransactionLine.AccountingCurrencyAmount = -1 * _reversedTransactionLine.AccountingCurrencyAmount;

        if (PreliminaryBudgetReversalDateFeature::isEnabled()
           && useTodayDateToReversePreliminaryBudget
           && reversedTransactionHeader.BudgetTransactionType == BudgetTransactionType::PreliminaryBudget)
        {
            reversingTransactionLine.Date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        // Set the comment to note which transaction number the transaction line being reversed was a part of.
        reversingTransactionLine.Comment = strfmt("@SYS131659", reversedTransactionHeader.TransactionNumber);

        reversingTransactionLine.insert();

        // Create the association between the reversed and reversing budget transaction lines.
        budgetTransactionLineReverse.ReversedBudgetTransactionLine = _reversedTransactionLine.RecId;
        budgetTransactionLineReverse.ReversingBudgetTransactionLine = reversingTransactionLine.RecId;

        // Insert the line without validating.
        // The line reverses the data from the existing budget transaction line
        // and should not be prevented if part of the validation now fails.
        budgetTransactionLineReverse.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>BudgetTransactionHeader</c> record that will be reversed.
    /// </summary>
    protected void createTransactionHeader()
    {
        NumberSeq numberSeq;
        BudgetTransactionCode budgetTransactionCode;

        ttsbegin;

        reversingTransactionHeader.clear();
        reversingTransactionHeader.initValue();

        budgetTransactionCode = BudgetTransactionCode::findByBudgetTransactionCode(reversingTransactionCode);

        if (BudgetTransactionManager::checkBudgetTransactionNumberSequence() == true)
        {
            // The number sequence for budget transactions is valid.
            // Get the next number in the sequence for the reversal.
            numberSeq = NumberSeq::newGetNum(BudgetParameters::numRefBudgetTransactionId());

            reversingTransactionHeader.TransactionNumber = numberSeq.num();

            // Set the budget transaction code and initialize the budget transaction header from it.
            reversingTransactionHeader.setBudgetTransactionCode(budgetTransactionCode.RecId);

            reversingTransactionHeader.editBudgetModel(true, reversingBudgetModelId);

            if (budgetTransactionCode.WorkflowTableSequenceNumber &&
                budgetTransactionCode.validateWorkflowTableSequenceNumber())
            {
                reversingTransactionHeader.WorkflowStatus = BudgetTransactionWorkflowStatus::Approved;
            }

            // Insert the header without validating.
            // The header reverses the data from the existing budget transaction
            // and should not be prevented if part of the validation now fails.
            reversingTransactionHeader.insert();

            budgetTransactionPost = BudgetTransactionPost::construct(reversingTransactionHeader.TransactionNumber);
            budgetTransactionPost.parmIsReversal(true);
        }
        else
        {
            // The number sequence check failed.
            throw error(strFmt("@SYS340602", budgetTransactionCode.BudgetTransactionType));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReversingBudgetTransactionCode</Name>
				<Source><![CDATA[
    public BudgetCode getReversingBudgetTransactionCode()
    {
        return reversingTransactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>BudgetTransactionReverseManager</c> class.
    /// </summary>
    /// <param name="_budgetTransactionCode">
    ///    The budget transaction code to use in the reversal process.
    /// </param>
    /// <param name="_budgetModelId">
    ///    The budget model ID to use in the reversal process.
    /// </param>
    protected void initialize(BudgetCode _budgetTransactionCode, BudgetModelId _budgetModelId)
    {
        reversingTransactionCode = _budgetTransactionCode;
        reversingBudgetModelId = _budgetModelId;

        // Set that stores the record IDs of the transaction lines to reverse
        transactionLinesToReverse = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion, [#CurrentList, transactionLinesToReverse.pack()]];
        packed = SysPackExtensions::appendVariableToPack(packed, classStr(BudgetTransactionReverseManager), varStr(useTodayDateToReversePreliminaryBudget), useTodayDateToReversePreliminaryBudget);

        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReversal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the reversal of the <c>BudgetTransactionLine</c> records.
    /// </summary>
    protected void processReversal()
    {
        SetEnumerator transactionLineEnumerator;
        BudgetTransactionLine budgetTransactionLine;

        ttsbegin;

        // Create the budget transaction header that will manage all the reversing lines.
        this.createTransactionHeader();

        // Enumerate through all the budget transaction lines to reverse.
        transactionLineEnumerator = transactionLinesToReverse.getEnumerator();

        while (transactionLineEnumerator.moveNext())
        {
            budgetTransactionLine = BudgetTransactionLine::find(transactionLineEnumerator.current());

            if (this.validateTransactionLineToReverse(budgetTransactionLine) == false)
            {
                // Abort the entire reversal if any budget transaction line is not valid.
                throw error(strFmt("@SYS340602", reversingTransactionHeader.BudgetTransactionType));
            }

            // Create the reversing budget transaction line and create the assocation
            // between the reversed and the reversing budget transaction lines.
            this.createReversingTransactionLine(budgetTransactionLine);
        }

        ttscommit;

        try
        {
            // Update budget balances for reversal lines by calling post
            if (budgetTransactionPost != null)
            {
                budgetTransactionPost.runOperation();
            }
        }
        catch(Exception::Error)
        {
            // Updating balances failed with a message thrown, catch & throw reversal specific message
            throw error(strFmt("@SYS340602", reversingTransactionHeader.BudgetTransactionType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransactionLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the <c>BudgetTransactionLine</c> records that were added to the reversal process.
    /// </summary>
    public void reverseTransactionLines()
    {
        if (transactionLinesToReverse.elements() > 0)
        {
            this.processReversal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   packedClassMembers;
        container   packedTransactionLinesToReverse;

        switch (version)
        {
            case #CurrentVersion:
                // Extract the packed values.
                [version, packedClassMembers] = _packedClass;

                useTodayDateToReversePreliminaryBudget = SysPackExtensions::extractPackedVariable(_packedClass, classStr(BudgetTransactionReverseManager), varStr(useTodayDateToReversePreliminaryBudget));

                // Extract the #CurrentList and packed set and maps.
                [#CurrentList, packedTransactionLinesToReverse] = packedClassMembers;

                break;

            default:
                return false;
        }

        if (packedTransactionLinesToReverse != connull())
        {
            // Unpack the packed set
            transactionLinesToReverse = Set::create(packedTransactionLinesToReverse);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionLineToReverse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>BudgetTransactionLine</c> record is valid to be reversed.
    /// </summary>
    /// <param name="_budgetTransactionLine">
    ///    The <c>BudgetTransactionLine</c> record to reverse.
    /// </param>
    /// <returns>
    ///    true if the <c>BudgetTransactionLine</c> record is valid; otherwise, false.
    /// </returns>
    protected boolean validateTransactionLineToReverse(BudgetTransactionLine _budgetTransactionLine)
    {
        boolean isValid = true;
        BudgetTransactionHeader reversedHeader;

        reversedHeader = BudgetTransactionHeader::find(_budgetTransactionLine.BudgetTransactionHeader);

        if ((reversedHeader.TransactionStatus != BudgetTransactionStatus::Completed) ||
            (reversedHeader.BudgetModelId != reversingBudgetModelId) ||
            (reversedHeader.BudgetTransactionCode != BudgetTransactionCode::findByBudgetTransactionCode(reversingTransactionCode).RecId) ||
            (BudgetTransactionLineReverse::isTransactionLineInReversal(_budgetTransactionLine.RecId) == true))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BudgetTransactionReverseManager</c> class.
    /// </summary>
    /// <param name="_budgetTransactionCode">
    ///    The budget transaction code to use in the reversal process.
    /// </param>
    /// <param name="_budgetModelId">
    ///    The budget model ID to use in the reversal process.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetTransactionReverseManager</c> class.
    /// </returns>
    public static BudgetTransactionReverseManager construct(
        BudgetCode _budgetTransactionCode,
        BudgetModelId _budgetModelId)
    {
        BudgetTransactionReverseManager reverseManager;

        reverseManager = new BudgetTransactionReverseManager();

        reverseManager.initialize(_budgetTransactionCode, _budgetModelId);

        return reverseManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForProvisionalBudget</Name>
				<Source><![CDATA[
    public static BudgetTransactionReverseManager constructForProvisionalBudget(boolean _includeAllBudgetCodes, BudgetCode _transactionCode, BudgetTransactionHeader _budgetTransactionHeader)
    {
        BudgetTransactionReverseManager reverseManager;
        BudgetTransactionCode           budgetTransactionCode;

        reverseManager = new BudgetTransactionReverseManager();

        if (_includeAllBudgetCodes)
        {
            while select BudgetTransactionType, Name from budgetTransactionCode
                where budgetTransactionCode.BudgetTransactionType == BudgetTransactionType::PreliminaryBudget
            {
                reverseManager.initialize(_transactionCode, _budgetTransactionHeader.BudgetModelId);
            }
        }
        else
        {
            budgetTransactionCode = BudgetTransactionCode::findByBudgetTransactionCode(_transactionCode);
            reverseManager.initialize(budgetTransactionCode.Name, _budgetTransactionHeader.BudgetModelId);
        }

        return reverseManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetTransactionReverseManager</c> class from a packed copy.
    /// </summary>
    /// <param name="_packedBudgetTransactionReverseManager">
    ///    The packed instance of the <c>BudgetTransactionReverseManager</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetTransactionReverseManager</c> class.
    /// </returns>
    public static BudgetTransactionReverseManager create(container _packedBudgetTransactionReverseManager)
    {
        BudgetTransactionReverseManager reverseManager;

        reverseManager = new BudgetTransactionReverseManager();

        reverseManager.unpack(_packedBudgetTransactionReverseManager);

        return reverseManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>