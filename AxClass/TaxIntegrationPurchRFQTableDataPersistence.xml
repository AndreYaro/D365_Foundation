<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationPurchRFQTableDataPersistence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationPurchRFQTableDataPersistence</c> class persists data to <c>PurchRFQTable</c>, etc.
/// </summary>
[TaxIntegrationDataPersistence(tableStr(PurchRFQTable))]
public class TaxIntegrationPurchRFQTableDataPersistence
    extends TaxIntegrationAbstractDataPersistenceTemplate
{
    protected PurchRFQTable purchRFQTable;
    protected PurchRFQLine purchRFQLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.purchRFQTable)
            .forUpdate()
            .where(this.purchRFQTable, fieldStr(PurchRFQTable, RecId))
                .isEqualToLiteral(this.document.getLocalRecId())
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        PurchRFQReplyLine purchRFQReplyLine;

        PurchRFQParmTable purchRFQParmTable;
        PurchRFQParmLine purchRFQParmLine;

        if (this.document.getLegacyTax())
        {
            PurchCalcTax purchCalcTax = this.document.getLegacyTax().purchCalcTax();

            if (purchCalcTax is PurchCalcTax_RFQParmTrans)
            {
                PurchCalcTax_RFQParmTrans purchCalcTaxRFQParmTrans = purchCalcTax;
                purchRFQParmTable = purchCalcTaxRFQParmTrans.getPurchRFQParmTable();

                return SysDaQueryObjectBuilder::from(this.purchRFQLine)
                    .forUpdate()
                    .where(this.purchRFQLine, fieldStr(PurchRFQLine, RFQId))
                        .isEqualToLiteral(this.purchRFQTable.RFQId)
                    .innerJoin(purchRFQParmLine)
                        .where(purchRFQParmLine, fieldStr(PurchRFQParmLine, ParmId))
                            .isEqualToLiteral(purchRFQParmTable.ParmId)
                        .where(purchRFQParmLine, fieldStr(PurchRFQParmLine, TableRefId))
                            .isEqualToLiteral(purchRFQParmTable.TableRefId)
                        .where(purchRFQParmLine, fieldStr(PurchRFQParmLine, RFQLineRecId))
                            .isEqualTo(purchRFQLine, fieldStr(PurchRFQLine, RecId))
                    .toSysDaQueryObject();
            }
            else if (purchCalcTax is PurchCalcTax_RFQReply)
            {
                return SysDaQueryObjectBuilder::from(this.purchRFQLine)
                    .forUpdate()
                    .where(this.purchRFQLine, fieldStr(PurchRFQLine, RFQId))
                        .isEqualToLiteral(this.purchRFQTable.RFQId)
                    .innerJoin(purchRFQReplyLine)
                        .where(purchRFQReplyLine, fieldStr(PurchRFQReplyLine, rfqLineRecId))
                            .isEqualTo(purchRFQLine, fieldStr(PurchRFQLine, RecId))
                    .toSysDaQueryObject();
            }
        }

        return SysDaQueryObjectBuilder::from(this.purchRFQLine)
            .forUpdate()
            .where(this.purchRFQLine, fieldStr(PurchRFQLine, RFQId))
                .isEqualToLiteral(this.purchRFQTable.RFQId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .forUpdate()
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchRFQTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchRFQTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .forUpdate()
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchRFQLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchRFQLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line of the document.
    /// </summary>
    /// <returns>The current line of the document</returns>
    protected TaxIntegrationLineObject getLine()
    {
        TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.purchRFQLine.TableId, this.purchRFQLine.RecId);
        if (!document.checkLine(localId))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:LineOnDocumentNotFound", localId, document.getLocalId())));
            return null;
        }

        return document.getLine(localId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document.
    /// </summary>
    /// <returns>Always true.</returns>
    protected boolean saveDocument()
    {
        TaxIntegrationTaxIdUtility::saveTaxIDFromDocumentToTable(document, purchRFQTable);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean saveLine(TaxIntegrationLineObject _line)
    {
        if (!_line.isTaxable())
        {
            return true;
        }

        TaxGroup taxGroup = _line.getTaxGroup();
        TaxItemGroup taxItemGroup = _line.getTaxItemGroup();

        purchRFQLine.TaxGroup = taxGroup;
        purchRFQLine.TaxItemGroup = taxItemGroup;
        purchRFQLine.doUpdate();
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>