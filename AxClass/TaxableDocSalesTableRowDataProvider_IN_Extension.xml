<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocSalesTableRowDataProvider_IN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(TaxableDocSalesTableRowDataProvider))]
final class TaxableDocSalesTableRowDataProvider_IN_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillInFields</Name>
				<Source><![CDATA[
    public void fillInFields(TaxableDocumentLineObject _lineObj)
    {
        next fillInFields(_lineObj);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if (salesTable)
            {
                this.addFieldValue(_lineObj, TaxEngineModelFields::IsExportOrder, salesTable.CustomsExportOrder_IN);
                this.addFieldValue(_lineObj, TaxEngineModelFields::ECommerceSale, salesTable.salesTable_W().ECommerceSale_IN);
                this.addFieldValue(_lineObj, TaxEngineModelFields::ECommerceOperatorGSTINNumber, TaxRegistrationNumbers_IN::find(salesTable.salesTable_W().ECommerceOperatorGSTIN_IN).RegistrationNumber);
                this.addFieldValue(_lineObj, TaxEngineModelFields::MerchantID, salesTable.salesTable_W().MerchantID_IN);
                this.addFieldValue(_lineObj, TaxEngineModelFields::WithIGSTPayment, salesTable.salesTable_W().WithIGSTPayment_IN);
                this.addFieldValue(_lineObj, TaxEngineModelFields::WouldYouClaimRefund, salesTable.salesTable_W().WouldYouClaimRefund_IN);
            }

            this.addFieldValue(_lineObj, TaxEngineModelFields::IsTaxAsPerOriginalInvoice, this.isTaxAsPerOriginalInvoice_IN());
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initValidFields</Name>
				<Source><![CDATA[
    protected void initValidFields()
    {
        next initValidFields();

        validFields.add(TaxEngineModelFields::IsExportOrder, Types::Enum, enumNum(NoYes));
        validFields.add(TaxEngineModelFields::ECommerceSale, Types::Enum, enumNum(NoYes));
        validFields.add(TaxEngineModelFields::ECommerceOperatorGSTINNumber, Types::String);
        validFields.add(TaxEngineModelFields::MerchantID, Types::String);
        validFields.add(TaxEngineModelFields::WithIGSTPayment, Types::Enum, enumNum(NoYes));
        validFields.add(TaxEngineModelFields::IsTaxAsPerOriginalInvoice, Types::Enum, enumNum(NoYes));
        validFields.add(TaxEngineModelFields::WouldYouClaimRefund, Types::Enum, enumNum(NoYes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxAsPerOriginalInvoice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the tax is as per original invoice.
    /// </summary>
    /// <returns>
    /// True if the tax is as per original invoice; otherwise, false.
    /// </returns>
    private NoYes isTaxAsPerOriginalInvoice_IN()
    {
        SalesLine       salesLine;
        SalesLine_IN    salesLineIN;

        if (salesTable)
        {
            select firstonly RecId, TaxAsPerOriginalInvoice from salesLineIN
                join RecId from salesLine
                    where salesLine.RecId == salesLineIN.SalesLine
                    && salesLine.SalesId == salesTable.SalesId;

            if (salesLineIN.RecId)
            {
                return salesLineIN.TaxAsPerOriginalInvoice;
            }
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>