<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmApplicantResumeDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>HcmApplicantResumeDP</c> class is the RDP class for the applicant resume report
/// </summary>

[
    SRSReportQueryAttribute(querystr(HcmApplicantPerson)),
    SRSReportParameterAttribute(classstr(HcmApplicantResumeContract))
]

class HcmApplicantResumeDP  extends SRSReportDataProviderBase
{
    HcmApplicantResumeTmpTable      applicantResumeTmp;
    HcmApplicant                    hcmApplicant;
    HcmWorker                       hcmWorker;
    HcmPersonImage                  hcmPersonImage;
    HcmPersonEducation              hcmPersonEducation;
    HcmEducationDiscipline          hcmEducationDiscipline;
    HcmEducationLevel               hcmEducationLevel;
    HcmEducationInstitution         hcmEducationInstitution;
    HcmPersonSkill                  hcmPersonSkill;
    HcmSkill                        hcmSkill;
    HcmRatingLevel                  hcmRatingLevel;
    HcmPersonProfessionalExperience hcmPersonProfessionalExperience;
    HcmPersonTrustedPosition        hcmPersonTrustedPosition;
    HcmPersonCourse                 hcmPersonCourse;
    HcmPersonCertificate            hcmPersonCertificate;
    HcmCertificateType              hcmCertificateType;
    HcmPersonProjectRole            hcmPersonProjectRole;
    HcmPositionWorkerAssignment     hcmPositionWorkerAssignment;
    HcmPosition                     hcmPosition;
    HcmPositionDetail               hcmPositionDetail;
    DirPartyTable                   dirPartyTable;
    // HcmApplicant                    hcmApplicantTable;
    HcmApplicantReference           hcmApplicantReference;

    boolean printPicture;
    boolean printEducation;
    boolean printSkill;
    boolean printProfExp;
    boolean printTrustedPosition;
    boolean printCourse;
    boolean printCertificate;
    boolean printProject;
    boolean printHistory;
    boolean printReferences;
    boolean printEmptyResume;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getApplicantResumeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects all of the records from the temporary table and returns them to the report.
    /// </summary>
    /// <returns>
    ///    The content of the temporary table.
    /// </returns>

    [
        SRSReportDataSetAttribute('HcmApplicantResumeTmpTable')
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HcmApplicantResumeTmpTable getApplicantResumeTmpTable()
    {
        select applicantResumeTmp ;

        return applicantResumeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method inserts data into the temporary table.
    /// </summary>
    /// <param name="_tableId">
    ///    The values to insert into specific fields.
    /// </param>
    private void insertIntoTempTable(tableId _tableId = 0)
    {
        applicantResumeTmp.clear();

        //Applicant details
        applicantResumeTmp.Name             = hcmApplicant.name();
        applicantResumeTmp.Address          = hcmApplicant.address();
        applicantResumeTmp.Email            = hcmApplicant.email();
        applicantResumeTmp.Phone            = hcmApplicant.phone();
        applicantResumeTmp.ApplicantId      = hcmApplicant.ApplicantId;
        applicantResumeTmp.ApplicantType    = hcmApplicant.applicantType();

        switch (_tableId)
        {
            //Picture
            case tablenum(HcmPersonImage):
                applicantResumeTmp.Image    = hcmPersonImage.Image;
                break;

            //Education
            case tablenum(HcmPersonEducation):
                applicantResumeTmp.EducationStartDate               = hcmPersonEducation.StartDate;
                applicantResumeTmp.EducationEndDate                 = hcmPersonEducation.EndDate;
                applicantResumeTmp.EducationDisciplineId            = hcmEducationDiscipline.EducationDisciplineId;
                applicantResumeTmp.EducationDescription             = hcmEducationDiscipline.Description;
                applicantResumeTmp.EducationInstitution             = hcmEducationInstitution.EducationInstitutionId;
                applicantResumeTmp.EducationLevel                   = hcmEducationLevel.EducationLevelId;

                applicantResumeTmp.GradePointAverage                = hcmPersonEducation.GradePointAverage;
                applicantResumeTmp.GradeScale                       = hcmPersonEducation.GradeScale;
                applicantResumeTmp.SecondaryEmphasis                = hcmPersonEducation.SecondaryEmphasis;
                applicantResumeTmp.EducationInstitutionDescription  = hcmEducationInstitution.Description;
                applicantResumeTmp.EducationLevelDescription        = hcmEducationLevel.Description;
                applicantResumeTmp.CreditsCompleted                 = hcmPersonEducation.CreditsCompleted;
                applicantResumeTmp.CreditBasis                      = hcmPersonEducation.CreditBasis;
                applicantResumeTmp.CreditsEarned                    = hcmPersonEducation.CreditsEarned;
                applicantResumeTmp.CreditsNeeded                    = hcmPersonEducation.CreditsNeeded;
                break;

            //Skills
            case tablenum(HcmPersonSkill):
                applicantResumeTmp.SkillId          = hcmSkill.SkillId;
                applicantResumeTmp.SkillDescription = hcmSkill.Description;
                applicantResumeTmp.RatingLevelType  = hcmPersonSkill.RatingLevelType;
                applicantResumeTmp.RatingLevelId    = hcmRatingLevel.RatingLevelId;
                applicantResumeTmp.RatingLevelDate  = hcmPersonSkill.RatingLevelDate;
                applicantResumeTmp.Experience       = hcmPersonSkill.Experience;
                break;

            //Professional experience
            case tablenum(HcmPersonProfessionalExperience):
                applicantResumeTmp.ProfessioalExpStartDate  = hcmPersonProfessionalExperience.StartDate;
                applicantResumeTmp.ProfessionalExpEndDate    = hcmPersonProfessionalExperience.EndDate;
                applicantResumeTmp.ProfessionalExpEmployerPosition  = hcmPersonProfessionalExperience.EmployerPosition;
                applicantResumeTmp.ProfessionalExpEmployerName  = hcmPersonProfessionalExperience.EmployerName;

                break;

            //Position of trust
            case tablenum(HcmPersonTrustedPosition):
                applicantResumeTmp.TrustedPositionStartDate      = hcmPersonTrustedPosition.StartDate;
                applicantResumeTmp.TrustedPositionEndDate        = hcmPersonTrustedPosition.EndDate;
                applicantResumeTmp.TrustedPositionEmployer       = hcmPersonTrustedPosition.Employer;
                applicantResumeTmp.TrustedPositionDescription    = hcmPersonTrustedPosition.TrustedPostionDescription;
                break;

            //Courses
            case tablenum(HcmPersonCourse):
                applicantResumeTmp.CourseDescription    = hcmPersonCourse.Description;
                applicantResumeTmp.CourseStartDate      = hcmPersonCourse.StartDate;
                applicantResumeTmp.CourseEndDate        = hcmPersonCourse.EndDate;
                applicantResumeTmp.CourseLocation       = hcmPersonCourse.Location;
                applicantResumeTmp.CourseId             = hcmPersonCourse.CourseId;
                break;

            //Certificates
            case tablenum(HcmPersonCertificate):
                applicantResumeTmp.CertificateStartDate     = hcmPersonCertificate.IssueDate;
                applicantResumeTmp.CertificateEndDate       = hcmPersonCertificate.ExpirationDate;
                applicantResumeTmp.CertificateTypeId        = hcmCertificateType.CertificateTypeId;
                applicantResumeTmp.CertificateDescription   = hcmCertificateType.Description;
                break;

            //Project experience
            case tablenum(HcmPersonProjectRole):
                applicantResumeTmp.ProjectName      = hcmPersonProjectRole.ProjectName;
                applicantResumeTmp.Role             = hcmPersonProjectRole.Role;
                applicantResumeTmp.RoleStartDate    = hcmPersonProjectRole.RoleStartDate;
                applicantResumeTmp.RoleEndDate      = hcmPersonProjectRole.RoleEndDate;
                break;

            //Employment history
            case tablenum(HcmPositionWorkerAssignment):
                applicantResumeTmp.ValidFrom            = hcmPositionWorkerAssignment.ValidFrom;
                applicantResumeTmp.ValidTo              = hcmPositionWorkerAssignment.ValidTo;
                applicantResumeTmp.PositionId           = hcmPosition.PositionId;
                applicantResumeTmp.PositionDescription  = hcmPositionDetail.Description;
                applicantResumeTmp.DepartmentName       = dirPartyTable.Name;
                break;

            //References
            case tablenum(HcmApplicantReference):
                applicantResumeTmp.ApplicantReferenceName         = hcmApplicantReference.Name;
                applicantResumeTmp.ApplicantReferenceRelationship = hcmApplicantReference.Relationship;
                applicantResumeTmp.ApplicantReferencePhone        = hcmApplicantReference.Phone;
                applicantResumeTmp.Company                        = hcmApplicantReference.Company;
                break;
        }

        applicantResumeTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun                qr;
        HcmPersonSkill          hcmPersonSkillLocal;
        HcmApplicantResumeContract contract = this.parmDataContract() as HcmApplicantResumeContract;
        UtcDateTime minRangeValue = DatetimeUtil::minValue();
        UtcDateTime maxRangeValue = DateTimeUtil::maxValue();

        qr = new QueryRun(this.parmQuery());

        printPicture             = contract.parmPicture();
        printEducation           = contract.parmEducationVisible();
        printSkill               = contract.parmSkillsVisible();
        printProfExp             = contract.parmProfExpVisible();
        printTrustedPosition     = contract.parmTrustedPositionVisible();
        printCourse              = contract.parmCourseVisible();
        printCertificate         = contract.parmCertificateVisible();
        printProject             = contract.parmProjectExp();
        printHistory             = contract.parmHistoryVisible();
        printReferences          = contract.parmReferencesVisible();
        printEmptyResume         = contract.parmPrintEmptyResume();

        while (qr.next())
        {
            hcmApplicant = qr.get(tablenum(HcmApplicant));

            if (hcmApplicant)
            {
                if (SysReportRun::changed(qr,tablenum(hcmApplicant)))
                {
                    if (printPicture)
                    {
                        select Image from hcmPersonImage where hcmPersonImage.Person == hcmApplicant.Person;
                        if (hcmPersonImage.RecId)
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonImage));
                        }
                    }

                    if (printEducation)
                    {
                        while select hcmPersonEducation
                            where hcmPersonEducation.Person == hcmApplicant.Person
                                join hcmEducationDiscipline
                                    where hcmPersonEducation.EducationDiscipline == hcmEducationDiscipline.RecId
                                outer join hcmEducationInstitution
                                    where hcmPersonEducation.EducationInstitution == hcmEducationInstitution.RecId
                                outer join hcmEducationLevel
                                    where hcmPersonEducation.EducationLevel == hcmEducationLevel.RecId
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonEducation));
                        }
                    }

                    if (printSkill)
                    {
                        while select Person, RatingLevelType, Skill, RatingLevel from hcmPersonSkillLocal
                            where hcmPersonSkillLocal.Person             == hcmApplicant.Person
                            &&    hcmPersonSkillLocal.RatingLevelType    == enum2int(HRMSkillLevelType::Actual)
                                join hcmSkill
                                    where hcmPersonSkillLocal.Skill == hcmSkill.RecId
                                join hcmRatingLevel
                                    where hcmPersonSkillLocal.RatingLevel == hcmRatingLevel.RecId
                        {
                            hcmPersonSkill = HcmPersonSkill::findByPersonSkillRatingDetails(hcmApplicant.Person,
                                                                                            hcmPersonSkillLocal.Skill,
                                                                                            HRMSkillLevelType::Actual,
                                                                                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                            this.insertIntoTempTable(tablenum(HcmPersonSkill));
                        }
                    }

                    if (printProfExp)
                    {
                        while select hcmPersonProfessionalExperience
                            where hcmPersonProfessionalExperience.Person == hcmApplicant.Person
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonProfessionalExperience));
                        }
                    }

                    if (printTrustedPosition)
                    {
                        while select hcmPersonTrustedPosition
                            where hcmPersonTrustedPosition.Person == hcmApplicant.Person
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonTrustedPosition));
                        }
                    }

                    if (printCourse)
                    {
                        while select hcmPersonCourse
                            where hcmPersonCourse.Person == hcmApplicant.Person
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonCourse));
                        }
                    }

                    if (printCertificate)
                    {
                        while select hcmPersonCertificate
                            where hcmPersonCertificate.Person == hcmApplicant.Person
                                join hcmCertificateType
                                where hcmPersonCertificate.CertificateType == hcmCertificateType.RecId
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonCertificate));
                        }
                    }

                    if (printProject)
                    {
                        while select hcmPersonProjectRole
                            where hcmPersonProjectRole.Person == hcmApplicant.Person
                        {
                            this.insertIntoTempTable(tablenum(HcmPersonProjectRole));
                        }
                    }

                    if (printHistory)
                    {
                        while select ValidTimeState(minRangeValue,maxRangeValue)  hcmWorker
                            where hcmWorker.Person == hcmApplicant.Person
                                join  hcmPositionWorkerAssignment
                                    where hcmPositionWorkerAssignment.Worker == hcmWorker.RecId
                                        join hcmPosition
                                            where hcmPositionWorkerAssignment.Position == hcmPosition.RecId
                                                outer join hcmPositionDetail
                                                    where hcmPosition.RecId == hcmPositionDetail.Position
                                                        outer join dirPartyTable
                                                            where hcmPositionDetail.Department == dirPartyTable.RecId
                        {
                            this.insertIntoTempTable(tablenum(HcmPositionWorkerAssignment));
                        }
                    }

                    if (printReferences)
                    {
                        while select hcmApplicantReference
                            where hcmApplicantReference.Applicant == hcmApplicant.RecId
                        {
                            this.insertIntoTempTable(tablenum(HcmApplicantReference));
                        }
                    }
                }

                if (printEmptyResume)
                {
                    this.insertIntoTempTable();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
