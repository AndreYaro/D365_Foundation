<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTReportService_VATInvoices_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service class that runs SAF-T VAT Invoices (PL) report.
/// </summary>
public class SAFTReportService_VATInvoices_PL extends SAFTReportService_Base_W
{
    private SAFTReportContract_VATInvoices_PL dataContract;
    private Query userModifiedQuery;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts file generation in GER.
    /// </summary>
    /// <param name = "_dataContract">A data contract containing user inputs.</param>
    public void run(SAFTReportContract_VATInvoices_PL _dataContract)
    {
        dataContract = _dataContract;
        this.applyParametersToQuery();
        this.runReport(dataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyParametersToQuery</Name>
				<Source><![CDATA[
    private void applyParametersToQuery()
    {
        userModifiedQuery = dataContract.parmQuery();
        var fromDate = dataContract.parmDateFrom();
        var toDate = dataContract.parmDateTo();
        var fromInvoiceId = dataContract.parmFromInvoiceId();
        var toInvoiceId = dataContract.parmToInvoiceId();
        var reportCurrencyCode = dataContract.parmReportCurrencyCode();

        var qbds = userModifiedQuery.dataSourceTable(tableNum(CustInvoiceJour));
        findOrCreateRange_W(qbds, fieldNum(CustInvoiceJour, InvoiceDate), SysQuery::range(fromDate, toDate));
        findOrCreateRange_W(qbds, fieldNum(CustInvoiceJour, InvoiceId), SysQuery::range(fromInvoiceId, toInvoiceId));
        findOrCreateRange_W(qbds, fieldNum(CustInvoiceJour, CurrencyCode), reportCurrencyCode);

        qbds = userModifiedQuery.dataSourceTable(tableNum(ProjInvoiceJour));
        findOrCreateRange_W(qbds, fieldNum(ProjInvoiceJour, InvoiceDate), SysQuery::range(fromDate, toDate));
        findOrCreateRange_W(qbds, fieldNum(ProjInvoiceJour, ProjInvoiceId), SysQuery::range(fromInvoiceId, toInvoiceId));
        findOrCreateRange_W(qbds, fieldNum(ProjInvoiceJour, CurrencyId), reportCurrencyCode);

        qbds = userModifiedQuery.dataSourceTable(tableNum(CzCustAdvanceInvoiceTable));
        findOrCreateRange_W(qbds, fieldNum(CzCustAdvanceInvoiceTable, InvoiceDate), SysQuery::range(fromDate, toDate));
        findOrCreateRange_W(qbds, fieldNum(CzCustAdvanceInvoiceTable, InvoiceId), SysQuery::range(fromInvoiceId, toInvoiceId));
        findOrCreateRange_W(qbds, fieldNum(CzCustAdvanceInvoiceTable, CurrencyCode), reportCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTmpTablesToContext</Name>
				<Source><![CDATA[
    protected void addTmpTablesToContext(ERModelDefinitionDatabaseContext _databaseContext)
    {
        if (SAFTReportVATInvoicesFeature_PL::isEnabled())
        {
            SAFTReportTaxCollectionServiceInvoice_W dataService = new SAFTReportTaxCollectionServiceInvoice_W(userModifiedQuery);
            dataService.run();

            _databaseContext.addTemporaryTable(dataService.getReportInvoiceJournals());
            _databaseContext.addTemporaryTable(dataService.getReportInvoiceLines());
            _databaseContext.addTemporaryTable(dataService.getReportInvoiceTaxes());
        }
        else
        {
            super(_databaseContext);
   
            SAFTReportTaxCollectionService_W dataService = new SAFTReportTaxCollectionService_W(dataContract.parmTaxAuthority(), userModifiedQuery);
            dataService.parmCollectTaxAmountInTransCur(true);
            dataService.run();

            _databaseContext.addTemporaryTable(dataService.getReportData(), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERFormatMappingRecId</Name>
				<Source><![CDATA[
    protected ERFormatMappingId getERFormatMappingRecId()
    {
        TaxParameters taxParameters;
        select firstonly SAFTVATInvoicesERFormatMapping_PL from taxParameters;
        return taxParameters.SAFTVATInvoicesERFormatMapping_PL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueriesToContext</Name>
				<Source><![CDATA[
    protected void addQueriesToContext(ERModelDefinitionDatabaseContext _databaseContext)
    {
        super(_databaseContext);
        this.addCopiedQueryToContext(_databaseContext, tableNum(CustInvoiceJour));
        this.addCopiedQueryToContext(_databaseContext, tableNum(ProjInvoiceJour));
        this.addCopiedQueryToContext(_databaseContext, tableNum(CzCustAdvanceInvoiceTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCopiedQueryToContext</Name>
				<Source><![CDATA[
    private void addCopiedQueryToContext(ERModelDefinitionDatabaseContext _databaseContext, TableId _tableId)
    {
        QueryBuildDataSource qbdsOriginal = userModifiedQuery.dataSourceTable(_tableId);

        Query copiedQuery = new Query();
        QueryBuildDataSource copiedDataSource = copiedQuery.addDataSource(qbdsOriginal.table());

        SysQuery::copyDataSource(qbdsOriginal, copiedDataSource, true);
        
        _databaseContext.addQuery(qbdsOriginal.table(), copiedQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    protected boolean validateParameters()
    {
        boolean ret = super();
        container tableIds = [tablenum(CustInvoiceJour), tablenum(ProjInvoiceJour), tablenum(CzCustAdvanceInvoiceTable)];

        if (!this.checkQueryHasRows(userModifiedQuery, tableIds))
        {
            ret = checkFailed(strfmt("@SYS58533", "@StandardAuditFile_SAFT_W:SAFVATInvoices"));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>