<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProductionFlowVariancesDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanProductionFlowVariancesDP</c> class is the report data provider class that supports the
///    <c>LeanProductionFlowVariances</c> reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(LeanProductionFlowVariancesContract))
]
public class LeanProductionFlowVariancesDP extends SRSReportDataProviderBase
{
    TmpLeanProductionFlowVariances tmpLeanProductionFlowVariancesTmp;

    PlanName        prodFlowName;
    PlanDescription prodFlowDescription;

    TransDate       transDate;

    InventCostLevel rollupLevel;

    #localMacro.Level_Corresponds_To_RollupLevel
       ((  rollupLevel == InventCostLevel::Total  && (  (inventCostTransVariance.Level == InventCostLevel::Total)  )  )

     || (  rollupLevel == InventCostLevel::Single && (  (inventCostTransVariance.Level == InventCostLevel::Total && inventCostTransVariance.Split == NoYes::No)
                                                     || (inventCostTransVariance.Level == InventCostLevel::Single)  )  )

     || (  rollupLevel == InventCostLevel::Multi  && (  (inventCostTransVariance.Level == InventCostLevel::Total  && inventCostTransVariance.Split == NoYes::No)
                                                     || (inventCostTransVariance.Level == InventCostLevel::Single && inventCostTransVariance.Split == NoYes::No)
                                                     || (inventCostTransVariance.Level == InventCostLevel::Multi)  )  ))
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRoundingVarianceFromLedgerEntries</Name>
				<Source><![CDATA[
        private void addRoundingVarianceFromLedgerEntries()
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        LeanProductionFlowCosting           leanProductionFlowCosting;
        LeanProductionFlowReference         leanProductionFlowReference;
        PlanReference                       planReference;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        while select sum(AccountingCurrencyAmount) from generalJournalAccountEntry
            where generalJournalAccountEntry.PostingType == LedgerPostingType::InventStdCostRoundingVariance
                join AccountingDate from subledgerVoucherGeneralJournalEntry
                    group by AccountingDate
                    where (transDate == dateNull() || subledgerVoucherGeneralJournalEntry.AccountingDate == transDate)
                       && subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry
                exists join leanProductionFlowCosting
                    where leanProductionFlowCosting.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                exists join leanProductionFlowReference
                    where leanProductionFlowReference.RecId == leanProductionFlowCosting.LeanProductionFlowReference
                exists join planReference
                    where PlanReference.PlanName == prodFlowName && PlanReference.RecId == LeanProductionFlowReference.PlanReference
        {
            select firstonly tmpLeanProductionFlowVariancesTmp
                where (tmpLeanProductionFlowVariancesTmp.ProdFlowName == prodFlowName
                    && tmpLeanProductionFlowVariancesTmp.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate
                    && tmpLeanProductionFlowVariancesTmp.IsRoundingVariance == NoYes::Yes);

            if (!tmpLeanProductionFlowVariancesTmp)
            {
                this.initializeTmpLeanProductionFlowVariances();
                tmpLeanProductionFlowVariancesTmp.TransDate          = subledgerVoucherGeneralJournalEntry.AccountingDate;
                tmpLeanProductionFlowVariancesTmp.IsRoundingVariance = NoYes::Yes;
            }

            tmpLeanProductionFlowVariancesTmp.RoundingVariance += generalJournalAccountEntry.AccountingCurrencyAmount;

            this.writeTmpLeanProductionFlowVariances();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVarianceFromInventCostTransVariance</Name>
				<Source><![CDATA[
        private void addVarianceFromInventCostTransVariance()
    {
        InventCostTransVariance inventCostTransVariance;
        InventCostTrans         inventCostTrans;

        while select CostGroupId, VarianceType, sum(CostAmount) from inventCostTransVariance
        group by CostGroupId, VarianceType
        join TransDate from inventCostTrans
        group by TransDate
        where inventCostTrans.RecId == inventCostTransVariance.InventCostTransRefRecId
           && (transDate == dateNull() || inventCostTrans.TransDate == transDate)
           && inventCostTrans.CostTransRefType == InventCostTransRefType::ProductionFlow
           && inventCostTrans.TransRefId == prodFlowName
           && #Level_Corresponds_To_RollupLevel
        {
            select firstonly tmpLeanProductionFlowVariancesTmp
            where (tmpLeanProductionFlowVariancesTmp.ProdFlowName == prodFlowName
                && tmpLeanProductionFlowVariancesTmp.TransDate == inventCostTrans.TransDate
                && tmpLeanProductionFlowVariancesTmp.CostGroupId == inventCostTransVariance.CostGroupId);

            if (!tmpLeanProductionFlowVariancesTmp)
            {
                this.initializeTmpLeanProductionFlowVariances();
                tmpLeanProductionFlowVariancesTmp.TransDate   = inventCostTrans.TransDate;
                tmpLeanProductionFlowVariancesTmp.CostGroupId = inventCostTransVariance.CostGroupId;
            }
            switch (inventCostTransVariance.VarianceType)
            {
                case InventCostVarianceType::LotSize:
                    tmpLeanProductionFlowVariancesTmp.LotSizeVariance += inventCostTransVariance.CostAmount;
                    break;
                case InventCostVarianceType::ProdPrice:
                    tmpLeanProductionFlowVariancesTmp.CostVariance += inventCostTransVariance.CostAmount;
                    break;
                case InventCostVarianceType::Quantity:
                    tmpLeanProductionFlowVariancesTmp.QtyVariance += inventCostTransVariance.CostAmount;
                    break;
                case InventCostVarianceType::Substitution:
                    tmpLeanProductionFlowVariancesTmp.SubstitutionVariance += inventCostTransVariance.CostAmount;
                    break;
                case InventCostVarianceType::CostChange:
                    tmpLeanProductionFlowVariancesTmp.CostChangeVariance += inventCostTransVariance.CostAmount;
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            this.writeTmpLeanProductionFlowVariances();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpLeanProductionFlowVariances</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the <c>TmpLeanProductionFlowVariances</c> table and returns the data table.
    /// </summary>
    /// <returns>
    ///    The report data table.
    /// </returns>
    [SRSReportDataSetAttribute('TmpLeanProductionFlowVariances'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpLeanProductionFlowVariances getTmpLeanProductionFlowVariances()
    {
        select * from tmpLeanProductionFlowVariancesTmp;

        return tmpLeanProductionFlowVariancesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTmpLeanProductionFlowVariances</Name>
				<Source><![CDATA[
        private void initializeTmpLeanProductionFlowVariances()
    {
        tmpLeanProductionFlowVariancesTmp.clear();
        tmpLeanProductionFlowVariancesTmp.ProdFlowName = prodFlowName;
        tmpLeanProductionFlowVariancesTmp.ProdFlowDescription = prodFlowDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOneProdFlow</Name>
				<Source><![CDATA[
        private void processOneProdFlow()
    {
        prodFlowDescription = PlanReference::findPlanName(prodFlowName).PlanDescription;

        this.addVarianceFromInventCostTransVariance();
        this.addRoundingVarianceFromLedgerEntries();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic which is used by the
    ///    <c>LeanProductionFlowVariances</c> reports.
    /// </remarks>
    public void processReport()
    {
        PlanReference                       planReference;
        LeanProductionFlowVariancesContract leanProductionFlowVariancesContract = this.parmDataContract() as LeanProductionFlowVariancesContract;

        transDate    = leanProductionFlowVariancesContract.parmTransDate();
        prodFlowName = leanProductionFlowVariancesContract.parmPlanName();
        rollupLevel  = leanProductionFlowVariancesContract.parmRollupLevel();

        delete_from tmpLeanProductionFlowVariancesTmp;

        if (prodFlowName == "")
        {
            while select PlanName
            from planReference
            where planReference.PlanType == PlanTypes::ProductionFlow
            {
                prodFlowName = planReference.PlanName;
                this.processOneProdFlow();
            }
        }
        else
        {
            if (PlanReference::findPlanName(prodFlowName).PlanType == PlanTypes::ProductionFlow)
            {
                this.processOneProdFlow();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpLeanProductionFlowVariances</Name>
				<Source><![CDATA[
        private void writeTmpLeanProductionFlowVariances()
    {
        if (tmpLeanProductionFlowVariancesTmp)
        {
            tmpLeanProductionFlowVariancesTmp.update();
        }
        else
        {
            tmpLeanProductionFlowVariancesTmp.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
