<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceCleanSoftReservationRelatedDataBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceCleanSoftReservationRelatedDataBatchJob extends RunBaseBatch
{
    UserConnection  userConnection;
    internal InventInstrumentationLogger    logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        super();
        logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceCleanSoftReservationRelatedDataBatchJob));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatch</Name>
				<Source><![CDATA[
    public void initBatch(Batch batch)
    {
        super(batch);

        batch.retriesOnFailure = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        this.deleteRelatedTable();
        this.deleteReservationIds(tableNum(SalesLine));
        this.deleteReservationIds(tableNum(InventTransferLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReservationIds</Name>
				<Source><![CDATA[
    internal void deleteReservationIds(TableId sourceTableId)
    {
        var inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();

        System.Threading.Tasks.Task[] threadTasklist;
        Common              sourceTable = new SysDictTable(sourceTableId).makeRecord();
        FieldId             reservationIdFieldId = fieldName2Id(sourceTableId, identifierStr(InventoryServiceReservationId));
        FieldId             autoOffsetFieldId = fieldName2Id(sourceTableId, identifierStr(InventoryServiceAutoOffset));

        while select crosscompany DataAreaId from sourceTable
            group by sourceTable.DataAreaId
            where (sourceTable.(reservationIdFieldId) != '' || sourceTable.(autoOffsetFieldId) == true)
        {
            if (sourceTable.DataAreaId != curExt())
            {
                changecompany (sourceTable.DataAreaId)
                {
                    threadTasklist = InventInventoryDataServiceBatchJobHelper::allocateDeleteTasks(sourceTableId);
                    
                    using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_CleanReservationIds(sourceTable.DataAreaId, sourceTableId, threadTasklist.Length))
                    {
                        this.waitForAsyncTasks(threadTasklist);
                    }
                }
            }
            else
            {
                threadTasklist = InventInventoryDataServiceBatchJobHelper::allocateDeleteTasks(sourceTableId);
                using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_CleanReservationIds(sourceTable.DataAreaId, sourceTableId, threadTasklist.Length))
                {
                    this.waitForAsyncTasks(threadTasklist);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventInventoryDataServiceCleanSoftReservationRelatedDataBatchJob construct()
    {
        return new InventInventoryDataServiceCleanSoftReservationRelatedDataBatchJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    internal static ClassDescription description()
    {
        return "@SCM:InventoryServiceCleanSoftReservationRelatedDataBatchJobDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InventInventoryDataServiceParameters inventoryServiceParameters = InventInventoryDataServiceParameters::find();

        if (inventoryServiceParameters.RecId &&
            (inventoryServiceParameters.InventoryServiceStatus == InventoryServiceStatus::Disabled
            || (!InventInventoryDataServiceSoftReservationFeature::isEnabled() && !InventInventoryDataServiceReservationOffsetFeature::isEnabled()))
            )
        {
            if (Box::yesNo("@SCM:InventoryServiceCleanSoftReservationRelatedDataDiaglog", DialogButton::No) == DialogButton::Yes)
            {
                InventInventoryDataServiceCleanSoftReservationRelatedDataBatchJob cleanBatchJob = InventInventoryDataServiceCleanSoftReservationRelatedDataBatchJob::construct();
                cleanBatchJob.batchInfo().parmBatchExecute(NoYes::Yes);
                cleanBatchJob.doBatch();
            }
        }
        else
        {
            error(strFmt("@SCM:InventoryServiceConditionsNotMetCleanSoftReservationRelatedDataErrorMessage", "@SCM:InventoryServiceSoftReservationFeature", "@SCM:InventoryServiceReservationOffsetFeature"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedTable</Name>
				<Source><![CDATA[
    private void deleteRelatedTable()
    {
        ttsbegin;
        InventInventoryDataServiceReservationIdErrorList::truncate();
        InventInventoryDataServiceReservationQueuePartialSuccess::truncate();
        InventInventoryDataServiceReservationQueue::truncate();
        InventInventoryDataServiceReservationQueueBackup::truncate();
        InventInventoryDataServiceReservationQueueTemp::truncate();
        InventInventoryDataServiceSoftReserveQueue::truncate();
        InventInventoryDataServiceSoftReserveQueueBackup::truncate();
        InventInventoryDataServiceSoftReserveQueueTemp::truncate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAsyncTasks</Name>
				<Source><![CDATA[
    protected void waitForAsyncTasks(System.Threading.Tasks.Task[] _threadTasklist)
    {
        int connectionKeepAlivePingIntervalInMilliSec = this.connectionKeepAlivePingIntervalInMilliSec();
        
        while (!System.Threading.Tasks.Task::WaitAll(_threadTasklist, connectionKeepAlivePingIntervalInMilliSec))
        {
            if (this.parmUserConnection())
            {
                var statement = this.parmUserConnection().createStatement();
                var sqlKeepAlive = 'select SYSDATETIME();';
        
                ResultSet resultset = statement.executeQueryWithParameters(sqlKeepAlive, SqlParams::create());
                resultset.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectionKeepAlivePingIntervalInMilliSec</Name>
				<Source><![CDATA[
    private int connectionKeepAlivePingIntervalInMilliSec()
    {
        return 5 * 60 * 1000; // 5 minutes in ms.
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    private UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>