<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentWebHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net;
using System.IO;
using Newtonsoft.Json.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Collections;
using Microsoft.Dynamics.ServiceFramework.Communication.Http;

/// <summary>
/// The class contains utility methods handling web requests.
/// </summary>
internal final class BusinessDocumentWebHelper extends BusinessDocumentWebHelperBase
{
    private const str ApiVersionUrlParameter = '?api-version=';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addWebRequestHeadersHandler</Name>
				<Source><![CDATA[
    [SysObsolete("The method has been deprecated.", false, 2\5\2020)]
    delegate void addWebRequestHeadersHandler(WebRequest _request) {}

]]></Source>
			</Method>
			<Method>
				<Name>addWebRequestAuthorizationHeadersHandler</Name>
				<Source><![CDATA[
    [SysObsolete("The method has been deprecated.", false, 2\5\2020)]
    delegate void addWebRequestAuthorizationHeadersHandler(WebRequest _request) {}

]]></Source>
			</Method>
			<Method>
				<Name>setMaxRetryCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets max retry count for retry policy.
    /// </summary>
    /// <param name = "_maxRetryCount">The max retry count.</param>
    [Hookable(false)]
    public void setMaxRetryCount(int _maxRetryCount)
    {
        maxRetryCount = _maxRetryCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMaxBackoffDelay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets max backoff delay for retry policy.
    /// </summary>
    /// <param name = "_maxBackoffDelay">The max backoff delay.</param>
    [Hookable(false)]
    public void setMaxBackoffDelay(int _maxBackoffDelay)
    {
        maxBackoffDelay = _maxBackoffDelay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUrl</Name>
				<Source><![CDATA[
    protected str createUrl(
        str _method,
        str _key = '',
        str _action = '')
    {
        return endpoint +
            apiRoute +
            (_key       ? '/' + strLwr(_key)    : '') +
            (_action    ? '/' + _action         : '') +
            ApiVersionUrlParameter +
            this.getApiVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRequestForServiceCall</Name>
				<Source><![CDATA[
    protected HttpRequestMessage initRequestForServiceCall(
        str _method,
        str _key = '',
        str _action = '',
        str _content = '',
        str _contentType = JsonContentType,
        Map _queryParameters = null)
    {
        var request = super(_method, _key, _action, _content, _contentType, _queryParameters);
        
        this.addWebRequestHeadersHandler(null);
        this.addWebRequestAuthorizationHeadersHandler(null);

        return request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callWebService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls an external web service.
    /// </summary>
    /// <param name = "_method">The HTTP method.</param>
    /// <param name = "_key">The document id.</param>
    /// <param name = "_action">The API action to be called.</param>
    /// <param name = "_content">The request body in JSON format.</param>
    /// <returns>The response text with an exception flag.</returns>
    [Hookable(false)]
    public container callWebService(
        str _method,
        str _key = '',
        str _action = '',
        str _content = '')
    {
        return this.callWebServiceBase(_method, _key, _action, _content, BusinessDocumentWebHelperBase::JsonContentType, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseMonitoredException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses exception response message.
    /// </summary>
    /// <param name = "_exceptionResponse">The exception response message.</param>
    /// <returns>The reduced response.</returns>
    [Hookable(false)]
    public static JObject parseMonitoredException(JObject _exceptionResponse)
    {
        JObject reducedResponse = new JObject();
        
        BusinessDocumentWebHelper::copyJsonToken(
            _exceptionResponse,
            reducedResponse,
            ErrorMessagePath,
            ErrorMessageToken);

        BusinessDocumentWebHelper::copyJsonToken(
            _exceptionResponse,
            reducedResponse,
            InnerErrorMessagePath,
            InnerErrorMessageToken);

        return reducedResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets error log in a container.
    /// </summary>
    /// <param name = "_exceptionResponse">The response message.</param>
    /// <returns>A container with error log.</returns>
    [Hookable(false)]
    public static container getErrorLog(JObject _exceptionResponse)
    {
        const str Level = 'level';
        const str Message = 'message';
        container log;

        JToken errorMessage = _exceptionResponse.SelectToken(ErrorMessageToken);
        if (errorMessage && errorMessage.ToString() != '')
        {
            log += strFmt('[%1] %2', "@ApplicationPlatform:SystemNotificationSeverity_Error", errorMessage.ToString());
        }

        JArray logs = _exceptionResponse.SelectToken(BusinessDocumentServiceController::ErrorLogToken);
        if (logs && logs.Count > 0)
        {
            for (int i = 0; i < logs.Count; i++)
            {
                JObject entry = logs.get_Item(i);
                JToken entryLevel = entry.SelectToken(Level);
                JToken entryMessage = entry.SelectToken(Message);

                if (entryLevel && entryMessage)
                {
                    log += strFmt('[%1] %2', entryLevel.ToString(), entryMessage.ToString());
                }
            }
        }

        return log;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showErrorLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays response error log.
    /// </summary>
    /// <param name = "_response">The response object.</param>
    [Hookable(false)]
    public static void showErrorLog(JObject _response)
    {
        JToken exception = _response.SelectToken(ExceptionToken);
        if (exception)
        {
            container log = BusinessDocumentWebHelper::getErrorLog(_response);
            for (int i = 1; i <= conLen(log); i++)
            {
                warning(conPeek(log, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyJsonToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies a JSON token from one object to another.
    /// </summary>
    /// <param name = "_source">The source object.</param>
    /// <param name = "_destination">The destination object.</param>
    /// <param name = "_path">The JSON path.</param>
    /// <param name = "_name">The token name.</param>
    [Hookable(false)]
    public static void copyJsonToken(
        JObject _source,
        JObject _destination,
        str _path,
        str _name)
    {
        if (!_source || !_destination)
        {
            return;
        }
        
        JToken token = _source.SelectToken(_path);
        if (token)
        {
            _destination.Add(_name, token);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseText</Name>
				<Source><![CDATA[
    private static str getResponseText(HttpWebResponse _response)
    {
        str responseText;
        
        if (_response)
        {
            using (var stream = _response.GetResponseStream())
            using (var streamReader = new StreamReader(stream))
            {
                responseText = streamReader.ReadToEnd();
            }
        }

        return responseText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApiVersion</Name>
				<Source><![CDATA[
    private str getApiVersion()
    {
        var ret = '2021-01-01';
        if (ERForInvoicingRouteSwitch::shouldUseV2())
        {
            ret = '2.0';
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>