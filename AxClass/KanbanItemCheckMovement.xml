<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanItemCheckMovement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanItemCheckMovement</c> class provides a validation that checks whether a specific item
/// can be used with kanbans.
/// </summary>
/// <remarks>
/// The class uses the context of an inventory movement for the check.Generally all items used with
/// kanbans must be standard cost controlled. The exception is a withdrawal kanban that updates
/// inventory on issue and receipt.
/// </remarks>
public class KanbanItemCheckMovement extends KanbanItemCheckKanbanRule
{
    Kanban          kanban;
    InventMovement  inventMovement;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowBlankItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the blank item ID is allowed.
    /// </summary>
    /// <returns>
    /// true if the blank item ID is allowed; otherwise, false.
    /// </returns>
    protected boolean allowBlankItemId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the inventory movement.
    /// </summary>
    /// <returns>
    ///    true if the movement is valid; otherwise, false.
    /// </returns>
    protected boolean checkInventMovement()
    {
        boolean result = false;

        if (inventMovement)
        {
            if (inventMovement.buffer() is KanbanJob)
            {
                // must be a inventory controlled transfer job
                result =    inventMovement.isTransfer()
                         && inventMovement.transId();
            }
            else
            {
                if (inventMovement.buffer() is Kanban)
                {
                    // emptying the kanban must not be inventory controlled
                    result = !inventMovement.transId();
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the item can be used with kanbans.
    /// </summary>
    /// <returns>
    /// true if the item can be used; otherwise, false.
    /// </returns>
    protected boolean checkIsAllowed()
    {
        return    this.checkItemId()
               || (this.checkInventMovement()
               &&  this.checkKanban()
               &&  this.checkKanbanFlow());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the kanban.
    /// </summary>
    /// <returns>
    ///    true if the kanban is valid; otherwise, false.
    /// </returns>
    protected boolean checkKanban()
    {
        return kanban.Type == LeanKanbanType::Withdrawal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventMovement</Name>
				<Source><![CDATA[
        public InventMovement parmInventMovement(InventMovement _inventMovement = inventMovement)
    {
        inventMovement = _inventMovement;
        return inventMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
        public Kanban parmKanban(Kanban _kanban = kanban)
    {
        kanban = _kanban;
        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanItemCheckMovement construct()
    {
        return new KanbanItemCheckMovement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanItemCheckMovement</c> class.
    /// </summary>
    /// <param name="_inventMovement">
    /// The inventory movement.
    /// </param>
    /// <param name="_warningOnFailure">
    /// A Boolean value that indicates whether a warning must be given if the check fails; optional.
    /// </param>
    /// <param name="_errorOnFailure">
    /// A Boolean value that indicates whether an error must be thrown when the check fails; optional.
    /// </param>
    /// <returns>
    /// A new <c>KanbanItemCheckMovement</c> object.
    /// </returns>
    public static KanbanItemCheckMovement newStandard(
        InventMovement _inventMovement,
        boolean        _warningOnFailure = false,
        boolean        _errorOnFailure   = false)
    {
        Kanban                  kanban;
        KanbanItemCheckMovement kanbanItemCheckMovement = KanbanItemCheckMovement::construct();

        if (_inventMovement)
        {
            if (_inventMovement.buffer() is KanbanJob)
            {
                KanbanJob kanbanJob = _inventMovement.buffer() as KanbanJob;
                kanban = kanbanJob.kanban();
            }
            else
            {
                if (_inventMovement.buffer() is Kanban)
                {
                    kanban = _inventMovement.buffer() as kanban;
                }
            }

            kanbanItemCheckMovement.parmKanban(kanban);
            kanbanItemCheckMovement.parmItemId(kanban.ItemId);
            kanbanItemCheckMovement.parmKanbanFlow(kanban.kanbanFlow());
        }

        kanbanItemCheckMovement.parmInventMovement(_inventMovement);
        kanbanItemCheckMovement.parmWarningOnFailure(_warningOnFailure);
        kanbanItemCheckMovement.parmErrorOnFailure(_errorOnFailure);

        return kanbanItemCheckMovement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
