<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjConsistencyCheck_Table</Name>
  <SourceCode>
    <Declaration><![CDATA[
public class ProjConsistencyCheck_Table extends SysConsistencyCheck implements BatchRetryable
{
    QueryRun    queryRun;

    #DEFINE.CurrentVersion(1)
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>checkFixProjTable</Name>
        <Source><![CDATA[
    private void checkFixProjTable()
    {
        DictTable       dictTable;
        ProjTable       projTable;
        str             s;
        ;

        dictTable = new DictTable(tablenum(ProjTable));
        s = strfmt("@SYS26373", dictTable.label());
        progress.setText(s,2);
        setprefix(s);
        while (queryRun.next())
        {
            projTable = queryRun.get(tablenum(ProjTable));
            this.kernelCheckRecord(projTable,dictTable);
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>configurationKey</Name>
        <Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(Project);
    }

]]></Source>
      </Method>
      <Method>
        <Name>dialog</Name>
        <Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        FormRun formRun = classFactory.createQueryForm(this);
        ;
        formRun.init();
        return formRun;
    }

]]></Source>
      </Method>
      <Method>
        <Name>executionOrder</Name>
        <Source><![CDATA[
    public Integer executionOrder()
    {
        return 2;
    }

]]></Source>
      </Method>
      <Method>
        <Name>hasDialog</Name>
        <Source><![CDATA[
    public boolean hasDialog()
    {
        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
    public void new()
    {
        Query query;
        ;
        if (this.showInTree())
        {
            query = new Query();
            query.addDataSource(tablenum(ProjTable));
            queryRun = new QueryRun(query);
        }

        super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>pack</Name>
        <Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
      </Method>
      <Method>
        <Name>queryRun</Name>
        <Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        // projTable
        this.checkFixProjTable();

        this.kernelCheckTable(tablenum(ProjActivity));
    }

]]></Source>
      </Method>
      <Method>
        <Name>treeParentClassId</Name>
        <Source><![CDATA[
    public classId treeParentClassId()
    {
        return classNum(ProjConsistencyCheck);
    }

]]></Source>
      </Method>
      <Method>
        <Name>unpack</Name>
        <Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conpeek(_packedClass,1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>description</Name>
        <Source><![CDATA[
    private static ClassDescription description()
    {
        return "@SYS50498";
    }

]]></Source>
      </Method>
      <Method>
        <Name>helpText</Name>
        <Source><![CDATA[
    private static HelpTxt helpText()
    {
        return "@SYS58228";
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>