<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterParmDataRearrangeBatchTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormletterParmDataRearrangeBatchTask</c> class performs a rearrange of the parameter table
/// records when late selection is executed in batch during posting.
/// </summary>
public class FormletterParmDataRearrangeBatchTask
extends FormletterBatchTask implements BatchRetryable
{
    private FormLetterInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPostingTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates the posting tasks that should be performed after the rearrange of data.
    /// </summary>
    /// <param name="_outputContract">
    ///   A <c>FormletterParmDataOutputContract</c> object.
    /// </param>
    /// <returns>
    ///    true if the multithreading feature is used; otherwise, false.
    /// </returns>
    protected boolean createPostingTasks(FormLetterParmDataOutputContract _outputContract)
    {
        DocumentStatus      documentStatus          = this.parmFormletterContract().getDocumentStatus();
        Counter             numberOfJournalsToPost  = _outputContract.parmNumberOfParmTablesCreated();
        FormletterServiceBatchTaskManager   taskManager;

        taskManager = FormletterServiceBatchTaskManager::newFormletterService(null,
                                                                              documentStatus, 
                                                                              this.parmFormletterType(),
                                                                              numberOfJournalsToPost, 
                                                                              true, 
                                                                              this.parmFormletterContract());
        taskManager.parmForceSkipParmData(true);

        return taskManager.createTasks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rearrange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the rearrange of data.
    /// </summary>
    /// <returns>
    ///    A <c>FormletterParmDataOutputContract</c> object.
    /// </returns>
    protected FormLetterParmDataOutputContract rearrange()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().formLetterParmDataBatchActivities().reArrange(this.parmCurrentBatch()))
        {
            FormLetterParmDataOutputContract    outputContract;
            container                           packedOutputContract;
            var formLetter = FormletterTypeBase::singletonFromFormletterType(this.parmFormletterType());
            if (formLetter)
            {
                packedOutputContract = formLetter.packedOutputContract(this);
                if (packedOutputContract)
                {
                    outputContract = FormLetterParmDataOutputContract::construct();
                    outputContract.unpack(packedOutputContract);
                }
            }
            return outputContract;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().formLetterParmDataBatchActivities().run())
        {
            FormLetterParmDataOutputContract outputContract = this.rearrange();
            this.createPostingTasks(outputContract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FormletterParmDataRearrangeBatchTask construct()
    {
        return new FormletterParmDataRearrangeBatchTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Describes the <c>FormletterParmDataRearrangeBatchTask</c> class.
    /// </summary>
    /// <returns>
    ///    The label that contains the description of the <c>FormletterParmDataRearrangeBatchTask</c> class.
    /// </returns>
    /// <remarks>
    ///    The description is used by the batch framework as the description for the job.
    /// </remarks>
    protected static ClassDescription description()
    {
        return "@SYS344180";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>FormletterParmDataRearrangeBatchTask</c> class.
    /// </summary>
    /// <param name="_formletterType">
    /// The <c>FormletterType</c> object to pass on to the <c>FormletterServiceEndBatchTask</c> class.
    /// </param>
    /// <param name="_formLetterContract">
    /// The <c>FormletterContract</c> object to pass to the <c>FormletterServiceEndBatchTask</c> class.
    /// </param>
    /// <returns>
    /// A new instance of the <c>FormletterParmDataRearrangeBatchTask</c> class.
    /// </returns>
    public static FormletterParmDataRearrangeBatchTask newTask(
        FormletterType      _formletterType,
        FormLetterContract  _formLetterContract)
    {
        FormletterParmDataRearrangeBatchTask task = FormletterParmDataRearrangeBatchTask::construct();

        task.parmFormletterType(_formletterType);
        task.parmFormletterContract(_formLetterContract);

        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal FormLetterInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = FormLetterInstrumentationLogger::createLoggerByType(this.parmFormletterType(), classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>