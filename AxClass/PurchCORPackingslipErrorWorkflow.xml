<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCORPackingslipErrorWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchCORPackingslipErrorWorkflow</c> class is used to run a product receipt failed notification workflow.
/// </summary>
class PurchCORPackingslipErrorWorkflow extends PurchCORWorkflow
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>PurchParmTable</c> can be submitted to the workflow.
    /// </summary>
    /// <returns>
    /// true if the <c>PurchParmTable</c> record can be submitted to the workflow; otherwise, false.
    /// </returns>
    protected boolean canSubmit()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSubmitState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the document can be submitted.
    /// </summary>
    /// <returns>
    /// true if the document can be submitted; otherwise, false.
    /// </returns>
    protected boolean checkSubmitState()
    {
        PurchParmTable  purchParmTable = this.getPurchParmTable();

        return ((purchParmTable.WorkflowState == TradeWorkflowState::NotSubmitted) &&
                (purchParmTable.ParmJobStatus == ParmJobStatus::ContainErrors));
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of a menu item that is used when taking the complete action.
    /// </summary>
    /// <returns>
    /// A menu item name.
    /// </returns>
    protected menuItemNameAction completeAction()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the document record as a <c>PurchParmTable</c> record.
    /// </summary>
    /// <returns>
    ///    A <c>PurchParmTable</c> record.
    /// </returns>
    protected PurchParmTable getPurchParmTable()
    {
        return this.parmDocumentRecord() as PurchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the state of the <c>PurchLine</c> record.
    /// </summary>
    /// <returns>
    /// A <c>PurchLine</c> state value.
    /// </returns>
    protected TradeWorkflowState getState()
    {
        return this.getPurchParmTable().WorkflowState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of a workflow type that is used when activating the workflow.
    /// </summary>
    /// <returns>
    /// A workflow type name.
    /// </returns>
    protected workflowTypeName getWorkflowType()
    {
        return PurchCORPackingslipErrorWorkflow::templateName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setState</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the workflow state
    /// </summary>
    protected void setState()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the calling form.
    /// </summary>
    /// <param name="_args">
    ///    The arguments of the <c>PurchCORPackingslipErrorWorkflow</c> class.
    /// </param>
    protected void updateCaller(Args _args)
    {
        PurchParmTable        purchParmTable = _args.record();
        Object                purchParmTable_ds;

        //Update the calling form
        purchParmTable_ds = FormDataUtil::getFormDataSource(purchParmTable);
        purchParmTable.WorkflowState = TradeWorkflowState::Submitted;
        if (purchParmTable_ds)
        {
            purchParmTable_ds.write();
            purchParmTable_ds.refresh();
        }

        if (_args.caller())
        {
            _args.caller().updateWorkflowControls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>PurchParmTable</c> can be submitted to the workflow.
    /// </summary>
    /// <param name="_purchParmTable">
    ///    The <c>PurchParmTable</c> record to submit.
    /// </param>
    /// <returns>
    ///    true if the <c>PurchParmTable</c> record can be submitted to the workflow; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <c>State</c> field of the <c>PurchParmTable</c> table must have the value of not submitted, the
    ///    <c>JobStatus</c> field of the <c>PurchParmTable</c> workflow in the <c>ParmJobStatus</c> class must
    ///    have the errors detected value, and an active workflow configuration must be found.
    /// </remarks>
    static boolean canSubmitToWorkflow(PurchParmTable _purchParmTable)
    {
        return PurchCORPackingslipErrorWorkflow::newPurchParmTable(_purchParmTable).canSubmit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the <c>PurchCORPackingslipErrorWorkflow</c> class.
    /// </summary>
    /// <returns>
    ///     An instance of the <c>PurchCORPackingslipErrorWorkflow</c> class.
    /// </returns>
    public static PurchCORPackingslipErrorWorkflow construct()
    {
        return new PurchCORPackingslipErrorWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Submits a <c>PurchParmTable</c> document and activates the corresponding workflow.
    /// </summary>
    /// <param name="_args">
    ///    The arguments of the <c>PurchCORPackingslipErrorWorkflow</c> class.
    /// </param>
    public static void main(Args _args)
    {
        PurchCORPackingslipErrorWorkflow purchCORPackingslipErrorWorkflow;

        if (_args.dataset() != tableNum(PurchParmTable))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        purchCORPackingslipErrorWorkflow = PurchCORPackingslipErrorWorkflow::newPurchParmTable(_args.record());

        if (purchCORPackingslipErrorWorkflow.canSubmit())
        {
            purchCORPackingslipErrorWorkflow.activateWorkflow(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PurchCORPackingslipErrorWorkflow</c> class.
    /// </summary>
    /// <param name="_purchParmTable">
    /// The <c>PurchParmTable</c> record on which to submit the workflow.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PurchCORPackingslipErrorWorkflow</c> class.
    /// </returns>
    public static PurchCORPackingslipErrorWorkflow newPurchParmTable(PurchParmTable _purchParmTable)
    {
        PurchCORPackingslipErrorWorkflow purchCORPackingslipErrorWorkflow = PurchCORPackingslipErrorWorkflow::construct();

        purchCORPackingslipErrorWorkflow.parmDocumentRecord(_purchParmTable);

        return purchCORPackingslipErrorWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activatePurchParmTableWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Activates the <c>PurchParmTable</c> workflow.
    /// </summary>
    /// <param name="_purchParmTable">
    ///    The <c>PurchParmTable</c> table to update.
    /// </param>
    /// <param name="_workflowComment">
    ///    A comment on the workflow.
    /// </param>
    /// <remarks>
    ///    This method activates the workflow configuration by calling the <c>ActivateFromWorkflowtemplate</c>
    ///    method of the <c>Workflow</c> class with information about the <c>PurchParmTable</c> record.
    /// </remarks>
    public static void activatePurchParmTableWorkflow(PurchParmTable _purchParmTable, WorkflowComment _workflowComment = "@SYS303447")
    {
        PurchCORPackingslipErrorWorkflow::newPurchParmTable(_purchParmTable).submit(_workflowComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the AOT element name of this workflow.
    /// </summary>
    /// <returns>
    ///    The <c>WorkflowTemplateName</c> value of this workflows template element.
    /// </returns>
    public static workflowTypeName templateName()
    {
        return workFlowTypeStr(PurchCORPackingslipError);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>