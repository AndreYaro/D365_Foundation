<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChequeDP_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ChequeDP_FR</c> class is the Report Data Provider class for the <c>Cheque_FR</c> report.
/// </summary>
[SRSReportParameterAttribute(classstr(ChequeContract_FR))]
public class ChequeDP_FR extends SRSReportDataProviderBase
{
    BankChequePrint         bankChequePrint;
    TmpChequePrintout       tmpCheque,tmpChequePrintout;
    BankChequeLayout        bankChequeLayout;
    LedgerJournalTrans      tmpLedgerJournalTrans;
    Amount                  paymentAmountInEuro;
    CompanyInfo             companyInfoOrg;
    CustVendTrans           tmpCustVendTrans;
    AddressCity             companyCity;
    SpecTrans               specTrans;
    Amount                  netAmount;
    Amount                  totalDebit;
    Amount                  totalCredit;
    Amount                  amountInvoiceCur;
    boolean                 isTest;
    ChequeTmp_FR            chequeTmp_FR;
    Addressing              bankAddr, companyAddr;
    Counter                 rowNumberPerPage;


    #DEFINE.Month1      ("Janvier")
    #DEFINE.Month2      ("FÃ©vrier")
    #DEFINE.Month3      ("Mars")
    #DEFINE.Month4      ("Avril")
    #DEFINE.Month5      ("Mai")
    #DEFINE.Month6      ("Juin")
    #DEFINE.Month7      ("Juillet")
    #DEFINE.Month8      ("AoÃ»t")
    #DEFINE.Month9      ("Septembre")
    #DEFINE.Month10     ("Octobre")
    #DEFINE.Month11     ("Novembre")
    #DEFINE.Month12     ("DÃ©cembre")
    #DEFINE.newLine     ('\n\n')
    #DEFINE.Cheque      ('Cheque')
    #DEFINE.emptyString ('')
    #DEFINE.Void        ('Void')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelledCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the check status.
    /// </summary>
    /// <returns>
    ///    A Boolean value that is based on the check status update.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    No more checks for the respective account under the <c>ChequeNumMethod::Fixed</c> value.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    No more checks for the respective account under the <c>ChequeNumMethod::Free</c> value.
    /// </exception>
    private boolean cancelledCheck()
    {
        BankChequeTable bankChequeTable, newCheck;
        Integer firstChequeNum;
        LedgerJournalTrans transaction;

        if (isTest)
        {
            return false;
        }

        ttsbegin;
        switch (bankChequeLayout.ChequeNumMethod)
        {
            case ChequeNumMethod::Free :
                select maxof(ChequeNum) from bankChequeTable
                    where bankChequeTable.AccountID == tmpCheque.AccountId;

                firstChequeNum = NumberSeq::numRemoveFormat(bankChequeTable.ChequeNum, '') + 1;
                break;

            case ChequeNumMethod::Fixed :
                firstChequeNum = NumberSeq::numRemoveFormat(BankChequeTable::findNextFree(tmpCheque.AccountId),'');
                if (! firstChequeNum)
                {
                    throw error(strfmt("@SYS28696",tmpCheque.AccountId));
                }
                break;
        }

        if (bankChequeLayout.ChequeNumMethod == ChequeNumMethod::Fixed)
        {
            if (!BankChequeTable::exist(tmpCheque.AccountId, num2str(firstChequeNum, 0, 0, 0, 0))) // The sequence is broken, find the next cheque
            {
                firstChequeNum = NumberSeq::numRemoveFormat(BankChequeTable::findNextFree(tmpCheque.AccountId), '');
                if (!firstChequeNum)
                {
                    throw error(strfmt("@SYS28696", tmpCheque.AccountId));
                }
            }
            newCheck = BankChequeTable::find(tmpCheque.AccountId,int2str(firstChequeNum),true);
        }
        else
        {
            newCheck = BankChequeTable::createCheque( NumberSeq::numInsertFormat(firstChequeNum,''), tmpCheque.AccountId);
            newCheck.selectForUpdate(true);
        }
        bankChequeTable = BankChequeTable::find(tmpCheque.AccountId,tmpCheque.ChequeNum);

        newCheck.RecipientAccountNum        = bankChequeTable.RecipientAccountNum;
        newCheck.CurrencyCode               = bankChequeTable.CurrencyCode;
        newCheck.AmountCur                  = bankChequeTable.AmountCur;
        newCheck.TransDate                  = bankChequeTable.TransDate;
        newCheck.RecipientType              = bankChequeTable.RecipientType;
        newCheck.BankNegInstRecipientName   = bankChequeTable.BankNegInstRecipientName;
        newCheck.ChequeStatus               = ChequeStatus::Payment;
        newCheck.update();

        BankChequeTable::setChequeStatus(tmpCheque.AccountId,
                                                 tmpCheque.ChequeNum,
                                                 ChequeStatus::Cancelled,
                                                 DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                 '',
                                                 BankChequeRecipientType::Unknown,
                                                 '',
                                                 '',
                                                 tmpCheque.CurrencyCode,
                                                 0,
                                                 '');
        tmpCheque.ChequeNum                 = newCheck.ChequeNum;
        tmpCheque.update();

        transaction = LedgerJournalTrans::findRecId(tmpCheque.TransactionRecId,true);
        transaction.BankChequeNum = newCheck.ChequeNum;
        transaction.update();

        newCheck.SourceTableId      = transaction.TableId;
        newCheck.SourceRecId        = transaction.RecId;
        newCheck.update();

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyAddr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the company address.
    /// </summary>
    /// <returns>
    ///    An address as a string.
    /// </returns>
    private Addressing  companyAddr()
    {
        Addressing  ret;
        int         pos;

        if (bankChequeLayout.CompanyName)
        {
            ret = companyInfoOrg.postalAddress().Address;

            pos = strscan(ret, #newLine, 1, 999);

            while (pos)
            {
                ret = strdel(ret, pos, 1);
                pos = strscan(ret, #newLine, 1, 999);
            }

            return ret;
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAmountPaymCurToAmountTransCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the specified amount from the currency of the payment to the currency of the transaction.
    /// </summary>
    /// <param name="_amountPaymCur">
    ///    The amount in payment currency to convert.
    /// </param>
    /// <param name="_paymCompany">
    ///    The company where the payment exists.
    /// </param>
    /// <param name="_paymCurrencyCode">
    ///    The currency that the payment uses.
    /// </param>
    /// <param name="_transCompany">
    ///    The company where the transaction exists.
    /// </param>
    /// <param name="_transCurrencyCode">
    ///    The currency that the transaction uses.
    /// </param>
    /// <param name="_exchRateDate">
    ///    The date to use for exchange rate calculations.
    /// </param>
    /// <param name="_crossRate">
    ///    The cross rate to use; optional. The default value is 0.
    /// </param>
    /// <param name="_exchRate">
    ///    The exchange rate to use; optional. The default value is 0.
    /// </param>
    /// <returns>
    ///    The amount that is converted to the transaction currency.
    /// </returns>
    protected AmountCur convertAmountPaymCurToAmountTransCur(Amount          _amountPaymCur,
                                                             CompanyId       _paymCompany,
                                                             CurrencyCode    _paymCurrencyCode,
                                                             CompanyId       _transCompany,
                                                             CurrencyCode    _transCurrencyCode,
                                                             TransDate       _exchRateDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                             ExchRate        _crossRate = 0,
                                                             ExchRate        _exchRate = 0)
    {
        AmountCur amountTransCur;
        AmountCur interimAmount;
        CurrencyCode transMstCurrency;
        CurrencyCode paymMstCurrency;
        CurrencyExchangeHelper transExchRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(_transCompany).RecId), _exchRateDate);
        CurrencyExchangeHelper paymExchRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(_paymCompany).RecId), _exchRateDate);

        if (_transCurrencyCode == _paymCurrencyCode)
        {
            // Currencies are the same between the marked transaction & the payment
            amountTransCur = _amountPaymCur;
        }
        else if (_crossRate != 0)
        {
            // Cross rate is specified, convert directly from payment to marked transaction currency
            amountTransCur = CurrencyExchange::round(CurrencyExchange::calculateAmount(_amountPaymCur, 100 / _crossRate), _paymCurrencyCode );
        }
        else
        {
            // Convert from payment currency to payment company currency
            if (_exchRate != 0)
            {
                // If an exchange rate was specified for the payment use to convert from payment to payment company currency
                paymExchRateHelper.parmExchangeRate1(_exchRate);
            }

            interimAmount = paymExchRateHelper.calculateTransactionToAccounting(_paymCurrencyCode, _amountPaymCur, false);

            if (_paymCompany != _transCompany)
            {
                // Convert from payment company currency to trans company currency
                changecompany(_transCompany)
                {
                    // Get trans company currency
                    transMstCurrency = CompanyInfoHelper::standardCurrency();
                }

                changecompany(_paymCompany)
                {
                    // Get paym company currency
                    paymMstCurrency = CompanyInfoHelper::standardCurrency();
                }

                if (paymMstCurrency != transMstCurrency)
                {
                    interimAmount = transExchRateHelper.calculateTransactionToAccounting(paymMstCurrency, interimAmount, false);
                }
            }

            // Convert from trans company currency to trans currency
            amountTransCur = transExchRateHelper.calculateAccountingToTransaction(_transCurrencyCode, interimAmount, true);
        }

        return amountTransCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAmountTransCurToAmountPaymCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the specified amount from the currency of the open transaction to the currency of the
    ///    payment.
    /// </summary>
    /// <param name="_amountTransCur">
    ///    The amount in the transaction currency to convert.
    /// </param>
    /// <param name="_transCompany">
    ///    The company where the transaction exists.
    /// </param>
    /// <param name="_transCurrencyCode">
    ///    The currency that the transaction uses.
    /// </param>
    /// <param name="_paymCompany">
    ///    The company where the payment exists.
    /// </param>
    /// <param name="_paymCurrencyCode">
    ///    The currency that the payment uses.
    /// </param>
    /// <param name="_exchRateDate">
    ///    The date to use for exchange rate calculations.
    /// </param>
    /// <param name="_crossRate">
    ///    The cross rate to use; optional. The default value is 0.
    /// </param>
    /// <param name="_exchRate">
    ///    The exchange rate to use; optional. The default value is 0.
    /// </param>
    /// <returns>
    ///    The amount that is converted to payment currency.
    /// </returns>
    protected AmountCur convertAmountTransCurToAmountPaymCur(
        Amount          _amountTransCur,
        CompanyId       _transCompany,
        CurrencyCode    _transCurrencyCode,
        CompanyId       _paymCompany,
        CurrencyCode    _paymCurrencyCode,
        TransDate       _exchRateDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ExchRate        _crossRate = 0,
        ExchRate        _exchRate = 0)
    {
        AmountCur amountPaymCur;
        AmountCur interimAmount;
        CurrencyCode transMstCurrency;
        CurrencyCode paymMstCurrency;
        CurrencyExchangeHelper transExchRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(_transCompany).RecId), _exchRateDate);
        CurrencyExchangeHelper paymExchRateHelper  = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(_paymCompany).RecId), _exchRateDate);

        if (_transCurrencyCode == _paymCurrencyCode)
        {
            // Currencies are the same between the marked transaction & the payment
            amountPaymCur = _amountTransCur;
        }
        else if (_crossRate != 0)
        {
            // Cross rate is specified, convert directly from payment to marked transaction currency
            amountPaymCur = CurrencyExchange::round(CurrencyExchange::calculateAmount(_amountTransCur, _crossRate), _paymCurrencyCode);
        }
        else
        {
            // Convert from transaction currency to transaction company currency
            interimAmount = transExchRateHelper.calculateTransactionToAccounting(_transCurrencyCode, _amountTransCur, false);

            if (_transCompany != _paymCompany)
            {
                // Convert from transaction company currency to payment company currency
                changecompany(_transCompany)
                {
                    // Get trans company currency
                    transMstCurrency = CompanyInfoHelper::standardCurrency();
                }

                changecompany(_paymCompany)
                {
                    // Get paym company currency
                    paymMstCurrency = CompanyInfoHelper::standardCurrency();
                }

                if (transMstCurrency != paymMstCurrency)
                {
                    interimAmount = transExchRateHelper.calculateAccountingToTransaction(paymMstCurrency, interimAmount, false);
                }
            }

            // Convert from payment company currency to payment currency
            if (_exchRate != 0)
            {
                paymExchRateHelper.parmExchangeRate1(_exchRate);
            }

            amountPaymCur = paymExchRateHelper.calculateAccountingToTransaction(_paymCurrencyCode, interimAmount, true);
        }

        return amountPaymCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. It computes data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void fetch()
    {
        QueryRun                localquery;
        AmountCur               paymAmount;
        AmountCur               unsettledPaym;
        AmountCur               unsettledPaymEuro;
        ExchangeRateHelper      exchangeRateHelper;
        boolean                 isCheck = false;
        int                     curRowNumber;

        companyInfoOrg          = CompanyInfo::find();

        localquery = new QueryRun(#Cheque);
        if (tmpCheque)
        {
            localquery.setRecord(tmpCheque);
        }

        while (localquery.next())
        {
            companyCity = tmpCheque.CompanyCity;

            if (companyCity == "")
            {
                companyCity = CompanyInfo::find().postalAddress().City;
            }

            tmpChequePrintout           = localquery.getNo(1);

            this.validate();

            rowNumberPerPage            = tmpChequePrintout.RowNumberPerPage ? tmpChequePrintout.RowNumberPerPage : 1;
            curRowNumber                = 0;

            bankChequeLayout            = BankChequeLayout::find(tmpChequePrintout.AccountId);
            bankAddr                    = BankAccountTable::find(tmpChequePrintout.AccountId).postalAddress().Address;
            tmpLedgerJournalTrans       = LedgerJournalTrans::findRecId(tmpCheque.TransactionRecId,false);

            exchangeRateHelper =
                ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(tmpLedgerJournalTrans.Company).RecId), tmpLedgerJournalTrans.CurrencyCode);

            // Initialize remaining payment amount (in payment currency)
            unsettledPaym               = tmpLedgerJournalTrans.amount();
            unsettledPaymEuro           = unsettledPaym;

            totalDebit = 0;
            totalCredit = 0;

            // Must process credits before debits for totals and balances to come out correctly
            while select crosscompany specTrans
            where specTrans.SpecRecId == tmpLedgerJournalTrans.RecId
            && specTrans.SpecTableId  == tmpLedgerJournalTrans.TableId
            && specTrans.SpecCompany  == tmpLedgerJournalTrans.company()
            && specTrans.Balance01    >  0
            {
                if (tmpLedgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                {
                    tmpCustVendTrans    = specTrans.custTrans();
                }
                else
                {
                    tmpCustVendTrans    = specTrans.vendTrans();
                }

                amountInvoiceCur        = tmpCustVendTrans.AmountCur;

                // Convert remaining payment amount to transaction currency
                unsettledPaym           = this.convertAmountPaymCurToAmountTransCur(
                    unsettledPaym,
                    tmpLedgerJournalTrans.Company,
                    tmpLedgerJournalTrans.CurrencyCode,
                    specTrans.RefCompany,
                    tmpCustVendTrans.CurrencyCode,
                    tmpLedgerJournalTrans.TransDate,
                    specTrans.CrossRate,
                    exchangeRateHelper.prepareExchangeRateForStorage(tmpLedgerJournalTrans.crossrate()));

                // Set amount paid against the current invoice (this is in transaction currency)
                paymAmount              = min(-specTrans.Balance01, unsettledPaym);

                // Convert payment amount to payment currency (Frech checks must be in Euro)
                paymAmount              = min(
                    this.convertAmountTransCurToAmountPaymCur(
                        paymAmount,
                        specTrans.RefCompany,
                        tmpCustVendTrans.CurrencyCode,
                        tmpLedgerJournalTrans.Company,
                        tmpLedgerJournalTrans.CurrencyCode,
                        tmpLedgerJournalTrans.TransDate,
                        specTrans.CrossRate,
                        exchangeRateHelper.prepareExchangeRateForStorage(tmpLedgerJournalTrans.crossrate())),
                    unsettledPaymEuro);

                paymentAmountInEuro     = paymAmount;

                if (paymentAmountInEuro > 0)
                {
                    totalDebit += paymentAmountInEuro;
                }
                else
                if (paymentAmountInEuro < 0)
                {
                    totalCredit += -paymentAmountInEuro;
                }

                unsettledPaymEuro      -= paymentAmountInEuro;

                // Update remaining payment amount
                unsettledPaym          -= paymAmount;
                // Convert remaining payment amount back to payment currency
                unsettledPaym           =
                    unsettledPaym < 0 ? 0 : this.convertAmountTransCurToAmountPaymCur(
                        unsettledPaym,
                        specTrans.RefCompany,
                        tmpCustVendTrans.CurrencyCode,
                        tmpLedgerJournalTrans.Company,
                        tmpLedgerJournalTrans.CurrencyCode,
                        tmpLedgerJournalTrans.TransDate,
                        specTrans.CrossRate,
                        exchangeRateHelper.prepareExchangeRateForStorage(tmpLedgerJournalTrans.crossrate()));

                this.insertChequeTmp_FR();
                isCheck = true;

                if (curRowNumber == rowNumberPerPage)
                {
                    curRowNumber = 0;
                }
                curRowNumber++;
            }

            // Now process debits
            while select crosscompany specTrans
            where specTrans.SpecRecId == tmpLedgerJournalTrans.RecId
            && specTrans.SpecTableId  == tmpLedgerJournalTrans.TableId
            && specTrans.SpecCompany  == tmpLedgerJournalTrans.company()
            && specTrans.Balance01    <  0
            {
                if (tmpLedgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                {
                    tmpCustVendTrans    = specTrans.custTrans();
                }
                else
                {
                    tmpCustVendTrans    = specTrans.vendTrans();
                }

                amountInvoiceCur        = tmpCustVendTrans.AmountCur;

                // Convert remaining payment amount to transaction currency
                unsettledPaym           = this.convertAmountPaymCurToAmountTransCur(
                    unsettledPaym,
                    tmpLedgerJournalTrans.Company,
                    tmpLedgerJournalTrans.CurrencyCode,
                    specTrans.RefCompany,
                    tmpCustVendTrans.CurrencyCode,
                    tmpLedgerJournalTrans.TransDate,
                    specTrans.CrossRate,
                    exchangeRateHelper.prepareExchangeRateForStorage(tmpLedgerJournalTrans.crossrate()));

                // Set amount paid against the current invoice (this is in transaction currency)
                paymAmount              = min(-specTrans.Balance01, unsettledPaym);

                // Convert payment amount to payment currency (Frech checks must be in Euro)
                paymAmount              = min(
                    this.convertAmountTransCurToAmountPaymCur(
                        paymAmount,
                        specTrans.RefCompany,
                        tmpCustVendTrans.CurrencyCode,
                        tmpLedgerJournalTrans.Company,
                        tmpLedgerJournalTrans.CurrencyCode,
                        tmpLedgerJournalTrans.TransDate,
                        specTrans.CrossRate,
                        exchangeRateHelper.prepareExchangeRateForStorage(tmpLedgerJournalTrans.crossrate())),
                    unsettledPaymEuro);
                paymentAmountInEuro     = paymAmount;

                if (paymentAmountInEuro > 0)
                {
                    totalDebit += paymentAmountInEuro;
                }
                else
                if (paymentAmountInEuro < 0)
                {
                    totalCredit += -paymentAmountInEuro;
                }

                unsettledPaymEuro      -= paymentAmountInEuro;

                // Update remaining payment amount
                unsettledPaym          -= paymAmount;

                // Convert remaining payment amount back to payment currency
                unsettledPaym           =
                    unsettledPaym < 0 ? 0 : this.convertAmountTransCurToAmountPaymCur(
                        unsettledPaym,
                        specTrans.RefCompany,
                        tmpCustVendTrans.CurrencyCode,
                        tmpLedgerJournalTrans.Company,
                        tmpLedgerJournalTrans.CurrencyCode,
                        tmpLedgerJournalTrans.TransDate,
                        specTrans.CrossRate,
                        exchangeRateHelper.prepareExchangeRateForStorage(tmpLedgerJournalTrans.crossrate()));

                this.insertChequeTmp_FR();
                isCheck = true;

                if (curRowNumber == rowNumberPerPage)
                {
                    curRowNumber = 0;
                }
                curRowNumber++;
            }

            if (isTest)
            {
                this.insertChequeTmp_FR();
            }
            else
            if (!isCheck)
            {
                this.insertChequeTmp_FR();
            }

            this.updateChequeTmp_FR(curRowNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChequeTmp_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>ChequeTmp_FR</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>ChequeTmp_FR</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(ChequeTmp_FR))]
    public ChequeTmp_FR getChequeTmp_FR()
    {
        select chequeTmp_FR;
        return chequeTmp_FR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpChequePrintout</Name>
				<Source><![CDATA[
    private void initTmpChequePrintout()
    {
        ChequeContract_FR contract = this.parmDataContract() as ChequeContract_FR;

        isTest = contract.parmIsTest();
        //Temp Table Object that was returned from SRSDataCarrier
        new SRSReportRunPermission().assert();
        tmpCheque = SRSTmpTblMarshaller::getTmpTbl(contract.parmTmpTableDataRecId());

        SRSTmpTblMarshaller::deleteTmpTblData(contract.parmTmpTableDataRecId());
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChequeTmp_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the data into a <c>ChequeTmp_FR</c> temporary table instance.
    /// </summary>
    private void insertChequeTmp_FR()
    {
        chequeTmp_FR.clear();

        if (bankChequeLayout.CompanyName)
        {
            chequeTmp_FR.CompanyName            = companyInfoOrg.name();
        }
        if (bankChequeLayout.CompanyLogo)
        {
            chequeTmp_FR.CompanyLogo            = CompanyImage::find(bankChequeLayout.DataAreaId, bankChequeLayout.TableId,
                                                    bankChequeLayout.RecId).Image;
        }

        if (tmpChequePrintout.Signature1)
        {
            BankChequePrint::checkLayoutFieldRights(bankChequeLayout, fieldnum(BankChequeLayout, Signature1Bmp));
            chequeTmp_FR.CheckSignature1        = bankChequeLayout.Signature1Bmp;
        }

        if (tmpChequePrintout.Signature2)
        {
            BankChequePrint::checkLayoutFieldRights(bankChequeLayout, fieldnum(BankChequeLayout, Signature2Bmp));
            chequeTmp_FR.CheckSignature2        = bankChequeLayout.Signature2Bmp;
        }

        chequeTmp_FR.AccountId                  = tmpChequePrintout.AccountId;
        chequeTmp_FR.CompanyAddress             = this.companyAddr();
        chequeTmp_FR.CompanyTel                 = companyInfoOrg.phone();
        chequeTmp_FR.CompanyFax                 = companyInfoOrg.teleFax();
        chequeTmp_FR.CompanyCity                = strupr(companyCity);
        chequeTmp_FR.CurrencyCode               = tmpCustVendTrans.CurrencyCode;
        chequeTmp_FR.Voucher                    = tmpCustVendTrans.Voucher;
        chequeTmp_FR.Invoice                    = tmpCustVendTrans.Invoice;
        chequeTmp_FR.Amount                     = tmpChequePrintout.AmountTxt;
        chequeTmp_FR.AmountCur                  = tmpCustVendTrans.AmountCur;
        chequeTmp_FR.AccountNum                 = tmpLedgerJournalTrans.parmAccount();
        chequeTmp_FR.Address                    = tmpChequePrintout.Address;
        chequeTmp_FR.AmountInWords              = tmpChequePrintout.Numerals2Letter;
        chequeTmp_FR.BankCopyCustomWatermark    = tmpChequePrintout.BankCopyCustomWatermark;
        chequeTmp_FR.BankAddress                = bankAddr;
        chequeTmp_FR.ChequeNum                  = tmpChequePrintout.ChequeNum;
        chequeTmp_FR.DocumentNum                = tmpLedgerJournalTrans.Voucher;
        chequeTmp_FR.CheckLetterInfos           = strfmt('%1, %2 %3',companyCity,"@SYS92591",this.longDate());
        chequeTmp_FR.ChequeDate                 = tmpChequePrintout.TransDate;
        chequeTmp_FR.DateStr                    = this.longDate();

        if (bankChequeLayout.UseAcode || bankChequeLayout.UseBcode || bankChequeLayout.UseCCode)
        {
            chequeTmp_FR.abcCode                = bankChequeLayout.abcCode();
        }

        chequeTmp_FR.CurrencyTxt                = tmpChequePrintout.CurrencyTxt;
        chequeTmp_FR.micrLine                   = this.micrLine();
        chequeTmp_FR.RecipientName              = substr(tmpCheque.RecipientName,0,46);
        chequeTmp_FR.RecipientAddress           = tmpCheque.Address;
        chequeTmp_FR.CompanyTaxExemptNum        = companyInfoOrg.CoRegNum;
        chequeTmp_FR.RegistrationNum            = tmpChequePrintout.RegistrationNum;
        chequeTmp_FR.SlipTxt                    = tmpChequePrintout.SlipTxt;
        chequeTmp_FR.SlipTop1                   = tmpChequePrintout.SlipTop1;
        chequeTmp_FR.SlipTop2                   = tmpChequePrintout.SlipTop2;
        chequeTmp_FR.NumOfSlips                 = tmpChequePrintout.NumOfSlips;
        chequeTmp_FR.ChequeTop                  = tmpChequePrintout.ChequeTop;
        chequeTmp_FR.Numerals2LetterPart1       = strupr(substr(tmpCheque.Numerals2Letter,1,strfind (tmpCheque.Numerals2Letter, ' ', 33, -33)-1))+'*';
        chequeTmp_FR.Numerals2LetterPart2       = '*'+strupr(substr(tmpCheque.Numerals2Letter,strfind(tmpCheque.Numerals2Letter, ' ', 33, -33)+1, 45));
        chequeTmp_FR.CashDiscount               = specTrans.getPossibleCashDiscAmount(tmpLedgerJournalTrans.TransDate,VendPaymModeTable::discGraceDays(tmpLedgerJournalTrans.PaymMode));

        chequeTmp_FR.YourReference              = tmpChequePrintout.ChequeNum;

        chequeTmp_FR.NetAmount                  = chequeTmp_FR.AmountCur - chequeTmp_FR.CashDiscount;

        if (paymentAmountInEuro > 0)
        {
            chequeTmp_FR.DebitAmt               = paymentAmountInEuro;
        }
        else
        if (paymentAmountInEuro < 0)
        {
            chequeTmp_FR.CreditAmount           = -paymentAmountInEuro;
        }

        chequeTmp_FR.BankCopySignatureText = tmpChequePrintout.BankCopySignatureText;

        if (tmpChequePrintout.Copy || tmpChequePrintout.Void)
        {
            if (tmpChequePrintout.BankCopySignatureText)
            {
                chequeTmp_FR.BankCopySignatureText = tmpChequePrintout.BankCopySignatureText;
            }
            else
            {
                chequeTmp_FR.BankCopySignatureText = #Void;
            }
        }
        else
        {
            chequeTmp_FR.BankCopySignatureText = #emptyString;
        }

        chequeTmp_FR.BankChequeLayoutHeader     = this.returnMax5Lines(bankChequeLayout.frHeader);
        chequeTmp_FR.BankChequeLayoutFooter     = this.returnMax5Lines(bankChequeLayout.frFooter);

        chequeTmp_FR.RowNumberPerPage           = rowNumberPerPage;

        chequeTmp_FR.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>longDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date value.
    /// </summary>
    /// <returns>
    ///    A date format as a string.
    /// </returns>
    private str 30 longDate()
    {
        str month;

        switch (mthofyr(tmpChequePrintout.TransDate))
        {
            case 1 :
                month = #Month1;
                break;
            case 2 :
                month = #Month2;
                break;
            case 3 :
                month = #Month3;
                break;
            case 4 :
                month = #Month4;
                break;
            case 5 :
                month = #Month5;
                break;
            case 6 :
                month = #Month6;
                break;
            case 7 :
                month = #Month7;
                break;
            case 8 :
                month = #Month8;
                break;
            case 9 :
                month = #Month9;
                break;
            case 10 :
                month = #Month10;
                break;
            case 11 :
                month = #Month11;
                break;
            case 12 :
                month = #Month12;
                break;
        }

        return strfmt('%1 %2 %3', dayofmth(tmpChequePrintout.TransDate), month, year(tmpChequePrintout.TransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>micrLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A method that is used for calculating the <c>MICRLine</c> value.
    /// </summary>
    /// <returns>
    ///    A <c>MICRLine</c> value.
    /// </returns>
    private BankMICRLine micrLine()
    {
        BankChequeLayout    layout = BankChequeLayout::find(tmpChequePrintout.AccountId);
        BankMICRLine        micrChequeNum;
        BankMICRLine        bankMICRLine;
        Counter             chequeLen;
        Counter             i;
        BankMICRLine        filler;
        Counter             chequeNumPos;

        filler = #emptyString;
        if (layout.Micr)
        {
            chequeLen = strlen(tmpChequePrintout.ChequeNum);
            for (i = chequeLen; i < layout.MicrNum; i++)
            {
                if (layout.MicrZero)
                    filler = filler + '0';
                else
                    filler = filler + ' ';
            }
            micrChequeNum = filler + tmpChequePrintout.ChequeNum;

            chequeNumPos = strfind(tmpChequePrintout.micrLine,'%',1,strlen(tmpChequePrintout.micrLine));
            if (chequeNumPos && strlen(tmpChequePrintout.micrLine) > chequeNumPos+1)
            {
                bankMICRLine = strins(tmpChequePrintout.micrLine,';',chequeNumPos+2);
                bankMICRLine = strfmt(bankMICRLine,micrChequeNum);
                bankMICRLine = strdel(bankMICRLine,strfind(bankMICRLine,';',1,strlen(bankMICRLine)),1);
            }
            else
                bankMICRLine = strfmt(tmpChequePrintout.micrLine,micrChequeNum);
        }
        return bankMICRLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data into the <c>chequeTmp</c> temporary table.
    /// </summary>
    public void processReport()
    {
        this.initTmpChequePrintout();
        this.fetch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnMax5Lines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the formatter input string.
    /// </summary>
    /// <param name="input">
    ///    A string input value for the formatted output.
    /// </param>
    /// <returns>
    ///    A formatted string.
    /// </returns>
    private str returnMax5Lines(str input)
    {
        int counter = 0, curPos = 0, nextPos = -1, maxlength = strlen(input);

        while (counter < 5)
        {
            curPos = strfind(input,'\n',nextPos + 1,maxlength);

            if (curPos)
            {
                nextPos = curPos;
            }
            else
            {
                return input;
            }

            counter ++;
        }
        if (!nextPos)
        {
            return input;
        }

        return substr(input,0,nextPos-1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores the temporary table by using the <c>SRSTmpTblMarshaller</c> class.
    /// </summary>
    /// <returns>
    ///    The <c>RecId</c> value of the data store table where the temporary table is stored.
    /// </returns>
    public RecId storeTmpTable()
    {
        return SRSTmpTblMarshaller::SendTmpTblToDataProvider(chequeTmp_FR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChequeTmp_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the data in a <c>ChequeTmp_FR</c> temporary table instance.
    /// </summary>
    /// <param name="_curRowNumber">
    /// Number of rows in the settlement block.
    /// </param>
    private void updateChequeTmp_FR(int _curRowNumber)
    {
        #define.NewLine('\n')
        #define.NewLineMultiplier(2.28)

        if (rowNumberPerPage > 1 && _curRowNumber < rowNumberPerPage)
        {
            chequeTmp_FR.BankChequeLayoutFooter += strRep(#NewLine, real2int((rowNumberPerPage - _curRowNumber) * #NewLineMultiplier));
        }

        chequeTmp_FR.TotalDebitAmt  = totalDebit;
        chequeTmp_FR.TotalCreditAmt = totalCredit;
        chequeTmp_FR.IsPrintCheque  = true;
        chequeTmp_FR.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the amount values.
    /// </summary>
    private void validate()
    {
        if (strlen(tmpCheque.AmountTxt) > 13)
        {
            warning (strfmt("@SYS58851", "@SYS62867"));
        }

        if (strlen(tmpCheque.Numerals2Letter) > 80)
        {
            warning (strfmt("@SYS58851", "@SYS76462"));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>