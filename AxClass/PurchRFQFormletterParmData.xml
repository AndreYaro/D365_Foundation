<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQFormletterParmData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQFormletterParmData
extends formletterParmData
{
    PurchRFQParmUpdate      purchRFQParmUpdate;
    PurchRFQParmTable       purchRFQParmTable;
    PurchRFQTable           purchRFQTable;
    PurchRFQReplyTable      purchRFQReplyTable;

    PurchRFQQuantity        purchRFQQuantity;
    PurchRFQStatusFilter    lineStatusFilter;
    PurchRFQUpdate          purchRFQUpdate;
    ParmId                  callerParmId;
    boolean                 callerIsFormLetter;
    boolean                 isMarkValidated;
    boolean                 multiSelectRequired;

    RecordInsertList        purchRFQParmLineRecordInsertList;

    private PurchRFQFormLetterInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowChooseLines</Name>
				<Source><![CDATA[
    protected boolean allowChooseLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    protected boolean createParmLine(Common _purchRFQLine, TradeLineRefId _tableRefId)
    {
        PurchRFQLine        purchRFQLine = _purchRFQLine as PurchRFQLine;
        PurchRFQParmLine    newPurchRFQParmLine;
        boolean             lineCreated = false;
        PurchRFQReplyLine   purchRFQReplyLine;
        PurchRFQReplyLine   purchRFQReplyLineLocal;
        PurchRFQLine        purchRFQLineLocal;

        purchRFQReplyLine = PurchRFQReplyLine::findRFQLine(_purchRFQLine.RecId);

        // check if atleast one line is marked, otherwise the specQty should be "All" instead of "Marked"
        if (!isMarkValidated)
        {
            select firstonly RecId from purchRFQReplyLineLocal
                join RecId from purchRFQLineLocal
                where   purchRFQLineLocal.RecId         ==  purchRFQReplyLineLocal.rfqLineRecId &&
                        purchRFQLineLocal.rfqId         ==  purchRFQReplyLineLocal.rfqId &&
                        purchRFQReplyLineLocal.rfqMark  ==  NoYes::Yes &&
                        purchRFQLineLocal.Status        <   PurchRFQStatus::Rejected &&
                        purchRFQReplyLineLocal.rfqId    ==  purchRFQReplyLine.rfqId;

            if (!purchRFQReplyLineLocal && PurchRFQParmUpdate::exist(this.parmId()))
            {
                if (!this.parmMultiSelectRequired())
                {
                    ttsbegin;
                    purchRFQParmUpdate = PurchRFQParmUpdate::find(this.parmId(), true);
                    purchRFQParmUpdate.SpecQty = PurchRFQUpdate::All;
                    purchRFQParmUpdate.update();
                    ttscommit;
                }
            }
            isMarkValidated = true;
        }

        if (purchRFQLine.RecId &&  purchRFQLine.Status < PurchRFQStatus::Rejected //skip Rejected and Accepted lines
            && !PurchRFQParmLine::existWaiting(parmId, purchRFQLine.rfqId, purchRFQLine.InventTransId))
        {
            newPurchRFQParmLine.clear();
            [newPurchRFQParmLine.QtyOrdered]    = this.qtyInvent(purchRFQLine, naReal());
            [newPurchRFQParmLine.PurchQty]      = this.qtyPurch(purchRFQLine, purchRFQReplyLine, naReal());

            if (this.doCreateParmLine(newPurchRFQParmLine, purchRFQReplyLine))
            {
                newPurchRFQParmLine.ParmId     = purchRFQParmUpdate.ParmId;
                newPurchRFQParmLine.initFromPurchRFQLine(purchRFQLine);
                newPurchRFQParmLine.LineAmount = purchRFQReplyLine.LineAmount;
                newPurchRFQParmLine.TableRefId = _tableRefId;

                this.insertParmLine(newPurchRFQParmLine);

                lineCreated = true;

                this.allowCreateParmTable(true);
            }
        }

        return lineCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineFromRFQCaseLine</Name>
				<Source><![CDATA[
    protected boolean  createParmLineFromRFQCaseLine(PurchRFQCaseLine  _purchRFQCaseLine,
                                                     TradeLineRefId    _tableRef       = '')
    {
        PurchRFQParmLine   newPurchRFQParmLine;
        boolean            lineCreated = false;

        if (_purchRFQCaseLine.RecId)
        {
            newPurchRFQParmLine.clear();

            if ((_purchRFQCaseLine.isValidCategoryLine() || _purchRFQCaseLine.isValidItemLine())
                && _purchRFQCaseLine.PurchQty)
            {
                newPurchRFQParmLine.ParmId     = purchRFQParmUpdate.ParmId;
                newPurchRFQParmLine.initFromPurchRFQCaseLine(_purchRFQCaseLine);
                newPurchRFQParmLine.TableRefId = _tableRef;
                this.parmPurchRFQParmLineRecordInsertList().add(newPurchRFQParmLine);
                lineCreated = true;

                this.allowCreateParmTable(true);
            }
        }

        return lineCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmSubTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the sub order header posting parameter table.
    /// </summary>
    /// <param name="_parmTable">
    /// The connected order header posting parameter record.
    /// </param>
    protected void createParmSubTable(Common _parmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmTable</Name>
				<Source><![CDATA[
    protected Common createParmTable(Common _sourceTable, Common _sourceLineTable, TradeLineRefId _tableRefId, boolean _skipParmSubTable = false)
    {
        PurchRFQParmTable   localPurchRFQParmTable;
        if (_sourceTable.TableId == tableNum(PurchRFQTable))
        {
            purchRFQTable = _sourceTable;
            purchRFQReplyTable = purchRFQTable.purchRFQReplyTable();
            localPurchRFQParmTable.initFromPurchRFQTable(purchRFQTable);
            localPurchRFQParmTable.initFromPurchRFQReplyTable(purchRFQReplyTable);
        }
        localPurchRFQParmTable.ParmId               = purchRFQParmUpdate.ParmId;
        localPurchRFQParmTable.rfqName              = purchRFQTable.rfqName;
        localPurchRFQParmTable.TableRefId           = _tableRefId;
        localPurchRFQParmTable.ParmJobStatus        = ParmJobStatus::Waiting;

        if (purchRFQTable.rfqType == PurchRFQType::Purch
            || PurchRFQTable.RFQType == PurchRFQType::PurchAgreement)
        {
            localPurchRFQParmTable.poTransDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
        }

        this.insertParmTable(localPurchRFQParmTable);
        this.tableRefIdUsed(true);
        this.allowCreateParmTable(this.parmAllowEmptyParmTable());
        return localPurchRFQParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmTableFromRFQCaseTable</Name>
				<Source><![CDATA[
    protected void createParmTableFromRFQCaseTable(PurchRFQParmTable    _purchRFQParmTable,
                                                   PurchRFQCaseTable    _purchRFQCaseTable,
                                                   VendAccount          _vendAccount)
    {
        _purchRFQParmTable.initFromPurchRFQCaseTable(_purchRFQCaseTable);
        _purchRFQParmTable.ParmId               = purchRFQParmUpdate.ParmId;
        _purchRFQParmTable.rfqName              = VendTable::find(_vendAccount).name();
        _purchRFQParmTable.VendAccount          = _vendAccount;
        _purchRFQParmTable.ParmJobStatus        = ParmJobStatus::Waiting;

        _purchRFQParmTable.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the order posting parameter table.
    /// </summary>
    /// <returns>
    /// The inserted record.
    /// </returns>
    public Common createParmUpdate()
    {
        purchRFQParmUpdate.ParmId                   = this.parmId();

        if (PurchRFQFormletterParmDataPrintOnlyRelatedJournalsFlight::instance().isEnabled())
        {
            purchRFQParmUpdate.initFromSysLastValue(parmUpdateSysLastValue);
        }
        else
        {
            purchRFQParmUpdate.SpecQty              = this.specQty();
        }

        purchRFQParmUpdate.LateSelection            = false;
        purchRFQParmUpdate.ReasonId                 = '';

        // When called from the batch dialog the record already exists
        if (! PurchRFQParmUpdate::exist(purchRFQParmUpdate.ParmId))
            purchRFQParmUpdate.insert();

        return purchRFQParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records in the order line posting parameter table for the current posting.
    /// </summary>
    protected void deleteParmLines()
    {
        PurchRFQParmLine::deleteFromPurchRFQParmUpdate(purchRFQParmUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records in the order header posting parameter table for the current posting.
    /// </summary>
    protected void deleteParmTables()
    {
        PurchRFQParmTable::deleteWithoutUpdate(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCreateParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the parm line should be created
    /// </summary>
    /// <param name="_newPurchRFQParmLine">
    /// The new parm line being created.
    /// </param>
    /// <param name="_purchRFQReplyLine">
    /// The reply line the new parm line is being created for.
    /// </param>
    /// <returns>
    /// true if the new parm line should be created; otherwise, false.
    /// </returns>
    protected boolean doCreateParmLine(PurchRFQParmLine _newPurchRFQParmLine, PurchRFQReplyLine _purchRFQReplyLine)
    {
        return (!this.parmMultiSelectRequired() ||
            (_purchRFQReplyLine.RFQMark == NoYes::Yes || purchRFQParmUpdate.SpecQty == purchRFQUpdate::All)) &&
            (_newPurchRFQParmLine.PurchQty != 0 || PurchRFQCaseTable::find(_purchRFQReplyLine.purchRFQReplyTable().purchRFQTable().RFQCaseId).IsSealed == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsParmLines</Name>
				<Source><![CDATA[
    protected boolean existsParmLines()
    {
        return (select firstonly RecId from purchRFQParmLine
                 where purchRFQParmLine.ParmId == this.parmId()).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsParmUpdate</Name>
				<Source><![CDATA[
    protected boolean existsParmUpdate(Common _parmUpdate)
    {
        PurchRFQParmUpdate parmUpdate = _parmUpdate as PurchRFQParmUpdate;
        return PurchRFQParmUpdate::exist(parmUpdate.ParmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmTable_TableRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the <c>TableRefID</c> field in the posting parameter header table.
    /// </summary>
    /// <returns>
    /// A field ID.
    /// </returns>
    protected FieldId fieldIdParmTable_TableRefId()
    {
        return fieldNum(PurchRFQParmTable,TableRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdSourceTable_OrderId</Name>
				<Source><![CDATA[
    protected FieldId fieldIdSourceTable_OrderId()
    {
        if (this.parmMultiSelectRequired())
        {
            return fieldNum(PurchRFQTable, RFQCaseId);
        }
        else
        {
            return fieldNum(PurchRFQTable, RFQId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOrigOrderIsSet</Name>
				<Source><![CDATA[
    protected void fillOrigOrderIsSet()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoSourceTableSkipped</Name>
				<Source><![CDATA[
    protected void infoSourceTableSkipped(Common _purchRFQCaseTable)
    {
        PurchRFQCaseTable purchRFQCaseTable = _purchRFQCaseTable as PurchRFQCaseTable;
        info(strFmt("@SYS62710",purchRFQCaseTable.rfqType, purchRFQCaseTable.rfqCaseId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        purchRFQQuantity = PurchRFQQuantity::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerIsFormLetter</Name>
				<Source><![CDATA[
    public boolean parmCallerIsFormLetter(boolean _callerIsFormLetter = callerIsFormLetter)
    {
        callerIsFormLetter = _callerIsFormLetter;

        return callerIsFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerParmId</Name>
				<Source><![CDATA[
    public ParmId parmCallerParmId(ParmId _callerParmId = callerParmId)
    {
        callerParmId = _callerParmId;

        return callerParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineMapKey</Name>
				<Source><![CDATA[
    protected str parmLineMapKey(Common _line)
    {
        str                 key;
        PurchRFQLine        purchRFQLine;
        PurchRFQParmLine    purchRFQParmLine;
        PurchRFQCaseLine    purchRFQCaseLine;

        switch (_line.TableId)
        {
            case tableNum(PurchRFQParmLine) :
                purchRFQParmLine = _line;
                key = this.addToKey(key, purchRFQParmLine.rfqId);
                key = this.addToKey(key, num2str(purchRFQParmLine.LineNum,6,2,1,2));
                break;

            case tableNum(PurchRFQLine) :
                purchRFQLine = _line;
                key = this.addToKey(key, purchRFQLine.rfqId);
                key = this.addToKey(key, num2str(purchRFQLine.LineNum,6,2,1,2));
                break;

            case tableNum(PurchRFQCaseLine) :
                purchRFQCaseLine = _line;
                key = this.addToKey(key, purchRFQCaseLine.rfqCaseId);
                key = this.addToKey(key, num2str(purchRFQCaseLine.LineNum,6,2,1,2));
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineStatusFilter</Name>
				<Source><![CDATA[
    public PurchRFQStatusFilter parmLineStatusFilter(PurchRFQStatusFilter _lineStatusFilter = lineStatusFilter)
    {
        lineStatusFilter = _lineStatusFilter;

        return lineStatusFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineTableId</Name>
				<Source><![CDATA[
    protected TableId parmLineTableId()
    {
        return tableNum(PurchRFQParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _purchRFQParmUpdate = purchRFQParmUpdate)
    {
        purchRFQParmUpdate = _purchRFQParmUpdate as PurchRFQParmUpdate;
        this.parmParmId(purchRFQParmUpdate.ParmId);
        return purchRFQParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQParmLineRecordInsertList</Name>
				<Source><![CDATA[
    public RecordInsertList parmPurchRFQParmLineRecordInsertList(RecordInsertList _recordInsertList = purchRFQParmLineRecordInsertList)
    {
        purchRFQParmLineRecordInsertList = _recordInsertList;

        return purchRFQParmLineRecordInsertList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQUpdate</Name>
				<Source><![CDATA[
    public PurchRFQUpdate parmPurchRFQUpdate(PurchRFQUpdate _purchRFQUpdate = purchRFQUpdate)
    {
        purchRFQUpdate = _purchRFQUpdate;

        return purchRFQUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = purchRFQTable)
    {
        if (_sourceTable.TableId == tableNum(PurchRFQTable))
        {
            purchRFQTable = _sourceTable;
        }

        return _sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubTableTableId</Name>
				<Source><![CDATA[
    protected TableId parmSubTableTableId()
    {
        return tableNum(PurchRFQParmSubTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableMapKey</Name>
				<Source><![CDATA[
    protected str parmTableMapKey(Common _source)
    {
        str                     key;
        PurchRFQCaseLine        purchRFQCaseLine;
        PurchRFQLine            purchRFQLine;
        PurchRFQParmTable       localPurchRFQParmTable;
        PurchRFQParmSubTable    purchRFQParmSubTable;
        PurchRFQParmLine        purchRFQParmLine;

        switch (_source.TableId)
        {
            case tableNum(PurchRFQCaseLine) :
                purchRFQCaseLine = _source;
                key = this.addToKey(key, purchRFQCaseLine.rfqCaseId);
                break;
            case tableNum(PurchRFQLine) :
                purchRFQLine = _source;
                key = this.addToKey(key, purchRFQLine.rfqId);
                break;

            case tableNum(PurchRFQParmTable) :
                localPurchRFQParmTable = _source;
                key = this.addToKey(key, localPurchRFQParmTable.rfqId);
                break;

            case tableNum(PurchRFQParmSubTable) :
                purchRFQParmSubTable = _source;
                key = this.addToKey(key, purchRFQParmSubTable.rfqId);
                break;

            case tableNum(PurchRFQParmLine) :
                purchRFQParmLine = _source;
                key = this.addToKey(key, purchRFQParmLine.purchRFQTable().rfqId);
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableTableId</Name>
				<Source><![CDATA[
    protected TableId parmTableTableId()
    {
        return tableNum(PurchRFQParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowEmptyParmTable</Name>
				<Source><![CDATA[
    public boolean parmAllowEmptyParmTable(boolean _allowEmptyParmTable = allowCreateParmTable)
    {
        return this.parmMultiSelectRequired() && allowEmptyParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiSelectRequired</Name>
				<Source><![CDATA[
    public boolean parmMultiSelectRequired(boolean _multiSelectRequired = multiSelectRequired)
    {
        multiSelectRequired = _multiSelectRequired;
        return multiSelectRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected container  qtyInvent(PurchRFQLine         _purchRFQLine,
                                   InventQty            _qty = naReal())
    {
        return purchRFQQuantity.qtyInvent(_purchRFQLine, PurchRFQReplyLine::findRFQLine(_purchRFQLine.RecId), purchRFQParmUpdate.SpecQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPurch</Name>
				<Source><![CDATA[
    protected container  qtyPurch(PurchRFQLine      _purchRFQLine,
                                  PurchRFQReplyLine _purchRFQReplyLine,
                                  PurchQty          _qty     = naReal())
    {
        return purchRFQQuantity.qtyPurch(_purchRFQLine, _purchRFQReplyLine, purchRFQParmUpdate.SpecQty, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryName</Name>
				<Source><![CDATA[
    protected str queryName()
    {
        return queryStr(PurchRFQUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Re-arranges the record in the line posting parameter table.
    /// </summary>
    /// <param name="_queryRun">
    /// A <c>QueryRun</c> object.
    /// </param>
    protected void reArrangeLines(QueryRun _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun reArrangeQueryRun()
    {
        QueryRun ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a re-select of the created data.
    /// </summary>
    public void reSelect()
    {
        PurchRFQParmSubTable    purchRFQParmSubTable;
        PurchRFQLine            purchRFQLine;
        PurchRFQReplyLine       purchRFQReplyLine;

        ttsbegin;

        while select forceplaceholders purchRFQParmTable
            where purchRFQParmTable.ParmId == purchRFQParmUpdate.ParmId
                join purchRFQParmSubTable
                    where purchRFQParmSubTable.ParmId     == purchRFQParmTable.ParmId
                       && purchRFQParmSubTable.TableRefId == purchRFQParmTable.TableRefId
        {
            PurchRFQParmLine::deleteFromPurchRFQParmSubTable(purchRFQParmSubTable);

            while select purchRFQLine
                where purchRFQLine.rfqId    == purchRFQParmSubTable.rfqId
                exists join purchRFQReplyLine
                    where purchRFQReplyLine.rfqLineRecId == purchRFQLine.RecId
            {
                this.createParmLine(purchRFQLine, purchRFQParmTable.TableRefId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelectLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Re-selects the record in the line posting parameter table.
    /// </summary>
    /// <param name="_origOrderId">
    /// An order ID.
    /// </param>
    protected void reSelectLines(Num _origOrderId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the source line table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId sourceLineTableId()
    {
        return tableNum(PurchRFQLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the source table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId sourceTableTableId()
    {
        return tableNum(PurchRFQTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQty</Name>
				<Source><![CDATA[
    public PurchRFQUpdate specQty(PurchRFQUpdate   _specQty = purchRFQParmUpdate.SpecQty)
    {
        purchRFQParmUpdate.SpecQty = _specQty;
        return purchRFQParmUpdate.SpecQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void  updateQueryBuild()
    {
        #query

        super();

        if (purchRFQParmUpdate.LateSelection && purchRFQParmUpdate.LateSelectionQuery != conNull()
            && !this.parmUsePackedMapInChooseLinesQuery())
        {
            chooseLines = new SysQueryRun(purchRFQParmUpdate.LateSelectionQuery);
            return;
        }

        if (! this.parmDatasourceRecordsPacked())
        {
            chooseLines.query().dataSourceTable(tableNum(PurchRFQTable)).addRange(fieldNum(PurchRFQTable, rfqId));
            chooseLines.query().dataSourceTable(tableNum(PurchRFQTable)).addRange(fieldNum(PurchRFQTable, VendAccount));

            if (purchRFQTable)
            {
                chooseLines.query().dataSourceTable(tableNum(PurchRFQTable)).rangeField(fieldNum(PurchRFQTable, rfqId)).value(queryValue(purchRFQTable.rfqId));
                chooseLines.query().dataSourceTable(tableNum(PurchRFQTable)).rangeField(fieldNum(PurchRFQTable, VendAccount)).value(queryValue(purchRFQTable.VendAccount));
            }
        }
        else
        {
            setPrefix("@SYS25781");

            this.updateQueryDocumentRanges(this.parmDatasourceRecordsPacked());
        }

        chooseLines.query().dataSourceTable(tableNum(PurchRFQLine)).addSortField(fieldNum(PurchRFQLine, rfqId));
        chooseLines.query().dataSourceTable(tableNum(PurchRFQLine)).addSortField(fieldNum(PurchRFQLine, LineNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesServer</Name>
				<Source><![CDATA[
    static public container chooseLinesServer(
        container   _purchRFQFormletterPacked,
        boolean     _append)
    {
        PurchRFQFormletterParmData purchRFQFormletterParmData = PurchRFQFormletterParmData::newChooseLines(_purchRFQFormletterPacked);
        purchRFQFormletterParmData.createData(_append);

        return purchRFQFormletterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChooseLines</Name>
				<Source><![CDATA[
    static PurchRFQFormletterParmData newChooseLines(container _purchRFQFormletterContractPacked)
    {
        PurchRFQFormLetterContract  purchRFQFormLetterContract = PurchRFQFormLetterContract::newFromPackedVersion(_purchRFQFormletterContractPacked);
        PurchRFQFormletterParmData  purchRFQFormletterParmData = PurchRFQFormletterParmData::newData(purchRFQFormLetterContract.getDocumentStatus());

        purchRFQFormletterParmData.parmAllowEmptyParmTable(purchRFQFormLetterContract.parmAllowEmptyTable());
        purchRFQFormletterParmData.parmMultiForm(purchRFQFormLetterContract.parmMultiForm());
        purchRFQFormletterParmData.parmTransDate(purchRFQFormLetterContract.parmTransDate());
        purchRFQFormletterParmData.parmMultiSelectRequired(purchRFQFormLetterContract.parmMultiSelectRequired());

        if (purchRFQFormLetterContract.parmChooseLinesQueryPacked())
        {
            purchRFQFormletterParmData.parmQueryChooseLines(new SysQueryRun(SysOperationHelper::base64Decode(purchRFQFormLetterContract.parmChooseLinesQueryPacked())));
        }

        purchRFQFormletterParmData.parmShowQueryForm(purchRFQFormLetterContract.parmShowQueryForm());
        purchRFQFormletterParmData.parmParmUpdateSysLastValue(purchRFQFormLetterContract.parmParmUpdate() as PurchRFQParmUpdate);
        purchRFQFormletterParmData.parmDatasourceRecordsPacked(purchRFQFormLetterContract.parmDataSourceRecordMapPacked());
        purchRFQFormletterParmData.parmCreateFromLines(purchRFQFormLetterContract.parmCreateFromLines());
        purchRFQFormletterParmData.parmSourceTable(purchRFQFormLetterContract.parmSourceTable());

        if (purchRFQFormLetterContract.parmParmId() || !PurchRFQFormletterParmDataPrintOnlyRelatedJournalsFlight::instance().isEnabled())
        {
            purchRFQFormletterParmData.parmParmUpdate(purchRFQFormLetterContract.parmParmUpdate() as PurchRFQParmUpdate);
        }

        purchRFQFormletterParmData.parmCallerParmId(purchRFQFormLetterContract.parmCallerFormLetterParmId());

        purchRFQFormletterParmData.init();
        return purchRFQFormletterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newData</Name>
				<Source><![CDATA[
    static formletterParmData newData(DocumentStatus _documentStatus)
    {
        PurchRFQFormletterParmData parmData;

        switch (_documentStatus)
        {
            case DocumentStatus::RFQ :
                parmData = PurchRFQFormletterParmDataSend::construct();
                break;

            case DocumentStatus::RFQAccept :
                parmData = PurchRFQFormletterParmDataAccept::construct();
                break;

            case DocumentStatus::RFQReject :
                parmData = PurchRFQFormletterParmDataReject::construct();
                break;

            case DocumentStatus::RFQReSend :
                parmData = PurchRFQFormletterParmDataReSend::construct();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        parmData.parmVersioningStrategy(FormLetterParmDataVersioning::newVersioningUpdateType(VersioningUpdateType::Initial, parmData));

        return parmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReSelect</Name>
				<Source><![CDATA[
    static PurchRFQFormletterParmData newReSelect(container             _purchRFQFormletterContractPacked,
                                                  PurchRFQUpdate        _purchRFQUpdate,
                                                  PurchRFQStatusFilter  _lineStatusFilter)
    {
        PurchRFQFormLetterContract  purchRFQFormLetterContract = PurchRFQFormLetterContract::newFromPackedVersion(_purchRFQFormletterContractPacked);
        PurchRFQFormletterParmData  purchRFQFormletterParmData = PurchRFQFormletterParmData::newData(purchRFQFormLetterContract.getDocumentStatus());

        purchRFQFormletterParmData.parmParmUpdate(purchRFQFormLetterContract.parmParmUpdate());
        purchRFQFormletterParmData.parmAllowEmptyParmTable(purchRFQFormLetterContract.parmAllowEmptyTable());
        purchRFQFormletterParmData.parmPurchRFQUpdate(_purchRFQUpdate);
        purchRFQFormletterParmData.parmLineStatusFilter(_lineStatusFilter);

        purchRFQFormletterParmData.init();
        return purchRFQFormletterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal FormLetterInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchRFQFormLetterInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>