<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeBLWILineTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TradeBLWILineTransfer</c> class handles the transfer of all invoice data needed for the BLWI
///    system to the BLWI transactions form.
/// </summary>
public class TradeBLWILineTransfer extends RunBase
{
    PaymBalanceSurveyCodeRecId  surveyCodeRecId;
    TransDate                   transDate;
    boolean                     deleteLines;
    DialogField                 dialogPeriod;
    DialogField                 dialogDeleteCurrent;
    DialogField                 dialogSurveyCode;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        surveyCodeRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a dialog box.
    /// </summary>
    /// <returns>
    ///    An object that contains the defined dialog box.
    /// </returns>
    /// <remarks>
    ///    The user is prompted to give a survey code and a declaration period. The user can select whether
    ///    the existing record in the BLWI transaction form should be deleted.
    /// </remarks>
    public Object dialog()
    {
        Dialog transferDialog = new DialogRunbase("@SYS92141", this);

        dialogSurveyCode    = transferDialog.addFieldValue(extendedtypestr(PaymBalanceSurveyCodeRecId), surveyCodeRecId);
        dialogPeriod        = transferDialog.addFieldValue(extendedtypestr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        dialogDeleteCurrent = transferDialog.addFieldValue(enumstr(NoYes), NoYes::No, "@SYS21354", "@SYS92191");

        return transferDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Puts all dialog field values into variables.
    /// </summary>
    /// <returns>
    ///    true if the method was successful; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        surveyCodeRecId  = dialogSurveyCode.value();
        transDate   = dialogPeriod.value();
        deleteLines = dialogDeleteCurrent.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the current version and the current list.
    /// </summary>
    /// <returns>
    ///    The current version and the current list.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteLines</Name>
				<Source><![CDATA[
    public boolean parmDeleteLines(boolean _deleteLines = deleteLines)
    {
        deleteLines = _deleteLines;
        return deleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSurveyCodeRecId</Name>
				<Source><![CDATA[
    public PaymBalanceSurveyCodeRecId parmSurveyCodeRecId(PaymBalanceSurveyCodeRecId _surveyCodeRecId = surveyCodeRecId)
    {
        surveyCodeRecId = _surveyCodeRecId;
        return surveyCodeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(transDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs various tasks for BLWI transactions.
    /// </summary>
    /// <remarks>
    ///    The existing BLWI transactions lines are deleted if indicated.The begin and end date of the
    ///    declaration period are calculated.The queries are defined and executed to find all transactions
    ///    that are needed for BLWI.For each transaction that must be transferred to the BLWI transaction
    ///    form, the create method is called.
    /// </remarks>
    public void run()
    {
        TradeBLWILines lines;
        FromDate fromDate;
        ToDate toDate;
        BankPaymBalanceSurveyCalc surveyCalc;
        BankPaymBalanceSurvey bankPaymBalanceSurvey;

        ttsBegin;

        super();

        if (deleteLines)
        {
            delete_from lines;
        }

        bankPaymBalanceSurvey = BankPaymBalanceSurvey::find(surveyCodeRecId);
        [fromDate, toDate] = bankPaymBalanceSurvey.calcDateRange(transDate);

        surveyCalc = BankPaymBalanceSurveyCalc::newFromParameters(bankPaymBalanceSurvey.SurveyCalcType);
        surveyCalc.parmFromDate(fromDate);
        surveyCalc.parmToDate(toDate);
        surveyCalc.parmPaymBalanceSurveyCodeRecId(surveyCodeRecId);
        surveyCalc.parmReportDate(transDate);
        surveyCalc.calc();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// The unpack method unpacks the packed class.
    /// </summary>
    /// <param name="_packedClass">
    /// The _packClass parameter is container containing the current version and file name.
    /// </param>
    /// <returns>
    /// The unpack method returns true if the current version is correct. When the current version
    /// is incorrect, it will return false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Version version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (! surveyCodeRecId)
        {
            ret = checkFailed(strfmt("@SYS26332", "@SYS114635"));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TradeBLWILineTransfer construct()
    {
        return new TradeBLWILineTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The main method calls the construct method, prompts the dialog and runs the class contents.
    /// </summary>
    /// <param name="_args">
    /// The _args parameter contains the caller information.
    /// </param>
    public static void main (Args _args)
    {
        TradeBLWILineTransfer lineTransfer = TradeBLWILineTransfer::construct();

        if (lineTransfer.prompt())
        {
            lineTransfer.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>