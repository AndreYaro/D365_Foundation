<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlanData_Sched</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ReqPlanTypeFactoryAttribute(ReqPlanType::SchedPlan)]
public class ReqPlanData_Sched extends ReqPlanData
{
    ReqPlanSched reqPlanSched;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actionUpdReqDatePurch</Name>
				<Source><![CDATA[
    public NoYes actionUpdReqDatePurch()
    {
        return reqPlanSched.ActionUpdReqDatePurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bottleneckScheduling</Name>
				<Source><![CDATA[
    public SchedLimitBottleneck bottleneckScheduling()
    {
        return reqPlanSched.BottleneckScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>covCapLimited</Name>
				<Source><![CDATA[
    public NoYes covCapLimited()
    {
        return reqPlanSched.CovCapLimited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>covPropertyLimited</Name>
				<Source><![CDATA[
    public NoYes covPropertyLimited()
    {
        return reqPlanSched.CovPropertyLimited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>covSchedMethod</Name>
				<Source><![CDATA[
    public ProdSchedMethod covSchedMethod()
    {
        return reqPlanSched.CovSchedMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>covTimeFenceSchedBack</Name>
				<Source><![CDATA[
    public SchedTimeFenceBackSearchCap covTimeFenceSchedBack()
    {
        return reqPlanSched.CovTimeFenceSchedBack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doActionCalc</Name>
				<Source><![CDATA[
    public boolean doActionCalc()
    {
        if (reqPlanSched.TimeFenceActionFixed && reqPlanSched.TimeFenceAction <= 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAutoFirmPo</Name>
				<Source><![CDATA[
    public boolean doAutoFirmPo()
    {
        if (reqPlanSched.TimeFenceAuthorizationFixed && reqPlanSched.TimeFenceAuthorization <= 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFuturesCalc</Name>
				<Source><![CDATA[
    public boolean doFuturesCalc()
    {
        if (reqPlanSched.TimeFenceFuturesFixed && reqPlanSched.TimeFenceFutures <= 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>futuresSched</Name>
				<Source><![CDATA[
    public NoYes futuresSched()
    {
        return reqPlanSched.FuturesSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>futuresUpdReqDateKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether planned kanbans should be postponed to the futures date.
    /// </summary>
    /// <returns>
    ///    true if planned kanbans should be postponed to the futures date; otherwise, false.
    /// </returns>
    public NoYes futuresUpdReqDateKanban()
    {
        return reqPlanSched.PostponeKanbanToFutureDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>futuresUpdReqDatePurch</Name>
				<Source><![CDATA[
    public NoYes futuresUpdReqDatePurch()
    {
        return reqPlanSched.FuturesUpdReqDatePurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>futuresUpdReqDateTransfer</Name>
				<Source><![CDATA[
    public NoYes futuresUpdReqDateTransfer()
    {
        return reqPlanSched.FuturesUpdReqDateTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSchedulingInPastPrevented</Name>
				<Source><![CDATA[
    public NoYes isSchedulingInPastPrevented()
    {
        return reqPlanSched.PreventScheduleBeforeToday;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the object.
    /// </summary>
    /// <returns>
    ///    true if initialization succeeded; otherwise, false.
    /// </returns>
    public boolean init()
    {
        super();

        reqPlanSched = ReqPlanSched::find(reqPlanId);
        if (!reqPlanSched.RecId && reqParameters.RecId) // due to configuration problem
        {
            throw error(strFmt("@SYS25368",reqPlanId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginIssue</Name>
				<Source><![CDATA[
    public MarginIssue marginIssue(ReqSetupDim _setupDim)
    {
        return reqPlanSched.IssueMargin  + super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginOrder</Name>
				<Source><![CDATA[
    public MarginOrder marginOrder(ReqSetupDim _setupDim)
    {
        return reqPlanSched.OrderingMargin + super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginReceipt</Name>
				<Source><![CDATA[
    public MarginReceipt marginReceipt(ReqSetupDim _setupDim)
    {
        return reqPlanSched.ReceiptMargin + super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIncludePastDueContinuity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a <c>boolean</c> value indicating whether to include past due continuity forecast orders.
    /// </summary>
    /// <returns>
    ///     A <c>boolean</c> vlaue indicating whether or not to include past due continuity forecast orders.
    /// </returns>
    NoYes mcrIncludePastDueContinuity()
    {
        return ReqPlanSched.MCRIncludePastDueContinuity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPastDueContinuityDays</Name>
				<Source><![CDATA[
    int mcrPastDueContinuityDays()
    {
        return ReqPlanSched.MCRPastDueContinuityDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPlanVersionContinuity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the continuity plan that is to be used by the master plan.
    /// </summary>
    /// <returns>
    ///     The <c>RecId</c> for the continuity plan.
    /// </returns>
    public RecId mcrPlanVersionContinuity()
    {
        return reqPlan::findReqPlanId(reqPlan.MCRReqPlanIdContinuity).mcrGetReqPlanVersion().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrTimeFenceContinuityMasterPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the number of days beyond today that continuity lines
    ///     should be included.
    /// </summary>
    /// <param name="_setupDim">
    ///     The <c>ReqSetupDim</c> to check.
    /// </param>
    /// <returns>
    ///     The number of days beyond today that continuity lines should be included.
    /// </returns>
    public TimeFenceMasterPlan mcrTimeFenceContinuityMasterPlan(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.MCRTimeFenceContinuityPlanFixed)
            return reqPlanSched.MCRTimeFenceContinuityPlan;

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUseContinuityPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a <c>NoYes</c> indicating if the continuity plan is to be used.
    /// </summary>
    /// <returns>
    ///     A <c>NoYes</c> if the continuity plan is to be used.
    /// </returns>
    NoYes mcrUseContinuityPlan()
    {
        if (reqPlanSched.MCRTimeFenceContinuityPlanFixed && reqPlanSched.MCRTimeFenceContinuityPlan <= 0)
        {
            return false;
        }

        return reqPlanSched.MCRUseContinuityPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseLatestPossibleSupplyFirst</Name>
				<Source><![CDATA[
    public ReqMustUseLatestPossibleSupplyFirst mustUseLatestPossibleSupplyFirst(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.OnHandConsumptionStrategyFixed)
        {
            return reqPlanSched.MustUseLatestPossibleSupplyFirst;
        }

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHandConsumption</Name>
				<Source><![CDATA[
    public ReqOnHandConsumptionStrategy onHandConsumption(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.OnHandConsumptionStrategyFixed)
        {
            return reqPlanSched.OnHandConsumptionStrategy;
        }

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUseShelfLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if shelf life functionality is enabled for master plan.
    /// </summary>
    /// <returns>Shelf life flag.</returns>
    public boolean pdsUseShelfLife()
    {
        return #PdsShelfEnabled && reqPlanSched.PdsUseShelfLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quotationProbabilityId</Name>
				<Source><![CDATA[
    public smmQuotationProbabilityId quotationProbabilityId()
    {
        return reqPlanSched.SmmQuotationProbabilityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequenceLogId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number sequence record ID for the master planning log numbers.
    /// </summary>
    /// <returns>
    ///    A record ID that identifies the number sequence record for master planning log entries.
    /// </returns>
    public ReqSequenceJobRefRecId sequenceLogId()
    {
        return reqPlanSched.ReqPlanSequenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequencePlannedOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number sequence record ID for the planned orders number sequence.
    /// </summary>
    /// <returns>
    ///    The planned orders number sequence record ID .
    /// </returns>
    public ReqSequencePORefRecId sequencePlannedOrder()
    {
        return reqPlanSched.PlannedOrderSequenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceAction</Name>
				<Source><![CDATA[
    public Days timeFenceAction(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.TimeFenceActionFixed)
        {
            return reqPlanSched.TimeFenceAction;
        }

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceAuthorization</Name>
				<Source><![CDATA[
    public Days timeFenceAuthorization(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.TimeFenceAuthorizationFixed)
        {
            return reqPlanSched.TimeFenceAuthorization;
        }

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceBackRequisition</Name>
				<Source><![CDATA[
    public TimeFenceBackRequisition timeFenceBackRequisition(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.TimeFenceBackRequisitionFixed)
        {
            return reqPlanSched.TimeFenceBackRequisition;
        }

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceBottleneckCap</Name>
				<Source><![CDATA[
    public SchedTimeFenceBottleneckCap timeFenceBottleneckCap(ReqSetupDim _setupDim)
    {
        if (!reqPlanSched.BottleneckScheduling)
        {
            return 0;
        }

        if (this.timeFenceCapacity(_setupDim) == 0)
        {
            return 0;
        }

        return reqPlanSched.TimeFenceBottleneckCap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceCapacity</Name>
				<Source><![CDATA[
    public TimeFenceCapacity timeFenceCapacity(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.TimeFenceCapacityFixed)
        {
            return reqPlanSched.TimeFenceCapacity;
        }

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceCoverage</Name>
				<Source><![CDATA[
    public TimeFenceCoverage timeFenceCoverage(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.TimeFenceCovFixed)
        {
            return reqPlanSched.TimeFenceCov;
        }

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceExplosion</Name>
				<Source><![CDATA[
    public TimeFenceExplosion timeFenceExplosion(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.TimeFenceExplosionFixed)
        {
            return reqPlanSched.TimeFenceExplosion;
        }

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceFiniteCap</Name>
				<Source><![CDATA[
    public SchedTimeFenceFiniteCap timeFenceFiniteCap(ReqSetupDim _setupDim)
    {
        if (this.timeFenceCapacity(_setupDim) == 0)
        {
            return 0;
        }

        if (reqPlanSched.CovCapLimited)
        {
            if (reqPlanSched.TimeFenceFiniteCap > this.timeFenceCapacity(_setupDim))
            {
                return this.timeFenceCapacity(_setupDim);
            }

            return reqPlanSched.TimeFenceFiniteCap;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceMaxNegativeDaysFixed</Name>
				<Source><![CDATA[
    public NoYes timeFenceMaxNegativeDaysFixed()
    {
        return reqPlanSched.TimeFenceMaxNegativeDaysFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceMaxNegativeDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the maximum number of negative days time fence.
    /// </summary>
    /// <returns>
    ///    An integer that specifies some days to determine the period in which the supply can be used for demand.
    /// </returns>
    /// <remarks>
    ///    During master planning, avoid creating new supply orders
    ///    if existing supply will be able to cover the demand after the number of negative days.
    /// </remarks>
    public ReqMaxNegativeDays timeFenceMaxNegativeDays()
    {
        return reqPlanSched.TimeFenceMaxNegativeDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the forecast time fence for a specific item and coverage dimensions.
    /// </summary>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory
    ///    dimensions.
    /// </param>
    /// <returns>
    ///    An integer that contains several days that determines the period in which forecast is included.
    /// </returns>
    public TimeFenceMasterPlan timeFenceForecast(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.TimeFenceMasterPlanFixed)
        {
            return reqPlanSched.TimeFenceMasterPlan;
        }

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceFutures</Name>
				<Source><![CDATA[
    public TimeFenceFutures timeFenceFutures(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.TimeFenceFuturesFixed)
        {
            return reqPlanSched.TimeFenceFutures;
        }

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceLocking</Name>
				<Source><![CDATA[
    public TimeFenceLocking timeFenceLocking(ReqSetupDim _setupDim)
    {
        if (reqPlanSched.TimeFenceLockingFixed)
        {
            return reqPlanSched.TimeFenceLocking;
        }

        return super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useForecastDemand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the demand forecast should be included in the requirement profile.
    /// </summary>
    /// <returns>
    ///    true if the demand forecast should be included; otherwise, false.
    /// </returns>
    public NoYes useForecastDemand()
    {
        if (   reqPlanSched.TimeFenceMasterPlanFixed
            && reqPlanSched.TimeFenceMasterPlan <= 0)
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useForecastSupply</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the supply forecast should be included in the requirement profile.
    /// </summary>
    /// <returns>
    ///    true if the supply forecast should be included; otherwise, false.
    /// </returns>
    public NoYes useForecastSupply()
    {
        if (   reqPlanSched.TimeFenceMasterPlanFixed
            && reqPlanSched.TimeFenceMasterPlan <= 0)
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useInventOnHands</Name>
				<Source><![CDATA[
    public NoYes useInventOnHands()
    {
        return reqPlanSched.UseInventOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLockingTimeFence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a freeze time fence is used.
    /// </summary>
    /// <returns>
    ///    true if a freeze time fence is used; otherwise, false.
    /// </returns>
    public boolean useLockingTimeFence()
    {
        ReqGroup        reqGroup;
        ReqItemTable    reqItemTable;
        boolean         result;

        // plan
        if (reqPlanSched.TimeFenceLockingFixed)
        {
            result = reqPlanSched.TimeFenceLocking > 0;
        }
        else
        {
            // coverage group
            select firstonly RecId from reqGroup
                where reqGroup.LockingTimeFence > 0;

            result = reqGroup.RecId != 0;

            if (!result)
            {
                // item coverage
                select firstonly RecId from reqItemTable
                    where reqItemTable.LockingTimeFence      >  0
                       && reqItemTable.TimeFenceFieldsActive == NoYes::Yes;

                result = reqItemTable.RecId != 0;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useMovements</Name>
				<Source><![CDATA[
    public NoYes useMovements()
    {
        return reqPlanSched.UseMovements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useQuotations</Name>
				<Source><![CDATA[
    public NoYes useQuotations()
    {
        return reqPlanSched.UseQuotations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useRequestsForQuote</Name>
				<Source><![CDATA[
    public NoYes useRequestsForQuote()
    {
        return reqPlanSched.UseRequestsForQuote;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>