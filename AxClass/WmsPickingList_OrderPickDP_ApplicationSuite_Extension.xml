<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsPickingList_OrderPickDP_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(WmsPickingList_OrderPickDP))]
public final class WmsPickingList_OrderPickDP_ApplicationSuite_Extension
{
    public DocuRefSearch docuRefSearchMain_IT;
    public DocuRefSearch docuRefSearch_IT;
    public Notes notesMain_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initQueryWMSOrderTransPublic_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for report execution.
    /// </summary>
    /// <returns>The <c>Query</c> object.</returns>
    public Query initQueryWMSOrderTransPublic_IT()
    {
        Range range;
        range = queryRangeConcat(range, (showRegistered ? queryValue(WMSExpeditionStatus::Registered) : SysQuery::valueNot(WMSExpeditionStatus::Registered)));
        range = queryRangeConcat(range, (showActivated ? queryValue(WMSExpeditionStatus::Activated) : SysQuery::valueNot(WMSExpeditionStatus::Activated)));
        range = queryRangeConcat(range, (showStarted ? queryValue(WMSExpeditionStatus::Started) : SysQuery::valueNot(WMSExpeditionStatus::Started)));
        range = queryRangeConcat(range, (showPicked ? queryValue(WMSExpeditionStatus::Picked) : SysQuery::valueNot(WMSExpeditionStatus::Picked)));
        range = queryRangeConcat(range, (showStaged ? queryValue(WMSExpeditionStatus::Staged) : SysQuery::valueNot(WMSExpeditionStatus::Staged)));
        range = queryRangeConcat(range, (showLoaded ? queryValue(WMSExpeditionStatus::Loaded) : SysQuery::valueNot(WMSExpeditionStatus::Loaded)));
        range = queryRangeConcat(range, (showCanceled ? queryValue(WMSExpeditionStatus::Cancelled) : SysQuery::valueNot(WMSExpeditionStatus::Cancelled)));
        range = queryRangeConcat(range, (showCompleted ? queryValue(WMSExpeditionStatus::Complete) : SysQuery::valueNot(WMSExpeditionStatus::Complete)));

        Query queryWMSOrderTrans = new Query();
        QueryBuildDataSource qbds = queryWMSOrderTrans.addDataSource(tableNum(WMSOrderTrans));
        WMSOrderTrans::queryAddSortDefault(qbds);
        QueryBuildRange qbr_status = qbds.addRange(fieldNum(WMSOrderTrans,ExpeditionStatus));
        qbr_status.value(range);

        return queryWMSOrderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic and inserts data to in the temporary table.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        next processReport();

        if (!SalesPickingListUpdateTransNotes_ITFlight::instance().isEnabled())
        {
            WmsPickingList_OrderPickContract rdpContract = this.parmDataContract() as WmsPickingList_OrderPickContract;

            if (rdpContract)
            {
                RefRecId wmsPickingRouteTmpRecId = rdpContract.parmPickingRouteId();

                if (wmsPickingRouteTmpRecId)
                {
                    SRSTmpDataStore srsTmpDataStore;

                    select firstonly Value from srsTmpDataStore
                        where srsTmpDataStore.RecId == wmsPickingRouteTmpRecId;

                    if (srsTmpDataStore.RecId)
                    {
                        con2Buf(srsTmpDataStore.Value, wmsPickingRoute);
                    }
                }
            }

            QueryRun queryRunWMSOrderTrans = new QueryRun(this.initQueryWMSOrderTransPublic_IT());

            qbr_routeId = queryRunWMSOrderTrans.query().dataSourceTable(tableNum(WMSOrderTrans)).addRange(fieldNum(WMSOrderTrans,RouteId));
            queryRunWMSOrderTrans.reset();
            qbr_routeId.value(queryValue(this.wmsPickingRoute.PickingRouteID));

            SalesTable refSalesHeader;
            SalesLine salesLine;

            while (queryRunWMSOrderTrans.next())
            {
                refSalesHeader.clear();
                salesLine.clear();
                
                WmsOrderTrans wmsOrderTrans = queryRunWMSOrderTrans.get(tableNum(WMSOrderTrans));

                // Moves the logic of initialization note to the <c>initPickingListOrderPickTmp<c> method.
                if (this.needInitHeaderMainNotes()
                    && wmsPickingList_OrderPickTmp)
                {
                    select firstonly refSalesHeader
                        where refSalesHeader.SalesId == wmsPickingRoute.TransRefId;
                    this.initHeaderMainNotes(wmsPickingList_OrderPickTmp, refSalesHeader);
                }

                // Moves the logic of initialization note to the <c>initPickingListOrderPickTmp<c> method.
                if (this.needInitLineNotes(wmsOrderTrans))
                {
                    salesLine = SalesLine::findInventTransId(wmsOrderTrans.InventTransId);
                    this.initLineNotes(wmsPickingList_OrderPickTmp, wmsOrderTrans, salesLine);
                }

                if ((refSalesHeader || salesLine) && wmsPickingList_OrderPickTmp)
                {
                    ttsbegin;
                    wmsPickingList_OrderPickTmp.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPickingListOrderPickTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales packing list line.
    /// </summary>
    /// <param name = "_pickingListOrderPickTmp">
    /// A <c>WMSPickingList_OrderPickTmp</c> record which is the sales packing list line.
    /// </param>
    /// <param name = "_orderTrans">
    /// A <c>WMSOrderTrans</c> record.
    /// </param>
    protected void initPickingListOrderPickTmp(WMSPickingList_OrderPickTmp _pickingListOrderPickTmp, WMSOrderTrans _orderTrans)
    {
        next initPickingListOrderPickTmp(_pickingListOrderPickTmp, _orderTrans);

        if (SalesPickingListUpdateTransNotes_ITFlight::instance().isEnabled())
        {
            if (this.needInitHeaderMainNotes())
            {
                SalesTable salesTable = SalesTable::find(wmsPickingRoute.TransRefId);
                this.initHeaderMainNotes(wmsPickingList_OrderPickTmp, salesTable);
            }

            if (this.needInitLineNotes(_orderTrans))
            {
                SalesLine salesLine = SalesLine::findInventTransId(_orderTrans.InventTransId);
                this.initLineNotes(_pickingListOrderPickTmp, _orderTrans, salesLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needInitHeaderMainNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the header initialization is needed.
    /// </summary>
    /// <returns>
    /// true if the header initialization is needed; otherwise false.
    /// </returns>
    private boolean needInitHeaderMainNotes()
    {
        return (conFind(FreeNotesOnDocumentsConstants::DocuOnFormularAllHead, custFormletterDocument.DocuOnPickingList)
                && wmsPickingRoute.TransRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderMainNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales packing list header main notes.
    /// </summary>
    /// <param name = "_pickingListOrderPickTmp">
    /// A <c>WMSPickingList_OrderPickTmp</c> record which is the sales packing list line.
    /// </param>
    /// <param name = "_salesTable">
    /// A <c>SalesTable</c> record.
    /// </param>
    private void initHeaderMainNotes(
        WMSPickingList_OrderPickTmp _pickingListOrderPickTmp,
        SalesTable _salesTable)
    {
        if (_salesTable)
        {
            docuRefSearchMain_IT = DocuRefSearch::newTypeIdAndRestriction(
                _salesTable,
                custFormletterDocument.DocuTypePickingList,
                DocuRestriction::Internal);

            notesMain_IT = Docu::concatDocuRefNotes(docuRefSearchMain_IT);

            if (InventAddFreeNoteOnPickingListFlight::instance().isEnabled())
            {
                DocuRefSearch docuRefSearchMain_PickingList_IT;
                Notes notesMain_PickingList_IT;

                docuRefSearchMain_PickingList_IT = DocuRefSearch::newTypeIdAndRestriction(
                    wmsPickingRoute,
                    custFormletterDocument.DocuTypePickingList,
                    DocuRestriction::External);

                notesMain_PickingList_IT = Docu::concatDocuRefNotes(docuRefSearchMain_PickingList_IT);

                if (notesMain_PickingList_IT)
                {
                    if (notesMain_IT)
                    {
                        notesMain_IT += '\n' + notesMain_PickingList_IT;
                    }
                    else
                    {
                        notesMain_IT = notesMain_PickingList_IT;
                    }
                }
            }

            if (notesMain_IT)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00041, funcName());
            }

            _pickingListOrderPickTmp.MainNotes = notesMain_IT;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needInitLineNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line initialization is needed.
    /// </summary>
    /// <param name = "_orderTrans">
    /// A <c>WMSOrderTrans</c> record.
    /// </param>
    /// <returns>
    /// true if the line initialization is needed; otherwise false.
    /// </returns>
    private boolean needInitLineNotes(WMSOrderTrans _orderTrans)
    {
        return (conFind(FreeNotesOnDocumentsConstants::DocuOnFormularAllLine, custFormletterDocument.DocuOnPickingList)
                && _orderTrans.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales packing list line notes.
    /// </summary>
    /// <param name = "_pickingListOrderPickTmp">
    /// A <c>WMSPickingList_OrderPickTmp</c> record which is the sales packing list line.
    /// </param>
    /// <param name = "_orderTrans">
    /// A <c>WMSOrderTrans</c> record.
    /// </param>
    /// <param name = "_salesLine">
    /// A <c>SalesLine</c> record.
    /// </param>
    private void initLineNotes(
        WMSPickingList_OrderPickTmp _pickingListOrderPickTmp, 
        WMSOrderTrans _orderTrans,
        SalesLine _salesLine)
    {
        if (_salesLine)
        {
            docuRefSearch_IT = DocuRefSearch::newTypeIdAndRestriction(
                _salesLine,
                custFormletterDocument.DocuTypePickingList,
                DocuRestriction::Internal);

            Notes notes_IT;
            notes_IT = Docu::concatDocuRefNotes(docuRefSearch_IT);

            if (InventAddFreeNoteOnPickingListFlight::instance().isEnabled())
            {
                DocuRefSearch docuRefSearch_PickingList_IT;
                Notes notes_PickingList_IT;

                docuRefSearch_PickingList_IT = DocuRefSearch::newTypeIdAndRestriction(
                    _orderTrans,
                    custFormletterDocument.DocuTypePickingList,
                    DocuRestriction::External);

                notes_PickingList_IT = Docu::concatDocuRefNotes(docuRefSearch_PickingList_IT);

                if (notes_PickingList_IT)
                {
                    if (notes_IT)
                    {
                        notes_IT += '\n' + notes_PickingList_IT;
                    }
                    else
                    {
                        notes_IT = notes_PickingList_IT;
                    }
                }
            }

            if (docuRefSearch_IT)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00041, funcName());
            }
            _pickingListOrderPickTmp.Notes = notes_IT;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>