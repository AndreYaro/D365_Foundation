<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerMatrixReportWithDimContract_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for <c>LedgerAccountBalSheetByDim</c> SSRS report.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(LedgerMatrixReportWithDimUIBuilder_CN), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
class LedgerMatrixReportWithDimContract_CN implements SysOperationValidatable, SrsReportRowCountable_CN
{
    LedgerMatrixId_CN       ledgerMatrixId;
    Name                    dimensionAttribute;
    DimensionValue          fromDimensionValue;
    DimensionValue          toDimensionValue;
    FromDate                fromDate;
    toDate                  toDate;
    CurrentOperationsTax    postingLayer;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRowsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rows count of the report primary query's result by data contract parameters.
    /// </summary>
    /// <param name="_query">
    /// Primary query
    /// </param>
    /// <returns>
    /// A <c>Container</c> with first element being rows count and second element being a message that may be shown.
    /// </returns>
    public container getRowsCount(Query _query)
    {
        Query           query;
        int             rowsCount;
        SRSMaxRow_CN    maxRows = SystemParameters::find().SRSMaxRow_CN;

        if (_query && _query.name() == queryStr(LedgerMatrixReportWithDim_CN))
        {
            query = _query;
        }
        else
        {
            query = new Query(queryStr(LedgerMatrixReportWithDim_CN));
        }

        query = LedgerMatrixReportWithDimDP_CN::initQueryByDataContract(query, this);
        rowsCount = QueryRun::getQueryRowCount(query, maxRows + 1);

        //The output rows is over the allowed maximum rows of SSRS reports, please increase the value in the System parameters and run the report again.
        return [rowsCount, "@GLS220075"];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter DimensionType.
    /// </summary>
    /// <param name="_dimensionAttribute">
    /// The new value of the datacontract parameter DimensionType;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter DimensionType.
    /// </returns>
    [
        DataMemberAttribute('DimensionAttribute'),
        SysOperationLabelAttribute(literalStr("@SYS24410")),
        SysOperationDisplayOrderAttribute('5')
    ]
    public Name parmDimensionAttribute(Name _dimensionAttribute = dimensionAttribute)
    {
        dimensionAttribute = _dimensionAttribute;
        return dimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Period.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Period.
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromDimension.
    /// </summary>
    /// <param name="_fromDimensionValue">
    /// The new value of the datacontract parameter FromDimension;
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter FromDimension.
    /// </returns>
    [
        DataMemberAttribute('FromDimensionValue'),
        SysOperationLabelAttribute(literalStr("@SYS105870")),
        SysOperationDisplayOrderAttribute('2')
    ]
    public DimensionValue parmFromDimensionValue(DimensionValue _fromDimensionValue = fromDimensionValue)
    {
        fromDimensionValue = _fromDimensionValue;
        return fromDimensionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerMatrixId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter AccountMatrix.
    /// </summary>
    /// <param name="_ledgerMatrixId">
    /// The new value of Account matrix
    /// </param>
    /// <returns>
    ///  The current value of Account matrix.
    /// </returns>
    [
        DataMemberAttribute('LedgerMatrixId'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public LedgerMatrixId_CN parmLedgerMatrixId(LedgerMatrixId_CN _ledgerMatrixId = ledgerMatrixId)
    {
        ledgerMatrixId = _ledgerMatrixId;
        return ledgerMatrixId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Posting layer.
    /// </summary>
    /// <param name="_postingLayer">
    /// The new value of the datacontract parameter Posting layer;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Posting layer.
    /// </returns>
    [
        DataMemberAttribute('PostingLayer'),
        SysOperationDisplayOrderAttribute('4'),
        SysOperationLabelAttribute(literalstr("@SYS334157"))
    ]
    public CurrentOperationsTax parmPostingLayer(CurrentOperationsTax _postingLayer = postingLayer)
    {
        postingLayer = _postingLayer;
        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ToDate.
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationDisplayOrderAttribute('7')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter To Dimension value.
    /// </summary>
    /// <param name="_toDimensionValue">
    /// The new value of the datacontract parameter To Dimension value;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter To Dimension value.
    /// </returns>
    [
        DataMemberAttribute('ToDimensionValue'),
        SysOperationLabelAttribute(literalStr("@SYS103530")),
        SysOperationDisplayOrderAttribute('6')
    ]
    public DimensionValue parmToDimensionValue(DimensionValue _toDimensionValue = toDimensionValue)
    {
        toDimensionValue = _toDimensionValue;
        return toDimensionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the SSRS report parameters are valid.
    /// </summary>
    /// <returns>
    /// true if the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (!this.parmLedgerMatrixId())
        {
            //Account matrix must be entered .
            ret = checkFailed(strFmt("@SYS39376", "@GLS64323"));
        }

        if (ret && !this.parmDimensionAttribute())
        {
            //Dimension type must be entered
            ret = checkFailed(strFmt("@SYS39376", "@SYS24410"));
        }
        if (ret && this.parmFromDimensionValue() && this.parmToDimensionValue() && this.parmFromDimensionValue() > this.parmToDimensionValue())
        {
            //From Dimension should not be greater than To Dimension
            ret = checkFailed("@GLS160269");
        }
        if (ret && !this.parmFromDate())
        {
            //From date must be entered
            ret = checkFailed(strFmt("@SYS39376", "@SYS24050"));
        }
        if (ret && !this.parmToDate())
        {
            //To date must be entered
            ret = checkFailed(strFmt("@SYS39376", "@SYS36680"));
        }
        if (ret && this.parmFromDate() > this.parmToDate())
        {
            //From date must be before To date
            ret = checkFailed("@SYS91020");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>