<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomerInsightsServiceClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections.Generic;
using System.Net.Http;
using Microsoft.Dynamics.ApplicationPlatform.Environment;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Microsoft.Dynamics.Commerce.Proxies.CustomerInsightsConnector;

/// <summary>
/// The <c>CustomerInsightsServiceClient</c> class is used to read metadata from Customer Insights Service for the integration in clienteling feature.
/// </summary>
internal class CustomerInsightsServiceClient
{
    private Microsoft.Dynamics.Commerce.Proxies.CustomerInsightsConnector.CustomerInsightsServiceConnector connector;
    private str authorityUrl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <see cref="CustomerInsightsServiceClient"/> class.
    /// </summary>
    /// <param name = "_clientAppId">Microsoft Entra ID client ID used to authenticate to Key Vault</param>
    /// <param name = "_clientAppSecret">Microsoft Entra ID client secret used to authenticate to Key Vault</param>
    public void new(str _clientAppId, str _clientAppSecret)
    {
        str tenantId = RetailUtils::getTenantId();
        str authorityUrlPrefix = CustomerInsightsServiceClient::GetAadAuthorityUrlPrefix();

        this.authorityUrl = authorityUrlPrefix + '/' + tenantId;
        this.connector = new  Microsoft.Dynamics.Commerce.Proxies.CustomerInsightsConnector.CustomerInsightsServiceConnector(_clientAppId, _clientAppSecret, this.authorityUrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAuthorityUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the authority Url.
    /// </summary>
    /// <returns>The authority Url</returns>
    public str GetAuthorityUrl()
    {
        return this.authorityUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TestCustomerInsightsConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test Customer Insights connection with the application credentials.
    /// </summary>
    /// <returns>The value indicates whether the connection is successful</returns>
    public boolean TestCustomerInsightsConnection()
    {
        System.Exception ex;
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

        try
        {
            this.GetAllEnvironments();
            return true;
        }
        catch (Exception::CLRError)
        {
            ex = ClrInterop::getLastException();
            if (ex != null)
            {
                ex = ex.get_InnerException();
                if (ex != null)
                {
                    error(ex.Message);
                    eventSource.EventWriteTestCustomerInsightsConnectionFailed(ex.ToString());
                }
            }

            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAllEnvironments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Customer Insights environment list.
    /// </summary>
    /// <returns>The environment list.</returns>
    public System.Collections.IEnumerable GetAllEnvironments()
    {
        return this.connector.GetAllEnvironments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAllEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Customer Insights mapping entity field name list
    /// </summary>
    /// <param name = "instanceId">The instance Id</param>
    /// <returns>The entity field name list</returns>
    public  System.Collections.IEnumerable GetAllEntities(str instanceId)
    {
        return this.connector.GetAllEntities(instanceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetCustomerMeasurementNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Customer Insights measurement name list
    /// </summary>
    /// <param name = "instanceId">The instance Id</param>
    /// <returns>The entity field name list</returns>
    public  System.Collections.IEnumerable GetCustomerMeasurementNames(str instanceId)
    {
        return this.connector.GetCustomerMeasurementNames(instanceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>VerifyConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test Customer Insights connection with the application credential.
    /// </summary>
    /// <returns>The value indicates whether the connection is successful</returns>
    /// <param name = "applicationId">Microsoft Entra ID client ID used to authenticate to Key Vault.</param>
    /// <param name = "applicationSecretName">Microsoft Entra ID client secret name used to authenticate to Key Vault.</param>
    /// <returns>Returns true if connection succeeded.</returns>
    public static boolean VerifyConnection(str applicationId, str applicationSecretName)
    {
        boolean returnResult = false;

        if (strLen(applicationId) > 0 && strLen(applicationSecretName) > 0)
        {
            var customerInsightClient = CustomerInsightsServiceClient::GetClientInstance(applicationId, applicationSecretName);
            returnResult = customerInsightClient.TestCustomerInsightsConnection();
        }

        return returnResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetClientInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Customer Insights client with the application credential.
    /// </summary>
    /// <param name = "applicationId">Microsoft Entra ID client ID used to authenticate to Key Vault.</param>
    /// <param name = "applicationSecretName">Microsoft Entra ID client secret name used to authenticate to Key Vault.</param>
    /// <returns>Instance of CustomerInsightsServiceClient.</returns>
    public static CustomerInsightsServiceClient GetClientInstance(str applicationId, str applicationSecretName)
    {
        container secretResult = RetailTransactionServiceSecretProvider::getSecretValue(applicationSecretName);
        boolean isSecretReadSuccess = conPeek(secretResult, 1);

        if (!isSecretReadSuccess)
        {
            Error("@Retail:CustomerInsightsErrorFailedToReadSecret");

            return null;
        }

        str secret = conPeek(secretResult, 3);
        CustomerInsightsServiceClient customerInsightClient = new CustomerInsightsServiceClient(applicationId, secret);

        return customerInsightClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetEnvironmentInstanceIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an input control lookup for environment instance id selection.
    /// </summary>
    /// <param name = "control">Control instance.</param>
    /// <param name = "applicationId">Microsoft Entra ID client ID used to authenticate to Key Vault.</param>
    /// <param name = "applicationSecretName">Microsoft Entra ID client secret name used to authenticate to Key Vault.</param>
    /// <param name = "environmentInstanceId">Custoemr insights environment instance id.</param>
    public static void GetEnvironmentInstanceIdLookup(FormControl control, str applicationId, str applicationSecretName)
    {
        CustomerInsightsServiceClient customerInsightClient;
        TmpRetailClientelingParametersLookup tempRetailClientelingParameters;
        Query query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildRange queryBuildRange;
        SysTableLookup sysTableLookup;
        const int maxLength = 20;

        if (strLen(applicationId) > 0 && strLen(applicationSecretName) > 0)
        {
            // Call service to get a list of names
            customerInsightClient = CustomerInsightsServiceClient::GetClientInstance(applicationId, applicationSecretName);
            System.Collections.IEnumerable items = customerInsightClient.GetAllEnvironments();

            if (items != null)
            {
                var enumerator = items.getEnumerator();
                int counter = 0;

                // Populate temp table.
                while (enumerator.MoveNext() && counter < maxLength)
                {
                    Microsoft.Dynamics.Commerce.Proxies.CustomerInsightsConnector.Environment currentItem = enumerator.get_Current();
                    tempRetailClientelingParameters.CustomerInsightsEnvironmentName = currentItem.get_Name();
                    tempRetailClientelingParameters.CustomerInsightsInstanceId = currentItem.get_InstanceId();
                    tempRetailClientelingParameters.doInsert();

                    counter++;
                }
            }
            else
            {
                throw Global::error('control, applicationId and applicationSecretName are required');
            }

            qbds = query.addDataSource(tablenum(TmpRetailClientelingParametersLookup));
            qbds.addSortField(fieldnum(TmpRetailClientelingParametersLookup, CustomerInsightsEnvironmentName));

            // Create lookup.
            sysTableLookup = SysTableLookup::newParameters(tablenum(TmpRetailClientelingParametersLookup), control);
            sysTableLookup.addLookupfield(fieldnum(TmpRetailClientelingParametersLookup, CustomerInsightsInstanceId), true);
            sysTableLookup.addLookupfield(fieldnum(TmpRetailClientelingParametersLookup, CustomerInsightsEnvironmentName));
            sysTableLookup.parmQuery(query);

            sysTableLookup.parmTmpBuffer(tempRetailClientelingParameters);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetMappingEntityFieldNameLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an input control lookup for field name selection.
    /// </summary>
    /// <param name = "control">Control instance.</param>
    /// <param name = "applicationId">Microsoft Entra ID client ID used to authenticate to Key Vault.</param>
    /// <param name = "applicationSecretName">Microsoft Entra ID client secret name used to authenticate to Key Vault.</param>
    /// <param name = "environmentInstanceId">Custoemr insights environment instance id.</param>
    public static void GetMappingEntityFieldNameLookup(FormControl control, str applicationId, str applicationSecretName, str environmentInstanceId)
    {
        CustomerInsightsServiceClient customerInsightClient;
        TmpRetailClientelingParametersLookup tempRetailClientelingParameters;
        Query query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildRange queryBuildRange;
        SysTableLookup sysTableLookup;
        const int maxLength = 30;

        if (strLen(applicationId) > 0 && strLen(applicationSecretName) > 0 && strLen(environmentInstanceId) > 0)
        {
            // Call service to get a list of names
            customerInsightClient = CustomerInsightsServiceClient::GetClientInstance(applicationId, applicationSecretName);
            System.Collections.IEnumerable items = customerInsightClient.GetAllEntities(environmentInstanceId);

            if (items != null)
            {
                var enumerator = items.getEnumerator();
                int counter = 0;

                // Populate temp table.
                while (enumerator.MoveNext() && counter < maxLength)
                {
                    Microsoft.Dynamics.Commerce.Proxies.CustomerInsightsConnector.Entity currentItem = enumerator.get_Current();

                    var attributes = currentItem.get_Attributes();
                    var attributesEnumerator = attributes.getEnumerator();

                    if (attributesEnumerator != null)
                    {
                        while (attributesEnumerator.MoveNext() && counter < maxLength)
                        {
                            Microsoft.Dynamics.Commerce.Proxies.CustomerInsightsConnector.Attribute currentAttribute = attributesEnumerator.get_Current();
                            str attributeName = currentAttribute.get_Name();

                            if (!strEndsWith(attributeName, 'ACCOUNTNUMBER'))
                            {
                                continue;
                            }

                            tempRetailClientelingParameters.CustomerInsightsAttribute =
                            strFmt("%1_%2", currentItem.get_QualifiedEntityName(), attributeName);
                            tempRetailClientelingParameters.doInsert();

                            counter++;
                        }
                    }
                }
            }
            else
            {
                throw Global::error('control, applicationId, applicationSecretName and environmentInstanceId are required');
            }

            // Create lookup.
            sysTableLookup = SysTableLookup::newParameters(tablenum(TmpRetailClientelingParametersLookup), control);
            sysTableLookup.addLookupfield(fieldnum(TmpRetailClientelingParametersLookup, CustomerInsightsAttribute), true);

            qbds = query.addDataSource(tablenum(TmpRetailClientelingParametersLookup));
            qbds.addSortField(fieldnum(TmpRetailClientelingParametersLookup, CustomerInsightsAttribute));
            sysTableLookup.parmTmpBuffer(tempRetailClientelingParameters);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetMeasurmentsNameLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an input control lookup for field name selection.
    /// </summary>
    /// <param name = "control">Control instance.</param>
    /// <param name = "applicationId">Microsoft Entra ID client ID used to authenticate to Key Vault.</param>
    /// <param name = "applicationSecretName">Microsoft Entra ID client secret name used to authenticate to Key Vault.</param>
    /// <param name = "environmentInstanceId">Custoemr insights environment instance id.</param>
    public static void GetMeasurmentsNameLookup(FormControl control, str applicationId, str applicationSecretName, str environmentInstanceId)
    {
        CustomerInsightsServiceClient customerInsightClient;
        TmpRetailClientelingParametersLookup tempRetailClientelingParameters;
        Query query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildRange queryBuildRange;
        SysTableLookup sysTableLookup;
        const int maxLength = 50;

        if (strLen(applicationId) > 0 && strLen(applicationSecretName) > 0 && strLen(environmentInstanceId) > 0)
        {
            // Call service to get a list of names
            customerInsightClient = CustomerInsightsServiceClient::GetClientInstance(applicationId, applicationSecretName);
            System.Collections.IEnumerable items = customerInsightClient.GetCustomerMeasurementNames(environmentInstanceId);

            if (items != null)
            {
                var enumerator = items.getEnumerator();
                int counter = 0;

                // Populate temp table.
                while (enumerator.MoveNext() && counter < maxLength)
                {
                    str currentAttribute = enumerator.get_Current();

                    tempRetailClientelingParameters.CustomerInsightsAttribute = currentAttribute;
                    tempRetailClientelingParameters.doInsert();

                    counter++;
                }
            }

            // Create lookup.
            sysTableLookup = SysTableLookup::newParameters(tablenum(TmpRetailClientelingParametersLookup), control);
            sysTableLookup.addLookupfield(fieldnum(TmpRetailClientelingParametersLookup, CustomerInsightsAttribute), true);

            qbds = query.addDataSource(tablenum(TmpRetailClientelingParametersLookup));
            qbds.addSortField(fieldnum(TmpRetailClientelingParametersLookup, CustomerInsightsAttribute));
            sysTableLookup.parmTmpBuffer(tempRetailClientelingParameters);
            sysTableLookup.performFormLookup();
        }
        else
        {
            throw Global::error('control, applicationId, applicationSecretName and environmentInstanceId are required');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAadAuthorityUrlPrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Microsoft Entra ID Authority URL. E.g.: "https://login.partner.microsoftonline.cn"
    /// </summary>
    /// <returns>The Microsoft Entra ID authority URL.</returns>
    private static str GetAadAuthorityUrlPrefix()
    {
        // get environment components
        IApplicationEnvironment environment = EnvironmentFactory::GetApplicationEnvironment();
        var addEnvironment = environment.Aad;

        var aadInstance = addEnvironment.AADLoginWsfedEndpointFormat;
        aadInstance = aadInstance.Substring(0, aadInstance.IndexOf("/{0}"));
        return aadInstance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>