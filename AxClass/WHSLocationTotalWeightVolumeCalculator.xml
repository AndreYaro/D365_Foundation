<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationTotalWeightVolumeCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLocationTotalWeightVolumeCalculator</c> class calculates total weight and volume for a location by given units.
/// </summary>
/// <remarks>
/// Total weight and volume include inventory in the location, created work to put to the location, and work to put to the location in the process of being created.
/// </remarks>
public class WHSLocationTotalWeightVolumeCalculator
{
    WMSLocation             location;
    UnitOfMeasureSymbol     requestedUnits;
    boolean                 includeOnHand;
    boolean                 includeWorkBeingCreated;
    boolean                 includeUnprocessedPutWork;
    WHSContainerTypeCode    containerType;

    Weight  totalWeight;
    Volume  totalVolume;

    boolean calculationComplete;

    EcoResReleasedProductUnitConverter  unitConverter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addWeightVolumeToTotals</Name>
				<Source><![CDATA[
    private void addWeightVolumeToTotals(
        Weight               _itemWeight,
        Volume               _itemVolume,
        Set                  _countedLicensePlates,
        WHSLicensePlateId    _licensePlateId,
        WHSContainerTypeCode _containerTypeCode = _licensePlateId ? WHSLicensePlate::find(_licensePlateId).ContainerTypeCode : '')
    {
        totalWeight += _itemWeight;

        if (_containerTypeCode
        && !_countedLicensePlates.in(_licensePlateId))
        {
            _countedLicensePlates.add(_licensePlateId);

            WHSContainerType containerTypeLocal = WHSContainerType::find(_containerTypeCode);

            totalWeight += containerTypeLocal.TareWeight;

            // If container is flexible, must add current item volume and the volume of the container
            if (containerTypeLocal.FlexibleVolumeDimensions)
            {
                totalVolume += _itemVolume;
            }

            totalVolume += containerTypeLocal.ContainerVolume;
        }
        // If we have a container type in the set already, the container must be flexible since flexible containers are defined by the volume of their items.
        else if (!_containerTypeCode
             ||  (_containerTypeCode
             &&   WHSContainerType::find(_containerTypeCode).FlexibleVolumeDimensions))
        {
            totalVolume += _itemVolume;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightAndVolumeForInventHandlingQty</Name>
				<Source><![CDATA[
    private container weightAndVolumeForInventHandlingQty(ItemId _itemId, InventDimId _inventDimId, InventHandlingQty _inventHandlingQty)
    {
        UnitOfMeasureSymbol inventHandlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);
        UnitOfMeasureSymbol physicalDimUnitId = requestedUnits ? requestedUnits : inventHandlingUnitId;
        InventHandlingQty qtyInPhysicalDimUnits = this.convert(_inventHandlingQty, inventHandlingUnitId, physicalDimUnitId, _itemId, _inventDimId);
        return this.weightAndVolume(_itemId, qtyInPhysicalDimUnits, physicalDimUnitId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightAndVolumeForWorkHandlingQty</Name>
				<Source><![CDATA[
    private container weightAndVolumeForWorkHandlingQty(ItemId _itemId, InventDimId _inventDimId, InventHandlingQty _qty, UnitOfMeasureSymbol _unitId)
    {
        UnitOfMeasureSymbol physicalDimUnitId = requestedUnits ? requestedUnits : WHSCatchWeightHelper::inventHandlingUnitId(_itemId);
        InventHandlingQty qtyInPhysicalDimUnits = this.convert(_qty, _unitId, physicalDimUnitId, _itemId, _inventDimId);
        return this.weightAndVolume(_itemId, qtyInPhysicalDimUnits, physicalDimUnitId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightAndVolume</Name>
				<Source><![CDATA[
    private container weightAndVolume(ItemId _itemId, InventHandlingQty _qtyInRequestedUnits, UnitOfMeasureSymbol _unit)
    {
        WHSPhysDimUOM physDimRequestedUnits = WHSPhysDimUOM::getPhysDimUOMByItem(_itemId, _unit);
        Weight weight = physDimRequestedUnits.Weight * _qtyInRequestedUnits;
        Volume volume = physDimRequestedUnits.displayVolume() * _qtyInRequestedUnits;

        return [weight, volume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOnHand</Name>
				<Source><![CDATA[
    private void calculateOnHand()
    {
        Weight                          itemWeight;
        Volume                          itemVolume;
        Set                             countedLicensePlates = new Set(Types::String);

        if (InventUseDimOfInventSumToggle::instance().isEnabled() && InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
        {
            InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty  inventSumWithDim;

            while select ItemId, sum(PhysicalInvent), sum(PdsCWPhysicalInvent), InventDimId, LicensePlateId from inventSumWithDim
                group by ItemId, InventDimId, LicensePlateId
                where inventSumWithDim.InventLocationId == location.InventLocationId
                    && inventSumWithDim.wmsLocationId == location.wmsLocationId
                    && (inventSumWithDim.PhysicalInvent > 0 || inventSumWithDim.PdsCWPhysicalInvent > 0)
            {
                boolean isItemCWEnabled = PdsGlobal::pdsIsCWItem(inventSumWithDim.ItemId);
                InventHandlingQty inventHandlingQty = isItemCWEnabled ? inventSumWithDim.PdsCWPhysicalInvent : inventSumWithDim.PhysicalInvent;

                [itemWeight, itemVolume] = this.weightAndVolumeForInventHandlingQty(inventSumWithDim.ItemId, inventSumWithDim.InventDimId, inventHandlingQty);
                this.addWeightVolumeToTotals(itemWeight, itemVolume, countedLicensePlates, inventSumWithDim.LicensePlateId);
            }
        }
        else
        {
            InventSumUnionDeltaPhysicalQty  inventSum;
            InventDim                       inventDim;

            while select ItemId, sum(PhysicalInvent), sum(PdsCWPhysicalInvent), InventDimId from inventSum
                group by inventSum.ItemId, inventSum.InventDimId, inventDim.LicensePlateId
                where inventSum.PhysicalInvent > 0 || inventSum.PdsCWPhysicalInvent > 0
                join LicensePlateId from inventDim
                    where inventDim.InventDimId == inventSum.InventDimId
                        && inventDim.InventLocationId == location.InventLocationId
                        && inventDim.wmsLocationId == location.wmsLocationId
            {
                boolean isItemCWEnabled = PdsGlobal::pdsIsCWItem(inventSum.ItemId);
                InventHandlingQty inventHandlingQty = isItemCWEnabled ? inventSum.PdsCWPhysicalInvent : inventSum.PhysicalInvent;

                [itemWeight, itemVolume] = this.weightAndVolumeForInventHandlingQty(inventSum.ItemId, inventSum.InventDimId, inventHandlingQty);
                this.addWeightVolumeToTotals(itemWeight, itemVolume, countedLicensePlates, inventDim.LicensePlateId);
            }
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePutWorkBeingCreated</Name>
				<Source><![CDATA[
    private void calculatePutWorkBeingCreated()
    {
        Weight           itemWeight;
        Volume           itemVolume;
        Weight           containerWeight;
        Volume           containerVolume;
        WHSTmpWorkLine   tmpWorkLine;
        Set              countedLicensePlates = new Set(Types::String);

        while select ItemId, sum(InventQty), InventDimId, LicensePlateId from tmpWorkLine
            group by ItemId, InventDimId, LicensePlateId
                where tmpWorkLine.InventLocationId  == location.InventLocationId
                &&    tmpWorkLine.wmsLocationId     == location.wmsLocationId
                &&    tmpWorkLine.WorkType          == WHSWorkType::Put
        {
            [itemWeight, itemVolume] = this.weightAndVolumeForInventHandlingQty(tmpWorkLine.ItemId, tmpWorkLine.InventDimId, tmpWorkLine.InventQty);

            this.addWeightVolumeToTotals(itemWeight, itemVolume, countedLicensePlates, tmpWorkLine.LicensePlateId);
        }

        // Add weight and volume for the container being created.
        if (containerType)
        {
            [containerWeight, containerVolume] = this.findContainerTypeWeightAndVolume(containerType);

            totalWeight += containerWeight;
            totalVolume += containerVolume;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotals</Name>
				<Source><![CDATA[
    private void calculateTotals()
    {
        if (includeOnHand)
        {
            this.calculateOnHand();
        }

        if (includeUnprocessedPutWork)
        {
            this.calculateUnprocessedPutWork();
        }

        if (includeWorkBeingCreated)
        {
            this.calculatePutWorkBeingCreated();
        }

        calculationComplete = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total volume on the location in the given units.
    /// </summary>
    /// <returns>
    /// The total volume on the location.
    /// </returns>
    public Volume calculateTotalVolume()
    {
        if (!calculationComplete)
        {
            this.calculateTotals();
        }

        return totalVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total weight on the location in the given units.
    /// </summary>
    /// <returns>
    /// The total weight on the location.
    /// </returns>
    public Weight calculateTotalWeight()
    {
        if (!calculationComplete)
        {
            this.calculateTotals();
        }

        return totalWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateUnprocessedPutWeightAndVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total weight on open put work.
    /// </summary>
    /// <returns>
    /// The total weight and total volume for open put work in a container.
    /// </returns>
    [Hookable(false)]
    internal container calculateUnprocessedPutWeightAndVolume()
    {
        this.calculateUnprocessedPutWork();

        return [totalWeight, totalVolume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateUnprocessedPutWork</Name>
				<Source><![CDATA[
    private void calculateUnprocessedPutWork()
    {
        Weight           itemWeight;
        Volume           itemVolume;
        WHSWorkLine      workLine;
        WHSWorkTable     workTable;
        Set              countedLicensePlates = new Set(Types::String);

        while select ItemId, UnitId, sum(QtyRemain), InventDimId from workLine
            group by workLine.ItemId, workLine.UnitId, workLine.InventDimId, workTable.TargetLicensePlateId
                where workLine.wmsLocationId == location.wmsLocationId
                &&    workLine.WorkType      == WHSWorkType::Put
                &&   (workLine.WorkStatus    == WHSWorkStatus::InProcess
                ||    workLine.WorkStatus    == WHSWorkStatus::Open)
                join TargetLicensePlateId from workTable
                    where workTable.WorkId           == workLine.WorkId
                    &&    workTable.InventLocationId == location.InventLocationId
        {
            [itemWeight, itemVolume] = this.weightAndVolumeForWorkHandlingQty(workLine.ItemId, workLine.InventDimId, workLine.QtyRemain, workLine.UnitId);

            this.addWeightVolumeToTotals(itemWeight, itemVolume, countedLicensePlates, workTable.TargetLicensePlateId);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>convert</Name>
				<Source><![CDATA[
    private real convert(Qty _qtyToConvert, UnitOfMeasureSymbol _fromUnits, UnitOfMeasureSymbol _toUnits, ItemId _itemId, InventDimId _inventDimId)
    {
        if (_fromUnits == _toUnits)
        {
            return _qtyToConvert;
        }

        if (!unitConverter)
        {
            unitConverter = EcoResReleasedProductUnitConverter::construct();
        }

        return roundUp(
        unitConverter.convert(_qtyToConvert,
            UnitOfMeasure::unitOfMeasureIdBySymbol(_fromUnits),
            UnitOfMeasure::unitOfMeasureIdBySymbol(_toUnits),
            NoYes::No,
            _itemId,
            _inventDimId,
            NoYes::No),
        1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContainerTypeWeightAndVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the weight and volume tied to the container type of the license plate.
    /// </summary>
    /// <param name="_containerTypeCode">
    /// The container type of the license plate.
    /// </param>
    /// <returns>
    /// A container with the container type's tare weight and the volume of the container.
    /// </returns>
    private container findContainerTypeWeightAndVolume(WHSContainerTypeCode _containerTypeCode)
    {
        WHSContainerType containerTypeLocal = WHSContainerType::find(_containerTypeCode);

        return [containerTypeLocal.TareWeight, containerTypeLocal.ContainerVolume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerTypeCode</Name>
				<Source><![CDATA[
    public WHSContainerTypeCode parmContainerTypeCode(WHSContainerTypeCode _containerType = containerType)
    {
        containerType = _containerType;

        return containerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocation</Name>
				<Source><![CDATA[
    protected WMSLocation parmLocation(WMSLocation _location = location)
    {
        location = _location;

        return location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestedUnits</Name>
				<Source><![CDATA[
    protected UnitOfMeasureSymbol parmRequestedUnits(UnitOfMeasureSymbol _requestedUnits = requestedUnits)
    {
        requestedUnits = _requestedUnits;

        return requestedUnits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitConverter</Name>
				<Source><![CDATA[
    public void parmUnitConverter(EcoResReleasedProductUnitConverter _unitConverter = unitConverter)
    {
        unitConverter = _unitConverter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightAndVolumeInRequestedUnits</Name>
				<Source><![CDATA[
    private container weightAndVolumeInRequestedUnits(ItemId _itemId, Qty _qtyInRequestedUnits)
    {
        WHSPhysDimUOM physDimRequestedUnits = WHSPhysDimUOM::getPhysDimUOMByItem(_itemId, requestedUnits);
        Weight weight = physDimRequestedUnits.Weight * _qtyInRequestedUnits;
        Volume volume = physDimRequestedUnits.displayVolume() * _qtyInRequestedUnits;

        return [weight, volume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSLocationTotalWeightVolumeCalculator construct()
    {
        return new WHSLocationTotalWeightVolumeCalculator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLocationUnitSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a calculator of total weight and volume on a location.
    /// </summary>
    /// <param name="_location">
    /// The location for which calculation is to be executed.
    /// </param>
    /// <param name="_requestedUnits">
    /// The unit of measure that we calculate weight and volume with.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSLocationTotalWeightVolumeCalculator</c> class.
    /// </returns>
    /// <remarks>
    /// Total weight and volume include inventory in the location, created work to put to the location, and work to put to the location in the process of being created.
    /// </remarks>
    public static WHSLocationTotalWeightVolumeCalculator newFromLocationUnitSymbol(WMSLocation _location, UnitOfMeasureSymbol _requestedUnits)
    {
        WHSLocationTotalWeightVolumeCalculator calculator = WHSLocationTotalWeightVolumeCalculator::construct();
        calculator.parmLocation(_location);
        calculator.parmRequestedUnits(_requestedUnits);

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForLocationOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a calculator of total weight and volume on a location based on physical on hand only.
    /// </summary>
    /// <param name="_location">
    /// The location for which calculation is to be executed.
    /// </param>
    /// <param name="_requestedUnits">
    /// The unit of measure that we calculate weight and volume with.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSLocationTotalWeightVolumeCalculator</c> class.
    /// </returns>
    /// <remarks>
    /// Total weight and volume includes only physical inventory in the location.
    /// </remarks>
    public static WHSLocationTotalWeightVolumeCalculator newForLocationOnHand(WMSLocation _location, UnitOfMeasureSymbol _requestedUnits)
    {
        WHSLocationTotalWeightVolumeCalculator calculator = WHSLocationTotalWeightVolumeCalculator::construct();
        calculator.initForLocationOnHand(_location, _requestedUnits);

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        includeOnHand = true;
        includeWorkBeingCreated = true;
        includeUnprocessedPutWork = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForLocationOnHand</Name>
				<Source><![CDATA[
    protected void initForLocationOnHand(WMSLocation _location, UnitOfMeasureSymbol _requestedUnits)
    {
        location = _location;
        requestedUnits = _requestedUnits;

        includeOnHand = true;
        includeWorkBeingCreated = false;
        includeUnprocessedPutWork = false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>