<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GenerateQRCode_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>GenerateQRCode_SA</c> is responsible for QR code creation for Saudi Arabia country/region context.
/// </summary>
internal final class GenerateQRCode_SA
{
    public static const System.Byte SellerNameTag = 1;
    public static const System.Byte SellerRegNumTag = 2;
    public static const System.Byte TimeStampTag = 3;
    public static const System.Byte TotalAmountTag = 4;
    public static const System.Byte TotalTaxAmountTag = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQRCodeFromBase64</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a QR code from base 64.
    /// </summary>
    /// <param name = "_qrCodeBase64">QR code in base 64</param>
    /// <returns>The QR code.</returns>
    public static Bitmap generateQRCodeFromBase64(str _qrCodeBase64)
    {
        Bitmap qrCode;

        EFDocQRCode_BR generateQR = new EFDocQRCode_BR();
        generateQR.parmErrorCorrectionLevel(QRCodeErrorCorrectionLevel::Medium);

        try
        {
            qrCode = generateQR.generateQRCode(_qrCodeBase64);
        }
        catch (Exception::CLRError)
        {
            warning("@ApplicationSuite_Localization:QRCodeIsDamaged");
        }

        return qrCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the number to string in the proper format.
    /// </summary>
    /// <param name = "_num">The number.</param>
    /// <returns>The formated number.</returns>
    internal static str numFormat(real _num)
    {
        return num2Str(_num, 0, 2, DecimalSeparator ::Dot, ThousandSeparator::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTLVField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a byte array in a TLV structure.
    /// </summary>
    /// <param name = "_tag">The tag value.</param>
    /// <param name = "_value">The value of TLV element.</param>
    /// <returns>A byte array in a TLV structure.</returns>
    internal static System.Byte[] createTLVField(System.Byte _tag, str _value)
    {
        System.Byte[] valueByteArray = new System.Text.UTF8Encoding().GetBytes(_value);
        System.Byte lengthByte = valueByteArray.Length;

        if (lengthByte != valueByteArray.Length)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        System.Byte[] tagArray = new System.Byte[1]();
        tagArray.SetValue(_tag, 0);

        System.Byte[] lengthArray = new System.Byte[1]();
        lengthArray.SetValue(lengthByte, 0);

        List byteArrayList = new List(Types::AnyType);
        byteArrayList.addEnd(tagArray);
        byteArrayList.addEnd(lengthArray);
        byteArrayList.addEnd(valueByteArray);

        return GenerateQRCode_SA::concatBytes(byteArrayList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>concatBytes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Concatenates the list of byte arrays.
    /// </summary>
    /// <param name = "_byteArrayList">The list of byte arrays.</param>
    /// <returns>Concatenates list of byte arrays.</returns>
    internal static System.Byte[] concatBytes(List _byteArrayList)
    {
        System.Byte[] ret;
        using (System.IO.MemoryStream stream = new System.IO.MemoryStream())
        {
            using (System.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream))
            {
                ListEnumerator le = _byteArrayList.getEnumerator();
                while(le.moveNext())
                {
                    System.Byte[] value = le.current();
                    writer.Write(value);
                }
            }

            ret = stream.ToArray();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>