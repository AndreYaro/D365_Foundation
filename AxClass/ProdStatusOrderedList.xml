<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdStatusOrderedList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the ordered list of enumeration values for <c>ProdStatus</c> enum.
/// Allows to add values to the list to support extension.
/// </summary>
public class ProdStatusOrderedList implements Enumerable
{
    List prodStatusOrderedList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the enumerator of the ordered list.
    /// </summary>
    /// <returns>An instance of <c>ListEnumerator</c> class.</returns>
    public Enumerator getEnumerator()
    {
        return prodStatusOrderedList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new value of <c>ProdStatus</c> enum to the ordered list after the specified value.
    /// </summary>
    /// <param name = "_newProdStatusValue">Value to be added.</param>
    /// <param name = "_addAfterValue">Value to add after.</param>
    /// <exception>Could not find _addAfterValue in the ordered list.</exception>
    public void addAfter(ProdStatus _newProdStatusValue, ProdStatus _addAfterValue)
    {
        ListIterator listIterator = new ListIterator(prodStatusOrderedList);
        while (listIterator.more())
        {
            if (listIterator.value() == _addAfterValue)
            {
                listIterator.next();
                listIterator.insert(_newProdStatusValue);
                return;
            }
            listIterator.next();
        }
        throw error(strFmt("@SCM:CouldNotAddValueXAfterValueY_YnotFound", _newProdStatusValue, _addAfterValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new value of <c>ProdStatus</c> enum to the start of the ordered list.
    /// </summary>
    /// <param name = "_prodStatus">Value to be added.</param>
    public void addStart(ProdStatus _prodStatus)
    {
        prodStatusOrderedList.addStart(_prodStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new value of <c>ProdStatus</c> enum to the end of the ordered list.
    /// </summary>
    /// <param name = "_prodStatus">Value to be added.</param>
    public void addEnd(ProdStatus _prodStatus)
    {
        prodStatusOrderedList.addEnd(_prodStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        prodStatusOrderedList = new List(Types::Enum);

        this.initializeProdStatusOrderedList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnumerateInOrder</Name>
				<Source><![CDATA[
    private void setEnumerateInOrder(SortOrder _enumerateInOrder)
    {
        if (_enumerateInOrder == SortOrder::Descending)
        {
            this.reverseOrderedList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseOrderedList</Name>
				<Source><![CDATA[
    private void reverseOrderedList()
    {
        List reversedProdStatusOrderedList = new List(Types::Enum);
        ListEnumerator enumerator = this.getEnumerator() as ListEnumerator;
        
        while (enumerator.moveNext())
        {
            reversedProdStatusOrderedList.addStart(enumerator.current());
        }

        prodStatusOrderedList = reversedProdStatusOrderedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>ProdStatusOrderedList</c> class to be enumerated in the specified order.
    /// </summary>
    /// <param name="_enumerateInOrder">Enumerate the values in the enum in the specified order.</param>
    /// <returns>An instance of <c>ProdStatusOrderedList</c> class.</returns>
    public static ProdStatusOrderedList newFromOrder(SortOrder _enumerateInOrder = SortOrder::Ascending)
    {
        ProdStatusOrderedList orderedList = new ProdStatusOrderedList();
        orderedList.setEnumerateInOrder(_enumerateInOrder);
        return orderedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProdStatusOrderedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the list with all the applicable values of <c>ProdStatus</c> enumeration in ascending order.
    /// </summary>
    [Replaceable]
    protected void initializeProdStatusOrderedList()
    {
        prodStatusOrderedList.addEnd(ProdStatus::Created);
        prodStatusOrderedList.addEnd(ProdStatus::CostEstimated);
        prodStatusOrderedList.addEnd(ProdStatus::Scheduled);
        prodStatusOrderedList.addEnd(ProdStatus::Released);
        prodStatusOrderedList.addEnd(ProdStatus::StartedUp);
        prodStatusOrderedList.addEnd(ProdStatus::ReportedFinished);
        prodStatusOrderedList.addEnd(ProdStatus::Completed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveStatusesBetween</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of production statuses between(and including) the two given production statuses.
    /// </summary>
    /// <param name = "_prodStatusTo">A <c>ProdStatus</c> value.</param>
    /// <returns>A list of production statuses.</returns>
    public List retrieveStatusesBetween(ProdStatus _prodStatusFrom, ProdStatus _prodStatusTo)
    {
        ListEnumerator  enumerator = this.getEnumerator() as ListEnumerator;
        boolean         rangeStarted;
        List            statusList = new List(Types::Enum);
        
        ListEnumerator  prodStatusEnumerator = this.getEnumerator();
        while (prodStatusEnumerator.moveNext())
        {
            if (!rangeStarted && prodStatusEnumerator.current() == _prodStatusFrom)
            {
                rangeStarted = true;
            }
            
            if (rangeStarted)
            {
                statusList.addEnd(prodStatusEnumerator.current());
            }

            if (prodStatusEnumerator.current() == _prodStatusTo)
            {
                break;
            }
        }

        return statusList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveStatusesFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of production statuses starting from (including) the given production status.
    /// </summary>
    /// <param name = "_prodStatusTo">A <c>ProdStatus</c> value.</param>
    /// <returns>A list of production statuses.</returns>
    public List retrieveStatusesFrom(ProdStatus _prodStatusFrom)
    {
        ListEnumerator  enumerator = this.getEnumerator() as ListEnumerator;
        boolean         rangeStarted;
        List            statusList = new List(Types::Enum);
        
        ListEnumerator  prodStatusEnumerator = this.getEnumerator();
        while (prodStatusEnumerator.moveNext())
        {
            if (!rangeStarted && prodStatusEnumerator.current() == _prodStatusFrom)
            {
                rangeStarted = true;
            }
            
            if (rangeStarted)
            {
                statusList.addEnd(prodStatusEnumerator.current());
            }
        }

        return statusList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveStatusesUpto</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of production statuses upto and including the given production status.
    /// </summary>
    /// <param name = "_prodStatusTo">A <c>ProdStatus</c> value.</param>
    /// <returns>A list of production statuses.</returns>
    public List retrieveStatusesUpto(ProdStatus _prodStatusTo)
    {
        List statusList = new List(Types::Enum);
        
        ListEnumerator  prodStatusEnumerator = this.getEnumerator();
        while (prodStatusEnumerator.moveNext())
        {
            if (prodStatusEnumerator.current() == _prodStatusTo)
            {
                break;
            }

            statusList.addEnd(prodStatusEnumerator.current());
        }

        return statusList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBeforeOrEqualTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the status of a production order is before or equal to the <paramref name="_prodStatus" />
    ///    parameter.
    /// </summary>
    /// <param name="_currentStatus">
    ///    The current status to be compared.
    /// </param>
    /// <param name="_statusToCompare">
    ///    The status that will be compared against.
    /// </param>
    /// <returns>
    ///    true if the status of a production order is before or equal to the status specified by the <paramref
    ///    name="_prodStatus" /> parameter; otherwise, false.
    /// </returns>

    public boolean isBeforeOrEqualTo(ProdStatus _currentStatus, ProdStatus _statusToCompare)
    {
        int i = 0, currentStatusIndex = 0, statusToCompareIndex = 0;
        ListEnumerator prodStatusEnumerator = this.getEnumerator();

        while (prodStatusEnumerator.moveNext())
        {
            if (statusToCompareIndex != 0 && currentStatusIndex != 0)
            {
                break;
            }
        
            i++;
            if (prodStatusEnumerator.current() == _statusToCompare)
            {
                statusToCompareIndex = i;
            }

            if (prodStatusEnumerator.current() == _currentStatus)
            {
                currentStatusIndex = i;
            }
        }

        return currentStatusIndex <= statusToCompareIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBefore</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the status of a production order is before the <paramref name="_prodStatus" />
    ///    parameter.
    /// </summary>
    /// <param name="_currentStatus">
    ///    The current status to be compared.
    /// </param>
    /// <param name="_statusToCompare">
    ///    The status that will be compared against.
    /// </param>
    /// <returns>
    ///    true if the status of a production order is before the status specified by the <paramref
    ///    name="_prodStatus" /> parameter; otherwise, false.
    /// </returns>
    public boolean isBefore(ProdStatus _currentStatus, ProdStatus _statusToCompare)
    {
        int i = 0, currentStatusIndex = 0, statusToCompareIndex = 0;
        ListEnumerator prodStatusEnumerator = this.getEnumerator();

        while (prodStatusEnumerator.moveNext())
        {
            if (statusToCompareIndex != 0 && currentStatusIndex != 0)
            {
                break;
            }
        
            i++;
            if (prodStatusEnumerator.current() == _statusToCompare)
            {
                statusToCompareIndex = i;
            }

            if (prodStatusEnumerator.current() == _currentStatus)
            {
                currentStatusIndex = i;
            }
        }

        return currentStatusIndex < statusToCompareIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAfter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the status of a production order is after the <paramref name="_prodStatus" />
    ///    parameter.
    /// </summary>
    /// <param name="_currentStatus">
    ///    The current status to be compared.
    /// </param>
    /// <param name="_statusToCompare">
    ///    The status that will be compared against.
    /// </param>
    /// <returns>
    ///    true if the status of a production order is after the status specified by the <paramref
    ///    name="_prodStatus" /> parameter; otherwise, false.
    /// </returns>
    public boolean isAfter(ProdStatus _currentStatus, ProdStatus _statusToCompare)
    {
        int i = 0, currentStatusIndex = 0, statusToCompareIndex = 0;
        ListEnumerator prodStatusEnumerator = prodStatusOrderedList.getEnumerator();

        while (prodStatusEnumerator.moveNext())
        {
            if (statusToCompareIndex != 0 && currentStatusIndex != 0)
            {
                break;
            }
        
            i++;
            if (prodStatusEnumerator.current() == _statusToCompare)
            {
                statusToCompareIndex = i;
            }

            if (prodStatusEnumerator.current() == _currentStatus)
            {
                currentStatusIndex = i;
            }
        }

        return currentStatusIndex > statusToCompareIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAfterOrEqualTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the status of a production order is after or equal to the <paramref name="_prodStatus" />
    ///    parameter.
    /// </summary>
    /// <param name="_currentStatus">
    ///    The current status to be compared.
    /// </param>
    /// <param name="_statusToCompare">
    ///    The status that will be compared against.
    /// </param>
    /// <returns>
    ///    true if the status of a production order is after or equal to the status specified by the <paramref
    ///    name="_prodStatus" /> parameter; otherwise, false.
    /// </returns>
    public boolean isAfterOrEqualTo(ProdStatus _currentStatus, ProdStatus _statusToCompare)
    {
        int i = 0, currentStatusIndex = 0, statusToCompareIndex = 0;
        ListEnumerator prodStatusEnumerator = prodStatusOrderedList.getEnumerator();

        while (prodStatusEnumerator.moveNext())
        {
            if (statusToCompareIndex != 0 && currentStatusIndex != 0)
            {
                break;
            }
        
            i++;
            if (prodStatusEnumerator.current() == _statusToCompare)
            {
                statusToCompareIndex = i;
            }

            if (prodStatusEnumerator.current() == _currentStatus)
            {
                currentStatusIndex = i;
            }
        }

        return currentStatusIndex >= statusToCompareIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveQueryRangeBetween</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves query range for the values between the two given production statuses. 
    /// </summary>
    /// <param name = "_prodStatusFrom">The production status starting from which the statuses must be retrieved.</param>
    /// <param name = "_prodStatusTo">The production status upto which the statuses must be retrieved.</param>
    /// <returns>A query range string with the list of the production statuses between the two given production statuses.</returns>
    public str retrieveQueryRangeBetween(ProdStatus _prodStatusFrom, ProdStatus _prodStatusTo)
    {
        boolean                 rangeStarted;
        str                     rangeStr;

        ListEnumerator          prodStatusEnumerator = prodStatusOrderedList.getEnumerator();
        while (prodStatusEnumerator.moveNext())
        {
            ProdStatus currentProdStatus = prodStatusEnumerator.current();

            if (currentProdStatus == _prodStatusFrom)
            {
                rangeStarted = true;
            }

            if (rangeStarted)
            {
                rangeStr = queryRangeConcat(rangeStr, queryValue(currentProdStatus));
            }

            if (currentProdStatus == _prodStatusTo)
            {
                break;
            }
        }

        return rangeStr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>