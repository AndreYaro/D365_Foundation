<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRUpSellCrossSell</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRUpSellCrossSell</c> executes all logic for the
/// up sell and coress sell features.
/// </summary>
class MCRUpSellCrossSell
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>combineRangeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Combines the passed ranges into a logical expression.
    /// </summary>
    /// <param name="_operand">
    /// The opperand to which the range is paired.
    /// </param>
    /// <param name="_rangeValue1">
    /// The first value of the logical expression.
    /// </param>
    /// <param name="_rangeValue2">
    /// The second value of the logical expression
    /// </param>
    /// <returns>
    /// The string representation of the logical expression.
    /// </returns>
    public static str combineRangeValues(MCRUpSellOperand _operand, str _rangeValue1, str _rangeValue2)
    {
        str rangeValue1 = _rangeValue1;

        if (_rangeValue2)
        {
            switch (_operand)
            {
                case MCRUpSellOperand::NotEqual:
                    rangeValue1 = '!' + rangeValue1 + ', !' + _rangeValue2;
                    break;
                case MCRUpSellOperand::Greater:
                    rangeValue1 = '>' + rangeValue1 + ', >' + _rangeValue2;
                    break;
                case MCRUpSellOperand::Less:
                    rangeValue1 = '<' + rangeValue1 + ', <' + _rangeValue2;
                    break;
                case MCRUpSellOperand::GreaterEqual:
                    rangeValue1 = '>' + rangeValue1 + ', ' + rangeValue1 + ', >' + _rangeValue2 + ', ' + _rangeValue2;
                    break;
                case MCRUpSellOperand::LessEqual:
                    rangeValue1 =  '<' + rangeValue1 + ', ' + rangeValue1 + ', <' + _rangeValue2 + ', ' + _rangeValue2;
                    break;
                case MCRUpSellOperand::Equal:
                default:
                    rangeValue1 = rangeValue1 + ', ' + _rangeValue2;
            }
        }
        else
        {
            switch (_operand)
            {
                case MCRUpSellOperand::NotEqual: rangeValue1 = '!' + rangeValue1;                        break;
                case MCRUpSellOperand::Greater: rangeValue1 = '>' + rangeValue1;                        break;
                case MCRUpSellOperand::Less: rangeValue1 = '<' + rangeValue1;                        break;
                case MCRUpSellOperand::GreaterEqual: rangeValue1 = '>' + rangeValue1 + ', ' + rangeValue1;    break;
                case MCRUpSellOperand::LessEqual: rangeValue1 = '<' + rangeValue1 + ', ' + rangeValue1;    break;
                case MCRUpSellOperand::Equal: // rangeValue1 good as is
                default:
            }
        }

        return rangeValue1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conditionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets range values based on the value type of the <c>MCRUpsellVarConditionDetail</c> buffer passed in.
    /// </summary>
    /// <param name="_mcrUpSellVarConditionDetail">
    /// The <c>MCRUpsellVarConditionDetail</c> buffer used to determine the appropriate action.
    /// </param>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> buffer from which to set the range value.
    /// </param>
    /// <param name="_salesLine">
    /// The <c>SalesTable</c> buffer from which to set the range value.
    /// </param>
    /// <returns>
    /// The calculated range value based on the passed parameters.
    /// </returns>
    public static str conditionValue(MCRUpSellVarConditionDetail _mcrUpSellVarConditionDetail,
                            SalesTable _salesTable, SalesLine _salesLine)
    {
        str                 rangeValue1, rangeValue2;
        MCRUpSellVarSys     mcrUpSellVarSys;
        int                 variableTableNum;

        //Process variables or values.
        switch (_mcrUpSellVarConditionDetail.ValueType)
        {
            case MCRUpSellValueType::Variable:
                mcrUpSellVarSys = MCRUpSellVarSys::find(_mcrUpSellVarConditionDetail.Value);
                switch (mcrUpSellVarSys.VariableTable)
                {
                    case tableStr(SalesTable):
                        rangeValue1 = _salesTable.(fieldname2id(_salesTable.TableId, mcrUpSellVarSys.VariableField));
                        break;
                    case tableStr(SalesLine):
                        rangeValue1 = _salesLine.(fieldname2id(_salesLine.TableId, mcrUpSellVarSys.VariableField));
                        break;
                    default:
                        variableTableNum = tablename2id(mcrUpSellVarSys.VariableTable);
                        rangeValue1 = MCRUpSellCrossSell::relatedValue(_salesTable, variableTableNum, mcrUpSellVarSys.VariableField);
                        if (rangeValue1)
                        {
                            rangeValue2 = MCRUpSellCrossSell::relatedValue(_salesLine, variableTableNum, mcrUpSellVarSys.VariableField);
                        }
                        else
                        {
                            rangeValue1 = MCRUpSellCrossSell::relatedValue(_salesLine, variableTableNum, mcrUpSellVarSys.VariableField);
                        }
                }
                break;

            case MCRUpSellValueType::Value:
                rangeValue1 = _mcrUpSellVarConditionDetail.Value;
                break;
        }

        //Creates the range only when doing field type variable.
        //If related to line and header puts both ranges in.
        if (_mcrUpSellVarConditionDetail.Tablevaluetype == MCRTableValueType::TableField)
        {
            rangeValue1 = MCRUpSellCrossSell::combineRangeValues(_mcrUpSellVarConditionDetail.Operand, rangeValue1, rangeValue2);
        }

        //Return the range.
        return rangeValue1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the <c>MCRUpSellCondition</c> on the <c>SalesLine</c> record; processing any table
    /// field condition or table method condition details.
    /// </summary>
    /// <param name="_salesLineRecId">
    /// The <c>RecId</c> of the sales line to execute the condition on.
    /// </param>
    /// <param name="_conditionName">
    /// The name of condition to execute.
    /// </param>
    /// <returns>
    /// true if all condition details passed; otherwise, false.
    /// </returns>
    public static boolean executeCondition(RecId  _salesLineRecId, MCRUpSellCondition _conditionName)
    {
        RecID    foundRecordID;
        Boolean  returnValue;

        //Check the table fields checks for SalesTable or SalesLine related tables.
        foundRecordID = MCRUpSellCrossSell::executeConditionTableField(_salesLineRecId, _conditionName, true);

        //If the table field check found a record, condition true so far so check any method calls.
        if (foundRecordID)
        {
            returnValue = MCRUpSellCrossSell::executeConditionTableMethod(foundRecordID, _conditionName);
        }
        else
        {
            returnValue = False;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeConditionTableField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the table field condition specified on either the sales order record or sales line record.
    /// either to <c>SalesTable</c> or <c>SalesLine</c>.
    /// </summary>
    /// <param name="_salesLineRecId">
    /// The <c>RecId</c> of the sales line to execute the condition on.
    /// </param>
    /// <param name="_conditionName">
    /// The conditon to execute.
    /// </param>
    /// <param name="_checkingTable">
    /// When set, the sales table record is checked, otherwise the sales line record is checked.
    /// </param>
    /// <returns>
    /// A <c>recID</c> indicating that the condition was successful.
    /// </returns>
    /// <remarks>
    /// If a value of false is passed in to <c>_checkingTable</c> then the condition table will only try to be related
    /// to the <c>SalesLine</c> and NOT the <c>SalesTable</c>.  Therefore it's best to not pass a boolean since this basically
    /// controls the procedure of the method calling itself just once.
    ///
    /// Algorithm consists of one level of recursion. If <c>_checkingTable</c> is true then the condition is first run on sales order.
    /// If unsuccessful will set <c>_checkingTable</c> to false and recall method, this time checking against sales line.  If still
    /// unsuccessful then the method returns an indication of false.
    /// </remarks>
    public static RecID executeConditionTableField(RecId _salesLineRecId, MCRUpSellCondition _conditionName,
                    boolean _checkingTable = true)
    {
        Query                       query;
        QueryBuildDataSource        qbds;
        QueryBuildDataSource        embedded;
        QueryRun                    queryRun;

        str                         rangeValue1;
        RecID                       returnRecID;

        Common                      common;
        SalesTable                  salesTable;
        SalesLine                   salesLine;
        MCRUpSellVarCondition       mcrUpSellVarCondition;
        MCRUpSellVarConditionDetail mcrUpSellVarConditionDetail;
        boolean                     checkingTable = _checkingTable;

        salesLine  = SalesLine::findRecId(_salesLineRecId);
        salesTable = SalesTable::find(salesLine.SalesId);
        mcrUpSellVarCondition = MCRUpSellVarCondition::find(_conditionName);

        query = new Query();

        if (checkingTable &&
            MCRUpSellCrossSell::tablesRelated(tablename2id(mcrUpSellVarCondition.ConditionTable), tablenum(SalesTable)))
        {
            // Condition table related to SalesTable, so proceed.
            qbds = query.addDataSource(tablenum(SalesTable));
            qbds.addRange(fieldnum(SalesTable, SalesId)).value(salesLine.SalesId);
        }
        else
        {
            // Condition table not related to SalesTable, condition can't be made true by relating to SalesTable.
            // Result will be result of checking line.
            if (checkingTable)
            {
                // Condition wasn't satisfied by relating condition table with SalesTable
                // Result will be the result of checking condition table with SalesLine
                return MCRUpSellCrossSell::executeConditionTableField(_salesLineRecId, _conditionName, false);
            }
            else
            {
                //Condition table could be related to the sales table, so check salesline.
                if (MCRUpSellCrossSell::tablesRelated(tablename2id(mcrUpSellVarCondition.ConditionTable), tablenum(SalesLine)))
                {
                    qbds = query.addDataSource(tablenum(SalesLine));
                    qbds.addRange(fieldnum(SalesLine, RecID)).value(int642str(salesLine.RecID));
                }
                else
                {
                    // Condition table not related to SalesLine and SalesLine is our base case
                    // so we return no record id.
                    return 0;
                }
            }
        }

        //Join the tables.  Note: SalesTable will join to SalesTable.
        embedded = qbds.addDataSource(tablename2id(mcrUpSellVarCondition.ConditionTable));
        embedded.relations(true);

        //If sales line as the condition table, add the record ID to the query.
        if (mcrUpSellVarCondition.ConditionTable == tableStr(SalesLine))
        {
            // Condition table is SalesLine, so join that and no need to check next level.
            embedded.addRange(fieldnum(SalesLine, RecID)).value(int642str(_salesLineRecId));
            checkingTable = false;
        }

        //Process the field conditions first building a query to test them.
        while select mcrUpSellVarConditionDetail
            where mcrUpSellVarConditionDetail.ConditionName == mcrUpSellVarCondition.ConditionName
               && mcrUpSellVarConditionDetail.Tablevaluetype == MCRTableValueType::TableField
        {
            rangeValue1 = MCRUpSellCrossSell::conditionValue(mcrUpSellVarConditionDetail, salesTable, salesLine);
            embedded.addRange(fieldname2id(embedded.table(), mcrUpSellVarConditionDetail.ConditionField)).value(rangeValue1);
        }

        //Get the record found to return.  Will execute even if no conditions.
        queryRun = new QueryRun(query);
        queryRun.next();

        //Get the joined record and put it in Common table.
        common = queryRun.getNo(2);
        if (common.recid)
        {
            // If checking table don't need to check line because condition was satisfied.
            // If checking line just return record ID found.
            returnRecID = common.RecID;
        }
        else
        {
            if (checkingTable)
            {
                // Condition wasn't satisfied by relating condition table with SalesTable
                // Result will be the result of checking condition table with SalesLine
                returnRecID = MCRUpSellCrossSell::executeConditionTableField(_salesLineRecId, _conditionName, false);
            }
            else
            {
                // We were checking the line, return no record since no record found.
                returnRecID = 0;
            }
        }

        return returnRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeConditionTableMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the condition details related to table method calls.
    /// </summary>
    /// <param name="_recID">
    /// The <c>RecId</c> of the record to execute the condition on.
    /// </param>
    /// <param name="_conditionName">
    /// The name of the condition to test.
    /// </param>
    /// <returns>
    /// true if the result of the comparison is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Each call is executed then the values are compared.  Due to the flexible types that can
    /// be returned, the method return value type is what drives the comparison.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if the executed method returns an unsupported value.
    /// </exception>
    public static boolean executeConditionTableMethod(RecId    _recID,
                                    MCRUpSellCondition  _conditionName)
    {
        SalesTable                  salesTable;
        SalesLine                   salesLine;
        MCRUpSellVarCondition       mcrUpSellVarCondition;
        MCRUpSellVarConditionDetail mcrUpSellVarConditionDetail;
        str                         rangeValue1, rangeValue2;
        container                   methodReturn;
        real                        convNumValue1, convNumValue2;
        date                        convDateValue1, convDateValue2;
        boolean                     returnVal;

        salesLine  = SalesLine::findRecId(_recId);
        salesTable = SalesTable::find(salesLine.SalesId);
        mcrUpSellVarCondition = MCRUpSellVarCondition::find(_conditionName);

        returnVal = True;

        //Process the field conditions that are related to method calls.
        while select mcrUpSellVarConditionDetail
            where mcrUpSellVarConditionDetail.ConditionName == _conditionName
               && (mcrUpSellVarConditionDetail.Tablevaluetype == MCRTableValueType::TableInstanceMethod
                 || mcrUpSellVarConditionDetail.Tablevaluetype == MCRTableValueType::TableStaticMethod)
        {
            rangeValue1 = "";
            rangeValue2 = "";
            rangeValue1 = MCRUpSellCrossSell::conditionValue(mcrUpSellVarConditionDetail,
                                        salesTable, salesLine);
            methodReturn += MCRUpSellCrossSell::executeTableMethod(_recId,
                                        TableName2ID(mcrUpSellVarCondition.ConditionTable),
                                        mcrUpSellVarConditionDetail.ConditionField,
                                        mcrUpSellVarConditionDetail.Tablevaluetype);

            // When reals or integers are being used, convert them to
            // numbers instead of string before comparing.
            switch (typeof(conpeek(methodReturn, conlen(methodReturn))))
            {
                case Types::Enum:
                case Types::Real:
                case Types::Int64:
                case Types::Integer:   //Boolean falls into this.
                    convNumValue1 = str2num(rangeValue1);
                    convNumValue2 = conpeek(methodReturn, conlen(methodReturn));
                    returnVal     = MCRUpSellCrossSell::executeMethodConditionNum(convNumValue1,
                                                convNumValue2, mcrUpSellVarConditionDetail.Operand);
                    break;
                case Types::String:
                    rangeValue2 = conpeek(methodReturn, conlen(methodReturn));
                    returnVal   = MCRUpSellCrossSell::executeMethodCondition(rangeValue1,
                                                 rangeValue2, mcrUpSellVarConditionDetail.Operand);
                    break;
                case Types::Date:
                    //Convert to date if method returned date.  If value not a valid date
                    // the str2date returns noting.
                    convDateValue1 = str2date(rangeValue1, -1);
                    convDateValue2 = conpeek(methodReturn, conlen(methodReturn));
                    returnVal      = MCRUpSellCrossSell::executeMethodConditionDate(convDateValue1,
                                                  convDateValue2, mcrUpSellVarConditionDetail.Operand);
                    break;
                default:
                    throw error("@MCR22016");
            }

            //Found one that was false so stop looping.
            if (!returnVal)
            {
                break;
            }
        }

        //Return the return value.
        return returnVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeMethodCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares string values for acceptable valid ranges.
    /// </summary>
    /// <param name="rangeValue1">
    /// The beginning range value.
    /// </param>
    /// <param name="rangeValue2">
    /// The end range value.
    /// </param>
    /// <param name="_operand">
    /// The operand for comparison.
    /// </param>
    /// <returns>
    /// true if the comparison of ranges is valid; otherwise, false.
    /// </returns>
    public static boolean executeMethodCondition(str rangeValue1, str rangeValue2,
                                        MCRUpSellOperand _operand)
    {
        boolean retValue= false;

        switch (_operand)
        {
            case MCRUpSellOperand::NotEqual:

                if (rangeValue2 != rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::Greater:

                if (rangeValue2 > rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::Less:

                if (rangeValue2 < rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::GreaterEqual:

                if (rangeValue2 >= rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::LessEqual:

                if (rangeValue2 <= rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::Equal:

                if (rangeValue2 == rangeValue1)
                {
                    retValue = true;
                }

            break;
            default:
            break;
        }
        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeMethodConditionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares two dates.
    /// </summary>
    /// <param name="rangeValue1">
    /// The beginning range of acceptable date comparison.
    /// </param>
    /// <param name="rangeValue2">
    /// The ending range of acceptable date comparison.
    /// </param>
    /// <param name="_operand">
    /// The operand for comparison.
    /// </param>
    /// <returns>
    /// true if the condition is met between comparison of dates; otherwise, false.
    /// </returns>
    public static boolean executeMethodConditionDate(date rangeValue1, date rangeValue2,
                        MCRUpSellOperand _operand)
    {
        boolean retValue= false;

        switch (_operand)
        {
            case MCRUpSellOperand::NotEqual:

                if (rangeValue2 != rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::Greater:

                if (rangeValue2 > rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::Less:

                if (rangeValue2 < rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::GreaterEqual:

                if (rangeValue2 >= rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::LessEqual:

                if (rangeValue2 <= rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::Equal:

                if (rangeValue2 == rangeValue1)
                {
                    retValue = true;
                }

            break;
            default:
            break;
        }
        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeMethodConditionNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares two integers and returns true if the condition is met, false otherwise.
    /// </summary>
    /// <param name="rangeValue1">
    /// The beginning range of condition values.
    /// </param>
    /// <param name="rangeValue2">
    /// The ending range of condition values.
    /// </param>
    /// <param name="_operand">
    /// The operand for checking validity, not equals, greater, less, greater equal, less equal.
    /// </param>
    /// <returns>
    /// true if the condition is valid; otherwise, false.
    /// </returns>
    public static boolean executeMethodConditionNum(real rangeValue1, real rangeValue2, MCRUpSellOperand _operand)
    {
        boolean retValue= false;

        switch (_operand)
        {
            case MCRUpSellOperand::NotEqual:

                if (rangeValue2 != rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::Greater:

                if (rangeValue2 > rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::Less:

                if (rangeValue2 < rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::GreaterEqual:

                if (rangeValue2 >= rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::LessEqual:

                if (rangeValue2 <= rangeValue1)
                {
                    retValue = true;
                }

            break;
            case MCRUpSellOperand::Equal:

                if (rangeValue2 == rangeValue1)
                {
                    retValue = true;
                }

            break;
            default:
            break;
        }
        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic defined in the passed rule.
    /// </summary>
    /// <param name="_rule">
    /// The rule for which this method executes logic.
    /// </param>
    /// <param name="_salesLineRecId">
    /// The Id of the sales line record for the rule to be executed for.
    /// </param>
    /// <returns>
    /// true if the rule is executed; otherwise, false.
    /// </returns>
    public static boolean executeRule(MCRUpSellRule _rule, RecId _salesLineRecId)
    {
        MCRUpSellVarRule        mcrUpSellVarRule;
        MCRUpSellVarRuleDetail  mcrUpSellVarRuleDetail;
        MCRFraudRule            mcrFraudRule;
        MCRUpSellRule           rule = _rule;

        boolean first = true;
        boolean ruleResult = false;
        MCRUpSellOperandType lastOperand;
        while select Operand, LeftParen, RightParen, ConditionName
            from mcrUpSellVarRuleDetail
            order by mcrUpSellVarRuleDetail.SeqNum
            where mcrUpSellVarRuleDetail.RuleID == rule
        {
            boolean conditionResult = MCRUpSellCrossSell::executeCondition(_salesLineRecId, mcrUpSellVarRuleDetail.ConditionName);
            if (mcrUpSellVarRuleDetail.LeftParen == MCRUpSellLeftParen::NotParen)
            {
                conditionResult = !conditionResult;
            }
            if (first)
            {
                ruleResult = conditionResult;
                first = false;
            }
            else
            {
                switch (lastOperand)
                {
                    case MCRUpSellOperandType::AND:
                        ruleResult = conditionResult && ruleResult;
                        break;
                    case MCRUpSellOperandType::OR:
                        ruleResult = conditionResult || ruleResult;
                        break;
                }
            }

            lastOperand = mcrUpSellVarRuleDetail.Operand;
        }

        // last condition must have no operand and there should be at least one condition
        if (lastOperand != MCRUpSellOperandType::None || first == true)
        {
            return false;
        }

        return ruleResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeTableMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a table method and returns the result.
    /// </summary>
    /// <param name="_recId">
    /// The specific record in table to run method against.
    /// </param>
    /// <param name="_tableId">
    /// The <c>TableID</c> of table executing condition on.
    /// </param>
    /// <param name="_methodName">
    /// The name of method to execute.
    /// </param>
    /// <param name="_tableValueType">
    /// An indicator flagging if the table method is an instance method or static method.
    /// </param>
    /// <returns>
    /// Value of executed table method.
    /// </returns>
    /// <remarks>
    /// If the table is not sales table, then the <c>recID</c> of the passed in table
    /// should be retrieved before the call object can be invoked to execute the method.
    /// </remarks>
    public static anytype  executeTableMethod(RecId _recId, TableId _tableId, str _methodName,
                         MCRTableValueType _tableValueType)
    {
        ExecutePermission executePermission;
        SysDictTable    sysDictTable;
        DictTable       dictTable;
        anytype         returnValue;
        common          common;

        sysDictTable = new SysDictTable(_tableId);

        executePermission = new ExecutePermission();
        executePermission.assert();
        dictTable = new DictTable(_tableId);
        common = dictTable.makeRecord();

        select common where common.RecId == _recId;

        if (_tableValueType == MCRTableValueType::TableInstanceMethod)
        {
            returnValue = sysDictTable.callObject(_methodName, common);
        }
        else
        {
            returnValue = sysDictTable.callStatic(_methodName);
        }

        CodeAccessPermission::revertAssert();

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of a related table's field.
    /// </summary>
    /// <param name="_parentTable">
    /// The parent table to check.
    /// </param>
    /// <param name="_childTableNum">
    /// The child table related to parent table.
    /// </param>
    /// <param name="_fieldName">
    /// The field name used to check relation.
    /// </param>
    /// <returns>
    /// The related value of the field.
    /// </returns>
    public static str relatedValue(Common _parentTable, int _childTableNum, str _fieldName)
    {
        Query                       variableQuery;
        QueryBuildDataSource        variableQuerySource;
        QueryRun                    variableQueryRun;
        Common                      variableTable;
        DictTable                   dictTable;
        fieldId                     tempFieldId;
        int                         parentTableNum;
        int                         parentTableField;
        int                         childTableField;
        int64                       parentTableRecId;
        DictField                   dictField;
        str                         relatedValue;
        Types                       fieldType;
        #define.RecId('RecId')

        parentTableNum   = _parentTable.TableId;
        parentTableField = fieldname2id(parentTableNum, #RecId);
        parentTableRecId = _parentTable.RecId;
        childTableField  = fieldname2id(_childTableNum, _fieldName);

        if (MCRUpSellCrossSell::tablesRelated(parentTableNum, _childTableNum))
        {
            dictTable           = new DictTable(_childTableNum);
            variableQuery       = new Query();
            variableQuerySource = variableQuery.addDataSource(parentTableNum);
            variableQuerySource.addRange(parentTableField).value(queryValue(parentTableRecId));
            variableQuerySource.addDataSource(_childTableNum).relations(true);
            variableQueryRun    = new QueryRun(variableQuery);

            while (variableQueryRun.next())
            {
                variableTable = variableQueryRun.getNo(2);
                tempFieldId = dictTable.fieldName2Id(_fieldName);
                dictField = new DictField(variableTable.TableId, tempFieldId);
                fieldType = dictField.baseType();

                switch (fieldType)
                {
                    case Types::Int64:
                        relatedValue = relatedValue + int642str(variableTable.(dictTable.fieldName2Id(_fieldName))) + ', ';
                    break;
                    case Types::Integer:
                        relatedValue = relatedValue + int2str(variableTable.(dictTable.fieldName2Id(_fieldName))) + ', ';
                    break;
                    case Types::Real:
                        relatedValue = relatedValue + num2str(variableTable.(dictTable.fieldName2Id(_fieldName)), 1, 1, 1, 1) + ', ';
                    break;
                    case Types::Enum:
                        relatedValue = relatedValue + enum2str(variableTable.(dictTable.fieldName2Id(_fieldName))) + ', ';
                    break;
                    case Types::Date:
                        relatedValue = relatedValue + date2strUsr(variableTable.(dictTable.fieldName2Id(_fieldName)), DateFlags::FormatAll) + ', ';
                    break;
                    default:
                        relatedValue = relatedValue + any2str(variableTable.(dictTable.fieldName2Id(_fieldName))) + ', ';
                    break;
                }
            }
        }
        return relatedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tablesRelated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if passed in tables are related to another.
    /// </summary>
    /// <param name="_table1">
    /// The first table to check.
    /// </param>
    /// <param name="_table2">
    /// THe second table to check.
    /// </param>
    /// <returns>
    /// true if tables are related to each other one way or another; otherwise, false.
    /// </returns>
    public static boolean tablesRelated(int _table1, int _table2)
    {
        boolean isTablesRelated = false;

        isTablesRelated = MCRUpSellCrossSell::hasTableRelation(_table1, _table2);

        if (!isTablesRelated)
        {
            isTablesRelated = MCRUpSellCrossSell::hasTableRelation(_table2, _table1);
        }

        return isTablesRelated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testExecuteRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tests execution of a rule.
    /// </summary>
    /// <param name="_ruleID">
    /// The rule to test.
    /// </param>
    /// <param name="_silence">
    /// A flag to indicate whether errors should be shown.
    /// </param>
    /// <returns>
    /// true if the rule is set up correctly; otherwise, false.
    /// </returns>
    public static boolean testExecuteRule(MCRUpSellRule _ruleID, boolean _silence = false)
    {
        MCRUpSellVarRuleDetail  mcrUpSellVarRuleDetail;
        MCRUpSellOperandType    lastOperand;

        boolean first = true;

        while select Operand, LeftParen, RightParen, ConditionName
            from mcrUpSellVarRuleDetail
            order by mcrUpSellVarRuleDetail.SeqNum
            where mcrUpSellVarRuleDetail.RuleID == _ruleID
        {
            if (first)
            {
                if (mcrUpSellVarRuleDetail.LeftParen == MCRUpSellLeftParen::None)
                {
                    error('@MCR23637');  // rule needs left parenthesis
                    return false;
                }
                first = false;
            }
            else
            {
                if (lastOperand == MCRUpSellOperandType::None)
                {
                    error('@MCR23637');  // only last condition can have no operand
                    return false;
                }
            }

            lastOperand = mcrUpSellVarRuleDetail.Operand;
        }

        // last condition must have no operand and there should be at least one condition
        if (lastOperand != MCRUpSellOperandType::None || first == true)
        {
            error('@MCR23637');
            return false;
        }

        info("@MCR23610");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTableRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks if fromTable has relation to toTable.
    /// </summary>
    /// <param name = "fromTable">The table id to check the relations.</param>
    /// <param name = "toTable">The related table id</param>
    /// <returns>
    /// true if fromTable has relationes to toTable; otherwise, false.
    /// </returns>
    private static boolean hasTableRelation(int fromTable, int toTable)
    {
        DictTable dictTable;
        int i, relationCount;
        boolean hasRelation = false;

        if (fromTable != 0 )
        {
            dictTable = new DictTable(fromTable);
            // iterate thru each relationship in table1 and return true if relation to table2 is found
            relationCount = dictTable.relationCnt();
            for (i=1; i<=relationCount; i++)
            {
                if (dictTable.relation(i) == tableId2Name(toTable))
                {
                    hasRelation =  true;
                }
            }
        }

        return hasRelation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>