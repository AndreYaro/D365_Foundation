<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayMovement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to create movement.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::Movement)]
class WhsWorkExecuteDisplayMovement extends WHSWorkExecuteDisplay
{
    const str ConfirmAnchoring = 'ConfirmAnchoring';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        var fieldValues = _control.parmContext().fieldValues;
        var controlData = _control.parmContext().controlData;

        switch (true)
        {
            case _control is WhsControlQty:
                Qty qty = WHSWorkExecuteDisplay::str2numDisplay(_value);

                if (qty > controlData.getQty() &&
                    (!InventTable::find(fieldValues.parmItemId()).whsAllowPhysNeg() ||
                    !WMSLocation::find(fieldValues.parmWMSLocationId(), fieldValues.parmInventLocationId()).whsLocationProfile().AllowNegative))
                {
                    return _control.fail("@WAX1172");
                }
                break;

            case _control is WhsControlUOM:
                UnitOfMeasure unitOfMeasure = UnitOfMeasure::findBySymbol(_control.parmData());
                if (unitOfMeasure && decRound(fieldValues.parmQty(), unitOfMeasure.DecimalPrecision) != fieldValues.parmQty())
                {
                    return _control.fail(strFmt("@WAX:NumberOfDecimalsAllowed", _control.parmData(), unitOfMeasure.DecimalPrecision));
                }

                InventDimId inventDimIdProduct = controlData.findInventDimIdProduct();
                // Validate against negative inventory rules
                
                if (WHSCatchWeightHelper::convertInventQuantity(fieldValues.parmItemId(), _control.parmData(), fieldValues.parmQty(), inventDimIdProduct) > controlData.getQty() &&
                    (!InventTable::find(fieldValues.parmItemId()).whsAllowPhysNeg() ||
                    !controlData.wmsLocation().whsLocationProfile().AllowNegative))
                {
                    return _control.fail("@WAX1172");
                }
                break;

            case _control is WhsControlContainerType:
                WhsControlContainerType controlContainer = _control as WhsControlContainerType;
                controlContainer.initializeContainerType();

                break;
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdatedPass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a pass object that is updated based on the current values.
    /// </summary>
    /// <param name = "_con">A container that represents the UI.</param>
    /// <param name = "_pass">The pass object</param>
    /// <param name = "_mode">The <c>WHSWorkExecuteMode</c> mode.</param>
    /// <returns></returns>
    public WHSRFPassthrough createUpdatedPass(container _con, WHSRFPassthrough _pass, WHSWorkExecuteMode _mode)
    {
        WHSRFPassthrough    locPass = _pass;
        WHSRFPassthrough    fieldValues;

        fieldValues = super(_con, _pass, _mode);

        switch (_mode)
        {
            case WHSWorkExecuteMode::Movement:
                // Don't update fields that store the "From" values.
                if (fieldValues.exists(#WMSLocationId))
                {
                    fieldValues.remove(#WMSLocationId);
                }

                if (fieldValues.exists(#LicensePlateId))
                {
                    fieldValues.remove(#LicensePlateId);
                }

                if (fieldValues.exists(#InventoryStatus))
                {
                    fieldValues.remove(#InventoryStatus);
                }

                if (fieldValues.exists(#Qty) && fieldValues.lookupNum(#Qty) == 0)
                {
                    fieldValues.remove(#Qty);
                }
                break;

            default:
                break;
        }

        locPass = this.combineMaps(locPass, fieldValues);

        return locPass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMovementFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Movement From screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_locationId">
    /// From location id.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    public container buildMovementFrom(container _con, WMSLocationId _locationId = '')
    {
        container           ret = _con;

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayMovementControls::MovementLabel, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayMovementControls::MovementFromLabel, "@WAX1300", 1, '', #WHSRFUndefinedDataType, '', 0)];

        WMSLocation location;

        if (_locationId && pass.exists(#InventLocationId))
        {
            location = WMSLocation::find(_locationId, pass.lookup(#InventLocationId));
        }

        boolean isLicensePlateAssociatedToContainer = WHSContainerTable::isLicensePlateIdAssociatedToContainer(pass.lookupStr(#LicensePlateId));

        if (!isLicensePlateAssociatedToContainer)
        {
            ret += this.buildSingleItemMovementFrom(location);
        }
        else
        {
            ret += this.buildContainerMovementFrom(location);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildContainerMovementFrom</Name>
				<Source><![CDATA[
    protected container buildContainerMovementFrom(WMSLocation _location)
    {
        container ret;

        ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _location.wMSLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];

        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayMovementControls::ContainerMovement, "@WAX:ContainerMovement", 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayMovementControls::ContainerContentsLabel, this.generateItemInfoForContainer(), 1, '', #WHSRFUndefinedDataType, '', 0)];

        //If both an item and container ID were scanned, we only want to keep the container ID and not create movement work for a specific item
        if (pass.exists(#ItemId))
        {
            pass.remove(#ItemId);
            pass.insert(#ItemId, '');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSingleItemMovementFrom</Name>
				<Source><![CDATA[
    protected container buildSingleItemMovementFrom(WMSLocation _location)
    {
        InventTable inventTable;
        container   ret;

        if (pass.exists(#ItemId))
        {
            inventTable = InventTable::find(pass.lookup(#ItemId));
        }

        if (!pass.exists(#WMSLocationId))
        {
            ret += [this.buildControl(#RFText, #LocOrLP, WHSDockInventoryManagementFeature::instance().isEnabled() ? "@WAX:MobileDeviceLocationLPContainerLabel" : "@WAX1146", 1, '', extendedTypeNum(WHSLocOrLP), '', 0)];
        }
        else
        {
            ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _location.wMSLocationId, extendedTypeNum(WMSLocationId), '', 0)];
        }

        if (pass.exists(WHSWorkExecuteDisplayMovementControls::MergeContainerId))
        {
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayMovementControls::MergeContainerId, "@WAX1422", 1, pass.lookupStr(WHSWorkExecuteDisplayMovementControls::MergeContainerId), extendedTypeNum(WHSContainerId), '', 0)];
        }

        boolean isLocationLPControlled = _location.whsLocationIsLPControlled();

        if (isLocationLPControlled)
        {
            ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
        }

        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0, !pass.exists(WHSWorkExecuteDisplayMovementControls::MergeContainerId))];

        if (inventTable)
        {
            WHSInventTable whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }

            ret = this.buildProductDimensionsText(ret, inventTable.ItemId);

            ret = this.buildTrackingDimensionsText(ret, inventTable.ItemId, _location);
        }

        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
        {
            const boolean shouldInventoryStatusBeEditable = true;

            ret = this.buildInventoryStatus(ret, '', false, false, false, pass.lookupStr(#SelectedValue), shouldInventoryStatusBeEditable);
        }

        if (inventTable)
        {
            InventDim inventDim = this.createInventDimFromPass();
            pass.insert(WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty, WHSInventOnHand::getWorkPhysicalInventHandlingQtyByInventDim(inventTable.ItemId, InventDim));
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty,
                            strFmt("@WAX:PhysicalInventoryQtyInUnit", WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId)), 1,
                            pass.lookupStr(WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty),
                            extendedTypeNum(InventQty), '', 0, false)];
        }

        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0, !pass.exists(WHSWorkExecuteDisplayMovementControls::MergeContainerId))];
  
        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM), !pass.exists(WHSWorkExecuteDisplayMovementControls::MergeContainerId));

        if (inventTable.ItemId
            && PdsGlobal::pdsIsCWItem(inventTable.ItemId)
            && WHSInventTable::movementWeightCapturingMethod(inventTable.ItemId) == WHSMovementWeightCapturingMethod::PerPickingQty
            && !WHSInventTable::isCatchWeightTagTracked(inventTable.ItemId)
            && pass.hasValue(#Qty))
        {
            PmfQtyDataCarrier onhand;
            if (WHSInventTable::outboundWeightVarianceMethod(inventTable.ItemId) == WHSOutboundWeightVarianceMethod::Restrict)
            {
                onhand = whsInventOnHand::getWorkPhysicalQuantityByInventDim(inventTable.ItemId, pass.createInventDimFromPass());
            }

            if (onhand == null || pass.lookupNum(#Qty) < onhand.parmCwQty())
            {
                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, "@WAX:Weight", 1, '', extendedTypeNum(Weight), '', 0, true)];
            }
            else
            {
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, onhand.parmInventQty());
            }
        }

        if (pass.lookupStr(#LicensePlateId)
            && (this.isLPMultiDimension()
                || (inventTable.ItemId
                    && WHSInventTable::isCatchWeightTagTracked(inventTable.ItemId)
                    && WHSInventTable::catchWeightTagDimensionTrackingMethod(inventTable.ItemId) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)))
        {
            ret = this.addMoveLPButton(ret, 1);
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMovementTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Movement To screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_locationId">
    /// To location id.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    public container buildMovementTo(container _con, WMSLocationId _locationId = '')
    {
        container ret = _con;

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayMovementControls::MovementLabel, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayMovementControls::MovementToLabel, "@WAX1299", 1, '', #WHSRFUndefinedDataType, '', 0)];

        boolean isLicensePlateAssociatedToContainer = WHSContainerTable::isLicensePlateIdAssociatedToContainer(pass.lookupStr(#LicensePlateId));

        if (!isLicensePlateAssociatedToContainer)
        {
            ret += this.buildSingleItemMovementTo(_locationId);
        }
        else
        {
            ret += this.buildContainerMovementTo(_locationId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildContainerMovementTo</Name>
				<Source><![CDATA[
    protected container buildContainerMovementTo(WMSLocationId _locationId)
    {
        container   ret;

        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
        {
            ret = this.buildInventoryStatus(ret, '', false, false, false, WHSInventStatus::find(pass.lookupStr(#InventoryStatus)).InventStatusId, false);
        }
  
        if (WHSDockInventoryManagementFeature::instance().isEnabled()
            && !pass.exists(#MoveLP))
        {
            ret += [this.buildControl(#RFText, #LocOrLP, "@WAX1146", 1, _locationId, extendedTypeNum(WHSLicensePlateId), '', 0)];

            if (_locationId && pass.exists(#InventLocationId))
            {
                WMSLocation location = WMSLocation::find(_locationId, pass.lookup(#InventLocationId));

                if (location.whsLocationIsLPControlled())
                {
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP && (!pass.exists(#LicensePlateId) || pass.lookup(#LicensePlateId) == '' || pass.exists(#SplittingLP)))
                    {
                        WHSLicensePlateId tmpLicensePlateId = WHSLicensePlate::generateLicensePlateId(pass.lookup(#ItemId), pass.lookup(#UOM));
                        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#TargetLicensePlateId, tmpLicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, WHSRFMenuItemTable::generatedLPEnabled(pass.lookup(#MenuItem)))];
                    }
                    else
                    {
                        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.exists(#SplittingLP) ? '' : pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, WHSRFMenuItemTable::generatedLPEnabled(pass.lookup(#MenuItem)))];
                    }
                }
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _locationId, extendedTypeNum(WMSLocationId), '', 0)];

            ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSingleItemMovementTo</Name>
				<Source><![CDATA[
    protected container buildSingleItemMovementTo(WMSLocationId _locationId)
    {
        container           ret;
        WMSLocation         location;
        InventTable         inventTable;
        boolean             displayContainerType = WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DisplayContainerTypeCode;

        if (pass.exists(#ItemId))
        {
            inventTable = InventTable::find(pass.lookup(#ItemId));
        }

        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
        {
            ret = this.buildInventoryStatus(ret, '', false, false, false, pass.lookupStr(#SelectedValue));
        }

        if (!pass.exists(#MoveLP))
        {
            ret += [this.buildControl(#RFText, #LocOrLP, "@WAX1146", 1, _locationId, extendedTypeNum(WHSLicensePlateId), '', 0)];

            if (_locationId && pass.exists(#InventLocationId))
            {
                location = WMSLocation::find(_locationId, pass.lookup(#InventLocationId));

                if (location.whsLocationIsLPControlled())
                {
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP
                        && ((!pass.exists(#LicensePlateId) || pass.lookup(#LicensePlateId) == '' || pass.exists(#SplittingLP)) || this.validateGenerateNewLP()))
                    {
                        WHSLicensePlateId tmpLicensePlateId = WHSLicensePlate::generateLicensePlateId(pass.lookup(#ItemId), pass.lookup(#UOM));
                        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#TargetLicensePlateId, tmpLicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, WHSRFMenuItemTable::generatedLPEnabled(pass.lookup(#MenuItem)))];
                    }
                    else if (displayContainerType && pass.hasValue(#TargetLicensePlateId))
                    {
                        // When container type is displayed LP will be saved to TargetLicensePlateId.
                        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#TargetLicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, WHSRFMenuItemTable::generatedLPEnabled(pass.lookup(#MenuItem)))];
                    }
                    else
                    {
                        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.exists(#SplittingLP) ? '' : pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, WHSRFMenuItemTable::generatedLPEnabled(pass.lookup(#MenuItem)))];
                    }

                    if (displayContainerType)
                    {
                        this.setInitiationForContainer();

                        ret = this.buildContainerType(ret, pass.lookupStr(#ContainerType), !pass.hasValue(#AlreadyHaveLP));
                    }
                }
            }

            if (pass.exists(WHSWorkExecuteDisplayMovementControls::MergeContainerId))
            {
                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayMovementControls::MergeContainerId, "@WAX1422", 1, pass.lookupStr(WHSWorkExecuteDisplayMovementControls::MergeContainerId), extendedTypeNum(WHSContainerId), '', 0)];
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _locationId, extendedTypeNum(WMSLocationId), '', 0)];
   
            ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, WHSDockInventoryManagementFeature::instance().isEnabled())];

            if (pass.exists(WHSWorkExecuteDisplayMovementControls::MergeContainerId))
            {
                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayMovementControls::MergeContainerId, "@WAX1422", 1, pass.lookupStr(WHSWorkExecuteDisplayMovementControls::MergeContainerId), extendedTypeNum(WHSContainerId), '', 0)];
            }
        }

        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, false)];

        if (inventTable)
        {
            WHSInventTable whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }

            ret = this.buildProductDimensionsText(ret, inventTable.ItemId, true, false);

            ret = this.buildTrackingDimensionsText(ret, inventTable.ItemId, location, true, true, false, true);

            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty,
                            strFmt("@WAX:PhysicalInventoryQtyInUnit", WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId)), 1,
                            pass.lookupStr(WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty),
                            extendedTypeNum(InventQty), '', 0, false)];
        }

        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0, false)];

        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM), false);

        if (inventTable.ItemId
            && PdsGlobal::pdsIsCWItem(inventTable.ItemId)
            && pass.hasValue(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight))
        {
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight), extendedTypeNum(Weight), '', 0, false)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNestMovementTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Nest Movement To screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_locationId">
    /// To location id.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    public container buildNestMovementTo(container     _con,
                                  WMSLocationId _locationId = '')
    {
        container   ret = _con;

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayMovementControls::MovementLabel, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayMovementControls::MovementToLabel, "@WAX1299", 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX3928", 1, pass.lookup(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];

        ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX3929", 1, pass.lookup(#WMSLocationId), extendedTypeNum(WMSLocationId), '', 0, false)];

        ret += [this.buildControl(#RFText, #ToLocation, "@WAX3930", 1, _locationId, extendedTypeNum(WMSLocationId), '', 0)];

        if (WHSContainerTable::isLicensePlateIdUsedForContainerGrouping(pass.lookupStr(#LicensePlateId)))
        {
            ret += this.buildContainerGroupMovementTo();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildContainerGroupMovementTo</Name>
				<Source><![CDATA[
    private container buildContainerGroupMovementTo()
    {
        container ret;

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayMovementControls::ContainerGroupMovement, "@WAX:ContainerGroupMovement", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayMovementControls::ContainerGroupContentsLabel, this.generateInfoForContainerGroup(), 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWeightCapture</Name>
				<Source><![CDATA[
    private container buildWeightCapture(container _con)
    {
        container ret = _con;
        WMSLocation location;

        if (pass.lookupStr(#WMSLocationId) && pass.exists(#InventLocationId))
        {
            location = WMSLocation::find(pass.lookupStr(#WMSLocationId), pass.lookup(#InventLocationId));
        }
        
        if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
        {
            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, 1);
            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty, pass.lookupNum(#Qty));
        }
        
        if (WHSInventTable::isCatchWeightTagTracked(pass.lookupStr(#ItemId)))
        {
            // Capturing tags
            ret += [this.buildControl(#RFLabel,
                                    WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter,
                                    strFmt("@WAX:CatchWeightTagCountOfWhole", pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter), pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty)),
                                    1,
                                    '',
                                    #WHSRFUndefinedDataType,
                                    '',
                                    0)];

            ret += [this.buildControl(#RFLabel, #ItemId, strFmt("@WAX2007", pass.lookupStr(#ItemId)), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret = this.buildProductDimensionsText(ret, pass.lookupStr(#ItemId), true, false);

            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag, "@WAX:MobileDeviceLabelCatchWeightTag", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag), extendedTypeNum(WHSCatchWeightTagNumber), '', 0)];
        }
        else
        {
            // Capturing weight per catch weight unit
            ret += [this.buildControl(#RFLabel, #Scan, "@WAX:CaptureWeight", 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, strFmt("@SYS333411", pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter), pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty)), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, false)];

            ret = this.buildProductDimensionsText(ret, pass.lookupStr(#ItemId), true, false);

            ret = this.buildTrackingDimensionsText(ret, pass.lookupStr(#ItemId), location, true, true, false, true);

			ret += [this.buildControl(#RFLabel, #Qty, strFmt("@WAX736", 1, WHSCatchWeightHelper::inventHandlingUnitId(pass.lookupStr(#ItemId))), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight), extendedTypeNum(Weight), '', 0)];
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPhysicalInventoryQtyMovement</Name>
				<Source><![CDATA[
    protected void buildPhysicalInventoryQtyMovement(WHSRFPassthrough _fieldValues)
    {
        _fieldValues.insert(WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty, pass.lookupNum(WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLPMultiDimension</Name>
				<Source><![CDATA[
    private boolean isLPMultiDimension()
    {
        return WHSLicensePlate::isLPMultiDimension(pass.lookupStr(#LicensePlateId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        WhsWorkExecute                  workExecute = WhsWorkExecute::construct();
        WHSWorkId                       workId;
        container                       ret = conNull();
        container                       con = _con;
        container                       tmpFieldValues;
        int                             hasError = 0;
        boolean                         complete;
        boolean                         addCancel = true;
        boolean                         fullLP;
        WHSRFPassthrough                fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        WMSLocationId                   defaultLocationId;
        Name                            defaultInventStatus;
        InventDim                       inventDim;
        WHSInventStatusId               tmpInventStatus;
        WHSWorkCreateMovementController movementController;

        mode = conPeek(conPeek(_con, 1), 1);
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        hasError = this.hasError(con);

        pass.remove(#MoveNest);

        // If cancel confirmation is enabled run this step.
        if (_buttonClicked == #RFCancel && WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).ConfirmCancel == NoYes::Yes)
        {
            pass = this.createUpdatedPass(con, pass, mode);
            mode = WHSWorkExecuteMode::ConfirmationDialog;
            step = 0;
            WHSWorkExecuteDisplayConfirmationDialog workExecuteDisplayConfirm = WHSWorkExecuteDisplayConfirmationDialog::newStandard(con, pass, mode);

            // Prepare container
            ret = conPoke(con, #StateInfo, [mode, step]);
            ret = this.updateModeStepPass(ret, mode, step, pass);

            // Run confirm screen
            return workExecuteDisplayConfirm.displayForm(ret);
        }
        // Check if cancel was not confirmed.
        if (pass.exists(#ConfirmResult) && pass.lookup(#ConfirmResult) == #RFNo)
        {
            // Rebuild previous screen
            step = conPeek(conPeek(_con, 1), 2);
            if (step == 2)
            {
                ret = this.buildMovementTo(ret, pass.lookupStr(#LocOrLP));
            }
            else if (step == 3)
            {
                ret = this.buildNestMovementTo(ret, pass.lookupStr(#LocOrLP));
            }
            pass.remove(#ConfirmResult);

            // Display previous screen before moving to next step.
            ret = this.addButtons(ret);
            ret = this.updateModeStepPass(ret, mode, step, pass);
            return ret;
        }

        switch (step)
        {
            case 0,1:
                if (!step
                    && pass.exists(#MenuItem)
                    && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DefaultData)
                {
                    con = this.buildMovementFrom(ret);
                    con = this.updateModeStepPass(con, mode, step, pass);
                    pass.insert(#Initiation, 1);
                    step = 1;
                }

                if (step)
                {
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }

                    ret = this.displayLocOrLPCheck(ret, this.getControlDataFromContainer(con, #LocOrLP));
                    
                    if (step == #LocOrLPCheck)
                    {
                        break;
                    }

                    using (var displayContext = new WHSWorkExecuteDisplayContext())
                    {
                        displayContext.con = con;
                        [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                    }
                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                    pass = this.combineMaps(pass, fieldValues);
                    
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus &&
                        pass.exists(#SelectedValue)             &&
                        pass.lookup(#SelectedValue)     == ''   &&
                        pass.exists(#InventoryStatus)           &&
                        pass.lookup(#InventoryStatus)   == '')
                    {
                        WHSInventStatusId inventoryStatus = this.getControlDataFromContainer(con, #InventoryStatus);
                        pass.insert(#InventoryStatus, inventoryStatus);
                        pass.insert(#SelectedValue, inventoryStatus);
                    }

                    hasError = this.hasError(con);

                    if (hasError)
                    {
                        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
                        {
                            using (var displayContext = new WHSWorkExecuteDisplayContext())
                            {
                                displayContext.mustUpdateControl = true;
                                
                                con = this.buildInventoryStatus(con, '', false, false, false, WHSInventStatus::find(pass.lookupStr(#SelectedValue)).InventStatusId, false);
                            }
                        }

                        ret = con;
                        addCancel = false;
                        break;
                    }
                }
                else
                {
                    step = 1;
                    pass.insert(#Initiation, '1');
                }

                WHSWorkCreateMovementValidator::validateNotMovingContainerGroupWithOpenContainers(pass.lookupStr(#LicensePlateId));
                WHSWorkCreateMovementValidator::validateNotMovingContainerThatIsPartOfContainerGroup(pass.lookupStr(#LicensePlateId));

                con = this.buildMovementFrom(ret, pass.lookupStr(#WMSLocationId));

                if (!fieldValues.empty())
                {
                    // Update read-only fieldValue, as pass always has the latest value (updated in buildMovementFrom above)
                    this.buildPhysicalInventoryQtyMovement(fieldValues);
                    
                    if (fieldValues.exists(#SerialId) 
                        && !fieldValues.lookupStr(#SerialId)
                        && WhsInvent::isSerialNumberOptional(pass.lookup(#ItemId)))
                    {
                        fieldValues.remove(#SerialId);
                    }

                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete
                        && !pass.exists(#Initiation)
                        && !pass.hasValue(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt)
                        && PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId))
                        && !WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId))
                        && WHSInventTable::movementWeightCapturingMethod(pass.lookup(#ItemId)) != WHSMovementWeightCapturingMethod::NotCaptured)
                    {
                        if (pass.lookupNum(#Qty) == pass.lookupNum(WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty)
                            && WHSInventTable::outboundWeightVarianceMethod(pass.lookup(#ItemId)) == WHSOutboundWeightVarianceMethod::Restrict)
                        {
                            PmfQtyDataCarrier onhand = whsInventOnHand::getWorkPhysicalQuantityByInventDim(pass.lookup(#ItemId), pass.createInventDimFromPass());
                            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, onhand.parmInventQty());
                        }
                        else if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight)
                            || (pass.lookupNum(#Qty) < pass.lookupNum(WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty)
                                && WHSInventTable::outboundWeightVarianceMethod(pass.lookup(#ItemId)) == WHSOutboundWeightVarianceMethod::Restrict))
                        {
                            complete = false;
                            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt, 1);

                            if (WHSInventTable::movementWeightCapturingMethod(pass.lookup(#ItemId)) == WHSMovementWeightCapturingMethod::PerCatchWeightUnit)
                            {
                                ret = this.buildWeightCapture(conNull());
                                step = #CWOutboundWeightCapture;
                            }
                        }
                    }

                    WHSFullLPMovementPolicy fullLPMovePolicy = WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).FullLPMovementPolicy;
                    
                    boolean autoClickMoveLP = pass.lookupStr(#LicensePlateId)
                        && (fullLPMovePolicy == WHSFullLPMovementPolicy::AutoMoveFullLP
                           || (fullLPMovePolicy == WHSFullLPMovementPolicy::AutoMoveFullLPForSingleItem && !this.isLPMultiDimension()));

                    if (complete || _buttonClicked == #RFMoveLP || pass.exists(#MoveNest) || pass.exists(WHSWorkExecuteDisplayMovementControls::MergeMoveContainer) || autoClickMoveLP)
                    {
                        if (!pass.exists(#Initiation) || _buttonClicked == #RFMoveLP || pass.exists(#MoveNest) || pass.exists(WHSWorkExecuteDisplayMovementControls::MergeMoveContainer) || autoClickMoveLP)
                        {
                            if (_buttonClicked == #RFMoveLP || autoClickMoveLP)
                            {
                                pass.insert(#MoveLP, 1);
                            }

                            if (pass.exists(#MoveNest))
                            {
                                ret = conNull();
                                ret = this.buildNestMovementTo(ret);
                                addCancel = true;
                                step = 3;
                            }
                            else
                            {
                                ret = conNull();
                                ret = this.buildMovementTo(ret);
                                addCancel = true;
                                step = 2;
                            }

                            if (pass.exists(#SelectedValue)             &&
                                pass.lookup(#SelectedValue)     != ''   &&
                                pass.exists(#InventoryStatus)           &&
                                pass.lookup(#InventoryStatus)   == '')
                            {
                                pass.insert(#InventoryStatus, pass.lookup(#SelectedValue));
                            }

                            if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DefaultData)
                            {
                                defaultLocationId   = WHSRFDefaultData::getDefaultValue(pass.lookup(#MenuItem),
                                                                                        WHSDefaultDataField::ToLocation,
                                                                                        pass.lookup(#UserId),
                                                                                        pass.lookup(#InventLocationId),
                                                                                        '');

                                defaultInventStatus = WHSRFDefaultData::getDefaultValue(pass.lookup(#MenuItem),
                                                                                        WHSDefaultDataField::ToInventStatus,
                                                                                        pass.lookup(#UserId),
                                                                                        pass.lookup(#InventLocationId),
                                                                                        '',
                                                                                        pass);

                                if (defaultLocationId && WMSLocation::exist(defaultLocationId, pass.lookup(#InventLocationId)))
                                {
                                    fieldValues.insert(#LocOrLP, defaultLocationId);
                                    pass.insert(#ToLocationId, defaultLocationId);
                                }
                                if (defaultInventStatus || pass.exists(#DefaultDataFound))
                                {
                                    fieldValues.insert(#SelectedValue, defaultInventStatus);
                                    pass.insert(#SelectedValue, defaultInventStatus);

                                    if (pass.exists(#DefaultDataFound))
                                    {
                                        pass.remove(#DefaultDataFound);
                                    }
                                }

                                [ret, complete] = this.processFieldValues(ret, fieldValues);

                                ret = conNull();
                                ret = this.buildMovementTo(ret, defaultLocationId);

                                if (pass.exists(#ToLocationId))
                                {
                                    pass.remove(#ToLocationId);
                                }
                            }

                            if (pass.exists(#LicensePlateId))
                            {
                                if (_buttonClicked != #RFMoveLP && !autoClickMoveLP)
                                {
                                    inventDim = pass.createInventDimFromPass();

                                    fullLP = workExecute.validateMovementLPQty(inventDim,
                                                                                pass.lookupStr(#ItemId),
                                                                                pass.lookupNum(#Qty),
                                                                                pass.lookupStr(#UOM));
                                }

                                if (!fullLP && _buttonClicked != #RFMoveLP && !pass.exists(#MoveNest) && !autoClickMoveLP)
                                {
                                    pass.insert(#OrigLP, pass.lookup(#LicensePlateId));
                                    pass.insert(#SplittingLP, '1');
                                }
                            }

                            if (pass.exists(#MoveNest))
                            {
                                ret = conNull();
                                ret = this.buildNestMovementTo(ret, defaultLocationId);
                            }
                            else
                            {
                                ret = conNull();
                                ret = this.buildMovementTo(ret, defaultLocationId);
                            }
                        }

                        pass.remove(#Initiation);
                    }

                    if (pass.lookupStr(WHSWorkExecuteDisplayMovementControls::MergeContainerId) != '')
                    {
                        pass.insert(WHSWorkExecuteDisplayMovementControls::MergeMoveContainer, 1);
                    }
                }
                else
                {
                    ret = con;
                }
                break;

            case 2:
                boolean displayContainerType = WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DisplayContainerTypeCode;

                var locIdentifier =
                            this.indexOfBuildControlFromContainer(con, #LocOrLP) > 0
                            ? this.getControlDataFromContainer(con, #LocOrLP)
                            : this.getControlDataFromContainer(con, #WMSLocationId);

                boolean skipLocOrLPValidation;

                // This section initializes values directly from the form container; however, that is no longer valid and pass already updated when this executes again after scanning catch weight tags.
                if (!(pass.exists(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt)
                    && WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId))
                    && WHSInventTable::catchWeightTagDimensionTrackingMethod(pass.lookup(#ItemId)) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions))
                {
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
                    {
                        pass.insert(#NewInventoryStatusId, this.getControlDataFromContainer(con, #InventoryStatus));
                        pass.insert(#SelectedValue, pass.lookup(#NewInventoryStatusId));
                    }

                    skipLocOrLPValidation = this.shouldSkipLocOrLPValidation(pass.exists(#NewInventoryStatusId), pass.lookup(#MenuItem), locIdentifier);

                    if (skipLocOrLPValidation)
                    {                
                        if (pass.exists(#MoveLP) && WMSLocation::whsGetLocationId(locIdentifier, pass.lookup(#InventLocationId)))
                        {
                            pass.insert(#LocOrLP, WMSLocation::whsGetLocationId(locIdentifier, pass.lookup(#InventLocationId)));
                            pass.insert(#ToLocationId, pass.lookup(#LocOrLP));
                        }
                        if (!pass.exists(#ToLocationId) || pass.lookupStr(#LocOrLP) != locIdentifier)
                        {
                            pass.insert(#LocOrLP, locIdentifier);
                        
                            WMSLocationId wmslocationId = WMSLocation::whsGetLocationId(pass.lookup(#LocOrLP), pass.lookup(#InventLocationId));
                            if (WHSLicensePlate::exist(pass.lookup(#LocOrLP)))
                            {
                                pass.remove(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck);
                                pass.insert(#ToLicensePlateId, pass.lookup(#LocOrLP));
                                pass.insert(#ToLocationId, workExecute.getLicensePlateLocation(pass.lookup(#InventLocationId),
                                                                                               InventLocation::find(pass.lookup(#InventLocationId)).InventSiteId,
                                                                                               pass.lookup(#ToLicensePlateId)));

                                if (pass.lookup(#ToLocationId) == '')
                                {
                                    pass.remove(#ToLicensePlateId);
                                    pass.remove(#ToLocationId);

                                    if (wmslocationId)
                                    {
                                        this.processToLocation(con);
                                    }
                                    else
                                    {
                                        throw error("@WAX1159");
                                    }
                                }
                                else if (this.existToLocationWithLocationOrLPCheck(wmslocationId))
                                {
                                    ret = this.buildLocOrLPCheck(ret);
                                    step = #LocOrLPCheck;
                                    break;
                                }
                            }
                            else if (wmslocationId)
                            {
                                this.processToLocation(con);
                            }
                            else
                            {
                                throw error("@WAX755");
                            }
                        }
                        else if (WMSLocation::find(pass.lookup(#ToLocationId), pass.lookup(#InventLocationId)).whsLocationIsLPControlled())
                        {
                            // If container type is displayed and license plate value was updated, don't set To LP so container type can also be updated.
                            if (displayContainerType)
                            {
                                if (pass.hasValue(#Initiation))
                                {
                                    pass.insert(#TargetLicensePlateId, this.getControlDataFromContainer(con, #LicensePlateId));

                                    if (pass.hasValue(#TargetLicensePlateId))
                                    {
                                        pass.remove(#Initiation);
                                    }
                                    if (this.indexOfBuildControlFromContainer(con, #ContainerType) > 0)
                                    {
                                        pass.insert(#ContainerType, this.getControlDataFromContainer(con, #ContainerType));
                                    }
                                }
                                else if (pass.exists(#TargetLicensePlateId)
                                        &&  pass.lookup(#TargetLicensePlateId) == this.getControlDataFromContainer(con, #LicensePlateId))
                                {
                                    str toLicensePlateId = pass.lookup(#TargetLicensePlateId);
                                    pass.insert(#ToLicensePlateId, toLicensePlateId);

                                    if (WMSLocation::exist(toLicensePlateId, pass.lookup(#InventLocationId)))
                                    {
                                        pass.remove(#ToLicensePlateId);
                                        pass.remove(#TargetLicensePlateId);
                                        throw error(strFmt("@WAX:Error_LicensePlateIdCannotBeSameAsExistingLocationId", toLicensePlateId));
                                    }

                                    if (this.indexOfBuildControlFromContainer(con, #ContainerType) > 0)
                                    {
                                        pass.insert(#ContainerType, this.getControlDataFromContainer(con, #ContainerType));
                                        if (pass.exists(#AlreadyHaveLP))
                                        {
                                            pass.remove(#AlreadyHaveLP);
                                        }
                                    }

                                    WHSLicensePlate::createLicensePlate(toLicensePlateId, true, this.getDefaultContainerTypeCode());
                                }
                                else
                                {
                                    // Find the container type value in the mobile device container and set the pass container type value
                                    if (this.indexOfBuildControlFromContainer(con, #ContainerType) > 0)
                                    {
                                        pass.insert(#ContainerType, this.getControlDataFromContainer(con, #ContainerType));
                                    }

                                    pass.insert(#TargetLicensePlateId, this.getControlDataFromContainer(con, #LicensePlateId));
                                }
                            }
                            else
                            {
                                str toLicensePlateId = this.getControlDataFromContainer(con, #LicensePlateId);
                                pass.insert(#ToLicensePlateId, toLicensePlateId);

                                if (WMSLocation::exist(toLicensePlateId, pass.lookup(#InventLocationId)) &&
                                    !pass.exists(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck))
                                {
                                    pass.remove(#ToLicensePlateId);
                                    throw error(strFmt("@WAX:Error_LicensePlateIdCannotBeSameAsExistingLocationId", toLicensePlateId));
                                }

                                WHSLicensePlate::createLicensePlate(toLicensePlateId, true, this.getDefaultContainerTypeCode());
                            }
                        }
                    }
                }

                if (skipLocOrLPValidation)
                {
                    this.validateToLocation();
                }

                if ((pass.exists(#ToLicensePlateId) && pass.lookup(#ToLicensePlateId) != '' && pass.exists(#ToLocationId)) ||
                    (pass.exists(#ToLocationId) && !WMSLocation::find(pass.lookup(#ToLocationId), pass.lookup(#InventLocationId)).whsLocationIsLPControlled()))
                {
                    if (!pass.exists(#ToLicensePlateId) || pass.lookup(#ToLicensePlateId) == '')
                    {
                        pass.insert(#ToLicensePlateId, WHSLicensePlate::generateLicensePlateId(pass.lookup(#ItemId), pass.lookup(#UOM)));
                    }

                    // Build the InventDim to pass to Work Creation
                    inventDim               = pass.createInventDimFromPass();
                    inventDim.InventSiteId  = InventLocation::find(pass.lookup(#InventLocationId)).InventSiteId;
                    // If Inventory status is not displayed need to resolve a default value
                    if (!WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
                    {
                        WHSInventStatusId resolvedInventoryStatusId = this.resolveInventoryStatusId(inventDim);

                        if (resolvedInventoryStatusId)
                        {
                            pass.insert(#InventoryStatus, resolvedInventoryStatusId);

                            pass.insert(#NewInventoryStatusId, resolvedInventoryStatusId);
                            pass.insert(#SelectedValue, pass.lookup(#NewInventoryStatusId));
                            inventDim.InventStatusId = resolvedInventoryStatusId;
                        }
                    }

                    if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt)
                        && !pass.exists(#MoveLP)
                        && WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId))
                        && WHSInventTable::catchWeightTagDimensionTrackingMethod(pass.lookup(#ItemId)) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt, 1);

                        WHSCatchWeightTagAutoSelect tagAutoSelect = WHSCatchWeightTagAutoSelectMovement::newFromParams(mode, pass);
                        if (tagAutoSelect.canUseAutoSelection())
                        {
                            tagAutoSelect.process();
                        }
                        else
                        {
                            ret = this.buildWeightCapture(conNull());
                            step = #CWOutboundWeightCapture;
                            break;
                        }
                    }

                    if (!pass.exists(#NewInventoryStatusId) && pass.exists(#LicensePlateId) && pass.exists(#ToLicensePlateId) && pass.lookup(#LicensePlateId) != pass.lookup(#ToLicensePlateId))
                    {
                        tmpInventStatus = this.getDefaultLPInventStatusId(pass.lookup(#ToLicensePlateId));

                        if (tmpInventStatus)
                        {
                            pass.insert(#NewInventoryStatusId, tmpInventStatus);
                        }
                    }

                    WHSWorkCreateMovementBasic createMovement = WHSWorkCreateMovementBasic::newFromParms(userId,
                                                                                                         pass.exists(#MoveLP) ? '' : pass.lookupStr(#ItemId),
                                                                                                         pass.lookupNum(#Qty),
                                                                                                         pass.lookup(#UOM),
                                                                                                         inventDim,
                                                                                                         pass.lookupStr(#LicensePlateId),
                                                                                                         pass.lookup(#WMSLocationId),
                                                                                                         pass.lookup(#ToLocationId),
                                                                                                         pass.lookupStr(#ToLicensePlateId),
                                                                                                         pass.lookupStr(#InventoryStatus),
                                                                                                         pass.lookupStr(#NewInventoryStatusId));

                    // If we might need to handle associated work (removing reservations), confirm with the user in case of anchoring that it's ok to proceed
                    if (!pass.exists(ConfirmAnchoring) && createMovement.mustHandleReservationRemoval())
                    {
                        WHSWorkInventTransReservationCollectionBuilder workInventTransReservationCollectionBuilder = createMovement.getWorkInventTransReservationCollectionBuilder();

                        if (!createMovement.validateAnchoring(workInventTransReservationCollectionBuilder.getWorkLineEnumerator()))
                        {
                            pass.insert(ConfirmAnchoring, true);
                            ret = this.addErrorLabel(ret, "@WAX:MoveInventoryWithWork_ConfirmAnchoredWorkMove", WHSRFColorText::Warning);
                            ret = this.buildMovementTo(ret, pass.lookupStr(#ToLocationId));
                            break;
                        }
                    }

                    WHSInventoryMovementOperationParameters movementParameters = this.createNonNestedLPMovementParameters(inventDim);

                    movementController = WHSWorkCreateMovementController::newFromMovementParameters(movementParameters);
                    movementController.processMovementWork();

                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                    pass = this.resetPassthrough(ret, false);
                    step = 0;
                    this.populateDefaultDataForStep(conNull());
                    ret = this.buildMovementFrom(ret, pass.lookupStr(#WMSLocationId));
                }
                else
                {
                    ret = conNull();
                    ret = this.buildMovementTo(ret, pass.lookupStr(#ToLocationId));
                }
                break;

            // Case for moving nested LPN's
            case 3:
                pass.insert(#ToLocationId, conPeek(conPeek(con, 7 + hasError), #data));

                this.validateToLocation();

                inventDim = pass.createInventDimFromPass();
                inventDim.InventSiteId = InventLocation::find(pass.lookup(#InventLocationId)).InventSiteId;

                // If Inventory status is not displayed need to resolve a default value
                if (   !WHSContainerTable::isLicensePlateIdUsedForContainerGrouping(pass.lookup(#LicensePlateId))
                    && !WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
                {
                    WHSInventStatusId resolvedInventoryStatusId = this.resolveInventoryStatusId(inventDim);

                    if (resolvedInventoryStatusId)
                    {
                        pass.insert(#InventoryStatus, resolvedInventoryStatusId);
                        pass.insert(#NewInventoryStatusId, resolvedInventoryStatusId);
                        pass.insert(#SelectedValue, pass.lookup(#NewInventoryStatusId));

                        inventDim.InventStatusId = resolvedInventoryStatusId;
                    }
                }

                WHSInventoryMovementOperationParameters movementParameters = this.createNestedLPMovementParameters(inventDim);

                movementController = WHSWorkCreateMovementController::newFromMovementParameters(movementParameters);
                movementController.processMovementWork();

                ret = conNull();
                ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                pass = this.resetPassthrough(ret, false);
                step = 0;
                this.populateDefaultDataForStep(conNull());
                ret = this.buildMovementFrom(ret, pass.lookupStr(#WMSLocationId));
                break;

            case #CWOutboundWeightCapture:
                ret = this.processWeightCapture(hasError, con);
                break;

            case #LocOrLPCheck:

                if (pass.exists(#Initiation))
                {
                    ret = this.processLocOrLPCheckFrom(con, _buttonClicked);
                }
                else
                {
                    ret = this.processLocOrLPCheckTo(con, _buttonClicked);
                }

                break;
        }

        ret = this.addButtons(ret);

        if (addCancel)
        {
            ret = this.addCancelButton(ret);
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveInventoryStatusId</Name>
				<Source><![CDATA[
    private WHSInventStatusId resolveInventoryStatusId(InventDim _inventDim)
    {
        WHSInventStatusId resolvedInventoryStatusId;

        using (var context = WHSWorkExecuteDisplayGetUniqueInventStatusWithPhysicalOnHandThrowContext::construct())
        {
            resolvedInventoryStatusId = WhsWorkExecuteDisplay::getUniqueInventStatusWithPhysicalOnHand(pass.lookup(#ItemId), _inventDim);
        }

        return resolvedInventoryStatusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existToLocationWithLocationOrLPCheck</Name>
				<Source><![CDATA[
    private boolean existToLocationWithLocationOrLPCheck(WMSLocationId _wmslocationId)
    {
        if (_wmslocationId)
        {
            
            return true;
        }
        
        return false;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNonNestedLPMovementParameters</Name>
				<Source><![CDATA[
    private WHSInventoryMovementOperationParameters createNonNestedLPMovementParameters(InventDim _inventDim)
    {
        WHSInventoryMovementOperationParameters movementParameters = this.createMovementParameters(_inventDim);

        movementParameters.ItemId = pass.lookupStr(#ItemId);
        movementParameters.SelectedValueUom = pass.lookup(#SelectedValueUOM);
        movementParameters.ToLicensePlateId = pass.lookupStr(#ToLicensePlateId);
        movementParameters.MergeContainerId = pass.lookupStr(WHSWorkExecuteDisplayMovementControls::MergeContainerId);
        movementParameters.IsMoveLP = pass.exists(#MoveLP);
        movementParameters.IsNestedLPMove = false;
        movementParameters.IsAnchoringCheckedInCurrentTransaction = true;
        movementParameters.IsAnchoringConfirmed = pass.exists(ConfirmAnchoring);
        movementParameters.CapturedWeight = pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight);
        movementParameters.ScannedTags = str2con(pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList));

        return movementParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNestedLPMovementParameters</Name>
				<Source><![CDATA[
    private WHSInventoryMovementOperationParameters createNestedLPMovementParameters(InventDim _inventDim)
    {
        WHSInventoryMovementOperationParameters movementParameters = this.createMovementParameters(_inventDim);

        movementParameters.IsNestedLPMove = true;

        return movementParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMovementParameters</Name>
				<Source><![CDATA[
    private WHSInventoryMovementOperationParameters createMovementParameters(InventDim _inventDim)
    {
        WHSInventoryMovementOperationParameters movementParameters = WHSInventoryMovementOperationParameters::construct();

        movementParameters.FromInventDim = _inventDim;
        movementParameters.Qty = pass.lookupNum(#Qty);
        movementParameters.Uom = pass.lookup(#UOM);
        movementParameters.ToLocationId = pass.lookup(#ToLocationId);
        movementParameters.ToInventStatusId = pass.lookupStr(#NewInventoryStatusId);
        movementParameters.IsLocationAndLicensePlateConfirmed = pass.exists(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck);
        movementParameters.MenuItemName = pass.lookupStr(#MenuItem);
        movementParameters.UserId = userId;

        return movementParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLocOrLPCheckFrom</Name>
				<Source><![CDATA[
    private container processLocOrLPCheckFrom(container _con, str _buttonClicked)
    {
        step = 1;

        var locOrLpIdentifier = pass.lookupStr(#LocOrLP);
        container ret = conNull();
        
        pass = this.resetPassthrough(ret, false);
        pass.insert(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck, _buttonClicked);
        pass.insert(#Initiation, '1');

        ret = this.updateModeStepPass(ret, mode, step, pass);
        ret = this.buildMovementFrom(ret);
        ret = this.setControlDataFromContainer(ret, #LocOrLP, locOrLpIdentifier);
        ret = this.displayForm(ret, _buttonClicked);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLocOrLPCheckTo</Name>
				<Source><![CDATA[
    private container processLocOrLPCheckTo(container _con, str _buttonClicked)
    {
        step = 2;
        pass.insert(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck, _buttonClicked);

        if (_buttonClicked == WHSWorkExecuteDisplayLocOrLPCheckControls::ConfirmLocation)
        {
            pass.insert(#ToLocationId, pass.lookupStr(#LocOrLP));
            pass.remove(#ToLicensePlateId);
        }
        else
        {
            pass.insert(#LocOrLP, pass.lookupStr(#ToLocationId));
        }

        container ret = this.buildMovementTo(conNull(), pass.lookupStr(#LocOrLP));
        ret = this.setControlDataFromContainer(ret, #LicensePlateId, pass.lookupStr(#ToLicensePlateId));

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processToLocation</Name>
				<Source><![CDATA[
    private void processToLocation(container _con)
    {
        pass.insert(#ToLocationId, WMSLocation::whsGetLocationId(pass.lookup(#LocOrLP), pass.lookup(#InventLocationId)));

        if (this.indexOfBuildControlFromContainer(_con, #LicensePlateId) > 0)
        {
            WHSLicensePlateId toLicensePlateId = this.getControlDataFromContainer(_con, #LicensePlateId);

            WHSWorkCreateMovementValidator::validateToLicensePlateId(
                pass.lookup(#InventLocationId),
                toLicensePlateId,
                pass.exists(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck));

            pass.insert(#ToLicensePlateId, toLicensePlateId);

            WHSLicensePlate::createLicensePlate(toLicensePlateId, true, this.getDefaultContainerTypeCode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDefaultDataForStep</Name>
				<Source><![CDATA[
    private container populateDefaultDataForStep(container _con)
    {
        boolean hasError = this.hasError(_con);

        if (!step
            && pass.exists(#MenuItem)
            && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DefaultData)
        {
            _con = this.buildMovementFrom(conNull());
            _con = this.updateModeStepPass(_con, mode, step, pass);
            pass.insert(#Initiation, 1);
            step = 1;
        }
        
        container tmpFieldValues;
     
        if (step)
        {
            if (hasError)
            {
                _con = conDel(_con, 3, 1);
            }

            [_con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, _con, pass);

            if (conLen(tmpFieldValues) > 0)
            {
                WHSRFPassthrough fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
            }

            hasError = this.hasError(_con);
        }
        else
        {
            step = 1;
            pass.insert(#Initiation, 1);
        }
        
        return [hasError, _con, tmpFieldValues];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGenerateNewLP</Name>
				<Source><![CDATA[
    private boolean validateGenerateNewLP()
    {
        if (WMSLocation::find(pass.parmToLocationId(), pass.lookup(#InventLocationId)).whsLocationIsLPControlled()
            && !WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DisplayContainerTypeCode
            && pass.exists(#LicensePlateId)
            && pass.exists(#ItemId)
            && pass.lookup(#ItemId) != ''
            && !pass.exists(#MoveLP)
            && WHSLicensePlate::getTotalHandlingQtyOnLicensePlateWithDelta(pass.lookup(#LicensePlateId)) > WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                                                                                  pass.lookup(#SelectedValueUOM),
                                                                                                                                  pass.lookupNum(#Qty),
                                                                                                                                  pass.createInventDimFromPass().InventDimId))
        {
            return true;
        }
          
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNotMovingContainerToDifferentPackingStation</Name>
				<Source><![CDATA[
    private void validateNotMovingContainerToDifferentPackingStation(WMSLocation _toLocation, WHSLicensePlateId _licensePlateId = pass.lookupStr(#LicensePlateId))
    {
        WHSContainerTable containerTable = WHSContainerTable::findByContainerId(_licensePlateId);

        if (containerTable && !containerTable.isOriginalPackingStation(_toLocation) && _toLocation.isPackingLocation())
        {
            pass.remove(#ToLocationId);
            throw error("@WAX:ErrorContainerCannotBeMovedToDifferentPackingStation");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateToLocation</Name>
				<Source><![CDATA[
    protected void validateToLocation()
    {
        WMSLocationId toLocationId = pass.lookupStr(#ToLocationId);
        pass.remove(#ToLocationId);

        WHSWorkCreateMovementValidator::validateToLocation(
            pass.lookupStr(#InventLocationId),
            toLocationId,
            pass.lookupStr(#LicensePlateId),
            false);

        pass.add(#ToLocationId, toLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates target warehouse location.
    /// </summary>
    /// <param name="_location">Warehouse location record to be validated.</param>
    protected void validateTargetLocation(WMSLocation _location)
    {
        if (_location && _location.LocProfileId == WHSParameters::find().UserLocType)
        {
            pass.remove(#ToLocationId);
            throw error("@WAX3130");
        }

        this.validateNotMovingContainerToDifferentPackingStation(_location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateItemInfoForContainer</Name>
				<Source><![CDATA[
    private str generateItemInfoForContainer()
    {
        str itemInfo = this.generateItemInformationForContainerId(pass.lookupStr(#LicensePlateId));

        if (pass.lookupStr(WHSWorkExecuteDisplayMovementControls::MergeContainerId) != ''
            && itemInfo == '')
        {
            // If no items were found use container Id for containerized containers.
            itemInfo = this.generateItemInformationForContainerId(pass.lookupStr(WHSWorkExecuteDisplayMovementControls::MergeContainerId));
        }

        return itemInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateItemInformationForContainerId</Name>
				<Source><![CDATA[
	private str generateItemInformationForContainerId(WHSContainerId _containerId)
    {
        WHSContainerLine    containerLine;
        InventHandlingQty   containerLinesQty;
        ItemId              itemId;
        UnitOfMeasureSymbol unitSymbol;
        Counter             itemIdCount;

        while select containerLine
            where containerline.ContainerId == _containerId
        {
            if (!itemId)
            {
                itemId = containerLine.ItemId;
                unitSymbol = WHSCatchWeightHelper::inventHandlingUnitId(itemId);
            }
            else
            {
                itemId = "@WAX402";
                unitSymbol = '';
            }

            containerLinesQty += containerLine.getInventoryHandlingQuantity();
            itemIdCount++;
        }
  
		return this.generateMultipleItemsInfoForLicensePlate(itemIdCount, itemId, containerLinesQty, unitSymbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInfoForContainerGroup</Name>
				<Source><![CDATA[
    private str generateInfoForContainerGroup()
    {
        WHSContainerTable containerTable;

        select count (RecId) from containerTable
            where containerTable.ContainerGroupingLicensePlateId == pass.lookupStr(#LicensePlateId);

        return strFmt("@WAX:NumberOfContainersInContainerGroup", containerTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipLocOrLPValidation</Name>
				<Source><![CDATA[
    private boolean shouldSkipLocOrLPValidation(boolean _newInventoryStatusExists, WHSMenuItemName _whsMenuItemName, str _locIdentifier)
    {
        WHSRFMenuItemTable whsRFMenuItemTable = WHSRFMenuItemTable::find(_whsMenuItemName);

        return (_newInventoryStatusExists && _locIdentifier)
            || !(whsRFMenuItemTable.DefaultData
            && whsRFMenuItemTable.RFDisplayStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWeightCapture</Name>
				<Source><![CDATA[
    private container processWeightCapture(boolean _hasError, container _con)
    {
        container           ret = _con;
        container           tmpFieldValues;
        WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean             hasError;
        boolean             complete;

        if (_hasError)
        {
            ret = conDel(ret, #RFErrorLoc, 1);
        }

        [ret, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, ret, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);
        hasError = this.hasError(ret);

        if (hasError)
        {
            return ret;
        }

        if (!fieldValues.empty())
        {
            [ret, complete] = this.processFieldValues(ret, fieldValues);

            if (complete)
            {
                if (WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId)))
                {
                    // Update old catch weight tag with new info
                    WHSCatchWeightTag catchWeightTag = WHSCatchWeightTag::find(pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag));

                    if (!catchWeightTag)
                    {
                        throw error("@WAX:MobileDeviceControlValidationInvalidCatchWeightTag");
                    }
                    else if (this.isCatchWeightTagScanned(catchWeightTag.RecId))
                    {
                        throw error(strFmt("@WAX:MobileDeviceControlValidationCatchWeightTagInvalidStatus", catchWeightTag.TagNumber));
                    }

                    this.trackScannedCatchWeightTags(catchWeightTag.RecId);

                    // Remove current Tag Id and increment Tag Counter
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag);
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                    // Increment total catch weight value
                    if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight))
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, catchWeightTag.CapturedWeight);
                    }
                    else
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight) + catchWeightTag.CapturedWeight));
                    }
                }
                else
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                    // Increment total outbound weight for picking quantity
                    if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight))
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight));
                    }
                    else
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight) + pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight)));
                    }

                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight);
                }

                // Check to see if weight has been captured for total quantity
                if (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) > pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter);
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty);

                    step = WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId)) ? 2 : 1;
                    ret = [this.buildControl(#RFLabel, #Scan, "@WAX:CaptureWeight", 1, '', #WHSRFUndefinedDataType, '', 0)];
                    ret = this.updateModeStepPass(ret, mode, step, pass);
                    ret = this.displayForm(ret);
                }
                else
                {
                    ret = this.buildWeightCapture(conNull());
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>