<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationVendInvoiceInfoTableDataPersistence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationVendInvoiceInfoTableDataPersistence</c> class persists data to <c>VendInvoiceInfoTable</c>, etc.
/// </summary>
[TaxIntegrationDataPersistence(tableStr(VendInvoiceInfoTable))]
public class TaxIntegrationVendInvoiceInfoTableDataPersistence
    extends TaxIntegrationPurchTableDataPersistence
{
    protected VendInvoiceInfoTable vendInvoiceInfoTable;
    protected VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
    protected VendInvoiceInfoLine vendInvoiceInfoLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordPurchaseFlight::instance().isEnabled() && document.getLocalRecord())
        {
            TaxUpdateVendInvoiceInfoTableContext context = TaxUpdateVendInvoiceInfoTableContext::current();
            if (context && context.parmVendInvoiceInfoTable()
                && (context.parmVendInvoiceInfoTable().RecId == document.getLocalRecord().RecId
                    && context.parmVendInvoiceInfoTable().TableId == document.getLocalRecord().TableId))
            {
                vendInvoiceInfoTable = context.parmVendInvoiceInfoTable();
            }
            else
            {
                vendInvoiceInfoTable = document.getLocalRecord();
            }

            vendInvoiceInfoTable.selectForUpdate(true);

            return SysDaQueryObjectBuilder::from(this.vendInvoiceInfoSubTable)
                .forUpdate()
                    .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, ParmId))
                        .isEqualToLiteral(this.vendInvoiceInfoTable.ParmId)
                    .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, TableRefId))
                        .isEqualToLiteral(this.vendInvoiceInfoTable.TableRefId)
                    .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, OrigPurchId))
                        .isEqualToLiteral(this.vendInvoiceInfoTable.PurchId)
                .outerJoin(this.purchTable).forUpdate() // alternate key
                    .where(this.purchTable, fieldStr(PurchTable, PurchId))
                        .isEqualToLiteral(this.vendInvoiceInfoTable.PurchId)
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.vendInvoiceInfoTable)
                .forUpdate()
                .where(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .outerJoin(this.vendInvoiceInfoSubTable) // alternate key
                    .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, ParmId))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, ParmId))
                    .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, TableRefId))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, TableRefId))
                    .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, OrigPurchId))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, PurchId))
                .outerJoin(this.purchTable).forUpdate() // alternate key
                    .where(this.purchTable, fieldStr(PurchTable, PurchId))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, PurchId))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.vendInvoiceInfoLine)
            .forUpdate()
            .where(this.vendInvoiceInfoLine, fieldStr(VendInvoiceInfoLine, ParmId))
                .isEqualToLiteral(this.vendInvoiceInfoTable.ParmId)
            .where(this.vendInvoiceInfoLine, fieldStr(VendInvoiceInfoLine, TableRefId))
                .isEqualToLiteral(this.vendInvoiceInfoTable.TableRefId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        if (this.vendInvoiceInfoSubTable)
        {
            VendInvoiceInfoSubTable vendInvoiceInfoSubTableLocal;

            // Scenario:
            // 1. Create two purchase orders with charges in header.
            // 2. Add two or more purchase orders to a pending invoice.
            // 3. Create charges in pending invoice header.
            // Query should find all header charges in pending invoice with two or more purchase orders,
            // includes the header charges in table VendInvoiceInfoSubTable and VendInvoiceInfoTable.

            // SELECT * FROM MarkupTrans
            //     LEFT JOIN VendInvoiceInfoSubTable
            //         ON VendInvoiceInfoSubTable.ParmId = this.vendInvoiceInfoSubTable.ParmId
            //             AND MarkupTrans.TransTableId = TableId(VendInvoiceInfoSubTable)
            //             AND MarkupTrans.TransRecId = VendInvoiceInfoSubTable.RecId
            //     WHERE VendInvoiceInfoSubTable.RECID IS NOT NULL
            //         OR (MarkupTrans.TransTableId = VendInvoiceInfoTable.TableId
            //             AND MarkupTrans.TransRecId = this.vendInvoiceInfoTable.RecId)
            return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
                .forUpdate()
                .wherever(new SysDaOrExpression(
                    // Find header charges on VendInvoiceInfoTable
                    new SysDaAndExpression(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId)),
                            new SysDaValueExpression(this.vendInvoiceInfoTable.TableId)),
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId)),
                            new SysDaValueExpression(this.vendInvoiceInfoTable.RecId))),
                    // VendInvoiceInfoSubTable.RECID IS NOT NULL to find header charges on VendInvoiceInfoSubTable
                    new SysDaFieldExpression(vendInvoiceInfoSubTableLocal, fieldStr(VendInvoiceInfoSubTable, RecId))))
                .outerJoin(vendInvoiceInfoSubTableLocal)
                    // ON clause
                    .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                        .isEqualToLiteral(this.vendInvoiceInfoSubTable.TableId)
                    .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                        .isEqualTo(vendInvoiceInfoSubTableLocal, fieldStr(VendInvoiceInfoSubTable, RecId))
                    .where(vendInvoiceInfoSubTableLocal, fieldStr(VendInvoiceInfoSubTable, ParmId))
                        .isEqualToLiteral(this.vendInvoiceInfoSubTable.ParmId)
                .toSysDaQueryObject();
        }
        else if (this.vendInvoiceInfoSubTable)
        {
            return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
                .forUpdate()
                .wherever(new SysDaOrExpression(
                    new SysDaAndExpression(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId)), new SysDaValueExpression(this.vendInvoiceInfoSubTable.TableId)),
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId)), new SysDaValueExpression(this.vendInvoiceInfoSubTable.RecId))),
                    new SysDaAndExpression(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId)), new SysDaValueExpression(this.vendInvoiceInfoTable.TableId)),
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId)), new SysDaValueExpression(this.vendInvoiceInfoTable.RecId)))))
                .toSysDaQueryObject();
        }
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .forUpdate()
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.vendInvoiceInfoTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.vendInvoiceInfoTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .forUpdate()
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.vendInvoiceInfoLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.vendInvoiceInfoLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line of the document.
    /// </summary>
    /// <returns>The current line of the document</returns>
    protected TaxIntegrationLineObject getLine()
    {
        TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.vendInvoiceInfoLine.TableId, this.vendInvoiceInfoLine.RecId);
        if (!document.checkLine(localId))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:LineOnDocumentNotFound", localId, document.getLocalId())));
            return null;
        }

        return document.getLine(localId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document.
    /// </summary>
    /// <returns>Always true.</returns>
    protected boolean saveDocument()
    {
        if (this.vendInvoiceInfoTable.isNonPO() || this.vendInvoiceInfoTable.isAdvance())
        {
            TaxIntegrationTaxIdUtility::saveTaxIDFromDocumentToTable(document, vendInvoiceInfoTable);
        }
        else
        {
            TaxIntegrationTaxIdUtility::saveTaxIDFromDocumentToTable(document, purchTable);
        }

        // Don't save list code for purchase order vendor invoice.
        // For normal purchase order invoice, list code is saved in PurchTable. It should not be updated during invoicing.
        // For purchase order prepayment invoice, there is no list code.
        if (this.vendInvoiceInfoTable.isNonPO())
        {
            TaxIntegrationListCodeUtility::saveListCodeFromDocumentToTable(document, vendInvoiceInfoTable);
        }

        if (TaxIntegrationNumberSequenceInDataPersistencePurchFlight::instance().isEnabled()
           && TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
        {
            this.saveNumberSequenceGroupToTable();
        }

        if (this.isTaxIntegrationEnabledForTaxSolutionProvider 
            && this.isTaxIntegrationISVAccrueUseTaxEnabled 
            && document.getAccrueSalesTaxType() == TaxAccrueSalesTaxType::Advanced)
        {
            vendInvoiceInfoTable.VendorChargedTaxTolerance = document.getVendorChargedTaxTolerance();
            vendInvoiceInfoTable.VendorChargedTaxAssessment = document.getVendorChargedTaxAssessment();
            vendInvoiceInfoTable.doUpdate();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean saveLine(TaxIntegrationLineObject _line)
    {
        // no super();

        if (!_line.isTaxable())
        {
            return true;
        }

        TaxGroup taxGroup = _line.getTaxGroup();
        TaxItemGroup taxItemGroup = _line.getTaxItemGroup();

        vendInvoiceInfoLine.TaxGroup = taxGroup;
        vendInvoiceInfoLine.TaxItemGroup = taxItemGroup;
        vendInvoiceInfoLine.doUpdate();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveNumberSequenceGroupToTable</Name>
				<Source><![CDATA[
    protected void saveNumberSequenceGroupToTable()
    {
        NumberSequenceGroupId numberSequenceGroupId = document.getNumberSequenceGroupId();

        if (numberSequenceGroupId && vendInvoiceInfoTable.numberSequenceGroup != numberSequenceGroupId && vendInvoiceInfoTable.isNonPO())
        {
            vendInvoiceInfoTable.numberSequenceGroup = numberSequenceGroupId;
            vendInvoiceInfoTable.doUpdate();
        }

        if (!vendInvoiceInfoTable.isNonPO())
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>