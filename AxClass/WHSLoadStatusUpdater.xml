<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadStatusUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Updates the load status of the <c>WHSLoadTable</c> record.
/// </summary>
public class WHSLoadStatusUpdater
{
    private WHSLoadTable        loadTable;
    private WHSLoadLine         updatedLoadLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSLoadStatusUpdater construct()
    {
        return new WHSLoadStatusUpdater();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSLoadStatusUpdater</c> class, based on a specific load ID.
    /// </summary>
    /// <param name = "_loadId">The current load ID of the <c>WHSLoadTable</c> record for which the status updates will occur.</param>
    /// <returns>A new instance of the <c>WHSLoadStatusUpdater</c> class</returns>
    public static WHSLoadStatusUpdater newFromLoadId(WHSLoadId _loadId)
    {
        WHSLoadTable localLoadTable = WHSLoadTable::find(_loadId);

        if (_loadId && !localLoadTable)
        {
            throw error(strFmt("@WAX:Error_LoadDoesNotExist", _loadId));
        }

        WHSLoadStatusUpdater loadStatusUpdater = WHSLoadStatusUpdater::construct();
        loadStatusUpdater.parmLoadTable(localLoadTable);

        return loadStatusUpdater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>WHSLoadTable</c> record for which the status updates will occur.
    /// </summary>
    /// <param name = "_loadTable">The current <c>WHSLoadTable</c> record</param>
    /// <returns>The <c>WHSLoadTable</c> record</returns>
    public WHSLoadTable parmLoadTable(WHSLoadTable _loadTable = loadTable)
    {
        loadTable = _loadTable;

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatedLoadLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLoadLine parmUpdatedLoadLine(WHSLoadLine _updatedLoadLine = updatedLoadLine)
    {
        updatedLoadLine = _updatedLoadLine;

        return updatedLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenLoadLineUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status, if required, when the load line gets updated.
    /// </summary>
    public void updateWhenLoadLineUpdated()
    {
        boolean disableCache;
        #OCCRetryCount

        try
        {
            ttsbegin;
            if (disableCache)
            {
                loadTable = WHSLoadTable::find(loadTable.LoadId, false, disableCache);
            }

            if (this.allowStatusChangeForMultiplePackSlipPostPerLoad())
            {
                this.determineAndUpdateInboundLoadStatus();
            }
            else if (loadTable.LoadStatus > WHSLoadStatus::Open && !loadTable.hasWork())
            {
                WHSLoadTable::updateLoadStatus(loadTable.LoadId, WHSLoadStatus::Posted);
            }
            else
            {
                this.updateFromInProcessOrLoaded();
            }
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    // If we hit an update conflict we should avoid selecting the cached value for the load
                    disableCache = true;
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowStatusChangeForMultiplePackSlipPostPerLoad</Name>
				<Source><![CDATA[
    private boolean allowStatusChangeForMultiplePackSlipPostPerLoad()
    {
        boolean ret;

        if (loadTable.LoadDirection == WHSLoadDirection::Inbound)
        {
            boolean allowStatusChangeForInProcess = (loadTable.LoadStatus == WHSLoadStatus::InProcess
                                                    && updatedLoadLine.WorkCreatedQty > 0);

            ret = (loadTable.LoadStatus == WHSLoadStatus::Received 
                    || (loadTable.LoadStatus == WHSLoadStatus::Shipped && loadTable.LoadReceivingCompletedUTCDateTime)
                    || allowStatusChangeForInProcess);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenLoadLineDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status, if required, when the load line gets deleted.
    /// </summary>
    public void updateWhenLoadLineDeleted()
    {
        this.updateFromInProcessOrLoaded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenWorkClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status, if required, when the work gets closed.
    /// </summary>
    public void updateWhenWorkClosed()
    {
        this.updateLoadToInProcessOrLoaded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenWorkCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Update load status when work is created.
    /// </summary>
    /// <remarks>
    ///  It will retry without cache when conflict happens.
    /// </remarks>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    ///  Update conflict expection after retrying.
    /// </exception>
    public void updateWhenWorkCreated()
    {
        boolean disableCache;
        #OCCRetryCount

        if (loadTable.LoadStatus < WHSLoadStatus::Waved)
        {
			try
            {
                WHSLoadTable::updateLoadStatus(loadTable.LoadId, WHSLoadStatus::Waved, disableCache);
            }
            catch (Exception::UpdateConflict)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
				else
                {
					// If we hit an update conflict we should avoid selecting the cached value.
                    disableCache = true;
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenContainerDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status, if required, when the container gets deleted.
    /// </summary>
    /// <param name = "_containerId">The ID of the container that gets deleted</param>
    public void updateWhenContainerDeleted(WHSContainerId _containerId)
    {
        this.updateLoadToInProcessOrLoaded(_containerId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenContainerCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status, if required, when a container gets created.
    /// </summary>
    public void updateWhenContainerCreated()
    {
        this.updateToInProcessIfLoaded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenContainerClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status, if required, when the container gets closed.
    /// </summary>
    /// <param name = "_containerId">The ID of the container that gets closed</param>
    public void updateWhenContainerClosed(WHSContainerId _containerId)
    {
        this.updateLoadToInProcessOrLoaded(_containerId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenContainerReOpened</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status, if required, when the container gets reopened.
    /// </summary>
    public void updateWhenContainerReOpened()
    {
        this.updateToInProcessIfLoaded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadToInProcessOrLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status to Loaded, if the load is ready to be loaded; otherwise updates
    /// the status to In Process.
    /// </summary>
    private void updateLoadToInProcessOrLoaded(WHSContainerId _containerId = '')
    {
        WHSLoadStatus loadStatus = this.determineInProcessOrLoadedLoadStatus(_containerId);

        if (loadTable.LoadStatus != loadStatus)
        {
            WHSLoadTable::updateLoadStatus(loadTable.LoadId, loadStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromInProcessOrLoaded</Name>
				<Source><![CDATA[
    private void updateFromInProcessOrLoaded()
    {
        if (loadTable.LoadStatus >= WHSLoadStatus::InProcess && loadTable.LoadStatus < WHSLoadStatus::Shipped)
        {
            this.updateLoadToInProcessOrLoaded();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToInProcessIfLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status to In Process, if was initially set to Loaded; otherwise no updates occur.
    /// </summary>
    private void updateToInProcessIfLoaded()
    {
        if (loadTable.LoadStatus == WHSLoadStatus::Loaded)
        {
            WHSLoadTable::updateLoadStatus(loadTable.LoadId, WHSLoadStatus::InProcess);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenWorkStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status to In process. In case the status is already Received, no update occurs.
    /// </summary>
    public void updateWhenWorkStarted()
    {
        if (!(loadTable.LoadDirection == WHSLoadDirection::Inbound
            && loadTable.orig().LoadStatus == WHSLoadStatus::Received))
        {
            WHSLoadTable::updateLoadStatus(loadTable.LoadId, WHSLoadStatus::InProcess);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenLoadShipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status for ship confirm process.
    /// </summary>
    /// <param name = "_loadShipConfirmUTCDateTime">Date and time for ship confirming the load.</param>
    /// <returns>true if the load has been updated; otherwise false.</returns>
    [Hookable(false)]
    internal boolean updateWhenLoadShipConfirm(WHSLoadShipConfirmUTCDateTime _loadShipConfirmUTCDateTime)
    {
        if (!loadTable)
        {
            return false;
        }
        WHSLoadStatus origLoadStatus = loadTable.LoadStatus;
        loadTable.selectForUpdate(true);
        if (loadTable.LoadShipConfirmUTCDateTime == utcDateTimeNull())
        {
            loadTable.LoadShipConfirmUTCDateTime = _loadShipConfirmUTCDateTime;
        }
        loadTable.LoadStatus = loadTable.LoadDirection == WHSLoadDirection::Inbound
                            ? this.determineInboundLoadStatus()
                            : WHSLoadStatus::Shipped;
        loadTable.update();

        return loadTable.LoadStatus != origLoadStatus;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenVendPackingSlipPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status after posting of vendor's packing slip.
    /// </summary>
    public void updateWhenVendPackingSlipPosted()
    {
        this.determineAndUpdateInboundLoadStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenCancellingDeliverRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load status after cancelling quantity of Deliver Remainder.
    /// </summary>
    [Hookable(false)]
    internal void updateWhenCancellingDeliverRemainder()
    {
        this.determineAndUpdateInboundLoadStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAndUpdateInboundLoadStatus</Name>
				<Source><![CDATA[
    private void determineAndUpdateInboundLoadStatus()
    {
        if (loadTable.LoadDirection != WHSLoadDirection::Inbound)
        {
            return;
        }        
        
        WHSLoadTable::updateLoadStatus(loadTable.LoadId, this.determineInboundLoadStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInboundLoadStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the status of the inbound load based on load line status, work status and load record itself.
    /// </summary>
    /// <returns>Load status based on current data</returns>
    private WHSLoadStatus determineInboundLoadStatus()
    {
        WHSLoadStatus newStatus;

        if (WHSLoadTable::checkAllLinesReceivedForLoad(this.parmLoadTable().LoadId))
        {
            newStatus = WHSLoadStatus::Received;
        }
        else
        {
            newStatus = this.determineUnreceivedInboundLoadStatus();
        }

        return newStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineUnreceivedInboundLoadStatus</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLoadStatus determineUnreceivedInboundLoadStatus()
    {
        WHSLoadStatus newStatus;

        if (this.checkForInProcessOrClosedWork())
        {
            newStatus = WHSLoadStatus::InProcess;
        }
        else if (loadTable.LoadReceivingCompletedUTCDateTime 
            && WHSParameters::find().LoadReceivingCompletedPolicyForPurchaseOrders == WHSLoadReceivingCompletedPolicyForPurchaseOrders::EnabledWithAutoPost)
        {
            newStatus = WHSLoadStatus::Received;
        }
        else if (loadTable.LoadShipConfirmUTCDateTime)
        {
            newStatus = WHSLoadStatus::Shipped;
        }
        else
        {
            newStatus = WHSLoadStatus::Open;
        }

        return newStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInProcessOrLoadedLoadStatus</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLoadStatus determineInProcessOrLoadedLoadStatus(WHSContainerId _containerId = '')
    {
        WHSLoadStatus newStatus = loadTable.LoadStatus;

        if (WHSLoadTable::validateLoadCanBeLoaded(loadTable.LoadId, _containerId))
        {
            newStatus = WHSLoadStatus::Loaded;
        }
        else if (loadTable.LoadDirection == WHSLoadDirection::Inbound)
        {
            if (loadTable.LoadStatus != WHSLoadStatus::InProcess
                && loadTable.LoadStatus != WHSLoadStatus::Received)
            {
                newStatus = WHSLoadStatus::InProcess;
            }
        }
        else if (loadTable.LoadStatus != WHSLoadStatus::InProcess)
        {
            newStatus = WHSLoadStatus::InProcess;
        }

        return newStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForInProcessOrClosedWork</Name>
				<Source><![CDATA[
    private boolean checkForInProcessOrClosedWork()
    {
        return (
            select firstonly RecId from WHSWorkTable 
                where WHSWorkTable.LoadId == loadTable.LoadId 
                   && (WHSWorkTable.WorkStatus == WHSWorkStatus::InProcess || WHSWorkTable.WorkStatus == WHSWorkStatus::Closed)
            ).RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>