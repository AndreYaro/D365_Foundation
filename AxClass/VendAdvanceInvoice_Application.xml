<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAdvanceInvoice_Application</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendAdvanceInvoice_Application</c> class is the derived class of <c>VendAdvanceInvoice</c> class used to
/// apply a paid advance against purchase invoices.
/// </summary>
class VendAdvanceInvoice_Application extends VendAdvanceInvoice
{
    PurchTotals purchTotals;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    protected void createJournal(VendAdvanceApplicationTrans _vendAdvanceApplicationTrans)
    {
        formLetterJournalCreate = PurchAdvanceApplicationJournalCreate::construct(_vendAdvanceApplicationTrans);

        formLetterJournalCreate.parmParmTable(invoiceVendInvoiceInfoTable);
        formLetterJournalCreate.parmVendInvoiceJour(callerVendInvoiceJour);
        formLetterJournalCreate.parmIsReverseAdvanceApplication(false);
        formLetterJournalCreate.parmIsInvoicePosted(isInvoicePosted);
        formLetterJournalCreate.parmDocumentStatus(DocumentStatus::Invoice);
        formLetterJournalCreate.parmTotals(purchTotals);
        formLetterJournalCreate.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return callerVendInvoiceInfoTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAdvancedApplicationTransQueryParam</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>VendAdvanceApplicationTransQueryParameters</c> class with
    /// values defaulted.
    /// </summary>
    /// <returns>An instance of <c>VendAdvanceApplicationTransQueryParameters</c> class.</returns>
    [Hookable(false)]
    protected VendAdvanceApplicationTransQueryParameters getDefaultAdvancedApplicationTransQueryParam()
    {
        VendAdvanceApplicationTransQueryParameters queryParams = super();
        queryParams.isPosted = isInvoicePosted;
        queryParams.isReversal = false;

        return queryParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization of the class variables.
    /// </summary>
    protected void initValues()
    {
        if (isInvoicePosted)
        {
            callerVendTable = callerTable;
            invoiceAccount = callerVendTable.AccountNum;
        }
        else
        {
            callerVendInvoiceInfoTable = callerTable;
            invoiceAccount = callerVendInvoiceInfoTable.InvoiceAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTotals</Name>
				<Source><![CDATA[
    public PurchTotals parmPurchTotals(PurchTotals _purchTotals = purchTotals)
    {
        purchTotals = _purchTotals;
        return purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAdvances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets advance records for <c>VendAdvance</c> form.
    /// </summary>
    /// <param name="_tmpVendStandardInvoice">
    /// A <c>TmpVendStandardInvoice</c> buffer.
    /// </param>
    /// <returns>
    /// A <c>TmpVendAdvanceInvoice</c> buffer having advance records.
    /// </returns>
    public tmpVendAdvanceInvoice populateAdvances(tmpVendStandardInvoice _tmpVendStandardInvoice)
    {
        tmpVendAdvanceInvoice tmpVendAdvanceInvoice;
        VendInvoiceJour initialVendInvoiceJour, localVendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans, localVendInvoiceTrans;
        VendInvoiceTrans vendInvoiceTransApplication; // for prepay application lines
        VendInvoiceTrans vendInvoiceTransReversal; // for prepay reverse application lines
        PurchPrepayTable purchPrepayTable;
        VendTrans vendTrans, vendTransApplication;
        AmountCur appliedAdvanceAmount; // for sum of applied prepayments
        AmountCur reverseApplicationAmount; // for sum of reversed applied prepayments
        PurchTable purchTable;

        // <GIN>
        boolean withholdingTaxEnabled = TaxWithholdParameters_IN::checkTaxParameters();
        // </GIN>

        super(_tmpVendStandardInvoice);
                
        // Find all Prepayments that are available for all of the POs on an invoice
        VendInvoicePurchLink vendInvoicePurchLink;

        while select OrigPurchId from vendInvoicePurchLink
                group by OrigPurchId
                where vendInvoicePurchLink.PurchID == _tmpVendStandardInvoice.PurchId
            join initialVendInvoiceJour
                where initialVendInvoiceJour.CurrencyCode == _tmpVendStandardInvoice.CurrencyCode
                    && initialVendInvoiceJour.PurchId == vendInvoicePurchLink.PurchID
                    && initialVendInvoiceJour.InvoiceId == vendInvoicePurchLink.InvoiceId
                    && initialVendInvoiceJour.InvoiceDate == vendInvoicePurchLink.InvoiceDate
                    && initialVendInvoiceJour.InternalInvoiceId == vendInvoicePurchLink.InternalInvoiceId                    
            join PrepayApplicationRemaining from purchPrepayTable
                where purchPrepayTable.PurchTable == vendInvoicePurchLink.OrigPurchId &&
                    purchPrepayTable.PrepayApplicationRemaining > 0
            join PurchStatus from purchTable
                group by PurchStatus
                where purchTable.PurchId == vendInvoicePurchLink.OrigPurchId
        {
            // If these conditions are met, it means that they will be picked up later in the processing so we should skip for now.
            if (vendInvoicePurchLink.OrigPurchId != _tmpVendStandardInvoice.PurchId
                && (purchTable.PurchStatus == PurchStatus::Canceled ||
                    purchTable.PurchStatus == PurchStatus::Invoiced))
            {
                continue;
            }

            while select RecId, PurchId, InvoiceId, CurrencyCode, InvoiceDate, LedgerVoucher, InvoiceAmount from localVendInvoiceJour
                where localVendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance &&
                    localVendInvoiceJour.InvoiceAccount == _tmpVendStandardInvoice.InvoiceAccount &&
                    localVendInvoiceJour.PurchId == vendInvoicePurchLink.OrigPurchId &&
                    localVendInvoiceJour.CurrencyCode == _tmpVendStandardInvoice.CurrencyCode
                join AmountCur, SettleAmountCur, OffsetRecid from vendTrans
                    where vendTrans.Voucher == localVendInvoiceJour.LedgerVoucher &&
                          vendTrans.AccountNum == localVendInvoiceJour.InvoiceAccount &&
                          vendTrans.TransDate == localVendInvoiceJour.InvoiceDate
            {
                tmpVendAdvanceInvoice = this.insertToTmpVendAdvanceInvoice(_tmpVendStandardInvoice, withholdingTaxEnabled, vendTrans, localVendInvoiceJour, tmpVendAdvanceInvoice);
            }
        }

        //retrieval of prepayments paid belonging to closed purchase orders to be applied to invoices with different PurchIds but same invoice account
        while select RecId, PurchId, InvoiceId, CurrencyCode, InvoiceDate, LedgerVoucher, InvoiceAmount from localVendInvoiceJour
            where localVendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance &&
                    localVendInvoiceJour.InvoiceAccount == _tmpVendStandardInvoice.InvoiceAccount &&
                    localVendInvoiceJour.PurchId != _tmpVendStandardInvoice.PurchId &&
                    localVendInvoiceJour.CurrencyCode == _tmpVendStandardInvoice.CurrencyCode
        join AmountCur, SettleAmountCur, OffsetRecid from vendTrans
            where vendTrans.Voucher == localVendInvoiceJour.LedgerVoucher &&
                  vendTrans.AccountNum == localVendInvoiceJour.InvoiceAccount &&
                  vendTrans.TransDate == localVendInvoiceJour.InvoiceDate
        join PrepayApplicationRemaining from purchPrepayTable
            where purchPrepayTable.PurchTable == localVendInvoiceJour.PurchId &&
                    purchPrepayTable.PrepayApplicationRemaining > 0
        exists join PurchId from purchTable
            where purchTable.PurchId == purchPrepayTable.PurchTable &&
                    (purchTable.PurchStatus == PurchStatus::Canceled ||
                    purchTable.PurchStatus == PurchStatus::Invoiced)
        {
            if (VendAdvanceInvoice_Application::getVendTransNotReversed(vendTrans))
            {
                if (abs(vendTrans.AmountCur) == abs(vendTrans.SettleAmountCur))
                {
                    appliedAdvanceAmount = 0.0; //initialize amounts as total applied or reverse amount for each partial prepayment is required
                    reverseApplicationAmount = 0.0;

                    //sums up the prepayment application amounts
                    while select RecId from vendInvoiceTransApplication
                        where vendInvoiceTransApplication.LineType == PurchInvoiceLineType::AdvanceApplication
                            && vendInvoiceTransApplication.AdvanceApplicationId == localVendInvoiceJour.RecId
                        join SettleAmountCur from vendTransApplication
                            where vendTransApplication.Voucher == vendInvoiceTransApplication.InternalInvoiceId
                            && vendTransApplication.AccountNum == _tmpVendStandardInvoice.InvoiceAccount
                            && vendTransApplication.TransDate == vendInvoiceTransApplication.InvoiceDate
                    {
                        appliedAdvanceAmount -= vendTransApplication.SettleAmountCur;

                        //sums up the prepayment reverse application amounts
                        select LineAmount from vendInvoiceTransReversal
                            where vendInvoiceTransReversal.LineType == PurchInvoiceLineType::ReverseAdvanceApplication
                            && vendInvoiceTransReversal.AdvanceApplicationId == vendInvoiceTransApplication.RecId;

                        reverseApplicationAmount += vendInvoiceTransReversal.LineAmount;
                    }

                    tmpVendAdvanceInvoice.clear();
                    tmpVendAdvanceInvoice.PurchId = localVendInvoiceJour.PurchId;
                    tmpVendAdvanceInvoice.InvoiceNum = localVendInvoiceJour.InvoiceId;
                    tmpVendAdvanceInvoice.CurrencyCode = localVendInvoiceJour.CurrencyCode;
                    tmpVendAdvanceInvoice.InvoiceDate = localVendInvoiceJour.InvoiceDate;
                    tmpVendAdvanceInvoice.LedgerVoucher = localVendInvoiceJour.LedgerVoucher;
                    tmpVendAdvanceInvoice.AdvanceAmount = localVendInvoiceJour.InvoiceAmount;
                    tmpVendAdvanceInvoice.InvoiceRecId = localVendInvoiceJour.RecId;
                    tmpVendAdvanceInvoice.IsReversal = NoYes::No;

                    //prepayment application remaining is prepayment application amount which was settled minus any previously applied prepayment amount
                    //plus any prepayment application reversal amount
                    tmpVendAdvanceInvoice.AdvanceRemaining = abs(vendTrans.SettleAmountCur) - abs(appliedAdvanceAmount) + abs(reverseApplicationAmount);

                    // <GIN>
                    // Include India withholding tax amount into prepayment application remaining amount.
                    if (tmpVendAdvanceInvoice)
                    {
                        tmpVendAdvanceInvoice.AdvanceRemaining -= TaxWithholdTrans_IN::getWithholdingTaxAmountCur_IN(localVendInvoiceJour.PurchId, localVendInvoiceJour.LedgerVoucher, localVendInvoiceJour.InvoiceDate);
                    }
                    // </GIN>

                    if (tmpVendAdvanceInvoice.AdvanceRemaining > 0)
                    {
                        tmpVendAdvanceInvoice.AppliedToPendingAmount = abs(VendAdvanceInvoice_Application::totalUnpostedAdvanceAppliedAmountForPrepayInvoice(localVendInvoiceJour.RecId));
                        tmpVendAdvanceInvoice.AdvanceRemaining -= tmpVendAdvanceInvoice.AppliedToPendingAmount;

                        tmpVendAdvanceInvoice.insert();
                    }
                }
            }
        }

        return tmpVendAdvanceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertToTmpVendAdvanceInvoice</Name>
				<Source><![CDATA[
    private tmpVendAdvanceInvoice insertToTmpVendAdvanceInvoice(tmpVendStandardInvoice _tmpVendStandardInvoice, boolean _withholdingTaxEnabled, Vendtrans _vendTrans, VendInvoiceJour _localVendInvoiceJour, tmpVendAdvanceInvoice _tmpVendAdvanceInvoice)
    {
        VendInvoiceTrans vendInvoiceTransApplication; // for prepay application lines
        VendInvoiceTrans vendInvoiceTransReversal; // for prepay reverse application lines
        VendTrans vendTransApplication;
        AmountCur appliedAdvanceAmount; // for sum of applied prepayments
        AmountCur reverseApplicationAmount; // for sum of reversed applied prepayments

        if (VendAdvanceInvoice_Application::getVendTransNotReversed(_vendTrans))
        {
            if (abs(_vendTrans.AmountCur) == abs(_vendTrans.SettleAmountCur))
            {
                appliedAdvanceAmount = 0.0; //initialize amounts as total applied or reverse amount for each partial prepayment is required
                reverseApplicationAmount = 0.0;

                //sums up the prepayment application amounts
                while select RecId from vendInvoiceTransApplication
                    where vendInvoiceTransApplication.LineType == PurchInvoiceLineType::AdvanceApplication
                        && vendInvoiceTransApplication.AdvanceApplicationId == _localVendInvoiceJour.RecId
                    join SettleAmountCur from vendTransApplication
                        where vendTransApplication.Voucher == vendInvoiceTransApplication.InternalInvoiceId
                            && vendTransApplication.AccountNum == _tmpVendStandardInvoice.InvoiceAccount
                            && vendTransApplication.TransDate == vendInvoiceTransApplication.InvoiceDate
                {
                    appliedAdvanceAmount -= vendTransApplication.SettleAmountCur;

                    //sums up the prepayment reverse application amounts
                    select sum(LineAmount) from vendInvoiceTransReversal
                        where vendInvoiceTransReversal.LineType == PurchInvoiceLineType::ReverseAdvanceApplication
                            && vendInvoiceTransReversal.AdvanceApplicationId == vendInvoiceTransApplication.RecId;

                    reverseApplicationAmount += vendInvoiceTransReversal.LineAmount;
                }

                _tmpVendAdvanceInvoice.clear();
                _tmpVendAdvanceInvoice.PurchId = _localVendInvoiceJour.PurchId;
                _tmpVendAdvanceInvoice.InvoiceNum = _localVendInvoiceJour.InvoiceId;
                _tmpVendAdvanceInvoice.CurrencyCode = _localVendInvoiceJour.CurrencyCode;
                _tmpVendAdvanceInvoice.InvoiceDate = _localVendInvoiceJour.InvoiceDate;
                _tmpVendAdvanceInvoice.LedgerVoucher = _localVendInvoiceJour.LedgerVoucher;
                _tmpVendAdvanceInvoice.AdvanceAmount = _localVendInvoiceJour.InvoiceAmount;
                _tmpVendAdvanceInvoice.InvoiceRecId = _localVendInvoiceJour.RecId;
                _tmpVendAdvanceInvoice.IsReversal = NoYes::No;

                //prepayment application remaining is prepayment application amount which was settled minus any previously applied prepayment amount
                //plus any prepayment application reversal amount
                _tmpVendAdvanceInvoice.AdvanceRemaining = abs(_vendTrans.SettleAmountCur) - abs(appliedAdvanceAmount) + abs(reverseApplicationAmount);

                // <GIN>
                // Include India withholding tax amount into prepayment application remaining amount.
                if (_withholdingTaxEnabled)
                {
                    _tmpVendAdvanceInvoice.AdvanceRemaining -= TaxWithholdTrans_IN::getWithholdingTaxAmountCur_IN(_tmpVendAdvanceInvoice.PurchId, _tmpVendAdvanceInvoice.LedgerVoucher, _tmpVendAdvanceInvoice.InvoiceDate);
                }
                // </GIN>

                if (_tmpVendAdvanceInvoice.AdvanceRemaining > 0)
                {
                    _tmpVendAdvanceInvoice.AppliedToPendingAmount = abs(VendAdvanceInvoice_Application::totalUnpostedAdvanceAppliedAmountForPrepayInvoice(_localVendInvoiceJour.RecId));
                    _tmpVendAdvanceInvoice.AdvanceRemaining -= _tmpVendAdvanceInvoice.AppliedToPendingAmount;

                    _tmpVendAdvanceInvoice.insert();
                }
            }
        }
        return _tmpVendAdvanceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTransNotReversed</Name>
				<Source><![CDATA[
    internal static RecId getVendTransNotReversed(VendTrans _vendTrans)
    {
        TransactionReversalTrans transactionReversalTrans;
        VendTrans vendTransoffset;

        select firstonly crosscompany RecId from vendTransoffset
            where vendTransoffset.RecId == _vendTrans.OffsetRecid
            notexists join transactionReversalTrans
                where transactionReversalTrans.RefTableId == vendTransoffset.TableId
                    && transactionReversalTrans.RefRecId == vendTransoffset.RecId;

        return vendTransoffset.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoices for the <c>VendAdvanceApplication</c> form.
    /// </summary>
    /// <returns>
    /// A <c>TmpVendStandardInvoice</c> buffer that contains invoice records.
    /// </returns>
    public tmpVendStandardInvoice populateInvoices()
    {
        tmpVendStandardInvoice tmpVendStandardInvoice;
        VendInvoiceJour localVendInvoiceJour;
        VendTrans vendTrans;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        PurchTotals localPurchTotals;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

        if (isInvoicePosted)
        {
            while select * from localVendInvoiceJour
                where localVendInvoiceJour.InvoiceType == PurchInvoiceType::Standard &&
                    localVendInvoiceJour.InvoiceAccount == callerVendTable.AccountNum &&
                    localVendInvoiceJour.PurchaseType != PurchaseType::Journal
                join AmountCur, SettleAmountCur from vendTrans
                where vendTrans.AccountNum == localVendInvoiceJour.InvoiceAccount &&
                    vendTrans.Voucher == localVendInvoiceJour.LedgerVoucher &&
                    vendTrans.TransDate == localVendInvoiceJour.InvoiceDate
                notexists join ledgerJournalVoucherChanged
                    where ledgerJournalVoucherChanged.ToDate == localVendInvoiceJour.InvoiceDate &&
                        ledgerJournalVoucherChanged.ToVoucher == localVendInvoiceJour.LedgerVoucher
            {
                if (abs(vendTrans.AmountCur) != abs(vendTrans.SettleAmountCur))
                {
                    tmpVendStandardInvoice.initFromVendInvoiceJour(localVendInvoiceJour);
                }
            }
        
            while select * from localVendInvoiceJour
                where localVendInvoiceJour.InvoiceType == PurchInvoiceType::Standard &&
                    localVendInvoiceJour.InvoiceAccount == callerVendTable.AccountNum &&
                    localVendInvoiceJour.PurchaseType != PurchaseType::Journal
                join RecId from ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.ToDate == localVendInvoiceJour.InvoiceDate &&
                    ledgerJournalVoucherChanged.ToVoucher == localVendInvoiceJour.LedgerVoucher
                join AmountCur, SettleAmountCur from vendTrans
                where vendTrans.AccountNum == localVendInvoiceJour.InvoiceAccount &&
                    vendTrans.Voucher == ledgerJournalVoucherChanged.FromVoucher &&
                    vendTrans.TransDate == ledgerJournalVoucherChanged.FromDate
            {
                if (abs(vendTrans.AmountCur) != abs(vendTrans.SettleAmountCur))
                {
                    tmpVendStandardInvoice.initFromVendInvoiceJour(localVendInvoiceJour);
                }
            }
        
        }
        else if (callerVendInvoiceInfoTable.InvoiceType == PurchInvoiceType::Standard)
        {
            localPurchTotals = PurchTotals::newParmTable(callerVendInvoiceInfoTable, PurchUpdate::All, callerVendInvoiceInfoTable.ParmId, '', DocumentStatus::Invoice);
            localPurchTotals.calc(true);

            tmpVendStandardInvoice.clear();

            // If the invoice doesn't have a PO, get it from the subTable records
            while select OrigPurchId from vendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.ParmId == callerVendInvoiceInfoTable.ParmId &&
                        vendInvoiceInfoSubTable.TableRefId == callerVendInvoiceInfoTable.TableRefId &&
                        vendInvoiceInfoSubTable.OrigPurchId != ''
            {
                tmpVendStandardInvoice.clear();
                tmpVendStandardInvoice.PurchId = vendInvoiceInfoSubTable.OrigPurchId;
                tmpVendStandardInvoice.InvoiceNum = callerVendInvoiceInfoTable.Num;
                tmpVendStandardInvoice.CurrencyCode = callerVendInvoiceInfoTable.CurrencyCode;
                tmpVendStandardInvoice.InvoiceDate = callerVendInvoiceInfoTable.TransDate;
                tmpVendStandardInvoice.InvoiceAccount = callerVendInvoiceInfoTable.InvoiceAccount;
                tmpVendStandardInvoice.InvoiceAmount = localPurchTotals.purchTotalAmount();
                tmpVendStandardInvoice.InvoiceRecId = callerVendInvoiceInfoTable.RecId;
                tmpVendStandardInvoice.IsPosted = NoYes::No;
                tmpVendStandardInvoice.insert();
            }
        }

        return tmpVendStandardInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    public FormletterJournalPost postJournal()
    {
        PurchAdvanceApplicationJournalPost formletterJournalPost;

        formletterJournalPost = PurchAdvanceApplicationJournalPost::construct(formLetterJournalCreate.getApplicationLine());
        formletterJournalPost.parmJournalTable(formLetterJournalCreate.getJournal());
        formletterJournalPost.parmIsReverseAdvanceApplication(formLetterJournalCreate.parmIsReverseAdvanceApplication());
        formletterJournalPost.parmParmTable(this.parmVendInvoiceInfoTable());
        formletterJournalPost.parmIsInvoicePosted(isInvoicePosted);
        formletterJournalPost.parmNumberSeq(formLetterJournalCreate.parmNumberSeq());
        formletterJournalPost.run();

        return formletterJournalPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAdvances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates advance application lines.
    /// </summary>
    public void processAdvances()
    {
        if (isInvoicePosted)
        {
            ttsbegin;

            this.processPostedAdvanceLines();

            ttscommit;
        }
        else
        {
            RecId vendInvoiceInfoTableRecId = this.parmVendInvoiceInfoTable().RecId;

            if (vendInvoiceInfoTableRecId != 0)
            {
                this.processUnpostedAdvances();
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUnpostedAdvances</Name>
				<Source><![CDATA[
    private void processUnpostedAdvances()
    {
        RecId vendInvoiceInfoTableRecId = this.parmVendInvoiceInfoTable().RecId;

        while select vendAdvanceApplicationTrans
            where vendAdvanceApplicationTrans.UnpostedInvoiceRecId == vendInvoiceInfoTableRecId
        {
            ttsbegin;
            this.createJournal(vendAdvanceApplicationTrans);
            this.postJournal();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalUnpostedAdvanceAppliedAmountForPrepayInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// The total advance application applied, but unposted amount for a given prepayment invoice.
    /// </summary>
    /// <param name = "_advanceInvoiceId">RecId for the <c>VendInvoiceJour</c> record that is tied to the posted prepayment invoice.</param>
    /// <returns>The total advance application amount applied to pending invoices.</returns>
    public static AmountCur totalUnpostedAdvanceAppliedAmountForPrepayInvoice(RecId _advanceInvoiceId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceTrans vendInvoiceTrans;

        select sum(LineAmount) from vendInvoiceInfoLine
            where vendInvoiceInfoLine.LineType == PurchInvoiceLineType::AdvanceApplication &&
                vendInvoiceInfoLine.AdvanceApplicationId == _advanceInvoiceId
            notexists join vendInvoiceTrans
                where vendInvoiceInfoLine.SourceDocumentLine == vendInvoiceTrans.SourceDocumentLine;

        return vendInvoiceInfoLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdvanceApplicationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates advance application amount against a respective <c>VendAdvanceApplicationTrans</c> record.
    /// </summary>
    /// <param name="_standardInvoice">
    /// The record ID of invoice on which advance is to be applied.
    /// </param>
    /// <param name="_appliedAdvanceInvoice">
    /// The record ID of the advance to be applied.
    /// </param>
    /// <param name="_appliedAmount">
    /// The applied advance amount to be updated.
    /// </param>
    public void updateAdvanceApplicationAmount(RecId _standardInvoice, RecId _appliedAdvanceInvoice, AmountCur _appliedAmount)
    {
        VendAdvanceApplicationTransQueryParameters queryParam = this.getDefaultAdvancedApplicationTransQueryParam();
        queryParam.advancedInvoiceRecId = _appliedAdvanceInvoice;
        queryParam.standardInvoiceRecId = _standardInvoice;

        ttsBegin;
        VendAdvanceApplicationTrans::updateAdvanceAppliedAmountForPostedOrReversal(_appliedAmount, queryParam);
        VendAdvanceApplicationTrans::updateAdvanceAppliedAmount(_appliedAdvanceInvoice, _standardInvoice, _appliedAmount);

        VendInvoiceInfoLine vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(vendAdvanceApplicationTrans.AdvanceApplicationId, true);

        if (vendInvoiceInfoLine)
        {
            vendInvoiceInfoLine.LineAmount = _appliedAmount;

            if (VendInvoiceInfoLine_Project::findByVendInvoiceInfoLineRefRecId(vendInvoiceInfoLine.RecId))
            {
                vendInvoiceInfoLine.ReceiveNow = _appliedAmount < 0 ? -1 : 1;
                vendInvoiceInfoLine.PurchPrice = abs(_appliedAmount);
            }
            else
            {
                vendInvoiceInfoLine.ReceiveNow = 1; //to avoid discount in initialization of discount in missing distributions
            }

            vendInvoiceInfoLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnposted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>VendInvoiceInfoLine</c> table for advance application and reversal lines to be posted.
    /// </summary>
    /// <param name="_invoiceId">
    /// The record ID of invoice on which advance is to be applied.
    /// </param>
    /// <param name="_appliedAdvanceInvoiceId">
    /// The record ID of advance to be applied.
    /// </param>
    /// <param name="_set">
    /// A Boolean which specifies whether the transaction is marked.
    /// </param>
    protected void updateUnposted(RecId _invoiceId, RecId _appliedAdvanceInvoiceId, boolean _set)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchQty receiveNow = 1.0;

        if (isInvoicePosted)
        {
            VendInvoiceJour localVendInvoiceJour;

            // selection for posted advances for application.
            select ParmId, TableRefId, CurrencyCode from vendInvoiceInfoTable
            exists join localVendInvoiceJour
                where localVendInvoiceJour.SourceDocumentHeader == vendInvoiceInfoTable.SourceDocumentHeader
                && localVendInvoiceJour.RecId == _invoiceId;
        }
        else
        {
            select ParmId, TableRefId, CurrencyCode from vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == _invoiceId;

            receiveNow = -1.0;
        }

        // retrieves the record of an advance line against selected invoice header
        VendInvoiceInfoLine advanceVendInvoiceInfoLine = this.retrieveVendInvoiceInfoLineRecord(_appliedAdvanceInvoiceId);

        PurchCategory procurementCategory;
        RecId sourceDocumentLine;

        if (advanceVendInvoiceInfoLine)
        {
            procurementCategory = advanceVendInvoiceInfoLine.ProcurementCategory;
            sourceDocumentLine = advanceVendInvoiceInfoLine.SourceDocumentLine;
        }
        else
        {
            // retrieves the record of an vendor invoice trans against selected invoice header
            VendInvoiceTrans advanceVendInvoiceTrans = this.retrieveVendInvoiceTransRecord(_appliedAdvanceInvoiceId);
             
            procurementCategory = advanceVendInvoiceTrans.ProcurementCategory;
            sourceDocumentLine = advanceVendInvoiceTrans.SourceDocumentLine;
        }

        //retrieves ledger dimension for posted prepayment invoice
        AccountingDistribution accountingDistribution = this.retrieveAccountingDistributionRecord(sourceDocumentLine);

        VendInvoiceInfoLine vendInvoiceInfoLine;

        // _set identifies whether the transaction is marked or unmarked, if marked the line is to be inserted; deleted otherwise.
        if (_set)
        {
            ttsbegin;
            vendInvoiceInfoLine.ParmId = vendInvoiceInfoTable.ParmId;
            vendInvoiceInfoLine.TableRefId = vendInvoiceInfoTable.TableRefId;
            vendInvoiceInfoLine.InvoiceAccount = invoiceAccount;
            vendInvoiceInfoLine.ProcurementCategory = procurementCategory;
            vendInvoiceInfoLine.OrderAccount = invoiceAccount;
            vendInvoiceInfoLine.CurrencyCode = vendInvoiceInfoTable.CurrencyCode;
            vendInvoiceInfoLine.AdvanceApplicationId = _appliedAdvanceInvoiceId;
            vendInvoiceInfoLine.LineType = PurchInvoiceLineType::AdvanceApplication;

            vendInvoiceInfoLine.defaultRow(null, null, receiveNow);

            vendInvoiceInfoLine.DefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(accountingDistribution.LedgerDimension);

            
            // <GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                VendInvoiceInfoLineTaxExtension_IN vendInvoiceInfoLineTaxExtension_IN;

                vendInvoiceInfoLineTaxExtension_IN = vendInvoiceInfoLine.vendInvoiceInfoLineTaxExtension_IN();
                vendInvoiceInfoLine.packVendInvoiceInfoLineTaxExtension_IN(vendInvoiceInfoLineTaxExtension_IN);
            }
            // </GIN>

            vendInvoiceInfoLine.insert(false);

            // Update VendAdvanceApplicationTrans record
            vendAdvanceApplicationTrans.AdvanceApplicationId = vendInvoiceInfoLine.RecId;
            vendAdvanceApplicationTrans.update();

            if (PurchTable::find(vendInvoiceInfoTable.PurchId).ProjId)
            {
                VendInvoiceInfoLine_project::createFromVendInvoiceInfoLine(vendInvoiceInfoLine, vendInvoiceInfoTable.PurchId, procurementCategory);
                if (!vendInvoiceInfoLine.InventTransId)
                {
                    vendInvoiceInfoLine.selectForUpdate(true);
                    NumberSeq numberSeq = NumberSeq::newGetNum(InventParameters::numRefInventTransId());
                    vendInvoiceInfoLine.InventTransId = numberSeq.num();
                    vendInvoiceInfoLine.update();
                }
            }

            ttscommit;
        }
        else
        {
            delete_from vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                && vendInvoiceInfoLine.AdvanceApplicationId == _appliedAdvanceInvoiceId
                && vendInvoiceInfoLine.LineType == PurchInvoiceLineType::AdvanceApplication;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdvanceApplicationTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts advance application transaction in the <c>VendAdvanceApplicationTrans</c> table.
    /// </summary>
    /// <param name="_standardInvoiceId">
    /// The record ID of the invoice on which advance is to be applied.
    /// </param>
    /// <param name="_advanceInvoiceId">
    /// The record ID of the advance to which it is to be applied.
    /// </param>
    /// <param name="_settlementPostingDate">
    /// The settlement posting date of prepayment application; optional.
    /// </param>
    public void insertAdvanceApplicationTrans(RecId _standardInvoiceId, RecId _advanceInvoiceId, TransDate _settlementPostingDate = dateNull())
    {
        this.initAdvanceApplicationTransForPostedOrReversal(_standardInvoiceId, _advanceInvoiceId, isInvoicePosted, false);

        super(_standardInvoiceId, _advanceInvoiceId, _settlementPostingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveVendInvoiceTransRecord</Name>
				<Source><![CDATA[
    private VendInvoiceTrans retrieveVendInvoiceTransRecord(RecId _advancedInvoiceHeaderRecId)
    {
        VendInvoiceTrans localVendInvoiceTrans;
        VendInvoiceJour localVendInvoiceJour;
        
        select firstonly * from localVendInvoiceTrans
            exists join localVendInvoiceJour
                where localVendInvoiceJour.InvoiceId == localVendInvoiceTrans.InvoiceId
                    && localVendInvoiceJour.InternalInvoiceId == localVendInvoiceTrans.InternalInvoiceId
                    && localVendInvoiceJour.InvoiceDate == localVendInvoiceTrans.InvoiceDate
                    && localVendInvoiceJour.numberSequenceGroup == localVendInvoiceTrans.numberSequenceGroup
                    && localVendInvoiceJour.RecId == _advancedInvoiceHeaderRecId;
        
        return localVendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveVendInvoiceInfoLineRecord</Name>
				<Source><![CDATA[
    private VendInvoiceInfoLine retrieveVendInvoiceInfoLineRecord(RecId _advancedInvoiceHeaderRecId)
    {
        VendInvoiceInfoLine localVendInvoiceInfoLine;
        VendInvoiceInfoTable localVendInvoiceInfoTable;
        VendInvoiceJour localVendInvoiceJour;

        select firstonly * from localVendInvoiceInfoLine
            join RecId from localVendInvoiceInfoTable
            exists join localVendInvoiceJour
                where localVendInvoiceInfoTable.ParmId == localVendInvoiceInfoLine.ParmId
                && localVendInvoiceInfoTable.TableRefId == localVendInvoiceInfoLine.TableRefId
                && localVendInvoiceJour.SourceDocumentHeader == localVendInvoiceInfoTable.SourceDocumentHeader
                && localVendInvoiceJour.RecId == _advancedInvoiceHeaderRecId;

        return localVendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAccountingDistributionRecord</Name>
				<Source><![CDATA[
    private AccountingDistribution retrieveAccountingDistributionRecord(RecId _sourceDocumentLineRecId)
    {
        AccountingDistribution localAccountingDistribution;

        select firstonly * from localAccountingDistribution
                where localAccountingDistribution.SourceDocumentLine == _sourceDocumentLineRecId;
        
        return localAccountingDistribution;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>