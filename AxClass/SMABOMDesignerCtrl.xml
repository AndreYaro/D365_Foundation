<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmabomDesignerCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmabomDesignerCtrl extends RunBase
{
    #ResAppl

    SMAServiceObjectRelationId      relationId;
    SMAServiceObjectRelation        smaServiceObjectRelation;
    SMAServiceObjectId              objectId;
    TmpSMABOMDesignerSetup          tmpSMABOMDesignerSetup;
    SMATemplateBOMTable             callerTemplateBOMTable;
    InventDim                       callerInventDim;
    tableId                         callerTableId;
    Object                          fr;
    FormTreeControl                 tree;
    FormListControl                 list;
    ImageListAppl_BOMRouteTree      imageList;
    ImageListAppl_StateReq          imageListState;
    Map                             node2record;
    Map                             dimId2record;
    Map                             nodeCanHaveBOM;
    Map                             recId2Node;
    Map                             nodeBOMStatus;
    Map                             node2History;
    Map                             nodeHistoryStatus;
    int                             rootId;
    int                             curDropNode;
    int                             lastDelayNode;
    int                             nodeIdHistory;
    int                             isEditMode;
    boolean                         callerCanHaveBOM;
    int                             saveWidth;
    int                             saveHeight;
    AccessType                      accessBOM;
    AccessType                      accessItemTable;
    AccessType                      accessServiceBOM;
    AccessType                      accessProdTable;
    TransDate                       fromDate;
    TransDate                       toDate;

    #define.CurrentVersion(3)

    #localmacro.CurrentList
        tmpSMABOMDesignerSetup,
        saveWidth,
        saveHeight
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accessItemTable</Name>
				<Source><![CDATA[
    public AccessType accessItemTable()
    {
        return accessItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accessProdTable</Name>
				<Source><![CDATA[
    public AccessType accessProdTable()
    {
        return accessProdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accessServiceBOM</Name>
				<Source><![CDATA[
    public AccessType accessServiceBOM()
    {
        return accessServiceBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>boxViewMode</Name>
				<Source><![CDATA[
    public void boxViewMode()
    {
        if (callerTemplateBOMTable.RecId)
        {
            // This Master BOM is only available i view mode as service changes have been applied
            Box::info("@SYS86998");
        }
        else
        {
            // No Master BOM available
            Box::info("@SYS86993");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteMasterBOM</Name>
				<Source><![CDATA[
    public boolean canDeleteMasterBOM()
    {
        if (!this.mustShowDeleteMasterBOM())
        {
            return false;
        }

        if (!this.isEditMode())
        {
            return false;
        }

        if (conFind(this.toolsGetAllSelected(),rootId))
        {
            return false;
        }

        if (this.toolsNodesHasParentChildRel())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDropSelectedNodes</Name>
				<Source><![CDATA[
    public boolean canDropSelectedNodes(int _dropNode, container _selectedNodes = this.toolsGetAllSelected())
    {
        int i;
        int curMoveNode;

        if (!this.isEditMode())
        {
            return false;
        }

        if (!_dropNode || conLen(_selectedNodes) == 0 || conFind(_selectedNodes, _dropNode) || conFind(_selectedNodes, rootId))
        {
            return false;
        }

        if (_dropNode != rootId && (!node2record.exists(_dropNode)))
        {
            return false;
        }

        if (this.toolsNodesHasParentChildRel(_selectedNodes))
        {
            return false;
        }

        for (i = 1; i <= conLen(_selectedNodes); i++)
        {
            curMoveNode = conPeek(_selectedNodes, i);
            if (!curMoveNode || !node2record.exists(curMoveNode))
            {
                return false;
            }

            if (nodeCanHaveBOM.exists(curMoveNode))
            {
                if (this.toolsIsNodeChild(curMoveNode, _dropNode))
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditMasterBOM</Name>
				<Source><![CDATA[
    public boolean canEditMasterBOM()
    {
        int nodeIdx = tree.getSelection();

        return this.mustShowEditServiceBOM() && this.isEditMode() && tree.getSelectedCount() == 1 && nodeIdx && nodeIdx != rootId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveSelectedNodes</Name>
				<Source><![CDATA[
    public boolean canMoveSelectedNodes(container _selectedNodes = this.toolsGetAllSelected())
    {
        int                 i;
        int                 curMoveNode;
        SMAServiceBOMTable  buffer;

        if (!this.isEditMode())
        {
            return false;
        }

        if (!relationId)
        {
            return true;
        }

        for (i = 1 ; i <= conLen(_selectedNodes); i++)
        {
            curMoveNode = conPeek(_selectedNodes, i);
            if (!curMoveNode || !node2record.exists(curMoveNode))
            {
                return false;
            }

            buffer = node2record.lookup(curMoveNode);
            if (buffer.OrigLine && relationId)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canOpenInventTable</Name>
				<Source><![CDATA[
    public boolean canOpenInventTable()
    {
        int nodeIdx = tree.getSelection();

        return this.mustShowOpenInventTable() && tree.getSelectedCount() == 1 && nodeIdx && nodeIdx != rootId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReplaceSelectedNodes</Name>
				<Source><![CDATA[
    public boolean canReplaceSelectedNodes(container _selectedNodes = this.toolsGetAllSelected())
    {
        int i;
        int curNode;

        if (!this.isEditMode() || this.isMasterMode())
        {
            return false;
        }

        if (conLen(_selectedNodes) == 0 || conFind(_selectedNodes, rootId))
        {
            return false;
        }

        if (!this.mustShowEditServiceBOM())
        {
            return false;
        }

        if (this.toolsNodesHasParentChildRel(_selectedNodes))
        {
            return false;
        }

        for (i = 1 ; i <= conLen(_selectedNodes); i++)
        {
            curNode = conPeek(_selectedNodes, i);
            if (!curNode || !node2record.exists(curNode))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReReadMasterBOM</Name>
				<Source><![CDATA[
    public boolean canReReadMasterBOM()
    {
        int nodeIdx = tree.getSelection();

        return this.mustShowReReadMasterBOM() && tree.getSelectedCount() == 1 && nodeIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlFormatExplain</Name>
				<Source><![CDATA[
    public void controlFormatExplain(FormStringControl formatExplain, TmpSMABOMDesignerSetup _tmpSMABOMDesignerSetup = tmpSMABOMDesignerSetup)
    {
        formatExplain.text(this.controlFormatTxt(_tmpSMABOMDesignerSetup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlFormatTxt</Name>
				<Source><![CDATA[
    private FormatTxt controlFormatTxt(TmpSMABOMDesignerSetup _tmpSMABOMDesignerSetup = tmpSMABOMDesignerSetup)
    {
        FormatTxt lineTxt;

        // Item number
        lineTxt += (_tmpSMABOMDesignerSetup.bomShowItemId ? ((lineTxt ? ' / ' : '') + "@SYS12836") : '');
        // Configuration
        lineTxt += (_tmpSMABOMDesignerSetup.bomShowConfigId ? ((lineTxt ? ' / ' : '') + "@SYS14011") : '');
        // Size
        lineTxt += (_tmpSMABOMDesignerSetup.bomShowInventSizeId ? ((lineTxt ? ' / ' : '') + "@SYS73727") : '');
        // Color
        lineTxt += (_tmpSMABOMDesignerSetup.bomShowInventColorId ? ((lineTxt ? ' / ' : '') + "@SYS73726") : '');
		// Version
        lineTxt += (_tmpSMABOMDesignerSetup.bomShowInventVersionId ? ((lineTxt ? ' / ' : '') + "@SCM:Version") : '');
        // Style
        lineTxt += (_tmpSMABOMDesignerSetup.bomShowInventStyleId ? ((lineTxt ? ' / ' : '') + "@FPK270000") : '');
        // Name
        lineTxt += (_tmpSMABOMDesignerSetup.bomShowItemName ? ((lineTxt ? ' / ' : '') + "@SYS7399") : '');
        // Quantity
        lineTxt += (_tmpSMABOMDesignerSetup.bomShowBOMQty ? ((lineTxt ? ' / ' : '') + "@SYS14578") : '');
        // Unit
        lineTxt += (_tmpSMABOMDesignerSetup.bomShowUnitId ? ((lineTxt ? ' / ' : '') + "@SYS11959") : '');
        // Line Id
        lineTxt += (_tmpSMABOMDesignerSetup.bomShowLineId ? ((lineTxt ? ' / ' : '') + "@SYS40386") : '');

        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    /// If no record can be found or the <see cref="M:RunBase.unpack" /> method returns false, the <see
    /// cref="M:RunBase.initParmDefault" /> method will be called. Normally, this method should not be
    /// overridden.
    /// </remarks>
    public void getLast()
    {
        super();

        tmpSMABOMDesignerSetup.bomRouteDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        tmpSMABOMDesignerSetup.AutoEdit        = this.accessServiceBOM() < AccessType::Edit ? false : tmpSMABOMDesignerSetup.AutoEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    public Imagelist imageList()
    {
        if (!imageList)
        {
            imageList = new ImageListAppl_BOMRouteTree();
        }

        return imageList.imageList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageListState</Name>
				<Source><![CDATA[
    public Imagelist imageListState()
    {
        if (!imageListState)
        {
            imageListState = new ImageListAppl_StateReq();
        }

        return imageListState.imageList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when the
    /// <c>SysLastValue.GetLast</c> method is called. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        tmpSMABOMDesignerSetup.bomRouteDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        tmpSMABOMDesignerSetup.bomShowItemId    = NoYes::Yes;
        tmpSMABOMDesignerSetup.bomShowItemName  = NoYes::Yes;
        tmpSMABOMDesignerSetup.bomShowConfigId  = NoYes::No;
        tmpSMABOMDesignerSetup.MaxBOMLevel      = 10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSMAServiceBOM</Name>
				<Source><![CDATA[
    void initSMAServiceBOM(SMAServiceBOMTable _bomNew, SMAServiceBOMTable _bomDrop, int _dropNodeIdx, boolean _keepLevel, boolean _insert)
    {
        SMATemplateBOMParentLineId    bomParentId;

        void setLineNumLevel()
        {
            if (!_bomNew.setLineNumAfter(_bomDrop))
            {
                this.reNumberBOM(_bomDrop);
                _bomDrop = node2record.lookup(_dropNodeIdx);
                _bomNew.setLineNumAfter(_bomDrop);
            }
        }

        if (_insert)
        {
            _bomNew.setLineId();

            _bomNew.ServiceObjectRelationId = relationId;
            _bomNew.ObjectId                = objectId;
            _bomNew.OrigLine                = this.isMasterMode() ? NoYes::Yes : NoYes::No;
            _bomNew.bomVersionDate          = tmpSMABOMDesignerSetup.bomRouteDate;
        }
        if (nodeCanHaveBOM.exists(_dropNodeIdx))
        {
            bomParentId = _dropNodeIdx == rootId ? '' : (_keepLevel ? _bomDrop.ServiceBOMParentLineId : _bomDrop.ServiceBOMLineId);
            _bomNew.ServiceBOMParentLineId = bomParentId;
            if (_keepLevel)
            {
                setLineNumLevel();
            }
            else
            {
                _bomNew.LineNum = SMAServiceBOMTable::nextLineNum(callerTemplateBOMTable.TemplateBOMId, bomParentId, relationId);
            }
        }
        else
        {
            _bomNew.ServiceBOMParentLineId = _bomDrop.ServiceBOMParentLineId;
            setLineNumLevel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimCache</Name>
				<Source><![CDATA[
    private InventDim inventDimCache(InventDimId _inventDimId)
    {
        if (!dimId2record.exists(_inventDimId))
        {
            dimId2record.insert(_inventDimId,InventDim::find(_inventDimId));
        }

        return dimId2record.lookup(_inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditMode</Name>
				<Source><![CDATA[
    public boolean isEditMode()
    {
        return isEditMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMasterMode</Name>
				<Source><![CDATA[
    public boolean isMasterMode()
    {
        return (relationId != '') ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActive</Name>
				<Source><![CDATA[
    public void linkActive(Common _caller, TmpSMABOMDesignerSetup   _setup)
    {
        this.treeClearAll();
        tmpSMABOMDesignerSetup.data(_setup);
        this.setCallerData(_caller);
        this.treeBuildOneNode(this.treeInsertTopNode());

        if (rootId)
        {
            tree.select(rootid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>listGetHistoryTableCon</Name>
				<Source><![CDATA[
    container listGetHistoryTableCon(int _nodeIdx)
    {
        SMAServiceBOMTable    serviceBOM;

        if (node2record.exists(_nodeIdx))
        {
            serviceBOM = node2record.lookup(_nodeIdx);
        }

        if (serviceBOM.ServiceBOMLineId != '')
        {
            return SMAServiceBOMTable::selectHistoryPack(relationId, serviceBOM, callerTemplateBOMTable.TemplateBOMId);
        }
        else
        {
            return SMAServiceBOMTable::selectAllHistoryPack(relationId, serviceBOM, callerTemplateBOMTable.TemplateBOMId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>listInitListView</Name>
				<Source><![CDATA[
    public void listInitListView()
    {
        list.deleteAll();

        while (list.getColumn(0))
        {
            list.deleteColumn(0);
        }

        // Item number
        list.addColumn(1, new FormListColumn("@SYS12836", 1, 120));
        // Date time
        list.addColumn(2, new FormListColumn("@SYS106862", 2, 120));
        // User
        list.addColumn(3, new FormListColumn("@SYS25815", 3, 40));
        // Action
        list.addColumn(4, new FormListColumn("@SYS6661", 4, 100));
        // Active item number
        list.addColumn(5, new FormListColumn("@SYS86994", 5, 120));
        // Quantity
        list.addColumn(6, new FormListColumn("@SYS3065", 6, 50));
        // Service agreement
        list.addColumn(7, new FormListColumn("@SYS79078", 7, 100));
        // Service order
        list.addColumn(8, new FormListColumn("@SYS79077", 8, 100));
        // Item requirement
        list.addColumn(9, new FormListColumn("@SYS84947", 9, 100));
    }

]]></Source>
			</Method>
			<Method>
				<Name>listInsertHistory</Name>
				<Source><![CDATA[
    void listInsertHistory(int _treeNodeIdx)
    {
        container            con;
        int                  y;
        int                  idx;
        boolean              firstColumn = true;

        void listAddItem(str _text)
        {
            if (firstColumn)
            {
                FormListItem listItem = new FormListItem(_text);
                idx = list.addItem(listItem);
                firstColumn = false;
            }
            else
            {
                y++;
                FormListItem listItem = new FormListItem(_text);
                listItem.subItem(y);
                listItem.idx(idx);
                list.setItem(listItem);
            }
        }

        list.deleteAll();

        if (!nodeHistoryStatus.exists(_treeNodeIdx))
        {
            con = this.listSelectHistory(_treeNodeIdx);
        }
        else
        {
            if (node2History.exists(_treeNodeIdx))
            {
                boolean zeroLevelUpdate = this.isEditMode() && (this.toolsNode2LineId(_treeNodeIdx) == '');

                if (zeroLevelUpdate)
                {
                    // Root should be recalculated
                    this.treeClearHistoryOnNode(_treeNodeIdx);
                    con = this.listSelectHistory(_treeNodeIdx);
                }
                else
                {
                    con = node2History.lookup(_treeNodeIdx);
                }
            }
        }
        if (conLen(con))
        {
            container histChange      = conPeek(con, 1);
            container histBOM         = conPeek(con, 2);
            container histBOMActive   = conPeek(con, 3);

            int histChanges = conLen(histChange);
            for (int i = 1; i <= histChanges; i++)
            {
                firstColumn         = true;
                y                   = 0;
                idx                 = 0;
                SMAServiceBOMChange serviceBOMChange = conPeek(histChange, i);

                if (toDate == dateNull())
                {
                    toDate = maxDate();
                }

                date createdDateInUserPreferredTimeZone = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(serviceBOMChange.CreatedDateTime, DateTimeUtil::getUserPreferredTimeZone()));

                if (createdDateInUserPreferredTimeZone >= fromDate &&
                    createdDateInUserPreferredTimeZone <= toDate)
                {
                    SMAServiceBOMTable serviceBOMTable     = conPeek(histBOM, i);
                    SMAServiceBOMTable serviceBOMActive    = conPeek(histBOMActive, i);

                    ListEnumerator enumerator = this.buildHistoryLine(serviceBOMChange, serviceBOMTable, serviceBOMActive).getEnumerator();
                 
                    while (enumerator.moveNext())
                    {
                        listAddItem(enumerator.current());
                    }
                }
            }
        }

        nodeIdHistory = _treeNodeIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildHistoryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the history line.
    /// </summary>
    /// <param name = "_serviceBOMChange">The service BOM change.</param>
    /// <param name = "_serviceBOMTable">The service BOM.</param>
    /// <param name = "_serviceBOMActive">The active service BOM.</param>
    /// <returns>A list of strings with the segments for the history line.</returns>
    protected List buildHistoryLine(SMAServiceBOMChange _serviceBOMChange, SMAServiceBOMTable _serviceBOMTable, SMAServiceBOMTable _serviceBOMActive)
    {
        List line = new List(Types::String);
        
        line.addEnd(_serviceBOMTable.ItemId);
        line.addEnd(datetime2str(DateTimeUtil::applyTimeZoneOffset(_serviceBOMChange.CreatedDateTime, DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll));
        line.addEnd(_serviceBOMChange.CreatedBy);
        line.addEnd(enum2str(_serviceBOMChange.ServiceBOMChangeAction));
        line.addEnd(_serviceBOMActive.ItemId);
        line.addEnd(strFmt("%1", _serviceBOMChange.bomQty));

        SMAServiceOrderTable smaServiceOrderTable = SMAServiceOrderTable::find(_serviceBOMChange.ServiceOrderId);
        
        line.addEnd(smaServiceOrderTable.AgreementId);
        line.addEnd(smaServiceOrderTable.ServiceOrderId);

        line.addEnd(_serviceBOMChange.IsRequirement ? enum2str(_serviceBOMChange.IsRequirement) : '');

        return line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listSelectHistory</Name>
				<Source><![CDATA[
    container listSelectHistory(int _nodeIdx)
    {
        container con = this.listGetHistoryTableCon(_nodeIdx);

        nodeHistoryStatus.insert(_nodeIdx, 1);

        if (con)
        {
            node2History.insert(_nodeIdx, con);
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listSetHistory</Name>
				<Source><![CDATA[
    public void listSetHistory(boolean _forced = false)
    {
        int curNode = tree.getSelection();

        if (this.isMasterMode())
        {
            return;
        }

        if (curNode != nodeIdHistory || _forced)
        {
            this.listInsertHistory(curNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExecuteQuerySMAMasterBOM</Name>
				<Source><![CDATA[
    public boolean mustExecuteQuerySMAMasterBOM()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowDeleteMasterBOM</Name>
				<Source><![CDATA[
    public boolean mustShowDeleteMasterBOM()
    {
        return this.accessServiceBOM() >= AccessType::Delete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowEditServiceBOM</Name>
				<Source><![CDATA[
    public boolean mustShowEditServiceBOM()
    {
        return this.accessServiceBOM() >= AccessType::Edit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowOpenInventTable</Name>
				<Source><![CDATA[
    public boolean mustShowOpenInventTable()
    {
        return this.accessItemTable() >= AccessType::View;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowReReadMasterBOM</Name>
				<Source><![CDATA[
    public boolean mustShowReReadMasterBOM()
    {
        return this.accessServiceBOM() >= AccessType::View;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateDelayedInfo</Name>
				<Source><![CDATA[
    public boolean mustUpdateDelayedInfo()
    {
        int nodeIdx = tree.getSelection();

        if (nodeIdx != lastDelayNode || nodeIdx == 0 || nodeIdx == rootId)
        {
            lastDelayNode = nodeIdx;
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(FormRun                _fr,
                       FormTreeControl        _tree,
                       FormListControl        _list,
                       tableId                _callerTableId)
    {
        fr                      = _fr;
        tree                    = _tree;
        list                    = _list;
        callerTableId           = _callerTableId;

        this.readAccessRights();
        this.getLast();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeImage</Name>
				<Source><![CDATA[
    ImageRes nodeImage(InventTable _inventTable)
    {
        return imageList.image(_inventTable.inventItemType().imageRessNo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTextFormatCode</Name>
				<Source><![CDATA[
    protected str getTextFormatCode()
    {
        // formating the text according to LTR or RTL
        if (currentSessionLanguageRTL())
        {
            //using RLM (right-to-left mark) to define the text orientation
            //%1 - previous chunk of text (RTL)
            //%2 - separator - (ascii or LTR)
            //%3 - added chunk (RTL)
            return '%1\u200F%2\u200E%3\u200F';
        }

        // regular text
        return '%1%2%3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeTxt</Name>
				<Source><![CDATA[
    str nodeTxt(SMAServiceBOMTable _serviceBOM, InventTable _inventTable)
    {
        str         lineTxt;
        str         formatCode  = this.getTextFormatCode();
        InventDim   inventDim   = this.inventDimCache(_serviceBOM.InventDimId);

        if (tmpSMABOMDesignerSetup.bomShowItemId)
        {
            lineTxt = strFmt(formatCode,  lineTxt, (lineTxt ? ' / ' : ''), (_serviceBOM.ItemId      ? _serviceBOM.ItemId      : '--'));
        }

        InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            FieldId prodDimFieldId = enum.currentInventDimFieldId();
            if (tmpSMABOMDesignerSetup.showProductDimension(prodDimFieldId))
            {
                anytype productDimFieldValue = inventDim.(prodDimFieldId);
                lineTxt = strFmt(formatCode, lineTxt, lineTxt ? ' / ' : '', productDimFieldValue ? productDimFieldValue : '--');
            }
        }

        if (tmpSMABOMDesignerSetup.bomShowItemName)
        {
            EcoResProductName productName = _inventTable.defaultProductName();
            lineTxt = strFmt(formatCode,  lineTxt, (lineTxt ? ' / ' : ''), (productName   ? productName   : '--'));
        }
        if (tmpSMABOMDesignerSetup.bomShowBOMQty)
        {
            Integer qtyDecimals = _serviceBOM.UnitID ? UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(_serviceBOM.UnitID)) : 2;

            lineTxt = strFmt(formatCode,  lineTxt, (lineTxt ? ' / ' : ''), (_serviceBOM.bomQty      ? num2str(_serviceBOM.bomQty, 0, qtyDecimals, 0, 0) : '--'));
        }
        if (tmpSMABOMDesignerSetup.bomShowUnitId)
        {
            lineTxt = strFmt(formatCode,  lineTxt, (lineTxt ? ' / ' : ''), (_serviceBOM.UnitID      ? _serviceBOM.UnitID      : '--'));
        }
        if (tmpSMABOMDesignerSetup.bomShowLineId)
        {
            lineTxt = strFmt(formatCode,  lineTxt, (lineTxt ? ' / ' : ''), (_serviceBOM.ServiceBOMLineId ? _serviceBOM.ServiceBOMLineId              : '--'));
        }

        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openInventTable</Name>
				<Source><![CDATA[
    public void openInventTable()
    {
        SMAServiceBOMTable  serviceBOM;
        MenuFunction        menuFunction;
        Args                args = new Args();

        if (!this.canOpenInventTable())
        {
            return;
        }

        if (node2record.exists(tree.getSelection()))
        {
            serviceBOM = node2record.lookup(tree.getSelection());
        }

        args.record(serviceBOM.RecId ? serviceBOM : null);

        if (!args.record())
        {
            return;
        }

        menuFunction = new MenuFunction(menuitemDisplayStr(EcoResProductDetailsExtended), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openMasterBOMFormNodeIdx</Name>
				<Source><![CDATA[
    public void openMasterBOMFormNodeIdx(int _curNode = tree.getSelection())
    {
        SMAServiceBOMChange  serviceBOMChange;
        SMAServiceBOMTable   bomEdit;
        SMAServiceBOMTable   bomNew;

        if (!this.canEditMasterBOM())
        {
            return;
        }

        bomEdit = node2record.lookup(_curNode);

        this.openServiceBOMForm(bomEdit);

        if (this.isMasterMode())
        {
            bomNew = SMAServiceBOMTable::find(bomEdit.ServiceBOMLineId);

            if (!this.toolsBufCmpData(bomEdit, bomNew))
            {
                this.treeReloadNode(_curNode);
            }
        }
        else
        {
            select firstonly RecId, ServiceBOMId, ServiceObjectRelationId, ReplacedServiceBOMLineId, ActiveServiceBOMLineId from serviceBOMChange
                index hint ReplacedIdx
                where serviceBOMChange.ServiceBOMId                 == callerTemplateBOMTable.TemplateBOMId &&
                      serviceBOMChange.ServiceObjectRelationId      == relationId &&
                      serviceBOMChange.ReplacedServiceBOMLineId == bomEdit.ServiceBOMLineId &&
                      serviceBOMChange.ActiveServiceBOMLineId   != '' &&
                      serviceBOMChange.ActiveServiceBOMLineId   != serviceBOMChange.ReplacedServiceBOMLineId;

            if (serviceBOMChange.RecId)
            {
                bomNew = SMAServiceBOMTable::find(serviceBOMChange.ActiveServiceBOMLineId);

                if (bomNew.RecId)
                {
                    this.treeSubstituteBOMonNode(_curNode, bomNew, bomEdit);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openServiceBOMForm</Name>
				<Source><![CDATA[
    public boolean openServiceBOMForm(SMAServiceBOMTable _serviceBOM = null, int _curNode = 0, NoYes _keepLevel        = NoYes::No, container _replaceRecIds = conNull())
    {
        SMAServiceBOMTable  serviceBOMTable;
        Args                args = new Args();
        FormRun             formRun;

        if (!this.mustShowEditServiceBOM())
        {
            return false;
        }

        if (!_curNode)
        {
            serviceBOMTable = _serviceBOM;
        }
        else if (node2record.exists(_curNode))
        {
            serviceBOMTable = node2record.lookup(_curNode);
        }
        else
        {
            // Call of form incorrect
            throw error("@SYS59200");
        }

        serviceBOMTable.ServiceObjectRelationId = relationId;
        serviceBOMTable.ObjectId                = objectId;
        serviceBOMTable.bomVersionDate          = tmpSMABOMDesignerSetup.bomRouteDate;

        args.name(formStr(SMABOMDesignerEditBOM));
        args.caller(this);
        args.parmEnum(_keepLevel);
        args.record(serviceBOMTable);
        args.parmObject(SMABOMDesignerCtrl::intCon2Set(_replaceRecIds));

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();

        return formRun.closedOk();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerSMAMasterBOMTable</Name>
				<Source><![CDATA[
    public SMATemplateBOMTable parmCallerSMAMasterBOMTable(SMATemplateBOMTable _callerTemplateBOMTable = callerTemplateBOMTable)
    {
        callerTemplateBOMTable = _callerTemplateBOMTable;

        return callerTemplateBOMTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurDropNode</Name>
				<Source><![CDATA[
    public int parmCurDropNode(int _curDropNode = curDropNode)
    {
        curDropNode = _curDropNode;

        return curDropNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveHeight</Name>
				<Source><![CDATA[
    public int parmSaveHeight(int _saveHeight = saveHeight)
    {
        saveHeight = _saveHeight;

        return saveHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveWidth</Name>
				<Source><![CDATA[
    public int parmSaveWidth(int _saveWidth = saveWidth)
    {
        saveWidth = _saveWidth;

        return saveWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceObjectId</Name>
				<Source><![CDATA[
    public SMAServiceObjectId parmServiceObjectId(SMAServiceObjectId _objectId = objectId)
    {
        objectId = _objectId;

        return objectId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceObjectRelation</Name>
				<Source><![CDATA[
    public SMAServiceObjectRelation parmServiceObjectRelation()
    {
        return smaServiceObjectRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSMAServiceObjectRelationId</Name>
				<Source><![CDATA[
    public SMAServiceObjectRelationId parmSMAServiceObjectRelationId(SMAServiceObjectRelationId _relationId = relationId)
    {
        relationId = _relationId;

        return relationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpSMABOMDesignerSetup</Name>
				<Source><![CDATA[
    public TmpSMABOMDesignerSetup parmTmpSMABOMDesignerSetup(TmpSMABOMDesignerSetup _tmpSMABOMDesignerSetup = tmpSMABOMDesignerSetup)
    {
        tmpSMABOMDesignerSetup = _tmpSMABOMDesignerSetup;

        return tmpSMABOMDesignerSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptBlockedItems</Name>
				<Source><![CDATA[
    private boolean promptBlockedItems(Common _addSource)
    {
        FormDataSource  fdS;
        InventTable     inventTable;
        ProdTable       prodTable;
        Common          buffer;
        str             infoOnHold;
        str             itemList;
        container       blockedItems;
        int             i;

        if (!_addSource.RecId)
        {
            return true;
        }

        if (_addSource.TableId != tableNum(InventTable) && _addSource.TableId != tableNum(ProdTable))
        {
            return true;
        }

        fdS = FormDataUtil::getFormDataSource(_addSource);

        for (buffer = fdS.getFirst(true) ? fdS.getFirst(true) : _addSource; buffer; buffer = fdS.getNext())
        {
            if (buffer.TableId == tableNum(InventTable))
            {
                inventTable = buffer;
                if (inventTable.inventItemInventSetup().isStopped())
                {
                    blockedItems += inventTable.ItemId;
                }
            }
            else
            {
                prodTable = buffer;
                if (prodTable.inventTable().inventItemInventSetup(prodTable.InventDimId).isStopped())
                {
                    blockedItems += prodTable.ItemId;
                }
            }
        }
        if (conLen(blockedItems) > 0)
        {
            // Items %1 are on hold. Add anyway?
            infoOnHold = conLen(blockedItems) > 1 ? "@SYS86992" : "@SYS68360";
            for (i = 1; i <= conLen(blockedItems); i++)
            {
                itemList += itemList && conLen(blockedItems) > 1 ? ', ' : '';
                itemList += conPeek(blockedItems,i);
            }
            if (!Box::yesNo(strFmt(infoOnHold, itemList), DialogButton::No, "@SYS68359", "@SYS68359"))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAccessRights</Name>
				<Source><![CDATA[
    void readAccessRights()
    {
        if (!fr)
        {
            // Wrong link
            throw error("@SYS67027");
        }

        accessBOM = isConfigurationkeyEnabled(configurationKeyNum(BOM)) ? new DictTable(tableNum(BOM)).rights() : AccessType::NoAccess;
        accessServiceBOM = isConfigurationkeyEnabled(configurationKeyNum(SMA)) ? new DictTable(tableNum(SMAServiceBOMTable)).rights() : AccessType::NoAccess;
        accessItemTable = SysDictTable::newTableId(tableNum(InventTable)).rights();
        accessProdTable = SysDictTable::newTableId(tableNum(ProdTable)).rights();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reNumberBOM</Name>
				<Source><![CDATA[
    void reNumberBOM(SMAServiceBOMTable _serviceBOMDrop)
    {
        SMAServiceBOMTable  serviceBOMCache;
        SMAServiceBOMTable  serviceBOMPacked;
        container           packedList;
        MapIterator         mi;
        int                 i;

        packedList = SMAServiceBOMTable::reNumber(_serviceBOMDrop.ServiceBOMId,_serviceBOMDrop.ServiceBOMParentLineId,true);

        for (i =1 ; i <= conLen(packedList); i++)
        {
            serviceBOMPacked = conPeek(packedList, i);
            mi = new MapIterator(node2record);
            while (mi.more())
            {
                serviceBOMCache = node2record.lookup(mi.key());
                if (serviceBOMCache.RecId == serviceBOMPacked.RecId)
                {
                    serviceBOMCache.LineNum = serviceBOMPacked.LineNum;
                    this.treeInsertMasterBOMRecord(mi.key(), serviceBOMCache);
                }
                mi.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the last choice by using the <see cref="M:RunBase.pack" /> method.
    /// </summary>
    /// <remarks>
    /// This method should not normally be overridden.
    /// </remarks>
    final public void saveLast()
    {
        FormRun callerForm = fr;

        saveWidth = callerForm.design().widthValue();
        saveHeight= callerForm.design().heightValue();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallerData</Name>
				<Source><![CDATA[
    void setCallerData(Common _caller)
    {
        switch (_caller.TableId)
        {
            case (tableNum(SMAServiceObjectRelation))  :
                smaServiceObjectRelation = _caller;
                relationId               = smaServiceObjectRelation.ServiceObjectRelationId;
                objectId                 = smaServiceObjectRelation.ServiceObjectId;
                callerTemplateBOMTable   = smaServiceObjectRelation.templateBOMTable();
                callerInventDim          = callerTemplateBOMTable.inventDim();
                callerCanHaveBOM         = callerTemplateBOMTable.RecId ? true : false;
                break;

            case (tableNum(SMATemplateBOMTable))  :
                callerTemplateBOMTable  = _caller;
                callerInventDim         = callerTemplateBOMTable.inventDim();
                callerCanHaveBOM        = callerTemplateBOMTable.RecId ? true : false;
                break;

            default                             :
                callerCanHaveBOM        = false;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEditMode</Name>
				<Source><![CDATA[
    void setEditMode()
    {
        // Check for invalid caller
        if (!callerTemplateBOMTable)
        {
            isEditMode = false;
        }
        else
        {
            // Service Mode
            if (!this.isMasterMode())
            {
                isEditMode = true;
            }
            // Master mode
            else
            {
                if (!callerTemplateBOMTable.RecId)
                {
                    isEditMode = false;
                }
                else
                {
                    isEditMode = SMAServiceObjectRelation::existTemplateBOM(callerTemplateBOMTable.TemplateBOMId) ? false : true;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromDate</Name>
				<Source><![CDATA[
    public void setFromDate(TransDate _fromDate)
    {
        fromDate = _fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToDate</Name>
				<Source><![CDATA[
    public void setToDate(TransDate _toDate)
    {
        toDate = _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupChange</Name>
				<Source><![CDATA[
    public void setupChange(TmpSMABOMDesignerSetup _tmpSMABOMDesignerSetup)
    {
        if (_tmpSMABOMDesignerSetup.equal(tmpSMABOMDesignerSetup))
        {
            return;
        }

        tmpSMABOMDesignerSetup.data(_tmpSMABOMDesignerSetup);

        this.saveLast();

        this.treeUpdateSubNodes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsBufCmpData</Name>
				<Source><![CDATA[
    public boolean toolsBufCmpData(Common  _b1, Common  _b2)
    {
        #DictField

        DictTable   dt;
        DictField   df;
        int         i;

        if (_b1.TableId != _b2.TableId)
        {
            return false;
        }

        dt = new DictTable(_b1.TableId);

        for (i = 1; i <= dt.fieldCnt(); i++)
        {
            df = new DictField(_b1.TableId,dt.fieldCnt2Id(i));
            if (df.id() == fieldNum(SMAServiceBOMTable, ObjectId))
            {
                continue;
            }

            if (bitTest(df.flags(), #DBF_STORE) && !df.isSystem())
            {
                if (_b1.(df.id()) != _b2.(df.id()))
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsFindLastChild</Name>
				<Source><![CDATA[
    private int toolsFindLastChild(int parentNodeIdx)
    {
        int curChild;
        int nextChild = tree.getChild(parentNodeIdx);

        if (!nextChild)
        {
            return parentNodeIdx;
        }

        while (nextChild)
        {
            curChild = nextChild;
            nextChild = tree.getNextSibling(curChild);
        }

        return curChild;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsGetAllSelected</Name>
				<Source><![CDATA[
    public container toolsGetAllSelected(boolean _recIds = false)
    {
        container           c;
        Integer             idx;
        SMAServiceBOMTable  buffer;

        idx = tree.getFirstSelected();

        while (idx)
        {
            if (_recIds && node2record.exists(idx))
            {
                buffer = node2record.lookup(idx);
                c += buffer.RecId;
            }
            else
            {
                c += idx;
            }
            idx = tree.getNextSelected(idx);
        }

        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsGetExpandedNodes</Name>
				<Source><![CDATA[
    container toolsGetExpandedNodes(int     _nodeIdx, boolean _useRecId = false)
    {
        container           nodeExpanded;
        int                 child;
        FormTreeItem        treeItem;
        SMAServiceBOMTable  serviceBOM;

        if (!_nodeIdx || !nodeCanHaveBOM.exists(_nodeIdx))
        {
            return conNull();
        }

        treeItem = tree.getItem(_nodeIdx);

        if (treeItem.stateExpanded())
        {
            if (_useRecId && node2record.exists(_nodeIdx))
            {
                serviceBOM = node2record.lookup(_nodeIdx);
                nodeExpanded += serviceBOM.RecId;
            }
            else
            {
                nodeExpanded += _nodeIdx;
            }
            child = tree.getChild(_nodeIdx);
            while (child)
            {
                if (nodeCanHaveBOM.exists(child))
                {
                    treeItem = tree.getItem(child);
                    if (treeItem.stateExpanded())
                    {
                        if (_useRecId)
                        {
                            if (node2record.exists(child))
                            {
                                serviceBOM = node2record.lookup(child);
                                nodeExpanded += this.toolsGetExpandedNodes(child, _useRecId);
                            }
                        }
                        else
                        {
                            nodeExpanded += this.toolsGetExpandedNodes(child, _useRecId);
                        }
                    }
                }
                child = tree.getNextSibling(child);
            }
        }

        return nodeExpanded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsHasChildren</Name>
				<Source><![CDATA[
    private boolean toolsHasChildren(int _nodeIdx)
    {
        return tree.getChild(_nodeIdx) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsIsNodeChild</Name>
				<Source><![CDATA[
    private boolean toolsIsNodeChild(int curNode, int childNode)
    {
        int tmpIdx_1;
        int tmpIdx_2;

        if (curNode == rootId)
        {
            return true;
        }

        if (curNode == childNode || childNode == rootId)
        {
            return false;
        }

        tmpIdx_2 = childNode;

        while (true)
        {
            tmpIdx_1 = tree.getParent(tmpIdx_2);

            if (!tmpIdx_1)
            {
                return false;
            }
            if (tmpIdx_1 == curNode)
            {
                return true;
            }
            if (tmpIdx_1 == rootId)
            {
                return false;
            }

            tmpIdx_2 = tmpIdx_1;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsNode2LineId</Name>
				<Source><![CDATA[
    public SMATemplateBOMLineId toolsNode2LineId(int _nodeIdx)
    {
        SMAServiceBOMTable buffer;

        if (_nodeIdx && node2record.exists(_nodeIdx))
        {
            buffer = node2record.lookup(_nodeIdx);
        }

        return buffer.ServiceBOMLineId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsNodeCanHaveBOM</Name>
				<Source><![CDATA[
    public boolean toolsNodeCanHaveBOM(int nodeIdx)
    {
        return nodeCanHaveBOM.exists(nodeIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsNodes2ParentRecIds</Name>
				<Source><![CDATA[
    public container toolsNodes2ParentRecIds(container _nodes)
    {
        int                 i,n;
        container           recIds;
        boolean             skip;
        SMAServiceBOMTable  buffer;

        for (i = 1; i <= conLen(_nodes); i++)
        {
            skip = false;
            n = tree.getParent(conPeek(_nodes,i));

            while (n != 0 && n != rootId && !skip)
            {
                if (conFind(_nodes,n))
                {
                    skip = true;
                }
                else
                {
                    n = tree.getParent(n);
                }
            }
            if (!skip && node2record.exists(conPeek(_nodes,i)))
            {
                buffer = node2record.lookup(conPeek(_nodes,i));
                if (buffer.RecId)
                {
                    recIds += buffer.RecId;
                }
            }
        }

        return recIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsNodes2RecIds</Name>
				<Source><![CDATA[
    container toolsNodes2RecIds(container _nodes)
    {
        int                 i;
        container           recIds;
        SMAServiceBOMTable  serviceBOM;

        for (i = 1; i <= conLen(_nodes); i++)
        {
            if (node2record.exists(conPeek(_nodes, i)))
            {
                serviceBOM = node2record.lookup(conPeek(_nodes, i));
                recIds += serviceBOM.RecId;
            }
        }

        return recIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsNodes2text</Name>
				<Source><![CDATA[
    private str toolsNodes2text(container _nodes = this.toolsGetAllSelected())
    {
        int                 i;
        int                 x;
        int                 len = conLen(_nodes);
        str                 txt;
        SMAServiceBOMTable  buffer;

        txt = '';
        for (i = 1; i <= len; i++)
        {
            if (node2record.exists(conPeek(_nodes, i)))
            {
                buffer = node2record.lookup(conPeek(_nodes,i));
                if (buffer.RecId)
                {
                    x++;
                    if (x > 3)
                    {
                        return txt + '.....';
                    }
                    txt += i < len && len > 1 ? '\'' + buffer.ItemId + '\'' + ', ' : buffer.ItemId;
                }
            }
        }

        return txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsNodesEliminateSubNodes</Name>
				<Source><![CDATA[
    private container toolsNodesEliminateSubNodes(container _allNodes)
    {
        container       limitedNodes;
        int             i,n;
        boolean         skip;

        for (i = 1; i <= conLen(_allNodes); i++)
        {
            skip = false;
            n    = tree.getParent(conPeek(_allNodes, i));

            while (n != rootId && !skip)
            {
                if (conFind(_allNodes, n))
                {
                    skip = true;
                }
                else
                {
                    n = tree.getParent(n);
                }
            }
            if (!skip)
            {
                limitedNodes += conPeek(_allNodes,i);
            }
        }

        return limitedNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolsNodesHasParentChildRel</Name>
				<Source><![CDATA[
    public boolean toolsNodesHasParentChildRel(container _nodes = this.toolsGetAllSelected())
    {
        int idxOuter,idxLoop;

        if (conLen(_nodes) <= 1)
        {
            return false;
        }

        for (idxOuter = 1; idxOuter <= conLen(_nodes); idxOuter++)
        {
            for (idxLoop = 1; idxLoop <= conLen(_nodes); idxLoop++)
            {
                if (idxLoop != idxOuter)
                {
                    if (this.toolsIsNodeChild(conPeek(_nodes, idxOuter), conPeek(_nodes,idxLoop)))
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>topNodeImage</Name>
				<Source><![CDATA[
    ImageRes topNodeImage()
    {
        return imageList.image(#ImageProductionSmall);
    }

]]></Source>
			</Method>
			<Method>
				<Name>topNodeTxt</Name>
				<Source><![CDATA[
    str topNodeTxt()
    {
        return new DictField(tableNum(SMATemplateBOMTable), fieldNum(SMATemplateBOMTable, TemplateBOMId)).label() + ': ' + callerTemplateBOMTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeAddLines</Name>
				<Source><![CDATA[
    public container treeAddLines(Common _addSource, int _dropNodeIdx, boolean _keepLevel = false, container   _replaceRecIds  = conNull())
    {
        FormDataSource      fdS;
        SMAServiceBOMTable  bomDrop,bomNew;
        Common              buffer;
        boolean             first = true;
        boolean             keepLevel = _keepLevel;
        container           newRecIds;
        int                 nextDropNode;
        int                 tmpDropNode;

        if (_addSource.TableId != tableNum(InventTable) && _addSource.TableId != tableNum(ProdTable))
        {
            return conNull();
        }

        if (!_addSource.RecId || !_dropNodeIdx || !this.promptBlockedItems(_addSource))
        {
            return conNull();
        }

        nextDropNode = _dropNodeIdx;

        try
        {
            this.treeUnSelectAll();
            fdS = FormDataUtil::getFormDataSource(_addSource);
            for (buffer = fdS.getFirst(true) ? fdS.getFirst(true) : _addSource;buffer;buffer = fdS.getNext())
            {
                if (nextDropNode == rootId)
                {
                    bomDrop = null;
                }
                else
                {
                    if (node2record.exists(nextDropNode))
                    {
                        bomDrop = node2record.lookup(nextDropNode);
                    }
                    else
                    {
                        bomDrop = null;
                    }
                }
                bomNew.clear();

                bomNew.ServiceBOMId = callerTemplateBOMTable.TemplateBOMId;

                if (buffer.TableId == tableNum(InventTable))
                {
                    bomNew.initFromInventTable(buffer);
                }
                if (buffer.TableId == tableNum(ProdTable))
                {
                    bomNew.initFromProdTable(buffer);
                }

                this.initSMAServiceBOM(bomNew, bomDrop, _dropNodeIdx, keepLevel, true);
                bomNew.initCopyRefFieldsBOM(buffer, tmpSMABOMDesignerSetup.bomRouteDate);

                if (tmpSMABOMDesignerSetup.AutoEdit || !bomNew.validateWrite())
                {
                    curDropNode = nextDropNode;
                    this.openServiceBOMForm(bomNew, 0, keepLevel, _replaceRecIds);
                    bomNew = SMAServiceBOMTable::find(bomNew.ServiceBOMLineId);
                }
                else
                {
                    ttsbegin;

                    if (!bomNew.validateWrite())
                    {
                        throw Exception::Error;
                    }

                    bomNew.insert();

                    if (conLen(_replaceRecIds))
                    {
                        bomNew.replaceLines(_replaceRecIds);
                    }

                    ttscommit;
                }
                if (bomNew.RecId)
                {
                    newRecIds += bomNew.RecId;
                    tmpDropNode = this.treeAddNode(bomNew, nextDropNode, keepLevel);
                    if (tmpDropNode && first)
                    {
                        tree.select(tmpDropNode);
                    }
                    else
                    if (tmpDropNode && !first)
                    {
                        tree.selectEx(tmpDropNode, false);
                    }
                    nextDropNode = tmpDropNode ? tmpDropNode : nextDropNode;
                    first = first && !tmpDropNode ? true : false;
                }
                keepLevel = true;
            }
            tree.setFocus();
        }
        catch (Exception::Error)
        {
            return conNull();
        }
        
        return newRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeAddNode</Name>
				<Source><![CDATA[
    public int treeAddNode(SMAServiceBOMTable _bomNew, int _dropNodeIdx, boolean _keepLevel = false)
    {
        int selectNode;

        FormTreeItem dropTreeItem = tree.getItem(_dropNodeIdx);
        if (nodeCanHaveBOM.exists(_dropNodeIdx) && !dropTreeItem.stateExpandedOnce() && !_keepLevel)
        {
            if (nodeBOMStatus.exists(_dropNodeIdx) && !this.toolsHasChildren(_dropNodeIdx))
                nodeBOMStatus.remove(_dropNodeIdx);
            tree.expand(_dropNodeIdx,FormTreeExpand::Expand);
            if (_bomNew.RecId && recId2Node.exists(_bomNew.RecId))
            {
                selectNode = recId2Node.lookup(_bomNew.RecId);
            }
            else
            {
                selectNode = this.toolsFindLastChild(_dropNodeIdx);
            }
        }
        else
        {
            int parentIdx   = nodeCanHaveBOM.exists(_dropNodeIdx) && !_keepLevel ? _dropNodeIdx : tree.getParent(_dropNodeIdx);
            int newIdx      = tree.add(parentIdx,_dropNodeIdx,this.nodeTxt(_bomNew,_bomNew.inventTable()),this.nodeImage(_bomNew.inventTable()));
            selectNode  = newIdx;
            node2record.insert(newIdx,_bomNew);
            recId2Node.insert(_bomNew.RecId,newIdx);
            if (_bomNew.inventTable().isProducedByDefault())
            {
                this.treeSetNodeBOM(newIdx);
            }
            else
            {
                this.treeSetNodeItem(newIdx);
            }
        }

        return selectNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeBuildOneNode</Name>
				<Source><![CDATA[
    private void treeBuildOneNode(int _parentNodeId, boolean _recursive = false)
    {
        Common              caller;
        SMAServiceBOMTable  masterBOM;
        InventTable         inventTable;
        InventDim           inventDim;
        FormTreeItem        treeItem;
        container           nodeMasterData,nodeDimData;
        int                 x,l,newId;
        boolean             nodeError;

        if (!_parentNodeId || nodeBOMStatus.exists(_parentNodeId))
            return;

        nodeError = false;
        try
        {
            if (_parentNodeId == rootId || node2record.exists(_parentNodeId))
            {
                if (_parentNodeId == rootId)
                {
                    caller = callerTemplateBOMTable;
                }
                else
                {
                    caller = node2record.lookup(_parentNodeId);
                }
                [nodeMasterData,nodeDimData] = SMAServiceBOMTable::selectLevelPack(caller, relationId);
            }
        }
        catch (Exception::Error)
        {
            // just continue;
            nodeError = false;
        }

        l = conLen(nodeDimData);
        for (x=1;x<=l;x++)
        {
            inventDim = conPeek(nodeDimData,x);
            dimId2record.insert(inventDim.InventDimId,inventDim);
        }

        l = conLen(nodeMasterData);
        for (x=1;x<=l;x++)
        {
            masterBOM    = conPeek(nodeMasterData,x);
            inventTable     = masterBOM.inventTable();
            newId           = tree.add(_parentNodeId,0,this.nodeTxt(masterBOM,inventTable),this.nodeImage(inventTable));
            this.treeInsertMasterBOMRecord(newId,masterBOM);
            if (inventTable.isProducedByDefault())
            {
                this.treeSetNodeBOM(newId);
                if (_recursive)
                    this.treeBuildOneNode(newId,_recursive);
            }
            else
            {
                this.treeSetNodeItem(newId);
            }
        }
        nodeBOMStatus.insert(_parentNodeId,1);

        if (l)
            tree.expand(_parentNodeId,FormTreeExpand::Expand);
        else
        {
            treeItem = tree.getItem(_parentNodeId);
            treeItem.stateExpanded(true);
            tree.setItem(treeItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeClearAll</Name>
				<Source><![CDATA[
    void treeClearAll()
    {
        this.treeClearBOM();
        this.treeClearHistory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeClearBOM</Name>
				<Source><![CDATA[
    void treeClearBOM()
    {
        tree.deleteAll();

        node2record     = new Map(Types::Integer, Types::Record);
        dimId2record    = new Map(Types::String, Types::Record);
        nodeCanHaveBOM  = new Map(Types::Integer, Types::Integer);
        recId2Node      = new Map(Types::Int64, Types::Integer);
        nodeBOMStatus   = new Map(Types::Integer, Types::Integer);

        rootId = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeClearHistory</Name>
				<Source><![CDATA[
    void treeClearHistory()
    {
        list.deleteAll();

        node2History        = new Map(Types::Integer, Types::Container);
        nodeHistoryStatus   = new Map(Types::Integer, Types::Integer);
        nodeIdHistory       = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeClearHistoryOnNode</Name>
				<Source><![CDATA[
    public void treeClearHistoryOnNode(int _nodeIdx)
    {
        nodeHistoryStatus.remove(_nodeIdx);
        node2History.remove(_nodeIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeCopyLines</Name>
				<Source><![CDATA[
    public boolean treeCopyLines(container _copyNodes, int _dropNodeIdx)
    {
        int                 curCopyNodeIdx;
        int                 curDropNodeIdx;
        int                 i;
        container           hiLightNodes;
        FormTreeItem        treeItem;
        SMAServiceBOMTable  tmpBuffer;

        if (!this.canDropSelectedNodes(_dropNodeIdx,_copyNodes))
        {
            return false;
        }

        curDropNodeIdx = _dropNodeIdx;

        for (i = 1; i <= conLen(_copyNodes); i++)
        {
            curCopyNodeIdx = conPeek(_copyNodes, i);
            tmpBuffer = node2record.lookup(curCopyNodeIdx);
            curDropNodeIdx = this.treeCopyNode(curCopyNodeIdx, curDropNodeIdx, i > 1 ? true : false);
            hiLightNodes += curDropNodeIdx;

            treeItem = tree.getItem(curCopyNodeIdx);
            if (treeItem)
            {
                treeItem.stateSelected(false);
                tree.setItem(treeItem);
            }
        }

        if (conLen(hiLightNodes))
        {
            tree.select(conPeek(hiLightNodes,1));
        }

        for (i = 2; i <= conLen(hiLightNodes); i++)
        {
            tree.selectEx(conPeek(hiLightNodes, i), false);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeCopyNode</Name>
				<Source><![CDATA[
    private int treeCopyNode(int _copyNodeIdx, int _dropNodeIdx, boolean _keepLevel = false)
    {
        SMAServiceBOMTable  bomDrop,bomTmp,bomSource,bomNew;
        int                 newNodeIdx;

        if (_dropNodeIdx != rootId)
            bomDrop = node2record.lookup(_dropNodeIdx);

        bomTmp = node2record.lookup(_copyNodeIdx);

        if (bomDrop.RecId && bomTmp.RecId && bomDrop.RecId == bomTmp.RecId)
            return 0;

        ttsbegin;

        bomSource = SMAServiceBOMTable::find(bomTmp.ServiceBOMLineId);
        bomNew.data(bomSource);
        this.initSMAServiceBOM(bomNew,bomDrop,_dropNodeIdx,_keepLevel,true);
        bomNew.initCopyRefFieldsBOM(bomSource,tmpSMABOMDesignerSetup.bomRouteDate);

        if (!bomNew.validateWrite())
            throw error("@SYS25904");

        bomNew.insert();

        ttscommit;

        newNodeIdx = this.treeAddNode(bomNew,_dropNodeIdx,_keepLevel);

        return newNodeIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeChildrenCollect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects the node IDs for a branch in the tree.
    /// </summary>
    /// <param name = "_nodeIdx">The top node to collect node IDs for.</param>
    /// <param name = "_recursive">A Boolean flag indicating if the collection should only include all levels in the tree.</param>
    /// <returns>A list of all children.</returns>
    protected final List treeChildrenCollect(int _nodeIdx, boolean _recursive = true)
    {
        List nodesCollected = new List(Types::Integer);

        if (!_nodeIdx || !nodeCanHaveBOM.exists(_nodeIdx))
        {
            return nodesCollected;
        }

        int child = _nodeIdx ? tree.getChild(_nodeIdx) : 0;

        while (child)
        {
            if (_recursive)
            {
                List::merge(nodesCollected, this.treeChildrenCollect(child));
            }
            nodesCollected.addEnd(child);
            child = tree.getNextSibling(child);
        }
        return nodesCollected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeDeleteLines</Name>
				<Source><![CDATA[
    public boolean treeDeleteLines(container  _deleteNodes = this.toolsGetAllSelected())
    {
        int         i;
        int         curDeleteNodeIdx;
        container   c;

        if (!this.canDeleteMasterBOM() || !conLen(_deleteNodes))
        {
            return false;
        }

        if (tmpSMABOMDesignerSetup.ConfirmDelete)
        {
            if (conLen(_deleteNodes) == 1 && !Box::yesNo(strFmt("@SYS67139", this.toolsNodes2text()), DialogButton::No,"@SYS10308", "@SYS10308"))
            {
                return false;
            }
            else
            if (conLen(_deleteNodes) > 1 && !Box::yesNo(strFmt("@SYS86991", conLen(_deleteNodes), this.toolsNodes2text()), DialogButton::No,"@SYS10308", "@SYS10308"))
            {
                return false;
            }
        }

        c = this.toolsNodes2ParentRecIds(_deleteNodes);

        try
        {
            ttsbegin;

            SMAServiceBOMTable::multiDelete(c, relationId, objectId);

            ttscommit;

            for (i = 1; i <= conLen(_deleteNodes); i++)
            {
                curDeleteNodeIdx = conPeek(_deleteNodes,i);
                if (node2record.exists(curDeleteNodeIdx))
                {
                    this.treeDeleteNode(curDeleteNodeIdx);
                }
            }
        }
        catch (Exception::Error)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeDeleteNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a node and all its children in the tree.
    /// </summary>
    /// <param name = "_nodeIdx">The ID of the node to delete.</param>
    /// <param name = "_doDB">A Boolean flag controlling if the delete should be committed to the DB.</param>
    /// <param name = "_leaveTopNode">A Boolean flag controlling if the top node specified by the <c>_nodeIdx</c> parameter should be deleted too.</param>
    protected final void treeDeleteNode(int _nodeIdx, boolean _doDB = false, boolean _leaveTopNode = false)
    {
        List                nodesToDelete = new List(Types::Integer);

        if (!_nodeIdx || _nodeIdx == rootId || !node2record.exists(_nodeIdx))
        {
            return;
        }

        if (_doDB)
        {
            SMAServiceBOMTable bomDel = node2record.lookup(_nodeIdx);
            if (!bomDel.RecId)
            {
                return;
            }

            ttsbegin;
            bomDel = SMAServiceBOMTable::find(bomDel.ServiceBOMLineId,true);
            if (!bomDel.validateDelete())
            {
                throw error("@SYS25904");
            }

            bomDel.delete(false,true);
            ttscommit;
        }

        nodesToDelete = this.treeChildrenCollect(_nodeIdx);

        if (!_leaveTopNode)
        {
            nodesToDelete.addStart(_nodeIdx);
        }

        ListEnumerator listEnum = nodesToDelete.getEnumerator();
        while (listEnum.moveNext())
        {
            int tmpNode = listEnum.current();

            node2record.remove(tmpNode);
            nodeBOMStatus.remove(tmpNode);
            nodeCanHaveBOM.remove(tmpNode);

            this.treeClearHistoryOnNode(tree.getParent(tmpNode));

            tree.delete(tmpNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeExpandNode</Name>
				<Source><![CDATA[
    public void treeExpandNode(int _nodeIdx)
    {
        if (nodeCanHaveBOM.exists(_nodeIdx) && !nodeBOMStatus.exists(_nodeIdx) && (node2record.exists(_nodeIdx) || _nodeIdx == rootId))
        {
            this.treeBuildOneNode(_nodeIdx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeInsertMasterBOMRecord</Name>
				<Source><![CDATA[
    void treeInsertMasterBOMRecord(Integer _id, SMAServiceBOMTable _serviceBOM)
    {
        node2record.insert(_id,_serviceBOM);
        recId2Node.insert(_serviceBOM.RecId,_id);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeInsertTopNode</Name>
				<Source><![CDATA[
    private int treeInsertTopNode()
    {
        FormTreeItem        treeItem;
        int                 newId;

        if (!callerCanHaveBOM)
            return 0;

        newId = tree.add(0,0,this.topNodeTxt(),this.topNodeImage());
        this.treeSetNodeBOM(newId);

        if (!callerTemplateBOMTable.RecId)
        {
            treeItem = tree.getItem(newId);
            treeItem.stateImage(imageListState.image(#ImageStateNotAtAllOK));
            treeItem.stateExpanded(true);
            tree.setItem(treeItem);
        }
        rootId = newId;
        return newId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeMoveLines</Name>
				<Source><![CDATA[
    public container treeMoveLines(container _moveNodes, int _dropNodeIdx)
    {
        boolean             delayedSelect;
        int                 curMoveNodeIdx,curDropNodeIdx,i;
        container           hiLightRecords,selectNodes;
        SMAServiceBOMTable  tmpBuffer;

        if (!this.canMoveSelectedNodes(_moveNodes))
            return conNull();

        if (!this.canDropSelectedNodes(_dropNodeIdx,_moveNodes))
            return conNull();

        if (nodeCanHaveBOM.exists(_dropNodeIdx) && conLen(_moveNodes) == 1 && tree.getItem(_dropNodeIdx) && !tree.getItem(_dropNodeIdx).stateExpandedOnce())
            delayedSelect = true;

        curDropNodeIdx = _dropNodeIdx;

        for (i=1; i<=conLen(_moveNodes); i++)
        {
            curMoveNodeIdx  = conPeek(_moveNodes,i);
            tmpBuffer       = node2record.lookup(curMoveNodeIdx);
            hiLightRecords += tmpBuffer.RecId;
            curDropNodeIdx  = this.treeMoveNode(curMoveNodeIdx,curDropNodeIdx, i>1 ? true : false);
        }
        for (i=1;i<=conLen(hiLightRecords);i++)
            if (recId2Node.exists(conPeek(hiLightRecords,i)))
                selectNodes += recId2Node.lookup(conPeek(hiLightRecords,i));

        if (!delayedSelect && conLen(selectNodes) > 0) // delay select is a work-around for a bug in the tree control - the form will select the moved nodes 1 ms after the action has ended
        {                                              // problem only appears if one signle node is moved and dropped on a BOM-node which has never been expanded
            tree.select(conPeek(selectNodes,1));
            for (i=2; i<=conLen(selectNodes); i++)
                tree.selectEx(conPeek(selectNodes,i),false);
        }
        return delayedSelect ? selectNodes : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeMoveNode</Name>
				<Source><![CDATA[
    private int treeMoveNode(int _moveNodeIdx, int _dropNodeIdx, boolean _keepLevel = false)
    {
        SMAServiceBOMTable  bomDrop,bomTmp,bomUpd;
        int                 newNodeIdx,i;
        container           expandedRecIds;

        if (_dropNodeIdx != rootId)
        {
            bomDrop = node2record.lookup(_dropNodeIdx);
        }

        bomTmp = node2record.lookup(_moveNodeIdx);

        if (bomTmp.OrigLine && relationId)
        {
            throw error("@SYS86990");
        }

        if (bomDrop.RecId && bomTmp.RecId && bomDrop.RecId == bomTmp.RecId)
        {
            return 0;
        }

        ttsbegin;

        bomUpd = SMAServiceBOMTable::find(bomTmp.ServiceBOMLineId,true);
        this.initSMAServiceBOM(bomUpd,bomDrop,_dropNodeIdx,_keepLevel,false);

        if (!bomUpd.validateWrite())
        {
            throw error("@SYS25904");
        }

        bomUpd.update();

        ttscommit;

        expandedRecIds = this.toolsGetExpandedNodes(_moveNodeIdx,true);
        this.treeDeleteNode(_moveNodeIdx);
        newNodeIdx = this.treeAddNode(bomUpd,_dropNodeIdx,_keepLevel);
        for (i=1;i<=conLen(expandedRecIds);i++)
        {
            tree.expand(recId2Node.lookup(conPeek(expandedRecIds,i)));
        }

        return newNodeIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeReloadLines</Name>
				<Source><![CDATA[
    void treeReloadLines(container _reloadNodes = this.toolsGetAllSelected())
    {
        container reloadNodes;
        int       i;

        if (conLen(_reloadNodes) == 0)
            return;

        if (conFind(_reloadNodes,rootId))
        {
            this.linkActive(callerTemplateBOMTable,tmpSMABOMDesignerSetup);
            return;
        }
        reloadNodes = this.toolsNodesEliminateSubNodes(_reloadNodes);

        for (i=1;i<=conLen(reloadNodes);i++)
        {
            this.treeReloadNode(conPeek(reloadNodes,i));
        }
        this.listSetHistory(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeReloadNode</Name>
				<Source><![CDATA[
    public void treeReloadNode(int _nodeIdx)
    {
        SMAServiceBOMTable  bomReload, bomDB;

        if (!_nodeIdx || (_nodeIdx != rootId && !node2record.exists(_nodeIdx)))
        {
            return;
        }

        if (_nodeIdx != rootId)
        {
            bomReload = node2record.lookup(_nodeIdx);
        }     

        bomDB.recordLevelSecurity(true);
        bomDB = SMAServiceBOMTable::find(bomReload.ServiceBOMLineId);

        if (!bomDB.RecId)
        {
            this.treeDeleteNode(_nodeIdx,false);
        }
        else
        {
            boolean reExpand;

            FormTreeItem treeItem = tree.getItem(_nodeIdx);
            if (nodeCanHaveBOM.exists(_nodeIdx))
            {
                if (treeItem.stateExpanded())
                {
                    treeItem.stateExpanded(false);
                    tree.setItem(treeItem);
                    tree.expand(_nodeIdx, FormTreeExpand::Collapse);
                    reExpand = true;
                }
                ListEnumerator enum = this.treeChildrenCollect(_nodeIdx, false).getEnumerator();
                while (enum.moveNext())
                {
                    this.treeDeleteNode(enum.current());
                }
            }
            nodeCanHaveBOM.remove(_nodeIdx);
            nodeBOMStatus.remove(_nodeIdx);
            node2History.remove(_nodeIdx);
            nodeHistoryStatus.remove(_nodeIdx);

            this.treeInsertMasterBOMRecord(_nodeIdx, bomDB);

            // bomDB record is fetched using record level security
            treeItem.text(this.nodeTxt(bomDB,bomDB.inventTable()));
            treeItem.image(this.nodeImage(bomDB.inventTable()));
            treeItem.stateImage(0);
            treeItem.selectedImage(treeItem.image());
            tree.setItem(treeItem);

            if (bomDB.inventTable().isProducedByDefault())
            {
                this.treeSetNodeBOM(_nodeIdx);
            }
            else
            {
                this.treeSetNodeItem(_nodeIdx);
            }

            if (reExpand)
            {
                this.treeExpandNode(_nodeIdx);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeReplaceLines</Name>
				<Source><![CDATA[
    public boolean treeReplaceLines(Common _addSource, container _replaceNodes = this.toolsGetAllSelected())
    {
        container  newRecIds;
        int        h;

        if (!this.canReplaceSelectedNodes(_replaceNodes))
            return false;
        if (_addSource.TableId != tableNum(InventTable) && _addSource.TableId != tableNum(ProdTable))
            return false;
        if (!_addSource.RecId || !this.promptBlockedItems(_addSource))
            return false;

        try
        {
            newRecIds = this.treeAddLines(_addSource,tree.getSelection(),true,this.toolsNodes2RecIds(_replaceNodes));
            for (h=1;h<=conLen(_replaceNodes);h++)
                this.treeDeleteNode(conPeek(_replaceNodes,h),false,false);

            for (h=1;h<=conLen(newRecIds);h++)
                if (recId2Node.exists(conPeek(newRecIds,h)))
                    this.treeClearHistoryOnNode(recId2Node.lookup(conPeek(newRecIds,h)));

            this.listSetHistory(true);
        }
        catch (Exception::Error)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeSetNodeBOM</Name>
				<Source><![CDATA[
    void treeSetNodeBOM(int _nodeIdx)
    {
        FormTreeItem        treeItem;
        SMAServiceBOMTable  buffer;

        if (!this.isMasterMode())
        {
            if (node2record.exists(_nodeIdx))
            {
                buffer = node2record.lookup(_nodeIdx);
            }
            else
            {
                buffer = null;
            }
        }

        nodeCanHaveBOM.insert(_nodeIdx,1);
        treeItem = tree.getItem(_nodeIdx);
        treeItem.stateBold(buffer.RecId && buffer.OrigLine == NoYes::No);
        treeItem.children(true);
        tree.setItem(treeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeSetNodeItem</Name>
				<Source><![CDATA[
    void treeSetNodeItem(int _nodeIdx)
    {
        FormTreeItem        treeItem;
        SMAServiceBOMTable  buffer;

        nodeCanHaveBOM.remove(_nodeIdx);

        if (!this.isMasterMode())
        {
            if (node2record.exists(_nodeIdx))
            {
                buffer = node2record.lookup(_nodeIdx);
            }
            else
            {
                buffer = null;
            }
        }

        treeItem = tree.getItem(_nodeIdx);
        treeItem.stateBold(buffer.RecId && buffer.OrigLine == NoYes::No);
        treeItem.children(false);
        tree.setItem(treeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeSubstituteBOMonNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Substitutes the BOM on a node in the tree.
    /// </summary>
    /// <param name = "_curNode">The node ID.</param>
    /// <param name = "_bomNew">The new BOM.</param>
    /// <param name = "_bomOld">The old BOM.</param>
    protected final void treeSubstituteBOMonNode(int _curNode, SMAServiceBOMTable _bomNew, SMAServiceBOMTable _bomOld)
    {
        try
        {
            this.treeDeleteNode(_curNode, false, true);
            node2record.insert(_curNode,_bomNew);
            this.treeReloadNode(_curNode);

            nodeHistoryStatus.remove(_curNode);
            node2History.remove(_curNode);

            this.listSetHistory(true);
        }
        catch (Exception::Deadlock)
        {
            throw Exception::Error;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                throw Exception::Error;
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeUnSelectAll</Name>
				<Source><![CDATA[
    private void treeUnSelectAll()
    {
        int idx = tree.getFirstSelected();

        while (idx)
        {
            tree.selectEx(idx,false);
            idx = tree.getFirstSelected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeUpdateSubNodes</Name>
				<Source><![CDATA[
    private void treeUpdateSubNodes(int _parent = 0)
    {
        SMAServiceBOMTable  serviceBOM;
        FormTreeItem        treeItem;
        int                 child = _parent ? tree.getChild(_parent) : tree.getRoot();

        while (child)
        {
            this.treeUpdateSubNodes(child);
            if (_parent && node2record.exists(child))
            {
                serviceBOM = node2record.lookup(child);
                treeItem = tree.getItem(child);
                treeItem.text(this.nodeTxt(serviceBOM,serviceBOM.inventTable()));
                tree.setItem(treeItem);
            }
            child = tree.getNextSibling(child);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer   version     = conPeek(packedClass,1);
        switch (version)
        {
            case #CurrentVersion    :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SMABOMDesignerCtrl construct(FormRun _fr,FormTreeControl _tree, FormListControl _list, tableId _callerTableId)
    {
        return new SMABOMDesignerCtrl(_fr, _tree, _list, _callerTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS86989";
    }

]]></Source>
			</Method>
			<Method>
				<Name>intCon2Set</Name>
				<Source><![CDATA[
    public static Set intCon2Set(container _intCon)
    {
        int     i;
        Set     intSet = new Set(Types::Int64);

        if (!conLen(_intCon))
            return null;

        for (i=1;i<=conLen(_intCon);i++)
            intSet.add(conPeek(_intCon,i));
        return intSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intSet2Con</Name>
				<Source><![CDATA[
    public static container intSet2Con(Set _intSet)
    {
        SetEnumerator se;
        container     intCon;

        if (!_intSet || !_intSet.elements())
            return conNull();

        se = _intSet.getEnumerator();
        while (se.moveNext())
            intCon += se.current();

        return intCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>