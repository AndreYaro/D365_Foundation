<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticFormDataEditBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements balance calculation for <c>CFMAnalyticFormDataEdit</c> form.
/// </summary>
class CFMAnalyticFormDataEditBalance
{
    CFMAnalyticTableTmp analyticTable, analyticTableDocLevel;
    Map fieldSourceTargetMap, amountDateFieldIdMap, amountDimLevel;
    TransDate paymentDate;
    CFMJournalId journalId;
    NoYes isAccountLimitUsed;

    CFMCashBalanceMinimum amountLimit;
    AmountCur actualBalance;
    AmountCur markedTotalAmount;
    CurrencyCode currencyCode;
    CFMPaymentAccountNum paymentAccountNum;
    CFMPaymentAccountType paymentaccountType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMAnalyticFormDataEditBalance construct(CFMAnalyticTableTmp _analyticTableDocLevel,
        TransDate _paymentDate,
        Map _fieldSourceTargetMap,
        Map _amountDateFieldIdMap,
        CFMJournalId _journalId,
        NoYes _isAccountLimitUsed)
    {
        CFMAnalyticFormDataEditBalance balance = new CFMAnalyticFormDataEditBalance();

        balance.parmAanalyticTableDocLevel(_analyticTableDocLevel);
        balance.parmPaymentDate(_paymentDate);
        balance.parmFieldSourceTargetMap(_fieldSourceTargetMap);
        balance.parmJournalId(_journalId);
        balance.parmIsAccountLimitUsed(_isAccountLimitUsed);
        balance.parmAmountDateFieldIdMap(_amountDateFieldIdMap);

        if (balance.validateParms())
        {
            balance.init();
        }
        else
        {
            throw error(error::missingParameter(null));
        }

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actualBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return actual balance
    /// </summary>
    /// <returns>
    /// Amount in currency of actual balance
    /// </returns>
    public AmountCur actualBalance()
    {
        return actualBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>differenceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return difference between amount of limit and actual balance with marked lines in <c>CFMAnalyticFormDataEdit</c> form
    /// </summary>
    /// <returns>
    /// Amount in currency of actual balance
    /// </returns>
    public AmountCur differenceAmount()
    {
        return actualBalance - amountLimit - markedTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActualBalanceLine</Name>
				<Source><![CDATA[
    private boolean findActualBalanceLine(container _sortValueIdx)
    {
        int len = conLen(_sortValueIdx);

        if (len)
        {
            Query query = new Query();
            QueryBuildDataSource qbds = query.addDataSource(tableNum(CFMAnalyticTableTmp));

            int idx = conpeek(_sortValueIdx, len);
            qbds.addRange(fieldNum(CFMAnalyticTableTmp, Level)).value(queryValue(idx)); //the last value in conatiner is max level of the sort fields
            qbds.addRange(fieldNum(CFMAnalyticTableTmp, AnalyticLineType)).value(queryValue(CFMAnalyticLineType::ActualBalance));

            for (int i =1; i <= len; i++)
            {
                idx = conpeek(_sortValueIdx, i);
                qbds.addRange(fieldNum(CFMAnalyticTableTmp, SortMeasure), idx).value(queryValue(analyticTableDocLevel.getFieldValue(fieldStr(CFMAnalyticTableTmp, SortMeasure), idx)));
            }

            qbds.firstOnly(true);

            QueryRun queryRun = new QueryRun(query);
            queryRun.setRecord(analyticTable);
            queryRun.next();

            analyticTable = queryRun.get(analyticTable.TableId);
        }

        return analyticTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimValueByDimId</Name>
				<Source><![CDATA[
    private str getDimValueByDimId(FieldId _analyticFieldId, CFMAnalyticTableTmp _analyticTableValueDataSource)
    {
        str value;

        if (amountDimLevel.exists(_analyticFieldId))
        {
            int idx = amountDimLevel.lookup(_analyticFieldId);
            value = _analyticTableValueDataSource.getFieldValue(fieldStr(CFMAnalyticTableTmp, SortMeasure), idx);
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        container sortValueIdx = this.initAmountDimensions();

        currencyCode = this.getDimValueByDimId(fieldNum(CFMAnalyticTableTmp, CurrencyCode), analyticTableDocLevel);

        analyticTable.linkPhysicalTableInstance(analyticTableDocLevel);

        if (this.findActualBalanceLine(sortValueIdx))
        {
            this.initActualBalance();
            this.initLimitAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActualBalance</Name>
				<Source><![CDATA[
    private void initActualBalance()
    {
        FieldId fieldId = this.paymDate2FieldId();

        if (fieldId)
        {
            actualBalance = analyticTable.(fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmountDimensions</Name>
				<Source><![CDATA[
    private container initAmountDimensions()
    {
        container sortValueIdx;

        const int TargetFieldIdIdx =3;

        MapEnumerator mapEnum =  fieldSourceTargetMap.getEnumerator();
        Set amountDim = this.initBalanceAmountDimensions();
        amountDimLevel = new Map(Types::Integer, Types::Integer);

        while (mapEnum.moveNext() && !amountDim.empty())
        {
            container conValue = mapEnum.currentValue();
            FieldId targetFieldId = conPeek(conValue, TargetFieldIdIdx);

            if (amountDim.in(targetFieldId))
            {
                int idx = mapEnum.currentKey();

                sortValueIdx += idx;

                amountDimLevel.insert(targetFieldId, idx);
                amountDim.remove(targetFieldId);
            }
        }

        return sortValueIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBalanceAmountDimensions</Name>
				<Source><![CDATA[
    private Set initBalanceAmountDimensions()
    {
        Set set = new Set(Types::Integer);

        set.add(fieldNum(CFMAnalyticTableTmp, CurrencyCode));

        if (isAccountLimitUsed)
        {
            set.add(fieldNum(CFMAnalyticTableTmp, PaymentAccountType));
            set.add(fieldNum(CFMAnalyticTableTmp, PaymentAccountNum));
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLimitAmount</Name>
				<Source><![CDATA[
    private void initLimitAmount()
    {
		if (isAccountLimitUsed)
        {
            paymentAccountNum = this.getDimValueByDimId(fieldNum(CFMAnalyticTableTmp, PaymentAccountNum), analyticTableDocLevel);
            paymentaccountType = analyticTableDocLevel.PaymentAccountType;

            switch (paymentaccountType)
            {
                case CFMPaymentAccountType::Bank:
                    amountLimit = BankAccountTable::find(paymentAccountNum).CFMBankBalanceMinimum;
                    break;

                case CFMPaymentAccountType::Cash_RU:

                    if (isConfigurationkeyEnabled(configurationKeyNum(RCash)))
                    {
                        amountLimit = RCashTable::find(paymentAccountNum).CFMCashBalanceMinimum;
                    }
                    break;
            }
        }
        else
        {
            CFMJournalTable journalTable;
            CFMCashBalanceControlTable balanceControlTable;

            select firstOnly DailyBalanceLimit from balanceControlTable
                where balanceControlTable.SetupSourceType == CFMJournalName::tableIdToSourceType(tableNum(CFMJournalTable))
                   && balanceControlTable.DailyBalanceLimitCurrency == currencyCode
            exists join journalTable
                where journalTable.RecId == balanceControlTable.SourceRecId
                    && journalTable.JournalId == journalId;

            amountLimit = balanceControlTable.DailyBalanceLimit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitAmount</Name>
				<Source><![CDATA[
    public CFMCashBalanceMinimum limitAmount()
    {
        return amountLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAanalyticTableDocLevel</Name>
				<Source><![CDATA[
    public CFMAnalyticTableTmp parmAanalyticTableDocLevel(CFMAnalyticTableTmp _analyticTableDocLevel = analyticTableDocLevel)
    {
        analyticTableDocLevel = _analyticTableDocLevel;

        return analyticTableDocLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountDateFieldIdMap</Name>
				<Source><![CDATA[
    public Map parmAmountDateFieldIdMap(Map _amountDateFieldIdMap = amountDateFieldIdMap)
    {
        amountDateFieldIdMap = _amountDateFieldIdMap;

        return amountDateFieldIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldSourceTargetMap</Name>
				<Source><![CDATA[
    public Map parmFieldSourceTargetMap(Map _fieldSourceTargetMap = fieldSourceTargetMap)
    {
        fieldSourceTargetMap = _fieldSourceTargetMap;
        return fieldSourceTargetMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAccountLimitUsed</Name>
				<Source><![CDATA[
    public NoYes parmIsAccountLimitUsed(NoYes _isAccountLimitUsed = isAccountLimitUsed)
    {
        isAccountLimitUsed = _isAccountLimitUsed;

        return isAccountLimitUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public CFMJournalId parmJournalId(CFMJournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkedTotalAmount</Name>
				<Source><![CDATA[
    public AmountCur parmMarkedTotalAmount(AmountCur _markedTotalAmount = markedTotalAmount)
    {
        markedTotalAmount = _markedTotalAmount;

        return markedTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentDate</Name>
				<Source><![CDATA[
    public TransDate parmPaymentDate(TransDate _paymentDate = paymentDate)
    {
        paymentDate = _paymentDate;

        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymDate2FieldId</Name>
				<Source><![CDATA[
    private FieldId paymDate2FieldId()
    {
        if (amountDateFieldIdMap.exists(paymentDate))
        {
            return amountDateFieldIdMap.lookup(paymentDate);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns payment account id of bank or cash
    /// </summary>
    /// <returns>
    /// Payment account id of bank or cash
    /// </returns>
    public CFMPaymentAccountNum paymentAccountNum()
    {
        return paymentAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns payment account account type bank or cash.
    /// </summary>
    /// <returns>
    /// Payment account account type
    /// </returns>
    public CFMPaymentAccountType paymentAccountType()
    {
        return paymentaccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParms</Name>
				<Source><![CDATA[
    public boolean validateParms()
    {
        if (!analyticTableDocLevel)
        {
            return false;
        }

        if (!fieldSourceTargetMap || fieldSourceTargetMap.empty())
        {
            return false;
        }

        if (!amountDateFieldIdMap || amountDateFieldIdMap.empty())
        {
            return false;
        }

        if (!journalId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>