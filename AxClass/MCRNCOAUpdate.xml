<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRNCOAUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRNCOAUpdate</c> updates address from the
/// national change of address registry.
/// </summary>
class MCRNCOAUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs updates for the national change of address.
    /// </summary>
    public void runUpdate()
    {
        LogisticsPostalAddress  logisticsPostalAddress;
        MCRNCOAFileTable        mcrNCOAFileTable;
        CustTable               custTable;
        LogisticsAddressing     LogisticsAddressingOld, LogisticsAddressingNew;
        boolean                 foundAddress;
        DirPartyLocation        dirPartyLocation;
        DirPartyTable           dirPartyTableLoc;
        #define.USA('USA')
        #define.X('X')
        #define.M('M')
        #define.N('N')
        #define.P('P')
        #define.G('G')
        #define.K('K')
        #define.F('F')
        #define.D('D')

        ttsBegin;
        while select forUpdate mcrNCOAFileTable where mcrNCOAFileTable.Status==MCRNCOAStatus::Pending && mcrNCOAFileTable.Selected==NoYes::Yes
        {
            mcrNCOAFileTable.Status=MCRNCOAStatus::Processed;

            if (mcrNCOAFileTable.CountryRegionId == "")
            {
                 mcrNCOAFileTable.CountryRegionId = #USA;
            }

            //Do not deliver if:
            //The MCRNCOACode is 'X'.
            //Or if the MCRNCOACode is (N,M, or P), and the MCRNCOADeliverCode is (G,K, or F).
            if (mcrNCOAFileTable.MCRNCOACode == #X
               ||
               ((
                    (mcrNCOAFileTable.MCRNCOACode == #N)
                    || (mcrNCOAFileTable.MCRNCOACode == #M)
                    || (mcrNCOAFileTable.MCRNCOACode == #P) )
                && ((mcrNCOAFileTable.MCRNCOADeliverCode == #G)
                    || (mcrNCOAFileTable.MCRNCOADeliverCode == #K)
                    || (mcrNCOAFileTable.MCRNCOADeliverCode == #F) )
               ))
            {
                mcrNCOAFileTable.Result = MCRNCOAResult::Undeliverable;
                foundAddress = false;
                custTable = CustTable::find(mcrNCOAFileTable.CustomerNumber);

                while select Location, Address from logisticsPostalAddress
                    where logisticsPostalAddress.ZipCode == mcrNCOAFileTable.ZipCode
                        && logisticsPostalAddress.State == mcrNCOAFileTable.State
                        && logisticsPostalAddress.City == mcrNCOAFileTable.City
                        && logisticsPostalAddress.Street == mcrNCOAFileTable.Street
                    exists join dirPartyLocation
                    where dirPartyLocation.Location == logisticsPostalAddress.Location
                    exists join dirPartyTableLoc
                    where dirPartyTableLoc.RecId == dirPartyLocation.Party
                {
                    foundAddress = true;
                    LogisticsPostalAddress::findByLocation(logisticsPostalAddress.Location).deactivate(custTable);

                    MCRNCOAUpdate::createCase(custTable.Party,strFmt("@MCR39945", mcrNCOAFileTable.CustomerNumber,logisticsPostalAddress.Address));
                }

                if (!foundAddress)
                {
                    mcrNCOAFileTable.Status=MCRNCOAStatus::NoAddressFound;
                }
            }
            //If the MCRNCOACode is blank, and the ZipIndicator is 1 or 9, then update the zipcode.
            else if (mcrNCOAFileTable.MCRNCOACode == ''
            &&     (mcrNCOAFileTable.MCRNCOAZipIndicator == "1")
            ||     (mcrNCOAFileTable.MCRNCOAZipIndicator == "9") )
            {
                mcrNCOAFileTable.Result = MCRNCOAResult::ZipcodeChange;
                foundAddress = false;
                while select logisticsPostalAddress
                    where logisticsPostalAddress.ZipCode == mcrNCOAFileTable.ZipCode
                        && logisticsPostalAddress.State == mcrNCOAFileTable.State
                        && logisticsPostalAddress.City == mcrNCOAFileTable.City
                        && logisticsPostalAddress.Street == mcrNCOAFileTable.Street
                    exists join dirPartyLocation
                    where dirPartyLocation.Location == logisticsPostalAddress.Location
                    exists join dirPartyTableLoc
                    where dirPartyTableLoc.RecId == dirPartyLocation.Party
                {
                    foundAddress = true;
                    LogisticsAddressingOld = logisticsPostalAddress.Address;
                    MCRNCOAUpdate::updateCustZipCode(logisticsPostalAddress, mcrNCOAFileTable.MCRNCOACorrectZipCode);
                    logisticsPostalAddress.reread();
                    LogisticsAddressingNew = logisticsPostalAddress.Address;
                }
                if (!foundAddress)
                {
                    mcrNCOAFileTable.Status=MCRNCOAStatus::NoAddressFound;
                }
            }
            //Deliver if the MCRNCOACode is (N,M, or P), and the MCRNCOADeliverCode is set to 'D'.
            else if (
                        (mcrNCOAFileTable.MCRNCOACode == #N)
                        || (mcrNCOAFileTable.MCRNCOACode == #M)
                        || (mcrNCOAFileTable.MCRNCOACode == #P)
                    &&
                        mcrNCOAFileTable.MCRNCOADeliverCode == #D)
            {
                mcrNCOAFileTable.Result = MCRNCOAResult::Deliverable;

                //Find or create address.
                logisticsPostalAddress = MCRNCOAUpdate::findCustAddress(mcrNCOAFileTable.Street,mcrNCOAFileTable.City,
                                                                        mcrNCOAFileTable.State,mcrNCOAFileTable.ZipCode,
                                                                        mcrNCOAFileTable.CountryRegionId,
                                                                        mcrNCOAFileTable.CustomerNumber);
                if (!logisticsPostalAddress)
                {
                    LogisticsAddressingOld = logisticsPostalAddress.Address;
                    logisticsPostalAddress = MCRNCOAUpdate::createCustAddress(mcrNCOAFileTable.Name,
                                                                                mcrNCOAFileTable.Street,
                                                                                mcrNCOAFileTable.City,
                                                                                mcrNCOAFileTable.State,
                                                                                mcrNCOAFileTable.ZipCode,
                                                                                mcrNCOAFileTable.CountryRegionId,
                                                                                mcrNCOAFileTable.CustomerNumber);
                    logisticsPostalAddress.reread();
                    LogisticsAddressingNew = logisticsPostalAddress.Address;
                }
            }
            else
            {
                mcrNCOAFileTable.Status=MCRNCOAStatus::Error;
            }

            mcrNCOAFileTable.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a case to be inserted into the <c>SMMActivities</c> table.
    /// </summary>
    /// <param name="_party">
    /// The responsible party for the case.
    /// </param>
    /// <param name="_description">
    /// A description of the case to be created.
    /// </param>
    public static void createCase(DirPartyRecId _party, str _description)
    {
        CaseDetail                      caseDetail;
        CaseCategoryHierarchyDetail     caseHierarchyDetail;
        NumberSeq                       numberSeq;
        smmActivities                   smmActivities;

        select firstOnly RecId from caseHierarchyDetail
            where caseHierarchyDetail.CategoryType == CaseCategoryType::General;

        ttsBegin;

        numberSeq = NumberSeq::newGetNum(NumberSeqReference::findReference(extendedTypeNum(CaseId)));
        caseDetail.CaseId = numberSeq.num();
        caseDetail.Description = _description;
        numberSeq.used();

        caseDetail.Status          = CaseStatus::Planned;
        caseDetail.Party           = _party;
        caseDetail.CategoryRecId   = caseHierarchyDetail.RecId;
        caseDetail.modifiedField(fieldNum(caseDetail, CategoryRecId));
        caseDetail.insert();

        // Create activity.
        smmActivities.setActivityNum();
        smmActivities.initFromCommon(caseDetail);
        smmActivities.insert();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a customer address.
    /// </summary>
    /// <param name="_locationDescription">
    /// A description of the location.
    /// </param>
    /// <param name="_street">
    /// The street address of the new customer address.
    /// </param>
    /// <param name="_city">
    /// The city of the new customer address.
    /// </param>
    /// <param name="_state">
    /// The state of the new customer address.
    /// </param>
    /// <param name="_zipcode">
    /// The zip code of the new customer address.
    /// </param>
    /// <param name="_countryRegionId">
    /// The country or region of the new customer address.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account number for which this method creates a new address.
    /// </param>
    /// <param name="_isPrimary">
    /// A <c>NoYes</c> enumeration that determines if this address should be used as
    /// the primary address; optional.
    /// </param>
    /// <returns>
    /// The newly created customer address.
    /// </returns>
    public static LogisticsPostalAddress createCustAddress(Description _locationDescription,
                                                        LogisticsAddressStreet          _street,
                                                        LogisticsAddressCityName        _city,
                                                        LogisticsAddressStateId         _state,
                                                        LogisticsAddressZipCodeId       _zipcode,
                                                        LogisticsAddressCountryRegionId _countryRegionId,
                                                        CustAccount                     _custAccount,
                                                        NoYes                           _isPrimary = NoYes::No
                                                        )
    {
        LogisticsLocation           logisticsLocation;
        DirPartyLocationRole        dirPartyLocationRole;
        DirPartyLocation            dirPartyLocation;
        LogisticsLocationRoleType   roles[];
        LogisticsPostalAddress      logisticsPostalAddress;
        Counter                     i = 1;
        // Set new address as default delivery.
        LogisticsLocationDefault    logisticsLocationDefault;
        CustTable                   custTable = CustTable::find(_custAccount);

        roles[1] = LogisticsLocationRoleType::Delivery;
        roles[2] = LogisticsLocationRoleType::Business;

        ttsBegin;
        logisticsLocation.IsPostalAddress  = true;
        logisticsLocation.Description      = _locationDescription;
        logisticsLocation.insert();

        dirPartyLocation.Party     = DirPartyTable::findRec(custTable.Party).RecId;
        dirPartyLocation.Location  = logisticsLocation.RecId;
        dirPartyLocation.IsPrimary = _isPrimary;
        // If this is not true, the address cannot be edited from the logisticsPostalAddress form.
        dirPartyLocation.IsLocationOwner = true;
        dirPartyLocation.IsPostalAddress = true;
        dirPartyLocation.insert();

        while (roles[i])
        {
            dirPartyLocationRole.PartyLocation = dirPartyLocation.RecId;
            dirPartyLocationRole.LocationRole  = LogisticsLocationRole::findBytype(roles[i]).RecId;
            dirPartyLocationRole.insert();
            // Set new address as default delivery.
            if (roles[i] == LogisticsLocationRoleType::Delivery)
            {
                logisticsLocationDefault = LogisticsLocationDefault::construct(custTable);
                logisticsLocationDefault.setDefaultLocation(dirPartyLocation.Location, dirPartyLocationRole.LocationRole);
            }
            i++;
        }

        logisticsPostalAddress.Location        = logisticsLocation.RecId;
        logisticsPostalAddress.ZipCode         = _zipcode;
        logisticsPostalAddress.ZipCodeRecId    = LogisticsAddressZipCode::find(_zipcode).RecId;

        logisticsPostalAddress.State           = _state;
        logisticsPostalAddress.CountryRegionId = _countryRegionId;
        logisticsPostalAddress.City            = _city;
        logisticsPostalAddress.CityRecId       = LogisticsAddressCity::find(_city).RecId;

        logisticsPostalAddress.Street          = _street;

        logisticsPostalAddress.insert();

        logisticsPostalAddress.selectForUpdate(true);
        logisticsPostalAddress.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        logisticsPostalAddress.modifiedField(fieldNum(LogisticsPostalAddress, Street));
        logisticsPostalAddress.modifiedField(fieldNum(LogisticsPostalAddress, City));
        logisticsPostalAddress.modifiedField(fieldNum(LogisticsPostalAddress, Street));
        logisticsPostalAddress.update();

        ttsCommit;

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the customer address based on the passed parameters.
    /// </summary>
    /// <param name="_street">
    /// The street address of the customer address.
    /// </param>
    /// <param name="_city">
    /// The city of the customer address.
    /// </param>
    /// <param name="_state">
    /// The state of the customer address.
    /// </param>
    /// <param name="_zipcode">
    /// The zip code of the customer address.
    /// </param>
    /// <param name="_countryRegionId">
    /// The country or region of the customer address.
    /// </param>
    /// <param name="_custAccount">
    /// The customer's account number for which this method finds the address.
    /// </param>
    /// <returns>
    /// The retrieved customer address.
    /// </returns>
    public static LogisticsPostalAddress findCustAddress(LogisticsAddressStreet _street,
                                                        LogisticsAddressCityName        _city,
                                                        LogisticsAddressStateId         _state,
                                                        LogisticsAddressZipCodeId       _zipcode,
                                                        LogisticsAddressCountryRegionId _countryRegionId,
                                                        CustAccount                     _custAccount
                                                        )
    {
        LogisticsPostalAddress  logisticsPostalAddress;
        DirPartyLocation        dirPartyLocation;
        DirPartyTable           dirPartyTableLoc;
        CustTable               custTable;

        custTable = CustTable::find(_custAccount);

        select firstOnly logisticsPostalAddress
            where logisticsPostalAddress.ZipCode == _zipcode
                && logisticsPostalAddress.State == _state
                && logisticsPostalAddress.City == _city
                && logisticsPostalAddress.Street == _street
            exists join dirPartyLocation
            where dirPartyLocation.Location == logisticsPostalAddress.Location
            exists join dirPartyTableLoc
            where dirPartyTableLoc.RecId == dirPartyLocation.Party;

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the existing customer address's zip code
    /// </summary>
    /// <param name="_logisticsPostalAddressUpdate">
    /// The <c>LogisticsPostalAddress</c> record to be updated.
    /// </param>
    /// <param name="_newZipCode">
    /// The new zip code to be applied to the passed customer address.
    /// </param>
    public static void updateCustZipCode(LogisticsPostalAddress     _logisticsPostalAddressUpdate,
                                        LogisticsAddressZipCodeId   _newZipCode)
    {
        ttsBegin;
        _logisticsPostalAddressUpdate.selectForUpdate(true);
        _logisticsPostalAddressUpdate.ZipCode       = _newZipCode;
        _logisticsPostalAddressUpdate.ZipCodeRecId  = LogisticsAddressZipCode::find(_newZipCode).RecId;

        _logisticsPostalAddressUpdate.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        _logisticsPostalAddressUpdate.modifiedField(fieldNum(LogisticsPostalAddress, Zipcode));
        _logisticsPostalAddressUpdate.update();
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>