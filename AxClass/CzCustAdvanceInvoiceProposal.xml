<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzCustAdvanceInvoiceProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CzCustAdvanceInvoiceProposal
{
    LedgerJournalTrans ledgerJournalTrans;
    NoYes              copyVAToptions;
    NoYes              copyPostingProfile;
    NoYes              linkToPayment;

    Map                advanceMap;
    Set                advanceDone;

    CustVendPrepaymentHandling_W    prepaymentHandling;
    CzAdvanceInvoiceLink            advanceInvoiceLink;
    container                       sharedServiceCompanies;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    private Amount addLine(CzCustAdvanceInvoiceTable _advanceTable,
                           Amount                    _addAmount,
                           Amount                    _remainingAmount,
                           TaxGroup                  _taxGroup,
                           TaxItemGroup              _taxItemGroup)
    {
        Amount advanceAmount, allocateAmount;

        if (ledgerJournalTrans.CurrencyCode == _advanceTable.CurrencyCode)
        {
            advanceAmount = _addAmount;
        }
        else
        {
            advanceAmount = CurrencyExchangeHelper::curAmount(_advanceTable.amountMST(_addAmount), ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate, Currency::noYes2UnknownNoYes(ledgerJournalTrans.Triangulation), ledgerJournalTrans.ExchRate, ledgerJournalTrans.ExchRateSecond);
        }

        allocateAmount = min(advanceAmount, _remainingAmount);
        ledgerJournalTrans = prepaymentHandling.initLedgerJournalTransValue(- allocateAmount);
        ledgerJournalTrans.TaxGroup     = _taxGroup;
        ledgerJournalTrans.TaxItemGroup = _taxItemGroup;

        ledgerJournalTrans.modifyVatDueDate_W();
        ledgerJournalTrans.doInsert();

        return _remainingAmount - allocateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAdvanceSimple</Name>
				<Source><![CDATA[
    private void doAdvanceSimple(CzCustAdvanceInvoiceTable _advanceTable)
    {
        Amount remainingAmount = ledgerJournalTrans.AmountCurCredit;

        if (advanceDone.in([_advanceTable.company(), _advanceTable.RecId]))
            return;

        advanceDone.add([_advanceTable.company(), _advanceTable.RecId]);

        if (! remainingAmount)
        {
            warning(strfmt("@GLS111742", _advanceTable.InvoiceId, _advanceTable.InvoiceDate));
            return;
        }

        remainingAmount = this.addLine(_advanceTable,
                                       _advanceTable.InvoiceAmount,
                                       remainingAmount,
                                       "",
                                       "");

        ledgerJournalTrans = prepaymentHandling.initLedgerJournalTransValue(- remainingAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAdvanceVAT</Name>
				<Source><![CDATA[
    private void doAdvanceVAT(CzCustAdvanceInvoiceTable _advanceTable)
    {
        Amount remainingAmount = ledgerJournalTrans.AmountCurCredit;
        CzCustAdvanceInvoiceLine advanceLine;

        if (advanceDone.in([_advanceTable.company(), _advanceTable.RecId]))
            return;

        advanceDone.add([_advanceTable.company(), _advanceTable.RecId]);

        if (! remainingAmount)
        {
            warning(strfmt("@GLS111742", _advanceTable.InvoiceId, _advanceTable.InvoiceDate));
            return;
        }

        changecompany(_advanceTable.company())
        {
            select sum(AmountCur), TaxGroup, TaxItemGroup from advanceLine
                group by TaxGroup, TaxItemGroup
                where advanceLine.ParentRecId == _advanceTable.RecId;
        }

        while (advanceLine && remainingAmount)
        {
            remainingAmount = this.addLine(_advanceTable,
                                           advanceLine.AmountCur,
                                           remainingAmount,
                                           advanceLine.TaxGroup,
                                           advanceLine.TaxItemGroup);

            next advanceLine;
        }

        ledgerJournalTrans = prepaymentHandling.initLedgerJournalTransValue(- remainingAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAdvance</Name>
				<Source><![CDATA[
    public boolean includeAdvance(CzAdvanceInvoiceTable _advanceTable, boolean _include = false)
    {
        boolean ret = _include;
        boolean orig;

        if (advanceMap.exists([_advanceTable.company(), _advanceTable.RecId]))
        {
            [ ret, orig ] = advanceMap.lookup([_advanceTable.company(), _advanceTable.RecId]);
        }
        else
        {
            ret  = _include;
            orig = false;
        }

        if (! prmisdefault(_include))
        {
            if (_include)
            {
                advanceMap.insert([_advanceTable.company(), _advanceTable.RecId], [ _include, orig ]);
            }
            else
            {
                if (orig)
                {
                    advanceMap.insert([_advanceTable.company(), _advanceTable.RecId], [ _include, orig ]);
                }
                else
                {
                    advanceMap.remove([_advanceTable.company(), _advanceTable.RecId]);
                }
            }

            advanceInvoiceLink.includeAdvance(_advanceTable, _include);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        CzCustAdvanceInvoiceTable   advanceTable;
        CustTable                   custTableExists;
        CustTable                   custTable = CustTable::findByLedgerDimension(ledgerJournalTrans.LedgerDimension);

        if (isConfigurationkeyEnabled(configurationkeynum(LedgerAdvIntercompanyAccounting)))
        {
            sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curext());
        }
        else
        {
            sharedServiceCompanies = [ curext() ];
        }

        while select crosscompany:sharedServiceCompanies advanceTable
            exists join custTableExists
            where advanceTable.InvoiceAccount == custTableExists.AccountNum
               && custTableExists.Party     == custTable.Party
               && advanceTable.Posted
               && advanceTable.Status         != CzAdvanceInvoiceStatus::Closed
        {
            if (advanceInvoiceLink.includeAdvance(advanceTable))
            {
                advanceMap.insert([advanceTable.company(), advanceTable.RecId], [ true, true ]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        copyVAToptions     = NoYes::Yes;
        copyPostingProfile = NoYes::Yes;
        linkToPayment      = NoYes::Yes;
        advanceMap         = new Map(Types::Container, Types::Container); // [ NoYes - selected currently, NoYes - selected originally ]
        advanceDone        = new Set(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceInvoiceLink</Name>
				<Source><![CDATA[
    public CzAdvanceInvoiceLink parmAdvanceInvoiceLink(CzAdvanceInvoiceLink _link = advanceInvoiceLink)
    {
        ;
        advanceInvoiceLink = _link;
        return advanceInvoiceLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyPostingProfile</Name>
				<Source><![CDATA[
    public NoYes parmCopyPostingProfile(NoYes _copyPostingProfile = copyPostingProfile)
    {
        copyPostingProfile = _copyPostingProfile;
        return copyPostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyVAToptions</Name>
				<Source><![CDATA[
    public NoYes parmCopyVAToptions(NoYes _copyVAToptions = copyVAToptions)
    {
        copyVAToptions = _copyVAToptions;
        return copyVAToptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ;
        ledgerJournalTrans = _ledgerJournalTrans;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinkToPayment</Name>
				<Source><![CDATA[
    public NoYes parmLinkToPayment(NoYes _linkToPayment = linkToPayment)
    {
        ;
        linkToPayment = _linkToPayment;
        return linkToPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrepaymentHandling</Name>
				<Source><![CDATA[
    public CustVendPrepaymentHandling_W parmPrepaymentHandling(CustVendPrepaymentHandling_W _prepaymentHandling = prepaymentHandling)
    {
        ;
        prepaymentHandling = _prepaymentHandling;

        return prepaymentHandling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    #define.CurledBrackets("{}")
    public void run()
    {
        MapIterator it = new MapIterator(advanceMap);
        CzCustAdvanceInvoiceTable advanceTable;
        Set                       createTaxDocument = new Set(Types::Enum);
        Set                       postingProfiles   = new Set(Types::String);

        if (! advanceMap.elements())
            return;

        ttsbegin;

        prepaymentHandling.parmLedgerJournalEngine().clearTaxAmountCacheVoucher(ledgerJournalTrans.Voucher);
        prepaymentHandling.clearLedgerJournalTransCache();
        ledgerJournalTrans = prepaymentHandling.initLedgerJournalTransValue();
        ledgerJournalTrans.Prepayment  = NoYes::Yes;
        ledgerJournalTrans.AccountType = LedgerJournalACType::Cust;

        while (it.more())
        {
            advanceTable = CzCustAdvanceInvoiceTable::findByCompany(conpeek(it.key(), 1), conpeek(it.key(), 2));

            if (conpeek(it.value(), 1))
            {
                if (copyPostingProfile && advanceTable.PostingProfile)
                {
                    postingProfiles.add(advanceTable.PostingProfile);
                }

                if (copyVAToptions)
                {
                    createTaxDocument.add(advanceTable.TaxDocumentCreate);

                    if (! advanceTable.PostVAT)
                    {
                        info(strfmt("@GLS111734",
                                    advanceTable.InvoiceId,
                                    advanceTable.InvoiceDate,
                                    fieldpname(CzCustAdvanceInvoiceTable, PostVAT),
                                    NoYes::No));

                        this.doAdvanceSimple(advanceTable);
                    }

                    if (advanceTable.PostVATDate && advanceTable.PostVATDate < ledgerJournalTrans.TransDate)
                    {
                        info(strfmt("@GLS111734",
                                    advanceTable.InvoiceId,
                                    advanceTable.InvoiceDate,
                                    fieldpname(CzCustAdvanceInvoiceTable, PostVATDate),
                                    advanceTable.PostVATDate));

                        this.doAdvanceSimple(advanceTable);
                    }

                    this.doAdvanceVAT(advanceTable);
                }
                else
                {
                    this.doAdvanceSimple(advanceTable);
                }
            }

            it.next();
        }

        if (ledgerJournalTrans.amount())
        {
            ledgerJournalTrans.TaxGroup     = "";
            ledgerJournalTrans.TaxItemGroup = "";
            ledgerJournalTrans.doInsert();
        }

        if (copyPostingProfile && postingProfiles.elements())
        {
            if (postingProfiles.elements() > 1)
            {
                warning(strfmt("@GLS111747",
                               fieldpname(CzCustAdvanceInvoiceTable, PostingProfile),
                               strrem(postingProfiles.toString(), #CurledBrackets)));
            }
            else
            {
                prepaymentHandling.parmPostingProfile(new SetIterator(postingProfiles).value());
            }
        }

        if (copyVAToptions                        &&
            createTaxDocument.elements()          &&
            (prepaymentHandling.showTaxDocument() ||
             prepaymentHandling.showTaxCreditMemo()))
        {
            if (createTaxDocument.elements() > 1)
            {
                warning(strfmt("@GLS111747",
                               fieldpname(CzCustAdvanceInvoiceTable, TaxDocumentCreate),
                               strfmt("@SYS26868", NoYes::No, NoYes::Yes)));
            }
            else
            {
                if (prepaymentHandling.showTaxDocument())
                {
                    prepaymentHandling.parmCreateTaxDocument(new SetIterator(createTaxDocument).value());
                }

                if (prepaymentHandling.showTaxCreditMemo())
                {
                    prepaymentHandling.parmCreateTaxCreditMemo(new SetIterator(createTaxDocument).value());
                }
            }
        }

        if (linkToPayment)
        {
            advanceInvoiceLink.updateLink();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLedger</Name>
				<Source><![CDATA[
    public static CzCustAdvanceInvoiceProposal newFromLedger(LedgerJournalTrans           _ledgerJournalTrans,
                                                             CustVendPrepaymentHandling_W _prepaymentHandling,
                                                             CzAdvanceInvoiceLink         _link)
    {
        CzCustAdvanceInvoiceProposal proposal = new CzCustAdvanceInvoiceProposal();

        proposal.parmLedgerJournalTrans(_ledgerJournalTrans);
        proposal.parmPrepaymentHandling(_prepaymentHandling);
        proposal.parmAdvanceInvoiceLink(_link);

        proposal.init();

        return proposal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>