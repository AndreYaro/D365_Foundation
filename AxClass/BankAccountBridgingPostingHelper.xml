<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountBridgingPostingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper class for the bridging posting process.
/// </summary>
internal static final class BankAccountBridgingPostingHelper
{
    private static BankBridgedAutoClearInstrumentationLogger logger = BankBridgedAutoClearInstrumentationLogger::createLogger(classStr(BankAccountBridgingPostingHelper));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCustOrVendPayment</Name>
				<Source><![CDATA[
    internal static boolean isCustOrVendPayment(LedgerJournalType _ledgerJournalType)
    {
        return _ledgerJournalType == LedgerJournalType::Payment || _ledgerJournalType == LedgerJournalType::CustPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModuleCustVendFromAccountType</Name>
				<Source><![CDATA[
    internal static ModuleCustVend getModuleCustVendFromAccountType(LedgerJournalACType _accountType, LedgerJournalType _journalType)
    {
        ModuleCustVend moduleCustVend;
        switch (_accountType)
        {
            case LedgerJournalACType::Cust:
                moduleCustVend = moduleCustVend::Cust;
                break;

            case LedgerJournalACType::Vend:
                moduleCustVend = moduleCustVend::Vend;
                break;

            default:
                if (_journalType == LedgerJournalType::CustPayment)
                {
                    moduleCustVend = moduleCustVend::Cust;
                }
                else if (_journalType == LedgerJournalType::Payment)
                {
                    moduleCustVend = moduleCustVend::Vend;
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
                break;
        }

        return moduleCustVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldMarkBridging</Name>
				<Source><![CDATA[
    internal static boolean shouldMarkBridging(
        CustVendPaymModeTable _paymModeTable,
        BankAccountID _bridgingBankAccount,
        DimensionDynamicAccount _ledgerJournalTransOffsetDimension)
    {
        boolean markBridging;

        if (_paymModeTable.FurtherPosting)
        {
            LedgerDimensionDefaultAccount ledgerAccountInLedgerJournalTrans = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_ledgerJournalTransOffsetDimension);
            LedgerDimensionDefaultAccount accountToCompare;
            if (_paymModeTable.BridgingAccountByBank)
            {
                accountToCompare = BankAccountTable::findBridgingAccount(_bridgingBankAccount);
            }
            else
            {
                accountToCompare = _paymModeTable.InterCompanyLedgerDimension;
            }

            markBridging = LedgerDimensionFacade::areEqual(ledgerAccountInLedgerJournalTrans, accountToCompare);
        }

        return markBridging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBridgingTrans</Name>
				<Source><![CDATA[
    internal static void processBridgingTrans(
        LedgerEntryJournal _journal,
        GeneralJournalEntry _generalJournalEntry,
        LedgerEntry _ledgerEntry)
    {
        if (!FeatureStateProvider::isFeatureEnabled(BankBridgedTransAutoClearingFeature::instance()))
        {
            return;
        }

        LedgerJournalTrans ledgerJournalTrans;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        BankBridgingTrans bankBridgingTransLocal;

        // To find the LedgerJournalTrans according to the gjae. For the LedgerJournalTrans with same voucher,  currencyCode and Amount, then it may find the wrong LJT.
        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == _journal.JournalNumber
                && ledgerJournalTrans.PaymMode == _ledgerEntry.PaymentMode
                && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger
            join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == _ledgerEntry.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.TransactionCurrencyCode == ledgerJournalTrans.CurrencyCode
                    && generalJournalAccountEntry.TransactionCurrencyAmount == ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit
            exists join subledgerVoucherLink
                where subledgerVoucherLink.GeneralJournalEntry == _generalJournalEntry.RecId
                    && subledgerVoucherLink.Voucher == ledgerJournalTrans.Voucher
                    && subledgerVoucherLink.VoucherDataAreaId == CompanyInfo::find().DataArea
                    && subledgerVoucherLink.AccountingDate == ledgerJournalTrans.TransDate
            notexists join bankBridgingTransLocal
                where bankBridgingTransLocal.BridgedLedgerJournalTransRecId == ledgerJournalTrans.RecId;

        CustVendPaymModeTable paymModeTable = CustVendPaymModeTable::findCommon(ledgerJournalTrans);

        if (paymModeTable && ledgerJournalTrans && BankAccountBridgingPostingHelper::isCustOrVendPayment(ledgerJournalTrans.ledgerJournalTable().JournalType))
        {
            using (SysInstrumentationActivityContext activityContext = logger.initActivities().addBankBridgingTrans(staticMethodStr(BankAccountBridgingPostingHelper, processBridgingTrans)))
            {
                ttsbegin;
                activityContext.addCustomProperty(BankBridgedAutoClearingInstrumentationConstants::BridgedLedgerJournalTransVoucher, ledgerJournalTrans.Voucher);

                BankAccountID bankAccountId = ledgerJournalTrans.BridgingBankAccount;

                if (!bankAccountId && paymModeTable.AccountType == LedgerJournalACType::Bank)
                {
                    bankAccountId = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(paymModeTable.PaymentLedgerDimension);
                    ledgerJournalTrans.selectForUpdate(true);
                    ledgerJournalTrans.BridgingBankAccount = bankAccountId;
                    ledgerJournalTrans.doUpdate();

                    activityContext.addCustomProperty(
                        BankBridgedAutoClearingInstrumentationConstants::BridgedLedgerJournalTransUpdateBankAccount,
                        bankAccountId);
                }

                BankAccountTable bankAccountTable = BankAccountTable::find(bankAccountId);
                if (bankAccountTable)
                {
                    activityContext.addCustomProperty(BankBridgedAutoClearingInstrumentationConstants::BankAccount, bankAccountId);

                    BankChequeTable bankChequeTable = BankChequeTable::findByLedgerJournalTrans(
                        ledgerJournalTrans.BankChequeNum,
                        ledgerJournalTrans.RecId,
                        curExt(),
                        true);

                    BankBridgingTrans bankBridgingTrans;
                    // Has generated cheque before, need to update the bridging status of the cheque
                    if (bankChequeTable)
                    {
                        if (bankChequeTable.AccountID != bankAccountId)
                        {
                            logger.logCallstack(BankBridgedAutoClearingInstrumentationConstants::BankChequeAccountIdNotAlignError);
                            throw error(strFmt("@CashManagement:BankAccountIdNotAlignCheckError", bankChequeTable.AccountID, bankChequeTable.ChequeNum, bankAccountId, paymModeTable.PaymMode));
                        }
                
                        bankBridgingTrans = BankBridgingTrans::createBankBridgingTrans(
                            bankAccountId,
                            ledgerJournalTrans,
                            _ledgerEntry.RecId,
                            bankChequeTable.RecId);
                        activityContext.addCustomProperty(BankBridgedAutoClearingInstrumentationConstants::BridgedTransactionWithCheckInserted, any2Str(bankBridgingTrans.RecId));
                    }
                    // Did not generated cheque before
                    else
                    {
                        if (!BankAccountBridgingPostingHelper::checkCurrencyCode(ledgerJournalTrans, bankAccountTable))
                        {
                            throw error("@SYS18447");
                        }
                        bankBridgingTrans = BankBridgingTrans::createBankBridgingTrans(
                            bankAccountId,
                            ledgerJournalTrans,
                            _ledgerEntry.RecId);
                        BankAccountBridgingPostingHelper::updateBankCurrencyAmountForLedgerJournalTrans(ledgerJournalTrans);
                        activityContext.addCustomProperty(BankBridgedAutoClearingInstrumentationConstants::BridgedTransactionInserted, any2Str(bankBridgingTrans.RecId));
                    }
                    bankBridgingTrans.updateBridgingStatus(BankBridgingStatus::Bridged);
                    activityContext.addCustomProperty(BankBridgedAutoClearingInstrumentationConstants::UpdateBridgingStatus, any2Str(bankBridgingTrans.BridgingStatus));
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBridgedTrans</Name>
				<Source><![CDATA[
    internal static void clearBridgedTrans(LedgerJournalTrans _clearingLedgerJournalTrans)
    {
        if (_clearingLedgerJournalTrans.OffsetAccountType != LedgerJournalACType::Bank)
        {
            return;
        }

        BankBridgingTrans bankBridgingTrans = BankBridgingTrans::findByLedgerEntry(_clearingLedgerJournalTrans.FurtherPostingRecId, true);

        if (!bankBridgingTrans)
        {
            return;
        }
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addBankBridgingTrans(staticMethodStr(BankAccountBridgingPostingHelper, clearBridgedTrans)))
        {
            BankAccountID bankAccountId = _clearingLedgerJournalTrans.parmOffsetAccount();

            activityContext.addCustomProperty(BankBridgedAutoClearingInstrumentationConstants::ClearedLedgerJournalTransVoucher, _clearingLedgerJournalTrans.Voucher);

            if (bankAccountId != bankBridgingTrans.AccountId)
            {
                logger.logCallstack(BankBridgedAutoClearingInstrumentationConstants::BankBridgingAccountIdNotAlignError);
                throw error(strFmt("@CashManagement:BankAccountIdNotAlignBridgedError", bankBridgingTrans.AccountID, bankAccountId, _clearingLedgerJournalTrans.PaymMode));
            }

            ttsbegin;
            bankBridgingTrans.ClearedLedgerJournalTransRecId = _clearingLedgerJournalTrans.RecId;
            bankBridgingTrans.ClearedVoucher = _clearingLedgerJournalTrans.Voucher;
            bankBridgingTrans.updateBridgingStatus(BankBridgingStatus::Cleared);
            ttscommit;
            activityContext.addCustomProperty(BankBridgedAutoClearingInstrumentationConstants::UpdateBridgingStatus, any2Str(bankBridgingTrans.BridgingStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelBridgingTrans</Name>
				<Source><![CDATA[
    internal static void cancelBridgingTrans(RecId _generalJournalAccountEntryRecId)
    {
        BankBridgingTrans bankBridgingTrans;
        LedgerEntry ledgerEntry;

        select firstonly forupdate bankBridgingTrans
            exists join ledgerEntry
                where ledgerEntry.RecId == bankBridgingTrans.LedgerEntryRecId
                    && ledgerEntry.GeneralJournalAccountEntry == _generalJournalAccountEntryRecId;

        if (bankBridgingTrans)
        {
            using (SysInstrumentationActivityContext activityContext = logger.initActivities().addBankBridgingTrans(staticMethodStr(BankAccountBridgingPostingHelper, clearBridgedTrans)))
            {
                bankBridgingTrans.updateBridgingStatus(BankBridgingStatus::Canceled);
                activityContext.addCustomProperty(BankBridgedAutoClearingInstrumentationConstants::BankBridgingTransRecId, any2Str(bankBridgingTrans.RecId));
                activityContext.addCustomProperty(BankBridgedAutoClearingInstrumentationConstants::UpdateBridgingStatus, any2Str(bankBridgingTrans.BridgingStatus));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCurrencyAmountForLedgerJournalTrans</Name>
				<Source><![CDATA[
    private static void updateBankCurrencyAmountForLedgerJournalTrans(LedgerJournalTrans _bridgedLedgerJournalTrans)
    {
        _bridgedLedgerJournalTrans.selectForUpdate(true);
        _bridgedLedgerJournalTrans.calculateBankCurrencyAmount();
        _bridgedLedgerJournalTrans.BankCurrencyAmount = -_bridgedLedgerJournalTrans.BankCurrencyAmount;
        _bridgedLedgerJournalTrans.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrencyCode</Name>
				<Source><![CDATA[
    private static boolean checkCurrencyCode(LedgerJournalTrans _ledgerJournalTrans, BankAccountTable _bankAccountTable)
    {
        boolean ok = true;

        if (!_bankAccountTable.CurrencyCode)
        {
            ok  = checkFailed(strfmt("@SYS71041", _bankAccountTable.AccountID));
        }
        else
        {
            ok = _bankAccountTable.checkCurrency(_ledgerJournalTrans.CurrencyCode);
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>