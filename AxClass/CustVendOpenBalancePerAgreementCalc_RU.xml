<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOpenBalancePerAgreementCalc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CustVendOpenBalancePerAgreementCalc_RU</c> is a base abstract class 
/// for calculation open contragent balance with regards to contract (agreement).
/// </summary>
public abstract class CustVendOpenBalancePerAgreementCalc_RU
{
    #ISOCountryRegionCodes

    protected CustVendAC accountNum;
    protected DimensionAttribute agreementDimensionAttribute;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method sets and returns the contragent account number.
    /// </summary>
    /// <param name = "_value"> A contragent account number.</param>
    /// <returns>Returns current contragent account number.</returns>
    final public CustVendAC parmAccountNum(CustVendAC _value = accountNum)
    {
        accountNum = _value;

        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>CustVendOpenBalancePerAgreementCalc_RU</c> class
    /// </summary>
    protected void new()
    {
        RecId dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();
        agreementDimensionAttribute = DimensionAttribute::find(dimAttrRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>CustVendOpenBalancePerAgreementCalc_RU</c> class.
    /// </summary>
    /// <param name = "_type"> Contragent type.</param>
    /// <param name = "_accountNum"> Contragent account number.</param>
    /// <returns>Returns an instance of this class to use to for calculation open contragent balance with regards to contract (agreement).</returns>
    public static CustVendOpenBalancePerAgreementCalc_RU construct(
        CustVendACType _type,
        CustVendAC _accountNum)
    {
        CustVendOpenBalancePerAgreementCalc_RU ret;

        switch(_type)
        {
            case CustVendACType::Cust:
                ret = new CustOpenBalancePerAgreementCalc_RU();
                break;

            case CustVendACType::Vend:
                ret = new VendOpenBalancePerAgreementCalc_RU();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        ret.parmAccountNum(_accountNum);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate open contragent balance with regards to contract (agreement).
    /// </summary>
    /// <param name = "_agreementId"> Agreement ID</param>
    /// <returns> Returns open customer balance with regards to contract (agreement).</returns>
    public AmountMST calc(AgreementId_RU _agreementId)
    {
        AmountMST balance;

        if (agreementDimensionAttribute.RecId)
        {
            if (_agreementId)
            {
                balance = this.calcForAgreement(_agreementId);
            }
            else
            {
                balance = this.calcForEmptyAgreement();
            }
        }

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcForEmptyAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// The function calculates open contragent balance without agreement.
    /// </summary>
    /// <returns> Returns open contragent balance without agreement.</returns>
    abstract protected AmountMST calcForEmptyAgreement()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcForAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// The function calculates open contragent balance with regards to contract (agreement).
    /// </summary>
    /// <param name = "_agreementId"> Agreement identificator.</param>
    /// <returns> Returns open contragent balance with regards to contract (agreement).</returns>
    abstract protected AmountMST calcForAgreement(AgreementId_RU _agreementId)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>