<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchDispositionCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventBatchDispositionCriteria</c> class represents a filter that can be used to filter
/// on hand based on batch disposition availability.
/// </summary>
class InventBatchDispositionCriteria extends InventOnHandSingleDimensionCriteria
{
    FieldId dispositionMasterFieldId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>affectedDimension</Name>
				<Source><![CDATA[
        public FieldId affectedDimension()
    {
        return fieldNum(InventDim, InventBatchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMustBeApplied</Name>
				<Source><![CDATA[
        protected boolean calcMustBeApplied()
    {
        // If the disposition field Id is not set then there is no field in the disposition master
        // has been assigend to check -- see method initFromMovement for the specific reasons why
        // this field may not have been assigned.
        return dispositionMasterFieldId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doApplyToOnHandQuery</Name>
				<Source><![CDATA[
        protected void doApplyToOnHandQuery(InventOnHandQuery _onHandQuery)
    {
        QueryBuildDataSource dsInventBatch, dsBatchDispositionMaster;

        dsInventBatch = _onHandQuery.joinInventBatch(JoinMode::NoExistsJoin);

        dsBatchDispositionMaster = dsInventBatch.addDataSource(tableNum(PdsDispositionMaster));
        dsBatchDispositionMaster.joinMode(JoinMode::InnerJoin);
        dsBatchDispositionMaster.addLink(fieldNum(InventBatch, PdsDispositionCode), fieldNum(PdsDispositionMaster, DispositionCode));
        dsBatchDispositionMaster.addRange(fieldNum(PdsDispositionMaster, Status)).value(queryValue(PdsStatus::Unavailable));
        dsBatchDispositionMaster.addRange(dispositionMasterFieldId).value(queryValue(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this criteria from the given inventory movement.
    /// </summary>
    /// <param name="_movement">
    ///    The inventory movement.
    /// </param>
    public void initFromMovement(InventMovement _movement)
    {
        if (#PdsShelfEnabled
            && _movement.batchDispReservationBlockedFieldId()
            && _movement.inventTable().isItemBatchActivated())
        {
            dispositionMasterFieldId = _movement.batchDispReservationBlockedFieldId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDispositionMasterFieldId</Name>
				<Source><![CDATA[
        public FieldId parmDispositionMasterFieldId(FieldId _dispositionMasterFieldId = dispositionMasterFieldId)
    {
        dispositionMasterFieldId = _dispositionMasterFieldId;

        return dispositionMasterFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventBatchDispositionCriteria construct()
    {
        return new InventBatchDispositionCriteria();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDispositionFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventBatchDispositionCriteria</c> class that represents the
    /// batch disposition requirements for the given disposition master field.
    /// </summary>
    /// <param name="_dispositionFieldId">
    /// The field ID of the <c>PdsDispositionMaster</c> table that should be used to evaluate the availability of the batch.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventBatchDispositionCriteria</c> class.
    /// </returns>
    public static InventBatchDispositionCriteria newDispositionFieldId(FieldId _dispositionFieldId)
    {
        InventBatchDispositionCriteria  dispositionCriteria = InventBatchDispositionCriteria::construct();

        dispositionCriteria.parmDispositionMasterFieldId(_dispositionFieldId);

        return dispositionCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventBatchDispositionCriteria</c> class that represents the
    /// batch disposition requirements of the given inventory movement.
    /// </summary>
    /// <param name="_movement">
    /// The inventory movement.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventBatchDispositionCriteria</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if <paramref name="_movement"/> is not specified.
    /// </exception>
    public static InventBatchDispositionCriteria newFromMovement(InventMovement _movement)
    {
        InventBatchDispositionCriteria  dispositionCriteria = InventBatchDispositionCriteria::construct();

        if (!_movement)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        dispositionCriteria.initFromMovement(_movement);

        return dispositionCriteria;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>