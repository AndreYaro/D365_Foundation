<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumReCalcItem_InventoryDataService_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventSumReCalcItem))]
internal final class InventSumReCalcItem_InventoryDataService_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadCurrentInventSum</Name>
				<Source><![CDATA[
    protected void loadCurrentInventSum()
    {
        if (InventIVConsistencyCheckSyncIvFlight::instance().isEnabled() && InventInventoryDataServiceFeature::isEnabled() && !showErrors && checkFix == CheckFix::Fix && this.inventoryServiceIsEnabled())
        {
            if (!cacheInventSum)
            {
                cacheInventSum = new RecordSortedList(tableNum(InventSum));
                cacheInventSum.sortOrder(fieldNum(InventSum,ItemId),fieldNum(InventSum,InventDimId));
            }

            InventSum inventSum;
            while select inventSum
                where inventSum.ItemId == itemId
            {
                cacheInventSum.ins(inventSum);
            }
        }

        next loadCurrentInventSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>testSum</Name>
				<Source><![CDATA[
    protected void testSum(InventSum _inventSum)
    {
        if (InventIVConsistencyCheckSyncIvFlight::instance().isEnabled() && InventInventoryDataServiceFeature::isEnabled() && checkFix == CheckFix::Fix && this.inventoryServiceIsEnabled())
        {           
            InventSum inventSumCurrent;

            inventSumCurrent.ItemId      = _inventSum.ItemId;
            inventSumCurrent.InventDimId = _inventSum.InventDimId;

            if (cacheInventSum)
            {
                cacheInventSum.find(inventSumCurrent);

                this.addUpdatedInventSumToQueueTable(inventSumCurrent,_inventSum);
            
                if (!showErrors)
                {
                    cacheInventSum.del(inventSumCurrent);
                }
            }
        }

        next testSum(_inventSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>testWHSInventReserve</Name>
				<Source><![CDATA[
    protected void testWHSInventReserve(WHSInventReserve _whsInventReserveCalculated)
    {
        if (InventIVConsistencyCheckSyncIvFlight::instance().isEnabled() && InventInventoryDataServiceFeature::isEnabled() && checkFix == CheckFix::Fix && this.inventoryServiceIsEnabled() && WHSInventEnabled::exist(itemId) && InventInventoryDataServiceWHSFeature::isFeatureEnabled())
        {
            WHSInventReserve whsInventReserveCurrent;

            whsInventReserveCurrent.ItemId = _whsInventReserveCalculated.ItemId;
            whsInventReserveCurrent.InventDimId = _whsInventReserveCalculated.InventDimId;

            if (whsInventReserveCache)
            {
                whsInventReserveCache.find(whsInventReserveCurrent);

                this.addUpdatedWHSInventReserveToQueueTable(whsInventReserveCurrent, _whsInventReserveCalculated);

                if (!showErrors)
                {
                    whsInventReserveCache.del(whsInventReserveCurrent);
                }
            }
        }

        next testWHSInventReserve(_whsInventReserveCalculated);

    }

]]></Source>
			</Method>
			<Method>
				<Name>searchRemainInventSum</Name>
				<Source><![CDATA[
    protected void searchRemainInventSum()
    {
        if (InventIVConsistencyCheckSyncIvFlight::instance().isEnabled() && InventInventoryDataServiceFeature::isEnabled() && checkFix == CheckFix::Fix && this.inventoryServiceIsEnabled())
        {
            InventSum       inventSumRemain;

            if (cacheInventSum && cacheInventSum.first(inventSumRemain))
            {
                do
                {
                    // add deleted InventSum to queue, IV batch job will post all modifiers with 0 for this InventDimId to IV.
                    this.addDeletedInventSumToQueueTable(InventSumRemain);
                }
                while (cacheInventSum.next(inventSumRemain));
            }
        }
        
        next searchRemainInventSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchRemainWHSInventReserve</Name>
				<Source><![CDATA[
    protected void searchRemainWHSInventReserve()
    {
        if (InventIVConsistencyCheckSyncIvFlight::instance().isEnabled() && InventInventoryDataServiceWHSFeature::isFeatureEnabled() && WHSInventEnabled::exist(itemId) && this.inventoryServiceIsEnabled())
        {
            WHSInventReserve whsInventReserveRemain;

            if (whsInventReserveCache && whsInventReserveCache.first(whsInventReserveRemain))
            {
                do
                {
                    // add deleted whsinventreserve to queue, IV batch job will post all modifiers with 0 for this InventDimId to IV.
                    this.addDeletedWHSInventReserveToQueueTable(whsInventReserveRemain);
                }
                while (whsInventReserveCache.next(whsInventReserveRemain));
            }
        }

        next searchRemainWHSInventReserve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryServiceIsEnabled</Name>
				<Source><![CDATA[
    private boolean inventoryServiceIsEnabled()
    {
        InventoryServiceStatus serviceStatus = InventInventoryDataServiceParameters::find().InventoryServiceStatus;
        return serviceStatus != InventoryServiceStatus::Disabled && serviceStatus != InventoryServiceStatus::Disabling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDeletedInventSumToInventoryService</Name>
				<Source><![CDATA[
    private void postDeletedInventSumToInventoryService(List inventSumQueueList)
    {
        var inventoryServiceClient = new InventoryServiceClient(); 

        var logger = InventInstrumentationLogger::CreateLogger(classStr(InventSumReCalcItem_InventoryDataService_Extension));
        var inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();
        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostDeletedInventSumToInventoryService())
        {
            try
            {
                // response is a container [responseContent, correlationId].
                var response = inventoryServiceClient.postInventSums(inventSumQueueList);
                var responseContent = conPeek(response, 1);
                var correlationId = conPeek(response, 2);

                Newtonsoft.Json.Linq.JObject responseJObject = Newtonsoft.Json.JsonConvert::DeserializeObject(responseContent);
                Newtonsoft.Json.Linq.JArray failureArray = responseJObject.GetValue('failure');
                Newtonsoft.Json.Linq.JArray successArray = responseJObject.GetValue('success');

                str failedRecIdsAndErrorMessages = '';

                for (int i = 0; i < failureArray.Count; i++)
                {
                    Newtonsoft.Json.Linq.JObject resObj = failureArray.get_item(i);
                    Newtonsoft.Json.Linq.JValue inventSumId = resObj.GetValue('inventSumId');
                    Newtonsoft.Json.Linq.JValue resMessage = resObj.GetValue('message');

                    str inventSumIdValue = inventSumId.Value;
                    str resMessageValue = resMessage.Value;

                    failedRecIdsAndErrorMessages += inventSumIdValue + ': ';
                    failedRecIdsAndErrorMessages += resMessageValue + '; ';
                }

                NoYes postSuccessed = failedRecIdsAndErrorMessages == '' ? NoYes::Yes : NoYes::No;
                inventInventoryDataServiceInstrumentationActivity.logPostInventSumsInfo(activityContext, 0, 0, postSuccessed, correlationId, failedRecIdsAndErrorMessages);
            }
            catch
            {
                inventInventoryDataServiceInstrumentationActivity.logPostInventSumsInfo(activityContext, 0, 0, NoYes::No, '', 'Post request failed. Please find more information for this request on Kusto.');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDeletedWHSInventReserveToInventoryService</Name>
				<Source><![CDATA[
    private void postDeletedWHSInventReserveToInventoryService(List whsInventReserveQueueList)
    {
        var inventoryServiceClient = new InventoryServiceClient();

        var logger = InventInstrumentationLogger::CreateLogger(classStr(InventSumReCalcItem_InventoryDataService_Extension));
        var inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();

        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostDeletedWHSInventReserveToInventoryService())
        {
            try
            {
                var response = inventoryServiceClient.postWHSInventReserves(whsInventReserveQueueList);
                var responseContent = conPeek(response, 1);
                var correlationId = conPeek(response, 2);

                Newtonsoft.Json.Linq.JObject responseJObject = Newtonsoft.Json.JsonConvert::DeserializeObject(responseContent);
                Newtonsoft.Json.Linq.JArray failureArray = responseJObject.GetValue('failure');
                Newtonsoft.Json.Linq.JArray successArray = responseJObject.GetValue('success');

                var failedRecIdsAndErrorMessages = '';

                for (int i = 0; i < failureArray.Count; i++)
                {
                    Newtonsoft.Json.Linq.JObject resObj = failureArray.get_item(i);
                    Newtonsoft.Json.Linq.JValue whsInventReserveId = resObj.GetValue('whsInventReserveId');
                    Newtonsoft.Json.Linq.JValue resMessage = resObj.GetValue('message');

                    str whsInventReserveIdValue = whsInventReserveId.Value;
                    str resMessageValue = resMessage.Value;

                    failedRecIdsAndErrorMessages += whsInventReserveIdValue + ': ';
                    failedRecIdsAndErrorMessages += resMessageValue + '; ';
                }
            
                NoYes postSuccessed = failedRecIdsAndErrorMessages == '' ? NoYes::Yes : NoYes::No;
                inventInventoryDataServiceInstrumentationActivity.logPostInventSumsInfo(activityContext, 0, 0, postSuccessed, correlationId, failedRecIdsAndErrorMessages);
            }
            catch
            {
                inventInventoryDataServiceInstrumentationActivity.logPostInventSumsInfo(activityContext, 0, 0, NoYes::No, '', 'Post request failed. Please find more information for this request on Kusto.');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUpdatedInventSumToQueueTable</Name>
				<Source><![CDATA[
    private void addUpdatedInventSumToQueueTable(
        InventSum   _sumUpdated,
        InventSum   _sumCalculated)
    {
        if ( _sumUpdated.PostedQty != _sumCalculated.PostedQty               ||
             _sumUpdated.AvailOrdered != _sumCalculated.AvailOrdered         ||
             _sumUpdated.AvailPhysical != _sumCalculated.AvailPhysical       ||
             _sumUpdated.PhysicalInvent != _sumCalculated.PhysicalInvent     ||
             _sumUpdated.PhysicalValue != _sumCalculated.PhysicalValue       ||
             _sumUpdated.Deducted != _sumCalculated.Deducted                 ||
             _sumUpdated.Picked != _sumCalculated.Picked                     ||
             _sumUpdated.Received != _sumCalculated.Received                 ||
             _sumUpdated.Registered != _sumCalculated.Registered             ||
             _sumUpdated.ReservPhysical != _sumCalculated.ReservPhysical     ||
             _sumUpdated.ReservOrdered != _sumCalculated.ReservOrdered       ||
             _sumUpdated.Ordered != _sumCalculated.Ordered                   ||
             _sumUpdated.OnOrder != _sumCalculated.OnOrder                   ||
             _sumUpdated.QuotationIssue != _sumCalculated.QuotationIssue     ||
             _sumUpdated.QuotationReceipt != _sumCalculated.QuotationReceipt )
        {
            this.addInventSumToQueueTable(_sumCalculated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDeletedInventSumToQueueTable</Name>
				<Source><![CDATA[
    private void addDeletedInventSumToQueueTable(InventSum _sumDeleted)
    {
        this.addInventSumToQueueTable(_sumDeleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSumToQueueTable</Name>
				<Source><![CDATA[
    private void addInventSumToQueueTable(InventSum _inventsum)
    {
        InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
        InventoryServiceStatus serviceStatus = parameter.InventoryServiceStatus;
        boolean isReservationOffsetEnabled = InventInventoryDataServiceSoftReservationHelper::isOffsetEnabled(parameter);

        DataAreaId company = curext();
            
        if (!parameter.IsProcessingQueueBackup)
        {
            InventInventoryDataServiceInventSumQueueBackUp inventSumQueueBackUp;
            
            inventSumQueueBackUp.ItemId = _inventsum.ItemId;
            inventSumQueueBackUp.InventDimId = _inventsum.InventDimId;
            if (!isReservationOffsetEnabled && InventUseDimOfInventSumToggle::instance().isEnabled() && InventIVQueueGroupByCachePartitionFlight::instance().isEnabled())
            {
                inventSumQueueBackUp.CachePartitionId_IV = _inventsum.InventLocationId;
            }
            inventSumQueueBackUp.Company = company;
            inventSumQueueBackUp.insert();
        }
        else
        {
            InventInventoryDataServiceInventSumQueue inventSumQueue;
            
            inventSumQueue.ItemId = _inventsum.ItemId;
            inventSumQueue.InventDimId = _inventsum.InventDimId;
            if (!isReservationOffsetEnabled && InventUseDimOfInventSumToggle::instance().isEnabled() && InventIVQueueGroupByCachePartitionFlight::instance().isEnabled())
            {
                inventSumQueue.CachePartitionId_IV = _inventsum.InventLocationId;
            }
            inventSumQueue.Company = company;
            inventSumQueue.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUpdatedWHSInventReserveToQueueTable</Name>
				<Source><![CDATA[
    private void addUpdatedWHSInventReserveToQueueTable(
        WHSInventReserve _whsInventReserveUpdated,
        WHSInventReserve _whsInventReserveCalculated)
    {
        if (_whsInventReserveUpdated.AvailOrdered != _whsInventReserveCalculated.AvailOrdered ||
            _whsInventReserveUpdated.AvailPhysical != _whsInventReserveCalculated.AvailPhysical ||
            _whsInventReserveUpdated.ReservOrdered != _whsInventReserveCalculated.ReservOrdered ||
            _whsInventReserveUpdated.ReservPhysical != _whsInventReserveCalculated.ReservPhysical)
        {
            this.addWHSInventReserveToQueueTable(_whsInventReserveCalculated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDeletedWHSInventReserveToQueueTable</Name>
				<Source><![CDATA[
    private void addDeletedWHSInventReserveToQueueTable(WHSInventReserve _whsInventReserveDeleted)
    {
        this.addWHSInventReserveToQueueTable(_whsInventReserveDeleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWHSInventReserveToQueueTable</Name>
				<Source><![CDATA[
    private void addWHSInventReserveToQueueTable(WHSInventReserve _whsInventReserve)
    {
        InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
        InventoryServiceStatus serviceStatus = parameter.InventoryServiceStatus;

        DataAreaId company = curExt();

        if (!parameter.IsProcessingQueueBackup)
        {
            InventInventoryDataServiceWHSQueueBackup whsQueueBackup;
            whsQueueBackup.ItemId = _whsInventReserve.ItemId;
            whsQueueBackup.InventDimId = _whsInventReserve.InventDimId;
            whsQueueBackup.Company = company;
            whsQueueBackup.insert();
        }
        else
        {
            InventInventoryDataServiceWHSQueue whsQueue;
            whsQueue.ItemId = _whsInventReserve.ItemId;
            whsQueue.InventDimId = _whsInventReserve.InventDimId;
            whsQueue.Company = company;
            whsQueue.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>