<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TsTimesheetHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TsTimesheetHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToFavorites</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the current <c>TSTimesheetLine</c> record to the <c>TSTimesheetFavorites</c> table.
    /// </summary>
    /// <param name="_formDataSource">
    ///    The data source of the grid in the timesheet entry grid
    /// </param>
    public static void addToFavorites(FormDataSource _formDataSource)
    {
        Common          record;
        ProjParameters projParameters = ProjParameters::find();
        int counter = 0;

        if (projParameters.UseFavorites && _formDataSource != null)
        {
            for (record = _formDataSource.getFirst(true) ? _formDataSource.getFirst(true) : _formDataSource.cursor(); record; record = _formDataSource.getNext())
            {
                var timesheetLine = record as TSTimesheetLine;

                if (TSTimesheetHelper::saveAsFavorite(timesheetLine))
                {
                    counter++;
                }
            }
        }

        info(strFmt("@SYS333663", counter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAsFavorite</Name>
				<Source><![CDATA[
    internal static boolean saveAsFavorite(TSTimesheetLine timesheetLine)
    {
        boolean ret = false;

        if (!TSTimesheetFavorites::existFavorite(timesheetLine))
        {
            TSTimesheetFavorites timesheetFavorites;

            timesheetFavorites.ProjId = timesheetLine.ProjId;
            timesheetFavorites.ActivityNumber = timesheetLine.ActivityNumber;
            timesheetFavorites.CategoryId = timesheetLine.CategoryId;
            timesheetFavorites.Resource = timesheetLine.Resource;
            timesheetFavorites.TableGroupAll = TableGroupAll::Table;
            timesheetFavorites.ProjectDataAreaId = timesheetLine.ProjectDataAreaId;
            timesheetFavorites.insert();

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryCompanyLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CompanyInfo</c> records that have intercompany timesheets enabled.
    /// </summary>
    /// <returns>
    /// A query that returns a list of companies with intercompany timesheets enabled.
    /// </returns>
    public static Query buildQueryCompanyLookup()
    {
        var query                   = new Query();
        var queryBuildDataSource    = query.addDataSource(tableNum(CompanyInfo));
        queryBuildDataSource.addOrderByField(fieldNum(CompanyInfo, DataArea), SortOrder::Ascending);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountingEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current user has access rights to modify accounting section on
    /// the timesheet form.
    /// </summary>
    /// <returns>
    /// True if the user has access rights to modify accounting section on the
    /// timesheet form; otherwise, false.
    /// </returns>
    public static boolean isAccountingEditable()
    {
        SecurityRights sr = SecurityRights::construct();

        return sr.menuItemAccessRight(SecurableType::MenuItemAction,
            menuitemActionStr(TSTimesheetPostSourceDocument)) != AccessRight::NoAccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproverOfTimesheetOrItsLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current user can approve specified timesheet (in the case of
    /// document level workflow) or any of its lines (in the case of line level
    /// workflow).
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// The timesheet record to check.
    /// </param>
    /// <returns>
    /// True if current user is the approver of the timesheet or any of its lines;
    /// otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method returns true only if there is a pending work item assosiated
    /// with a timesheet or, in the case of line level workflow, with its line. If
    /// the timesheet (in the case of doc level workflow) is not in pending state
    /// or if there are no lines in pending state (in the case of line level
    /// workflow) this method returns false.
    /// </remarks>
    public static boolean isApproverOfTimesheetOrItsLines(TSTimesheetTable _tsTimesheetTable)
    {
        WorkflowWorkItemTable   workItemLocal;
        TSTimesheetLine         tsLine;

        // Make sure valid timesheet record was passed.
        if (!_tsTimesheetTable.RecId)
        {
            return false;
        }

        if (TSTimesheetHelper::recordHasLineItemApproval(_tsTimesheetTable))
        {
            // Check if current user is the approver of at least one pending line in
            // this timesheet.
            select firstOnly RecId from workItemLocal
                where workItemLocal.UserId     == curUserId()
                   && workItemLocal.Status     == WorkflowWorkItemStatus::Pending
                   && workItemLocal.RefTableId == tableNum(TSTimesheetLine)
                exists join tsLine
                   where tsLine.TimesheetNbr == _tsTimesheetTable.TimesheetNbr
                      && tsLine.RecId        == workItemLocal.RefRecId;
        }

        if (!workItemLocal.RecId)
        {
            // Check if current user is the approver of the current timesheet.
            select firstOnly RecId from workItemLocal
                where workItemLocal.UserId     == curUserId()
                   && workItemLocal.Status     == WorkflowWorkItemStatus::Pending
                   && workItemLocal.RefTableId == tableNum(TSTimesheetTable)
                   && workItemLocal.RefRecId   == _tsTimesheetTable.RecId;
        }

        return workItemLocal.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTimesheetEditable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates if the timesheet can be edited by the timesheet creator.
    /// </summary>
    /// <param name="_common">
    ///    The buffer that is passed by calling the method.
    /// </param>
    /// <returns>
    ///    true if the timesheet is editable; otherwise, false.
    /// </returns>
    public static boolean isTimesheetEditable(Common _common)
    {
        TSTimesheetTable tsTimesheetTable;
        TSTimesheetLine  tsTimesheetLine;
        TSTimesheetLineWeek tsTimesheetLineWeek;
        TSTimesheetTrans    tsTimesheetTrans;
        boolean             result = false;

        switch (_common.TableId)
        {
            case tableNum(TSTimesheetTable):
                tsTimesheetTable = _common as TSTimesheetTable;
                if (   tsTimesheetTable.ApprovalStatus == TSAppStatus::Create
                    || tsTimesheetTable.ApprovalStatus == TSAppStatus::Returned)
                {
                    result = true;
                }

                break;
            case tableNum(TSTimesheetLine):
                tsTimesheetLine = _common as TSTimesheetLine;
                if (   tsTimesheetLine.ApprovalStatus == TSAppStatus::Create
                    || tsTimesheetLine.ApprovalStatus == TSAppStatus::Returned)
                {
                    result = true;
                }
                break;

            case tableNum(TSTimesheetLineWeek):
                tsTimesheetLineWeek = _common as TSTimesheetLineWeek;

                select firstonly RecId, ApprovalStatus from tsTimesheetLine
                    where tsTimesheetLine.RecId == tsTimesheetLineWeek.tsTimesheetLine;

                if (   tsTimesheetLine.ApprovalStatus == TSAppStatus::Create
                    || tsTimesheetLine.ApprovalStatus == TSAppStatus::Returned)
                {
                    result = true;
                }
                break;

            case tableNum(TSTimesheetTrans):
                tsTimesheetTrans    = _common as TSTimesheetTrans;
                tsTimesheetLineWeek = tsTimesheetLineWeek::findRecId(tsTimesheetTrans.tsTimesheetLineWeek);

                if (tsTimesheetLineWeek.tsTimesheetLine != 0)
                {
                    select firstonly RecId, ApprovalStatus from tsTimesheetLine
                        where tsTimesheetLine.RecId == tsTimesheetLineWeek.tsTimesheetLine;

                    if (   tsTimesheetLine.ApprovalStatus == TSAppStatus::Create
                        || tsTimesheetLine.ApprovalStatus == TSAppStatus::Returned)
                    {
                        result = true;
                    }
                }
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTimesheetFormDataSourceEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current user can open the timesheet form in edit mode to be able
    /// to modify any fields, or should the form be read only.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// The timesheet for which the check is being executed.
    /// </param>
    /// <returns>
    /// True if timesheet form allows to edit any fields for the specified
    /// timesheet; otherwise, false.
    /// </returns>
    public static boolean isTimesheetFormDataSourceEditable(TSTimesheetTable _tsTimesheetTable, ResourceRecId _currentResourceRecId = ResourceFacade::findByCurrentWorker())
    {
        boolean isCreatedOrReturned = false;
        boolean isAccountingEditableAndApproved = false;
        boolean isOwnerOrDelegate = TSTimesheetHelper::isOwnerOrDelegate(_tsTimesheetTable, _currentResourceRecId);
                
        // The user can modify timesheet if he or she is its owner or owner's delegate
        // and the timesheet is in draft or returned state.
        isCreatedOrReturned  = _tsTimesheetTable.ApprovalStatus == TSAppStatus::Create || _tsTimesheetTable.ApprovalStatus == TSAppStatus::Returned;

        // The user can modify tax parameters and financial dimensions if he or she is
        // the project accountant.
        isAccountingEditableAndApproved = TSTimesheetHelper::isAccountingEditable() && _tsTimesheetTable.ApprovalStatus == TSAppStatus::Approved;

        return (isOwnerOrDelegate && isCreatedOrReturned) || isAccountingEditableAndApproved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordHasActiveWorkItem</Name>
				<Source><![CDATA[
    public static boolean recordHasActiveWorkItem(RefTableId _tableId, RefRecId _recId)
    {
        WorkflowWorkItemTable workItem;

        select firstonly RecId from workItem where workItem.RefTableId == _tableId &&
                                                   workItem.RefRecId == _recId;

        return workItem.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordHasLineItemApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current record buffer has the line item approval configured.
    /// </summary>
    /// <param name="common">
    /// The record buffer to check.
    /// </param>
    /// <returns>
    /// true if the record has line item approval; otherwise, false.
    /// </returns>
    public static boolean recordHasLineItemApproval(Common _common)
    {
        boolean                 result = false;
        SysWorkflowTable workflowTable;
        WorkflowVersionTable versionTable;
        WorkflowSubWorkflow subWorkflow;

        select firstonly RecId,ConfigurationId,RootCorrelationId from workflowTable
            where workflowTable.ContextTableId == _common.TableId
               && workflowTable.ContextRecId   == _common.RecId;

        if (workflowTable.RecId)
        {
            WorkflowCorrelationId rootCorrelationId = workflowTable.RootCorrelationId;
            WorkflowConfigurationId configId        = workflowTable.ConfigurationId;
            workflowTable.clear();
            workflowTable = SysWorkflowTable::find(rootCorrelationId);

            if (workflowTable.RecId)
            {
                configId = workflowTable.ConfigurationId;
            }

            select RecId,ConfigurationId from versionTable
                where versionTable.ConfigurationId == configId
                    join RecId,WorkflowVersionTable from subWorkflow
                    where subWorkflow.WorkflowVersionTable == versionTable.RecId
                       && subWorkflow.ElementType         == WorkflowElementType::LineItemWorkflow;

            if (versionTable.RecId)
            {
                result = true;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if versions of the in-memory records of the tables
    /// <c>TSTimesheetTable</c>, <c>TSTimesheetLine</c>, <c>TSTimesheetLineWeek</c>
    /// are the same as their versions stored in the database. If the versions are
    /// the same, the record can be updated. Otherwise, it was changed by another
    /// user, or from another client and should be refreshed before updating.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    /// In-memory record of the <c>TSTimesheetTable</c>.
    /// </param>
    /// <param name="_tsTimesheetLine">
    /// In-memory record of the <c>TSTimesheetLine</c>.
    /// </param>
    /// <param name="_tsTimesheetLineWeek">
    /// In-memory record of the <c>TSTimesheetLineWeek</c>.
    /// </param>
    /// <param name="_message">
    /// <c>SysInfoLogStr</c> message do be displayed if versions differ.
    /// </param>
    /// <returns>
    /// True if all the versions are the same; otherwise, false.
    /// </returns>
    /// <remarks>
    /// For the <c>TSTimesheetTable</c> record <c>ApprovalStatus</c> is being
    /// verified instead of a record version. This is done only if a new timesheet
    /// line is being created and there is no existing line record in the database.
    /// </remarks>
    public static boolean verifyVersions(
        TSTimesheetTable    _tsTimesheetTable,
                                            TSTimesheetLine         _tsTimesheetLine,
                                            TSTimesheetLineWeek     _tsTimesheetLineWeek,
                                            SysInfoLogStr           _message)
    {
        boolean             result = true;
        TSTimesheetLineWeek tsLineWeek;
        TSTimesheetLine     tsLine;
        TSTimesheetTable    tsTimesheet;

        // If entry is being updated, not inserted first time
        if (_tsTimesheetLineWeek.RecId != 0)
        {
            // Get current versions of the timesheeet line and timesheet line week records from the database
            select firstOnly RecVersion from tsLineWeek
                where tsLineWeek.RecId  == _tsTimesheetLineWeek.RecId
            	join RecVersion, RecId from tsLine
                    where tsLine.RecId == tsLineWeek.TSTimesheetLine;

            // Show an error if the version has changed
            if (   tsLineWeek.RecVersion != _tsTimesheetLineWeek.recVersion
                || tsLine.RecVersion != _tsTimesheetLine.recVersion)
            {
                result = checkFailed(_message);
            }
        }
        else
        {
            // Get current status of the timesheet record from the database
            select firstOnly TimesheetNbr, ApprovalStatus from tsTimesheet
            where tsTimesheet.TimesheetNbr == _tsTimesheetTable.TimesheetNbr;

            // Show an error if the timesheet has changed its status
            if (tsTimesheet.ApprovalStatus != TSAppStatus::Create && tsTimesheet.ApprovalStatus != TSAppStatus::Returned)
            {
                result = checkFailed(_message);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTimesheetWithChangeReason</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prompts the user for a change reason
    /// </summary>
    /// <param name = "_formRun">
    ///     Parent form in which the timesheet is to be deleted.
    /// </param>
    /// <param name = "_tsTimesheetTable">
    ///     Timesheet record to be deleted
    /// </param>
    /// <returns>
    ///     Returns true if the timesheet is deleted and the dialog closed OK. Otherwise false
    /// </returns>
    public static boolean deleteTimesheetWithChangeReason(
        FormRun          _formRun,
        TSTimesheetTable _tsTimesheetTable)
    {
        ProjParameters projParameters   = ProjParameters::find();
        boolean result                  = false;

        if (projParameters.TimesheetChangeReason)
        {
            TSIParentForm tsIParentForm = _formRun as TSIParentForm;

            if (tsIParentForm)
            {
                tsIParentForm.setChildDialogClosedOk(false);
            }

            Args args = new Args(_formRun);
            args.record(_tsTimesheetTable);

            // wait for the user to close the dialog
            args.name(formstr(TSTimesheetDeleteDialog));
            xFormRun formRun = classFactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();

            // the value is set by the dialog
            result = tsIParentForm ? tsIParentForm.getChildDialogClosedOk() : true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the current record and all selected records can be deleted.
    /// </summary>
    /// <param name = "_tsTimesheetTable">
    ///    A <c>TSTimesheetTable</c> record.
    /// </param>
    /// <returns>
    ///    true if all the selected records can be deleted; otherwise, false.
    /// </returns>
    public static boolean canDeleteSelected(TSTimesheetTable _tsTimesheetTable)
    {
        FormDataSource  formDataSource = FormDataUtil::getFormDataSource(_tsTimesheetTable);
        boolean         result         = true;

        if (formDataSource)
        {
            TSTimesheetTable tsTimesheetTable = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : _tsTimesheetTable;

            while (   result
                   && tsTimesheetTable)
            {
                result           = tsTimesheetTable.ApprovalStatus == TSAppStatus::Create || tsTimesheetTable.ApprovalStatus == TSAppStatus::Returned;;
                tsTimesheetTable = formDataSource.getNext();
            }
        }
        else
        {
            result = _tsTimesheetTable.ApprovalStatus == TSAppStatus::Create;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRecordSelection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unmarks all records in the form datasource.
    /// </summary>
    /// <param name = "_formDataSource">
    ///    The form datasource.
    /// </param>
    public static void clearRecordSelection(FormDataSource _formDataSource)
    {
        if (_formDataSource)
        {
            Common common = _formDataSource.getFirst(true);

            while (common)
            {
                _formDataSource.markRecord(common,false);
                common = _formDataSource.getNext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTSTimesheetTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Table ID for TSTimesheetTable
    /// </summary>
    /// <returns>
    /// Table ID of TSTimesheetTable
    /// </returns>
    /// <remarks>This is used in the metadata of <c>TsTimesheetsPending</c> query to provide QueryRange value for the TSTimesheetTable ID at runtime. This may not readily show when finding references.</remarks>
    [QueryRangeFunctionAttribute()]
    public static TableId getTSTimesheetTableId()
    {
        return tableNum(TSTimesheetTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMoreThanOneRecordSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if there are more than one record selected at the datasource.
    /// </summary>
    /// <returns>True if there are more than 1 record selected at the datasource; otherwise; false.</returns>
    public static boolean hasMoreThanOneRecordSelected(FormDataSource _formDataSource)
    {
        MultiSelectionHelper selectionHelper = MultiSelectionHelper::construct();

        selectionHelper.parmDatasource(_formDataSource);

        return (selectionHelper.getFirst() && selectionHelper.getNext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitTimesheetToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the timesheet passed can be submitted to workflow.
    /// </summary>
    /// <param name="_tsTimesheetTable">
    ///    Timesheet record to check
    /// </param>
    /// <returns>
    ///    True if the current timesheet can be submitted to workflow; otherwise, false.
    /// </returns>
    public static boolean canSubmitTimesheetToWorkflow(TSTimesheetTable _tsTimesheetTable)
    {
        return  _tsTimesheetTable.RecId != 0 &&
                _tsTimesheetTable.ApprovalStatus == TSAppStatus::Create;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEnableTimesheetHeaderWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if header workflow button should be enabled for the passed timesheet
    /// </summary>
    /// <param name="_tsTimesheetTable">
    ///    Timesheet record to check
    /// </param>
    /// <returns>
    ///    True if the workflow button can be enabled; otherwise, false.
    /// </returns>
    public static boolean shouldEnableTimesheetHeaderWorkflow(TSTimesheetTable _tsTimesheetTable)
    {
        return  TSTimesheetHelper::canSubmitTimesheetToWorkflow(_tsTimesheetTable) ||
                    TSTimesheetHelper::isPendingOrHasWorkflowHistory(_tsTimesheetTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPendingOrHasWorkflowHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if passed record has pending work item for current user or workflow history available
    /// </summary>
    /// <param name="_record">
    ///    Record to check
    /// </param>
    /// <returns>
    ///    True if the passed record has pending work item or has workflow history available; otherwise, false.
    /// </returns>
    public static boolean isPendingOrHasWorkflowHistory(Common _record)
    {
        return  Workflow::findWorkItemsForCurrentUser(_record).elements() ||
                    Workflow::findTrackingStatusForDocument(_record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowVisibleForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the workflow button should be visible for a given timesheet line.
    /// </summary>
    /// <param name = "_line">Timesheet line that will be used to analyze if the workflow line button should be visible.</param>
    /// <returns>True if the workflow line button should be visible; otherwise; false.</returns>
    public static boolean isWorkflowVisibleForLine(TsTimesheetLine _line)
    {
        return _line.RecId != 0 && !TSTimesheetTable::find(_line.TimesheetNbr).canSubmitToWorkflow() && TSTimesheetHelper::isPendingOrHasWorkflowHistory(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowImageReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the image reference based on the workflow status of the passed timesheet line
    /// </summary>
    /// <param name="_timesheetLine">
    ///    Timesheet line for which the image reference is required
    /// </param>
    /// <returns>
    ///    Image reference for the timesheet line
    /// </returns>
    public static ImageReference getWorkflowImageReference(TSTimesheetLine _timesheetLine)
    {
        ImageReference imgRef;

        if (Workflow::findWorkItemsForCurrentUser(_timesheetLine).elements())
        {
            imgRef = ImageReference::constructForSymbol('Workflow');
        }
        else
        {
            imgRef = ImageReference::constructForSymbol('');
        }

        return imgRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userIsADelegateOfAnyResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current user has setup as delegate user for any timesheet resource.
    /// </summary>
    /// <returns>
    /// Returns true if the current user is a delegate of any timesheet resource; otherwise false.
    /// </returns>
    public static boolean userIsADelegateOfAnyResource()
    {
        TSAppEmplSub    tsAppEmplSub;
        date			userPreferredTimezoneDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        select firstonly TimesheetResource from tsAppEmplSub
            where tsAppEmplSub.DelegatedUser == curUserId()
                && (tsAppEmplSub.DateFrom <= userPreferredTimezoneDate
                ||  tsAppEmplSub.DateFrom == dateNull())
                && (tsAppEmplSub.DateTo   >= userPreferredTimezoneDate
                ||  tsAppEmplSub.DateTo   == dateNull());

        return tsAppEmplSub.TimesheetResource != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDelegateUserForResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if one user was a delegate for another resource on specified date.
    /// </summary>
    /// <param name="_timesheetResource">
    /// The resource whose delegate is being verified.
    /// </param>
    /// <param name="_userId">
    /// The user id to be checked for being a delegate.
    /// </param>
    /// <param name="_date">
    /// The date on which delegation is being vefified.
    /// </param>
    /// <returns>
    /// true if <c>_userId</c> was a delegate for <c>_timesheetResource</c> on <c>_date</c>; otherwise, false.
    /// </returns>
    internal static boolean isDelegateUserForResource(
        ResourceRecId	_timesheetResource,
        UserId			_userId = curUserId(),
        TSDate			_date   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TSAppEmplSub    tsAppEmplSub;

        select firstOnly RecId from tsAppEmplSub
            where tsAppEmplSub.TimesheetResource == _timesheetResource
               && tsAppEmplSub.DelegatedUser    == _userId
               && (tsAppEmplSub.DateFrom <= _date
               ||  tsAppEmplSub.DateFrom == dateNull())
               && (tsAppEmplSub.DateTo   >= _date
               ||  tsAppEmplSub.DateTo   == dateNull());

        return tsAppEmplSub.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceToUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the resource field value to user id value.
    /// </summary>
    internal static void updateResourceToUser()
    {
        ProjParameters projParameters = ProjParameters::find(true);

        if (projParameters.TimesheetDelegateUpdatedToUser == NoYes::No)
        {
            ttsbegin;

            TSAppEmplSub        tsAppEmplSub;
            ResourceWorkerView  resourceWorkerView;
            HcmWorker           hcmWorker;
            DirPersonUser       dirPersonUser;

            delete_from tsAppEmplSub where tsAppEmplSub.Resource == tsAppEmplSub.TimesheetResource;

            update_recordset tsAppEmplSub
               setting DelegatedUser = dirPersonUser.User, Resource = 0
                join resourceWorkerView 
                    where resourceWorkerView.RecId == tsAppEmplSub.Resource
                join hcmWorker 
                    where hcmWorker.RecId == resourceWorkerView.Worker
                join dirPersonUser 
                    where dirPersonUser.PersonParty == hcmWorker.Person;

            projParameters.TimesheetDelegateUpdatedToUser = NoYes::Yes;
            projParameters.doUpdate();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOwnerOrDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the timesheet resource is a owner or a delegate.
    /// </summary>
    /// <param name = "_tsTimesheetTable">A <c>TSTimesheetTable</c> record to check.</param>
    /// <param name = "_resourceRecId">The current resource record id.</param>
    /// <returns>true if the current user is a owner or delegate for the timesheet.</returns>
    public static boolean isOwnerOrDelegate(TSTimesheetTable _tsTimesheetTable, ResourceRecId _resourceRecId)
    {
        return ( _tsTimesheetTable.Resource &&
                (_tsTimesheetTable.Resource == _resourceRecId ||
                TSTimesheetHelper::isDelegateUserForResource(_tsTimesheetTable.Resource, curUserId())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTimesheetPerfPostingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates if performance enhancement for timesheet posting should be used.
    /// </summary>
    /// <returns>
    /// True,Flight for timesheet performance is enabled; Otherwise, false.
    /// </returns>
    [System.Obsolete("The flight TSTimesheetPostPerfFlight has been removed, this method will return default true. Please remove/change any CoC implemented via this method.", true)]
    public static boolean isTimesheetPerfPostingEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTSDisplayResourceGroupProjEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates if the feature to display projects 
    ///  assigned to resources through the resource group in the mobile application is enabled
    /// </summary>
    /// <returns>
    /// True,if the feature is enabled; Otherwise, false.
    /// </returns>
    public static boolean isTSDisplayResourceGroupProjEnabled()
    {
        return FeatureStateProvider::isFeatureEnabled(TSDisplayResourceGroupProjFeature::instance());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>