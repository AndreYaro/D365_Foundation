<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTXMLProcessing_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GBTXMLProcessing_CN</c> class handles all the XML document related processing, which
/// includes:
/// 1. Read GB/T 24589 schema files to generate dataset which is used as in-memory representation of XSD
/// 2. Generate target GB/T 24589 XML files from filled dataset
/// </summary>
class GBTXMLProcessing_CN
{
    Map                         dataTypeMap;
    GBTXmlCategory_CN           GBTXmlCategory;
    GBTDataElementTypeInfo_CN   GBTDataElementTypeInfo;

    #LedgerGBT_CN
    #File
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDataColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates dataset column.
    /// </summary>
    /// <param name="_xmlNode">
    /// The Xml node.
    /// </param>
    /// <param name="_nsmgr">
    /// The namespace manager.
    /// </param>
    /// <returns>
    /// Data colum.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected System.Data.DataColumn createDataColumn(XmlNode _xmlNode, XmlNamespaceManager _nsmgr)
    {
        System.Data.DataColumn  dc;
        XmlNode                 node;
        XmlNode                 childNode;

        str             columnName;
        str             xPathDataType;
        str             dataTypeName;

        str             xmlType;
        str             length;
        str             maxLength;

        if (_xmlNode == null)
        {
            return dc;
        }

        node = _xmlNode;

        columnName = node.attributes().getNamedItem(#Name).value();
        dc = new System.Data.DataColumn(columnName);

        //get the data type info
        xPathDataType = strFmt(@"//xs:element[@name='%1']/xs:complexType/xs:simpleContent/xs:extension", columnName);
        childNode  = node.selectSingleNode(xPathDataType, _nsmgr);
        if (childNode)
        {
            //data type name
            dataTypeName = childNode.attributes().getNamedItem(#Base).value();
            [xmlType, length, maxlength] = dataTypeMap.lookup(strLRTrim(dataTypeName));

            //all the data column shall use string type
            dc.set_DataType(CLRInterop::getType(#DataType_String));

            //only xs:string type need to add to GBTDataElementTypeInfo, since other types like
            //xs:int and xs:double type info haven't been kept in schema file, which means we need to
            //manually maintain the data type info for xs:int and xs:double according to GBT 24589
            //standard book
            if (xmlType == #GBTXmlStringTypeName)
            {
                GBTDataElementTypeInfo.addDataElement(columnName, [xmlType, length, maxLength]);
            }
        }

        return dc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataElementTypeInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data element type info.
    /// </summary>
    /// <param name="_category">
    /// The Xml category.
    /// </param>
    /// <returns>
    /// The <c>GBTDataElementTypeInfo_CN</c> class object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected GBTDataElementTypeInfo_CN createDataElementTypeInfo(GBTXmlCategory_CN _category)
    {
        GBTDataElementTypeInfo = GBTDataElementTypeInfo_CN::construct(_category);
        GBTDataElementTypeInfo.init();

        return GBTDataElementTypeInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates dataset.
    /// </summary>
    /// <param name="_xmlDoc">
    /// The Xml document object.
    /// </param>
    /// <param name="_xmlDocName">
    /// The Xml document name.
    /// </param>
    /// <returns>
    /// Dataset.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected System.Data.DataSet createDataset(XmlDocument _xmlDoc, str _xmlDocName)
    {
        System.Data.DataSet                 ds;
        System.Data.DataTable               dt;
        System.Data.DataTableCollection     dtc;

        XmlNamespaceManager     nsmgr;
        XmlNode                 node;
        XmlNodeList             nodeList;
        str                     xPathTableName;

        if (_xmlDoc == null)
        {
            return ds;
        }

        ds = new System.Data.DataSet(_xmlDocName);

        nsmgr = new XmlNamespaceManager(_xmlDoc.nameTable());
        nsmgr.addNamespace(#XS, #NameSpace);

        xPathTableName = strFmt(@'//xs:element[@name="%1"]/xs:complexType/xs:sequence/xs:element', _xmlDocName);

        nodeList = _xmlDoc.selectNodes(xPathTableName, nsmgr);
        if (nodeList && nodeList.length() > 0)
        {
            node = nodeList.nextNode();
            while (node)
            {
                dt = this.createDataTable(node, _xmlDoc, nsmgr);

                if (dt)
                {
                    dtc = ds.get_Tables();
                    dtc.Add(dt);
                }

                node = nodeList.nextNode();
            }
        }

        return ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data table.
    /// </summary>
    /// <param name="_xmlNode">
    /// The Xml node.
    /// </param>
    /// <param name="_xmlDoc">
    /// The Xml document.
    /// </param>
    /// <param name="_nsmgr">
    /// The namespace manager.
    /// </param>
    /// <returns>
    /// DataTable.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected System.Data.DataTable createDataTable(
        XmlNode             _xmlNode,
        XmlDocument         _xmlDoc,
        XmlNamespaceManager _nsmgr)
    {
        System.Data.DataTable               dt;
        System.Data.DataColumn              dc;
        System.Data.DataColumnCollection    dcc;

        XmlNode                 node;
        XmlNode                 childNode;
        XmlNodeList             nodeList;
        str                     xPathColumnName;
        str                     tableName;

        if (_xmlNode == null || _xmlDoc == null)
        {
            return dt;
        }

        node = _xmlNode;

        tableName = node.attributes().getNamedItem(#Ref).value();

        //Creates data table
        dt = new System.Data.DataTable(tableName);
        xPathColumnName = strFmt(@"//xs:element[@name='%1']/xs:complexType/xs:sequence/xs:element", tableName);

        nodeList = _xmlDoc.selectNodes(xPathColumnName, _nsmgr);
        if (nodeList && nodeList.length() > 0)
        {
            childNode = nodeList.nextNode();
            while (childNode)
            {
                dc = this.createDataColumn(childNode, _nsmgr);

                if (dc)
                {
                    dcc = dt.get_Columns();
                    dcc.Add(dc);
                }

                childNode = nodeList.nextNode();
            }
        }

        return dt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDataStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets GBT data structure.
    /// </summary>
    /// <param name="_category">
    /// The Xml category.
    /// </param>
    /// <returns>
    /// The <c>GBTDataStructure_CN</c> class object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTDataStructure_CN generateDataStructure(GBTXmlCategory_CN _category)
    {
        ResourceName        resourceName;
        str                 xmlDocName;
        XmlDocument         xmlDoc;
        GBTDataStructure_CN GBTDataStructure = new GBTDataStructure_CN();

        switch (_category)
        {
            case GBTXmlCategory_CN::GL:
                resourceName = #GBTSchema_GL_ResourceName;
                xmlDocName = #GBTSchema_GL_Name;
                break;
            case GBTXmlCategory_CN::Common:
                resourceName = #GBTSchema_Common_ResourceName;
                xmlDocName = #GBTSchema_Common_Name;
                break;
            case GBTXmlCategory_CN::FA:
                resourceName = #GBTSchema_FA_ResourceName;
                xmlDocName = #GBTSchema_FA_Name;
                break;
            case GBTXmlCategory_CN::ARAP:
                resourceName = #GBTSchema_ARAP_ResourceName;
                xmlDocName = #GBTSchema_ARAP_Name;
                break;
        }
        //create a new GBTDataElementTypeInfo instance, which shall be further filled with data element
        //type info while creating dataColumn
        this.createDataElementTypeInfo(_category);
        //get the schema file xml document instance
        xmlDoc = GBTXMLProcessing_CN::resource2XmlDocument(resourceName);
        //create the dataset and parm it to GBTDataStructure
        GBTDataStructure.parmDataSet(this.createDataset(xmlDoc, xmlDocName));
        //parm the GBTDataElementTypeInfo
        GBTDataStructure.parmDataElementTypeInfo(GBTDataElementTypeInfo);

        return GBTDataStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance of the <c>GBTXMLProcessing_CN</c> class.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init()
    {
        dataTypeMap = GBTXMLProcessing_CN::createGBTDataTypeMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGBTDataTypeMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates GBT data type map.
    /// </summary>
    /// <returns>
    /// Map.
    /// </returns>
    private static map createGBTDataTypeMap()
    {
        Map                     map;

        XmlNamespaceManager     nsmgr;
        XmlNode                 node;
        XmlNode                 childNode;
        XmlNode                 typeLengthNode;
        XmlNodeList             nodeList;
        XmlDocument             xmlDoc;

        str                     xPathElementName;
        str                     elementName;

        str                     xmlElementType;
        str                     xmlElementLength;
        str                     xmlElementMaxLength;

        map = new map(Types::String, Types::Container);

        xmlDoc = GBTXMLProcessing_CN::resource2XmlDocument(#GBTSchema_ElementType_ResourceName);

        nsmgr = new XmlNamespaceManager(xmlDoc.nameTable());
        nsmgr.addNamespace(#XS, #NameSpace);

        xPathElementName = @'xs:schema/xs:simpleType';

        nodeList = xmlDoc.selectNodes(xPathElementName, nsmgr);
        if (nodeList && nodeList.length() > 0)
        {
            node = nodeList.nextNode();
            while (node)
            {
                //clear this since not every element have
                xmlElementLength = '';
                xmlElementMaxLength = '';

                elementName = node.attributes().getNamedItem(#Name).value();
                childNode = node.firstChild();

                Debug::assert(childNode.name() == #ElementRestrictionName);
                xmlElementType = childNode.attributes().getNamedItem(#Base).value();

                typeLengthNode = childNode.firstChild();
                if (typeLengthNode)
                {
                    if (typeLengthNode.name() == #ElementLengthName)
                    {
                        xmlElementLength = typeLengthNode.attributes().getNamedItem(#Value).value();
                    }
                    else if (typeLengthNode.name() == #ElementMaxLengthName)
                    {
                        xmlElementMaxLength = typeLengthNode.attributes().getNamedItem(#Value).value();
                    }
                }
                map.insert(strLRTrim(elementName), [xmlElementType, xmlElementLength, xmlElementMaxLength]);

                node = nodeList.nextNode();
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserializeDataSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes Xml to dataset.
    /// </summary>
    /// <param name="_xmlCon">
    /// The Xml container, includes the xml data and xml schema
    /// </param>
    /// <returns>
    /// DataSet.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static System.Data.DataSet deserializeDataSet(container _xmlCon)
    {
        System.Data.DataSet         ds;
        XML                         xml;
        XML                         xmlSchema;
        System.IO.StringReader      strXmlReader;
        System.IO.StringReader      strXmlSchemaReader;

        if (_xmlCon == conNull())
        {
            return ds;
        }

        [xml, xmlSchema] = _xmlCon;

        ds = new System.Data.DataSet();

        try
        {
            strXmlSchemaReader = new System.IO.StringReader(xmlSchema);
            ds.ReadXmlSchema(strXmlSchemaReader);

            strXmlReader = new System.IO.StringReader(xml);
            ds.ReadXml(strXmlReader);
        }
        catch
        {
            strXmlSchemaReader.Dispose();
            strXmlSchemaReader = null;
            strXmlReader.Dispose();
            strXmlReader = null;
        }

        return ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource2XmlDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts resource file to Xml document.
    /// </summary>
    /// <param name="_resourceName">
    /// The resource name.
    /// </param>
    /// <returns>
    /// The Xml document object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static XmlDocument resource2XmlDocument(ResourceName _resourceName)
    {
        ResourceNode        resourceNode;
        Filename            fileName;
        XmlDocument         xmlDoc;
        FileIOPermission    fileIOPermission;
        #AOT

        resourceNode = new resourceNode(_resourceName);
        fileName = SysResource::saveToTempFile(resourceNode);

        fileIOPermission = new FileIOPermission(fileName, #io_read);
        fileIOPermission.assert();

        xmlDoc = XmlDocument::newFile(fileName);

        CodeAccessPermission::revertAssert();

        return xmlDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeDataSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes dataset to Xml.
    /// </summary>
    /// <param name="_ds">
    /// The dataset object.
    /// </param>
    /// <returns>
    /// container structured as [xml data, xml schema]
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container serializeDataSet(System.Data.DataSet  _ds)
    {
        XML     xmlData;
        XML     xmlSchema;

        if (_ds == null)
        {
            return conNull();
        }

        xmlData = _ds.GetXml();
        xmlSchema = _ds.GetXmlSchema();

        return [xmlData, xmlSchema];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>