<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25StdOperandType_Profit</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25StdOperandType_Profit extends RTax25StdOperandType
{
    Set profitSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupFrom</Name>
				<Source><![CDATA[
        public void lookupFrom()
    {
        RTax25ProfitTable::lookupLeafProfitId(controlRefIdFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTo</Name>
				<Source><![CDATA[
        public void lookupTo()
    {
        RTax25ProfitTable::lookupLeafProfitId(controlRefIdTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>operand</Name>
				<Source><![CDATA[
public AmountMST operand()
    {
        RTax25ProfitBalance         profitBalance;
        AmountMST                   ret;
        RTax25ProfitTable           profitTable;
        SetIterator                 si;

        profitSet = new Set(Types::Int64);

        while select RecId from profitTable
            where (profitTable.ProfitId >= expressionLine.RefIdFrom
                && profitTable.ProfitId <= expressionLine.RefIdTo)
               || (profitTable.ProfitId == expressionLine.RefIdFrom
                && !expressionLine.RefIdTo)
        {
            this.traverseNodes(profitTable.RecId);
        }

        si = new SetIterator(profitSet);
        si.begin();
        while (si.more())
        {
            profitBalance = new RTax25ProfitBalance(si.value());
            profitBalance.setBalance(dateFrom, dateTo, rTax25PeriodIterator);
            ret += profitBalance.balanceMST();
            si.next();
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>traverseNodes</Name>
				<Source><![CDATA[
        private void traverseNodes(RefRecId _parentProfitTableRecId)
    {
        RTax25ProfitTable   profitTable;
        boolean             childFound = false;

        if (profitSet.in(_parentProfitTableRecId))
            return;

        while select RecId from profitTable
            index hint ParentProfitIdx
            where profitTable.ParentProfitRecId == _parentProfitTableRecId
        {
            childFound = true;
            this.traverseNodes(profitTable.RecId);
        }

        if (!childFound)
        {
            profitSet.add(_parentProfitTableRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
        public void updateDesign()
    {
        controlRefIdFrom.enabled(true);
        controlRefIdTo.enabled(true);

        controlRefIdFrom.lookupButton(FormLookupButton::Always);
        controlRefIdTo.lookupButton(FormLookupButton::Always);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret = super();

        ret = RTax25ProfitTable::checkExist(expressionLine.RefIdFrom) && ret;

        ret = RTax25ProfitTable::checkExist(expressionLine.RefIdTo) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        ReportingDate_RU            correctedPeriodDate, tmpDate;
        RTax25ProfitTable           profitTable;
        SetEnumerator               se;

        profitSet = new Set(Types::Int64);

        while select RecId from profitTable
            where (profitTable.ProfitId >= expressionLine.RefIdFrom
                && profitTable.ProfitId <= expressionLine.RefIdTo)
               || (profitTable.ProfitId == expressionLine.RefIdFrom
                && !expressionLine.RefIdTo)
        {
            this.traverseNodes(profitTable.RecId);
        }

        se = profitSet.getEnumerator();
        while (se.moveNext())
        {
            tmpDate = RTax25LedgerRun::newProfitTableRecIdCheckCorr(se.current()).calcCorrectedPeriodDate(
                _fromDateCalc,
                _toDateCalc,
                _toDateCorr);

            if (!correctedPeriodDate || (tmpDate && correctedPeriodDate > tmpDate))
            {
                correctedPeriodDate = tmpDate;
            }
        }

        return correctedPeriodDate;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>