<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjWIPEmplItem2ColDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjWIPEmplItem2ColDP</c> class is the report data provider class for the associated
///    <c>ProjListProjWIPEmplItem2Column</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjStatementEmplItem)),
    SRSReportParameterAttribute(classStr(ProjListProjWIPContract))
]

class ProjListProjWIPEmplItem2ColDP extends SRSReportDataProviderPreProcessTempDB
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    ProjOptionRevenue       revenue;
    ProjOptionOnAcc         onAcc;
    TransDate               projFromDate;
    TransDate               projBreakDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerBreakDate;
    TransDate               ledgerToDate;
    projActualVsBudget      actualVsBudget2Col;
    ForecastModelId         forecastModelId;
    ProjShowAmount          showAmount;
    boolean                 skipBlankId;
    boolean                 skipZero;

    ProjListProjWIPTmp              projListProjWIPTmp;
    ProjListProjTrans_WIP           listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;

    QueryRun                qrun;
    ProjEmplItemId          id;
    Name                    name;
    ResourceRecId           resource;
    ProjListIDType          projListIDType;

    projStatement           actualProjStatement;
    projStatement           budgetProjStatement;

    AmountMST               actualGross;
    AmountMST               budgetGross;
    AmountMST               actualOnAccount;
    AmountMST               budgetOnAccount;
    AmountMST               actualNet;
    AmountMST               budgetNet;

    int         showCostValue, showGross, showNet, showOnAccount,  showQtyHour, showSalesValue;
    str         grossWIPLabel, wipInvoiceLabel, netWIPLabel, idLabel, devianceLabel,selectionLabel;
    int         hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
/// <summary>
///    Calculates the amounts needed for the report.
/// </summary>
void calculate()
{
    if (projListIDType  == ProjListIDType::Employee)
    {
        actualProjStatement.parmEmplItemId(SysQuery::valueEmptyString());
        actualProjStatement.parmResource(resource);

        budgetProjStatement.parmEmplItemId(SysQuery::valueEmptyString());
        budgetProjStatement.parmResource(resource);
    }
    else
    {
        actualProjStatement.parmEmplItemId(id);
        actualProjStatement.parmResource(0);

        budgetProjStatement.parmEmplItemId(id);
        budgetProjStatement.parmResource(0);
    }

    actualGross       = actualProjStatement.b300_Gross();
    actualOnAccount   = actualProjStatement.b400_wip_Invoiced_OnAccount();
    actualNet         = actualProjStatement.b500_Net();

    budgetGross       = budgetProjStatement.b300_Gross();
    budgetOnAccount   = budgetProjStatement.b400_wip_Invoiced_OnAccount();
    budgetNet         = budgetProjStatement.b500_Net();
}

]]></Source>
			</Method>
			<Method>
				<Name>calculateNoId</Name>
				<Source><![CDATA[
/// <summary>
///    Calculate the number of blank IDs.
/// </summary>
void calculateNoId()
{
    actualProjStatement.parmEmplItemId(SysQuery::valueEmptyString());
    actualProjStatement.parmResource(0);

    budgetProjStatement.parmEmplItemId(SysQuery::valueEmptyString());
    budgetProjStatement.parmResource(0);

    actualGross       = actualProjStatement.b300_Gross();
    actualOnAccount   = actualProjStatement.b400_wip_Invoiced_OnAccount();
    actualNet         = actualProjStatement.b500_Net();

    budgetGross       = budgetProjStatement.b300_Gross();
    budgetOnAccount   = budgetProjStatement.b400_wip_Invoiced_OnAccount();
    budgetNet         = budgetProjStatement.b500_Net();
}

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjWIPTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Get the data from the <c>ProjListProjWIPProjSRSTmp</c> table.
/// </summary>
/// <returns>
///    The data from the <c>ProjListProjWIPProjSRSTmp</c> table.
/// </returns>

[SRSReportDataSetAttribute('ProjListProjWIPTmp')]
public ProjListProjWIPTmp getProjListProjWIPTmp()
{
    select * from projListProjWIPTmp;
    return projListProjWIPTmp;
}

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
/// <summary>
///    Initializes an instance of the <c>ProjListProjTrans</c> class using the specified parameters.
/// </summary>
private void initProjListTrans()
{
    listProjTrans = ProjListProjTrans::construct(ProjListStateType::WIP, ProjListStateId::EmplItem);
    listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

    listProjTrans.parmTimeMaterial(timeMaterial);
    listProjTrans.parmFixedPrice(fixedPrice);
    listProjTrans.parmInvestment(investment);
    listProjTrans.parmInternalCost(internalCost);

    listProjTrans.parmHour(hour);
    listProjTrans.parmExpenses(expenses);
    listProjTrans.parmItem(item);
    listProjTrans.parmRevenue(revenue);
    listProjTrans.parmOnAcc(onAcc);

    listProjTrans.parmProjFromDate(projFromDate);
    listProjTrans.parmProjBreakDate(projBreakDate);
    listProjTrans.parmProjToDate(projToDate);
    listProjTrans.parmLedgerFromDate(ledgerFromDate);
    listProjTrans.parmLedgerBreakDate(ledgerBreakDate);
    listProjTrans.parmLedgerToDate(ledgerToDate);

    listProjTrans.parmActualVsBudget(actualVsBudget2Col);
    listProjTrans.parmForecastModelId(forecastModelId);

    listProjTransLayout.parmSkipBlank(skipBlankId);
    listProjTransLayout.parmSkipZero(skipZero);

    listProjTransLayout.parmShowAmount(showAmount);
}

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjWIPTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Gets the required data and inserts it into the temporary table.
/// </summary>
private void insertProjListProjWIPTmp()
{
    projListProjWIPTmp.clear();

    projListProjWIPTmp.Id         = id;
    projListProjWIPTmp.Name       = name;
    projListProjWIPTmp.ProjListIdType = projListIDType;

    projListProjWIPTmp.Gross      = listProjTransLayout.showAmountReport(actualGross, showAmount);
    projListProjWIPTmp.Gross1     = listProjTransLayout.showAmountReport(budgetGross, showAmount);
    projListProjWIPTmp.Gross2     = ProjListProjHelpClass::calcActualVsBudget(projListProjWIPTmp.Gross,
                                    projListProjWIPTmp.Gross1, actualVsBudget2Col, false);

    projListProjWIPTmp.Net        = listProjTransLayout.showAmountReport(actualNet, showAmount);
    projListProjWIPTmp.Net1       = listProjTransLayout.showAmountReport(budgetNet, showAmount);
    projListProjWIPTmp.Net2       = ProjListProjHelpClass::calcActualVsBudget(projListProjWIPTmp.Net,
                                    projListProjWIPTmp.Net1, actualVsBudget2Col, false);

    projListProjWIPTmp.OnAccount  = listProjTransLayout.showAmountReport(actualOnAccount, showAmount);
    projListProjWIPTmp.OnAccount1 = listProjTransLayout.showAmountReport(budgetOnAccount, showAmount);
    projListProjWIPTmp.OnAccount2 = ProjListProjHelpClass::calcActualVsBudget(projListProjWIPTmp.OnAccount,
                                    projListProjWIPTmp.OnAccount1, actualVsBudget2Col, false);

    // set labels
    projListProjWIPTmp.IdLabel         = idLabel;
    projListProjWIPTmp.HeaderLabel     = selectionLabel;
    projListProjWIPTmp.DevianceLabel   = devianceLabel;

    projListProjWIPTmp.GrossLabel      = grossWIPLabel;
    projListProjWIPTmp.OnAccountLabel  = wipInvoiceLabel;
    projListProjWIPTmp.NetLabel        = netWIPLabel;

    // set field visibility
    projListProjWIPTmp.ShowGross      = showGross;
    projListProjWIPTmp.ShowNet        = showNet;
    projListProjWIPTmp.ShowOnAccount  = showOnAccount;

    // set decimals
    projListProjWIPTmp.DecimalAmount  = amountDecimals;
    projListProjWIPTmp.DecimalHourQty = hourQtyDecimals;

    projListProjWIPTmp.insert();
}

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
/// <summary>
///    Determines whether the amounts are equal to 0.
/// </summary>
/// <returns>
///    true if the values are not 0; otherwise, false.
/// </returns>
boolean lineValue()
{
    return ((actualGross != 0)      || (budgetGross != 0)       ||
            (actualOnAccount != 0)  || (budgetOnAccount != 0)   ||
            (actualNet != 0)        || (budgetNet != 0));
}

]]></Source>
			</Method>
			<Method>
				<Name>printEmplItem</Name>
				<Source><![CDATA[
/// <summary>
///    Gets the employee and item records and calls the calculate method.
/// </summary>
void printEmplItem()
{
    ResourceView            resourceLocal;
    InventTable             itemTableLocal;
    SMASubscriptionTable    smaTableLocal;

    if (SysReportRun::changed(qrun,tableNum(ResourceView)))
    {
        resourceLocal   = qrun.get(tableNum(ResourceView));

        resource        = resourceLocal.RecId;
        id              = ResourceFacade::getID(resource);
        name            = ResourceFacade::getName(resource);
        projListIDType  = ProjListIDType::Employee;
    }

    if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)) && SysReportRun::changed(qrun,tableNum(InventTable)))
    {
        itemTableLocal  = qrun.get(tableNum(InventTable));

        id              = itemTableLocal.ItemId;
        name            = itemTableLocal.defaultProductName();
        projListIDType  = ProjListIDType::Item;
    }

    if (isConfigurationkeyEnabled(configurationKeyNum(SMASubscription)) && SysReportRun::changed(qrun,tableNum(SMASubscriptionTable)))
    {
        smaTableLocal   = qrun.get(tableNum(SMASubscriptionTable));

        id              = smaTableLocal.SubscriptionId;
        name            = smaTableLocal.Name;
        projListIDType  = ProjListIDType::Subscription;
    }

    this.calculate();

    if (! skipZero || (this.lineValue()))
    {
        this.insertProjListProjWIPTmp();
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
/// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    This method provides the ability to write the report business logic. This method will be called by
///    SSRS at runtime. The method should compute data and populate the data tables that will be returned
///    to SSRS.
/// </remarks>

public void processReport()
{
    ProjListProjWIPContract contract = this.parmDataContract() as ProjListProjWIPContract;

    timeMaterial = contract.parmTimeMaterial();
    fixedPrice = contract.parmFixedPrice();
    investment = contract.parmInvestment();
    internalCost = contract.parmInternalCost();

    hour = contract.parmHour();
    expenses = contract.parmExpenses();
    item = contract.parmItem();
    revenue = contract.parmRevenue();
    onAcc = contract.parmOnAcc();

    projFromDate = contract.parmProjFromDate();
    projBreakDate = contract.parmProjBreakDate();
    projToDate = contract.parmProjToDate();
    ledgerFromDate = contract.parmLedgerFromDate();
    ledgerBreakDate = contract.parmLedgerBreakDate();
    ledgerToDate = contract.parmLedgerToDate();

    actualVsBudget2Col = contract.parmActualVsBudget2Col();
    forecastModelId = contract.parmForecastModelIdV2();

    skipBlankId = contract.parmSkipBlankId();
    skipZero = contract.parmSkipZero();

    showAmount = contract.parmShowAmount();

    this.initProjListTrans();
    this.setIdLabel();

    [grossWIPLabel, wipInvoiceLabel, netWIPLabel, devianceLabel, selectionLabel] = listProjTrans.setDisplayLabel2Column(showAmount, hour, expenses, item, revenue, onAcc);

    [showOnAccount, showNet, showGross] = listProjTrans.setDisplayFlags2Column(hour, expenses, item, revenue, onAcc);

    [hourQtyDecimals, amountDecimals,
     grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

    actualProjStatement = projStatement::newProjListWIP(
                            listProjTrans,
                            ProjActualBudget::Actual,
                            listProjTransLayout.parmAmountQty()
                            );
    budgetProjStatement = projStatement::newProjListWIP(
                            listProjTrans,
                            ProjActualBudget::Budget,
                            listProjTransLayout.parmAmountQty(),
                            forecastModelId);

    qrun = new QueryRun(this.parmQuery());

    //  print lines with no Id eg. cost and revenue with no Employee
    if (!skipBlankId)
    {
        this.calculateNoId();
        if (this.lineValue())
        {
            this.insertProjListProjWIPTmp();
        }
    }

    while (qrun.next())
    {
        this.printEmplItem();
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>setIdLabel</Name>
				<Source><![CDATA[
/// <summary>
///    Sets the label for the ID.
/// </summary>
private void setIdLabel()
{
    if ((listProjTrans.parmHour() || listProjTrans.parmRevenue() || listProjTrans.parmExpenses()) &&
       !(listProjTrans.parmItem() || listProjTrans.parmOnAcc()))
    {
        idLabel = "@SYS89158";
    }
    else if ((listProjTrans.parmItem() || listProjTrans.parmOnAcc()) &&
       !(listProjTrans.parmExpenses() || listProjTrans.parmHour() || listProjTrans.parmRevenue()))
    {
        idLabel = "@SYS14428";
    }
    else
    {
        idLabel = "@Res:ResourceItem";
    }
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>