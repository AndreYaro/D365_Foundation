<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWaveFormActions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WhsWaveFormActions</c> is the class for all wave form actions.
/// </summary>
public class WhsWaveFormActions
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels work for all selected waves.
    /// </summary>
    /// <param name="_whsWaveTableDS">
    ///    The datasource for the <c>WHSWaveTable</c> table.
    /// </param>
    public static void cancelWork(FormDataSource _whsWaveTableDS)
    {
        WHSWaveTable    waveTable;

        for (waveTable = _whsWaveTableDS.getFirst(true) ? _whsWaveTableDS.getFirst(true) : _whsWaveTableDS.cursor();
            waveTable;
            waveTable = _whsWaveTableDS.getNext())
        {
            WHSWorkTable::cancelWorkForWorkBuildId(waveTable.WorkBuildId);
        }

        _whsWaveTableDS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes all selected kanban waves.
    /// </summary>
    /// <param name="_whsWaveTableDS">
    ///    The <c>WHSWaveTable</c> form datasource.
    /// </param>
    public static void execute(FormDataSource _whsWaveTableDS)
    {
        List            waveRecIdList = new List(Types::Int64);
        BatchCaption    batchCaptionExecute;
        Set             batchSetExecute = new Set(Types::Class);

        for (WHSWaveTable waveTableLocal = _whsWaveTableDS.getFirst(true) ? _whsWaveTableDS.getFirst(true) : _whsWaveTableDS.cursor();
            waveTableLocal;
            waveTableLocal = _whsWaveTableDS.getNext())
        {
            WHSWaveTable waveTable = WHSWaveTable::find(waveTableLocal.WaveId, true);
            if (waveTable.canProcessInBatch())
            {
                batchSetExecute.add(WHSWaveExecute::newInstance(waveTable));

                info(strFmt("@WAX2610", waveTable.WaveId));

                // Create caption for batch job
                if (batchCaptionExecute)
                {
                    batchCaptionExecute += ", " + waveTable.WaveId;
                }
                else
                {
                    batchCaptionExecute = strFmt("@WAX3167", waveTable.WaveId);
                }

                waveRecIdList.addEnd(waveTable.RecId);
            }
            else
            {
                using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(waveTable, '', classStr(WhsWaveFormActions)+funcName()+'Single'))
                {
                    WHSPostEngine::post(waveTable);
                }
            }
        }

        if (!batchSetExecute.empty())
        {
            RefRecId batchRecId = WHSParameters::createBatchJob(batchSetExecute, batchCaptionExecute);
            WHSWaveTableBatch::createBatchRelationship(waveRecIdList, batchRecId);
        }

        _whsWaveTableDS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openCreateWorkHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the create work history form.
    /// </summary>
    /// <param name="_whsWaveTable">
    ///    The <c>WHSWaveTavle</c> table record that is passed to the form.
    /// </param>
    public static void openCreateWorkHistory(WHSWaveTable _whsWaveTable)
    {
        FormRun     formRun;
        Args        args;

        args = new Args();
        args.name(formStr(WHSWorkCreateHistory));
        args.record(_whsWaveTable);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPickList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the picking list.
    /// </summary>
    /// <param name="_waveTableDataSource">
    ///    The <c>WHSWaveTable</c> datasource.
    /// </param>
    public static void printPickList(FormDataSource _waveTableDataSource)
    {
        WHSWaveTable rec;

        for (rec = _waveTableDataSource.getFirst(true) ? _waveTableDataSource.getFirst(true) : _waveTableDataSource.cursor();
             rec;
             rec = _waveTableDataSource.getNext())
        {
            if (rec.canPrintPickList())
            {
                Args args = WhsWaveFormActions::buildPickListReportArgs(rec);

                WHSPickListShippingController srsReportRun = new WHSPickListShippingController();
                srsReportRun.parmReportName(args.name());
                srsReportRun.parmArgs(args);
                srsReportRun.parmShowDialog(false);
                srsReportRun.startOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPickListReportArgs</Name>
				<Source><![CDATA[
    private static Args buildPickListReportArgs(WHSWaveTable _whsWaveTable)
    {
        WHSWorkTransType workTransType = WHSWaveTable::getWorkTransType(_whsWaveTable.WaveId);

        SRSCatalogItemName  reportName      = WhsWaveFormActions::pickListReportName(workTransType);
        MenuItemName        menuItemName    = WhsWaveFormActions::pickListMenuItemName(workTransType);

        Args args = new Args(reportName);
        args.record(_whsWaveTable);
        args.menuItemName(menuItemName);
        args.menuItemType(MenuItemType::Output);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickListReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the picking list report name.
    /// </summary>
    /// <param name = "_workTransType">The work type from the template of the wave.</param>
    /// <returns>The picking list report name.</returns>
    protected static SRSCatalogItemName pickListReportName(WHSWorkTransType _workTransType)
    {
        switch (_workTransType)
        {
            case WHSWorkTransType::ProdPick:
                return ssrsReportStr(WHSPickListProduction, Report);
            
            default:
                return ssrsReportStr(WHSPickListShipping, Report);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickListMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the picking list menu item name.
    /// </summary>
    /// <param name = "_workTransType">The work type from the template of the wave.</param>
    /// <returns>The picking list menu item name.</returns>
    protected static MenuItemName pickListMenuItemName(WHSWorkTransType _workTransType)
    {
        switch (_workTransType)
        {
            case WHSWorkTransType::ProdPick:
                return menuItemOutputStr(WHSPickListProduction);

            default:
                return menuItemOutputStr(WHSPickListShipping);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases all selected waves.
    /// </summary>
    /// <param name="_whsWaveTableDS">
    ///    The datasource for the <c>WHSWaveTable</c> table.
    /// </param>
    public static void releaseWave(FormDataSource _whsWaveTableDS)
    {
        WHSWaveTable    waveTable;

        for (waveTable = _whsWaveTableDS.getFirst(true) ? _whsWaveTableDS.getFirst(true) : _whsWaveTableDS.cursor();
            waveTable;
            waveTable = _whsWaveTableDS.getNext())
        {
            if (WhsWaveFormActions::canReleaseWave(waveTable))
            {
                WHSWaveTable::releaseWave(waveTable.WaveId);
            }
        }

        _whsWaveTableDS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReleaseWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a wave can be released.
    /// </summary>
    /// <param name = "_waveTable">The wave to release.</param>
    /// <returns>true if the wave can be released; otherwise, false.</returns>
    protected static boolean canReleaseWave(WHSWaveTable _waveTable)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set work lines to be skipped.
    /// </summary>
    /// <param name="_whsWaveTable">
    ///    The <c>WHSWaveTable</c> table that the work lines belong to.
    /// </param>
    public static void skipWorkLines(WHSWaveTable _whsWaveTable)
    {
        _whsWaveTable.skipWorkLines();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>