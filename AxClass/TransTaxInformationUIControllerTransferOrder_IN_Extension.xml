<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransTaxInformationUIControllerTransferOrder_IN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UI controller class for controlling all Transfer Order on new tax information UI and transaction update.
/// </summary>
[ExtensionOf(classstr(TransTaxInformationUIControllerTransferOrder))]
final class TransTaxInformationUIControllerTransferOrder_IN_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform relevant logics when switch to other tax information transaction.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The tax information transaction.
    /// </param>
    public void selectionChanged(TransTaxInformation _transTaxInformation)
    {
        next selectionChanged(_transTaxInformation);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.initExciseRecordType();
            transTaxInformationGSTCtrl.parmNonBusinessUsagePercent().visible(!(this.isFromWarehouse() || this.isNormal()));
            transTaxInformationGSTCtrl.parmServiceCategory().visible(!(this.isFromWarehouse() || this.isNormal()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToExciseCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set enabled or disabled to all Excise controls on Tax information form.
    /// </summary>
    protected void setEnabledToExciseCtrls()
    {
        next setEnabledToExciseCtrls();

        transTaxInformationExciseCtrl.parmDirectSettlement().enabled(
            TaxExciseTypeController_IN::isDirectSettlementAllowed(
                transTaxInformation.ExciseType,
                transTaxInformation.ExciseRecordType,
                this.getTaxDirection()));

        transTaxInformationExciseCtrl.parmDSA().enabled(
            TaxExciseTypeController_IN::isDSAAllowed(
                transTaxInformation.ExciseType,
                transTaxInformation.ExciseRecordType,
                this.parmTaxModelTaxable().getItemId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToExciseCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all excise tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToExciseCtrls()
    {
        next setVisibleToExciseCtrls();
        transTaxInformationExciseCtrl.parmConsignment().visible(false);
        transTaxInformationExciseCtrl.parmCENVATCreditAvailed().visible(false);
        transTaxInformationExciseCtrl.parmIsScrap().visible(false);
        transTaxInformationExciseCtrl.parmDisposalType().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToServiceTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all service tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToServiceTaxCtrls()
    {
        next setVisibleToServiceTaxCtrls();
        transTaxInformationServiceTaxCtrl.parmServiceTaxTab().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToVATCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all VAT tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToVATCtrls()
    {
        next setVisibleToVATCtrls();
        transTaxInformationVATCtrl.parmVatGoodsTypeComboBox().visible(false);
        transTaxInformationVATCtrl.parmVatCommodityCodeStrCtrl().visible(false);
        transTaxInformationVATCtrl.parmNonRecoverablePercentRealCtrl().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToCustomsCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all customer tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToCustomsCtrls()
    {
        next setVisibleToCustomsCtrls();
        transTaxInformationCustomsCtrl.parmCustomsTab().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToWithholdTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all withholding tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToWithholdTaxCtrls()
    {
        next setVisibleToWithholdTaxCtrls();
        transTaxInformationTaxWithholdingCtrl.parmTaxWithholdingTab().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedExciseField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform relevant logics after modify excise field.
    /// </summary>
    protected void modifiedExciseField()
    {
        TransTaxInformationHelper::updateExciseDSA(transTaxInformation, this.parmTaxModelTaxable().getItemId());
        TransTaxInformationHelper::updateExciseDirectSettlement(transTaxInformation, this.getTaxDirection());

        next modifiedExciseField();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>