<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplVoucher_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EmplVoucher_RU
{
    LedgerVoucher           ledgerVoucher;
    LedgerJournalTrans      ledgerJournalTrans;

    RecId                   emplRecordId;
    EmplAccount_RU          accountNum;
    CurrencyCode            currencyCode;
    ExchRate                exchRate;
    ExchRate                exchRateSecondary;
    NoYes                   triangulation;
    AmountCur               amount;
    DimensionDefault        defaultDimension;
    LedgerTransTxt          transTxtType;
    PostingProfile          postingProfile;
    LedgerPostingType       posting;
    TransDate               transactionDate;

    EmplAdvanceId_RU        advanceId;

    TransTxt                txt;

    EmplTransSourceType_RU  sourceType;
    RefRecId                refRecId;
    RefTableId              refTableId;

    Common                  sourceTable;
    boolean                 skipAdvanceTableUpdate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean ret = true;

        ret = this.checkSettlement()    && ret;
        ret = this.checkOpenBalance()   && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOpenBalance</Name>
				<Source><![CDATA[
    private boolean checkOpenBalance()
    {
        EmplBalance_RU  emplBalance;
        boolean         ret = true;

        if (EmplParameters_RU::find().AllowDebitOpenBalance || amount < 0)
            return ret;

        emplBalance = new EmplBalanceMST_RU(transactionDate);
        emplBalance.calc(accountNum);
        if (emplBalance.amountMST() > 0.0)
        {
            ret = checkFailed(strfmt("@GLS104707", accountNum, transactionDate));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    private boolean checkParameters()
    {
        boolean ok = true;

        if (!ledgerVoucher)
        {
            ok = checkFailed("@SYS19386");
        }

        if (!EmployeeTable_RU::checkExist(EmployeeTable_RU::findByEmployeeId(accountNum).RecId))
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSettlement</Name>
				<Source><![CDATA[
    private boolean checkSettlement()
    {
        EmplTrans_RU        emplTrans;
        EmplSettlement_RU   emplSettlement;

        select firstonly RecId from emplSettlement
            where emplSettlement.TransDate > transactionDate
            exists join emplTrans
                where emplTrans.EmplAccount == accountNum                &&
                      (emplTrans.RecId      == emplSettlement.DebitRecId ||
                      emplTrans.RecId       == emplSettlement.CreditRecId);

        if (emplSettlement.RecId)
        {
            return checkFailed(strfmt("@GLS109139", transactionDate));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        ledgerJournalTrans  = _ledgerJournalTrans;

        exchRate            = ledgerJournalTrans.ExchRate;
        exchRateSecondary   = ledgerJournalTrans.ExchRateSecond;
        txt                 = ledgerJournalTrans.Txt;
        triangulation       = ledgerJournalTrans.Triangulation;
        transactionDate     = ledgerJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(LedgerVoucher     _ledgerVoucher,
                    EmplAccount_RU    _accountNum,
                    AmountCur         _amount,
                    CurrencyCode      _currencyCode,
                    LedgerTransTxt    _transTxtType,
                    DimensionDefault  _defaultDimension,
                    PostingProfile    _postingProfile = '',
                    TransTxt          _txt            = '',
                    LedgerPostingType _posting        =  LedgerPostingType::EmplBalance_RU)
    {
        ledgerVoucher    = _ledgerVoucher;

        accountNum       = _accountNum;
        currencyCode     = _currencyCode;
        amount           = _amount;
        defaultDimension = _defaultDimension;
        transTxtType     = _transTxtType;
        postingProfile   = _postingProfile;
        posting          = _posting;
        txt              = _txt;

        transactionDate  = ledgerVoucher                                           ?
                           ledgerVoucher.findLedgerVoucherObject().parmTransDate() :
                           dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplRecId</Name>
				<Source><![CDATA[
    public RefRecId parmEmplRecId(RefRecId _emplRecId = emplRecordId)
    {
        emplRecordId = _emplRecId;

        return emplRecordId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipAdvanceTableUpdate</Name>
				<Source><![CDATA[
    public boolean parmSkipAdvanceTableUpdate(boolean _value = skipAdvanceTableUpdate)
    {
        skipAdvanceTableUpdate = _value;
        return skipAdvanceTableUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(EmplTrans_RU   _emplTrans,
                     NoYes          _approval          = NoYes::No,
                     UnknownNoYes   _euroTriangulation = Currency::noYes2UnknownNoYes(triangulation),
                     NoYes          _createLedgerTrans = NoYes::Yes,
                     Qty            _qty               = 0,
                     ExchRate       _exchRate          = exchRate,
                     ExchRate       _exchRateSecondary = exchRateSecondary)
    {
        EmplTrans_RU                  emplTrans = _emplTrans;
        LedgerDimensionDefaultAccount defaultAccount;
        LedgerVoucherTransObject      ledgerVoucherTransObject;
        CurrencyExchangeHelper        exchangeRateHelper;

        if (! this.check() || ! this.checkParameters())
            throw error("@SYS18447");

        if (! amount)
            return;

        ttsbegin;

        emplTrans.EmplAccount       = accountNum;
        emplTrans.TransType         = sourceType;
        emplTrans.RefRecId          = refRecId;
        emplTrans.RefTableId        = refTableId;
        emplTrans.AdvanceId         = advanceId;
        defaultAccount              = this.summaryLedgerDimension();

        if (_createLedgerTrans)
        {
            exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                         ledgerVoucher.findLedgerVoucherObject().parmAccountingDate());
            exchangeRateHelper.parmExchangeRate1(_exchRate);
            exchangeRateHelper.parmExchangeRate2(_exchRateSecondary);
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucher.findLedgerVoucherObject(),
                                                                                                     posting,
                                                                                                     LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, defaultDimension),
                                                                                                     currencyCode,
                                                                                                     amount,
                                                                                                     exchangeRateHelper);
            ledgerVoucherTransObject.parmSourceTableId(emplTrans.TableId);
            ledgerVoucherTransObject.parmSourceRecId(emplTrans.RecId);
            ledgerVoucherTransObject.parmQty(_qty);

            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }

        if (_approval == NoYes::Yes)
        {
            ttscommit;
            return;
        }

        emplTrans.Txt = this.setTransactionTxt(CompanyInfo::languageId());

        if (! emplTrans.Txt)
        {
            emplTrans.Txt     = txt;
        }

        emplTrans.AmountCur       = amount;
        emplTrans.TransType       = sourceType;
        if (ledgerVoucher && ledgerVoucher.findLedgerVoucherObject())
        {
            emplTrans.Correct     = ledgerVoucher.findLedgerVoucherObject().parmIsCorrectionDefault();
        }

        if (ledgerJournalTrans)
        {
            emplTrans.PostingProfile   = ledgerJournalTrans.PostingProfile;
            emplTrans.CurrencyCode     = ledgerJournalTrans.CurrencyCode;
            emplTrans.Voucher          = ledgerJournalTrans.Voucher;
            emplTrans.TransDate        = ledgerJournalTrans.TransDate;
            emplTrans.LedgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, ledgerJournalTrans.DefaultDimension);
            emplTrans.AmountMST        = ledgerJournalTrans.calcAmountMST();
        }
        else
        {
            emplTrans.PostingProfile   = postingProfile;
            emplTrans.CurrencyCode     = currencyCode;
            emplTrans.Voucher          = ledgerVoucher.lastVoucher();
            emplTrans.TransDate        = ledgerVoucher.lastTransDate();
            emplTrans.LedgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, defaultDimension);

            if (_createLedgerTrans)
            {
                emplTrans.AmountMST = ledgerVoucher.lastAmountMST();
            }
            else
            {
                emplTrans.AmountMST = CurrencyExchangeHelper::amountCur2MST(amount, currencyCode, _exchRate, emplTrans.TransDate, _exchRateSecondary, Currency::unknownNoYes2Noyes(_euroTriangulation, currencyCode, emplTrans.TransDate));
            }
        }

        emplTrans.insert();

        this.settleTransaction();

        ttscommit;

        this.parmEmplRecId(emplTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceTable</Name>
				<Source><![CDATA[
    public void setSourceTable(Common _source)
    {
        EmplAdvLine_RU  advLine;
        VendTrans       vendTrans;
        VendTrans_W     vendTrans_W;

        switch (_source.TableId)
        {
            case tablenum(EmplAdvLine_RU) :
                sourceType  = EmplTransSourceType_RU::AdvLine;
                advLine     = _source;
                advanceId   = advLine.AdvanceId;
                break;

            case tablenum(VendTrans) :
                vendTrans = _source;
                vendTrans_W = vendTrans.vendTrans_W();
                if (vendTrans_W.EmplAccount_RU)
                {
                    sourceType  = EmplTransSourceType_RU::VendInvoice;
                }
                else
                {
                    sourceType  = EmplTransSourceType_RU::AccountPayable;
                }
                break;

            case tablenum(RCashTrans) :
                sourceType  = EmplTransSourceType_RU::CashDoc;
                break;

            case tablenum(BankAccountTrans) :
                sourceType  = EmplTransSourceType_RU::Bank;
                break;

            case tablenum(RPayTrans) :
                sourceType  = EmplTransSourceType_RU::Payroll;
                break;

            default :
                sourceType  = EmplTransSourceType_RU::Unknown;
        }

        refRecId    = _source.RecId;
        refTableId  = _source.TableId;
        sourceTable = _source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransaction</Name>
				<Source><![CDATA[
    private void settleTransaction()
    {
        EmplSettlePeriodic_RU    emplSettle;

        if (EmplParameters_RU::find().AutoSettle)
        {
            emplSettle = new EmplSettlePeriodic_RU(transactionDate);
            emplSettle.parmEmplVoucher(this);
            emplSettle.parmSkipAdvanceTableUpdate(this.parmSkipAdvanceTableUpdate());
            emplSettle.settleNow(accountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionTxt</Name>
				<Source><![CDATA[
    private Name setTransactionTxt(LanguageId _languageId)
    {
        TransactionTxt transactionTxt;

        transactionTxt = TransactionTxt::construct(transTxtType, _languageId);

        transactionTxt.setVoucher(ledgerVoucher.lastVoucher());
        transactionTxt.setDate(ledgerVoucher.lastTransDate());
        transactionTxt.setFormLetter("");
        transactionTxt.setKey1(accountNum);
        transactionTxt.setKey2(advanceId);
        transactionTxt.setKey3(enum2str(sourceType));

        return transactionTxt.txt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    public Common sourceTable()
    {
        return sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount summaryLedgerDimension()
    {
        return EmplLedgerAccounts_RU::summaryLedgerDimension(accountNum, postingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEmplVoucherJournal</Name>
				<Source><![CDATA[
    public static EmplVoucher_RU newEmplVoucherJournal(LedgerVoucher      _ledgerVoucher,
                                                       LedgerJournalTrans _ledgerJournalTrans,
                                                       AmountCur          _amountCur,
                                                       LedgerTransTxt     _ledgerTransTxt = LedgerTransTxt::None)
    {
        EmplVoucher_RU emplVoucher;

        emplVoucher = new EmplVoucher_RU(_ledgerVoucher,
                                         _ledgerJournalTrans.parmAccount(),
                                         _ledgerJournalTrans.amount() + _amountCur,
                                         _ledgerJournalTrans.CurrencyCode,
                                         _ledgerTransTxt,
                                         _ledgerJournalTrans.DefaultDimension,
                                         _ledgerJournalTrans.PostingProfile);

        emplVoucher.initFromLedgerJournalTrans(_ledgerJournalTrans);

        return emplVoucher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>