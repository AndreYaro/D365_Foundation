<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalGTDCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalGTDCreate_RU extends CustomJournalGTDOperation_RU
{
    NoYesId     doPost;
    DialogField fieldDoPost;

    private NoYesId     skipWorkTransExistCheck;
    private DialogField fieldSkipWorkTransExistCheck;

    private UnknownNoYes whsEnabled;

    boolean     dontContinue;
    private CustomJournalImportGTDIssueWorkCreate_RU gtdTransfer;

    private const int currentVersion = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if Custom journal contains items applicable for WHS processing.
    /// </summary>
    /// <returns>true if Custom journal contains items applicable for WHS processing; otherwise, false.</returns>
    protected boolean isWHSEnabled()
    {
        if (whsEnabled == UnknownNoYes::Unknown)
        {
            whsEnabled = UnknownNoYes::No;

            if (FeatureStateProvider::isFeatureEnabled(CustomJournalImportGTDIssueWorkSupportFeature_RU::instance()) &&
                customJournalTable.CustomJournalType == CustomJournalType_RU::Import &&
                customJournalTable.CustomInventTransStatus == CustomInventTransStatus_RU::Purchased &&
                isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
            {
                CustomJournalTrans_RU jourTrans;
                WHSInventEnabled      wHSInventEnabled;

                select firstonly RecId from jourTrans
                    where jourTrans.CustomJournalId == customJournalTable.CustomJournalId
                    exists join WHSInventEnabled
                        where WHSInventEnabled.ItemId == jourTrans.ItemId;

                if (jourTrans)
                {
                    whsEnabled = UnknownNoYes::Yes;
                }
            }

        }
        return whsEnabled == UnknownNoYes::Yes ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkinventInterUnit</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkinventInterUnit(ItemId   _itemId)
    {
        InventTable inventTable;
        boolean     ret = true;

        inventTable = InventTable::find(_itemId);

        if (! InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::InventInterUnitReceivable, inventTable)))
        {
            ret = checkFailed(strfmt("@GLS115438", inventTable.itemName()));
        }

        if (! InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::InventInterUnitPayable, inventTable)))
        {
            ret = checkFailed(strfmt("@GLS115439", inventTable.itemName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <param name="_inventTable">An item.</param>
    /// <returns>The built parameter instance.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(
        InventAccountType   _inventAccountType,
        InventTable         _inventTable)
    {
        return InventPostingItemLedgerDimensionParameters::newFromParameters(
                                                            _inventAccountType,
                                                            '',
                                                            _inventTable.ItemGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLines</Name>
				<Source><![CDATA[
    protected boolean checkLines()
    {
        boolean                       ret = true;
        CustomJournalTrans_RU         customJournalTrans;
        SalesLine                     salesLine;
        PurchLine                     purchLine;
        UnitOfMeasureSymbol           unitIdInvent;

        EcoResTrackingDimensionGroup  ecoResTrackingDimensionGroup;
        InventDimGroupFieldSetup      inventDimGroupFieldSetup;
        Set                           dimGroup = new Set(Types::String);
        str                           tmpStr;

        Qty salesLineAvailableQty(salesLine _salesLine)
        {
            InventTransOrigin   inventTransOrigin;
            InventTrans         inventTrans, inventTransDelivery;

            if (_salesLine.hasInventTransGoodsInRoute_RU())
            {
                select firstOnly Qty from inventTransDelivery
                where  inventTransDelivery.GroupRefType_RU == InventTransGroupRefType_RU::CustomJournalGIT
                   &&  inventTransDelivery.GroupRefId_RU == customJournalTable.CustomJournalId
                   && (inventTransDelivery.StatusIssue == StatusIssue::Deducted
                   ||  inventTransDelivery.StatusIssue == StatusIssue::Sold)
                   &&  inventTransDelivery.ReturnInventTransOrigin == 0
                join InventTransOrigin from inventTrans
                where inventTrans.InventTransOriginDelivery_RU == inventTransDelivery.InventTransOrigin
                exists join inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                   && inventTransOrigin.InventTransId == _salesLine.InventTransId;

                return -inventTransDelivery.Qty;
            }

            select firstonly Qty from inventTrans
            where  inventTrans.GroupRefType_RU == InventTransGroupRefType_RU::CustomJournalStd
                &&  inventTrans.GroupRefId_RU == customJournalTable.CustomJournalId
                && inventTrans.StatusReceipt == StatusReceipt::None
                && (inventTrans.StatusIssue == StatusIssue::Deducted
                ||  inventTrans.StatusIssue == StatusIssue::Sold)
                &&  inventTrans.ReturnInventTransOrigin == 0
            exists join inventTransOrigin
            where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                && inventTransOrigin.InventTransId == _salesLine.InventTransId;

            return -inventTrans.Qty;
        }

        if (! CustomJournalTrans_RU::countLines(customJournalTable.CustomJournalId))
        {
            return checkFailed("@GLS115304");
        }

        while select * from customJournalTrans
            where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
        {
            setprefix(strfmt("@GLS115305", customJournalTrans.LineNum, customJournalTrans.feaccId));

            if (! customJournalTrans.CountryRegionId)
            {
                ret = checkFailed(strfmt("@SYS84378", fieldid2pname(tablenum(CustomJournalTrans_RU), fieldnum(CustomJournalTrans_RU, CountryRegionId))));
            }

            if (!customJournalTable.CanceledInventGTDId
             && (InventGTD_RU::exist(customJournalTrans.ItemId, inventGTDId)
              && CustomJournalTable_RU::gtdExistExceptForJournal(inventGTDId, customJournalTable.CustomJournalId)))
            {
                ret = checkFailed(strfmt("@GLS115307", inventGTDId, customJournalTrans.ItemId));
            }
            switch (customJournalTable.CustomJournalType)
            {
                case CustomJournalType_RU::Import:
                    purchLine     = PurchLine::findInventTransId(customJournalTrans.SalesPurchInventTransId);
                    unitIdInvent  = InventTableModule::find(purchLine.ItemId, ModuleInventPurchSales::Invent).UnitId;

                    if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
																									  purchLine.InventDimId,
																									  purchLine.PurchUnit,
																									  customJournalTrans.UnitId))
                    {
                        ret = checkFailed(strfmt("@SYS50546", purchLine.PurchUnit, customJournalTrans.UnitId));
                    }

                    if (customJournalTable.CustomInventTransStatus == CustomInventTransStatus_RU::Ordered)
                    {
                        if (! purchLine || (InventTable::unitConvert(purchLine.ItemId, 
                                                                     purchLine.PurchUnit, 
                                                                     customJournalTrans.UnitId, 
                                                                     unitIdInvent, 
                                                                     purchLine.RemainPurchPhysical,
                                                                     purchLine.InventDimId) < customJournalTrans.Qty))
                        {
                            ret = checkFailed(strfmt("@GLS115308"));
                        }
                    }

                    if (customJournalTrans.InvoiceId && customJournalTable.PlanArrivalDate < customJournalTrans.InvoiceDate)
                    {
                        ret = checkFailed(strfmt("@GLS115309", customJournalTrans.ItemId));
                    }
                    break;

                case CustomJournalType_RU::Export:
                    salesLine     = SalesLine::findInventTransId(customJournalTrans.SalesPurchInventTransId);
                    unitIdInvent  = InventTableModule::find(salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId;

                    if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
																								      salesLine.InventDimId,
																									  salesLine.SalesUnit,
																									  customJournalTrans.UnitId))
                    {
                        ret = checkFailed(strfmt("@SYS50546", salesLine.SalesUnit, customJournalTrans.UnitId));
                    }
                    else
                    {
                        if (! salesLine || (salesLineAvailableQty(salesLine) < customJournalTrans.Qty))
                        {
                            ret = checkFailed(strfmt("@GLS115311"));
                        }
                    }
                    break;
            }

            if (InventTransOrigin::existMarked_RU(InventTransOrigin::findByInventTransId(customJournalTrans.SalesPurchInventTransId).RecId))
            {
                ret = checkFailed(strfmt("@GLS115312", customJournalTrans.SalesPurchInventTransId));
            }

            inventDimGroupFieldSetup     = EcoResDimensionGroupSetup::getFieldSetupForItem(customJournalTrans.ItemId, fieldnum(InventDim, InventProfileId_RU));
            ecoResTrackingDimensionGroup = EcoResTrackingDimensionGroup::find(InventTable::find(customJournalTrans.ItemId).trackingDimensionGroup());

            if (customJournalTable.CustomJournalType == CustomJournalType_RU::Import                                            &&
                customJournalTable.inventProfileId   != inventDim::find(customJournalTrans.InventDimId).InventProfileId_RU      &&
                inventDimGroupFieldSetup.isActive()                                                                             &&
                inventDimGroupFieldSetup.isInheritInventTransfer_RU()                                                           &&
                DlvTerm::find(customJournalTable.DlvTermId).CustomInventTransStatus_RU == CustomInventTransStatus_RU::Purchased &&
                !dimGroup.in(ecoResTrackingDimensionGroup.Name))
            {
                tmpStr += tmpStr ? ' ' : tmpStr + ecoResTrackingDimensionGroup.Name;
                dimGroup.add(ecoResTrackingDimensionGroup.Name);
            }
        }

        if (!dimGroup.empty() && customJournalTable.InventProfileId)
        {
            if (Box::yesNo(strfmt("@GLS115948", tmpStr, "@SYS13891"), DialogButton::Yes) == DialogButton::No)
            {
                ret = checkFailed("@SYS70800");
                dontContinue = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventJournalTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates inventory transfer journal for the source <c>InventTrans</c> specified.
    /// </summary>
    /// <param name="_common">
    /// A source record to create journal for; <c>InventTrans</c>.
    /// </param>
    /// <param name="_toInventGtdId">
    /// The destination GTD number.
    /// </param>
    /// <param name="_toInventLocationId">
    /// The destination inventory location ID (Warehouse).
    /// </param>
    /// <param name="_inventProfileId">
    /// Inventory profile ID.
    /// </param>
    /// <param name="_qty">
    /// Inventory quantity.
    /// </param>
    /// <param name="_dimension">
    /// Default dimension.
    /// </param>
    /// <param name="_pdsCWQty">
    /// Catch-weight quantity; optional.
    /// </param>
    /// <returns>
    /// Inventory Lot ID.
    /// </returns>
    /// <remarks>
    /// The <paramref name="_common"/> must be <c>InventTrans</c> record.
    /// </remarks>
    protected InventTransId createInventJournalTransfer(Common              _common,
                                                        InventGTDId_RU      _toInventGtdId,
                                                        InventLocationId    _toInventLocationId,
                                                        InventProfileId_RU  _inventProfileId,
                                                        Qty                 _qty = 0,
                                                        DimensionDefault    _dimension = 0,
                                                        PdsCWInventQty      _pdsCWQty = 0)
    {
        InventJournalTrans  inventJournalTrans;
        InventTrans         inventTrans = _common;
        InventDim           toInventDim;
        JournalTransData    journalTransData;

        inventJournalTrans.initValue();
        inventJournalTrans.initFromInventJournalTable(this.inventJournalTable());
        inventJournalTrans.initFromInventTrans_RU(inventTrans);
        inventJournalTrans.DefaultDimension =  inventJournalTrans.copyDimension(_dimension);
        inventJournalTrans.Qty           = _qty ? _qty : inventTrans.Qty;
        inventJournalTrans.PdsCWQty      = _pdsCWQty ? _pdsCWQty : inventTrans.PdsCWQty;
        toInventDim                      = inventTrans.inventDim();
        toInventDim.InventGtdId_RU       = _toInventGtdId;
        toInventDim.InventLocationId     = _toInventLocationId;
        toInventDim.InventSiteId         = InventLocation::find(_toInventLocationId).InventSiteId;
        if (_inventProfileId)
        {
            toInventDim.InventProfileId_RU   = _inventProfileId;
        }

        inventJournalTrans.ToInventDimId = InventDim::findOrCreate(toInventDim).InventDimId;
        inventJournalTrans.TransDate     = customJournalTable.PlanArrivalDate;
        inventJournalTrans.LineNum       = InventJournalTrans::lastLineNum(inventJournalTrans.JournalId) + 1;

        journalTransData = JournalTransData::newTransTableLineNum(inventJournalTrans, this.inventJournalTable(), inventJournalTrans.LineNum);
        journalTransData.create(false, true);

        return inventJournalTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase    dialog;

        dialog = super();

        dialog.caption("@GLS115082");

        fieldDoPost         = dialog.addFieldValue(extendedTypeStr(NoYesId), doPost, "@GLS103583");
        fieldChangeLocation = dialog.addFieldValue(extendedTypeStr(NoYesId), changeLocation, "@GLS115361");
        if (customJournalTable.CustomJournalType == CustomJournalType_RU::Export ||
            this.isWHSEnabled() ||
            (customJournalTable.CustomJournalType == CustomJournalType_RU::Import &&
            customJournalTable.CustomInventTransStatus == CustomInventTransStatus_RU::Ordered))
        {
            fieldChangeLocation.value(NoYes::No);
            fieldChangeLocation.enabled(false);
        }

        fieldSkipWorkTransExistCheck = dialog.addFieldValue(extendedTypeStr(NoYesId), false, "@Inventory_Localization:SkipNotFoundEnoughWorkTransactionsForTargetGTDError");

        if (!this.isWHSEnabled())
        {
            fieldSkipWorkTransExistCheck.visible(false);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            doPost = fieldDoPost.value();
            changeLocation = fieldChangeLocation.value();
            skipWorkTransExistCheck = fieldSkipWorkTransExistCheck.value();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTable</Name>
				<Source><![CDATA[
    protected InventJournalTable inventJournalTable()
    {
        InventJournalName inventJournalName;

        if (inventJournalTable)
            return inventJournalTable;

        inventJournalName = InventJournalName::find(InventParameters::find().TransferJournalNameId);

        if (!inventJournalName)
        {
            throw error(strfmt("@GLS115420", InventParameters::find().TransferJournalNameId));
        }

        inventJournalTable.initValue();
        inventJournalTable.initFromInventJournalName(inventJournalName);

        inventJournalTable.JournalId = NumberSeq::newGetNum(InventParameters::numRefInventJournalId()).num();
        inventJournalTable.Description += strfmt(' ' + "@GLS106007", inventGTDId);
        inventJournalTable.insert();

        return inventJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, doPost, changeLocation, skipWorkTransExistCheck];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGTD</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postGTD()
    {
        CustomJournalPost_RU customJournalPost;

        customJournalPost = CustomJournalPost_RU::construct(customJournalTable.CustomJournalType, CustomDocument_RU::GTD);

        customJournalPost.parmJournalTable(customJournalTable);
        customJournalPost.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        InventGTD_RU              inventGTD;
        CustomJournalTrans_RU     customJournalTrans, customJournalTransUpdate;
        InventTrans               inventTrans, newInventTrans;
        InventDim                 inventDim;
        InventTransOrigin         inventTransOrigin;

        Qty                       splitQty;
        InventQty                 qtyRemain;
        PdsCWInventQty            pdsCWQtyRemain;
        InventTransSplit          inventTransSplit;

        InventProfileId_RU        inventProfileId;
        InventDimGroupFieldSetup  inventDimGroupFieldSetup;

        try
        {
            if (this.isWHSEnabled())
            {
                gtdTransfer = CustomJournalImportGTDIssueWorkCreate_RU::construct(inventGTDId, customJournalTable.customJournalId, skipWorkTransExistCheck);
            }
            
            ttsbegin;

            while select customJournalTrans
                where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
            {
                if (!InventGTD_RU::exist(customJournalTrans.ItemId, inventGTDId))
                {
                    inventGTD.clear();
                    inventGTD.initFromCustomJournalTrans(customJournalTrans);
                    inventGTD.InventGTDId = inventGTDId;
                    inventGTD.insert();
                }

                switch (customJournalTable.CustomInventTransStatus)
                {
                    case CustomInventTransStatus_RU::Purchased  :
                        qtyRemain = customJournalTrans.Qty;
                        pdsCWQtyRemain = customJournalTrans.PdsCWQty;
                        if (qtyRemain)
                        {
                            while select forupdate inventTrans
                                where   ! inventTrans.MarkingRefInventTransOrigin                     &&
                                        inventTrans.InvoiceId     == customJournalTrans.InvoiceId     &&
                                        inventTrans.DateFinancial == customJournalTrans.InvoiceDate   &&
                                        (((inventTrans.StatusIssue == StatusIssue::Deducted ||
                                           inventTrans.StatusIssue == StatusIssue::Sold) && ! inventTrans.StatusReceipt) ||
                                         ((inventTrans.StatusReceipt == StatusReceipt::Received ||
                                           inventTrans.StatusReceipt == StatusReceipt::Purchased) && ! inventTrans.StatusIssue))
                                exists join inventTransOrigin
                                    where inventTransOrigin.recId         == inventTrans.InventTransOrigin &&
                                          inventTransOrigin.InventTransId == customJournalTrans.SalesPurchInventTransId
                            {
                                InventDim origInventDim = inventTrans.inventDim();
                                inventDim.data(origInventDim);
                                inventDim.InventGtdId_RU   = inventGTDId;
                                if (inventTrans.Qty > qtyRemain)
                                {
                                    inventTransSplit = new InventTransSplit();
                                    inventTransSplit.parmSplitQty(sign(inventTrans.Qty) * (abs(inventTrans.Qty) - abs(qtyRemain)));
                                    inventTransSplit.pdsCWParmSplitQty(sign(inventTrans.PdsCWQty) * (abs(inventTrans.PdsCWQty) - abs(pdsCWQtyRemain)));
                                    inventTransSplit.parmInventTrans(inventTrans);
                                    inventTransSplit.runOperation();
                                    inventTrans.reread();
                                }
                                inventTrans.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
                                if (!inventTrans.GroupRefType_RU || !inventTrans.GroupRefId_RU)
                                {
                                    inventTrans.GroupRefType_RU = InventTransGroupRefType_RU::CustomJournalStd;
                                    inventTrans.GroupRefId_RU   = customJournalTable.CustomJournalId;
                                }
                                inventTrans.update();

                                if (gtdTransfer && WHSInventEnabled::exist(inventTrans.ItemId))
                                {
                                    gtdTransfer.createGTDWorkLines(inventTrans, origInventDim);
                                }

                                inventProfileId = this.getTargetInventProfileId(inventTrans);

                                if (changeLocation)
                                {
                                    if ((inventDim.InventLocationId != customJournalTable.CustomLocationId) ||
                                        this.isInventProfileToChange(inventTrans, inventProfileId))
                                    {
                                        if (this.checkinventInterUnit(customJournalTrans.ItemId))
                                        {
                                            newInventTrans = InventTrans::findTransId(this.createInventJournalTransfer(inventTrans,
                                                                                                                       inventGTDId,
                                                                                                                       customJournalTable.CustomLocationId,
                                                                                                                       inventProfileId,
                                                                                                                       inventTrans.Qty,
                                                                                                                       customJournalTrans.DefaultDimension,
                                                                                                                       inventTrans.PdsCWQty), true);
                                        }
                                    }
                                }
                                else
                                {
                                    if (this.isInventProfileToChange(inventTrans, inventProfileId))
                                    {
                                        if (this.checkinventInterUnit(customJournalTrans.ItemId))
                                        {
                                            newInventTrans = InventTrans::findTransId(this.createInventJournalTransfer(inventTrans,
                                                                                                                       inventGTDId,
                                                                                                                       inventDim.InventLocationId,
                                                                                                                       inventProfileId,
                                                                                                                       inventTrans.Qty,
                                                                                                                       customJournalTrans.DefaultDimension,
                                                                                                                       inventTrans.PdsCWQty), true);
                                        }
                                    }
                                }
                                qtyRemain -= inventTrans.Qty;
                                if (qtyRemain <= 0)
                                {
                                    break;
                                }
                            }
                        }
                        break;
                    case CustomInventTransStatus_RU::Ordered, CustomInventTransStatus_RU::Empty      :
                        SalesPurchLine salesPurchLine   = customJournalTrans.salesPurchLine(true);
                        SalesPurchLineInterface salesPurchLineInterface = salesPurchLine.salesPurchLineInterface();
                        inventDim                       = salesPurchLineInterface.inventDim();
                        inventDim.InventGtdId_RU    = inventGTDId;

                        if (salesPurchLineInterface.parmInventQty() > customJournalTrans.Qty)
                        {
                            splitQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(customJournalTrans.ItemId,
																											 customJournalTrans.InventDimId,
																											 customJournalTrans.Qty,
																										     customJournalTrans.UnitId,
																										     salesPurchLineInterface.parmUnitId(),
																										     NoYes::Yes);

                            customJournalTransUpdate = CustomJournalTrans_RU::findRecId(customJournalTrans.RecId, true);

                            switch (salesPurchLine.TableId)
                            {
                                case tablenum(PurchLine) :
                                    salesPurchLine = PLPurchLineSplit::update(salesPurchLine, splitQty, customJournalTrans.PdsCWQty);
                                    break;
                                case tablenum(SalesLine) :
                                    salesPurchLine = SalesLineSplit_RU::update(salesPurchLine, splitQty, customJournalTrans.PdsCWQty);
                                    break;
                            }
                            if (salesPurchLine)
                            {
                                customJournalTransUpdate.SalesPurchInventTransId = salesPurchLine.salesPurchLineInterface().parmInventTransId();
                                customJournalTransUpdate.update();
                            }
                        }
                        if (salesPurchLine.TableId == tablenum(PurchLine))
                        {
                            PurchLine purchLine = salesPurchLine as PurchLine;
                            if (!purchLine)
                            {
                                purchLine = customJournalTrans.salesPurchLine(true);
                            }

                            purchLine.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
                            purchLine.update();
                        }
                        break;
                }
            }

            if (inventJournalTable)
            {
                this.postInventJournalTransfer();
                inventJournalTable.reread();

                if (!inventJournalTable.Posted)
                {
                    throw error("@GLS115446");
                }

                customJournalTable.selectForUpdate(true);
                customJournalTable.reread();
                customJournalTable.TransferInventJournalId = inventJournalTable.JournalId;
            }

            if (!customJournalTable.selectForUpdate())
            {
                customJournalTable.selectForUpdate(true);
                customJournalTable.reread();
            }

            customJournalTable.InventGTDId          = inventGTDId;
            customJournalTable.gtdDate              = gtdDate;
            customJournalTable.CustomJournalStatus  = CustomJournalStatus_RU::Released;
            customJournalTable.CanceledInventGTDId  = NoYes::No;
            customJournalTable.update();

            ttscommit;

            if (doPost)
            {
                this.postGTD();
            }

            this.updateFactureExp();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= retryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetInventProfileId</Name>
				<Source><![CDATA[
    private InventProfileId_RU getTargetInventProfileId(InventTrans _inventTrans)
    {
        InventProfileId_RU       ret;
        InventDimGroupFieldSetup inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(_inventTrans.ItemId, fieldnum(InventDim, InventProfileId_RU));

        if (!inventDimGroupFieldSetup.isActive())
        {
            return ret;
        } 
        else if (inventDimGroupFieldSetup.isInheritInventTransfer_RU())
        {
            ret = _inventTrans.inventDim().InventProfileId_RU;
        }
        else 
        {
            ret = customJournalTable.InventProfileId;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventProfileToChange</Name>
				<Source><![CDATA[
    private boolean isInventProfileToChange(InventTrans _inventTrans, InventProfileId_RU _inventProfileId_RU)
    {
        InventDimGroupFieldSetup inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(_inventTrans.ItemId, fieldnum(InventDim, InventProfileId_RU));
        InventDim                inventDim                = _inventTrans.inventDim();
        boolean                  ret;

        ret = _inventProfileId_RU && inventDim.InventProfileId_RU != _inventProfileId_RU;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean ret;

        switch (version)
        {
            case currentVersion:
                [version, doPost, changeLocation, skipWorkTransExistCheck] = _packedClass;
                ret = true;
                break;
            case 1:
                [version, doPost, changeLocation] = _packedClass;
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFactureExpDate</Name>
				<Source><![CDATA[
    protected void updateFactureExpDate(FactureJour_RU _factureJour)
    {
        if (! _factureJour.ExportDate ||
             (_factureJour.ExportDate != gtdDate &&
              Box::yesNo(strfmt("@GLS115904", _factureJour.FactureExternalId), DialogButton::Yes) == DialogButton::Yes))
        {
            ttsbegin;

            _factureJour.selectForUpdate(true);
            _factureJour.ExportDate = gtdDate;
            _factureJour.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        dontContinue = false;

        ret = super(calledFrom);

        if (!ret && dontContinue)
        {
            calledFrom.close();
        }
        else
        {
            if (changeLocation && !customJournalTable.CustomLocationId)
            {
                ret = checkFailed(strfmt("@GLS115316", fieldid2pname(tablenum(CustomJournalTable_RU),
                                                                    fieldnum(CustomJournalTable_RU, CustomLocationId))));
            }
        }

        ret = ret && 
            (!this.isWHSEnabled() || CustomJournalImportGTDIssueWorkCreate_RU::construct(inventGTDId, customJournalTable.customJournalId, skipWorkTransExistCheck).validate());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Description description()
    {
        return "@GLS115082";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>