<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatalogStateTransitionValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to validate catalog state transition.
/// </summary>
class CatalogStateTransitionValidator
{
    private static readonly int ValidatingExpiryInMinutes = 8 * 60;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canEnableActivateButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to set the state of catalogs.
    /// </summary>
    /// <param name="_catalog">
    /// Record of <c>Catalog</c> table.
    /// </param>
    /// <returns>
    /// Boolean value true if action is successful; else false
    /// </returns>
    public static boolean canEnableActivateButton(Catalog _catalog)
    {
        boolean ret = _catalog.State == CatalogState::Inactive;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableEditButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to enable edit button.
    /// </summary>
    /// <param name="_catalog">
    /// Record of <c>Catalog</c> table.
    /// </param>
    /// <returns>
    /// Boolean value true if action is successful; else false.
    /// </returns>
    public static boolean canEnableEditButton(Catalog _catalog)
    {
        boolean ret = (CatalogStateTransitionValidator::canTransition(_catalog, CatalogState::Draft, true) &&
                      (_catalog.State != CatalogState::Inactive));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableValidationButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to set the state of catalogs.
    /// </summary>
    /// <param name="_catalog">
    /// Record of <c>Catalog</c> table.
    /// </param>
    /// <returns>
    /// Boolean value true if action is successful; else false
    /// </returns>
    public static boolean canEnableValidationButton(Catalog _catalog)
    {
        boolean ret = ((CatalogStateTransitionValidator::canTransition(_catalog, CatalogState::Validating))
                        && ((select firstonly RetailCatalogInternalOrg
                            where RetailCatalogInternalOrg.Catalog == _catalog.RecId).RecId));
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableSetAttributeMetadataButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to set the state of Attribute metadata for catalogs.
    /// </summary>
    /// <param name="_catalog">
    /// Record of <c>Catalog</c> table.
    /// </param>
    /// <returns>
    /// Boolean value true if action is successful; else false
    /// </returns>
    public static boolean canEnableSetAttributeMetadataButton(Catalog _catalog)
    {
        boolean ret = (CatalogStateTransitionValidator::canTransition(_catalog, CatalogState::Validating));
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTransition</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find the transaction permissions.
    /// </summary>
    /// <param name="_catalog">
    /// Record of <c>Catalog</c> table.
    /// </param>
    /// <param name="_toState">
    /// Catalog state.
    /// </param>
    /// <param name="_force">
    /// Boolean value, which is used to validate the transaction.
    /// </param>
    /// <returns>
    /// Boolean value true if action is successful; else false.
    /// </returns>
    public static boolean canTransition(Catalog _catalog, CatalogState _toState, boolean _force = false)
    {
        boolean ret;

        switch (_toState)
        {
            case CatalogState::Draft:
                ret = CatalogStateTransitionValidator::checkToDraft(_catalog, _force);
                break;
            case CatalogState::Approved:
            case CatalogState::Rejected:
                ret = CatalogStateTransitionValidator::checkToApproveOrReject(_catalog);
                break;
            case CatalogState::Published:
                ret = CatalogStateTransitionValidator::checkToPublished(_catalog);
                break;
            case CatalogState::Inactive:
                ret = CatalogStateTransitionValidator::checkToInactive(_catalog);
                break;
            case CatalogState::Deleted:
                ret = CatalogStateTransitionValidator::checkToDeleted(_catalog);
                break;
            case CatalogState::Retracted:
                ret = CatalogStateTransitionValidator::checkToRetracted(_catalog);
                break;
            case CatalogState::Submitted:
                ret = CatalogStateTransitionValidator::checkToSubmit(_catalog);
                break;
            case CatalogState::Validating:
                ret = CatalogStateTransitionValidator::checkToValidating(_catalog);
                break;
            case CatalogState::Validated:
                ret = CatalogStateTransitionValidator::checkToValidated(_catalog);
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canViewValidationReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find the premissions to view validation report.
    /// </summary>
    /// <param name="_catalog">
    /// Record of <c>Catalog</c> table.
    /// </param>
    /// <returns>
    /// Boolean value true if action is successful; else false.
    /// </returns>
    public static boolean canViewValidationReport(Catalog _catalog)
    {
        boolean ret = (_catalog.State == CatalogState::Draft) ||
                      (_catalog.State == CatalogState::Submitted) ||
                      (_catalog.State == CatalogState::Approved) ||
                      (_catalog.State == CatalogState::Rejected) ||
                      (_catalog.State == CatalogState::Published) ||
                      (_catalog.State == CatalogState::Validating) ||
                      (_catalog.State == CatalogState::Validated);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToApproveOrReject</Name>
				<Source><![CDATA[
        private static boolean checkToApproveOrReject(Catalog _catalog)
    {
        boolean ret;

        if (_catalog.State == CatalogState::Submitted)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToDeleted</Name>
				<Source><![CDATA[
        private static boolean checkToDeleted(Catalog _catalog)
    {
        // this is not really a state transition but rather check if the catalog can be deleted.
        boolean ret;

        boolean wasEverPublished = _catalog.PublishedDateTime != DateTimeUtil::minValue();

        if (!wasEverPublished && (_catalog.State == CatalogState::Draft))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToDraft</Name>
				<Source><![CDATA[
        private static boolean checkToDraft(Catalog _catalog, boolean _force)
    {
        boolean ret;

        if (_catalog.State == CatalogState::Submitted ||
            _catalog.State == CatalogState::Approved ||
            _catalog.State == CatalogState::Rejected ||
            _catalog.State == CatalogState::Published ||
            _catalog.State == CatalogState::Expired ||
            _catalog.State == CatalogState::Inactive ||
            _catalog.State == CatalogState::Retracted ||
            _catalog.State == CatalogState::Validated)
        {
            if (_force)
            {
                ret = true;
            }
            else
            {
                ret = false;
            }
        }
        else if (_catalog.State == CatalogState::Draft)
            {
                ret = true;
            }
        else if (_catalog.State == CatalogState::Deleted)
            {
                ret = false;
            }
        else if (_catalog.State == CatalogState::Validating)
            {
                ret = _force && DateTimeUtil::addMinutes(_catalog.ModifiedDateTime, ValidatingExpiryInMinutes) < DateTimeUtil::utcNow();
            }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToInactive</Name>
				<Source><![CDATA[
        private static boolean checkToInactive(Catalog _catalog)
    {
        boolean ret;

        if (_catalog.State == CatalogState::Draft)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToPublished</Name>
				<Source><![CDATA[
        private static boolean checkToPublished(Catalog _catalog)
    {
        boolean ret;

        if (_catalog.State == CatalogState::Approved)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToRetracted</Name>
				<Source><![CDATA[
        private static boolean checkToRetracted(Catalog _catalog)
    {
        // this is not really a state transition but rather check if the catalog can be retracted.
        boolean ret;

        boolean wasEverPublished = _catalog.PublishedDateTime != DateTimeUtil::minValue();

        if (wasEverPublished &&
        (_catalog.State != CatalogState::Deleted) &&
        (_catalog.State != CatalogState::Inactive))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToSubmit</Name>
				<Source><![CDATA[
        private static boolean checkToSubmit(Catalog _catalog)
    {
        boolean ret;

        if (_catalog.State == CatalogState::Validated || _catalog.State == CatalogState::Rejected)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToValidated</Name>
				<Source><![CDATA[
        private static boolean checkToValidated(Catalog _catalog)
    {
        boolean ret;

        if (_catalog.State == CatalogState::Validating)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToValidating</Name>
				<Source><![CDATA[
        private static boolean checkToValidating(Catalog _catalog)
    {
        boolean ret;

        if ((_catalog.State == CatalogState::Draft)
         || (_catalog.State == CatalogState::Validated))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>