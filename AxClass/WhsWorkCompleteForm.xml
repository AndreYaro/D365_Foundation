<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCompleteForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkCompleteForm</c> class contains the business logic of the <c>WhsWorkComplete</c> form.
/// </summary>
class WhsWorkCompleteForm
{
    WHSTmpCompleteWorkTable tmpCompleteWorkTable;
    WHSTmpCompleteWorkLine  tmpCompleteWorkLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buttonComplete_clicked</Name>
				<Source><![CDATA[
	/// <summary>
	/// Manually completes a work line when button is clicked.
	/// </summary>
	/// <param name="_whsUserId">
	/// User id of the user that is completing the work line.
	/// </param>
	/// <param name="_whsTmpCompleteWorkTable">
	/// Work header record.
	/// </param>
	/// <param name="_whsTmpCompleteWorkLine">
	/// Work line record.
	/// </param>
	/// <param name="_manualComplete">
	/// Instance to be used to complete work line.
	/// </param>
    void buttonComplete_clicked(WHSUserId                   _whsUserId,
                                WHSTmpCompleteWorkTable     _whsTmpCompleteWorkTable,
                                WHSTmpCompleteWorkLine      _whsTmpCompleteWorkLine,
                                WHSWorkManualComplete       _manualComplete)
    {
        _manualComplete.executeWork(_whsUserId, _whsTmpCompleteWorkTable, _whsTmpCompleteWorkLine);

        this.deleteTmpWorkTable(_whsTmpCompleteWorkTable);
        this.deleteTmpWorkLine(_whsTmpCompleteWorkLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonValidate_clicked</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether work line is valid when button is clicked.
	/// </summary>
	/// <param name="_whsUserId">
	/// Current user id.
	/// </param>
	/// <param name="_whsTmpCompleteWorkTable">
	/// Work header record.
	/// </param>
	/// <param name="_whsTmpCompleteWorkLine">
	/// Work line record.
	/// </param>
	/// <param name="_manualComplete">
	/// Instance to be used to validate work line.
	/// </param>
	/// <returns>
	/// True if the work line is valid, false otherwise.
	/// </returns>
    boolean buttonValidate_clicked(WHSUserId                _whsUserId,
                                   WHSTmpCompleteWorkTable  _whsTmpCompleteWorkTable,
                                   WHSTmpCompleteWorkLine   _whsTmpCompleteWorkLine,
                                   WHSWorkManualComplete    _manualComplete)
    {
        boolean buttonEnabled;

        if (_manualComplete.validateWork(_whsUserId, _whsTmpCompleteWorkTable, _whsTmpCompleteWorkLine))
        {
            buttonEnabled = true;
        }
        else
        {
            buttonEnabled = false;
        }

        return buttonEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTmpWorkLine</Name>
				<Source><![CDATA[
	/// <summary>
	/// Deletes temporarily created work lines.
	/// </summary>
	/// <param name="_whsTmpCompleteWorkLine">
	/// Work line record.
	/// </param>
    void deleteTmpWorkLine(WHSTmpCompleteWorkLine _whsTmpCompleteWorkLine)
    {
        WHSTmpCompleteWorkLine whsTmpCompleteWorkLine = _whsTmpCompleteWorkLine;

        delete_from whsTmpCompleteWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTmpWorkTable</Name>
				<Source><![CDATA[
	/// <summary>
	/// Deletes temporarily created work header records.
	/// </summary>
	/// <param name="_whsTmpCompleteWorkTable">
	/// Work header record.
	/// </param>
    void deleteTmpWorkTable(WHSTmpCompleteWorkTable _whsTmpCompleteWorkTable)
    {
        WHSTmpCompleteWorkTable whsTmpCompleteWorkTable = _whsTmpCompleteWorkTable;

        delete_from whsTmpCompleteWorkTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableFieldsButton_targetLP</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether to enable or disable Target License Plate field in the form.
	/// </summary>
	/// <param name="_whsTmpCompleteWorkLine">
	/// Work line.
	/// </param>
	/// <param name="_whsTmpCompleteWorkTable">
	/// Work header.
	/// </param>
	/// <returns>
	/// True if the field should be enabled, false otherwise.
	/// </returns>
    boolean enableDisableFieldsButton_targetLP(
        WHSTmpCompleteWorkLine  _whsTmpCompleteWorkLine,
        WHSTmpCompleteWorkTable _whsTmpCompleteWorkTable)
    {
        boolean     licensePlateControlled;
        boolean     fieldEnabled = false;

        licensePlateControlled = WMSLocation::find(_whsTmpCompleteWorkLine.wmsLocationId, _whsTmpCompleteWorkTable.InventLocationId).whsLocationIsLPControlled();

        if (   this.enableTargetLicensePlateForWorkTransType(_whsTmpCompleteWorkTable.WorkTransType)
            && (_whsTmpCompleteWorkLine.WorkStatus     == WHSWorkStatus::Open
            ||  _whsTmpCompleteWorkLine.WorkStatus     == WHSWorkStatus::InProcess)
            &&  _whsTmpCompleteWorkLine.WorkType       == WHSWorkType::Pick
            && !_whsTmpCompleteWorkLine.isPutBefore()
            && (!_whsTmpCompleteWorkLine.GenerateLP
            ||  licensePlateControlled))
        {
            fieldEnabled = true;
        }

        return fieldEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableFieldsButton_whsGenerateLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to enable or disable Generate LP field in the form.
    /// </summary>
    /// <param name="_tmpCompleteWorkLine">
    /// Work line.
    /// </param>
    /// <param name="_tmpCompleteWorkTable">
    /// Work header.
    /// </param>
    /// <returns>
    /// true if the field should be enabled; otherwise, false.
    /// </returns>
    boolean enableDisableFieldsButton_whsGenerateLP(WHSTmpCompleteWorkLine   _tmpCompleteWorkLine,
                                                    WHSTmpCompleteWorkTable  _tmpCompleteWorkTable)
    {
        boolean     licensePlateControlled;
        boolean     fieldEnabled;

        licensePlateControlled = WMSLocation::find(_tmpCompleteWorkLine.wmsLocationId, _tmpCompleteWorkTable.InventLocationId).whsLocationIsLPControlled();

        if (_tmpCompleteWorkLine.WorkType      == WHSWorkType::Pick            &&
            (_tmpCompleteWorkLine.WorkStatus   == WHSWorkStatus::Open          ||
             _tmpCompleteWorkLine.WorkStatus   == WHSWorkStatus::InProcess)    &&
            !_tmpCompleteWorkLine.isPutBefore()                                &&
            !licensePlateControlled)
        {
            fieldEnabled = true;
        }
        else
        {
            fieldEnabled = false;
        }

        return fieldEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableFieldsButtons_inventBatchId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether to enable or disable InventBatchId field in the form.
	/// </summary>
	/// <param name="_tmpCompleteWorkLine">
	/// Work line.
	/// </param>
	/// <param name="_tmpCompleteWorkTable">
	/// Work header.
	/// </param>
	/// <returns>
	/// True if the field should be enabled, false otherwise.
	/// </returns>
    boolean enableDisableFieldsButtons_inventBatchId(WHSTmpCompleteWorkLine   _tmpCompleteWorkLine,
                                                     WHSTmpCompleteWorkTable  _tmpCompleteWorkTable)
    {
        boolean     licensePlateControlled;
        boolean     fieldEnabled;

        licensePlateControlled = WMSLocation::find(_tmpCompleteWorkLine.wmsLocationId, _tmpCompleteWorkTable.InventLocationId).whsLocationIsLPControlled();

        if (!licensePlateControlled)
        {
            fieldEnabled = true;
        }
        else
        {
            fieldEnabled = false;
        }

        return fieldEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSet</Name>
				<Source><![CDATA[
	/// <summary>
	/// Initializes temporary work lines from a set of work headers.
	/// </summary>
	/// <param name="_set">
	/// Set containing work headers.
	/// </param>
	/// <param name="_whsTmpCompleteWorkTable">
	/// Temporary work header.
	/// </param>
	/// <param name="_whsTmpCompleteWorkLine">
	/// Temporary work line.
	/// </param>
	/// <param name="reReadWorkTable">
	/// Determines whether to reread work header before initializing temporary lines.
	/// </param>
    void initFromSet(Set _set,
                     WHSTmpCompleteWorkTable _whsTmpCompleteWorkTable,
                     WHSTmpCompleteWorkLine  _whsTmpCompleteWorkLine,
                     boolean                 reReadWorkTable = false)
    {
        SetEnumerator               se = _set.getEnumerator();
        WHSWorkTable                workTable;

        ttsbegin;

        while (se.moveNext())
        {
            workTable = se.current();

            if (reReadWorkTable)
            {
                workTable.reread();
            }

            this.insertTmpWorkLine(workTable);
        }
        _whsTmpCompleteWorkTable.setTmpData(tmpCompleteWorkTable);
        _whsTmpCompleteWorkLine.setTmpData(tmpCompleteWorkLine);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableTargetLicensePlateForWorkTransType</Name>
				<Source><![CDATA[
    [Hookable]
    private boolean enableTargetLicensePlateForWorkTransType(WHSWorkTransType _whsWorkTransType)
    {
        return WhsWorkTransactionType::singletonFromTypeOrDefault(_whsWorkTransType).isItemRelatedPicking();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpWorkLine</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates temporary work lines from a work header.
	/// </summary>
	/// <param name="_workTable">
	/// Work header record to be used to create temporary lines.
	/// </param>
    void insertTmpWorkLine(WHSWorkTable _workTable)
    {
        WHSWorkTable                workTable = _workTable;
        WHSWorkLine                 workLine;

        tmpCompleteWorkTable.initFromWHSWorkTable(workTable);

        if (!tmpCompleteWorkTable.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSTmpCompleteWorkTable)));
        }
        else
        {
            tmpCompleteWorkTable.insert();
        }

        while select workLine
            where workLine.WorkId == workTable.WorkId
        {
            tmpCompleteWorkLine.clear();
            tmpCompleteWorkLine.initFromWHSWorkLine(workLine);

            if (   !WMSLocation::find(tmpCompleteWorkLine.wmsLocationId, tmpCompleteWorkTable.InventLocationId).whsLocationIsLPControlled()
                && this.enableTargetLicensePlateForWorkTransType(tmpCompleteWorkTable.WorkTransType)
                && (tmpCompleteWorkLine.WorkStatus     == WHSWorkStatus::Open
                ||  tmpCompleteWorkLine.WorkStatus     == WHSWorkStatus::InProcess)
                && tmpCompleteWorkLine.WorkType        == WHSWorkType::Pick
                && !tmpCompleteWorkLine.isPutBefore())
            {
                tmpCompleteWorkLine.GenerateLP = NoYes::Yes;
            }

            if (!tmpCompleteWorkLine.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSTmpCompleteWorkLine)));
            }
            else
            {
                tmpCompleteWorkLine.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBatchId_lookup</Name>
				<Source><![CDATA[
	/// <summary>
	/// Lookups for batch id using dimensions.
	/// </summary>
	/// <param name="_whsTmpCompleteWorkLine">
	/// Temporary work line.
	/// </param>
	/// <param name="_this">
	/// Form object.
	/// </param>
    void inventBatchId_lookup(WHSTmpCompleteWorkLine    _whsTmpCompleteWorkLine,
                              Object                    _this)
    {
        InventDim inventDim     = InventDim::find(_whsTmpCompleteWorkLine.InventDimId);
        inventDim.wmsLocationId = _whsTmpCompleteWorkLine.wmsLocationId;

        WHSTmpCompleteWorkLine::lookupInventBatchId(_this, _whsTmpCompleteWorkLine.ItemId, inventDim, _whsTmpCompleteWorkLine.InventQtyRemain);
    }

]]></Source>
			</Method>
			<Method>
				<Name>targetLicencePlateId_lookup</Name>
				<Source><![CDATA[
	/// <summary>
	/// Lookups for target license plate id using dimensions.
	/// </summary>
	/// <param name="_tmpCompleteWorkLine">
	/// Temporary work line.
	/// </param>
	/// <param name="_this">
	/// Form object.
	/// </param>
    void targetLicencePlateId_lookup(WHSTmpCompleteWorkLine  _tmpCompleteWorkLine,
                                     Object                  _this)
    {
        InventDim inventDim     = InventDim::find(_tmpCompleteWorkLine.InventDimId);
        inventDim.InventBatchId = _tmpCompleteWorkLine.InventBatchId;
        inventDim.wmsLocationId = _tmpCompleteWorkLine.wmsLocationId;

        WHSTmpCompleteWorkLine::lookupLicensePlateId(_this, _tmpCompleteWorkLine.ItemId, inventDim, _tmpCompleteWorkLine.InventQtyRemain);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsUserId_modified</Name>
				<Source><![CDATA[
	/// <summary>
	/// Validates user and when user id field is modified.
	/// </summary>
	/// <param name="_this">
	/// Form object.
	/// </param>
	/// <param name="_tmpCompleteWorkTable">
	/// Work header.
	/// </param>
	/// <returns>
	/// True if the user is valid for work, false otherwise.
	/// </returns>
    boolean whsUserId_modified(Object                   _this,
                               WHSTmpCompleteWorkTable  _tmpCompleteWorkTable)
    {
        WHSWorkUser     workUser;
        boolean         ret = true;

        if (_this.text() != '')
        {
            workUser = WHSWorkUser::find(_this.text());

            if (workUser.RecId == 0)
            {
                ret = checkFailed(strFmt("@WAX3261", _this.text()));
                _this.text('');
            }
            else if ((select firstonly RecId from whsWorkUserWarehouse
                        where whsWorkUserWarehouse.InventLocationId == _tmpCompleteWorkTable.InventLocationId &&
                              whsWorkUserWarehouse.UserId           == workUser.UserId).RecId == 0)
            {
                ret = checkFailed(strFmt("@WAX3260", workUser.UserId, _tmpCompleteWorkTable.InventLocationId));
                _this.text('');
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>