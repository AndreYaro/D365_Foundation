<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalSourceDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjAdvancedJournalSourceDocument</c> class provides the information to handle the distributions and
///    sub-ledger journal lines of a <c>ProjAdvancedJournal</c> table record.
/// </summary>
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProjAdvancedJournal), SourceDocument_ProjAdvancedJournal::ProjAdvancedJournal, tableStr(ProjAdvancedJournal))]
public class ProjAdvancedJournalSourceDocument extends SourceDocument implements SourceDocumentIDataProvider, SourceDocumentILineVoucher
{
    ProjAdvancedJournal projAdvancedJournal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a business event information corresponding to the source document.
    /// </summary>
    /// <returns>
    ///     A <c>BusinessEvent</c> object.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        return new BusinessEvent(enumNum(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    protected void initializeImplementation(SourceDocumentHeaderImplementation _sourceDocumentImplementation)
    {
        projAdvancedJournal = ProjAdvancedJournal::findBySourceDocumentHeader(_sourceDocumentImplementation.SourceDocumentHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        AccountingDistributionTemplateRecId accountingDistributionTemplateRecId;

        // There is no accounting distribution template for the project advanced journal source document.

        return accountingDistributionTemplateRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        DimensionDefault dimensionDefault;

        // Retrieve default dimension from one of the header's lines
        ProjAdvancedJournalLine line;

        select firstonly DefaultDimension from line
            where line.ProjAdvancedJournal == projAdvancedJournal.RecId;

        dimensionDefault = line.DefaultDimension;

        return dimensionDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNumber</Name>
				<Source><![CDATA[
    public DocumentNum parmDocumentNumber()
    {
        return ProjAdvancedJournal.ProjAdvancedJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call parmCurrentLineVoucher instead
    /// </summary>
    public Voucher parmCurrentVoucher(DataAreaId _dataAreaId)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentLineVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line voucher number.
    /// </summary>
    /// <param name = "_accountingEvent"></param>
    /// <returns>
    /// Voucher number of source document line.
    /// </returns>
    public Voucher parmCurrentLineVoucher(AccountingEvent _accountingEvent)
    {
        AccountingDistribution accountingDistribution;
        ProjAdvancedJournalLine projAdvancedJournalLine;

        select firstonly voucher from projAdvancedJournalLine
            join accountingDistribution
            where accountingDistribution.SourceDocumentLine == projAdvancedJournalLine.SourceDocumentLine
            && accountingDistribution.AccountingEvent == _accountingEvent.RecId;

        return projAdvancedJournalLine.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets map containing voucher numbers.
    /// </summary>
    /// <returns>
    /// Map with voucher numbers.
    /// </returns>
    public Map parmLineVouchers()
    {
        return new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of <c>LegalEntity</c>s for the document.
    /// </summary>
    /// <returns>A <c>List</c> containing the RecIds of the <c>LegalEntity</c>s.</returns>
    protected List getLegalEntities()
    {
        var legalEntityList = new List(Types::Int64);
        ProjAdvancedJournalLine projAdvancedJournalLine;

        while select LegalEntity from projAdvancedJournalLine
            group by LegalEntity
            where projAdvancedJournalLine.ProjAdvancedJournal == projAdvancedJournal.RecId
        {
            legalEntityList.addEnd(projAdvancedJournalLine.LegalEntity);
        }

        return legalEntityList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>