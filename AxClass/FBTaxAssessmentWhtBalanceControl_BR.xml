<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxAssessmentWhtBalanceControl_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FBTaxAssessmentWhtBalanceControl_BR extends FBContribCreditBalanceControlBase_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrentContribCreditDetail</Name>
				<Source><![CDATA[
    protected FBContribCreditDetailMap_BR getCurrentContribCreditDetail()
    {
        FBTaxWithholdTransCreditDetail_BR   fbTaxWithholdTransCreditDetail;

        return fbTaxWithholdTransCreditDetail;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>FBTaxAssessmentWhtBalanceControl_BR</c> class.
    /// </summary>
    /// <param name="_fbTaxAssessment">
    /// A <c>FBTaxAssessment_BR</c> table record.
    /// </param>
    protected void new(FBTaxAssessment_BR _fbTaxAssessment)
    {
        super(_fbTaxAssessment);
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateCreditFromTaxWithholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add or update an existing withholding tax credit detail according to the contribution type and current period.
    /// </summary>
    /// <param name="_custWhtContributionType">
    /// Customer contribution type.
    /// </param>
    /// <param name="_taxAmount">
    /// Amount to be added.
    /// </param>
    /// <param name="_assessmentRegimen">
    /// Transaction assessment regimen
    /// </param>
    public void updateCreditFromTaxWithholdTrans(CustWhtContributionType_BR _custWhtContributionType, TaxAmount _taxAmount, FBContribAssessmentRegimen_BR _assessmentRegimen)
    {
        FBTaxWithholdTransCreditDetail_BR   fbTaxWithholdTransCredit;

        select fbTaxWithholdTransCredit
            where   fbTaxWithholdTransCredit.FBTaxAssessment_BR         == fbTaxAssessment.RecId
                &&  fbTaxWithholdTransCredit.AssessmentRegimen          == _assessmentRegimen
                // The customer wht contribution type and the booking period are the credit identifiers
                &&  fbTaxWithholdTransCredit.CustWhtContributionType    == _custWhtContributionType
                &&  fbTaxWithholdTransCredit.PeriodMonth                == fbBookingPeriod.PeriodMonth
                &&  fbTaxWithholdTransCredit.PeriodYear                 == fbBookingPeriod.PeriodYear;

        if (fbTaxWithholdTransCredit)
        {
            fbTaxWithholdTransCredit.selectForUpdate(true);
            fbTaxWithholdTransCredit.WithholdingBalance     += _taxAmount;
            fbTaxWithholdTransCredit.TotalWithholdingAmount += _taxAmount;
            fbTaxWithholdTransCredit.update();
        }
        else
        {
            fbTaxWithholdTransCredit.CustWhtContributionType    = _custWhtContributionType;
            fbTaxWithholdTransCredit.PeriodMonth                = fbTaxAssessment.bookingPeriod().PeriodMonth;
            fbTaxWithholdTransCredit.PeriodYear                 = fbTaxAssessment.bookingPeriod().PeriodYear;
            fbTaxWithholdTransCredit.FBTaxAssessment_BR         = fbTaxAssessment.RecId;
            fbTaxWithholdTransCredit.TotalWithholdingAmount     = _taxAmount;
            fbTaxWithholdTransCredit.WithholdingBalance         = _taxAmount;
            fbTaxWithholdTransCredit.PreviousDeductedAmount     = 0;
            fbTaxWithholdTransCredit.CurrentDeductedAmount      = 0;
            fbTaxWithholdTransCredit.RefundedAmount             = 0;
            fbTaxWithholdTransCredit.CompensationAmount         = 0;
            fbTaxWithholdTransCredit.AssessmentRegimen          = _assessmentRegimen;
            fbTaxWithholdTransCredit.insert();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateWhtCreditDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method distributes the debit amount between the withholding credits from previous or current period.
    /// The older credits are used first.
    /// </summary>
    public void updateWhtCreditDistribution()
    {
        FBContribCreditBalanceController_BR fbContribCreditBalanceController;

        fbContribCreditBalanceController =  FBContribCreditBalanceController_BR::construct(fbTaxAssessment);
        fbContribCreditBalanceController.distributeRemainingCredit();
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateWhtCreditFromPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// If there is remaining wht credit from previous assessment, then the credit is transferred to the current one.
    /// </summary>
    public void updateWhtCreditFromPreviousPeriod()
    {
        this.updateCreditFromPreviousPeriod();
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FBTaxAssessmentWhtBalanceControl_BR construct(FBTaxAssessment_BR _fbTaxAssessment)
    {
        return new FBTaxAssessmentWhtBalanceControl_BR(_fbTaxAssessment);
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>