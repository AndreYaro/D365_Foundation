<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOnHoldUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendOnHoldUpdate</c> class presents a dialog for user interaction and updates the
///    <c>OnHold</c> field of the <c>VendTable</c> records status.
/// </summary>
class VendOnHoldUpdate extends RunBaseBatch implements BatchRetryable
{
    ReasonCode          reasonCode;
    NumberOf            activityPeriod;
    NumberOf            gracePeriod;
    NoYesId             includeEmployees;
    NoYesId             excludeNewVendors;

    DialogField         dialogReasonCode;
    DialogField         dialogActivityPeriod;
    DialogField         dialogGracePeriod;
    DialogField         dialogIncludeEmployees;
    DialogField         dialogExcludeNewVendors;

    #DEFINE.CurrentVersion(2)
    #DEFINE.VersionV1(1)
    #localmacro.CurrentList
        reasonCode,
        activityPeriod,
        gracePeriod,
        includeEmployees,
        excludeNewVendors
    #endmacro
    #localmacro.ListV1
        reasonCode,
        activityPeriod,
        gracePeriod,
        includeEmployees
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog box can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class two times with the
    /// same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    /// method will not have any effect.
    /// </remarks>
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        DialogRunbase       dialog;

        dialog = this.dialogInternal(_dialog, _forceOnClient);

        //Vendor inactivation
        dialog.caption("@SYS309858");

        dialogReasonCode = dialog.addFieldValue(extendedTypeStr(ReasonCode), reasonCode,
            "@SYS300098");

        dialogActivityPeriod = dialog.addFieldValue(extendedTypeStr(NumberOf), activityPeriod,
            "@SCM:VendOnHoldPeriod");

        dialogGracePeriod = dialog.addFieldValue(extendedTypeStr(NumberOf), gracePeriod,
            "@SYS300100");

        dialogIncludeEmployees = dialog.addFieldValue(extendedTypeStr(NoYesId), includeEmployees,
            "@SYS300101");
        
        dialogExcludeNewVendors = dialog.addFieldValue(extendedTypeStr(NoYesId), excludeNewVendors,
            "@SCM:ExcludeNewVendorsFromInactivation");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            this.parmReasonCode(dialogReasonCode.value());
            this.parmActivityPeriod(dialogActivityPeriod.value());
            this.parmGracePeriod(dialogGracePeriod.value());
            this.parmIncludeEmployees(dialogIncludeEmployees.value());
            this.parmExcludeNewVendors(dialogExcludeNewVendors.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryObject buildQuery(VendTable _vendTable)
    {
        TransDateTime    latestPossibleDate = DateTimeUtil::addDays(DateTimeUtil::utcNow(), -this.parmActivityPeriod());
        SysDaQueryObject qeVendTable = new SysDaQueryObject(_vendTable);

        qeVendTable.projection()
            .add(fieldStr(VendTable, AccountNum))
            .add(fieldStr(VendTable, Party));

        SysDaQueryExpression vendTableWhereClause = this.buildWhereClauseForVendTableQuery(_vendTable);
        
        if (this.parmExcludeNewVendors())
        {
            vendTableWhereClause = vendTableWhereClause
                .and(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(_vendTable, fieldStr(VendTable, CreatedDateTime)), new SysDaValueExpression(latestPossibleDate)));

            qeVendTable.whereClause(vendTableWhereClause);
        }

        qeVendTable.WhereClause(vendTableWhereClause);

        return qeVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForVendTableQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryExpression buildWhereClauseForVendTableQuery(VendTable _vendTable)
    {
        SysDaQueryExpression vendTableWhereClause = 
            (new SysDaNotEqualsExpression(new SysDaFieldExpression(_vendTable, fieldStr(VendTable, Blocked)), new SysDaValueExpression(enum2int(CustVendorBlocked::Never))))
            .and((new SysDaEqualsExpression(new SysDaFieldExpression(_vendTable, fieldStr(VendTable, Blocked)), new SysDaValueExpression(enum2int(CustVendorBlocked::No))))
                .or(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(_vendTable, fieldStr(VendTable, BlockedReleaseDate)), new SysDaValueExpression(DateTimeUtil::utcNow()))));
        
        return vendTableWhereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityPeriod</Name>
				<Source><![CDATA[
    public NumberOf parmActivityPeriod(NumberOf _activityPeriod = activityPeriod)
    {
        activityPeriod = _activityPeriod;

        return activityPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGracePeriod</Name>
				<Source><![CDATA[
    public NumberOf parmGracePeriod(NumberOf _gracePeriod = gracePeriod)
    {
        gracePeriod = _gracePeriod;

        return gracePeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeEmployees</Name>
				<Source><![CDATA[
    public NoYesId parmIncludeEmployees(NoYesId _includeEmployees = includeEmployees)
    {
        includeEmployees = _includeEmployees;

        return includeEmployees;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonCode</Name>
				<Source><![CDATA[
    public ReasonCode parmReasonCode(ReasonCode _reasonCode = reasonCode)
    {
        reasonCode = _reasonCode;

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeNewVendors</Name>
				<Source><![CDATA[
    public NoYesId parmExcludeNewVendors(NoYesId _excludeNewVendors = excludeNewVendors)
    {
        excludeNewVendors = _excludeNewVendors;

        return excludeNewVendors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>OnHold</c> field status of the <c>VendTable</c> records based on user selection
    ///    criteria.
    /// </summary>
    public void run()
    {
        VendTable     vendTable;
        VendTable     vendTableUpdate;
        boolean       isEmployee;
        TransDateTime latestGraceDate = DateTimeUtil::addDays(DateTimeUtil::utcNow(), -this.parmGracePeriod());
        TransDateTime latestPossibleDate = DateTimeUtil::addDays(DateTimeUtil::utcNow(), -this.parmActivityPeriod());

        if (this.parmExcludeNewVendors())
        {
            SysDaQueryObject     qeVendTable = this.buildQuery(vendTable);
            SysDaQueryExpression vendTableWhereClause = this.buildWhereClauseForVendTableQuery(vendTable);
            SysDaSearchObject    soVendTable = new SysDaSearchObject(qeVendTable);
            SysDaSearchStatement ssVendTable = new SysDaSearchStatement();

            while (ssVendTable.findNext(soVendTable))
            {
                this.blockInactiveVendor(vendTable, vendTableUpdate, isEmployee, latestPossibleDate, latestGraceDate);
            }
        }
        else
        {
            while select AccountNum, Party from vendTable
                where (vendTable.Blocked != CustVendorBlocked::Never) &&
                    ((vendTable.Blocked == CustVendorBlocked::No) ||
                    (vendTable.BlockedReleaseDate >= DateTimeUtil::utcNow()))
            {
                this.blockInactiveVendor(vendTable, vendTableUpdate, isEmployee, latestPossibleDate, latestGraceDate);
            }
        }
     }

]]></Source>
			</Method>
			<Method>
				<Name>blockInactiveVendor</Name>
				<Source><![CDATA[
     private void blockInactiveVendor(
        VendTable _vendTable, 
        VendTable _vendTableUpdate,
        boolean _isEmployee,
        TransDateTime _latestPossibleDate,
        TransDateTime _latestGraceDate)
     {
         if (!_vendTable.hasCurrentActivity(_latestPossibleDate))
        {
            _isEmployee = false;

            if (this.parmIncludeEmployees() == NoYes::No)
            {
                _isEmployee = (_vendTable.partyType() == DirPartyType::Person &&
                        HcmWorker::findByPerson(_vendTable.Party).RecId != 0);
            }

            VendOnHoldHistory vendOnHoldHistory = VendOnHoldHistory::findLast(_vendTable.AccountNum);

            if ((vendOnHoldHistory.RecId == 0 ||
                vendOnHoldHistory.CreatedDateTime < _latestGraceDate) &&
                (this.parmIncludeEmployees() == NoYes::Yes || ! _isEmployee))
            {
                ttsbegin;
                _vendTableUpdate = VendTable::find(_vendTable.AccountNum, true);
                _vendTableUpdate.Blocked = CustVendorBlocked::All;
                _vendTableUpdate.update();
                VendOnHoldHistory::createHistoryRecord(
                        _vendTable.AccountNum,
                        CustVendorBlocked::All,
                        this.parmReasonCode());
                ttscommit;
            }
        }
     }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            case #VersionV1:
                [version, #ListV1] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendOnHoldUpdate construct()
    {
        return new VendOnHoldUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS309858";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendOnHoldUpdate    vendOnHoldUpdate = VendOnHoldUpdate::construct();

        if (vendOnHoldUpdate.prompt())
        {
            vendOnHoldUpdate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>