<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDueReplacementUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetDueReplacementUIBuilder</c> class is responsible for building an input dialog for the <c>AssetDueReplacement</c> report.
/// </summary>
class AssetDueReplacementUIBuilder extends SrsReportDataContractUIBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements a custom lookup for dimension attribute.
    /// </summary>
    /// <param name="_control">
    ///    The <c>FormStringControl</c> for which the lookup fields must be associated.
    /// </param>
    /// <remarks>
    ///    It uses the <c>DimensionAttribute</c> table for lookup.
    /// </remarks>
    public void lookupDimensionAttribute(FormStringControl _control)
    {
        Query           query = new Query();
        SysTableLookup  sysTableLookup;
        QueryBuildDataSource qbds;
        QueryBuildDataSource qbdsSet;
        DimensionEnumeration dimensionSetId = DimensionCache::getDimensionAttributeSetForLedger();

        // Create an instance of SysTableLookup using the specified control.
        sysTableLookup = SysTableLookup::newParameters(tableNum(DimensionAttribute), _control);

        // Add Name field to be shown in the lookup form.
        sysTableLookup.addLookupfield(fieldNum(DimensionAttribute, Name));

        qbds = query.addDataSource(tableNum(DimensionAttribute));
        qbds.addRange(fieldNum(DimensionAttribute, Type)).value(int2str(enum2int(DimensionAttributeType::ExistingList)));
        qbds.addRange(fieldNum(DimensionAttribute, Type)).value(int2str(enum2int(DimensionAttributeType::CustomList)));

        qbdsSet = qbds.addDataSource(tableNum(DimensionAttributeSetItem));
        qbdsSet.joinMode(JoinMode::ExistsJoin);
        qbdsSet.addLink(fieldNum(DimensionAttribute, RecId), fieldNum(DimensionAttributeSetItem, DimensionAttribute));
        qbdsSet.addRange(fieldNum(DimensionAttributeSetItem, DimensionAttributeSet)).value(SysQuery::value(dimensionSetId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the dimension attribute dialog field to appear as lookups.
    /// </summary>
    public void postBuild()
    {
        DialogField dimensionAttribute;

        super();

        // From binding info, get the dialog field for dimension attribute and add button
        dimensionAttribute = this.bindInfo().getDialogField(
            this.dataContractObject(),
            methodStr(AssetDueReplacementContract, parmDimensionAttribute));

        if (dimensionAttribute)
        {
            dimensionAttribute.lookupButton(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the default values in order to handle events on dialogs.
    /// </summary>
    public void postRun()
    {
        Dialog      dialogLocal = this.dialog();
        DialogField dialogField;

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        // Override the lookup for parmDimensionAttribute contract parameter with dimensionAttributeLookup of this class.
        dialogField = this.bindInfo().getDialogField(
            this.dataContractObject(),
            methodStr(AssetDueReplacementContract, parmDimensionAttribute));

        dialogField.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(AssetDueReplacementUIBuilder, lookupDimensionAttribute),
            this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>