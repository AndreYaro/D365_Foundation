<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSlotDemandGenerateTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Slot demand for transfer orders.
/// </summary>
[WHSSlotDemandGenerateAttribute(WHSSlotDemandType::Transfer)]
final internal class WHSSlotDemandGenerateTransfer extends WHSSlotDemandGenerate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    final protected void build()
    {
        using (var activityContext = this.instrumentationLogger().demandSlottingActivities().buildDemand(this.parmSlotTemplate().SlotDemandStrategy, this.parmSlotTemplate().UseWorkForWaveReplen))
        {
            this.instrumentationLogger().logRecordInformation(this.parmSlotTemplate());

            if (this.parmSlotTemplate().PackedQueryRun == conNull())
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            QueryRun qr = new QueryRun(this.parmSlotTemplate().PackedQueryRun);
            Query query = qr.query();

            // Only build demand for warehouse enabled non-service items.
            QueryBuildDataSource    qbdsWHSInvent = query.dataSourceTable(tableNum(InventTransferLine)).addDataSource(tableNum(WHSInventTable));
            qbdsWHSInvent.joinMode(JoinMode::ExistsJoin);
            qbdsWHSInvent.addLink(fieldNum(InventTransferLine, ItemId), fieldNum(WHSInventTable, ItemId));

            QueryBuildDataSource qbdsInvent = qbdsWHSInvent.addDataSource(tableNum(InventTable));
            qbdsInvent.relations(true);
            qbdsInvent.joinMode(JoinMode::ExistsJoin);
            qbdsInvent.addRange(fieldNum(InventTable, ItemType)).value(SysQuery::valueNot(ItemType::Service));

            QueryBuildDataSource qbdsInventTransferTable = query.dataSourceTable(tableNum(InventTransferTable));
            SysQuery::findOrCreateRange(qbdsInventTransferTable, fieldNum(InventTransferTable, TransferStatus)).value(SysQuery::value(InventTransferStatus::Created));

            QueryBuildDataSource qbdsTransferline;
            switch (this.parmSlotTemplate().SlotDemandStrategy)
            {
                case WHSSlotDemandStrategy::Released:
                    qbdsTransferline = query.dataSourceTable(tableNum(InventTransferLine)).addDataSource(tableNum(WHSInventTransferLine));
                    qbdsTransferline.joinMode(JoinMode::ExistsJoin);
                    qbdsTransferline.addLink(fieldNum(InventTransferLine, RecId), fieldNum(WHSInventTransferLine, InventTransferLine));
                    qbdsTransferline.addRange(fieldNum(WHSInventTransferLine, ReleasedQty)).value(SysQuery::valueNot(0));

                    break;
            }

            ttsbegin;

            this.deleteDemand();

            while (qr.next())
            {
                InventTransferLine transferLine = qr.get(tableNum(InventTransferLine)) as InventTransferLine;

                this.createTransferLineDemand(transferLine);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferLineDemand</Name>
				<Source><![CDATA[
    private void createTransferLineDemand(InventTransferLine _transferLine)
    {
        InventQty runningQty = this.demandQuantity(this.parmSlotTemplate().SlotDemandStrategy, _transferLine);

        if (!this.createLineDemand(_transferLine.ItemId, runningQty, _transferLine.InventDimId))
        {
            // If we've exhausted the unit of measure breakdown and there's still running quantity, the method was called with incorrect units.
            this.instrumentationLogger().logRecordInformation(_transferLine);

            throw error(strFmt("@WAX:UnableToCreateSlottingDemandError", _transferLine.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>demandQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty demandQuantity(WHSSlotDemandStrategy _demandStrategy, InventTransferLine _transferLine)
    {
        InventHandlingQty demandQty;

        // Initialize running quantity based on slot demand strategy.
        switch (_demandStrategy)
        {
            case WHSSlotDemandStrategy::Ordered:
                demandQty = WHSCatchWeightHelper::convertInventQuantity(_transferLine.ItemId, _transferLine.UnitId, _transferLine.QtyTransfer, _transferLine.InventDimId);
                break;

            case WHSSlotDemandStrategy::Reserved:

                InventQty           qtyReservedPhysical;
                InventQty           pdsCWQtyReservPhysical;
                [qtyReservedPhysical, pdsCWQtyReservPhysical] = _transferLine.qtyReservedPhysical();

                // Since CW items are reserved at minimum quantity we can not only look at reserved physical then convert.
                if (PdsGlobal::pdsIsCWItem(_transferLine.ItemId))
                {
                    demandQty = pdsCWQtyReservPhysical;
                }
                else
                {
                    demandQty = qtyReservedPhysical;
                }
                break;

            case WHSSlotDemandStrategy::Released:
                demandQty = WHSInventTransferLine::find(_transferLine.RecId).ReleasedQty - _transferLine.whsQtyInWorkShip();
                break;
        }

        return demandQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>