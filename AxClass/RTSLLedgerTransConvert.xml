<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RtslLedgerTransConvert</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RtslLedgerTransConvert extends RTSLLedgerConvert
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCompanySetup</Name>
				<Source><![CDATA[
    public boolean checkCompanySetup(boolean _ok,
                                     RTSLConsistencyCheck _consistencyCheck)
    {
        boolean                 ok = _ok;
        RTSLLedgerTransRule     checkRule;
        RTSLRuleGroup           ruleGroup = translation.parmRuleGroup();

        setPrefix("@GLS103430");

        if (xDataArea::exist(ruleGroup.ToCompanyId))
        {
            changecompany(ruleGroup.ToCompanyId)
            {
                if (ruleGroup.LedgerDiffErrorLevel != RTSLLedgerErrorLevel::Error)
                {
                    ok = MainAccount::checkAllowPosting(
                        LedgerDimensionFacade::getMainAccountFromLedgerDimension(ruleGroup.DiffLedgerDimension).MainAccountId,
                        LedgerPostingType::None,
                        false,
                        false
                    );
                }
                _consistencyCheck.postTest(ruleGroup,
                                           fieldNum(RTSLRuleGroup, DiffLedgerDimension));

                if (ruleGroup.LedgerDisbalanceErrorLevel != RTSLLedgerErrorLevel::Error)
                {
                    ok = MainAccount::checkAllowPosting(
                        LedgerDimensionFacade::getMainAccountFromLedgerDimension(ruleGroup.DisbalanceLedgerDimension).MainAccountId,
                        LedgerPostingType::None,
                        false,
                        false
                    );
                }
                _consistencyCheck.postTest(ruleGroup,
                                           fieldNum(RTSLRuleGroup, DisbalanceLedgerDimension));
            }

            setPrefix("@GLS103431");
            while select checkRule
                where checkRule.RuleGroupId == ruleGroup.RuleGroupId
            {
                changecompany(ruleGroup.ToCompanyId)
                {
                    ok = MainAccount::checkAllowPosting(checkRule.ToMainAccountNum,
                                                        checkRule.Posting,
                                                        false,
                                                        false);

                    _consistencyCheck.postTest(checkRule,
                                               fieldNum(RTSLLedgerTransRule, ToDefaultLedgerDimension));
                }
            }
        }
        else
        {
            ok = checkFailed(strFmt("@SYS10666", ruleGroup.ToCompanyId));
            _consistencyCheck.postTest(ruleGroup,
                                       fieldNum(RTSLRuleGroup, ToCompanyId));
        }

        return super(ok, _consistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>childIds</Name>
				<Source><![CDATA[
    protected container childIds()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTrans</Name>
				<Source><![CDATA[
    public TmpRTSLTrans convertTrans(TmpRTSLTrans   _tmpTrans,
                                     Common         _rule)
    {
        RTSLLedgerTransRule   rule      = _rule as RTSLLedgerTransRule;

        tmpLedgerTrans                  = _tmpTrans;

        tmpLedgerTrans.NewLedgerDimensionDefaultAccount  = rule.ToDefaultLedgerDimension;
        tmpLedgerTrans.OperationsTax    = rule.ToOperationTax;
        tmpLedgerTrans                  = super(tmpLedgerTrans, _rule);

        return tmpLedgerTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTrans</Name>
				<Source><![CDATA[
    public boolean validateTrans(TmpRTSLTrans  _tmpTrans)
    {
        boolean               ok       = true;
        TmpRTSLLedgerTrans    tmpTrans = _tmpTrans;

        changecompany(translation.toCompanyId())
        {
            ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountFromLedgerDimension(tmpTrans.NewLedgerDimensionDefaultAccount).MainAccountId,
                                                tmpTrans.Posting,
                                                false,
                                                false);
        }

        tmpTrans.ErrorStatus = ! ok || tmpTrans.ErrorStatus;

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>