<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrResReqBulkEditManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WrkCtrResReqBulkEditManager</c> class is used to modify resource requirements in a bulk mode.
/// </summary>
class WrkCtrResReqBulkEditManager
{
    int                                 sumulateRunCount;
    List                                destinations;
    WrkCtrResReqBulkEditAction          bulkEditAction;
    WrkCtrResReqBulkEditPartialFilter   resourceRequirementsFilter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new destination where to apply modifications.
    /// </summary>
    /// <param name="_destination">
    /// The destination to which to apply modifications.
    /// </param>
    public void addDestination(WrkCtrResReqBulkEditDestination _destination)
    {
        destinations.addEnd(_destination);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyActionsToDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies all action for all found requirements on the destination.
    /// </summary>
    /// <param name="_destination">
    /// The destination to which to apply the found requirements.
    /// </param>
    protected void applyActionsToDestination(WrkCtrResReqBulkEditDestination _destination)
    {
        Query query = new Query(querystr(WrkCtrBulkResReqEditActivity));

        _destination.onFilteringActivity(query);
        resourceRequirementsFilter.filterRequirements(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the instance of the <c>WrkCtrResReqBulkEditManager</c> class.
    /// </summary>
    /// <param name="_resourceRequirementsFilter">
    /// A <c>WrkCtrResReqBulkEditPartialFilter</c> object.
    /// </param>
    /// <param name="_bulkEditAction">
    /// The <c>WrkCtrResReqBulkEditAction</c> object.
    /// </param>
    public void new(WrkCtrResReqBulkEditPartialFilter _resourceRequirementsFilter, WrkCtrResReqBulkEditAction _bulkEditAction)
    {
        destinations = new List(Types::Class);
        resourceRequirementsFilter = _resourceRequirementsFilter;
        bulkEditAction = _bulkEditAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementSetFound</Name>
				<Source><![CDATA[
        public void requirementSetFound(WrkCtrActivityRequirementSet _requirementSet, List _requirements)
    {
        bulkEditAction.run(_requirementSet, _requirements);
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementSetSimulate</Name>
				<Source><![CDATA[
        public void requirementSetSimulate(WrkCtrActivityRequirementSet _requirementSet, List _requirements)
    {
        sumulateRunCount++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        ListEnumerator                  enumerator = destinations.getEnumerator();
        WrkCtrResReqBulkEditDestination destination;

        resourceRequirementsFilter.requirementSetFound += eventhandler(this.requirementSetFound);
        while (enumerator.moveNext())
        {
            destination = enumerator.current();
            this.applyActionsToDestination(destination);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>simulateRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Simulates the <c>run</c> method to calculate the amount of affected activities.
    /// </summary>
    /// <returns>
    /// The amount of affected activities
    /// </returns>
    public int simulateRun()
    {
        ListEnumerator                  enumerator = destinations.getEnumerator();
        WrkCtrResReqBulkEditDestination destination;

        resourceRequirementsFilter.requirementSetFound += eventhandler(this.requirementSetSimulate);
        while (enumerator.moveNext())
        {
            destination = enumerator.current();
            this.applyActionsToDestination(destination);
        }

        return sumulateRunCount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>