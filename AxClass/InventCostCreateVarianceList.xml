<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostCreateVarianceList</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCostCreateVarianceList
{
    InventCostTransVarianceList     varianceList;

    InventCostTransCostList         actCostList;
    InventCostTransCostList         estCostList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addActCostToVarianceList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates variances based on the actual cost group list.
    /// </summary>
    /// <remarks>
    ///    All records that have been left in the actual cost group list after the
    ///    <c>inventCostCreateVarianceList.addEstCostToVarianceList</c> method is called will be added to the
    ///    <c>recordSortedList</c>.
    /// </remarks>

    protected void addActCostToVarianceList()
    {
        InventCostTransVariance     actCostTransVariance;
        boolean                     foundAct;

        // Now look, what has been left in the
        foundAct = actCostList.first(actCostTransVariance);
        while (foundAct)
        {
            // The record has not been in the physical list
            // The variance that has to be created is the costAmount of the actual list
            varianceList.add(actCostTransVariance);

            foundAct = actCostList.next(actCostTransVariance);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEstCostToVarianceList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates variances based on the physical cost group list.
    /// </summary>
    /// <remarks>
    ///    The following actions should be applied.
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Iterate through the physical cost group list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Check whether the cost group is also found in the actual cost group list. If it is
    ///          found, calculate the difference between the two and remove the cost group from the actual cost
    ///          group list.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Add the variance to the <c>recordSortedList</c>.
    ///          </description>
    ///       </item>
    ///    </list>
    ///     This method must be the first method that is called during variance calculation.
    /// </remarks>

    protected void addEstCostToVarianceList()
    {
        InventCostTransVariance     estCostTransVariance;
        InventCostTransVariance     actCostTransVariance;
        boolean                     foundEst;
        boolean                     foundAct;

        // To get the variance, iterate through the physical cost list
        foundEst = estCostList.first(estCostTransVariance);
        while (foundEst)
        {
            actCostTransVariance.data(estCostTransVariance);

            // Check if record sorted list exists
            if (actCostList)
            {
                foundAct = actCostList.find(actCostTransVariance);
                if (!foundAct)
                {
                    // Record was not found in the actual cost List as well
                    // Set the CostAmount to zero
                    actCostTransVariance.CostAmount = 0;
                }
            }

            // Now calc the difference and set it to the estCostTransVariance record
            // <GEERU>
            estCostTransVariance.CostAmount          = actCostTransVariance.CostAmount          - estCostTransVariance.CostAmount;
            estCostTransVariance.CostAmountSecCur_RU = actCostTransVariance.CostAmountSecCur_RU - estCostTransVariance.CostAmountSecCur_RU;
            // </GEERU>

            // Add the estCostTransVariance record, that now contains the costAmount representing the variance
            varianceList.add(estCostTransVariance);

            // if the record was found in the real list, remove it from there
            if (foundAct)
            {
                // Delete the record from the list
                actCostList.delete(actCostTransVariance);
            }

            // Process next record
            foundEst = estCostList.next(estCostTransVariance);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDelta</Name>
				<Source><![CDATA[
        public void buildDelta()
    {
        // Check if the record sorted list have been initialized
        if (estCostList && estCostList.length() != 0)
        {
            // Process the estimated cost list
            this.addEstCostToVarianceList();
        }

        if (actCostList && actCostList.length() != 0)
        {
            // Process what have been left in the act cost list
            this.addActCostToVarianceList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventCostCreateVarianceList</c> class.
    /// </summary>
    /// <remarks>
    ///    This method is protected so that the <c>construct</c> method is used.
    /// </remarks>

    protected void new()
    {
        varianceList = InventCostTransVarianceList::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActCostList</Name>
				<Source><![CDATA[
        public InventCostTransCostList parmActCostList(InventCostTransCostList _actCostList = actCostList)
    {
        actCostList = _actCostList;

        return actCostList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEstCostList</Name>
				<Source><![CDATA[
        public InventCostTransCostList parmEstCostList(InventCostTransCostList _estCostList = estCostList)
    {
        estCostList = _estCostList;

        return estCostList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVarianceList</Name>
				<Source><![CDATA[
        public InventCostTransVarianceList parmVarianceList(InventCostTransVarianceList _varianceList = varianceList)
    {
        varianceList = _varianceList;

        return varianceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventCostCreateVarianceList construct()
    {
        return new InventCostCreateVarianceList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVarianceListFromCostListDelta</Name>
				<Source><![CDATA[
        public static InventCostTransVarianceList createVarianceListFromCostListDelta(InventCostTransCostList   _actCostList,
                                                                           InventCostTransCostList   _estCostList)
    {
        InventCostCreateVarianceList inventCostCreateVarianceList = InventCostCreateVarianceList::construct();

        inventCostCreateVarianceList.parmActCostList(_actCostList);
        inventCostCreateVarianceList.parmEstCostList(_estCostList);

        inventCostCreateVarianceList.buildDelta();

        return inventCostCreateVarianceList.parmVarianceList();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>