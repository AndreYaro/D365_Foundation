<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetterInvoiceProjectContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesFormLetterInvoiceProjectContract</c> class is used as the data contract class for the
/// <c>FormletterService</c> class when posting the project sales order invoices.
/// </summary>
[DataContractAttribute]
[DocumentStatusFactoryAttribute(DocumentStatus::ProjectInvoice)]
class SalesFormLetterInvoiceProjectContract
extends SalesFormLetterInvoiceContract
{
    boolean             deleteFullyInvoiced;

    //List of parameters common for SalesFormLetter_* classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list.
    #define.CurrentVersion(1)
    #LOCALMACRO.ParmListSalesInvoiceProject
        deleteFullyInvoiced
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentStatus</Name>
				<Source><![CDATA[
        public DocumentStatus getDocumentStatus()
    {
        return DocumentStatus::ProjectInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container  pack()
    {
        documentStatus = this.getDocumentStatus();

        return [#CurrentVersion, #ParmListCommon, #ParmListSalesInvoiceProject] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteFullyInvoiced</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public boolean parmDeleteFullyInvoiced(boolean _deleteFullyInvoiced = deleteFullyInvoiced)
    {
        deleteFullyInvoiced = _deleteFullyInvoiced;
        return deleteFullyInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean  unpack(container  _packedClass)
    {
        Integer         version = conPeek(_packedClass,1);
        container       packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListCommon, #ParmListSalesInvoiceProject, packedBase] = _packedClass;
                return super(packedBase);

            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>