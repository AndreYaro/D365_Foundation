<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymRemittanceERReportRunner_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CustPaymRemittanceERReportRunner_IT</c> class runs the RIBA collection remittance (IT)
///     GER format and prints only excel file.
/// </summary>
public class CustPaymRemittanceERReportRunner_IT
{
    private Args                        args;
    private BankRemittanceFilesCust     bankRemittanceFilesCust;
    private Query                       query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">
    ///     The specified arguments.
    /// </param>
    public static void main(Args _args)
    {
        CustPaymRemittanceERReportRunner_IT runner = new CustPaymRemittanceERReportRunner_IT();

        runner.parmArgs(_args);

        runner.initCustVendPaymERExport(_args).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private Query buildQuery()
    {
        QueryBuildDataSource qbdsLedgerJournalTrans;

        query = new Query();
        query.recordLevelSecurity(true);

        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(bankRemittanceFilesCust.JournalId);

        qbdsLedgerJournalTrans = query.addDataSource(tableNum(LedgerJournalTrans));
        qbdsLedgerJournalTrans.update(true);

        qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, JournalNum)).value(queryValue(ledgerJournalTable.JournalNum));
        qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, BankRemittanceFileId)).value(queryValue(bankRemittanceFilesCust.FileId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendPaymERExport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates and initializes the <c>CustVendPaymERExport</c> class.
    /// </summary>
    /// <param name = "_args">
    ///     The specified arguments passed to method main as a parameter.
    /// </param>
    /// <returns>
    ///     An instance of <c>CustVendPaymERExport</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustVendPaymERExport initCustVendPaymERExport(Args _args)
    {
        this.init(_args);

        var custVendPaymERExport = new CustVendPaymERExport();

        custVendPaymERExport.parmERBinding(bankRemittanceFilesCust.ERFormatMappingID);
        custVendPaymERExport.parmLedgerJournalId(bankRemittanceFilesCust.JournalId);
        custVendPaymERExport.parmBankAccountID(bankRemittanceFilesCust.BankAccountId);
        custVendPaymERExport.parmERFileName(bankRemittanceFilesCust.FileName);
        custVendPaymERExport.parmQuery(query);
        custVendPaymERExport.parmCustVendPaymModeTable(CustPaymModeTable::find(bankRemittanceFilesCust.PaymMode));
        custVendPaymERExport.parmShowParamsDialog(false);
        custVendPaymERExport.parmPostERExportDataUpdateRequiredForCustomerRemittance(false);

        custVendPaymERExport.addInputParameter(CustVendOutPaymConstants::PrintControlReportGERParameter, NoYes::Yes);
        custVendPaymERExport.addInputParameter(CustVendOutPaymConstants::GenerateRemittanceFileGERParameter, NoYes::No);

        return custVendPaymERExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes all the required objects.
    /// </summary>
    /// <param name="_args">
    ///     The arguments for the <c>CustPaymRemittanceERReportRunner_IT</c> class.
    /// </param>
    private void init(Args _args)
    {
        // Checks the Args container to determine source of report data set.
        if (_args.dataset() == tablenum(BankRemittanceFilesCust))
        {
            this.initRemittance(_args.record());
            this.buildQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRemittance</Name>
				<Source><![CDATA[
    private void initRemittance(BankRemittanceFilesCust _bankRemittanceFilesCust)
    {
        // Validates input parameters.
        if (_bankRemittanceFilesCust == null)
        {
            throw error(Error::missingRecord(funcname()));
        }

        bankRemittanceFilesCust = _bankRemittanceFilesCust;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>