<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityReferenceTypePurchase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventQualityReferenceTypePurchase</c> class is a purchase reference document.
/// </summary>
[InventQualityReferenceTableName(tableStr(PurchLine)), InventQualityReferenceTableName(tableStr(PurchParmLine))]
[InventNonConformanceTypeFactoryAttribute(InventNonConformanceType::Vend)]
[InventTransTypeFactoryAttribute(InventTransType::Purch)]
[InventTestReferenceTypeFactoryAttribute(InventTestReferenceType::Purch)]
class InventQualityReferenceTypePurchase extends InventQualityReferenceTypePurchSales
{
    PurchLine purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTestAccountRelation</c> value for this reference document.
    /// </summary>
    /// <param name="_group">
    ///    A Boolean value that indicates whether to get the relation for the account code group or table.
    /// </param>
    /// <returns>
    ///    The appropriate <c>InventTestAccountRelation</c> value.
    /// </returns>
    public InventTestAccountRelation accountRelation(boolean _group = false)
    {
        return _group ? purchLine.VendGroup : purchLine.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventNonConformanceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on an <c>InventNonConformanceTable</c> buffer.
    /// </summary>
    /// <param name="_inventNonConformanceTable">
    ///    An <c>InventNonConformanceTable</c> buffer.
    /// </param>
    protected void initFromInventNonConformanceTable(InventNonConformanceTable _inventNonConformanceTable)
    {
        this.parmBuffer(PurchLine::findInventTransId(_inventNonConformanceTable.InventTransIdRef));
        super(_inventNonConformanceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on the <c>InventTransOrigin</c> table record.
    /// </summary>
    /// <param name="_inventTransOrigin">
    ///    An <c>InventTransOrigin</c> table buffer.
    /// </param>
    protected void initFromInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        this.parmBuffer(InventTransOriginPurchLine::purchLine(_inventTransOrigin.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on an <c>InventQualityOrderTable</c> buffer.
    /// </summary>
    /// <param name="_orderTable">
    ///    An <c>InventQualityOrderTable</c> buffer.
    /// </param>
    protected void initFromQualityOrder(InventQualityOrderTable _orderTable)
    {
        this.parmBuffer(PurchLine::findInventTransId(_orderTable.InventRefTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDirection</Name>
				<Source><![CDATA[
    public InventDirection inventDirection()
    {
        return InventDirection::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemOrderSetupType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventItemOrderSetupType</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventItemOrderSetupType</c> value.
    /// </returns>
    public InventItemOrderSetupType inventItemOrderSetupType()
    {
        return InventItemOrderSetupType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventRefId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventRefId</c> value.
    /// </returns>
    public InventRefId inventRefId()
    {
        return purchLine.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventSiteId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventSiteId</c> value.
    /// </returns>
    public InventSiteId inventSiteId()
    {
        return purchLine.inventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTransId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTransId</c> value.
    /// </returns>
    public InventTransId inventTransId()
    {
        return purchLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEligibleForQualityManagement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the reference document is eligible for quality management.
    /// </summary>
    /// <returns>
    ///    true if the reference document is eligible; otherwise, false.
    /// </returns>
    public boolean isEligibleForQualityManagement()
    {
        // do not create quality orders for return purchase orders
        if (purchLine.QtyOrdered <= 0)
        {
            return false;
        }

        // do not create quality orders for purchase lines with direct delivery
        if (purchLine.DeliveryType == TradeLineDlvType::DropShip)
        {
            return false;
        }

        // do not create quality orders for canceled purchase lines
        if (purchLine.isCanceled())
        {
            return false;
        }

        // do not create quality orders for non-inventoried lines
        if (!purchLine.isStocked())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = purchLine)
    {
        if (_buffer is PurchParmLine)
        {
            PurchParmLine purchParmLine = _buffer as PurchParmLine;
            purchLine = purchParmLine.purchLine();
            bufferInventDimId = purchParmLine.InventDimId;
        }
        else
        {
            purchLine     = _buffer;
            if (bufferInventDimId == '' || !InventQualityOrderCreatedByDimensionFlight::instance().isEnabled())
            {
                bufferInventDimId = purchLine.InventDimId;
            }
        }

        defaultDimension  = purchLine.DefaultDimension ? purchLine.DefaultDimension : defaultDimension;
        inventDimId		  = purchLine.InventDimId      ? purchLine.InventDimId      : inventDimId;
        itemId            = purchLine.ItemId           ? purchLine.ItemId           : itemId;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the quality order that is selected can update the purchase line inventory batch
    /// attributes.
    /// </summary>
    /// <param name="_orderTable">
    /// The inventory quality order selected.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    protected boolean pdsBatchAttribCheck(InventQualityOrderTable _orderTable)
    {
        VendPackingSlipTrans    vendPackingSlipTrans;
        boolean                 ret = super(_orderTable);

        if (ret
            && pdsBatchAttribUpdateType == PdsBatchAttribUpdateType::Registration)
        {
            select firstonly RecId from vendPackingSlipTrans
                where vendPackingSlipTrans.InventTransId == purchLine.InventTransId;

            if (vendPackingSlipTrans.RecId)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTestReferenceType</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTestReferenceType</c> value.
    /// </returns>
    public InventTestReferenceType referenceType()
    {
        return InventTestReferenceType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryInventTransOrdering</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ordering of the transactions for the <c>InventTrans</c> table data source based on the
    /// document status and test execution values.
    /// </summary>
    /// <param name="_qbdsInventTrans">
    /// A query build data source object that is related to the <c>InventTrans</c> table.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    /// A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    /// A test execution value.
    /// </param>
    protected void setQueryInventTransOrdering(
        QueryBuildDataSource        _qbdsInventTrans,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        InventQualityOrderPhysicalVoucherContext context = InventQualityOrderPhysicalVoucherContext::current();
        if(context && context.parmPhysicalVoucherForBlocking())
        {
            _qbdsInventTrans.addRange(fieldnum(InventTrans, VoucherPhysical)).value(queryValue(context.parmPhysicalVoucherForBlocking()));
        }

        if (    _inventTestDocumentStatus   == InventTestDocumentStatus::ProductReceipt
            &&  _inventTestExecution        == InventTestExecution::After)
        {
            // first take those most recently received
            this.setQueryInventTransOrderingPhysicalVouch(_qbdsInventTrans);
        }
        else
        {
            super(_qbdsInventTrans, _inventTestDocumentStatus, _inventTestExecution);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusReceiptRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a range value for the <c>StatusReceipt</c> field on the data source of the <c>InventTrans</c>
    ///    table that is based on the document status and test execution values.
    /// </summary>
    /// <param name="_qbrStatusReceipt">
    ///    A query build range object.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    ///    A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    ///    A test execution value.
    /// </param>
    protected void setStatusReceiptRangeValue(
        QueryBuildRange             _qbrStatusReceipt,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        if (        _inventTestDocumentStatus   == InventTestDocumentStatus::ProductReceipt
            &&      _inventTestExecution        == InventTestExecution::Before)
        {
            _qbrStatusReceipt.value(SysQuery::range(StatusReceipt::Registered, StatusReceipt::Ordered));
        }
        else if (   _inventTestDocumentStatus   == InventTestDocumentStatus::ProductReceipt
            &&      _inventTestExecution        == InventTestExecution::After)
        {
            _qbrStatusReceipt.value(queryValue(StatusReceipt::Received));
        }
        else
        {
            _qbrStatusReceipt.value(queryValue(StatusReceipt::Ordered));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsInventoryBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether quality orders for purchase orders support blocking for receipts.
    /// </summary>
    /// <returns>
    /// true if the quality orders support blocking for receipts; otherwise, false.
    /// </returns>
    public boolean supportsInventoryBlocking()
    {
        if (purchLine.QtyOrdered <= 0)
        {
            // Returning items
            return false;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQualityReferenceTypePurchase construct()
    {
        return new InventQualityReferenceTypePurchase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>