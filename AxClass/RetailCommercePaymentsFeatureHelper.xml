<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommercePaymentsFeatureHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

/// <summary>
/// The <c>RetailCommercePaymentFeatureHelper</c> is a helper on checking whether the commerce payment feature is enabled.
/// </summary>
internal class RetailCommercePaymentsFeatureHelper
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEnableCommercePayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the commerce payment feature is enabled.
    /// </summary>
    /// <param name = "throwsError">
    ///     Disables throwing of error when the feature is disabled .
    /// </param>
    /// <returns>True if commerce payment feature logic is enabled; false, otherwise.</returns>
    /// <remark>If the feature is enabled but the shared parameter is disabled an error is thrown if _throwsError is not explicitly disabled as this will cause issue during payments processing.</remark>
    public static boolean isEnableCommercePayments(boolean _throwsError = true)
    {
        boolean ret = false;

        if (RetailCommercePaymentsFeatureExposure::isEnabled())
        {
            if (RetailSharedParameters::find().EnableOmniChannelPayments)
            {
                ret = true;
            }
            else if (_throwsError)
            {
                eventSource.EventWritePaymentsCommerceChannelPaymentsCheckError();

                throw error(strFmt("@Retail:RetailCommercePaymentsFeatureAndOmniChannelPaymentsMismatch", "@Retail:RetailEnableOmniChannelPayments"));
            }
        }

        eventSource.EventWritePaymentsCommerceChannelPaymentsCheck(ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentsType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the payments type which should be stamped on the order.
    /// </summary>
    /// <param name = "_custOrderInfo">
    ///     The customer order information.
    /// </param>
    /// <returns> Commerce if RetailCommercePaymentsFeature is enabled and not statement posting order; Legacy, otherwise.</returns>
    /// <remark>May throw error based on call to isEnableCommercePayments().</remark>
    public static RetailPaymentsType getPaymentsType(CustomerOrderInfo _custOrderInfo = null)
    {
        RetailPaymentsType type;
  
        // For orders coming from Call Center we should default to CallCenter
        if (!_custOrderInfo)
        {
            type = RetailPaymentsType::CallCenter;
        }
        // For orders coming from statement posting we should default to Legacy
        else if (_custOrderInfo.StatementId != '')
        {
            type = RetailPaymentsType::Legacy;
        }
        else
        {
            type = RetailCommercePaymentsFeatureHelper::isEnableCommercePayments() ? RetailPaymentsType::Commerce : RetailPaymentsType::Legacy;
        }

        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commercePaymentsEnabledForOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if commerce payments are enabled for an order.
    /// </summary>
    /// <param name = "salesTable">
    ///     The sales table.
    /// </param>
    /// <param name = "callerMethod">
    ///     The caller method.
    /// </param>
    /// <returns> True if isEnableCommercePayments and the order has payments type commerce; false, otherwise.</returns>
    /// <remark>May throw error based on call to isEnableCommercePayments().</remark>    
    public static boolean commercePaymentsEnabledForOrder(SalesTable _salesTable, String255 _callerMethod)
    {
        RetailPaymentsType paymentType = _salesTable.retailSalesTable().PaymentsType;
        boolean result = (paymentType == RetailPaymentsType::Commerce) && RetailCommercePaymentsFeatureHelper::isEnableCommercePayments();

        eventSource.EventWritePaymentsCheckingIfCommercePaymentsEnabledForOrder(_salesTable.RecId, enum2Str(paymentType), result, _callerMethod);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commercePaymentsOrderWhenFeatureDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if an order has payments type commerce but the feature is disabled.
    /// </summary>
    /// <param name = "salesTable">
    ///     The sales table.
    /// </param>
    /// <returns> True if order is has payments type commerce however the feature is disabled; otherwise, false.</returns>
    /// <remark>May throw error based on call to isEnableCommercePayments().</remark>
    public static boolean commercePaymentsOrderWhenFeatureDisabled(SalesTable _salesTable)
    {
        boolean ret = _salesTable.retailSalesTable().PaymentsType == RetailPaymentsType::Commerce && !RetailCommercePaymentsFeatureHelper::isEnableCommercePayments();

        if (ret)
        {
            eventSource.EventWritePaymentsCommercePaymentsOrderWhenFeatureDisabledWarning(_salesTable.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commercePaymentsEnabledForOrderThroughContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if commerce payments are enabled for an order based on the context object.
    /// </summary>
    /// <returns> True if parmCommercePaymentsEnabledForOrder on the context object; false, otherwise.</returns>
    public static boolean commercePaymentsEnabledForOrderThroughContext()
    {
        RetailCommercePaymentsFeatureContext context = RetailCommercePaymentsFeatureContext::current();
        return context != null && context.parmCommercePaymentsEnabledForOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerOrderVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the customer order creation/modification is possible with the customerOrderInfo version if the feature is enabled.
    /// </summary>
    /// <param name = "_custOrderInfo">
    ///     The customer order information.
    /// </param>
    /// <param name = "salesTable">
    ///     The sales table.
    /// </param>
    /// <returns>A container containing success of true and a blank error message; otherwise, success of false and an error message.</returns>
    public static container validateCustomerOrderVersion(CustomerOrderInfo _custOrderInfo, SalesTable _salesTable = null)
    {
        str     error = '';
        boolean success = true;

        boolean shouldValidatePaymentsAvailable = _salesTable ? _salesTable.retailSalesTable().PaymentsType == RetailPaymentsType::Commerce : _custOrderInfo.StatementId == '';

        // Validate only when payments type is Commerce or not coming from statement posting, ultimately only validating eCommerce/POS
        if (shouldValidatePaymentsAvailable && RetailCommercePaymentsFeatureHelper::isEnableCommercePayments(false) && !CustomerOrderContractVersionHelper::IsCommercePaymentsAvailable(_custOrderInfo.ContractVersion))
        {
            error = '@Retail:RetailCommercePaymentsCustomerOrderInfoVersionUnsupported';
            success = false;

            eventSource.EventWritePaymentsCommercePaymentsOrderWhenCustomerOrderinfoVersionUnsupportedError(_salesTable.RecId);
        }
        else if (_salesTable)
        {
            [success, error] = RetailCommercePaymentsFeatureHelper::validateCommercePaymentsModificationHasFeatureEnabled(_salesTable);
        }
  
        return [success, error];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCommercePaymentsModificationHasFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the customer order modification for Commerce Payments has the feature enabled.
    /// </summary>
    /// <param name = "salesTable">
    ///     The sales table.
    /// </param>
    /// <returns>A container containing success of true and a blank error message; otherwise, success of false and an error message.</returns>
    public static container validateCommercePaymentsModificationHasFeatureEnabled(SalesTable _salesTable)
    {
        str     error = '';
        boolean success = true;

        if (RetailCommercePaymentsFeatureHelper::commercePaymentsOrderWhenFeatureDisabled(_salesTable))
        {
            error = '@Retail:RetailCommercePaymentsFeatureDisabledAfterCreation';
            success = false;

            eventSource.EventWritePaymentsCommercePaymentsOrderWhenFeatureDisabledError(_salesTable.RecId);
        }

        return [success, error];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>